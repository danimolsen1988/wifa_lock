
c:/Users/Keld/Documents/engineer/IoT/tlsClient-argon/target/1.5.2/argon/tlsClient-argon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0001ba80  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000efaa0  000efaa0  0001faa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000efaa8  0002f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000130  2003ab74  000efaac  0003ab74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00003b4c  2003aca8  2003aca8  0004aca8  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000efbdc  000efbdc  0003fbdc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000efc04  000efc04  0003fc04  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00160b59  00000000  00000000  0003fc08  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0001d61d  00000000  00000000  001a0761  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00053b1d  00000000  00000000  001bdd7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00004388  00000000  00000000  0021189b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000076b0  00000000  00000000  00215c23  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00046a5b  00000000  00000000  0021d2d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0004992d  00000000  00000000  00263d2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00126bb7  00000000  00000000  002ad65b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00014594  00000000  00000000  003d4214  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f015 fd40 	bl	e9ab6 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f015 fd60 	bl	e9b02 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003ab74 	.word	0x2003ab74
   d404c:	000efaac 	.word	0x000efaac
   d4050:	2003aca4 	.word	0x2003aca4
   d4054:	2003aca8 	.word	0x2003aca8
   d4058:	2003e7f4 	.word	0x2003e7f4

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f013 f805 	bl	e706c <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000efa98 	.word	0x000efa98
   d4084:	000efa4c 	.word	0x000efa4c

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b884 	b.w	d4194 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 fa1d 	bl	d44cc <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f012 bfab 	b.w	e6ff0 <_post_loop>

000d409a <_Znwj>:
   d409a:	f012 b80b 	b.w	e60b4 <malloc>

000d409e <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409e:	f012 b809 	b.w	e60b4 <malloc>

000d40a2 <_ZdlPv>:
   d40a2:	f012 b80f 	b.w	e60c4 <free>

000d40a6 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a6:	f012 b80d 	b.w	e60c4 <free>
	...

000d40ac <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40ac:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40ae:	4a03      	ldr	r2, [pc, #12]	; (d40bc <__cxa_pure_virtual+0x10>)
   d40b0:	2100      	movs	r1, #0
   d40b2:	200c      	movs	r0, #12
   d40b4:	f011 ff20 	bl	e5ef8 <panic_>
   d40b8:	e7fe      	b.n	d40b8 <__cxa_pure_virtual+0xc>
   d40ba:	bf00      	nop
   d40bc:	000e5be9 	.word	0x000e5be9

000d40c0 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40c0:	7800      	ldrb	r0, [r0, #0]
   d40c2:	fab0 f080 	clz	r0, r0
   d40c6:	0940      	lsrs	r0, r0, #5
   d40c8:	4770      	bx	lr

000d40ca <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ca:	2301      	movs	r3, #1
   d40cc:	7003      	strb	r3, [r0, #0]
   d40ce:	4770      	bx	lr

000d40d0 <_ZN24SystemSleepConfigurationD1Ev>:
        config.config_.wakeup_sources = nullptr;
        return *this;
    }

    // Destructor
    ~SystemSleepConfiguration() {
   d40d0:	b538      	push	{r3, r4, r5, lr}
   d40d2:	4604      	mov	r4, r0
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
   d40d4:	6900      	ldr	r0, [r0, #16]
        while (wakeupSource) {
   d40d6:	b128      	cbz	r0, d40e4 <_ZN24SystemSleepConfigurationD1Ev+0x14>
            auto next = wakeupSource->next;
   d40d8:	6885      	ldr	r5, [r0, #8]
            delete wakeupSource;
   d40da:	210c      	movs	r1, #12
   d40dc:	f014 f9ae 	bl	e843c <_ZdlPvj>
            wakeupSource = next;
   d40e0:	4628      	mov	r0, r5

    // Destructor
    ~SystemSleepConfiguration() {
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
        while (wakeupSource) {
   d40e2:	e7f8      	b.n	d40d6 <_ZN24SystemSleepConfigurationD1Ev+0x6>
            auto next = wakeupSource->next;
            delete wakeupSource;
            wakeupSource = next;
        }
    }
   d40e4:	4620      	mov	r0, r4
   d40e6:	bd38      	pop	{r3, r4, r5, pc}

000d40e8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.3.constprop.37>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d40e8:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d40ea:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d40ec:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d40ee:	689b      	ldr	r3, [r3, #8]
   d40f0:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d40f2:	68a3      	ldr	r3, [r4, #8]
   d40f4:	3b01      	subs	r3, #1
   d40f6:	60a3      	str	r3, [r4, #8]
   d40f8:	b92b      	cbnz	r3, d4106 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.3.constprop.37+0x1e>
            _M_destroy();
   d40fa:	6823      	ldr	r3, [r4, #0]
   d40fc:	4620      	mov	r0, r4
   d40fe:	68db      	ldr	r3, [r3, #12]
        }
    }
   d4100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d4104:	4718      	bx	r3
   d4106:	bd10      	pop	{r4, pc}

000d4108 <_ZNSt6vectorIhSaIhEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
   d4108:	b510      	push	{r4, lr}
   d410a:	4604      	mov	r4, r0
      }
#endif

      ~_Vector_base() _GLIBCXX_NOEXCEPT
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start); }
   d410c:	6800      	ldr	r0, [r0, #0]

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
   d410e:	b108      	cbz	r0, d4114 <_ZNSt6vectorIhSaIhEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d4110:	f7ff ffc7 	bl	d40a2 <_ZdlPv>
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator()); }
   d4114:	4620      	mov	r0, r4
   d4116:	bd10      	pop	{r4, pc}

000d4118 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d4118:	b510      	push	{r4, lr}
   d411a:	4b06      	ldr	r3, [pc, #24]	; (d4134 <_ZN9TCPClientD1Ev+0x1c>)
   d411c:	6003      	str	r3, [r0, #0]
   d411e:	4604      	mov	r4, r0
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4120:	6980      	ldr	r0, [r0, #24]
   d4122:	b128      	cbz	r0, d4130 <_ZN9TCPClientD1Ev+0x18>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4124:	6843      	ldr	r3, [r0, #4]
   d4126:	3b01      	subs	r3, #1
   d4128:	6043      	str	r3, [r0, #4]
   d412a:	b90b      	cbnz	r3, d4130 <_ZN9TCPClientD1Ev+0x18>
   d412c:	f7ff ffdc 	bl	d40e8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.3.constprop.37>
   d4130:	4620      	mov	r0, r4
   d4132:	bd10      	pop	{r4, pc}
   d4134:	000ef31c 	.word	0x000ef31c

000d4138 <_ZN9TCPServerD1Ev>:
    sock_handle_t _sock;
    TCPClient _client;

public:
    TCPServer(uint16_t, network_interface_t nif=0);
    ~TCPServer() { stop(); }
   d4138:	b538      	push	{r3, r4, r5, lr}
   d413a:	4604      	mov	r4, r0
   d413c:	4b05      	ldr	r3, [pc, #20]	; (d4154 <_ZN9TCPServerD1Ev+0x1c>)
   d413e:	f844 3b14 	str.w	r3, [r4], #20
   d4142:	4605      	mov	r5, r0
   d4144:	f012 fe06 	bl	e6d54 <_ZN9TCPServer4stopEv>
   d4148:	4620      	mov	r0, r4
   d414a:	f7ff ffe5 	bl	d4118 <_ZN9TCPClientD1Ev>
   d414e:	4628      	mov	r0, r5
   d4150:	bd38      	pop	{r3, r4, r5, pc}
   d4152:	bf00      	nop
   d4154:	000ef20c 	.word	0x000ef20c

000d4158 <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t>:
    hal_wakeup_source_base_t* wakeupSource() const {
        return config_->wakeup_sources;
    }

    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type) const {
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d4158:	6803      	ldr	r3, [r0, #0]
   d415a:	68d8      	ldr	r0, [r3, #12]
    }

    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type, hal_wakeup_source_base_t* start) const {
        if (!start) {
   d415c:	b120      	cbz	r0, d4168 <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t+0x10>
            return nullptr;
        }
        while (start) {
            if (start->type == type) {
   d415e:	8883      	ldrh	r3, [r0, #4]
   d4160:	428b      	cmp	r3, r1
   d4162:	d001      	beq.n	d4168 <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t+0x10>
                return start;
            }
            start = start->next;
   d4164:	6880      	ldr	r0, [r0, #8]
   d4166:	e7f9      	b.n	d415c <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t+0x4>
        return config_->wakeup_sources;
    }

    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type) const {
        return wakeupSourceFeatured(type, config_->wakeup_sources);
    }
   d4168:	4770      	bx	lr

000d416a <_ZN9TCPClientD0Ev>:
   d416a:	b510      	push	{r4, lr}
   d416c:	4604      	mov	r4, r0
   d416e:	f7ff ffd3 	bl	d4118 <_ZN9TCPClientD1Ev>
   d4172:	4620      	mov	r0, r4
   d4174:	211c      	movs	r1, #28
   d4176:	f014 f961 	bl	e843c <_ZdlPvj>
   d417a:	4620      	mov	r0, r4
   d417c:	bd10      	pop	{r4, pc}

000d417e <_ZN9TCPServerD0Ev>:
   d417e:	b510      	push	{r4, lr}
   d4180:	4604      	mov	r4, r0
   d4182:	f7ff ffd9 	bl	d4138 <_ZN9TCPServerD1Ev>
   d4186:	4620      	mov	r0, r4
   d4188:	2130      	movs	r1, #48	; 0x30
   d418a:	f014 f957 	bl	e843c <_ZdlPvj>
   d418e:	4620      	mov	r0, r4
   d4190:	bd10      	pop	{r4, pc}
	...

000d4194 <setup>:
std::vector<uint8_t> imgVector;
SystemSleepConfiguration sleepcfg;

bool camLoop();

void setup() {
   d4194:	b5f0      	push	{r4, r5, r6, r7, lr}
        return true;
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
   d4196:	4c48      	ldr	r4, [pc, #288]	; (d42b8 <setup+0x124>)
   d4198:	b08b      	sub	sp, #44	; 0x2c
    delay(2000);    // was here--------------------------------
   d419a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d419e:	f012 fd15 	bl	e6bcc <delay>
   d41a2:	7d23      	ldrb	r3, [r4, #20]
   d41a4:	b303      	cbz	r3, d41e8 <setup+0x54>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d41a6:	2301      	movs	r3, #1
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
            // Check if RTC has been configured as wakeup source.
            auto wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_RTC);
   d41a8:	2104      	movs	r1, #4
   d41aa:	4620      	mov	r0, r4
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d41ac:	7223      	strb	r3, [r4, #8]
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
            // Check if RTC has been configured as wakeup source.
            auto wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_RTC);
   d41ae:	f7ff ffd3 	bl	d4158 <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t>
            if (wakeup) {
   d41b2:	4606      	mov	r6, r0
   d41b4:	b110      	cbz	r0, d41bc <setup+0x28>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   d41b6:	4b41      	ldr	r3, [pc, #260]	; (d42bc <setup+0x128>)
   d41b8:	60c3      	str	r3, [r0, #12]
   d41ba:	e015      	b.n	d41e8 <setup+0x54>
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d41bc:	4940      	ldr	r1, [pc, #256]	; (d42c0 <setup+0x12c>)
   d41be:	2010      	movs	r0, #16
   d41c0:	f014 f940 	bl	e8444 <_ZnwjRKSt9nothrow_t>
   d41c4:	4605      	mov	r5, r0
   d41c6:	2800      	cmp	r0, #0
   d41c8:	d071      	beq.n	d42ae <setup+0x11a>
   d41ca:	2710      	movs	r7, #16
   d41cc:	463a      	mov	r2, r7
   d41ce:	4631      	mov	r1, r6
   d41d0:	f015 fc97 	bl	e9b02 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
            wakeupSource->base.version = HAL_SLEEP_VERSION;
   d41d4:	2302      	movs	r3, #2
   d41d6:	806b      	strh	r3, [r5, #2]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d41d8:	2304      	movs	r3, #4
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d41da:	802f      	strh	r7, [r5, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d41dc:	80ab      	strh	r3, [r5, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d41de:	6923      	ldr	r3, [r4, #16]
   d41e0:	60ab      	str	r3, [r5, #8]
            wakeupSource->ms = ms;
   d41e2:	4b36      	ldr	r3, [pc, #216]	; (d42bc <setup+0x128>)
   d41e4:	60eb      	str	r3, [r5, #12]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d41e6:	6125      	str	r5, [r4, #16]
    SystemSleepConfiguration& duration(std::chrono::milliseconds ms) {
        return duration(ms.count());
    }

    SystemSleepConfiguration& network(network_interface_t netif) {
        if (valid_) {
   d41e8:	7d23      	ldrb	r3, [r4, #20]
   d41ea:	b31b      	cbz	r3, d4234 <setup+0xa0>
            auto wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_NETWORK);
   d41ec:	210e      	movs	r1, #14
   d41ee:	4832      	ldr	r0, [pc, #200]	; (d42b8 <setup+0x124>)
   d41f0:	f7ff ffb2 	bl	d4158 <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t>
            while (wakeup) {
   d41f4:	b140      	cbz	r0, d4208 <setup+0x74>
                auto networkWakeup = reinterpret_cast<hal_wakeup_source_network_t*>(wakeup);
                if (networkWakeup->index == netif) {
   d41f6:	7b03      	ldrb	r3, [r0, #12]
   d41f8:	2b04      	cmp	r3, #4
   d41fa:	d01b      	beq.n	d4234 <setup+0xa0>
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_NETWORK, wakeup->next);
   d41fc:	6880      	ldr	r0, [r0, #8]
    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type) const {
        return wakeupSourceFeatured(type, config_->wakeup_sources);
    }

    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type, hal_wakeup_source_base_t* start) const {
        if (!start) {
   d41fe:	b118      	cbz	r0, d4208 <setup+0x74>
            return nullptr;
        }
        while (start) {
            if (start->type == type) {
   d4200:	8883      	ldrh	r3, [r0, #4]
   d4202:	2b0e      	cmp	r3, #14
   d4204:	d1fa      	bne.n	d41fc <setup+0x68>
   d4206:	e7f5      	b.n	d41f4 <setup+0x60>
                if (networkWakeup->index == netif) {
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_NETWORK, wakeup->next);
            }
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_network_t();
   d4208:	492d      	ldr	r1, [pc, #180]	; (d42c0 <setup+0x12c>)
   d420a:	2010      	movs	r0, #16
   d420c:	f014 f91a 	bl	e8444 <_ZnwjRKSt9nothrow_t>
   d4210:	4605      	mov	r5, r0
   d4212:	2800      	cmp	r0, #0
   d4214:	d04d      	beq.n	d42b2 <setup+0x11e>
   d4216:	2610      	movs	r6, #16
   d4218:	4632      	mov	r2, r6
   d421a:	2100      	movs	r1, #0
   d421c:	f015 fc71 	bl	e9b02 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
            wakeupSource->base.version = HAL_SLEEP_VERSION;
   d4220:	2302      	movs	r3, #2
   d4222:	806b      	strh	r3, [r5, #2]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_NETWORK;
   d4224:	230e      	movs	r3, #14
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_network_t();
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   d4226:	802e      	strh	r6, [r5, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_NETWORK;
   d4228:	80ab      	strh	r3, [r5, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d422a:	6923      	ldr	r3, [r4, #16]
   d422c:	60ab      	str	r3, [r5, #8]
            wakeupSource->index = static_cast<network_interface_index>(netif);
   d422e:	2304      	movs	r3, #4
   d4230:	732b      	strb	r3, [r5, #12]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d4232:	6125      	str	r5, [r4, #16]
    sleepcfg.mode(SystemSleepMode::STOP)
    .duration(1000*60*60)
    .network(NETWORK_INTERFACE_WIFI_STA);
#if DEBUG_AZURE == 1
    Serial.begin(115200);
   d4234:	f013 f830 	bl	e7298 <_Z16_fetch_usbserialv>
   d4238:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d423c:	f013 f820 	bl	e7280 <_ZN9USBSerial5beginEl>
    Serial.println(Time.timeStr());
   d4240:	f013 f82a 	bl	e7298 <_Z16_fetch_usbserialv>
   d4244:	4604      	mov	r4, r0
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   d4246:	f012 fca4 	bl	e6b92 <_ZN9TimeClass3nowEv>
   d424a:	4601      	mov	r1, r0
   d424c:	a804      	add	r0, sp, #16
   d424e:	f012 fc5d 	bl	e6b0c <_ZN9TimeClass7timeStrEl>
   d4252:	9904      	ldr	r1, [sp, #16]
   d4254:	4620      	mov	r0, r4
   d4256:	f012 fb24 	bl	e68a2 <_ZN5Print7printlnEPKc>
   d425a:	a804      	add	r0, sp, #16
   d425c:	f012 f944 	bl	e64e8 <_ZN6StringD1Ev>
    Serial.println(WiFi.localIP().toString());
   d4260:	f013 f81a 	bl	e7298 <_Z16_fetch_usbserialv>
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    WLanConfig* wifi_config() {
        return (WLanConfig*)network_config(*this, 0, NULL);
   d4264:	4b17      	ldr	r3, [pc, #92]	; (d42c4 <setup+0x130>)
   d4266:	2200      	movs	r2, #0
   d4268:	4611      	mov	r1, r2
   d426a:	4604      	mov	r4, r0
   d426c:	6858      	ldr	r0, [r3, #4]
   d426e:	f011 fea1 	bl	e5fb4 <network_config>
        memcpy(mac, wifi_config()->nw.uaMacAddr, 6);
        return mac;
    }

    IPAddress localIP() {
        return IPAddress(wifi_config()->nw.aucIP);
   d4272:	1c81      	adds	r1, r0, #2
   d4274:	a804      	add	r0, sp, #16
   d4276:	f012 ff6d 	bl	e7154 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }

    String toString() const { return String(*this); }
   d427a:	a904      	add	r1, sp, #16
   d427c:	4668      	mov	r0, sp
   d427e:	f012 fa7f 	bl	e6780 <_ZN6StringC1ERK9Printable>
   d4282:	9900      	ldr	r1, [sp, #0]
   d4284:	4620      	mov	r0, r4
   d4286:	f012 fb0c 	bl	e68a2 <_ZN5Print7printlnEPKc>
   d428a:	4668      	mov	r0, sp
   d428c:	f012 f92c 	bl	e64e8 <_ZN6StringD1Ev>
#endif
    hw.setup();
   d4290:	480d      	ldr	r0, [pc, #52]	; (d42c8 <setup+0x134>)
   d4292:	f011 fbd2 	bl	e5a3a <_ZN17HardwareInterface5setupEv>
    client.setup();
   d4296:	480d      	ldr	r0, [pc, #52]	; (d42cc <setup+0x138>)
   d4298:	f000 fa24 	bl	d46e4 <_ZN16TlsClientHandler5setupEv>
    server.begin();
   d429c:	480c      	ldr	r0, [pc, #48]	; (d42d0 <setup+0x13c>)
   d429e:	f012 fd65 	bl	e6d6c <_ZN9TCPServer5beginEv>
    hw.openLock(0);
   d42a2:	2100      	movs	r1, #0
   d42a4:	4808      	ldr	r0, [pc, #32]	; (d42c8 <setup+0x134>)
   d42a6:	f011 fbe5 	bl	e5a74 <_ZN17HardwareInterface8openLockEi>
}
   d42aa:	b00b      	add	sp, #44	; 0x2c
   d42ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
            if (!wakeupSource) {
                valid_ = false;
   d42ae:	7520      	strb	r0, [r4, #20]
   d42b0:	e79a      	b.n	d41e8 <setup+0x54>
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_NETWORK, wakeup->next);
            }
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_network_t();
            if (!wakeupSource) {
                valid_ = false;
   d42b2:	7520      	strb	r0, [r4, #20]
   d42b4:	e7be      	b.n	d4234 <setup+0xa0>
   d42b6:	bf00      	nop
   d42b8:	2003c1f0 	.word	0x2003c1f0
   d42bc:	0036ee80 	.word	0x0036ee80
   d42c0:	000ef40f 	.word	0x000ef40f
   d42c4:	2003e6ec 	.word	0x2003e6ec
   d42c8:	2003c1d0 	.word	0x2003c1d0
   d42cc:	2003ace8 	.word	0x2003ace8
   d42d0:	2003acac 	.word	0x2003acac

000d42d4 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
  template<bool _IsMove>
    struct __copy_move<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
   d42d4:	b510      	push	{r4, lr}
	  // trivial types can have deleted assignment
	  static_assert( is_copy_assignable<_Tp>::value,
	                 "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
   d42d6:	1a0c      	subs	r4, r1, r0
  template<bool _IsMove>
    struct __copy_move<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
   d42d8:	4613      	mov	r3, r2
	  // trivial types can have deleted assignment
	  static_assert( is_copy_assignable<_Tp>::value,
	                 "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
   d42da:	d005      	beq.n	d42e8 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x14>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d42dc:	4601      	mov	r1, r0
   d42de:	4622      	mov	r2, r4
   d42e0:	4618      	mov	r0, r3
   d42e2:	f015 fbf3 	bl	e9acc <memmove>
   d42e6:	4603      	mov	r3, r0
	  return __result + _Num;
	}
   d42e8:	1918      	adds	r0, r3, r4
   d42ea:	bd10      	pop	{r4, pc}

000d42ec <_ZNSt6vectorIhSaIhEE15_M_range_insertIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag>:
      void
      vector<_Tp, _Alloc>::
      _M_range_insert(iterator __position, _ForwardIterator __first,
		      _ForwardIterator __last, std::forward_iterator_tag)
      {
	if (__first != __last)
   d42ec:	429a      	cmp	r2, r3
      }

  template<typename _Tp, typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<_Tp, _Alloc>::
   d42ee:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d42f2:	4605      	mov	r5, r0
   d42f4:	460f      	mov	r7, r1
   d42f6:	4690      	mov	r8, r2
   d42f8:	4699      	mov	r9, r3
      _M_range_insert(iterator __position, _ForwardIterator __first,
		      _ForwardIterator __last, std::forward_iterator_tag)
      {
	if (__first != __last)
   d42fa:	d067      	beq.n	d43cc <_ZNSt6vectorIhSaIhEE15_M_range_insertIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0xe0>
	  {
	    const size_type __n = std::distance(__first, __last);
   d42fc:	1a9c      	subs	r4, r3, r2
	    if (size_type(this->_M_impl._M_end_of_storage
			  - this->_M_impl._M_finish) >= __n)
   d42fe:	6846      	ldr	r6, [r0, #4]
		      _ForwardIterator __last, std::forward_iterator_tag)
      {
	if (__first != __last)
	  {
	    const size_type __n = std::distance(__first, __last);
	    if (size_type(this->_M_impl._M_end_of_storage
   d4300:	6883      	ldr	r3, [r0, #8]
   d4302:	1b9b      	subs	r3, r3, r6
   d4304:	429c      	cmp	r4, r3
   d4306:	d831      	bhi.n	d436c <_ZNSt6vectorIhSaIhEE15_M_range_insertIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0x80>
			  - this->_M_impl._M_finish) >= __n)
	      {
		const size_type __elems_after = end() - __position;
   d4308:	ebc1 0a06 	rsb	sl, r1, r6
		pointer __old_finish(this->_M_impl._M_finish);
		if (__elems_after > __n)
   d430c:	4554      	cmp	r4, sl
   d430e:	d213      	bcs.n	d4338 <_ZNSt6vectorIhSaIhEE15_M_range_insertIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0x4c>
		  {
		    std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
   d4310:	ebc4 0a06 	rsb	sl, r4, r6
	                     && __is_pointer<_II>::__value
	                     && __is_pointer<_OI>::__value
			     && __are_same<_ValueTypeI, _ValueTypeO>::__value);

      return std::__copy_move<_IsMove, __simple,
	                      _Category>::__copy_m(__first, __last, __result);
   d4314:	4632      	mov	r2, r6
   d4316:	4631      	mov	r1, r6
   d4318:	4650      	mov	r0, sl
   d431a:	f7ff ffdb 	bl	d42d4 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
						this->_M_impl._M_finish,
						this->_M_impl._M_finish,
						_M_get_Tp_allocator());
		    this->_M_impl._M_finish += __n;
   d431e:	686a      	ldr	r2, [r5, #4]
   d4320:	4414      	add	r4, r2
	  // trivial types can have deleted assignment
	  static_assert( is_copy_assignable<_Tp>::value,
	                 "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
   d4322:	ebba 0207 	subs.w	r2, sl, r7
   d4326:	606c      	str	r4, [r5, #4]
   d4328:	d003      	beq.n	d4332 <_ZNSt6vectorIhSaIhEE15_M_range_insertIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0x46>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   d432a:	4639      	mov	r1, r7
   d432c:	1ab0      	subs	r0, r6, r2
   d432e:	f015 fbcd 	bl	e9acc <memmove>
	                     && __is_pointer<_II>::__value
	                     && __is_pointer<_OI>::__value
			     && __are_same<_ValueTypeI, _ValueTypeO>::__value);

      return std::__copy_move<_IsMove, __simple,
	                      _Category>::__copy_m(__first, __last, __result);
   d4332:	463a      	mov	r2, r7
   d4334:	4649      	mov	r1, r9
   d4336:	e014      	b.n	d4362 <_ZNSt6vectorIhSaIhEE15_M_range_insertIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0x76>
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
   d4338:	eb02 0b0a 	add.w	fp, r2, sl
   d433c:	4649      	mov	r1, r9
   d433e:	4632      	mov	r2, r6
   d4340:	4658      	mov	r0, fp
   d4342:	f7ff ffc7 	bl	d42d4 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
		    _ForwardIterator __mid = __first;
		    std::advance(__mid, __elems_after);
		    std::__uninitialized_copy_a(__mid, __last,
						this->_M_impl._M_finish,
						_M_get_Tp_allocator());
		    this->_M_impl._M_finish += __n - __elems_after;
   d4346:	686a      	ldr	r2, [r5, #4]
   d4348:	ebca 0404 	rsb	r4, sl, r4
   d434c:	4422      	add	r2, r4
   d434e:	606a      	str	r2, [r5, #4]
   d4350:	4631      	mov	r1, r6
   d4352:	4638      	mov	r0, r7
   d4354:	f7ff ffbe 	bl	d42d4 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
		    std::__uninitialized_move_a(__position.base(),
						__old_finish,
						this->_M_impl._M_finish,
						_M_get_Tp_allocator());
		    this->_M_impl._M_finish += __elems_after;
   d4358:	686b      	ldr	r3, [r5, #4]
   d435a:	4453      	add	r3, sl
   d435c:	606b      	str	r3, [r5, #4]
   d435e:	463a      	mov	r2, r7
   d4360:	4659      	mov	r1, fp
   d4362:	4640      	mov	r0, r8
   d4364:	f7ff ffb6 	bl	d42d4 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
   d4368:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d436c:	6803      	ldr	r3, [r0, #0]
   d436e:	1af6      	subs	r6, r6, r3

      // Called by the latter.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
   d4370:	43f3      	mvns	r3, r6
   d4372:	429c      	cmp	r4, r3
   d4374:	d902      	bls.n	d437c <_ZNSt6vectorIhSaIhEE15_M_range_insertIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0x90>
	  __throw_length_error(__N(__s));
   d4376:	4816      	ldr	r0, [pc, #88]	; (d43d0 <_ZNSt6vectorIhSaIhEE15_M_range_insertIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0xe4>)
   d4378:	f014 f876 	bl	e8468 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + std::max(size(), __n);
   d437c:	42b4      	cmp	r4, r6
   d437e:	bf2c      	ite	cs
   d4380:	1934      	addcs	r4, r6, r4
   d4382:	19b4      	addcc	r4, r6, r6
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d4384:	42a6      	cmp	r6, r4
   d4386:	d801      	bhi.n	d438c <_ZNSt6vectorIhSaIhEE15_M_range_insertIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0xa0>

      pointer
      _M_allocate(size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d4388:	b13c      	cbz	r4, d439a <_ZNSt6vectorIhSaIhEE15_M_range_insertIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0xae>
   d438a:	e001      	b.n	d4390 <_ZNSt6vectorIhSaIhEE15_M_range_insertIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0xa4>
      {
	if (max_size() - size() < __n)
	  __throw_length_error(__N(__s));

	const size_type __len = size() + std::max(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d438c:	f04f 34ff 	mov.w	r4, #4294967295
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d4390:	4620      	mov	r0, r4
   d4392:	f7ff fe82 	bl	d409a <_Znwj>
   d4396:	4606      	mov	r6, r0
   d4398:	e000      	b.n	d439c <_ZNSt6vectorIhSaIhEE15_M_range_insertIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0xb0>

      pointer
      _M_allocate(size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d439a:	4626      	mov	r6, r4
   d439c:	4639      	mov	r1, r7
   d439e:	4632      	mov	r2, r6
   d43a0:	6828      	ldr	r0, [r5, #0]
   d43a2:	f7ff ff97 	bl	d42d4 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
   d43a6:	4649      	mov	r1, r9
   d43a8:	4602      	mov	r2, r0
   d43aa:	4640      	mov	r0, r8
   d43ac:	f7ff ff92 	bl	d42d4 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
   d43b0:	6869      	ldr	r1, [r5, #4]
   d43b2:	4602      	mov	r2, r0
   d43b4:	4638      	mov	r0, r7
   d43b6:	f7ff ff8d 	bl	d42d4 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
   d43ba:	4607      	mov	r7, r0
		  }
		std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
			      _M_get_Tp_allocator());
		_M_deallocate(this->_M_impl._M_start,
			      this->_M_impl._M_end_of_storage
			      - this->_M_impl._M_start);
   d43bc:	6828      	ldr	r0, [r5, #0]

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
   d43be:	b108      	cbz	r0, d43c4 <_ZNSt6vectorIhSaIhEE15_M_range_insertIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0xd8>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d43c0:	f7ff fe6f 	bl	d40a2 <_ZdlPv>
		this->_M_impl._M_start = __new_start;
		this->_M_impl._M_finish = __new_finish;
   d43c4:	e885 00c0 	stmia.w	r5, {r6, r7}
		this->_M_impl._M_end_of_storage = __new_start + __len;
   d43c8:	4434      	add	r4, r6
   d43ca:	60ac      	str	r4, [r5, #8]
   d43cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d43d0:	000ebf18 	.word	0x000ebf18

000d43d4 <_Z7camLoopv>:
    }
    System.sleep(sleepcfg);
    Serial.println("do we sleep hera?");
}

bool camLoop() {
   d43d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d43d8:	4b35      	ldr	r3, [pc, #212]	; (d44b0 <_Z7camLoopv+0xdc>)
    buffersize = 0; 
   d43da:	4936      	ldr	r1, [pc, #216]	; (d44b4 <_Z7camLoopv+0xe0>)
    totalSize = 0;
   d43dc:	4f36      	ldr	r7, [pc, #216]	; (d44b8 <_Z7camLoopv+0xe4>)
   d43de:	6818      	ldr	r0, [r3, #0]
    System.sleep(sleepcfg);
    Serial.println("do we sleep hera?");
}

bool camLoop() {
    buffersize = 0; 
   d43e0:	2200      	movs	r2, #0
    }
    System.sleep(sleepcfg);
    Serial.println("do we sleep hera?");
}

bool camLoop() {
   d43e2:	b08b      	sub	sp, #44	; 0x2c
    buffersize = 0; 
   d43e4:	600a      	str	r2, [r1, #0]
    totalSize = 0;
   d43e6:	603a      	str	r2, [r7, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d43e8:	601a      	str	r2, [r3, #0]
   d43ea:	605a      	str	r2, [r3, #4]
   d43ec:	609a      	str	r2, [r3, #8]
   d43ee:	4688      	mov	r8, r1
   d43f0:	461e      	mov	r6, r3
   d43f2:	b108      	cbz	r0, d43f8 <_Z7camLoopv+0x24>
   d43f4:	f7ff fe55 	bl	d40a2 <_ZdlPv>
    std::vector<uint8_t>().swap(imgVector);
    tcpClient = server.available();
   d43f8:	4930      	ldr	r1, [pc, #192]	; (d44bc <_Z7camLoopv+0xe8>)
   d43fa:	a803      	add	r0, sp, #12
   d43fc:	f012 fd5e 	bl	e6ebc <_ZN9TCPServer9availableEv>
const unsigned char BIN = 2;

class String;
class __FlashStringHelper;

class Print
   d4400:	4b2f      	ldr	r3, [pc, #188]	; (d44c0 <_Z7camLoopv+0xec>)
   d4402:	9a04      	ldr	r2, [sp, #16]
   d4404:	605a      	str	r2, [r3, #4]
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
   d4406:	9a05      	ldr	r2, [sp, #20]
   d4408:	609a      	str	r2, [r3, #8]
   d440a:	9a06      	ldr	r2, [sp, #24]
   d440c:	60da      	str	r2, [r3, #12]
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   d440e:	9a07      	ldr	r2, [sp, #28]
   d4410:	611a      	str	r2, [r3, #16]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d4412:	9a08      	ldr	r2, [sp, #32]
   d4414:	615a      	str	r2, [r3, #20]
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d4416:	9d09      	ldr	r5, [sp, #36]	; 0x24
	if (__tmp != _M_pi)
   d4418:	699a      	ldr	r2, [r3, #24]
   d441a:	4295      	cmp	r5, r2
   d441c:	461c      	mov	r4, r3
   d441e:	d00c      	beq.n	d443a <_Z7camLoopv+0x66>
	  {
	    if (__tmp != 0)
   d4420:	b115      	cbz	r5, d4428 <_Z7camLoopv+0x54>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d4422:	686b      	ldr	r3, [r5, #4]
   d4424:	3301      	adds	r3, #1
   d4426:	606b      	str	r3, [r5, #4]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
   d4428:	69a0      	ldr	r0, [r4, #24]
   d442a:	b128      	cbz	r0, d4438 <_Z7camLoopv+0x64>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d442c:	6843      	ldr	r3, [r0, #4]
   d442e:	3b01      	subs	r3, #1
   d4430:	6043      	str	r3, [r0, #4]
   d4432:	b90b      	cbnz	r3, d4438 <_Z7camLoopv+0x64>
   d4434:	f7ff fe58 	bl	d40e8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.3.constprop.37>
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
	      _M_pi->_M_release();
	    _M_pi = __tmp;
   d4438:	61a5      	str	r5, [r4, #24]
   d443a:	a803      	add	r0, sp, #12
   d443c:	f7ff fe6c 	bl	d4118 <_ZN9TCPClientD1Ev>
    if(tcpClient) {
   d4440:	481f      	ldr	r0, [pc, #124]	; (d44c0 <_Z7camLoopv+0xec>)
   d4442:	f013 f92a 	bl	e769a <_ZN9TCPClientcvbEv>
   d4446:	4681      	mov	r9, r0
   d4448:	b368      	cbz	r0, d44a6 <_Z7camLoopv+0xd2>
#if DEBUG_AZURE == 1
       Serial.println("client connected!");
   d444a:	f012 ff25 	bl	e7298 <_Z16_fetch_usbserialv>
   d444e:	491d      	ldr	r1, [pc, #116]	; (d44c4 <_Z7camLoopv+0xf0>)
#endif
       while(tcpClient.connected()) {
           if((buffersize = tcpClient.available())) {
   d4450:	4d18      	ldr	r5, [pc, #96]	; (d44b4 <_Z7camLoopv+0xe0>)
                img = new uint8_t[buffersize];
   d4452:	4c1d      	ldr	r4, [pc, #116]	; (d44c8 <_Z7camLoopv+0xf4>)
    totalSize = 0;
    std::vector<uint8_t>().swap(imgVector);
    tcpClient = server.available();
    if(tcpClient) {
#if DEBUG_AZURE == 1
       Serial.println("client connected!");
   d4454:	f012 fa25 	bl	e68a2 <_ZN5Print7printlnEPKc>
#endif
       while(tcpClient.connected()) {
   d4458:	4819      	ldr	r0, [pc, #100]	; (d44c0 <_Z7camLoopv+0xec>)
   d445a:	f013 f902 	bl	e7662 <_ZN9TCPClient9connectedEv>
   d445e:	b310      	cbz	r0, d44a6 <_Z7camLoopv+0xd2>
           if((buffersize = tcpClient.available())) {
   d4460:	4817      	ldr	r0, [pc, #92]	; (d44c0 <_Z7camLoopv+0xec>)
   d4462:	f013 fae9 	bl	e7a38 <_ZN9TCPClient9availableEv>
   d4466:	f8c8 0000 	str.w	r0, [r8]
   d446a:	2800      	cmp	r0, #0
   d446c:	d0f4      	beq.n	d4458 <_Z7camLoopv+0x84>
                img = new uint8_t[buffersize];
   d446e:	f7ff fe16 	bl	d409e <_Znaj>
                tcpClient.readBytes((char*)img,buffersize);
   d4472:	682a      	ldr	r2, [r5, #0]
#if DEBUG_AZURE == 1
       Serial.println("client connected!");
#endif
       while(tcpClient.connected()) {
           if((buffersize = tcpClient.available())) {
                img = new uint8_t[buffersize];
   d4474:	6020      	str	r0, [r4, #0]
   d4476:	4601      	mov	r1, r0
                tcpClient.readBytes((char*)img,buffersize);
   d4478:	4811      	ldr	r0, [pc, #68]	; (d44c0 <_Z7camLoopv+0xec>)
   d447a:	f012 fb1b 	bl	e6ab4 <_ZN6Stream9readBytesEPcj>
                imgVector.insert(imgVector.end(), img, img + buffersize);    
   d447e:	6822      	ldr	r2, [r4, #0]
   d4480:	682b      	ldr	r3, [r5, #0]
        _M_insert_dispatch(iterator __pos, _InputIterator __first,
			   _InputIterator __last, __false_type)
        {
	  typedef typename std::iterator_traits<_InputIterator>::
	    iterator_category _IterCategory;
	  _M_range_insert(__pos, __first, __last, _IterCategory());
   d4482:	480b      	ldr	r0, [pc, #44]	; (d44b0 <_Z7camLoopv+0xdc>)
   d4484:	f04f 0100 	mov.w	r1, #0
   d4488:	f88d 1000 	strb.w	r1, [sp]
   d448c:	4413      	add	r3, r2
   d448e:	6871      	ldr	r1, [r6, #4]
   d4490:	f7ff ff2c 	bl	d42ec <_ZNSt6vectorIhSaIhEE15_M_range_insertIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag>
                totalSize += buffersize;
   d4494:	683a      	ldr	r2, [r7, #0]
   d4496:	682b      	ldr	r3, [r5, #0]
                delete(img); 
   d4498:	6820      	ldr	r0, [r4, #0]
       while(tcpClient.connected()) {
           if((buffersize = tcpClient.available())) {
                img = new uint8_t[buffersize];
                tcpClient.readBytes((char*)img,buffersize);
                imgVector.insert(imgVector.end(), img, img + buffersize);    
                totalSize += buffersize;
   d449a:	4413      	add	r3, r2
                delete(img); 
   d449c:	2101      	movs	r1, #1
       while(tcpClient.connected()) {
           if((buffersize = tcpClient.available())) {
                img = new uint8_t[buffersize];
                tcpClient.readBytes((char*)img,buffersize);
                imgVector.insert(imgVector.end(), img, img + buffersize);    
                totalSize += buffersize;
   d449e:	603b      	str	r3, [r7, #0]
                delete(img); 
   d44a0:	f013 ffcc 	bl	e843c <_ZdlPvj>
   d44a4:	e7d8      	b.n	d4458 <_Z7camLoopv+0x84>
           }
       }
        return true;
   }
   return false;
   d44a6:	4648      	mov	r0, r9
   d44a8:	b00b      	add	sp, #44	; 0x2c
   d44aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d44ae:	bf00      	nop
   d44b0:	2003c224 	.word	0x2003c224
   d44b4:	2003ace0 	.word	0x2003ace0
   d44b8:	2003ace4 	.word	0x2003ace4
   d44bc:	2003acac 	.word	0x2003acac
   d44c0:	2003c208 	.word	0x2003c208
   d44c4:	000ebf30 	.word	0x000ebf30
   d44c8:	2003acdc 	.word	0x2003acdc

000d44cc <loop>:
    client.setup();
    server.begin();
    hw.openLock(0);
}

void loop() {
   d44cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    // connect HTTPS server.
    
    if(camLoop()){
   d44ce:	f7ff ff81 	bl	d43d4 <_Z7camLoopv>
   d44d2:	b320      	cbz	r0, d451e <loop+0x52>
   d44d4:	4b1a      	ldr	r3, [pc, #104]	; (d4540 <loop+0x74>)
        if(client.Detect(&imgVector[0],imgVector.size())) {
   d44d6:	481b      	ldr	r0, [pc, #108]	; (d4544 <loop+0x78>)
   d44d8:	e893 0006 	ldmia.w	r3, {r1, r2}
   d44dc:	1a52      	subs	r2, r2, r1
   d44de:	f000 f9d5 	bl	d488c <_ZN16TlsClientHandler6DetectEPhm>
   d44e2:	b1c8      	cbz	r0, d4518 <loop+0x4c>
            Serial.println("client detected!");
   d44e4:	f012 fed8 	bl	e7298 <_Z16_fetch_usbserialv>
   d44e8:	4917      	ldr	r1, [pc, #92]	; (d4548 <loop+0x7c>)
   d44ea:	f012 f9da 	bl	e68a2 <_ZN5Print7printlnEPKc>
            hw.openLock(true);
   d44ee:	2101      	movs	r1, #1
   d44f0:	4816      	ldr	r0, [pc, #88]	; (d454c <loop+0x80>)
   d44f2:	f011 fabf 	bl	e5a74 <_ZN17HardwareInterface8openLockEi>
            hw.rgbControl(2);
   d44f6:	2102      	movs	r1, #2
   d44f8:	4814      	ldr	r0, [pc, #80]	; (d454c <loop+0x80>)
   d44fa:	f011 fad5 	bl	e5aa8 <_ZN17HardwareInterface10rgbControlEi>
            delay(5000);
   d44fe:	f241 3088 	movw	r0, #5000	; 0x1388
   d4502:	f012 fb63 	bl	e6bcc <delay>
            hw.rgbControl(0);
   d4506:	2100      	movs	r1, #0
   d4508:	4810      	ldr	r0, [pc, #64]	; (d454c <loop+0x80>)
   d450a:	f011 facd 	bl	e5aa8 <_ZN17HardwareInterface10rgbControlEi>
            hw.openLock(false);
   d450e:	2100      	movs	r1, #0
   d4510:	480e      	ldr	r0, [pc, #56]	; (d454c <loop+0x80>)
   d4512:	f011 faaf 	bl	e5a74 <_ZN17HardwareInterface8openLockEi>
   d4516:	e002      	b.n	d451e <loop+0x52>
        }  else {
            hw.faceNotRecogged();
   d4518:	480c      	ldr	r0, [pc, #48]	; (d454c <loop+0x80>)
   d451a:	f011 fae5 	bl	e5ae8 <_ZN17HardwareInterface15faceNotRecoggedEv>
        }
    }
    System.sleep(sleepcfg);
   d451e:	a801      	add	r0, sp, #4
   d4520:	490b      	ldr	r1, [pc, #44]	; (d4550 <loop+0x84>)
   d4522:	f011 ff19 	bl	e6358 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration>
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d4526:	9801      	ldr	r0, [sp, #4]
   d4528:	b108      	cbz	r0, d452e <loop+0x62>
            free(wakeupSource_);
   d452a:	f011 fdcb 	bl	e60c4 <free>
    Serial.println("do we sleep hera?");
   d452e:	f012 feb3 	bl	e7298 <_Z16_fetch_usbserialv>
   d4532:	4908      	ldr	r1, [pc, #32]	; (d4554 <loop+0x88>)
   d4534:	f012 f9b5 	bl	e68a2 <_ZN5Print7printlnEPKc>
}
   d4538:	b005      	add	sp, #20
   d453a:	f85d fb04 	ldr.w	pc, [sp], #4
   d453e:	bf00      	nop
   d4540:	2003c224 	.word	0x2003c224
   d4544:	2003ace8 	.word	0x2003ace8
   d4548:	000ebf42 	.word	0x000ebf42
   d454c:	2003c1d0 	.word	0x2003c1d0
   d4550:	2003c1f0 	.word	0x2003c1f0
   d4554:	000ebf53 	.word	0x000ebf53

000d4558 <_GLOBAL__sub_I_client>:
           }
       }
        return true;
   }
   return false;
   d4558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#include "debug.h"
#include "HardwareInterface.h"

//SYSTEM_MODE(MANUAL);

TlsClientHandler client;
   d455a:	4c23      	ldr	r4, [pc, #140]	; (d45e8 <_GLOBAL__sub_I_client+0x90>)
   d455c:	4d23      	ldr	r5, [pc, #140]	; (d45ec <_GLOBAL__sub_I_client+0x94>)

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d455e:	f011 faf3 	bl	e5b48 <HAL_Pin_Map>
   d4562:	4620      	mov	r0, r4
   d4564:	f000 f85a 	bl	d461c <_ZN16TlsClientHandlerC1Ev>
   d4568:	4620      	mov	r0, r4
TCPServer server = TCPServer(2555);
   d456a:	4c21      	ldr	r4, [pc, #132]	; (d45f0 <_GLOBAL__sub_I_client+0x98>)
#include "debug.h"
#include "HardwareInterface.h"

//SYSTEM_MODE(MANUAL);

TlsClientHandler client;
   d456c:	4921      	ldr	r1, [pc, #132]	; (d45f4 <_GLOBAL__sub_I_client+0x9c>)
   d456e:	462a      	mov	r2, r5
   d4570:	f013 ff56 	bl	e8420 <__aeabi_atexit>
TCPServer server = TCPServer(2555);
   d4574:	2200      	movs	r2, #0
   d4576:	f640 11fb 	movw	r1, #2555	; 0x9fb
   d457a:	4620      	mov	r0, r4
   d457c:	f012 fbc0 	bl	e6d00 <_ZN9TCPServerC1Etm>
   d4580:	4620      	mov	r0, r4
TCPClient tcpClient;
   d4582:	4c1d      	ldr	r4, [pc, #116]	; (d45f8 <_GLOBAL__sub_I_client+0xa0>)
#include "HardwareInterface.h"

//SYSTEM_MODE(MANUAL);

TlsClientHandler client;
TCPServer server = TCPServer(2555);
   d4584:	491d      	ldr	r1, [pc, #116]	; (d45fc <_GLOBAL__sub_I_client+0xa4>)
   d4586:	462a      	mov	r2, r5
   d4588:	f013 ff4a 	bl	e8420 <__aeabi_atexit>
TCPClient tcpClient;
   d458c:	4620      	mov	r0, r4
   d458e:	f013 faef 	bl	e7b70 <_ZN9TCPClientC1Ev>
   d4592:	4620      	mov	r0, r4
HardwareInterface hw;
   d4594:	4c1a      	ldr	r4, [pc, #104]	; (d4600 <_GLOBAL__sub_I_client+0xa8>)

//SYSTEM_MODE(MANUAL);

TlsClientHandler client;
TCPServer server = TCPServer(2555);
TCPClient tcpClient;
   d4596:	491b      	ldr	r1, [pc, #108]	; (d4604 <_GLOBAL__sub_I_client+0xac>)
   d4598:	462a      	mov	r2, r5
   d459a:	f013 ff41 	bl	e8420 <__aeabi_atexit>
HardwareInterface hw;
   d459e:	4620      	mov	r0, r4
   d45a0:	f011 fa3c 	bl	e5a1c <_ZN17HardwareInterfaceC1Ev>
   d45a4:	462a      	mov	r2, r5
   d45a6:	4918      	ldr	r1, [pc, #96]	; (d4608 <_GLOBAL__sub_I_client+0xb0>)
   d45a8:	4620      	mov	r0, r4
   d45aa:	f013 ff39 	bl	e8420 <__aeabi_atexit>
	pointer _M_start;
	pointer _M_finish;
	pointer _M_end_of_storage;

	_Vector_impl()
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
   d45ae:	4817      	ldr	r0, [pc, #92]	; (d460c <_GLOBAL__sub_I_client+0xb4>)
};

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   d45b0:	4c17      	ldr	r4, [pc, #92]	; (d4610 <_GLOBAL__sub_I_client+0xb8>)
uint8_t * img;
uint32_t totalSize = 0;
uint32_t buffersize = 0;
std::vector<uint8_t> imgVector;
   d45b2:	4918      	ldr	r1, [pc, #96]	; (d4614 <_GLOBAL__sub_I_client+0xbc>)
   d45b4:	2600      	movs	r6, #0
   d45b6:	462a      	mov	r2, r5
   d45b8:	6006      	str	r6, [r0, #0]
   d45ba:	6046      	str	r6, [r0, #4]
   d45bc:	6086      	str	r6, [r0, #8]
   d45be:	f013 ff2f 	bl	e8420 <__aeabi_atexit>
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d45c2:	2710      	movs	r7, #16
};

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   d45c4:	1d20      	adds	r0, r4, #4
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d45c6:	463a      	mov	r2, r7
   d45c8:	4631      	mov	r1, r6
};

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   d45ca:	6020      	str	r0, [r4, #0]
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d45cc:	f015 fa99 	bl	e9b02 <memset>
   d45d0:	2301      	movs	r3, #1
   d45d2:	7523      	strb	r3, [r4, #20]
        config_.size = sizeof(hal_sleep_config_t);
        config_.version = HAL_SLEEP_VERSION;
   d45d4:	2302      	movs	r3, #2
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
        config_.size = sizeof(hal_sleep_config_t);
   d45d6:	80a7      	strh	r7, [r4, #4]
        config_.version = HAL_SLEEP_VERSION;
   d45d8:	80e3      	strh	r3, [r4, #6]
SystemSleepConfiguration sleepcfg;
   d45da:	462a      	mov	r2, r5
   d45dc:	4620      	mov	r0, r4
   d45de:	490e      	ldr	r1, [pc, #56]	; (d4618 <_GLOBAL__sub_I_client+0xc0>)
           }
       }
        return true;
   }
   return false;
   d45e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
HardwareInterface hw;
uint8_t * img;
uint32_t totalSize = 0;
uint32_t buffersize = 0;
std::vector<uint8_t> imgVector;
SystemSleepConfiguration sleepcfg;
   d45e4:	f013 bf1c 	b.w	e8420 <__aeabi_atexit>
   d45e8:	2003ace8 	.word	0x2003ace8
   d45ec:	2003aca8 	.word	0x2003aca8
   d45f0:	2003acac 	.word	0x2003acac
   d45f4:	000d46a1 	.word	0x000d46a1
   d45f8:	2003c208 	.word	0x2003c208
   d45fc:	000d4139 	.word	0x000d4139
   d4600:	2003c1d0 	.word	0x2003c1d0
   d4604:	000d4119 	.word	0x000d4119
   d4608:	000e5a39 	.word	0x000e5a39
   d460c:	2003c224 	.word	0x2003c224
   d4610:	2003c1f0 	.word	0x2003c1f0
   d4614:	000d4109 	.word	0x000d4109
   d4618:	000d40d1 	.word	0x000d40d1

000d461c <_ZN16TlsClientHandlerC1Ev>:
#include "TlsClientHandler.h"


TlsClientHandler::TlsClientHandler(/* args */)
   d461c:	b510      	push	{r4, lr}
   d461e:	f240 72e1 	movw	r2, #2017	; 0x7e1
   d4622:	4919      	ldr	r1, [pc, #100]	; (d4688 <_ZN16TlsClientHandlerC1Ev+0x6c>)
   d4624:	4604      	mov	r4, r0
   d4626:	f015 fa46 	bl	e9ab6 <memcpy>
   d462a:	4b18      	ldr	r3, [pc, #96]	; (d468c <_ZN16TlsClientHandlerC1Ev+0x70>)
   d462c:	f204 72e1 	addw	r2, r4, #2017	; 0x7e1
   d4630:	f103 0134 	add.w	r1, r3, #52	; 0x34
   d4634:	f853 0b04 	ldr.w	r0, [r3], #4
   d4638:	f842 0b04 	str.w	r0, [r2], #4
   d463c:	428b      	cmp	r3, r1
   d463e:	d1f9      	bne.n	d4634 <_ZN16TlsClientHandlerC1Ev+0x18>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4640:	f011 fada 	bl	e5bf8 <HAL_Timer_Get_Milli_Seconds>
   d4644:	4912      	ldr	r1, [pc, #72]	; (d4690 <_ZN16TlsClientHandlerC1Ev+0x74>)
   d4646:	f8c4 0818 	str.w	r0, [r4, #2072]	; 0x818
   d464a:	f604 401c 	addw	r0, r4, #3100	; 0xc1c
   d464e:	f011 ff92 	bl	e6576 <_ZN6StringC1EPK19__FlashStringHelper>
   d4652:	4910      	ldr	r1, [pc, #64]	; (d4694 <_ZN16TlsClientHandlerC1Ev+0x78>)
   d4654:	f604 402c 	addw	r0, r4, #3116	; 0xc2c
   d4658:	f011 ff8d 	bl	e6576 <_ZN6StringC1EPK19__FlashStringHelper>
   d465c:	490e      	ldr	r1, [pc, #56]	; (d4698 <_ZN16TlsClientHandlerC1Ev+0x7c>)
   d465e:	f604 403c 	addw	r0, r4, #3132	; 0xc3c
   d4662:	f011 ff88 	bl	e6576 <_ZN6StringC1EPK19__FlashStringHelper>
   d4666:	490d      	ldr	r1, [pc, #52]	; (d469c <_ZN16TlsClientHandlerC1Ev+0x80>)
   d4668:	f604 404c 	addw	r0, r4, #3148	; 0xc4c
   d466c:	f011 ff83 	bl	e6576 <_ZN6StringC1EPK19__FlashStringHelper>
   d4670:	f504 6046 	add.w	r0, r4, #3168	; 0xc60
   d4674:	f000 f9e8 	bl	d4a48 <_ZN12TlsTcpClientC1Ev>
   d4678:	f504 50a0 	add.w	r0, r4, #5120	; 0x1400
   d467c:	3010      	adds	r0, #16
   d467e:	f000 fb59 	bl	d4d34 <_ZN10HttpHelperC1Ev>
{
}
   d4682:	4620      	mov	r0, r4
   d4684:	bd10      	pop	{r4, pc}
   d4686:	bf00      	nop
   d4688:	000ebfaf 	.word	0x000ebfaf
   d468c:	000ec790 	.word	0x000ec790
   d4690:	000ed091 	.word	0x000ed091
   d4694:	000ebf65 	.word	0x000ebf65
   d4698:	000ebf8a 	.word	0x000ebf8a
   d469c:	000ecf6b 	.word	0x000ecf6b

000d46a0 <_ZN16TlsClientHandlerD1Ev>:

TlsClientHandler::~TlsClientHandler()
   d46a0:	b538      	push	{r3, r4, r5, lr}
   d46a2:	4604      	mov	r4, r0
   d46a4:	f500 50a0 	add.w	r0, r0, #5120	; 0x1400
   d46a8:	f504 6546 	add.w	r5, r4, #3168	; 0xc60
   d46ac:	3010      	adds	r0, #16
   d46ae:	f000 fb99 	bl	d4de4 <_ZN10HttpHelperD1Ev>
    static int veryfyCert_Tls(void *data, mbedtls_x509_crt *crt, int depth, uint32_t *flags);
    int handShake();

public:
    TlsTcpClient();
    ~TlsTcpClient(){ close(); };
   d46b2:	4628      	mov	r0, r5
   d46b4:	f000 faee 	bl	d4c94 <_ZN12TlsTcpClient5closeEv>
   d46b8:	f205 708c 	addw	r0, r5, #1932	; 0x78c
   d46bc:	f7ff fd2c 	bl	d4118 <_ZN9TCPClientD1Ev>
   d46c0:	f604 404c 	addw	r0, r4, #3148	; 0xc4c
   d46c4:	f011 ff10 	bl	e64e8 <_ZN6StringD1Ev>
   d46c8:	f604 403c 	addw	r0, r4, #3132	; 0xc3c
   d46cc:	f011 ff0c 	bl	e64e8 <_ZN6StringD1Ev>
   d46d0:	f604 402c 	addw	r0, r4, #3116	; 0xc2c
   d46d4:	f011 ff08 	bl	e64e8 <_ZN6StringD1Ev>
   d46d8:	f604 401c 	addw	r0, r4, #3100	; 0xc1c
   d46dc:	f011 ff04 	bl	e64e8 <_ZN6StringD1Ev>
{
}
   d46e0:	4620      	mov	r0, r4
   d46e2:	bd38      	pop	{r3, r4, r5, pc}

000d46e4 <_ZN16TlsClientHandler5setupEv>:
void TlsClientHandler::setup() {
   d46e4:	b510      	push	{r4, lr}
   d46e6:	4604      	mov	r4, r0
   d46e8:	f011 fa86 	bl	e5bf8 <HAL_Timer_Get_Milli_Seconds>
        // need a Particle time sync for X509 certificates verify.
    if (millis() - lastSync > ONE_DAY_MILLIS) {
   d46ec:	f8d4 3818 	ldr.w	r3, [r4, #2072]	; 0x818
   d46f0:	1ac0      	subs	r0, r0, r3
   d46f2:	4b07      	ldr	r3, [pc, #28]	; (d4710 <_ZN16TlsClientHandler5setupEv+0x2c>)
   d46f4:	4298      	cmp	r0, r3
   d46f6:	d909      	bls.n	d470c <_ZN16TlsClientHandler5setupEv+0x28>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d46f8:	f011 fcbc 	bl	e6074 <spark_cloud_flag_connected>
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
    {
        if (!connected()) {
   d46fc:	b110      	cbz	r0, d4704 <_ZN16TlsClientHandler5setupEv+0x20>
            return false;
        }
        return spark_sync_time(NULL);
   d46fe:	2000      	movs	r0, #0
   d4700:	f011 fcc0 	bl	e6084 <spark_sync_time>
   d4704:	f011 fa78 	bl	e5bf8 <HAL_Timer_Get_Milli_Seconds>
        Particle.syncTime();
        lastSync = millis();
   d4708:	f8c4 0818 	str.w	r0, [r4, #2072]	; 0x818
   d470c:	bd10      	pop	{r4, pc}
   d470e:	bf00      	nop
   d4710:	05265c00 	.word	0x05265c00

000d4714 <_ZN16TlsClientHandler6VerifyE6String>:
        return status;
    }
    return this->Verify(http.getFaceId());
}

int TlsClientHandler::Verify(String id) {
   d4714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4718:	460e      	mov	r6, r1
   d471a:	b08c      	sub	sp, #48	; 0x30
   d471c:	4604      	mov	r4, r0
    if(id.equals("")) {
   d471e:	4957      	ldr	r1, [pc, #348]	; (d487c <_ZN16TlsClientHandler6VerifyE6String+0x168>)
   d4720:	4630      	mov	r0, r6
   d4722:	f012 f81b 	bl	e675c <_ZNK6String6equalsEPKc>
   d4726:	4607      	mov	r7, r0
   d4728:	2800      	cmp	r0, #0
   d472a:	f040 80a3 	bne.w	d4874 <_ZN16TlsClientHandler6VerifyE6String+0x160>
        return false;
    }
    http.setPath(VERIFY_PATH);
   d472e:	f504 55a0 	add.w	r5, r4, #5120	; 0x1400
   d4732:	3510      	adds	r5, #16
   d4734:	4952      	ldr	r1, [pc, #328]	; (d4880 <_ZN16TlsClientHandler6VerifyE6String+0x16c>)
   d4736:	a808      	add	r0, sp, #32
   d4738:	f011 ff1d 	bl	e6576 <_ZN6StringC1EPK19__FlashStringHelper>
   d473c:	a908      	add	r1, sp, #32
   d473e:	4628      	mov	r0, r5
   d4740:	f000 fb7c 	bl	d4e3c <_ZN10HttpHelper7setPathE6String>
   d4744:	a808      	add	r0, sp, #32
   d4746:	f011 fecf 	bl	e64e8 <_ZN6StringD1Ev>
    http.setHost(HOST);
   d474a:	494e      	ldr	r1, [pc, #312]	; (d4884 <_ZN16TlsClientHandler6VerifyE6String+0x170>)
   d474c:	a808      	add	r0, sp, #32
   d474e:	f011 ff12 	bl	e6576 <_ZN6StringC1EPK19__FlashStringHelper>
   d4752:	a908      	add	r1, sp, #32
   d4754:	4628      	mov	r0, r5
   d4756:	f000 fb74 	bl	d4e42 <_ZN10HttpHelper7setHostE6String>
   d475a:	a808      	add	r0, sp, #32
   d475c:	f011 fec4 	bl	e64e8 <_ZN6StringD1Ev>
    http.setKey(KEY);
   d4760:	4949      	ldr	r1, [pc, #292]	; (d4888 <_ZN16TlsClientHandler6VerifyE6String+0x174>)
   d4762:	a808      	add	r0, sp, #32
   d4764:	f011 ff07 	bl	e6576 <_ZN6StringC1EPK19__FlashStringHelper>
   d4768:	a908      	add	r1, sp, #32
   d476a:	4628      	mov	r0, r5
   d476c:	f000 fbbb 	bl	d4ee6 <_ZN10HttpHelper6setKeyE6String>
   d4770:	a808      	add	r0, sp, #32
   d4772:	f011 feb9 	bl	e64e8 <_ZN6StringD1Ev>
    http.setContent(http.HTTP_JSON);
   d4776:	f504 51a6 	add.w	r1, r4, #5312	; 0x14c0
   d477a:	3108      	adds	r1, #8
   d477c:	a808      	add	r0, sp, #32
   d477e:	f011 ff39 	bl	e65f4 <_ZN6StringC1ERKS_>
   d4782:	a908      	add	r1, sp, #32
   d4784:	4628      	mov	r0, r5
   d4786:	f000 fbab 	bl	d4ee0 <_ZN10HttpHelper10setContentE6String>
   d478a:	a808      	add	r0, sp, #32
   d478c:	f011 feac 	bl	e64e8 <_ZN6StringD1Ev>
    http.setBody(id,this->NIKOLAJ,this->PERSONGROUP);
   d4790:	4631      	mov	r1, r6
   d4792:	a808      	add	r0, sp, #32
   d4794:	f011 ff2e 	bl	e65f4 <_ZN6StringC1ERKS_>
   d4798:	f604 412c 	addw	r1, r4, #3116	; 0xc2c
   d479c:	a804      	add	r0, sp, #16
   d479e:	f011 ff29 	bl	e65f4 <_ZN6StringC1ERKS_>
   d47a2:	f604 414c 	addw	r1, r4, #3148	; 0xc4c
   d47a6:	4668      	mov	r0, sp
   d47a8:	f011 ff24 	bl	e65f4 <_ZN6StringC1ERKS_>
   d47ac:	466b      	mov	r3, sp
   d47ae:	aa04      	add	r2, sp, #16
   d47b0:	a908      	add	r1, sp, #32
   d47b2:	4628      	mov	r0, r5
   d47b4:	f000 fb48 	bl	d4e48 <_ZN10HttpHelper7setBodyE6StringS0_S0_>
   d47b8:	4668      	mov	r0, sp
   d47ba:	f011 fe95 	bl	e64e8 <_ZN6StringD1Ev>
   d47be:	a804      	add	r0, sp, #16
   d47c0:	f011 fe92 	bl	e64e8 <_ZN6StringD1Ev>
            // setup Root CA pem. have to be done before every connect! 
    client.init(letencryptCaPem, sizeof(letencryptCaPem));
   d47c4:	f504 6646 	add.w	r6, r4, #3168	; 0xc60
    }
    http.setPath(VERIFY_PATH);
    http.setHost(HOST);
    http.setKey(KEY);
    http.setContent(http.HTTP_JSON);
    http.setBody(id,this->NIKOLAJ,this->PERSONGROUP);
   d47c8:	a808      	add	r0, sp, #32
   d47ca:	f011 fe8d 	bl	e64e8 <_ZN6StringD1Ev>
            // setup Root CA pem. have to be done before every connect! 
    client.init(letencryptCaPem, sizeof(letencryptCaPem));
   d47ce:	f240 72e1 	movw	r2, #2017	; 0x7e1
   d47d2:	4621      	mov	r1, r4
   d47d4:	4630      	mov	r0, r6
   d47d6:	f000 f9e3 	bl	d4ba0 <_ZN12TlsTcpClient4initEPKcj>
    //connect to client on dis, port
#if DEBUG_AZURE == 1
    Serial.println(http.getHost());
   d47da:	f012 fd5d 	bl	e7298 <_Z16_fetch_usbserialv>
   d47de:	4680      	mov	r8, r0
   d47e0:	4628      	mov	r0, r5
   d47e2:	f000 fb83 	bl	d4eec <_ZN10HttpHelper7getHostEv>
   d47e6:	4601      	mov	r1, r0
   d47e8:	4640      	mov	r0, r8
   d47ea:	f012 f85a 	bl	e68a2 <_ZN5Print7printlnEPKc>
    Serial.println(http.makeVerify());
   d47ee:	f012 fd53 	bl	e7298 <_Z16_fetch_usbserialv>
   d47f2:	4680      	mov	r8, r0
   d47f4:	4628      	mov	r0, r5
   d47f6:	f000 fc09 	bl	d500c <_ZN10HttpHelper10makeVerifyEv>
   d47fa:	4601      	mov	r1, r0
   d47fc:	4640      	mov	r0, r8
   d47fe:	f012 f850 	bl	e68a2 <_ZN5Print7printlnEPKc>
#endif
    client.connect(this->URL, 443);
   d4802:	f240 12bb 	movw	r2, #443	; 0x1bb
   d4806:	f204 71e1 	addw	r1, r4, #2017	; 0x7e1
   d480a:	4630      	mov	r0, r6
   d480c:	f000 fa7b 	bl	d4d06 <_ZN12TlsTcpClient7connectEPct>

    // Send header to azure.
    int len = sprintf((char *)buff, http.makeVerify());
   d4810:	4628      	mov	r0, r5
   d4812:	f000 fbfb 	bl	d500c <_ZN10HttpHelper10makeVerifyEv>
   d4816:	f604 041c 	addw	r4, r4, #2076	; 0x81c
   d481a:	4601      	mov	r1, r0
   d481c:	4620      	mov	r0, r4
   d481e:	f011 fc61 	bl	e60e4 <sprintf>
    client.write(buff, len );
   d4822:	4621      	mov	r1, r4
   d4824:	4602      	mov	r2, r0
   d4826:	4630      	mov	r0, r6
   d4828:	f000 f9ee 	bl	d4c08 <_ZN12TlsTcpClient5writeEPhi>
    //make loop that 

    // GET HTTPS response.
    memset(buff, 0, sizeof(buff));
   d482c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   d4830:	4639      	mov	r1, r7
   d4832:	4620      	mov	r0, r4
   d4834:	f015 f965 	bl	e9b02 <memset>
    while(1) {
        // mabye check length and set buffer after this.
        int ret = client.read(buff, sizeof(buff) - 1);
   d4838:	f240 32ff 	movw	r2, #1023	; 0x3ff
   d483c:	4621      	mov	r1, r4
   d483e:	4630      	mov	r0, r6
   d4840:	f000 fa47 	bl	d4cd2 <_ZN12TlsTcpClient4readEPhi>
        if (ret == MBEDTLS_ERR_SSL_WANT_READ) {
   d4844:	f510 4fd2 	cmn.w	r0, #26880	; 0x6900
   d4848:	d103      	bne.n	d4852 <_ZN16TlsClientHandler6VerifyE6String+0x13e>
            delay(100);
   d484a:	2064      	movs	r0, #100	; 0x64
   d484c:	f012 f9be 	bl	e6bcc <delay>
   d4850:	e7f2      	b.n	d4838 <_ZN16TlsClientHandler6VerifyE6String+0x124>
        } else if (ret <= 0) {
   d4852:	2800      	cmp	r0, #0
   d4854:	dd05      	ble.n	d4862 <_ZN16TlsClientHandler6VerifyE6String+0x14e>
            break;
        } else {
#if DEBUG_AZURE == 1
            Serial.println((char *)buff);
   d4856:	f012 fd1f 	bl	e7298 <_Z16_fetch_usbserialv>
   d485a:	4621      	mov	r1, r4
   d485c:	f012 f821 	bl	e68a2 <_ZN5Print7printlnEPKc>
   d4860:	e7ea      	b.n	d4838 <_ZN16TlsClientHandler6VerifyE6String+0x124>
#endif
        }
    }
    http.setResponse((char*) buff,false);
   d4862:	4628      	mov	r0, r5
   d4864:	2200      	movs	r2, #0
   d4866:	4621      	mov	r1, r4
   d4868:	f000 fc5e 	bl	d5128 <_ZN10HttpHelper11setResponseEPcb>

   if(http.getIsIdentical()) {
   d486c:	4628      	mov	r0, r5
   d486e:	f000 fb49 	bl	d4f04 <_ZN10HttpHelper14getIsIdenticalEv>
   d4872:	e000      	b.n	d4876 <_ZN16TlsClientHandler6VerifyE6String+0x162>
    return this->Verify(http.getFaceId());
}

int TlsClientHandler::Verify(String id) {
    if(id.equals("")) {
        return false;
   d4874:	2000      	movs	r0, #0

   if(http.getIsIdentical()) {
       return true;
   }
   return false;
   d4876:	b00c      	add	sp, #48	; 0x30
   d4878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d487c:	000ed091 	.word	0x000ed091
   d4880:	000ec7c4 	.word	0x000ec7c4
   d4884:	000ec790 	.word	0x000ec790
   d4888:	000ec7d6 	.word	0x000ec7d6

000d488c <_ZN16TlsClientHandler6DetectEPhm>:
        lastSync = millis();
    }
}


int TlsClientHandler::Detect(uint8_t * img, uint32_t length) {
   d488c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   d4890:	4605      	mov	r5, r0
    
    memset(buff, 0, sizeof(buff));
   d4892:	f600 061c 	addw	r6, r0, #2076	; 0x81c
        lastSync = millis();
    }
}


int TlsClientHandler::Detect(uint8_t * img, uint32_t length) {
   d4896:	4688      	mov	r8, r1
   d4898:	4691      	mov	r9, r2
    
    memset(buff, 0, sizeof(buff));
   d489a:	2100      	movs	r1, #0
   d489c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   d48a0:	4630      	mov	r0, r6
    http.setPath(DETECT_PATH);
   d48a2:	f505 54a0 	add.w	r4, r5, #5120	; 0x1400
}


int TlsClientHandler::Detect(uint8_t * img, uint32_t length) {
    
    memset(buff, 0, sizeof(buff));
   d48a6:	f015 f92c 	bl	e9b02 <memset>
    http.setPath(DETECT_PATH);
   d48aa:	3410      	adds	r4, #16
   d48ac:	494b      	ldr	r1, [pc, #300]	; (d49dc <_ZN16TlsClientHandler6DetectEPhm+0x150>)
   d48ae:	4668      	mov	r0, sp
   d48b0:	f011 fe61 	bl	e6576 <_ZN6StringC1EPK19__FlashStringHelper>
   d48b4:	4669      	mov	r1, sp
   d48b6:	4620      	mov	r0, r4
   d48b8:	f000 fac0 	bl	d4e3c <_ZN10HttpHelper7setPathE6String>
   d48bc:	4668      	mov	r0, sp
   d48be:	f011 fe13 	bl	e64e8 <_ZN6StringD1Ev>
    http.setHost(HOST);
   d48c2:	4947      	ldr	r1, [pc, #284]	; (d49e0 <_ZN16TlsClientHandler6DetectEPhm+0x154>)
   d48c4:	4668      	mov	r0, sp
   d48c6:	f011 fe56 	bl	e6576 <_ZN6StringC1EPK19__FlashStringHelper>
   d48ca:	4669      	mov	r1, sp
   d48cc:	4620      	mov	r0, r4
   d48ce:	f000 fab8 	bl	d4e42 <_ZN10HttpHelper7setHostE6String>
   d48d2:	4668      	mov	r0, sp
   d48d4:	f011 fe08 	bl	e64e8 <_ZN6StringD1Ev>
    http.setKey(KEY);
   d48d8:	4942      	ldr	r1, [pc, #264]	; (d49e4 <_ZN16TlsClientHandler6DetectEPhm+0x158>)
   d48da:	4668      	mov	r0, sp
   d48dc:	f011 fe4b 	bl	e6576 <_ZN6StringC1EPK19__FlashStringHelper>
   d48e0:	4669      	mov	r1, sp
   d48e2:	4620      	mov	r0, r4
   d48e4:	f000 faff 	bl	d4ee6 <_ZN10HttpHelper6setKeyE6String>
   d48e8:	4668      	mov	r0, sp
   d48ea:	f011 fdfd 	bl	e64e8 <_ZN6StringD1Ev>
    http.setContent(http.HTTP_OCTET);
   d48ee:	f505 51a6 	add.w	r1, r5, #5312	; 0x14c0
   d48f2:	3118      	adds	r1, #24
   d48f4:	4668      	mov	r0, sp
   d48f6:	f011 fe7d 	bl	e65f4 <_ZN6StringC1ERKS_>
   d48fa:	4669      	mov	r1, sp
   d48fc:	4620      	mov	r0, r4
   d48fe:	f000 faef 	bl	d4ee0 <_ZN10HttpHelper10setContentE6String>
   d4902:	4668      	mov	r0, sp
   d4904:	f011 fdf0 	bl	e64e8 <_ZN6StringD1Ev>
    http.setBody(img);
   d4908:	4641      	mov	r1, r8
   d490a:	4620      	mov	r0, r4
   d490c:	f000 fad6 	bl	d4ebc <_ZN10HttpHelper7setBodyEPh>
    http.setContentLength(length); //set to the right size
            // setup Root CA pem. have to be done before every connect! 
    client.init(letencryptCaPem, sizeof(letencryptCaPem));
   d4910:	f505 6746 	add.w	r7, r5, #3168	; 0xc60
    http.setPath(DETECT_PATH);
    http.setHost(HOST);
    http.setKey(KEY);
    http.setContent(http.HTTP_OCTET);
    http.setBody(img);
    http.setContentLength(length); //set to the right size
   d4914:	4649      	mov	r1, r9
   d4916:	4620      	mov	r0, r4
   d4918:	f000 fad2 	bl	d4ec0 <_ZN10HttpHelper16setContentLengthEm>
            // setup Root CA pem. have to be done before every connect! 
    client.init(letencryptCaPem, sizeof(letencryptCaPem));
   d491c:	f240 72e1 	movw	r2, #2017	; 0x7e1
   d4920:	4629      	mov	r1, r5
   d4922:	4638      	mov	r0, r7
   d4924:	f000 f93c 	bl	d4ba0 <_ZN12TlsTcpClient4initEPKcj>
    //connect to client on dis, port
#if DEBUG_AZURE == 1
    Serial.println(http.makeDetect());
   d4928:	f012 fcb6 	bl	e7298 <_Z16_fetch_usbserialv>
   d492c:	4682      	mov	sl, r0
   d492e:	4620      	mov	r0, r4
   d4930:	f000 fb60 	bl	d4ff4 <_ZN10HttpHelper10makeDetectEv>
   d4934:	4601      	mov	r1, r0
   d4936:	4650      	mov	r0, sl
   d4938:	f011 ffb3 	bl	e68a2 <_ZN5Print7printlnEPKc>
#endif
    client.connect(this->URL, 443);
   d493c:	f240 12bb 	movw	r2, #443	; 0x1bb
   d4940:	f205 71e1 	addw	r1, r5, #2017	; 0x7e1
   d4944:	4638      	mov	r0, r7
   d4946:	f000 f9de 	bl	d4d06 <_ZN12TlsTcpClient7connectEPct>

    // Send header to azure.
    int len = sprintf((char *)buff, http.makeDetect());
   d494a:	4620      	mov	r0, r4
   d494c:	f000 fb52 	bl	d4ff4 <_ZN10HttpHelper10makeDetectEv>
   d4950:	4601      	mov	r1, r0
   d4952:	4630      	mov	r0, r6
   d4954:	f011 fbc6 	bl	e60e4 <sprintf>
    client.write(buff, len );
   d4958:	4631      	mov	r1, r6
   d495a:	4602      	mov	r2, r0
   d495c:	4638      	mov	r0, r7
   d495e:	f000 f953 	bl	d4c08 <_ZN12TlsTcpClient5writeEPhi>
    client.write(img,length);;
   d4962:	464a      	mov	r2, r9
   d4964:	4641      	mov	r1, r8
   d4966:	4638      	mov	r0, r7
   d4968:	f000 f94e 	bl	d4c08 <_ZN12TlsTcpClient5writeEPhi>
    // GET HTTPS response.
    memset(buff, 0, sizeof(buff));
   d496c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   d4970:	2100      	movs	r1, #0
   d4972:	4630      	mov	r0, r6
   d4974:	f015 f8c5 	bl	e9b02 <memset>
    while(1) {

        // mabye check length and set buffer after this.
        int ret = client.read(buff, sizeof(buff) - 1);
   d4978:	f240 32ff 	movw	r2, #1023	; 0x3ff
   d497c:	4631      	mov	r1, r6
   d497e:	4638      	mov	r0, r7
   d4980:	f000 f9a7 	bl	d4cd2 <_ZN12TlsTcpClient4readEPhi>
        if (ret == MBEDTLS_ERR_SSL_WANT_READ) {
   d4984:	f510 4fd2 	cmn.w	r0, #26880	; 0x6900
   d4988:	d103      	bne.n	d4992 <_ZN16TlsClientHandler6DetectEPhm+0x106>
            delay(100);
   d498a:	2064      	movs	r0, #100	; 0x64
   d498c:	f012 f91e 	bl	e6bcc <delay>
   d4990:	e7f2      	b.n	d4978 <_ZN16TlsClientHandler6DetectEPhm+0xec>
        } else if (ret <= 0) {
   d4992:	2800      	cmp	r0, #0
   d4994:	dd05      	ble.n	d49a2 <_ZN16TlsClientHandler6DetectEPhm+0x116>
            break;
        } else {
#if DEBUG_AZURE == 1
            Serial.println((char *)buff);
   d4996:	f012 fc7f 	bl	e7298 <_Z16_fetch_usbserialv>
   d499a:	4631      	mov	r1, r6
   d499c:	f011 ff81 	bl	e68a2 <_ZN5Print7printlnEPKc>
   d49a0:	e7ea      	b.n	d4978 <_ZN16TlsClientHandler6DetectEPhm+0xec>
#endif
        }
    }
    http.setResponse((char*) buff,true);
   d49a2:	2201      	movs	r2, #1
   d49a4:	4631      	mov	r1, r6
   d49a6:	4620      	mov	r0, r4
   d49a8:	f000 fbbe 	bl	d5128 <_ZN10HttpHelper11setResponseEPcb>
    int status;
    if((status = http.getStatus()) != 200) {
   d49ac:	4620      	mov	r0, r4
   d49ae:	f000 fa9f 	bl	d4ef0 <_ZN10HttpHelper9getStatusEv>
   d49b2:	28c8      	cmp	r0, #200	; 0xc8
   d49b4:	d10c      	bne.n	d49d0 <_ZN16TlsClientHandler6DetectEPhm+0x144>
        return status;
    }
    return this->Verify(http.getFaceId());
   d49b6:	4621      	mov	r1, r4
   d49b8:	4668      	mov	r0, sp
   d49ba:	f000 fa9c 	bl	d4ef6 <_ZN10HttpHelper9getFaceIdEv>
   d49be:	4669      	mov	r1, sp
   d49c0:	4628      	mov	r0, r5
   d49c2:	f7ff fea7 	bl	d4714 <_ZN16TlsClientHandler6VerifyE6String>
   d49c6:	4604      	mov	r4, r0
   d49c8:	4668      	mov	r0, sp
   d49ca:	f011 fd8d 	bl	e64e8 <_ZN6StringD1Ev>
   d49ce:	e000      	b.n	d49d2 <_ZN16TlsClientHandler6DetectEPhm+0x146>
   d49d0:	4604      	mov	r4, r0
}
   d49d2:	4620      	mov	r0, r4
   d49d4:	b004      	add	sp, #16
   d49d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d49da:	bf00      	nop
   d49dc:	000ec7f7 	.word	0x000ec7f7
   d49e0:	000ec790 	.word	0x000ec790
   d49e4:	000ec7d6 	.word	0x000ec7d6

000d49e8 <_GLOBAL__sub_I__ZN16TlsClientHandlerC2Ev>:
   d49e8:	f011 b8ae 	b.w	e5b48 <HAL_Pin_Map>

000d49ec <_ZN12TlsTcpClient9debug_TlsEPviPKciS2_>:
  return 0;
}

void TlsTcpClient::debug_Tls( void *ctx, int level,
                      const char *file, int line,
                      const char *str ) {
   d49ec:	4770      	bx	lr

000d49ee <_ZN12TlsTcpClient7rng_TlsEPvPhj>:
    return MBEDTLS_ERR_SSL_WANT_READ;
  }
  return ret;
}

int TlsTcpClient::rng_Tls(void* handle, uint8_t* data, const size_t len_) {
   d49ee:	b570      	push	{r4, r5, r6, lr}
   d49f0:	460e      	mov	r6, r1
   d49f2:	4615      	mov	r5, r2
   d49f4:	460c      	mov	r4, r1
  size_t len = len_;
  while (len>=4) {
   d49f6:	1b2b      	subs	r3, r5, r4
   d49f8:	4433      	add	r3, r6
   d49fa:	2b03      	cmp	r3, #3
   d49fc:	d904      	bls.n	d4a08 <_ZN12TlsTcpClient7rng_TlsEPvPhj+0x1a>
    *((uint32_t*)data) = HAL_RNG_GetRandomNumber();
   d49fe:	f011 f8eb 	bl	e5bd8 <HAL_RNG_GetRandomNumber>
   d4a02:	f844 0b04 	str.w	r0, [r4], #4
  return ret;
}

int TlsTcpClient::rng_Tls(void* handle, uint8_t* data, const size_t len_) {
  size_t len = len_;
  while (len>=4) {
   d4a06:	e7f6      	b.n	d49f6 <_ZN12TlsTcpClient7rng_TlsEPvPhj+0x8>
   d4a08:	08ac      	lsrs	r4, r5, #2
   d4a0a:	eb06 0484 	add.w	r4, r6, r4, lsl #2
   d4a0e:	4435      	add	r5, r6
    *((uint32_t*)data) = HAL_RNG_GetRandomNumber();
    data += 4;
    len -= 4;
  }
  while (len-->0) {
   d4a10:	42ac      	cmp	r4, r5
   d4a12:	d004      	beq.n	d4a1e <_ZN12TlsTcpClient7rng_TlsEPvPhj+0x30>
    *data++ = HAL_RNG_GetRandomNumber();
   d4a14:	f011 f8e0 	bl	e5bd8 <HAL_RNG_GetRandomNumber>
   d4a18:	f804 0b01 	strb.w	r0, [r4], #1
  while (len>=4) {
    *((uint32_t*)data) = HAL_RNG_GetRandomNumber();
    data += 4;
    len -= 4;
  }
  while (len-->0) {
   d4a1c:	e7f8      	b.n	d4a10 <_ZN12TlsTcpClient7rng_TlsEPvPhj+0x22>
    *data++ = HAL_RNG_GetRandomNumber();
  }
  return 0;
}
   d4a1e:	2000      	movs	r0, #0
   d4a20:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4a24 <_ZN12TlsTcpClient14veryfyCert_TlsEPvP16mbedtls_x509_crtiPm>:

  *ttime = nowt;
  return nowt;
}

int TlsTcpClient::veryfyCert_Tls(void *data, mbedtls_x509_crt *crt, int depth, uint32_t *flags) {
   d4a24:	b500      	push	{lr}
   d4a26:	f2ad 4d04 	subw	sp, sp, #1028	; 0x404
  char buf[1024];
  ((void) data);

  debug_tls("Verify requested for (Depth %d):\n", depth);
  mbedtls_x509_crt_info(buf, sizeof(buf) - 1, "", crt);
   d4a2a:	460b      	mov	r3, r1
   d4a2c:	4a05      	ldr	r2, [pc, #20]	; (d4a44 <_ZN12TlsTcpClient14veryfyCert_TlsEPvP16mbedtls_x509_crtiPm+0x20>)
   d4a2e:	f240 31ff 	movw	r1, #1023	; 0x3ff
   d4a32:	4668      	mov	r0, sp
   d4a34:	f008 ff6a 	bl	dd90c <mbedtls_x509_crt_info>
  } else {
    debug_tls(buf, sizeof(buf), "  ! ", *flags);
    debug_tls("%s\n", buf);
  }
  return 0;
}
   d4a38:	2000      	movs	r0, #0
   d4a3a:	f20d 4d04 	addw	sp, sp, #1028	; 0x404
   d4a3e:	f85d fb04 	ldr.w	pc, [sp], #4
   d4a42:	bf00      	nop
   d4a44:	000ed091 	.word	0x000ed091

000d4a48 <_ZN12TlsTcpClientC1Ev>:
#include "TlsTcpClient.h"

TlsTcpClient::TlsTcpClient() {
   d4a48:	b510      	push	{r4, lr}
   d4a4a:	4604      	mov	r4, r0
   d4a4c:	f200 708c 	addw	r0, r0, #1932	; 0x78c
   d4a50:	f013 f88e 	bl	e7b70 <_ZN9TCPClientC1Ev>
  connected = false;
   d4a54:	2300      	movs	r3, #0
   d4a56:	f884 37a8 	strb.w	r3, [r4, #1960]	; 0x7a8
}
   d4a5a:	4620      	mov	r0, r4
   d4a5c:	bd10      	pop	{r4, pc}
	...

000d4a60 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j>:
  return this->init(rootCaPem, rootCaPemSize, NULL, 0, NULL, 0);
}

int TlsTcpClient::init(const char *rootCaPem, const size_t rootCaPemSize,
         const char *clientCertPem, const size_t clientCertPemSize,
         const char *clientKeyPem, const size_t clientKeyPemSize) {
   d4a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4a64:	4605      	mov	r5, r0
   d4a66:	b085      	sub	sp, #20
   d4a68:	4693      	mov	fp, r2

  int ret;
  connected = false;
  mbedtls_ssl_config_init(&conf);
   d4a6a:	f200 4474 	addw	r4, r0, #1140	; 0x474
int TlsTcpClient::init(const char *rootCaPem, const size_t rootCaPemSize,
         const char *clientCertPem, const size_t clientCertPemSize,
         const char *clientKeyPem, const size_t clientKeyPemSize) {

  int ret;
  connected = false;
   d4a6e:	2200      	movs	r2, #0
   d4a70:	f880 27a8 	strb.w	r2, [r0, #1960]	; 0x7a8
  mbedtls_ssl_config_init(&conf);
  mbedtls_ssl_init(&ssl);
   d4a74:	f505 766e 	add.w	r6, r5, #952	; 0x3b8
         const char *clientCertPem, const size_t clientCertPemSize,
         const char *clientKeyPem, const size_t clientKeyPemSize) {

  int ret;
  connected = false;
  mbedtls_ssl_config_init(&conf);
   d4a78:	4620      	mov	r0, r4
  return this->init(rootCaPem, rootCaPemSize, NULL, 0, NULL, 0);
}

int TlsTcpClient::init(const char *rootCaPem, const size_t rootCaPemSize,
         const char *clientCertPem, const size_t clientCertPemSize,
         const char *clientKeyPem, const size_t clientKeyPemSize) {
   d4a7a:	4699      	mov	r9, r3
   d4a7c:	9102      	str	r1, [sp, #8]

  int ret;
  connected = false;
   d4a7e:	9203      	str	r2, [sp, #12]
  mbedtls_ssl_config_init(&conf);
  mbedtls_ssl_init(&ssl);
  mbedtls_x509_crt_init(&cacert);
   d4a80:	f205 4af4 	addw	sl, r5, #1268	; 0x4f4
         const char *clientCertPem, const size_t clientCertPemSize,
         const char *clientKeyPem, const size_t clientKeyPemSize) {

  int ret;
  connected = false;
  mbedtls_ssl_config_init(&conf);
   d4a84:	f00b fdbf 	bl	e0606 <mbedtls_ssl_config_init>
  mbedtls_ssl_init(&ssl);
   d4a88:	4630      	mov	r0, r6
   d4a8a:	f00b fa97 	bl	dffbc <mbedtls_ssl_init>
  mbedtls_x509_crt_init(&cacert);
  mbedtls_x509_crt_init(&clicert);
   d4a8e:	f505 67c5 	add.w	r7, r5, #1576	; 0x628

  int ret;
  connected = false;
  mbedtls_ssl_config_init(&conf);
  mbedtls_ssl_init(&ssl);
  mbedtls_x509_crt_init(&cacert);
   d4a92:	4650      	mov	r0, sl
   d4a94:	f009 fd08 	bl	de4a8 <mbedtls_x509_crt_init>
  mbedtls_x509_crt_init(&clicert);
  mbedtls_pk_init(&pkey);
   d4a98:	f205 785c 	addw	r8, r5, #1884	; 0x75c
  int ret;
  connected = false;
  mbedtls_ssl_config_init(&conf);
  mbedtls_ssl_init(&ssl);
  mbedtls_x509_crt_init(&cacert);
  mbedtls_x509_crt_init(&clicert);
   d4a9c:	4638      	mov	r0, r7
   d4a9e:	f009 fd03 	bl	de4a8 <mbedtls_x509_crt_init>
  mbedtls_pk_init(&pkey);
   d4aa2:	4640      	mov	r0, r8
   d4aa4:	f00a f928 	bl	decf8 <mbedtls_pk_init>

  mbedtls_ssl_conf_dbg(&conf, &TlsTcpClient::debug_Tls, nullptr);
   d4aa8:	9a03      	ldr	r2, [sp, #12]
   d4aaa:	4936      	ldr	r1, [pc, #216]	; (d4b84 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x124>)
   d4aac:	4620      	mov	r0, r4
   d4aae:	f00b fa96 	bl	dffde <mbedtls_ssl_conf_dbg>
  #if defined(MBEDTLS_DEBUG_C)
    mbedtls_debug_set_threshold(DEBUG_TLS_CORE_LEVEL);
  #endif

  if ((ret = mbedtls_x509_crt_parse(&cacert, (const unsigned char *)rootCaPem, rootCaPemSize)) < 0) {
   d4ab2:	465a      	mov	r2, fp
   d4ab4:	9902      	ldr	r1, [sp, #8]
   d4ab6:	4650      	mov	r0, sl
   d4ab8:	f00a f8ac 	bl	dec14 <mbedtls_x509_crt_parse>
   d4abc:	2800      	cmp	r0, #0
   d4abe:	db5d      	blt.n	d4b7c <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x11c>
    debug_tls(" enableTls mbedtls_x509_crt_parse error : %d\n", ret);
    return ret;
  }

  if (clientCertPem != NULL && clientCertPemSize > 0) {
   d4ac0:	f1b9 0f00 	cmp.w	r9, #0
   d4ac4:	d102      	bne.n	d4acc <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x6c>
      debug_tls(" tlsClientKey mbedtls_x509_crt_parse error : %d\n", ret);
      return ret;
    }
  }

  if (clientKeyPem != NULL && clientKeyPemSize > 0) {
   d4ac6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d4ac8:	b95b      	cbnz	r3, d4ae2 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x82>
   d4aca:	e00c      	b.n	d4ae6 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x86>
  if ((ret = mbedtls_x509_crt_parse(&cacert, (const unsigned char *)rootCaPem, rootCaPemSize)) < 0) {
    debug_tls(" enableTls mbedtls_x509_crt_parse error : %d\n", ret);
    return ret;
  }

  if (clientCertPem != NULL && clientCertPemSize > 0) {
   d4acc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d4ace:	2b00      	cmp	r3, #0
   d4ad0:	d0f9      	beq.n	d4ac6 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x66>
    if ((ret = mbedtls_x509_crt_parse(&clicert, (const unsigned char *)clientCertPem, clientCertPemSize)) < 0) {
   d4ad2:	461a      	mov	r2, r3
   d4ad4:	4649      	mov	r1, r9
   d4ad6:	4638      	mov	r0, r7
   d4ad8:	f00a f89c 	bl	dec14 <mbedtls_x509_crt_parse>
   d4adc:	2800      	cmp	r0, #0
   d4ade:	daf2      	bge.n	d4ac6 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x66>
   d4ae0:	e04c      	b.n	d4b7c <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x11c>
      debug_tls(" tlsClientKey mbedtls_x509_crt_parse error : %d\n", ret);
      return ret;
    }
  }

  if (clientKeyPem != NULL && clientKeyPemSize > 0) {
   d4ae2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d4ae4:	b94b      	cbnz	r3, d4afa <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x9a>
      debug_tls(" tlsClientKey mbedtls_pk_parse_key error : %d\n", ret);
      return ret;
    }
  }

  if ((ret = mbedtls_ssl_config_defaults(&conf, MBEDTLS_SSL_IS_CLIENT,
   d4ae6:	2300      	movs	r3, #0
   d4ae8:	461a      	mov	r2, r3
   d4aea:	4619      	mov	r1, r3
   d4aec:	4620      	mov	r0, r4
   d4aee:	f00b fd8f 	bl	e0610 <mbedtls_ssl_config_defaults>
   d4af2:	4683      	mov	fp, r0
   d4af4:	2800      	cmp	r0, #0
   d4af6:	d141      	bne.n	d4b7c <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x11c>
   d4af8:	e009      	b.n	d4b0e <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0xae>
      return ret;
    }
  }

  if (clientKeyPem != NULL && clientKeyPemSize > 0) {
    if ((ret = mbedtls_pk_parse_key(&pkey, (const unsigned char *)clientKeyPem, clientKeyPemSize, NULL, 0)) != 0) {
   d4afa:	2300      	movs	r3, #0
   d4afc:	9300      	str	r3, [sp, #0]
   d4afe:	9a10      	ldr	r2, [sp, #64]	; 0x40
   d4b00:	990f      	ldr	r1, [sp, #60]	; 0x3c
   d4b02:	4640      	mov	r0, r8
   d4b04:	f007 fd08 	bl	dc518 <mbedtls_pk_parse_key>
   d4b08:	2800      	cmp	r0, #0
   d4b0a:	d0ec      	beq.n	d4ae6 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x86>
   d4b0c:	e036      	b.n	d4b7c <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x11c>

  if ((ret = mbedtls_ssl_config_defaults(&conf, MBEDTLS_SSL_IS_CLIENT,
                 MBEDTLS_SSL_TRANSPORT_STREAM, MBEDTLS_SSL_PRESET_DEFAULT)) != 0) {
    return ret;
  }
  mbedtls_ssl_conf_min_version(&conf, MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3);
   d4b0e:	2203      	movs	r2, #3
   d4b10:	4611      	mov	r1, r2
   d4b12:	4620      	mov	r0, r4
   d4b14:	f00b fab2 	bl	e007c <mbedtls_ssl_conf_min_version>
  mbedtls_ssl_conf_verify(&conf, &TlsTcpClient::veryfyCert_Tls, NULL);
   d4b18:	465a      	mov	r2, fp
   d4b1a:	491b      	ldr	r1, [pc, #108]	; (d4b88 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x128>)
   d4b1c:	4620      	mov	r0, r4
   d4b1e:	f00b fa58 	bl	dffd2 <mbedtls_ssl_conf_verify>

  // if server certificates is not valid, connection will success. check certificates on verify() function.
  mbedtls_ssl_conf_authmode(&conf, MBEDTLS_SSL_VERIFY_OPTIONAL);
   d4b22:	2101      	movs	r1, #1
   d4b24:	4620      	mov	r0, r4
   d4b26:	f00b fa4d 	bl	dffc4 <mbedtls_ssl_conf_authmode>
  mbedtls_ssl_conf_rng(&conf, &TlsTcpClient::rng_Tls, nullptr);
   d4b2a:	465a      	mov	r2, fp
   d4b2c:	4917      	ldr	r1, [pc, #92]	; (d4b8c <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x12c>)
   d4b2e:	4620      	mov	r0, r4
   d4b30:	f00b fa52 	bl	dffd8 <mbedtls_ssl_conf_rng>
  mbedtls_ssl_conf_ca_chain(&conf, &cacert, nullptr);
   d4b34:	465a      	mov	r2, fp
   d4b36:	4651      	mov	r1, sl
   d4b38:	4620      	mov	r0, r4
   d4b3a:	f00b fa65 	bl	e0008 <mbedtls_ssl_conf_ca_chain>

  if (clientCertPem != NULL && clientKeyPem != NULL) {
   d4b3e:	f1b9 0f00 	cmp.w	r9, #0
   d4b42:	d006      	beq.n	d4b52 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0xf2>
   d4b44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d4b46:	b123      	cbz	r3, d4b52 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0xf2>
    mbedtls_ssl_conf_own_cert(&conf, &clicert, &pkey);
   d4b48:	4642      	mov	r2, r8
   d4b4a:	4639      	mov	r1, r7
   d4b4c:	4620      	mov	r0, r4
   d4b4e:	f00b fa58 	bl	e0002 <mbedtls_ssl_conf_own_cert>
  }

  if((ret = mbedtls_ssl_setup(&ssl, &conf)) != 0) {
   d4b52:	4621      	mov	r1, r4
   d4b54:	4630      	mov	r0, r6
   d4b56:	f00b fcc7 	bl	e04e8 <mbedtls_ssl_setup>
   d4b5a:	4604      	mov	r4, r0
   d4b5c:	b968      	cbnz	r0, d4b7a <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x11a>
    return ret;
  }

  mbedtls_ssl_set_timer_cb(&ssl, &timer, mbedtls_timing_set_delay, mbedtls_timing_get_delay);
   d4b5e:	4b0c      	ldr	r3, [pc, #48]	; (d4b90 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x130>)
   d4b60:	4a0c      	ldr	r2, [pc, #48]	; (d4b94 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x134>)
   d4b62:	f205 7164 	addw	r1, r5, #1892	; 0x764
   d4b66:	4630      	mov	r0, r6
   d4b68:	f00b fa42 	bl	dfff0 <mbedtls_ssl_set_timer_cb>
  mbedtls_ssl_set_bio(&ssl, this, &TlsTcpClient::send_Tls,  &TlsTcpClient::recv_Tls, nullptr);
   d4b6c:	9400      	str	r4, [sp, #0]
   d4b6e:	4b0a      	ldr	r3, [pc, #40]	; (d4b98 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x138>)
   d4b70:	4a0a      	ldr	r2, [pc, #40]	; (d4b9c <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x13c>)
   d4b72:	4629      	mov	r1, r5
   d4b74:	4630      	mov	r0, r6
   d4b76:	f00b fa35 	bl	dffe4 <mbedtls_ssl_set_bio>
   d4b7a:	4620      	mov	r0, r4
  return 0;
}
   d4b7c:	b005      	add	sp, #20
   d4b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4b82:	bf00      	nop
   d4b84:	000d49ed 	.word	0x000d49ed
   d4b88:	000d4a25 	.word	0x000d4a25
   d4b8c:	000d49ef 	.word	0x000d49ef
   d4b90:	000db26b 	.word	0x000db26b
   d4b94:	000db25d 	.word	0x000db25d
   d4b98:	000d4c59 	.word	0x000d4c59
   d4b9c:	000d4c21 	.word	0x000d4c21

000d4ba0 <_ZN12TlsTcpClient4initEPKcj>:
    debug_tls("%s\n", buf);
  }
  return 0;
}

int TlsTcpClient::init(const char *rootCaPem, const size_t rootCaPemSize) {
   d4ba0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return this->init(rootCaPem, rootCaPemSize, NULL, 0, NULL, 0);
   d4ba2:	2300      	movs	r3, #0
   d4ba4:	9302      	str	r3, [sp, #8]
   d4ba6:	9301      	str	r3, [sp, #4]
   d4ba8:	9300      	str	r3, [sp, #0]
   d4baa:	f7ff ff59 	bl	d4a60 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j>
}
   d4bae:	b005      	add	sp, #20
   d4bb0:	f85d fb04 	ldr.w	pc, [sp], #4

000d4bb4 <_ZN12TlsTcpClient9handShakeEv>:
  }

  return this->handShake();
}

int TlsTcpClient::handShake() {
   d4bb4:	b570      	push	{r4, r5, r6, lr}
   d4bb6:	4605      	mov	r5, r0
  int ret;
  do {
      while (ssl.state != MBEDTLS_SSL_HANDSHAKE_OVER) {
          ret = mbedtls_ssl_handshake_client_step(&ssl);
   d4bb8:	f500 766e 	add.w	r6, r0, #952	; 0x3b8
}

int TlsTcpClient::handShake() {
  int ret;
  do {
      while (ssl.state != MBEDTLS_SSL_HANDSHAKE_OVER) {
   d4bbc:	f8d5 33bc 	ldr.w	r3, [r5, #956]	; 0x3bc
   d4bc0:	2b10      	cmp	r3, #16
   d4bc2:	d005      	beq.n	d4bd0 <_ZN12TlsTcpClient9handShakeEv+0x1c>
          ret = mbedtls_ssl_handshake_client_step(&ssl);
   d4bc4:	4630      	mov	r0, r6
   d4bc6:	f010 f869 	bl	e4c9c <mbedtls_ssl_handshake_client_step>
          if (ret != 0)
   d4bca:	4604      	mov	r4, r0
   d4bcc:	2800      	cmp	r0, #0
   d4bce:	d0f5      	beq.n	d4bbc <_ZN12TlsTcpClient9handShakeEv+0x8>
              break;
      }
  } while(ret == MBEDTLS_ERR_SSL_WANT_READ || ret == MBEDTLS_ERR_SSL_WANT_WRITE);
   d4bd0:	f514 4fd2 	cmn.w	r4, #26880	; 0x6900
   d4bd4:	d0f2      	beq.n	d4bbc <_ZN12TlsTcpClient9handShakeEv+0x8>
   d4bd6:	f514 4fd1 	cmn.w	r4, #26752	; 0x6880
   d4bda:	d0ef      	beq.n	d4bbc <_ZN12TlsTcpClient9handShakeEv+0x8>

  // clean ca cert/crt/pkey
  mbedtls_x509_crt_free(&cacert);
   d4bdc:	f205 40f4 	addw	r0, r5, #1268	; 0x4f4
   d4be0:	f009 fc67 	bl	de4b2 <mbedtls_x509_crt_free>
  mbedtls_x509_crt_free(&clicert);
   d4be4:	f505 60c5 	add.w	r0, r5, #1576	; 0x628
   d4be8:	f009 fc63 	bl	de4b2 <mbedtls_x509_crt_free>
  mbedtls_pk_free(&pkey);
   d4bec:	f205 705c 	addw	r0, r5, #1884	; 0x75c
   d4bf0:	f00a f886 	bl	ded00 <mbedtls_pk_free>

  if (ssl.state == MBEDTLS_SSL_HANDSHAKE_OVER) {
   d4bf4:	f8d5 33bc 	ldr.w	r3, [r5, #956]	; 0x3bc
   d4bf8:	2b10      	cmp	r3, #16
    connected = true;
   d4bfa:	bf03      	ittte	eq
   d4bfc:	2301      	moveq	r3, #1
   d4bfe:	f885 37a8 	strbeq.w	r3, [r5, #1960]	; 0x7a8
    return 0;
   d4c02:	2000      	moveq	r0, #0
   d4c04:	4620      	movne	r0, r4
  }
  return ret;
}
   d4c06:	bd70      	pop	{r4, r5, r6, pc}

000d4c08 <_ZN12TlsTcpClient5writeEPhi>:

int TlsTcpClient::write(unsigned char *buff, int length) {
  if (connected) {
   d4c08:	f890 37a8 	ldrb.w	r3, [r0, #1960]	; 0x7a8
   d4c0c:	b11b      	cbz	r3, d4c16 <_ZN12TlsTcpClient5writeEPhi+0xe>
      int ret = mbedtls_ssl_write( &ssl, buff, length );
   d4c0e:	f500 706e 	add.w	r0, r0, #952	; 0x3b8
   d4c12:	f00b bb29 	b.w	e0268 <mbedtls_ssl_write>
      return ret;
  } else
    return -1;
}
   d4c16:	f04f 30ff 	mov.w	r0, #4294967295
   d4c1a:	4770      	bx	lr

000d4c1c <_GLOBAL__sub_I__ZN12TlsTcpClientC2Ev>:
   d4c1c:	f010 bf94 	b.w	e5b48 <HAL_Pin_Map>

000d4c20 <_ZN12TlsTcpClient8send_TlsEPvPKhj>:

TlsTcpClient::TlsTcpClient() {
  connected = false;
}

int TlsTcpClient::send_Tls(void *ctx, const unsigned char *buf, size_t len) {
   d4c20:	b570      	push	{r4, r5, r6, lr}
  TlsTcpClient *sock = (TlsTcpClient *)ctx;

  if (!sock->client.connected()) {
   d4c22:	f200 758c 	addw	r5, r0, #1932	; 0x78c
   d4c26:	4628      	mov	r0, r5

TlsTcpClient::TlsTcpClient() {
  connected = false;
}

int TlsTcpClient::send_Tls(void *ctx, const unsigned char *buf, size_t len) {
   d4c28:	460c      	mov	r4, r1
   d4c2a:	4616      	mov	r6, r2
  TlsTcpClient *sock = (TlsTcpClient *)ctx;

  if (!sock->client.connected()) {
   d4c2c:	f012 fd19 	bl	e7662 <_ZN9TCPClient9connectedEv>
   d4c30:	b158      	cbz	r0, d4c4a <_ZN12TlsTcpClient8send_TlsEPvPKhj+0x2a>
    return -1;
  }

  int ret = sock->client.write(buf, len);
   d4c32:	4621      	mov	r1, r4
   d4c34:	4632      	mov	r2, r6
   d4c36:	4628      	mov	r0, r5
   d4c38:	f012 fcfd 	bl	e7636 <_ZN9TCPClient5writeEPKhj>
  if (ret == 0) {
   d4c3c:	4604      	mov	r4, r0
   d4c3e:	b138      	cbz	r0, d4c50 <_ZN12TlsTcpClient8send_TlsEPvPKhj+0x30>
      return MBEDTLS_ERR_SSL_WANT_WRITE;
  }
  sock->client.flush();
   d4c40:	4628      	mov	r0, r5
   d4c42:	f012 fd0d 	bl	e7660 <_ZN9TCPClient5flushEv>
  return ret;
   d4c46:	4620      	mov	r0, r4
   d4c48:	bd70      	pop	{r4, r5, r6, pc}

int TlsTcpClient::send_Tls(void *ctx, const unsigned char *buf, size_t len) {
  TlsTcpClient *sock = (TlsTcpClient *)ctx;

  if (!sock->client.connected()) {
    return -1;
   d4c4a:	f04f 30ff 	mov.w	r0, #4294967295
   d4c4e:	bd70      	pop	{r4, r5, r6, pc}
  }

  int ret = sock->client.write(buf, len);
  if (ret == 0) {
      return MBEDTLS_ERR_SSL_WANT_WRITE;
   d4c50:	4800      	ldr	r0, [pc, #0]	; (d4c54 <_ZN12TlsTcpClient8send_TlsEPvPKhj+0x34>)
  }
  sock->client.flush();
  return ret;
}
   d4c52:	bd70      	pop	{r4, r5, r6, pc}
   d4c54:	ffff9780 	.word	0xffff9780

000d4c58 <_ZN12TlsTcpClient8recv_TlsEPvPhj>:

int TlsTcpClient::recv_Tls(void *ctx, unsigned char *buf, size_t len) {
   d4c58:	b570      	push	{r4, r5, r6, lr}
   d4c5a:	4604      	mov	r4, r0
  TlsTcpClient *sock = (TlsTcpClient *)ctx;
  // TODO: need this delay?
  delay(10);

  if (!sock->client.connected()) {
   d4c5c:	f204 748c 	addw	r4, r4, #1932	; 0x78c
}

int TlsTcpClient::recv_Tls(void *ctx, unsigned char *buf, size_t len) {
  TlsTcpClient *sock = (TlsTcpClient *)ctx;
  // TODO: need this delay?
  delay(10);
   d4c60:	200a      	movs	r0, #10
  }
  sock->client.flush();
  return ret;
}

int TlsTcpClient::recv_Tls(void *ctx, unsigned char *buf, size_t len) {
   d4c62:	460d      	mov	r5, r1
   d4c64:	4616      	mov	r6, r2
  TlsTcpClient *sock = (TlsTcpClient *)ctx;
  // TODO: need this delay?
  delay(10);
   d4c66:	f011 ffb1 	bl	e6bcc <delay>

  if (!sock->client.connected()) {
   d4c6a:	4620      	mov	r0, r4
   d4c6c:	f012 fcf9 	bl	e7662 <_ZN9TCPClient9connectedEv>
   d4c70:	b158      	cbz	r0, d4c8a <_ZN12TlsTcpClient8recv_TlsEPvPhj+0x32>
    return -1;
  }

  if (sock->client.available() == 0) {
   d4c72:	4620      	mov	r0, r4
   d4c74:	f012 fee0 	bl	e7a38 <_ZN9TCPClient9availableEv>
   d4c78:	b128      	cbz	r0, d4c86 <_ZN12TlsTcpClient8recv_TlsEPvPhj+0x2e>
    return MBEDTLS_ERR_SSL_WANT_READ;
  }

  int ret = sock->client.read(buf, len);
   d4c7a:	4632      	mov	r2, r6
   d4c7c:	4629      	mov	r1, r5
   d4c7e:	4620      	mov	r0, r4
   d4c80:	f012 fd9d 	bl	e77be <_ZN9TCPClient4readEPhj>
  if (ret == 0) {
   d4c84:	b918      	cbnz	r0, d4c8e <_ZN12TlsTcpClient8recv_TlsEPvPhj+0x36>
    return MBEDTLS_ERR_SSL_WANT_READ;
   d4c86:	4802      	ldr	r0, [pc, #8]	; (d4c90 <_ZN12TlsTcpClient8recv_TlsEPvPhj+0x38>)
   d4c88:	bd70      	pop	{r4, r5, r6, pc}
  TlsTcpClient *sock = (TlsTcpClient *)ctx;
  // TODO: need this delay?
  delay(10);

  if (!sock->client.connected()) {
    return -1;
   d4c8a:	f04f 30ff 	mov.w	r0, #4294967295
  int ret = sock->client.read(buf, len);
  if (ret == 0) {
    return MBEDTLS_ERR_SSL_WANT_READ;
  }
  return ret;
}
   d4c8e:	bd70      	pop	{r4, r5, r6, pc}
   d4c90:	ffff9700 	.word	0xffff9700

000d4c94 <_ZN12TlsTcpClient5closeEv>:
  mbedtls_ssl_set_bio(&ssl, this, &TlsTcpClient::send_Tls,  &TlsTcpClient::recv_Tls, nullptr);
  return 0;
}

void TlsTcpClient::close() {
  connected = false;
   d4c94:	2300      	movs	r3, #0
  mbedtls_ssl_set_timer_cb(&ssl, &timer, mbedtls_timing_set_delay, mbedtls_timing_get_delay);
  mbedtls_ssl_set_bio(&ssl, this, &TlsTcpClient::send_Tls,  &TlsTcpClient::recv_Tls, nullptr);
  return 0;
}

void TlsTcpClient::close() {
   d4c96:	b510      	push	{r4, lr}
   d4c98:	4604      	mov	r4, r0
  connected = false;
   d4c9a:	f880 37a8 	strb.w	r3, [r0, #1960]	; 0x7a8
  mbedtls_x509_crt_free(&cacert);
   d4c9e:	f200 40f4 	addw	r0, r0, #1268	; 0x4f4
   d4ca2:	f009 fc06 	bl	de4b2 <mbedtls_x509_crt_free>
  mbedtls_x509_crt_free(&clicert);
   d4ca6:	f504 60c5 	add.w	r0, r4, #1576	; 0x628
   d4caa:	f009 fc02 	bl	de4b2 <mbedtls_x509_crt_free>
  mbedtls_pk_free(&pkey);
   d4cae:	f204 705c 	addw	r0, r4, #1884	; 0x75c
   d4cb2:	f00a f825 	bl	ded00 <mbedtls_pk_free>
  mbedtls_ssl_config_free (&conf);
   d4cb6:	f204 4074 	addw	r0, r4, #1140	; 0x474
   d4cba:	f00b fcf3 	bl	e06a4 <mbedtls_ssl_config_free>
  mbedtls_ssl_free (&ssl);
   d4cbe:	f504 706e 	add.w	r0, r4, #952	; 0x3b8
   d4cc2:	f00b fc51 	bl	e0568 <mbedtls_ssl_free>
  client.stop();
   d4cc6:	f204 708c 	addw	r0, r4, #1932	; 0x78c
};
   d4cca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  mbedtls_x509_crt_free(&cacert);
  mbedtls_x509_crt_free(&clicert);
  mbedtls_pk_free(&pkey);
  mbedtls_ssl_config_free (&conf);
  mbedtls_ssl_free (&ssl);
  client.stop();
   d4cce:	f012 be9b 	b.w	e7a08 <_ZN9TCPClient4stopEv>

000d4cd2 <_ZN12TlsTcpClient4readEPhi>:
  int ret = read(buff, 1);
  if (ret == 1) return buff[0];
  else    return ret;
}

int TlsTcpClient::read(unsigned char *buff, int length) {
   d4cd2:	b510      	push	{r4, lr}
  if (connected) {
   d4cd4:	f890 37a8 	ldrb.w	r3, [r0, #1960]	; 0x7a8
  int ret = read(buff, 1);
  if (ret == 1) return buff[0];
  else    return ret;
}

int TlsTcpClient::read(unsigned char *buff, int length) {
   d4cd8:	4604      	mov	r4, r0
  if (connected) {
   d4cda:	b18b      	cbz	r3, d4d00 <_ZN12TlsTcpClient4readEPhi+0x2e>
      int ret = mbedtls_ssl_read(&ssl, buff, length);
   d4cdc:	f500 706e 	add.w	r0, r0, #952	; 0x3b8
   d4ce0:	f00b fa3a 	bl	e0158 <mbedtls_ssl_read>
      if (ret < 0) {
   d4ce4:	2800      	cmp	r0, #0
   d4ce6:	da0d      	bge.n	d4d04 <_ZN12TlsTcpClient4readEPhi+0x32>
            switch (ret) {
   d4ce8:	f510 4fee 	cmn.w	r0, #30464	; 0x7700
   d4cec:	d006      	beq.n	d4cfc <_ZN12TlsTcpClient4readEPhi+0x2a>
   d4cee:	f510 4fd2 	cmn.w	r0, #26880	; 0x6900
   d4cf2:	d007      	beq.n	d4d04 <_ZN12TlsTcpClient4readEPhi+0x32>
            case MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE:
                ret = 0;
                break;
            case MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY:
            default:
                close();
   d4cf4:	4620      	mov	r0, r4
   d4cf6:	f7ff ffcd 	bl	d4c94 <_ZN12TlsTcpClient5closeEv>
   d4cfa:	e001      	b.n	d4d00 <_ZN12TlsTcpClient4readEPhi+0x2e>
      if (ret < 0) {
            switch (ret) {
              case MBEDTLS_ERR_SSL_WANT_READ:
                break;
            case MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE:
                ret = 0;
   d4cfc:	2000      	movs	r0, #0
   d4cfe:	bd10      	pop	{r4, pc}
                return -1;
          }
      }
      return ret;
  } else
    return -1;
   d4d00:	f04f 30ff 	mov.w	r0, #4294967295
}
   d4d04:	bd10      	pop	{r4, pc}

000d4d06 <_ZN12TlsTcpClient7connectEPct>:
  mbedtls_ssl_free (&ssl);
  client.stop();
};


int TlsTcpClient::connect(char* domain, uint16_t port) {
   d4d06:	b538      	push	{r3, r4, r5, lr}
   d4d08:	4604      	mov	r4, r0
  int ret;
  if (!client.connect(domain, port)) {
   d4d0a:	2300      	movs	r3, #0
   d4d0c:	f200 708c 	addw	r0, r0, #1932	; 0x78c
  mbedtls_ssl_free (&ssl);
  client.stop();
};


int TlsTcpClient::connect(char* domain, uint16_t port) {
   d4d10:	460d      	mov	r5, r1
  int ret;
  if (!client.connect(domain, port)) {
   d4d12:	f012 fd7d 	bl	e7810 <_ZN9TCPClient7connectEPKctm>
   d4d16:	b150      	cbz	r0, d4d2e <_ZN12TlsTcpClient7connectEPct+0x28>
      debug_tls(" could not connect to server : %s\n", domain);
      return -1;
  }

  if((ret = mbedtls_ssl_set_hostname(&ssl, domain)) != 0) {
   d4d18:	4629      	mov	r1, r5
   d4d1a:	f504 706e 	add.w	r0, r4, #952	; 0x3b8
   d4d1e:	f00b f977 	bl	e0010 <mbedtls_ssl_set_hostname>
   d4d22:	b930      	cbnz	r0, d4d32 <_ZN12TlsTcpClient7connectEPct+0x2c>
    return ret;
  }

  return this->handShake();
   d4d24:	4620      	mov	r0, r4
}
   d4d26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  if((ret = mbedtls_ssl_set_hostname(&ssl, domain)) != 0) {
    return ret;
  }

  return this->handShake();
   d4d2a:	f7ff bf43 	b.w	d4bb4 <_ZN12TlsTcpClient9handShakeEv>

int TlsTcpClient::connect(char* domain, uint16_t port) {
  int ret;
  if (!client.connect(domain, port)) {
      debug_tls(" could not connect to server : %s\n", domain);
      return -1;
   d4d2e:	f04f 30ff 	mov.w	r0, #4294967295
  if((ret = mbedtls_ssl_set_hostname(&ssl, domain)) != 0) {
    return ret;
  }

  return this->handShake();
}
   d4d32:	bd38      	pop	{r3, r4, r5, pc}

000d4d34 <_ZN10HttpHelperC1Ev>:
#include "HttpHelper.h"
HttpHelper::HttpHelper(/* args */)
   d4d34:	4b23      	ldr	r3, [pc, #140]	; (d4dc4 <_ZN10HttpHelperC1Ev+0x90>)
   d4d36:	b570      	push	{r4, r5, r6, lr}
   d4d38:	6003      	str	r3, [r0, #0]
   d4d3a:	4b23      	ldr	r3, [pc, #140]	; (d4dc8 <_ZN10HttpHelperC1Ev+0x94>)
   d4d3c:	6043      	str	r3, [r0, #4]
   d4d3e:	4b23      	ldr	r3, [pc, #140]	; (d4dcc <_ZN10HttpHelperC1Ev+0x98>)
   d4d40:	6083      	str	r3, [r0, #8]
   d4d42:	4b23      	ldr	r3, [pc, #140]	; (d4dd0 <_ZN10HttpHelperC1Ev+0x9c>)
#include "Particle.h"
#include "debug.h"
class HttpHelper
{
    typedef struct
{
   d4d44:	4d23      	ldr	r5, [pc, #140]	; (d4dd4 <_ZN10HttpHelperC1Ev+0xa0>)
   d4d46:	60c3      	str	r3, [r0, #12]
   d4d48:	4b23      	ldr	r3, [pc, #140]	; (d4dd8 <_ZN10HttpHelperC1Ev+0xa4>)
   d4d4a:	6103      	str	r3, [r0, #16]
   d4d4c:	2600      	movs	r6, #0
   d4d4e:	2309      	movs	r3, #9
   d4d50:	4604      	mov	r4, r0
   d4d52:	6143      	str	r3, [r0, #20]
   d4d54:	6186      	str	r6, [r0, #24]
   d4d56:	4629      	mov	r1, r5
   d4d58:	301c      	adds	r0, #28
   d4d5a:	f011 fc0c 	bl	e6576 <_ZN6StringC1EPK19__FlashStringHelper>
   d4d5e:	4629      	mov	r1, r5
   d4d60:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d4d64:	f011 fc07 	bl	e6576 <_ZN6StringC1EPK19__FlashStringHelper>
   d4d68:	4629      	mov	r1, r5
   d4d6a:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d4d6e:	f011 fc02 	bl	e6576 <_ZN6StringC1EPK19__FlashStringHelper>
   d4d72:	4629      	mov	r1, r5
   d4d74:	f104 0050 	add.w	r0, r4, #80	; 0x50
   d4d78:	f011 fbfd 	bl	e6576 <_ZN6StringC1EPK19__FlashStringHelper>
   d4d7c:	4629      	mov	r1, r5
   d4d7e:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d4d82:	f011 fbf8 	bl	e6576 <_ZN6StringC1EPK19__FlashStringHelper>
   d4d86:	4629      	mov	r1, r5
   d4d88:	f104 0070 	add.w	r0, r4, #112	; 0x70
   d4d8c:	f011 fbf3 	bl	e6576 <_ZN6StringC1EPK19__FlashStringHelper>

      pointer
      _M_local_data()
      {
#if __cplusplus >= 201103L
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   d4d90:	f104 038c 	add.w	r3, r4, #140	; 0x8c

      // Use empty-base optimization: http://www.cantrip.org/emptyopt.html
      struct _Alloc_hider : allocator_type // TODO check __is_final
      {
	_Alloc_hider(pointer __dat, const _Alloc& __a = _Alloc())
	: allocator_type(__a), _M_p(__dat) { }
   d4d94:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 * HTTP Response struct.
 * status  response status code.
 * body	response body
 */
typedef struct
{
   d4d98:	4629      	mov	r1, r5
      _M_data(pointer __p)
      { _M_dataplus._M_p = __p; }

      void
      _M_length(size_type __length)
      { _M_string_length = __length; }
   d4d9a:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
      typedef streamoff         off_type;
      typedef mbstate_t         state_type;

      static void
      assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
      { __c1 = __c2; }
   d4d9e:	f884 608c 	strb.w	r6, [r4, #140]	; 0x8c
   d4da2:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   d4da6:	f011 fbe6 	bl	e6576 <_ZN6StringC1EPK19__FlashStringHelper>
   d4daa:	490c      	ldr	r1, [pc, #48]	; (d4ddc <_ZN10HttpHelperC1Ev+0xa8>)
   d4dac:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   d4db0:	f011 fbe1 	bl	e6576 <_ZN6StringC1EPK19__FlashStringHelper>
   d4db4:	490a      	ldr	r1, [pc, #40]	; (d4de0 <_ZN10HttpHelperC1Ev+0xac>)
   d4db6:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
   d4dba:	f011 fbdc 	bl	e6576 <_ZN6StringC1EPK19__FlashStringHelper>
{
}
   d4dbe:	4620      	mov	r0, r4
   d4dc0:	bd70      	pop	{r4, r5, r6, pc}
   d4dc2:	bf00      	nop
   d4dc4:	000ec89f 	.word	0x000ec89f
   d4dc8:	000ec8a3 	.word	0x000ec8a3
   d4dcc:	000ec8a8 	.word	0x000ec8a8
   d4dd0:	000ec8ac 	.word	0x000ec8ac
   d4dd4:	000ed091 	.word	0x000ed091
   d4dd8:	000ec8b3 	.word	0x000ec8b3
   d4ddc:	000ec8b9 	.word	0x000ec8b9
   d4de0:	000ec8ca 	.word	0x000ec8ca

000d4de4 <_ZN10HttpHelperD1Ev>:

HttpHelper::~HttpHelper()
   d4de4:	b538      	push	{r3, r4, r5, lr}
   d4de6:	4604      	mov	r4, r0
   d4de8:	30c8      	adds	r0, #200	; 0xc8
   d4dea:	f011 fb7d 	bl	e64e8 <_ZN6StringD1Ev>
   d4dee:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   d4df2:	f011 fb79 	bl	e64e8 <_ZN6StringD1Ev>
  int status;
  std::string body;
  String faceId;
  bool isIdentical;
  double confidence;
} http_response_t;
   d4df6:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   d4dfa:	f011 fb75 	bl	e64e8 <_ZN6StringD1Ev>

      /**
       *  @brief  Destroy the string instance.
       */
      ~basic_string()
      { _M_dispose(); }
   d4dfe:	f104 0084 	add.w	r0, r4, #132	; 0x84
   d4e02:	f013 fb75 	bl	e84f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
  String body;
  uint8_t * octetBody;
  String content;
  String key;
  String length;
} http_request_t;
   d4e06:	f104 0070 	add.w	r0, r4, #112	; 0x70
   d4e0a:	f011 fb6d 	bl	e64e8 <_ZN6StringD1Ev>
   d4e0e:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d4e12:	f011 fb69 	bl	e64e8 <_ZN6StringD1Ev>
   d4e16:	f104 0050 	add.w	r0, r4, #80	; 0x50
   d4e1a:	f011 fb65 	bl	e64e8 <_ZN6StringD1Ev>
   d4e1e:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d4e22:	f011 fb61 	bl	e64e8 <_ZN6StringD1Ev>
   d4e26:	f104 051c 	add.w	r5, r4, #28
   d4e2a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d4e2e:	f011 fb5b 	bl	e64e8 <_ZN6StringD1Ev>
   d4e32:	4628      	mov	r0, r5
   d4e34:	f011 fb58 	bl	e64e8 <_ZN6StringD1Ev>
{
}
   d4e38:	4620      	mov	r0, r4
   d4e3a:	bd38      	pop	{r3, r4, r5, pc}

000d4e3c <_ZN10HttpHelper7setPathE6String>:

void HttpHelper::setPath(String path) {
    httpRequest.path = path;
   d4e3c:	301c      	adds	r0, #28
   d4e3e:	f011 bbca 	b.w	e65d6 <_ZN6StringaSERKS_>

000d4e42 <_ZN10HttpHelper7setHostE6String>:
}
void HttpHelper::setHost(String host) {
    httpRequest.host = host;
   d4e42:	302c      	adds	r0, #44	; 0x2c
   d4e44:	f011 bbc7 	b.w	e65d6 <_ZN6StringaSERKS_>

000d4e48 <_ZN10HttpHelper7setBodyE6StringS0_S0_>:
}
void HttpHelper::setBody(String faceId, String personId, String personGroupId) {
   d4e48:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4e4a:	b085      	sub	sp, #20
   d4e4c:	4604      	mov	r4, r0
   d4e4e:	460f      	mov	r7, r1
    String tmp = "{";
   d4e50:	4668      	mov	r0, sp
   d4e52:	4915      	ldr	r1, [pc, #84]	; (d4ea8 <_ZN10HttpHelper7setBodyE6StringS0_S0_+0x60>)
    httpRequest.path = path;
}
void HttpHelper::setHost(String host) {
    httpRequest.host = host;
}
void HttpHelper::setBody(String faceId, String personId, String personGroupId) {
   d4e54:	4616      	mov	r6, r2
   d4e56:	461d      	mov	r5, r3
    String tmp = "{";
   d4e58:	f011 fb8d 	bl	e6576 <_ZN6StringC1EPK19__FlashStringHelper>
    tmp.concat("\"faceId\":\"");
   d4e5c:	4913      	ldr	r1, [pc, #76]	; (d4eac <_ZN10HttpHelper7setBodyE6StringS0_S0_+0x64>)
   d4e5e:	4668      	mov	r0, sp
   d4e60:	f011 fc38 	bl	e66d4 <_ZN6String6concatEPKc>
    tmp.concat(faceId);
   d4e64:	4639      	mov	r1, r7
   d4e66:	4668      	mov	r0, sp
   d4e68:	f011 fc26 	bl	e66b8 <_ZN6String6concatERKS_>
    tmp.concat("\",\"personId\":\"");
   d4e6c:	4910      	ldr	r1, [pc, #64]	; (d4eb0 <_ZN10HttpHelper7setBodyE6StringS0_S0_+0x68>)
   d4e6e:	4668      	mov	r0, sp
   d4e70:	f011 fc30 	bl	e66d4 <_ZN6String6concatEPKc>
    tmp.concat(personId);
   d4e74:	4631      	mov	r1, r6
   d4e76:	4668      	mov	r0, sp
   d4e78:	f011 fc1e 	bl	e66b8 <_ZN6String6concatERKS_>
    tmp.concat("\",\"PersonGroupId\":\"");
   d4e7c:	490d      	ldr	r1, [pc, #52]	; (d4eb4 <_ZN10HttpHelper7setBodyE6StringS0_S0_+0x6c>)
   d4e7e:	4668      	mov	r0, sp
   d4e80:	f011 fc28 	bl	e66d4 <_ZN6String6concatEPKc>
    tmp.concat(personGroupId);
   d4e84:	4629      	mov	r1, r5
   d4e86:	4668      	mov	r0, sp
   d4e88:	f011 fc16 	bl	e66b8 <_ZN6String6concatERKS_>
    tmp.concat("\"}\r\n\r\n");
   d4e8c:	490a      	ldr	r1, [pc, #40]	; (d4eb8 <_ZN10HttpHelper7setBodyE6StringS0_S0_+0x70>)
   d4e8e:	4668      	mov	r0, sp
   d4e90:	f011 fc20 	bl	e66d4 <_ZN6String6concatEPKc>
    httpRequest.body = tmp;
   d4e94:	4669      	mov	r1, sp
   d4e96:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d4e9a:	f011 fb9c 	bl	e65d6 <_ZN6StringaSERKS_>
}
void HttpHelper::setHost(String host) {
    httpRequest.host = host;
}
void HttpHelper::setBody(String faceId, String personId, String personGroupId) {
    String tmp = "{";
   d4e9e:	4668      	mov	r0, sp
   d4ea0:	f011 fb22 	bl	e64e8 <_ZN6StringD1Ev>
    tmp.concat("\",\"PersonGroupId\":\"");
    tmp.concat(personGroupId);
    tmp.concat("\"}\r\n\r\n");
    httpRequest.body = tmp;

}
   d4ea4:	b005      	add	sp, #20
   d4ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4ea8:	000ec8e3 	.word	0x000ec8e3
   d4eac:	000ec8e5 	.word	0x000ec8e5
   d4eb0:	000ec8f0 	.word	0x000ec8f0
   d4eb4:	000ec8ff 	.word	0x000ec8ff
   d4eb8:	000ec913 	.word	0x000ec913

000d4ebc <_ZN10HttpHelper7setBodyEPh>:

void HttpHelper::setBody(uint8_t * body) {
   httpRequest.octetBody = body;
   d4ebc:	64c1      	str	r1, [r0, #76]	; 0x4c
   d4ebe:	4770      	bx	lr

000d4ec0 <_ZN10HttpHelper16setContentLengthEm>:
}


void HttpHelper::setContentLength(uint32_t length) {
   d4ec0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    httpRequest.length = String(length);
   d4ec2:	220a      	movs	r2, #10
void HttpHelper::setBody(uint8_t * body) {
   httpRequest.octetBody = body;
}


void HttpHelper::setContentLength(uint32_t length) {
   d4ec4:	4604      	mov	r4, r0
    httpRequest.length = String(length);
   d4ec6:	4668      	mov	r0, sp
   d4ec8:	f011 fbcb 	bl	e6662 <_ZN6StringC1Emh>
   d4ecc:	4669      	mov	r1, sp
   d4ece:	f104 0070 	add.w	r0, r4, #112	; 0x70
   d4ed2:	f011 fb9a 	bl	e660a <_ZN6StringaSEOS_>
   d4ed6:	4668      	mov	r0, sp
   d4ed8:	f011 fb06 	bl	e64e8 <_ZN6StringD1Ev>
}
   d4edc:	b004      	add	sp, #16
   d4ede:	bd10      	pop	{r4, pc}

000d4ee0 <_ZN10HttpHelper10setContentE6String>:


void HttpHelper::setContent(String content) {
    httpRequest.content = content;
   d4ee0:	3050      	adds	r0, #80	; 0x50
   d4ee2:	f011 bb78 	b.w	e65d6 <_ZN6StringaSERKS_>

000d4ee6 <_ZN10HttpHelper6setKeyE6String>:
}

void HttpHelper::setKey(String key) {
    httpRequest.key = key;
   d4ee6:	3060      	adds	r0, #96	; 0x60
   d4ee8:	f011 bb75 	b.w	e65d6 <_ZN6StringaSERKS_>

000d4eec <_ZN10HttpHelper7getHostEv>:
    this->httpResponse.body = body;
}

const char * HttpHelper::getHost() {
    return httpRequest.host.c_str();
}
   d4eec:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d4eee:	4770      	bx	lr

000d4ef0 <_ZN10HttpHelper9getStatusEv>:
   
    return  this->makeHeader().c_str();
}
int HttpHelper::getStatus() {
    return httpResponse.status;
}
   d4ef0:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
   d4ef4:	4770      	bx	lr

000d4ef6 <_ZN10HttpHelper9getFaceIdEv>:

String HttpHelper::getBodyLength() {
    return String(httpRequest.body.length());  
}

String HttpHelper::getFaceId(){
   d4ef6:	b510      	push	{r4, lr}
    return httpResponse.faceId;
   d4ef8:	319c      	adds	r1, #156	; 0x9c

String HttpHelper::getBodyLength() {
    return String(httpRequest.body.length());  
}

String HttpHelper::getFaceId(){
   d4efa:	4604      	mov	r4, r0
    return httpResponse.faceId;
   d4efc:	f011 fb7a 	bl	e65f4 <_ZN6StringC1ERKS_>
}
   d4f00:	4620      	mov	r0, r4
   d4f02:	bd10      	pop	{r4, pc}

000d4f04 <_ZN10HttpHelper14getIsIdenticalEv>:

bool HttpHelper::getIsIdentical(){
    return httpResponse.isIdentical;
}
   d4f04:	f890 00ac 	ldrb.w	r0, [r0, #172]	; 0xac
   d4f08:	4770      	bx	lr
	...

000d4f0c <_ZN10HttpHelper10makeHeaderEv>:

double HttpHelper::getConfidence(){
    return httpResponse.confidence;
}

String HttpHelper::makeHeader() {
   d4f0c:	b570      	push	{r4, r5, r6, lr}
   d4f0e:	460d      	mov	r5, r1
   d4f10:	4604      	mov	r4, r0
    String tmp;
   d4f12:	492f      	ldr	r1, [pc, #188]	; (d4fd0 <_ZN10HttpHelper10makeHeaderEv+0xc4>)
   d4f14:	f011 fb2f 	bl	e6576 <_ZN6StringC1EPK19__FlashStringHelper>
    tmp.concat(HTTP_METHOD_POST);
   d4f18:	6869      	ldr	r1, [r5, #4]
   d4f1a:	4620      	mov	r0, r4
   d4f1c:	f011 fbda 	bl	e66d4 <_ZN6String6concatEPKc>
    tmp.concat(" ");
   d4f20:	492c      	ldr	r1, [pc, #176]	; (d4fd4 <_ZN10HttpHelper10makeHeaderEv+0xc8>)
   d4f22:	4620      	mov	r0, r4
   d4f24:	f011 fbd6 	bl	e66d4 <_ZN6String6concatEPKc>
    tmp.concat(httpRequest.path);
   d4f28:	f105 011c 	add.w	r1, r5, #28
   d4f2c:	4620      	mov	r0, r4
   d4f2e:	f011 fbc3 	bl	e66b8 <_ZN6String6concatERKS_>
    tmp.concat(" HTTP/1.0");
   d4f32:	4929      	ldr	r1, [pc, #164]	; (d4fd8 <_ZN10HttpHelper10makeHeaderEv+0xcc>)
   d4f34:	4620      	mov	r0, r4
   d4f36:	f011 fbcd 	bl	e66d4 <_ZN6String6concatEPKc>
    tmp.concat("\r\n");
   d4f3a:	4928      	ldr	r1, [pc, #160]	; (d4fdc <_ZN10HttpHelper10makeHeaderEv+0xd0>)
   d4f3c:	4620      	mov	r0, r4
   d4f3e:	f011 fbc9 	bl	e66d4 <_ZN6String6concatEPKc>
    tmp.concat("Ocp-Apim-Subscription-Key:");
   d4f42:	4927      	ldr	r1, [pc, #156]	; (d4fe0 <_ZN10HttpHelper10makeHeaderEv+0xd4>)
   d4f44:	4620      	mov	r0, r4
   d4f46:	f011 fbc5 	bl	e66d4 <_ZN6String6concatEPKc>
    tmp.concat(httpRequest.key);
   d4f4a:	f105 0160 	add.w	r1, r5, #96	; 0x60
   d4f4e:	4620      	mov	r0, r4
   d4f50:	f011 fbb2 	bl	e66b8 <_ZN6String6concatERKS_>
    tmp.concat("\r\n");
   d4f54:	4921      	ldr	r1, [pc, #132]	; (d4fdc <_ZN10HttpHelper10makeHeaderEv+0xd0>)
   d4f56:	4620      	mov	r0, r4
   d4f58:	f011 fbbc 	bl	e66d4 <_ZN6String6concatEPKc>
    tmp.concat("Content-Type:");
    tmp.concat(httpRequest.content);
   d4f5c:	f105 0650 	add.w	r6, r5, #80	; 0x50
    tmp.concat(" HTTP/1.0");
    tmp.concat("\r\n");
    tmp.concat("Ocp-Apim-Subscription-Key:");
    tmp.concat(httpRequest.key);
    tmp.concat("\r\n");
    tmp.concat("Content-Type:");
   d4f60:	4920      	ldr	r1, [pc, #128]	; (d4fe4 <_ZN10HttpHelper10makeHeaderEv+0xd8>)
   d4f62:	4620      	mov	r0, r4
   d4f64:	f011 fbb6 	bl	e66d4 <_ZN6String6concatEPKc>
    tmp.concat(httpRequest.content);
   d4f68:	4631      	mov	r1, r6
   d4f6a:	4620      	mov	r0, r4
   d4f6c:	f011 fba4 	bl	e66b8 <_ZN6String6concatERKS_>
    tmp.concat("\r\n");
   d4f70:	491a      	ldr	r1, [pc, #104]	; (d4fdc <_ZN10HttpHelper10makeHeaderEv+0xd0>)
   d4f72:	4620      	mov	r0, r4
   d4f74:	f011 fbae 	bl	e66d4 <_ZN6String6concatEPKc>
    tmp.concat("Host:");
   d4f78:	491b      	ldr	r1, [pc, #108]	; (d4fe8 <_ZN10HttpHelper10makeHeaderEv+0xdc>)
   d4f7a:	4620      	mov	r0, r4
   d4f7c:	f011 fbaa 	bl	e66d4 <_ZN6String6concatEPKc>
    tmp.concat(httpRequest.host);
   d4f80:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   d4f84:	4620      	mov	r0, r4
   d4f86:	f011 fb97 	bl	e66b8 <_ZN6String6concatERKS_>
    tmp.concat("\r\n");
   d4f8a:	4914      	ldr	r1, [pc, #80]	; (d4fdc <_ZN10HttpHelper10makeHeaderEv+0xd0>)
   d4f8c:	4620      	mov	r0, r4
   d4f8e:	f011 fba1 	bl	e66d4 <_ZN6String6concatEPKc>
    tmp.concat("Content-Length:");
   d4f92:	4916      	ldr	r1, [pc, #88]	; (d4fec <_ZN10HttpHelper10makeHeaderEv+0xe0>)
   d4f94:	4620      	mov	r0, r4
   d4f96:	f011 fb9d 	bl	e66d4 <_ZN6String6concatEPKc>
    tmp.concat(httpRequest.length);
   d4f9a:	f105 0170 	add.w	r1, r5, #112	; 0x70
   d4f9e:	4620      	mov	r0, r4
   d4fa0:	f011 fb8a 	bl	e66b8 <_ZN6String6concatERKS_>
    tmp.concat("\r\n\r\n");
   d4fa4:	4912      	ldr	r1, [pc, #72]	; (d4ff0 <_ZN10HttpHelper10makeHeaderEv+0xe4>)
   d4fa6:	4620      	mov	r0, r4
   d4fa8:	f011 fb94 	bl	e66d4 <_ZN6String6concatEPKc>
	// comparison (only works w/ Strings and "strings")
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   d4fac:	f105 01b8 	add.w	r1, r5, #184	; 0xb8
   d4fb0:	4630      	mov	r0, r6
   d4fb2:	f011 fbc6 	bl	e6742 <_ZNK6String6equalsERKS_>
    if(httpRequest.content == HTTP_JSON) {
   d4fb6:	b140      	cbz	r0, d4fca <_ZN10HttpHelper10makeHeaderEv+0xbe>
        tmp.concat(httpRequest.body);
   d4fb8:	f105 013c 	add.w	r1, r5, #60	; 0x3c
   d4fbc:	4620      	mov	r0, r4
   d4fbe:	f011 fb7b 	bl	e66b8 <_ZN6String6concatERKS_>
        tmp.concat("\r\n\r\n");
   d4fc2:	490b      	ldr	r1, [pc, #44]	; (d4ff0 <_ZN10HttpHelper10makeHeaderEv+0xe4>)
   d4fc4:	4620      	mov	r0, r4
   d4fc6:	f011 fb85 	bl	e66d4 <_ZN6String6concatEPKc>
    }
    return tmp;
}
   d4fca:	4620      	mov	r0, r4
   d4fcc:	bd70      	pop	{r4, r5, r6, pc}
   d4fce:	bf00      	nop
   d4fd0:	000ed091 	.word	0x000ed091
   d4fd4:	000ef614 	.word	0x000ef614
   d4fd8:	000ec91a 	.word	0x000ec91a
   d4fdc:	000ec917 	.word	0x000ec917
   d4fe0:	000ec924 	.word	0x000ec924
   d4fe4:	000ec93f 	.word	0x000ec93f
   d4fe8:	000ec94d 	.word	0x000ec94d
   d4fec:	000ec953 	.word	0x000ec953
   d4ff0:	000ec915 	.word	0x000ec915

000d4ff4 <_ZN10HttpHelper10makeDetectEv>:

const char * HttpHelper::getHost() {
    return httpRequest.host.c_str();
}

const char * HttpHelper::makeDetect() {
   d4ff4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return  this->makeHeader().c_str();
   d4ff6:	4601      	mov	r1, r0
   d4ff8:	4668      	mov	r0, sp
   d4ffa:	f7ff ff87 	bl	d4f0c <_ZN10HttpHelper10makeHeaderEv>
   d4ffe:	4668      	mov	r0, sp
   d5000:	9c00      	ldr	r4, [sp, #0]
   d5002:	f011 fa71 	bl	e64e8 <_ZN6StringD1Ev>
}
   d5006:	4620      	mov	r0, r4
   d5008:	b004      	add	sp, #16
   d500a:	bd10      	pop	{r4, pc}

000d500c <_ZN10HttpHelper10makeVerifyEv>:

const char * HttpHelper::makeVerify() {
   d500c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
int HttpHelper::getStatus() {
    return httpResponse.status;
}

String HttpHelper::getBodyLength() {
    return String(httpRequest.body.length());  
   d500e:	220a      	movs	r2, #10

const char * HttpHelper::makeDetect() {
    return  this->makeHeader().c_str();
}

const char * HttpHelper::makeVerify() {
   d5010:	4604      	mov	r4, r0
int HttpHelper::getStatus() {
    return httpResponse.status;
}

String HttpHelper::getBodyLength() {
    return String(httpRequest.body.length());  
   d5012:	6c41      	ldr	r1, [r0, #68]	; 0x44
   d5014:	4668      	mov	r0, sp
   d5016:	f011 fb11 	bl	e663c <_ZN6StringC1Ejh>
const char * HttpHelper::makeDetect() {
    return  this->makeHeader().c_str();
}

const char * HttpHelper::makeVerify() {
    httpRequest.length = this->getBodyLength();
   d501a:	4669      	mov	r1, sp
   d501c:	f104 0070 	add.w	r0, r4, #112	; 0x70
   d5020:	f011 faf3 	bl	e660a <_ZN6StringaSEOS_>
   d5024:	4668      	mov	r0, sp
   d5026:	f011 fa5f 	bl	e64e8 <_ZN6StringD1Ev>
   
    return  this->makeHeader().c_str();
   d502a:	4621      	mov	r1, r4
   d502c:	4668      	mov	r0, sp
   d502e:	f7ff ff6d 	bl	d4f0c <_ZN10HttpHelper10makeHeaderEv>
   d5032:	4668      	mov	r0, sp
   d5034:	9c00      	ldr	r4, [sp, #0]
   d5036:	f011 fa57 	bl	e64e8 <_ZN6StringD1Ev>
}
   d503a:	4620      	mov	r0, r4
   d503c:	b004      	add	sp, #16
   d503e:	bd10      	pop	{r4, pc}

000d5040 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d5040:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d5042:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d5044:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d5046:	b17c      	cbz	r4, d5068 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d5048:	6863      	ldr	r3, [r4, #4]
   d504a:	3b01      	subs	r3, #1
   d504c:	6063      	str	r3, [r4, #4]
   d504e:	b95b      	cbnz	r3, d5068 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d5050:	6823      	ldr	r3, [r4, #0]
   d5052:	4620      	mov	r0, r4
   d5054:	689b      	ldr	r3, [r3, #8]
   d5056:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5058:	68a3      	ldr	r3, [r4, #8]
   d505a:	3b01      	subs	r3, #1
   d505c:	60a3      	str	r3, [r4, #8]
   d505e:	b91b      	cbnz	r3, d5068 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d5060:	6823      	ldr	r3, [r4, #0]
   d5062:	4620      	mov	r0, r4
   d5064:	68db      	ldr	r3, [r3, #12]
   d5066:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d5068:	4628      	mov	r0, r5
   d506a:	bd38      	pop	{r3, r4, r5, pc}

000d506c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d506c:	680b      	ldr	r3, [r1, #0]
   d506e:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d5070:	b113      	cbz	r3, d5078 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d5072:	685a      	ldr	r2, [r3, #4]
   d5074:	3201      	adds	r2, #1
   d5076:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d5078:	4770      	bx	lr

000d507a <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d507a:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d507c:	ac02      	add	r4, sp, #8
    return JSONValue(v_, d_);
   d507e:	690e      	ldr	r6, [r1, #16]
   d5080:	f851 3b04 	ldr.w	r3, [r1], #4
   d5084:	f844 3d08 	str.w	r3, [r4, #-8]!

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d5088:	4605      	mov	r5, r0
   d508a:	a801      	add	r0, sp, #4
   d508c:	f7ff ffee 	bl	d506c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d5090:	4622      	mov	r2, r4
   d5092:	4631      	mov	r1, r6
   d5094:	4628      	mov	r0, r5
   d5096:	f013 f89c 	bl	e81d2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d509a:	a801      	add	r0, sp, #4
   d509c:	f7ff ffd0 	bl	d5040 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d50a0:	4628      	mov	r0, r5
   d50a2:	b002      	add	sp, #8
   d50a4:	bd70      	pop	{r4, r5, r6, pc}

000d50a6 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d50a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d50a8:	ac02      	add	r4, sp, #8
        JSONObjectIterator(value.t_, value.d_) {
   d50aa:	688e      	ldr	r6, [r1, #8]
   d50ac:	f851 3b04 	ldr.w	r3, [r1], #4
   d50b0:	f844 3d08 	str.w	r3, [r4, #-8]!
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d50b4:	4605      	mov	r5, r0
   d50b6:	a801      	add	r0, sp, #4
   d50b8:	f7ff ffd8 	bl	d506c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d50bc:	4622      	mov	r2, r4
   d50be:	4631      	mov	r1, r6
   d50c0:	4628      	mov	r0, r5
   d50c2:	f013 f851 	bl	e8168 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d50c6:	a801      	add	r0, sp, #4
   d50c8:	f7ff ffba 	bl	d5040 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d50cc:	4628      	mov	r0, r5
   d50ce:	b002      	add	sp, #8
   d50d0:	bd70      	pop	{r4, r5, r6, pc}

000d50d2 <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d50d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d50d4:	ac02      	add	r4, sp, #8
    return JSONString(k_, d_);
   d50d6:	68ce      	ldr	r6, [r1, #12]
   d50d8:	f851 3b04 	ldr.w	r3, [r1], #4
   d50dc:	f844 3d08 	str.w	r3, [r4, #-8]!

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d50e0:	4605      	mov	r5, r0
   d50e2:	a801      	add	r0, sp, #4
   d50e4:	f7ff ffc2 	bl	d506c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d50e8:	4622      	mov	r2, r4
   d50ea:	4631      	mov	r1, r6
   d50ec:	4628      	mov	r0, r5
   d50ee:	f013 f813 	bl	e8118 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d50f2:	a801      	add	r0, sp, #4
   d50f4:	f7ff ffa4 	bl	d5040 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d50f8:	4628      	mov	r0, r5
   d50fa:	b002      	add	sp, #8
   d50fc:	bd70      	pop	{r4, r5, r6, pc}

000d50fe <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSEOS5_>:
	  return *this;
	}
#endif

      __shared_ptr&
      operator=(__shared_ptr&& __r) noexcept
   d50fe:	b513      	push	{r0, r1, r4, lr}
   d5100:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5102:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d5106:	2300      	movs	r3, #0
   d5108:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d510a:	600b      	str	r3, [r1, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d510c:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d510e:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d5110:	a802      	add	r0, sp, #8
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5112:	9300      	str	r3, [sp, #0]
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5114:	6863      	ldr	r3, [r4, #4]
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d5116:	f840 3d04 	str.w	r3, [r0, #-4]!

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d511a:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d511c:	f7ff ff90 	bl	d5040 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr&
      operator=(__shared_ptr&& __r) noexcept
      {
	__shared_ptr(std::move(__r)).swap(*this);
	return *this;
      }
   d5120:	4620      	mov	r0, r4
   d5122:	b002      	add	sp, #8
   d5124:	bd10      	pop	{r4, pc}
	...

000d5128 <_ZN10HttpHelper11setResponseEPcb>:
        tmp.concat("\r\n\r\n");
    }
    return tmp;
}

void HttpHelper::setResponse(char * respone, bool detect) { 
   d5128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    httpResponse.confidence = 0;
   d512c:	2300      	movs	r3, #0
        tmp.concat("\r\n\r\n");
    }
    return tmp;
}

void HttpHelper::setResponse(char * respone, bool detect) { 
   d512e:	4691      	mov	r9, r2
    httpResponse.confidence = 0;
    httpResponse.faceId = "";
   d5130:	f100 079c 	add.w	r7, r0, #156	; 0x9c
    }
    return tmp;
}

void HttpHelper::setResponse(char * respone, bool detect) { 
    httpResponse.confidence = 0;
   d5134:	2200      	movs	r2, #0
        tmp.concat("\r\n\r\n");
    }
    return tmp;
}

void HttpHelper::setResponse(char * respone, bool detect) { 
   d5136:	b0a0      	sub	sp, #128	; 0x80
    httpResponse.confidence = 0;
   d5138:	e9c0 232c 	strd	r2, r3, [r0, #176]	; 0xb0
        tmp.concat("\r\n\r\n");
    }
    return tmp;
}

void HttpHelper::setResponse(char * respone, bool detect) { 
   d513c:	4606      	mov	r6, r0
   d513e:	460d      	mov	r5, r1
    httpResponse.confidence = 0;
    httpResponse.faceId = "";
   d5140:	4638      	mov	r0, r7
   d5142:	499c      	ldr	r1, [pc, #624]	; (d53b4 <_ZN10HttpHelper11setResponseEPcb+0x28c>)
   d5144:	f011 fa69 	bl	e661a <_ZN6StringaSEPKc>
    httpResponse.isIdentical = false;
   d5148:	f04f 0800 	mov.w	r8, #0

      // Use empty-base optimization: http://www.cantrip.org/emptyopt.html
      struct _Alloc_hider : allocator_type // TODO check __is_final
      {
	_Alloc_hider(pointer __dat, const _Alloc& __a = _Alloc())
	: allocator_type(__a), _M_p(__dat) { }
   d514c:	ab10      	add	r3, sp, #64	; 0x40
   d514e:	f886 80ac 	strb.w	r8, [r6, #172]	; 0xac
   d5152:	930e      	str	r3, [sp, #56]	; 0x38
       *  @param  __s  Source C string.
       *  @param  __a  Allocator to use (default is default allocator).
       */
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
   d5154:	2d00      	cmp	r5, #0
   d5156:	f000 8129 	beq.w	d53ac <_ZN10HttpHelper11setResponseEPcb+0x284>
	return __builtin_memcmp(__s1, __s2, __n);
      }

      static size_t
      length(const char_type* __s)
      { return __builtin_strlen(__s); }
   d515a:	4628      	mov	r0, r5
   d515c:	f014 fd22 	bl	e9ba4 <strlen>
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
	  std::__throw_logic_error(__N("basic_string::"
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   d5160:	ac20      	add	r4, sp, #128	; 0x80

	if (__dnew > size_type(_S_local_capacity))
   d5162:	280f      	cmp	r0, #15
   d5164:	eb05 0a00 	add.w	sl, r5, r0
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
	  std::__throw_logic_error(__N("basic_string::"
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   d5168:	f844 0d18 	str.w	r0, [r4, #-24]!

	if (__dnew > size_type(_S_local_capacity))
   d516c:	d907      	bls.n	d517e <_ZN10HttpHelper11setResponseEPcb+0x56>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
   d516e:	4642      	mov	r2, r8
   d5170:	4621      	mov	r1, r4
   d5172:	a80e      	add	r0, sp, #56	; 0x38
   d5174:	f013 f9a0 	bl	e84b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
#endif
      }

      void
      _M_capacity(size_type __capacity)
      { _M_allocated_capacity = __capacity; }
   d5178:	9b1a      	ldr	r3, [sp, #104]	; 0x68
	size_type        _M_allocated_capacity;
      };

      void
      _M_data(pointer __p)
      { _M_dataplus._M_p = __p; }
   d517a:	900e      	str	r0, [sp, #56]	; 0x38
#endif
      }

      void
      _M_capacity(size_type __capacity)
      { _M_allocated_capacity = __capacity; }
   d517c:	9310      	str	r3, [sp, #64]	; 0x40
	    _M_capacity(__dnew);
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
   d517e:	4629      	mov	r1, r5
   d5180:	4652      	mov	r2, sl
   d5182:	980e      	ldr	r0, [sp, #56]	; 0x38
   d5184:	f013 f9d3 	bl	e852e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
   d5188:	9b1a      	ldr	r3, [sp, #104]	; 0x68
      typedef streamoff         off_type;
      typedef mbstate_t         state_type;

      static void
      assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
      { __c1 = __c2; }
   d518a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      _M_data(pointer __p)
      { _M_dataplus._M_p = __p; }

      void
      _M_length(size_type __length)
      { _M_string_length = __length; }
   d518c:	930f      	str	r3, [sp, #60]	; 0x3c
   d518e:	2500      	movs	r5, #0
   d5190:	54d5      	strb	r5, [r2, r3]
    
    std::string responeString(respone);

    //get http status as int
    httpResponse.status = atoi(responeString.substr(HTTP_PLACEMENT,HTTP_PLACEMENT+3).c_str()); 
   d5192:	6972      	ldr	r2, [r6, #20]
   d5194:	a90e      	add	r1, sp, #56	; 0x38
   d5196:	1cd3      	adds	r3, r2, #3
   d5198:	4620      	mov	r0, r4
   d519a:	f013 fab5 	bl	e8708 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
   d519e:	981a      	ldr	r0, [sp, #104]	; 0x68
   d51a0:	f014 fb64 	bl	e986c <atoi>
   d51a4:	f8c6 0080 	str.w	r0, [r6, #128]	; 0x80

      /**
       *  @brief  Destroy the string instance.
       */
      ~basic_string()
      { _M_dispose(); }
   d51a8:	4620      	mov	r0, r4
   d51aa:	f013 f9a1 	bl	e84f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
    //get body
    httpResponse.body = responeString.substr((responeString.find("\r\n\r\n")+4));
   d51ae:	462a      	mov	r2, r5
   d51b0:	4981      	ldr	r1, [pc, #516]	; (d53b8 <_ZN10HttpHelper11setResponseEPcb+0x290>)
   d51b2:	a80e      	add	r0, sp, #56	; 0x38
   d51b4:	f013 fa58 	bl	e8668 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
   d51b8:	f04f 33ff 	mov.w	r3, #4294967295
   d51bc:	1d02      	adds	r2, r0, #4
   d51be:	a90e      	add	r1, sp, #56	; 0x38
   d51c0:	4620      	mov	r0, r4
   d51c2:	f013 faa1 	bl	e8708 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2063. Contradictory requirements for string move assignment
      basic_string&
      operator=(basic_string&& __str)
      {
	this->swap(__str);
   d51c6:	4621      	mov	r1, r4
   d51c8:	f106 0084 	add.w	r0, r6, #132	; 0x84
   d51cc:	f013 f9b4 	bl	e8538 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4swapERS4_>

      /**
       *  @brief  Destroy the string instance.
       */
      ~basic_string()
      { _M_dispose(); }
   d51d0:	4620      	mov	r0, r4
   d51d2:	f013 f98d 	bl	e84f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   d51d6:	f8d6 8084 	ldr.w	r8, [r6, #132]	; 0x84
inline bool spark::JSONValue::isValid() const {
    return type() != JSON_TYPE_INVALID;
}

inline spark::JSONValue spark::JSONValue::parseCopy(const char *json) {
    return parseCopy(json, strlen(json));
   d51da:	4640      	mov	r0, r8
   d51dc:	f014 fce2 	bl	e9ba4 <strlen>
   d51e0:	4641      	mov	r1, r8
   d51e2:	4602      	mov	r2, r0
   d51e4:	a803      	add	r0, sp, #12
   d51e6:	f013 f819 	bl	e821c <_ZN5spark9JSONValue9parseCopyEPKcj>

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d51ea:	9509      	str	r5, [sp, #36]	; 0x24

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d51ec:	950a      	str	r5, [sp, #40]	; 0x28

// spark::JSONArrayIterator
inline spark::JSONArrayIterator::JSONArrayIterator() :
        t_(nullptr),
        v_(nullptr),
        n_(0) {
   d51ee:	950b      	str	r5, [sp, #44]	; 0x2c
   d51f0:	950c      	str	r5, [sp, #48]	; 0x30
   d51f2:	950d      	str	r5, [sp, #52]	; 0x34

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d51f4:	9514      	str	r5, [sp, #80]	; 0x50

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d51f6:	9515      	str	r5, [sp, #84]	; 0x54
// spark::JSONObjectIterator
inline spark::JSONObjectIterator::JSONObjectIterator() :
        t_(nullptr),
        k_(nullptr),
        v_(nullptr),
        n_(0) {
   d51f8:	9516      	str	r5, [sp, #88]	; 0x58
   d51fa:	9517      	str	r5, [sp, #92]	; 0x5c
   d51fc:	9518      	str	r5, [sp, #96]	; 0x60
   d51fe:	9519      	str	r5, [sp, #100]	; 0x64

    JSONValue outerObj = JSONValue::parseCopy(httpResponse.body.c_str());
    JSONArrayIterator iter;
    JSONObjectIterator iterObj;
    if(detect) {
   d5200:	f1b9 0f00 	cmp.w	r9, #0
   d5204:	d03e      	beq.n	d5284 <_ZN10HttpHelper11setResponseEPcb+0x15c>
        v_(nullptr),
        n_(0) {
}

inline spark::JSONArrayIterator::JSONArrayIterator(const JSONValue &value) :
        JSONArrayIterator(value.t_, value.d_) {
   d5206:	9d05      	ldr	r5, [sp, #20]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5208:	9b03      	ldr	r3, [sp, #12]
   d520a:	9306      	str	r3, [sp, #24]
   d520c:	a904      	add	r1, sp, #16
   d520e:	a807      	add	r0, sp, #28
   d5210:	f7ff ff2c 	bl	d506c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d5214:	aa06      	add	r2, sp, #24
   d5216:	4629      	mov	r1, r5
   d5218:	4620      	mov	r0, r4
   d521a:	f012 ffc0 	bl	e819e <_ZN5spark17JSONArrayIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d521e:	a807      	add	r0, sp, #28
   d5220:	f7ff ff0e 	bl	d5040 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   d5224:	4621      	mov	r1, r4
   d5226:	a809      	add	r0, sp, #36	; 0x24
   d5228:	f7ff ff69 	bl	d50fe <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSEOS5_>

    friend class JSONValue;
    friend class JSONObjectIterator;
};

class JSONArrayIterator {
   d522c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   d522e:	930b      	str	r3, [sp, #44]	; 0x2c
   d5230:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d5232:	930c      	str	r3, [sp, #48]	; 0x30
   d5234:	a81b      	add	r0, sp, #108	; 0x6c
   d5236:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   d5238:	930d      	str	r3, [sp, #52]	; 0x34
   d523a:	f7ff ff01 	bl	d5040 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        iter = JSONArrayIterator(outerObj);
        iter.next();    // unpack array
   d523e:	a809      	add	r0, sp, #36	; 0x24
   d5240:	f012 ff59 	bl	e80f6 <_ZN5spark17JSONArrayIterator4nextEv>
inline spark::JSONArrayIterator::JSONArrayIterator(const JSONValue &value) :
        JSONArrayIterator(value.t_, value.d_) {
}

inline spark::JSONValue spark::JSONArrayIterator::value() const {
    return JSONValue(v_, d_);
   d5244:	9d0c      	ldr	r5, [sp, #48]	; 0x30
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5246:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d5248:	931a      	str	r3, [sp, #104]	; 0x68
   d524a:	a90a      	add	r1, sp, #40	; 0x28
   d524c:	a81b      	add	r0, sp, #108	; 0x6c
   d524e:	f7ff ff0d 	bl	d506c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d5252:	4622      	mov	r2, r4
   d5254:	4629      	mov	r1, r5
   d5256:	a806      	add	r0, sp, #24
   d5258:	f012 ffbb 	bl	e81d2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d525c:	a81b      	add	r0, sp, #108	; 0x6c
   d525e:	f7ff feef 	bl	d5040 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        iterObj = JSONObjectIterator(iter.value());
   d5262:	a906      	add	r1, sp, #24
   d5264:	4620      	mov	r0, r4
   d5266:	f7ff ff1e 	bl	d50a6 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
   d526a:	4621      	mov	r1, r4
   d526c:	a814      	add	r0, sp, #80	; 0x50
   d526e:	f7ff ff46 	bl	d50fe <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSEOS5_>
    size_t n_;

    JSONArrayIterator(const jsmntok_t *token, detail::JSONDataPtr data);
};

class JSONObjectIterator {
   d5272:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   d5274:	9316      	str	r3, [sp, #88]	; 0x58
   d5276:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d5278:	9317      	str	r3, [sp, #92]	; 0x5c
   d527a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   d527c:	9318      	str	r3, [sp, #96]	; 0x60
   d527e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   d5280:	9319      	str	r3, [sp, #100]	; 0x64
   d5282:	e03b      	b.n	d52fc <_ZN10HttpHelper11setResponseEPcb+0x1d4>
    } else {
         iterObj  = JSONObjectIterator(outerObj);
   d5284:	a903      	add	r1, sp, #12
   d5286:	4620      	mov	r0, r4
   d5288:	f7ff ff0d 	bl	d50a6 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
   d528c:	4621      	mov	r1, r4
   d528e:	a814      	add	r0, sp, #80	; 0x50
   d5290:	f7ff ff35 	bl	d50fe <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSEOS5_>
   d5294:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   d5296:	9316      	str	r3, [sp, #88]	; 0x58
   d5298:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d529a:	9317      	str	r3, [sp, #92]	; 0x5c
   d529c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   d529e:	9318      	str	r3, [sp, #96]	; 0x60
   d52a0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   d52a2:	9319      	str	r3, [sp, #100]	; 0x64
   d52a4:	a81b      	add	r0, sp, #108	; 0x6c
   d52a6:	f7ff fecb 	bl	d5040 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }
    while(iterObj.next()) {   // unpack objects
   d52aa:	a814      	add	r0, sp, #80	; 0x50
   d52ac:	f012 ff0f 	bl	e80ce <_ZN5spark18JSONObjectIterator4nextEv>
   d52b0:	2800      	cmp	r0, #0
   d52b2:	d054      	beq.n	d535e <_ZN10HttpHelper11setResponseEPcb+0x236>
        if(iterObj.name() == "faceId") {
   d52b4:	a914      	add	r1, sp, #80	; 0x50
   d52b6:	4620      	mov	r0, r4
   d52b8:	f7ff ff0b 	bl	d50d2 <_ZNK5spark18JSONObjectIterator4nameEv>
inline bool spark::JSONString::isEmpty() const {
    return !n_;
}

inline bool spark::JSONString::operator==(const char *str) const {
    return strcmp(s_, str) == 0;
   d52bc:	493f      	ldr	r1, [pc, #252]	; (d53bc <_ZN10HttpHelper11setResponseEPcb+0x294>)
   d52be:	981c      	ldr	r0, [sp, #112]	; 0x70
   d52c0:	f014 fc5e 	bl	e9b80 <strcmp>
   d52c4:	4605      	mov	r5, r0
   d52c6:	a81b      	add	r0, sp, #108	; 0x6c
   d52c8:	f7ff feba 	bl	d5040 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            //blabla
            httpResponse.faceId = iterObj.value().toString().data();
   d52cc:	a914      	add	r1, sp, #80	; 0x50
        iterObj = JSONObjectIterator(iter.value());
    } else {
         iterObj  = JSONObjectIterator(outerObj);
    }
    while(iterObj.next()) {   // unpack objects
        if(iterObj.name() == "faceId") {
   d52ce:	b9d5      	cbnz	r5, d5306 <_ZN10HttpHelper11setResponseEPcb+0x1de>
            //blabla
            httpResponse.faceId = iterObj.value().toString().data();
   d52d0:	a806      	add	r0, sp, #24
   d52d2:	f7ff fed2 	bl	d507a <_ZNK5spark18JSONObjectIterator5valueEv>
inline spark::JSONValue::JSONValue() :
        t_(nullptr) {
}

inline spark::JSONString spark::JSONValue::toString() const {
    return JSONString(t_, d_);
   d52d6:	9d08      	ldr	r5, [sp, #32]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d52d8:	9b06      	ldr	r3, [sp, #24]
   d52da:	9301      	str	r3, [sp, #4]
   d52dc:	a907      	add	r1, sp, #28
   d52de:	a802      	add	r0, sp, #8
   d52e0:	f7ff fec4 	bl	d506c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d52e4:	4629      	mov	r1, r5
   d52e6:	aa01      	add	r2, sp, #4
   d52e8:	4620      	mov	r0, r4
   d52ea:	f012 ff15 	bl	e8118 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d52ee:	a802      	add	r0, sp, #8
   d52f0:	f7ff fea6 	bl	d5040 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d52f4:	991c      	ldr	r1, [sp, #112]	; 0x70
   d52f6:	4638      	mov	r0, r7
   d52f8:	f011 f98f 	bl	e661a <_ZN6StringaSEPKc>
   d52fc:	a81b      	add	r0, sp, #108	; 0x6c
   d52fe:	f7ff fe9f 	bl	d5040 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5302:	a807      	add	r0, sp, #28
   d5304:	e7cf      	b.n	d52a6 <_ZN10HttpHelper11setResponseEPcb+0x17e>
            
        } else if (iterObj.name() == "isIdentical") {
   d5306:	4620      	mov	r0, r4
   d5308:	f7ff fee3 	bl	d50d2 <_ZNK5spark18JSONObjectIterator4nameEv>
inline bool spark::JSONString::isEmpty() const {
    return !n_;
}

inline bool spark::JSONString::operator==(const char *str) const {
    return strcmp(s_, str) == 0;
   d530c:	492c      	ldr	r1, [pc, #176]	; (d53c0 <_ZN10HttpHelper11setResponseEPcb+0x298>)
   d530e:	981c      	ldr	r0, [sp, #112]	; 0x70
   d5310:	f014 fc36 	bl	e9b80 <strcmp>
   d5314:	4605      	mov	r5, r0
   d5316:	a81b      	add	r0, sp, #108	; 0x6c
   d5318:	f7ff fe92 	bl	d5040 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            httpResponse.isIdentical = iterObj.value().toBool();
   d531c:	a914      	add	r1, sp, #80	; 0x50
   d531e:	4620      	mov	r0, r4
    while(iterObj.next()) {   // unpack objects
        if(iterObj.name() == "faceId") {
            //blabla
            httpResponse.faceId = iterObj.value().toString().data();
            
        } else if (iterObj.name() == "isIdentical") {
   d5320:	b93d      	cbnz	r5, d5332 <_ZN10HttpHelper11setResponseEPcb+0x20a>
            httpResponse.isIdentical = iterObj.value().toBool();
   d5322:	f7ff feaa 	bl	d507a <_ZNK5spark18JSONObjectIterator5valueEv>
   d5326:	4620      	mov	r0, r4
   d5328:	f012 fd86 	bl	e7e38 <_ZNK5spark9JSONValue6toBoolEv>
   d532c:	f886 00ac 	strb.w	r0, [r6, #172]	; 0xac
   d5330:	e7b8      	b.n	d52a4 <_ZN10HttpHelper11setResponseEPcb+0x17c>

        } else if (iterObj.name() == "confidence"){
   d5332:	f7ff fece 	bl	d50d2 <_ZNK5spark18JSONObjectIterator4nameEv>
   d5336:	4923      	ldr	r1, [pc, #140]	; (d53c4 <_ZN10HttpHelper11setResponseEPcb+0x29c>)
   d5338:	981c      	ldr	r0, [sp, #112]	; 0x70
   d533a:	f014 fc21 	bl	e9b80 <strcmp>
   d533e:	4605      	mov	r5, r0
   d5340:	a81b      	add	r0, sp, #108	; 0x6c
   d5342:	f7ff fe7d 	bl	d5040 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5346:	2d00      	cmp	r5, #0
   d5348:	d1af      	bne.n	d52aa <_ZN10HttpHelper11setResponseEPcb+0x182>
            httpResponse.confidence = iterObj.value().toDouble();
   d534a:	a914      	add	r1, sp, #80	; 0x50
   d534c:	4620      	mov	r0, r4
   d534e:	f7ff fe94 	bl	d507a <_ZNK5spark18JSONObjectIterator5valueEv>
   d5352:	4620      	mov	r0, r4
   d5354:	f012 fdac 	bl	e7eb0 <_ZNK5spark9JSONValue8toDoubleEv>
   d5358:	ed86 0b2c 	vstr	d0, [r6, #176]	; 0xb0
   d535c:	e7a2      	b.n	d52a4 <_ZN10HttpHelper11setResponseEPcb+0x17c>
            //error
        }
        
    }

    Serial.println(httpResponse.faceId);
   d535e:	f011 ff9b 	bl	e7298 <_Z16_fetch_usbserialv>
   d5362:	f8d6 109c 	ldr.w	r1, [r6, #156]	; 0x9c
   d5366:	f011 fa9c 	bl	e68a2 <_ZN5Print7printlnEPKc>
    Serial.println(httpResponse.isIdentical);
   d536a:	f011 ff95 	bl	e7298 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d536e:	220a      	movs	r2, #10
   d5370:	f896 10ac 	ldrb.w	r1, [r6, #172]	; 0xac
   d5374:	4604      	mov	r4, r0
   d5376:	f011 fa9e 	bl	e68b6 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d537a:	4620      	mov	r0, r4
   d537c:	f011 fa85 	bl	e688a <_ZN5Print7printlnEv>
    Serial.println(httpResponse.confidence);
   d5380:	f011 ff8a 	bl	e7298 <_Z16_fetch_usbserialv>
   d5384:	2102      	movs	r1, #2
   d5386:	ed96 0b2c 	vldr	d0, [r6, #176]	; 0xb0
   d538a:	f011 fb73 	bl	e6a74 <_ZN5Print7printlnEdi>
   d538e:	a815      	add	r0, sp, #84	; 0x54
   d5390:	f7ff fe56 	bl	d5040 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5394:	a80a      	add	r0, sp, #40	; 0x28
   d5396:	f7ff fe53 	bl	d5040 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d539a:	a804      	add	r0, sp, #16
   d539c:	f7ff fe50 	bl	d5040 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d53a0:	a80e      	add	r0, sp, #56	; 0x38
   d53a2:	f013 f8a5 	bl	e84f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
}
   d53a6:	b020      	add	sp, #128	; 0x80
   d53a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
	  std::__throw_logic_error(__N("basic_string::"
   d53ac:	4806      	ldr	r0, [pc, #24]	; (d53c8 <_ZN10HttpHelper11setResponseEPcb+0x2a0>)
   d53ae:	f013 f858 	bl	e8462 <_ZSt19__throw_logic_errorPKc>
   d53b2:	bf00      	nop
   d53b4:	000ed091 	.word	0x000ed091
   d53b8:	000ec915 	.word	0x000ec915
   d53bc:	000ec963 	.word	0x000ec963
   d53c0:	000ec96a 	.word	0x000ec96a
   d53c4:	000ec976 	.word	0x000ec976
   d53c8:	000ec981 	.word	0x000ec981

000d53cc <_GLOBAL__sub_I__ZN10HttpHelperC2Ev>:
   d53cc:	f010 bbbc 	b.w	e5b48 <HAL_Pin_Map>

000d53d0 <mbedtls_sha256_init>:

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
    SHA256_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
   d53d0:	226c      	movs	r2, #108	; 0x6c
   d53d2:	2100      	movs	r1, #0
   d53d4:	f014 bb95 	b.w	e9b02 <memset>

000d53d8 <mbedtls_sha256_free>:
}

void mbedtls_sha256_free( mbedtls_sha256_context *ctx )
{
    if( ctx == NULL )
   d53d8:	b110      	cbz	r0, d53e0 <mbedtls_sha256_free+0x8>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_sha256_context ) );
   d53da:	216c      	movs	r1, #108	; 0x6c
   d53dc:	f005 bf0e 	b.w	db1fc <mbedtls_platform_zeroize>
   d53e0:	4770      	bx	lr

000d53e2 <mbedtls_sha256_clone>:
}

void mbedtls_sha256_clone( mbedtls_sha256_context *dst,
                           const mbedtls_sha256_context *src )
{
   d53e2:	b508      	push	{r3, lr}
    SHA256_VALIDATE( dst != NULL );
    SHA256_VALIDATE( src != NULL );

    *dst = *src;
   d53e4:	226c      	movs	r2, #108	; 0x6c
   d53e6:	f014 fb66 	bl	e9ab6 <memcpy>
   d53ea:	bd08      	pop	{r3, pc}

000d53ec <mbedtls_sha256_starts_ret>:
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );

    ctx->total[0] = 0;
   d53ec:	2300      	movs	r3, #0
   d53ee:	6003      	str	r3, [r0, #0]
    ctx->total[1] = 0;
   d53f0:	6043      	str	r3, [r0, #4]

    if( is224 == 0 )
   d53f2:	b9a1      	cbnz	r1, d541e <mbedtls_sha256_starts_ret+0x32>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
   d53f4:	4b18      	ldr	r3, [pc, #96]	; (d5458 <mbedtls_sha256_starts_ret+0x6c>)
   d53f6:	6083      	str	r3, [r0, #8]
        ctx->state[1] = 0xBB67AE85;
   d53f8:	4b18      	ldr	r3, [pc, #96]	; (d545c <mbedtls_sha256_starts_ret+0x70>)
   d53fa:	60c3      	str	r3, [r0, #12]
        ctx->state[2] = 0x3C6EF372;
   d53fc:	4b18      	ldr	r3, [pc, #96]	; (d5460 <mbedtls_sha256_starts_ret+0x74>)
   d53fe:	6103      	str	r3, [r0, #16]
        ctx->state[3] = 0xA54FF53A;
   d5400:	4b18      	ldr	r3, [pc, #96]	; (d5464 <mbedtls_sha256_starts_ret+0x78>)
   d5402:	6143      	str	r3, [r0, #20]
        ctx->state[4] = 0x510E527F;
   d5404:	4b18      	ldr	r3, [pc, #96]	; (d5468 <mbedtls_sha256_starts_ret+0x7c>)
   d5406:	6183      	str	r3, [r0, #24]
        ctx->state[5] = 0x9B05688C;
   d5408:	4b18      	ldr	r3, [pc, #96]	; (d546c <mbedtls_sha256_starts_ret+0x80>)
   d540a:	61c3      	str	r3, [r0, #28]
        ctx->state[6] = 0x1F83D9AB;
   d540c:	4b18      	ldr	r3, [pc, #96]	; (d5470 <mbedtls_sha256_starts_ret+0x84>)
   d540e:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0x5BE0CD19;
   d5410:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
   d5414:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
   d5418:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
   d541c:	e018      	b.n	d5450 <mbedtls_sha256_starts_ret+0x64>
    }
    else
    {
        /* SHA-224 */
        ctx->state[0] = 0xC1059ED8;
   d541e:	4b15      	ldr	r3, [pc, #84]	; (d5474 <mbedtls_sha256_starts_ret+0x88>)
   d5420:	6083      	str	r3, [r0, #8]
        ctx->state[1] = 0x367CD507;
   d5422:	4b15      	ldr	r3, [pc, #84]	; (d5478 <mbedtls_sha256_starts_ret+0x8c>)
   d5424:	60c3      	str	r3, [r0, #12]
        ctx->state[2] = 0x3070DD17;
   d5426:	f103 4379 	add.w	r3, r3, #4177526784	; 0xf9000000
   d542a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
   d542e:	f503 6301 	add.w	r3, r3, #2064	; 0x810
   d5432:	6103      	str	r3, [r0, #16]
        ctx->state[3] = 0xF70E5939;
   d5434:	4b11      	ldr	r3, [pc, #68]	; (d547c <mbedtls_sha256_starts_ret+0x90>)
   d5436:	6143      	str	r3, [r0, #20]
        ctx->state[4] = 0xFFC00B31;
   d5438:	4b11      	ldr	r3, [pc, #68]	; (d5480 <mbedtls_sha256_starts_ret+0x94>)
   d543a:	6183      	str	r3, [r0, #24]
        ctx->state[5] = 0x68581511;
   d543c:	f103 43d1 	add.w	r3, r3, #1753219072	; 0x68800000
   d5440:	f503 13c0 	add.w	r3, r3, #1572864	; 0x180000
   d5444:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
   d5448:	61c3      	str	r3, [r0, #28]
        ctx->state[6] = 0x64F98FA7;
   d544a:	4b0e      	ldr	r3, [pc, #56]	; (d5484 <mbedtls_sha256_starts_ret+0x98>)
   d544c:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0xBEFA4FA4;
   d544e:	4b0e      	ldr	r3, [pc, #56]	; (d5488 <mbedtls_sha256_starts_ret+0x9c>)
   d5450:	6243      	str	r3, [r0, #36]	; 0x24
    }

    ctx->is224 = is224;
   d5452:	6681      	str	r1, [r0, #104]	; 0x68

    return( 0 );
}
   d5454:	2000      	movs	r0, #0
   d5456:	4770      	bx	lr
   d5458:	6a09e667 	.word	0x6a09e667
   d545c:	bb67ae85 	.word	0xbb67ae85
   d5460:	3c6ef372 	.word	0x3c6ef372
   d5464:	a54ff53a 	.word	0xa54ff53a
   d5468:	510e527f 	.word	0x510e527f
   d546c:	9b05688c 	.word	0x9b05688c
   d5470:	1f83d9ab 	.word	0x1f83d9ab
   d5474:	c1059ed8 	.word	0xc1059ed8
   d5478:	367cd507 	.word	0x367cd507
   d547c:	f70e5939 	.word	0xf70e5939
   d5480:	ffc00b31 	.word	0xffc00b31
   d5484:	64f98fa7 	.word	0x64f98fa7
   d5488:	befa4fa4 	.word	0xbefa4fa4

000d548c <mbedtls_internal_sha256_process>:
        (d) += temp1; (h) = temp1 + temp2;              \
    } while( 0 )

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
   d548c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5490:	b0cf      	sub	sp, #316	; 0x13c
   d5492:	1d03      	adds	r3, r0, #4
   d5494:	9305      	str	r3, [sp, #20]
   d5496:	461a      	mov	r2, r3
    unsigned int i;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( (const unsigned char *)data != NULL );

    for( i = 0; i < 8; i++ )
   d5498:	2300      	movs	r3, #0
        A[i] = ctx->state[i];
   d549a:	ac06      	add	r4, sp, #24
   d549c:	f852 0f04 	ldr.w	r0, [r2, #4]!
   d54a0:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
    unsigned int i;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( (const unsigned char *)data != NULL );

    for( i = 0; i < 8; i++ )
   d54a4:	3301      	adds	r3, #1
   d54a6:	2b08      	cmp	r3, #8
   d54a8:	d1f7      	bne.n	d549a <mbedtls_internal_sha256_process+0xe>
   d54aa:	4608      	mov	r0, r1
   d54ac:	2200      	movs	r2, #0
        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );
   d54ae:	ac0e      	add	r4, sp, #56	; 0x38
   d54b0:	f811 5022 	ldrb.w	r5, [r1, r2, lsl #2]
   d54b4:	78c3      	ldrb	r3, [r0, #3]
   d54b6:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   d54ba:	7845      	ldrb	r5, [r0, #1]
   d54bc:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   d54c0:	7885      	ldrb	r5, [r0, #2]
   d54c2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   d54c6:	f844 3022 	str.w	r3, [r4, r2, lsl #2]

        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
   d54ca:	3201      	adds	r2, #1
   d54cc:	2a10      	cmp	r2, #16
   d54ce:	f100 0004 	add.w	r0, r0, #4
   d54d2:	d1ed      	bne.n	d54b0 <mbedtls_internal_sha256_process+0x24>
   d54d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d54d6:	4c9f      	ldr	r4, [pc, #636]	; (d5754 <mbedtls_internal_sha256_process+0x2c8>)
   d54d8:	9300      	str	r3, [sp, #0]
   d54da:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   d54dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d54de:	9f08      	ldr	r7, [sp, #32]
   d54e0:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   d54e4:	f8dd e01c 	ldr.w	lr, [sp, #28]
   d54e8:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   d54ec:	f8dd 9018 	ldr.w	r9, [sp, #24]
   d54f0:	ad0f      	add	r5, sp, #60	; 0x3c
   d54f2:	f104 0a40 	add.w	sl, r4, #64	; 0x40
        GET_UINT32_BE( W[i], data, 4 * i );

    for( i = 0; i < 16; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
   d54f6:	f854 0c04 	ldr.w	r0, [r4, #-4]
   d54fa:	f855 1c04 	ldr.w	r1, [r5, #-4]
   d54fe:	ea4f 22f8 	mov.w	r2, r8, ror #11
   d5502:	ea86 0c0b 	eor.w	ip, r6, fp
   d5506:	ea82 12b8 	eor.w	r2, r2, r8, ror #6
   d550a:	4401      	add	r1, r0
   d550c:	ea82 6278 	eor.w	r2, r2, r8, ror #25
   d5510:	ea0c 0c08 	and.w	ip, ip, r8
   d5514:	ea8c 0c06 	eor.w	ip, ip, r6
   d5518:	440a      	add	r2, r1
   d551a:	9900      	ldr	r1, [sp, #0]
   d551c:	4462      	add	r2, ip
   d551e:	ea4f 3079 	mov.w	r0, r9, ror #13
   d5522:	ea4e 0c09 	orr.w	ip, lr, r9
   d5526:	440a      	add	r2, r1
   d5528:	ea0c 0c07 	and.w	ip, ip, r7
   d552c:	ea0e 0109 	and.w	r1, lr, r9
   d5530:	ea80 00b9 	eor.w	r0, r0, r9, ror #2
   d5534:	ea4c 0101 	orr.w	r1, ip, r1
   d5538:	ea80 50b9 	eor.w	r0, r0, r9, ror #22
   d553c:	4408      	add	r0, r1
   d553e:	4413      	add	r3, r2
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
   d5540:	6829      	ldr	r1, [r5, #0]
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );

    for( i = 0; i < 16; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
   d5542:	4402      	add	r2, r0
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
   d5544:	6820      	ldr	r0, [r4, #0]
   d5546:	ea8b 0c08 	eor.w	ip, fp, r8
   d554a:	4401      	add	r1, r0
   d554c:	ea0c 0c03 	and.w	ip, ip, r3
   d5550:	ea4f 20f3 	mov.w	r0, r3, ror #11
   d5554:	ea8c 0c0b 	eor.w	ip, ip, fp
   d5558:	440e      	add	r6, r1
   d555a:	ea80 10b3 	eor.w	r0, r0, r3, ror #6
   d555e:	eb06 010c 	add.w	r1, r6, ip
   d5562:	ea80 6073 	eor.w	r0, r0, r3, ror #25
   d5566:	180e      	adds	r6, r1, r0
   d5568:	eb06 0c07 	add.w	ip, r6, r7
   d556c:	ea42 0009 	orr.w	r0, r2, r9
   d5570:	ea4f 3772 	mov.w	r7, r2, ror #13
   d5574:	ea02 0109 	and.w	r1, r2, r9
   d5578:	ea87 07b2 	eor.w	r7, r7, r2, ror #2
   d557c:	ea00 000e 	and.w	r0, r0, lr
   d5580:	ea87 57b2 	eor.w	r7, r7, r2, ror #22
   d5584:	4308      	orrs	r0, r1
   d5586:	4438      	add	r0, r7
   d5588:	4430      	add	r0, r6
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
   d558a:	6869      	ldr	r1, [r5, #4]
   d558c:	6866      	ldr	r6, [r4, #4]
   d558e:	ea83 0708 	eor.w	r7, r3, r8
   d5592:	440e      	add	r6, r1
   d5594:	ea07 070c 	and.w	r7, r7, ip
   d5598:	ea4f 21fc 	mov.w	r1, ip, ror #11
   d559c:	ea87 0708 	eor.w	r7, r7, r8
   d55a0:	44b3      	add	fp, r6
   d55a2:	ea81 11bc 	eor.w	r1, r1, ip, ror #6
   d55a6:	eb0b 0607 	add.w	r6, fp, r7
   d55aa:	ea81 617c 	eor.w	r1, r1, ip, ror #25
   d55ae:	eb06 0b01 	add.w	fp, r6, r1
   d55b2:	ea4f 3770 	mov.w	r7, r0, ror #13
   d55b6:	ea42 0100 	orr.w	r1, r2, r0
   d55ba:	ea02 0600 	and.w	r6, r2, r0
   d55be:	ea87 07b0 	eor.w	r7, r7, r0, ror #2
   d55c2:	ea01 0109 	and.w	r1, r1, r9
   d55c6:	ea87 57b0 	eor.w	r7, r7, r0, ror #22
   d55ca:	4331      	orrs	r1, r6
   d55cc:	4439      	add	r1, r7
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
   d55ce:	68ae      	ldr	r6, [r5, #8]
   d55d0:	68a7      	ldr	r7, [r4, #8]

    for( i = 0; i < 16; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
   d55d2:	4459      	add	r1, fp
   d55d4:	44de      	add	lr, fp
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
   d55d6:	443e      	add	r6, r7
   d55d8:	ea83 0b0c 	eor.w	fp, r3, ip
   d55dc:	44b0      	add	r8, r6
   d55de:	ea0b 0b0e 	and.w	fp, fp, lr
   d55e2:	ea4f 26fe 	mov.w	r6, lr, ror #11
   d55e6:	ea8b 0b03 	eor.w	fp, fp, r3
   d55ea:	ea86 16be 	eor.w	r6, r6, lr, ror #6
   d55ee:	44d8      	add	r8, fp
   d55f0:	ea86 667e 	eor.w	r6, r6, lr, ror #25
   d55f4:	4446      	add	r6, r8
   d55f6:	ea4f 3b71 	mov.w	fp, r1, ror #13
   d55fa:	ea40 0801 	orr.w	r8, r0, r1
   d55fe:	ea00 0701 	and.w	r7, r0, r1
   d5602:	ea8b 0bb1 	eor.w	fp, fp, r1, ror #2
   d5606:	ea08 0802 	and.w	r8, r8, r2
   d560a:	ea8b 5bb1 	eor.w	fp, fp, r1, ror #22
   d560e:	ea48 0807 	orr.w	r8, r8, r7
   d5612:	44d8      	add	r8, fp
   d5614:	44b0      	add	r8, r6
   d5616:	44b1      	add	r9, r6
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
   d5618:	68e7      	ldr	r7, [r4, #12]
   d561a:	68ee      	ldr	r6, [r5, #12]
   d561c:	ea8c 0b0e 	eor.w	fp, ip, lr
   d5620:	4437      	add	r7, r6
   d5622:	ea0b 0b09 	and.w	fp, fp, r9
   d5626:	ea8b 0b0c 	eor.w	fp, fp, ip
   d562a:	443b      	add	r3, r7
   d562c:	eb03 070b 	add.w	r7, r3, fp
   d5630:	ea4f 23f9 	mov.w	r3, r9, ror #11
   d5634:	ea83 13b9 	eor.w	r3, r3, r9, ror #6
   d5638:	ea83 6379 	eor.w	r3, r3, r9, ror #25
   d563c:	18fe      	adds	r6, r7, r3
   d563e:	1993      	adds	r3, r2, r6
   d5640:	9300      	str	r3, [sp, #0]
   d5642:	ea4f 3778 	mov.w	r7, r8, ror #13
   d5646:	ea41 0308 	orr.w	r3, r1, r8
   d564a:	ea01 0208 	and.w	r2, r1, r8
   d564e:	ea87 07b8 	eor.w	r7, r7, r8, ror #2
   d5652:	4003      	ands	r3, r0
   d5654:	ea87 57b8 	eor.w	r7, r7, r8, ror #22
   d5658:	4313      	orrs	r3, r2
   d565a:	443b      	add	r3, r7
   d565c:	4433      	add	r3, r6
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
   d565e:	692a      	ldr	r2, [r5, #16]
   d5660:	6926      	ldr	r6, [r4, #16]
   d5662:	4432      	add	r2, r6
   d5664:	4494      	add	ip, r2
   d5666:	9a00      	ldr	r2, [sp, #0]
   d5668:	ea8e 0609 	eor.w	r6, lr, r9
   d566c:	4016      	ands	r6, r2
   d566e:	ea4f 27f2 	mov.w	r7, r2, ror #11
   d5672:	ea86 060e 	eor.w	r6, r6, lr
   d5676:	ea87 17b2 	eor.w	r7, r7, r2, ror #6
   d567a:	44b4      	add	ip, r6
   d567c:	ea87 6772 	eor.w	r7, r7, r2, ror #25
   d5680:	eb0c 0207 	add.w	r2, ip, r7
   d5684:	ea4f 3b73 	mov.w	fp, r3, ror #13
   d5688:	ea48 0703 	orr.w	r7, r8, r3
   d568c:	1886      	adds	r6, r0, r2
   d568e:	400f      	ands	r7, r1
   d5690:	ea08 0003 	and.w	r0, r8, r3
   d5694:	ea8b 0bb3 	eor.w	fp, fp, r3, ror #2
   d5698:	ea8b 5bb3 	eor.w	fp, fp, r3, ror #22
   d569c:	4307      	orrs	r7, r0
   d569e:	445f      	add	r7, fp
   d56a0:	4417      	add	r7, r2
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
   d56a2:	6960      	ldr	r0, [r4, #20]
   d56a4:	696a      	ldr	r2, [r5, #20]
   d56a6:	4410      	add	r0, r2
   d56a8:	9a00      	ldr	r2, [sp, #0]
   d56aa:	ea89 0c02 	eor.w	ip, r9, r2
   d56ae:	ea0c 0c06 	and.w	ip, ip, r6
   d56b2:	4486      	add	lr, r0
   d56b4:	ea8c 0c09 	eor.w	ip, ip, r9
   d56b8:	eb0e 000c 	add.w	r0, lr, ip
   d56bc:	ea4f 2ef6 	mov.w	lr, r6, ror #11
   d56c0:	ea8e 1eb6 	eor.w	lr, lr, r6, ror #6
   d56c4:	ea8e 6e76 	eor.w	lr, lr, r6, ror #25
   d56c8:	eb00 020e 	add.w	r2, r0, lr
   d56cc:	ea4f 3077 	mov.w	r0, r7, ror #13
   d56d0:	ea43 0e07 	orr.w	lr, r3, r7
   d56d4:	eb01 0b02 	add.w	fp, r1, r2
   d56d8:	ea0e 0e08 	and.w	lr, lr, r8
   d56dc:	ea03 0107 	and.w	r1, r3, r7
   d56e0:	ea80 00b7 	eor.w	r0, r0, r7, ror #2
   d56e4:	ea80 50b7 	eor.w	r0, r0, r7, ror #22
   d56e8:	ea4e 0e01 	orr.w	lr, lr, r1
   d56ec:	4486      	add	lr, r0
   d56ee:	4496      	add	lr, r2
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
   d56f0:	69a1      	ldr	r1, [r4, #24]
   d56f2:	69aa      	ldr	r2, [r5, #24]
   d56f4:	4411      	add	r1, r2
   d56f6:	9a00      	ldr	r2, [sp, #0]
   d56f8:	ea82 0006 	eor.w	r0, r2, r6
   d56fc:	ea00 000b 	and.w	r0, r0, fp
   d5700:	4050      	eors	r0, r2
   d5702:	4489      	add	r9, r1
   d5704:	eb09 0100 	add.w	r1, r9, r0
   d5708:	ea4f 29fb 	mov.w	r9, fp, ror #11
   d570c:	ea89 19bb 	eor.w	r9, r9, fp, ror #6
   d5710:	ea89 697b 	eor.w	r9, r9, fp, ror #25
   d5714:	eb01 0209 	add.w	r2, r1, r9
   d5718:	ea4f 307e 	mov.w	r0, lr, ror #13
   d571c:	ea47 090e 	orr.w	r9, r7, lr
   d5720:	ea80 00be 	eor.w	r0, r0, lr, ror #2
   d5724:	ea09 0903 	and.w	r9, r9, r3
   d5728:	ea07 010e 	and.w	r1, r7, lr
   d572c:	ea80 50be 	eor.w	r0, r0, lr, ror #22
   d5730:	ea49 0901 	orr.w	r9, r9, r1
   d5734:	3420      	adds	r4, #32
   d5736:	4481      	add	r9, r0
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );

    for( i = 0; i < 16; i += 8 )
   d5738:	45a2      	cmp	sl, r4
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
   d573a:	4490      	add	r8, r2
   d573c:	4491      	add	r9, r2
   d573e:	f105 0520 	add.w	r5, r5, #32
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );

    for( i = 0; i < 16; i += 8 )
   d5742:	f47f aed8 	bne.w	d54f6 <mbedtls_internal_sha256_process+0x6a>
   d5746:	2200      	movs	r2, #0
   d5748:	f8df a00c 	ldr.w	sl, [pc, #12]	; d5758 <mbedtls_internal_sha256_process+0x2cc>
   d574c:	9204      	str	r2, [sp, #16]
   d574e:	ac0e      	add	r4, sp, #56	; 0x38
   d5750:	e004      	b.n	d575c <mbedtls_internal_sha256_process+0x2d0>
   d5752:	bf00      	nop
   d5754:	000ec9b0 	.word	0x000ec9b0
   d5758:	000ec9ac 	.word	0x000ec9ac
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
   d575c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   d575e:	6860      	ldr	r0, [r4, #4]
   d5760:	6a61      	ldr	r1, [r4, #36]	; 0x24
   d5762:	ea4f 45f2 	mov.w	r5, r2, ror #19
   d5766:	ea85 4572 	eor.w	r5, r5, r2, ror #17
   d576a:	ea85 2592 	eor.w	r5, r5, r2, lsr #10
   d576e:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
   d5772:	9a04      	ldr	r2, [sp, #16]
   d5774:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
   d5778:	ea4f 4cb0 	mov.w	ip, r0, ror #18
   d577c:	440a      	add	r2, r1
   d577e:	ea8c 1cf0 	eor.w	ip, ip, r0, ror #7
   d5782:	ea4f 21f8 	mov.w	r1, r8, ror #11
   d5786:	ea8c 0cd0 	eor.w	ip, ip, r0, lsr #3
   d578a:	ea81 11b8 	eor.w	r1, r1, r8, ror #6
   d578e:	4415      	add	r5, r2
   d5790:	eb05 020c 	add.w	r2, r5, ip
   d5794:	ea81 6578 	eor.w	r5, r1, r8, ror #25
   d5798:	ea86 010b 	eor.w	r1, r6, fp
   d579c:	ea01 0108 	and.w	r1, r1, r8
   d57a0:	9203      	str	r2, [sp, #12]
   d57a2:	ea81 0206 	eor.w	r2, r1, r6
   d57a6:	18a9      	adds	r1, r5, r2
   d57a8:	f8da 2040 	ldr.w	r2, [sl, #64]	; 0x40
   d57ac:	440a      	add	r2, r1
   d57ae:	9903      	ldr	r1, [sp, #12]
   d57b0:	6421      	str	r1, [r4, #64]	; 0x40
   d57b2:	440a      	add	r2, r1
   d57b4:	9900      	ldr	r1, [sp, #0]
   d57b6:	440a      	add	r2, r1
   d57b8:	18d3      	adds	r3, r2, r3
   d57ba:	ea4e 0509 	orr.w	r5, lr, r9
   d57be:	ea4f 3179 	mov.w	r1, r9, ror #13
   d57c2:	9300      	str	r3, [sp, #0]
   d57c4:	403d      	ands	r5, r7
   d57c6:	ea0e 0309 	and.w	r3, lr, r9
   d57ca:	ea81 01b9 	eor.w	r1, r1, r9, ror #2
   d57ce:	ea81 51b9 	eor.w	r1, r1, r9, ror #22
   d57d2:	432b      	orrs	r3, r5
   d57d4:	440b      	add	r3, r1
   d57d6:	441a      	add	r2, r3
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
   d57d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d57da:	68a5      	ldr	r5, [r4, #8]
   d57dc:	ea4f 41f3 	mov.w	r1, r3, ror #19
   d57e0:	ea81 4173 	eor.w	r1, r1, r3, ror #17
   d57e4:	ea81 2193 	eor.w	r1, r1, r3, lsr #10
   d57e8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d57ea:	4403      	add	r3, r0
   d57ec:	4419      	add	r1, r3
   d57ee:	ea4f 43b5 	mov.w	r3, r5, ror #18
   d57f2:	ea83 13f5 	eor.w	r3, r3, r5, ror #7
   d57f6:	ea83 0cd5 	eor.w	ip, r3, r5, lsr #3
   d57fa:	eb01 030c 	add.w	r3, r1, ip
   d57fe:	f8da 0044 	ldr.w	r0, [sl, #68]	; 0x44
   d5802:	9900      	ldr	r1, [sp, #0]
   d5804:	6463      	str	r3, [r4, #68]	; 0x44
   d5806:	ea8b 0c08 	eor.w	ip, fp, r8
   d580a:	4430      	add	r0, r6
   d580c:	ea0c 0c01 	and.w	ip, ip, r1
   d5810:	ea8c 0c0b 	eor.w	ip, ip, fp
   d5814:	18c1      	adds	r1, r0, r3
   d5816:	448c      	add	ip, r1
   d5818:	9900      	ldr	r1, [sp, #0]
   d581a:	ea4f 20f1 	mov.w	r0, r1, ror #11
   d581e:	ea80 10b1 	eor.w	r0, r0, r1, ror #6
   d5822:	ea80 6071 	eor.w	r0, r0, r1, ror #25
   d5826:	eb00 010c 	add.w	r1, r0, ip
   d582a:	19c8      	adds	r0, r1, r7
   d582c:	9001      	str	r0, [sp, #4]
   d582e:	ea4f 3c72 	mov.w	ip, r2, ror #13
   d5832:	ea42 0009 	orr.w	r0, r2, r9
   d5836:	ea02 0709 	and.w	r7, r2, r9
   d583a:	ea8c 0cb2 	eor.w	ip, ip, r2, ror #2
   d583e:	ea00 000e 	and.w	r0, r0, lr
   d5842:	ea8c 5cb2 	eor.w	ip, ip, r2, ror #22
   d5846:	4338      	orrs	r0, r7
   d5848:	4460      	add	r0, ip
   d584a:	4408      	add	r0, r1
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
   d584c:	9903      	ldr	r1, [sp, #12]
   d584e:	68e7      	ldr	r7, [r4, #12]
   d5850:	ea4f 46f1 	mov.w	r6, r1, ror #19
   d5854:	ea86 4671 	eor.w	r6, r6, r1, ror #17
   d5858:	ea86 2691 	eor.w	r6, r6, r1, lsr #10
   d585c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   d585e:	ea4f 4cb7 	mov.w	ip, r7, ror #18
   d5862:	4429      	add	r1, r5
   d5864:	440e      	add	r6, r1
   d5866:	ea8c 1cf7 	eor.w	ip, ip, r7, ror #7
   d586a:	9900      	ldr	r1, [sp, #0]
   d586c:	ea8c 0cd7 	eor.w	ip, ip, r7, lsr #3
   d5870:	4466      	add	r6, ip
   d5872:	ea81 0c08 	eor.w	ip, r1, r8
   d5876:	9901      	ldr	r1, [sp, #4]
   d5878:	64a6      	str	r6, [r4, #72]	; 0x48
   d587a:	ea0c 0c01 	and.w	ip, ip, r1
   d587e:	f8da 1048 	ldr.w	r1, [sl, #72]	; 0x48
   d5882:	4459      	add	r1, fp
   d5884:	198d      	adds	r5, r1, r6
   d5886:	ea8c 0c08 	eor.w	ip, ip, r8
   d588a:	9901      	ldr	r1, [sp, #4]
   d588c:	44ac      	add	ip, r5
   d588e:	9d01      	ldr	r5, [sp, #4]
   d5890:	ea4f 21f1 	mov.w	r1, r1, ror #11
   d5894:	ea81 11b5 	eor.w	r1, r1, r5, ror #6
   d5898:	ea81 6175 	eor.w	r1, r1, r5, ror #25
   d589c:	eb01 050c 	add.w	r5, r1, ip
   d58a0:	ea42 0100 	orr.w	r1, r2, r0
   d58a4:	ea4f 3c70 	mov.w	ip, r0, ror #13
   d58a8:	eb05 0b0e 	add.w	fp, r5, lr
   d58ac:	ea8c 0cb0 	eor.w	ip, ip, r0, ror #2
   d58b0:	ea02 0e00 	and.w	lr, r2, r0
   d58b4:	ea01 0109 	and.w	r1, r1, r9
   d58b8:	ea8c 5cb0 	eor.w	ip, ip, r0, ror #22
   d58bc:	ea41 010e 	orr.w	r1, r1, lr
   d58c0:	4461      	add	r1, ip
   d58c2:	4429      	add	r1, r5
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
   d58c4:	ea4f 45f3 	mov.w	r5, r3, ror #19
   d58c8:	ea85 4573 	eor.w	r5, r5, r3, ror #17
   d58cc:	ea85 2393 	eor.w	r3, r5, r3, lsr #10
   d58d0:	6b25      	ldr	r5, [r4, #48]	; 0x30
   d58d2:	f8d4 c010 	ldr.w	ip, [r4, #16]
   d58d6:	442f      	add	r7, r5
   d58d8:	443b      	add	r3, r7
   d58da:	ea4f 47bc 	mov.w	r7, ip, ror #18
   d58de:	ea87 17fc 	eor.w	r7, r7, ip, ror #7
   d58e2:	ea87 0edc 	eor.w	lr, r7, ip, lsr #3
   d58e6:	eb03 070e 	add.w	r7, r3, lr
   d58ea:	e89d 0028 	ldmia.w	sp, {r3, r5}
   d58ee:	405d      	eors	r5, r3
   d58f0:	ea05 050b 	and.w	r5, r5, fp
   d58f4:	405d      	eors	r5, r3
   d58f6:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
   d58fa:	64e7      	str	r7, [r4, #76]	; 0x4c
   d58fc:	4498      	add	r8, r3
   d58fe:	44b8      	add	r8, r7
   d5900:	4445      	add	r5, r8
   d5902:	ea4f 28fb 	mov.w	r8, fp, ror #11
   d5906:	ea88 18bb 	eor.w	r8, r8, fp, ror #6
   d590a:	ea88 687b 	eor.w	r8, r8, fp, ror #25
   d590e:	eb08 0305 	add.w	r3, r8, r5
   d5912:	eb03 0509 	add.w	r5, r3, r9
   d5916:	ea40 0801 	orr.w	r8, r0, r1
   d591a:	ea4f 3e71 	mov.w	lr, r1, ror #13
   d591e:	9502      	str	r5, [sp, #8]
   d5920:	ea8e 0eb1 	eor.w	lr, lr, r1, ror #2
   d5924:	ea00 0501 	and.w	r5, r0, r1
   d5928:	ea08 0802 	and.w	r8, r8, r2
   d592c:	ea8e 5eb1 	eor.w	lr, lr, r1, ror #22
   d5930:	ea48 0805 	orr.w	r8, r8, r5
   d5934:	44f0      	add	r8, lr
   d5936:	4498      	add	r8, r3
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
   d5938:	ea4f 4ef6 	mov.w	lr, r6, ror #19
   d593c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   d593e:	6965      	ldr	r5, [r4, #20]
   d5940:	ea8e 4e76 	eor.w	lr, lr, r6, ror #17
   d5944:	ea8e 2696 	eor.w	r6, lr, r6, lsr #10
   d5948:	eb0c 0e03 	add.w	lr, ip, r3
   d594c:	9b01      	ldr	r3, [sp, #4]
   d594e:	4476      	add	r6, lr
   d5950:	ea83 0c0b 	eor.w	ip, r3, fp
   d5954:	ea4f 4eb5 	mov.w	lr, r5, ror #18
   d5958:	9b02      	ldr	r3, [sp, #8]
   d595a:	ea8e 1ef5 	eor.w	lr, lr, r5, ror #7
   d595e:	ea8e 09d5 	eor.w	r9, lr, r5, lsr #3
   d5962:	ea0c 0c03 	and.w	ip, ip, r3
   d5966:	9b01      	ldr	r3, [sp, #4]
   d5968:	eb06 0e09 	add.w	lr, r6, r9
   d596c:	f8da 6050 	ldr.w	r6, [sl, #80]	; 0x50
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
   d5970:	f8d4 9018 	ldr.w	r9, [r4, #24]
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
   d5974:	f8c4 e050 	str.w	lr, [r4, #80]	; 0x50
   d5978:	ea8c 0c03 	eor.w	ip, ip, r3
   d597c:	9b00      	ldr	r3, [sp, #0]
   d597e:	4476      	add	r6, lr
   d5980:	441e      	add	r6, r3
   d5982:	9b02      	ldr	r3, [sp, #8]
   d5984:	44b4      	add	ip, r6
   d5986:	9e02      	ldr	r6, [sp, #8]
   d5988:	ea4f 23f3 	mov.w	r3, r3, ror #11
   d598c:	ea83 13b6 	eor.w	r3, r3, r6, ror #6
   d5990:	ea83 6376 	eor.w	r3, r3, r6, ror #25
   d5994:	eb03 060c 	add.w	r6, r3, ip
   d5998:	1993      	adds	r3, r2, r6
   d599a:	9300      	str	r3, [sp, #0]
   d599c:	ea41 0308 	orr.w	r3, r1, r8
   d59a0:	ea01 0208 	and.w	r2, r1, r8
   d59a4:	4003      	ands	r3, r0
   d59a6:	4313      	orrs	r3, r2
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
   d59a8:	ea4f 42f7 	mov.w	r2, r7, ror #19
   d59ac:	ea82 4277 	eor.w	r2, r2, r7, ror #17
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
   d59b0:	ea4f 3c78 	mov.w	ip, r8, ror #13
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
   d59b4:	ea82 2797 	eor.w	r7, r2, r7, lsr #10
   d59b8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
   d59ba:	ea8c 0cb8 	eor.w	ip, ip, r8, ror #2
   d59be:	ea8c 5cb8 	eor.w	ip, ip, r8, ror #22
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
   d59c2:	4415      	add	r5, r2
   d59c4:	9a02      	ldr	r2, [sp, #8]
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
   d59c6:	4463      	add	r3, ip
   d59c8:	4433      	add	r3, r6
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
   d59ca:	442f      	add	r7, r5
   d59cc:	ea8b 0602 	eor.w	r6, fp, r2
   d59d0:	ea4f 45b9 	mov.w	r5, r9, ror #18
   d59d4:	9a00      	ldr	r2, [sp, #0]
   d59d6:	ea85 15f9 	eor.w	r5, r5, r9, ror #7
   d59da:	ea85 05d9 	eor.w	r5, r5, r9, lsr #3
   d59de:	4016      	ands	r6, r2
   d59e0:	f8da 2054 	ldr.w	r2, [sl, #84]	; 0x54
   d59e4:	443d      	add	r5, r7
   d59e6:	9f01      	ldr	r7, [sp, #4]
   d59e8:	6565      	str	r5, [r4, #84]	; 0x54
   d59ea:	442a      	add	r2, r5
   d59ec:	443a      	add	r2, r7
   d59ee:	ea86 060b 	eor.w	r6, r6, fp
   d59f2:	4416      	add	r6, r2
   d59f4:	9a00      	ldr	r2, [sp, #0]
   d59f6:	ea4f 27f2 	mov.w	r7, r2, ror #11
   d59fa:	ea87 17b2 	eor.w	r7, r7, r2, ror #6
   d59fe:	ea87 6772 	eor.w	r7, r7, r2, ror #25
   d5a02:	19ba      	adds	r2, r7, r6
   d5a04:	1886      	adds	r6, r0, r2
   d5a06:	ea4f 3073 	mov.w	r0, r3, ror #13
   d5a0a:	ea80 00b3 	eor.w	r0, r0, r3, ror #2
   d5a0e:	ea48 0703 	orr.w	r7, r8, r3
   d5a12:	ea80 5cb3 	eor.w	ip, r0, r3, ror #22
   d5a16:	400f      	ands	r7, r1
   d5a18:	ea08 0003 	and.w	r0, r8, r3
   d5a1c:	4307      	orrs	r7, r0
   d5a1e:	4467      	add	r7, ip
   d5a20:	4417      	add	r7, r2
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
   d5a22:	ea4f 42fe 	mov.w	r2, lr, ror #19
   d5a26:	ea82 427e 	eor.w	r2, r2, lr, ror #17
   d5a2a:	ea82 2e9e 	eor.w	lr, r2, lr, lsr #10
   d5a2e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d5a30:	69e0      	ldr	r0, [r4, #28]
   d5a32:	4491      	add	r9, r2
   d5a34:	eb0e 0209 	add.w	r2, lr, r9
   d5a38:	ea4f 49b0 	mov.w	r9, r0, ror #18
   d5a3c:	ea89 19f0 	eor.w	r9, r9, r0, ror #7
   d5a40:	ea89 09d0 	eor.w	r9, r9, r0, lsr #3
   d5a44:	4491      	add	r9, r2
   d5a46:	9a02      	ldr	r2, [sp, #8]
   d5a48:	f8c4 9058 	str.w	r9, [r4, #88]	; 0x58
   d5a4c:	4696      	mov	lr, r2
   d5a4e:	9a00      	ldr	r2, [sp, #0]
   d5a50:	ea8e 0c02 	eor.w	ip, lr, r2
   d5a54:	f8da 2058 	ldr.w	r2, [sl, #88]	; 0x58
   d5a58:	ea0c 0c06 	and.w	ip, ip, r6
   d5a5c:	ea8c 0c0e 	eor.w	ip, ip, lr
   d5a60:	444a      	add	r2, r9
   d5a62:	ea4f 2ef6 	mov.w	lr, r6, ror #11
   d5a66:	445a      	add	r2, fp
   d5a68:	ea8e 1eb6 	eor.w	lr, lr, r6, ror #6
   d5a6c:	4462      	add	r2, ip
   d5a6e:	ea8e 6e76 	eor.w	lr, lr, r6, ror #25
   d5a72:	4472      	add	r2, lr
   d5a74:	ea4f 3c77 	mov.w	ip, r7, ror #13
   d5a78:	ea43 0e07 	orr.w	lr, r3, r7
   d5a7c:	eb01 0b02 	add.w	fp, r1, r2
   d5a80:	ea0e 0e08 	and.w	lr, lr, r8
   d5a84:	ea03 0107 	and.w	r1, r3, r7
   d5a88:	ea8c 0cb7 	eor.w	ip, ip, r7, ror #2
   d5a8c:	ea8c 5cb7 	eor.w	ip, ip, r7, ror #22
   d5a90:	ea4e 0e01 	orr.w	lr, lr, r1
   d5a94:	44e6      	add	lr, ip
   d5a96:	4496      	add	lr, r2
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
   d5a98:	ea4f 42f5 	mov.w	r2, r5, ror #19
   d5a9c:	6a21      	ldr	r1, [r4, #32]
   d5a9e:	ea82 4275 	eor.w	r2, r2, r5, ror #17
   d5aa2:	ea82 2595 	eor.w	r5, r2, r5, lsr #10
   d5aa6:	9a03      	ldr	r2, [sp, #12]
   d5aa8:	ea4f 4cb1 	mov.w	ip, r1, ror #18
   d5aac:	4410      	add	r0, r2
   d5aae:	ea8c 1cf1 	eor.w	ip, ip, r1, ror #7
   d5ab2:	f8da 205c 	ldr.w	r2, [sl, #92]	; 0x5c
   d5ab6:	4405      	add	r5, r0
   d5ab8:	ea8c 01d1 	eor.w	r1, ip, r1, lsr #3
   d5abc:	440d      	add	r5, r1
   d5abe:	9902      	ldr	r1, [sp, #8]
   d5ac0:	442a      	add	r2, r5
   d5ac2:	eb02 0901 	add.w	r9, r2, r1
   d5ac6:	9a00      	ldr	r2, [sp, #0]
   d5ac8:	65e5      	str	r5, [r4, #92]	; 0x5c
   d5aca:	ea82 0106 	eor.w	r1, r2, r6
   d5ace:	ea01 010b 	and.w	r1, r1, fp
   d5ad2:	4051      	eors	r1, r2
   d5ad4:	ea4f 22fb 	mov.w	r2, fp, ror #11
   d5ad8:	ea82 12bb 	eor.w	r2, r2, fp, ror #6
   d5adc:	4489      	add	r9, r1
   d5ade:	ea82 627b 	eor.w	r2, r2, fp, ror #25
   d5ae2:	444a      	add	r2, r9
   d5ae4:	ea4f 307e 	mov.w	r0, lr, ror #13
   d5ae8:	ea47 090e 	orr.w	r9, r7, lr
   d5aec:	ea80 00be 	eor.w	r0, r0, lr, ror #2
   d5af0:	ea09 0903 	and.w	r9, r9, r3
   d5af4:	ea07 010e 	and.w	r1, r7, lr
   d5af8:	ea80 50be 	eor.w	r0, r0, lr, ror #22
   d5afc:	ea49 0901 	orr.w	r9, r9, r1
   d5b00:	4481      	add	r9, r0
   d5b02:	4490      	add	r8, r2
   d5b04:	4491      	add	r9, r2
   d5b06:	9a04      	ldr	r2, [sp, #16]
   d5b08:	3208      	adds	r2, #8
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    }

    for( i = 16; i < 64; i += 8 )
   d5b0a:	2a30      	cmp	r2, #48	; 0x30
   d5b0c:	9204      	str	r2, [sp, #16]
   d5b0e:	f10a 0a20 	add.w	sl, sl, #32
   d5b12:	f104 0420 	add.w	r4, r4, #32
   d5b16:	f47f ae21 	bne.w	d575c <mbedtls_internal_sha256_process+0x2d0>
   d5b1a:	9a00      	ldr	r2, [sp, #0]
   d5b1c:	9309      	str	r3, [sp, #36]	; 0x24
   d5b1e:	920d      	str	r2, [sp, #52]	; 0x34
   d5b20:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   d5b24:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
   d5b28:	960c      	str	r6, [sp, #48]	; 0x30
   d5b2a:	f8cd 9018 	str.w	r9, [sp, #24]
   d5b2e:	f8cd e01c 	str.w	lr, [sp, #28]
   d5b32:	9708      	str	r7, [sp, #32]
   d5b34:	2300      	movs	r3, #0
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
        ctx->state[i] += A[i];
   d5b36:	9a05      	ldr	r2, [sp, #20]
   d5b38:	f852 1f04 	ldr.w	r1, [r2, #4]!
   d5b3c:	9205      	str	r2, [sp, #20]
   d5b3e:	aa06      	add	r2, sp, #24
   d5b40:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
   d5b44:	3301      	adds	r3, #1
        ctx->state[i] += A[i];
   d5b46:	440a      	add	r2, r1
   d5b48:	9905      	ldr	r1, [sp, #20]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
   d5b4a:	2b08      	cmp	r3, #8
        ctx->state[i] += A[i];
   d5b4c:	600a      	str	r2, [r1, #0]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
   d5b4e:	d1f2      	bne.n	d5b36 <mbedtls_internal_sha256_process+0x6aa>
        ctx->state[i] += A[i];

    return( 0 );
}
   d5b50:	2000      	movs	r0, #0
   d5b52:	b04f      	add	sp, #316	; 0x13c
   d5b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5b58 <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
   d5b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5b5c:	4604      	mov	r4, r0
   d5b5e:	460e      	mov	r6, r1
    uint32_t left;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
   d5b60:	4615      	mov	r5, r2
   d5b62:	b382      	cbz	r2, d5bc6 <mbedtls_sha256_update_ret+0x6e>
        return( 0 );

    left = ctx->total[0] & 0x3F;
   d5b64:	6803      	ldr	r3, [r0, #0]
   d5b66:	f003 003f 	and.w	r0, r3, #63	; 0x3f
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
   d5b6a:	4413      	add	r3, r2
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
   d5b6c:	429a      	cmp	r2, r3
        return( 0 );

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
   d5b6e:	6023      	str	r3, [r4, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;
   d5b70:	bf82      	ittt	hi
   d5b72:	6863      	ldrhi	r3, [r4, #4]
   d5b74:	3301      	addhi	r3, #1
   d5b76:	6063      	strhi	r3, [r4, #4]

    if( left && ilen >= fill )
   d5b78:	b180      	cbz	r0, d5b9c <mbedtls_sha256_update_ret+0x44>

    if( ilen == 0 )
        return( 0 );

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;
   d5b7a:	f1c0 0740 	rsb	r7, r0, #64	; 0x40
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;

    if( left && ilen >= fill )
   d5b7e:	42ba      	cmp	r2, r7
   d5b80:	d31b      	bcc.n	d5bba <mbedtls_sha256_update_ret+0x62>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
   d5b82:	f104 0828 	add.w	r8, r4, #40	; 0x28
   d5b86:	463a      	mov	r2, r7
   d5b88:	4440      	add	r0, r8
   d5b8a:	f013 ff94 	bl	e9ab6 <memcpy>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
   d5b8e:	4641      	mov	r1, r8
   d5b90:	4620      	mov	r0, r4
   d5b92:	f7ff fc7b 	bl	d548c <mbedtls_internal_sha256_process>
   d5b96:	b9b8      	cbnz	r0, d5bc8 <mbedtls_sha256_update_ret+0x70>
            return( ret );

        input += fill;
   d5b98:	443e      	add	r6, r7
        ilen  -= fill;
   d5b9a:	1bed      	subs	r5, r5, r7
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
   d5b9c:	462f      	mov	r7, r5
   d5b9e:	1be9      	subs	r1, r5, r7
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 64 )
   d5ba0:	2f3f      	cmp	r7, #63	; 0x3f
   d5ba2:	4431      	add	r1, r6
   d5ba4:	d905      	bls.n	d5bb2 <mbedtls_sha256_update_ret+0x5a>
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
   d5ba6:	4620      	mov	r0, r4
   d5ba8:	f7ff fc70 	bl	d548c <mbedtls_internal_sha256_process>
   d5bac:	b960      	cbnz	r0, d5bc8 <mbedtls_sha256_update_ret+0x70>
            return( ret );

        input += 64;
        ilen  -= 64;
   d5bae:	3f40      	subs	r7, #64	; 0x40
   d5bb0:	e7f5      	b.n	d5b9e <mbedtls_sha256_update_ret+0x46>
    }

    if( ilen > 0 )
   d5bb2:	b147      	cbz	r7, d5bc6 <mbedtls_sha256_update_ret+0x6e>
   d5bb4:	463d      	mov	r5, r7
   d5bb6:	460e      	mov	r6, r1
   d5bb8:	2000      	movs	r0, #0
        memcpy( (void *) (ctx->buffer + left), input, ilen );
   d5bba:	3428      	adds	r4, #40	; 0x28
   d5bbc:	462a      	mov	r2, r5
   d5bbe:	4631      	mov	r1, r6
   d5bc0:	4420      	add	r0, r4
   d5bc2:	f013 ff78 	bl	e9ab6 <memcpy>

    return( 0 );
   d5bc6:	2000      	movs	r0, #0
}
   d5bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5bcc <mbedtls_sha256_finish_ret>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
   d5bcc:	b570      	push	{r4, r5, r6, lr}
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
   d5bce:	6803      	ldr	r3, [r0, #0]
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
   d5bd0:	4604      	mov	r4, r0
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
   d5bd2:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    ctx->buffer[used++] = 0x80;
   d5bd6:	1c58      	adds	r0, r3, #1
   d5bd8:	4423      	add	r3, r4
   d5bda:	2280      	movs	r2, #128	; 0x80

    if( used <= 56 )
   d5bdc:	2838      	cmp	r0, #56	; 0x38
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
   d5bde:	460d      	mov	r5, r1
    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;
   d5be0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
   d5be4:	f104 0628 	add.w	r6, r4, #40	; 0x28

    if( used <= 56 )
   d5be8:	d804      	bhi.n	d5bf4 <mbedtls_sha256_finish_ret+0x28>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
   d5bea:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
   d5bee:	2100      	movs	r1, #0
   d5bf0:	4430      	add	r0, r6
   d5bf2:	e00e      	b.n	d5c12 <mbedtls_sha256_finish_ret+0x46>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 64 - used );
   d5bf4:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
   d5bf8:	2100      	movs	r1, #0
   d5bfa:	4430      	add	r0, r6
   d5bfc:	f013 ff81 	bl	e9b02 <memset>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
   d5c00:	4631      	mov	r1, r6
   d5c02:	4620      	mov	r0, r4
   d5c04:	f7ff fc42 	bl	d548c <mbedtls_internal_sha256_process>
   d5c08:	2800      	cmp	r0, #0
   d5c0a:	d172      	bne.n	d5cf2 <mbedtls_sha256_finish_ret+0x126>
            return( ret );

        memset( ctx->buffer, 0, 56 );
   d5c0c:	4601      	mov	r1, r0
   d5c0e:	2238      	movs	r2, #56	; 0x38
   d5c10:	4630      	mov	r0, r6
   d5c12:	f013 ff76 	bl	e9b02 <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
   d5c16:	6823      	ldr	r3, [r4, #0]
         | ( ctx->total[1] <<  3 );
   d5c18:	6861      	ldr	r1, [r4, #4]
   d5c1a:	0f5a      	lsrs	r2, r3, #29
   d5c1c:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, ctx->buffer, 56 );
   d5c20:	0e11      	lsrs	r1, r2, #24
    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );
   d5c22:	00db      	lsls	r3, r3, #3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
   d5c24:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
   d5c28:	0c11      	lsrs	r1, r2, #16
   d5c2a:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
   d5c2e:	f884 2063 	strb.w	r2, [r4, #99]	; 0x63
   d5c32:	0a11      	lsrs	r1, r2, #8
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
   d5c34:	0e1a      	lsrs	r2, r3, #24
   d5c36:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
   d5c3a:	0c1a      	lsrs	r2, r3, #16
   d5c3c:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
   d5c40:	0a1a      	lsrs	r2, r3, #8
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, ctx->buffer, 56 );
   d5c42:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
   d5c46:	f884 2066 	strb.w	r2, [r4, #102]	; 0x66
   d5c4a:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
   d5c4e:	4631      	mov	r1, r6
   d5c50:	4620      	mov	r0, r4
   d5c52:	f7ff fc1b 	bl	d548c <mbedtls_internal_sha256_process>
   d5c56:	2800      	cmp	r0, #0
   d5c58:	d14b      	bne.n	d5cf2 <mbedtls_sha256_finish_ret+0x126>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
   d5c5a:	7ae3      	ldrb	r3, [r4, #11]
   d5c5c:	702b      	strb	r3, [r5, #0]
   d5c5e:	8963      	ldrh	r3, [r4, #10]
   d5c60:	706b      	strb	r3, [r5, #1]
   d5c62:	68a3      	ldr	r3, [r4, #8]
   d5c64:	0a1b      	lsrs	r3, r3, #8
   d5c66:	70ab      	strb	r3, [r5, #2]
   d5c68:	68a3      	ldr	r3, [r4, #8]
   d5c6a:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
   d5c6c:	7be3      	ldrb	r3, [r4, #15]
   d5c6e:	712b      	strb	r3, [r5, #4]
   d5c70:	89e3      	ldrh	r3, [r4, #14]
   d5c72:	716b      	strb	r3, [r5, #5]
   d5c74:	68e3      	ldr	r3, [r4, #12]
   d5c76:	0a1b      	lsrs	r3, r3, #8
   d5c78:	71ab      	strb	r3, [r5, #6]
   d5c7a:	68e3      	ldr	r3, [r4, #12]
   d5c7c:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
   d5c7e:	7ce3      	ldrb	r3, [r4, #19]
   d5c80:	722b      	strb	r3, [r5, #8]
   d5c82:	8a63      	ldrh	r3, [r4, #18]
   d5c84:	726b      	strb	r3, [r5, #9]
   d5c86:	6923      	ldr	r3, [r4, #16]
   d5c88:	0a1b      	lsrs	r3, r3, #8
   d5c8a:	72ab      	strb	r3, [r5, #10]
   d5c8c:	6923      	ldr	r3, [r4, #16]
   d5c8e:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
   d5c90:	7de3      	ldrb	r3, [r4, #23]
   d5c92:	732b      	strb	r3, [r5, #12]
   d5c94:	8ae3      	ldrh	r3, [r4, #22]
   d5c96:	736b      	strb	r3, [r5, #13]
   d5c98:	6963      	ldr	r3, [r4, #20]
   d5c9a:	0a1b      	lsrs	r3, r3, #8
   d5c9c:	73ab      	strb	r3, [r5, #14]
   d5c9e:	6963      	ldr	r3, [r4, #20]
   d5ca0:	73eb      	strb	r3, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
   d5ca2:	7ee3      	ldrb	r3, [r4, #27]
   d5ca4:	742b      	strb	r3, [r5, #16]
   d5ca6:	8b63      	ldrh	r3, [r4, #26]
   d5ca8:	746b      	strb	r3, [r5, #17]
   d5caa:	69a3      	ldr	r3, [r4, #24]
   d5cac:	0a1b      	lsrs	r3, r3, #8
   d5cae:	74ab      	strb	r3, [r5, #18]
   d5cb0:	69a3      	ldr	r3, [r4, #24]
   d5cb2:	74eb      	strb	r3, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
   d5cb4:	7fe3      	ldrb	r3, [r4, #31]
   d5cb6:	752b      	strb	r3, [r5, #20]
   d5cb8:	8be3      	ldrh	r3, [r4, #30]
   d5cba:	756b      	strb	r3, [r5, #21]
   d5cbc:	69e3      	ldr	r3, [r4, #28]
   d5cbe:	0a1b      	lsrs	r3, r3, #8
   d5cc0:	75ab      	strb	r3, [r5, #22]
   d5cc2:	69e3      	ldr	r3, [r4, #28]
   d5cc4:	75eb      	strb	r3, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
   d5cc6:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   d5cca:	762b      	strb	r3, [r5, #24]
   d5ccc:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d5cce:	766b      	strb	r3, [r5, #25]
   d5cd0:	6a23      	ldr	r3, [r4, #32]
   d5cd2:	0a1b      	lsrs	r3, r3, #8
   d5cd4:	76ab      	strb	r3, [r5, #26]
   d5cd6:	6a23      	ldr	r3, [r4, #32]
   d5cd8:	76eb      	strb	r3, [r5, #27]

    if( ctx->is224 == 0 )
   d5cda:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   d5cdc:	b94b      	cbnz	r3, d5cf2 <mbedtls_sha256_finish_ret+0x126>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
   d5cde:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   d5ce2:	772b      	strb	r3, [r5, #28]
   d5ce4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   d5ce6:	776b      	strb	r3, [r5, #29]
   d5ce8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d5cea:	0a1b      	lsrs	r3, r3, #8
   d5cec:	77ab      	strb	r3, [r5, #30]
   d5cee:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d5cf0:	77eb      	strb	r3, [r5, #31]

    return( 0 );
}
   d5cf2:	bd70      	pop	{r4, r5, r6, pc}

000d5cf4 <mbedtls_sha256_ret>:
 */
int mbedtls_sha256_ret( const unsigned char *input,
                        size_t ilen,
                        unsigned char output[32],
                        int is224 )
{
   d5cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5cf6:	b09d      	sub	sp, #116	; 0x74
   d5cf8:	461c      	mov	r4, r3
   d5cfa:	4606      	mov	r6, r0

    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    mbedtls_sha256_init( &ctx );
   d5cfc:	a801      	add	r0, sp, #4
 */
int mbedtls_sha256_ret( const unsigned char *input,
                        size_t ilen,
                        unsigned char output[32],
                        int is224 )
{
   d5cfe:	460f      	mov	r7, r1
   d5d00:	4615      	mov	r5, r2

    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    mbedtls_sha256_init( &ctx );
   d5d02:	f7ff fb65 	bl	d53d0 <mbedtls_sha256_init>

    if( ( ret = mbedtls_sha256_starts_ret( &ctx, is224 ) ) != 0 )
   d5d06:	4621      	mov	r1, r4
   d5d08:	a801      	add	r0, sp, #4
   d5d0a:	f7ff fb6f 	bl	d53ec <mbedtls_sha256_starts_ret>
   d5d0e:	4604      	mov	r4, r0
   d5d10:	b958      	cbnz	r0, d5d2a <mbedtls_sha256_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha256_update_ret( &ctx, input, ilen ) ) != 0 )
   d5d12:	463a      	mov	r2, r7
   d5d14:	4631      	mov	r1, r6
   d5d16:	a801      	add	r0, sp, #4
   d5d18:	f7ff ff1e 	bl	d5b58 <mbedtls_sha256_update_ret>
   d5d1c:	4604      	mov	r4, r0
   d5d1e:	b920      	cbnz	r0, d5d2a <mbedtls_sha256_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha256_finish_ret( &ctx, output ) ) != 0 )
   d5d20:	4629      	mov	r1, r5
   d5d22:	a801      	add	r0, sp, #4
   d5d24:	f7ff ff52 	bl	d5bcc <mbedtls_sha256_finish_ret>
   d5d28:	4604      	mov	r4, r0
        goto exit;

exit:
    mbedtls_sha256_free( &ctx );
   d5d2a:	a801      	add	r0, sp, #4
   d5d2c:	f7ff fb54 	bl	d53d8 <mbedtls_sha256_free>

    return( ret );
}
   d5d30:	4620      	mov	r0, r4
   d5d32:	b01d      	add	sp, #116	; 0x74
   d5d34:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5d36 <mbedtls_asn1_write_len>:
#define mbedtls_calloc    calloc
#define mbedtls_free       free
#endif

int mbedtls_asn1_write_len( unsigned char **p, unsigned char *start, size_t len )
{
   d5d36:	6803      	ldr	r3, [r0, #0]
    if( len < 0x80 )
   d5d38:	2a7f      	cmp	r2, #127	; 0x7f
    {
        if( *p - start < 1 )
   d5d3a:	eba3 0101 	sub.w	r1, r3, r1
#define mbedtls_free       free
#endif

int mbedtls_asn1_write_len( unsigned char **p, unsigned char *start, size_t len )
{
    if( len < 0x80 )
   d5d3e:	d807      	bhi.n	d5d50 <mbedtls_asn1_write_len+0x1a>
    {
        if( *p - start < 1 )
   d5d40:	2900      	cmp	r1, #0
   d5d42:	dd69      	ble.n	d5e18 <mbedtls_asn1_write_len+0xe2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = (unsigned char) len;
   d5d44:	1e59      	subs	r1, r3, #1
   d5d46:	6001      	str	r1, [r0, #0]
   d5d48:	f803 2c01 	strb.w	r2, [r3, #-1]
        return( 1 );
   d5d4c:	2001      	movs	r0, #1
   d5d4e:	4770      	bx	lr
    }

    if( len <= 0xFF )
   d5d50:	2aff      	cmp	r2, #255	; 0xff
   d5d52:	d80d      	bhi.n	d5d70 <mbedtls_asn1_write_len+0x3a>
    {
        if( *p - start < 2 )
   d5d54:	2901      	cmp	r1, #1
   d5d56:	dd5f      	ble.n	d5e18 <mbedtls_asn1_write_len+0xe2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = (unsigned char) len;
   d5d58:	1e59      	subs	r1, r3, #1
   d5d5a:	6001      	str	r1, [r0, #0]
   d5d5c:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = 0x81;
   d5d60:	6803      	ldr	r3, [r0, #0]
   d5d62:	1e5a      	subs	r2, r3, #1
   d5d64:	6002      	str	r2, [r0, #0]
   d5d66:	2281      	movs	r2, #129	; 0x81
   d5d68:	f803 2c01 	strb.w	r2, [r3, #-1]
        return( 2 );
   d5d6c:	2002      	movs	r0, #2
   d5d6e:	4770      	bx	lr
    }

    if( len <= 0xFFFF )
   d5d70:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   d5d74:	d213      	bcs.n	d5d9e <mbedtls_asn1_write_len+0x68>
    {
        if( *p - start < 3 )
   d5d76:	2902      	cmp	r1, #2
   d5d78:	dd4e      	ble.n	d5e18 <mbedtls_asn1_write_len+0xe2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = ( len       ) & 0xFF;
   d5d7a:	1e59      	subs	r1, r3, #1
   d5d7c:	6001      	str	r1, [r0, #0]
   d5d7e:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = ( len >>  8 ) & 0xFF;
   d5d82:	6803      	ldr	r3, [r0, #0]
   d5d84:	0a12      	lsrs	r2, r2, #8
   d5d86:	1e59      	subs	r1, r3, #1
   d5d88:	6001      	str	r1, [r0, #0]
   d5d8a:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = 0x82;
   d5d8e:	6803      	ldr	r3, [r0, #0]
   d5d90:	1e5a      	subs	r2, r3, #1
   d5d92:	6002      	str	r2, [r0, #0]
   d5d94:	2282      	movs	r2, #130	; 0x82
   d5d96:	f803 2c01 	strb.w	r2, [r3, #-1]
        return( 3 );
   d5d9a:	2003      	movs	r0, #3
   d5d9c:	4770      	bx	lr
    }

    if( len <= 0xFFFFFF )
   d5d9e:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
   d5da2:	d219      	bcs.n	d5dd8 <mbedtls_asn1_write_len+0xa2>
    {
        if( *p - start < 4 )
   d5da4:	2903      	cmp	r1, #3
   d5da6:	dd37      	ble.n	d5e18 <mbedtls_asn1_write_len+0xe2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = ( len       ) & 0xFF;
   d5da8:	1e59      	subs	r1, r3, #1
   d5daa:	6001      	str	r1, [r0, #0]
   d5dac:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = ( len >>  8 ) & 0xFF;
   d5db0:	6803      	ldr	r3, [r0, #0]
   d5db2:	1e59      	subs	r1, r3, #1
   d5db4:	6001      	str	r1, [r0, #0]
   d5db6:	0a11      	lsrs	r1, r2, #8
   d5db8:	f803 1c01 	strb.w	r1, [r3, #-1]
        *--(*p) = ( len >> 16 ) & 0xFF;
   d5dbc:	6803      	ldr	r3, [r0, #0]
   d5dbe:	0c12      	lsrs	r2, r2, #16
   d5dc0:	1e59      	subs	r1, r3, #1
   d5dc2:	6001      	str	r1, [r0, #0]
   d5dc4:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = 0x83;
   d5dc8:	6803      	ldr	r3, [r0, #0]
   d5dca:	1e5a      	subs	r2, r3, #1
   d5dcc:	6002      	str	r2, [r0, #0]
   d5dce:	2283      	movs	r2, #131	; 0x83
   d5dd0:	f803 2c01 	strb.w	r2, [r3, #-1]
        return( 4 );
   d5dd4:	2004      	movs	r0, #4
   d5dd6:	4770      	bx	lr

#if SIZE_MAX > 0xFFFFFFFF
    if( len <= 0xFFFFFFFF )
#endif
    {
        if( *p - start < 5 )
   d5dd8:	2904      	cmp	r1, #4
   d5dda:	dd1d      	ble.n	d5e18 <mbedtls_asn1_write_len+0xe2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = ( len       ) & 0xFF;
   d5ddc:	1e59      	subs	r1, r3, #1
   d5dde:	6001      	str	r1, [r0, #0]
   d5de0:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = ( len >>  8 ) & 0xFF;
   d5de4:	6803      	ldr	r3, [r0, #0]
   d5de6:	1e59      	subs	r1, r3, #1
   d5de8:	6001      	str	r1, [r0, #0]
   d5dea:	0a11      	lsrs	r1, r2, #8
   d5dec:	f803 1c01 	strb.w	r1, [r3, #-1]
        *--(*p) = ( len >> 16 ) & 0xFF;
   d5df0:	6803      	ldr	r3, [r0, #0]
   d5df2:	1e59      	subs	r1, r3, #1
   d5df4:	6001      	str	r1, [r0, #0]
   d5df6:	0c11      	lsrs	r1, r2, #16
   d5df8:	f803 1c01 	strb.w	r1, [r3, #-1]
        *--(*p) = ( len >> 24 ) & 0xFF;
   d5dfc:	6803      	ldr	r3, [r0, #0]
   d5dfe:	0e12      	lsrs	r2, r2, #24
   d5e00:	1e59      	subs	r1, r3, #1
   d5e02:	6001      	str	r1, [r0, #0]
   d5e04:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = 0x84;
   d5e08:	6803      	ldr	r3, [r0, #0]
   d5e0a:	1e5a      	subs	r2, r3, #1
   d5e0c:	6002      	str	r2, [r0, #0]
   d5e0e:	2284      	movs	r2, #132	; 0x84
   d5e10:	f803 2c01 	strb.w	r2, [r3, #-1]
        return( 5 );
   d5e14:	2005      	movs	r0, #5
   d5e16:	4770      	bx	lr
int mbedtls_asn1_write_len( unsigned char **p, unsigned char *start, size_t len )
{
    if( len < 0x80 )
    {
        if( *p - start < 1 )
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
   d5e18:	f06f 006b 	mvn.w	r0, #107	; 0x6b
    }

#if SIZE_MAX > 0xFFFFFFFF
    return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
#endif
}
   d5e1c:	4770      	bx	lr

000d5e1e <mbedtls_asn1_write_tag>:

int mbedtls_asn1_write_tag( unsigned char **p, unsigned char *start, unsigned char tag )
{
    if( *p - start < 1 )
   d5e1e:	6803      	ldr	r3, [r0, #0]
   d5e20:	1a59      	subs	r1, r3, r1
   d5e22:	2900      	cmp	r1, #0
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

    *--(*p) = tag;
   d5e24:	bfc1      	itttt	gt
   d5e26:	f103 31ff 	addgt.w	r1, r3, #4294967295
   d5e2a:	6001      	strgt	r1, [r0, #0]

    return( 1 );
   d5e2c:	2001      	movgt	r0, #1
int mbedtls_asn1_write_tag( unsigned char **p, unsigned char *start, unsigned char tag )
{
    if( *p - start < 1 )
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

    *--(*p) = tag;
   d5e2e:	f803 2c01 	strbgt.w	r2, [r3, #-1]
}

int mbedtls_asn1_write_tag( unsigned char **p, unsigned char *start, unsigned char tag )
{
    if( *p - start < 1 )
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
   d5e32:	bfd8      	it	le
   d5e34:	f06f 006b 	mvnle.w	r0, #107	; 0x6b

    *--(*p) = tag;

    return( 1 );
}
   d5e38:	4770      	bx	lr

000d5e3a <mbedtls_asn1_write_mpi>:
    return( (int) len );
}

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_write_mpi( unsigned char **p, unsigned char *start, const mbedtls_mpi *X )
{
   d5e3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5e3c:	4605      	mov	r5, r0
    int ret;
    size_t len = 0;

    // Write the MPI
    //
    len = mbedtls_mpi_size( X );
   d5e3e:	4610      	mov	r0, r2
    return( (int) len );
}

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_write_mpi( unsigned char **p, unsigned char *start, const mbedtls_mpi *X )
{
   d5e40:	460e      	mov	r6, r1
   d5e42:	4617      	mov	r7, r2
    int ret;
    size_t len = 0;

    // Write the MPI
    //
    len = mbedtls_mpi_size( X );
   d5e44:	f00b f8b2 	bl	e0fac <mbedtls_mpi_size>

    if( *p < start || (size_t)( *p - start ) < len )
   d5e48:	6829      	ldr	r1, [r5, #0]
   d5e4a:	42b1      	cmp	r1, r6
    int ret;
    size_t len = 0;

    // Write the MPI
    //
    len = mbedtls_mpi_size( X );
   d5e4c:	4604      	mov	r4, r0

    if( *p < start || (size_t)( *p - start ) < len )
   d5e4e:	d202      	bcs.n	d5e56 <mbedtls_asn1_write_mpi+0x1c>
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
   d5e50:	f06f 006b 	mvn.w	r0, #107	; 0x6b
   d5e54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    // Write the MPI
    //
    len = mbedtls_mpi_size( X );

    if( *p < start || (size_t)( *p - start ) < len )
   d5e56:	1b8b      	subs	r3, r1, r6
   d5e58:	4298      	cmp	r0, r3
   d5e5a:	d8f9      	bhi.n	d5e50 <mbedtls_asn1_write_mpi+0x16>
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

    (*p) -= len;
   d5e5c:	1a09      	subs	r1, r1, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( X, *p, len ) );
   d5e5e:	4602      	mov	r2, r0
    len = mbedtls_mpi_size( X );

    if( *p < start || (size_t)( *p - start ) < len )
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

    (*p) -= len;
   d5e60:	6029      	str	r1, [r5, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( X, *p, len ) );
   d5e62:	4638      	mov	r0, r7
   d5e64:	f00b f8df 	bl	e1026 <mbedtls_mpi_write_binary>
   d5e68:	b9f8      	cbnz	r0, d5eaa <mbedtls_asn1_write_mpi+0x70>

    // DER format assumes 2s complement for numbers, so the leftmost bit
    // should be 0 for positive numbers and 1 for negative numbers.
    //
    if( X->s ==1 && **p & 0x80 )
   d5e6a:	683b      	ldr	r3, [r7, #0]
   d5e6c:	2b01      	cmp	r3, #1
   d5e6e:	d10c      	bne.n	d5e8a <mbedtls_asn1_write_mpi+0x50>
   d5e70:	682b      	ldr	r3, [r5, #0]
   d5e72:	f993 2000 	ldrsb.w	r2, [r3]
   d5e76:	2a00      	cmp	r2, #0
   d5e78:	da07      	bge.n	d5e8a <mbedtls_asn1_write_mpi+0x50>
    {
        if( *p - start < 1 )
   d5e7a:	1b9a      	subs	r2, r3, r6
   d5e7c:	2a00      	cmp	r2, #0
   d5e7e:	dde7      	ble.n	d5e50 <mbedtls_asn1_write_mpi+0x16>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = 0x00;
   d5e80:	1e5a      	subs	r2, r3, #1
   d5e82:	602a      	str	r2, [r5, #0]
        len += 1;
   d5e84:	3401      	adds	r4, #1
    if( X->s ==1 && **p & 0x80 )
    {
        if( *p - start < 1 )
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = 0x00;
   d5e86:	f803 0c01 	strb.w	r0, [r3, #-1]
        len += 1;
    }

    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
   d5e8a:	4622      	mov	r2, r4
   d5e8c:	4631      	mov	r1, r6
   d5e8e:	4628      	mov	r0, r5
   d5e90:	f7ff ff51 	bl	d5d36 <mbedtls_asn1_write_len>
   d5e94:	2800      	cmp	r0, #0
   d5e96:	db08      	blt.n	d5eaa <mbedtls_asn1_write_mpi+0x70>
   d5e98:	4404      	add	r4, r0
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_INTEGER ) );
   d5e9a:	2202      	movs	r2, #2
   d5e9c:	4631      	mov	r1, r6
   d5e9e:	4628      	mov	r0, r5
   d5ea0:	f7ff ffbd 	bl	d5e1e <mbedtls_asn1_write_tag>
   d5ea4:	2800      	cmp	r0, #0

    ret = (int) len;
   d5ea6:	bfa8      	it	ge
   d5ea8:	1900      	addge	r0, r0, r4

cleanup:
    return( ret );
}
   d5eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5eac <mbedtls_ecdh_gen_public>:
 * Generate public key
 */
int mbedtls_ecdh_gen_public( mbedtls_ecp_group *grp, mbedtls_mpi *d, mbedtls_ecp_point *Q,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
   d5eac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d5eb0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   d5eb2:	461d      	mov	r5, r3
   d5eb4:	4617      	mov	r7, r2

    /* If multiplication is in progress, we already generated a privkey */
#if defined(MBEDTLS_ECP_RESTARTABLE)
    if( rs_ctx == NULL || rs_ctx->rsm == NULL )
#endif
        MBEDTLS_MPI_CHK( mbedtls_ecp_gen_privkey( grp, d, f_rng, p_rng ) );
   d5eb6:	4633      	mov	r3, r6
   d5eb8:	462a      	mov	r2, r5
 * Generate public key
 */
int mbedtls_ecdh_gen_public( mbedtls_ecp_group *grp, mbedtls_mpi *d, mbedtls_ecp_point *Q,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
   d5eba:	4604      	mov	r4, r0
   d5ebc:	4688      	mov	r8, r1

    /* If multiplication is in progress, we already generated a privkey */
#if defined(MBEDTLS_ECP_RESTARTABLE)
    if( rs_ctx == NULL || rs_ctx->rsm == NULL )
#endif
        MBEDTLS_MPI_CHK( mbedtls_ecp_gen_privkey( grp, d, f_rng, p_rng ) );
   d5ebe:	f003 ff25 	bl	d9d0c <mbedtls_ecp_gen_privkey>
   d5ec2:	b948      	cbnz	r0, d5ed8 <mbedtls_ecdh_gen_public+0x2c>

    MBEDTLS_MPI_CHK( mbedtls_ecp_mul_restartable( grp, Q, d, &grp->G,
   d5ec4:	9002      	str	r0, [sp, #8]
   d5ec6:	e88d 0060 	stmia.w	sp, {r5, r6}
   d5eca:	f104 0328 	add.w	r3, r4, #40	; 0x28
   d5ece:	4642      	mov	r2, r8
   d5ed0:	4639      	mov	r1, r7
   d5ed2:	4620      	mov	r0, r4
   d5ed4:	f003 fd6c 	bl	d99b0 <mbedtls_ecp_mul_restartable>
    ECDH_VALIDATE_RET( grp != NULL );
    ECDH_VALIDATE_RET( d != NULL );
    ECDH_VALIDATE_RET( Q != NULL );
    ECDH_VALIDATE_RET( f_rng != NULL );
    return( ecdh_gen_public_restartable( grp, d, Q, f_rng, p_rng, NULL ) );
}
   d5ed8:	b004      	add	sp, #16
   d5eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d5ee0 <mbedtls_ecdh_compute_shared>:
 */
int mbedtls_ecdh_compute_shared( mbedtls_ecp_group *grp, mbedtls_mpi *z,
                         const mbedtls_ecp_point *Q, const mbedtls_mpi *d,
                         int (*f_rng)(void *, unsigned char *, size_t),
                         void *p_rng )
{
   d5ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5ee2:	b08f      	sub	sp, #60	; 0x3c
   d5ee4:	4604      	mov	r4, r0
                         mbedtls_ecp_restart_ctx *rs_ctx )
{
    int ret;
    mbedtls_ecp_point P;

    mbedtls_ecp_point_init( &P );
   d5ee6:	a805      	add	r0, sp, #20
 */
int mbedtls_ecdh_compute_shared( mbedtls_ecp_group *grp, mbedtls_mpi *z,
                         const mbedtls_ecp_point *Q, const mbedtls_mpi *d,
                         int (*f_rng)(void *, unsigned char *, size_t),
                         void *p_rng )
{
   d5ee8:	4617      	mov	r7, r2
   d5eea:	461e      	mov	r6, r3
   d5eec:	460d      	mov	r5, r1
                         mbedtls_ecp_restart_ctx *rs_ctx )
{
    int ret;
    mbedtls_ecp_point P;

    mbedtls_ecp_point_init( &P );
   d5eee:	f002 ff99 	bl	d8e24 <mbedtls_ecp_point_init>

    MBEDTLS_MPI_CHK( mbedtls_ecp_mul_restartable( grp, &P, d, Q,
   d5ef2:	2300      	movs	r3, #0
   d5ef4:	9302      	str	r3, [sp, #8]
   d5ef6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d5ef8:	9301      	str	r3, [sp, #4]
   d5efa:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d5efc:	9300      	str	r3, [sp, #0]
   d5efe:	4620      	mov	r0, r4
   d5f00:	463b      	mov	r3, r7
   d5f02:	4632      	mov	r2, r6
   d5f04:	a905      	add	r1, sp, #20
   d5f06:	f003 fd53 	bl	d99b0 <mbedtls_ecp_mul_restartable>
   d5f0a:	4604      	mov	r4, r0
   d5f0c:	b950      	cbnz	r0, d5f24 <mbedtls_ecdh_compute_shared+0x44>
                                                  f_rng, p_rng, rs_ctx ) );

    if( mbedtls_ecp_is_zero( &P ) )
   d5f0e:	a805      	add	r0, sp, #20
   d5f10:	f003 fb92 	bl	d9638 <mbedtls_ecp_is_zero>
   d5f14:	b928      	cbnz	r0, d5f22 <mbedtls_ecdh_compute_shared+0x42>
    {
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
        goto cleanup;
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( z, &P.X ) );
   d5f16:	a905      	add	r1, sp, #20
   d5f18:	4628      	mov	r0, r5
   d5f1a:	f00a ff80 	bl	e0e1e <mbedtls_mpi_copy>
   d5f1e:	4604      	mov	r4, r0
   d5f20:	e000      	b.n	d5f24 <mbedtls_ecdh_compute_shared+0x44>
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul_restartable( grp, &P, d, Q,
                                                  f_rng, p_rng, rs_ctx ) );

    if( mbedtls_ecp_is_zero( &P ) )
    {
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
   d5f22:	4c03      	ldr	r4, [pc, #12]	; (d5f30 <mbedtls_ecdh_compute_shared+0x50>)
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( z, &P.X ) );

cleanup:
    mbedtls_ecp_point_free( &P );
   d5f24:	a805      	add	r0, sp, #20
   d5f26:	f002 ffba 	bl	d8e9e <mbedtls_ecp_point_free>
    ECDH_VALIDATE_RET( Q != NULL );
    ECDH_VALIDATE_RET( d != NULL );
    ECDH_VALIDATE_RET( z != NULL );
    return( ecdh_compute_shared_restartable( grp, z, Q, d,
                                             f_rng, p_rng, NULL ) );
}
   d5f2a:	4620      	mov	r0, r4
   d5f2c:	b00f      	add	sp, #60	; 0x3c
   d5f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5f30:	ffffb080 	.word	0xffffb080

000d5f34 <mbedtls_ecdh_init>:

/*
 * Initialize context
 */
void mbedtls_ecdh_init( mbedtls_ecdh_context *ctx )
{
   d5f34:	b510      	push	{r4, lr}
   d5f36:	4604      	mov	r4, r0
}
#endif /* !MBEDTLS_ECDH_COMPUTE_SHARED_ALT */

static void ecdh_init_internal( mbedtls_ecdh_context_mbed *ctx )
{
    mbedtls_ecp_group_init( &ctx->grp );
   d5f38:	f002 ff82 	bl	d8e40 <mbedtls_ecp_group_init>
    mbedtls_mpi_init( &ctx->d  );
   d5f3c:	f104 007c 	add.w	r0, r4, #124	; 0x7c
   d5f40:	f00a feed 	bl	e0d1e <mbedtls_mpi_init>
    mbedtls_ecp_point_init( &ctx->Q   );
   d5f44:	f104 0088 	add.w	r0, r4, #136	; 0x88
   d5f48:	f002 ff6c 	bl	d8e24 <mbedtls_ecp_point_init>
    mbedtls_ecp_point_init( &ctx->Qp  );
   d5f4c:	f104 00ac 	add.w	r0, r4, #172	; 0xac
   d5f50:	f002 ff68 	bl	d8e24 <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &ctx->z  );
   d5f54:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
   d5f58:	f00a fee1 	bl	e0d1e <mbedtls_mpi_init>
{
    ECDH_VALIDATE( ctx != NULL );

#if defined(MBEDTLS_ECDH_LEGACY_CONTEXT)
    ecdh_init_internal( ctx );
    mbedtls_ecp_point_init( &ctx->Vi  );
   d5f5c:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
   d5f60:	f002 ff60 	bl	d8e24 <mbedtls_ecp_point_init>
    mbedtls_ecp_point_init( &ctx->Vf  );
   d5f64:	f504 7082 	add.w	r0, r4, #260	; 0x104
   d5f68:	f002 ff5c 	bl	d8e24 <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &ctx->_d );
   d5f6c:	f504 7094 	add.w	r0, r4, #296	; 0x128
   d5f70:	f00a fed5 	bl	e0d1e <mbedtls_mpi_init>
#else
    memset( ctx, 0, sizeof( mbedtls_ecdh_context ) );

    ctx->var = MBEDTLS_ECDH_VARIANT_NONE;
#endif
    ctx->point_format = MBEDTLS_ECP_PF_UNCOMPRESSED;
   d5f74:	2300      	movs	r3, #0
   d5f76:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
   d5f7a:	bd10      	pop	{r4, pc}

000d5f7c <mbedtls_ecdh_free>:

/*
 * Free context
 */
void mbedtls_ecdh_free( mbedtls_ecdh_context *ctx )
{
   d5f7c:	b510      	push	{r4, lr}
    if( ctx == NULL )
   d5f7e:	4604      	mov	r4, r0
   d5f80:	b1f8      	cbz	r0, d5fc2 <mbedtls_ecdh_free+0x46>
        return;

#if defined(MBEDTLS_ECDH_LEGACY_CONTEXT)
    mbedtls_ecp_point_free( &ctx->Vi );
   d5f82:	30e0      	adds	r0, #224	; 0xe0
   d5f84:	f002 ff8b 	bl	d8e9e <mbedtls_ecp_point_free>
    mbedtls_ecp_point_free( &ctx->Vf );
   d5f88:	f504 7082 	add.w	r0, r4, #260	; 0x104
   d5f8c:	f002 ff87 	bl	d8e9e <mbedtls_ecp_point_free>
    mbedtls_mpi_free( &ctx->_d );
   d5f90:	f504 7094 	add.w	r0, r4, #296	; 0x128
   d5f94:	f00a fec9 	bl	e0d2a <mbedtls_mpi_free>
#endif
}

static void ecdh_free_internal( mbedtls_ecdh_context_mbed *ctx )
{
    mbedtls_ecp_group_free( &ctx->grp );
   d5f98:	4620      	mov	r0, r4
   d5f9a:	f002 ff90 	bl	d8ebe <mbedtls_ecp_group_free>
    mbedtls_mpi_free( &ctx->d  );
   d5f9e:	f104 007c 	add.w	r0, r4, #124	; 0x7c
   d5fa2:	f00a fec2 	bl	e0d2a <mbedtls_mpi_free>
    mbedtls_ecp_point_free( &ctx->Q   );
   d5fa6:	f104 0088 	add.w	r0, r4, #136	; 0x88
   d5faa:	f002 ff78 	bl	d8e9e <mbedtls_ecp_point_free>
    mbedtls_ecp_point_free( &ctx->Qp  );
   d5fae:	f104 00ac 	add.w	r0, r4, #172	; 0xac
   d5fb2:	f002 ff74 	bl	d8e9e <mbedtls_ecp_point_free>
    mbedtls_mpi_free( &ctx->z  );
   d5fb6:	f104 00d0 	add.w	r0, r4, #208	; 0xd0

    ctx->point_format = MBEDTLS_ECP_PF_UNCOMPRESSED;
    ctx->var = MBEDTLS_ECDH_VARIANT_NONE;
    ctx->grp_id = MBEDTLS_ECP_DP_NONE;
#endif
}
   d5fba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    mbedtls_ecp_group_free( &ctx->grp );
    mbedtls_mpi_free( &ctx->d  );
    mbedtls_ecp_point_free( &ctx->Q   );
    mbedtls_ecp_point_free( &ctx->Qp  );
    mbedtls_mpi_free( &ctx->z  );
   d5fbe:	f00a beb4 	b.w	e0d2a <mbedtls_mpi_free>
   d5fc2:	bd10      	pop	{r4, pc}

000d5fc4 <mbedtls_ecdh_read_params>:
 *      } ServerECDHParams;
 */
int mbedtls_ecdh_read_params( mbedtls_ecdh_context *ctx,
                              const unsigned char **buf,
                              const unsigned char *end )
{
   d5fc4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5fc6:	4616      	mov	r6, r2
    ECDH_VALIDATE_RET( ctx != NULL );
    ECDH_VALIDATE_RET( buf != NULL );
    ECDH_VALIDATE_RET( *buf != NULL );
    ECDH_VALIDATE_RET( end != NULL );

    if( ( ret = mbedtls_ecp_tls_read_group_id( &grp_id, buf, end - *buf ) )
   d5fc8:	680a      	ldr	r2, [r1, #0]
 *      } ServerECDHParams;
 */
int mbedtls_ecdh_read_params( mbedtls_ecdh_context *ctx,
                              const unsigned char **buf,
                              const unsigned char *end )
{
   d5fca:	4604      	mov	r4, r0
    ECDH_VALIDATE_RET( ctx != NULL );
    ECDH_VALIDATE_RET( buf != NULL );
    ECDH_VALIDATE_RET( *buf != NULL );
    ECDH_VALIDATE_RET( end != NULL );

    if( ( ret = mbedtls_ecp_tls_read_group_id( &grp_id, buf, end - *buf ) )
   d5fcc:	1ab2      	subs	r2, r6, r2
   d5fce:	f10d 0007 	add.w	r0, sp, #7
 *      } ServerECDHParams;
 */
int mbedtls_ecdh_read_params( mbedtls_ecdh_context *ctx,
                              const unsigned char **buf,
                              const unsigned char *end )
{
   d5fd2:	460d      	mov	r5, r1
    ECDH_VALIDATE_RET( ctx != NULL );
    ECDH_VALIDATE_RET( buf != NULL );
    ECDH_VALIDATE_RET( *buf != NULL );
    ECDH_VALIDATE_RET( end != NULL );

    if( ( ret = mbedtls_ecp_tls_read_group_id( &grp_id, buf, end - *buf ) )
   d5fd4:	f003 fbf0 	bl	d97b8 <mbedtls_ecp_tls_read_group_id>
   d5fd8:	b978      	cbnz	r0, d5ffa <mbedtls_ecdh_read_params+0x36>
static int ecdh_setup_internal( mbedtls_ecdh_context_mbed *ctx,
                                mbedtls_ecp_group_id grp_id )
{
    int ret;

    ret = mbedtls_ecp_group_load( &ctx->grp, grp_id );
   d5fda:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d5fde:	4620      	mov	r0, r4
   d5fe0:	f007 fb6a 	bl	dd6b8 <mbedtls_ecp_group_load>
    if( ret != 0 )
   d5fe4:	b108      	cbz	r0, d5fea <mbedtls_ecdh_read_params+0x26>
    {
        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
   d5fe6:	4806      	ldr	r0, [pc, #24]	; (d6000 <mbedtls_ecdh_read_params+0x3c>)
   d5fe8:	e007      	b.n	d5ffa <mbedtls_ecdh_read_params+0x36>
static int ecdh_read_params_internal( mbedtls_ecdh_context_mbed *ctx,
                                      const unsigned char **buf,
                                      const unsigned char *end )
{
    return( mbedtls_ecp_tls_read_point( &ctx->grp, &ctx->Qp, buf,
                                        end - *buf ) );
   d5fea:	682b      	ldr	r3, [r5, #0]
   d5fec:	462a      	mov	r2, r5
   d5fee:	1af3      	subs	r3, r6, r3
   d5ff0:	f104 01ac 	add.w	r1, r4, #172	; 0xac
   d5ff4:	4620      	mov	r0, r4
   d5ff6:	f003 fbaf 	bl	d9758 <mbedtls_ecp_tls_read_point>
                                               buf, end ) );
        default:
            return MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
    }
#endif
}
   d5ffa:	b002      	add	sp, #8
   d5ffc:	bd70      	pop	{r4, r5, r6, pc}
   d5ffe:	bf00      	nop
   d6000:	ffffb180 	.word	0xffffb180

000d6004 <mbedtls_ecdh_make_public>:
 */
int mbedtls_ecdh_make_public( mbedtls_ecdh_context *ctx, size_t *olen,
                              unsigned char *buf, size_t blen,
                              int (*f_rng)(void *, unsigned char *, size_t),
                              void *p_rng )
{
   d6004:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d6008:	460f      	mov	r7, r1
    int ret;
#if defined(MBEDTLS_ECP_RESTARTABLE)
    mbedtls_ecp_restart_ctx *rs_ctx = NULL;
#endif

    if( ctx->grp.pbits == 0 )
   d600a:	6d81      	ldr	r1, [r0, #88]	; 0x58
#if defined(MBEDTLS_ECP_RESTARTABLE)
    restart_enabled = ctx->restart_enabled;
#endif

#if defined(MBEDTLS_ECDH_LEGACY_CONTEXT)
    return( ecdh_make_public_internal( ctx, olen, ctx->point_format, buf, blen,
   d600c:	f8d0 60dc 	ldr.w	r6, [r0, #220]	; 0xdc
 */
int mbedtls_ecdh_make_public( mbedtls_ecdh_context *ctx, size_t *olen,
                              unsigned char *buf, size_t blen,
                              int (*f_rng)(void *, unsigned char *, size_t),
                              void *p_rng )
{
   d6010:	4690      	mov	r8, r2
   d6012:	4699      	mov	r9, r3
   d6014:	4604      	mov	r4, r0
   d6016:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6018:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    int ret;
#if defined(MBEDTLS_ECP_RESTARTABLE)
    mbedtls_ecp_restart_ctx *rs_ctx = NULL;
#endif

    if( ctx->grp.pbits == 0 )
   d601a:	b1a9      	cbz	r1, d6048 <mbedtls_ecdh_make_public+0x44>
#if defined(MBEDTLS_ECP_RESTARTABLE)
    if( ( ret = ecdh_gen_public_restartable( &ctx->grp, &ctx->d, &ctx->Q,
                                             f_rng, p_rng, rs_ctx ) ) != 0 )
        return( ret );
#else
    if( ( ret = mbedtls_ecdh_gen_public( &ctx->grp, &ctx->d, &ctx->Q,
   d601c:	f100 0588 	add.w	r5, r0, #136	; 0x88
   d6020:	9200      	str	r2, [sp, #0]
   d6022:	f100 017c 	add.w	r1, r0, #124	; 0x7c
   d6026:	462a      	mov	r2, r5
   d6028:	f7ff ff40 	bl	d5eac <mbedtls_ecdh_gen_public>
   d602c:	b968      	cbnz	r0, d604a <mbedtls_ecdh_make_public+0x46>
                                         f_rng, p_rng ) ) != 0 )
        return( ret );
#endif /* MBEDTLS_ECP_RESTARTABLE */

    return mbedtls_ecp_tls_write_point( &ctx->grp, &ctx->Q, point_format, olen,
                                        buf, blen );
   d602e:	463b      	mov	r3, r7
   d6030:	4632      	mov	r2, r6
   d6032:	4629      	mov	r1, r5
   d6034:	4620      	mov	r0, r4
   d6036:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
   d603a:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
                                               restart_enabled ) );
        default:
            return MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
    }
#endif
}
   d603e:	b003      	add	sp, #12
   d6040:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
                                         f_rng, p_rng ) ) != 0 )
        return( ret );
#endif /* MBEDTLS_ECP_RESTARTABLE */

    return mbedtls_ecp_tls_write_point( &ctx->grp, &ctx->Q, point_format, olen,
                                        buf, blen );
   d6044:	f003 bba0 	b.w	d9788 <mbedtls_ecp_tls_write_point>
#if defined(MBEDTLS_ECP_RESTARTABLE)
    mbedtls_ecp_restart_ctx *rs_ctx = NULL;
#endif

    if( ctx->grp.pbits == 0 )
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   d6048:	4801      	ldr	r0, [pc, #4]	; (d6050 <mbedtls_ecdh_make_public+0x4c>)
                                               restart_enabled ) );
        default:
            return MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
    }
#endif
}
   d604a:	b003      	add	sp, #12
   d604c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d6050:	ffffb080 	.word	0xffffb080

000d6054 <mbedtls_ecdh_calc_secret>:
 */
int mbedtls_ecdh_calc_secret( mbedtls_ecdh_context *ctx, size_t *olen,
                              unsigned char *buf, size_t blen,
                              int (*f_rng)(void *, unsigned char *, size_t),
                              void *p_rng )
{
   d6054:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d6058:	4616      	mov	r6, r2
   d605a:	4698      	mov	r8, r3
   d605c:	460f      	mov	r7, r1
   d605e:	9b08      	ldr	r3, [sp, #32]
   d6060:	9a09      	ldr	r2, [sp, #36]	; 0x24
    int ret;
#if defined(MBEDTLS_ECP_RESTARTABLE)
    mbedtls_ecp_restart_ctx *rs_ctx = NULL;
#endif

    if( ctx == NULL || ctx->grp.pbits == 0 )
   d6062:	4604      	mov	r4, r0
   d6064:	b908      	cbnz	r0, d606a <mbedtls_ecdh_calc_secret+0x16>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   d6066:	4814      	ldr	r0, [pc, #80]	; (d60b8 <mbedtls_ecdh_calc_secret+0x64>)
   d6068:	e022      	b.n	d60b0 <mbedtls_ecdh_calc_secret+0x5c>
    int ret;
#if defined(MBEDTLS_ECP_RESTARTABLE)
    mbedtls_ecp_restart_ctx *rs_ctx = NULL;
#endif

    if( ctx == NULL || ctx->grp.pbits == 0 )
   d606a:	6d81      	ldr	r1, [r0, #88]	; 0x58
   d606c:	2900      	cmp	r1, #0
   d606e:	d0fa      	beq.n	d6066 <mbedtls_ecdh_calc_secret+0x12>
                                                 rs_ctx ) ) != 0 )
    {
        return( ret );
    }
#else
    if( ( ret = mbedtls_ecdh_compute_shared( &ctx->grp, &ctx->z, &ctx->Qp,
   d6070:	f100 05d0 	add.w	r5, r0, #208	; 0xd0
   d6074:	9201      	str	r2, [sp, #4]
   d6076:	9300      	str	r3, [sp, #0]
   d6078:	f100 02ac 	add.w	r2, r0, #172	; 0xac
   d607c:	f100 037c 	add.w	r3, r0, #124	; 0x7c
   d6080:	4629      	mov	r1, r5
   d6082:	f7ff ff2d 	bl	d5ee0 <mbedtls_ecdh_compute_shared>
   d6086:	b998      	cbnz	r0, d60b0 <mbedtls_ecdh_calc_secret+0x5c>
    {
        return( ret );
    }
#endif /* MBEDTLS_ECP_RESTARTABLE */

    if( mbedtls_mpi_size( &ctx->z ) > blen )
   d6088:	4628      	mov	r0, r5
   d608a:	f00a ff8f 	bl	e0fac <mbedtls_mpi_size>
   d608e:	4580      	cmp	r8, r0
   d6090:	d3e9      	bcc.n	d6066 <mbedtls_ecdh_calc_secret+0x12>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    *olen = ctx->grp.pbits / 8 + ( ( ctx->grp.pbits % 8 ) != 0 );
   d6092:	6da2      	ldr	r2, [r4, #88]	; 0x58
   d6094:	f012 0307 	ands.w	r3, r2, #7
   d6098:	bf18      	it	ne
   d609a:	2301      	movne	r3, #1
   d609c:	eb03 02d2 	add.w	r2, r3, r2, lsr #3
    return mbedtls_mpi_write_binary( &ctx->z, buf, *olen );
   d60a0:	4631      	mov	r1, r6
   d60a2:	4628      	mov	r0, r5
#endif /* MBEDTLS_ECP_RESTARTABLE */

    if( mbedtls_mpi_size( &ctx->z ) > blen )
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    *olen = ctx->grp.pbits / 8 + ( ( ctx->grp.pbits % 8 ) != 0 );
   d60a4:	603a      	str	r2, [r7, #0]
                                               restart_enabled ) );
        default:
            return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
    }
#endif
}
   d60a6:	b002      	add	sp, #8
   d60a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

    if( mbedtls_mpi_size( &ctx->z ) > blen )
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    *olen = ctx->grp.pbits / 8 + ( ( ctx->grp.pbits % 8 ) != 0 );
    return mbedtls_mpi_write_binary( &ctx->z, buf, *olen );
   d60ac:	f00a bfbb 	b.w	e1026 <mbedtls_mpi_write_binary>
                                               restart_enabled ) );
        default:
            return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
    }
#endif
}
   d60b0:	b002      	add	sp, #8
   d60b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d60b6:	bf00      	nop
   d60b8:	ffffb080 	.word	0xffffb080

000d60bc <mbedtls_cipher_info_from_type>:

    return( mbedtls_cipher_supported );
}

const mbedtls_cipher_info_t *mbedtls_cipher_info_from_type( const mbedtls_cipher_type_t cipher_type )
{
   d60bc:	4b05      	ldr	r3, [pc, #20]	; (d60d4 <mbedtls_cipher_info_from_type+0x18>)
    const mbedtls_cipher_definition_t *def;

    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
   d60be:	f853 2c04 	ldr.w	r2, [r3, #-4]
   d60c2:	b122      	cbz	r2, d60ce <mbedtls_cipher_info_from_type+0x12>
   d60c4:	3308      	adds	r3, #8
        if( def->type == cipher_type )
   d60c6:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   d60ca:	4281      	cmp	r1, r0
   d60cc:	d1f7      	bne.n	d60be <mbedtls_cipher_info_from_type+0x2>
            return( def->info );

    return( NULL );
}
   d60ce:	4610      	mov	r0, r2
   d60d0:	4770      	bx	lr
   d60d2:	bf00      	nop
   d60d4:	000eda80 	.word	0x000eda80

000d60d8 <mbedtls_cipher_info_from_values>:
}

const mbedtls_cipher_info_t *mbedtls_cipher_info_from_values( const mbedtls_cipher_id_t cipher_id,
                                              int key_bitlen,
                                              const mbedtls_cipher_mode_t mode )
{
   d60d8:	b530      	push	{r4, r5, lr}
    const mbedtls_cipher_definition_t *def;

    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
   d60da:	4c08      	ldr	r4, [pc, #32]	; (d60fc <mbedtls_cipher_info_from_values+0x24>)
   d60dc:	6863      	ldr	r3, [r4, #4]
   d60de:	b15b      	cbz	r3, d60f8 <mbedtls_cipher_info_from_values+0x20>
        if( def->info->base->cipher == cipher_id &&
   d60e0:	699d      	ldr	r5, [r3, #24]
   d60e2:	782d      	ldrb	r5, [r5, #0]
   d60e4:	4285      	cmp	r5, r0
   d60e6:	d105      	bne.n	d60f4 <mbedtls_cipher_info_from_values+0x1c>
   d60e8:	685d      	ldr	r5, [r3, #4]
   d60ea:	428d      	cmp	r5, r1
   d60ec:	d102      	bne.n	d60f4 <mbedtls_cipher_info_from_values+0x1c>
            def->info->key_bitlen == (unsigned) key_bitlen &&
   d60ee:	785d      	ldrb	r5, [r3, #1]
   d60f0:	4295      	cmp	r5, r2
   d60f2:	d001      	beq.n	d60f8 <mbedtls_cipher_info_from_values+0x20>
                                              int key_bitlen,
                                              const mbedtls_cipher_mode_t mode )
{
    const mbedtls_cipher_definition_t *def;

    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
   d60f4:	3408      	adds	r4, #8
   d60f6:	e7f1      	b.n	d60dc <mbedtls_cipher_info_from_values+0x4>
            def->info->key_bitlen == (unsigned) key_bitlen &&
            def->info->mode == mode )
            return( def->info );

    return( NULL );
}
   d60f8:	4618      	mov	r0, r3
   d60fa:	bd30      	pop	{r4, r5, pc}
   d60fc:	000eda78 	.word	0x000eda78

000d6100 <mbedtls_cipher_init>:

void mbedtls_cipher_init( mbedtls_cipher_context_t *ctx )
{
    CIPHER_VALIDATE( ctx != NULL );
    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
   d6100:	2238      	movs	r2, #56	; 0x38
   d6102:	2100      	movs	r1, #0
   d6104:	f013 bcfd 	b.w	e9b02 <memset>

000d6108 <mbedtls_cipher_free>:
}

void mbedtls_cipher_free( mbedtls_cipher_context_t *ctx )
{
   d6108:	b510      	push	{r4, lr}
    if( ctx == NULL )
   d610a:	4604      	mov	r4, r0
   d610c:	b158      	cbz	r0, d6126 <mbedtls_cipher_free+0x1e>
                                 sizeof( mbedtls_cmac_context_t ) );
       mbedtls_free( ctx->cmac_ctx );
    }
#endif

    if( ctx->cipher_ctx )
   d610e:	6b40      	ldr	r0, [r0, #52]	; 0x34
   d6110:	b118      	cbz	r0, d611a <mbedtls_cipher_free+0x12>
        ctx->cipher_info->base->ctx_free_func( ctx->cipher_ctx );
   d6112:	6823      	ldr	r3, [r4, #0]
   d6114:	699b      	ldr	r3, [r3, #24]
   d6116:	695b      	ldr	r3, [r3, #20]
   d6118:	4798      	blx	r3

    mbedtls_platform_zeroize( ctx, sizeof(mbedtls_cipher_context_t) );
   d611a:	4620      	mov	r0, r4
   d611c:	2138      	movs	r1, #56	; 0x38
}
   d611e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif

    if( ctx->cipher_ctx )
        ctx->cipher_info->base->ctx_free_func( ctx->cipher_ctx );

    mbedtls_platform_zeroize( ctx, sizeof(mbedtls_cipher_context_t) );
   d6122:	f005 b86b 	b.w	db1fc <mbedtls_platform_zeroize>
   d6126:	bd10      	pop	{r4, pc}

000d6128 <mbedtls_cipher_setup>:
}

int mbedtls_cipher_setup( mbedtls_cipher_context_t *ctx, const mbedtls_cipher_info_t *cipher_info )
{
   d6128:	b538      	push	{r3, r4, r5, lr}
   d612a:	4605      	mov	r5, r0
    CIPHER_VALIDATE_RET( ctx != NULL );
    if( cipher_info == NULL )
   d612c:	460c      	mov	r4, r1
   d612e:	b159      	cbz	r1, d6148 <mbedtls_cipher_setup+0x20>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
   d6130:	2238      	movs	r2, #56	; 0x38
   d6132:	2100      	movs	r1, #0
   d6134:	f013 fce5 	bl	e9b02 <memset>

    if( NULL == ( ctx->cipher_ctx = cipher_info->base->ctx_alloc_func() ) )
   d6138:	69a3      	ldr	r3, [r4, #24]
   d613a:	691b      	ldr	r3, [r3, #16]
   d613c:	4798      	blx	r3
   d613e:	6368      	str	r0, [r5, #52]	; 0x34
   d6140:	b120      	cbz	r0, d614c <mbedtls_cipher_setup+0x24>
        return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );

    ctx->cipher_info = cipher_info;
   d6142:	602c      	str	r4, [r5, #0]
#else
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_NONE );
#endif
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

    return( 0 );
   d6144:	2000      	movs	r0, #0
   d6146:	bd38      	pop	{r3, r4, r5, pc}

int mbedtls_cipher_setup( mbedtls_cipher_context_t *ctx, const mbedtls_cipher_info_t *cipher_info )
{
    CIPHER_VALIDATE_RET( ctx != NULL );
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
   d6148:	4801      	ldr	r0, [pc, #4]	; (d6150 <mbedtls_cipher_setup+0x28>)
   d614a:	bd38      	pop	{r3, r4, r5, pc}

    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );

    if( NULL == ( ctx->cipher_ctx = cipher_info->base->ctx_alloc_func() ) )
        return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );
   d614c:	4801      	ldr	r0, [pc, #4]	; (d6154 <mbedtls_cipher_setup+0x2c>)
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_NONE );
#endif
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

    return( 0 );
}
   d614e:	bd38      	pop	{r3, r4, r5, pc}
   d6150:	ffff9f00 	.word	0xffff9f00
   d6154:	ffff9e80 	.word	0xffff9e80

000d6158 <mbedtls_cipher_setkey>:

int mbedtls_cipher_setkey( mbedtls_cipher_context_t *ctx,
                           const unsigned char *key,
                           int key_bitlen,
                           const mbedtls_operation_t operation )
{
   d6158:	b430      	push	{r4, r5}
    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( key != NULL );
    CIPHER_VALIDATE_RET( operation == MBEDTLS_ENCRYPT ||
                         operation == MBEDTLS_DECRYPT );
    if( ctx->cipher_info == NULL )
   d615a:	6804      	ldr	r4, [r0, #0]
   d615c:	b1b4      	cbz	r4, d618c <mbedtls_cipher_setkey+0x34>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_KEY_LEN ) == 0 &&
   d615e:	6925      	ldr	r5, [r4, #16]
   d6160:	07ad      	lsls	r5, r5, #30
   d6162:	d402      	bmi.n	d616a <mbedtls_cipher_setkey+0x12>
   d6164:	6865      	ldr	r5, [r4, #4]
   d6166:	4295      	cmp	r5, r2
   d6168:	d110      	bne.n	d618c <mbedtls_cipher_setkey+0x34>
    ctx->operation = operation;

    /*
     * For OFB, CFB and CTR mode always use the encryption key schedule
     */
    if( MBEDTLS_ENCRYPT == operation ||
   d616a:	2b01      	cmp	r3, #1
        (int) ctx->cipher_info->key_bitlen != key_bitlen )
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

    ctx->key_bitlen = key_bitlen;
   d616c:	6042      	str	r2, [r0, #4]
    ctx->operation = operation;
   d616e:	7203      	strb	r3, [r0, #8]

    /*
     * For OFB, CFB and CTR mode always use the encryption key schedule
     */
    if( MBEDTLS_ENCRYPT == operation ||
   d6170:	d003      	beq.n	d617a <mbedtls_cipher_setkey+0x22>
   d6172:	7865      	ldrb	r5, [r4, #1]
   d6174:	3d03      	subs	r5, #3
   d6176:	2d02      	cmp	r5, #2
   d6178:	d802      	bhi.n	d6180 <mbedtls_cipher_setkey+0x28>
        MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
        MBEDTLS_MODE_OFB == ctx->cipher_info->mode ||
        MBEDTLS_MODE_CTR == ctx->cipher_info->mode )
    {
        return( ctx->cipher_info->base->setkey_enc_func( ctx->cipher_ctx, key,
   d617a:	69a3      	ldr	r3, [r4, #24]
                                                         ctx->key_bitlen ) );
   d617c:	689b      	ldr	r3, [r3, #8]
   d617e:	e002      	b.n	d6186 <mbedtls_cipher_setkey+0x2e>
    }

    if( MBEDTLS_DECRYPT == operation )
   d6180:	b923      	cbnz	r3, d618c <mbedtls_cipher_setkey+0x34>
        return( ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
   d6182:	69a3      	ldr	r3, [r4, #24]
                                                         ctx->key_bitlen ) );
   d6184:	68db      	ldr	r3, [r3, #12]
   d6186:	6b40      	ldr	r0, [r0, #52]	; 0x34

    return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
}
   d6188:	bc30      	pop	{r4, r5}
                                                         ctx->key_bitlen ) );
    }

    if( MBEDTLS_DECRYPT == operation )
        return( ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
                                                         ctx->key_bitlen ) );
   d618a:	4718      	bx	r3

    return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
}
   d618c:	4801      	ldr	r0, [pc, #4]	; (d6194 <mbedtls_cipher_setkey+0x3c>)
   d618e:	bc30      	pop	{r4, r5}
   d6190:	4770      	bx	lr
   d6192:	bf00      	nop
   d6194:	ffff9f00 	.word	0xffff9f00

000d6198 <mbedtls_cipher_set_iv>:

int mbedtls_cipher_set_iv( mbedtls_cipher_context_t *ctx,
                           const unsigned char *iv,
                           size_t iv_len )
{
   d6198:	b538      	push	{r3, r4, r5, lr}
    size_t actual_iv_size;

    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( iv_len == 0 || iv != NULL );
    if( ctx->cipher_info == NULL )
   d619a:	6803      	ldr	r3, [r0, #0]
}

int mbedtls_cipher_set_iv( mbedtls_cipher_context_t *ctx,
                           const unsigned char *iv,
                           size_t iv_len )
{
   d619c:	4605      	mov	r5, r0
    size_t actual_iv_size;

    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( iv_len == 0 || iv != NULL );
    if( ctx->cipher_info == NULL )
   d619e:	b1a3      	cbz	r3, d61ca <mbedtls_cipher_set_iv+0x32>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    /* avoid buffer overflow in ctx->iv */
    if( iv_len > MBEDTLS_MAX_IV_LENGTH )
   d61a0:	2a10      	cmp	r2, #16
   d61a2:	d810      	bhi.n	d61c6 <mbedtls_cipher_set_iv+0x2e>
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );

    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_IV_LEN ) != 0 )
   d61a4:	6918      	ldr	r0, [r3, #16]
   d61a6:	07c0      	lsls	r0, r0, #31
   d61a8:	d403      	bmi.n	d61b2 <mbedtls_cipher_set_iv+0x1a>
        actual_iv_size = iv_len;
    else
    {
        actual_iv_size = ctx->cipher_info->iv_size;
   d61aa:	68dc      	ldr	r4, [r3, #12]

        /* avoid reading past the end of input buffer */
        if( actual_iv_size > iv_len )
   d61ac:	42a2      	cmp	r2, r4
   d61ae:	d201      	bcs.n	d61b4 <mbedtls_cipher_set_iv+0x1c>
   d61b0:	e00b      	b.n	d61ca <mbedtls_cipher_set_iv+0x32>
   d61b2:	4614      	mov	r4, r2
            return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
        }
    }
#endif

    if ( actual_iv_size != 0 )
   d61b4:	b12c      	cbz	r4, d61c2 <mbedtls_cipher_set_iv+0x2a>
    {
        memcpy( ctx->iv, iv, actual_iv_size );
   d61b6:	4622      	mov	r2, r4
   d61b8:	f105 0020 	add.w	r0, r5, #32
   d61bc:	f013 fc7b 	bl	e9ab6 <memcpy>
        ctx->iv_size = actual_iv_size;
   d61c0:	632c      	str	r4, [r5, #48]	; 0x30
    }

    return( 0 );
   d61c2:	2000      	movs	r0, #0
   d61c4:	bd38      	pop	{r3, r4, r5, pc}
    if( ctx->cipher_info == NULL )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    /* avoid buffer overflow in ctx->iv */
    if( iv_len > MBEDTLS_MAX_IV_LENGTH )
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
   d61c6:	4802      	ldr	r0, [pc, #8]	; (d61d0 <mbedtls_cipher_set_iv+0x38>)
   d61c8:	bd38      	pop	{r3, r4, r5, pc}
    size_t actual_iv_size;

    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( iv_len == 0 || iv != NULL );
    if( ctx->cipher_info == NULL )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
   d61ca:	4802      	ldr	r0, [pc, #8]	; (d61d4 <mbedtls_cipher_set_iv+0x3c>)
   d61cc:	bd38      	pop	{r3, r4, r5, pc}
   d61ce:	bf00      	nop
   d61d0:	ffff9f80 	.word	0xffff9f80
   d61d4:	ffff9f00 	.word	0xffff9f00

000d61d8 <mbedtls_cipher_reset>:
}

int mbedtls_cipher_reset( mbedtls_cipher_context_t *ctx )
{
    CIPHER_VALIDATE_RET( ctx != NULL );
    if( ctx->cipher_info == NULL )
   d61d8:	6803      	ldr	r3, [r0, #0]
   d61da:	b11b      	cbz	r3, d61e4 <mbedtls_cipher_reset+0xc>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    ctx->unprocessed_len = 0;
   d61dc:	2300      	movs	r3, #0
   d61de:	61c3      	str	r3, [r0, #28]

    return( 0 );
   d61e0:	4618      	mov	r0, r3
   d61e2:	4770      	bx	lr

int mbedtls_cipher_reset( mbedtls_cipher_context_t *ctx )
{
    CIPHER_VALIDATE_RET( ctx != NULL );
    if( ctx->cipher_info == NULL )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
   d61e4:	4800      	ldr	r0, [pc, #0]	; (d61e8 <mbedtls_cipher_reset+0x10>)

    ctx->unprocessed_len = 0;

    return( 0 );
}
   d61e6:	4770      	bx	lr
   d61e8:	ffff9f00 	.word	0xffff9f00

000d61ec <mbedtls_cipher_update>:
}
#endif /* MBEDTLS_GCM_C || MBEDTLS_CHACHAPOLY_C */

int mbedtls_cipher_update( mbedtls_cipher_context_t *ctx, const unsigned char *input,
                   size_t ilen, unsigned char *output, size_t *olen )
{
   d61ec:	b470      	push	{r4, r5, r6}
   d61ee:	4614      	mov	r4, r2

    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( ilen == 0 || input != NULL );
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    if( ctx->cipher_info == NULL )
   d61f0:	6802      	ldr	r2, [r0, #0]
}
#endif /* MBEDTLS_GCM_C || MBEDTLS_CHACHAPOLY_C */

int mbedtls_cipher_update( mbedtls_cipher_context_t *ctx, const unsigned char *input,
                   size_t ilen, unsigned char *output, size_t *olen )
{
   d61f2:	9e03      	ldr	r6, [sp, #12]

    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( ilen == 0 || input != NULL );
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    if( ctx->cipher_info == NULL )
   d61f4:	b90a      	cbnz	r2, d61fa <mbedtls_cipher_update+0xe>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
   d61f6:	481b      	ldr	r0, [pc, #108]	; (d6264 <mbedtls_cipher_update+0x78>)
   d61f8:	e031      	b.n	d625e <mbedtls_cipher_update+0x72>

    *olen = 0;
   d61fa:	2200      	movs	r2, #0
   d61fc:	6032      	str	r2, [r6, #0]
   d61fe:	6805      	ldr	r5, [r0, #0]
 */
static inline unsigned int mbedtls_cipher_get_block_size(
    const mbedtls_cipher_context_t *ctx )
{
    MBEDTLS_INTERNAL_VALIDATE_RET( ctx != NULL, 0 );
    if( ctx->cipher_info == NULL )
   d6200:	b10d      	cbz	r5, d6206 <mbedtls_cipher_update+0x1a>
        return 0;

    return ctx->cipher_info->block_size;
   d6202:	696a      	ldr	r2, [r5, #20]
   d6204:	e000      	b.n	d6208 <mbedtls_cipher_update+0x1c>
static inline unsigned int mbedtls_cipher_get_block_size(
    const mbedtls_cipher_context_t *ctx )
{
    MBEDTLS_INTERNAL_VALIDATE_RET( ctx != NULL, 0 );
    if( ctx->cipher_info == NULL )
        return 0;
   d6206:	462a      	mov	r2, r5
    block_size = mbedtls_cipher_get_block_size( ctx );

    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
   d6208:	786d      	ldrb	r5, [r5, #1]
   d620a:	2d01      	cmp	r5, #1
   d620c:	d10c      	bne.n	d6228 <mbedtls_cipher_update+0x3c>
    {
        if( ilen != block_size )
   d620e:	4294      	cmp	r4, r2
   d6210:	d120      	bne.n	d6254 <mbedtls_cipher_update+0x68>
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );

        *olen = ilen;
   d6212:	6034      	str	r4, [r6, #0]

        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
   d6214:	6802      	ldr	r2, [r0, #0]
   d6216:	6992      	ldr	r2, [r2, #24]
   d6218:	6854      	ldr	r4, [r2, #4]
   d621a:	460a      	mov	r2, r1
   d621c:	46a4      	mov	ip, r4
   d621e:	f990 1008 	ldrsb.w	r1, [r0, #8]
   d6222:	6b40      	ldr	r0, [r0, #52]	; 0x34
        return( 0 );
    }
#endif /* MBEDTLS_CIPHER_MODE_STREAM */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
   d6224:	bc70      	pop	{r4, r5, r6}
        if( ilen != block_size )
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );

        *olen = ilen;

        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
   d6226:	4760      	bx	ip

        return( 0 );
    }

#if defined(MBEDTLS_GCM_C)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_GCM )
   d6228:	2d06      	cmp	r5, #6
   d622a:	d106      	bne.n	d623a <mbedtls_cipher_update+0x4e>
    {
        *olen = ilen;
   d622c:	6034      	str	r4, [r6, #0]
        return( mbedtls_gcm_update( (mbedtls_gcm_context *) ctx->cipher_ctx, ilen, input,
                                    output ) );
   d622e:	460a      	mov	r2, r1
   d6230:	6b40      	ldr	r0, [r0, #52]	; 0x34
   d6232:	4621      	mov	r1, r4
        return( 0 );
    }
#endif /* MBEDTLS_CIPHER_MODE_STREAM */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
   d6234:	bc70      	pop	{r4, r5, r6}
#if defined(MBEDTLS_GCM_C)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_GCM )
    {
        *olen = ilen;
        return( mbedtls_gcm_update( (mbedtls_gcm_context *) ctx->cipher_ctx, ilen, input,
                                    output ) );
   d6236:	f006 bca2 	b.w	dcb7e <mbedtls_gcm_update>
        return( mbedtls_chachapoly_update( (mbedtls_chachapoly_context*) ctx->cipher_ctx,
                                           ilen, input, output ) );
    }
#endif

    if ( 0 == block_size )
   d623a:	b16a      	cbz	r2, d6258 <mbedtls_cipher_update+0x6c>
    {
        return( MBEDTLS_ERR_CIPHER_INVALID_CONTEXT );
    }

    if( input == output &&
   d623c:	4299      	cmp	r1, r3
   d623e:	d10d      	bne.n	d625c <mbedtls_cipher_update+0x70>
   d6240:	69c3      	ldr	r3, [r0, #28]
   d6242:	2b00      	cmp	r3, #0
   d6244:	d1d7      	bne.n	d61f6 <mbedtls_cipher_update+0xa>
       ( ctx->unprocessed_len != 0 || ilen % block_size ) )
   d6246:	fbb4 f1f2 	udiv	r1, r4, r2
   d624a:	fb02 4411 	mls	r4, r2, r1, r4
   d624e:	2c00      	cmp	r4, #0
   d6250:	d1d1      	bne.n	d61f6 <mbedtls_cipher_update+0xa>
   d6252:	e003      	b.n	d625c <mbedtls_cipher_update+0x70>
    block_size = mbedtls_cipher_get_block_size( ctx );

    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
    {
        if( ilen != block_size )
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
   d6254:	4804      	ldr	r0, [pc, #16]	; (d6268 <mbedtls_cipher_update+0x7c>)
   d6256:	e002      	b.n	d625e <mbedtls_cipher_update+0x72>
    }
#endif

    if ( 0 == block_size )
    {
        return( MBEDTLS_ERR_CIPHER_INVALID_CONTEXT );
   d6258:	4804      	ldr	r0, [pc, #16]	; (d626c <mbedtls_cipher_update+0x80>)
   d625a:	e000      	b.n	d625e <mbedtls_cipher_update+0x72>

        return( 0 );
    }
#endif /* MBEDTLS_CIPHER_MODE_STREAM */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
   d625c:	4804      	ldr	r0, [pc, #16]	; (d6270 <mbedtls_cipher_update+0x84>)
}
   d625e:	bc70      	pop	{r4, r5, r6}
   d6260:	4770      	bx	lr
   d6262:	bf00      	nop
   d6264:	ffff9f00 	.word	0xffff9f00
   d6268:	ffff9d80 	.word	0xffff9d80
   d626c:	ffff9c80 	.word	0xffff9c80
   d6270:	ffff9f80 	.word	0xffff9f80

000d6274 <mbedtls_cipher_finish>:
}
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

int mbedtls_cipher_finish( mbedtls_cipher_context_t *ctx,
                   unsigned char *output, size_t *olen )
{
   d6274:	b510      	push	{r4, lr}
    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    if( ctx->cipher_info == NULL )
   d6276:	6801      	ldr	r1, [r0, #0]
}
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

int mbedtls_cipher_finish( mbedtls_cipher_context_t *ctx,
                   unsigned char *output, size_t *olen )
{
   d6278:	4603      	mov	r3, r0
    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    if( ctx->cipher_info == NULL )
   d627a:	b1a9      	cbz	r1, d62a8 <mbedtls_cipher_finish+0x34>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    *olen = 0;
   d627c:	2000      	movs	r0, #0
   d627e:	6010      	str	r0, [r2, #0]

    if( MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
   d6280:	6819      	ldr	r1, [r3, #0]
   d6282:	784a      	ldrb	r2, [r1, #1]
   d6284:	1ed4      	subs	r4, r2, #3
   d6286:	2c04      	cmp	r4, #4
   d6288:	d911      	bls.n	d62ae <mbedtls_cipher_finish+0x3a>
        MBEDTLS_MODE_OFB == ctx->cipher_info->mode ||
        MBEDTLS_MODE_CTR == ctx->cipher_info->mode ||
        MBEDTLS_MODE_GCM == ctx->cipher_info->mode ||
   d628a:	2a09      	cmp	r2, #9
   d628c:	d00f      	beq.n	d62ae <mbedtls_cipher_finish+0x3a>
        MBEDTLS_MODE_STREAM == ctx->cipher_info->mode )
    {
        return( 0 );
    }

    if ( ( MBEDTLS_CIPHER_CHACHA20          == ctx->cipher_info->type ) ||
   d628e:	7809      	ldrb	r1, [r1, #0]
   d6290:	3948      	subs	r1, #72	; 0x48
   d6292:	2901      	cmp	r1, #1
   d6294:	d90b      	bls.n	d62ae <mbedtls_cipher_finish+0x3a>
         ( MBEDTLS_CIPHER_CHACHA20_POLY1305 == ctx->cipher_info->type ) )
    {
        return( 0 );
    }

    if( MBEDTLS_MODE_ECB == ctx->cipher_info->mode )
   d6296:	2a01      	cmp	r2, #1
   d6298:	d108      	bne.n	d62ac <mbedtls_cipher_finish+0x38>
    {
        if( ctx->unprocessed_len != 0 )
   d629a:	69db      	ldr	r3, [r3, #28]
   d629c:	4283      	cmp	r3, r0
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
   d629e:	f5a0 40c5 	sub.w	r0, r0, #25216	; 0x6280
   d62a2:	bf08      	it	eq
   d62a4:	2000      	moveq	r0, #0
   d62a6:	bd10      	pop	{r4, pc}
{
    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    if( ctx->cipher_info == NULL )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
   d62a8:	4801      	ldr	r0, [pc, #4]	; (d62b0 <mbedtls_cipher_finish+0x3c>)
   d62aa:	bd10      	pop	{r4, pc}
    }
#else
    ((void) output);
#endif /* MBEDTLS_CIPHER_MODE_CBC */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
   d62ac:	4801      	ldr	r0, [pc, #4]	; (d62b4 <mbedtls_cipher_finish+0x40>)
}
   d62ae:	bd10      	pop	{r4, pc}
   d62b0:	ffff9f00 	.word	0xffff9f00
   d62b4:	ffff9f80 	.word	0xffff9f80

000d62b8 <mbedtls_cipher_crypt>:
 */
int mbedtls_cipher_crypt( mbedtls_cipher_context_t *ctx,
                  const unsigned char *iv, size_t iv_len,
                  const unsigned char *input, size_t ilen,
                  unsigned char *output, size_t *olen )
{
   d62b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d62ba:	b085      	sub	sp, #20
   d62bc:	4605      	mov	r5, r0
   d62be:	461f      	mov	r7, r3
   d62c0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   d62c2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    CIPHER_VALIDATE_RET( iv_len == 0 || iv != NULL );
    CIPHER_VALIDATE_RET( ilen == 0 || input != NULL );
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );

    if( ( ret = mbedtls_cipher_set_iv( ctx, iv, iv_len ) ) != 0 )
   d62c4:	f7ff ff68 	bl	d6198 <mbedtls_cipher_set_iv>
   d62c8:	b9b8      	cbnz	r0, d62fa <mbedtls_cipher_crypt+0x42>
}

int mbedtls_cipher_reset( mbedtls_cipher_context_t *ctx )
{
    CIPHER_VALIDATE_RET( ctx != NULL );
    if( ctx->cipher_info == NULL )
   d62ca:	682b      	ldr	r3, [r5, #0]
   d62cc:	b1a3      	cbz	r3, d62f8 <mbedtls_cipher_crypt+0x40>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    ctx->unprocessed_len = 0;
   d62ce:	61e8      	str	r0, [r5, #28]
        return( ret );

    if( ( ret = mbedtls_cipher_reset( ctx ) ) != 0 )
        return( ret );

    if( ( ret = mbedtls_cipher_update( ctx, input, ilen, output, olen ) ) != 0 )
   d62d0:	9400      	str	r4, [sp, #0]
   d62d2:	4633      	mov	r3, r6
   d62d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d62d6:	4639      	mov	r1, r7
   d62d8:	4628      	mov	r0, r5
   d62da:	f7ff ff87 	bl	d61ec <mbedtls_cipher_update>
   d62de:	b960      	cbnz	r0, d62fa <mbedtls_cipher_crypt+0x42>
        return( ret );

    if( ( ret = mbedtls_cipher_finish( ctx, output + *olen, &finish_olen ) ) != 0 )
   d62e0:	6821      	ldr	r1, [r4, #0]
   d62e2:	aa03      	add	r2, sp, #12
   d62e4:	4431      	add	r1, r6
   d62e6:	4628      	mov	r0, r5
   d62e8:	f7ff ffc4 	bl	d6274 <mbedtls_cipher_finish>
   d62ec:	b928      	cbnz	r0, d62fa <mbedtls_cipher_crypt+0x42>
        return( ret );

    *olen += finish_olen;
   d62ee:	6822      	ldr	r2, [r4, #0]
   d62f0:	9b03      	ldr	r3, [sp, #12]
   d62f2:	4413      	add	r3, r2
   d62f4:	6023      	str	r3, [r4, #0]

    return( 0 );
   d62f6:	e000      	b.n	d62fa <mbedtls_cipher_crypt+0x42>

int mbedtls_cipher_reset( mbedtls_cipher_context_t *ctx )
{
    CIPHER_VALIDATE_RET( ctx != NULL );
    if( ctx->cipher_info == NULL )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
   d62f8:	4801      	ldr	r0, [pc, #4]	; (d6300 <mbedtls_cipher_crypt+0x48>)
        return( ret );

    *olen += finish_olen;

    return( 0 );
}
   d62fa:	b005      	add	sp, #20
   d62fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d62fe:	bf00      	nop
   d6300:	ffff9f00 	.word	0xffff9f00

000d6304 <mbedtls_cipher_auth_encrypt>:
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         unsigned char *tag, size_t tag_len )
{
   d6304:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    CIPHER_VALIDATE_RET( tag_len == 0 || tag != NULL );

#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
   d6308:	6807      	ldr	r7, [r0, #0]
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         unsigned char *tag, size_t tag_len )
{
   d630a:	9d07      	ldr	r5, [sp, #28]
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    CIPHER_VALIDATE_RET( tag_len == 0 || tag != NULL );

#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
   d630c:	787f      	ldrb	r7, [r7, #1]
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         unsigned char *tag, size_t tag_len )
{
   d630e:	9e08      	ldr	r6, [sp, #32]
   d6310:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
   d6314:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   d6318:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d631c:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    CIPHER_VALIDATE_RET( tag_len == 0 || tag != NULL );

#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
   d6320:	2f06      	cmp	r7, #6
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         unsigned char *tag, size_t tag_len )
{
   d6322:	4614      	mov	r4, r2
   d6324:	9a09      	ldr	r2, [sp, #36]	; 0x24
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    CIPHER_VALIDATE_RET( tag_len == 0 || tag != NULL );

#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
   d6326:	d112      	bne.n	d634e <mbedtls_cipher_auth_encrypt+0x4a>
    {
        *olen = ilen;
   d6328:	f8c9 2000 	str.w	r2, [r9]
        return( mbedtls_gcm_crypt_and_tag( (mbedtls_gcm_context *)ctx->cipher_ctx, MBEDTLS_GCM_ENCRYPT, ilen,
                                   iv, iv_len, ad, ad_len, input, output,
                                   tag_len, tag ) );
   d632c:	9308      	str	r3, [sp, #32]
   d632e:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
   d6332:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
   d6336:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
   d633a:	960a      	str	r6, [sp, #40]	; 0x28
   d633c:	9509      	str	r5, [sp, #36]	; 0x24
   d633e:	9407      	str	r4, [sp, #28]
   d6340:	460b      	mov	r3, r1
   d6342:	6b40      	ldr	r0, [r0, #52]	; 0x34
   d6344:	2101      	movs	r1, #1
                                ilen, iv, ad, ad_len, input, output, tag ) );
    }
#endif /* MBEDTLS_CHACHAPOLY_C */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
   d6346:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
    {
        *olen = ilen;
        return( mbedtls_gcm_crypt_and_tag( (mbedtls_gcm_context *)ctx->cipher_ctx, MBEDTLS_GCM_ENCRYPT, ilen,
                                   iv, iv_len, ad, ad_len, input, output,
                                   tag_len, tag ) );
   d634a:	f006 bd04 	b.w	dcd56 <mbedtls_gcm_crypt_and_tag>
                                ilen, iv, ad, ad_len, input, output, tag ) );
    }
#endif /* MBEDTLS_CHACHAPOLY_C */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
   d634e:	4801      	ldr	r0, [pc, #4]	; (d6354 <mbedtls_cipher_auth_encrypt+0x50>)
   d6350:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d6354:	ffff9f80 	.word	0xffff9f80

000d6358 <mbedtls_cipher_auth_decrypt>:
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         const unsigned char *tag, size_t tag_len )
{
   d6358:	b530      	push	{r4, r5, lr}
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    CIPHER_VALIDATE_RET( tag_len == 0 || tag != NULL );

#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
   d635a:	6805      	ldr	r5, [r0, #0]
   d635c:	786d      	ldrb	r5, [r5, #1]
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         const unsigned char *tag, size_t tag_len )
{
   d635e:	b087      	sub	sp, #28
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    CIPHER_VALIDATE_RET( tag_len == 0 || tag != NULL );

#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
   d6360:	2d06      	cmp	r5, #6
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         const unsigned char *tag, size_t tag_len )
{
   d6362:	460c      	mov	r4, r1
   d6364:	990c      	ldr	r1, [sp, #48]	; 0x30
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    CIPHER_VALIDATE_RET( tag_len == 0 || tag != NULL );

#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
   d6366:	d117      	bne.n	d6398 <mbedtls_cipher_auth_decrypt+0x40>
    {
        int ret;

        *olen = ilen;
   d6368:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   d636a:	6029      	str	r1, [r5, #0]
        ret = mbedtls_gcm_auth_decrypt( (mbedtls_gcm_context *)ctx->cipher_ctx, ilen,
   d636c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   d636e:	9505      	str	r5, [sp, #20]
   d6370:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   d6372:	9504      	str	r5, [sp, #16]
   d6374:	9d10      	ldr	r5, [sp, #64]	; 0x40
   d6376:	9503      	str	r5, [sp, #12]
   d6378:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   d637a:	9502      	str	r5, [sp, #8]
   d637c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d637e:	e88d 0028 	stmia.w	sp, {r3, r5}
   d6382:	4613      	mov	r3, r2
   d6384:	6b40      	ldr	r0, [r0, #52]	; 0x34
   d6386:	4622      	mov	r2, r4
   d6388:	f006 fd0a 	bl	dcda0 <mbedtls_gcm_auth_decrypt>
                                iv, iv_len, ad, ad_len,
                                tag, tag_len, input, output );

        if( ret == MBEDTLS_ERR_GCM_AUTH_FAILED )
            ret = MBEDTLS_ERR_CIPHER_AUTH_FAILED;
   d638c:	4b04      	ldr	r3, [pc, #16]	; (d63a0 <mbedtls_cipher_auth_decrypt+0x48>)
   d638e:	f110 0f12 	cmn.w	r0, #18
   d6392:	bf08      	it	eq
   d6394:	4618      	moveq	r0, r3
   d6396:	e000      	b.n	d639a <mbedtls_cipher_auth_decrypt+0x42>

        return( ret );
    }
#endif /* MBEDTLS_CHACHAPOLY_C */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
   d6398:	4802      	ldr	r0, [pc, #8]	; (d63a4 <mbedtls_cipher_auth_decrypt+0x4c>)
}
   d639a:	b007      	add	sp, #28
   d639c:	bd30      	pop	{r4, r5, pc}
   d639e:	bf00      	nop
   d63a0:	ffff9d00 	.word	0xffff9d00
   d63a4:	ffff9f80 	.word	0xffff9f80

000d63a8 <mbedtls_asn1_get_len>:
 * ASN.1 DER decoding routines
 */
int mbedtls_asn1_get_len( unsigned char **p,
                  const unsigned char *end,
                  size_t *len )
{
   d63a8:	b530      	push	{r4, r5, lr}
    if( ( end - *p ) < 1 )
   d63aa:	6803      	ldr	r3, [r0, #0]
   d63ac:	1acd      	subs	r5, r1, r3
   d63ae:	2d00      	cmp	r5, #0
   d63b0:	dc02      	bgt.n	d63b8 <mbedtls_asn1_get_len+0x10>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   d63b2:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   d63b6:	bd30      	pop	{r4, r5, pc}

    if( ( **p & 0x80 ) == 0 )
   d63b8:	781c      	ldrb	r4, [r3, #0]
   d63ba:	f014 0f80 	tst.w	r4, #128	; 0x80
   d63be:	d104      	bne.n	d63ca <mbedtls_asn1_get_len+0x22>
        *len = *(*p)++;
   d63c0:	1c5c      	adds	r4, r3, #1
   d63c2:	6004      	str	r4, [r0, #0]
   d63c4:	781b      	ldrb	r3, [r3, #0]
   d63c6:	6013      	str	r3, [r2, #0]
   d63c8:	e036      	b.n	d6438 <mbedtls_asn1_get_len+0x90>
    else
    {
        switch( **p & 0x7F )
   d63ca:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d63ce:	3c01      	subs	r4, #1
   d63d0:	2c03      	cmp	r4, #3
   d63d2:	d838      	bhi.n	d6446 <mbedtls_asn1_get_len+0x9e>
   d63d4:	e8df f004 	tbb	[pc, r4]
   d63d8:	20130902 	.word	0x20130902
        {
        case 1:
            if( ( end - *p ) < 2 )
   d63dc:	2d01      	cmp	r5, #1
   d63de:	d0e8      	beq.n	d63b2 <mbedtls_asn1_get_len+0xa>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

            *len = (*p)[1];
   d63e0:	785b      	ldrb	r3, [r3, #1]
   d63e2:	6013      	str	r3, [r2, #0]
            (*p) += 2;
   d63e4:	6803      	ldr	r3, [r0, #0]
   d63e6:	3302      	adds	r3, #2
   d63e8:	e025      	b.n	d6436 <mbedtls_asn1_get_len+0x8e>
            break;

        case 2:
            if( ( end - *p ) < 3 )
   d63ea:	2d02      	cmp	r5, #2
   d63ec:	dde1      	ble.n	d63b2 <mbedtls_asn1_get_len+0xa>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
   d63ee:	785c      	ldrb	r4, [r3, #1]
   d63f0:	789b      	ldrb	r3, [r3, #2]
   d63f2:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   d63f6:	6013      	str	r3, [r2, #0]
            (*p) += 3;
   d63f8:	6803      	ldr	r3, [r0, #0]
   d63fa:	3303      	adds	r3, #3
   d63fc:	e01b      	b.n	d6436 <mbedtls_asn1_get_len+0x8e>
            break;

        case 3:
            if( ( end - *p ) < 4 )
   d63fe:	2d03      	cmp	r5, #3
   d6400:	ddd7      	ble.n	d63b2 <mbedtls_asn1_get_len+0xa>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

            *len = ( (size_t)(*p)[1] << 16 ) |
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
   d6402:	789c      	ldrb	r4, [r3, #2]
   d6404:	785d      	ldrb	r5, [r3, #1]
   d6406:	78db      	ldrb	r3, [r3, #3]
   d6408:	0224      	lsls	r4, r4, #8
   d640a:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   d640e:	431c      	orrs	r4, r3
   d6410:	6014      	str	r4, [r2, #0]
            (*p) += 4;
   d6412:	6803      	ldr	r3, [r0, #0]
   d6414:	3304      	adds	r3, #4
   d6416:	e00e      	b.n	d6436 <mbedtls_asn1_get_len+0x8e>
            break;

        case 4:
            if( ( end - *p ) < 5 )
   d6418:	2d04      	cmp	r5, #4
   d641a:	ddca      	ble.n	d63b2 <mbedtls_asn1_get_len+0xa>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
                   ( (size_t)(*p)[3] << 8  ) |           (*p)[4];
   d641c:	789c      	ldrb	r4, [r3, #2]
   d641e:	785d      	ldrb	r5, [r3, #1]
   d6420:	0424      	lsls	r4, r4, #16
   d6422:	ea44 6505 	orr.w	r5, r4, r5, lsl #24
   d6426:	791c      	ldrb	r4, [r3, #4]
   d6428:	78db      	ldrb	r3, [r3, #3]
   d642a:	432c      	orrs	r4, r5
   d642c:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d6430:	6013      	str	r3, [r2, #0]
            (*p) += 5;
   d6432:	6803      	ldr	r3, [r0, #0]
   d6434:	3305      	adds	r3, #5
   d6436:	6003      	str	r3, [r0, #0]
        default:
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
        }
    }

    if( *len > (size_t) ( end - *p ) )
   d6438:	6803      	ldr	r3, [r0, #0]
   d643a:	1ac9      	subs	r1, r1, r3
   d643c:	6813      	ldr	r3, [r2, #0]
   d643e:	428b      	cmp	r3, r1
   d6440:	d8b7      	bhi.n	d63b2 <mbedtls_asn1_get_len+0xa>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    return( 0 );
   d6442:	2000      	movs	r0, #0
   d6444:	bd30      	pop	{r4, r5, pc}
                   ( (size_t)(*p)[3] << 8  ) |           (*p)[4];
            (*p) += 5;
            break;

        default:
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
   d6446:	f06f 0063 	mvn.w	r0, #99	; 0x63

    if( *len > (size_t) ( end - *p ) )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    return( 0 );
}
   d644a:	bd30      	pop	{r4, r5, pc}

000d644c <mbedtls_asn1_get_tag>:

int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
   d644c:	b470      	push	{r4, r5, r6}
    if( ( end - *p ) < 1 )
   d644e:	6804      	ldr	r4, [r0, #0]
   d6450:	1b0e      	subs	r6, r1, r4
   d6452:	2e00      	cmp	r6, #0
   d6454:	dd07      	ble.n	d6466 <mbedtls_asn1_get_tag+0x1a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != tag )
   d6456:	7826      	ldrb	r6, [r4, #0]
   d6458:	429e      	cmp	r6, r3
   d645a:	d107      	bne.n	d646c <mbedtls_asn1_get_tag+0x20>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
   d645c:	3401      	adds	r4, #1
   d645e:	6004      	str	r4, [r0, #0]

    return( mbedtls_asn1_get_len( p, end, len ) );
}
   d6460:	bc70      	pop	{r4, r5, r6}
    if( **p != tag )
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;

    return( mbedtls_asn1_get_len( p, end, len ) );
   d6462:	f7ff bfa1 	b.w	d63a8 <mbedtls_asn1_get_len>
int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   d6466:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   d646a:	e001      	b.n	d6470 <mbedtls_asn1_get_tag+0x24>

    if( **p != tag )
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
   d646c:	f06f 0061 	mvn.w	r0, #97	; 0x61

    (*p)++;

    return( mbedtls_asn1_get_len( p, end, len ) );
}
   d6470:	bc70      	pop	{r4, r5, r6}
   d6472:	4770      	bx	lr

000d6474 <mbedtls_asn1_get_bool>:

int mbedtls_asn1_get_bool( unsigned char **p,
                   const unsigned char *end,
                   int *val )
{
   d6474:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
   d6476:	2301      	movs	r3, #1
}

int mbedtls_asn1_get_bool( unsigned char **p,
                   const unsigned char *end,
                   int *val )
{
   d6478:	4615      	mov	r5, r2
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
   d647a:	aa01      	add	r2, sp, #4
}

int mbedtls_asn1_get_bool( unsigned char **p,
                   const unsigned char *end,
                   int *val )
{
   d647c:	4604      	mov	r4, r0
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
   d647e:	f7ff ffe5 	bl	d644c <mbedtls_asn1_get_tag>
   d6482:	b970      	cbnz	r0, d64a2 <mbedtls_asn1_get_bool+0x2e>
        return( ret );

    if( len != 1 )
   d6484:	9b01      	ldr	r3, [sp, #4]
   d6486:	2b01      	cmp	r3, #1
   d6488:	d109      	bne.n	d649e <mbedtls_asn1_get_bool+0x2a>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    *val = ( **p != 0 ) ? 1 : 0;
   d648a:	6823      	ldr	r3, [r4, #0]
   d648c:	781b      	ldrb	r3, [r3, #0]
   d648e:	3300      	adds	r3, #0
   d6490:	bf18      	it	ne
   d6492:	2301      	movne	r3, #1
   d6494:	602b      	str	r3, [r5, #0]
    (*p)++;
   d6496:	6823      	ldr	r3, [r4, #0]
   d6498:	3301      	adds	r3, #1
   d649a:	6023      	str	r3, [r4, #0]

    return( 0 );
   d649c:	e001      	b.n	d64a2 <mbedtls_asn1_get_bool+0x2e>

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
        return( ret );

    if( len != 1 )
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
   d649e:	f06f 0063 	mvn.w	r0, #99	; 0x63

    *val = ( **p != 0 ) ? 1 : 0;
    (*p)++;

    return( 0 );
}
   d64a2:	b003      	add	sp, #12
   d64a4:	bd30      	pop	{r4, r5, pc}

000d64a6 <mbedtls_asn1_get_int>:

int mbedtls_asn1_get_int( unsigned char **p,
                  const unsigned char *end,
                  int *val )
{
   d64a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
   d64a8:	2302      	movs	r3, #2
}

int mbedtls_asn1_get_int( unsigned char **p,
                  const unsigned char *end,
                  int *val )
{
   d64aa:	4615      	mov	r5, r2
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
   d64ac:	aa01      	add	r2, sp, #4
}

int mbedtls_asn1_get_int( unsigned char **p,
                  const unsigned char *end,
                  int *val )
{
   d64ae:	4604      	mov	r4, r0
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
   d64b0:	f7ff ffcc 	bl	d644c <mbedtls_asn1_get_tag>
   d64b4:	b9c8      	cbnz	r0, d64ea <mbedtls_asn1_get_int+0x44>
        return( ret );

    if( len == 0 || len > sizeof( int ) || ( **p & 0x80 ) != 0 )
   d64b6:	9b01      	ldr	r3, [sp, #4]
   d64b8:	3b01      	subs	r3, #1
   d64ba:	2b03      	cmp	r3, #3
   d64bc:	d813      	bhi.n	d64e6 <mbedtls_asn1_get_int+0x40>
   d64be:	6823      	ldr	r3, [r4, #0]
   d64c0:	f993 3000 	ldrsb.w	r3, [r3]
   d64c4:	2b00      	cmp	r3, #0
   d64c6:	db0e      	blt.n	d64e6 <mbedtls_asn1_get_int+0x40>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    *val = 0;
   d64c8:	6028      	str	r0, [r5, #0]

    while( len-- > 0 )
   d64ca:	9b01      	ldr	r3, [sp, #4]
   d64cc:	1e5a      	subs	r2, r3, #1
   d64ce:	9201      	str	r2, [sp, #4]
   d64d0:	b15b      	cbz	r3, d64ea <mbedtls_asn1_get_int+0x44>
    {
        *val = ( *val << 8 ) | **p;
   d64d2:	6823      	ldr	r3, [r4, #0]
   d64d4:	682a      	ldr	r2, [r5, #0]
   d64d6:	781b      	ldrb	r3, [r3, #0]
   d64d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d64dc:	602b      	str	r3, [r5, #0]
        (*p)++;
   d64de:	6823      	ldr	r3, [r4, #0]
   d64e0:	3301      	adds	r3, #1
   d64e2:	6023      	str	r3, [r4, #0]
    if( len == 0 || len > sizeof( int ) || ( **p & 0x80 ) != 0 )
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    *val = 0;

    while( len-- > 0 )
   d64e4:	e7f1      	b.n	d64ca <mbedtls_asn1_get_int+0x24>

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
        return( ret );

    if( len == 0 || len > sizeof( int ) || ( **p & 0x80 ) != 0 )
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
   d64e6:	f06f 0063 	mvn.w	r0, #99	; 0x63
        *val = ( *val << 8 ) | **p;
        (*p)++;
    }

    return( 0 );
}
   d64ea:	b003      	add	sp, #12
   d64ec:	bd30      	pop	{r4, r5, pc}

000d64ee <mbedtls_asn1_get_mpi>:

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
   d64ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
   d64f0:	2302      	movs	r3, #2

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
   d64f2:	4615      	mov	r5, r2
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
   d64f4:	aa01      	add	r2, sp, #4

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
   d64f6:	4604      	mov	r4, r0
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
   d64f8:	f7ff ffa8 	bl	d644c <mbedtls_asn1_get_tag>
   d64fc:	b940      	cbnz	r0, d6510 <mbedtls_asn1_get_mpi+0x22>
        return( ret );

    ret = mbedtls_mpi_read_binary( X, *p, len );
   d64fe:	9a01      	ldr	r2, [sp, #4]
   d6500:	6821      	ldr	r1, [r4, #0]
   d6502:	4628      	mov	r0, r5
   d6504:	f00a fd58 	bl	e0fb8 <mbedtls_mpi_read_binary>

    *p += len;
   d6508:	6822      	ldr	r2, [r4, #0]
   d650a:	9b01      	ldr	r3, [sp, #4]
   d650c:	4413      	add	r3, r2
   d650e:	6023      	str	r3, [r4, #0]

    return( ret );
}
   d6510:	b003      	add	sp, #12
   d6512:	bd30      	pop	{r4, r5, pc}

000d6514 <mbedtls_asn1_get_bitstring>:
#endif /* MBEDTLS_BIGNUM_C */

int mbedtls_asn1_get_bitstring( unsigned char **p, const unsigned char *end,
                        mbedtls_asn1_bitstring *bs)
{
   d6514:	b570      	push	{r4, r5, r6, lr}
    int ret;

    /* Certificate type is a single byte bitstring */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &bs->len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
   d6516:	2303      	movs	r3, #3
}
#endif /* MBEDTLS_BIGNUM_C */

int mbedtls_asn1_get_bitstring( unsigned char **p, const unsigned char *end,
                        mbedtls_asn1_bitstring *bs)
{
   d6518:	4604      	mov	r4, r0
   d651a:	460e      	mov	r6, r1
   d651c:	4615      	mov	r5, r2
    int ret;

    /* Certificate type is a single byte bitstring */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &bs->len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
   d651e:	f7ff ff95 	bl	d644c <mbedtls_asn1_get_tag>
   d6522:	b9d8      	cbnz	r0, d655c <mbedtls_asn1_get_bitstring+0x48>
        return( ret );

    /* Check length, subtract one for actual bit string length */
    if( bs->len < 1 )
   d6524:	6813      	ldr	r3, [r2, #0]
   d6526:	b1a3      	cbz	r3, d6552 <mbedtls_asn1_get_bitstring+0x3e>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    bs->len -= 1;
   d6528:	3b01      	subs	r3, #1
   d652a:	6013      	str	r3, [r2, #0]

    /* Get number of unused bits, ensure unused bits <= 7 */
    bs->unused_bits = **p;
   d652c:	6823      	ldr	r3, [r4, #0]
   d652e:	781b      	ldrb	r3, [r3, #0]
   d6530:	7113      	strb	r3, [r2, #4]
    if( bs->unused_bits > 7 )
   d6532:	2b07      	cmp	r3, #7
   d6534:	d810      	bhi.n	d6558 <mbedtls_asn1_get_bitstring+0x44>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
    (*p)++;
   d6536:	6823      	ldr	r3, [r4, #0]
   d6538:	3301      	adds	r3, #1
   d653a:	6023      	str	r3, [r4, #0]

    /* Get actual bitstring */
    bs->p = *p;
   d653c:	6093      	str	r3, [r2, #8]
    *p += bs->len;
   d653e:	6822      	ldr	r2, [r4, #0]
   d6540:	682b      	ldr	r3, [r5, #0]
   d6542:	4413      	add	r3, r2

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   d6544:	429e      	cmp	r6, r3
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
    (*p)++;

    /* Get actual bitstring */
    bs->p = *p;
    *p += bs->len;
   d6546:	6023      	str	r3, [r4, #0]

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   d6548:	bf0c      	ite	eq
   d654a:	2000      	moveq	r0, #0
   d654c:	f06f 0065 	mvnne.w	r0, #101	; 0x65
   d6550:	bd70      	pop	{r4, r5, r6, pc}
    if( ( ret = mbedtls_asn1_get_tag( p, end, &bs->len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
        return( ret );

    /* Check length, subtract one for actual bit string length */
    if( bs->len < 1 )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   d6552:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   d6556:	bd70      	pop	{r4, r5, r6, pc}
    bs->len -= 1;

    /* Get number of unused bits, ensure unused bits <= 7 */
    bs->unused_bits = **p;
    if( bs->unused_bits > 7 )
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
   d6558:	f06f 0063 	mvn.w	r0, #99	; 0x63

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
   d655c:	bd70      	pop	{r4, r5, r6, pc}

000d655e <mbedtls_asn1_get_bitstring_null>:
/*
 * Get a bit string without unused bits
 */
int mbedtls_asn1_get_bitstring_null( unsigned char **p, const unsigned char *end,
                             size_t *len )
{
   d655e:	b538      	push	{r3, r4, r5, lr}
    int ret;

    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
   d6560:	2303      	movs	r3, #3
/*
 * Get a bit string without unused bits
 */
int mbedtls_asn1_get_bitstring_null( unsigned char **p, const unsigned char *end,
                             size_t *len )
{
   d6562:	4604      	mov	r4, r0
   d6564:	4615      	mov	r5, r2
    int ret;

    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
   d6566:	f7ff ff71 	bl	d644c <mbedtls_asn1_get_tag>
   d656a:	b958      	cbnz	r0, d6584 <mbedtls_asn1_get_bitstring_null+0x26>
        return( ret );

    if( (*len)-- < 2 || *(*p)++ != 0 )
   d656c:	6813      	ldr	r3, [r2, #0]
   d656e:	1e5a      	subs	r2, r3, #1
   d6570:	2b01      	cmp	r3, #1
   d6572:	602a      	str	r2, [r5, #0]
   d6574:	d904      	bls.n	d6580 <mbedtls_asn1_get_bitstring_null+0x22>
   d6576:	6823      	ldr	r3, [r4, #0]
   d6578:	1c5a      	adds	r2, r3, #1
   d657a:	6022      	str	r2, [r4, #0]
   d657c:	781b      	ldrb	r3, [r3, #0]
   d657e:	b10b      	cbz	r3, d6584 <mbedtls_asn1_get_bitstring_null+0x26>
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
   d6580:	f06f 0067 	mvn.w	r0, #103	; 0x67

    return( 0 );
}
   d6584:	bd38      	pop	{r3, r4, r5, pc}

000d6586 <mbedtls_asn1_get_sequence_of>:
 */
int mbedtls_asn1_get_sequence_of( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_asn1_sequence *cur,
                          int tag)
{
   d6586:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d658a:	4615      	mov	r5, r2
   d658c:	4698      	mov	r8, r3
    int ret;
    size_t len;
    mbedtls_asn1_buf *buf;

    /* Get main sequence tag */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   d658e:	aa01      	add	r2, sp, #4
   d6590:	2330      	movs	r3, #48	; 0x30
 */
int mbedtls_asn1_get_sequence_of( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_asn1_sequence *cur,
                          int tag)
{
   d6592:	4604      	mov	r4, r0
   d6594:	460f      	mov	r7, r1
    int ret;
    size_t len;
    mbedtls_asn1_buf *buf;

    /* Get main sequence tag */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   d6596:	f7ff ff59 	bl	d644c <mbedtls_asn1_get_tag>
   d659a:	4606      	mov	r6, r0
   d659c:	bb78      	cbnz	r0, d65fe <mbedtls_asn1_get_sequence_of+0x78>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( *p + len != end )
   d659e:	6822      	ldr	r2, [r4, #0]
   d65a0:	9b01      	ldr	r3, [sp, #4]
   d65a2:	4413      	add	r3, r2
   d65a4:	429f      	cmp	r7, r3
   d65a6:	d01d      	beq.n	d65e4 <mbedtls_asn1_get_sequence_of+0x5e>
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   d65a8:	f06f 0665 	mvn.w	r6, #101	; 0x65
   d65ac:	e027      	b.n	d65fe <mbedtls_asn1_get_sequence_of+0x78>

    while( *p < end )
   d65ae:	6823      	ldr	r3, [r4, #0]
   d65b0:	429f      	cmp	r7, r3
   d65b2:	d91a      	bls.n	d65ea <mbedtls_asn1_get_sequence_of+0x64>
    {
        buf = &(cur->buf);
        buf->tag = **p;
   d65b4:	781b      	ldrb	r3, [r3, #0]
   d65b6:	602b      	str	r3, [r5, #0]

        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
   d65b8:	464a      	mov	r2, r9
   d65ba:	4643      	mov	r3, r8
   d65bc:	4639      	mov	r1, r7
   d65be:	4620      	mov	r0, r4
   d65c0:	f7ff ff44 	bl	d644c <mbedtls_asn1_get_tag>
   d65c4:	b9b8      	cbnz	r0, d65f6 <mbedtls_asn1_get_sequence_of+0x70>
            return( ret );

        buf->p = *p;
   d65c6:	6823      	ldr	r3, [r4, #0]
   d65c8:	60ab      	str	r3, [r5, #8]
        *p += buf->len;
   d65ca:	6822      	ldr	r2, [r4, #0]
   d65cc:	686b      	ldr	r3, [r5, #4]
   d65ce:	4413      	add	r3, r2

        /* Allocate and assign next pointer */
        if( *p < end )
   d65d0:	429f      	cmp	r7, r3

        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
            return( ret );

        buf->p = *p;
        *p += buf->len;
   d65d2:	6023      	str	r3, [r4, #0]

        /* Allocate and assign next pointer */
        if( *p < end )
   d65d4:	d9eb      	bls.n	d65ae <mbedtls_asn1_get_sequence_of+0x28>
        {
            cur->next = (mbedtls_asn1_sequence*)mbedtls_calloc( 1,
   d65d6:	2110      	movs	r1, #16
   d65d8:	2001      	movs	r0, #1
   d65da:	f013 f94b 	bl	e9874 <calloc>
                                            sizeof( mbedtls_asn1_sequence ) );
   d65de:	60e8      	str	r0, [r5, #12]

            if( cur->next == NULL )
   d65e0:	b158      	cbz	r0, d65fa <mbedtls_asn1_get_sequence_of+0x74>
   d65e2:	4605      	mov	r5, r0
    while( *p < end )
    {
        buf = &(cur->buf);
        buf->tag = **p;

        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
   d65e4:	f105 0904 	add.w	r9, r5, #4
   d65e8:	e7e1      	b.n	d65ae <mbedtls_asn1_get_sequence_of+0x28>
            cur = cur->next;
        }
    }

    /* Set final sequence entry's next pointer to NULL */
    cur->next = NULL;
   d65ea:	2300      	movs	r3, #0
   d65ec:	60eb      	str	r3, [r5, #12]

    if( *p != end )
   d65ee:	6823      	ldr	r3, [r4, #0]
   d65f0:	429f      	cmp	r7, r3
   d65f2:	d004      	beq.n	d65fe <mbedtls_asn1_get_sequence_of+0x78>
   d65f4:	e7d8      	b.n	d65a8 <mbedtls_asn1_get_sequence_of+0x22>
    while( *p < end )
    {
        buf = &(cur->buf);
        buf->tag = **p;

        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
   d65f6:	4606      	mov	r6, r0
   d65f8:	e001      	b.n	d65fe <mbedtls_asn1_get_sequence_of+0x78>
        {
            cur->next = (mbedtls_asn1_sequence*)mbedtls_calloc( 1,
                                            sizeof( mbedtls_asn1_sequence ) );

            if( cur->next == NULL )
                return( MBEDTLS_ERR_ASN1_ALLOC_FAILED );
   d65fa:	f06f 0669 	mvn.w	r6, #105	; 0x69

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
   d65fe:	4630      	mov	r0, r6
   d6600:	b003      	add	sp, #12
   d6602:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6606 <mbedtls_asn1_get_alg>:

int mbedtls_asn1_get_alg( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_asn1_buf *alg, mbedtls_asn1_buf *params )
{
   d6606:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d660a:	4690      	mov	r8, r2
   d660c:	461f      	mov	r7, r3
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   d660e:	aa01      	add	r2, sp, #4
   d6610:	2330      	movs	r3, #48	; 0x30
}

int mbedtls_asn1_get_alg( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_asn1_buf *alg, mbedtls_asn1_buf *params )
{
   d6612:	4604      	mov	r4, r0
   d6614:	460e      	mov	r6, r1
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   d6616:	f7ff ff19 	bl	d644c <mbedtls_asn1_get_tag>
   d661a:	4605      	mov	r5, r0
   d661c:	2800      	cmp	r0, #0
   d661e:	d13b      	bne.n	d6698 <mbedtls_asn1_get_alg+0x92>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( ( end - *p ) < 1 )
   d6620:	6823      	ldr	r3, [r4, #0]
   d6622:	1af6      	subs	r6, r6, r3
   d6624:	2e00      	cmp	r6, #0
   d6626:	dd35      	ble.n	d6694 <mbedtls_asn1_get_alg+0x8e>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    alg->tag = **p;
   d6628:	4642      	mov	r2, r8
   d662a:	781b      	ldrb	r3, [r3, #0]
   d662c:	f842 3b04 	str.w	r3, [r2], #4
    end = *p + len;
   d6630:	9b01      	ldr	r3, [sp, #4]
   d6632:	6826      	ldr	r6, [r4, #0]
   d6634:	441e      	add	r6, r3

    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
   d6636:	4631      	mov	r1, r6
   d6638:	2306      	movs	r3, #6
   d663a:	4620      	mov	r0, r4
   d663c:	f7ff ff06 	bl	d644c <mbedtls_asn1_get_tag>
   d6640:	4605      	mov	r5, r0
   d6642:	bb48      	cbnz	r0, d6698 <mbedtls_asn1_get_alg+0x92>
        return( ret );

    alg->p = *p;
   d6644:	6823      	ldr	r3, [r4, #0]
   d6646:	f8c8 3008 	str.w	r3, [r8, #8]
    *p += alg->len;
   d664a:	6822      	ldr	r2, [r4, #0]
   d664c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   d6650:	18d1      	adds	r1, r2, r3

    if( *p == end )
   d6652:	428e      	cmp	r6, r1

    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
        return( ret );

    alg->p = *p;
    *p += alg->len;
   d6654:	6021      	str	r1, [r4, #0]

    if( *p == end )
   d6656:	d104      	bne.n	d6662 <mbedtls_asn1_get_alg+0x5c>
    {
        mbedtls_platform_zeroize( params, sizeof(mbedtls_asn1_buf) );
   d6658:	210c      	movs	r1, #12
   d665a:	4638      	mov	r0, r7
   d665c:	f004 fdce 	bl	db1fc <mbedtls_platform_zeroize>
        return( 0 );
   d6660:	e01a      	b.n	d6698 <mbedtls_asn1_get_alg+0x92>
    }

    params->tag = **p;
   d6662:	5cd3      	ldrb	r3, [r2, r3]
   d6664:	463a      	mov	r2, r7
    (*p)++;

    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
   d6666:	4631      	mov	r1, r6
    {
        mbedtls_platform_zeroize( params, sizeof(mbedtls_asn1_buf) );
        return( 0 );
    }

    params->tag = **p;
   d6668:	f842 3b04 	str.w	r3, [r2], #4
    (*p)++;
   d666c:	6823      	ldr	r3, [r4, #0]
   d666e:	3301      	adds	r3, #1
   d6670:	6023      	str	r3, [r4, #0]

    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
   d6672:	4620      	mov	r0, r4
   d6674:	f7ff fe98 	bl	d63a8 <mbedtls_asn1_get_len>
   d6678:	4605      	mov	r5, r0
   d667a:	b968      	cbnz	r0, d6698 <mbedtls_asn1_get_alg+0x92>
        return( ret );

    params->p = *p;
   d667c:	6823      	ldr	r3, [r4, #0]
   d667e:	60bb      	str	r3, [r7, #8]
    *p += params->len;
   d6680:	6822      	ldr	r2, [r4, #0]
   d6682:	687b      	ldr	r3, [r7, #4]
   d6684:	4413      	add	r3, r2

    if( *p != end )
   d6686:	429e      	cmp	r6, r3

    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
        return( ret );

    params->p = *p;
    *p += params->len;
   d6688:	6023      	str	r3, [r4, #0]

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   d668a:	bf0c      	ite	eq
   d668c:	4605      	moveq	r5, r0
   d668e:	f06f 0565 	mvnne.w	r5, #101	; 0x65
   d6692:	e001      	b.n	d6698 <mbedtls_asn1_get_alg+0x92>
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   d6694:	f06f 055f 	mvn.w	r5, #95	; 0x5f

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
   d6698:	4628      	mov	r0, r5
   d669a:	b002      	add	sp, #8
   d669c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d66a0 <mbedtls_asn1_get_alg_null>:

int mbedtls_asn1_get_alg_null( unsigned char **p,
                       const unsigned char *end,
                       mbedtls_asn1_buf *alg )
{
   d66a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    int ret;
    mbedtls_asn1_buf params;

    memset( &params, 0, sizeof(mbedtls_asn1_buf) );
   d66a2:	2300      	movs	r3, #0
   d66a4:	9301      	str	r3, [sp, #4]
   d66a6:	9302      	str	r3, [sp, #8]
   d66a8:	9303      	str	r3, [sp, #12]

    if( ( ret = mbedtls_asn1_get_alg( p, end, alg, &params ) ) != 0 )
   d66aa:	ab01      	add	r3, sp, #4
   d66ac:	f7ff ffab 	bl	d6606 <mbedtls_asn1_get_alg>
   d66b0:	b960      	cbnz	r0, d66cc <mbedtls_asn1_get_alg_null+0x2c>
        return( ret );

    if( ( params.tag != MBEDTLS_ASN1_NULL && params.tag != 0 ) || params.len != 0 )
   d66b2:	9b01      	ldr	r3, [sp, #4]
   d66b4:	2b05      	cmp	r3, #5
   d66b6:	d000      	beq.n	d66ba <mbedtls_asn1_get_alg_null+0x1a>
   d66b8:	b933      	cbnz	r3, d66c8 <mbedtls_asn1_get_alg_null+0x28>
   d66ba:	9b02      	ldr	r3, [sp, #8]
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
   d66bc:	2b00      	cmp	r3, #0
   d66be:	bf0c      	ite	eq
   d66c0:	2000      	moveq	r0, #0
   d66c2:	f06f 0067 	mvnne.w	r0, #103	; 0x67
   d66c6:	e001      	b.n	d66cc <mbedtls_asn1_get_alg_null+0x2c>
   d66c8:	f06f 0067 	mvn.w	r0, #103	; 0x67

    return( 0 );
}
   d66cc:	b005      	add	sp, #20
   d66ce:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d66d4 <_ZL14x509_parse_intPPhjPi>:
    }
}

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
    *res = 0;
   d66d4:	2300      	movs	r3, #0
        cur = cur->next;
    }
}

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
   d66d6:	b530      	push	{r4, r5, lr}
    *res = 0;
   d66d8:	6013      	str	r3, [r2, #0]
    for( ; n > 0; --n )
    {
        if( ( **p < '0') || ( **p > '9' ) )
            return ( MBEDTLS_ERR_X509_INVALID_DATE );

        *res *= 10;
   d66da:	250a      	movs	r5, #10

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
    *res = 0;

    for( ; n > 0; --n )
   d66dc:	b189      	cbz	r1, d6702 <_ZL14x509_parse_intPPhjPi+0x2e>
    {
        if( ( **p < '0') || ( **p > '9' ) )
   d66de:	6803      	ldr	r3, [r0, #0]
   d66e0:	781b      	ldrb	r3, [r3, #0]
   d66e2:	3b30      	subs	r3, #48	; 0x30
   d66e4:	2b09      	cmp	r3, #9
   d66e6:	d80e      	bhi.n	d6706 <_ZL14x509_parse_intPPhjPi+0x32>
            return ( MBEDTLS_ERR_X509_INVALID_DATE );

        *res *= 10;
   d66e8:	6813      	ldr	r3, [r2, #0]
   d66ea:	436b      	muls	r3, r5
   d66ec:	6013      	str	r3, [r2, #0]
        *res += ( *(*p)++ - '0' );
   d66ee:	6803      	ldr	r3, [r0, #0]
   d66f0:	1c5c      	adds	r4, r3, #1
   d66f2:	6004      	str	r4, [r0, #0]
   d66f4:	781b      	ldrb	r3, [r3, #0]
   d66f6:	6814      	ldr	r4, [r2, #0]
   d66f8:	3b30      	subs	r3, #48	; 0x30
   d66fa:	4423      	add	r3, r4
   d66fc:	6013      	str	r3, [r2, #0]

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
    *res = 0;

    for( ; n > 0; --n )
   d66fe:	3901      	subs	r1, #1
   d6700:	e7ec      	b.n	d66dc <_ZL14x509_parse_intPPhjPi+0x8>

        *res *= 10;
        *res += ( *(*p)++ - '0' );
    }

    return( 0 );
   d6702:	4608      	mov	r0, r1
   d6704:	bd30      	pop	{r4, r5, pc}
    *res = 0;

    for( ; n > 0; --n )
    {
        if( ( **p < '0') || ( **p > '9' ) )
            return ( MBEDTLS_ERR_X509_INVALID_DATE );
   d6706:	4801      	ldr	r0, [pc, #4]	; (d670c <_ZL14x509_parse_intPPhjPi+0x38>)
        *res *= 10;
        *res += ( *(*p)++ - '0' );
    }

    return( 0 );
}
   d6708:	bd30      	pop	{r4, r5, pc}
   d670a:	bf00      	nop
   d670c:	ffffdc00 	.word	0xffffdc00

000d6710 <mbedtls_x509_get_serial>:
/*
 *  CertificateSerialNumber  ::=  INTEGER
 */
int mbedtls_x509_get_serial( unsigned char **p, const unsigned char *end,
                     mbedtls_x509_buf *serial )
{
   d6710:	b538      	push	{r3, r4, r5, lr}
    int ret;

    if( ( end - *p ) < 1 )
   d6712:	6803      	ldr	r3, [r0, #0]
/*
 *  CertificateSerialNumber  ::=  INTEGER
 */
int mbedtls_x509_get_serial( unsigned char **p, const unsigned char *end,
                     mbedtls_x509_buf *serial )
{
   d6714:	4615      	mov	r5, r2
    int ret;

    if( ( end - *p ) < 1 )
   d6716:	1aca      	subs	r2, r1, r3
   d6718:	2a00      	cmp	r2, #0
/*
 *  CertificateSerialNumber  ::=  INTEGER
 */
int mbedtls_x509_get_serial( unsigned char **p, const unsigned char *end,
                     mbedtls_x509_buf *serial )
{
   d671a:	4604      	mov	r4, r0
    int ret;

    if( ( end - *p ) < 1 )
   d671c:	dd17      	ble.n	d674e <mbedtls_x509_get_serial+0x3e>
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_PRIMITIVE | 2 ) &&
   d671e:	781a      	ldrb	r2, [r3, #0]
   d6720:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   d6724:	2a02      	cmp	r2, #2
   d6726:	d114      	bne.n	d6752 <mbedtls_x509_get_serial+0x42>
        **p !=   MBEDTLS_ASN1_INTEGER )
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    serial->tag = *(*p)++;
   d6728:	1c5a      	adds	r2, r3, #1
   d672a:	6002      	str	r2, [r0, #0]
   d672c:	462a      	mov	r2, r5
   d672e:	781b      	ldrb	r3, [r3, #0]
   d6730:	f842 3b04 	str.w	r3, [r2], #4

    if( ( ret = mbedtls_asn1_get_len( p, end, &serial->len ) ) != 0 )
   d6734:	f7ff fe38 	bl	d63a8 <mbedtls_asn1_get_len>
   d6738:	b110      	cbz	r0, d6740 <mbedtls_x509_get_serial+0x30>
        return( MBEDTLS_ERR_X509_INVALID_SERIAL + ret );
   d673a:	f5a0 500a 	sub.w	r0, r0, #8832	; 0x2280
   d673e:	bd38      	pop	{r3, r4, r5, pc}

    serial->p = *p;
   d6740:	6823      	ldr	r3, [r4, #0]
   d6742:	60ab      	str	r3, [r5, #8]
    *p += serial->len;
   d6744:	6822      	ldr	r2, [r4, #0]
   d6746:	686b      	ldr	r3, [r5, #4]
   d6748:	4413      	add	r3, r2
   d674a:	6023      	str	r3, [r4, #0]

    return( 0 );
   d674c:	bd38      	pop	{r3, r4, r5, pc}
{
    int ret;

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   d674e:	4802      	ldr	r0, [pc, #8]	; (d6758 <mbedtls_x509_get_serial+0x48>)
   d6750:	bd38      	pop	{r3, r4, r5, pc}

    if( **p != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_PRIMITIVE | 2 ) &&
        **p !=   MBEDTLS_ASN1_INTEGER )
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
   d6752:	4802      	ldr	r0, [pc, #8]	; (d675c <mbedtls_x509_get_serial+0x4c>)

    serial->p = *p;
    *p += serial->len;

    return( 0 );
}
   d6754:	bd38      	pop	{r3, r4, r5, pc}
   d6756:	bf00      	nop
   d6758:	ffffdd20 	.word	0xffffdd20
   d675c:	ffffdd1e 	.word	0xffffdd1e

000d6760 <mbedtls_x509_get_alg_null>:
 *       algorithm               OBJECT IDENTIFIER,
 *       parameters              ANY DEFINED BY algorithm OPTIONAL  }
 */
int mbedtls_x509_get_alg_null( unsigned char **p, const unsigned char *end,
                       mbedtls_x509_buf *alg )
{
   d6760:	b508      	push	{r3, lr}
    int ret;

    if( ( ret = mbedtls_asn1_get_alg_null( p, end, alg ) ) != 0 )
   d6762:	f7ff ff9d 	bl	d66a0 <mbedtls_asn1_get_alg_null>
   d6766:	b108      	cbz	r0, d676c <mbedtls_x509_get_alg_null+0xc>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );
   d6768:	f5a0 500c 	sub.w	r0, r0, #8960	; 0x2300

    return( 0 );
}
   d676c:	bd08      	pop	{r3, pc}

000d676e <mbedtls_x509_get_alg>:
/*
 * Parse an algorithm identifier with (optional) parameters
 */
int mbedtls_x509_get_alg( unsigned char **p, const unsigned char *end,
                  mbedtls_x509_buf *alg, mbedtls_x509_buf *params )
{
   d676e:	b508      	push	{r3, lr}
    int ret;

    if( ( ret = mbedtls_asn1_get_alg( p, end, alg, params ) ) != 0 )
   d6770:	f7ff ff49 	bl	d6606 <mbedtls_asn1_get_alg>
   d6774:	b108      	cbz	r0, d677a <mbedtls_x509_get_alg+0xc>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );
   d6776:	f5a0 500c 	sub.w	r0, r0, #8960	; 0x2300

    return( 0 );
}
   d677a:	bd08      	pop	{r3, pc}

000d677c <mbedtls_x509_get_rsassa_pss_params>:
 * option. Enfore this at parsing time.
 */
int mbedtls_x509_get_rsassa_pss_params( const mbedtls_x509_buf *params,
                                mbedtls_md_type_t *md_alg, mbedtls_md_type_t *mgf_md,
                                int *salt_len )
{
   d677c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6780:	461d      	mov	r5, r3
    const unsigned char *end, *end2;
    size_t len;
    mbedtls_x509_buf alg_id, alg_params;

    /* First set everything to defaults */
    *md_alg = MBEDTLS_MD_SHA1;
   d6782:	2304      	movs	r3, #4
   d6784:	700b      	strb	r3, [r1, #0]
    *mgf_md = MBEDTLS_MD_SHA1;
   d6786:	7013      	strb	r3, [r2, #0]
    *salt_len = 20;
   d6788:	2314      	movs	r3, #20
   d678a:	602b      	str	r3, [r5, #0]

    /* Make sure params is a SEQUENCE and setup bounds */
    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
   d678c:	6803      	ldr	r3, [r0, #0]
   d678e:	2b30      	cmp	r3, #48	; 0x30
 * option. Enfore this at parsing time.
 */
int mbedtls_x509_get_rsassa_pss_params( const mbedtls_x509_buf *params,
                                mbedtls_md_type_t *md_alg, mbedtls_md_type_t *mgf_md,
                                int *salt_len )
{
   d6790:	b08f      	sub	sp, #60	; 0x3c
   d6792:	4688      	mov	r8, r1
   d6794:	4616      	mov	r6, r2
    *md_alg = MBEDTLS_MD_SHA1;
    *mgf_md = MBEDTLS_MD_SHA1;
    *salt_len = 20;

    /* Make sure params is a SEQUENCE and setup bounds */
    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
   d6796:	f040 80ca 	bne.w	d692e <mbedtls_x509_get_rsassa_pss_params+0x1b2>
        return( MBEDTLS_ERR_X509_INVALID_ALG +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    p = (unsigned char *) params->p;
   d679a:	6883      	ldr	r3, [r0, #8]
    end = p + params->len;
   d679c:	6844      	ldr	r4, [r0, #4]
    /* Make sure params is a SEQUENCE and setup bounds */
    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
        return( MBEDTLS_ERR_X509_INVALID_ALG +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    p = (unsigned char *) params->p;
   d679e:	9301      	str	r3, [sp, #4]
    end = p + params->len;
   d67a0:	441c      	add	r4, r3

    if( p == end )
   d67a2:	42a3      	cmp	r3, r4
   d67a4:	f000 80c1 	beq.w	d692a <mbedtls_x509_get_rsassa_pss_params+0x1ae>
        return( 0 );

    /*
     * HashAlgorithm
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   d67a8:	23a0      	movs	r3, #160	; 0xa0
   d67aa:	aa02      	add	r2, sp, #8
   d67ac:	4621      	mov	r1, r4
   d67ae:	a801      	add	r0, sp, #4
   d67b0:	f7ff fe4c 	bl	d644c <mbedtls_asn1_get_tag>
   d67b4:	b9a8      	cbnz	r0, d67e2 <mbedtls_x509_get_rsassa_pss_params+0x66>
                    MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 0 ) ) == 0 )
    {
        end2 = p + len;
   d67b6:	9b02      	ldr	r3, [sp, #8]
   d67b8:	9f01      	ldr	r7, [sp, #4]
   d67ba:	441f      	add	r7, r3

        /* HashAlgorithm ::= AlgorithmIdentifier (without parameters) */
        if( ( ret = mbedtls_x509_get_alg_null( &p, end2, &alg_id ) ) != 0 )
   d67bc:	aa05      	add	r2, sp, #20
   d67be:	4639      	mov	r1, r7
   d67c0:	a801      	add	r0, sp, #4
   d67c2:	f7ff ffcd 	bl	d6760 <mbedtls_x509_get_alg_null>
   d67c6:	2800      	cmp	r0, #0
   d67c8:	f040 80b9 	bne.w	d693e <mbedtls_x509_get_rsassa_pss_params+0x1c2>
            return( ret );

        if( ( ret = mbedtls_oid_get_md_alg( &alg_id, md_alg ) ) != 0 )
   d67cc:	4641      	mov	r1, r8
   d67ce:	a805      	add	r0, sp, #20
   d67d0:	f003 fc06 	bl	d9fe0 <mbedtls_oid_get_md_alg>
   d67d4:	2800      	cmp	r0, #0
   d67d6:	f040 80a5 	bne.w	d6924 <mbedtls_x509_get_rsassa_pss_params+0x1a8>
            return( MBEDTLS_ERR_X509_INVALID_ALG + ret );

        if( p != end2 )
   d67da:	9b01      	ldr	r3, [sp, #4]
   d67dc:	429f      	cmp	r7, r3
   d67de:	d004      	beq.n	d67ea <mbedtls_x509_get_rsassa_pss_params+0x6e>
   d67e0:	e09e      	b.n	d6920 <mbedtls_x509_get_rsassa_pss_params+0x1a4>
            return( MBEDTLS_ERR_X509_INVALID_ALG +
                    MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    }
    else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   d67e2:	f110 0f62 	cmn.w	r0, #98	; 0x62
   d67e6:	f040 809d 	bne.w	d6924 <mbedtls_x509_get_rsassa_pss_params+0x1a8>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );

    if( p == end )
   d67ea:	9b01      	ldr	r3, [sp, #4]
   d67ec:	429c      	cmp	r4, r3
   d67ee:	f000 809c 	beq.w	d692a <mbedtls_x509_get_rsassa_pss_params+0x1ae>
        return( 0 );

    /*
     * MaskGenAlgorithm
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   d67f2:	23a1      	movs	r3, #161	; 0xa1
   d67f4:	aa02      	add	r2, sp, #8
   d67f6:	4621      	mov	r1, r4
   d67f8:	a801      	add	r0, sp, #4
   d67fa:	f7ff fe27 	bl	d644c <mbedtls_asn1_get_tag>
   d67fe:	2800      	cmp	r0, #0
   d6800:	d150      	bne.n	d68a4 <mbedtls_x509_get_rsassa_pss_params+0x128>
                    MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 1 ) ) == 0 )
    {
        end2 = p + len;
   d6802:	9b02      	ldr	r3, [sp, #8]
   d6804:	9f01      	ldr	r7, [sp, #4]
   d6806:	441f      	add	r7, r3

        /* MaskGenAlgorithm ::= AlgorithmIdentifier (params = HashAlgorithm) */
        if( ( ret = mbedtls_x509_get_alg( &p, end2, &alg_id, &alg_params ) ) != 0 )
   d6808:	aa05      	add	r2, sp, #20
   d680a:	ab08      	add	r3, sp, #32
   d680c:	4639      	mov	r1, r7
   d680e:	a801      	add	r0, sp, #4
   d6810:	f7ff ffad 	bl	d676e <mbedtls_x509_get_alg>
   d6814:	2800      	cmp	r0, #0
   d6816:	f040 8092 	bne.w	d693e <mbedtls_x509_get_rsassa_pss_params+0x1c2>
            return( ret );

        /* Only MFG1 is recognised for now */
        if( MBEDTLS_OID_CMP( MBEDTLS_OID_MGF1, &alg_id ) != 0 )
   d681a:	9a06      	ldr	r2, [sp, #24]
   d681c:	2a09      	cmp	r2, #9
   d681e:	f040 8088 	bne.w	d6932 <mbedtls_x509_get_rsassa_pss_params+0x1b6>
   d6822:	9907      	ldr	r1, [sp, #28]
   d6824:	4847      	ldr	r0, [pc, #284]	; (d6944 <mbedtls_x509_get_rsassa_pss_params+0x1c8>)
   d6826:	f013 f937 	bl	e9a98 <memcmp>
   d682a:	2800      	cmp	r0, #0
   d682c:	f040 8081 	bne.w	d6932 <mbedtls_x509_get_rsassa_pss_params+0x1b6>
    const unsigned char *end;
    mbedtls_x509_buf md_oid;
    size_t len;

    /* Make sure we got a SEQUENCE and setup bounds */
    if( alg->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
   d6830:	9b08      	ldr	r3, [sp, #32]
   d6832:	2b30      	cmp	r3, #48	; 0x30
   d6834:	d17b      	bne.n	d692e <mbedtls_x509_get_rsassa_pss_params+0x1b2>
        return( MBEDTLS_ERR_X509_INVALID_ALG +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    p = (unsigned char *) alg->p;
   d6836:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    end = p + alg->len;
   d6838:	9a09      	ldr	r2, [sp, #36]	; 0x24
    /* Make sure we got a SEQUENCE and setup bounds */
    if( alg->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
        return( MBEDTLS_ERR_X509_INVALID_ALG +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    p = (unsigned char *) alg->p;
   d683a:	9303      	str	r3, [sp, #12]
    end = p + alg->len;
   d683c:	eb03 0802 	add.w	r8, r3, r2

    if( p >= end )
   d6840:	4543      	cmp	r3, r8
   d6842:	d226      	bcs.n	d6892 <mbedtls_x509_get_rsassa_pss_params+0x116>
        return( MBEDTLS_ERR_X509_INVALID_ALG +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    /* Parse md_oid */
    md_oid.tag = *p;
   d6844:	f10d 0938 	add.w	r9, sp, #56	; 0x38
   d6848:	781b      	ldrb	r3, [r3, #0]
   d684a:	f849 3d0c 	str.w	r3, [r9, #-12]!

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &md_oid.len, MBEDTLS_ASN1_OID ) ) != 0 )
   d684e:	aa0c      	add	r2, sp, #48	; 0x30
   d6850:	2306      	movs	r3, #6
   d6852:	4641      	mov	r1, r8
   d6854:	a803      	add	r0, sp, #12
   d6856:	f7ff fdf9 	bl	d644c <mbedtls_asn1_get_tag>
   d685a:	2800      	cmp	r0, #0
   d685c:	d16b      	bne.n	d6936 <mbedtls_x509_get_rsassa_pss_params+0x1ba>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );

    md_oid.p = p;
   d685e:	9a03      	ldr	r2, [sp, #12]
    p += md_oid.len;
   d6860:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    md_oid.tag = *p;

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &md_oid.len, MBEDTLS_ASN1_OID ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );

    md_oid.p = p;
   d6862:	920d      	str	r2, [sp, #52]	; 0x34
    p += md_oid.len;
   d6864:	4413      	add	r3, r2

    /* Get md_alg from md_oid */
    if( ( ret = mbedtls_oid_get_md_alg( &md_oid, md_alg ) ) != 0 )
   d6866:	4631      	mov	r1, r6
   d6868:	4648      	mov	r0, r9

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &md_oid.len, MBEDTLS_ASN1_OID ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );

    md_oid.p = p;
    p += md_oid.len;
   d686a:	9303      	str	r3, [sp, #12]

    /* Get md_alg from md_oid */
    if( ( ret = mbedtls_oid_get_md_alg( &md_oid, md_alg ) ) != 0 )
   d686c:	f003 fbb8 	bl	d9fe0 <mbedtls_oid_get_md_alg>
   d6870:	2800      	cmp	r0, #0
   d6872:	d160      	bne.n	d6936 <mbedtls_x509_get_rsassa_pss_params+0x1ba>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );

    /* Make sure params is absent of NULL */
    if( p == end )
   d6874:	9b03      	ldr	r3, [sp, #12]
   d6876:	4598      	cmp	r8, r3
   d6878:	d010      	beq.n	d689c <mbedtls_x509_get_rsassa_pss_params+0x120>
        return( 0 );

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_NULL ) ) != 0 || len != 0 )
   d687a:	2305      	movs	r3, #5
   d687c:	aa04      	add	r2, sp, #16
   d687e:	4641      	mov	r1, r8
   d6880:	a803      	add	r0, sp, #12
   d6882:	f7ff fde3 	bl	d644c <mbedtls_asn1_get_tag>
   d6886:	2800      	cmp	r0, #0
   d6888:	d155      	bne.n	d6936 <mbedtls_x509_get_rsassa_pss_params+0x1ba>
   d688a:	9b04      	ldr	r3, [sp, #16]
   d688c:	2b00      	cmp	r3, #0
   d688e:	d152      	bne.n	d6936 <mbedtls_x509_get_rsassa_pss_params+0x1ba>
   d6890:	e001      	b.n	d6896 <mbedtls_x509_get_rsassa_pss_params+0x11a>
    p = (unsigned char *) alg->p;
    end = p + alg->len;

    if( p >= end )
        return( MBEDTLS_ERR_X509_INVALID_ALG +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   d6892:	482d      	ldr	r0, [pc, #180]	; (d6948 <mbedtls_x509_get_rsassa_pss_params+0x1cc>)
   d6894:	e053      	b.n	d693e <mbedtls_x509_get_rsassa_pss_params+0x1c2>
        return( 0 );

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_NULL ) ) != 0 || len != 0 )
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );

    if( p != end )
   d6896:	9b03      	ldr	r3, [sp, #12]
   d6898:	4598      	cmp	r8, r3
   d689a:	d141      	bne.n	d6920 <mbedtls_x509_get_rsassa_pss_params+0x1a4>

        /* Parse HashAlgorithm */
        if( ( ret = x509_get_hash_alg( &alg_params, mgf_md ) ) != 0 )
            return( ret );

        if( p != end2 )
   d689c:	9b01      	ldr	r3, [sp, #4]
   d689e:	429f      	cmp	r7, r3
   d68a0:	d003      	beq.n	d68aa <mbedtls_x509_get_rsassa_pss_params+0x12e>
   d68a2:	e03d      	b.n	d6920 <mbedtls_x509_get_rsassa_pss_params+0x1a4>
            return( MBEDTLS_ERR_X509_INVALID_ALG +
                    MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    }
    else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   d68a4:	f110 0f62 	cmn.w	r0, #98	; 0x62
   d68a8:	d13c      	bne.n	d6924 <mbedtls_x509_get_rsassa_pss_params+0x1a8>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );

    if( p == end )
   d68aa:	9b01      	ldr	r3, [sp, #4]
   d68ac:	429c      	cmp	r4, r3
   d68ae:	d03c      	beq.n	d692a <mbedtls_x509_get_rsassa_pss_params+0x1ae>
        return( 0 );

    /*
     * salt_len
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   d68b0:	23a2      	movs	r3, #162	; 0xa2
   d68b2:	aa02      	add	r2, sp, #8
   d68b4:	4621      	mov	r1, r4
   d68b6:	a801      	add	r0, sp, #4
   d68b8:	f7ff fdc8 	bl	d644c <mbedtls_asn1_get_tag>
   d68bc:	b960      	cbnz	r0, d68d8 <mbedtls_x509_get_rsassa_pss_params+0x15c>
                    MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 2 ) ) == 0 )
    {
        end2 = p + len;
   d68be:	9b02      	ldr	r3, [sp, #8]
   d68c0:	9e01      	ldr	r6, [sp, #4]
   d68c2:	441e      	add	r6, r3

        if( ( ret = mbedtls_asn1_get_int( &p, end2, salt_len ) ) != 0 )
   d68c4:	462a      	mov	r2, r5
   d68c6:	4631      	mov	r1, r6
   d68c8:	a801      	add	r0, sp, #4
   d68ca:	f7ff fdec 	bl	d64a6 <mbedtls_asn1_get_int>
   d68ce:	bb48      	cbnz	r0, d6924 <mbedtls_x509_get_rsassa_pss_params+0x1a8>
            return( MBEDTLS_ERR_X509_INVALID_ALG + ret );

        if( p != end2 )
   d68d0:	9b01      	ldr	r3, [sp, #4]
   d68d2:	429e      	cmp	r6, r3
   d68d4:	d003      	beq.n	d68de <mbedtls_x509_get_rsassa_pss_params+0x162>
   d68d6:	e023      	b.n	d6920 <mbedtls_x509_get_rsassa_pss_params+0x1a4>
            return( MBEDTLS_ERR_X509_INVALID_ALG +
                    MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    }
    else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   d68d8:	f110 0f62 	cmn.w	r0, #98	; 0x62
   d68dc:	d122      	bne.n	d6924 <mbedtls_x509_get_rsassa_pss_params+0x1a8>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );

    if( p == end )
   d68de:	9b01      	ldr	r3, [sp, #4]
   d68e0:	429c      	cmp	r4, r3
   d68e2:	d022      	beq.n	d692a <mbedtls_x509_get_rsassa_pss_params+0x1ae>
        return( 0 );

    /*
     * trailer_field (if present, must be 1)
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   d68e4:	23a3      	movs	r3, #163	; 0xa3
   d68e6:	aa02      	add	r2, sp, #8
   d68e8:	4621      	mov	r1, r4
   d68ea:	a801      	add	r0, sp, #4
   d68ec:	f7ff fdae 	bl	d644c <mbedtls_asn1_get_tag>
   d68f0:	b980      	cbnz	r0, d6914 <mbedtls_x509_get_rsassa_pss_params+0x198>
                    MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 3 ) ) == 0 )
    {
        int trailer_field;

        end2 = p + len;
   d68f2:	9b02      	ldr	r3, [sp, #8]
   d68f4:	9d01      	ldr	r5, [sp, #4]
   d68f6:	441d      	add	r5, r3

        if( ( ret = mbedtls_asn1_get_int( &p, end2, &trailer_field ) ) != 0 )
   d68f8:	aa0b      	add	r2, sp, #44	; 0x2c
   d68fa:	4629      	mov	r1, r5
   d68fc:	a801      	add	r0, sp, #4
   d68fe:	f7ff fdd2 	bl	d64a6 <mbedtls_asn1_get_int>
   d6902:	b978      	cbnz	r0, d6924 <mbedtls_x509_get_rsassa_pss_params+0x1a8>
            return( MBEDTLS_ERR_X509_INVALID_ALG + ret );

        if( p != end2 )
   d6904:	9b01      	ldr	r3, [sp, #4]
   d6906:	429d      	cmp	r5, r3
   d6908:	d10a      	bne.n	d6920 <mbedtls_x509_get_rsassa_pss_params+0x1a4>
            return( MBEDTLS_ERR_X509_INVALID_ALG +
                    MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

        if( trailer_field != 1 )
   d690a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d690c:	2b01      	cmp	r3, #1
   d690e:	d004      	beq.n	d691a <mbedtls_x509_get_rsassa_pss_params+0x19e>
            return( MBEDTLS_ERR_X509_INVALID_ALG );
   d6910:	480e      	ldr	r0, [pc, #56]	; (d694c <mbedtls_x509_get_rsassa_pss_params+0x1d0>)
   d6912:	e014      	b.n	d693e <mbedtls_x509_get_rsassa_pss_params+0x1c2>
    }
    else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   d6914:	f110 0f62 	cmn.w	r0, #98	; 0x62
   d6918:	d104      	bne.n	d6924 <mbedtls_x509_get_rsassa_pss_params+0x1a8>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );

    if( p != end )
   d691a:	9b01      	ldr	r3, [sp, #4]
   d691c:	429c      	cmp	r4, r3
   d691e:	d004      	beq.n	d692a <mbedtls_x509_get_rsassa_pss_params+0x1ae>
        if( ( ret = mbedtls_asn1_get_int( &p, end2, &trailer_field ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_ALG + ret );

        if( p != end2 )
            return( MBEDTLS_ERR_X509_INVALID_ALG +
                    MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   d6920:	480b      	ldr	r0, [pc, #44]	; (d6950 <mbedtls_x509_get_rsassa_pss_params+0x1d4>)
   d6922:	e00c      	b.n	d693e <mbedtls_x509_get_rsassa_pss_params+0x1c2>

        if( trailer_field != 1 )
            return( MBEDTLS_ERR_X509_INVALID_ALG );
    }
    else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );
   d6924:	f5a0 500c 	sub.w	r0, r0, #8960	; 0x2300
   d6928:	e009      	b.n	d693e <mbedtls_x509_get_rsassa_pss_params+0x1c2>

    if( p != end )
        return( MBEDTLS_ERR_X509_INVALID_ALG +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
   d692a:	2000      	movs	r0, #0
   d692c:	e007      	b.n	d693e <mbedtls_x509_get_rsassa_pss_params+0x1c2>
    *salt_len = 20;

    /* Make sure params is a SEQUENCE and setup bounds */
    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
        return( MBEDTLS_ERR_X509_INVALID_ALG +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
   d692e:	4809      	ldr	r0, [pc, #36]	; (d6954 <mbedtls_x509_get_rsassa_pss_params+0x1d8>)
   d6930:	e005      	b.n	d693e <mbedtls_x509_get_rsassa_pss_params+0x1c2>
            return( ret );

        /* Only MFG1 is recognised for now */
        if( MBEDTLS_OID_CMP( MBEDTLS_OID_MGF1, &alg_id ) != 0 )
            return( MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE +
                    MBEDTLS_ERR_OID_NOT_FOUND );
   d6932:	4809      	ldr	r0, [pc, #36]	; (d6958 <mbedtls_x509_get_rsassa_pss_params+0x1dc>)
   d6934:	e003      	b.n	d693e <mbedtls_x509_get_rsassa_pss_params+0x1c2>
    /* Make sure params is absent of NULL */
    if( p == end )
        return( 0 );

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_NULL ) ) != 0 || len != 0 )
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );
   d6936:	f5a0 500c 	sub.w	r0, r0, #8960	; 0x2300
        if( MBEDTLS_OID_CMP( MBEDTLS_OID_MGF1, &alg_id ) != 0 )
            return( MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE +
                    MBEDTLS_ERR_OID_NOT_FOUND );

        /* Parse HashAlgorithm */
        if( ( ret = x509_get_hash_alg( &alg_params, mgf_md ) ) != 0 )
   d693a:	2800      	cmp	r0, #0
   d693c:	d0ae      	beq.n	d689c <mbedtls_x509_get_rsassa_pss_params+0x120>
    if( p != end )
        return( MBEDTLS_ERR_X509_INVALID_ALG +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
   d693e:	b00f      	add	sp, #60	; 0x3c
   d6940:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d6944:	000ecaac 	.word	0x000ecaac
   d6948:	ffffdca0 	.word	0xffffdca0
   d694c:	ffffdd00 	.word	0xffffdd00
   d6950:	ffffdc9a 	.word	0xffffdc9a
   d6954:	ffffdc9e 	.word	0xffffdc9e
   d6958:	ffffdf52 	.word	0xffffdf52

000d695c <mbedtls_x509_get_name>:
 * same set so that they are "merged" together in the functions that consume
 * this list, eg mbedtls_x509_dn_gets().
 */
int mbedtls_x509_get_name( unsigned char **p, const unsigned char *end,
                   mbedtls_x509_name *cur )
{
   d695c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != MBEDTLS_ASN1_BMP_STRING && **p != MBEDTLS_ASN1_UTF8_STRING      &&
        **p != MBEDTLS_ASN1_T61_STRING && **p != MBEDTLS_ASN1_PRINTABLE_STRING &&
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
   d6960:	f8df 80f4 	ldr.w	r8, [pc, #244]	; d6a58 <mbedtls_x509_get_name+0xfc>
 * same set so that they are "merged" together in the functions that consume
 * this list, eg mbedtls_x509_dn_gets().
 */
int mbedtls_x509_get_name( unsigned char **p, const unsigned char *end,
                   mbedtls_x509_name *cur )
{
   d6964:	4604      	mov	r4, r0
   d6966:	460f      	mov	r7, r1
   d6968:	4691      	mov	r9, r2
    while( 1 )
    {
        /*
         * parse SET
         */
        if( ( ret = mbedtls_asn1_get_tag( p, end, &set_len,
   d696a:	2331      	movs	r3, #49	; 0x31
   d696c:	466a      	mov	r2, sp
   d696e:	4639      	mov	r1, r7
   d6970:	4620      	mov	r0, r4
   d6972:	f7ff fd6b 	bl	d644c <mbedtls_asn1_get_tag>
   d6976:	b110      	cbz	r0, d697e <mbedtls_x509_get_name+0x22>
                MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SET ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_NAME + ret );
   d6978:	f5a0 500e 	sub.w	r0, r0, #9088	; 0x2380
   d697c:	e061      	b.n	d6a42 <mbedtls_x509_get_name+0xe6>

        end_set  = *p + set_len;
   d697e:	6826      	ldr	r6, [r4, #0]
   d6980:	9b00      	ldr	r3, [sp, #0]
   d6982:	464d      	mov	r5, r9
   d6984:	441e      	add	r6, r3
    int ret;
    size_t len;
    mbedtls_x509_buf *oid;
    mbedtls_x509_buf *val;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   d6986:	2330      	movs	r3, #48	; 0x30
   d6988:	aa01      	add	r2, sp, #4
   d698a:	4631      	mov	r1, r6
   d698c:	4620      	mov	r0, r4
   d698e:	f7ff fd5d 	bl	d644c <mbedtls_asn1_get_tag>
   d6992:	bb68      	cbnz	r0, d69f0 <mbedtls_x509_get_name+0x94>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );

    end = *p + len;
   d6994:	9a01      	ldr	r2, [sp, #4]
   d6996:	6823      	ldr	r3, [r4, #0]

    if( ( end - *p ) < 1 )
   d6998:	2a00      	cmp	r2, #0

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );

    end = *p + len;
   d699a:	eb03 0902 	add.w	r9, r3, r2

    if( ( end - *p ) < 1 )
   d699e:	dc01      	bgt.n	d69a4 <mbedtls_x509_get_name+0x48>
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   d69a0:	4829      	ldr	r0, [pc, #164]	; (d6a48 <mbedtls_x509_get_name+0xec>)
   d69a2:	e04e      	b.n	d6a42 <mbedtls_x509_get_name+0xe6>

    oid = &cur->oid;
    oid->tag = **p;
   d69a4:	462a      	mov	r2, r5
   d69a6:	781b      	ldrb	r3, [r3, #0]
   d69a8:	f842 3b04 	str.w	r3, [r2], #4

    if( ( ret = mbedtls_asn1_get_tag( p, end, &oid->len, MBEDTLS_ASN1_OID ) ) != 0 )
   d69ac:	4649      	mov	r1, r9
   d69ae:	2306      	movs	r3, #6
   d69b0:	4620      	mov	r0, r4
   d69b2:	f7ff fd4b 	bl	d644c <mbedtls_asn1_get_tag>
   d69b6:	b9d8      	cbnz	r0, d69f0 <mbedtls_x509_get_name+0x94>
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );

    oid->p = *p;
   d69b8:	6823      	ldr	r3, [r4, #0]
   d69ba:	60ab      	str	r3, [r5, #8]
    *p += oid->len;
   d69bc:	6820      	ldr	r0, [r4, #0]
   d69be:	6869      	ldr	r1, [r5, #4]
   d69c0:	1843      	adds	r3, r0, r1

    if( ( end - *p ) < 1 )
   d69c2:	ebc3 0209 	rsb	r2, r3, r9
   d69c6:	2a00      	cmp	r2, #0

    if( ( ret = mbedtls_asn1_get_tag( p, end, &oid->len, MBEDTLS_ASN1_OID ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );

    oid->p = *p;
    *p += oid->len;
   d69c8:	6023      	str	r3, [r4, #0]

    if( ( end - *p ) < 1 )
   d69ca:	dde9      	ble.n	d69a0 <mbedtls_x509_get_name+0x44>
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != MBEDTLS_ASN1_BMP_STRING && **p != MBEDTLS_ASN1_UTF8_STRING      &&
   d69cc:	5c42      	ldrb	r2, [r0, r1]
        **p != MBEDTLS_ASN1_T61_STRING && **p != MBEDTLS_ASN1_PRINTABLE_STRING &&
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
   d69ce:	2a1e      	cmp	r2, #30
   d69d0:	d81c      	bhi.n	d6a0c <mbedtls_x509_get_name+0xb0>
   d69d2:	fa28 f202 	lsr.w	r2, r8, r2
   d69d6:	07d2      	lsls	r2, r2, #31
   d69d8:	d518      	bpl.n	d6a0c <mbedtls_x509_get_name+0xb0>
        **p != MBEDTLS_ASN1_BIT_STRING )
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    val = &cur->val;
    val->tag = *(*p)++;
   d69da:	3301      	adds	r3, #1
   d69dc:	6023      	str	r3, [r4, #0]
   d69de:	5c43      	ldrb	r3, [r0, r1]
   d69e0:	60eb      	str	r3, [r5, #12]

    if( ( ret = mbedtls_asn1_get_len( p, end, &val->len ) ) != 0 )
   d69e2:	f105 0210 	add.w	r2, r5, #16
   d69e6:	4649      	mov	r1, r9
   d69e8:	4620      	mov	r0, r4
   d69ea:	f7ff fcdd 	bl	d63a8 <mbedtls_asn1_get_len>
   d69ee:	b118      	cbz	r0, d69f8 <mbedtls_x509_get_name+0x9c>
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );
   d69f0:	f5a0 500e 	sub.w	r0, r0, #9088	; 0x2380

        end_set  = *p + set_len;

        while( 1 )
        {
            if( ( ret = x509_get_attr_type_value( p, end_set, cur ) ) != 0 )
   d69f4:	b170      	cbz	r0, d6a14 <mbedtls_x509_get_name+0xb8>
   d69f6:	e024      	b.n	d6a42 <mbedtls_x509_get_name+0xe6>
    val->tag = *(*p)++;

    if( ( ret = mbedtls_asn1_get_len( p, end, &val->len ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );

    val->p = *p;
   d69f8:	6823      	ldr	r3, [r4, #0]
   d69fa:	616b      	str	r3, [r5, #20]
    *p += val->len;
   d69fc:	6822      	ldr	r2, [r4, #0]
   d69fe:	692b      	ldr	r3, [r5, #16]
   d6a00:	4413      	add	r3, r2

    if( *p != end )
   d6a02:	4599      	cmp	r9, r3

    if( ( ret = mbedtls_asn1_get_len( p, end, &val->len ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );

    val->p = *p;
    *p += val->len;
   d6a04:	6023      	str	r3, [r4, #0]

    if( *p != end )
   d6a06:	d103      	bne.n	d6a10 <mbedtls_x509_get_name+0xb4>
    {
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    }

    cur->next = NULL;
   d6a08:	61a8      	str	r0, [r5, #24]
   d6a0a:	e003      	b.n	d6a14 <mbedtls_x509_get_name+0xb8>
    if( **p != MBEDTLS_ASN1_BMP_STRING && **p != MBEDTLS_ASN1_UTF8_STRING      &&
        **p != MBEDTLS_ASN1_T61_STRING && **p != MBEDTLS_ASN1_PRINTABLE_STRING &&
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
        **p != MBEDTLS_ASN1_BIT_STRING )
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
   d6a0c:	480f      	ldr	r0, [pc, #60]	; (d6a4c <mbedtls_x509_get_name+0xf0>)
   d6a0e:	e018      	b.n	d6a42 <mbedtls_x509_get_name+0xe6>
    *p += val->len;

    if( *p != end )
    {
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   d6a10:	480f      	ldr	r0, [pc, #60]	; (d6a50 <mbedtls_x509_get_name+0xf4>)
   d6a12:	e016      	b.n	d6a42 <mbedtls_x509_get_name+0xe6>
        while( 1 )
        {
            if( ( ret = x509_get_attr_type_value( p, end_set, cur ) ) != 0 )
                return( ret );

            if( *p == end_set )
   d6a14:	6823      	ldr	r3, [r4, #0]
   d6a16:	429e      	cmp	r6, r3
   d6a18:	d008      	beq.n	d6a2c <mbedtls_x509_get_name+0xd0>
                break;

            /* Mark this item as being no the only one in a set */
            cur->next_merged = 1;
   d6a1a:	2001      	movs	r0, #1
   d6a1c:	7728      	strb	r0, [r5, #28]

            cur->next = (mbedtls_asn1_named_data *)mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );
   d6a1e:	2120      	movs	r1, #32
   d6a20:	f012 ff28 	bl	e9874 <calloc>
   d6a24:	61a8      	str	r0, [r5, #24]

            if( cur->next == NULL )
   d6a26:	b158      	cbz	r0, d6a40 <mbedtls_x509_get_name+0xe4>
   d6a28:	4605      	mov	r5, r0
   d6a2a:	e7ac      	b.n	d6986 <mbedtls_x509_get_name+0x2a>
        }

        /*
         * continue until end of SEQUENCE is reached
         */
        if( *p == end )
   d6a2c:	42b7      	cmp	r7, r6
   d6a2e:	d008      	beq.n	d6a42 <mbedtls_x509_get_name+0xe6>
            return( 0 );

        cur->next = (mbedtls_asn1_named_data *)mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );
   d6a30:	2120      	movs	r1, #32
   d6a32:	2001      	movs	r0, #1
   d6a34:	f012 ff1e 	bl	e9874 <calloc>
   d6a38:	4681      	mov	r9, r0
   d6a3a:	61a8      	str	r0, [r5, #24]

        if( cur->next == NULL )
   d6a3c:	2800      	cmp	r0, #0
   d6a3e:	d194      	bne.n	d696a <mbedtls_x509_get_name+0xe>
            cur->next_merged = 1;

            cur->next = (mbedtls_asn1_named_data *)mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );

            if( cur->next == NULL )
                return( MBEDTLS_ERR_X509_ALLOC_FAILED );
   d6a40:	4804      	ldr	r0, [pc, #16]	; (d6a54 <mbedtls_x509_get_name+0xf8>)
        if( cur->next == NULL )
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );

        cur = cur->next;
    }
}
   d6a42:	b003      	add	sp, #12
   d6a44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d6a48:	ffffdc20 	.word	0xffffdc20
   d6a4c:	ffffdc1e 	.word	0xffffdc1e
   d6a50:	ffffdc1a 	.word	0xffffdc1a
   d6a54:	ffffd780 	.word	0xffffd780
   d6a58:	50581008 	.word	0x50581008

000d6a5c <mbedtls_x509_get_time>:
 *       utcTime        UTCTime,
 *       generalTime    GeneralizedTime }
 */
int mbedtls_x509_get_time( unsigned char **p, const unsigned char *end,
                           mbedtls_x509_time *tm )
{
   d6a5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    int ret;
    size_t len, year_len;
    unsigned char tag;

    if( ( end - *p ) < 1 )
   d6a5e:	6803      	ldr	r3, [r0, #0]
 *       utcTime        UTCTime,
 *       generalTime    GeneralizedTime }
 */
int mbedtls_x509_get_time( unsigned char **p, const unsigned char *end,
                           mbedtls_x509_time *tm )
{
   d6a60:	4614      	mov	r4, r2
    int ret;
    size_t len, year_len;
    unsigned char tag;

    if( ( end - *p ) < 1 )
   d6a62:	1aca      	subs	r2, r1, r3
   d6a64:	2a00      	cmp	r2, #0
 *       utcTime        UTCTime,
 *       generalTime    GeneralizedTime }
 */
int mbedtls_x509_get_time( unsigned char **p, const unsigned char *end,
                           mbedtls_x509_time *tm )
{
   d6a66:	4605      	mov	r5, r0
    int ret;
    size_t len, year_len;
    unsigned char tag;

    if( ( end - *p ) < 1 )
   d6a68:	f340 80a0 	ble.w	d6bac <mbedtls_x509_get_time+0x150>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag = **p;
   d6a6c:	781a      	ldrb	r2, [r3, #0]

    if( tag == MBEDTLS_ASN1_UTC_TIME )
   d6a6e:	2a17      	cmp	r2, #23
   d6a70:	d004      	beq.n	d6a7c <mbedtls_x509_get_time+0x20>
        year_len = 2;
    else if( tag == MBEDTLS_ASN1_GENERALIZED_TIME )
   d6a72:	2a18      	cmp	r2, #24
   d6a74:	f040 809c 	bne.w	d6bb0 <mbedtls_x509_get_time+0x154>
        year_len = 4;
   d6a78:	2704      	movs	r7, #4
   d6a7a:	e000      	b.n	d6a7e <mbedtls_x509_get_time+0x22>
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag = **p;

    if( tag == MBEDTLS_ASN1_UTC_TIME )
        year_len = 2;
   d6a7c:	2702      	movs	r7, #2
        year_len = 4;
    else
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
   d6a7e:	3301      	adds	r3, #1
   d6a80:	602b      	str	r3, [r5, #0]
    ret = mbedtls_asn1_get_len( p, end, &len );
   d6a82:	aa01      	add	r2, sp, #4
   d6a84:	4628      	mov	r0, r5
   d6a86:	f7ff fc8f 	bl	d63a8 <mbedtls_asn1_get_len>

    if( ret != 0 )
   d6a8a:	b110      	cbz	r0, d6a92 <mbedtls_x509_get_time+0x36>
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );
   d6a8c:	f5a0 5010 	sub.w	r0, r0, #9216	; 0x2400
   d6a90:	e091      	b.n	d6bb6 <mbedtls_x509_get_time+0x15a>

    return x509_parse_time( p, len, year_len, tm );
   d6a92:	9e01      	ldr	r6, [sp, #4]
    int ret;

    /*
     * Minimum length is 10 or 12 depending on yearlen
     */
    if ( len < yearlen + 8 )
   d6a94:	f107 0308 	add.w	r3, r7, #8
   d6a98:	429e      	cmp	r6, r3
   d6a9a:	f0c0 808b 	bcc.w	d6bb4 <mbedtls_x509_get_time+0x158>
    len -= yearlen + 8;

    /*
     * Parse year, month, day, hour, minute
     */
    CHECK( x509_parse_int( p, yearlen, &tm->year ) );
   d6a9e:	4622      	mov	r2, r4
   d6aa0:	4639      	mov	r1, r7
   d6aa2:	4628      	mov	r0, r5
   d6aa4:	f7ff fe16 	bl	d66d4 <_ZL14x509_parse_intPPhjPi>
   d6aa8:	2800      	cmp	r0, #0
   d6aaa:	f040 8084 	bne.w	d6bb6 <mbedtls_x509_get_time+0x15a>
    if ( 2 == yearlen )
   d6aae:	2f02      	cmp	r7, #2
   d6ab0:	d108      	bne.n	d6ac4 <mbedtls_x509_get_time+0x68>
    {
        if ( tm->year < 50 )
   d6ab2:	6823      	ldr	r3, [r4, #0]
   d6ab4:	2b31      	cmp	r3, #49	; 0x31
            tm->year += 100;
   d6ab6:	bfdc      	itt	le
   d6ab8:	3364      	addle	r3, #100	; 0x64
   d6aba:	6023      	strle	r3, [r4, #0]

        tm->year += 1900;
   d6abc:	6823      	ldr	r3, [r4, #0]
   d6abe:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d6ac2:	6023      	str	r3, [r4, #0]
    }

    CHECK( x509_parse_int( p, 2, &tm->mon ) );
   d6ac4:	1d22      	adds	r2, r4, #4
   d6ac6:	2102      	movs	r1, #2
   d6ac8:	4628      	mov	r0, r5
   d6aca:	f7ff fe03 	bl	d66d4 <_ZL14x509_parse_intPPhjPi>
   d6ace:	2800      	cmp	r0, #0
   d6ad0:	d171      	bne.n	d6bb6 <mbedtls_x509_get_time+0x15a>
    CHECK( x509_parse_int( p, 2, &tm->day ) );
   d6ad2:	f104 0208 	add.w	r2, r4, #8
   d6ad6:	2102      	movs	r1, #2
   d6ad8:	4628      	mov	r0, r5
   d6ada:	f7ff fdfb 	bl	d66d4 <_ZL14x509_parse_intPPhjPi>
   d6ade:	2800      	cmp	r0, #0
   d6ae0:	d169      	bne.n	d6bb6 <mbedtls_x509_get_time+0x15a>
    CHECK( x509_parse_int( p, 2, &tm->hour ) );
   d6ae2:	f104 020c 	add.w	r2, r4, #12
   d6ae6:	2102      	movs	r1, #2
   d6ae8:	4628      	mov	r0, r5
   d6aea:	f7ff fdf3 	bl	d66d4 <_ZL14x509_parse_intPPhjPi>
   d6aee:	2800      	cmp	r0, #0
   d6af0:	d161      	bne.n	d6bb6 <mbedtls_x509_get_time+0x15a>
    CHECK( x509_parse_int( p, 2, &tm->min ) );
   d6af2:	f104 0210 	add.w	r2, r4, #16
   d6af6:	2102      	movs	r1, #2
   d6af8:	4628      	mov	r0, r5
   d6afa:	f7ff fdeb 	bl	d66d4 <_ZL14x509_parse_intPPhjPi>
   d6afe:	2800      	cmp	r0, #0
   d6b00:	d159      	bne.n	d6bb6 <mbedtls_x509_get_time+0x15a>
    /*
     * Minimum length is 10 or 12 depending on yearlen
     */
    if ( len < yearlen + 8 )
        return ( MBEDTLS_ERR_X509_INVALID_DATE );
    len -= yearlen + 8;
   d6b02:	1bf6      	subs	r6, r6, r7
    CHECK( x509_parse_int( p, 2, &tm->min ) );

    /*
     * Parse seconds if present
     */
    if ( len >= 2 )
   d6b04:	f1a6 0308 	sub.w	r3, r6, #8
   d6b08:	2b01      	cmp	r3, #1
   d6b0a:	d953      	bls.n	d6bb4 <mbedtls_x509_get_time+0x158>
    {
        CHECK( x509_parse_int( p, 2, &tm->sec ) );
   d6b0c:	f104 0214 	add.w	r2, r4, #20
   d6b10:	2102      	movs	r1, #2
   d6b12:	4628      	mov	r0, r5
   d6b14:	f7ff fdde 	bl	d66d4 <_ZL14x509_parse_intPPhjPi>
   d6b18:	2800      	cmp	r0, #0
   d6b1a:	d14c      	bne.n	d6bb6 <mbedtls_x509_get_time+0x15a>
        len -= 2;
   d6b1c:	f1a6 030a 	sub.w	r3, r6, #10
        return ( MBEDTLS_ERR_X509_INVALID_DATE );

    /*
     * Parse trailing 'Z' if present
     */
    if ( 1 == len && 'Z' == **p )
   d6b20:	2b01      	cmp	r3, #1
   d6b22:	d107      	bne.n	d6b34 <mbedtls_x509_get_time+0xd8>
   d6b24:	682b      	ldr	r3, [r5, #0]
   d6b26:	781a      	ldrb	r2, [r3, #0]
   d6b28:	2a5a      	cmp	r2, #90	; 0x5a
   d6b2a:	d143      	bne.n	d6bb4 <mbedtls_x509_get_time+0x158>
    {
        (*p)++;
   d6b2c:	3301      	adds	r3, #1
   d6b2e:	602b      	str	r3, [r5, #0]
        len--;
   d6b30:	f1a6 030b 	sub.w	r3, r6, #11
    }

    /*
     * We should have parsed all characters at this point
     */
    if ( 0 != len )
   d6b34:	2b00      	cmp	r3, #0
   d6b36:	d13d      	bne.n	d6bb4 <mbedtls_x509_get_time+0x158>
static int x509_date_is_valid(const mbedtls_x509_time *t )
{
    int ret = MBEDTLS_ERR_X509_INVALID_DATE;
    int month_len;

    CHECK_RANGE( 0, 9999, t->year );
   d6b38:	6823      	ldr	r3, [r4, #0]
   d6b3a:	f242 720f 	movw	r2, #9999	; 0x270f
   d6b3e:	4293      	cmp	r3, r2
   d6b40:	d838      	bhi.n	d6bb4 <mbedtls_x509_get_time+0x158>
    CHECK_RANGE( 0, 23,   t->hour );
   d6b42:	68e2      	ldr	r2, [r4, #12]
   d6b44:	2a17      	cmp	r2, #23
   d6b46:	d835      	bhi.n	d6bb4 <mbedtls_x509_get_time+0x158>
    CHECK_RANGE( 0, 59,   t->min  );
   d6b48:	6922      	ldr	r2, [r4, #16]
   d6b4a:	2a3b      	cmp	r2, #59	; 0x3b
   d6b4c:	d832      	bhi.n	d6bb4 <mbedtls_x509_get_time+0x158>
    CHECK_RANGE( 0, 59,   t->sec  );
   d6b4e:	6962      	ldr	r2, [r4, #20]
   d6b50:	2a3b      	cmp	r2, #59	; 0x3b
   d6b52:	d82f      	bhi.n	d6bb4 <mbedtls_x509_get_time+0x158>
   d6b54:	6861      	ldr	r1, [r4, #4]
   d6b56:	290c      	cmp	r1, #12
   d6b58:	d82c      	bhi.n	d6bb4 <mbedtls_x509_get_time+0x158>
   d6b5a:	2201      	movs	r2, #1
   d6b5c:	408a      	lsls	r2, r1
   d6b5e:	f241 51aa 	movw	r1, #5546	; 0x15aa
   d6b62:	4011      	ands	r1, r2
   d6b64:	b9b9      	cbnz	r1, d6b96 <mbedtls_x509_get_time+0x13a>
   d6b66:	f412 6f25 	tst.w	r2, #2640	; 0xa50
   d6b6a:	d116      	bne.n	d6b9a <mbedtls_x509_get_time+0x13e>
   d6b6c:	0751      	lsls	r1, r2, #29
   d6b6e:	d521      	bpl.n	d6bb4 <mbedtls_x509_get_time+0x158>
            break;
        case 4: case 6: case 9: case 11:
            month_len = 30;
            break;
        case 2:
            if( ( !( t->year % 4 ) && t->year % 100 ) ||
   d6b70:	079a      	lsls	r2, r3, #30
   d6b72:	d105      	bne.n	d6b80 <mbedtls_x509_get_time+0x124>
   d6b74:	2164      	movs	r1, #100	; 0x64
   d6b76:	fb93 f2f1 	sdiv	r2, r3, r1
   d6b7a:	fb01 3212 	mls	r2, r1, r2, r3
   d6b7e:	b972      	cbnz	r2, d6b9e <mbedtls_x509_get_time+0x142>
   d6b80:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d6b84:	fb93 f2f1 	sdiv	r2, r3, r1
   d6b88:	fb01 3312 	mls	r3, r1, r2, r3
                !( t->year % 400 ) )
                month_len = 29;
            else
                month_len = 28;
   d6b8c:	2b00      	cmp	r3, #0
   d6b8e:	bf0c      	ite	eq
   d6b90:	231d      	moveq	r3, #29
   d6b92:	231c      	movne	r3, #28
   d6b94:	e004      	b.n	d6ba0 <mbedtls_x509_get_time+0x144>
    CHECK_RANGE( 0, 59,   t->sec  );

    switch( t->mon )
    {
        case 1: case 3: case 5: case 7: case 8: case 10: case 12:
            month_len = 31;
   d6b96:	231f      	movs	r3, #31
   d6b98:	e002      	b.n	d6ba0 <mbedtls_x509_get_time+0x144>
            break;
        case 4: case 6: case 9: case 11:
            month_len = 30;
   d6b9a:	231e      	movs	r3, #30
   d6b9c:	e000      	b.n	d6ba0 <mbedtls_x509_get_time+0x144>
            break;
        case 2:
            if( ( !( t->year % 4 ) && t->year % 100 ) ||
                !( t->year % 400 ) )
                month_len = 29;
   d6b9e:	231d      	movs	r3, #29
                month_len = 28;
            break;
        default:
            return( ret );
    }
    CHECK_RANGE( 1, month_len, t->day );
   d6ba0:	68a2      	ldr	r2, [r4, #8]
   d6ba2:	2a00      	cmp	r2, #0
   d6ba4:	dd06      	ble.n	d6bb4 <mbedtls_x509_get_time+0x158>
   d6ba6:	429a      	cmp	r2, r3
   d6ba8:	dd05      	ble.n	d6bb6 <mbedtls_x509_get_time+0x15a>
   d6baa:	e003      	b.n	d6bb4 <mbedtls_x509_get_time+0x158>
    size_t len, year_len;
    unsigned char tag;

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   d6bac:	4803      	ldr	r0, [pc, #12]	; (d6bbc <mbedtls_x509_get_time+0x160>)
   d6bae:	e002      	b.n	d6bb6 <mbedtls_x509_get_time+0x15a>
        year_len = 2;
    else if( tag == MBEDTLS_ASN1_GENERALIZED_TIME )
        year_len = 4;
    else
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
   d6bb0:	4803      	ldr	r0, [pc, #12]	; (d6bc0 <mbedtls_x509_get_time+0x164>)
   d6bb2:	e000      	b.n	d6bb6 <mbedtls_x509_get_time+0x15a>
   d6bb4:	4803      	ldr	r0, [pc, #12]	; (d6bc4 <mbedtls_x509_get_time+0x168>)

    if( ret != 0 )
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );

    return x509_parse_time( p, len, year_len, tm );
}
   d6bb6:	b003      	add	sp, #12
   d6bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6bba:	bf00      	nop
   d6bbc:	ffffdba0 	.word	0xffffdba0
   d6bc0:	ffffdb9e 	.word	0xffffdb9e
   d6bc4:	ffffdc00 	.word	0xffffdc00

000d6bc8 <mbedtls_x509_get_sig>:

int mbedtls_x509_get_sig( unsigned char **p, const unsigned char *end, mbedtls_x509_buf *sig )
{
   d6bc8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    int ret;
    size_t len;
    int tag_type;

    if( ( end - *p ) < 1 )
   d6bca:	6803      	ldr	r3, [r0, #0]

    return x509_parse_time( p, len, year_len, tm );
}

int mbedtls_x509_get_sig( unsigned char **p, const unsigned char *end, mbedtls_x509_buf *sig )
{
   d6bcc:	4615      	mov	r5, r2
    int ret;
    size_t len;
    int tag_type;

    if( ( end - *p ) < 1 )
   d6bce:	1aca      	subs	r2, r1, r3
   d6bd0:	2a00      	cmp	r2, #0

    return x509_parse_time( p, len, year_len, tm );
}

int mbedtls_x509_get_sig( unsigned char **p, const unsigned char *end, mbedtls_x509_buf *sig )
{
   d6bd2:	4604      	mov	r4, r0
    int ret;
    size_t len;
    int tag_type;

    if( ( end - *p ) < 1 )
   d6bd4:	dd10      	ble.n	d6bf8 <mbedtls_x509_get_sig+0x30>
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag_type = **p;

    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
   d6bd6:	aa01      	add	r2, sp, #4

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag_type = **p;
   d6bd8:	781e      	ldrb	r6, [r3, #0]

    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
   d6bda:	f7ff fcc0 	bl	d655e <mbedtls_asn1_get_bitstring_null>
   d6bde:	b110      	cbz	r0, d6be6 <mbedtls_x509_get_sig+0x1e>
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE + ret );
   d6be0:	f5a0 5012 	sub.w	r0, r0, #9344	; 0x2480
   d6be4:	e009      	b.n	d6bfa <mbedtls_x509_get_sig+0x32>

    sig->tag = tag_type;
    sig->len = len;
   d6be6:	9b01      	ldr	r3, [sp, #4]
   d6be8:	606b      	str	r3, [r5, #4]
    tag_type = **p;

    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE + ret );

    sig->tag = tag_type;
   d6bea:	602e      	str	r6, [r5, #0]
    sig->len = len;
    sig->p = *p;
   d6bec:	6822      	ldr	r2, [r4, #0]
   d6bee:	60aa      	str	r2, [r5, #8]

    *p += len;
   d6bf0:	6822      	ldr	r2, [r4, #0]
   d6bf2:	4413      	add	r3, r2
   d6bf4:	6023      	str	r3, [r4, #0]

    return( 0 );
   d6bf6:	e000      	b.n	d6bfa <mbedtls_x509_get_sig+0x32>
    size_t len;
    int tag_type;

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   d6bf8:	4801      	ldr	r0, [pc, #4]	; (d6c00 <mbedtls_x509_get_sig+0x38>)
    sig->p = *p;

    *p += len;

    return( 0 );
}
   d6bfa:	b002      	add	sp, #8
   d6bfc:	bd70      	pop	{r4, r5, r6, pc}
   d6bfe:	bf00      	nop
   d6c00:	ffffdb20 	.word	0xffffdb20

000d6c04 <mbedtls_x509_get_sig_alg>:
 * Get signature algorithm from alg OID and optional parameters
 */
int mbedtls_x509_get_sig_alg( const mbedtls_x509_buf *sig_oid, const mbedtls_x509_buf *sig_params,
                      mbedtls_md_type_t *md_alg, mbedtls_pk_type_t *pk_alg,
                      void **sig_opts )
{
   d6c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6c08:	9f06      	ldr	r7, [sp, #24]
   d6c0a:	461d      	mov	r5, r3
    int ret;

    if( *sig_opts != NULL )
   d6c0c:	683b      	ldr	r3, [r7, #0]
 * Get signature algorithm from alg OID and optional parameters
 */
int mbedtls_x509_get_sig_alg( const mbedtls_x509_buf *sig_oid, const mbedtls_x509_buf *sig_params,
                      mbedtls_md_type_t *md_alg, mbedtls_pk_type_t *pk_alg,
                      void **sig_opts )
{
   d6c0e:	460e      	mov	r6, r1
   d6c10:	4690      	mov	r8, r2
    int ret;

    if( *sig_opts != NULL )
   d6c12:	bb43      	cbnz	r3, d6c66 <mbedtls_x509_get_sig_alg+0x62>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    if( ( ret = mbedtls_oid_get_sig_alg( sig_oid, md_alg, pk_alg ) ) != 0 )
   d6c14:	462a      	mov	r2, r5
   d6c16:	4641      	mov	r1, r8
   d6c18:	f003 f984 	bl	d9f24 <mbedtls_oid_get_sig_alg>
   d6c1c:	b110      	cbz	r0, d6c24 <mbedtls_x509_get_sig_alg+0x20>
        return( MBEDTLS_ERR_X509_UNKNOWN_SIG_ALG + ret );
   d6c1e:	f5a0 5418 	sub.w	r4, r0, #9728	; 0x2600
   d6c22:	e025      	b.n	d6c70 <mbedtls_x509_get_sig_alg+0x6c>

#if defined(MBEDTLS_X509_RSASSA_PSS_SUPPORT)
    if( *pk_alg == MBEDTLS_PK_RSASSA_PSS )
   d6c24:	782b      	ldrb	r3, [r5, #0]
   d6c26:	2b06      	cmp	r3, #6
   d6c28:	d113      	bne.n	d6c52 <mbedtls_x509_get_sig_alg+0x4e>
    {
        mbedtls_pk_rsassa_pss_options *pss_opts;

        pss_opts = (mbedtls_pk_rsassa_pss_options *)mbedtls_calloc( 1, sizeof( mbedtls_pk_rsassa_pss_options ) );
   d6c2a:	2108      	movs	r1, #8
   d6c2c:	2001      	movs	r0, #1
   d6c2e:	f012 fe21 	bl	e9874 <calloc>
        if( pss_opts == NULL )
   d6c32:	4605      	mov	r5, r0
   d6c34:	b1c8      	cbz	r0, d6c6a <mbedtls_x509_get_sig_alg+0x66>
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );

        ret = mbedtls_x509_get_rsassa_pss_params( sig_params,
   d6c36:	1d03      	adds	r3, r0, #4
   d6c38:	4602      	mov	r2, r0
   d6c3a:	4641      	mov	r1, r8
   d6c3c:	4630      	mov	r0, r6
   d6c3e:	f7ff fd9d 	bl	d677c <mbedtls_x509_get_rsassa_pss_params>
                                          md_alg,
                                          &pss_opts->mgf1_hash_id,
                                          &pss_opts->expected_salt_len );
        if( ret != 0 )
   d6c42:	4604      	mov	r4, r0
   d6c44:	b118      	cbz	r0, d6c4e <mbedtls_x509_get_sig_alg+0x4a>
        {
            mbedtls_free( pss_opts );
   d6c46:	4628      	mov	r0, r5
   d6c48:	f00f fa3c 	bl	e60c4 <free>
            return( ret );
   d6c4c:	e010      	b.n	d6c70 <mbedtls_x509_get_sig_alg+0x6c>
        }

        *sig_opts = (void *) pss_opts;
   d6c4e:	603d      	str	r5, [r7, #0]
   d6c50:	e00e      	b.n	d6c70 <mbedtls_x509_get_sig_alg+0x6c>
    }
    else
#endif /* MBEDTLS_X509_RSASSA_PSS_SUPPORT */
    {
        /* Make sure parameters are absent or NULL */
        if( ( sig_params->tag != MBEDTLS_ASN1_NULL && sig_params->tag != 0 ) ||
   d6c52:	6833      	ldr	r3, [r6, #0]
   d6c54:	2b05      	cmp	r3, #5
   d6c56:	d000      	beq.n	d6c5a <mbedtls_x509_get_sig_alg+0x56>
   d6c58:	b94b      	cbnz	r3, d6c6e <mbedtls_x509_get_sig_alg+0x6a>
   d6c5a:	6873      	ldr	r3, [r6, #4]
              sig_params->len != 0 )
        return( MBEDTLS_ERR_X509_INVALID_ALG );
   d6c5c:	4c06      	ldr	r4, [pc, #24]	; (d6c78 <mbedtls_x509_get_sig_alg+0x74>)
   d6c5e:	2b00      	cmp	r3, #0
   d6c60:	bf08      	it	eq
   d6c62:	2400      	moveq	r4, #0
   d6c64:	e004      	b.n	d6c70 <mbedtls_x509_get_sig_alg+0x6c>
                      void **sig_opts )
{
    int ret;

    if( *sig_opts != NULL )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
   d6c66:	4c05      	ldr	r4, [pc, #20]	; (d6c7c <mbedtls_x509_get_sig_alg+0x78>)
   d6c68:	e002      	b.n	d6c70 <mbedtls_x509_get_sig_alg+0x6c>
    {
        mbedtls_pk_rsassa_pss_options *pss_opts;

        pss_opts = (mbedtls_pk_rsassa_pss_options *)mbedtls_calloc( 1, sizeof( mbedtls_pk_rsassa_pss_options ) );
        if( pss_opts == NULL )
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );
   d6c6a:	4c05      	ldr	r4, [pc, #20]	; (d6c80 <mbedtls_x509_get_sig_alg+0x7c>)
   d6c6c:	e000      	b.n	d6c70 <mbedtls_x509_get_sig_alg+0x6c>
#endif /* MBEDTLS_X509_RSASSA_PSS_SUPPORT */
    {
        /* Make sure parameters are absent or NULL */
        if( ( sig_params->tag != MBEDTLS_ASN1_NULL && sig_params->tag != 0 ) ||
              sig_params->len != 0 )
        return( MBEDTLS_ERR_X509_INVALID_ALG );
   d6c6e:	4c02      	ldr	r4, [pc, #8]	; (d6c78 <mbedtls_x509_get_sig_alg+0x74>)
    }

    return( 0 );
}
   d6c70:	4620      	mov	r0, r4
   d6c72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6c76:	bf00      	nop
   d6c78:	ffffdd00 	.word	0xffffdd00
   d6c7c:	ffffd800 	.word	0xffffd800
   d6c80:	ffffd780 	.word	0xffffd780

000d6c84 <mbedtls_x509_get_ext>:
 * X.509 Extensions (No parsing of extensions, pointer should
 * be either manually updated or extensions should be parsed!)
 */
int mbedtls_x509_get_ext( unsigned char **p, const unsigned char *end,
                          mbedtls_x509_buf *ext, int tag )
{
   d6c84:	b573      	push	{r0, r1, r4, r5, r6, lr}
    size_t len;

    /* Extension structure use EXPLICIT tagging. That is, the actual
     * `Extensions` structure is wrapped by a tag-length pair using
     * the respective context-specific tag. */
    ret = mbedtls_asn1_get_tag( p, end, &ext->len,
   d6c86:	f043 04a0 	orr.w	r4, r3, #160	; 0xa0
 * X.509 Extensions (No parsing of extensions, pointer should
 * be either manually updated or extensions should be parsed!)
 */
int mbedtls_x509_get_ext( unsigned char **p, const unsigned char *end,
                          mbedtls_x509_buf *ext, int tag )
{
   d6c8a:	4616      	mov	r6, r2

    /* Extension structure use EXPLICIT tagging. That is, the actual
     * `Extensions` structure is wrapped by a tag-length pair using
     * the respective context-specific tag. */
    ret = mbedtls_asn1_get_tag( p, end, &ext->len,
              MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | tag );
   d6c8c:	4623      	mov	r3, r4
   d6c8e:	3204      	adds	r2, #4
 * X.509 Extensions (No parsing of extensions, pointer should
 * be either manually updated or extensions should be parsed!)
 */
int mbedtls_x509_get_ext( unsigned char **p, const unsigned char *end,
                          mbedtls_x509_buf *ext, int tag )
{
   d6c90:	4605      	mov	r5, r0

    /* Extension structure use EXPLICIT tagging. That is, the actual
     * `Extensions` structure is wrapped by a tag-length pair using
     * the respective context-specific tag. */
    ret = mbedtls_asn1_get_tag( p, end, &ext->len,
              MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | tag );
   d6c92:	f7ff fbdb 	bl	d644c <mbedtls_asn1_get_tag>
    if( ret != 0 )
   d6c96:	b960      	cbnz	r0, d6cb2 <mbedtls_x509_get_ext+0x2e>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    ext->tag = MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | tag;
   d6c98:	6034      	str	r4, [r6, #0]
    ext->p   = *p;
   d6c9a:	682b      	ldr	r3, [r5, #0]
   d6c9c:	60b3      	str	r3, [r6, #8]
    end      = *p + ext->len;
   d6c9e:	6828      	ldr	r0, [r5, #0]
   d6ca0:	6873      	ldr	r3, [r6, #4]
   d6ca2:	18c4      	adds	r4, r0, r3

    /*
     * Extensions  ::=  SEQUENCE SIZE (1..MAX) OF Extension
     */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   d6ca4:	aa01      	add	r2, sp, #4
   d6ca6:	2330      	movs	r3, #48	; 0x30
   d6ca8:	4621      	mov	r1, r4
   d6caa:	4628      	mov	r0, r5
   d6cac:	f7ff fbce 	bl	d644c <mbedtls_asn1_get_tag>
   d6cb0:	b110      	cbz	r0, d6cb8 <mbedtls_x509_get_ext+0x34>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
   d6cb2:	f5a0 5014 	sub.w	r0, r0, #9472	; 0x2500
   d6cb6:	e007      	b.n	d6cc8 <mbedtls_x509_get_ext+0x44>

    if( end != *p + len )
   d6cb8:	9b01      	ldr	r3, [sp, #4]
   d6cba:	6828      	ldr	r0, [r5, #0]
   d6cbc:	4418      	add	r0, r3
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
   d6cbe:	4b03      	ldr	r3, [pc, #12]	; (d6ccc <mbedtls_x509_get_ext+0x48>)
   d6cc0:	4284      	cmp	r4, r0
   d6cc2:	bf14      	ite	ne
   d6cc4:	4618      	movne	r0, r3
   d6cc6:	2000      	moveq	r0, #0
}
   d6cc8:	b002      	add	sp, #8
   d6cca:	bd70      	pop	{r4, r5, r6, pc}
   d6ccc:	ffffda9a 	.word	0xffffda9a

000d6cd0 <mbedtls_x509_dn_gets>:
/*
 * Store the name in printable form into buf; no more
 * than size characters will be written
 */
int mbedtls_x509_dn_gets( char *buf, size_t size, const mbedtls_x509_name *dn )
{
   d6cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6cd4:	b0c2      	sub	sp, #264	; 0x108
    int ret;
    size_t i, n;
    unsigned char c, merge = 0;
    const mbedtls_x509_name *name;
    const char *short_name = NULL;
   d6cd6:	f04f 0a00 	mov.w	sl, #0
    char s[MBEDTLS_X509_MAX_DN_NAME_SIZE], *p;

    memset( s, 0, sizeof( s ) );
   d6cda:	f10d 0808 	add.w	r8, sp, #8
/*
 * Store the name in printable form into buf; no more
 * than size characters will be written
 */
int mbedtls_x509_dn_gets( char *buf, size_t size, const mbedtls_x509_name *dn )
{
   d6cde:	460f      	mov	r7, r1
   d6ce0:	4691      	mov	r9, r2
    unsigned char c, merge = 0;
    const mbedtls_x509_name *name;
    const char *short_name = NULL;
    char s[MBEDTLS_X509_MAX_DN_NAME_SIZE], *p;

    memset( s, 0, sizeof( s ) );
   d6ce2:	4651      	mov	r1, sl
   d6ce4:	f44f 7280 	mov.w	r2, #256	; 0x100
/*
 * Store the name in printable form into buf; no more
 * than size characters will be written
 */
int mbedtls_x509_dn_gets( char *buf, size_t size, const mbedtls_x509_name *dn )
{
   d6ce8:	4604      	mov	r4, r0
    unsigned char c, merge = 0;
    const mbedtls_x509_name *name;
    const char *short_name = NULL;
    char s[MBEDTLS_X509_MAX_DN_NAME_SIZE], *p;

    memset( s, 0, sizeof( s ) );
   d6cea:	4640      	mov	r0, r8
{
    int ret;
    size_t i, n;
    unsigned char c, merge = 0;
    const mbedtls_x509_name *name;
    const char *short_name = NULL;
   d6cec:	f8cd a004 	str.w	sl, [sp, #4]
    char s[MBEDTLS_X509_MAX_DN_NAME_SIZE], *p;

    memset( s, 0, sizeof( s ) );

    name = dn;
   d6cf0:	464e      	mov	r6, r9
    unsigned char c, merge = 0;
    const mbedtls_x509_name *name;
    const char *short_name = NULL;
    char s[MBEDTLS_X509_MAX_DN_NAME_SIZE], *p;

    memset( s, 0, sizeof( s ) );
   d6cf2:	f012 ff06 	bl	e9b02 <memset>

    name = dn;
    p = buf;
    n = size;
   d6cf6:	463d      	mov	r5, r7
 */
int mbedtls_x509_dn_gets( char *buf, size_t size, const mbedtls_x509_name *dn )
{
    int ret;
    size_t i, n;
    unsigned char c, merge = 0;
   d6cf8:	4652      	mov	r2, sl
            if( i >= sizeof( s ) - 1 )
                break;

            c = name->val.p[i];
            if( c < 32 || c == 127 || ( c > 128 && c < 160 ) )
                 s[i] = '?';
   d6cfa:	f04f 0a3f 	mov.w	sl, #63	; 0x3f

    name = dn;
    p = buf;
    n = size;

    while( name != NULL )
   d6cfe:	2e00      	cmp	r6, #0
   d6d00:	d057      	beq.n	d6db2 <mbedtls_x509_dn_gets+0xe2>
    {
        if( !name->oid.p )
   d6d02:	68b3      	ldr	r3, [r6, #8]
   d6d04:	2b00      	cmp	r3, #0
   d6d06:	d052      	beq.n	d6dae <mbedtls_x509_dn_gets+0xde>
        {
            name = name->next;
            continue;
        }

        if( name != dn )
   d6d08:	454e      	cmp	r6, r9
   d6d0a:	d011      	beq.n	d6d30 <mbedtls_x509_dn_gets+0x60>
        {
            ret = mbedtls_snprintf( p, n, merge ? " + " : ", " );
   d6d0c:	4b2b      	ldr	r3, [pc, #172]	; (d6dbc <mbedtls_x509_dn_gets+0xec>)
   d6d0e:	492c      	ldr	r1, [pc, #176]	; (d6dc0 <mbedtls_x509_dn_gets+0xf0>)
   d6d10:	4620      	mov	r0, r4
   d6d12:	2a00      	cmp	r2, #0
   d6d14:	bf14      	ite	ne
   d6d16:	460a      	movne	r2, r1
   d6d18:	461a      	moveq	r2, r3
   d6d1a:	4629      	mov	r1, r5
   d6d1c:	f00f f9fa 	bl	e6114 <snprintf>
            MBEDTLS_X509_SAFE_SNPRINTF;
   d6d20:	2800      	cmp	r0, #0
   d6d22:	da01      	bge.n	d6d28 <mbedtls_x509_dn_gets+0x58>
   d6d24:	4827      	ldr	r0, [pc, #156]	; (d6dc4 <mbedtls_x509_dn_gets+0xf4>)
   d6d26:	e045      	b.n	d6db4 <mbedtls_x509_dn_gets+0xe4>
   d6d28:	4285      	cmp	r5, r0
   d6d2a:	d9fb      	bls.n	d6d24 <mbedtls_x509_dn_gets+0x54>
   d6d2c:	1a2d      	subs	r5, r5, r0
   d6d2e:	4404      	add	r4, r0
        }

        ret = mbedtls_oid_get_attr_short_name( &name->oid, &short_name );
   d6d30:	a901      	add	r1, sp, #4
   d6d32:	4630      	mov	r0, r6
   d6d34:	f003 f89c 	bl	d9e70 <mbedtls_oid_get_attr_short_name>

        if( ret == 0 )
   d6d38:	b930      	cbnz	r0, d6d48 <mbedtls_x509_dn_gets+0x78>
            ret = mbedtls_snprintf( p, n, "%s=", short_name );
   d6d3a:	9b01      	ldr	r3, [sp, #4]
   d6d3c:	4a22      	ldr	r2, [pc, #136]	; (d6dc8 <mbedtls_x509_dn_gets+0xf8>)
   d6d3e:	4629      	mov	r1, r5
   d6d40:	4620      	mov	r0, r4
   d6d42:	f00f f9e7 	bl	e6114 <snprintf>
   d6d46:	e004      	b.n	d6d52 <mbedtls_x509_dn_gets+0x82>
        else
            ret = mbedtls_snprintf( p, n, "\?\?=" );
   d6d48:	4a20      	ldr	r2, [pc, #128]	; (d6dcc <mbedtls_x509_dn_gets+0xfc>)
   d6d4a:	4629      	mov	r1, r5
   d6d4c:	4620      	mov	r0, r4
   d6d4e:	f00f f9e1 	bl	e6114 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   d6d52:	2800      	cmp	r0, #0
   d6d54:	dbe6      	blt.n	d6d24 <mbedtls_x509_dn_gets+0x54>
   d6d56:	4285      	cmp	r5, r0
   d6d58:	d9e4      	bls.n	d6d24 <mbedtls_x509_dn_gets+0x54>
   d6d5a:	1a2d      	subs	r5, r5, r0
   d6d5c:	4404      	add	r4, r0

        for( i = 0; i < name->val.len; i++ )
   d6d5e:	2300      	movs	r3, #0
   d6d60:	6932      	ldr	r2, [r6, #16]
   d6d62:	4293      	cmp	r3, r2
   d6d64:	d213      	bcs.n	d6d8e <mbedtls_x509_dn_gets+0xbe>
        {
            if( i >= sizeof( s ) - 1 )
   d6d66:	2bff      	cmp	r3, #255	; 0xff
   d6d68:	d011      	beq.n	d6d8e <mbedtls_x509_dn_gets+0xbe>
                break;

            c = name->val.p[i];
   d6d6a:	6972      	ldr	r2, [r6, #20]
   d6d6c:	5cd2      	ldrb	r2, [r2, r3]
            if( c < 32 || c == 127 || ( c > 128 && c < 160 ) )
   d6d6e:	2a1f      	cmp	r2, #31
   d6d70:	d906      	bls.n	d6d80 <mbedtls_x509_dn_gets+0xb0>
   d6d72:	2a7f      	cmp	r2, #127	; 0x7f
   d6d74:	d004      	beq.n	d6d80 <mbedtls_x509_dn_gets+0xb0>
   d6d76:	f102 017f 	add.w	r1, r2, #127	; 0x7f
   d6d7a:	b2c9      	uxtb	r1, r1
   d6d7c:	291e      	cmp	r1, #30
   d6d7e:	d802      	bhi.n	d6d86 <mbedtls_x509_dn_gets+0xb6>
                 s[i] = '?';
   d6d80:	f808 a003 	strb.w	sl, [r8, r3]
   d6d84:	e001      	b.n	d6d8a <mbedtls_x509_dn_gets+0xba>
            else s[i] = c;
   d6d86:	f808 2003 	strb.w	r2, [r8, r3]
            ret = mbedtls_snprintf( p, n, "%s=", short_name );
        else
            ret = mbedtls_snprintf( p, n, "\?\?=" );
        MBEDTLS_X509_SAFE_SNPRINTF;

        for( i = 0; i < name->val.len; i++ )
   d6d8a:	3301      	adds	r3, #1
   d6d8c:	e7e8      	b.n	d6d60 <mbedtls_x509_dn_gets+0x90>
            c = name->val.p[i];
            if( c < 32 || c == 127 || ( c > 128 && c < 160 ) )
                 s[i] = '?';
            else s[i] = c;
        }
        s[i] = '\0';
   d6d8e:	2200      	movs	r2, #0
   d6d90:	f808 2003 	strb.w	r2, [r8, r3]
        ret = mbedtls_snprintf( p, n, "%s", s );
   d6d94:	4629      	mov	r1, r5
   d6d96:	4643      	mov	r3, r8
   d6d98:	4a0d      	ldr	r2, [pc, #52]	; (d6dd0 <mbedtls_x509_dn_gets+0x100>)
   d6d9a:	4620      	mov	r0, r4
   d6d9c:	f00f f9ba 	bl	e6114 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   d6da0:	2800      	cmp	r0, #0
   d6da2:	dbbf      	blt.n	d6d24 <mbedtls_x509_dn_gets+0x54>
   d6da4:	4285      	cmp	r5, r0
   d6da6:	d9bd      	bls.n	d6d24 <mbedtls_x509_dn_gets+0x54>

        merge = name->next_merged;
   d6da8:	7f32      	ldrb	r2, [r6, #28]
                 s[i] = '?';
            else s[i] = c;
        }
        s[i] = '\0';
        ret = mbedtls_snprintf( p, n, "%s", s );
        MBEDTLS_X509_SAFE_SNPRINTF;
   d6daa:	1a2d      	subs	r5, r5, r0
   d6dac:	4404      	add	r4, r0

        merge = name->next_merged;
        name = name->next;
   d6dae:	69b6      	ldr	r6, [r6, #24]
   d6db0:	e7a5      	b.n	d6cfe <mbedtls_x509_dn_gets+0x2e>
    }

    return( (int) ( size - n ) );
   d6db2:	1b78      	subs	r0, r7, r5
}
   d6db4:	b042      	add	sp, #264	; 0x108
   d6db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6dba:	bf00      	nop
   d6dbc:	000ecaba 	.word	0x000ecaba
   d6dc0:	000ecab6 	.word	0x000ecab6
   d6dc4:	ffffd680 	.word	0xffffd680
   d6dc8:	000ecabd 	.word	0x000ecabd
   d6dcc:	000ecac1 	.word	0x000ecac1
   d6dd0:	000ee0ee 	.word	0x000ee0ee

000d6dd4 <mbedtls_x509_serial_gets>:
/*
 * Store the serial in printable form into buf; no more
 * than size characters will be written
 */
int mbedtls_x509_serial_gets( char *buf, size_t size, const mbedtls_x509_buf *serial )
{
   d6dd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    char *p;

    p = buf;
    n = size;

    nr = ( serial->len <= 32 )
   d6dd8:	6856      	ldr	r6, [r2, #4]
    for( i = 0; i < nr; i++ )
    {
        if( i == 0 && nr > 1 && serial->p[i] == 0x0 )
            continue;

        ret = mbedtls_snprintf( p, n, "%02X%s",
   d6dda:	f8df a084 	ldr.w	sl, [pc, #132]	; d6e60 <mbedtls_x509_serial_gets+0x8c>
   d6dde:	f8df b084 	ldr.w	fp, [pc, #132]	; d6e64 <mbedtls_x509_serial_gets+0x90>

    p = buf;
    n = size;

    nr = ( serial->len <= 32 )
        ? serial->len  : 28;
   d6de2:	2e21      	cmp	r6, #33	; 0x21
/*
 * Store the serial in printable form into buf; no more
 * than size characters will be written
 */
int mbedtls_x509_serial_gets( char *buf, size_t size, const mbedtls_x509_buf *serial )
{
   d6de4:	4680      	mov	r8, r0
   d6de6:	460f      	mov	r7, r1
   d6de8:	4691      	mov	r9, r2

    p = buf;
    n = size;

    nr = ( serial->len <= 32 )
        ? serial->len  : 28;
   d6dea:	bf28      	it	cs
   d6dec:	261c      	movcs	r6, #28
    int ret;
    size_t i, n, nr;
    char *p;

    p = buf;
    n = size;
   d6dee:	460c      	mov	r4, r1

    nr = ( serial->len <= 32 )
        ? serial->len  : 28;

    for( i = 0; i < nr; i++ )
   d6df0:	2500      	movs	r5, #0
   d6df2:	42b5      	cmp	r5, r6
   d6df4:	d01c      	beq.n	d6e30 <mbedtls_x509_serial_gets+0x5c>
   d6df6:	f8d9 3008 	ldr.w	r3, [r9, #8]
    {
        if( i == 0 && nr > 1 && serial->p[i] == 0x0 )
   d6dfa:	b91d      	cbnz	r5, d6e04 <mbedtls_x509_serial_gets+0x30>
   d6dfc:	2e01      	cmp	r6, #1
   d6dfe:	d001      	beq.n	d6e04 <mbedtls_x509_serial_gets+0x30>
   d6e00:	781a      	ldrb	r2, [r3, #0]
   d6e02:	b19a      	cbz	r2, d6e2c <mbedtls_x509_serial_gets+0x58>
            continue;

        ret = mbedtls_snprintf( p, n, "%02X%s",
   d6e04:	1e72      	subs	r2, r6, #1
   d6e06:	4295      	cmp	r5, r2
   d6e08:	bf34      	ite	cc
   d6e0a:	4652      	movcc	r2, sl
   d6e0c:	465a      	movcs	r2, fp
   d6e0e:	5d5b      	ldrb	r3, [r3, r5]
                serial->p[i], ( i < nr - 1 ) ? ":" : "" );
   d6e10:	9200      	str	r2, [sp, #0]
   d6e12:	4621      	mov	r1, r4
   d6e14:	4a0f      	ldr	r2, [pc, #60]	; (d6e54 <mbedtls_x509_serial_gets+0x80>)
   d6e16:	4640      	mov	r0, r8
   d6e18:	f00f f97c 	bl	e6114 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   d6e1c:	2800      	cmp	r0, #0
   d6e1e:	da01      	bge.n	d6e24 <mbedtls_x509_serial_gets+0x50>
   d6e20:	480d      	ldr	r0, [pc, #52]	; (d6e58 <mbedtls_x509_serial_gets+0x84>)
   d6e22:	e014      	b.n	d6e4e <mbedtls_x509_serial_gets+0x7a>
   d6e24:	4284      	cmp	r4, r0
   d6e26:	d9fb      	bls.n	d6e20 <mbedtls_x509_serial_gets+0x4c>
   d6e28:	1a24      	subs	r4, r4, r0
   d6e2a:	4480      	add	r8, r0
    n = size;

    nr = ( serial->len <= 32 )
        ? serial->len  : 28;

    for( i = 0; i < nr; i++ )
   d6e2c:	3501      	adds	r5, #1
   d6e2e:	e7e0      	b.n	d6df2 <mbedtls_x509_serial_gets+0x1e>
        ret = mbedtls_snprintf( p, n, "%02X%s",
                serial->p[i], ( i < nr - 1 ) ? ":" : "" );
        MBEDTLS_X509_SAFE_SNPRINTF;
    }

    if( nr != serial->len )
   d6e30:	f8d9 3004 	ldr.w	r3, [r9, #4]
   d6e34:	429d      	cmp	r5, r3
   d6e36:	d009      	beq.n	d6e4c <mbedtls_x509_serial_gets+0x78>
    {
        ret = mbedtls_snprintf( p, n, "...." );
   d6e38:	4a08      	ldr	r2, [pc, #32]	; (d6e5c <mbedtls_x509_serial_gets+0x88>)
   d6e3a:	4621      	mov	r1, r4
   d6e3c:	4640      	mov	r0, r8
   d6e3e:	f00f f969 	bl	e6114 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   d6e42:	2800      	cmp	r0, #0
   d6e44:	dbec      	blt.n	d6e20 <mbedtls_x509_serial_gets+0x4c>
   d6e46:	4284      	cmp	r4, r0
   d6e48:	d9ea      	bls.n	d6e20 <mbedtls_x509_serial_gets+0x4c>
   d6e4a:	1a24      	subs	r4, r4, r0
    }

    return( (int) ( size - n ) );
   d6e4c:	1b38      	subs	r0, r7, r4
}
   d6e4e:	b003      	add	sp, #12
   d6e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6e54:	000ecac5 	.word	0x000ecac5
   d6e58:	ffffd680 	.word	0xffffd680
   d6e5c:	000ecacc 	.word	0x000ecacc
   d6e60:	000ec94b 	.word	0x000ec94b
   d6e64:	000ed091 	.word	0x000ed091

000d6e68 <mbedtls_x509_sig_alg_gets>:
 * Helper for writing signature algorithms
 */
int mbedtls_x509_sig_alg_gets( char *buf, size_t size, const mbedtls_x509_buf *sig_oid,
                       mbedtls_pk_type_t pk_alg, mbedtls_md_type_t md_alg,
                       const void *sig_opts )
{
   d6e68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   d6e6c:	460c      	mov	r4, r1
    int ret;
    char *p = buf;
    size_t n = size;
    const char *desc = NULL;
   d6e6e:	a904      	add	r1, sp, #16
 * Helper for writing signature algorithms
 */
int mbedtls_x509_sig_alg_gets( char *buf, size_t size, const mbedtls_x509_buf *sig_oid,
                       mbedtls_pk_type_t pk_alg, mbedtls_md_type_t md_alg,
                       const void *sig_opts )
{
   d6e70:	4698      	mov	r8, r3
    int ret;
    char *p = buf;
    size_t n = size;
    const char *desc = NULL;
   d6e72:	2300      	movs	r3, #0
 * Helper for writing signature algorithms
 */
int mbedtls_x509_sig_alg_gets( char *buf, size_t size, const mbedtls_x509_buf *sig_oid,
                       mbedtls_pk_type_t pk_alg, mbedtls_md_type_t md_alg,
                       const void *sig_opts )
{
   d6e74:	4607      	mov	r7, r0
    int ret;
    char *p = buf;
    size_t n = size;
    const char *desc = NULL;
   d6e76:	f841 3d04 	str.w	r3, [r1, #-4]!

    ret = mbedtls_oid_get_sig_alg_desc( sig_oid, &desc );
   d6e7a:	4610      	mov	r0, r2
 * Helper for writing signature algorithms
 */
int mbedtls_x509_sig_alg_gets( char *buf, size_t size, const mbedtls_x509_buf *sig_oid,
                       mbedtls_pk_type_t pk_alg, mbedtls_md_type_t md_alg,
                       const void *sig_opts )
{
   d6e7c:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    int ret;
    char *p = buf;
    size_t n = size;
    const char *desc = NULL;

    ret = mbedtls_oid_get_sig_alg_desc( sig_oid, &desc );
   d6e80:	f003 f844 	bl	d9f0c <mbedtls_oid_get_sig_alg_desc>
    if( ret != 0 )
   d6e84:	b128      	cbz	r0, d6e92 <mbedtls_x509_sig_alg_gets+0x2a>
        ret = mbedtls_snprintf( p, n, "???"  );
   d6e86:	4a23      	ldr	r2, [pc, #140]	; (d6f14 <mbedtls_x509_sig_alg_gets+0xac>)
   d6e88:	4621      	mov	r1, r4
   d6e8a:	4638      	mov	r0, r7
   d6e8c:	f00f f942 	bl	e6114 <snprintf>
   d6e90:	e005      	b.n	d6e9e <mbedtls_x509_sig_alg_gets+0x36>
    else
        ret = mbedtls_snprintf( p, n, "%s", desc );
   d6e92:	9b03      	ldr	r3, [sp, #12]
   d6e94:	4a20      	ldr	r2, [pc, #128]	; (d6f18 <mbedtls_x509_sig_alg_gets+0xb0>)
   d6e96:	4621      	mov	r1, r4
   d6e98:	4638      	mov	r0, r7
   d6e9a:	f00f f93b 	bl	e6114 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
   d6e9e:	2800      	cmp	r0, #0

    ret = mbedtls_oid_get_sig_alg_desc( sig_oid, &desc );
    if( ret != 0 )
        ret = mbedtls_snprintf( p, n, "???"  );
    else
        ret = mbedtls_snprintf( p, n, "%s", desc );
   d6ea0:	4606      	mov	r6, r0
    MBEDTLS_X509_SAFE_SNPRINTF;
   d6ea2:	da01      	bge.n	d6ea8 <mbedtls_x509_sig_alg_gets+0x40>
   d6ea4:	481d      	ldr	r0, [pc, #116]	; (d6f1c <mbedtls_x509_sig_alg_gets+0xb4>)
   d6ea6:	e032      	b.n	d6f0e <mbedtls_x509_sig_alg_gets+0xa6>
   d6ea8:	4284      	cmp	r4, r0
   d6eaa:	d9fb      	bls.n	d6ea4 <mbedtls_x509_sig_alg_gets+0x3c>

#if defined(MBEDTLS_X509_RSASSA_PSS_SUPPORT)
    if( pk_alg == MBEDTLS_PK_RSASSA_PSS )
   d6eac:	f1b8 0f06 	cmp.w	r8, #6
    ret = mbedtls_oid_get_sig_alg_desc( sig_oid, &desc );
    if( ret != 0 )
        ret = mbedtls_snprintf( p, n, "???"  );
    else
        ret = mbedtls_snprintf( p, n, "%s", desc );
    MBEDTLS_X509_SAFE_SNPRINTF;
   d6eb0:	eba4 0500 	sub.w	r5, r4, r0

#if defined(MBEDTLS_X509_RSASSA_PSS_SUPPORT)
    if( pk_alg == MBEDTLS_PK_RSASSA_PSS )
   d6eb4:	d12a      	bne.n	d6f0c <mbedtls_x509_sig_alg_gets+0xa4>
        const mbedtls_pk_rsassa_pss_options *pss_opts;
        const mbedtls_md_info_t *md_info, *mgf_md_info;

        pss_opts = (const mbedtls_pk_rsassa_pss_options *) sig_opts;

        md_info = mbedtls_md_info_from_type( md_alg );
   d6eb6:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   d6eba:	f006 f843 	bl	dcf44 <mbedtls_md_info_from_type>
   d6ebe:	4680      	mov	r8, r0
        mgf_md_info = mbedtls_md_info_from_type( pss_opts->mgf1_hash_id );
   d6ec0:	f899 0000 	ldrb.w	r0, [r9]
   d6ec4:	f006 f83e 	bl	dcf44 <mbedtls_md_info_from_type>
   d6ec8:	4682      	mov	sl, r0

        ret = mbedtls_snprintf( p, n, " (%s, MGF1-%s, 0x%02X)",
   d6eca:	f1b8 0f00 	cmp.w	r8, #0
   d6ece:	d004      	beq.n	d6eda <mbedtls_x509_sig_alg_gets+0x72>
   d6ed0:	4640      	mov	r0, r8
   d6ed2:	f006 f972 	bl	dd1ba <mbedtls_md_get_name>
   d6ed6:	4680      	mov	r8, r0
   d6ed8:	e001      	b.n	d6ede <mbedtls_x509_sig_alg_gets+0x76>
   d6eda:	f8df 8038 	ldr.w	r8, [pc, #56]	; d6f14 <mbedtls_x509_sig_alg_gets+0xac>
   d6ede:	f1ba 0f00 	cmp.w	sl, #0
   d6ee2:	d003      	beq.n	d6eec <mbedtls_x509_sig_alg_gets+0x84>
   d6ee4:	4650      	mov	r0, sl
   d6ee6:	f006 f968 	bl	dd1ba <mbedtls_md_get_name>
   d6eea:	e000      	b.n	d6eee <mbedtls_x509_sig_alg_gets+0x86>
   d6eec:	4809      	ldr	r0, [pc, #36]	; (d6f14 <mbedtls_x509_sig_alg_gets+0xac>)
                              md_info ? mbedtls_md_get_name( md_info ) : "???",
                              mgf_md_info ? mbedtls_md_get_name( mgf_md_info ) : "???",
                              pss_opts->expected_salt_len );
   d6eee:	f8d9 3004 	ldr.w	r3, [r9, #4]
   d6ef2:	4a0b      	ldr	r2, [pc, #44]	; (d6f20 <mbedtls_x509_sig_alg_gets+0xb8>)
   d6ef4:	e88d 0009 	stmia.w	sp, {r0, r3}
   d6ef8:	4629      	mov	r1, r5
   d6efa:	4643      	mov	r3, r8
   d6efc:	19b8      	adds	r0, r7, r6
   d6efe:	f00f f909 	bl	e6114 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   d6f02:	2800      	cmp	r0, #0
   d6f04:	dbce      	blt.n	d6ea4 <mbedtls_x509_sig_alg_gets+0x3c>
   d6f06:	4285      	cmp	r5, r0
   d6f08:	d9cc      	bls.n	d6ea4 <mbedtls_x509_sig_alg_gets+0x3c>
   d6f0a:	1a2d      	subs	r5, r5, r0
    ((void) pk_alg);
    ((void) md_alg);
    ((void) sig_opts);
#endif /* MBEDTLS_X509_RSASSA_PSS_SUPPORT */

    return( (int)( size - n ) );
   d6f0c:	1b60      	subs	r0, r4, r5
}
   d6f0e:	b004      	add	sp, #16
   d6f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6f14:	000ecad1 	.word	0x000ecad1
   d6f18:	000ee0ee 	.word	0x000ee0ee
   d6f1c:	ffffd680 	.word	0xffffd680
   d6f20:	000ecad5 	.word	0x000ecad5

000d6f24 <mbedtls_x509_key_size_helper>:

/*
 * Helper for writing "RSA key size", "EC key size", etc
 */
int mbedtls_x509_key_size_helper( char *buf, size_t buf_size, const char *name )
{
   d6f24:	b510      	push	{r4, lr}
    char *p = buf;
    size_t n = buf_size;
    int ret;

    ret = mbedtls_snprintf( p, n, "%s key size", name );
   d6f26:	4613      	mov	r3, r2
   d6f28:	4a06      	ldr	r2, [pc, #24]	; (d6f44 <mbedtls_x509_key_size_helper+0x20>)

/*
 * Helper for writing "RSA key size", "EC key size", etc
 */
int mbedtls_x509_key_size_helper( char *buf, size_t buf_size, const char *name )
{
   d6f2a:	460c      	mov	r4, r1
    char *p = buf;
    size_t n = buf_size;
    int ret;

    ret = mbedtls_snprintf( p, n, "%s key size", name );
   d6f2c:	f00f f8f2 	bl	e6114 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
   d6f30:	2800      	cmp	r0, #0
   d6f32:	db05      	blt.n	d6f40 <mbedtls_x509_key_size_helper+0x1c>

    return( 0 );
   d6f34:	4b04      	ldr	r3, [pc, #16]	; (d6f48 <mbedtls_x509_key_size_helper+0x24>)
   d6f36:	4284      	cmp	r4, r0
   d6f38:	bf94      	ite	ls
   d6f3a:	4618      	movls	r0, r3
   d6f3c:	2000      	movhi	r0, #0
   d6f3e:	bd10      	pop	{r4, pc}
    char *p = buf;
    size_t n = buf_size;
    int ret;

    ret = mbedtls_snprintf( p, n, "%s key size", name );
    MBEDTLS_X509_SAFE_SNPRINTF;
   d6f40:	4801      	ldr	r0, [pc, #4]	; (d6f48 <mbedtls_x509_key_size_helper+0x24>)

    return( 0 );
}
   d6f42:	bd10      	pop	{r4, pc}
   d6f44:	000ecaec 	.word	0x000ecaec
   d6f48:	ffffd680 	.word	0xffffd680

000d6f4c <mbedtls_x509_time_is_past>:
   d6f4c:	2000      	movs	r0, #0
   d6f4e:	4770      	bx	lr

000d6f50 <mbedtls_x509_time_is_future>:

int mbedtls_x509_time_is_future( const mbedtls_x509_time *from )
{
    ((void) from);
    return( 0 );
}
   d6f50:	2000      	movs	r0, #0
   d6f52:	4770      	bx	lr

000d6f54 <_ZL17sha1_process_wrapPvPKh>:
}

static int sha1_process_wrap( void *ctx, const unsigned char *data )
{
    return( mbedtls_internal_sha1_process( (mbedtls_sha1_context *) ctx,
                                           data ) );
   d6f54:	f003 b8d0 	b.w	da0f8 <mbedtls_internal_sha1_process>

000d6f58 <_ZL15sha1_clone_wrapPvPKv>:
}

static void sha1_clone_wrap( void *dst, const void *src )
{
    mbedtls_sha1_clone( (mbedtls_sha1_context *) dst,
                  (const mbedtls_sha1_context *) src );
   d6f58:	f003 b8af 	b.w	da0ba <mbedtls_sha1_clone>

000d6f5c <_ZL13sha1_ctx_freePv>:
}

static void sha1_ctx_free( void *ctx )
{
   d6f5c:	b510      	push	{r4, lr}
   d6f5e:	4604      	mov	r4, r0
    mbedtls_sha1_free( (mbedtls_sha1_context *) ctx );
   d6f60:	f003 f8a6 	bl	da0b0 <mbedtls_sha1_free>
    mbedtls_free( ctx );
   d6f64:	4620      	mov	r0, r4
}
   d6f66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void sha1_ctx_free( void *ctx )
{
    mbedtls_sha1_free( (mbedtls_sha1_context *) ctx );
    mbedtls_free( ctx );
   d6f6a:	f00f b8ab 	b.w	e60c4 <free>

000d6f6e <_ZL14sha1_ctx_allocv>:
{
    return( mbedtls_sha1_finish_ret( (mbedtls_sha1_context *) ctx, output ) );
}

static void *sha1_ctx_alloc( void )
{
   d6f6e:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha1_context ) );
   d6f70:	215c      	movs	r1, #92	; 0x5c
   d6f72:	2001      	movs	r0, #1
   d6f74:	f012 fc7e 	bl	e9874 <calloc>

    if( ctx != NULL )
   d6f78:	4604      	mov	r4, r0
   d6f7a:	b108      	cbz	r0, d6f80 <_ZL14sha1_ctx_allocv+0x12>
        mbedtls_sha1_init( (mbedtls_sha1_context *) ctx );
   d6f7c:	f003 f894 	bl	da0a8 <mbedtls_sha1_init>

    return( ctx );
}
   d6f80:	4620      	mov	r0, r4
   d6f82:	bd10      	pop	{r4, pc}

000d6f84 <_ZL16sha1_finish_wrapPvPh>:
                                     input, ilen ) );
}

static int sha1_finish_wrap( void *ctx, unsigned char *output )
{
    return( mbedtls_sha1_finish_ret( (mbedtls_sha1_context *) ctx, output ) );
   d6f84:	f004 b8a6 	b.w	db0d4 <mbedtls_sha1_finish_ret>

000d6f88 <_ZL16sha1_update_wrapPvPKhj>:

static int sha1_update_wrap( void *ctx, const unsigned char *input,
                              size_t ilen )
{
    return( mbedtls_sha1_update_ret( (mbedtls_sha1_context *) ctx,
                                     input, ilen ) );
   d6f88:	f004 b86a 	b.w	db060 <mbedtls_sha1_update_ret>

000d6f8c <_ZL16sha1_starts_wrapPv>:

#if defined(MBEDTLS_SHA1_C)

static int sha1_starts_wrap( void *ctx )
{
    return( mbedtls_sha1_starts_ret( (mbedtls_sha1_context *) ctx ) );
   d6f8c:	f003 b89a 	b.w	da0c4 <mbedtls_sha1_starts_ret>

000d6f90 <_ZL19sha224_process_wrapPvPKh>:
}

static int sha224_process_wrap( void *ctx, const unsigned char *data )
{
    return( mbedtls_internal_sha256_process( (mbedtls_sha256_context *) ctx,
                                             data ) );
   d6f90:	f7fe ba7c 	b.w	d548c <mbedtls_internal_sha256_process>

000d6f94 <_ZL17sha224_clone_wrapPvPKv>:
}

static void sha224_clone_wrap( void *dst, const void *src )
{
    mbedtls_sha256_clone( (mbedtls_sha256_context *) dst,
                    (const mbedtls_sha256_context *) src );
   d6f94:	f7fe ba25 	b.w	d53e2 <mbedtls_sha256_clone>

000d6f98 <_ZL15sha224_ctx_freePv>:

    return( ctx );
}

static void sha224_ctx_free( void *ctx )
{
   d6f98:	b510      	push	{r4, lr}
   d6f9a:	4604      	mov	r4, r0
    mbedtls_sha256_free( (mbedtls_sha256_context *) ctx );
   d6f9c:	f7fe fa1c 	bl	d53d8 <mbedtls_sha256_free>
    mbedtls_free( ctx );
   d6fa0:	4620      	mov	r0, r4
}
   d6fa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void sha224_ctx_free( void *ctx )
{
    mbedtls_sha256_free( (mbedtls_sha256_context *) ctx );
    mbedtls_free( ctx );
   d6fa6:	f00f b88d 	b.w	e60c4 <free>

000d6faa <_ZL16sha224_ctx_allocv>:
{
    return( mbedtls_sha256_ret( input, ilen, output, 1 ) );
}

static void *sha224_ctx_alloc( void )
{
   d6faa:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha256_context ) );
   d6fac:	216c      	movs	r1, #108	; 0x6c
   d6fae:	2001      	movs	r0, #1
   d6fb0:	f012 fc60 	bl	e9874 <calloc>

    if( ctx != NULL )
   d6fb4:	4604      	mov	r4, r0
   d6fb6:	b108      	cbz	r0, d6fbc <_ZL16sha224_ctx_allocv+0x12>
        mbedtls_sha256_init( (mbedtls_sha256_context *) ctx );
   d6fb8:	f7fe fa0a 	bl	d53d0 <mbedtls_sha256_init>

    return( ctx );
}
   d6fbc:	4620      	mov	r0, r4
   d6fbe:	bd10      	pop	{r4, pc}

000d6fc0 <_ZL11sha224_wrapPKhjPh>:
}

static int sha224_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha256_ret( input, ilen, output, 1 ) );
   d6fc0:	2301      	movs	r3, #1
   d6fc2:	f7fe be97 	b.w	d5cf4 <mbedtls_sha256_ret>

000d6fc6 <_ZL11sha256_wrapPKhjPh>:
}

static int sha256_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha256_ret( input, ilen, output, 0 ) );
   d6fc6:	2300      	movs	r3, #0
   d6fc8:	f7fe be94 	b.w	d5cf4 <mbedtls_sha256_ret>

000d6fcc <_ZL18sha224_finish_wrapPvPh>:
}

static int sha224_finish_wrap( void *ctx, unsigned char *output )
{
    return( mbedtls_sha256_finish_ret( (mbedtls_sha256_context *) ctx,
                                       output ) );
   d6fcc:	f7fe bdfe 	b.w	d5bcc <mbedtls_sha256_finish_ret>

000d6fd0 <_ZL18sha224_update_wrapPvPKhj>:

static int sha224_update_wrap( void *ctx, const unsigned char *input,
                                size_t ilen )
{
    return( mbedtls_sha256_update_ret( (mbedtls_sha256_context *) ctx,
                                       input, ilen ) );
   d6fd0:	f7fe bdc2 	b.w	d5b58 <mbedtls_sha256_update_ret>

000d6fd4 <_ZL18sha224_starts_wrapPv>:
 */
#if defined(MBEDTLS_SHA256_C)

static int sha224_starts_wrap( void *ctx )
{
    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 1 ) );
   d6fd4:	2101      	movs	r1, #1
   d6fd6:	f7fe ba09 	b.w	d53ec <mbedtls_sha256_starts_ret>

000d6fda <_ZL18sha256_starts_wrapPv>:
    sha224_process_wrap,
};

static int sha256_starts_wrap( void *ctx )
{
    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 0 ) );
   d6fda:	2100      	movs	r1, #0
   d6fdc:	f7fe ba06 	b.w	d53ec <mbedtls_sha256_starts_ret>

000d6fe0 <_ZL19sha384_process_wrapPvPKh>:
}

static int sha384_process_wrap( void *ctx, const unsigned char *data )
{
    return( mbedtls_internal_sha512_process( (mbedtls_sha512_context *) ctx,
                                             data ) );
   d6fe0:	f00c ba06 	b.w	e33f0 <mbedtls_internal_sha512_process>

000d6fe4 <_ZL17sha384_clone_wrapPvPKv>:
}

static void sha384_clone_wrap( void *dst, const void *src )
{
    mbedtls_sha512_clone( (mbedtls_sha512_context *) dst,
                    (const mbedtls_sha512_context *) src );
   d6fe4:	f00c b961 	b.w	e32aa <mbedtls_sha512_clone>

000d6fe8 <_ZL15sha384_ctx_freePv>:

    return( ctx );
}

static void sha384_ctx_free( void *ctx )
{
   d6fe8:	b510      	push	{r4, lr}
   d6fea:	4604      	mov	r4, r0
    mbedtls_sha512_free( (mbedtls_sha512_context *) ctx );
   d6fec:	f00c f958 	bl	e32a0 <mbedtls_sha512_free>
    mbedtls_free( ctx );
   d6ff0:	4620      	mov	r0, r4
}
   d6ff2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void sha384_ctx_free( void *ctx )
{
    mbedtls_sha512_free( (mbedtls_sha512_context *) ctx );
    mbedtls_free( ctx );
   d6ff6:	f00f b865 	b.w	e60c4 <free>

000d6ffa <_ZL16sha384_ctx_allocv>:
{
    return( mbedtls_sha512_ret( input, ilen, output, 1 ) );
}

static void *sha384_ctx_alloc( void )
{
   d6ffa:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha512_context ) );
   d6ffc:	21d8      	movs	r1, #216	; 0xd8
   d6ffe:	2001      	movs	r0, #1
   d7000:	f012 fc38 	bl	e9874 <calloc>

    if( ctx != NULL )
   d7004:	4604      	mov	r4, r0
   d7006:	b108      	cbz	r0, d700c <_ZL16sha384_ctx_allocv+0x12>
        mbedtls_sha512_init( (mbedtls_sha512_context *) ctx );
   d7008:	f00c f946 	bl	e3298 <mbedtls_sha512_init>

    return( ctx );
}
   d700c:	4620      	mov	r0, r4
   d700e:	bd10      	pop	{r4, pc}

000d7010 <_ZL11sha384_wrapPKhjPh>:
}

static int sha384_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha512_ret( input, ilen, output, 1 ) );
   d7010:	2301      	movs	r3, #1
   d7012:	f00d b9bf 	b.w	e4394 <mbedtls_sha512_ret>

000d7016 <_ZL11sha512_wrapPKhjPh>:
}

static int sha512_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha512_ret( input, ilen, output, 0 ) );
   d7016:	2300      	movs	r3, #0
   d7018:	f00d b9bc 	b.w	e4394 <mbedtls_sha512_ret>

000d701c <_ZL18sha384_finish_wrapPvPh>:
}

static int sha384_finish_wrap( void *ctx, unsigned char *output )
{
    return( mbedtls_sha512_finish_ret( (mbedtls_sha512_context *) ctx,
                                       output ) );
   d701c:	f00d b88a 	b.w	e4134 <mbedtls_sha512_finish_ret>

000d7020 <_ZL18sha384_update_wrapPvPKhj>:

static int sha384_update_wrap( void *ctx, const unsigned char *input,
                               size_t ilen )
{
    return( mbedtls_sha512_update_ret( (mbedtls_sha512_context *) ctx,
                                       input, ilen ) );
   d7020:	f00d b840 	b.w	e40a4 <mbedtls_sha512_update_ret>

000d7024 <_ZL18sha384_starts_wrapPv>:

#if defined(MBEDTLS_SHA512_C)

static int sha384_starts_wrap( void *ctx )
{
    return( mbedtls_sha512_starts_ret( (mbedtls_sha512_context *) ctx, 1 ) );
   d7024:	2101      	movs	r1, #1
   d7026:	f00c b947 	b.w	e32b8 <mbedtls_sha512_starts_ret>

000d702a <_ZL18sha512_starts_wrapPv>:
    sha384_process_wrap,
};

static int sha512_starts_wrap( void *ctx )
{
    return( mbedtls_sha512_starts_ret( (mbedtls_sha512_context *) ctx, 0 ) );
   d702a:	2100      	movs	r1, #0
   d702c:	f00c b944 	b.w	e32b8 <mbedtls_sha512_starts_ret>

000d7030 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>:
 * \param slen      length of the source buffer
 * \param md_ctx    message digest context to use
 */
static int mgf_mask( unsigned char *dst, size_t dlen, unsigned char *src,
                      size_t slen, mbedtls_md_context_t *md_ctx )
{
   d7030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7034:	b095      	sub	sp, #84	; 0x54
    unsigned char *p;
    unsigned int hlen;
    size_t i, use_len;
    int ret = 0;

    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
   d7036:	ae04      	add	r6, sp, #16
 * \param slen      length of the source buffer
 * \param md_ctx    message digest context to use
 */
static int mgf_mask( unsigned char *dst, size_t dlen, unsigned char *src,
                      size_t slen, mbedtls_md_context_t *md_ctx )
{
   d7038:	9d1e      	ldr	r5, [sp, #120]	; 0x78
   d703a:	9301      	str	r3, [sp, #4]
   d703c:	4607      	mov	r7, r0
   d703e:	460c      	mov	r4, r1
   d7040:	4691      	mov	r9, r2
    unsigned char *p;
    unsigned int hlen;
    size_t i, use_len;
    int ret = 0;

    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
   d7042:	2100      	movs	r1, #0
   d7044:	2240      	movs	r2, #64	; 0x40
   d7046:	4630      	mov	r0, r6
    memset( counter, 0, 4 );
   d7048:	f10d 0850 	add.w	r8, sp, #80	; 0x50
    unsigned char *p;
    unsigned int hlen;
    size_t i, use_len;
    int ret = 0;

    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
   d704c:	f012 fd59 	bl	e9b02 <memset>
    memset( counter, 0, 4 );
   d7050:	2300      	movs	r3, #0

    hlen = mbedtls_md_get_size( md_ctx->md_info );
   d7052:	6828      	ldr	r0, [r5, #0]
    unsigned int hlen;
    size_t i, use_len;
    int ret = 0;

    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
    memset( counter, 0, 4 );
   d7054:	f848 3d44 	str.w	r3, [r8, #-68]!

    hlen = mbedtls_md_get_size( md_ctx->md_info );
   d7058:	f006 f8ac 	bl	dd1b4 <mbedtls_md_get_size>
   d705c:	4682      	mov	sl, r0

    /* Generate and apply dbMask */
    p = dst;

    while( dlen > 0 )
   d705e:	b37c      	cbz	r4, d70c0 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x90>
   d7060:	4554      	cmp	r4, sl
    {
        use_len = hlen;
        if( dlen < hlen )
            use_len = dlen;

        if( ( ret = mbedtls_md_starts( md_ctx ) ) != 0 )
   d7062:	4628      	mov	r0, r5
   d7064:	46a3      	mov	fp, r4
   d7066:	bf28      	it	cs
   d7068:	46d3      	movcs	fp, sl
   d706a:	f005 ffb9 	bl	dcfe0 <mbedtls_md_starts>
   d706e:	4603      	mov	r3, r0
   d7070:	bb38      	cbnz	r0, d70c2 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x92>
            goto exit;
        if( ( ret = mbedtls_md_update( md_ctx, src, slen ) ) != 0 )
   d7072:	9a01      	ldr	r2, [sp, #4]
   d7074:	4649      	mov	r1, r9
   d7076:	4628      	mov	r0, r5
   d7078:	f005 ffbc 	bl	dcff4 <mbedtls_md_update>
   d707c:	4603      	mov	r3, r0
   d707e:	bb00      	cbnz	r0, d70c2 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x92>
            goto exit;
        if( ( ret = mbedtls_md_update( md_ctx, counter, 4 ) ) != 0 )
   d7080:	2204      	movs	r2, #4
   d7082:	4641      	mov	r1, r8
   d7084:	4628      	mov	r0, r5
   d7086:	f005 ffb5 	bl	dcff4 <mbedtls_md_update>
   d708a:	4603      	mov	r3, r0
   d708c:	b9c8      	cbnz	r0, d70c2 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x92>
            goto exit;
        if( ( ret = mbedtls_md_finish( md_ctx, mask ) ) != 0 )
   d708e:	4631      	mov	r1, r6
   d7090:	4628      	mov	r0, r5
   d7092:	f005 ffb9 	bl	dd008 <mbedtls_md_finish>
   d7096:	4603      	mov	r3, r0
   d7098:	b998      	cbnz	r0, d70c2 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x92>
   d709a:	463a      	mov	r2, r7
            goto exit;

        for( i = 0; i < use_len; ++i )
   d709c:	455b      	cmp	r3, fp
   d709e:	d007      	beq.n	d70b0 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x80>
            *p++ ^= mask[i];
   d70a0:	f812 0b01 	ldrb.w	r0, [r2], #1
   d70a4:	5cf1      	ldrb	r1, [r6, r3]
   d70a6:	4041      	eors	r1, r0
   d70a8:	f802 1c01 	strb.w	r1, [r2, #-1]
        if( ( ret = mbedtls_md_update( md_ctx, counter, 4 ) ) != 0 )
            goto exit;
        if( ( ret = mbedtls_md_finish( md_ctx, mask ) ) != 0 )
            goto exit;

        for( i = 0; i < use_len; ++i )
   d70ac:	3301      	adds	r3, #1
   d70ae:	e7f5      	b.n	d709c <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x6c>
            *p++ ^= mask[i];

        counter[3]++;
   d70b0:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d70b4:	3201      	adds	r2, #1
   d70b6:	441f      	add	r7, r3
   d70b8:	f88d 200f 	strb.w	r2, [sp, #15]

        dlen -= use_len;
   d70bc:	1ae4      	subs	r4, r4, r3
    hlen = mbedtls_md_get_size( md_ctx->md_info );

    /* Generate and apply dbMask */
    p = dst;

    while( dlen > 0 )
   d70be:	e7ce      	b.n	d705e <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x2e>
   d70c0:	4623      	mov	r3, r4

        dlen -= use_len;
    }

exit:
    mbedtls_platform_zeroize( mask, sizeof( mask ) );
   d70c2:	4630      	mov	r0, r6
   d70c4:	2140      	movs	r1, #64	; 0x40
   d70c6:	9301      	str	r3, [sp, #4]
   d70c8:	f004 f898 	bl	db1fc <mbedtls_platform_zeroize>

    return( ret );
}
   d70cc:	9b01      	ldr	r3, [sp, #4]
   d70ce:	4618      	mov	r0, r3
   d70d0:	b015      	add	sp, #84	; 0x54
   d70d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000d70d8 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh>:
static int rsa_rsassa_pkcs1_v15_encode( mbedtls_md_type_t md_alg,
                                        unsigned int hashlen,
                                        const unsigned char *hash,
                                        size_t dst_len,
                                        unsigned char *dst )
{
   d70d8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d70dc:	461d      	mov	r5, r3
    size_t oid_size  = 0;
   d70de:	2300      	movs	r3, #0
static int rsa_rsassa_pkcs1_v15_encode( mbedtls_md_type_t md_alg,
                                        unsigned int hashlen,
                                        const unsigned char *hash,
                                        size_t dst_len,
                                        unsigned char *dst )
{
   d70e0:	460e      	mov	r6, r1
   d70e2:	4691      	mov	r9, r2
   d70e4:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    size_t oid_size  = 0;
   d70e8:	9300      	str	r3, [sp, #0]
    size_t nb_pad    = dst_len;
    unsigned char *p = dst;
    const char *oid  = NULL;
   d70ea:	9301      	str	r3, [sp, #4]

    /* Are we signing hashed or raw data? */
    if( md_alg != MBEDTLS_MD_NONE )
   d70ec:	4604      	mov	r4, r0
   d70ee:	b328      	cbz	r0, d713c <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x64>
    {
        const mbedtls_md_info_t *md_info = mbedtls_md_info_from_type( md_alg );
   d70f0:	f005 ff28 	bl	dcf44 <mbedtls_md_info_from_type>
        if( md_info == NULL )
   d70f4:	4606      	mov	r6, r0
   d70f6:	2800      	cmp	r0, #0
   d70f8:	d063      	beq.n	d71c2 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        if( mbedtls_oid_get_oid_by_md( md_alg, &oid, &oid_size ) != 0 )
   d70fa:	4620      	mov	r0, r4
   d70fc:	466a      	mov	r2, sp
   d70fe:	a901      	add	r1, sp, #4
   d7100:	f002 ff88 	bl	da014 <mbedtls_oid_get_oid_by_md>
   d7104:	4604      	mov	r4, r0
   d7106:	2800      	cmp	r0, #0
   d7108:	d15b      	bne.n	d71c2 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        hashlen = mbedtls_md_get_size( md_info );
   d710a:	4630      	mov	r0, r6
   d710c:	f006 f852 	bl	dd1b4 <mbedtls_md_get_size>

        /* Double-check that 8 + hashlen + oid_size can be used as a
         * 1-byte ASN.1 length encoding and that there's no overflow. */
        if( 8 + hashlen + oid_size  >= 0x80         ||
   d7110:	9f00      	ldr	r7, [sp, #0]
   d7112:	4407      	add	r7, r0
   d7114:	f107 0308 	add.w	r3, r7, #8
   d7118:	2b7f      	cmp	r3, #127	; 0x7f
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        if( mbedtls_oid_get_oid_by_md( md_alg, &oid, &oid_size ) != 0 )
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        hashlen = mbedtls_md_get_size( md_info );
   d711a:	4606      	mov	r6, r0

        /* Double-check that 8 + hashlen + oid_size can be used as a
         * 1-byte ASN.1 length encoding and that there's no overflow. */
        if( 8 + hashlen + oid_size  >= 0x80         ||
   d711c:	d851      	bhi.n	d71c2 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
   d711e:	f110 020a 	adds.w	r2, r0, #10
   d7122:	d24e      	bcs.n	d71c2 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            10 + hashlen            <  hashlen      ||
            10 + hashlen + oid_size <  10 + hashlen )
   d7124:	f107 030a 	add.w	r3, r7, #10
        hashlen = mbedtls_md_get_size( md_info );

        /* Double-check that 8 + hashlen + oid_size can be used as a
         * 1-byte ASN.1 length encoding and that there's no overflow. */
        if( 8 + hashlen + oid_size  >= 0x80         ||
            10 + hashlen            <  hashlen      ||
   d7128:	429a      	cmp	r2, r3
   d712a:	d84a      	bhi.n	d71c2 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
         *   (Insist on 1-byte length encodings to protect against variants of
         *    Bleichenbacher's forgery attack against lax PKCS#1v1.5 verification)
         * - Need hashlen bytes for hash
         * - Need oid_size bytes for hash alg OID.
         */
        if( nb_pad < 10 + hashlen + oid_size )
   d712c:	429d      	cmp	r5, r3
   d712e:	d348      	bcc.n	d71c2 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
        nb_pad -= 10 + hashlen + oid_size;
   d7130:	f1a5 030a 	sub.w	r3, r5, #10
   d7134:	1bdf      	subs	r7, r3, r7
        nb_pad -= hashlen;
    }

    /* Need space for signature header and padding delimiter (3 bytes),
     * and 8 bytes for the minimal padding */
    if( nb_pad < 3 + 8 )
   d7136:	2f0a      	cmp	r7, #10
   d7138:	d806      	bhi.n	d7148 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x70>
   d713a:	e042      	b.n	d71c2 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
        nb_pad -= 10 + hashlen + oid_size;
    }
    else
    {
        if( nb_pad < hashlen )
   d713c:	428d      	cmp	r5, r1
   d713e:	d340      	bcc.n	d71c2 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        nb_pad -= hashlen;
   d7140:	1a6d      	subs	r5, r5, r1
    }

    /* Need space for signature header and padding delimiter (3 bytes),
     * and 8 bytes for the minimal padding */
    if( nb_pad < 3 + 8 )
   d7142:	2d0a      	cmp	r5, #10
   d7144:	d93d      	bls.n	d71c2 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
   d7146:	e03e      	b.n	d71c6 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xee>

    /* Now nb_pad is the amount of memory to be filled
     * with padding, and at least 8 bytes long. */

    /* Write signature header and padding */
    *p++ = 0;
   d7148:	46c2      	mov	sl, r8

    /* Need space for signature header and padding delimiter (3 bytes),
     * and 8 bytes for the minimal padding */
    if( nb_pad < 3 + 8 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    nb_pad -= 3;
   d714a:	3f03      	subs	r7, #3

    /* Now nb_pad is the amount of memory to be filled
     * with padding, and at least 8 bytes long. */

    /* Write signature header and padding */
    *p++ = 0;
   d714c:	f80a 4b02 	strb.w	r4, [sl], #2
    *p++ = MBEDTLS_RSA_SIGN;
   d7150:	2301      	movs	r3, #1
    memset( p, 0xFF, nb_pad );
   d7152:	463a      	mov	r2, r7
    /* Now nb_pad is the amount of memory to be filled
     * with padding, and at least 8 bytes long. */

    /* Write signature header and padding */
    *p++ = 0;
    *p++ = MBEDTLS_RSA_SIGN;
   d7154:	f888 3001 	strb.w	r3, [r8, #1]
    memset( p, 0xFF, nb_pad );
   d7158:	21ff      	movs	r1, #255	; 0xff
   d715a:	4650      	mov	r0, sl
   d715c:	f012 fcd1 	bl	e9b02 <memset>
    p += nb_pad;
   d7160:	eb0a 0307 	add.w	r3, sl, r7
     * Schematic:
     * TAG-SEQ + LEN [ TAG-SEQ + LEN [ TAG-OID  + LEN [ OID  ]
     *                                 TAG-NULL + LEN [ NULL ] ]
     *                 TAG-OCTET + LEN [ HASH ] ]
     */
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
   d7164:	2130      	movs	r1, #48	; 0x30
    /* Write signature header and padding */
    *p++ = 0;
    *p++ = MBEDTLS_RSA_SIGN;
    memset( p, 0xFF, nb_pad );
    p += nb_pad;
    *p++ = 0;
   d7166:	f80a 4007 	strb.w	r4, [sl, r7]
     * Schematic:
     * TAG-SEQ + LEN [ TAG-SEQ + LEN [ TAG-OID  + LEN [ OID  ]
     *                                 TAG-NULL + LEN [ NULL ] ]
     *                 TAG-OCTET + LEN [ HASH ] ]
     */
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
   d716a:	7059      	strb	r1, [r3, #1]
    *p++ = (unsigned char)( 0x08 + oid_size + hashlen );
   d716c:	9f00      	ldr	r7, [sp, #0]
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
   d716e:	70d9      	strb	r1, [r3, #3]
     * TAG-SEQ + LEN [ TAG-SEQ + LEN [ TAG-OID  + LEN [ OID  ]
     *                                 TAG-NULL + LEN [ NULL ] ]
     *                 TAG-OCTET + LEN [ HASH ] ]
     */
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
    *p++ = (unsigned char)( 0x08 + oid_size + hashlen );
   d7170:	f107 0208 	add.w	r2, r7, #8
   d7174:	4432      	add	r2, r6
   d7176:	709a      	strb	r2, [r3, #2]
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
    *p++ = (unsigned char)( 0x04 + oid_size );
   d7178:	b2fa      	uxtb	r2, r7
   d717a:	1d11      	adds	r1, r2, #4
    *p++ = MBEDTLS_ASN1_OID;
    *p++ = (unsigned char) oid_size;
   d717c:	f103 0a07 	add.w	sl, r3, #7
     *                 TAG-OCTET + LEN [ HASH ] ]
     */
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
    *p++ = (unsigned char)( 0x08 + oid_size + hashlen );
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
    *p++ = (unsigned char)( 0x04 + oid_size );
   d7180:	7119      	strb	r1, [r3, #4]
    *p++ = MBEDTLS_ASN1_OID;
   d7182:	2106      	movs	r1, #6
   d7184:	7159      	strb	r1, [r3, #5]
    *p++ = (unsigned char) oid_size;
   d7186:	719a      	strb	r2, [r3, #6]
    memcpy( p, oid, oid_size );
   d7188:	9901      	ldr	r1, [sp, #4]
   d718a:	463a      	mov	r2, r7
   d718c:	4650      	mov	r0, sl
   d718e:	f012 fc92 	bl	e9ab6 <memcpy>
    p += oid_size;
    *p++ = MBEDTLS_ASN1_NULL;
   d7192:	2205      	movs	r2, #5
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
    *p++ = (unsigned char)( 0x04 + oid_size );
    *p++ = MBEDTLS_ASN1_OID;
    *p++ = (unsigned char) oid_size;
    memcpy( p, oid, oid_size );
    p += oid_size;
   d7194:	eb0a 0307 	add.w	r3, sl, r7
    *p++ = MBEDTLS_ASN1_NULL;
   d7198:	f80a 2007 	strb.w	r2, [sl, r7]
    *p++ = 0x00;
    *p++ = MBEDTLS_ASN1_OCTET_STRING;
   d719c:	2204      	movs	r2, #4
    *p++ = (unsigned char) hashlen;
   d719e:	189f      	adds	r7, r3, r2
    *p++ = (unsigned char) oid_size;
    memcpy( p, oid, oid_size );
    p += oid_size;
    *p++ = MBEDTLS_ASN1_NULL;
    *p++ = 0x00;
    *p++ = MBEDTLS_ASN1_OCTET_STRING;
   d71a0:	709a      	strb	r2, [r3, #2]
    *p++ = (unsigned char) hashlen;
   d71a2:	70de      	strb	r6, [r3, #3]
    *p++ = MBEDTLS_ASN1_OID;
    *p++ = (unsigned char) oid_size;
    memcpy( p, oid, oid_size );
    p += oid_size;
    *p++ = MBEDTLS_ASN1_NULL;
    *p++ = 0x00;
   d71a4:	705c      	strb	r4, [r3, #1]
    *p++ = MBEDTLS_ASN1_OCTET_STRING;
    *p++ = (unsigned char) hashlen;
    memcpy( p, hash, hashlen );
   d71a6:	4632      	mov	r2, r6
   d71a8:	4649      	mov	r1, r9
   d71aa:	4638      	mov	r0, r7
   d71ac:	f012 fc83 	bl	e9ab6 <memcpy>
    p += hashlen;

    /* Just a sanity-check, should be automatic
     * after the initial bounds check. */
    if( p != dst + dst_len )
   d71b0:	443e      	add	r6, r7
   d71b2:	eb08 0305 	add.w	r3, r8, r5
   d71b6:	429e      	cmp	r6, r3
   d71b8:	d019      	beq.n	d71ee <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x116>
    {
        mbedtls_platform_zeroize( dst, dst_len );
   d71ba:	4629      	mov	r1, r5
   d71bc:	4640      	mov	r0, r8
   d71be:	f004 f81d 	bl	db1fc <mbedtls_platform_zeroize>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   d71c2:	4c0d      	ldr	r4, [pc, #52]	; (d71f8 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x120>)
   d71c4:	e013      	b.n	d71ee <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x116>

    /* Now nb_pad is the amount of memory to be filled
     * with padding, and at least 8 bytes long. */

    /* Write signature header and padding */
    *p++ = 0;
   d71c6:	4643      	mov	r3, r8

    /* Need space for signature header and padding delimiter (3 bytes),
     * and 8 bytes for the minimal padding */
    if( nb_pad < 3 + 8 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    nb_pad -= 3;
   d71c8:	1eef      	subs	r7, r5, #3

    /* Now nb_pad is the amount of memory to be filled
     * with padding, and at least 8 bytes long. */

    /* Write signature header and padding */
    *p++ = 0;
   d71ca:	f803 0b02 	strb.w	r0, [r3], #2
    *p++ = MBEDTLS_RSA_SIGN;
   d71ce:	2201      	movs	r2, #1
   d71d0:	f888 2001 	strb.w	r2, [r8, #1]
    memset( p, 0xFF, nb_pad );
   d71d4:	21ff      	movs	r1, #255	; 0xff
   d71d6:	463a      	mov	r2, r7
   d71d8:	4618      	mov	r0, r3
   d71da:	f012 fc92 	bl	e9b02 <memset>
   d71de:	4603      	mov	r3, r0
    p += nb_pad;
    *p++ = 0;
   d71e0:	55c4      	strb	r4, [r0, r7]

    /* Are we signing raw data? */
    if( md_alg == MBEDTLS_MD_NONE )
    {
        memcpy( p, hash, hashlen );
   d71e2:	1ea8      	subs	r0, r5, #2
   d71e4:	4632      	mov	r2, r6
   d71e6:	4649      	mov	r1, r9
   d71e8:	4418      	add	r0, r3
   d71ea:	f012 fc64 	bl	e9ab6 <memcpy>
        mbedtls_platform_zeroize( dst, dst_len );
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    }

    return( 0 );
}
   d71ee:	4620      	mov	r0, r4
   d71f0:	b002      	add	sp, #8
   d71f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d71f6:	bf00      	nop
   d71f8:	ffffbf80 	.word	0xffffbf80

000d71fc <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>:
/*
 * Checks whether the context fields are set in such a way
 * that the RSA primitives will be able to execute without error.
 * It does *not* make guarantees for consistency of the parameters.
 */
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
   d71fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /* blinding_needed is only used for NO_CRT to decide whether
     * P,Q need to be present or not. */
    ((void) blinding_needed);
#endif

    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
   d71fe:	f100 0508 	add.w	r5, r0, #8
   d7202:	6847      	ldr	r7, [r0, #4]
/*
 * Checks whether the context fields are set in such a way
 * that the RSA primitives will be able to execute without error.
 * It does *not* make guarantees for consistency of the parameters.
 */
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
   d7204:	4604      	mov	r4, r0
    /* blinding_needed is only used for NO_CRT to decide whether
     * P,Q need to be present or not. */
    ((void) blinding_needed);
#endif

    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
   d7206:	4628      	mov	r0, r5
/*
 * Checks whether the context fields are set in such a way
 * that the RSA primitives will be able to execute without error.
 * It does *not* make guarantees for consistency of the parameters.
 */
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
   d7208:	460e      	mov	r6, r1
    /* blinding_needed is only used for NO_CRT to decide whether
     * P,Q need to be present or not. */
    ((void) blinding_needed);
#endif

    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
   d720a:	f009 fecf 	bl	e0fac <mbedtls_mpi_size>
   d720e:	4287      	cmp	r7, r0
   d7210:	d117      	bne.n	d7242 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
   d7212:	6863      	ldr	r3, [r4, #4]
   d7214:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   d7218:	d813      	bhi.n	d7242 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
     * 1. Modular exponentiation needs positive, odd moduli.
     */

    /* Modular exponentiation wrt. N is always used for
     * RSA public key operations. */
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
   d721a:	2100      	movs	r1, #0
   d721c:	4628      	mov	r0, r5
   d721e:	f00a f8aa 	bl	e1376 <mbedtls_mpi_cmp_int>
   d7222:	2800      	cmp	r0, #0
   d7224:	dd0d      	ble.n	d7242 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
        mbedtls_mpi_get_bit( &ctx->N, 0 ) == 0  )
   d7226:	2100      	movs	r1, #0
   d7228:	4628      	mov	r0, r5
   d722a:	f009 fe75 	bl	e0f18 <mbedtls_mpi_get_bit>
     * 1. Modular exponentiation needs positive, odd moduli.
     */

    /* Modular exponentiation wrt. N is always used for
     * RSA public key operations. */
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
   d722e:	b140      	cbz	r0, d7242 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>

#if !defined(MBEDTLS_RSA_NO_CRT)
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
   d7230:	b1ee      	cbz	r6, d726e <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x72>
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
   d7232:	f104 052c 	add.w	r5, r4, #44	; 0x2c
   d7236:	2100      	movs	r1, #0
   d7238:	4628      	mov	r0, r5
   d723a:	f00a f89c 	bl	e1376 <mbedtls_mpi_cmp_int>

#if !defined(MBEDTLS_RSA_NO_CRT)
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
   d723e:	2800      	cmp	r0, #0
   d7240:	dc01      	bgt.n	d7246 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x4a>
    /* Modular exponentiation wrt. N is always used for
     * RSA public key operations. */
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
        mbedtls_mpi_get_bit( &ctx->N, 0 ) == 0  )
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   d7242:	481a      	ldr	r0, [pc, #104]	; (d72ac <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0xb0>)
   d7244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
   d7246:	2100      	movs	r1, #0
   d7248:	4628      	mov	r0, r5
   d724a:	f009 fe65 	bl	e0f18 <mbedtls_mpi_get_bit>
#if !defined(MBEDTLS_RSA_NO_CRT)
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
   d724e:	2800      	cmp	r0, #0
   d7250:	d0f7      	beq.n	d7242 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
   d7252:	f104 0538 	add.w	r5, r4, #56	; 0x38
   d7256:	2100      	movs	r1, #0
   d7258:	4628      	mov	r0, r5
   d725a:	f00a f88c 	bl	e1376 <mbedtls_mpi_cmp_int>
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
   d725e:	2800      	cmp	r0, #0
   d7260:	ddef      	ble.n	d7242 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
          mbedtls_mpi_get_bit( &ctx->Q, 0 ) == 0  ) )
   d7262:	2100      	movs	r1, #0
   d7264:	4628      	mov	r0, r5
   d7266:	f009 fe57 	bl	e0f18 <mbedtls_mpi_get_bit>
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
   d726a:	2800      	cmp	r0, #0
   d726c:	d0e9      	beq.n	d7242 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
    /*
     * 2. Exponents must be positive
     */

    /* Always need E for public key operations */
    if( mbedtls_mpi_cmp_int( &ctx->E, 0 ) <= 0 )
   d726e:	2100      	movs	r1, #0
   d7270:	f104 0014 	add.w	r0, r4, #20
   d7274:	f00a f87f 	bl	e1376 <mbedtls_mpi_cmp_int>
   d7278:	2800      	cmp	r0, #0
   d727a:	dde2      	ble.n	d7242 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
    /* For private key operations, use D or DP & DQ
     * as (unblinded) exponents. */
    if( is_priv && mbedtls_mpi_cmp_int( &ctx->D, 0 ) <= 0 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
#else
    if( is_priv &&
   d727c:	b1a6      	cbz	r6, d72a8 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0xac>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
   d727e:	2100      	movs	r1, #0
   d7280:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d7284:	f00a f877 	bl	e1376 <mbedtls_mpi_cmp_int>
    /* For private key operations, use D or DP & DQ
     * as (unblinded) exponents. */
    if( is_priv && mbedtls_mpi_cmp_int( &ctx->D, 0 ) <= 0 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
#else
    if( is_priv &&
   d7288:	2800      	cmp	r0, #0
   d728a:	ddda      	ble.n	d7242 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
          mbedtls_mpi_cmp_int( &ctx->DQ, 0 ) <= 0  ) )
   d728c:	2100      	movs	r1, #0
   d728e:	f104 0050 	add.w	r0, r4, #80	; 0x50
   d7292:	f00a f870 	bl	e1376 <mbedtls_mpi_cmp_int>
     * as (unblinded) exponents. */
    if( is_priv && mbedtls_mpi_cmp_int( &ctx->D, 0 ) <= 0 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
#else
    if( is_priv &&
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
   d7296:	2800      	cmp	r0, #0
   d7298:	ddd3      	ble.n	d7242 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>

    /* It wouldn't lead to an error if it wasn't satisfied,
     * but check for QP >= 1 nonetheless. */
#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv &&
        mbedtls_mpi_cmp_int( &ctx->QP, 0 ) <= 0 )
   d729a:	2100      	movs	r1, #0
   d729c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   d72a0:	f00a f869 	bl	e1376 <mbedtls_mpi_cmp_int>
#endif

    /* It wouldn't lead to an error if it wasn't satisfied,
     * but check for QP >= 1 nonetheless. */
#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv &&
   d72a4:	2800      	cmp	r0, #0
   d72a6:	ddcc      	ble.n	d7242 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    }
#endif

    return( 0 );
   d72a8:	2000      	movs	r0, #0
   d72aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d72ac:	ffffbf80 	.word	0xffffbf80

000d72b0 <mbedtls_rsa_import_raw>:
                            unsigned char const *N, size_t N_len,
                            unsigned char const *P, size_t P_len,
                            unsigned char const *Q, size_t Q_len,
                            unsigned char const *D, size_t D_len,
                            unsigned char const *E, size_t E_len )
{
   d72b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d72b4:	9f09      	ldr	r7, [sp, #36]	; 0x24
   d72b6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   d72b8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   d72ba:	4604      	mov	r4, r0
   d72bc:	4698      	mov	r8, r3
    int ret = 0;
    RSA_VALIDATE_RET( ctx != NULL );

    if( N != NULL )
   d72be:	b149      	cbz	r1, d72d4 <mbedtls_rsa_import_raw+0x24>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->N, N, N_len ) );
   d72c0:	f100 0908 	add.w	r9, r0, #8
   d72c4:	4648      	mov	r0, r9
   d72c6:	f009 fe77 	bl	e0fb8 <mbedtls_mpi_read_binary>
   d72ca:	bb50      	cbnz	r0, d7322 <mbedtls_rsa_import_raw+0x72>
        ctx->len = mbedtls_mpi_size( &ctx->N );
   d72cc:	4648      	mov	r0, r9
   d72ce:	f009 fe6d 	bl	e0fac <mbedtls_mpi_size>
   d72d2:	6060      	str	r0, [r4, #4]
    }

    if( P != NULL )
   d72d4:	f1b8 0f00 	cmp.w	r8, #0
   d72d8:	d101      	bne.n	d72de <mbedtls_rsa_import_raw+0x2e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->P, P, P_len ) );

    if( Q != NULL )
   d72da:	b947      	cbnz	r7, d72ee <mbedtls_rsa_import_raw+0x3e>
   d72dc:	e00e      	b.n	d72fc <mbedtls_rsa_import_raw+0x4c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->N, N, N_len ) );
        ctx->len = mbedtls_mpi_size( &ctx->N );
    }

    if( P != NULL )
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->P, P, P_len ) );
   d72de:	9a08      	ldr	r2, [sp, #32]
   d72e0:	4641      	mov	r1, r8
   d72e2:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d72e6:	f009 fe67 	bl	e0fb8 <mbedtls_mpi_read_binary>
   d72ea:	b9d0      	cbnz	r0, d7322 <mbedtls_rsa_import_raw+0x72>
   d72ec:	e7f5      	b.n	d72da <mbedtls_rsa_import_raw+0x2a>

    if( Q != NULL )
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->Q, Q, Q_len ) );
   d72ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d72f0:	4639      	mov	r1, r7
   d72f2:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d72f6:	f009 fe5f 	bl	e0fb8 <mbedtls_mpi_read_binary>
   d72fa:	b990      	cbnz	r0, d7322 <mbedtls_rsa_import_raw+0x72>

    if( D != NULL )
   d72fc:	b136      	cbz	r6, d730c <mbedtls_rsa_import_raw+0x5c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->D, D, D_len ) );
   d72fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   d7300:	4631      	mov	r1, r6
   d7302:	f104 0020 	add.w	r0, r4, #32
   d7306:	f009 fe57 	bl	e0fb8 <mbedtls_mpi_read_binary>
   d730a:	b950      	cbnz	r0, d7322 <mbedtls_rsa_import_raw+0x72>

    if( E != NULL )
   d730c:	b135      	cbz	r5, d731c <mbedtls_rsa_import_raw+0x6c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->E, E, E_len ) );
   d730e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   d7310:	4629      	mov	r1, r5
   d7312:	f104 0014 	add.w	r0, r4, #20
   d7316:	f009 fe4f 	bl	e0fb8 <mbedtls_mpi_read_binary>

cleanup:

    if( ret != 0 )
   d731a:	b910      	cbnz	r0, d7322 <mbedtls_rsa_import_raw+0x72>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );

    return( 0 );
   d731c:	2000      	movs	r0, #0
   d731e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->E, E, E_len ) );

cleanup:

    if( ret != 0 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
   d7322:	f5a0 4081 	sub.w	r0, r0, #16512	; 0x4080

    return( 0 );
}
   d7326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

000d732c <mbedtls_rsa_complete>:

    return( 0 );
}

int mbedtls_rsa_complete( mbedtls_rsa_context *ctx )
{
   d732c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int have_N, have_P, have_Q, have_D, have_E;
    int n_missing, pq_missing, d_missing, is_pub, is_priv;

    RSA_VALIDATE_RET( ctx != NULL );

    have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
   d7330:	f100 0b08 	add.w	fp, r0, #8

    return( 0 );
}

int mbedtls_rsa_complete( mbedtls_rsa_context *ctx )
{
   d7334:	b087      	sub	sp, #28
   d7336:	4607      	mov	r7, r0
    int have_N, have_P, have_Q, have_D, have_E;
    int n_missing, pq_missing, d_missing, is_pub, is_priv;

    RSA_VALIDATE_RET( ctx != NULL );

    have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
   d7338:	2100      	movs	r1, #0
   d733a:	4658      	mov	r0, fp
   d733c:	f00a f81b 	bl	e1376 <mbedtls_mpi_cmp_int>
    have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
   d7340:	f107 092c 	add.w	r9, r7, #44	; 0x2c
   d7344:	2100      	movs	r1, #0
    int have_N, have_P, have_Q, have_D, have_E;
    int n_missing, pq_missing, d_missing, is_pub, is_priv;

    RSA_VALIDATE_RET( ctx != NULL );

    have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
   d7346:	4680      	mov	r8, r0
    have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
   d7348:	4648      	mov	r0, r9
   d734a:	f00a f814 	bl	e1376 <mbedtls_mpi_cmp_int>
    have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
   d734e:	f107 0a38 	add.w	sl, r7, #56	; 0x38
    int n_missing, pq_missing, d_missing, is_pub, is_priv;

    RSA_VALIDATE_RET( ctx != NULL );

    have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
    have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
   d7352:	9005      	str	r0, [sp, #20]
    have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
   d7354:	2100      	movs	r1, #0
   d7356:	4650      	mov	r0, sl
   d7358:	f00a f80d 	bl	e1376 <mbedtls_mpi_cmp_int>
    have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );
   d735c:	f107 0320 	add.w	r3, r7, #32
   d7360:	2100      	movs	r1, #0

    RSA_VALIDATE_RET( ctx != NULL );

    have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
    have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
    have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
   d7362:	4605      	mov	r5, r0
    have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );
   d7364:	4618      	mov	r0, r3
   d7366:	9302      	str	r3, [sp, #8]
   d7368:	f00a f805 	bl	e1376 <mbedtls_mpi_cmp_int>
    have_E = ( mbedtls_mpi_cmp_int( &ctx->E, 0 ) != 0 );
   d736c:	f107 0314 	add.w	r3, r7, #20
    RSA_VALIDATE_RET( ctx != NULL );

    have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
    have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
    have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
    have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );
   d7370:	9004      	str	r0, [sp, #16]
    have_E = ( mbedtls_mpi_cmp_int( &ctx->E, 0 ) != 0 );
   d7372:	2100      	movs	r1, #0
   d7374:	4618      	mov	r0, r3
   d7376:	9303      	str	r3, [sp, #12]
   d7378:	f009 fffd 	bl	e1376 <mbedtls_mpi_cmp_int>
     * (1) P, Q missing.
     * (2) D and potentially N missing.
     *
     */

    n_missing  =              have_P &&  have_Q &&  have_D && have_E;
   d737c:	9b05      	ldr	r3, [sp, #20]
   d737e:	9a04      	ldr	r2, [sp, #16]
   d7380:	b14b      	cbz	r3, d7396 <mbedtls_rsa_complete+0x6a>
   d7382:	b125      	cbz	r5, d738e <mbedtls_rsa_complete+0x62>
   d7384:	b12a      	cbz	r2, d7392 <mbedtls_rsa_complete+0x66>
   d7386:	1c06      	adds	r6, r0, #0
   d7388:	bf18      	it	ne
   d738a:	2601      	movne	r6, #1
   d738c:	e013      	b.n	d73b6 <mbedtls_rsa_complete+0x8a>
   d738e:	462e      	mov	r6, r5
   d7390:	e011      	b.n	d73b6 <mbedtls_rsa_complete+0x8a>
   d7392:	4616      	mov	r6, r2
   d7394:	e00f      	b.n	d73b6 <mbedtls_rsa_complete+0x8a>
    pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
   d7396:	f1b8 0f00 	cmp.w	r8, #0
   d739a:	d103      	bne.n	d73a4 <mbedtls_rsa_complete+0x78>
    d_missing  =              have_P &&  have_Q && !have_D && have_E;
   d739c:	4644      	mov	r4, r8
     * (1) P, Q missing.
     * (2) D and potentially N missing.
     *
     */

    n_missing  =              have_P &&  have_Q &&  have_D && have_E;
   d739e:	4646      	mov	r6, r8
    pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
    d_missing  =              have_P &&  have_Q && !have_D && have_E;
    is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;
   d73a0:	2200      	movs	r2, #0
   d73a2:	e024      	b.n	d73ee <mbedtls_rsa_complete+0xc2>
     * (2) D and potentially N missing.
     *
     */

    n_missing  =              have_P &&  have_Q &&  have_D && have_E;
    pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
   d73a4:	b9cd      	cbnz	r5, d73da <mbedtls_rsa_complete+0xae>
   d73a6:	b11a      	cbz	r2, d73b0 <mbedtls_rsa_complete+0x84>
   d73a8:	b9f0      	cbnz	r0, d73e8 <mbedtls_rsa_complete+0xbc>
   d73aa:	4606      	mov	r6, r0
   d73ac:	4604      	mov	r4, r0
   d73ae:	e00e      	b.n	d73ce <mbedtls_rsa_complete+0xa2>
   d73b0:	462e      	mov	r6, r5
   d73b2:	462c      	mov	r4, r5
   d73b4:	e00d      	b.n	d73d2 <mbedtls_rsa_complete+0xa6>
    d_missing  =              have_P &&  have_Q && !have_D && have_E;
   d73b6:	b1ad      	cbz	r5, d73e4 <mbedtls_rsa_complete+0xb8>
   d73b8:	b992      	cbnz	r2, d73e0 <mbedtls_rsa_complete+0xb4>
   d73ba:	1c04      	adds	r4, r0, #0
   d73bc:	bf18      	it	ne
   d73be:	2401      	movne	r4, #1
    is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;
   d73c0:	f1b8 0f00 	cmp.w	r8, #0
   d73c4:	d0ec      	beq.n	d73a0 <mbedtls_rsa_complete+0x74>
   d73c6:	2b00      	cmp	r3, #0
   d73c8:	d1ea      	bne.n	d73a0 <mbedtls_rsa_complete+0x74>
   d73ca:	2d00      	cmp	r5, #0
   d73cc:	d1e8      	bne.n	d73a0 <mbedtls_rsa_complete+0x74>
   d73ce:	2a00      	cmp	r2, #0
   d73d0:	d1e6      	bne.n	d73a0 <mbedtls_rsa_complete+0x74>
   d73d2:	2800      	cmp	r0, #0
   d73d4:	d0e4      	beq.n	d73a0 <mbedtls_rsa_complete+0x74>
   d73d6:	2201      	movs	r2, #1
   d73d8:	e009      	b.n	d73ee <mbedtls_rsa_complete+0xc2>
     *
     */

    n_missing  =              have_P &&  have_Q &&  have_D && have_E;
    pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
    d_missing  =              have_P &&  have_Q && !have_D && have_E;
   d73da:	461c      	mov	r4, r3
     * (1) P, Q missing.
     * (2) D and potentially N missing.
     *
     */

    n_missing  =              have_P &&  have_Q &&  have_D && have_E;
   d73dc:	461e      	mov	r6, r3
   d73de:	e7df      	b.n	d73a0 <mbedtls_rsa_complete+0x74>
    pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
    d_missing  =              have_P &&  have_Q && !have_D && have_E;
   d73e0:	2400      	movs	r4, #0
   d73e2:	e7ed      	b.n	d73c0 <mbedtls_rsa_complete+0x94>
   d73e4:	462c      	mov	r4, r5
   d73e6:	e7db      	b.n	d73a0 <mbedtls_rsa_complete+0x74>
     * (2) D and potentially N missing.
     *
     */

    n_missing  =              have_P &&  have_Q &&  have_D && have_E;
    pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
   d73e8:	2601      	movs	r6, #1
    d_missing  =              have_P &&  have_Q && !have_D && have_E;
   d73ea:	462c      	mov	r4, r5
   d73ec:	e002      	b.n	d73f4 <mbedtls_rsa_complete+0xc8>
    is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;

    /* These three alternatives are mutually exclusive */
    is_priv = n_missing || pq_missing || d_missing;
   d73ee:	2e00      	cmp	r6, #0
   d73f0:	d03d      	beq.n	d746e <mbedtls_rsa_complete+0x142>
   d73f2:	2600      	movs	r6, #0
   d73f4:	9404      	str	r4, [sp, #16]
   d73f6:	2401      	movs	r4, #1

    /*
     * Step 1: Deduce N if P, Q are provided.
     */

    if( !have_N && have_P && have_Q )
   d73f8:	f1b8 0f00 	cmp.w	r8, #0
   d73fc:	d10b      	bne.n	d7416 <mbedtls_rsa_complete+0xea>
   d73fe:	b153      	cbz	r3, d7416 <mbedtls_rsa_complete+0xea>
   d7400:	b14d      	cbz	r5, d7416 <mbedtls_rsa_complete+0xea>
    {
        if( ( ret = mbedtls_mpi_mul_mpi( &ctx->N, &ctx->P,
   d7402:	4652      	mov	r2, sl
   d7404:	4649      	mov	r1, r9
   d7406:	4658      	mov	r0, fp
   d7408:	f00a f8d4 	bl	e15b4 <mbedtls_mpi_mul_mpi>
   d740c:	bb28      	cbnz	r0, d745a <mbedtls_rsa_complete+0x12e>
                                         &ctx->Q ) ) != 0 )
        {
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
        }

        ctx->len = mbedtls_mpi_size( &ctx->N );
   d740e:	4658      	mov	r0, fp
   d7410:	f009 fdcc 	bl	e0fac <mbedtls_mpi_size>
   d7414:	6078      	str	r0, [r7, #4]

    /*
     * Step 2: Deduce and verify all remaining core parameters.
     */

    if( pq_missing )
   d7416:	b146      	cbz	r6, d742a <mbedtls_rsa_complete+0xfe>
    {
        ret = mbedtls_rsa_deduce_primes( &ctx->N, &ctx->E, &ctx->D,
                                         &ctx->P, &ctx->Q );
   d7418:	f8cd a000 	str.w	sl, [sp]
   d741c:	464b      	mov	r3, r9
   d741e:	9a02      	ldr	r2, [sp, #8]
   d7420:	9903      	ldr	r1, [sp, #12]
   d7422:	4658      	mov	r0, fp
   d7424:	f00d f8da 	bl	e45dc <mbedtls_rsa_deduce_primes>
   d7428:	e007      	b.n	d743a <mbedtls_rsa_complete+0x10e>
        if( ret != 0 )
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );

    }
    else if( d_missing )
   d742a:	9b04      	ldr	r3, [sp, #16]
   d742c:	b133      	cbz	r3, d743c <mbedtls_rsa_complete+0x110>
    {
        if( ( ret = mbedtls_rsa_deduce_private_exponent( &ctx->P,
   d742e:	9b02      	ldr	r3, [sp, #8]
   d7430:	9a03      	ldr	r2, [sp, #12]
   d7432:	4651      	mov	r1, sl
   d7434:	4648      	mov	r0, r9
   d7436:	f00d f9cd 	bl	e47d4 <mbedtls_rsa_deduce_private_exponent>
   d743a:	b970      	cbnz	r0, d745a <mbedtls_rsa_complete+0x12e>
     * Step 3: Deduce all additional parameters specific
     *         to our current RSA implementation.
     */

#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv )
   d743c:	b184      	cbz	r4, d7460 <mbedtls_rsa_complete+0x134>
    {
        ret = mbedtls_rsa_deduce_crt( &ctx->P,  &ctx->Q,  &ctx->D,
   d743e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
                                      &ctx->DP, &ctx->DQ, &ctx->QP );
   d7442:	9301      	str	r3, [sp, #4]
     */

#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv )
    {
        ret = mbedtls_rsa_deduce_crt( &ctx->P,  &ctx->Q,  &ctx->D,
   d7444:	f107 0350 	add.w	r3, r7, #80	; 0x50
                                      &ctx->DP, &ctx->DQ, &ctx->QP );
   d7448:	9300      	str	r3, [sp, #0]
   d744a:	9a02      	ldr	r2, [sp, #8]
   d744c:	f107 0344 	add.w	r3, r7, #68	; 0x44
   d7450:	4651      	mov	r1, sl
   d7452:	4648      	mov	r0, r9
   d7454:	f00d fb62 	bl	e4b1c <mbedtls_rsa_deduce_crt>
        if( ret != 0 )
   d7458:	b110      	cbz	r0, d7460 <mbedtls_rsa_complete+0x134>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
   d745a:	f5a0 4081 	sub.w	r0, r0, #16512	; 0x4080
   d745e:	e00c      	b.n	d747a <mbedtls_rsa_complete+0x14e>

    /*
     * Step 3: Basic sanity checks
     */

    return( rsa_check_context( ctx, is_priv, 1 ) );
   d7460:	4621      	mov	r1, r4
   d7462:	4638      	mov	r0, r7
}
   d7464:	b007      	add	sp, #28
   d7466:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    /*
     * Step 3: Basic sanity checks
     */

    return( rsa_check_context( ctx, is_priv, 1 ) );
   d746a:	f7ff bec7 	b.w	d71fc <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
    is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;

    /* These three alternatives are mutually exclusive */
    is_priv = n_missing || pq_missing || d_missing;

    if( !is_priv && !is_pub )
   d746e:	b90c      	cbnz	r4, d7474 <mbedtls_rsa_complete+0x148>
   d7470:	b112      	cbz	r2, d7478 <mbedtls_rsa_complete+0x14c>
   d7472:	4626      	mov	r6, r4
   d7474:	9404      	str	r4, [sp, #16]
   d7476:	e7bf      	b.n	d73f8 <mbedtls_rsa_complete+0xcc>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   d7478:	4801      	ldr	r0, [pc, #4]	; (d7480 <mbedtls_rsa_complete+0x154>)
    /*
     * Step 3: Basic sanity checks
     */

    return( rsa_check_context( ctx, is_priv, 1 ) );
}
   d747a:	b007      	add	sp, #28
   d747c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7480:	ffffbf80 	.word	0xffffbf80

000d7484 <mbedtls_rsa_init>:
 * Initialize an RSA context
 */
void mbedtls_rsa_init( mbedtls_rsa_context *ctx,
               int padding,
               int hash_id )
{
   d7484:	b570      	push	{r4, r5, r6, lr}
   d7486:	4604      	mov	r4, r0
   d7488:	460e      	mov	r6, r1
   d748a:	4615      	mov	r5, r2
    RSA_VALIDATE( ctx != NULL );
    RSA_VALIDATE( padding == MBEDTLS_RSA_PKCS_V15 ||
                  padding == MBEDTLS_RSA_PKCS_V21 );

    memset( ctx, 0, sizeof( mbedtls_rsa_context ) );
   d748c:	2100      	movs	r1, #0
   d748e:	22ac      	movs	r2, #172	; 0xac
   d7490:	f012 fb37 	bl	e9b02 <memset>
{
    RSA_VALIDATE( ctx != NULL );
    RSA_VALIDATE( padding == MBEDTLS_RSA_PKCS_V15 ||
                  padding == MBEDTLS_RSA_PKCS_V21 );

    ctx->padding = padding;
   d7494:	f8c4 60a4 	str.w	r6, [r4, #164]	; 0xa4
    ctx->hash_id = hash_id;
   d7498:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
   d749c:	bd70      	pop	{r4, r5, r6, pc}

000d749e <mbedtls_rsa_get_len>:
 */

size_t mbedtls_rsa_get_len( const mbedtls_rsa_context *ctx )
{
    return( ctx->len );
}
   d749e:	6840      	ldr	r0, [r0, #4]
   d74a0:	4770      	bx	lr
	...

000d74a4 <mbedtls_rsa_check_pubkey>:

/*
 * Check a public RSA key
 */
int mbedtls_rsa_check_pubkey( const mbedtls_rsa_context *ctx )
{
   d74a4:	b570      	push	{r4, r5, r6, lr}
    RSA_VALIDATE_RET( ctx != NULL );

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
   d74a6:	2100      	movs	r1, #0

/*
 * Check a public RSA key
 */
int mbedtls_rsa_check_pubkey( const mbedtls_rsa_context *ctx )
{
   d74a8:	4604      	mov	r4, r0
    RSA_VALIDATE_RET( ctx != NULL );

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
   d74aa:	f7ff fea7 	bl	d71fc <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
   d74ae:	4605      	mov	r5, r0
   d74b0:	b9b8      	cbnz	r0, d74e2 <mbedtls_rsa_check_pubkey+0x3e>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );

    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 )
   d74b2:	f104 0608 	add.w	r6, r4, #8
   d74b6:	4630      	mov	r0, r6
   d74b8:	f009 fd58 	bl	e0f6c <mbedtls_mpi_bitlen>
   d74bc:	287f      	cmp	r0, #127	; 0x7f
   d74be:	d910      	bls.n	d74e2 <mbedtls_rsa_check_pubkey+0x3e>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
   d74c0:	3414      	adds	r4, #20
   d74c2:	4629      	mov	r1, r5
   d74c4:	4620      	mov	r0, r4
   d74c6:	f009 fd27 	bl	e0f18 <mbedtls_mpi_get_bit>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
   d74ca:	b150      	cbz	r0, d74e2 <mbedtls_rsa_check_pubkey+0x3e>
   d74cc:	4620      	mov	r0, r4
   d74ce:	f009 fd4d 	bl	e0f6c <mbedtls_mpi_bitlen>
    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
   d74d2:	2801      	cmp	r0, #1
   d74d4:	d905      	bls.n	d74e2 <mbedtls_rsa_check_pubkey+0x3e>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
        mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )
   d74d6:	4631      	mov	r1, r6
   d74d8:	4620      	mov	r0, r4
   d74da:	f009 ff07 	bl	e12ec <mbedtls_mpi_cmp_mpi>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
   d74de:	2800      	cmp	r0, #0
   d74e0:	db00      	blt.n	d74e4 <mbedtls_rsa_check_pubkey+0x40>
        mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
   d74e2:	4d01      	ldr	r5, [pc, #4]	; (d74e8 <mbedtls_rsa_check_pubkey+0x44>)
    }

    return( 0 );
}
   d74e4:	4628      	mov	r0, r5
   d74e6:	bd70      	pop	{r4, r5, r6, pc}
   d74e8:	ffffbe00 	.word	0xffffbe00

000d74ec <mbedtls_rsa_check_privkey>:

/*
 * Check for the consistency of all fields in an RSA private key context
 */
int mbedtls_rsa_check_privkey( const mbedtls_rsa_context *ctx )
{
   d74ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   d74ee:	b085      	sub	sp, #20
   d74f0:	4604      	mov	r4, r0
    RSA_VALIDATE_RET( ctx != NULL );

    if( mbedtls_rsa_check_pubkey( ctx ) != 0 ||
   d74f2:	f7ff ffd7 	bl	d74a4 <mbedtls_rsa_check_pubkey>
   d74f6:	bb28      	cbnz	r0, d7544 <mbedtls_rsa_check_privkey+0x58>
        rsa_check_context( ctx, 1 /* private */, 1 /* blinding */ ) != 0 )
   d74f8:	2101      	movs	r1, #1
   d74fa:	4620      	mov	r0, r4
   d74fc:	f7ff fe7e 	bl	d71fc <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
 */
int mbedtls_rsa_check_privkey( const mbedtls_rsa_context *ctx )
{
    RSA_VALIDATE_RET( ctx != NULL );

    if( mbedtls_rsa_check_pubkey( ctx ) != 0 ||
   d7500:	bb00      	cbnz	r0, d7544 <mbedtls_rsa_check_privkey+0x58>
        rsa_check_context( ctx, 1 /* private */, 1 /* blinding */ ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_rsa_validate_params( &ctx->N, &ctx->P, &ctx->Q,
   d7502:	f104 0314 	add.w	r3, r4, #20
   d7506:	f104 052c 	add.w	r5, r4, #44	; 0x2c
   d750a:	f104 0638 	add.w	r6, r4, #56	; 0x38
   d750e:	f104 0720 	add.w	r7, r4, #32
   d7512:	9002      	str	r0, [sp, #8]
   d7514:	9001      	str	r0, [sp, #4]
   d7516:	9300      	str	r3, [sp, #0]
   d7518:	4632      	mov	r2, r6
   d751a:	463b      	mov	r3, r7
   d751c:	4629      	mov	r1, r5
   d751e:	f104 0008 	add.w	r0, r4, #8
   d7522:	f00d fa35 	bl	e4990 <mbedtls_rsa_validate_params>
   d7526:	b968      	cbnz	r0, d7544 <mbedtls_rsa_check_privkey+0x58>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

#if !defined(MBEDTLS_RSA_NO_CRT)
    else if( mbedtls_rsa_validate_crt( &ctx->P, &ctx->Q, &ctx->D,
   d7528:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   d752c:	9301      	str	r3, [sp, #4]
   d752e:	f104 0350 	add.w	r3, r4, #80	; 0x50
   d7532:	9300      	str	r3, [sp, #0]
   d7534:	463a      	mov	r2, r7
   d7536:	f104 0344 	add.w	r3, r4, #68	; 0x44
   d753a:	4631      	mov	r1, r6
   d753c:	4628      	mov	r0, r5
   d753e:	f00d f9a7 	bl	e4890 <mbedtls_rsa_validate_crt>
   d7542:	b100      	cbz	r0, d7546 <mbedtls_rsa_check_privkey+0x5a>
    RSA_VALIDATE_RET( ctx != NULL );

    if( mbedtls_rsa_check_pubkey( ctx ) != 0 ||
        rsa_check_context( ctx, 1 /* private */, 1 /* blinding */ ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
   d7544:	4801      	ldr	r0, [pc, #4]	; (d754c <mbedtls_rsa_check_privkey+0x60>)
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }
#endif

    return( 0 );
}
   d7546:	b005      	add	sp, #20
   d7548:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d754a:	bf00      	nop
   d754c:	ffffbe00 	.word	0xffffbe00

000d7550 <mbedtls_rsa_check_pub_priv>:
/*
 * Check if contexts holding a public and private key match
 */
int mbedtls_rsa_check_pub_priv( const mbedtls_rsa_context *pub,
                                const mbedtls_rsa_context *prv )
{
   d7550:	b538      	push	{r3, r4, r5, lr}
   d7552:	4605      	mov	r5, r0
   d7554:	460c      	mov	r4, r1
    RSA_VALIDATE_RET( pub != NULL );
    RSA_VALIDATE_RET( prv != NULL );

    if( mbedtls_rsa_check_pubkey( pub )  != 0 ||
   d7556:	f7ff ffa5 	bl	d74a4 <mbedtls_rsa_check_pubkey>
   d755a:	b950      	cbnz	r0, d7572 <mbedtls_rsa_check_pub_priv+0x22>
        mbedtls_rsa_check_privkey( prv ) != 0 )
   d755c:	4620      	mov	r0, r4
   d755e:	f7ff ffc5 	bl	d74ec <mbedtls_rsa_check_privkey>
                                const mbedtls_rsa_context *prv )
{
    RSA_VALIDATE_RET( pub != NULL );
    RSA_VALIDATE_RET( prv != NULL );

    if( mbedtls_rsa_check_pubkey( pub )  != 0 ||
   d7562:	b930      	cbnz	r0, d7572 <mbedtls_rsa_check_pub_priv+0x22>
        mbedtls_rsa_check_privkey( prv ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
   d7564:	f104 0108 	add.w	r1, r4, #8
   d7568:	f105 0008 	add.w	r0, r5, #8
   d756c:	f009 febe 	bl	e12ec <mbedtls_mpi_cmp_mpi>
   d7570:	b108      	cbz	r0, d7576 <mbedtls_rsa_check_pub_priv+0x26>
    RSA_VALIDATE_RET( prv != NULL );

    if( mbedtls_rsa_check_pubkey( pub )  != 0 ||
        mbedtls_rsa_check_privkey( prv ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
   d7572:	4805      	ldr	r0, [pc, #20]	; (d7588 <mbedtls_rsa_check_pub_priv+0x38>)
   d7574:	bd38      	pop	{r3, r4, r5, pc}
    }

    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
        mbedtls_mpi_cmp_mpi( &pub->E, &prv->E ) != 0 )
   d7576:	f104 0114 	add.w	r1, r4, #20
   d757a:	f105 0014 	add.w	r0, r5, #20
   d757e:	f009 feb5 	bl	e12ec <mbedtls_mpi_cmp_mpi>
        mbedtls_rsa_check_privkey( prv ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
   d7582:	2800      	cmp	r0, #0
   d7584:	d1f5      	bne.n	d7572 <mbedtls_rsa_check_pub_priv+0x22>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    return( 0 );
}
   d7586:	bd38      	pop	{r3, r4, r5, pc}
   d7588:	ffffbe00 	.word	0xffffbe00

000d758c <mbedtls_rsa_public>:
 * Do an RSA public key operation
 */
int mbedtls_rsa_public( mbedtls_rsa_context *ctx,
                const unsigned char *input,
                unsigned char *output )
{
   d758c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7590:	460c      	mov	r4, r1
   d7592:	b086      	sub	sp, #24
    mbedtls_mpi T;
    RSA_VALIDATE_RET( ctx != NULL );
    RSA_VALIDATE_RET( input != NULL );
    RSA_VALIDATE_RET( output != NULL );

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
   d7594:	2100      	movs	r1, #0
 * Do an RSA public key operation
 */
int mbedtls_rsa_public( mbedtls_rsa_context *ctx,
                const unsigned char *input,
                unsigned char *output )
{
   d7596:	4605      	mov	r5, r0
   d7598:	4617      	mov	r7, r2
    mbedtls_mpi T;
    RSA_VALIDATE_RET( ctx != NULL );
    RSA_VALIDATE_RET( input != NULL );
    RSA_VALIDATE_RET( output != NULL );

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
   d759a:	f7ff fe2f 	bl	d71fc <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
   d759e:	4606      	mov	r6, r0
   d75a0:	bb78      	cbnz	r0, d7602 <mbedtls_rsa_public+0x76>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    mbedtls_mpi_init( &T );
   d75a2:	a803      	add	r0, sp, #12
   d75a4:	f009 fbbb 	bl	e0d1e <mbedtls_mpi_init>
#if defined(MBEDTLS_THREADING_C)
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
   d75a8:	4621      	mov	r1, r4
   d75aa:	686a      	ldr	r2, [r5, #4]
   d75ac:	a803      	add	r0, sp, #12
   d75ae:	f009 fd03 	bl	e0fb8 <mbedtls_mpi_read_binary>
   d75b2:	4604      	mov	r4, r0
   d75b4:	b9f0      	cbnz	r0, d75f4 <mbedtls_rsa_public+0x68>

    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
   d75b6:	f105 0408 	add.w	r4, r5, #8
   d75ba:	4621      	mov	r1, r4
   d75bc:	a803      	add	r0, sp, #12
   d75be:	f009 fe95 	bl	e12ec <mbedtls_mpi_cmp_mpi>
   d75c2:	2800      	cmp	r0, #0
   d75c4:	da14      	bge.n	d75f0 <mbedtls_rsa_public+0x64>
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
        goto cleanup;
    }

    olen = ctx->len;
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
   d75c6:	f105 0368 	add.w	r3, r5, #104	; 0x68
   d75ca:	a903      	add	r1, sp, #12
   d75cc:	9300      	str	r3, [sp, #0]
   d75ce:	f105 0214 	add.w	r2, r5, #20
   d75d2:	4623      	mov	r3, r4
   d75d4:	4608      	mov	r0, r1
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
        goto cleanup;
    }

    olen = ctx->len;
   d75d6:	f8d5 8004 	ldr.w	r8, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
   d75da:	f00a fa59 	bl	e1a90 <mbedtls_mpi_exp_mod>
   d75de:	4604      	mov	r4, r0
   d75e0:	b940      	cbnz	r0, d75f4 <mbedtls_rsa_public+0x68>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
   d75e2:	4642      	mov	r2, r8
   d75e4:	4639      	mov	r1, r7
   d75e6:	a803      	add	r0, sp, #12
   d75e8:	f009 fd1d 	bl	e1026 <mbedtls_mpi_write_binary>
   d75ec:	4604      	mov	r4, r0
   d75ee:	e001      	b.n	d75f4 <mbedtls_rsa_public+0x68>

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );

    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
   d75f0:	f06f 0403 	mvn.w	r4, #3
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    mbedtls_mpi_free( &T );
   d75f4:	a803      	add	r0, sp, #12
   d75f6:	f009 fb98 	bl	e0d2a <mbedtls_mpi_free>

    if( ret != 0 )
   d75fa:	b11c      	cbz	r4, d7604 <mbedtls_rsa_public+0x78>
        return( MBEDTLS_ERR_RSA_PUBLIC_FAILED + ret );
   d75fc:	f5a4 4685 	sub.w	r6, r4, #17024	; 0x4280
   d7600:	e000      	b.n	d7604 <mbedtls_rsa_public+0x78>
    RSA_VALIDATE_RET( ctx != NULL );
    RSA_VALIDATE_RET( input != NULL );
    RSA_VALIDATE_RET( output != NULL );

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   d7602:	4e02      	ldr	r6, [pc, #8]	; (d760c <mbedtls_rsa_public+0x80>)

    if( ret != 0 )
        return( MBEDTLS_ERR_RSA_PUBLIC_FAILED + ret );

    return( 0 );
}
   d7604:	4630      	mov	r0, r6
   d7606:	b006      	add	sp, #24
   d7608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d760c:	ffffbf80 	.word	0xffffbf80

000d7610 <mbedtls_rsa_private>:
int mbedtls_rsa_private( mbedtls_rsa_context *ctx,
                 int (*f_rng)(void *, unsigned char *, size_t),
                 void *p_rng,
                 const unsigned char *input,
                 unsigned char *output )
{
   d7610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7614:	460e      	mov	r6, r1
   d7616:	b0a5      	sub	sp, #148	; 0x94

    RSA_VALIDATE_RET( ctx != NULL );
    RSA_VALIDATE_RET( input  != NULL );
    RSA_VALIDATE_RET( output != NULL );

    if( rsa_check_context( ctx, 1             /* private key checks */,
   d7618:	2101      	movs	r1, #1
int mbedtls_rsa_private( mbedtls_rsa_context *ctx,
                 int (*f_rng)(void *, unsigned char *, size_t),
                 void *p_rng,
                 const unsigned char *input,
                 unsigned char *output )
{
   d761a:	4604      	mov	r4, r0
   d761c:	4692      	mov	sl, r2
   d761e:	461d      	mov	r5, r3

    RSA_VALIDATE_RET( ctx != NULL );
    RSA_VALIDATE_RET( input  != NULL );
    RSA_VALIDATE_RET( output != NULL );

    if( rsa_check_context( ctx, 1             /* private key checks */,
   d7620:	f7ff fdec 	bl	d71fc <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
   d7624:	9003      	str	r0, [sp, #12]
   d7626:	2800      	cmp	r0, #0
   d7628:	f040 819b 	bne.w	d7962 <mbedtls_rsa_private+0x352>
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    /* MPI Initialization */
    mbedtls_mpi_init( &T );
   d762c:	a806      	add	r0, sp, #24
   d762e:	f009 fb76 	bl	e0d1e <mbedtls_mpi_init>

    mbedtls_mpi_init( &P1 );
   d7632:	a809      	add	r0, sp, #36	; 0x24
   d7634:	f009 fb73 	bl	e0d1e <mbedtls_mpi_init>
    mbedtls_mpi_init( &Q1 );
   d7638:	a80c      	add	r0, sp, #48	; 0x30
   d763a:	f009 fb70 	bl	e0d1e <mbedtls_mpi_init>
    mbedtls_mpi_init( &R );
   d763e:	a80f      	add	r0, sp, #60	; 0x3c
   d7640:	f009 fb6d 	bl	e0d1e <mbedtls_mpi_init>

    if( f_rng != NULL )
   d7644:	b12e      	cbz	r6, d7652 <mbedtls_rsa_private+0x42>
    {
#if defined(MBEDTLS_RSA_NO_CRT)
        mbedtls_mpi_init( &D_blind );
#else
        mbedtls_mpi_init( &DP_blind );
   d7646:	a818      	add	r0, sp, #96	; 0x60
   d7648:	f009 fb69 	bl	e0d1e <mbedtls_mpi_init>
        mbedtls_mpi_init( &DQ_blind );
   d764c:	a81b      	add	r0, sp, #108	; 0x6c
   d764e:	f009 fb66 	bl	e0d1e <mbedtls_mpi_init>
#endif
    }

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_init( &TP ); mbedtls_mpi_init( &TQ );
   d7652:	a812      	add	r0, sp, #72	; 0x48
   d7654:	f009 fb63 	bl	e0d1e <mbedtls_mpi_init>
   d7658:	a815      	add	r0, sp, #84	; 0x54
   d765a:	f009 fb60 	bl	e0d1e <mbedtls_mpi_init>
#endif

    mbedtls_mpi_init( &I );
   d765e:	a81e      	add	r0, sp, #120	; 0x78
   d7660:	f009 fb5d 	bl	e0d1e <mbedtls_mpi_init>
    mbedtls_mpi_init( &C );
   d7664:	a821      	add	r0, sp, #132	; 0x84
   d7666:	f009 fb5a 	bl	e0d1e <mbedtls_mpi_init>

    /* End of MPI initialization */

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
   d766a:	6862      	ldr	r2, [r4, #4]
   d766c:	4629      	mov	r1, r5
   d766e:	a806      	add	r0, sp, #24
   d7670:	f009 fca2 	bl	e0fb8 <mbedtls_mpi_read_binary>
   d7674:	4607      	mov	r7, r0
   d7676:	2800      	cmp	r0, #0
   d7678:	f040 8150 	bne.w	d791c <mbedtls_rsa_private+0x30c>
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
   d767c:	f104 0508 	add.w	r5, r4, #8
   d7680:	4629      	mov	r1, r5
   d7682:	a806      	add	r0, sp, #24
   d7684:	f009 fe32 	bl	e12ec <mbedtls_mpi_cmp_mpi>
   d7688:	2800      	cmp	r0, #0
   d768a:	f280 8143 	bge.w	d7914 <mbedtls_rsa_private+0x304>
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
        goto cleanup;
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &I, &T ) );
   d768e:	a906      	add	r1, sp, #24
   d7690:	a81e      	add	r0, sp, #120	; 0x78
   d7692:	f009 fbc4 	bl	e0e1e <mbedtls_mpi_copy>
   d7696:	4607      	mov	r7, r0
   d7698:	2800      	cmp	r0, #0
   d769a:	f040 813f 	bne.w	d791c <mbedtls_rsa_private+0x30c>
    mbedtls_mpi DP_blind, DQ_blind;

    /* Pointers to actual exponents to be used - either the unblinded
     * or the blinded ones, depending on the presence of a PRNG. */
    mbedtls_mpi *DP = &ctx->DP;
    mbedtls_mpi *DQ = &ctx->DQ;
   d769e:	f104 0350 	add.w	r3, r4, #80	; 0x50
     * the mod p resp. mod q computation (if used). */
    mbedtls_mpi DP_blind, DQ_blind;

    /* Pointers to actual exponents to be used - either the unblinded
     * or the blinded ones, depending on the presence of a PRNG. */
    mbedtls_mpi *DP = &ctx->DP;
   d76a2:	f104 0944 	add.w	r9, r4, #68	; 0x44
    mbedtls_mpi *DQ = &ctx->DQ;
   d76a6:	9304      	str	r3, [sp, #16]
        goto cleanup;
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &I, &T ) );

    if( f_rng != NULL )
   d76a8:	2e00      	cmp	r6, #0
   d76aa:	f000 80c5 	beq.w	d7838 <mbedtls_rsa_private+0x228>
static int rsa_prepare_blinding( mbedtls_rsa_context *ctx,
                 int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
    int ret, count = 0;

    if( ctx->Vf.p != NULL )
   d76ae:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   d76b2:	b323      	cbz	r3, d76fe <mbedtls_rsa_private+0xee>
    {
        /* We already have blinding values, just update them by squaring */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vi, &ctx->Vi, &ctx->Vi ) );
   d76b4:	f104 088c 	add.w	r8, r4, #140	; 0x8c
   d76b8:	4642      	mov	r2, r8
   d76ba:	4641      	mov	r1, r8
   d76bc:	4640      	mov	r0, r8
   d76be:	f009 ff79 	bl	e15b4 <mbedtls_mpi_mul_mpi>
   d76c2:	4607      	mov	r7, r0
   d76c4:	2800      	cmp	r0, #0
   d76c6:	f040 8129 	bne.w	d791c <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vi, &ctx->Vi, &ctx->N ) );
   d76ca:	462a      	mov	r2, r5
   d76cc:	4641      	mov	r1, r8
   d76ce:	4640      	mov	r0, r8
   d76d0:	f00a f9ac 	bl	e1a2c <mbedtls_mpi_mod_mpi>
   d76d4:	4607      	mov	r7, r0
   d76d6:	2800      	cmp	r0, #0
   d76d8:	f040 8120 	bne.w	d791c <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vf, &ctx->Vf, &ctx->Vf ) );
   d76dc:	f104 0898 	add.w	r8, r4, #152	; 0x98
   d76e0:	4642      	mov	r2, r8
   d76e2:	4641      	mov	r1, r8
   d76e4:	4640      	mov	r0, r8
   d76e6:	f009 ff65 	bl	e15b4 <mbedtls_mpi_mul_mpi>
   d76ea:	4607      	mov	r7, r0
   d76ec:	2800      	cmp	r0, #0
   d76ee:	f040 8115 	bne.w	d791c <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vf, &ctx->Vf, &ctx->N ) );
   d76f2:	462a      	mov	r2, r5
   d76f4:	4641      	mov	r1, r8
   d76f6:	4640      	mov	r0, r8
   d76f8:	f00a f998 	bl	e1a2c <mbedtls_mpi_mod_mpi>
   d76fc:	e037      	b.n	d776e <mbedtls_rsa_private+0x15e>
static int rsa_prepare_blinding( mbedtls_rsa_context *ctx,
                 int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
    int ret, count = 0;

    if( ctx->Vf.p != NULL )
   d76fe:	230c      	movs	r3, #12
   d7700:	9305      	str	r3, [sp, #20]
    /* Unblinding value: Vf = random number, invertible mod N */
    do {
        if( count++ > 10 )
            return( MBEDTLS_ERR_RSA_RNG_FAILED );

        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
   d7702:	f104 0b98 	add.w	fp, r4, #152	; 0x98
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );
   d7706:	f104 088c 	add.w	r8, r4, #140	; 0x8c
        goto cleanup;
    }

    /* Unblinding value: Vf = random number, invertible mod N */
    do {
        if( count++ > 10 )
   d770a:	9b05      	ldr	r3, [sp, #20]
   d770c:	3b01      	subs	r3, #1
   d770e:	9305      	str	r3, [sp, #20]
   d7710:	f000 812a 	beq.w	d7968 <mbedtls_rsa_private+0x358>
            return( MBEDTLS_ERR_RSA_RNG_FAILED );

        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
   d7714:	6861      	ldr	r1, [r4, #4]
   d7716:	4653      	mov	r3, sl
   d7718:	4632      	mov	r2, r6
   d771a:	3901      	subs	r1, #1
   d771c:	4658      	mov	r0, fp
   d771e:	f00a fc5b 	bl	e1fd8 <mbedtls_mpi_fill_random>
   d7722:	4607      	mov	r7, r0
   d7724:	2800      	cmp	r0, #0
   d7726:	f040 80f9 	bne.w	d791c <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );
   d772a:	462a      	mov	r2, r5
   d772c:	4659      	mov	r1, fp
   d772e:	4640      	mov	r0, r8
   d7730:	f00a fbcd 	bl	e1ece <mbedtls_mpi_gcd>
   d7734:	4607      	mov	r7, r0
   d7736:	2800      	cmp	r0, #0
   d7738:	f040 80f0 	bne.w	d791c <mbedtls_rsa_private+0x30c>
    } while( mbedtls_mpi_cmp_int( &ctx->Vi, 1 ) != 0 );
   d773c:	2101      	movs	r1, #1
   d773e:	4640      	mov	r0, r8
   d7740:	f009 fe19 	bl	e1376 <mbedtls_mpi_cmp_int>

        goto cleanup;
    }

    /* Unblinding value: Vf = random number, invertible mod N */
    do {
   d7744:	2800      	cmp	r0, #0
   d7746:	d1e0      	bne.n	d770a <mbedtls_rsa_private+0xfa>
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );
    } while( mbedtls_mpi_cmp_int( &ctx->Vi, 1 ) != 0 );

    /* Blinding value: Vi =  Vf^(-e) mod N */
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &ctx->Vi, &ctx->Vf, &ctx->N ) );
   d7748:	462a      	mov	r2, r5
   d774a:	4659      	mov	r1, fp
   d774c:	4640      	mov	r0, r8
   d774e:	f00a fc77 	bl	e2040 <mbedtls_mpi_inv_mod>
   d7752:	4607      	mov	r7, r0
   d7754:	2800      	cmp	r0, #0
   d7756:	f040 80e1 	bne.w	d791c <mbedtls_rsa_private+0x30c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &ctx->Vi, &ctx->Vi, &ctx->E, &ctx->N, &ctx->RN ) );
   d775a:	f104 0368 	add.w	r3, r4, #104	; 0x68
   d775e:	9300      	str	r3, [sp, #0]
   d7760:	f104 0214 	add.w	r2, r4, #20
   d7764:	462b      	mov	r3, r5
   d7766:	4641      	mov	r1, r8
   d7768:	4640      	mov	r0, r8
   d776a:	f00a f991 	bl	e1a90 <mbedtls_mpi_exp_mod>
   d776e:	4607      	mov	r7, r0
    {
        /*
         * Blinding
         * T = T * Vi mod N
         */
        MBEDTLS_MPI_CHK( rsa_prepare_blinding( ctx, f_rng, p_rng ) );
   d7770:	2800      	cmp	r0, #0
   d7772:	f040 80d3 	bne.w	d791c <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vi ) );
   d7776:	a906      	add	r1, sp, #24
   d7778:	f104 028c 	add.w	r2, r4, #140	; 0x8c
   d777c:	4608      	mov	r0, r1
   d777e:	f009 ff19 	bl	e15b4 <mbedtls_mpi_mul_mpi>
   d7782:	4607      	mov	r7, r0
   d7784:	2800      	cmp	r0, #0
   d7786:	f040 80c9 	bne.w	d791c <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
   d778a:	a906      	add	r1, sp, #24
   d778c:	462a      	mov	r2, r5
   d778e:	4608      	mov	r0, r1
   d7790:	f00a f94c 	bl	e1a2c <mbedtls_mpi_mod_mpi>
   d7794:	4607      	mov	r7, r0
   d7796:	2800      	cmp	r0, #0
   d7798:	f040 80c0 	bne.w	d791c <mbedtls_rsa_private+0x30c>

        /*
         * Exponent blinding
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &P1, &ctx->P, 1 ) );
   d779c:	2201      	movs	r2, #1
   d779e:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   d77a2:	a809      	add	r0, sp, #36	; 0x24
   d77a4:	f009 fef0 	bl	e1588 <mbedtls_mpi_sub_int>
   d77a8:	4607      	mov	r7, r0
   d77aa:	2800      	cmp	r0, #0
   d77ac:	f040 80b6 	bne.w	d791c <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &Q1, &ctx->Q, 1 ) );
   d77b0:	2201      	movs	r2, #1
   d77b2:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d77b6:	a80c      	add	r0, sp, #48	; 0x30
   d77b8:	f009 fee6 	bl	e1588 <mbedtls_mpi_sub_int>
   d77bc:	4607      	mov	r7, r0
   d77be:	2800      	cmp	r0, #0
   d77c0:	f040 80ac 	bne.w	d791c <mbedtls_rsa_private+0x30c>
        D = &D_blind;
#else
        /*
         * DP_blind = ( P - 1 ) * R + DP
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,
   d77c4:	4653      	mov	r3, sl
   d77c6:	4632      	mov	r2, r6
   d77c8:	211c      	movs	r1, #28
   d77ca:	a80f      	add	r0, sp, #60	; 0x3c
   d77cc:	f00a fc04 	bl	e1fd8 <mbedtls_mpi_fill_random>
   d77d0:	4607      	mov	r7, r0
   d77d2:	2800      	cmp	r0, #0
   d77d4:	f040 80a2 	bne.w	d791c <mbedtls_rsa_private+0x30c>
                         f_rng, p_rng ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DP_blind, &P1, &R ) );
   d77d8:	aa0f      	add	r2, sp, #60	; 0x3c
   d77da:	a909      	add	r1, sp, #36	; 0x24
   d77dc:	a818      	add	r0, sp, #96	; 0x60
   d77de:	f009 fee9 	bl	e15b4 <mbedtls_mpi_mul_mpi>
   d77e2:	4607      	mov	r7, r0
   d77e4:	2800      	cmp	r0, #0
   d77e6:	f040 8099 	bne.w	d791c <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DP_blind, &DP_blind,
   d77ea:	a918      	add	r1, sp, #96	; 0x60
   d77ec:	464a      	mov	r2, r9
   d77ee:	4608      	mov	r0, r1
   d77f0:	f009 fe71 	bl	e14d6 <mbedtls_mpi_add_mpi>
   d77f4:	4607      	mov	r7, r0
   d77f6:	2800      	cmp	r0, #0
   d77f8:	f040 8090 	bne.w	d791c <mbedtls_rsa_private+0x30c>
        DP = &DP_blind;

        /*
         * DQ_blind = ( Q - 1 ) * R + DQ
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,
   d77fc:	4653      	mov	r3, sl
   d77fe:	4632      	mov	r2, r6
   d7800:	211c      	movs	r1, #28
   d7802:	a80f      	add	r0, sp, #60	; 0x3c
   d7804:	f00a fbe8 	bl	e1fd8 <mbedtls_mpi_fill_random>
   d7808:	4607      	mov	r7, r0
   d780a:	2800      	cmp	r0, #0
   d780c:	f040 8086 	bne.w	d791c <mbedtls_rsa_private+0x30c>
                         f_rng, p_rng ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DQ_blind, &Q1, &R ) );
   d7810:	aa0f      	add	r2, sp, #60	; 0x3c
   d7812:	a90c      	add	r1, sp, #48	; 0x30
   d7814:	a81b      	add	r0, sp, #108	; 0x6c
   d7816:	f009 fecd 	bl	e15b4 <mbedtls_mpi_mul_mpi>
   d781a:	4607      	mov	r7, r0
   d781c:	2800      	cmp	r0, #0
   d781e:	d17d      	bne.n	d791c <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DQ_blind, &DQ_blind,
   d7820:	a91b      	add	r1, sp, #108	; 0x6c
   d7822:	9a04      	ldr	r2, [sp, #16]
   d7824:	4608      	mov	r0, r1
   d7826:	f009 fe56 	bl	e14d6 <mbedtls_mpi_add_mpi>
   d782a:	4607      	mov	r7, r0
   d782c:	2800      	cmp	r0, #0
   d782e:	d175      	bne.n	d791c <mbedtls_rsa_private+0x30c>
                    &ctx->DQ ) );

        DQ = &DQ_blind;
   d7830:	ab1b      	add	r3, sp, #108	; 0x6c
   d7832:	9304      	str	r3, [sp, #16]
                         f_rng, p_rng ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DP_blind, &P1, &R ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DP_blind, &DP_blind,
                    &ctx->DP ) );

        DP = &DP_blind;
   d7834:	f10d 0960 	add.w	r9, sp, #96	; 0x60
     *
     * TP = input ^ dP mod P
     * TQ = input ^ dQ mod Q
     */

    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &TP, &T, DP, &ctx->P, &ctx->RP ) );
   d7838:	f104 0374 	add.w	r3, r4, #116	; 0x74
   d783c:	f104 082c 	add.w	r8, r4, #44	; 0x2c
   d7840:	9300      	str	r3, [sp, #0]
   d7842:	464a      	mov	r2, r9
   d7844:	4643      	mov	r3, r8
   d7846:	a906      	add	r1, sp, #24
   d7848:	a812      	add	r0, sp, #72	; 0x48
   d784a:	f00a f921 	bl	e1a90 <mbedtls_mpi_exp_mod>
   d784e:	4607      	mov	r7, r0
   d7850:	2800      	cmp	r0, #0
   d7852:	d163      	bne.n	d791c <mbedtls_rsa_private+0x30c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &TQ, &T, DQ, &ctx->Q, &ctx->RQ ) );
   d7854:	f104 0380 	add.w	r3, r4, #128	; 0x80
   d7858:	f104 0938 	add.w	r9, r4, #56	; 0x38
   d785c:	9300      	str	r3, [sp, #0]
   d785e:	9a04      	ldr	r2, [sp, #16]
   d7860:	464b      	mov	r3, r9
   d7862:	a906      	add	r1, sp, #24
   d7864:	a815      	add	r0, sp, #84	; 0x54
   d7866:	f00a f913 	bl	e1a90 <mbedtls_mpi_exp_mod>
   d786a:	4607      	mov	r7, r0
   d786c:	2800      	cmp	r0, #0
   d786e:	d155      	bne.n	d791c <mbedtls_rsa_private+0x30c>

    /*
     * T = (TP - TQ) * (Q^-1 mod P) mod P
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T, &TP, &TQ ) );
   d7870:	aa15      	add	r2, sp, #84	; 0x54
   d7872:	a912      	add	r1, sp, #72	; 0x48
   d7874:	a806      	add	r0, sp, #24
   d7876:	f009 fe4f 	bl	e1518 <mbedtls_mpi_sub_mpi>
   d787a:	4607      	mov	r7, r0
   d787c:	2800      	cmp	r0, #0
   d787e:	d14d      	bne.n	d791c <mbedtls_rsa_private+0x30c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &TP, &T, &ctx->QP ) );
   d7880:	f104 025c 	add.w	r2, r4, #92	; 0x5c
   d7884:	a906      	add	r1, sp, #24
   d7886:	a812      	add	r0, sp, #72	; 0x48
   d7888:	f009 fe94 	bl	e15b4 <mbedtls_mpi_mul_mpi>
   d788c:	4607      	mov	r7, r0
   d788e:	2800      	cmp	r0, #0
   d7890:	d144      	bne.n	d791c <mbedtls_rsa_private+0x30c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &TP, &ctx->P ) );
   d7892:	4642      	mov	r2, r8
   d7894:	a912      	add	r1, sp, #72	; 0x48
   d7896:	a806      	add	r0, sp, #24
   d7898:	f00a f8c8 	bl	e1a2c <mbedtls_mpi_mod_mpi>
   d789c:	4607      	mov	r7, r0
   d789e:	2800      	cmp	r0, #0
   d78a0:	d13c      	bne.n	d791c <mbedtls_rsa_private+0x30c>

    /*
     * T = TQ + T * Q
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &TP, &T, &ctx->Q ) );
   d78a2:	464a      	mov	r2, r9
   d78a4:	a906      	add	r1, sp, #24
   d78a6:	a812      	add	r0, sp, #72	; 0x48
   d78a8:	f009 fe84 	bl	e15b4 <mbedtls_mpi_mul_mpi>
   d78ac:	4607      	mov	r7, r0
   d78ae:	2800      	cmp	r0, #0
   d78b0:	d134      	bne.n	d791c <mbedtls_rsa_private+0x30c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T, &TQ, &TP ) );
   d78b2:	aa12      	add	r2, sp, #72	; 0x48
   d78b4:	a915      	add	r1, sp, #84	; 0x54
   d78b6:	a806      	add	r0, sp, #24
   d78b8:	f009 fe0d 	bl	e14d6 <mbedtls_mpi_add_mpi>
   d78bc:	4607      	mov	r7, r0
   d78be:	bb68      	cbnz	r0, d791c <mbedtls_rsa_private+0x30c>
#endif /* MBEDTLS_RSA_NO_CRT */

    if( f_rng != NULL )
   d78c0:	b966      	cbnz	r6, d78dc <mbedtls_rsa_private+0x2cc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vf ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
    }

    /* Verify the result to prevent glitching attacks. */
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &C, &T, &ctx->E,
   d78c2:	f104 0368 	add.w	r3, r4, #104	; 0x68
   d78c6:	9300      	str	r3, [sp, #0]
   d78c8:	f104 0214 	add.w	r2, r4, #20
   d78cc:	462b      	mov	r3, r5
   d78ce:	a906      	add	r1, sp, #24
   d78d0:	a821      	add	r0, sp, #132	; 0x84
   d78d2:	f00a f8dd 	bl	e1a90 <mbedtls_mpi_exp_mod>
   d78d6:	4607      	mov	r7, r0
   d78d8:	bb00      	cbnz	r0, d791c <mbedtls_rsa_private+0x30c>
   d78da:	e00f      	b.n	d78fc <mbedtls_rsa_private+0x2ec>
    {
        /*
         * Unblind
         * T = T * Vf mod N
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vf ) );
   d78dc:	a906      	add	r1, sp, #24
   d78de:	f104 0298 	add.w	r2, r4, #152	; 0x98
   d78e2:	4608      	mov	r0, r1
   d78e4:	f009 fe66 	bl	e15b4 <mbedtls_mpi_mul_mpi>
   d78e8:	4607      	mov	r7, r0
   d78ea:	b9b8      	cbnz	r0, d791c <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
   d78ec:	a906      	add	r1, sp, #24
   d78ee:	462a      	mov	r2, r5
   d78f0:	4608      	mov	r0, r1
   d78f2:	f00a f89b 	bl	e1a2c <mbedtls_mpi_mod_mpi>
   d78f6:	4607      	mov	r7, r0
   d78f8:	b980      	cbnz	r0, d791c <mbedtls_rsa_private+0x30c>
   d78fa:	e7e2      	b.n	d78c2 <mbedtls_rsa_private+0x2b2>
    }

    /* Verify the result to prevent glitching attacks. */
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &C, &T, &ctx->E,
                                          &ctx->N, &ctx->RN ) );
    if( mbedtls_mpi_cmp_mpi( &C, &I ) != 0 )
   d78fc:	a91e      	add	r1, sp, #120	; 0x78
   d78fe:	a821      	add	r0, sp, #132	; 0x84
   d7900:	f009 fcf4 	bl	e12ec <mbedtls_mpi_cmp_mpi>
   d7904:	b948      	cbnz	r0, d791a <mbedtls_rsa_private+0x30a>
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
        goto cleanup;
    }

    olen = ctx->len;
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
   d7906:	6862      	ldr	r2, [r4, #4]
   d7908:	992e      	ldr	r1, [sp, #184]	; 0xb8
   d790a:	a806      	add	r0, sp, #24
   d790c:	f009 fb8b 	bl	e1026 <mbedtls_mpi_write_binary>
   d7910:	4607      	mov	r7, r0
   d7912:	e003      	b.n	d791c <mbedtls_rsa_private+0x30c>
    /* End of MPI initialization */

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
   d7914:	f06f 0703 	mvn.w	r7, #3
   d7918:	e000      	b.n	d791c <mbedtls_rsa_private+0x30c>
    /* Verify the result to prevent glitching attacks. */
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &C, &T, &ctx->E,
                                          &ctx->N, &ctx->RN ) );
    if( mbedtls_mpi_cmp_mpi( &C, &I ) != 0 )
    {
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
   d791a:	4f16      	ldr	r7, [pc, #88]	; (d7974 <mbedtls_rsa_private+0x364>)
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    mbedtls_mpi_free( &P1 );
   d791c:	a809      	add	r0, sp, #36	; 0x24
   d791e:	f009 fa04 	bl	e0d2a <mbedtls_mpi_free>
    mbedtls_mpi_free( &Q1 );
   d7922:	a80c      	add	r0, sp, #48	; 0x30
   d7924:	f009 fa01 	bl	e0d2a <mbedtls_mpi_free>
    mbedtls_mpi_free( &R );
   d7928:	a80f      	add	r0, sp, #60	; 0x3c
   d792a:	f009 f9fe 	bl	e0d2a <mbedtls_mpi_free>

    if( f_rng != NULL )
   d792e:	b12e      	cbz	r6, d793c <mbedtls_rsa_private+0x32c>
    {
#if defined(MBEDTLS_RSA_NO_CRT)
        mbedtls_mpi_free( &D_blind );
#else
        mbedtls_mpi_free( &DP_blind );
   d7930:	a818      	add	r0, sp, #96	; 0x60
   d7932:	f009 f9fa 	bl	e0d2a <mbedtls_mpi_free>
        mbedtls_mpi_free( &DQ_blind );
   d7936:	a81b      	add	r0, sp, #108	; 0x6c
   d7938:	f009 f9f7 	bl	e0d2a <mbedtls_mpi_free>
#endif
    }

    mbedtls_mpi_free( &T );
   d793c:	a806      	add	r0, sp, #24
   d793e:	f009 f9f4 	bl	e0d2a <mbedtls_mpi_free>

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &TP ); mbedtls_mpi_free( &TQ );
   d7942:	a812      	add	r0, sp, #72	; 0x48
   d7944:	f009 f9f1 	bl	e0d2a <mbedtls_mpi_free>
   d7948:	a815      	add	r0, sp, #84	; 0x54
   d794a:	f009 f9ee 	bl	e0d2a <mbedtls_mpi_free>
#endif

    mbedtls_mpi_free( &C );
   d794e:	a821      	add	r0, sp, #132	; 0x84
   d7950:	f009 f9eb 	bl	e0d2a <mbedtls_mpi_free>
    mbedtls_mpi_free( &I );
   d7954:	a81e      	add	r0, sp, #120	; 0x78
   d7956:	f009 f9e8 	bl	e0d2a <mbedtls_mpi_free>

    if( ret != 0 )
   d795a:	b13f      	cbz	r7, d796c <mbedtls_rsa_private+0x35c>
        return( MBEDTLS_ERR_RSA_PRIVATE_FAILED + ret );
   d795c:	f5a7 4386 	sub.w	r3, r7, #17152	; 0x4300
   d7960:	e000      	b.n	d7964 <mbedtls_rsa_private+0x354>
    RSA_VALIDATE_RET( output != NULL );

    if( rsa_check_context( ctx, 1             /* private key checks */,
                                f_rng != NULL /* blinding y/n       */ ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   d7962:	4b05      	ldr	r3, [pc, #20]	; (d7978 <mbedtls_rsa_private+0x368>)
   d7964:	9303      	str	r3, [sp, #12]
   d7966:	e001      	b.n	d796c <mbedtls_rsa_private+0x35c>
    }

    /* Unblinding value: Vf = random number, invertible mod N */
    do {
        if( count++ > 10 )
            return( MBEDTLS_ERR_RSA_RNG_FAILED );
   d7968:	4f04      	ldr	r7, [pc, #16]	; (d797c <mbedtls_rsa_private+0x36c>)
   d796a:	e7d7      	b.n	d791c <mbedtls_rsa_private+0x30c>

    if( ret != 0 )
        return( MBEDTLS_ERR_RSA_PRIVATE_FAILED + ret );

    return( 0 );
}
   d796c:	9803      	ldr	r0, [sp, #12]
   d796e:	b025      	add	sp, #148	; 0x94
   d7970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7974:	ffffbc80 	.word	0xffffbc80
   d7978:	ffffbf80 	.word	0xffffbf80
   d797c:	ffffbb80 	.word	0xffffbb80

000d7980 <mbedtls_rsa_rsaes_oaep_encrypt>:
                            int mode,
                            const unsigned char *label, size_t label_len,
                            size_t ilen,
                            const unsigned char *input,
                            unsigned char *output )
{
   d7980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7984:	b08d      	sub	sp, #52	; 0x34
                      mode == MBEDTLS_RSA_PUBLIC );
    RSA_VALIDATE_RET( output != NULL );
    RSA_VALIDATE_RET( input != NULL );
    RSA_VALIDATE_RET( label_len == 0 || label != NULL );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
   d7986:	2b01      	cmp	r3, #1
                            int mode,
                            const unsigned char *label, size_t label_len,
                            size_t ilen,
                            const unsigned char *input,
                            unsigned char *output )
{
   d7988:	4680      	mov	r8, r0
   d798a:	468b      	mov	fp, r1
   d798c:	9205      	str	r2, [sp, #20]
   d798e:	9306      	str	r3, [sp, #24]
   d7990:	9f18      	ldr	r7, [sp, #96]	; 0x60
   d7992:	9e1a      	ldr	r6, [sp, #104]	; 0x68
                      mode == MBEDTLS_RSA_PUBLIC );
    RSA_VALIDATE_RET( output != NULL );
    RSA_VALIDATE_RET( input != NULL );
    RSA_VALIDATE_RET( label_len == 0 || label != NULL );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
   d7994:	d105      	bne.n	d79a2 <mbedtls_rsa_rsaes_oaep_encrypt+0x22>
   d7996:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   d799a:	2b01      	cmp	r3, #1
   d799c:	d001      	beq.n	d79a2 <mbedtls_rsa_rsaes_oaep_encrypt+0x22>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   d799e:	4b41      	ldr	r3, [pc, #260]	; (d7aa4 <mbedtls_rsa_rsaes_oaep_encrypt+0x124>)
   d79a0:	e07b      	b.n	d7a9a <mbedtls_rsa_rsaes_oaep_encrypt+0x11a>

    if( f_rng == NULL )
   d79a2:	f1bb 0f00 	cmp.w	fp, #0
   d79a6:	d0fa      	beq.n	d799e <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
   d79a8:	f898 00a8 	ldrb.w	r0, [r8, #168]	; 0xa8
   d79ac:	f005 faca 	bl	dcf44 <mbedtls_md_info_from_type>
    if( md_info == NULL )
   d79b0:	9003      	str	r0, [sp, #12]
   d79b2:	2800      	cmp	r0, #0
   d79b4:	d0f3      	beq.n	d799e <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    olen = ctx->len;
   d79b6:	f8d8 4004 	ldr.w	r4, [r8, #4]
    hlen = mbedtls_md_get_size( md_info );
   d79ba:	f005 fbfb 	bl	dd1b4 <mbedtls_md_get_size>
   d79be:	4605      	mov	r5, r0

    /* first comparison checks for overflow */
    if( ilen + 2 * hlen + 2 < ilen || olen < ilen + 2 * hlen + 2 )
   d79c0:	b200      	sxth	r0, r0
   d79c2:	0043      	lsls	r3, r0, #1
   d79c4:	9304      	str	r3, [sp, #16]
   d79c6:	9a04      	ldr	r2, [sp, #16]
   d79c8:	1cbb      	adds	r3, r7, #2
   d79ca:	4413      	add	r3, r2
   d79cc:	429f      	cmp	r7, r3
   d79ce:	d8e6      	bhi.n	d799e <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
   d79d0:	429c      	cmp	r4, r3
   d79d2:	d3e4      	bcc.n	d799e <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    memset( output, 0, olen );
   d79d4:	4622      	mov	r2, r4
   d79d6:	2100      	movs	r1, #0
   d79d8:	4630      	mov	r0, r6
   d79da:	f012 f892 	bl	e9b02 <memset>

    *p++ = 0;
   d79de:	f106 0901 	add.w	r9, r6, #1
   d79e2:	2300      	movs	r3, #0
   d79e4:	7033      	strb	r3, [r6, #0]

    /* Generate a random octet string seed */
    if( ( ret = f_rng( p_rng, p, hlen ) ) != 0 )
   d79e6:	462a      	mov	r2, r5
   d79e8:	4649      	mov	r1, r9
   d79ea:	9805      	ldr	r0, [sp, #20]
   d79ec:	47d8      	blx	fp
   d79ee:	b110      	cbz	r0, d79f6 <mbedtls_rsa_rsaes_oaep_encrypt+0x76>
        return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
   d79f0:	f5a0 4389 	sub.w	r3, r0, #17536	; 0x4480
   d79f4:	e051      	b.n	d7a9a <mbedtls_rsa_rsaes_oaep_encrypt+0x11a>

    p += hlen;
   d79f6:	eb09 0a05 	add.w	sl, r9, r5

    /* Construct DB */
    if( ( ret = mbedtls_md( md_info, label, label_len, p ) ) != 0 )
   d79fa:	4653      	mov	r3, sl
   d79fc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   d79fe:	9916      	ldr	r1, [sp, #88]	; 0x58
   d7a00:	9803      	ldr	r0, [sp, #12]
   d7a02:	f005 fb0b 	bl	dd01c <mbedtls_md>
   d7a06:	4603      	mov	r3, r0
   d7a08:	2800      	cmp	r0, #0
   d7a0a:	d146      	bne.n	d7a9a <mbedtls_rsa_rsaes_oaep_encrypt+0x11a>
   d7a0c:	9007      	str	r0, [sp, #28]
   d7a0e:	1ea0      	subs	r0, r4, #2
   d7a10:	9b04      	ldr	r3, [sp, #16]
        return( ret );
    p += hlen;
    p += olen - 2 * hlen - 2 - ilen;
    *p++ = 1;
    memcpy( p, input, ilen );
   d7a12:	9919      	ldr	r1, [sp, #100]	; 0x64
   d7a14:	1bc0      	subs	r0, r0, r7
   d7a16:	4428      	add	r0, r5
   d7a18:	1ac0      	subs	r0, r0, r3
    /* Construct DB */
    if( ( ret = mbedtls_md( md_info, label, label_len, p ) ) != 0 )
        return( ret );
    p += hlen;
    p += olen - 2 * hlen - 2 - ilen;
    *p++ = 1;
   d7a1a:	2201      	movs	r2, #1
   d7a1c:	f80a 2000 	strb.w	r2, [sl, r0]
    memcpy( p, input, ilen );
   d7a20:	4410      	add	r0, r2
   d7a22:	4450      	add	r0, sl
   d7a24:	463a      	mov	r2, r7

    mbedtls_md_init( &md_ctx );
   d7a26:	af09      	add	r7, sp, #36	; 0x24
    if( ( ret = mbedtls_md( md_info, label, label_len, p ) ) != 0 )
        return( ret );
    p += hlen;
    p += olen - 2 * hlen - 2 - ilen;
    *p++ = 1;
    memcpy( p, input, ilen );
   d7a28:	f012 f845 	bl	e9ab6 <memcpy>

    mbedtls_md_init( &md_ctx );
   d7a2c:	4638      	mov	r0, r7
   d7a2e:	f005 fa95 	bl	dcf5c <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
   d7a32:	9b07      	ldr	r3, [sp, #28]
   d7a34:	9903      	ldr	r1, [sp, #12]
   d7a36:	461a      	mov	r2, r3
   d7a38:	4638      	mov	r0, r7
   d7a3a:	f005 faaf 	bl	dcf9c <mbedtls_md_setup>
   d7a3e:	4603      	mov	r3, r0
   d7a40:	b9a8      	cbnz	r0, d7a6e <mbedtls_rsa_rsaes_oaep_encrypt+0xee>
        goto exit;

    /* maskedDB: Apply dbMask to DB */
    if( ( ret = mgf_mask( output + hlen + 1, olen - hlen - 1, output + 1, hlen,
   d7a42:	f105 0a01 	add.w	sl, r5, #1
   d7a46:	3c01      	subs	r4, #1
   d7a48:	44b2      	add	sl, r6
   d7a4a:	1b64      	subs	r4, r4, r5
   d7a4c:	462b      	mov	r3, r5
   d7a4e:	9700      	str	r7, [sp, #0]
   d7a50:	464a      	mov	r2, r9
   d7a52:	4621      	mov	r1, r4
   d7a54:	4650      	mov	r0, sl
   d7a56:	f7ff faeb 	bl	d7030 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
   d7a5a:	4603      	mov	r3, r0
   d7a5c:	b938      	cbnz	r0, d7a6e <mbedtls_rsa_rsaes_oaep_encrypt+0xee>
                          &md_ctx ) ) != 0 )
        goto exit;

    /* maskedSeed: Apply seedMask to seed */
    if( ( ret = mgf_mask( output + 1, hlen, output + hlen + 1, olen - hlen - 1,
   d7a5e:	4623      	mov	r3, r4
   d7a60:	9700      	str	r7, [sp, #0]
   d7a62:	4652      	mov	r2, sl
   d7a64:	4629      	mov	r1, r5
   d7a66:	4648      	mov	r0, r9
   d7a68:	f7ff fae2 	bl	d7030 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
   d7a6c:	4603      	mov	r3, r0
                          &md_ctx ) ) != 0 )
        goto exit;

exit:
    mbedtls_md_free( &md_ctx );
   d7a6e:	a809      	add	r0, sp, #36	; 0x24
   d7a70:	9303      	str	r3, [sp, #12]
   d7a72:	f005 fa78 	bl	dcf66 <mbedtls_md_free>

    if( ret != 0 )
   d7a76:	9b03      	ldr	r3, [sp, #12]
   d7a78:	b97b      	cbnz	r3, d7a9a <mbedtls_rsa_rsaes_oaep_encrypt+0x11a>
        return( ret );

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
   d7a7a:	9b06      	ldr	r3, [sp, #24]
   d7a7c:	b92b      	cbnz	r3, d7a8a <mbedtls_rsa_rsaes_oaep_encrypt+0x10a>
   d7a7e:	4632      	mov	r2, r6
   d7a80:	4631      	mov	r1, r6
   d7a82:	4640      	mov	r0, r8
   d7a84:	f7ff fd82 	bl	d758c <mbedtls_rsa_public>
   d7a88:	e006      	b.n	d7a98 <mbedtls_rsa_rsaes_oaep_encrypt+0x118>
   d7a8a:	9600      	str	r6, [sp, #0]
   d7a8c:	4633      	mov	r3, r6
   d7a8e:	9a05      	ldr	r2, [sp, #20]
   d7a90:	4659      	mov	r1, fp
   d7a92:	4640      	mov	r0, r8
   d7a94:	f7ff fdbc 	bl	d7610 <mbedtls_rsa_private>
   d7a98:	4603      	mov	r3, r0
}
   d7a9a:	4618      	mov	r0, r3
   d7a9c:	b00d      	add	sp, #52	; 0x34
   d7a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7aa2:	bf00      	nop
   d7aa4:	ffffbf80 	.word	0xffffbf80

000d7aa8 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt>:
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng,
                                 int mode, size_t ilen,
                                 const unsigned char *input,
                                 unsigned char *output )
{
   d7aa8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7aac:	469a      	mov	sl, r3
    RSA_VALIDATE_RET( mode == MBEDTLS_RSA_PRIVATE ||
                      mode == MBEDTLS_RSA_PUBLIC );
    RSA_VALIDATE_RET( output != NULL );
    RSA_VALIDATE_RET( input != NULL );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
   d7aae:	f1ba 0f01 	cmp.w	sl, #1
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng,
                                 int mode, size_t ilen,
                                 const unsigned char *input,
                                 unsigned char *output )
{
   d7ab2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d7ab4:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d7ab8:	9300      	str	r3, [sp, #0]
   d7aba:	4607      	mov	r7, r0
   d7abc:	4689      	mov	r9, r1
   d7abe:	4693      	mov	fp, r2
   d7ac0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    RSA_VALIDATE_RET( mode == MBEDTLS_RSA_PRIVATE ||
                      mode == MBEDTLS_RSA_PUBLIC );
    RSA_VALIDATE_RET( output != NULL );
    RSA_VALIDATE_RET( input != NULL );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
   d7ac2:	d104      	bne.n	d7ace <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x26>
   d7ac4:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   d7ac8:	b10b      	cbz	r3, d7ace <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x26>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   d7aca:	482c      	ldr	r0, [pc, #176]	; (d7b7c <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xd4>)
   d7acc:	e052      	b.n	d7b74 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xcc>

    olen = ctx->len;

    /* first comparison checks for overflow */
    if( ilen + 11 < ilen || olen < ilen + 11 )
   d7ace:	f118 030b 	adds.w	r3, r8, #11
    RSA_VALIDATE_RET( input != NULL );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    olen = ctx->len;
   d7ad2:	687c      	ldr	r4, [r7, #4]

    /* first comparison checks for overflow */
    if( ilen + 11 < ilen || olen < ilen + 11 )
   d7ad4:	d2f9      	bcs.n	d7aca <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x22>
   d7ad6:	429c      	cmp	r4, r3
   d7ad8:	d3f7      	bcc.n	d7aca <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x22>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    nb_pad = olen - 3 - ilen;
   d7ada:	3c03      	subs	r4, #3

    *p++ = 0;
   d7adc:	2300      	movs	r3, #0

    /* first comparison checks for overflow */
    if( ilen + 11 < ilen || olen < ilen + 11 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    nb_pad = olen - 3 - ilen;
   d7ade:	ebc8 0404 	rsb	r4, r8, r4

    *p++ = 0;
   d7ae2:	702b      	strb	r3, [r5, #0]
    if( mode == MBEDTLS_RSA_PUBLIC )
   d7ae4:	f1ba 0f00 	cmp.w	sl, #0
   d7ae8:	d119      	bne.n	d7b1e <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x76>
    {
        if( f_rng == NULL )
   d7aea:	f1b9 0f00 	cmp.w	r9, #0
   d7aee:	d0ec      	beq.n	d7aca <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x22>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        *p++ = MBEDTLS_RSA_CRYPT;
   d7af0:	1cae      	adds	r6, r5, #2
   d7af2:	2302      	movs	r3, #2
   d7af4:	706b      	strb	r3, [r5, #1]
   d7af6:	4434      	add	r4, r6

        while( nb_pad-- > 0 )
   d7af8:	42a6      	cmp	r6, r4
   d7afa:	d01a      	beq.n	d7b32 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x8a>
   d7afc:	2364      	movs	r3, #100	; 0x64
        {
            int rng_dl = 100;

            do {
                ret = f_rng( p_rng, p, 1 );
   d7afe:	2201      	movs	r2, #1
   d7b00:	4631      	mov	r1, r6
   d7b02:	4658      	mov	r0, fp
   d7b04:	9301      	str	r3, [sp, #4]
   d7b06:	47c8      	blx	r9
            } while( *p == 0 && --rng_dl && ret == 0 );
   d7b08:	7832      	ldrb	r2, [r6, #0]
   d7b0a:	bb7a      	cbnz	r2, d7b6c <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xc4>
   d7b0c:	9b01      	ldr	r3, [sp, #4]
   d7b0e:	3b01      	subs	r3, #1
   d7b10:	d102      	bne.n	d7b18 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x70>

            /* Check if RNG failed to generate data */
            if( rng_dl == 0 || ret != 0 )
                return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
   d7b12:	f5a0 4089 	sub.w	r0, r0, #17536	; 0x4480
   d7b16:	e02d      	b.n	d7b74 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xcc>
        {
            int rng_dl = 100;

            do {
                ret = f_rng( p_rng, p, 1 );
            } while( *p == 0 && --rng_dl && ret == 0 );
   d7b18:	2800      	cmp	r0, #0
   d7b1a:	d0f0      	beq.n	d7afe <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x56>
   d7b1c:	e7f9      	b.n	d7b12 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x6a>
            p++;
        }
    }
    else
    {
        *p++ = MBEDTLS_RSA_SIGN;
   d7b1e:	2201      	movs	r2, #1
   d7b20:	1cab      	adds	r3, r5, #2
   d7b22:	706a      	strb	r2, [r5, #1]
   d7b24:	441c      	add	r4, r3

        while( nb_pad-- > 0 )
            *p++ = 0xFF;
   d7b26:	22ff      	movs	r2, #255	; 0xff
    }
    else
    {
        *p++ = MBEDTLS_RSA_SIGN;

        while( nb_pad-- > 0 )
   d7b28:	429c      	cmp	r4, r3
   d7b2a:	d002      	beq.n	d7b32 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x8a>
            *p++ = 0xFF;
   d7b2c:	f803 2b01 	strb.w	r2, [r3], #1
    }
    else
    {
        *p++ = MBEDTLS_RSA_SIGN;

        while( nb_pad-- > 0 )
   d7b30:	e7fa      	b.n	d7b28 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x80>
            *p++ = 0xFF;
    }

    *p++ = 0;
   d7b32:	4620      	mov	r0, r4
   d7b34:	2300      	movs	r3, #0
   d7b36:	f800 3b01 	strb.w	r3, [r0], #1
    memcpy( p, input, ilen );
   d7b3a:	4642      	mov	r2, r8
   d7b3c:	9900      	ldr	r1, [sp, #0]
   d7b3e:	f011 ffba 	bl	e9ab6 <memcpy>

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
   d7b42:	f1ba 0f00 	cmp.w	sl, #0
   d7b46:	d107      	bne.n	d7b58 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xb0>
   d7b48:	462a      	mov	r2, r5
   d7b4a:	4629      	mov	r1, r5
   d7b4c:	4638      	mov	r0, r7
}
   d7b4e:	b003      	add	sp, #12
   d7b50:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    *p++ = 0;
    memcpy( p, input, ilen );

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
   d7b54:	f7ff bd1a 	b.w	d758c <mbedtls_rsa_public>
   d7b58:	462b      	mov	r3, r5
   d7b5a:	465a      	mov	r2, fp
   d7b5c:	4649      	mov	r1, r9
   d7b5e:	4638      	mov	r0, r7
   d7b60:	950c      	str	r5, [sp, #48]	; 0x30
}
   d7b62:	b003      	add	sp, #12
   d7b64:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    *p++ = 0;
    memcpy( p, input, ilen );

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
   d7b68:	f7ff bd52 	b.w	d7610 <mbedtls_rsa_private>
            do {
                ret = f_rng( p_rng, p, 1 );
            } while( *p == 0 && --rng_dl && ret == 0 );

            /* Check if RNG failed to generate data */
            if( rng_dl == 0 || ret != 0 )
   d7b6c:	2800      	cmp	r0, #0
   d7b6e:	d1d0      	bne.n	d7b12 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x6a>
                return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );

            p++;
   d7b70:	3601      	adds	r6, #1
        if( f_rng == NULL )
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        *p++ = MBEDTLS_RSA_CRYPT;

        while( nb_pad-- > 0 )
   d7b72:	e7c1      	b.n	d7af8 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x50>
    memcpy( p, input, ilen );

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
}
   d7b74:	b003      	add	sp, #12
   d7b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7b7a:	bf00      	nop
   d7b7c:	ffffbf80 	.word	0xffffbf80

000d7b80 <mbedtls_rsa_pkcs1_encrypt>:
                       int (*f_rng)(void *, unsigned char *, size_t),
                       void *p_rng,
                       int mode, size_t ilen,
                       const unsigned char *input,
                       unsigned char *output )
{
   d7b80:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7b82:	b087      	sub	sp, #28
    RSA_VALIDATE_RET( mode == MBEDTLS_RSA_PRIVATE ||
                      mode == MBEDTLS_RSA_PUBLIC );
    RSA_VALIDATE_RET( output != NULL );
    RSA_VALIDATE_RET( input != NULL );

    switch( ctx->padding )
   d7b84:	f8d0 70a4 	ldr.w	r7, [r0, #164]	; 0xa4
                       int (*f_rng)(void *, unsigned char *, size_t),
                       void *p_rng,
                       int mode, size_t ilen,
                       const unsigned char *input,
                       unsigned char *output )
{
   d7b88:	ac0c      	add	r4, sp, #48	; 0x30
   d7b8a:	cc70      	ldmia	r4, {r4, r5, r6}
    RSA_VALIDATE_RET( mode == MBEDTLS_RSA_PRIVATE ||
                      mode == MBEDTLS_RSA_PUBLIC );
    RSA_VALIDATE_RET( output != NULL );
    RSA_VALIDATE_RET( input != NULL );

    switch( ctx->padding )
   d7b8c:	b157      	cbz	r7, d7ba4 <mbedtls_rsa_pkcs1_encrypt+0x24>
   d7b8e:	2f01      	cmp	r7, #1
   d7b90:	d110      	bne.n	d7bb4 <mbedtls_rsa_pkcs1_encrypt+0x34>
#endif

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsaes_oaep_encrypt( ctx, f_rng, p_rng, mode, NULL, 0,
                                           ilen, input, output );
   d7b92:	9402      	str	r4, [sp, #8]
   d7b94:	2400      	movs	r4, #0
   d7b96:	9604      	str	r6, [sp, #16]
   d7b98:	9503      	str	r5, [sp, #12]
   d7b9a:	9401      	str	r4, [sp, #4]
   d7b9c:	9400      	str	r4, [sp, #0]
   d7b9e:	f7ff feef 	bl	d7980 <mbedtls_rsa_rsaes_oaep_encrypt>
   d7ba2:	e008      	b.n	d7bb6 <mbedtls_rsa_pkcs1_encrypt+0x36>
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsaes_pkcs1_v15_encrypt( ctx, f_rng, p_rng, mode, ilen,
                                                input, output );
   d7ba4:	960e      	str	r6, [sp, #56]	; 0x38
   d7ba6:	950d      	str	r5, [sp, #52]	; 0x34
   d7ba8:	940c      	str	r4, [sp, #48]	; 0x30
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
   d7baa:	b007      	add	sp, #28
   d7bac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsaes_pkcs1_v15_encrypt( ctx, f_rng, p_rng, mode, ilen,
                                                input, output );
   d7bb0:	f7ff bf7a 	b.w	d7aa8 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt>
            return mbedtls_rsa_rsaes_oaep_encrypt( ctx, f_rng, p_rng, mode, NULL, 0,
                                           ilen, input, output );
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
   d7bb4:	4801      	ldr	r0, [pc, #4]	; (d7bbc <mbedtls_rsa_pkcs1_encrypt+0x3c>)
    }
}
   d7bb6:	b007      	add	sp, #28
   d7bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7bba:	bf00      	nop
   d7bbc:	ffffbf00 	.word	0xffffbf00

000d7bc0 <mbedtls_rsa_rsaes_oaep_decrypt>:
                            const unsigned char *label, size_t label_len,
                            size_t *olen,
                            const unsigned char *input,
                            unsigned char *output,
                            size_t output_max_len )
{
   d7bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7bc4:	f2ad 4d64 	subw	sp, sp, #1124	; 0x464
    RSA_VALIDATE_RET( olen != NULL );

    /*
     * Parameters sanity checks
     */
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
   d7bc8:	2b01      	cmp	r3, #1
                            const unsigned char *label, size_t label_len,
                            size_t *olen,
                            const unsigned char *input,
                            unsigned char *output,
                            size_t output_max_len )
{
   d7bca:	4606      	mov	r6, r0
   d7bcc:	468a      	mov	sl, r1
   d7bce:	9203      	str	r2, [sp, #12]
   d7bd0:	469b      	mov	fp, r3
    RSA_VALIDATE_RET( olen != NULL );

    /*
     * Parameters sanity checks
     */
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
   d7bd2:	d105      	bne.n	d7be0 <mbedtls_rsa_rsaes_oaep_decrypt+0x20>
   d7bd4:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   d7bd8:	2b01      	cmp	r3, #1
   d7bda:	d001      	beq.n	d7be0 <mbedtls_rsa_rsaes_oaep_decrypt+0x20>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   d7bdc:	485c      	ldr	r0, [pc, #368]	; (d7d50 <mbedtls_rsa_rsaes_oaep_decrypt+0x190>)
   d7bde:	e0b2      	b.n	d7d46 <mbedtls_rsa_rsaes_oaep_decrypt+0x186>

    ilen = ctx->len;
   d7be0:	6877      	ldr	r7, [r6, #4]

    if( ilen < 16 || ilen > sizeof( buf ) )
   d7be2:	f1a7 0310 	sub.w	r3, r7, #16
   d7be6:	f5b3 7f7c 	cmp.w	r3, #1008	; 0x3f0
   d7bea:	d8f7      	bhi.n	d7bdc <mbedtls_rsa_rsaes_oaep_decrypt+0x1c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
   d7bec:	f896 00a8 	ldrb.w	r0, [r6, #168]	; 0xa8
   d7bf0:	f005 f9a8 	bl	dcf44 <mbedtls_md_info_from_type>
    if( md_info == NULL )
   d7bf4:	9002      	str	r0, [sp, #8]
   d7bf6:	2800      	cmp	r0, #0
   d7bf8:	d0f0      	beq.n	d7bdc <mbedtls_rsa_rsaes_oaep_decrypt+0x1c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
   d7bfa:	f005 fadb 	bl	dd1b4 <mbedtls_md_get_size>

    // checking for integer underflow
    if( 2 * hlen + 2 > ilen )
   d7bfe:	f100 0801 	add.w	r8, r0, #1
   d7c02:	ea4f 0548 	mov.w	r5, r8, lsl #1
   d7c06:	42af      	cmp	r7, r5

    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
    if( md_info == NULL )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
   d7c08:	4604      	mov	r4, r0

    // checking for integer underflow
    if( 2 * hlen + 2 > ilen )
   d7c0a:	d3e7      	bcc.n	d7bdc <mbedtls_rsa_rsaes_oaep_decrypt+0x1c>
   d7c0c:	f10d 0960 	add.w	r9, sp, #96	; 0x60
    /*
     * RSA operation
     */
    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, input, buf )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
   d7c10:	f1bb 0f00 	cmp.w	fp, #0
   d7c14:	d106      	bne.n	d7c24 <mbedtls_rsa_rsaes_oaep_decrypt+0x64>
   d7c16:	464a      	mov	r2, r9
   d7c18:	f8dd 1494 	ldr.w	r1, [sp, #1172]	; 0x494
   d7c1c:	4630      	mov	r0, r6
   d7c1e:	f7ff fcb5 	bl	d758c <mbedtls_rsa_public>
   d7c22:	e008      	b.n	d7c36 <mbedtls_rsa_rsaes_oaep_decrypt+0x76>
   d7c24:	f8cd 9000 	str.w	r9, [sp]
   d7c28:	f8dd 3494 	ldr.w	r3, [sp, #1172]	; 0x494
   d7c2c:	9a03      	ldr	r2, [sp, #12]
   d7c2e:	4651      	mov	r1, sl
   d7c30:	4630      	mov	r0, r6
   d7c32:	f7ff fced 	bl	d7610 <mbedtls_rsa_private>
   d7c36:	4682      	mov	sl, r0

    if( ret != 0 )
   d7c38:	2800      	cmp	r0, #0
   d7c3a:	d13c      	bne.n	d7cb6 <mbedtls_rsa_rsaes_oaep_decrypt+0xf6>
        goto cleanup;

    /*
     * Unmask data and generate lHash
     */
    mbedtls_md_init( &md_ctx );
   d7c3c:	ae05      	add	r6, sp, #20
   d7c3e:	4630      	mov	r0, r6
   d7c40:	f005 f98c 	bl	dcf5c <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
   d7c44:	4652      	mov	r2, sl
   d7c46:	9902      	ldr	r1, [sp, #8]
   d7c48:	4630      	mov	r0, r6
   d7c4a:	f005 f9a7 	bl	dcf9c <mbedtls_md_setup>
   d7c4e:	4682      	mov	sl, r0
   d7c50:	b108      	cbz	r0, d7c56 <mbedtls_rsa_rsaes_oaep_decrypt+0x96>
    {
        mbedtls_md_free( &md_ctx );
   d7c52:	4630      	mov	r0, r6
   d7c54:	e03b      	b.n	d7cce <mbedtls_rsa_rsaes_oaep_decrypt+0x10e>
        goto cleanup;
    }

    /* seed: Apply seedMask to maskedSeed */
    if( ( ret = mgf_mask( buf + 1, hlen, buf + hlen + 1, ilen - hlen - 1,
   d7c56:	f107 3bff 	add.w	fp, r7, #4294967295
   d7c5a:	44c8      	add	r8, r9
   d7c5c:	ebc4 0b0b 	rsb	fp, r4, fp
   d7c60:	9600      	str	r6, [sp, #0]
   d7c62:	465b      	mov	r3, fp
   d7c64:	4642      	mov	r2, r8
   d7c66:	4621      	mov	r1, r4
   d7c68:	f10d 0061 	add.w	r0, sp, #97	; 0x61
   d7c6c:	f7ff f9e0 	bl	d7030 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
                          &md_ctx ) ) != 0 ||
   d7c70:	4682      	mov	sl, r0
   d7c72:	bb58      	cbnz	r0, d7ccc <mbedtls_rsa_rsaes_oaep_decrypt+0x10c>
    /* DB: Apply dbMask to maskedDB */
        ( ret = mgf_mask( buf + hlen + 1, ilen - hlen - 1, buf + 1, hlen,
   d7c74:	9600      	str	r6, [sp, #0]
   d7c76:	4623      	mov	r3, r4
   d7c78:	f10d 0261 	add.w	r2, sp, #97	; 0x61
   d7c7c:	4659      	mov	r1, fp
   d7c7e:	4640      	mov	r0, r8
   d7c80:	f7ff f9d6 	bl	d7030 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
        goto cleanup;
    }

    /* seed: Apply seedMask to maskedSeed */
    if( ( ret = mgf_mask( buf + 1, hlen, buf + hlen + 1, ilen - hlen - 1,
                          &md_ctx ) ) != 0 ||
   d7c84:	4682      	mov	sl, r0
   d7c86:	bb08      	cbnz	r0, d7ccc <mbedtls_rsa_rsaes_oaep_decrypt+0x10c>
   d7c88:	e024      	b.n	d7cd4 <mbedtls_rsa_rsaes_oaep_decrypt+0x114>
     * The only information "leaked" is whether the padding was correct or not
     * (eg, no data is copied if it was not correct). This meets the
     * recommendations in PKCS#1 v2.2: an opponent cannot distinguish between
     * the different error conditions.
     */
    if( bad != 0 )
   d7c8a:	5c88      	ldrb	r0, [r1, r2]
   d7c8c:	f080 0001 	eor.w	r0, r0, #1
   d7c90:	ea50 030e 	orrs.w	r3, r0, lr
   d7c94:	d151      	bne.n	d7d3a <mbedtls_rsa_rsaes_oaep_decrypt+0x17a>
        pad_done |= p[i];
        pad_len += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
    }

    p += pad_len;
    bad |= *p++ ^ 0x01;
   d7c96:	3201      	adds	r2, #1
   d7c98:	4411      	add	r1, r2
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
        goto cleanup;
    }

    if( ilen - ( p - buf ) > output_max_len )
   d7c9a:	aa18      	add	r2, sp, #96	; 0x60
   d7c9c:	1a8a      	subs	r2, r1, r2
   d7c9e:	f8dd 049c 	ldr.w	r0, [sp, #1180]	; 0x49c
   d7ca2:	1aba      	subs	r2, r7, r2
   d7ca4:	4282      	cmp	r2, r0
   d7ca6:	d84b      	bhi.n	d7d40 <mbedtls_rsa_rsaes_oaep_decrypt+0x180>
    {
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
        goto cleanup;
    }

    *olen = ilen - (p - buf);
   d7ca8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   d7cac:	6002      	str	r2, [r0, #0]
    memcpy( output, p, *olen );
   d7cae:	f8dd 0498 	ldr.w	r0, [sp, #1176]	; 0x498
   d7cb2:	f011 ff00 	bl	e9ab6 <memcpy>
    ret = 0;

cleanup:
    mbedtls_platform_zeroize( buf, sizeof( buf ) );
   d7cb6:	f44f 6180 	mov.w	r1, #1024	; 0x400
   d7cba:	a818      	add	r0, sp, #96	; 0x60
   d7cbc:	f003 fa9e 	bl	db1fc <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( lhash, sizeof( lhash ) );
   d7cc0:	a808      	add	r0, sp, #32
   d7cc2:	2140      	movs	r1, #64	; 0x40
   d7cc4:	f003 fa9a 	bl	db1fc <mbedtls_platform_zeroize>

    return( ret );
   d7cc8:	4650      	mov	r0, sl
   d7cca:	e03c      	b.n	d7d46 <mbedtls_rsa_rsaes_oaep_decrypt+0x186>
                          &md_ctx ) ) != 0 ||
    /* DB: Apply dbMask to maskedDB */
        ( ret = mgf_mask( buf + hlen + 1, ilen - hlen - 1, buf + 1, hlen,
                          &md_ctx ) ) != 0 )
    {
        mbedtls_md_free( &md_ctx );
   d7ccc:	a805      	add	r0, sp, #20
   d7cce:	f005 f94a 	bl	dcf66 <mbedtls_md_free>
        goto cleanup;
   d7cd2:	e7f0      	b.n	d7cb6 <mbedtls_rsa_rsaes_oaep_decrypt+0xf6>
    }

    mbedtls_md_free( &md_ctx );
   d7cd4:	4630      	mov	r0, r6

    /* Generate lHash */
    if( ( ret = mbedtls_md( md_info, label, label_len, lhash ) ) != 0 )
   d7cd6:	ae08      	add	r6, sp, #32
    {
        mbedtls_md_free( &md_ctx );
        goto cleanup;
    }

    mbedtls_md_free( &md_ctx );
   d7cd8:	f005 f945 	bl	dcf66 <mbedtls_md_free>

    /* Generate lHash */
    if( ( ret = mbedtls_md( md_info, label, label_len, lhash ) ) != 0 )
   d7cdc:	4633      	mov	r3, r6
   d7cde:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
   d7ce2:	f8dd 1488 	ldr.w	r1, [sp, #1160]	; 0x488
   d7ce6:	9802      	ldr	r0, [sp, #8]
   d7ce8:	f005 f998 	bl	dd01c <mbedtls_md>
   d7cec:	4682      	mov	sl, r0
   d7cee:	2800      	cmp	r0, #0
   d7cf0:	d1e1      	bne.n	d7cb6 <mbedtls_rsa_rsaes_oaep_decrypt+0xf6>
    p = buf;
    bad = 0;

    bad |= *p++; /* First byte must be 0 */

    p += hlen; /* Skip seed */
   d7cf2:	f10d 0361 	add.w	r3, sp, #97	; 0x61
     * Check contents, in "constant-time"
     */
    p = buf;
    bad = 0;

    bad |= *p++; /* First byte must be 0 */
   d7cf6:	f899 e000 	ldrb.w	lr, [r9]

    p += hlen; /* Skip seed */
   d7cfa:	1919      	adds	r1, r3, r4

    /* Check lHash */
    for( i = 0; i < hlen; i++ )
   d7cfc:	4650      	mov	r0, sl
   d7cfe:	42a0      	cmp	r0, r4
   d7d00:	d208      	bcs.n	d7d14 <mbedtls_rsa_rsaes_oaep_decrypt+0x154>
        bad |= lhash[i] ^ *p++;
   d7d02:	5c32      	ldrb	r2, [r6, r0]
   d7d04:	f811 c000 	ldrb.w	ip, [r1, r0]
   d7d08:	ea82 0c0c 	eor.w	ip, r2, ip
   d7d0c:	ea4c 0e0e 	orr.w	lr, ip, lr
    bad |= *p++; /* First byte must be 0 */

    p += hlen; /* Skip seed */

    /* Check lHash */
    for( i = 0; i < hlen; i++ )
   d7d10:	3001      	adds	r0, #1
   d7d12:	e7f4      	b.n	d7cfe <mbedtls_rsa_rsaes_oaep_decrypt+0x13e>
   d7d14:	4421      	add	r1, r4
   d7d16:	1b7d      	subs	r5, r7, r5

    /* Get zero-padding len, but always read till end of buffer
     * (minus one, for the 01 byte) */
    pad_len = 0;
    pad_done = 0;
    for( i = 0; i < ilen - 2 * hlen - 2; i++ )
   d7d18:	2400      	movs	r4, #0
   d7d1a:	460e      	mov	r6, r1
   d7d1c:	440d      	add	r5, r1
   d7d1e:	4622      	mov	r2, r4
   d7d20:	42b5      	cmp	r5, r6
   d7d22:	d0b2      	beq.n	d7c8a <mbedtls_rsa_rsaes_oaep_decrypt+0xca>
    {
        pad_done |= p[i];
   d7d24:	f816 0b01 	ldrb.w	r0, [r6], #1
   d7d28:	4304      	orrs	r4, r0
        pad_len += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
   d7d2a:	4260      	negs	r0, r4
   d7d2c:	4320      	orrs	r0, r4
   d7d2e:	f3c0 10c0 	ubfx	r0, r0, #7, #1
   d7d32:	f080 0001 	eor.w	r0, r0, #1
   d7d36:	4402      	add	r2, r0

    /* Get zero-padding len, but always read till end of buffer
     * (minus one, for the 01 byte) */
    pad_len = 0;
    pad_done = 0;
    for( i = 0; i < ilen - 2 * hlen - 2; i++ )
   d7d38:	e7f2      	b.n	d7d20 <mbedtls_rsa_rsaes_oaep_decrypt+0x160>
     * recommendations in PKCS#1 v2.2: an opponent cannot distinguish between
     * the different error conditions.
     */
    if( bad != 0 )
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
   d7d3a:	f8df a018 	ldr.w	sl, [pc, #24]	; d7d54 <mbedtls_rsa_rsaes_oaep_decrypt+0x194>
   d7d3e:	e7ba      	b.n	d7cb6 <mbedtls_rsa_rsaes_oaep_decrypt+0xf6>
        goto cleanup;
    }

    if( ilen - ( p - buf ) > output_max_len )
    {
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
   d7d40:	f8df a014 	ldr.w	sl, [pc, #20]	; d7d58 <mbedtls_rsa_rsaes_oaep_decrypt+0x198>
   d7d44:	e7b7      	b.n	d7cb6 <mbedtls_rsa_rsaes_oaep_decrypt+0xf6>
cleanup:
    mbedtls_platform_zeroize( buf, sizeof( buf ) );
    mbedtls_platform_zeroize( lhash, sizeof( lhash ) );

    return( ret );
}
   d7d46:	f20d 4d64 	addw	sp, sp, #1124	; 0x464
   d7d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7d4e:	bf00      	nop
   d7d50:	ffffbf80 	.word	0xffffbf80
   d7d54:	ffffbf00 	.word	0xffffbf00
   d7d58:	ffffbc00 	.word	0xffffbc00

000d7d5c <mbedtls_rsa_rsaes_pkcs1_v15_decrypt>:
                                 void *p_rng,
                                 int mode, size_t *olen,
                                 const unsigned char *input,
                                 unsigned char *output,
                                 size_t output_max_len )
{
   d7d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ilen = ctx->len;
    plaintext_max_size = ( output_max_len > ilen - 11 ?
                           ilen - 11 :
                           output_max_len );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
   d7d60:	2b01      	cmp	r3, #1
                                 void *p_rng,
                                 int mode, size_t *olen,
                                 const unsigned char *input,
                                 unsigned char *output,
                                 size_t output_max_len )
{
   d7d62:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
   d7d66:	461f      	mov	r7, r3
                      mode == MBEDTLS_RSA_PUBLIC );
    RSA_VALIDATE_RET( output_max_len == 0 || output != NULL );
    RSA_VALIDATE_RET( input != NULL );
    RSA_VALIDATE_RET( olen != NULL );

    ilen = ctx->len;
   d7d68:	6845      	ldr	r5, [r0, #4]
    plaintext_max_size = ( output_max_len > ilen - 11 ?
                           ilen - 11 :
                           output_max_len );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
   d7d6a:	d104      	bne.n	d7d76 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x1a>
   d7d6c:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   d7d70:	2b00      	cmp	r3, #0
   d7d72:	f040 80be 	bne.w	d7ef2 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x196>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    if( ilen < 16 || ilen > sizeof( buf ) )
   d7d76:	f1a5 0310 	sub.w	r3, r5, #16
   d7d7a:	f5b3 7f7c 	cmp.w	r3, #1008	; 0x3f0
   d7d7e:	f200 80b8 	bhi.w	d7ef2 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x196>
   d7d82:	ae02      	add	r6, sp, #8
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, input, buf )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
   d7d84:	b94f      	cbnz	r7, d7d9a <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x3e>
   d7d86:	4632      	mov	r2, r6
   d7d88:	f8dd 142c 	ldr.w	r1, [sp, #1068]	; 0x42c
   d7d8c:	f7ff fbfe 	bl	d758c <mbedtls_rsa_public>

    if( ret != 0 )
   d7d90:	4604      	mov	r4, r0
   d7d92:	2800      	cmp	r0, #0
   d7d94:	f040 80a6 	bne.w	d7ee4 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x188>
   d7d98:	e025      	b.n	d7de6 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x8a>
    if( ilen < 16 || ilen > sizeof( buf ) )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, input, buf )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
   d7d9a:	9600      	str	r6, [sp, #0]
   d7d9c:	f8dd 342c 	ldr.w	r3, [sp, #1068]	; 0x42c
   d7da0:	f7ff fc36 	bl	d7610 <mbedtls_rsa_private>

    if( ret != 0 )
   d7da4:	4604      	mov	r4, r0
   d7da6:	2800      	cmp	r0, #0
   d7da8:	f040 809c 	bne.w	d7ee4 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x188>

    /* Check and get padding length in constant time and constant
     * memory trace. The first byte must be 0. */
    bad |= buf[0];

    if( mode == MBEDTLS_RSA_PRIVATE )
   d7dac:	2f01      	cmp	r7, #1
    if( ret != 0 )
        goto cleanup;

    /* Check and get padding length in constant time and constant
     * memory trace. The first byte must be 0. */
    bad |= buf[0];
   d7dae:	7832      	ldrb	r2, [r6, #0]

    if( mode == MBEDTLS_RSA_PRIVATE )
   d7db0:	d11a      	bne.n	d7de8 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x8c>
    {
        /* Decode EME-PKCS1-v1_5 padding: 0x00 || 0x02 || PS || 0x00
         * where PS must be at least 8 nonzero bytes. */
        bad |= buf[1] ^ MBEDTLS_RSA_CRYPT;
   d7db2:	7873      	ldrb	r3, [r6, #1]
   d7db4:	f083 0302 	eor.w	r3, r3, #2
   d7db8:	4313      	orrs	r3, r2
     * attack. Potential side channels include overall timing, memory
     * access patterns (especially visible to an adversary who has access
     * to a shared memory cache), and branches (especially visible to
     * an adversary who has access to a shared code cache or to a shared
     * branch predictor). */
    size_t pad_count = 0;
   d7dba:	4601      	mov	r1, r0
         * where PS must be at least 8 nonzero bytes. */
        bad |= buf[1] ^ MBEDTLS_RSA_CRYPT;

        /* Read the whole buffer. Set pad_done to nonzero if we find
         * the 0x00 byte and remember the padding length in pad_count. */
        for( i = 2; i < ilen; i++ )
   d7dbc:	2402      	movs	r4, #2
        {
            pad_done  |= ((buf[i] | (unsigned char)-buf[i]) >> 7) ^ 1;
   d7dbe:	5d37      	ldrb	r7, [r6, r4]
   d7dc0:	427a      	negs	r2, r7
   d7dc2:	433a      	orrs	r2, r7
   d7dc4:	f3c2 12c0 	ubfx	r2, r2, #7, #1
   d7dc8:	f082 0201 	eor.w	r2, r2, #1
   d7dcc:	4310      	orrs	r0, r2
   d7dce:	b2c0      	uxtb	r0, r0
            pad_count += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
   d7dd0:	4242      	negs	r2, r0
   d7dd2:	4302      	orrs	r2, r0
   d7dd4:	f3c2 12c0 	ubfx	r2, r2, #7, #1
         * where PS must be at least 8 nonzero bytes. */
        bad |= buf[1] ^ MBEDTLS_RSA_CRYPT;

        /* Read the whole buffer. Set pad_done to nonzero if we find
         * the 0x00 byte and remember the padding length in pad_count. */
        for( i = 2; i < ilen; i++ )
   d7dd8:	3401      	adds	r4, #1
        {
            pad_done  |= ((buf[i] | (unsigned char)-buf[i]) >> 7) ^ 1;
            pad_count += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
   d7dda:	f082 0201 	eor.w	r2, r2, #1
         * where PS must be at least 8 nonzero bytes. */
        bad |= buf[1] ^ MBEDTLS_RSA_CRYPT;

        /* Read the whole buffer. Set pad_done to nonzero if we find
         * the 0x00 byte and remember the padding length in pad_count. */
        for( i = 2; i < ilen; i++ )
   d7dde:	42a5      	cmp	r5, r4
        {
            pad_done  |= ((buf[i] | (unsigned char)-buf[i]) >> 7) ^ 1;
            pad_count += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
   d7de0:	4411      	add	r1, r2
         * where PS must be at least 8 nonzero bytes. */
        bad |= buf[1] ^ MBEDTLS_RSA_CRYPT;

        /* Read the whole buffer. Set pad_done to nonzero if we find
         * the 0x00 byte and remember the padding length in pad_count. */
        for( i = 2; i < ilen; i++ )
   d7de2:	d1ec      	bne.n	d7dbe <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x62>
   d7de4:	e01b      	b.n	d7e1e <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xc2>
    if( ret != 0 )
        goto cleanup;

    /* Check and get padding length in constant time and constant
     * memory trace. The first byte must be 0. */
    bad |= buf[0];
   d7de6:	7832      	ldrb	r2, [r6, #0]
    }
    else
    {
        /* Decode EMSA-PKCS1-v1_5 padding: 0x00 || 0x01 || PS || 0x00
         * where PS must be at least 8 bytes with the value 0xFF. */
        bad |= buf[1] ^ MBEDTLS_RSA_SIGN;
   d7de8:	7873      	ldrb	r3, [r6, #1]
     * to a shared memory cache), and branches (especially visible to
     * an adversary who has access to a shared code cache or to a shared
     * branch predictor). */
    size_t pad_count = 0;
    unsigned bad = 0;
    unsigned char pad_done = 0;
   d7dea:	2000      	movs	r0, #0
    }
    else
    {
        /* Decode EMSA-PKCS1-v1_5 padding: 0x00 || 0x01 || PS || 0x00
         * where PS must be at least 8 bytes with the value 0xFF. */
        bad |= buf[1] ^ MBEDTLS_RSA_SIGN;
   d7dec:	f083 0301 	eor.w	r3, r3, #1
   d7df0:	4313      	orrs	r3, r2
     * attack. Potential side channels include overall timing, memory
     * access patterns (especially visible to an adversary who has access
     * to a shared memory cache), and branches (especially visible to
     * an adversary who has access to a shared code cache or to a shared
     * branch predictor). */
    size_t pad_count = 0;
   d7df2:	4601      	mov	r1, r0
        bad |= buf[1] ^ MBEDTLS_RSA_SIGN;

        /* Read the whole buffer. Set pad_done to nonzero if we find
         * the 0x00 byte and remember the padding length in pad_count.
         * If there's a non-0xff byte in the padding, the padding is bad. */
        for( i = 2; i < ilen; i++ )
   d7df4:	2702      	movs	r7, #2
        {
            pad_done |= if_int( buf[i], 0, 1 );
   d7df6:	5df2      	ldrb	r2, [r6, r7]
   d7df8:	2a00      	cmp	r2, #0
   d7dfa:	bf08      	it	eq
   d7dfc:	f040 0001 	orreq.w	r0, r0, #1
   d7e00:	b2c0      	uxtb	r0, r0
     * well-defined and precisely what we want to do here */
#if defined(_MSC_VER)
#pragma warning( push )
#pragma warning( disable : 4146 )
#endif
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
   d7e02:	4244      	negs	r4, r0
         * If there's a non-0xff byte in the padding, the padding is bad. */
        for( i = 2; i < ilen; i++ )
        {
            pad_done |= if_int( buf[i], 0, 1 );
            pad_count += if_int( pad_done, 0, 1 );
            bad |= if_int( pad_done, 0, buf[i] ^ 0xFF );
   d7e04:	43d2      	mvns	r2, r2
     * well-defined and precisely what we want to do here */
#if defined(_MSC_VER)
#pragma warning( push )
#pragma warning( disable : 4146 )
#endif
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
   d7e06:	17e4      	asrs	r4, r4, #31
         * If there's a non-0xff byte in the padding, the padding is bad. */
        for( i = 2; i < ilen; i++ )
        {
            pad_done |= if_int( buf[i], 0, 1 );
            pad_count += if_int( pad_done, 0, 1 );
            bad |= if_int( pad_done, 0, buf[i] ^ 0xFF );
   d7e08:	b2d2      	uxtb	r2, r2
         * the 0x00 byte and remember the padding length in pad_count.
         * If there's a non-0xff byte in the padding, the padding is bad. */
        for( i = 2; i < ilen; i++ )
        {
            pad_done |= if_int( buf[i], 0, 1 );
            pad_count += if_int( pad_done, 0, 1 );
   d7e0a:	f104 0e01 	add.w	lr, r4, #1
        bad |= buf[1] ^ MBEDTLS_RSA_SIGN;

        /* Read the whole buffer. Set pad_done to nonzero if we find
         * the 0x00 byte and remember the padding length in pad_count.
         * If there's a non-0xff byte in the padding, the padding is bad. */
        for( i = 2; i < ilen; i++ )
   d7e0e:	3701      	adds	r7, #1
        {
            pad_done |= if_int( buf[i], 0, 1 );
            pad_count += if_int( pad_done, 0, 1 );
            bad |= if_int( pad_done, 0, buf[i] ^ 0xFF );
   d7e10:	4014      	ands	r4, r2
   d7e12:	4062      	eors	r2, r4
        bad |= buf[1] ^ MBEDTLS_RSA_SIGN;

        /* Read the whole buffer. Set pad_done to nonzero if we find
         * the 0x00 byte and remember the padding length in pad_count.
         * If there's a non-0xff byte in the padding, the padding is bad. */
        for( i = 2; i < ilen; i++ )
   d7e14:	42bd      	cmp	r5, r7
        {
            pad_done |= if_int( buf[i], 0, 1 );
            pad_count += if_int( pad_done, 0, 1 );
   d7e16:	4471      	add	r1, lr
            bad |= if_int( pad_done, 0, buf[i] ^ 0xFF );
   d7e18:	ea43 0302 	orr.w	r3, r3, r2
        bad |= buf[1] ^ MBEDTLS_RSA_SIGN;

        /* Read the whole buffer. Set pad_done to nonzero if we find
         * the 0x00 byte and remember the padding length in pad_count.
         * If there's a non-0xff byte in the padding, the padding is bad. */
        for( i = 2; i < ilen; i++ )
   d7e1c:	d1eb      	bne.n	d7df6 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x9a>
    RSA_VALIDATE_RET( olen != NULL );

    ilen = ctx->len;
    plaintext_max_size = ( output_max_len > ilen - 11 ?
                           ilen - 11 :
                           output_max_len );
   d7e1e:	f8dd 4434 	ldr.w	r4, [sp, #1076]	; 0x434
   d7e22:	f1a5 020b 	sub.w	r2, r5, #11
   d7e26:	42a2      	cmp	r2, r4
   d7e28:	bf28      	it	cs
   d7e2a:	4622      	movcs	r2, r4
   d7e2c:	f1a1 0408 	sub.w	r4, r1, #8
   d7e30:	ea43 73d4 	orr.w	r3, r3, r4, lsr #31

    /* If pad_done is still zero, there's no data, only unfinished padding. */
    bad |= if_int( pad_done, 0, 1 );

    /* There must be at least 8 bytes of padding. */
    bad |= size_greater_than( 8, pad_count );
   d7e34:	4244      	negs	r4, r0
   d7e36:	4320      	orrs	r0, r4
   d7e38:	2800      	cmp	r0, #0
   d7e3a:	bfb4      	ite	lt
   d7e3c:	4618      	movlt	r0, r3
   d7e3e:	f043 0001 	orrge.w	r0, r3, #1
     * well-defined and precisely what we want to do here */
#if defined(_MSC_VER)
#pragma warning( push )
#pragma warning( disable : 4146 )
#endif
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
   d7e42:	4243      	negs	r3, r0
   d7e44:	4303      	orrs	r3, r0
     * is invalid, avoid leaking this fact through the size of the
     * output: use the maximum message size that fits in the output
     * buffer. Do it without branches to avoid leaking the padding
     * validity through timing. RSA keys are small enough that all the
     * size_t values involved fit in unsigned int. */
    plaintext_size = if_int( bad,
   d7e46:	1eef      	subs	r7, r5, #3
     * well-defined and precisely what we want to do here */
#if defined(_MSC_VER)
#pragma warning( push )
#pragma warning( disable : 4146 )
#endif
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
   d7e48:	17db      	asrs	r3, r3, #31
     * is invalid, avoid leaking this fact through the size of the
     * output: use the maximum message size that fits in the output
     * buffer. Do it without branches to avoid leaking the padding
     * validity through timing. RSA keys are small enough that all the
     * size_t values involved fit in unsigned int. */
    plaintext_size = if_int( bad,
   d7e4a:	1a7f      	subs	r7, r7, r1
 * \return          \c if1 if \p cond is nonzero, otherwise \c if0.
 */
static unsigned if_int( unsigned cond, unsigned if1, unsigned if0 )
{
    unsigned mask = all_or_nothing_int( cond );
    return( ( mask & if1 ) | (~mask & if0 ) );
   d7e4c:	2b00      	cmp	r3, #0
   d7e4e:	bf18      	it	ne
   d7e50:	4617      	movne	r7, r2
 * \return          \c 1 if `size > max`.
 */
static unsigned size_greater_than( size_t size, size_t max )
{
    /* Return the sign bit (1 for negative) of (max - size). */
    return( ( max - size ) >> ( sizeof( size_t ) * 8 - 1 ) );
   d7e52:	1bd1      	subs	r1, r2, r7
   d7e54:	0fc9      	lsrs	r1, r1, #31
     * well-defined and precisely what we want to do here */
#if defined(_MSC_VER)
#pragma warning( push )
#pragma warning( disable : 4146 )
#endif
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
   d7e56:	f1c1 0e00 	rsb	lr, r1, #0
     * data that we're about to copy to the output buffer.
     * We need to copy the same amount of data
     * from the same buffer whether the padding is good or not to
     * avoid leaking the padding validity through overall timing or
     * through memory or cache access patterns. */
    bad = all_or_nothing_int( bad | output_too_large );
   d7e5a:	4308      	orrs	r0, r1
   d7e5c:	f40e 4488 	and.w	r4, lr, #17408	; 0x4400
     * - OUTPUT_TOO_LARGE if the padding is good but the decrypted
     *   plaintext does not fit in the output buffer.
     * - 0 if the padding is correct. */
    ret = - (int) if_int( bad, - MBEDTLS_ERR_RSA_INVALID_PADDING,
                  if_int( output_too_large, - MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE,
                          0 ) );
   d7e60:	2b00      	cmp	r3, #0
   d7e62:	bf18      	it	ne
   d7e64:	f44f 4482 	movne.w	r4, #16640	; 0x4100
     * well-defined and precisely what we want to do here */
#if defined(_MSC_VER)
#pragma warning( push )
#pragma warning( disable : 4146 )
#endif
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
   d7e68:	4243      	negs	r3, r0
   d7e6a:	4318      	orrs	r0, r3
   d7e6c:	17c0      	asrs	r0, r0, #31
     * - OUTPUT_TOO_LARGE if the padding is good but the decrypted
     *   plaintext does not fit in the output buffer.
     * - 0 if the padding is correct. */
    ret = - (int) if_int( bad, - MBEDTLS_ERR_RSA_INVALID_PADDING,
                  if_int( output_too_large, - MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE,
                          0 ) );
   d7e6e:	4264      	negs	r4, r4
   d7e70:	f10d 0313 	add.w	r3, sp, #19
     * from the same buffer whether the padding is good or not to
     * avoid leaking the padding validity through overall timing or
     * through memory or cache access patterns. */
    bad = all_or_nothing_int( bad | output_too_large );
    for( i = 11; i < ilen; i++ )
        buf[i] &= ~bad;
   d7e74:	43c0      	mvns	r0, r0
   d7e76:	7819      	ldrb	r1, [r3, #0]
   d7e78:	4001      	ands	r1, r0
   d7e7a:	f803 1b01 	strb.w	r1, [r3], #1
     * We need to copy the same amount of data
     * from the same buffer whether the padding is good or not to
     * avoid leaking the padding validity through overall timing or
     * through memory or cache access patterns. */
    bad = all_or_nothing_int( bad | output_too_large );
    for( i = 11; i < ilen; i++ )
   d7e7e:	1b99      	subs	r1, r3, r6
   d7e80:	428d      	cmp	r5, r1
   d7e82:	d8f8      	bhi.n	d7e76 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x11a>
     * the working buffer, i.e. make it start plaintext_max_size from
     * the end of the buffer. Do this with a memory access trace that
     * does not depend on the plaintext size. After this move, the
     * starting location of the plaintext is no longer sensitive
     * information. */
    mem_move_to_left( buf + ilen - plaintext_max_size,
   d7e84:	1aa9      	subs	r1, r5, r2
 * \return          \c if1 if \p cond is nonzero, otherwise \c if0.
 */
static unsigned if_int( unsigned cond, unsigned if1, unsigned if0 )
{
    unsigned mask = all_or_nothing_int( cond );
    return( ( mask & if1 ) | (~mask & if0 ) );
   d7e86:	f1be 0f00 	cmp.w	lr, #0
   d7e8a:	bf18      	it	ne
   d7e8c:	4617      	movne	r7, r2
     * the working buffer, i.e. make it start plaintext_max_size from
     * the end of the buffer. Do this with a memory access trace that
     * does not depend on the plaintext size. After this move, the
     * starting location of the plaintext is no longer sensitive
     * information. */
    mem_move_to_left( buf + ilen - plaintext_max_size,
   d7e8e:	4431      	add	r1, r6
                              size_t total,
                              size_t offset )
{
    volatile unsigned char *buf = (volatile unsigned char *)start;
    size_t i, n;
    if( total == 0 )
   d7e90:	b93a      	cbnz	r2, d7ea2 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x146>
                      plaintext_max_size,
                      plaintext_max_size - plaintext_size );

    /* Finally copy the decrypted plaintext plus trailing zeros
     * into the output buffer. */
    memcpy( output, buf + ilen - plaintext_max_size, plaintext_max_size );
   d7e92:	f8dd 0430 	ldr.w	r0, [sp, #1072]	; 0x430
   d7e96:	f011 fe0e 	bl	e9ab6 <memcpy>

    /* Report the amount of data we copied to the output buffer. In case
     * of errors (bad padding or output too large), the value of *olen
     * when this function returns is not specified. Making it equivalent
     * to the good case limits the risks of leaking the padding validity. */
    *olen = plaintext_size;
   d7e9a:	f8dd 3428 	ldr.w	r3, [sp, #1064]	; 0x428
   d7e9e:	601f      	str	r7, [r3, #0]
   d7ea0:	e020      	b.n	d7ee4 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x188>
    {
        unsigned no_op = size_greater_than( total - offset, i );
        /* The first `total - offset` passes are a no-op. The last
         * `offset` passes shift the data one byte to the left and
         * zero out the last byte. */
        for( n = 0; n < total - 1; n++ )
   d7ea2:	f102 38ff 	add.w	r8, r2, #4294967295
                              size_t total,
                              size_t offset )
{
    volatile unsigned char *buf = (volatile unsigned char *)start;
    size_t i, n;
    if( total == 0 )
   d7ea6:	2500      	movs	r5, #0
        {
            unsigned char current = buf[n];
            unsigned char next = buf[n+1];
            buf[n] = if_int( no_op, current, next );
        }
        buf[total-1] = if_int( no_op, buf[total-1], 0 );
   d7ea8:	eb01 0c08 	add.w	ip, r1, r8
 * \return          \c 1 if `size > max`.
 */
static unsigned size_greater_than( size_t size, size_t max )
{
    /* Return the sign bit (1 for negative) of (max - size). */
    return( ( max - size ) >> ( sizeof( size_t ) * 8 - 1 ) );
   d7eac:	1beb      	subs	r3, r5, r7
     * well-defined and precisely what we want to do here */
#if defined(_MSC_VER)
#pragma warning( push )
#pragma warning( disable : 4146 )
#endif
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
   d7eae:	17db      	asrs	r3, r3, #31
    {
        unsigned no_op = size_greater_than( total - offset, i );
        /* The first `total - offset` passes are a no-op. The last
         * `offset` passes shift the data one byte to the left and
         * zero out the last byte. */
        for( n = 0; n < total - 1; n++ )
   d7eb0:	2000      	movs	r0, #0
   d7eb2:	4580      	cmp	r8, r0
   d7eb4:	d90c      	bls.n	d7ed0 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x174>
        {
            unsigned char current = buf[n];
   d7eb6:	f811 e000 	ldrb.w	lr, [r1, r0]
   d7eba:	eb01 0900 	add.w	r9, r1, r0
            unsigned char next = buf[n+1];
   d7ebe:	3001      	adds	r0, #1
   d7ec0:	f811 a000 	ldrb.w	sl, [r1, r0]
            buf[n] = if_int( no_op, current, next );
   d7ec4:	2b00      	cmp	r3, #0
   d7ec6:	bf08      	it	eq
   d7ec8:	46d6      	moveq	lr, sl
   d7eca:	f889 e000 	strb.w	lr, [r9]
   d7ece:	e7f0      	b.n	d7eb2 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x156>
        }
        buf[total-1] = if_int( no_op, buf[total-1], 0 );
   d7ed0:	f89c 0000 	ldrb.w	r0, [ip]
{
    volatile unsigned char *buf = (volatile unsigned char *)start;
    size_t i, n;
    if( total == 0 )
        return;
    for( i = 0; i < total; i++ )
   d7ed4:	3501      	adds	r5, #1
        {
            unsigned char current = buf[n];
            unsigned char next = buf[n+1];
            buf[n] = if_int( no_op, current, next );
        }
        buf[total-1] = if_int( no_op, buf[total-1], 0 );
   d7ed6:	4003      	ands	r3, r0
   d7ed8:	b2db      	uxtb	r3, r3
{
    volatile unsigned char *buf = (volatile unsigned char *)start;
    size_t i, n;
    if( total == 0 )
        return;
    for( i = 0; i < total; i++ )
   d7eda:	42aa      	cmp	r2, r5
        {
            unsigned char current = buf[n];
            unsigned char next = buf[n+1];
            buf[n] = if_int( no_op, current, next );
        }
        buf[total-1] = if_int( no_op, buf[total-1], 0 );
   d7edc:	f88c 3000 	strb.w	r3, [ip]
{
    volatile unsigned char *buf = (volatile unsigned char *)start;
    size_t i, n;
    if( total == 0 )
        return;
    for( i = 0; i < total; i++ )
   d7ee0:	d1e4      	bne.n	d7eac <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x150>
   d7ee2:	e7d6      	b.n	d7e92 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x136>
     * when this function returns is not specified. Making it equivalent
     * to the good case limits the risks of leaking the padding validity. */
    *olen = plaintext_size;

cleanup:
    mbedtls_platform_zeroize( buf, sizeof( buf ) );
   d7ee4:	4630      	mov	r0, r6
   d7ee6:	f44f 6180 	mov.w	r1, #1024	; 0x400
   d7eea:	f003 f987 	bl	db1fc <mbedtls_platform_zeroize>

    return( ret );
   d7eee:	4620      	mov	r0, r4
   d7ef0:	e000      	b.n	d7ef4 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x198>
    plaintext_max_size = ( output_max_len > ilen - 11 ?
                           ilen - 11 :
                           output_max_len );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   d7ef2:	4802      	ldr	r0, [pc, #8]	; (d7efc <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x1a0>)

cleanup:
    mbedtls_platform_zeroize( buf, sizeof( buf ) );

    return( ret );
}
   d7ef4:	f50d 6d81 	add.w	sp, sp, #1032	; 0x408
   d7ef8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7efc:	ffffbf80 	.word	0xffffbf80

000d7f00 <mbedtls_rsa_pkcs1_decrypt>:
                       void *p_rng,
                       int mode, size_t *olen,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t output_max_len)
{
   d7f00:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7f02:	b087      	sub	sp, #28
                      mode == MBEDTLS_RSA_PUBLIC );
    RSA_VALIDATE_RET( output_max_len == 0 || output != NULL );
    RSA_VALIDATE_RET( input != NULL );
    RSA_VALIDATE_RET( olen != NULL );

    switch( ctx->padding )
   d7f04:	f8d0 e0a4 	ldr.w	lr, [r0, #164]	; 0xa4
                       void *p_rng,
                       int mode, size_t *olen,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t output_max_len)
{
   d7f08:	ac0c      	add	r4, sp, #48	; 0x30
   d7f0a:	ccf0      	ldmia	r4, {r4, r5, r6, r7}
                      mode == MBEDTLS_RSA_PUBLIC );
    RSA_VALIDATE_RET( output_max_len == 0 || output != NULL );
    RSA_VALIDATE_RET( input != NULL );
    RSA_VALIDATE_RET( olen != NULL );

    switch( ctx->padding )
   d7f0c:	f1be 0f00 	cmp.w	lr, #0
   d7f10:	d00c      	beq.n	d7f2c <mbedtls_rsa_pkcs1_decrypt+0x2c>
   d7f12:	f1be 0f01 	cmp.w	lr, #1
   d7f16:	d112      	bne.n	d7f3e <mbedtls_rsa_pkcs1_decrypt+0x3e>

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsaes_oaep_decrypt( ctx, f_rng, p_rng, mode, NULL, 0,
                                           olen, input, output,
                                           output_max_len );
   d7f18:	9402      	str	r4, [sp, #8]
   d7f1a:	2400      	movs	r4, #0
   d7f1c:	9705      	str	r7, [sp, #20]
   d7f1e:	9604      	str	r6, [sp, #16]
   d7f20:	9503      	str	r5, [sp, #12]
   d7f22:	9401      	str	r4, [sp, #4]
   d7f24:	9400      	str	r4, [sp, #0]
   d7f26:	f7ff fe4b 	bl	d7bc0 <mbedtls_rsa_rsaes_oaep_decrypt>
   d7f2a:	e009      	b.n	d7f40 <mbedtls_rsa_pkcs1_decrypt+0x40>
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsaes_pkcs1_v15_decrypt( ctx, f_rng, p_rng, mode, olen,
                                                input, output, output_max_len );
   d7f2c:	970f      	str	r7, [sp, #60]	; 0x3c
   d7f2e:	960e      	str	r6, [sp, #56]	; 0x38
   d7f30:	950d      	str	r5, [sp, #52]	; 0x34
   d7f32:	940c      	str	r4, [sp, #48]	; 0x30
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
   d7f34:	b007      	add	sp, #28
   d7f36:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsaes_pkcs1_v15_decrypt( ctx, f_rng, p_rng, mode, olen,
                                                input, output, output_max_len );
   d7f3a:	f7ff bf0f 	b.w	d7d5c <mbedtls_rsa_rsaes_pkcs1_v15_decrypt>
                                           olen, input, output,
                                           output_max_len );
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
   d7f3e:	4801      	ldr	r0, [pc, #4]	; (d7f44 <mbedtls_rsa_pkcs1_decrypt+0x44>)
    }
}
   d7f40:	b007      	add	sp, #28
   d7f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7f44:	ffffbf00 	.word	0xffffbf00

000d7f48 <mbedtls_rsa_rsassa_pss_sign>:
                         int mode,
                         mbedtls_md_type_t md_alg,
                         unsigned int hashlen,
                         const unsigned char *hash,
                         unsigned char *sig )
{
   d7f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7f4c:	b09f      	sub	sp, #124	; 0x7c
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );
    RSA_VALIDATE_RET( sig != NULL );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
   d7f4e:	2b01      	cmp	r3, #1
                         int mode,
                         mbedtls_md_type_t md_alg,
                         unsigned int hashlen,
                         const unsigned char *hash,
                         unsigned char *sig )
{
   d7f50:	4681      	mov	r9, r0
   d7f52:	468b      	mov	fp, r1
   d7f54:	9205      	str	r2, [sp, #20]
   d7f56:	9306      	str	r3, [sp, #24]
   d7f58:	f89d 00a0 	ldrb.w	r0, [sp, #160]	; 0xa0
   d7f5c:	9d2b      	ldr	r5, [sp, #172]	; 0xac
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );
    RSA_VALIDATE_RET( sig != NULL );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
   d7f5e:	d105      	bne.n	d7f6c <mbedtls_rsa_rsassa_pss_sign+0x24>
   d7f60:	f8d9 30a4 	ldr.w	r3, [r9, #164]	; 0xa4
   d7f64:	2b01      	cmp	r3, #1
   d7f66:	d001      	beq.n	d7f6c <mbedtls_rsa_rsassa_pss_sign+0x24>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   d7f68:	485c      	ldr	r0, [pc, #368]	; (d80dc <mbedtls_rsa_rsassa_pss_sign+0x194>)
   d7f6a:	e0b4      	b.n	d80d6 <mbedtls_rsa_rsassa_pss_sign+0x18e>

    if( f_rng == NULL )
   d7f6c:	f1bb 0f00 	cmp.w	fp, #0
   d7f70:	d0fa      	beq.n	d7f68 <mbedtls_rsa_rsassa_pss_sign+0x20>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    olen = ctx->len;
   d7f72:	f8d9 4004 	ldr.w	r4, [r9, #4]

    if( md_alg != MBEDTLS_MD_NONE )
   d7f76:	b130      	cbz	r0, d7f86 <mbedtls_rsa_rsassa_pss_sign+0x3e>
    {
        /* Gather length of hash to sign */
        md_info = mbedtls_md_info_from_type( md_alg );
   d7f78:	f004 ffe4 	bl	dcf44 <mbedtls_md_info_from_type>
        if( md_info == NULL )
   d7f7c:	2800      	cmp	r0, #0
   d7f7e:	d0f3      	beq.n	d7f68 <mbedtls_rsa_rsassa_pss_sign+0x20>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        hashlen = mbedtls_md_get_size( md_info );
   d7f80:	f005 f918 	bl	dd1b4 <mbedtls_md_get_size>
   d7f84:	9029      	str	r0, [sp, #164]	; 0xa4
    }

    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
   d7f86:	f899 00a8 	ldrb.w	r0, [r9, #168]	; 0xa8
   d7f8a:	f004 ffdb 	bl	dcf44 <mbedtls_md_info_from_type>
    if( md_info == NULL )
   d7f8e:	9007      	str	r0, [sp, #28]
   d7f90:	2800      	cmp	r0, #0
   d7f92:	d0e9      	beq.n	d7f68 <mbedtls_rsa_rsassa_pss_sign+0x20>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
   d7f94:	f005 f90e 	bl	dd1b4 <mbedtls_md_get_size>
     * enough room, use the maximum salt length that fits. The constraint is
     * that the hash length plus the salt length plus 2 bytes must be at most
     * the key length. This complies with FIPS 186-4 §5.5 (e) and RFC 8017
     * (PKCS#1 v2.2) §9.1.1 step 3. */
    min_slen = hlen - 2;
    if( olen < hlen + min_slen + 2 )
   d7f98:	0043      	lsls	r3, r0, #1
   d7f9a:	429c      	cmp	r4, r3

    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
    if( md_info == NULL )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
   d7f9c:	4682      	mov	sl, r0
     * enough room, use the maximum salt length that fits. The constraint is
     * that the hash length plus the salt length plus 2 bytes must be at most
     * the key length. This complies with FIPS 186-4 §5.5 (e) and RFC 8017
     * (PKCS#1 v2.2) §9.1.1 step 3. */
    min_slen = hlen - 2;
    if( olen < hlen + min_slen + 2 )
   d7f9e:	d3e3      	bcc.n	d7f68 <mbedtls_rsa_rsassa_pss_sign+0x20>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    else if( olen >= hlen + hlen + 2 )
   d7fa0:	3302      	adds	r3, #2
   d7fa2:	429c      	cmp	r4, r3
        slen = hlen;
    else
        slen = olen - hlen - 2;
   d7fa4:	bf3a      	itte	cc
   d7fa6:	f1a4 0802 	subcc.w	r8, r4, #2
   d7faa:	ebc0 0808 	rsbcc	r8, r0, r8
     * (PKCS#1 v2.2) §9.1.1 step 3. */
    min_slen = hlen - 2;
    if( olen < hlen + min_slen + 2 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    else if( olen >= hlen + hlen + 2 )
        slen = hlen;
   d7fae:	4680      	movcs	r8, r0
    else
        slen = olen - hlen - 2;

    memset( sig, 0, olen );
   d7fb0:	4622      	mov	r2, r4
   d7fb2:	2100      	movs	r1, #0
   d7fb4:	4628      	mov	r0, r5
   d7fb6:	f011 fda4 	bl	e9b02 <memset>

    /* Generate salt of length slen */
    if( ( ret = f_rng( p_rng, salt, slen ) ) != 0 )
   d7fba:	4642      	mov	r2, r8
   d7fbc:	a90e      	add	r1, sp, #56	; 0x38
   d7fbe:	9805      	ldr	r0, [sp, #20]
   d7fc0:	47d8      	blx	fp
   d7fc2:	b110      	cbz	r0, d7fca <mbedtls_rsa_rsassa_pss_sign+0x82>
        return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
   d7fc4:	f5a0 4089 	sub.w	r0, r0, #17536	; 0x4480
   d7fc8:	e085      	b.n	d80d6 <mbedtls_rsa_rsassa_pss_sign+0x18e>

    /* Note: EMSA-PSS encoding is over the length of N - 1 bits */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
   d7fca:	f109 0308 	add.w	r3, r9, #8
   d7fce:	9009      	str	r0, [sp, #36]	; 0x24
   d7fd0:	4618      	mov	r0, r3
   d7fd2:	9303      	str	r3, [sp, #12]
   d7fd4:	f008 ffca 	bl	e0f6c <mbedtls_mpi_bitlen>
    p += olen - hlen - slen - 2;
   d7fd8:	ebca 0304 	rsb	r3, sl, r4
   d7fdc:	ebc8 0203 	rsb	r2, r8, r3
    *p++ = 0x01;
   d7fe0:	1e56      	subs	r6, r2, #1
   d7fe2:	442a      	add	r2, r5
   d7fe4:	2101      	movs	r1, #1
   d7fe6:	442e      	add	r6, r5
   d7fe8:	f802 1c02 	strb.w	r1, [r2, #-2]
    /* Generate salt of length slen */
    if( ( ret = f_rng( p_rng, salt, slen ) ) != 0 )
        return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );

    /* Note: EMSA-PSS encoding is over the length of N - 1 bits */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
   d7fec:	9008      	str	r0, [sp, #32]
    p += olen - hlen - slen - 2;
    *p++ = 0x01;
    memcpy( p, salt, slen );
   d7fee:	4642      	mov	r2, r8
   d7ff0:	a90e      	add	r1, sp, #56	; 0x38
    p += slen;

    mbedtls_md_init( &md_ctx );
   d7ff2:	af0b      	add	r7, sp, #44	; 0x2c

    /* Note: EMSA-PSS encoding is over the length of N - 1 bits */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
    p += olen - hlen - slen - 2;
    *p++ = 0x01;
    memcpy( p, salt, slen );
   d7ff4:	4630      	mov	r0, r6
    if( ( ret = f_rng( p_rng, salt, slen ) ) != 0 )
        return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );

    /* Note: EMSA-PSS encoding is over the length of N - 1 bits */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
    p += olen - hlen - slen - 2;
   d7ff6:	9304      	str	r3, [sp, #16]
    *p++ = 0x01;
    memcpy( p, salt, slen );
   d7ff8:	f011 fd5d 	bl	e9ab6 <memcpy>
    p += slen;

    mbedtls_md_init( &md_ctx );
   d7ffc:	4638      	mov	r0, r7
   d7ffe:	f004 ffad 	bl	dcf5c <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
   d8002:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d8004:	9907      	ldr	r1, [sp, #28]
   d8006:	461a      	mov	r2, r3
   d8008:	4638      	mov	r0, r7
   d800a:	f004 ffc7 	bl	dcf9c <mbedtls_md_setup>
   d800e:	4602      	mov	r2, r0
   d8010:	2800      	cmp	r0, #0
   d8012:	d149      	bne.n	d80a8 <mbedtls_rsa_rsassa_pss_sign+0x160>
        goto exit;

    /* Generate H = Hash( M' ) */
    if( ( ret = mbedtls_md_starts( &md_ctx ) ) != 0 )
   d8014:	4638      	mov	r0, r7
   d8016:	f004 ffe3 	bl	dcfe0 <mbedtls_md_starts>
   d801a:	4602      	mov	r2, r0
   d801c:	2800      	cmp	r0, #0
   d801e:	d143      	bne.n	d80a8 <mbedtls_rsa_rsassa_pss_sign+0x160>
    /* Note: EMSA-PSS encoding is over the length of N - 1 bits */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
    p += olen - hlen - slen - 2;
    *p++ = 0x01;
    memcpy( p, salt, slen );
    p += slen;
   d8020:	4446      	add	r6, r8
        goto exit;

    /* Generate H = Hash( M' ) */
    if( ( ret = mbedtls_md_starts( &md_ctx ) ) != 0 )
        goto exit;
    if( ( ret = mbedtls_md_update( &md_ctx, p, 8 ) ) != 0 )
   d8022:	2208      	movs	r2, #8
   d8024:	4631      	mov	r1, r6
   d8026:	4638      	mov	r0, r7
   d8028:	f004 ffe4 	bl	dcff4 <mbedtls_md_update>
   d802c:	4602      	mov	r2, r0
   d802e:	2800      	cmp	r0, #0
   d8030:	d13a      	bne.n	d80a8 <mbedtls_rsa_rsassa_pss_sign+0x160>
        goto exit;
    if( ( ret = mbedtls_md_update( &md_ctx, hash, hashlen ) ) != 0 )
   d8032:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   d8034:	992a      	ldr	r1, [sp, #168]	; 0xa8
   d8036:	4638      	mov	r0, r7
   d8038:	f004 ffdc 	bl	dcff4 <mbedtls_md_update>
   d803c:	4602      	mov	r2, r0
   d803e:	bb98      	cbnz	r0, d80a8 <mbedtls_rsa_rsassa_pss_sign+0x160>
        goto exit;
    if( ( ret = mbedtls_md_update( &md_ctx, salt, slen ) ) != 0 )
   d8040:	4642      	mov	r2, r8
   d8042:	a90e      	add	r1, sp, #56	; 0x38
   d8044:	4638      	mov	r0, r7
   d8046:	f004 ffd5 	bl	dcff4 <mbedtls_md_update>
   d804a:	4602      	mov	r2, r0
   d804c:	bb60      	cbnz	r0, d80a8 <mbedtls_rsa_rsassa_pss_sign+0x160>
        goto exit;
    if( ( ret = mbedtls_md_finish( &md_ctx, p ) ) != 0 )
   d804e:	4631      	mov	r1, r6
   d8050:	4638      	mov	r0, r7
   d8052:	f004 ffd9 	bl	dd008 <mbedtls_md_finish>
   d8056:	4602      	mov	r2, r0
   d8058:	bb30      	cbnz	r0, d80a8 <mbedtls_rsa_rsassa_pss_sign+0x160>
                         unsigned char *sig )
{
    size_t olen;
    unsigned char *p = sig;
    unsigned char salt[MBEDTLS_MD_MAX_SIZE];
    size_t slen, min_slen, hlen, offset = 0;
   d805a:	9b08      	ldr	r3, [sp, #32]
    /* Compensate for boundary condition when applying mask */
    if( msb % 8 == 0 )
        offset = 1;

    /* maskedDB: Apply dbMask to DB */
    if( ( ret = mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen,
   d805c:	9700      	str	r7, [sp, #0]
                         unsigned char *sig )
{
    size_t olen;
    unsigned char *p = sig;
    unsigned char salt[MBEDTLS_MD_MAX_SIZE];
    size_t slen, min_slen, hlen, offset = 0;
   d805e:	3b01      	subs	r3, #1
   d8060:	f013 0f07 	tst.w	r3, #7
    /* Compensate for boundary condition when applying mask */
    if( msb % 8 == 0 )
        offset = 1;

    /* maskedDB: Apply dbMask to DB */
    if( ( ret = mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen,
   d8064:	9b04      	ldr	r3, [sp, #16]
                         unsigned char *sig )
{
    size_t olen;
    unsigned char *p = sig;
    unsigned char salt[MBEDTLS_MD_MAX_SIZE];
    size_t slen, min_slen, hlen, offset = 0;
   d8066:	bf0c      	ite	eq
   d8068:	2001      	moveq	r0, #1
   d806a:	2000      	movne	r0, #0
    /* Compensate for boundary condition when applying mask */
    if( msb % 8 == 0 )
        offset = 1;

    /* maskedDB: Apply dbMask to DB */
    if( ( ret = mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen,
   d806c:	1e59      	subs	r1, r3, #1
   d806e:	4632      	mov	r2, r6
   d8070:	1a09      	subs	r1, r1, r0
   d8072:	4653      	mov	r3, sl
   d8074:	4428      	add	r0, r5
   d8076:	f7fe ffdb 	bl	d7030 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
   d807a:	4602      	mov	r2, r0
   d807c:	b9a0      	cbnz	r0, d80a8 <mbedtls_rsa_rsassa_pss_sign+0x160>
   d807e:	9004      	str	r0, [sp, #16]
                          &md_ctx ) ) != 0 )
        goto exit;

    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
   d8080:	9803      	ldr	r0, [sp, #12]
   d8082:	f008 ff73 	bl	e0f6c <mbedtls_mpi_bitlen>
    sig[0] &= 0xFF >> ( olen * 8 - msb );
   d8086:	ebc0 00c4 	rsb	r0, r0, r4, lsl #3
   d808a:	782b      	ldrb	r3, [r5, #0]
   d808c:	3001      	adds	r0, #1
   d808e:	24ff      	movs	r4, #255	; 0xff
   d8090:	fa44 f000 	asr.w	r0, r4, r0
   d8094:	4018      	ands	r0, r3

    p += hlen;
    *p++ = 0xBC;
   d8096:	23bc      	movs	r3, #188	; 0xbc
    if( ( ret = mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen,
                          &md_ctx ) ) != 0 )
        goto exit;

    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
    sig[0] &= 0xFF >> ( olen * 8 - msb );
   d8098:	7028      	strb	r0, [r5, #0]

    p += hlen;
    *p++ = 0xBC;

    mbedtls_platform_zeroize( salt, sizeof( salt ) );
   d809a:	2140      	movs	r1, #64	; 0x40

    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
    sig[0] &= 0xFF >> ( olen * 8 - msb );

    p += hlen;
    *p++ = 0xBC;
   d809c:	f806 300a 	strb.w	r3, [r6, sl]

    mbedtls_platform_zeroize( salt, sizeof( salt ) );
   d80a0:	a80e      	add	r0, sp, #56	; 0x38
   d80a2:	f003 f8ab 	bl	db1fc <mbedtls_platform_zeroize>
   d80a6:	9a04      	ldr	r2, [sp, #16]
   d80a8:	9203      	str	r2, [sp, #12]

exit:
    mbedtls_md_free( &md_ctx );
   d80aa:	a80b      	add	r0, sp, #44	; 0x2c
   d80ac:	f004 ff5b 	bl	dcf66 <mbedtls_md_free>

    if( ret != 0 )
   d80b0:	9a03      	ldr	r2, [sp, #12]
   d80b2:	b97a      	cbnz	r2, d80d4 <mbedtls_rsa_rsassa_pss_sign+0x18c>
        return( ret );

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, sig, sig )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig ) );
   d80b4:	9b06      	ldr	r3, [sp, #24]
   d80b6:	b92b      	cbnz	r3, d80c4 <mbedtls_rsa_rsassa_pss_sign+0x17c>
   d80b8:	462a      	mov	r2, r5
   d80ba:	4629      	mov	r1, r5
   d80bc:	4648      	mov	r0, r9
   d80be:	f7ff fa65 	bl	d758c <mbedtls_rsa_public>
   d80c2:	e008      	b.n	d80d6 <mbedtls_rsa_rsassa_pss_sign+0x18e>
   d80c4:	9500      	str	r5, [sp, #0]
   d80c6:	462b      	mov	r3, r5
   d80c8:	9a05      	ldr	r2, [sp, #20]
   d80ca:	4659      	mov	r1, fp
   d80cc:	4648      	mov	r0, r9
   d80ce:	f7ff fa9f 	bl	d7610 <mbedtls_rsa_private>
   d80d2:	e000      	b.n	d80d6 <mbedtls_rsa_rsassa_pss_sign+0x18e>
   d80d4:	4610      	mov	r0, r2
}
   d80d6:	b01f      	add	sp, #124	; 0x7c
   d80d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d80dc:	ffffbf80 	.word	0xffffbf80

000d80e0 <mbedtls_rsa_rsassa_pkcs1_v15_sign>:
                               int mode,
                               mbedtls_md_type_t md_alg,
                               unsigned int hashlen,
                               const unsigned char *hash,
                               unsigned char *sig )
{
   d80e0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );
    RSA_VALIDATE_RET( sig != NULL );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
   d80e4:	2b01      	cmp	r3, #1
                               int mode,
                               mbedtls_md_type_t md_alg,
                               unsigned int hashlen,
                               const unsigned char *hash,
                               unsigned char *sig )
{
   d80e6:	4689      	mov	r9, r1
   d80e8:	a90b      	add	r1, sp, #44	; 0x2c
   d80ea:	4605      	mov	r5, r0
   d80ec:	4692      	mov	sl, r2
   d80ee:	461c      	mov	r4, r3
   d80f0:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
   d80f4:	c986      	ldmia	r1, {r1, r2, r7}
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );
    RSA_VALIDATE_RET( sig != NULL );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
   d80f6:	d103      	bne.n	d8100 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x20>
   d80f8:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   d80fc:	2b00      	cmp	r3, #0
   d80fe:	d14b      	bne.n	d8198 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xb8>

    /*
     * Prepare PKCS1-v1.5 encoding (padding and hash identifier)
     */

    if( ( ret = rsa_rsassa_pkcs1_v15_encode( md_alg, hashlen, hash,
   d8100:	9700      	str	r7, [sp, #0]
   d8102:	686b      	ldr	r3, [r5, #4]
   d8104:	f7fe ffe8 	bl	d70d8 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh>
   d8108:	2800      	cmp	r0, #0
   d810a:	d149      	bne.n	d81a0 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xc0>

    /*
     * Call respective RSA primitive
     */

    if( mode == MBEDTLS_RSA_PUBLIC )
   d810c:	b93c      	cbnz	r4, d811e <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x3e>
    {
        /* Skip verification on a public key operation */
        return( mbedtls_rsa_public( ctx, sig, sig ) );
   d810e:	463a      	mov	r2, r7
   d8110:	4639      	mov	r1, r7
   d8112:	4628      	mov	r0, r5
cleanup:
    mbedtls_free( sig_try );
    mbedtls_free( verif );

    return( ret );
}
   d8114:	b002      	add	sp, #8
   d8116:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     */

    if( mode == MBEDTLS_RSA_PUBLIC )
    {
        /* Skip verification on a public key operation */
        return( mbedtls_rsa_public( ctx, sig, sig ) );
   d811a:	f7ff ba37 	b.w	d758c <mbedtls_rsa_public>
     *
     * In order to prevent Lenstra's attack, make the signature in a
     * temporary buffer and check it before returning it.
     */

    sig_try = (unsigned char *)mbedtls_calloc( 1, ctx->len );
   d811e:	686c      	ldr	r4, [r5, #4]
   d8120:	2001      	movs	r0, #1
   d8122:	4621      	mov	r1, r4
   d8124:	f011 fba6 	bl	e9874 <calloc>
    if( sig_try == NULL )
   d8128:	4606      	mov	r6, r0
   d812a:	b3b8      	cbz	r0, d819c <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xbc>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );

    verif = (unsigned char *)mbedtls_calloc( 1, ctx->len );
   d812c:	4621      	mov	r1, r4
   d812e:	2001      	movs	r0, #1
   d8130:	f011 fba0 	bl	e9874 <calloc>
    if( verif == NULL )
   d8134:	4680      	mov	r8, r0
   d8136:	b918      	cbnz	r0, d8140 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x60>
    {
        mbedtls_free( sig_try );
   d8138:	4630      	mov	r0, r6
   d813a:	f00d ffc3 	bl	e60c4 <free>
   d813e:	e02d      	b.n	d819c <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xbc>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
    }

    MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );
   d8140:	9600      	str	r6, [sp, #0]
   d8142:	463b      	mov	r3, r7
   d8144:	4652      	mov	r2, sl
   d8146:	4649      	mov	r1, r9
   d8148:	4628      	mov	r0, r5
   d814a:	f7ff fa61 	bl	d7610 <mbedtls_rsa_private>
   d814e:	4604      	mov	r4, r0
   d8150:	b9d0      	cbnz	r0, d8188 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa8>
    MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );
   d8152:	4642      	mov	r2, r8
   d8154:	4631      	mov	r1, r6
   d8156:	4628      	mov	r0, r5
   d8158:	f7ff fa18 	bl	d758c <mbedtls_rsa_public>
   d815c:	4604      	mov	r4, r0
   d815e:	b998      	cbnz	r0, d8188 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa8>

    if( mbedtls_safer_memcmp( verif, sig, ctx->len ) != 0 )
   d8160:	686d      	ldr	r5, [r5, #4]
static inline int mbedtls_safer_memcmp( const void *a, const void *b, size_t n )
{
    size_t i;
    const unsigned char *A = (const unsigned char *) a;
    const unsigned char *B = (const unsigned char *) b;
    unsigned char diff = 0;
   d8162:	4603      	mov	r3, r0

    for( i = 0; i < n; i++ )
   d8164:	4602      	mov	r2, r0
   d8166:	42aa      	cmp	r2, r5
   d8168:	d007      	beq.n	d817a <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x9a>
        diff |= A[i] ^ B[i];
   d816a:	f818 0002 	ldrb.w	r0, [r8, r2]
   d816e:	5cb9      	ldrb	r1, [r7, r2]
   d8170:	4041      	eors	r1, r0
   d8172:	430b      	orrs	r3, r1
   d8174:	b2db      	uxtb	r3, r3
    size_t i;
    const unsigned char *A = (const unsigned char *) a;
    const unsigned char *B = (const unsigned char *) b;
    unsigned char diff = 0;

    for( i = 0; i < n; i++ )
   d8176:	3201      	adds	r2, #1
   d8178:	e7f5      	b.n	d8166 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x86>
    }

    MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );
    MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );

    if( mbedtls_safer_memcmp( verif, sig, ctx->len ) != 0 )
   d817a:	b923      	cbnz	r3, d8186 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa6>
    {
        ret = MBEDTLS_ERR_RSA_PRIVATE_FAILED;
        goto cleanup;
    }

    memcpy( sig, sig_try, ctx->len );
   d817c:	4631      	mov	r1, r6
   d817e:	4638      	mov	r0, r7
   d8180:	f011 fc99 	bl	e9ab6 <memcpy>
   d8184:	e000      	b.n	d8188 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa8>
    MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );
    MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );

    if( mbedtls_safer_memcmp( verif, sig, ctx->len ) != 0 )
    {
        ret = MBEDTLS_ERR_RSA_PRIVATE_FAILED;
   d8186:	4c08      	ldr	r4, [pc, #32]	; (d81a8 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xc8>)
    }

    memcpy( sig, sig_try, ctx->len );

cleanup:
    mbedtls_free( sig_try );
   d8188:	4630      	mov	r0, r6
   d818a:	f00d ff9b 	bl	e60c4 <free>
    mbedtls_free( verif );
   d818e:	4640      	mov	r0, r8
   d8190:	f00d ff98 	bl	e60c4 <free>

    return( ret );
   d8194:	4620      	mov	r0, r4
   d8196:	e003      	b.n	d81a0 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xc0>
                        hashlen == 0 ) ||
                      hash != NULL );
    RSA_VALIDATE_RET( sig != NULL );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   d8198:	4804      	ldr	r0, [pc, #16]	; (d81ac <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xcc>)
   d819a:	e001      	b.n	d81a0 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xc0>
     * temporary buffer and check it before returning it.
     */

    sig_try = (unsigned char *)mbedtls_calloc( 1, ctx->len );
    if( sig_try == NULL )
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
   d819c:	f06f 000f 	mvn.w	r0, #15
cleanup:
    mbedtls_free( sig_try );
    mbedtls_free( verif );

    return( ret );
}
   d81a0:	b002      	add	sp, #8
   d81a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d81a6:	bf00      	nop
   d81a8:	ffffbd00 	.word	0xffffbd00
   d81ac:	ffffbf80 	.word	0xffffbf80

000d81b0 <mbedtls_rsa_pkcs1_sign>:
                    int mode,
                    mbedtls_md_type_t md_alg,
                    unsigned int hashlen,
                    const unsigned char *hash,
                    unsigned char *sig )
{
   d81b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );
    RSA_VALIDATE_RET( sig != NULL );

    switch( ctx->padding )
   d81b2:	f8d0 e0a4 	ldr.w	lr, [r0, #164]	; 0xa4
                    int mode,
                    mbedtls_md_type_t md_alg,
                    unsigned int hashlen,
                    const unsigned char *hash,
                    unsigned char *sig )
{
   d81b6:	f89d 4014 	ldrb.w	r4, [sp, #20]
   d81ba:	ad06      	add	r5, sp, #24
   d81bc:	cde0      	ldmia	r5, {r5, r6, r7}
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );
    RSA_VALIDATE_RET( sig != NULL );

    switch( ctx->padding )
   d81be:	f1be 0f00 	cmp.w	lr, #0
   d81c2:	d00a      	beq.n	d81da <mbedtls_rsa_pkcs1_sign+0x2a>
   d81c4:	f1be 0f01 	cmp.w	lr, #1
   d81c8:	d10f      	bne.n	d81ea <mbedtls_rsa_pkcs1_sign+0x3a>
#endif

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsassa_pss_sign( ctx, f_rng, p_rng, mode, md_alg,
                                        hashlen, hash, sig );
   d81ca:	9708      	str	r7, [sp, #32]
   d81cc:	9607      	str	r6, [sp, #28]
   d81ce:	9506      	str	r5, [sp, #24]
   d81d0:	9405      	str	r4, [sp, #20]
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
   d81d2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
#endif

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsassa_pss_sign( ctx, f_rng, p_rng, mode, md_alg,
                                        hashlen, hash, sig );
   d81d6:	f7ff beb7 	b.w	d7f48 <mbedtls_rsa_rsassa_pss_sign>
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsassa_pkcs1_v15_sign( ctx, f_rng, p_rng, mode, md_alg,
                                              hashlen, hash, sig );
   d81da:	9708      	str	r7, [sp, #32]
   d81dc:	9607      	str	r6, [sp, #28]
   d81de:	9506      	str	r5, [sp, #24]
   d81e0:	9405      	str	r4, [sp, #20]
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
   d81e2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsassa_pkcs1_v15_sign( ctx, f_rng, p_rng, mode, md_alg,
                                              hashlen, hash, sig );
   d81e6:	f7ff bf7b 	b.w	d80e0 <mbedtls_rsa_rsassa_pkcs1_v15_sign>
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
   d81ea:	4801      	ldr	r0, [pc, #4]	; (d81f0 <mbedtls_rsa_pkcs1_sign+0x40>)
   d81ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d81ee:	bf00      	nop
   d81f0:	ffffbf00 	.word	0xffffbf00

000d81f4 <mbedtls_rsa_rsassa_pss_verify_ext>:
                               unsigned int hashlen,
                               const unsigned char *hash,
                               mbedtls_md_type_t mgf1_hash_id,
                               int expected_salt_len,
                               const unsigned char *sig )
{
   d81f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d81f8:	f2ad 4d64 	subw	sp, sp, #1124	; 0x464
    RSA_VALIDATE_RET( sig != NULL );
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
   d81fc:	2b01      	cmp	r3, #1
                               unsigned int hashlen,
                               const unsigned char *hash,
                               mbedtls_md_type_t mgf1_hash_id,
                               int expected_salt_len,
                               const unsigned char *sig )
{
   d81fe:	4605      	mov	r5, r0
   d8200:	f89d 8488 	ldrb.w	r8, [sp, #1160]	; 0x488
    RSA_VALIDATE_RET( sig != NULL );
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
   d8204:	d105      	bne.n	d8212 <mbedtls_rsa_rsassa_pss_verify_ext+0x1e>
   d8206:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   d820a:	2801      	cmp	r0, #1
   d820c:	d001      	beq.n	d8212 <mbedtls_rsa_rsassa_pss_verify_ext+0x1e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   d820e:	4861      	ldr	r0, [pc, #388]	; (d8394 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a0>)
   d8210:	e0bb      	b.n	d838a <mbedtls_rsa_rsassa_pss_verify_ext+0x196>

    siglen = ctx->len;
   d8212:	686f      	ldr	r7, [r5, #4]

    if( siglen < 16 || siglen > sizeof( buf ) )
   d8214:	f1a7 0010 	sub.w	r0, r7, #16
   d8218:	f5b0 7f7c 	cmp.w	r0, #1008	; 0x3f0
   d821c:	d8f7      	bhi.n	d820e <mbedtls_rsa_rsassa_pss_verify_ext+0x1a>
   d821e:	ae18      	add	r6, sp, #96	; 0x60
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, sig, buf )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, buf );
   d8220:	b933      	cbnz	r3, d8230 <mbedtls_rsa_rsassa_pss_verify_ext+0x3c>
   d8222:	4632      	mov	r2, r6
   d8224:	f8dd 149c 	ldr.w	r1, [sp, #1180]	; 0x49c
   d8228:	4628      	mov	r0, r5
   d822a:	f7ff f9af 	bl	d758c <mbedtls_rsa_public>
   d822e:	e005      	b.n	d823c <mbedtls_rsa_rsassa_pss_verify_ext+0x48>
   d8230:	9600      	str	r6, [sp, #0]
   d8232:	f8dd 349c 	ldr.w	r3, [sp, #1180]	; 0x49c
   d8236:	4628      	mov	r0, r5
   d8238:	f7ff f9ea 	bl	d7610 <mbedtls_rsa_private>

    if( ret != 0 )
   d823c:	2800      	cmp	r0, #0
   d823e:	f040 80a4 	bne.w	d838a <mbedtls_rsa_rsassa_pss_verify_ext+0x196>
        return( ret );

    p = buf;

    if( buf[siglen - 1] != 0xBC )
   d8242:	1e7c      	subs	r4, r7, #1
   d8244:	5d33      	ldrb	r3, [r6, r4]
   d8246:	2bbc      	cmp	r3, #188	; 0xbc
   d8248:	f040 809e 	bne.w	d8388 <mbedtls_rsa_rsassa_pss_verify_ext+0x194>
        return( MBEDTLS_ERR_RSA_INVALID_PADDING );

    if( md_alg != MBEDTLS_MD_NONE )
   d824c:	f1b8 0f00 	cmp.w	r8, #0
   d8250:	d008      	beq.n	d8264 <mbedtls_rsa_rsassa_pss_verify_ext+0x70>
    {
        /* Gather length of hash to sign */
        md_info = mbedtls_md_info_from_type( md_alg );
   d8252:	4640      	mov	r0, r8
   d8254:	f004 fe76 	bl	dcf44 <mbedtls_md_info_from_type>
        if( md_info == NULL )
   d8258:	2800      	cmp	r0, #0
   d825a:	d0d8      	beq.n	d820e <mbedtls_rsa_rsassa_pss_verify_ext+0x1a>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        hashlen = mbedtls_md_get_size( md_info );
   d825c:	f004 ffaa 	bl	dd1b4 <mbedtls_md_get_size>
   d8260:	f8cd 048c 	str.w	r0, [sp, #1164]	; 0x48c
    }

    md_info = mbedtls_md_info_from_type( mgf1_hash_id );
   d8264:	f89d 0494 	ldrb.w	r0, [sp, #1172]	; 0x494
   d8268:	f004 fe6c 	bl	dcf44 <mbedtls_md_info_from_type>
    if( md_info == NULL )
   d826c:	4681      	mov	r9, r0
   d826e:	2800      	cmp	r0, #0
   d8270:	d0cd      	beq.n	d820e <mbedtls_rsa_rsassa_pss_verify_ext+0x1a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
   d8272:	f004 ff9f 	bl	dd1b4 <mbedtls_md_get_size>

    memset( zeros, 0, 8 );
   d8276:	2300      	movs	r3, #0

    md_info = mbedtls_md_info_from_type( mgf1_hash_id );
    if( md_info == NULL )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
   d8278:	4682      	mov	sl, r0
    memset( zeros, 0, 8 );

    /*
     * Note: EMSA-PSS verification is over the length of N - 1 bits
     */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
   d827a:	f105 0008 	add.w	r0, r5, #8
    if( md_info == NULL )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );

    memset( zeros, 0, 8 );
   d827e:	9303      	str	r3, [sp, #12]
   d8280:	9304      	str	r3, [sp, #16]

    /*
     * Note: EMSA-PSS verification is over the length of N - 1 bits
     */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
   d8282:	f008 fe73 	bl	e0f6c <mbedtls_mpi_bitlen>

    if( buf[0] >> ( 8 - siglen * 8 + msb ) )
   d8286:	00fb      	lsls	r3, r7, #3
    memset( zeros, 0, 8 );

    /*
     * Note: EMSA-PSS verification is over the length of N - 1 bits
     */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
   d8288:	f100 38ff 	add.w	r8, r0, #4294967295

    if( buf[0] >> ( 8 - siglen * 8 + msb ) )
   d828c:	7832      	ldrb	r2, [r6, #0]
   d828e:	f1c3 0308 	rsb	r3, r3, #8
   d8292:	4443      	add	r3, r8
   d8294:	fa52 f303 	asrs.w	r3, r2, r3
   d8298:	d1b9      	bne.n	d820e <mbedtls_rsa_rsassa_pss_verify_ext+0x1a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    /* Compensate for boundary condition when applying mask */
    if( msb % 8 == 0 )
   d829a:	f018 0f07 	tst.w	r8, #7
    {
        p++;
        siglen -= 1;
   d829e:	bf08      	it	eq
   d82a0:	4627      	moveq	r7, r4
    }

    if( siglen < hlen + 2 )
   d82a2:	f10a 0302 	add.w	r3, sl, #2
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    /* Compensate for boundary condition when applying mask */
    if( msb % 8 == 0 )
    {
        p++;
   d82a6:	bf0c      	ite	eq
   d82a8:	f10d 0561 	addeq.w	r5, sp, #97	; 0x61
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, buf );

    if( ret != 0 )
        return( ret );

    p = buf;
   d82ac:	4635      	movne	r5, r6
    {
        p++;
        siglen -= 1;
    }

    if( siglen < hlen + 2 )
   d82ae:	429f      	cmp	r7, r3
   d82b0:	d3ad      	bcc.n	d820e <mbedtls_rsa_rsassa_pss_verify_ext+0x1a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    hash_start = p + siglen - hlen - 1;

    mbedtls_md_init( &md_ctx );
   d82b2:	ac05      	add	r4, sp, #20
   d82b4:	4620      	mov	r0, r4
   d82b6:	f004 fe51 	bl	dcf5c <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
   d82ba:	2200      	movs	r2, #0
   d82bc:	4649      	mov	r1, r9
   d82be:	4620      	mov	r0, r4
   d82c0:	f004 fe6c 	bl	dcf9c <mbedtls_md_setup>
   d82c4:	4683      	mov	fp, r0
   d82c6:	2800      	cmp	r0, #0
   d82c8:	d159      	bne.n	d837e <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        siglen -= 1;
    }

    if( siglen < hlen + 2 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    hash_start = p + siglen - hlen - 1;
   d82ca:	ea6f 010a 	mvn.w	r1, sl
   d82ce:	4439      	add	r1, r7
   d82d0:	eb05 0901 	add.w	r9, r5, r1

    mbedtls_md_init( &md_ctx );
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
        goto exit;

    ret = mgf_mask( p, siglen - hlen - 1, hash_start, hlen, &md_ctx );
   d82d4:	9400      	str	r4, [sp, #0]
   d82d6:	4653      	mov	r3, sl
   d82d8:	464a      	mov	r2, r9
   d82da:	4628      	mov	r0, r5
   d82dc:	f7fe fea8 	bl	d7030 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
    if( ret != 0 )
   d82e0:	4683      	mov	fp, r0
   d82e2:	2800      	cmp	r0, #0
   d82e4:	d14b      	bne.n	d837e <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;

    buf[0] &= 0xFF >> ( siglen * 8 - msb );
   d82e6:	ebc8 07c7 	rsb	r7, r8, r7, lsl #3
   d82ea:	7833      	ldrb	r3, [r6, #0]
   d82ec:	f04f 08ff 	mov.w	r8, #255	; 0xff
   d82f0:	fa48 f707 	asr.w	r7, r8, r7
   d82f4:	401f      	ands	r7, r3
   d82f6:	7037      	strb	r7, [r6, #0]

    while( p < hash_start - 1 && *p == 0 )
   d82f8:	f109 32ff 	add.w	r2, r9, #4294967295
   d82fc:	4295      	cmp	r5, r2
   d82fe:	4629      	mov	r1, r5
   d8300:	d203      	bcs.n	d830a <mbedtls_rsa_rsassa_pss_verify_ext+0x116>
   d8302:	780b      	ldrb	r3, [r1, #0]
   d8304:	3501      	adds	r5, #1
   d8306:	2b00      	cmp	r3, #0
   d8308:	d0f8      	beq.n	d82fc <mbedtls_rsa_rsassa_pss_verify_ext+0x108>
        p++;

    if( *p++ != 0x01 )
   d830a:	780b      	ldrb	r3, [r1, #0]
   d830c:	2b01      	cmp	r3, #1
   d830e:	d134      	bne.n	d837a <mbedtls_rsa_rsassa_pss_verify_ext+0x186>
        goto exit;
    }

    observed_salt_len = hash_start - p;

    if( expected_salt_len != MBEDTLS_RSA_SALT_LEN_ANY &&
   d8310:	f8dd 3498 	ldr.w	r3, [sp, #1176]	; 0x498
    buf[0] &= 0xFF >> ( siglen * 8 - msb );

    while( p < hash_start - 1 && *p == 0 )
        p++;

    if( *p++ != 0x01 )
   d8314:	1c4d      	adds	r5, r1, #1
        goto exit;
    }

    observed_salt_len = hash_start - p;

    if( expected_salt_len != MBEDTLS_RSA_SALT_LEN_ANY &&
   d8316:	1c5a      	adds	r2, r3, #1
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
        goto exit;
    }

    observed_salt_len = hash_start - p;
   d8318:	ebc5 0609 	rsb	r6, r5, r9

    if( expected_salt_len != MBEDTLS_RSA_SALT_LEN_ANY &&
   d831c:	d001      	beq.n	d8322 <mbedtls_rsa_rsassa_pss_verify_ext+0x12e>
   d831e:	429e      	cmp	r6, r3
   d8320:	d12b      	bne.n	d837a <mbedtls_rsa_rsassa_pss_verify_ext+0x186>
    }

    /*
     * Generate H = Hash( M' )
     */
    ret = mbedtls_md_starts( &md_ctx );
   d8322:	4620      	mov	r0, r4
   d8324:	f004 fe5c 	bl	dcfe0 <mbedtls_md_starts>
    if ( ret != 0 )
   d8328:	4683      	mov	fp, r0
   d832a:	bb40      	cbnz	r0, d837e <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;
    ret = mbedtls_md_update( &md_ctx, zeros, 8 );
   d832c:	2208      	movs	r2, #8
   d832e:	a903      	add	r1, sp, #12
   d8330:	4620      	mov	r0, r4
   d8332:	f004 fe5f 	bl	dcff4 <mbedtls_md_update>
    if ( ret != 0 )
   d8336:	4683      	mov	fp, r0
   d8338:	bb08      	cbnz	r0, d837e <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;
    ret = mbedtls_md_update( &md_ctx, hash, hashlen );
   d833a:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
   d833e:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
   d8342:	4620      	mov	r0, r4
   d8344:	f004 fe56 	bl	dcff4 <mbedtls_md_update>
    if ( ret != 0 )
   d8348:	4683      	mov	fp, r0
   d834a:	b9c0      	cbnz	r0, d837e <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;
    ret = mbedtls_md_update( &md_ctx, p, observed_salt_len );
   d834c:	4632      	mov	r2, r6
   d834e:	4629      	mov	r1, r5
   d8350:	4620      	mov	r0, r4
   d8352:	f004 fe4f 	bl	dcff4 <mbedtls_md_update>
    if ( ret != 0 )
   d8356:	4683      	mov	fp, r0
   d8358:	b988      	cbnz	r0, d837e <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;
    ret = mbedtls_md_finish( &md_ctx, result );
   d835a:	a908      	add	r1, sp, #32
   d835c:	4620      	mov	r0, r4
   d835e:	f004 fe53 	bl	dd008 <mbedtls_md_finish>
    if ( ret != 0 )
   d8362:	4683      	mov	fp, r0
   d8364:	b958      	cbnz	r0, d837e <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;

    if( memcmp( hash_start, result, hlen ) != 0 )
   d8366:	4652      	mov	r2, sl
   d8368:	a908      	add	r1, sp, #32
   d836a:	4648      	mov	r0, r9
   d836c:	f011 fb94 	bl	e9a98 <memcmp>
    {
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
   d8370:	4a09      	ldr	r2, [pc, #36]	; (d8398 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a4>)
   d8372:	2800      	cmp	r0, #0
   d8374:	bf18      	it	ne
   d8376:	4693      	movne	fp, r2
   d8378:	e001      	b.n	d837e <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
    while( p < hash_start - 1 && *p == 0 )
        p++;

    if( *p++ != 0x01 )
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
   d837a:	f8df b020 	ldr.w	fp, [pc, #32]	; d839c <mbedtls_rsa_rsassa_pss_verify_ext+0x1a8>
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
        goto exit;
    }

exit:
    mbedtls_md_free( &md_ctx );
   d837e:	4620      	mov	r0, r4
   d8380:	f004 fdf1 	bl	dcf66 <mbedtls_md_free>

    return( ret );
   d8384:	4658      	mov	r0, fp
   d8386:	e000      	b.n	d838a <mbedtls_rsa_rsassa_pss_verify_ext+0x196>
        return( ret );

    p = buf;

    if( buf[siglen - 1] != 0xBC )
        return( MBEDTLS_ERR_RSA_INVALID_PADDING );
   d8388:	4804      	ldr	r0, [pc, #16]	; (d839c <mbedtls_rsa_rsassa_pss_verify_ext+0x1a8>)

exit:
    mbedtls_md_free( &md_ctx );

    return( ret );
}
   d838a:	f20d 4d64 	addw	sp, sp, #1124	; 0x464
   d838e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8392:	bf00      	nop
   d8394:	ffffbf80 	.word	0xffffbf80
   d8398:	ffffbc80 	.word	0xffffbc80
   d839c:	ffffbf00 	.word	0xffffbf00

000d83a0 <mbedtls_rsa_rsassa_pss_verify>:
                           int mode,
                           mbedtls_md_type_t md_alg,
                           unsigned int hashlen,
                           const unsigned char *hash,
                           const unsigned char *sig )
{
   d83a0:	b570      	push	{r4, r5, r6, lr}
   d83a2:	b086      	sub	sp, #24
    RSA_VALIDATE_RET( sig != NULL );
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );

    mgf1_hash_id = ( ctx->hash_id != MBEDTLS_MD_NONE )
   d83a4:	f8d0 40a8 	ldr.w	r4, [r0, #168]	; 0xa8
                           int mode,
                           mbedtls_md_type_t md_alg,
                           unsigned int hashlen,
                           const unsigned char *hash,
                           const unsigned char *sig )
{
   d83a8:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
                        hashlen == 0 ) ||
                      hash != NULL );

    mgf1_hash_id = ( ctx->hash_id != MBEDTLS_MD_NONE )
                             ? (mbedtls_md_type_t) ctx->hash_id
                             : md_alg;
   d83ac:	b10c      	cbz	r4, d83b2 <mbedtls_rsa_rsassa_pss_verify+0x12>
   d83ae:	b2e4      	uxtb	r4, r4
   d83b0:	e000      	b.n	d83b4 <mbedtls_rsa_rsassa_pss_verify+0x14>
   d83b2:	462c      	mov	r4, r5

    return( mbedtls_rsa_rsassa_pss_verify_ext( ctx, f_rng, p_rng, mode,
                                       md_alg, hashlen, hash,
                                       mgf1_hash_id, MBEDTLS_RSA_SALT_LEN_ANY,
                                       sig ) );
   d83b4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   d83b6:	9403      	str	r4, [sp, #12]
   d83b8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   d83ba:	9605      	str	r6, [sp, #20]
   d83bc:	9402      	str	r4, [sp, #8]
   d83be:	f04f 36ff 	mov.w	r6, #4294967295
   d83c2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   d83c4:	9604      	str	r6, [sp, #16]
   d83c6:	9401      	str	r4, [sp, #4]
   d83c8:	9500      	str	r5, [sp, #0]
   d83ca:	f7ff ff13 	bl	d81f4 <mbedtls_rsa_rsassa_pss_verify_ext>

}
   d83ce:	b006      	add	sp, #24
   d83d0:	bd70      	pop	{r4, r5, r6, pc}
	...

000d83d4 <mbedtls_rsa_rsassa_pkcs1_v15_verify>:
                                 int mode,
                                 mbedtls_md_type_t md_alg,
                                 unsigned int hashlen,
                                 const unsigned char *hash,
                                 const unsigned char *sig )
{
   d83d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
                        hashlen == 0 ) ||
                      hash != NULL );

    sig_len = ctx->len;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
   d83d8:	2b01      	cmp	r3, #1
                                 int mode,
                                 mbedtls_md_type_t md_alg,
                                 unsigned int hashlen,
                                 const unsigned char *hash,
                                 const unsigned char *sig )
{
   d83da:	4680      	mov	r8, r0
   d83dc:	468a      	mov	sl, r1
   d83de:	4693      	mov	fp, r2
   d83e0:	4699      	mov	r9, r3
    RSA_VALIDATE_RET( sig != NULL );
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );

    sig_len = ctx->len;
   d83e2:	6845      	ldr	r5, [r0, #4]

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
   d83e4:	d102      	bne.n	d83ec <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x18>
   d83e6:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   d83ea:	b9eb      	cbnz	r3, d8428 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x54>

    /*
     * Prepare expected PKCS1 v1.5 encoding of hash.
     */

    if( ( encoded          = (unsigned char *)mbedtls_calloc( 1, sig_len ) ) == NULL ||
   d83ec:	4629      	mov	r1, r5
   d83ee:	2001      	movs	r0, #1
   d83f0:	f011 fa40 	bl	e9874 <calloc>
   d83f4:	4606      	mov	r6, r0
   d83f6:	b1c8      	cbz	r0, d842c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x58>
   d83f8:	4629      	mov	r1, r5
   d83fa:	2001      	movs	r0, #1
   d83fc:	f011 fa3a 	bl	e9874 <calloc>
   d8400:	4607      	mov	r7, r0
   d8402:	b9c0      	cbnz	r0, d8436 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x62>
        ( encoded_expected = (unsigned char *)mbedtls_calloc( 1, sig_len ) ) == NULL )
    {
        ret = MBEDTLS_ERR_MPI_ALLOC_FAILED;
   d8404:	f06f 040f 	mvn.w	r4, #15

cleanup:

    if( encoded != NULL )
    {
        mbedtls_platform_zeroize( encoded, sig_len );
   d8408:	4630      	mov	r0, r6
   d840a:	4629      	mov	r1, r5
   d840c:	f002 fef6 	bl	db1fc <mbedtls_platform_zeroize>
        mbedtls_free( encoded );
   d8410:	4630      	mov	r0, r6
   d8412:	f00d fe57 	bl	e60c4 <free>
    }

    if( encoded_expected != NULL )
   d8416:	b167      	cbz	r7, d8432 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x5e>
    {
        mbedtls_platform_zeroize( encoded_expected, sig_len );
   d8418:	4638      	mov	r0, r7
   d841a:	4629      	mov	r1, r5
   d841c:	f002 feee 	bl	db1fc <mbedtls_platform_zeroize>
        mbedtls_free( encoded_expected );
   d8420:	4638      	mov	r0, r7
   d8422:	f00d fe4f 	bl	e60c4 <free>
   d8426:	e004      	b.n	d8432 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x5e>
                      hash != NULL );

    sig_len = ctx->len;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   d8428:	481b      	ldr	r0, [pc, #108]	; (d8498 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xc4>)
   d842a:	e031      	b.n	d8490 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xbc>
     */

    if( ( encoded          = (unsigned char *)mbedtls_calloc( 1, sig_len ) ) == NULL ||
        ( encoded_expected = (unsigned char *)mbedtls_calloc( 1, sig_len ) ) == NULL )
    {
        ret = MBEDTLS_ERR_MPI_ALLOC_FAILED;
   d842c:	f06f 000f 	mvn.w	r0, #15
   d8430:	e02e      	b.n	d8490 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xbc>
   d8432:	4620      	mov	r0, r4
   d8434:	e02c      	b.n	d8490 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xbc>
        goto cleanup;
    }

    if( ( ret = rsa_rsassa_pkcs1_v15_encode( md_alg, hashlen, hash, sig_len,
   d8436:	9000      	str	r0, [sp, #0]
   d8438:	462b      	mov	r3, r5
   d843a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   d843c:	990d      	ldr	r1, [sp, #52]	; 0x34
   d843e:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   d8442:	f7fe fe49 	bl	d70d8 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh>
   d8446:	4604      	mov	r4, r0
   d8448:	2800      	cmp	r0, #0
   d844a:	d1dd      	bne.n	d8408 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x34>
     * Apply RSA primitive to get what should be PKCS1 encoded hash.
     */

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, sig, encoded )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, encoded );
   d844c:	f1b9 0f00 	cmp.w	r9, #0
   d8450:	d105      	bne.n	d845e <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x8a>
   d8452:	4632      	mov	r2, r6
   d8454:	990f      	ldr	r1, [sp, #60]	; 0x3c
   d8456:	4640      	mov	r0, r8
   d8458:	f7ff f898 	bl	d758c <mbedtls_rsa_public>
   d845c:	e006      	b.n	d846c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x98>
   d845e:	9600      	str	r6, [sp, #0]
   d8460:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d8462:	465a      	mov	r2, fp
   d8464:	4651      	mov	r1, sl
   d8466:	4640      	mov	r0, r8
   d8468:	f7ff f8d2 	bl	d7610 <mbedtls_rsa_private>
   d846c:	4604      	mov	r4, r0
    if( ret != 0 )
   d846e:	2800      	cmp	r0, #0
   d8470:	d1ca      	bne.n	d8408 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x34>
   d8472:	4603      	mov	r3, r0
    size_t i;
    const unsigned char *A = (const unsigned char *) a;
    const unsigned char *B = (const unsigned char *) b;
    unsigned char diff = 0;

    for( i = 0; i < n; i++ )
   d8474:	429d      	cmp	r5, r3
   d8476:	d006      	beq.n	d8486 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xb2>
        diff |= A[i] ^ B[i];
   d8478:	5cf0      	ldrb	r0, [r6, r3]
   d847a:	5cfa      	ldrb	r2, [r7, r3]
   d847c:	4050      	eors	r0, r2
   d847e:	4304      	orrs	r4, r0
   d8480:	b2e4      	uxtb	r4, r4
    size_t i;
    const unsigned char *A = (const unsigned char *) a;
    const unsigned char *B = (const unsigned char *) b;
    unsigned char diff = 0;

    for( i = 0; i < n; i++ )
   d8482:	3301      	adds	r3, #1
   d8484:	e7f6      	b.n	d8474 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xa0>
     */

    if( ( ret = mbedtls_safer_memcmp( encoded, encoded_expected,
                                      sig_len ) ) != 0 )
    {
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
   d8486:	2c00      	cmp	r4, #0
   d8488:	4c04      	ldr	r4, [pc, #16]	; (d849c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xc8>)
   d848a:	bf08      	it	eq
   d848c:	2400      	moveq	r4, #0
   d848e:	e7bb      	b.n	d8408 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x34>
        mbedtls_platform_zeroize( encoded_expected, sig_len );
        mbedtls_free( encoded_expected );
    }

    return( ret );
}
   d8490:	b003      	add	sp, #12
   d8492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8496:	bf00      	nop
   d8498:	ffffbf80 	.word	0xffffbf80
   d849c:	ffffbc80 	.word	0xffffbc80

000d84a0 <mbedtls_rsa_pkcs1_verify>:
                      int mode,
                      mbedtls_md_type_t md_alg,
                      unsigned int hashlen,
                      const unsigned char *hash,
                      const unsigned char *sig )
{
   d84a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    RSA_VALIDATE_RET( sig != NULL );
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );

    switch( ctx->padding )
   d84a2:	f8d0 e0a4 	ldr.w	lr, [r0, #164]	; 0xa4
                      int mode,
                      mbedtls_md_type_t md_alg,
                      unsigned int hashlen,
                      const unsigned char *hash,
                      const unsigned char *sig )
{
   d84a6:	f89d 4014 	ldrb.w	r4, [sp, #20]
   d84aa:	ad06      	add	r5, sp, #24
   d84ac:	cde0      	ldmia	r5, {r5, r6, r7}
    RSA_VALIDATE_RET( sig != NULL );
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );

    switch( ctx->padding )
   d84ae:	f1be 0f00 	cmp.w	lr, #0
   d84b2:	d00a      	beq.n	d84ca <mbedtls_rsa_pkcs1_verify+0x2a>
   d84b4:	f1be 0f01 	cmp.w	lr, #1
   d84b8:	d10f      	bne.n	d84da <mbedtls_rsa_pkcs1_verify+0x3a>
#endif

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsassa_pss_verify( ctx, f_rng, p_rng, mode, md_alg,
                                          hashlen, hash, sig );
   d84ba:	9708      	str	r7, [sp, #32]
   d84bc:	9607      	str	r6, [sp, #28]
   d84be:	9506      	str	r5, [sp, #24]
   d84c0:	9405      	str	r4, [sp, #20]
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
   d84c2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
#endif

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsassa_pss_verify( ctx, f_rng, p_rng, mode, md_alg,
                                          hashlen, hash, sig );
   d84c6:	f7ff bf6b 	b.w	d83a0 <mbedtls_rsa_rsassa_pss_verify>
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsassa_pkcs1_v15_verify( ctx, f_rng, p_rng, mode, md_alg,
                                                hashlen, hash, sig );
   d84ca:	9708      	str	r7, [sp, #32]
   d84cc:	9607      	str	r6, [sp, #28]
   d84ce:	9506      	str	r5, [sp, #24]
   d84d0:	9405      	str	r4, [sp, #20]
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
   d84d2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsassa_pkcs1_v15_verify( ctx, f_rng, p_rng, mode, md_alg,
                                                hashlen, hash, sig );
   d84d6:	f7ff bf7d 	b.w	d83d4 <mbedtls_rsa_rsassa_pkcs1_v15_verify>
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
   d84da:	4801      	ldr	r0, [pc, #4]	; (d84e0 <mbedtls_rsa_pkcs1_verify+0x40>)
   d84dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d84de:	bf00      	nop
   d84e0:	ffffbf00 	.word	0xffffbf00

000d84e4 <mbedtls_rsa_free>:

/*
 * Free the components of an RSA key
 */
void mbedtls_rsa_free( mbedtls_rsa_context *ctx )
{
   d84e4:	b510      	push	{r4, lr}
    if( ctx == NULL )
   d84e6:	4604      	mov	r4, r0
   d84e8:	b3a0      	cbz	r0, d8554 <mbedtls_rsa_free+0x70>
        return;

    mbedtls_mpi_free( &ctx->Vi );
   d84ea:	308c      	adds	r0, #140	; 0x8c
   d84ec:	f008 fc1d 	bl	e0d2a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Vf );
   d84f0:	f104 0098 	add.w	r0, r4, #152	; 0x98
   d84f4:	f008 fc19 	bl	e0d2a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RN );
   d84f8:	f104 0068 	add.w	r0, r4, #104	; 0x68
   d84fc:	f008 fc15 	bl	e0d2a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->D  );
   d8500:	f104 0020 	add.w	r0, r4, #32
   d8504:	f008 fc11 	bl	e0d2a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Q  );
   d8508:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d850c:	f008 fc0d 	bl	e0d2a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->P  );
   d8510:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d8514:	f008 fc09 	bl	e0d2a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->E  );
   d8518:	f104 0014 	add.w	r0, r4, #20
   d851c:	f008 fc05 	bl	e0d2a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->N  );
   d8520:	f104 0008 	add.w	r0, r4, #8
   d8524:	f008 fc01 	bl	e0d2a <mbedtls_mpi_free>

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &ctx->RQ );
   d8528:	f104 0080 	add.w	r0, r4, #128	; 0x80
   d852c:	f008 fbfd 	bl	e0d2a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RP );
   d8530:	f104 0074 	add.w	r0, r4, #116	; 0x74
   d8534:	f008 fbf9 	bl	e0d2a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->QP );
   d8538:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   d853c:	f008 fbf5 	bl	e0d2a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DQ );
   d8540:	f104 0050 	add.w	r0, r4, #80	; 0x50
   d8544:	f008 fbf1 	bl	e0d2a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DP );
   d8548:	f104 0044 	add.w	r0, r4, #68	; 0x44
#endif /* MBEDTLS_RSA_NO_CRT */

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_free( &ctx->mutex );
#endif
}
   d854c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &ctx->RQ );
    mbedtls_mpi_free( &ctx->RP );
    mbedtls_mpi_free( &ctx->QP );
    mbedtls_mpi_free( &ctx->DQ );
    mbedtls_mpi_free( &ctx->DP );
   d8550:	f008 bbeb 	b.w	e0d2a <mbedtls_mpi_free>
   d8554:	bd10      	pop	{r4, pc}

000d8556 <_ZL12ecp_get_typePK17mbedtls_ecp_group>:
/*
 * Get the type of a curve
 */
static inline ecp_curve_type ecp_get_type( const mbedtls_ecp_group *grp )
{
    if( grp->G.X.p == NULL )
   d8556:	6b03      	ldr	r3, [r0, #48]	; 0x30
   d8558:	b12b      	cbz	r3, d8566 <_ZL12ecp_get_typePK17mbedtls_ecp_group+0x10>
        return( ECP_TYPE_NONE );

    if( grp->G.Y.p == NULL )
   d855a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   d855c:	2b00      	cmp	r3, #0
        return( ECP_TYPE_MONTGOMERY );
    else
        return( ECP_TYPE_SHORT_WEIERSTRASS );
   d855e:	bf0c      	ite	eq
   d8560:	2002      	moveq	r0, #2
   d8562:	2001      	movne	r0, #1
   d8564:	4770      	bx	lr
 * Get the type of a curve
 */
static inline ecp_curve_type ecp_get_type( const mbedtls_ecp_group *grp )
{
    if( grp->G.X.p == NULL )
        return( ECP_TYPE_NONE );
   d8566:	4618      	mov	r0, r3

    if( grp->G.Y.p == NULL )
        return( ECP_TYPE_MONTGOMERY );
    else
        return( ECP_TYPE_SHORT_WEIERSTRASS );
}
   d8568:	4770      	bx	lr
	...

000d856c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>:
 * See the documentation of struct mbedtls_ecp_group.
 *
 * This function is in the critial loop for mbedtls_ecp_mul, so pay attention to perf.
 */
static int ecp_modp( mbedtls_mpi *N, const mbedtls_ecp_group *grp )
{
   d856c:	b538      	push	{r3, r4, r5, lr}
    int ret;

    if( grp->modp == NULL )
   d856e:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 * See the documentation of struct mbedtls_ecp_group.
 *
 * This function is in the critial loop for mbedtls_ecp_mul, so pay attention to perf.
 */
static int ecp_modp( mbedtls_mpi *N, const mbedtls_ecp_group *grp )
{
   d8570:	4604      	mov	r4, r0
   d8572:	460d      	mov	r5, r1
    int ret;

    if( grp->modp == NULL )
   d8574:	b92b      	cbnz	r3, d8582 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x16>
        return( mbedtls_mpi_mod_mpi( N, N, &grp->P ) );
   d8576:	1d0a      	adds	r2, r1, #4
        /* we known P, N and the result are positive */
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, N, &grp->P ) );

cleanup:
    return( ret );
}
   d8578:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
static int ecp_modp( mbedtls_mpi *N, const mbedtls_ecp_group *grp )
{
    int ret;

    if( grp->modp == NULL )
        return( mbedtls_mpi_mod_mpi( N, N, &grp->P ) );
   d857c:	4601      	mov	r1, r0
   d857e:	f009 ba55 	b.w	e1a2c <mbedtls_mpi_mod_mpi>

    /* N->s < 0 is a much faster test, which fails only if N is 0 */
    if( ( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 ) ||
   d8582:	6803      	ldr	r3, [r0, #0]
   d8584:	2b00      	cmp	r3, #0
   d8586:	db07      	blt.n	d8598 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x2c>
        mbedtls_mpi_bitlen( N ) > 2 * grp->pbits )
   d8588:	4620      	mov	r0, r4
   d858a:	f008 fcef 	bl	e0f6c <mbedtls_mpi_bitlen>

    if( grp->modp == NULL )
        return( mbedtls_mpi_mod_mpi( N, N, &grp->P ) );

    /* N->s < 0 is a much faster test, which fails only if N is 0 */
    if( ( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 ) ||
   d858e:	6dab      	ldr	r3, [r5, #88]	; 0x58
   d8590:	ebb0 0f43 	cmp.w	r0, r3, lsl #1
   d8594:	d822      	bhi.n	d85dc <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x70>
   d8596:	e004      	b.n	d85a2 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x36>
   d8598:	2100      	movs	r1, #0
   d859a:	f008 feec 	bl	e1376 <mbedtls_mpi_cmp_int>
   d859e:	b9e8      	cbnz	r0, d85dc <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x70>
   d85a0:	e7f2      	b.n	d8588 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x1c>
        mbedtls_mpi_bitlen( N ) > 2 * grp->pbits )
    {
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
    }

    MBEDTLS_MPI_CHK( grp->modp( N ) );
   d85a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   d85a4:	4620      	mov	r0, r4
   d85a6:	4798      	blx	r3
   d85a8:	bb08      	cbnz	r0, d85ee <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x82>
   d85aa:	3504      	adds	r5, #4

    /* N->s < 0 is a much faster test, which fails only if N is 0 */
    while( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 )
   d85ac:	6823      	ldr	r3, [r4, #0]
   d85ae:	2b00      	cmp	r3, #0
   d85b0:	da04      	bge.n	d85bc <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x50>
   d85b2:	2100      	movs	r1, #0
   d85b4:	4620      	mov	r0, r4
   d85b6:	f008 fede 	bl	e1376 <mbedtls_mpi_cmp_int>
   d85ba:	b988      	cbnz	r0, d85e0 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x74>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &grp->P ) );

    while( mbedtls_mpi_cmp_mpi( N, &grp->P ) >= 0 )
   d85bc:	4629      	mov	r1, r5
   d85be:	4620      	mov	r0, r4
   d85c0:	f008 fe94 	bl	e12ec <mbedtls_mpi_cmp_mpi>
   d85c4:	2800      	cmp	r0, #0
   d85c6:	db07      	blt.n	d85d8 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x6c>
        /* we known P, N and the result are positive */
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, N, &grp->P ) );
   d85c8:	462a      	mov	r2, r5
   d85ca:	4621      	mov	r1, r4
   d85cc:	4620      	mov	r0, r4
   d85ce:	f008 ff42 	bl	e1456 <mbedtls_mpi_sub_abs>
   d85d2:	2800      	cmp	r0, #0
   d85d4:	d0f2      	beq.n	d85bc <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x50>
   d85d6:	bd38      	pop	{r3, r4, r5, pc}
   d85d8:	2000      	movs	r0, #0
   d85da:	bd38      	pop	{r3, r4, r5, pc}

    /* N->s < 0 is a much faster test, which fails only if N is 0 */
    if( ( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 ) ||
        mbedtls_mpi_bitlen( N ) > 2 * grp->pbits )
    {
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   d85dc:	4804      	ldr	r0, [pc, #16]	; (d85f0 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x84>)
   d85de:	bd38      	pop	{r3, r4, r5, pc}

    MBEDTLS_MPI_CHK( grp->modp( N ) );

    /* N->s < 0 is a much faster test, which fails only if N is 0 */
    while( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &grp->P ) );
   d85e0:	462a      	mov	r2, r5
   d85e2:	4621      	mov	r1, r4
   d85e4:	4620      	mov	r0, r4
   d85e6:	f008 ff76 	bl	e14d6 <mbedtls_mpi_add_mpi>
   d85ea:	2800      	cmp	r0, #0
   d85ec:	d0de      	beq.n	d85ac <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x40>
        /* we known P, N and the result are positive */
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, N, &grp->P ) );

cleanup:
    return( ret );
}
   d85ee:	bd38      	pop	{r3, r4, r5, pc}
   d85f0:	ffffb080 	.word	0xffffb080

000d85f4 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_>:
 *             4M + 4S          (A == -3)
 *             3M + 6S + 1a     otherwise
 */
static int ecp_double_jac( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                           const mbedtls_ecp_point *P )
{
   d85f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d85f8:	b08d      	sub	sp, #52	; 0x34
   d85fa:	4606      	mov	r6, r0
#if defined(MBEDTLS_ECP_DOUBLE_JAC_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_double_jac( grp, R, P ) );
#endif /* MBEDTLS_ECP_DOUBLE_JAC_ALT */

    mbedtls_mpi_init( &M ); mbedtls_mpi_init( &S ); mbedtls_mpi_init( &T ); mbedtls_mpi_init( &U );
   d85fc:	ad03      	add	r5, sp, #12
   d85fe:	4668      	mov	r0, sp
 *             4M + 4S          (A == -3)
 *             3M + 6S + 1a     otherwise
 */
static int ecp_double_jac( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                           const mbedtls_ecp_point *P )
{
   d8600:	4689      	mov	r9, r1
   d8602:	4690      	mov	r8, r2
#if defined(MBEDTLS_ECP_DOUBLE_JAC_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_double_jac( grp, R, P ) );
#endif /* MBEDTLS_ECP_DOUBLE_JAC_ALT */

    mbedtls_mpi_init( &M ); mbedtls_mpi_init( &S ); mbedtls_mpi_init( &T ); mbedtls_mpi_init( &U );
   d8604:	f008 fb8b 	bl	e0d1e <mbedtls_mpi_init>
   d8608:	4628      	mov	r0, r5
   d860a:	f008 fb88 	bl	e0d1e <mbedtls_mpi_init>
   d860e:	a806      	add	r0, sp, #24
   d8610:	f008 fb85 	bl	e0d1e <mbedtls_mpi_init>
   d8614:	a809      	add	r0, sp, #36	; 0x24
   d8616:	f008 fb82 	bl	e0d1e <mbedtls_mpi_init>

    /* Special case for A = -3 */
    if( grp->A.p == NULL )
   d861a:	69b3      	ldr	r3, [r6, #24]
   d861c:	2b00      	cmp	r3, #0
   d861e:	d13f      	bne.n	d86a0 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0xac>
    {
        /* M = 3(X + Z^2)(X - Z^2) */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
   d8620:	f108 0218 	add.w	r2, r8, #24
   d8624:	4611      	mov	r1, r2
   d8626:	4628      	mov	r0, r5
   d8628:	f008 ffc4 	bl	e15b4 <mbedtls_mpi_mul_mpi>
   d862c:	4604      	mov	r4, r0
   d862e:	2800      	cmp	r0, #0
   d8630:	f040 8205 	bne.w	d8a3e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d8634:	4631      	mov	r1, r6
   d8636:	4628      	mov	r0, r5
   d8638:	f7ff ff98 	bl	d856c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d863c:	4604      	mov	r4, r0
   d863e:	2800      	cmp	r0, #0
   d8640:	f040 81fd 	bne.w	d8a3e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T,  &P->X,  &S      ) ); MOD_ADD( T );
   d8644:	462a      	mov	r2, r5
   d8646:	4641      	mov	r1, r8
   d8648:	a806      	add	r0, sp, #24
   d864a:	f008 ff44 	bl	e14d6 <mbedtls_mpi_add_mpi>
   d864e:	4604      	mov	r4, r0
   d8650:	2800      	cmp	r0, #0
   d8652:	f040 81f4 	bne.w	d8a3e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d8656:	1d37      	adds	r7, r6, #4
   d8658:	4639      	mov	r1, r7
   d865a:	a806      	add	r0, sp, #24
   d865c:	f008 fe46 	bl	e12ec <mbedtls_mpi_cmp_mpi>
   d8660:	2800      	cmp	r0, #0
   d8662:	db08      	blt.n	d8676 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x82>
   d8664:	a906      	add	r1, sp, #24
   d8666:	463a      	mov	r2, r7
   d8668:	4608      	mov	r0, r1
   d866a:	f008 fef4 	bl	e1456 <mbedtls_mpi_sub_abs>
   d866e:	4604      	mov	r4, r0
   d8670:	2800      	cmp	r0, #0
   d8672:	d0f1      	beq.n	d8658 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x64>
   d8674:	e1e3      	b.n	d8a3e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U,  &P->X,  &S      ) ); MOD_SUB( U );
   d8676:	462a      	mov	r2, r5
   d8678:	4641      	mov	r1, r8
   d867a:	a809      	add	r0, sp, #36	; 0x24
   d867c:	f008 ff4c 	bl	e1518 <mbedtls_mpi_sub_mpi>
   d8680:	4604      	mov	r4, r0
   d8682:	2800      	cmp	r0, #0
   d8684:	f040 81db 	bne.w	d8a3e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d8688:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d868a:	2b00      	cmp	r3, #0
   d868c:	f280 8120 	bge.w	d88d0 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x2dc>
   d8690:	2100      	movs	r1, #0
   d8692:	a809      	add	r0, sp, #36	; 0x24
   d8694:	f008 fe6f 	bl	e1376 <mbedtls_mpi_cmp_int>
   d8698:	2800      	cmp	r0, #0
   d869a:	f040 8140 	bne.w	d891e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x32a>
   d869e:	e117      	b.n	d88d0 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x2dc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
    }
    else
    {
        /* M = 3.X^2 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &P->X   ) ); MOD_MUL( S );
   d86a0:	4642      	mov	r2, r8
   d86a2:	4641      	mov	r1, r8
   d86a4:	4628      	mov	r0, r5
   d86a6:	f008 ff85 	bl	e15b4 <mbedtls_mpi_mul_mpi>
   d86aa:	4604      	mov	r4, r0
   d86ac:	2800      	cmp	r0, #0
   d86ae:	f040 81c6 	bne.w	d8a3e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d86b2:	4631      	mov	r1, r6
   d86b4:	4628      	mov	r0, r5
   d86b6:	f7ff ff59 	bl	d856c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d86ba:	4604      	mov	r4, r0
   d86bc:	2800      	cmp	r0, #0
   d86be:	f040 81be 	bne.w	d8a3e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
   d86c2:	2203      	movs	r2, #3
   d86c4:	4629      	mov	r1, r5
   d86c6:	4668      	mov	r0, sp
   d86c8:	f008 ffe3 	bl	e1692 <mbedtls_mpi_mul_int>
   d86cc:	4604      	mov	r4, r0
   d86ce:	2800      	cmp	r0, #0
   d86d0:	f040 81b5 	bne.w	d8a3e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d86d4:	1d37      	adds	r7, r6, #4
   d86d6:	4639      	mov	r1, r7
   d86d8:	4668      	mov	r0, sp
   d86da:	f008 fe07 	bl	e12ec <mbedtls_mpi_cmp_mpi>
   d86de:	2800      	cmp	r0, #0
   d86e0:	db08      	blt.n	d86f4 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x100>
   d86e2:	463a      	mov	r2, r7
   d86e4:	4669      	mov	r1, sp
   d86e6:	4668      	mov	r0, sp
   d86e8:	f008 feb5 	bl	e1456 <mbedtls_mpi_sub_abs>
   d86ec:	4604      	mov	r4, r0
   d86ee:	2800      	cmp	r0, #0
   d86f0:	d0f1      	beq.n	d86d6 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0xe2>
   d86f2:	e1a4      	b.n	d8a3e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>

        /* Optimize away for "koblitz" curves with A = 0 */
        if( mbedtls_mpi_cmp_int( &grp->A, 0 ) != 0 )
   d86f4:	f106 0a10 	add.w	sl, r6, #16
   d86f8:	2100      	movs	r1, #0
   d86fa:	4650      	mov	r0, sl
   d86fc:	f008 fe3b 	bl	e1376 <mbedtls_mpi_cmp_int>
   d8700:	2800      	cmp	r0, #0
   d8702:	d048      	beq.n	d8796 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x1a2>
        {
            /* M += A.Z^4 */
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
   d8704:	f108 0218 	add.w	r2, r8, #24
   d8708:	4611      	mov	r1, r2
   d870a:	4628      	mov	r0, r5
   d870c:	f008 ff52 	bl	e15b4 <mbedtls_mpi_mul_mpi>
   d8710:	4604      	mov	r4, r0
   d8712:	2800      	cmp	r0, #0
   d8714:	f040 8193 	bne.w	d8a3e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d8718:	4631      	mov	r1, r6
   d871a:	4628      	mov	r0, r5
   d871c:	f7ff ff26 	bl	d856c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8720:	4604      	mov	r4, r0
   d8722:	2800      	cmp	r0, #0
   d8724:	f040 818b 	bne.w	d8a3e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &S,     &S      ) ); MOD_MUL( T );
   d8728:	462a      	mov	r2, r5
   d872a:	4629      	mov	r1, r5
   d872c:	a806      	add	r0, sp, #24
   d872e:	f008 ff41 	bl	e15b4 <mbedtls_mpi_mul_mpi>
   d8732:	4604      	mov	r4, r0
   d8734:	2800      	cmp	r0, #0
   d8736:	f040 8182 	bne.w	d8a3e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d873a:	4631      	mov	r1, r6
   d873c:	a806      	add	r0, sp, #24
   d873e:	f7ff ff15 	bl	d856c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8742:	4604      	mov	r4, r0
   d8744:	2800      	cmp	r0, #0
   d8746:	f040 817a 	bne.w	d8a3e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &grp->A ) ); MOD_MUL( S );
   d874a:	4652      	mov	r2, sl
   d874c:	a906      	add	r1, sp, #24
   d874e:	4628      	mov	r0, r5
   d8750:	f008 ff30 	bl	e15b4 <mbedtls_mpi_mul_mpi>
   d8754:	4604      	mov	r4, r0
   d8756:	2800      	cmp	r0, #0
   d8758:	f040 8171 	bne.w	d8a3e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d875c:	4631      	mov	r1, r6
   d875e:	4628      	mov	r0, r5
   d8760:	f7ff ff04 	bl	d856c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8764:	4604      	mov	r4, r0
   d8766:	2800      	cmp	r0, #0
   d8768:	f040 8169 	bne.w	d8a3e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &M,  &M,     &S      ) ); MOD_ADD( M );
   d876c:	462a      	mov	r2, r5
   d876e:	4669      	mov	r1, sp
   d8770:	4668      	mov	r0, sp
   d8772:	f008 feb0 	bl	e14d6 <mbedtls_mpi_add_mpi>
   d8776:	4604      	mov	r4, r0
   d8778:	2800      	cmp	r0, #0
   d877a:	f040 8160 	bne.w	d8a3e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d877e:	4639      	mov	r1, r7
   d8780:	4668      	mov	r0, sp
   d8782:	f008 fdb3 	bl	e12ec <mbedtls_mpi_cmp_mpi>
   d8786:	2800      	cmp	r0, #0
   d8788:	db05      	blt.n	d8796 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x1a2>
   d878a:	463a      	mov	r2, r7
   d878c:	4669      	mov	r1, sp
   d878e:	4668      	mov	r0, sp
   d8790:	f008 fe61 	bl	e1456 <mbedtls_mpi_sub_abs>
   d8794:	e7ef      	b.n	d8776 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x182>
        }
    }

    /* S = 4.X.Y^2 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &P->Y,  &P->Y   ) ); MOD_MUL( T );
   d8796:	f108 0b0c 	add.w	fp, r8, #12
   d879a:	465a      	mov	r2, fp
   d879c:	4659      	mov	r1, fp
   d879e:	a806      	add	r0, sp, #24
   d87a0:	f008 ff08 	bl	e15b4 <mbedtls_mpi_mul_mpi>
   d87a4:	4604      	mov	r4, r0
   d87a6:	2800      	cmp	r0, #0
   d87a8:	f040 8149 	bne.w	d8a3e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d87ac:	4631      	mov	r1, r6
   d87ae:	a806      	add	r0, sp, #24
   d87b0:	f7ff fedc 	bl	d856c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d87b4:	4604      	mov	r4, r0
   d87b6:	2800      	cmp	r0, #0
   d87b8:	f040 8141 	bne.w	d8a3e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T,  1               ) ); MOD_ADD( T );
   d87bc:	2101      	movs	r1, #1
   d87be:	a806      	add	r0, sp, #24
   d87c0:	f008 fc66 	bl	e1090 <mbedtls_mpi_shift_l>
   d87c4:	4604      	mov	r4, r0
   d87c6:	2800      	cmp	r0, #0
   d87c8:	f040 8139 	bne.w	d8a3e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d87cc:	1d37      	adds	r7, r6, #4
   d87ce:	4639      	mov	r1, r7
   d87d0:	a806      	add	r0, sp, #24
   d87d2:	f008 fd8b 	bl	e12ec <mbedtls_mpi_cmp_mpi>
   d87d6:	2800      	cmp	r0, #0
   d87d8:	db08      	blt.n	d87ec <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x1f8>
   d87da:	a906      	add	r1, sp, #24
   d87dc:	463a      	mov	r2, r7
   d87de:	4608      	mov	r0, r1
   d87e0:	f008 fe39 	bl	e1456 <mbedtls_mpi_sub_abs>
   d87e4:	4604      	mov	r4, r0
   d87e6:	2800      	cmp	r0, #0
   d87e8:	d0f1      	beq.n	d87ce <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x1da>
   d87ea:	e128      	b.n	d8a3e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &T      ) ); MOD_MUL( S );
   d87ec:	aa06      	add	r2, sp, #24
   d87ee:	4641      	mov	r1, r8
   d87f0:	4628      	mov	r0, r5
   d87f2:	f008 fedf 	bl	e15b4 <mbedtls_mpi_mul_mpi>
   d87f6:	4604      	mov	r4, r0
   d87f8:	2800      	cmp	r0, #0
   d87fa:	f040 8120 	bne.w	d8a3e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d87fe:	4631      	mov	r1, r6
   d8800:	4628      	mov	r0, r5
   d8802:	f7ff feb3 	bl	d856c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8806:	4604      	mov	r4, r0
   d8808:	2800      	cmp	r0, #0
   d880a:	f040 8118 	bne.w	d8a3e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &S,  1               ) ); MOD_ADD( S );
   d880e:	2101      	movs	r1, #1
   d8810:	4628      	mov	r0, r5
   d8812:	f008 fc3d 	bl	e1090 <mbedtls_mpi_shift_l>
   d8816:	4604      	mov	r4, r0
   d8818:	2800      	cmp	r0, #0
   d881a:	f040 8110 	bne.w	d8a3e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d881e:	4639      	mov	r1, r7
   d8820:	4628      	mov	r0, r5
   d8822:	f008 fd63 	bl	e12ec <mbedtls_mpi_cmp_mpi>
   d8826:	2800      	cmp	r0, #0
   d8828:	db05      	blt.n	d8836 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x242>
   d882a:	463a      	mov	r2, r7
   d882c:	4629      	mov	r1, r5
   d882e:	4628      	mov	r0, r5
   d8830:	f008 fe11 	bl	e1456 <mbedtls_mpi_sub_abs>
   d8834:	e7ef      	b.n	d8816 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x222>

    /* U = 8.Y^4 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &T,     &T      ) ); MOD_MUL( U );
   d8836:	aa06      	add	r2, sp, #24
   d8838:	4611      	mov	r1, r2
   d883a:	a809      	add	r0, sp, #36	; 0x24
   d883c:	f008 feba 	bl	e15b4 <mbedtls_mpi_mul_mpi>
   d8840:	4604      	mov	r4, r0
   d8842:	2800      	cmp	r0, #0
   d8844:	f040 80fb 	bne.w	d8a3e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d8848:	4631      	mov	r1, r6
   d884a:	a809      	add	r0, sp, #36	; 0x24
   d884c:	f7ff fe8e 	bl	d856c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8850:	4604      	mov	r4, r0
   d8852:	2800      	cmp	r0, #0
   d8854:	f040 80f3 	bne.w	d8a3e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
   d8858:	2101      	movs	r1, #1
   d885a:	a809      	add	r0, sp, #36	; 0x24
   d885c:	f008 fc18 	bl	e1090 <mbedtls_mpi_shift_l>
   d8860:	4604      	mov	r4, r0
   d8862:	2800      	cmp	r0, #0
   d8864:	f040 80eb 	bne.w	d8a3e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d8868:	4639      	mov	r1, r7
   d886a:	a809      	add	r0, sp, #36	; 0x24
   d886c:	f008 fd3e 	bl	e12ec <mbedtls_mpi_cmp_mpi>
   d8870:	2800      	cmp	r0, #0
   d8872:	db05      	blt.n	d8880 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x28c>
   d8874:	a909      	add	r1, sp, #36	; 0x24
   d8876:	463a      	mov	r2, r7
   d8878:	4608      	mov	r0, r1
   d887a:	f008 fdec 	bl	e1456 <mbedtls_mpi_sub_abs>
   d887e:	e7ef      	b.n	d8860 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x26c>

    /* T = M^2 - 2.S */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &M,     &M      ) ); MOD_MUL( T );
   d8880:	466a      	mov	r2, sp
   d8882:	4669      	mov	r1, sp
   d8884:	a806      	add	r0, sp, #24
   d8886:	f008 fe95 	bl	e15b4 <mbedtls_mpi_mul_mpi>
   d888a:	4604      	mov	r4, r0
   d888c:	2800      	cmp	r0, #0
   d888e:	f040 80d6 	bne.w	d8a3e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d8892:	4631      	mov	r1, r6
   d8894:	a806      	add	r0, sp, #24
   d8896:	f7ff fe69 	bl	d856c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d889a:	4604      	mov	r4, r0
   d889c:	2800      	cmp	r0, #0
   d889e:	f040 80ce 	bne.w	d8a3e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
   d88a2:	a906      	add	r1, sp, #24
   d88a4:	462a      	mov	r2, r5
   d88a6:	4608      	mov	r0, r1
   d88a8:	f008 fe36 	bl	e1518 <mbedtls_mpi_sub_mpi>
   d88ac:	4604      	mov	r4, r0
   d88ae:	2800      	cmp	r0, #0
   d88b0:	f040 80c5 	bne.w	d8a3e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d88b4:	9b06      	ldr	r3, [sp, #24]
   d88b6:	2b00      	cmp	r3, #0
   d88b8:	da37      	bge.n	d892a <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x336>
   d88ba:	2100      	movs	r1, #0
   d88bc:	a806      	add	r0, sp, #24
   d88be:	f008 fd5a 	bl	e1376 <mbedtls_mpi_cmp_int>
   d88c2:	b390      	cbz	r0, d892a <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x336>
   d88c4:	a906      	add	r1, sp, #24
   d88c6:	463a      	mov	r2, r7
   d88c8:	4608      	mov	r0, r1
   d88ca:	f008 fe04 	bl	e14d6 <mbedtls_mpi_add_mpi>
   d88ce:	e7ed      	b.n	d88ac <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x2b8>
    {
        /* M = 3(X + Z^2)(X - Z^2) */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T,  &P->X,  &S      ) ); MOD_ADD( T );
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U,  &P->X,  &S      ) ); MOD_SUB( U );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &U      ) ); MOD_MUL( S );
   d88d0:	aa09      	add	r2, sp, #36	; 0x24
   d88d2:	a906      	add	r1, sp, #24
   d88d4:	4628      	mov	r0, r5
   d88d6:	f008 fe6d 	bl	e15b4 <mbedtls_mpi_mul_mpi>
   d88da:	4604      	mov	r4, r0
   d88dc:	2800      	cmp	r0, #0
   d88de:	f040 80ae 	bne.w	d8a3e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d88e2:	4631      	mov	r1, r6
   d88e4:	4628      	mov	r0, r5
   d88e6:	f7ff fe41 	bl	d856c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d88ea:	4604      	mov	r4, r0
   d88ec:	2800      	cmp	r0, #0
   d88ee:	f040 80a6 	bne.w	d8a3e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
   d88f2:	2203      	movs	r2, #3
   d88f4:	4629      	mov	r1, r5
   d88f6:	4668      	mov	r0, sp
   d88f8:	f008 fecb 	bl	e1692 <mbedtls_mpi_mul_int>
   d88fc:	4604      	mov	r4, r0
   d88fe:	2800      	cmp	r0, #0
   d8900:	f040 809d 	bne.w	d8a3e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d8904:	4639      	mov	r1, r7
   d8906:	4668      	mov	r0, sp
   d8908:	f008 fcf0 	bl	e12ec <mbedtls_mpi_cmp_mpi>
   d890c:	2800      	cmp	r0, #0
   d890e:	f6ff af42 	blt.w	d8796 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x1a2>
   d8912:	463a      	mov	r2, r7
   d8914:	4669      	mov	r1, sp
   d8916:	4668      	mov	r0, sp
   d8918:	f008 fd9d 	bl	e1456 <mbedtls_mpi_sub_abs>
   d891c:	e7ee      	b.n	d88fc <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x308>
    if( grp->A.p == NULL )
    {
        /* M = 3(X + Z^2)(X - Z^2) */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T,  &P->X,  &S      ) ); MOD_ADD( T );
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U,  &P->X,  &S      ) ); MOD_SUB( U );
   d891e:	a909      	add	r1, sp, #36	; 0x24
   d8920:	463a      	mov	r2, r7
   d8922:	4608      	mov	r0, r1
   d8924:	f008 fdd7 	bl	e14d6 <mbedtls_mpi_add_mpi>
   d8928:	e6aa      	b.n	d8680 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x8c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );

    /* T = M^2 - 2.S */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &M,     &M      ) ); MOD_MUL( T );
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
   d892a:	a906      	add	r1, sp, #24
   d892c:	462a      	mov	r2, r5
   d892e:	4608      	mov	r0, r1
   d8930:	f008 fdf2 	bl	e1518 <mbedtls_mpi_sub_mpi>
   d8934:	4604      	mov	r4, r0
   d8936:	2800      	cmp	r0, #0
   d8938:	f040 8081 	bne.w	d8a3e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d893c:	9b06      	ldr	r3, [sp, #24]
   d893e:	2b00      	cmp	r3, #0
   d8940:	da04      	bge.n	d894c <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x358>
   d8942:	2100      	movs	r1, #0
   d8944:	a806      	add	r0, sp, #24
   d8946:	f008 fd16 	bl	e1376 <mbedtls_mpi_cmp_int>
   d894a:	b928      	cbnz	r0, d8958 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x364>

    /* S = M(S - T) - U */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &T      ) ); MOD_SUB( S );
   d894c:	aa06      	add	r2, sp, #24
   d894e:	4629      	mov	r1, r5
   d8950:	4628      	mov	r0, r5
   d8952:	f008 fde1 	bl	e1518 <mbedtls_mpi_sub_mpi>
   d8956:	e012      	b.n	d897e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x38a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );

    /* T = M^2 - 2.S */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &M,     &M      ) ); MOD_MUL( T );
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
   d8958:	a906      	add	r1, sp, #24
   d895a:	463a      	mov	r2, r7
   d895c:	4608      	mov	r0, r1
   d895e:	f008 fdba 	bl	e14d6 <mbedtls_mpi_add_mpi>
   d8962:	e7e7      	b.n	d8934 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x340>

    /* S = M(S - T) - U */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &T      ) ); MOD_SUB( S );
   d8964:	9b03      	ldr	r3, [sp, #12]
   d8966:	2b00      	cmp	r3, #0
   d8968:	da0d      	bge.n	d8986 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x392>
   d896a:	2100      	movs	r1, #0
   d896c:	4628      	mov	r0, r5
   d896e:	f008 fd02 	bl	e1376 <mbedtls_mpi_cmp_int>
   d8972:	b140      	cbz	r0, d8986 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x392>
   d8974:	463a      	mov	r2, r7
   d8976:	4629      	mov	r1, r5
   d8978:	4628      	mov	r0, r5
   d897a:	f008 fdac 	bl	e14d6 <mbedtls_mpi_add_mpi>
   d897e:	4604      	mov	r4, r0
   d8980:	2800      	cmp	r0, #0
   d8982:	d0ef      	beq.n	d8964 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x370>
   d8984:	e05b      	b.n	d8a3e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &S,     &M      ) ); MOD_MUL( S );
   d8986:	466a      	mov	r2, sp
   d8988:	4629      	mov	r1, r5
   d898a:	4628      	mov	r0, r5
   d898c:	f008 fe12 	bl	e15b4 <mbedtls_mpi_mul_mpi>
   d8990:	4604      	mov	r4, r0
   d8992:	2800      	cmp	r0, #0
   d8994:	d153      	bne.n	d8a3e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d8996:	4631      	mov	r1, r6
   d8998:	4628      	mov	r0, r5
   d899a:	f7ff fde7 	bl	d856c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d899e:	4604      	mov	r4, r0
   d89a0:	2800      	cmp	r0, #0
   d89a2:	d14c      	bne.n	d8a3e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &U      ) ); MOD_SUB( S );
   d89a4:	aa09      	add	r2, sp, #36	; 0x24
   d89a6:	4629      	mov	r1, r5
   d89a8:	4628      	mov	r0, r5
   d89aa:	f008 fdb5 	bl	e1518 <mbedtls_mpi_sub_mpi>
   d89ae:	4604      	mov	r4, r0
   d89b0:	2800      	cmp	r0, #0
   d89b2:	d144      	bne.n	d8a3e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d89b4:	46aa      	mov	sl, r5
   d89b6:	9b03      	ldr	r3, [sp, #12]
   d89b8:	2b00      	cmp	r3, #0
   d89ba:	da04      	bge.n	d89c6 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x3d2>
   d89bc:	2100      	movs	r1, #0
   d89be:	4650      	mov	r0, sl
   d89c0:	f008 fcd9 	bl	e1376 <mbedtls_mpi_cmp_int>
   d89c4:	bb98      	cbnz	r0, d8a2e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x43a>

    /* U = 2.Y.Z */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &P->Y,  &P->Z   ) ); MOD_MUL( U );
   d89c6:	f108 0218 	add.w	r2, r8, #24
   d89ca:	4659      	mov	r1, fp
   d89cc:	a809      	add	r0, sp, #36	; 0x24
   d89ce:	f008 fdf1 	bl	e15b4 <mbedtls_mpi_mul_mpi>
   d89d2:	4604      	mov	r4, r0
   d89d4:	bb98      	cbnz	r0, d8a3e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d89d6:	4631      	mov	r1, r6
   d89d8:	a809      	add	r0, sp, #36	; 0x24
   d89da:	f7ff fdc7 	bl	d856c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d89de:	4604      	mov	r4, r0
   d89e0:	bb68      	cbnz	r0, d8a3e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
   d89e2:	2101      	movs	r1, #1
   d89e4:	a809      	add	r0, sp, #36	; 0x24
   d89e6:	f008 fb53 	bl	e1090 <mbedtls_mpi_shift_l>
   d89ea:	4604      	mov	r4, r0
   d89ec:	bb38      	cbnz	r0, d8a3e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d89ee:	4639      	mov	r1, r7
   d89f0:	a809      	add	r0, sp, #36	; 0x24
   d89f2:	f008 fc7b 	bl	e12ec <mbedtls_mpi_cmp_mpi>
   d89f6:	2800      	cmp	r0, #0
   d89f8:	db05      	blt.n	d8a06 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x412>
   d89fa:	a909      	add	r1, sp, #36	; 0x24
   d89fc:	463a      	mov	r2, r7
   d89fe:	4608      	mov	r0, r1
   d8a00:	f008 fd29 	bl	e1456 <mbedtls_mpi_sub_abs>
   d8a04:	e7f1      	b.n	d89ea <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x3f6>

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->X, &T ) );
   d8a06:	a906      	add	r1, sp, #24
   d8a08:	4648      	mov	r0, r9
   d8a0a:	f008 fa08 	bl	e0e1e <mbedtls_mpi_copy>
   d8a0e:	4604      	mov	r4, r0
   d8a10:	b9a8      	cbnz	r0, d8a3e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Y, &S ) );
   d8a12:	a903      	add	r1, sp, #12
   d8a14:	f109 000c 	add.w	r0, r9, #12
   d8a18:	f008 fa01 	bl	e0e1e <mbedtls_mpi_copy>
   d8a1c:	4604      	mov	r4, r0
   d8a1e:	b970      	cbnz	r0, d8a3e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &U ) );
   d8a20:	a909      	add	r1, sp, #36	; 0x24
   d8a22:	f109 0018 	add.w	r0, r9, #24
   d8a26:	f008 f9fa 	bl	e0e1e <mbedtls_mpi_copy>
   d8a2a:	4604      	mov	r4, r0
   d8a2c:	e007      	b.n	d8a3e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );

    /* S = M(S - T) - U */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &T      ) ); MOD_SUB( S );
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &S,     &M      ) ); MOD_MUL( S );
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &U      ) ); MOD_SUB( S );
   d8a2e:	463a      	mov	r2, r7
   d8a30:	4651      	mov	r1, sl
   d8a32:	4650      	mov	r0, sl
   d8a34:	f008 fd4f 	bl	e14d6 <mbedtls_mpi_add_mpi>
   d8a38:	4604      	mov	r4, r0
   d8a3a:	2800      	cmp	r0, #0
   d8a3c:	d0bb      	beq.n	d89b6 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x3c2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->X, &T ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Y, &S ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &U ) );

cleanup:
    mbedtls_mpi_free( &M ); mbedtls_mpi_free( &S ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &U );
   d8a3e:	4668      	mov	r0, sp
   d8a40:	f008 f973 	bl	e0d2a <mbedtls_mpi_free>
   d8a44:	4628      	mov	r0, r5
   d8a46:	f008 f970 	bl	e0d2a <mbedtls_mpi_free>
   d8a4a:	a806      	add	r0, sp, #24
   d8a4c:	f008 f96d 	bl	e0d2a <mbedtls_mpi_free>
   d8a50:	a809      	add	r0, sp, #36	; 0x24
   d8a52:	f008 f96a 	bl	e0d2a <mbedtls_mpi_free>

    return( ret );
}
   d8a56:	4620      	mov	r0, r4
   d8a58:	b00d      	add	sp, #52	; 0x34
   d8a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d8a5e <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point>:
/*
 * Normalize jacobian coordinates so that Z == 0 || Z == 1  (GECC 3.2.1)
 * Cost: 1N := 1I + 3M + 1S
 */
static int ecp_normalize_jac( const mbedtls_ecp_group *grp, mbedtls_ecp_point *pt )
{
   d8a5e:	b5f0      	push	{r4, r5, r6, r7, lr}
    int ret;
    mbedtls_mpi Zi, ZZi;

    if( mbedtls_mpi_cmp_int( &pt->Z, 0 ) == 0 )
   d8a60:	f101 0718 	add.w	r7, r1, #24
/*
 * Normalize jacobian coordinates so that Z == 0 || Z == 1  (GECC 3.2.1)
 * Cost: 1N := 1I + 3M + 1S
 */
static int ecp_normalize_jac( const mbedtls_ecp_group *grp, mbedtls_ecp_point *pt )
{
   d8a64:	b087      	sub	sp, #28
   d8a66:	4606      	mov	r6, r0
   d8a68:	460d      	mov	r5, r1
    int ret;
    mbedtls_mpi Zi, ZZi;

    if( mbedtls_mpi_cmp_int( &pt->Z, 0 ) == 0 )
   d8a6a:	4638      	mov	r0, r7
   d8a6c:	2100      	movs	r1, #0
   d8a6e:	f008 fc82 	bl	e1376 <mbedtls_mpi_cmp_int>
   d8a72:	2800      	cmp	r0, #0
   d8a74:	d04d      	beq.n	d8b12 <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point+0xb4>
#if defined(MBEDTLS_ECP_NORMALIZE_JAC_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_normalize_jac( grp, pt ) );
#endif /* MBEDTLS_ECP_NORMALIZE_JAC_ALT */

    mbedtls_mpi_init( &Zi ); mbedtls_mpi_init( &ZZi );
   d8a76:	4668      	mov	r0, sp
   d8a78:	f008 f951 	bl	e0d1e <mbedtls_mpi_init>
   d8a7c:	a803      	add	r0, sp, #12
   d8a7e:	f008 f94e 	bl	e0d1e <mbedtls_mpi_init>

    /*
     * X = X / Z^2  mod p
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &Zi,      &pt->Z,     &grp->P ) );
   d8a82:	1d32      	adds	r2, r6, #4
   d8a84:	4639      	mov	r1, r7
   d8a86:	4668      	mov	r0, sp
   d8a88:	f009 fada 	bl	e2040 <mbedtls_mpi_inv_mod>
   d8a8c:	4604      	mov	r4, r0
   d8a8e:	bbc8      	cbnz	r0, d8b04 <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point+0xa6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,        &Zi     ) ); MOD_MUL( ZZi );
   d8a90:	466a      	mov	r2, sp
   d8a92:	4669      	mov	r1, sp
   d8a94:	a803      	add	r0, sp, #12
   d8a96:	f008 fd8d 	bl	e15b4 <mbedtls_mpi_mul_mpi>
   d8a9a:	4604      	mov	r4, r0
   d8a9c:	bb90      	cbnz	r0, d8b04 <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point+0xa6>
   d8a9e:	4631      	mov	r1, r6
   d8aa0:	a803      	add	r0, sp, #12
   d8aa2:	f7ff fd63 	bl	d856c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8aa6:	4604      	mov	r4, r0
   d8aa8:	bb60      	cbnz	r0, d8b04 <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point+0xa6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ZZi    ) ); MOD_MUL( pt->X );
   d8aaa:	aa03      	add	r2, sp, #12
   d8aac:	4629      	mov	r1, r5
   d8aae:	4628      	mov	r0, r5
   d8ab0:	f008 fd80 	bl	e15b4 <mbedtls_mpi_mul_mpi>
   d8ab4:	4604      	mov	r4, r0
   d8ab6:	bb28      	cbnz	r0, d8b04 <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point+0xa6>
   d8ab8:	4631      	mov	r1, r6
   d8aba:	4628      	mov	r0, r5
   d8abc:	f7ff fd56 	bl	d856c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8ac0:	4604      	mov	r4, r0
   d8ac2:	b9f8      	cbnz	r0, d8b04 <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point+0xa6>

    /*
     * Y = Y / Z^3  mod p
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ZZi    ) ); MOD_MUL( pt->Y );
   d8ac4:	350c      	adds	r5, #12
   d8ac6:	aa03      	add	r2, sp, #12
   d8ac8:	4629      	mov	r1, r5
   d8aca:	4628      	mov	r0, r5
   d8acc:	f008 fd72 	bl	e15b4 <mbedtls_mpi_mul_mpi>
   d8ad0:	4604      	mov	r4, r0
   d8ad2:	b9b8      	cbnz	r0, d8b04 <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point+0xa6>
   d8ad4:	4631      	mov	r1, r6
   d8ad6:	4628      	mov	r0, r5
   d8ad8:	f7ff fd48 	bl	d856c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8adc:	4604      	mov	r4, r0
   d8ade:	b988      	cbnz	r0, d8b04 <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point+0xa6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &Zi     ) ); MOD_MUL( pt->Y );
   d8ae0:	466a      	mov	r2, sp
   d8ae2:	4629      	mov	r1, r5
   d8ae4:	4628      	mov	r0, r5
   d8ae6:	f008 fd65 	bl	e15b4 <mbedtls_mpi_mul_mpi>
   d8aea:	4604      	mov	r4, r0
   d8aec:	b950      	cbnz	r0, d8b04 <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point+0xa6>
   d8aee:	4631      	mov	r1, r6
   d8af0:	4628      	mov	r0, r5
   d8af2:	f7ff fd3b 	bl	d856c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8af6:	4604      	mov	r4, r0
   d8af8:	b920      	cbnz	r0, d8b04 <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point+0xa6>

    /*
     * Z = 1
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );
   d8afa:	2101      	movs	r1, #1
   d8afc:	4638      	mov	r0, r7
   d8afe:	f008 f9ef 	bl	e0ee0 <mbedtls_mpi_lset>
   d8b02:	4604      	mov	r4, r0

cleanup:

    mbedtls_mpi_free( &Zi ); mbedtls_mpi_free( &ZZi );
   d8b04:	4668      	mov	r0, sp
   d8b06:	f008 f910 	bl	e0d2a <mbedtls_mpi_free>
   d8b0a:	a803      	add	r0, sp, #12
   d8b0c:	f008 f90d 	bl	e0d2a <mbedtls_mpi_free>

    return( ret );
   d8b10:	4620      	mov	r0, r4
}
   d8b12:	b007      	add	sp, #28
   d8b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d8b18 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj>:
 *
 * Cost: 1N(t) := 1I + (6t - 3)M + 1S
 */
static int ecp_normalize_jac_many( const mbedtls_ecp_group *grp,
                                   mbedtls_ecp_point *T[], size_t T_size )
{
   d8b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int ret;
    size_t i;
    mbedtls_mpi *c, u, Zi, ZZi;

    if( T_size < 2 )
   d8b1c:	2a01      	cmp	r2, #1
 *
 * Cost: 1N(t) := 1I + (6t - 3)M + 1S
 */
static int ecp_normalize_jac_many( const mbedtls_ecp_group *grp,
                                   mbedtls_ecp_point *T[], size_t T_size )
{
   d8b1e:	b08a      	sub	sp, #40	; 0x28
   d8b20:	4607      	mov	r7, r0
   d8b22:	460d      	mov	r5, r1
   d8b24:	4691      	mov	r9, r2
    int ret;
    size_t i;
    mbedtls_mpi *c, u, Zi, ZZi;

    if( T_size < 2 )
   d8b26:	d803      	bhi.n	d8b30 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x18>
        return( ecp_normalize_jac( grp, *T ) );
   d8b28:	6809      	ldr	r1, [r1, #0]
   d8b2a:	f7ff ff98 	bl	d8a5e <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point>
   d8b2e:	e0f1      	b.n	d8d14 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1fc>
#if defined(MBEDTLS_ECP_NORMALIZE_JAC_MANY_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_normalize_jac_many( grp, T, T_size ) );
#endif

    if( ( c = (mbedtls_mpi *)mbedtls_calloc( T_size, sizeof( mbedtls_mpi ) ) ) == NULL )
   d8b30:	210c      	movs	r1, #12
   d8b32:	4610      	mov	r0, r2
   d8b34:	f010 fe9e 	bl	e9874 <calloc>
   d8b38:	4680      	mov	r8, r0
   d8b3a:	2800      	cmp	r0, #0
   d8b3c:	f000 80e9 	beq.w	d8d12 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1fa>
   d8b40:	2400      	movs	r4, #0
        return( MBEDTLS_ERR_ECP_ALLOC_FAILED );

    for( i = 0; i < T_size; i++ )
        mbedtls_mpi_init( &c[i] );
   d8b42:	260c      	movs	r6, #12
   d8b44:	fb06 8004 	mla	r0, r6, r4, r8
#endif

    if( ( c = (mbedtls_mpi *)mbedtls_calloc( T_size, sizeof( mbedtls_mpi ) ) ) == NULL )
        return( MBEDTLS_ERR_ECP_ALLOC_FAILED );

    for( i = 0; i < T_size; i++ )
   d8b48:	3401      	adds	r4, #1
        mbedtls_mpi_init( &c[i] );
   d8b4a:	f008 f8e8 	bl	e0d1e <mbedtls_mpi_init>
#endif

    if( ( c = (mbedtls_mpi *)mbedtls_calloc( T_size, sizeof( mbedtls_mpi ) ) ) == NULL )
        return( MBEDTLS_ERR_ECP_ALLOC_FAILED );

    for( i = 0; i < T_size; i++ )
   d8b4e:	45a1      	cmp	r9, r4
   d8b50:	d1f8      	bne.n	d8b44 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x2c>
        mbedtls_mpi_init( &c[i] );

    mbedtls_mpi_init( &u ); mbedtls_mpi_init( &Zi ); mbedtls_mpi_init( &ZZi );
   d8b52:	a801      	add	r0, sp, #4
   d8b54:	f008 f8e3 	bl	e0d1e <mbedtls_mpi_init>
   d8b58:	a804      	add	r0, sp, #16
   d8b5a:	f008 f8e0 	bl	e0d1e <mbedtls_mpi_init>
   d8b5e:	a807      	add	r0, sp, #28
   d8b60:	f008 f8dd 	bl	e0d1e <mbedtls_mpi_init>

    /*
     * c[i] = Z_0 * ... * Z_i
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &c[0], &T[0]->Z ) );
   d8b64:	6829      	ldr	r1, [r5, #0]
   d8b66:	4640      	mov	r0, r8
   d8b68:	3118      	adds	r1, #24
   d8b6a:	f008 f958 	bl	e0e1e <mbedtls_mpi_copy>
   d8b6e:	4604      	mov	r4, r0
   d8b70:	2800      	cmp	r0, #0
   d8b72:	f040 80b7 	bne.w	d8ce4 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
   d8b76:	f108 060c 	add.w	r6, r8, #12
   d8b7a:	f04f 0a01 	mov.w	sl, #1
    for( i = 1; i < T_size; i++ )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &c[i], &c[i-1], &T[i]->Z ) );
   d8b7e:	f855 202a 	ldr.w	r2, [r5, sl, lsl #2]
   d8b82:	f1a6 010c 	sub.w	r1, r6, #12
   d8b86:	3218      	adds	r2, #24
   d8b88:	4630      	mov	r0, r6
   d8b8a:	f008 fd13 	bl	e15b4 <mbedtls_mpi_mul_mpi>
   d8b8e:	4604      	mov	r4, r0
   d8b90:	2800      	cmp	r0, #0
   d8b92:	f040 80a7 	bne.w	d8ce4 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
        MOD_MUL( c[i] );
   d8b96:	4639      	mov	r1, r7
   d8b98:	4630      	mov	r0, r6
   d8b9a:	f7ff fce7 	bl	d856c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8b9e:	4604      	mov	r4, r0
   d8ba0:	2800      	cmp	r0, #0
   d8ba2:	f040 809f 	bne.w	d8ce4 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>

    /*
     * c[i] = Z_0 * ... * Z_i
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &c[0], &T[0]->Z ) );
    for( i = 1; i < T_size; i++ )
   d8ba6:	f10a 0a01 	add.w	sl, sl, #1
   d8baa:	45d1      	cmp	r9, sl
   d8bac:	f106 060c 	add.w	r6, r6, #12
   d8bb0:	d1e5      	bne.n	d8b7e <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x66>
    }

    /*
     * u = 1 / (Z_0 * ... * Z_n) mod P
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &u, &c[T_size-1], &grp->P ) );
   d8bb2:	260c      	movs	r6, #12
   d8bb4:	fb06 f609 	mul.w	r6, r6, r9
   d8bb8:	f1a6 010c 	sub.w	r1, r6, #12
   d8bbc:	1d3a      	adds	r2, r7, #4
   d8bbe:	4441      	add	r1, r8
   d8bc0:	a801      	add	r0, sp, #4
   d8bc2:	f009 fa3d 	bl	e2040 <mbedtls_mpi_inv_mod>
   d8bc6:	4604      	mov	r4, r0
   d8bc8:	2800      	cmp	r0, #0
   d8bca:	f040 808b 	bne.w	d8ce4 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
   d8bce:	3e18      	subs	r6, #24

    for( i = T_size - 1; ; i-- )
   d8bd0:	f109 3aff 	add.w	sl, r9, #4294967295
   d8bd4:	eb05 0589 	add.w	r5, r5, r9, lsl #2
   d8bd8:	4446      	add	r6, r8
    {
        /*
         * Zi = 1 / Z_i mod p
         * u = 1 / (Z_0 * ... * Z_i) mod P
         */
        if( i == 0 ) {
   d8bda:	f1ba 0f00 	cmp.w	sl, #0
   d8bde:	d10e      	bne.n	d8bfe <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0xe6>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Zi, &u ) );
   d8be0:	a901      	add	r1, sp, #4
   d8be2:	a804      	add	r0, sp, #16
   d8be4:	f008 f91b 	bl	e0e1e <mbedtls_mpi_copy>
   d8be8:	4604      	mov	r4, r0
   d8bea:	2800      	cmp	r0, #0
   d8bec:	d17a      	bne.n	d8ce4 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
        }

        /*
         * proceed as in normalize()
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,      &Zi  ) ); MOD_MUL( ZZi );
   d8bee:	aa04      	add	r2, sp, #16
   d8bf0:	4611      	mov	r1, r2
   d8bf2:	a807      	add	r0, sp, #28
   d8bf4:	f008 fcde 	bl	e15b4 <mbedtls_mpi_mul_mpi>
   d8bf8:	4604      	mov	r4, r0
   d8bfa:	b1f0      	cbz	r0, d8c3a <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x122>
   d8bfc:	e072      	b.n	d8ce4 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
        if( i == 0 ) {
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Zi, &u ) );
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Zi, &u, &c[i-1]  ) ); MOD_MUL( Zi );
   d8bfe:	4632      	mov	r2, r6
   d8c00:	a901      	add	r1, sp, #4
   d8c02:	a804      	add	r0, sp, #16
   d8c04:	f008 fcd6 	bl	e15b4 <mbedtls_mpi_mul_mpi>
   d8c08:	4604      	mov	r4, r0
   d8c0a:	2800      	cmp	r0, #0
   d8c0c:	d16a      	bne.n	d8ce4 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
   d8c0e:	4639      	mov	r1, r7
   d8c10:	a804      	add	r0, sp, #16
   d8c12:	f7ff fcab 	bl	d856c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8c16:	4604      	mov	r4, r0
   d8c18:	2800      	cmp	r0, #0
   d8c1a:	d163      	bne.n	d8ce4 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &u,  &u, &T[i]->Z ) ); MOD_MUL( u );
   d8c1c:	f855 2c04 	ldr.w	r2, [r5, #-4]
   d8c20:	a901      	add	r1, sp, #4
   d8c22:	3218      	adds	r2, #24
   d8c24:	4608      	mov	r0, r1
   d8c26:	f008 fcc5 	bl	e15b4 <mbedtls_mpi_mul_mpi>
   d8c2a:	4604      	mov	r4, r0
   d8c2c:	2800      	cmp	r0, #0
   d8c2e:	d159      	bne.n	d8ce4 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
   d8c30:	4639      	mov	r1, r7
   d8c32:	a801      	add	r0, sp, #4
   d8c34:	f7ff fc9a 	bl	d856c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8c38:	e7d6      	b.n	d8be8 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0xd0>
        }

        /*
         * proceed as in normalize()
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,      &Zi  ) ); MOD_MUL( ZZi );
   d8c3a:	4639      	mov	r1, r7
   d8c3c:	a807      	add	r0, sp, #28
   d8c3e:	f7ff fc95 	bl	d856c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8c42:	4604      	mov	r4, r0
   d8c44:	2800      	cmp	r0, #0
   d8c46:	d14d      	bne.n	d8ce4 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->X, &T[i]->X, &ZZi ) ); MOD_MUL( T[i]->X );
   d8c48:	f855 1c04 	ldr.w	r1, [r5, #-4]
   d8c4c:	aa07      	add	r2, sp, #28
   d8c4e:	4608      	mov	r0, r1
   d8c50:	f008 fcb0 	bl	e15b4 <mbedtls_mpi_mul_mpi>
   d8c54:	4604      	mov	r4, r0
   d8c56:	2800      	cmp	r0, #0
   d8c58:	d144      	bne.n	d8ce4 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
   d8c5a:	4639      	mov	r1, r7
   d8c5c:	f855 0c04 	ldr.w	r0, [r5, #-4]
   d8c60:	f7ff fc84 	bl	d856c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8c64:	4604      	mov	r4, r0
   d8c66:	2800      	cmp	r0, #0
   d8c68:	d13c      	bne.n	d8ce4 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &ZZi ) ); MOD_MUL( T[i]->Y );
   d8c6a:	f855 1c04 	ldr.w	r1, [r5, #-4]
   d8c6e:	310c      	adds	r1, #12
   d8c70:	aa07      	add	r2, sp, #28
   d8c72:	4608      	mov	r0, r1
   d8c74:	f008 fc9e 	bl	e15b4 <mbedtls_mpi_mul_mpi>
   d8c78:	4604      	mov	r4, r0
   d8c7a:	bb98      	cbnz	r0, d8ce4 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
   d8c7c:	f855 0c04 	ldr.w	r0, [r5, #-4]
   d8c80:	4639      	mov	r1, r7
   d8c82:	300c      	adds	r0, #12
   d8c84:	f7ff fc72 	bl	d856c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8c88:	4604      	mov	r4, r0
   d8c8a:	bb58      	cbnz	r0, d8ce4 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &Zi  ) ); MOD_MUL( T[i]->Y );
   d8c8c:	f855 1c04 	ldr.w	r1, [r5, #-4]
   d8c90:	310c      	adds	r1, #12
   d8c92:	aa04      	add	r2, sp, #16
   d8c94:	4608      	mov	r0, r1
   d8c96:	f008 fc8d 	bl	e15b4 <mbedtls_mpi_mul_mpi>
   d8c9a:	4604      	mov	r4, r0
   d8c9c:	bb10      	cbnz	r0, d8ce4 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
   d8c9e:	f855 0c04 	ldr.w	r0, [r5, #-4]
   d8ca2:	4639      	mov	r1, r7
   d8ca4:	300c      	adds	r0, #12
   d8ca6:	f7ff fc61 	bl	d856c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8caa:	4604      	mov	r4, r0
   d8cac:	b9d0      	cbnz	r0, d8ce4 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
         * Post-precessing: reclaim some memory by shrinking coordinates
         * - not storing Z (always 1)
         * - shrinking other coordinates, but still keeping the same number of
         *   limbs as P, as otherwise it will too likely be regrown too fast.
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_shrink( &T[i]->X, grp->P.n ) );
   d8cae:	68b9      	ldr	r1, [r7, #8]
   d8cb0:	f855 0c04 	ldr.w	r0, [r5, #-4]
   d8cb4:	f008 f875 	bl	e0da2 <mbedtls_mpi_shrink>
   d8cb8:	4604      	mov	r4, r0
   d8cba:	b998      	cbnz	r0, d8ce4 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shrink( &T[i]->Y, grp->P.n ) );
   d8cbc:	f855 0c04 	ldr.w	r0, [r5, #-4]
   d8cc0:	68b9      	ldr	r1, [r7, #8]
   d8cc2:	300c      	adds	r0, #12
   d8cc4:	f008 f86d 	bl	e0da2 <mbedtls_mpi_shrink>
   d8cc8:	4604      	mov	r4, r0
   d8cca:	b958      	cbnz	r0, d8ce4 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
        mbedtls_mpi_free( &T[i]->Z );
   d8ccc:	f855 0d04 	ldr.w	r0, [r5, #-4]!
   d8cd0:	3018      	adds	r0, #24
   d8cd2:	f008 f82a 	bl	e0d2a <mbedtls_mpi_free>
   d8cd6:	3e0c      	subs	r6, #12

        if( i == 0 )
   d8cd8:	f1ba 0f00 	cmp.w	sl, #0
   d8cdc:	d002      	beq.n	d8ce4 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
    /*
     * u = 1 / (Z_0 * ... * Z_n) mod P
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &u, &c[T_size-1], &grp->P ) );

    for( i = T_size - 1; ; i-- )
   d8cde:	f10a 3aff 	add.w	sl, sl, #4294967295
   d8ce2:	e77a      	b.n	d8bda <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0xc2>
            break;
    }

cleanup:

    mbedtls_mpi_free( &u ); mbedtls_mpi_free( &Zi ); mbedtls_mpi_free( &ZZi );
   d8ce4:	a801      	add	r0, sp, #4
   d8ce6:	f008 f820 	bl	e0d2a <mbedtls_mpi_free>
   d8cea:	a804      	add	r0, sp, #16
   d8cec:	f008 f81d 	bl	e0d2a <mbedtls_mpi_free>
   d8cf0:	a807      	add	r0, sp, #28
   d8cf2:	f008 f81a 	bl	e0d2a <mbedtls_mpi_free>
    for( i = 0; i < T_size; i++ )
   d8cf6:	2500      	movs	r5, #0
        mbedtls_mpi_free( &c[i] );
   d8cf8:	260c      	movs	r6, #12
   d8cfa:	fb06 8005 	mla	r0, r6, r5, r8
    }

cleanup:

    mbedtls_mpi_free( &u ); mbedtls_mpi_free( &Zi ); mbedtls_mpi_free( &ZZi );
    for( i = 0; i < T_size; i++ )
   d8cfe:	3501      	adds	r5, #1
        mbedtls_mpi_free( &c[i] );
   d8d00:	f008 f813 	bl	e0d2a <mbedtls_mpi_free>
    }

cleanup:

    mbedtls_mpi_free( &u ); mbedtls_mpi_free( &Zi ); mbedtls_mpi_free( &ZZi );
    for( i = 0; i < T_size; i++ )
   d8d04:	45a9      	cmp	r9, r5
   d8d06:	d1f8      	bne.n	d8cfa <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1e2>
        mbedtls_mpi_free( &c[i] );
    mbedtls_free( c );
   d8d08:	4640      	mov	r0, r8
   d8d0a:	f00d f9db 	bl	e60c4 <free>

    return( ret );
   d8d0e:	4620      	mov	r0, r4
   d8d10:	e000      	b.n	d8d14 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1fc>
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_normalize_jac_many( grp, T, T_size ) );
#endif

    if( ( c = (mbedtls_mpi *)mbedtls_calloc( T_size, sizeof( mbedtls_mpi ) ) ) == NULL )
        return( MBEDTLS_ERR_ECP_ALLOC_FAILED );
   d8d12:	4802      	ldr	r0, [pc, #8]	; (d8d1c <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x204>)
    for( i = 0; i < T_size; i++ )
        mbedtls_mpi_free( &c[i] );
    mbedtls_free( c );

    return( ret );
}
   d8d14:	b00a      	add	sp, #40	; 0x28
   d8d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8d1a:	bf00      	nop
   d8d1c:	ffffb280 	.word	0xffffb280

000d8d20 <_ZL19ecp_safe_invert_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointh>:
 * "inv" must be 0 (don't invert) or 1 (invert) or the result will be invalid
 */
static int ecp_safe_invert_jac( const mbedtls_ecp_group *grp,
                            mbedtls_ecp_point *Q,
                            unsigned char inv )
{
   d8d20:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d8d22:	460c      	mov	r4, r1
   d8d24:	4605      	mov	r5, r0
    mbedtls_mpi mQY;

    mbedtls_mpi_init( &mQY );

    /* Use the fact that -Q.Y mod P = P - Q.Y unless Q.Y == 0 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mQY, &grp->P, &Q->Y ) );
   d8d26:	340c      	adds	r4, #12
{
    int ret;
    unsigned char nonzero;
    mbedtls_mpi mQY;

    mbedtls_mpi_init( &mQY );
   d8d28:	a801      	add	r0, sp, #4
 * "inv" must be 0 (don't invert) or 1 (invert) or the result will be invalid
 */
static int ecp_safe_invert_jac( const mbedtls_ecp_group *grp,
                            mbedtls_ecp_point *Q,
                            unsigned char inv )
{
   d8d2a:	4616      	mov	r6, r2
    int ret;
    unsigned char nonzero;
    mbedtls_mpi mQY;

    mbedtls_mpi_init( &mQY );
   d8d2c:	f007 fff7 	bl	e0d1e <mbedtls_mpi_init>

    /* Use the fact that -Q.Y mod P = P - Q.Y unless Q.Y == 0 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mQY, &grp->P, &Q->Y ) );
   d8d30:	1d29      	adds	r1, r5, #4
   d8d32:	4622      	mov	r2, r4
   d8d34:	a801      	add	r0, sp, #4
   d8d36:	f008 fbef 	bl	e1518 <mbedtls_mpi_sub_mpi>
   d8d3a:	4605      	mov	r5, r0
   d8d3c:	b968      	cbnz	r0, d8d5a <_ZL19ecp_safe_invert_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointh+0x3a>
    nonzero = mbedtls_mpi_cmp_int( &Q->Y, 0 ) != 0;
   d8d3e:	4601      	mov	r1, r0
   d8d40:	4620      	mov	r0, r4
   d8d42:	f008 fb18 	bl	e1376 <mbedtls_mpi_cmp_int>
    MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &Q->Y, &mQY, inv & nonzero ) );
   d8d46:	a901      	add	r1, sp, #4
   d8d48:	2800      	cmp	r0, #0
   d8d4a:	bf0c      	ite	eq
   d8d4c:	2200      	moveq	r2, #0
   d8d4e:	f006 0201 	andne.w	r2, r6, #1
   d8d52:	4620      	mov	r0, r4
   d8d54:	f008 f88f 	bl	e0e76 <mbedtls_mpi_safe_cond_assign>
   d8d58:	4605      	mov	r5, r0

cleanup:
    mbedtls_mpi_free( &mQY );
   d8d5a:	a801      	add	r0, sp, #4
   d8d5c:	f007 ffe5 	bl	e0d2a <mbedtls_mpi_free>

    return( ret );
}
   d8d60:	4628      	mov	r0, r5
   d8d62:	b004      	add	sp, #16
   d8d64:	bd70      	pop	{r4, r5, r6, pc}

000d8d66 <_ZL15ecp_select_combPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_hh>:
 * See ecp_comb_recode_core() for background
 */
static int ecp_select_comb( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                            const mbedtls_ecp_point T[], unsigned char T_size,
                            unsigned char i )
{
   d8d66:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8d6a:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
   d8d6e:	4680      	mov	r8, r0
   d8d70:	460e      	mov	r6, r1
   d8d72:	469b      	mov	fp, r3
    int ret;
    unsigned char ii, j;

    /* Ignore the "sign" bit and scale down */
    ii =  ( i & 0x7Fu ) >> 1;
   d8d74:	f3c7 0a45 	ubfx	sl, r7, #1, #6
   d8d78:	f102 040c 	add.w	r4, r2, #12
   d8d7c:	2500      	movs	r5, #0

    /* Read the whole table to thwart cache-based timing attacks */
    for( j = 0; j < T_size; j++ )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->X, &T[j].X, j == ii ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->Y, &T[j].Y, j == ii ) );
   d8d7e:	f101 090c 	add.w	r9, r1, #12

    /* Ignore the "sign" bit and scale down */
    ii =  ( i & 0x7Fu ) >> 1;

    /* Read the whole table to thwart cache-based timing attacks */
    for( j = 0; j < T_size; j++ )
   d8d82:	455d      	cmp	r5, fp
   d8d84:	d017      	beq.n	d8db6 <_ZL15ecp_select_combPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_hh+0x50>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->X, &T[j].X, j == ii ) );
   d8d86:	b2eb      	uxtb	r3, r5
   d8d88:	ebca 0203 	rsb	r2, sl, r3
   d8d8c:	4253      	negs	r3, r2
   d8d8e:	4153      	adcs	r3, r2
   d8d90:	461a      	mov	r2, r3
   d8d92:	f1a4 010c 	sub.w	r1, r4, #12
   d8d96:	4630      	mov	r0, r6
   d8d98:	9301      	str	r3, [sp, #4]
   d8d9a:	f008 f86c 	bl	e0e76 <mbedtls_mpi_safe_cond_assign>
   d8d9e:	b990      	cbnz	r0, d8dc6 <_ZL15ecp_select_combPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_hh+0x60>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->Y, &T[j].Y, j == ii ) );
   d8da0:	9b01      	ldr	r3, [sp, #4]
   d8da2:	4621      	mov	r1, r4
   d8da4:	461a      	mov	r2, r3
   d8da6:	4648      	mov	r0, r9
   d8da8:	f008 f865 	bl	e0e76 <mbedtls_mpi_safe_cond_assign>
   d8dac:	3501      	adds	r5, #1
   d8dae:	3424      	adds	r4, #36	; 0x24
   d8db0:	2800      	cmp	r0, #0
   d8db2:	d0e6      	beq.n	d8d82 <_ZL15ecp_select_combPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_hh+0x1c>
   d8db4:	e007      	b.n	d8dc6 <_ZL15ecp_select_combPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_hh+0x60>
    }

    /* Safely invert result if i is "negative" */
    MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, R, i >> 7 ) );
   d8db6:	09fa      	lsrs	r2, r7, #7
   d8db8:	4631      	mov	r1, r6
   d8dba:	4640      	mov	r0, r8

cleanup:
    return( ret );
}
   d8dbc:	b003      	add	sp, #12
   d8dbe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->X, &T[j].X, j == ii ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->Y, &T[j].Y, j == ii ) );
    }

    /* Safely invert result if i is "negative" */
    MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, R, i >> 7 ) );
   d8dc2:	f7ff bfad 	b.w	d8d20 <_ZL19ecp_safe_invert_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointh>

cleanup:
    return( ret );
}
   d8dc6:	b003      	add	sp, #12
   d8dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d8dcc <mbedtls_ecp_grp_id_list>:
 */
const mbedtls_ecp_group_id *mbedtls_ecp_grp_id_list( void )
{
    static int init_done = 0;

    if( ! init_done )
   d8dcc:	4b05      	ldr	r3, [pc, #20]	; (d8de4 <mbedtls_ecp_grp_id_list+0x18>)
   d8dce:	6819      	ldr	r1, [r3, #0]
   d8dd0:	b929      	cbnz	r1, d8dde <mbedtls_ecp_grp_id_list+0x12>

        for( curve_info = mbedtls_ecp_curve_list();
             curve_info->grp_id != MBEDTLS_ECP_DP_NONE;
             curve_info++ )
        {
            ecp_supported_grp_id[i++] = curve_info->grp_id;
   d8dd2:	4a05      	ldr	r2, [pc, #20]	; (d8de8 <mbedtls_ecp_grp_id_list+0x1c>)
   d8dd4:	2003      	movs	r0, #3
   d8dd6:	7010      	strb	r0, [r2, #0]
        }
        ecp_supported_grp_id[i] = MBEDTLS_ECP_DP_NONE;
   d8dd8:	7051      	strb	r1, [r2, #1]

        init_done = 1;
   d8dda:	2201      	movs	r2, #1
   d8ddc:	601a      	str	r2, [r3, #0]
    }

    return( ecp_supported_grp_id );
}
   d8dde:	4802      	ldr	r0, [pc, #8]	; (d8de8 <mbedtls_ecp_grp_id_list+0x1c>)
   d8de0:	4770      	bx	lr
   d8de2:	bf00      	nop
   d8de4:	2003c230 	.word	0x2003c230
   d8de8:	2003c234 	.word	0x2003c234

000d8dec <mbedtls_ecp_curve_info_from_grp_id>:
 */
const mbedtls_ecp_curve_info *mbedtls_ecp_curve_info_from_grp_id( mbedtls_ecp_group_id grp_id )
{
    const mbedtls_ecp_curve_info *curve_info;

    for( curve_info = mbedtls_ecp_curve_list();
   d8dec:	4b05      	ldr	r3, [pc, #20]	; (d8e04 <mbedtls_ecp_curve_info_from_grp_id+0x18>)
         curve_info->grp_id != MBEDTLS_ECP_DP_NONE;
   d8dee:	781a      	ldrb	r2, [r3, #0]
   d8df0:	b11a      	cbz	r2, d8dfa <mbedtls_ecp_curve_info_from_grp_id+0xe>
         curve_info++ )
    {
        if( curve_info->grp_id == grp_id )
   d8df2:	4282      	cmp	r2, r0
   d8df4:	d003      	beq.n	d8dfe <mbedtls_ecp_curve_info_from_grp_id+0x12>
 */
const mbedtls_ecp_curve_info *mbedtls_ecp_curve_info_from_grp_id( mbedtls_ecp_group_id grp_id )
{
    const mbedtls_ecp_curve_info *curve_info;

    for( curve_info = mbedtls_ecp_curve_list();
   d8df6:	330c      	adds	r3, #12
   d8df8:	e7f9      	b.n	d8dee <mbedtls_ecp_curve_info_from_grp_id+0x2>
    {
        if( curve_info->grp_id == grp_id )
            return( curve_info );
    }

    return( NULL );
   d8dfa:	4610      	mov	r0, r2
   d8dfc:	4770      	bx	lr
   d8dfe:	4618      	mov	r0, r3
}
   d8e00:	4770      	bx	lr
   d8e02:	bf00      	nop
   d8e04:	000ecbf4 	.word	0x000ecbf4

000d8e08 <mbedtls_ecp_curve_info_from_tls_id>:
 */
const mbedtls_ecp_curve_info *mbedtls_ecp_curve_info_from_tls_id( uint16_t tls_id )
{
    const mbedtls_ecp_curve_info *curve_info;

    for( curve_info = mbedtls_ecp_curve_list();
   d8e08:	4b05      	ldr	r3, [pc, #20]	; (d8e20 <mbedtls_ecp_curve_info_from_tls_id+0x18>)
         curve_info->grp_id != MBEDTLS_ECP_DP_NONE;
   d8e0a:	781a      	ldrb	r2, [r3, #0]
   d8e0c:	b122      	cbz	r2, d8e18 <mbedtls_ecp_curve_info_from_tls_id+0x10>
         curve_info++ )
    {
        if( curve_info->tls_id == tls_id )
   d8e0e:	885a      	ldrh	r2, [r3, #2]
   d8e10:	4282      	cmp	r2, r0
   d8e12:	d003      	beq.n	d8e1c <mbedtls_ecp_curve_info_from_tls_id+0x14>
 */
const mbedtls_ecp_curve_info *mbedtls_ecp_curve_info_from_tls_id( uint16_t tls_id )
{
    const mbedtls_ecp_curve_info *curve_info;

    for( curve_info = mbedtls_ecp_curve_list();
   d8e14:	330c      	adds	r3, #12
   d8e16:	e7f8      	b.n	d8e0a <mbedtls_ecp_curve_info_from_tls_id+0x2>
    {
        if( curve_info->tls_id == tls_id )
            return( curve_info );
    }

    return( NULL );
   d8e18:	4610      	mov	r0, r2
   d8e1a:	4770      	bx	lr
   d8e1c:	4618      	mov	r0, r3
}
   d8e1e:	4770      	bx	lr
   d8e20:	000ecbf4 	.word	0x000ecbf4

000d8e24 <mbedtls_ecp_point_init>:

/*
 * Initialize (the components of) a point
 */
void mbedtls_ecp_point_init( mbedtls_ecp_point *pt )
{
   d8e24:	b510      	push	{r4, lr}
   d8e26:	4604      	mov	r4, r0
    ECP_VALIDATE( pt != NULL );

    mbedtls_mpi_init( &pt->X );
   d8e28:	f007 ff79 	bl	e0d1e <mbedtls_mpi_init>
    mbedtls_mpi_init( &pt->Y );
   d8e2c:	f104 000c 	add.w	r0, r4, #12
   d8e30:	f007 ff75 	bl	e0d1e <mbedtls_mpi_init>
    mbedtls_mpi_init( &pt->Z );
   d8e34:	f104 0018 	add.w	r0, r4, #24
}
   d8e38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    ECP_VALIDATE( pt != NULL );

    mbedtls_mpi_init( &pt->X );
    mbedtls_mpi_init( &pt->Y );
    mbedtls_mpi_init( &pt->Z );
   d8e3c:	f007 bf6f 	b.w	e0d1e <mbedtls_mpi_init>

000d8e40 <mbedtls_ecp_group_init>:

/*
 * Initialize (the components of) a group
 */
void mbedtls_ecp_group_init( mbedtls_ecp_group *grp )
{
   d8e40:	b538      	push	{r3, r4, r5, lr}
    ECP_VALIDATE( grp != NULL );

    grp->id = MBEDTLS_ECP_DP_NONE;
   d8e42:	2500      	movs	r5, #0

/*
 * Initialize (the components of) a group
 */
void mbedtls_ecp_group_init( mbedtls_ecp_group *grp )
{
   d8e44:	4604      	mov	r4, r0
    ECP_VALIDATE( grp != NULL );

    grp->id = MBEDTLS_ECP_DP_NONE;
   d8e46:	f800 5b04 	strb.w	r5, [r0], #4
    mbedtls_mpi_init( &grp->P );
   d8e4a:	f007 ff68 	bl	e0d1e <mbedtls_mpi_init>
    mbedtls_mpi_init( &grp->A );
   d8e4e:	f104 0010 	add.w	r0, r4, #16
   d8e52:	f007 ff64 	bl	e0d1e <mbedtls_mpi_init>
    mbedtls_mpi_init( &grp->B );
   d8e56:	f104 001c 	add.w	r0, r4, #28
   d8e5a:	f007 ff60 	bl	e0d1e <mbedtls_mpi_init>
    mbedtls_ecp_point_init( &grp->G );
   d8e5e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d8e62:	f7ff ffdf 	bl	d8e24 <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &grp->N );
   d8e66:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   d8e6a:	f007 ff58 	bl	e0d1e <mbedtls_mpi_init>
    grp->pbits = 0;
   d8e6e:	65a5      	str	r5, [r4, #88]	; 0x58
    grp->nbits = 0;
   d8e70:	65e5      	str	r5, [r4, #92]	; 0x5c
    grp->h = 0;
   d8e72:	6625      	str	r5, [r4, #96]	; 0x60
    grp->modp = NULL;
   d8e74:	6665      	str	r5, [r4, #100]	; 0x64
    grp->t_pre = NULL;
   d8e76:	66a5      	str	r5, [r4, #104]	; 0x68
    grp->t_post = NULL;
   d8e78:	66e5      	str	r5, [r4, #108]	; 0x6c
    grp->t_data = NULL;
   d8e7a:	6725      	str	r5, [r4, #112]	; 0x70
    grp->T = NULL;
   d8e7c:	6765      	str	r5, [r4, #116]	; 0x74
    grp->T_size = 0;
   d8e7e:	67a5      	str	r5, [r4, #120]	; 0x78
   d8e80:	bd38      	pop	{r3, r4, r5, pc}

000d8e82 <mbedtls_ecp_keypair_init>:

/*
 * Initialize (the components of) a key pair
 */
void mbedtls_ecp_keypair_init( mbedtls_ecp_keypair *key )
{
   d8e82:	b510      	push	{r4, lr}
   d8e84:	4604      	mov	r4, r0
    ECP_VALIDATE( key != NULL );

    mbedtls_ecp_group_init( &key->grp );
   d8e86:	f7ff ffdb 	bl	d8e40 <mbedtls_ecp_group_init>
    mbedtls_mpi_init( &key->d );
   d8e8a:	f104 007c 	add.w	r0, r4, #124	; 0x7c
   d8e8e:	f007 ff46 	bl	e0d1e <mbedtls_mpi_init>
    mbedtls_ecp_point_init( &key->Q );
   d8e92:	f104 0088 	add.w	r0, r4, #136	; 0x88
}
   d8e96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    ECP_VALIDATE( key != NULL );

    mbedtls_ecp_group_init( &key->grp );
    mbedtls_mpi_init( &key->d );
    mbedtls_ecp_point_init( &key->Q );
   d8e9a:	f7ff bfc3 	b.w	d8e24 <mbedtls_ecp_point_init>

000d8e9e <mbedtls_ecp_point_free>:

/*
 * Unallocate (the components of) a point
 */
void mbedtls_ecp_point_free( mbedtls_ecp_point *pt )
{
   d8e9e:	b510      	push	{r4, lr}
    if( pt == NULL )
   d8ea0:	4604      	mov	r4, r0
   d8ea2:	b158      	cbz	r0, d8ebc <mbedtls_ecp_point_free+0x1e>
        return;

    mbedtls_mpi_free( &( pt->X ) );
   d8ea4:	f007 ff41 	bl	e0d2a <mbedtls_mpi_free>
    mbedtls_mpi_free( &( pt->Y ) );
   d8ea8:	f104 000c 	add.w	r0, r4, #12
   d8eac:	f007 ff3d 	bl	e0d2a <mbedtls_mpi_free>
    mbedtls_mpi_free( &( pt->Z ) );
   d8eb0:	f104 0018 	add.w	r0, r4, #24
}
   d8eb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if( pt == NULL )
        return;

    mbedtls_mpi_free( &( pt->X ) );
    mbedtls_mpi_free( &( pt->Y ) );
    mbedtls_mpi_free( &( pt->Z ) );
   d8eb8:	f007 bf37 	b.w	e0d2a <mbedtls_mpi_free>
   d8ebc:	bd10      	pop	{r4, pc}

000d8ebe <mbedtls_ecp_group_free>:

/*
 * Unallocate (the components of) a group
 */
void mbedtls_ecp_group_free( mbedtls_ecp_group *grp )
{
   d8ebe:	b570      	push	{r4, r5, r6, lr}
    size_t i;

    if( grp == NULL )
   d8ec0:	4604      	mov	r4, r0
   d8ec2:	b358      	cbz	r0, d8f1c <mbedtls_ecp_group_free+0x5e>
        return;

    if( grp->h != 1 )
   d8ec4:	6e03      	ldr	r3, [r0, #96]	; 0x60
   d8ec6:	2b01      	cmp	r3, #1
   d8ec8:	d012      	beq.n	d8ef0 <mbedtls_ecp_group_free+0x32>
    {
        mbedtls_mpi_free( &grp->P );
   d8eca:	3004      	adds	r0, #4
   d8ecc:	f007 ff2d 	bl	e0d2a <mbedtls_mpi_free>
        mbedtls_mpi_free( &grp->A );
   d8ed0:	f104 0010 	add.w	r0, r4, #16
   d8ed4:	f007 ff29 	bl	e0d2a <mbedtls_mpi_free>
        mbedtls_mpi_free( &grp->B );
   d8ed8:	f104 001c 	add.w	r0, r4, #28
   d8edc:	f007 ff25 	bl	e0d2a <mbedtls_mpi_free>
        mbedtls_ecp_point_free( &grp->G );
   d8ee0:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d8ee4:	f7ff ffdb 	bl	d8e9e <mbedtls_ecp_point_free>
        mbedtls_mpi_free( &grp->N );
   d8ee8:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   d8eec:	f007 ff1d 	bl	e0d2a <mbedtls_mpi_free>
    }

    if( grp->T != NULL )
   d8ef0:	6f63      	ldr	r3, [r4, #116]	; 0x74
   d8ef2:	b16b      	cbz	r3, d8f10 <mbedtls_ecp_group_free+0x52>
   d8ef4:	2500      	movs	r5, #0
    {
        for( i = 0; i < grp->T_size; i++ )
            mbedtls_ecp_point_free( &grp->T[i] );
   d8ef6:	2624      	movs	r6, #36	; 0x24
        mbedtls_mpi_free( &grp->N );
    }

    if( grp->T != NULL )
    {
        for( i = 0; i < grp->T_size; i++ )
   d8ef8:	6fa3      	ldr	r3, [r4, #120]	; 0x78
            mbedtls_ecp_point_free( &grp->T[i] );
        mbedtls_free( grp->T );
   d8efa:	6f60      	ldr	r0, [r4, #116]	; 0x74
        mbedtls_mpi_free( &grp->N );
    }

    if( grp->T != NULL )
    {
        for( i = 0; i < grp->T_size; i++ )
   d8efc:	429d      	cmp	r5, r3
   d8efe:	d205      	bcs.n	d8f0c <mbedtls_ecp_group_free+0x4e>
            mbedtls_ecp_point_free( &grp->T[i] );
   d8f00:	fb06 0005 	mla	r0, r6, r5, r0
   d8f04:	f7ff ffcb 	bl	d8e9e <mbedtls_ecp_point_free>
        mbedtls_mpi_free( &grp->N );
    }

    if( grp->T != NULL )
    {
        for( i = 0; i < grp->T_size; i++ )
   d8f08:	3501      	adds	r5, #1
   d8f0a:	e7f5      	b.n	d8ef8 <mbedtls_ecp_group_free+0x3a>
            mbedtls_ecp_point_free( &grp->T[i] );
        mbedtls_free( grp->T );
   d8f0c:	f00d f8da 	bl	e60c4 <free>
    }

    mbedtls_platform_zeroize( grp, sizeof( mbedtls_ecp_group ) );
   d8f10:	4620      	mov	r0, r4
   d8f12:	217c      	movs	r1, #124	; 0x7c
}
   d8f14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        for( i = 0; i < grp->T_size; i++ )
            mbedtls_ecp_point_free( &grp->T[i] );
        mbedtls_free( grp->T );
    }

    mbedtls_platform_zeroize( grp, sizeof( mbedtls_ecp_group ) );
   d8f18:	f002 b970 	b.w	db1fc <mbedtls_platform_zeroize>
   d8f1c:	bd70      	pop	{r4, r5, r6, pc}

000d8f1e <mbedtls_ecp_keypair_free>:

/*
 * Unallocate (the components of) a key pair
 */
void mbedtls_ecp_keypair_free( mbedtls_ecp_keypair *key )
{
   d8f1e:	b510      	push	{r4, lr}
    if( key == NULL )
   d8f20:	4604      	mov	r4, r0
   d8f22:	b158      	cbz	r0, d8f3c <mbedtls_ecp_keypair_free+0x1e>
        return;

    mbedtls_ecp_group_free( &key->grp );
   d8f24:	f7ff ffcb 	bl	d8ebe <mbedtls_ecp_group_free>
    mbedtls_mpi_free( &key->d );
   d8f28:	f104 007c 	add.w	r0, r4, #124	; 0x7c
   d8f2c:	f007 fefd 	bl	e0d2a <mbedtls_mpi_free>
    mbedtls_ecp_point_free( &key->Q );
   d8f30:	f104 0088 	add.w	r0, r4, #136	; 0x88
}
   d8f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if( key == NULL )
        return;

    mbedtls_ecp_group_free( &key->grp );
    mbedtls_mpi_free( &key->d );
    mbedtls_ecp_point_free( &key->Q );
   d8f38:	f7ff bfb1 	b.w	d8e9e <mbedtls_ecp_point_free>
   d8f3c:	bd10      	pop	{r4, pc}

000d8f3e <mbedtls_ecp_copy>:

/*
 * Copy the contents of a point
 */
int mbedtls_ecp_copy( mbedtls_ecp_point *P, const mbedtls_ecp_point *Q )
{
   d8f3e:	b538      	push	{r3, r4, r5, lr}
   d8f40:	4604      	mov	r4, r0
   d8f42:	460d      	mov	r5, r1
    int ret;
    ECP_VALIDATE_RET( P != NULL );
    ECP_VALIDATE_RET( Q != NULL );

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->X, &Q->X ) );
   d8f44:	f007 ff6b 	bl	e0e1e <mbedtls_mpi_copy>
   d8f48:	b970      	cbnz	r0, d8f68 <mbedtls_ecp_copy+0x2a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Y, &Q->Y ) );
   d8f4a:	f105 010c 	add.w	r1, r5, #12
   d8f4e:	f104 000c 	add.w	r0, r4, #12
   d8f52:	f007 ff64 	bl	e0e1e <mbedtls_mpi_copy>
   d8f56:	b938      	cbnz	r0, d8f68 <mbedtls_ecp_copy+0x2a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Z, &Q->Z ) );
   d8f58:	f105 0118 	add.w	r1, r5, #24
   d8f5c:	f104 0018 	add.w	r0, r4, #24

cleanup:
    return( ret );
}
   d8f60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ECP_VALIDATE_RET( P != NULL );
    ECP_VALIDATE_RET( Q != NULL );

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->X, &Q->X ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Y, &Q->Y ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Z, &Q->Z ) );
   d8f64:	f007 bf5b 	b.w	e0e1e <mbedtls_mpi_copy>

cleanup:
    return( ret );
}
   d8f68:	bd38      	pop	{r3, r4, r5, pc}

000d8f6a <mbedtls_ecp_group_copy>:
int mbedtls_ecp_group_copy( mbedtls_ecp_group *dst, const mbedtls_ecp_group *src )
{
    ECP_VALIDATE_RET( dst != NULL );
    ECP_VALIDATE_RET( src != NULL );

    return( mbedtls_ecp_group_load( dst, src->id ) );
   d8f6a:	7809      	ldrb	r1, [r1, #0]
   d8f6c:	f004 bba4 	b.w	dd6b8 <mbedtls_ecp_group_load>

000d8f70 <mbedtls_ecp_set_zero>:

/*
 * Set point to zero
 */
int mbedtls_ecp_set_zero( mbedtls_ecp_point *pt )
{
   d8f70:	b510      	push	{r4, lr}
    int ret;
    ECP_VALIDATE_RET( pt != NULL );

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->X , 1 ) );
   d8f72:	2101      	movs	r1, #1

/*
 * Set point to zero
 */
int mbedtls_ecp_set_zero( mbedtls_ecp_point *pt )
{
   d8f74:	4604      	mov	r4, r0
    int ret;
    ECP_VALIDATE_RET( pt != NULL );

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->X , 1 ) );
   d8f76:	f007 ffb3 	bl	e0ee0 <mbedtls_mpi_lset>
   d8f7a:	b960      	cbnz	r0, d8f96 <mbedtls_ecp_set_zero+0x26>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Y , 1 ) );
   d8f7c:	2101      	movs	r1, #1
   d8f7e:	f104 000c 	add.w	r0, r4, #12
   d8f82:	f007 ffad 	bl	e0ee0 <mbedtls_mpi_lset>
   d8f86:	b930      	cbnz	r0, d8f96 <mbedtls_ecp_set_zero+0x26>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z , 0 ) );
   d8f88:	4601      	mov	r1, r0
   d8f8a:	f104 0018 	add.w	r0, r4, #24

cleanup:
    return( ret );
}
   d8f8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    int ret;
    ECP_VALIDATE_RET( pt != NULL );

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->X , 1 ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Y , 1 ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z , 0 ) );
   d8f92:	f007 bfa5 	b.w	e0ee0 <mbedtls_mpi_lset>

cleanup:
    return( ret );
}
   d8f96:	bd10      	pop	{r4, pc}

000d8f98 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_>:
 *
 * Cost: 1A := 8M + 3S
 */
static int ecp_add_mixed( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                          const mbedtls_ecp_point *P, const mbedtls_ecp_point *Q )
{
   d8f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
#endif /* MBEDTLS_ECP_ADD_MIXED_ALT */

    /*
     * Trivial cases: P == 0 or Q == 0 (case 1)
     */
    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
   d8f9c:	f102 0918 	add.w	r9, r2, #24
 *
 * Cost: 1A := 8M + 3S
 */
static int ecp_add_mixed( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                          const mbedtls_ecp_point *P, const mbedtls_ecp_point *Q )
{
   d8fa0:	b096      	sub	sp, #88	; 0x58
   d8fa2:	4605      	mov	r5, r0
   d8fa4:	460e      	mov	r6, r1
#endif /* MBEDTLS_ECP_ADD_MIXED_ALT */

    /*
     * Trivial cases: P == 0 or Q == 0 (case 1)
     */
    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
   d8fa6:	4648      	mov	r0, r9
   d8fa8:	2100      	movs	r1, #0
 *
 * Cost: 1A := 8M + 3S
 */
static int ecp_add_mixed( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                          const mbedtls_ecp_point *P, const mbedtls_ecp_point *Q )
{
   d8faa:	4690      	mov	r8, r2
   d8fac:	461f      	mov	r7, r3
#endif /* MBEDTLS_ECP_ADD_MIXED_ALT */

    /*
     * Trivial cases: P == 0 or Q == 0 (case 1)
     */
    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
   d8fae:	f008 f9e2 	bl	e1376 <mbedtls_mpi_cmp_int>
   d8fb2:	b908      	cbnz	r0, d8fb8 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x20>
        return( mbedtls_ecp_copy( R, Q ) );
   d8fb4:	4639      	mov	r1, r7
   d8fb6:	e008      	b.n	d8fca <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x32>

    if( Q->Z.p != NULL && mbedtls_mpi_cmp_int( &Q->Z, 0 ) == 0 )
   d8fb8:	6a3b      	ldr	r3, [r7, #32]
   d8fba:	b153      	cbz	r3, d8fd2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x3a>
   d8fbc:	2100      	movs	r1, #0
   d8fbe:	f107 0018 	add.w	r0, r7, #24
   d8fc2:	f008 f9d8 	bl	e1376 <mbedtls_mpi_cmp_int>
   d8fc6:	b920      	cbnz	r0, d8fd2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x3a>
        return( mbedtls_ecp_copy( R, P ) );
   d8fc8:	4641      	mov	r1, r8
   d8fca:	4630      	mov	r0, r6
   d8fcc:	f7ff ffb7 	bl	d8f3e <mbedtls_ecp_copy>
   d8fd0:	e1bd      	b.n	d934e <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x3b6>

    /*
     * Make sure Q coordinates are normalized
     */
    if( Q->Z.p != NULL && mbedtls_mpi_cmp_int( &Q->Z, 1 ) != 0 )
   d8fd2:	6a3b      	ldr	r3, [r7, #32]
   d8fd4:	b13b      	cbz	r3, d8fe6 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x4e>
   d8fd6:	2101      	movs	r1, #1
   d8fd8:	f107 0018 	add.w	r0, r7, #24
   d8fdc:	f008 f9cb 	bl	e1376 <mbedtls_mpi_cmp_int>
   d8fe0:	2800      	cmp	r0, #0
   d8fe2:	f040 8095 	bne.w	d9110 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x178>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 ); mbedtls_mpi_init( &T3 ); mbedtls_mpi_init( &T4 );
   d8fe6:	a801      	add	r0, sp, #4
   d8fe8:	f007 fe99 	bl	e0d1e <mbedtls_mpi_init>
   d8fec:	a804      	add	r0, sp, #16
   d8fee:	f007 fe96 	bl	e0d1e <mbedtls_mpi_init>
   d8ff2:	a807      	add	r0, sp, #28
   d8ff4:	f007 fe93 	bl	e0d1e <mbedtls_mpi_init>
   d8ff8:	a80a      	add	r0, sp, #40	; 0x28
   d8ffa:	f007 fe90 	bl	e0d1e <mbedtls_mpi_init>
    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
   d8ffe:	a80d      	add	r0, sp, #52	; 0x34
   d9000:	f007 fe8d 	bl	e0d1e <mbedtls_mpi_init>
   d9004:	a810      	add	r0, sp, #64	; 0x40
   d9006:	f007 fe8a 	bl	e0d1e <mbedtls_mpi_init>
   d900a:	a813      	add	r0, sp, #76	; 0x4c
   d900c:	f007 fe87 	bl	e0d1e <mbedtls_mpi_init>

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &P->Z,  &P->Z ) );  MOD_MUL( T1 );
   d9010:	464a      	mov	r2, r9
   d9012:	4649      	mov	r1, r9
   d9014:	a801      	add	r0, sp, #4
   d9016:	f008 facd 	bl	e15b4 <mbedtls_mpi_mul_mpi>
   d901a:	4604      	mov	r4, r0
   d901c:	2800      	cmp	r0, #0
   d901e:	d160      	bne.n	d90e2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
   d9020:	4629      	mov	r1, r5
   d9022:	a801      	add	r0, sp, #4
   d9024:	f7ff faa2 	bl	d856c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d9028:	4604      	mov	r4, r0
   d902a:	2800      	cmp	r0, #0
   d902c:	d159      	bne.n	d90e2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T1,    &P->Z ) );  MOD_MUL( T2 );
   d902e:	464a      	mov	r2, r9
   d9030:	a901      	add	r1, sp, #4
   d9032:	a804      	add	r0, sp, #16
   d9034:	f008 fabe 	bl	e15b4 <mbedtls_mpi_mul_mpi>
   d9038:	4604      	mov	r4, r0
   d903a:	2800      	cmp	r0, #0
   d903c:	d151      	bne.n	d90e2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
   d903e:	4629      	mov	r1, r5
   d9040:	a804      	add	r0, sp, #16
   d9042:	f7ff fa93 	bl	d856c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d9046:	4604      	mov	r4, r0
   d9048:	2800      	cmp	r0, #0
   d904a:	d14a      	bne.n	d90e2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &T1,    &Q->X ) );  MOD_MUL( T1 );
   d904c:	a901      	add	r1, sp, #4
   d904e:	463a      	mov	r2, r7
   d9050:	4608      	mov	r0, r1
   d9052:	f008 faaf 	bl	e15b4 <mbedtls_mpi_mul_mpi>
   d9056:	4604      	mov	r4, r0
   d9058:	2800      	cmp	r0, #0
   d905a:	d142      	bne.n	d90e2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
   d905c:	4629      	mov	r1, r5
   d905e:	a801      	add	r0, sp, #4
   d9060:	f7ff fa84 	bl	d856c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d9064:	4604      	mov	r4, r0
   d9066:	2800      	cmp	r0, #0
   d9068:	d13b      	bne.n	d90e2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T2,    &Q->Y ) );  MOD_MUL( T2 );
   d906a:	a904      	add	r1, sp, #16
   d906c:	f107 020c 	add.w	r2, r7, #12
   d9070:	4608      	mov	r0, r1
   d9072:	f008 fa9f 	bl	e15b4 <mbedtls_mpi_mul_mpi>
   d9076:	4604      	mov	r4, r0
   d9078:	2800      	cmp	r0, #0
   d907a:	d132      	bne.n	d90e2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
   d907c:	4629      	mov	r1, r5
   d907e:	a804      	add	r0, sp, #16
   d9080:	f7ff fa74 	bl	d856c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d9084:	4604      	mov	r4, r0
   d9086:	bb60      	cbnz	r0, d90e2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T1,  &T1,    &P->X ) );  MOD_SUB( T1 );
   d9088:	a901      	add	r1, sp, #4
   d908a:	4642      	mov	r2, r8
   d908c:	4608      	mov	r0, r1
   d908e:	f008 fa43 	bl	e1518 <mbedtls_mpi_sub_mpi>
   d9092:	4604      	mov	r4, r0
   d9094:	bb28      	cbnz	r0, d90e2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
   d9096:	1d2f      	adds	r7, r5, #4
   d9098:	9b01      	ldr	r3, [sp, #4]
   d909a:	2b00      	cmp	r3, #0
   d909c:	da05      	bge.n	d90aa <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x112>
   d909e:	2100      	movs	r1, #0
   d90a0:	a801      	add	r0, sp, #4
   d90a2:	f008 f968 	bl	e1376 <mbedtls_mpi_cmp_int>
   d90a6:	2800      	cmp	r0, #0
   d90a8:	d134      	bne.n	d9114 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x17c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T2,  &T2,    &P->Y ) );  MOD_SUB( T2 );
   d90aa:	a904      	add	r1, sp, #16
   d90ac:	f108 0a0c 	add.w	sl, r8, #12
   d90b0:	4652      	mov	r2, sl
   d90b2:	4608      	mov	r0, r1
   d90b4:	f008 fa30 	bl	e1518 <mbedtls_mpi_sub_mpi>
   d90b8:	4604      	mov	r4, r0
   d90ba:	b990      	cbnz	r0, d90e2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
   d90bc:	1d2f      	adds	r7, r5, #4
   d90be:	9b04      	ldr	r3, [sp, #16]
   d90c0:	2b00      	cmp	r3, #0
   d90c2:	db30      	blt.n	d9126 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x18e>

    /* Special cases (2) and (3) */
    if( mbedtls_mpi_cmp_int( &T1, 0 ) == 0 )
   d90c4:	2100      	movs	r1, #0
   d90c6:	a801      	add	r0, sp, #4
   d90c8:	f008 f955 	bl	e1376 <mbedtls_mpi_cmp_int>
   d90cc:	4601      	mov	r1, r0
   d90ce:	2800      	cmp	r0, #0
   d90d0:	d038      	beq.n	d9144 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x1ac>
            ret = mbedtls_ecp_set_zero( R );
            goto cleanup;
        }
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Z,   &P->Z,  &T1   ) );  MOD_MUL( Z  );
   d90d2:	aa01      	add	r2, sp, #4
   d90d4:	4649      	mov	r1, r9
   d90d6:	a813      	add	r0, sp, #76	; 0x4c
   d90d8:	f008 fa6c 	bl	e15b4 <mbedtls_mpi_mul_mpi>
   d90dc:	4604      	mov	r4, r0
   d90de:	2800      	cmp	r0, #0
   d90e0:	d03e      	beq.n	d9160 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x1c8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Y, &Y ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &Z ) );

cleanup:

    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 ); mbedtls_mpi_free( &T3 ); mbedtls_mpi_free( &T4 );
   d90e2:	a801      	add	r0, sp, #4
   d90e4:	f007 fe21 	bl	e0d2a <mbedtls_mpi_free>
   d90e8:	a804      	add	r0, sp, #16
   d90ea:	f007 fe1e 	bl	e0d2a <mbedtls_mpi_free>
   d90ee:	a807      	add	r0, sp, #28
   d90f0:	f007 fe1b 	bl	e0d2a <mbedtls_mpi_free>
   d90f4:	a80a      	add	r0, sp, #40	; 0x28
   d90f6:	f007 fe18 	bl	e0d2a <mbedtls_mpi_free>
    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
   d90fa:	a80d      	add	r0, sp, #52	; 0x34
   d90fc:	f007 fe15 	bl	e0d2a <mbedtls_mpi_free>
   d9100:	a810      	add	r0, sp, #64	; 0x40
   d9102:	f007 fe12 	bl	e0d2a <mbedtls_mpi_free>
   d9106:	a813      	add	r0, sp, #76	; 0x4c
   d9108:	f007 fe0f 	bl	e0d2a <mbedtls_mpi_free>

    return( ret );
   d910c:	4620      	mov	r0, r4
   d910e:	e11e      	b.n	d934e <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x3b6>

    /*
     * Make sure Q coordinates are normalized
     */
    if( Q->Z.p != NULL && mbedtls_mpi_cmp_int( &Q->Z, 1 ) != 0 )
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   d9110:	4890      	ldr	r0, [pc, #576]	; (d9354 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x3bc>)
   d9112:	e11c      	b.n	d934e <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x3b6>

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &P->Z,  &P->Z ) );  MOD_MUL( T1 );
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T1,    &P->Z ) );  MOD_MUL( T2 );
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &T1,    &Q->X ) );  MOD_MUL( T1 );
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T2,    &Q->Y ) );  MOD_MUL( T2 );
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T1,  &T1,    &P->X ) );  MOD_SUB( T1 );
   d9114:	a901      	add	r1, sp, #4
   d9116:	463a      	mov	r2, r7
   d9118:	4608      	mov	r0, r1
   d911a:	f008 f9dc 	bl	e14d6 <mbedtls_mpi_add_mpi>
   d911e:	4604      	mov	r4, r0
   d9120:	2800      	cmp	r0, #0
   d9122:	d0b9      	beq.n	d9098 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x100>
   d9124:	e7dd      	b.n	d90e2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T2,  &T2,    &P->Y ) );  MOD_SUB( T2 );
   d9126:	2100      	movs	r1, #0
   d9128:	a804      	add	r0, sp, #16
   d912a:	f008 f924 	bl	e1376 <mbedtls_mpi_cmp_int>
   d912e:	2800      	cmp	r0, #0
   d9130:	d0c8      	beq.n	d90c4 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x12c>
   d9132:	a904      	add	r1, sp, #16
   d9134:	463a      	mov	r2, r7
   d9136:	4608      	mov	r0, r1
   d9138:	f008 f9cd 	bl	e14d6 <mbedtls_mpi_add_mpi>
   d913c:	4604      	mov	r4, r0
   d913e:	2800      	cmp	r0, #0
   d9140:	d0bd      	beq.n	d90be <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x126>
   d9142:	e7ce      	b.n	d90e2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>

    /* Special cases (2) and (3) */
    if( mbedtls_mpi_cmp_int( &T1, 0 ) == 0 )
    {
        if( mbedtls_mpi_cmp_int( &T2, 0 ) == 0 )
   d9144:	a804      	add	r0, sp, #16
   d9146:	f008 f916 	bl	e1376 <mbedtls_mpi_cmp_int>
   d914a:	b928      	cbnz	r0, d9158 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x1c0>
        {
            ret = ecp_double_jac( grp, R, P );
   d914c:	4642      	mov	r2, r8
   d914e:	4631      	mov	r1, r6
   d9150:	4628      	mov	r0, r5
   d9152:	f7ff fa4f 	bl	d85f4 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_>
   d9156:	e0ce      	b.n	d92f6 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x35e>
            goto cleanup;
        }
        else
        {
            ret = mbedtls_ecp_set_zero( R );
   d9158:	4630      	mov	r0, r6
   d915a:	f7ff ff09 	bl	d8f70 <mbedtls_ecp_set_zero>
   d915e:	e0ca      	b.n	d92f6 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x35e>
            goto cleanup;
        }
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Z,   &P->Z,  &T1   ) );  MOD_MUL( Z  );
   d9160:	4629      	mov	r1, r5
   d9162:	a813      	add	r0, sp, #76	; 0x4c
   d9164:	f7ff fa02 	bl	d856c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d9168:	4604      	mov	r4, r0
   d916a:	2800      	cmp	r0, #0
   d916c:	d1b9      	bne.n	d90e2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T1,    &T1   ) );  MOD_MUL( T3 );
   d916e:	aa01      	add	r2, sp, #4
   d9170:	4611      	mov	r1, r2
   d9172:	a807      	add	r0, sp, #28
   d9174:	f008 fa1e 	bl	e15b4 <mbedtls_mpi_mul_mpi>
   d9178:	4604      	mov	r4, r0
   d917a:	2800      	cmp	r0, #0
   d917c:	d1b1      	bne.n	d90e2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
   d917e:	4629      	mov	r1, r5
   d9180:	a807      	add	r0, sp, #28
   d9182:	f7ff f9f3 	bl	d856c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d9186:	4604      	mov	r4, r0
   d9188:	2800      	cmp	r0, #0
   d918a:	d1aa      	bne.n	d90e2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T3,    &T1   ) );  MOD_MUL( T4 );
   d918c:	aa01      	add	r2, sp, #4
   d918e:	a907      	add	r1, sp, #28
   d9190:	a80a      	add	r0, sp, #40	; 0x28
   d9192:	f008 fa0f 	bl	e15b4 <mbedtls_mpi_mul_mpi>
   d9196:	4604      	mov	r4, r0
   d9198:	2800      	cmp	r0, #0
   d919a:	d1a2      	bne.n	d90e2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
   d919c:	4629      	mov	r1, r5
   d919e:	a80a      	add	r0, sp, #40	; 0x28
   d91a0:	f7ff f9e4 	bl	d856c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d91a4:	4604      	mov	r4, r0
   d91a6:	2800      	cmp	r0, #0
   d91a8:	d19b      	bne.n	d90e2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &P->X ) );  MOD_MUL( T3 );
   d91aa:	a907      	add	r1, sp, #28
   d91ac:	4642      	mov	r2, r8
   d91ae:	4608      	mov	r0, r1
   d91b0:	f008 fa00 	bl	e15b4 <mbedtls_mpi_mul_mpi>
   d91b4:	4604      	mov	r4, r0
   d91b6:	2800      	cmp	r0, #0
   d91b8:	d193      	bne.n	d90e2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
   d91ba:	4629      	mov	r1, r5
   d91bc:	a807      	add	r0, sp, #28
   d91be:	f7ff f9d5 	bl	d856c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d91c2:	4604      	mov	r4, r0
   d91c4:	2800      	cmp	r0, #0
   d91c6:	d18c      	bne.n	d90e2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1,  &T3,    2     ) );  MOD_ADD( T1 );
   d91c8:	2202      	movs	r2, #2
   d91ca:	a907      	add	r1, sp, #28
   d91cc:	a801      	add	r0, sp, #4
   d91ce:	f008 fa60 	bl	e1692 <mbedtls_mpi_mul_int>
   d91d2:	4604      	mov	r4, r0
   d91d4:	2800      	cmp	r0, #0
   d91d6:	d184      	bne.n	d90e2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
   d91d8:	1d2f      	adds	r7, r5, #4
   d91da:	4639      	mov	r1, r7
   d91dc:	a801      	add	r0, sp, #4
   d91de:	f008 f885 	bl	e12ec <mbedtls_mpi_cmp_mpi>
   d91e2:	2800      	cmp	r0, #0
   d91e4:	db08      	blt.n	d91f8 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x260>
   d91e6:	a901      	add	r1, sp, #4
   d91e8:	463a      	mov	r2, r7
   d91ea:	4608      	mov	r0, r1
   d91ec:	f008 f933 	bl	e1456 <mbedtls_mpi_sub_abs>
   d91f0:	4604      	mov	r4, r0
   d91f2:	2800      	cmp	r0, #0
   d91f4:	d0f1      	beq.n	d91da <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x242>
   d91f6:	e774      	b.n	d90e2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &X,   &T2,    &T2   ) );  MOD_MUL( X  );
   d91f8:	aa04      	add	r2, sp, #16
   d91fa:	4611      	mov	r1, r2
   d91fc:	a80d      	add	r0, sp, #52	; 0x34
   d91fe:	f008 f9d9 	bl	e15b4 <mbedtls_mpi_mul_mpi>
   d9202:	4604      	mov	r4, r0
   d9204:	2800      	cmp	r0, #0
   d9206:	f47f af6c 	bne.w	d90e2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
   d920a:	4629      	mov	r1, r5
   d920c:	a80d      	add	r0, sp, #52	; 0x34
   d920e:	f7ff f9ad 	bl	d856c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d9212:	4604      	mov	r4, r0
   d9214:	2800      	cmp	r0, #0
   d9216:	f47f af64 	bne.w	d90e2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T1   ) );  MOD_SUB( X  );
   d921a:	a90d      	add	r1, sp, #52	; 0x34
   d921c:	aa01      	add	r2, sp, #4
   d921e:	4608      	mov	r0, r1
   d9220:	f008 f97a 	bl	e1518 <mbedtls_mpi_sub_mpi>
   d9224:	4604      	mov	r4, r0
   d9226:	2800      	cmp	r0, #0
   d9228:	f47f af5b 	bne.w	d90e2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
   d922c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d922e:	2b00      	cmp	r3, #0
   d9230:	da05      	bge.n	d923e <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x2a6>
   d9232:	2100      	movs	r1, #0
   d9234:	a80d      	add	r0, sp, #52	; 0x34
   d9236:	f008 f89e 	bl	e1376 <mbedtls_mpi_cmp_int>
   d923a:	2800      	cmp	r0, #0
   d923c:	d15d      	bne.n	d92fa <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x362>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T4   ) );  MOD_SUB( X  );
   d923e:	a90d      	add	r1, sp, #52	; 0x34
   d9240:	aa0a      	add	r2, sp, #40	; 0x28
   d9242:	4608      	mov	r0, r1
   d9244:	f008 f968 	bl	e1518 <mbedtls_mpi_sub_mpi>
   d9248:	4604      	mov	r4, r0
   d924a:	2800      	cmp	r0, #0
   d924c:	f47f af49 	bne.w	d90e2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
   d9250:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d9252:	2b00      	cmp	r3, #0
   d9254:	db57      	blt.n	d9306 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x36e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T3,  &T3,    &X    ) );  MOD_SUB( T3 );
   d9256:	a907      	add	r1, sp, #28
   d9258:	aa0d      	add	r2, sp, #52	; 0x34
   d925a:	4608      	mov	r0, r1
   d925c:	f008 f95c 	bl	e1518 <mbedtls_mpi_sub_mpi>
   d9260:	4604      	mov	r4, r0
   d9262:	2800      	cmp	r0, #0
   d9264:	f47f af3d 	bne.w	d90e2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
   d9268:	9b07      	ldr	r3, [sp, #28]
   d926a:	2b00      	cmp	r3, #0
   d926c:	db57      	blt.n	d931e <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x386>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &T2   ) );  MOD_MUL( T3 );
   d926e:	a907      	add	r1, sp, #28
   d9270:	aa04      	add	r2, sp, #16
   d9272:	4608      	mov	r0, r1
   d9274:	f008 f99e 	bl	e15b4 <mbedtls_mpi_mul_mpi>
   d9278:	4604      	mov	r4, r0
   d927a:	2800      	cmp	r0, #0
   d927c:	f47f af31 	bne.w	d90e2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
   d9280:	4629      	mov	r1, r5
   d9282:	a807      	add	r0, sp, #28
   d9284:	f7ff f972 	bl	d856c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d9288:	4604      	mov	r4, r0
   d928a:	2800      	cmp	r0, #0
   d928c:	f47f af29 	bne.w	d90e2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T4,    &P->Y ) );  MOD_MUL( T4 );
   d9290:	a90a      	add	r1, sp, #40	; 0x28
   d9292:	4652      	mov	r2, sl
   d9294:	4608      	mov	r0, r1
   d9296:	f008 f98d 	bl	e15b4 <mbedtls_mpi_mul_mpi>
   d929a:	4604      	mov	r4, r0
   d929c:	2800      	cmp	r0, #0
   d929e:	f47f af20 	bne.w	d90e2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
   d92a2:	4629      	mov	r1, r5
   d92a4:	a80a      	add	r0, sp, #40	; 0x28
   d92a6:	f7ff f961 	bl	d856c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d92aa:	4604      	mov	r4, r0
   d92ac:	2800      	cmp	r0, #0
   d92ae:	f47f af18 	bne.w	d90e2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &Y,   &T3,    &T4   ) );  MOD_SUB( Y  );
   d92b2:	aa0a      	add	r2, sp, #40	; 0x28
   d92b4:	a907      	add	r1, sp, #28
   d92b6:	a810      	add	r0, sp, #64	; 0x40
   d92b8:	f008 f92e 	bl	e1518 <mbedtls_mpi_sub_mpi>
   d92bc:	4604      	mov	r4, r0
   d92be:	2800      	cmp	r0, #0
   d92c0:	f47f af0f 	bne.w	d90e2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
   d92c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d92c6:	2b00      	cmp	r3, #0
   d92c8:	db35      	blt.n	d9336 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x39e>

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->X, &X ) );
   d92ca:	a90d      	add	r1, sp, #52	; 0x34
   d92cc:	4630      	mov	r0, r6
   d92ce:	f007 fda6 	bl	e0e1e <mbedtls_mpi_copy>
   d92d2:	4604      	mov	r4, r0
   d92d4:	2800      	cmp	r0, #0
   d92d6:	f47f af04 	bne.w	d90e2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Y, &Y ) );
   d92da:	a910      	add	r1, sp, #64	; 0x40
   d92dc:	f106 000c 	add.w	r0, r6, #12
   d92e0:	f007 fd9d 	bl	e0e1e <mbedtls_mpi_copy>
   d92e4:	4604      	mov	r4, r0
   d92e6:	2800      	cmp	r0, #0
   d92e8:	f47f aefb 	bne.w	d90e2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &Z ) );
   d92ec:	a913      	add	r1, sp, #76	; 0x4c
   d92ee:	f106 0018 	add.w	r0, r6, #24
   d92f2:	f007 fd94 	bl	e0e1e <mbedtls_mpi_copy>
   d92f6:	4604      	mov	r4, r0
   d92f8:	e6f3      	b.n	d90e2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T1,    &T1   ) );  MOD_MUL( T3 );
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T3,    &T1   ) );  MOD_MUL( T4 );
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &P->X ) );  MOD_MUL( T3 );
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1,  &T3,    2     ) );  MOD_ADD( T1 );
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &X,   &T2,    &T2   ) );  MOD_MUL( X  );
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T1   ) );  MOD_SUB( X  );
   d92fa:	a90d      	add	r1, sp, #52	; 0x34
   d92fc:	463a      	mov	r2, r7
   d92fe:	4608      	mov	r0, r1
   d9300:	f008 f8e9 	bl	e14d6 <mbedtls_mpi_add_mpi>
   d9304:	e78e      	b.n	d9224 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x28c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T4   ) );  MOD_SUB( X  );
   d9306:	2100      	movs	r1, #0
   d9308:	a80d      	add	r0, sp, #52	; 0x34
   d930a:	f008 f834 	bl	e1376 <mbedtls_mpi_cmp_int>
   d930e:	2800      	cmp	r0, #0
   d9310:	d0a1      	beq.n	d9256 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x2be>
   d9312:	a90d      	add	r1, sp, #52	; 0x34
   d9314:	463a      	mov	r2, r7
   d9316:	4608      	mov	r0, r1
   d9318:	f008 f8dd 	bl	e14d6 <mbedtls_mpi_add_mpi>
   d931c:	e794      	b.n	d9248 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x2b0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T3,  &T3,    &X    ) );  MOD_SUB( T3 );
   d931e:	2100      	movs	r1, #0
   d9320:	a807      	add	r0, sp, #28
   d9322:	f008 f828 	bl	e1376 <mbedtls_mpi_cmp_int>
   d9326:	2800      	cmp	r0, #0
   d9328:	d0a1      	beq.n	d926e <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x2d6>
   d932a:	a907      	add	r1, sp, #28
   d932c:	463a      	mov	r2, r7
   d932e:	4608      	mov	r0, r1
   d9330:	f008 f8d1 	bl	e14d6 <mbedtls_mpi_add_mpi>
   d9334:	e794      	b.n	d9260 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x2c8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &T2   ) );  MOD_MUL( T3 );
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T4,    &P->Y ) );  MOD_MUL( T4 );
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &Y,   &T3,    &T4   ) );  MOD_SUB( Y  );
   d9336:	2100      	movs	r1, #0
   d9338:	a810      	add	r0, sp, #64	; 0x40
   d933a:	f008 f81c 	bl	e1376 <mbedtls_mpi_cmp_int>
   d933e:	2800      	cmp	r0, #0
   d9340:	d0c3      	beq.n	d92ca <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x332>
   d9342:	a910      	add	r1, sp, #64	; 0x40
   d9344:	463a      	mov	r2, r7
   d9346:	4608      	mov	r0, r1
   d9348:	f008 f8c5 	bl	e14d6 <mbedtls_mpi_add_mpi>
   d934c:	e7b6      	b.n	d92bc <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x324>

    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 ); mbedtls_mpi_free( &T3 ); mbedtls_mpi_free( &T4 );
    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );

    return( ret );
}
   d934e:	b016      	add	sp, #88	; 0x58
   d9350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9354:	ffffb080 	.word	0xffffb080

000d9358 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6>:
 * once the auxiliary table has been pre-computed.
 *
 * Scalar recoding may use a parity trick that makes us compute -m * P,
 * if that is the case we'll need to recover m * P at the end.
 */
static int ecp_mul_comb_after_precomp( const mbedtls_ecp_group *grp,
   d9358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d935c:	b0d9      	sub	sp, #356	; 0x164
                                   unsigned char *parity_trick )
{
    int ret;
    mbedtls_mpi M, mm;

    mbedtls_mpi_init( &M );
   d935e:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
 * once the auxiliary table has been pre-computed.
 *
 * Scalar recoding may use a parity trick that makes us compute -m * P,
 * if that is the case we'll need to recover m * P at the end.
 */
static int ecp_mul_comb_after_precomp( const mbedtls_ecp_group *grp,
   d9362:	4605      	mov	r5, r0
   d9364:	9302      	str	r3, [sp, #8]
                                   unsigned char *parity_trick )
{
    int ret;
    mbedtls_mpi M, mm;

    mbedtls_mpi_init( &M );
   d9366:	4658      	mov	r0, fp
 * once the auxiliary table has been pre-computed.
 *
 * Scalar recoding may use a parity trick that makes us compute -m * P,
 * if that is the case we'll need to recover m * P at the end.
 */
static int ecp_mul_comb_after_precomp( const mbedtls_ecp_group *grp,
   d9368:	f89d 3188 	ldrb.w	r3, [sp, #392]	; 0x188
   d936c:	9303      	str	r3, [sp, #12]
   d936e:	460e      	mov	r6, r1
   d9370:	4617      	mov	r7, r2
   d9372:	f89d a18c 	ldrb.w	sl, [sp, #396]	; 0x18c

    mbedtls_mpi_init( &M );
    mbedtls_mpi_init( &mm );

    /* N is always odd (see above), just make extra sure */
    if( mbedtls_mpi_get_bit( &grp->N, 0 ) != 1 )
   d9376:	f105 094c 	add.w	r9, r5, #76	; 0x4c
                                   unsigned char *parity_trick )
{
    int ret;
    mbedtls_mpi M, mm;

    mbedtls_mpi_init( &M );
   d937a:	f007 fcd0 	bl	e0d1e <mbedtls_mpi_init>
    mbedtls_mpi_init( &mm );
   d937e:	a80d      	add	r0, sp, #52	; 0x34
   d9380:	f007 fccd 	bl	e0d1e <mbedtls_mpi_init>

    /* N is always odd (see above), just make extra sure */
    if( mbedtls_mpi_get_bit( &grp->N, 0 ) != 1 )
   d9384:	2100      	movs	r1, #0
   d9386:	4648      	mov	r0, r9
   d9388:	f007 fdc6 	bl	e0f18 <mbedtls_mpi_get_bit>
   d938c:	2801      	cmp	r0, #1
   d938e:	d178      	bne.n	d9482 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x12a>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    /* do we need the parity trick? */
    *parity_trick = ( mbedtls_mpi_get_bit( m, 0 ) == 0 );
   d9390:	2100      	movs	r1, #0
   d9392:	4638      	mov	r0, r7
   d9394:	f007 fdc0 	bl	e0f18 <mbedtls_mpi_get_bit>

    /* execute parity fix in constant time */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &M, m ) );
   d9398:	4639      	mov	r1, r7
    /* N is always odd (see above), just make extra sure */
    if( mbedtls_mpi_get_bit( &grp->N, 0 ) != 1 )
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    /* do we need the parity trick? */
    *parity_trick = ( mbedtls_mpi_get_bit( m, 0 ) == 0 );
   d939a:	fab0 f880 	clz	r8, r0

    /* execute parity fix in constant time */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &M, m ) );
   d939e:	4658      	mov	r0, fp
   d93a0:	f007 fd3d 	bl	e0e1e <mbedtls_mpi_copy>
    /* N is always odd (see above), just make extra sure */
    if( mbedtls_mpi_get_bit( &grp->N, 0 ) != 1 )
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    /* do we need the parity trick? */
    *parity_trick = ( mbedtls_mpi_get_bit( m, 0 ) == 0 );
   d93a4:	ea4f 1858 	mov.w	r8, r8, lsr #5

    /* execute parity fix in constant time */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &M, m ) );
   d93a8:	4604      	mov	r4, r0
   d93aa:	2800      	cmp	r0, #0
   d93ac:	d15f      	bne.n	d946e <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x116>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mm, &grp->N, m ) );
   d93ae:	463a      	mov	r2, r7
   d93b0:	4649      	mov	r1, r9
   d93b2:	a80d      	add	r0, sp, #52	; 0x34
   d93b4:	f008 f8b0 	bl	e1518 <mbedtls_mpi_sub_mpi>
   d93b8:	4604      	mov	r4, r0
   d93ba:	2800      	cmp	r0, #0
   d93bc:	d157      	bne.n	d946e <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x116>
    MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &M, &mm, *parity_trick ) );
   d93be:	4642      	mov	r2, r8
   d93c0:	a90d      	add	r1, sp, #52	; 0x34
   d93c2:	4658      	mov	r0, fp
   d93c4:	f007 fd57 	bl	e0e76 <mbedtls_mpi_safe_cond_assign>
   d93c8:	4604      	mov	r4, r0
   d93ca:	2800      	cmp	r0, #0
   d93cc:	d14f      	bne.n	d946e <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x116>
                                  unsigned char w, const mbedtls_mpi *m )
{
    size_t i, j;
    unsigned char c, cc, adjust;

    memset( x, 0, d+1 );
   d93ce:	9b64      	ldr	r3, [sp, #400]	; 0x190
   d93d0:	f10d 0958 	add.w	r9, sp, #88	; 0x58
   d93d4:	1c5a      	adds	r2, r3, #1
   d93d6:	4601      	mov	r1, r0
   d93d8:	4648      	mov	r0, r9
   d93da:	f010 fb92 	bl	e9b02 <memset>

    /* First get the classical comb values (except for x_d = 0) */
    for( i = 0; i < d; i++ )
   d93de:	4627      	mov	r7, r4
        for( j = 0; j < w; j++ )
            x[i] |= mbedtls_mpi_get_bit( m, i + d * j ) << j;
   d93e0:	465b      	mov	r3, fp
    unsigned char c, cc, adjust;

    memset( x, 0, d+1 );

    /* First get the classical comb values (except for x_d = 0) */
    for( i = 0; i < d; i++ )
   d93e2:	9a64      	ldr	r2, [sp, #400]	; 0x190
   d93e4:	42ba      	cmp	r2, r7
   d93e6:	d01a      	beq.n	d941e <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0xc6>
   d93e8:	f04f 0b00 	mov.w	fp, #0
   d93ec:	463a      	mov	r2, r7
        for( j = 0; j < w; j++ )
   d93ee:	45da      	cmp	sl, fp
   d93f0:	d913      	bls.n	d941a <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0xc2>
            x[i] |= mbedtls_mpi_get_bit( m, i + d * j ) << j;
   d93f2:	4611      	mov	r1, r2
   d93f4:	4618      	mov	r0, r3
   d93f6:	9205      	str	r2, [sp, #20]
   d93f8:	9304      	str	r3, [sp, #16]
   d93fa:	f007 fd8d 	bl	e0f18 <mbedtls_mpi_get_bit>
   d93fe:	f817 1009 	ldrb.w	r1, [r7, r9]
   d9402:	9b64      	ldr	r3, [sp, #400]	; 0x190
   d9404:	9a05      	ldr	r2, [sp, #20]
   d9406:	fa00 f00b 	lsl.w	r0, r0, fp
   d940a:	4308      	orrs	r0, r1
   d940c:	441a      	add	r2, r3
   d940e:	f807 0009 	strb.w	r0, [r7, r9]

    memset( x, 0, d+1 );

    /* First get the classical comb values (except for x_d = 0) */
    for( i = 0; i < d; i++ )
        for( j = 0; j < w; j++ )
   d9412:	f10b 0b01 	add.w	fp, fp, #1
   d9416:	9b04      	ldr	r3, [sp, #16]
   d9418:	e7e9      	b.n	d93ee <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x96>
    unsigned char c, cc, adjust;

    memset( x, 0, d+1 );

    /* First get the classical comb values (except for x_d = 0) */
    for( i = 0; i < d; i++ )
   d941a:	3701      	adds	r7, #1
   d941c:	e7e1      	b.n	d93e2 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x8a>
   d941e:	ab16      	add	r3, sp, #88	; 0x58
   d9420:	f04f 0900 	mov.w	r9, #0
   d9424:	f04f 0c01 	mov.w	ip, #1
        for( j = 0; j < w; j++ )
            x[i] |= mbedtls_mpi_get_bit( m, i + d * j ) << j;

    /* Now make sure x_1 .. x_d are odd */
    c = 0;
    for( i = 1; i <= d; i++ )
   d9428:	9a64      	ldr	r2, [sp, #400]	; 0x190
   d942a:	4562      	cmp	r2, ip
   d942c:	f103 0301 	add.w	r3, r3, #1
   d9430:	d31d      	bcc.n	d946e <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x116>
    {
        /* Add carry and update it */
        cc   = x[i] & c;
   d9432:	7819      	ldrb	r1, [r3, #0]
        x[i] = x[i] ^ c;
        c = cc;

        /* Adjust if needed, avoiding branches */
        adjust = 1 - ( x[i] & 0x01 );
        c   |= x[i] & ( x[i-1] * adjust );
   d9434:	f813 7c01 	ldrb.w	r7, [r3, #-1]
    c = 0;
    for( i = 1; i <= d; i++ )
    {
        /* Add carry and update it */
        cc   = x[i] & c;
        x[i] = x[i] ^ c;
   d9438:	ea81 0009 	eor.w	r0, r1, r9
   d943c:	f000 0e01 	and.w	lr, r0, #1
   d9440:	f08e 0e01 	eor.w	lr, lr, #1
        c = cc;

        /* Adjust if needed, avoiding branches */
        adjust = 1 - ( x[i] & 0x01 );
        c   |= x[i] & ( x[i-1] * adjust );
   d9444:	fb17 f20e 	smulbb	r2, r7, lr
   d9448:	b240      	sxtb	r0, r0
   d944a:	b252      	sxtb	r2, r2
   d944c:	ea00 0a02 	and.w	sl, r0, r2
   d9450:	ea01 0109 	and.w	r1, r1, r9
   d9454:	ea4a 0901 	orr.w	r9, sl, r1
        x[i] = x[i] ^ ( x[i-1] * adjust );
   d9458:	4042      	eors	r2, r0
        x[i-1] |= adjust << 7;
   d945a:	ea47 17ce 	orr.w	r7, r7, lr, lsl #7
        x[i] = x[i] ^ c;
        c = cc;

        /* Adjust if needed, avoiding branches */
        adjust = 1 - ( x[i] & 0x01 );
        c   |= x[i] & ( x[i-1] * adjust );
   d945e:	fa5f f989 	uxtb.w	r9, r9
        x[i] = x[i] ^ ( x[i-1] * adjust );
   d9462:	701a      	strb	r2, [r3, #0]
        x[i-1] |= adjust << 7;
   d9464:	f803 7c01 	strb.w	r7, [r3, #-1]
        for( j = 0; j < w; j++ )
            x[i] |= mbedtls_mpi_get_bit( m, i + d * j ) << j;

    /* Now make sure x_1 .. x_d are odd */
    c = 0;
    for( i = 1; i <= d; i++ )
   d9468:	f10c 0c01 	add.w	ip, ip, #1
   d946c:	e7dc      	b.n	d9428 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0xd0>

    /* actual scalar recoding */
    ecp_comb_recode_core( k, d, w, &M );

cleanup:
    mbedtls_mpi_free( &mm );
   d946e:	a80d      	add	r0, sp, #52	; 0x34
   d9470:	f007 fc5b 	bl	e0d2a <mbedtls_mpi_free>
    mbedtls_mpi_free( &M );
   d9474:	a80a      	add	r0, sp, #40	; 0x28
   d9476:	f007 fc58 	bl	e0d2a <mbedtls_mpi_free>
        if( rs_ctx->rsm->state == ecp_rsm_final_norm )
            goto final_norm;
    }
#endif

    MBEDTLS_MPI_CHK( ecp_comb_recode_scalar( grp, m, k, d, w,
   d947a:	2c00      	cmp	r4, #0
   d947c:	f040 80d3 	bne.w	d9626 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x2ce>
   d9480:	e001      	b.n	d9486 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x12e>
    mbedtls_mpi_init( &M );
    mbedtls_mpi_init( &mm );

    /* N is always odd (see above), just make extra sure */
    if( mbedtls_mpi_get_bit( &grp->N, 0 ) != 1 )
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   d9482:	4c6b      	ldr	r4, [pc, #428]	; (d9630 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x2d8>)
   d9484:	e0cf      	b.n	d9626 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x2ce>
{
    int ret;
    mbedtls_ecp_point Txi;
    size_t i;

    mbedtls_ecp_point_init( &Txi );
   d9486:	a80d      	add	r0, sp, #52	; 0x34
   d9488:	f7ff fccc 	bl	d8e24 <mbedtls_ecp_point_init>
    else
#endif
    {
        /* Start with a non-zero point and randomize its coordinates */
        i = d;
        MBEDTLS_MPI_CHK( ecp_select_comb( grp, R, T, T_size, x[i] ) );
   d948c:	9a64      	ldr	r2, [sp, #400]	; 0x190
   d948e:	ab16      	add	r3, sp, #88	; 0x58
   d9490:	4631      	mov	r1, r6
   d9492:	5c9b      	ldrb	r3, [r3, r2]
   d9494:	9300      	str	r3, [sp, #0]
   d9496:	9a02      	ldr	r2, [sp, #8]
   d9498:	9b03      	ldr	r3, [sp, #12]
   d949a:	4628      	mov	r0, r5
   d949c:	f7ff fc63 	bl	d8d66 <_ZL15ecp_select_combPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_hh>
   d94a0:	4604      	mov	r4, r0
   d94a2:	2800      	cmp	r0, #0
   d94a4:	f040 80af 	bne.w	d9606 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x2ae>
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->Z, 1 ) );
   d94a8:	f106 0918 	add.w	r9, r6, #24
   d94ac:	2101      	movs	r1, #1
   d94ae:	4648      	mov	r0, r9
   d94b0:	f007 fd16 	bl	e0ee0 <mbedtls_mpi_lset>
   d94b4:	4604      	mov	r4, r0
   d94b6:	2800      	cmp	r0, #0
   d94b8:	f040 80a5 	bne.w	d9606 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x2ae>
        if( f_rng != 0 )
   d94bc:	9b65      	ldr	r3, [sp, #404]	; 0x194
   d94be:	b943      	cbnz	r3, d94d2 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x17a>
   d94c0:	9a64      	ldr	r2, [sp, #400]	; 0x190
   d94c2:	ab58      	add	r3, sp, #352	; 0x160
   d94c4:	189f      	adds	r7, r3, r2
   d94c6:	f46f 7384 	mvn.w	r3, #264	; 0x108
   d94ca:	441f      	add	r7, r3
   d94cc:	f10d 0957 	add.w	r9, sp, #87	; 0x57
   d94d0:	e093      	b.n	d95fa <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x2a2>
#if defined(MBEDTLS_ECP_RANDOMIZE_JAC_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_randomize_jac( grp, pt, f_rng, p_rng ) );
#endif /* MBEDTLS_ECP_RANDOMIZE_JAC_ALT */

    p_size = ( grp->pbits + 7 ) / 8;
   d94d2:	6dab      	ldr	r3, [r5, #88]	; 0x58
    mbedtls_mpi_init( &l ); mbedtls_mpi_init( &ll );
   d94d4:	af07      	add	r7, sp, #28
#if defined(MBEDTLS_ECP_RANDOMIZE_JAC_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_randomize_jac( grp, pt, f_rng, p_rng ) );
#endif /* MBEDTLS_ECP_RANDOMIZE_JAC_ALT */

    p_size = ( grp->pbits + 7 ) / 8;
   d94d6:	3307      	adds	r3, #7
   d94d8:	08db      	lsrs	r3, r3, #3
    mbedtls_mpi_init( &l ); mbedtls_mpi_init( &ll );
   d94da:	4638      	mov	r0, r7
#if defined(MBEDTLS_ECP_RANDOMIZE_JAC_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_randomize_jac( grp, pt, f_rng, p_rng ) );
#endif /* MBEDTLS_ECP_RANDOMIZE_JAC_ALT */

    p_size = ( grp->pbits + 7 ) / 8;
   d94dc:	9304      	str	r3, [sp, #16]
    mbedtls_mpi_init( &l ); mbedtls_mpi_init( &ll );
   d94de:	f007 fc1e 	bl	e0d1e <mbedtls_mpi_init>
   d94e2:	a80a      	add	r0, sp, #40	; 0x28
   d94e4:	f007 fc1b 	bl	e0d1e <mbedtls_mpi_init>
   d94e8:	f04f 0a0c 	mov.w	sl, #12
    /* Generate l such that 1 < l < p */
    do
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &l, p_size, f_rng, p_rng ) );

        while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )
   d94ec:	f105 0b04 	add.w	fp, r5, #4
    mbedtls_mpi_init( &l ); mbedtls_mpi_init( &ll );

    /* Generate l such that 1 < l < p */
    do
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &l, p_size, f_rng, p_rng ) );
   d94f0:	9b66      	ldr	r3, [sp, #408]	; 0x198
   d94f2:	9a65      	ldr	r2, [sp, #404]	; 0x194
   d94f4:	9904      	ldr	r1, [sp, #16]
   d94f6:	4638      	mov	r0, r7
   d94f8:	f008 fd6e 	bl	e1fd8 <mbedtls_mpi_fill_random>
   d94fc:	4603      	mov	r3, r0
   d94fe:	2800      	cmp	r0, #0
   d9500:	d156      	bne.n	d95b0 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x258>

        while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )
   d9502:	4659      	mov	r1, fp
   d9504:	4638      	mov	r0, r7
   d9506:	f007 fef1 	bl	e12ec <mbedtls_mpi_cmp_mpi>
   d950a:	2800      	cmp	r0, #0
   d950c:	db04      	blt.n	d9518 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x1c0>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &l, 1 ) );
   d950e:	2101      	movs	r1, #1
   d9510:	4638      	mov	r0, r7
   d9512:	f007 fe0c 	bl	e112e <mbedtls_mpi_shift_r>
   d9516:	e7f1      	b.n	d94fc <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x1a4>

        if( count++ > 10 )
   d9518:	f1ba 0a01 	subs.w	sl, sl, #1
   d951c:	d054      	beq.n	d95c8 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x270>
            return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
    }
    while( mbedtls_mpi_cmp_int( &l, 1 ) <= 0 );
   d951e:	2101      	movs	r1, #1
   d9520:	4638      	mov	r0, r7
   d9522:	f007 ff28 	bl	e1376 <mbedtls_mpi_cmp_int>

    p_size = ( grp->pbits + 7 ) / 8;
    mbedtls_mpi_init( &l ); mbedtls_mpi_init( &ll );

    /* Generate l such that 1 < l < p */
    do
   d9526:	2800      	cmp	r0, #0
   d9528:	dde2      	ble.n	d94f0 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x198>
            return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
    }
    while( mbedtls_mpi_cmp_int( &l, 1 ) <= 0 );

    /* Z = l * Z */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Z,   &pt->Z,     &l  ) ); MOD_MUL( pt->Z );
   d952a:	463a      	mov	r2, r7
   d952c:	4649      	mov	r1, r9
   d952e:	4648      	mov	r0, r9
   d9530:	f008 f840 	bl	e15b4 <mbedtls_mpi_mul_mpi>
   d9534:	4603      	mov	r3, r0
   d9536:	2800      	cmp	r0, #0
   d9538:	d13a      	bne.n	d95b0 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x258>
   d953a:	4629      	mov	r1, r5
   d953c:	4648      	mov	r0, r9
   d953e:	f7ff f815 	bl	d856c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d9542:	4603      	mov	r3, r0
   d9544:	bba0      	cbnz	r0, d95b0 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x258>

    /* X = l^2 * X */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &l,         &l  ) ); MOD_MUL( ll );
   d9546:	463a      	mov	r2, r7
   d9548:	4639      	mov	r1, r7
   d954a:	a80a      	add	r0, sp, #40	; 0x28
   d954c:	f008 f832 	bl	e15b4 <mbedtls_mpi_mul_mpi>
   d9550:	4603      	mov	r3, r0
   d9552:	bb68      	cbnz	r0, d95b0 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x258>
   d9554:	4629      	mov	r1, r5
   d9556:	a80a      	add	r0, sp, #40	; 0x28
   d9558:	f7ff f808 	bl	d856c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d955c:	4603      	mov	r3, r0
   d955e:	bb38      	cbnz	r0, d95b0 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x258>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ll ) ); MOD_MUL( pt->X );
   d9560:	aa0a      	add	r2, sp, #40	; 0x28
   d9562:	4631      	mov	r1, r6
   d9564:	4630      	mov	r0, r6
   d9566:	f008 f825 	bl	e15b4 <mbedtls_mpi_mul_mpi>
   d956a:	4603      	mov	r3, r0
   d956c:	bb00      	cbnz	r0, d95b0 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x258>
   d956e:	4629      	mov	r1, r5
   d9570:	4630      	mov	r0, r6
   d9572:	f7fe fffb 	bl	d856c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d9576:	4603      	mov	r3, r0
   d9578:	b9d0      	cbnz	r0, d95b0 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x258>

    /* Y = l^3 * Y */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &ll,        &l  ) ); MOD_MUL( ll );
   d957a:	a90a      	add	r1, sp, #40	; 0x28
   d957c:	463a      	mov	r2, r7
   d957e:	4608      	mov	r0, r1
   d9580:	f008 f818 	bl	e15b4 <mbedtls_mpi_mul_mpi>
   d9584:	4603      	mov	r3, r0
   d9586:	b998      	cbnz	r0, d95b0 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x258>
   d9588:	4629      	mov	r1, r5
   d958a:	a80a      	add	r0, sp, #40	; 0x28
   d958c:	f7fe ffee 	bl	d856c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d9590:	4603      	mov	r3, r0
   d9592:	b968      	cbnz	r0, d95b0 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x258>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ll ) ); MOD_MUL( pt->Y );
   d9594:	f106 090c 	add.w	r9, r6, #12
   d9598:	aa0a      	add	r2, sp, #40	; 0x28
   d959a:	4649      	mov	r1, r9
   d959c:	4648      	mov	r0, r9
   d959e:	f008 f809 	bl	e15b4 <mbedtls_mpi_mul_mpi>
   d95a2:	4603      	mov	r3, r0
   d95a4:	b920      	cbnz	r0, d95b0 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x258>
   d95a6:	4629      	mov	r1, r5
   d95a8:	4648      	mov	r0, r9
   d95aa:	f7fe ffdf 	bl	d856c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d95ae:	4603      	mov	r3, r0

cleanup:
    mbedtls_mpi_free( &l ); mbedtls_mpi_free( &ll );
   d95b0:	4638      	mov	r0, r7
   d95b2:	9304      	str	r3, [sp, #16]
   d95b4:	f007 fbb9 	bl	e0d2a <mbedtls_mpi_free>
   d95b8:	a80a      	add	r0, sp, #40	; 0x28
   d95ba:	f007 fbb6 	bl	e0d2a <mbedtls_mpi_free>
        /* Start with a non-zero point and randomize its coordinates */
        i = d;
        MBEDTLS_MPI_CHK( ecp_select_comb( grp, R, T, T_size, x[i] ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->Z, 1 ) );
        if( f_rng != 0 )
            MBEDTLS_MPI_CHK( ecp_randomize_jac( grp, R, f_rng, p_rng ) );
   d95be:	9b04      	ldr	r3, [sp, #16]
   d95c0:	2b00      	cmp	r3, #0
   d95c2:	f43f af7d 	beq.w	d94c0 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x168>
   d95c6:	e01b      	b.n	d9600 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x2a8>

        while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &l, 1 ) );

        if( count++ > 10 )
            return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
   d95c8:	4b1a      	ldr	r3, [pc, #104]	; (d9634 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x2dc>)
   d95ca:	e019      	b.n	d9600 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x2a8>
    while( i != 0 )
    {
        MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_DBL + MBEDTLS_ECP_OPS_ADD );
        --i;

        MBEDTLS_MPI_CHK( ecp_double_jac( grp, R, R ) );
   d95cc:	4632      	mov	r2, r6
   d95ce:	4631      	mov	r1, r6
   d95d0:	4628      	mov	r0, r5
   d95d2:	f7ff f80f 	bl	d85f4 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_>
   d95d6:	b9a8      	cbnz	r0, d9604 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x2ac>
        MBEDTLS_MPI_CHK( ecp_select_comb( grp, &Txi, T, T_size, x[i] ) );
   d95d8:	f817 3901 	ldrb.w	r3, [r7], #-1
   d95dc:	9300      	str	r3, [sp, #0]
   d95de:	9a02      	ldr	r2, [sp, #8]
   d95e0:	9b03      	ldr	r3, [sp, #12]
   d95e2:	a90d      	add	r1, sp, #52	; 0x34
   d95e4:	4628      	mov	r0, r5
   d95e6:	f7ff fbbe 	bl	d8d66 <_ZL15ecp_select_combPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_hh>
   d95ea:	b958      	cbnz	r0, d9604 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x2ac>
        MBEDTLS_MPI_CHK( ecp_add_mixed( grp, R, R, &Txi ) );
   d95ec:	ab0d      	add	r3, sp, #52	; 0x34
   d95ee:	4632      	mov	r2, r6
   d95f0:	4631      	mov	r1, r6
   d95f2:	4628      	mov	r0, r5
   d95f4:	f7ff fcd0 	bl	d8f98 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_>
   d95f8:	b920      	cbnz	r0, d9604 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x2ac>
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->Z, 1 ) );
        if( f_rng != 0 )
            MBEDTLS_MPI_CHK( ecp_randomize_jac( grp, R, f_rng, p_rng ) );
    }

    while( i != 0 )
   d95fa:	454f      	cmp	r7, r9
   d95fc:	d1e6      	bne.n	d95cc <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x274>
   d95fe:	e002      	b.n	d9606 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x2ae>
        /* Start with a non-zero point and randomize its coordinates */
        i = d;
        MBEDTLS_MPI_CHK( ecp_select_comb( grp, R, T, T_size, x[i] ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->Z, 1 ) );
        if( f_rng != 0 )
            MBEDTLS_MPI_CHK( ecp_randomize_jac( grp, R, f_rng, p_rng ) );
   d9600:	461c      	mov	r4, r3
   d9602:	e000      	b.n	d9606 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x2ae>
    {
        MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_DBL + MBEDTLS_ECP_OPS_ADD );
        --i;

        MBEDTLS_MPI_CHK( ecp_double_jac( grp, R, R ) );
        MBEDTLS_MPI_CHK( ecp_select_comb( grp, &Txi, T, T_size, x[i] ) );
   d9604:	4604      	mov	r4, r0
        MBEDTLS_MPI_CHK( ecp_add_mixed( grp, R, R, &Txi ) );
    }

cleanup:

    mbedtls_ecp_point_free( &Txi );
   d9606:	a80d      	add	r0, sp, #52	; 0x34
   d9608:	f7ff fc49 	bl	d8e9e <mbedtls_ecp_point_free>
    }
#endif

    MBEDTLS_MPI_CHK( ecp_comb_recode_scalar( grp, m, k, d, w,
                                            &parity_trick ) );
    MBEDTLS_MPI_CHK( ecp_mul_comb_core( grp, RR, T, T_size, k, d,
   d960c:	b95c      	cbnz	r4, d9626 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x2ce>
                                        f_rng, p_rng, rs_ctx ) );
    MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, RR, parity_trick ) );
   d960e:	4642      	mov	r2, r8
   d9610:	4631      	mov	r1, r6
   d9612:	4628      	mov	r0, r5
   d9614:	f7ff fb84 	bl	d8d20 <_ZL19ecp_safe_invert_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointh>
   d9618:	4604      	mov	r4, r0
   d961a:	b920      	cbnz	r0, d9626 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x2ce>
        rs_ctx->rsm->state = ecp_rsm_final_norm;

final_norm:
#endif
    MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_INV );
    MBEDTLS_MPI_CHK( ecp_normalize_jac( grp, RR ) );
   d961c:	4631      	mov	r1, r6
   d961e:	4628      	mov	r0, r5
   d9620:	f7ff fa1d 	bl	d8a5e <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point>
   d9624:	4604      	mov	r4, r0
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, RR ) );
#endif

cleanup:
    return( ret );
}
   d9626:	4620      	mov	r0, r4
   d9628:	b059      	add	sp, #356	; 0x164
   d962a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d962e:	bf00      	nop
   d9630:	ffffb080 	.word	0xffffb080
   d9634:	ffffb300 	.word	0xffffb300

000d9638 <mbedtls_ecp_is_zero>:

/*
 * Tell if a point is zero
 */
int mbedtls_ecp_is_zero( mbedtls_ecp_point *pt )
{
   d9638:	b508      	push	{r3, lr}
    ECP_VALIDATE_RET( pt != NULL );

    return( mbedtls_mpi_cmp_int( &pt->Z, 0 ) == 0 );
   d963a:	2100      	movs	r1, #0
   d963c:	3018      	adds	r0, #24
   d963e:	f007 fe9a 	bl	e1376 <mbedtls_mpi_cmp_int>
}
   d9642:	fab0 f080 	clz	r0, r0
   d9646:	0940      	lsrs	r0, r0, #5
   d9648:	bd08      	pop	{r3, pc}
	...

000d964c <mbedtls_ecp_point_write_binary>:
 */
int mbedtls_ecp_point_write_binary( const mbedtls_ecp_group *grp,
                                    const mbedtls_ecp_point *P,
                                    int format, size_t *olen,
                                    unsigned char *buf, size_t buflen )
{
   d964c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d9650:	460e      	mov	r6, r1
   d9652:	4605      	mov	r5, r0
                      format == MBEDTLS_ECP_PF_COMPRESSED );

    /*
     * Common case: P == 0
     */
    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
   d9654:	2100      	movs	r1, #0
   d9656:	f106 0018 	add.w	r0, r6, #24
 */
int mbedtls_ecp_point_write_binary( const mbedtls_ecp_group *grp,
                                    const mbedtls_ecp_point *P,
                                    int format, size_t *olen,
                                    unsigned char *buf, size_t buflen )
{
   d965a:	4691      	mov	r9, r2
   d965c:	4698      	mov	r8, r3
   d965e:	9c08      	ldr	r4, [sp, #32]
   d9660:	9f09      	ldr	r7, [sp, #36]	; 0x24
                      format == MBEDTLS_ECP_PF_COMPRESSED );

    /*
     * Common case: P == 0
     */
    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
   d9662:	f007 fe88 	bl	e1376 <mbedtls_mpi_cmp_int>
   d9666:	b948      	cbnz	r0, d967c <mbedtls_ecp_point_write_binary+0x30>
    {
        if( buflen < 1 )
   d9668:	b917      	cbnz	r7, d9670 <mbedtls_ecp_point_write_binary+0x24>
            return( MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL );
   d966a:	481f      	ldr	r0, [pc, #124]	; (d96e8 <mbedtls_ecp_point_write_binary+0x9c>)
   d966c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

        buf[0] = 0x00;
        *olen = 1;
   d9670:	2301      	movs	r3, #1
    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
    {
        if( buflen < 1 )
            return( MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL );

        buf[0] = 0x00;
   d9672:	7020      	strb	r0, [r4, #0]
        *olen = 1;
   d9674:	f8c8 3000 	str.w	r3, [r8]

        return( 0 );
   d9678:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    }

    plen = mbedtls_mpi_size( &grp->P );
   d967c:	1d28      	adds	r0, r5, #4
   d967e:	f007 fc95 	bl	e0fac <mbedtls_mpi_size>
   d9682:	4605      	mov	r5, r0

    if( format == MBEDTLS_ECP_PF_UNCOMPRESSED )
   d9684:	f1b9 0f00 	cmp.w	r9, #0
   d9688:	d114      	bne.n	d96b4 <mbedtls_ecp_point_write_binary+0x68>
    {
        *olen = 2 * plen + 1;
   d968a:	0042      	lsls	r2, r0, #1
   d968c:	3201      	adds	r2, #1

        if( buflen < *olen )
   d968e:	4297      	cmp	r7, r2

    plen = mbedtls_mpi_size( &grp->P );

    if( format == MBEDTLS_ECP_PF_UNCOMPRESSED )
    {
        *olen = 2 * plen + 1;
   d9690:	f8c8 2000 	str.w	r2, [r8]

        if( buflen < *olen )
   d9694:	d3e9      	bcc.n	d966a <mbedtls_ecp_point_write_binary+0x1e>
            return( MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL );

        buf[0] = 0x04;
   d9696:	4621      	mov	r1, r4
   d9698:	2304      	movs	r3, #4
        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );
   d969a:	4602      	mov	r2, r0
        *olen = 2 * plen + 1;

        if( buflen < *olen )
            return( MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL );

        buf[0] = 0x04;
   d969c:	f801 3b01 	strb.w	r3, [r1], #1
        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );
   d96a0:	4630      	mov	r0, r6
   d96a2:	f007 fcc0 	bl	e1026 <mbedtls_mpi_write_binary>
   d96a6:	b9e8      	cbnz	r0, d96e4 <mbedtls_ecp_point_write_binary+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->Y, buf + 1 + plen, plen ) );
   d96a8:	1c69      	adds	r1, r5, #1
   d96aa:	462a      	mov	r2, r5
   d96ac:	4421      	add	r1, r4
   d96ae:	f106 000c 	add.w	r0, r6, #12
   d96b2:	e012      	b.n	d96da <mbedtls_ecp_point_write_binary+0x8e>
    }
    else if( format == MBEDTLS_ECP_PF_COMPRESSED )
   d96b4:	f1b9 0f01 	cmp.w	r9, #1
   d96b8:	d113      	bne.n	d96e2 <mbedtls_ecp_point_write_binary+0x96>
    {
        *olen = plen + 1;
   d96ba:	1c43      	adds	r3, r0, #1

        if( buflen < *olen )
   d96bc:	429f      	cmp	r7, r3
        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->Y, buf + 1 + plen, plen ) );
    }
    else if( format == MBEDTLS_ECP_PF_COMPRESSED )
    {
        *olen = plen + 1;
   d96be:	f8c8 3000 	str.w	r3, [r8]

        if( buflen < *olen )
   d96c2:	d3d2      	bcc.n	d966a <mbedtls_ecp_point_write_binary+0x1e>
            return( MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL );

        buf[0] = 0x02 + mbedtls_mpi_get_bit( &P->Y, 0 );
   d96c4:	2100      	movs	r1, #0
   d96c6:	f106 000c 	add.w	r0, r6, #12
   d96ca:	f007 fc25 	bl	e0f18 <mbedtls_mpi_get_bit>
   d96ce:	4621      	mov	r1, r4
   d96d0:	3002      	adds	r0, #2
   d96d2:	f801 0b01 	strb.w	r0, [r1], #1
        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );
   d96d6:	462a      	mov	r2, r5
   d96d8:	4630      	mov	r0, r6
    }

cleanup:
    return( ret );
}
   d96da:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

        if( buflen < *olen )
            return( MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL );

        buf[0] = 0x02 + mbedtls_mpi_get_bit( &P->Y, 0 );
        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );
   d96de:	f007 bca2 	b.w	e1026 <mbedtls_mpi_write_binary>
int mbedtls_ecp_point_write_binary( const mbedtls_ecp_group *grp,
                                    const mbedtls_ecp_point *P,
                                    int format, size_t *olen,
                                    unsigned char *buf, size_t buflen )
{
    int ret = 0;
   d96e2:	2000      	movs	r0, #0
        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );
    }

cleanup:
    return( ret );
}
   d96e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d96e8:	ffffb100 	.word	0xffffb100

000d96ec <mbedtls_ecp_point_read_binary>:
 * Import a point from unsigned binary data (SEC1 2.3.4)
 */
int mbedtls_ecp_point_read_binary( const mbedtls_ecp_group *grp,
                                   mbedtls_ecp_point *pt,
                                   const unsigned char *buf, size_t ilen )
{
   d96ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d96ee:	460c      	mov	r4, r1
   d96f0:	4615      	mov	r5, r2
    size_t plen;
    ECP_VALIDATE_RET( grp != NULL );
    ECP_VALIDATE_RET( pt  != NULL );
    ECP_VALIDATE_RET( buf != NULL );

    if( ilen < 1 )
   d96f2:	461f      	mov	r7, r3
   d96f4:	b90b      	cbnz	r3, d96fa <mbedtls_ecp_point_read_binary+0xe>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   d96f6:	4816      	ldr	r0, [pc, #88]	; (d9750 <mbedtls_ecp_point_read_binary+0x64>)
   d96f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    if( buf[0] == 0x00 )
   d96fa:	7813      	ldrb	r3, [r2, #0]
   d96fc:	b933      	cbnz	r3, d970c <mbedtls_ecp_point_read_binary+0x20>
    {
        if( ilen == 1 )
   d96fe:	2f01      	cmp	r7, #1
   d9700:	d1f9      	bne.n	d96f6 <mbedtls_ecp_point_read_binary+0xa>
            return( mbedtls_ecp_set_zero( pt ) );
   d9702:	4608      	mov	r0, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &pt->Y, buf + 1 + plen, plen ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );

cleanup:
    return( ret );
}
   d9704:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    if( buf[0] == 0x00 )
    {
        if( ilen == 1 )
            return( mbedtls_ecp_set_zero( pt ) );
   d9708:	f7ff bc32 	b.w	d8f70 <mbedtls_ecp_set_zero>
        else
            return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
    }

    plen = mbedtls_mpi_size( &grp->P );
   d970c:	3004      	adds	r0, #4
   d970e:	f007 fc4d 	bl	e0fac <mbedtls_mpi_size>

    if( buf[0] != 0x04 )
   d9712:	782b      	ldrb	r3, [r5, #0]
   d9714:	2b04      	cmp	r3, #4
            return( mbedtls_ecp_set_zero( pt ) );
        else
            return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
    }

    plen = mbedtls_mpi_size( &grp->P );
   d9716:	4606      	mov	r6, r0

    if( buf[0] != 0x04 )
   d9718:	d118      	bne.n	d974c <mbedtls_ecp_point_read_binary+0x60>
        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );

    if( ilen != 2 * plen + 1 )
   d971a:	0042      	lsls	r2, r0, #1
   d971c:	3201      	adds	r2, #1
   d971e:	4297      	cmp	r7, r2
   d9720:	d1e9      	bne.n	d96f6 <mbedtls_ecp_point_read_binary+0xa>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &pt->X, buf + 1, plen ) );
   d9722:	4602      	mov	r2, r0
   d9724:	1c69      	adds	r1, r5, #1
   d9726:	4620      	mov	r0, r4
   d9728:	f007 fc46 	bl	e0fb8 <mbedtls_mpi_read_binary>
   d972c:	b978      	cbnz	r0, d974e <mbedtls_ecp_point_read_binary+0x62>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &pt->Y, buf + 1 + plen, plen ) );
   d972e:	1c71      	adds	r1, r6, #1
   d9730:	4632      	mov	r2, r6
   d9732:	4429      	add	r1, r5
   d9734:	f104 000c 	add.w	r0, r4, #12
   d9738:	f007 fc3e 	bl	e0fb8 <mbedtls_mpi_read_binary>
   d973c:	b938      	cbnz	r0, d974e <mbedtls_ecp_point_read_binary+0x62>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );
   d973e:	f104 0018 	add.w	r0, r4, #24
   d9742:	2101      	movs	r1, #1

cleanup:
    return( ret );
}
   d9744:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    if( ilen != 2 * plen + 1 )
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &pt->X, buf + 1, plen ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &pt->Y, buf + 1 + plen, plen ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );
   d9748:	f007 bbca 	b.w	e0ee0 <mbedtls_mpi_lset>
    }

    plen = mbedtls_mpi_size( &grp->P );

    if( buf[0] != 0x04 )
        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
   d974c:	4801      	ldr	r0, [pc, #4]	; (d9754 <mbedtls_ecp_point_read_binary+0x68>)
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &pt->Y, buf + 1 + plen, plen ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );

cleanup:
    return( ret );
}
   d974e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d9750:	ffffb080 	.word	0xffffb080
   d9754:	ffffb180 	.word	0xffffb180

000d9758 <mbedtls_ecp_tls_read_point>:
    ECP_VALIDATE_RET( *buf != NULL );

    /*
     * We must have at least two bytes (1 for length, at least one for data)
     */
    if( buf_len < 2 )
   d9758:	2b01      	cmp	r3, #1
 *      } ECPoint;
 */
int mbedtls_ecp_tls_read_point( const mbedtls_ecp_group *grp,
                                mbedtls_ecp_point *pt,
                                const unsigned char **buf, size_t buf_len )
{
   d975a:	b430      	push	{r4, r5}
   d975c:	4615      	mov	r5, r2
    ECP_VALIDATE_RET( *buf != NULL );

    /*
     * We must have at least two bytes (1 for length, at least one for data)
     */
    if( buf_len < 2 )
   d975e:	d90d      	bls.n	d977c <mbedtls_ecp_tls_read_point+0x24>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    data_len = *(*buf)++;
   d9760:	6814      	ldr	r4, [r2, #0]
   d9762:	1c62      	adds	r2, r4, #1
   d9764:	602a      	str	r2, [r5, #0]
   d9766:	7824      	ldrb	r4, [r4, #0]
    if( data_len < 1 || data_len > buf_len - 1 )
   d9768:	b144      	cbz	r4, d977c <mbedtls_ecp_tls_read_point+0x24>
   d976a:	3b01      	subs	r3, #1
   d976c:	429c      	cmp	r4, r3
   d976e:	d805      	bhi.n	d977c <mbedtls_ecp_tls_read_point+0x24>

    /*
     * Save buffer start for read_binary and update buf
     */
    buf_start = *buf;
    *buf += data_len;
   d9770:	1913      	adds	r3, r2, r4
   d9772:	602b      	str	r3, [r5, #0]

    return( mbedtls_ecp_point_read_binary( grp, pt, buf_start, data_len ) );
   d9774:	4623      	mov	r3, r4
}
   d9776:	bc30      	pop	{r4, r5}
     * Save buffer start for read_binary and update buf
     */
    buf_start = *buf;
    *buf += data_len;

    return( mbedtls_ecp_point_read_binary( grp, pt, buf_start, data_len ) );
   d9778:	f7ff bfb8 	b.w	d96ec <mbedtls_ecp_point_read_binary>
}
   d977c:	4801      	ldr	r0, [pc, #4]	; (d9784 <mbedtls_ecp_tls_read_point+0x2c>)
   d977e:	bc30      	pop	{r4, r5}
   d9780:	4770      	bx	lr
   d9782:	bf00      	nop
   d9784:	ffffb080 	.word	0xffffb080

000d9788 <mbedtls_ecp_tls_write_point>:
 *      } ECPoint;
 */
int mbedtls_ecp_tls_write_point( const mbedtls_ecp_group *grp, const mbedtls_ecp_point *pt,
                         int format, size_t *olen,
                         unsigned char *buf, size_t blen )
{
   d9788:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d978a:	9c07      	ldr	r4, [sp, #28]
   d978c:	9e06      	ldr	r6, [sp, #24]
   d978e:	461d      	mov	r5, r3
                      format == MBEDTLS_ECP_PF_COMPRESSED );

    /*
     * buffer length must be at least one, for our length byte
     */
    if( blen < 1 )
   d9790:	b164      	cbz	r4, d97ac <mbedtls_ecp_tls_write_point+0x24>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    if( ( ret = mbedtls_ecp_point_write_binary( grp, pt, format,
   d9792:	3c01      	subs	r4, #1
   d9794:	9401      	str	r4, [sp, #4]
   d9796:	1c74      	adds	r4, r6, #1
   d9798:	9400      	str	r4, [sp, #0]
   d979a:	f7ff ff57 	bl	d964c <mbedtls_ecp_point_write_binary>
   d979e:	b930      	cbnz	r0, d97ae <mbedtls_ecp_tls_write_point+0x26>
        return( ret );

    /*
     * write length to the first byte and update total length
     */
    buf[0] = (unsigned char) *olen;
   d97a0:	682b      	ldr	r3, [r5, #0]
   d97a2:	7033      	strb	r3, [r6, #0]
    ++*olen;
   d97a4:	682b      	ldr	r3, [r5, #0]
   d97a6:	3301      	adds	r3, #1
   d97a8:	602b      	str	r3, [r5, #0]

    return( 0 );
   d97aa:	e000      	b.n	d97ae <mbedtls_ecp_tls_write_point+0x26>

    /*
     * buffer length must be at least one, for our length byte
     */
    if( blen < 1 )
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   d97ac:	4801      	ldr	r0, [pc, #4]	; (d97b4 <mbedtls_ecp_tls_write_point+0x2c>)
     */
    buf[0] = (unsigned char) *olen;
    ++*olen;

    return( 0 );
}
   d97ae:	b002      	add	sp, #8
   d97b0:	bd70      	pop	{r4, r5, r6, pc}
   d97b2:	bf00      	nop
   d97b4:	ffffb080 	.word	0xffffb080

000d97b8 <mbedtls_ecp_tls_read_group_id>:
    ECP_VALIDATE_RET( *buf != NULL );

    /*
     * We expect at least three bytes (see below)
     */
    if( len < 3 )
   d97b8:	2a02      	cmp	r2, #2
 * Read a group id from an ECParameters record (RFC 4492) and convert it to
 * mbedtls_ecp_group_id.
 */
int mbedtls_ecp_tls_read_group_id( mbedtls_ecp_group_id *grp,
                                   const unsigned char **buf, size_t len )
{
   d97ba:	b510      	push	{r4, lr}
   d97bc:	4604      	mov	r4, r0
    ECP_VALIDATE_RET( *buf != NULL );

    /*
     * We expect at least three bytes (see below)
     */
    if( len < 3 )
   d97be:	d801      	bhi.n	d97c4 <mbedtls_ecp_tls_read_group_id+0xc>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   d97c0:	480c      	ldr	r0, [pc, #48]	; (d97f4 <mbedtls_ecp_tls_read_group_id+0x3c>)
   d97c2:	bd10      	pop	{r4, pc}

    /*
     * First byte is curve_type; only named_curve is handled
     */
    if( *(*buf)++ != MBEDTLS_ECP_TLS_NAMED_CURVE )
   d97c4:	680b      	ldr	r3, [r1, #0]
   d97c6:	1c5a      	adds	r2, r3, #1
   d97c8:	600a      	str	r2, [r1, #0]
   d97ca:	781a      	ldrb	r2, [r3, #0]
   d97cc:	2a03      	cmp	r2, #3
   d97ce:	d1f7      	bne.n	d97c0 <mbedtls_ecp_tls_read_group_id+0x8>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    /*
     * Next two bytes are the namedcurve value
     */
    tls_id = *(*buf)++;
   d97d0:	1c9a      	adds	r2, r3, #2
   d97d2:	600a      	str	r2, [r1, #0]
    tls_id <<= 8;
    tls_id |= *(*buf)++;
   d97d4:	1cda      	adds	r2, r3, #3
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    /*
     * Next two bytes are the namedcurve value
     */
    tls_id = *(*buf)++;
   d97d6:	7858      	ldrb	r0, [r3, #1]
    tls_id <<= 8;
    tls_id |= *(*buf)++;
   d97d8:	600a      	str	r2, [r1, #0]

    if( ( curve_info = mbedtls_ecp_curve_info_from_tls_id( tls_id ) ) == NULL )
   d97da:	789b      	ldrb	r3, [r3, #2]
   d97dc:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   d97e0:	f7ff fb12 	bl	d8e08 <mbedtls_ecp_curve_info_from_tls_id>
   d97e4:	b118      	cbz	r0, d97ee <mbedtls_ecp_tls_read_group_id+0x36>
        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );

    *grp = curve_info->grp_id;
   d97e6:	7803      	ldrb	r3, [r0, #0]
   d97e8:	7023      	strb	r3, [r4, #0]

    return( 0 );
   d97ea:	2000      	movs	r0, #0
   d97ec:	bd10      	pop	{r4, pc}
    tls_id = *(*buf)++;
    tls_id <<= 8;
    tls_id |= *(*buf)++;

    if( ( curve_info = mbedtls_ecp_curve_info_from_tls_id( tls_id ) ) == NULL )
        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
   d97ee:	4802      	ldr	r0, [pc, #8]	; (d97f8 <mbedtls_ecp_tls_read_group_id+0x40>)

    *grp = curve_info->grp_id;

    return( 0 );
}
   d97f0:	bd10      	pop	{r4, pc}
   d97f2:	bf00      	nop
   d97f4:	ffffb080 	.word	0xffffb080
   d97f8:	ffffb180 	.word	0xffffb180

000d97fc <mbedtls_ecp_check_pubkey>:
/*
 * Check that a point is valid as a public key
 */
int mbedtls_ecp_check_pubkey( const mbedtls_ecp_group *grp,
                              const mbedtls_ecp_point *pt )
{
   d97fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d97fe:	460f      	mov	r7, r1
   d9800:	b087      	sub	sp, #28
   d9802:	4605      	mov	r5, r0
    ECP_VALIDATE_RET( grp != NULL );
    ECP_VALIDATE_RET( pt  != NULL );

    /* Must use affine coordinates */
    if( mbedtls_mpi_cmp_int( &pt->Z, 1 ) != 0 )
   d9804:	2101      	movs	r1, #1
   d9806:	f107 0018 	add.w	r0, r7, #24
   d980a:	f007 fdb4 	bl	e1376 <mbedtls_mpi_cmp_int>
   d980e:	4606      	mov	r6, r0
   d9810:	bb10      	cbnz	r0, d9858 <mbedtls_ecp_check_pubkey+0x5c>
#if defined(ECP_MONTGOMERY)
    if( ecp_get_type( grp ) == ECP_TYPE_MONTGOMERY )
        return( ecp_check_pubkey_mx( grp, pt ) );
#endif
#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
   d9812:	4628      	mov	r0, r5
   d9814:	f7fe fe9f 	bl	d8556 <_ZL12ecp_get_typePK17mbedtls_ecp_group>
   d9818:	2801      	cmp	r0, #1
   d981a:	d11b      	bne.n	d9854 <mbedtls_ecp_check_pubkey+0x58>
{
    int ret;
    mbedtls_mpi YY, RHS;

    /* pt coordinates must be normalized for our checks */
    if( mbedtls_mpi_cmp_int( &pt->X, 0 ) < 0 ||
   d981c:	4631      	mov	r1, r6
   d981e:	4638      	mov	r0, r7
   d9820:	f007 fda9 	bl	e1376 <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( &pt->Y, 0 ) < 0 ||
        mbedtls_mpi_cmp_mpi( &pt->X, &grp->P ) >= 0 ||
   d9824:	2800      	cmp	r0, #0
   d9826:	db17      	blt.n	d9858 <mbedtls_ecp_check_pubkey+0x5c>
    int ret;
    mbedtls_mpi YY, RHS;

    /* pt coordinates must be normalized for our checks */
    if( mbedtls_mpi_cmp_int( &pt->X, 0 ) < 0 ||
        mbedtls_mpi_cmp_int( &pt->Y, 0 ) < 0 ||
   d9828:	f107 040c 	add.w	r4, r7, #12
   d982c:	4631      	mov	r1, r6
   d982e:	4620      	mov	r0, r4
   d9830:	f007 fda1 	bl	e1376 <mbedtls_mpi_cmp_int>
{
    int ret;
    mbedtls_mpi YY, RHS;

    /* pt coordinates must be normalized for our checks */
    if( mbedtls_mpi_cmp_int( &pt->X, 0 ) < 0 ||
   d9834:	2800      	cmp	r0, #0
   d9836:	db0f      	blt.n	d9858 <mbedtls_ecp_check_pubkey+0x5c>
        mbedtls_mpi_cmp_int( &pt->Y, 0 ) < 0 ||
        mbedtls_mpi_cmp_mpi( &pt->X, &grp->P ) >= 0 ||
   d9838:	1d2e      	adds	r6, r5, #4
   d983a:	4631      	mov	r1, r6
   d983c:	4638      	mov	r0, r7
   d983e:	f007 fd55 	bl	e12ec <mbedtls_mpi_cmp_mpi>
    int ret;
    mbedtls_mpi YY, RHS;

    /* pt coordinates must be normalized for our checks */
    if( mbedtls_mpi_cmp_int( &pt->X, 0 ) < 0 ||
        mbedtls_mpi_cmp_int( &pt->Y, 0 ) < 0 ||
   d9842:	2800      	cmp	r0, #0
   d9844:	da08      	bge.n	d9858 <mbedtls_ecp_check_pubkey+0x5c>
        mbedtls_mpi_cmp_mpi( &pt->X, &grp->P ) >= 0 ||
        mbedtls_mpi_cmp_mpi( &pt->Y, &grp->P ) >= 0 )
   d9846:	4631      	mov	r1, r6
   d9848:	4620      	mov	r0, r4
   d984a:	f007 fd4f 	bl	e12ec <mbedtls_mpi_cmp_mpi>
    mbedtls_mpi YY, RHS;

    /* pt coordinates must be normalized for our checks */
    if( mbedtls_mpi_cmp_int( &pt->X, 0 ) < 0 ||
        mbedtls_mpi_cmp_int( &pt->Y, 0 ) < 0 ||
        mbedtls_mpi_cmp_mpi( &pt->X, &grp->P ) >= 0 ||
   d984e:	2800      	cmp	r0, #0
   d9850:	da02      	bge.n	d9858 <mbedtls_ecp_check_pubkey+0x5c>
   d9852:	e003      	b.n	d985c <mbedtls_ecp_check_pubkey+0x60>
#endif
#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
        return( ecp_check_pubkey_sw( grp, pt ) );
#endif
    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   d9854:	4845      	ldr	r0, [pc, #276]	; (d996c <mbedtls_ecp_check_pubkey+0x170>)
   d9856:	e086      	b.n	d9966 <mbedtls_ecp_check_pubkey+0x16a>
    /* pt coordinates must be normalized for our checks */
    if( mbedtls_mpi_cmp_int( &pt->X, 0 ) < 0 ||
        mbedtls_mpi_cmp_int( &pt->Y, 0 ) < 0 ||
        mbedtls_mpi_cmp_mpi( &pt->X, &grp->P ) >= 0 ||
        mbedtls_mpi_cmp_mpi( &pt->Y, &grp->P ) >= 0 )
        return( MBEDTLS_ERR_ECP_INVALID_KEY );
   d9858:	4845      	ldr	r0, [pc, #276]	; (d9970 <mbedtls_ecp_check_pubkey+0x174>)
   d985a:	e084      	b.n	d9966 <mbedtls_ecp_check_pubkey+0x16a>

    mbedtls_mpi_init( &YY ); mbedtls_mpi_init( &RHS );
   d985c:	4668      	mov	r0, sp
   d985e:	f007 fa5e 	bl	e0d1e <mbedtls_mpi_init>
   d9862:	a803      	add	r0, sp, #12
   d9864:	f007 fa5b 	bl	e0d1e <mbedtls_mpi_init>

    /*
     * YY = Y^2
     * RHS = X (X^2 + A) + B = X^3 + A X + B
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &YY,  &pt->Y,   &pt->Y  ) );  MOD_MUL( YY  );
   d9868:	4622      	mov	r2, r4
   d986a:	4621      	mov	r1, r4
   d986c:	4668      	mov	r0, sp
   d986e:	f007 fea1 	bl	e15b4 <mbedtls_mpi_mul_mpi>
   d9872:	4604      	mov	r4, r0
   d9874:	2800      	cmp	r0, #0
   d9876:	d14d      	bne.n	d9914 <mbedtls_ecp_check_pubkey+0x118>
   d9878:	4629      	mov	r1, r5
   d987a:	4668      	mov	r0, sp
   d987c:	f7fe fe76 	bl	d856c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d9880:	4604      	mov	r4, r0
   d9882:	2800      	cmp	r0, #0
   d9884:	d146      	bne.n	d9914 <mbedtls_ecp_check_pubkey+0x118>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &pt->X,   &pt->X  ) );  MOD_MUL( RHS );
   d9886:	463a      	mov	r2, r7
   d9888:	4639      	mov	r1, r7
   d988a:	a803      	add	r0, sp, #12
   d988c:	f007 fe92 	bl	e15b4 <mbedtls_mpi_mul_mpi>
   d9890:	4604      	mov	r4, r0
   d9892:	2800      	cmp	r0, #0
   d9894:	d13e      	bne.n	d9914 <mbedtls_ecp_check_pubkey+0x118>
   d9896:	4629      	mov	r1, r5
   d9898:	a803      	add	r0, sp, #12
   d989a:	f7fe fe67 	bl	d856c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d989e:	4604      	mov	r4, r0
   d98a0:	2800      	cmp	r0, #0
   d98a2:	d137      	bne.n	d9914 <mbedtls_ecp_check_pubkey+0x118>

    /* Special case for A = -3 */
    if( grp->A.p == NULL )
   d98a4:	69ab      	ldr	r3, [r5, #24]
   d98a6:	b9a3      	cbnz	r3, d98d2 <mbedtls_ecp_check_pubkey+0xd6>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &RHS, &RHS, 3       ) );  MOD_SUB( RHS );
   d98a8:	a903      	add	r1, sp, #12
   d98aa:	2203      	movs	r2, #3
   d98ac:	4608      	mov	r0, r1
   d98ae:	f007 fe6b 	bl	e1588 <mbedtls_mpi_sub_int>
   d98b2:	4604      	mov	r4, r0
   d98b4:	bb70      	cbnz	r0, d9914 <mbedtls_ecp_check_pubkey+0x118>
   d98b6:	9b03      	ldr	r3, [sp, #12]
   d98b8:	2b00      	cmp	r3, #0
   d98ba:	da1e      	bge.n	d98fa <mbedtls_ecp_check_pubkey+0xfe>
   d98bc:	2100      	movs	r1, #0
   d98be:	a803      	add	r0, sp, #12
   d98c0:	f007 fd59 	bl	e1376 <mbedtls_mpi_cmp_int>
   d98c4:	b1c8      	cbz	r0, d98fa <mbedtls_ecp_check_pubkey+0xfe>
   d98c6:	a903      	add	r1, sp, #12
   d98c8:	4632      	mov	r2, r6
   d98ca:	4608      	mov	r0, r1
   d98cc:	f007 fe03 	bl	e14d6 <mbedtls_mpi_add_mpi>
   d98d0:	e7ef      	b.n	d98b2 <mbedtls_ecp_check_pubkey+0xb6>
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS, &grp->A ) );  MOD_ADD( RHS );
   d98d2:	a903      	add	r1, sp, #12
   d98d4:	f105 0210 	add.w	r2, r5, #16
   d98d8:	4608      	mov	r0, r1
   d98da:	f007 fdfc 	bl	e14d6 <mbedtls_mpi_add_mpi>
   d98de:	4604      	mov	r4, r0
   d98e0:	b9c0      	cbnz	r0, d9914 <mbedtls_ecp_check_pubkey+0x118>
   d98e2:	4631      	mov	r1, r6
   d98e4:	a803      	add	r0, sp, #12
   d98e6:	f007 fd01 	bl	e12ec <mbedtls_mpi_cmp_mpi>
   d98ea:	2800      	cmp	r0, #0
   d98ec:	db05      	blt.n	d98fa <mbedtls_ecp_check_pubkey+0xfe>
   d98ee:	a903      	add	r1, sp, #12
   d98f0:	4632      	mov	r2, r6
   d98f2:	4608      	mov	r0, r1
   d98f4:	f007 fdaf 	bl	e1456 <mbedtls_mpi_sub_abs>
   d98f8:	e7f1      	b.n	d98de <mbedtls_ecp_check_pubkey+0xe2>
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &RHS,     &pt->X  ) );  MOD_MUL( RHS );
   d98fa:	a903      	add	r1, sp, #12
   d98fc:	463a      	mov	r2, r7
   d98fe:	4608      	mov	r0, r1
   d9900:	f007 fe58 	bl	e15b4 <mbedtls_mpi_mul_mpi>
   d9904:	4604      	mov	r4, r0
   d9906:	b928      	cbnz	r0, d9914 <mbedtls_ecp_check_pubkey+0x118>
   d9908:	4629      	mov	r1, r5
   d990a:	a803      	add	r0, sp, #12
   d990c:	f7fe fe2e 	bl	d856c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d9910:	4604      	mov	r4, r0
   d9912:	b138      	cbz	r0, d9924 <mbedtls_ecp_check_pubkey+0x128>
    if( mbedtls_mpi_cmp_mpi( &YY, &RHS ) != 0 )
        ret = MBEDTLS_ERR_ECP_INVALID_KEY;

cleanup:

    mbedtls_mpi_free( &YY ); mbedtls_mpi_free( &RHS );
   d9914:	4668      	mov	r0, sp
   d9916:	f007 fa08 	bl	e0d2a <mbedtls_mpi_free>
   d991a:	a803      	add	r0, sp, #12
   d991c:	f007 fa05 	bl	e0d2a <mbedtls_mpi_free>

    return( ret );
   d9920:	4620      	mov	r0, r4
    if( ecp_get_type( grp ) == ECP_TYPE_MONTGOMERY )
        return( ecp_check_pubkey_mx( grp, pt ) );
#endif
#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
        return( ecp_check_pubkey_sw( grp, pt ) );
   d9922:	e020      	b.n	d9966 <mbedtls_ecp_check_pubkey+0x16a>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS, &grp->A ) );  MOD_ADD( RHS );
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &RHS,     &pt->X  ) );  MOD_MUL( RHS );
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS,     &grp->B ) );  MOD_ADD( RHS );
   d9924:	a903      	add	r1, sp, #12
   d9926:	f105 021c 	add.w	r2, r5, #28
   d992a:	4608      	mov	r0, r1
   d992c:	f007 fdd3 	bl	e14d6 <mbedtls_mpi_add_mpi>
   d9930:	4604      	mov	r4, r0
   d9932:	2800      	cmp	r0, #0
   d9934:	d1ee      	bne.n	d9914 <mbedtls_ecp_check_pubkey+0x118>
   d9936:	4631      	mov	r1, r6
   d9938:	a803      	add	r0, sp, #12
   d993a:	f007 fcd7 	bl	e12ec <mbedtls_mpi_cmp_mpi>
   d993e:	2800      	cmp	r0, #0
   d9940:	db08      	blt.n	d9954 <mbedtls_ecp_check_pubkey+0x158>
   d9942:	a903      	add	r1, sp, #12
   d9944:	4632      	mov	r2, r6
   d9946:	4608      	mov	r0, r1
   d9948:	f007 fd85 	bl	e1456 <mbedtls_mpi_sub_abs>
   d994c:	2800      	cmp	r0, #0
   d994e:	d0f2      	beq.n	d9936 <mbedtls_ecp_check_pubkey+0x13a>
   d9950:	4604      	mov	r4, r0
   d9952:	e7df      	b.n	d9914 <mbedtls_ecp_check_pubkey+0x118>

    if( mbedtls_mpi_cmp_mpi( &YY, &RHS ) != 0 )
   d9954:	a903      	add	r1, sp, #12
   d9956:	4668      	mov	r0, sp
   d9958:	f007 fcc8 	bl	e12ec <mbedtls_mpi_cmp_mpi>
        ret = MBEDTLS_ERR_ECP_INVALID_KEY;
   d995c:	2800      	cmp	r0, #0
   d995e:	4c04      	ldr	r4, [pc, #16]	; (d9970 <mbedtls_ecp_check_pubkey+0x174>)
   d9960:	bf08      	it	eq
   d9962:	2400      	moveq	r4, #0
   d9964:	e7d6      	b.n	d9914 <mbedtls_ecp_check_pubkey+0x118>
#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
        return( ecp_check_pubkey_sw( grp, pt ) );
#endif
    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
}
   d9966:	b007      	add	sp, #28
   d9968:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d996a:	bf00      	nop
   d996c:	ffffb080 	.word	0xffffb080
   d9970:	ffffb380 	.word	0xffffb380

000d9974 <mbedtls_ecp_check_privkey>:
/*
 * Check that an mbedtls_mpi is valid as a private key
 */
int mbedtls_ecp_check_privkey( const mbedtls_ecp_group *grp,
                               const mbedtls_mpi *d )
{
   d9974:	b538      	push	{r3, r4, r5, lr}
   d9976:	460c      	mov	r4, r1
   d9978:	4605      	mov	r5, r0

        return( 0 );
    }
#endif /* ECP_MONTGOMERY */
#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
   d997a:	f7fe fdec 	bl	d8556 <_ZL12ecp_get_typePK17mbedtls_ecp_group>
   d997e:	2801      	cmp	r0, #1
   d9980:	4601      	mov	r1, r0
   d9982:	d10d      	bne.n	d99a0 <mbedtls_ecp_check_privkey+0x2c>
    {
        /* see SEC1 3.2 */
        if( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
   d9984:	4620      	mov	r0, r4
   d9986:	f007 fcf6 	bl	e1376 <mbedtls_mpi_cmp_int>
   d998a:	2800      	cmp	r0, #0
   d998c:	db0a      	blt.n	d99a4 <mbedtls_ecp_check_privkey+0x30>
            mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 )
   d998e:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   d9992:	4620      	mov	r0, r4
   d9994:	f007 fcaa 	bl	e12ec <mbedtls_mpi_cmp_mpi>
#endif /* ECP_MONTGOMERY */
#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
    {
        /* see SEC1 3.2 */
        if( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
   d9998:	2800      	cmp	r0, #0
   d999a:	da03      	bge.n	d99a4 <mbedtls_ecp_check_privkey+0x30>
            mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 )
            return( MBEDTLS_ERR_ECP_INVALID_KEY );
        else
            return( 0 );
   d999c:	2000      	movs	r0, #0
   d999e:	bd38      	pop	{r3, r4, r5, pc}
    }
#endif /* ECP_SHORTWEIERSTRASS */

    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   d99a0:	4801      	ldr	r0, [pc, #4]	; (d99a8 <mbedtls_ecp_check_privkey+0x34>)
   d99a2:	bd38      	pop	{r3, r4, r5, pc}
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
    {
        /* see SEC1 3.2 */
        if( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
            mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 )
            return( MBEDTLS_ERR_ECP_INVALID_KEY );
   d99a4:	4801      	ldr	r0, [pc, #4]	; (d99ac <mbedtls_ecp_check_privkey+0x38>)
            return( 0 );
    }
#endif /* ECP_SHORTWEIERSTRASS */

    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
}
   d99a6:	bd38      	pop	{r3, r4, r5, pc}
   d99a8:	ffffb080 	.word	0xffffb080
   d99ac:	ffffb380 	.word	0xffffb380

000d99b0 <mbedtls_ecp_mul_restartable>:
 */
int mbedtls_ecp_mul_restartable( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
             const mbedtls_mpi *m, const mbedtls_ecp_point *P,
             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng,
             mbedtls_ecp_restart_ctx *rs_ctx )
{
   d99b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d99b4:	b0af      	sub	sp, #188	; 0xbc
   d99b6:	4605      	mov	r5, r0
   d99b8:	910a      	str	r1, [sp, #40]	; 0x28
    {
        /* check_privkey is free */
        MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_CHK );

        /* Common sanity checks */
        MBEDTLS_MPI_CHK( mbedtls_ecp_check_privkey( grp, m ) );
   d99ba:	4611      	mov	r1, r2
 */
int mbedtls_ecp_mul_restartable( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
             const mbedtls_mpi *m, const mbedtls_ecp_point *P,
             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng,
             mbedtls_ecp_restart_ctx *rs_ctx )
{
   d99bc:	920b      	str	r2, [sp, #44]	; 0x2c
   d99be:	461e      	mov	r6, r3
    {
        /* check_privkey is free */
        MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_CHK );

        /* Common sanity checks */
        MBEDTLS_MPI_CHK( mbedtls_ecp_check_privkey( grp, m ) );
   d99c0:	f7ff ffd8 	bl	d9974 <mbedtls_ecp_check_privkey>
   d99c4:	4683      	mov	fp, r0
   d99c6:	2800      	cmp	r0, #0
   d99c8:	f040 8113 	bne.w	d9bf2 <mbedtls_ecp_mul_restartable+0x242>
        MBEDTLS_MPI_CHK( mbedtls_ecp_check_pubkey( grp, P ) );
   d99cc:	4631      	mov	r1, r6
   d99ce:	4628      	mov	r0, r5
   d99d0:	f7ff ff14 	bl	d97fc <mbedtls_ecp_check_pubkey>
   d99d4:	4683      	mov	fp, r0
   d99d6:	2800      	cmp	r0, #0
   d99d8:	f040 810b 	bne.w	d9bf2 <mbedtls_ecp_mul_restartable+0x242>
#if defined(ECP_MONTGOMERY)
    if( ecp_get_type( grp ) == ECP_TYPE_MONTGOMERY )
        MBEDTLS_MPI_CHK( ecp_mul_mxz( grp, R, m, P, f_rng, p_rng ) );
#endif
#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
   d99dc:	4628      	mov	r0, r5
   d99de:	f7fe fdba 	bl	d8556 <_ZL12ecp_get_typePK17mbedtls_ecp_group>
   d99e2:	2801      	cmp	r0, #1
   d99e4:	f040 8084 	bne.w	d9af0 <mbedtls_ecp_mul_restartable+0x140>

    ECP_RS_ENTER( rsm );

    /* Is P the base point ? */
#if MBEDTLS_ECP_FIXED_POINT_OPTIM == 1
    p_eq_g = ( mbedtls_mpi_cmp_mpi( &P->Y, &grp->G.Y ) == 0 &&
   d99e8:	f105 0134 	add.w	r1, r5, #52	; 0x34
   d99ec:	f106 000c 	add.w	r0, r6, #12
   d99f0:	f007 fc7c 	bl	e12ec <mbedtls_mpi_cmp_mpi>
   d99f4:	b948      	cbnz	r0, d9a0a <mbedtls_ecp_mul_restartable+0x5a>
               mbedtls_mpi_cmp_mpi( &P->X, &grp->G.X ) == 0 );
   d99f6:	f105 0128 	add.w	r1, r5, #40	; 0x28
   d99fa:	4630      	mov	r0, r6
   d99fc:	f007 fc76 	bl	e12ec <mbedtls_mpi_cmp_mpi>

    ECP_RS_ENTER( rsm );

    /* Is P the base point ? */
#if MBEDTLS_ECP_FIXED_POINT_OPTIM == 1
    p_eq_g = ( mbedtls_mpi_cmp_mpi( &P->Y, &grp->G.Y ) == 0 &&
   d9a00:	fab0 f980 	clz	r9, r0
   d9a04:	ea4f 1959 	mov.w	r9, r9, lsr #5
   d9a08:	e000      	b.n	d9a0c <mbedtls_ecp_mul_restartable+0x5c>
   d9a0a:	46d9      	mov	r9, fp
   d9a0c:	6deb      	ldr	r3, [r5, #92]	; 0x5c
    /*
     * Minimize the number of multiplications, that is minimize
     * 10 * d * w + 18 * 2^(w-1) + 11 * d + 7 * w, with d = ceil( nbits / w )
     * (see costs of the various parts, with 1S = 1M)
     */
    w = grp->nbits >= 384 ? 5 : 4;
   d9a0e:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
   d9a12:	bf2c      	ite	cs
   d9a14:	2705      	movcs	r7, #5
   d9a16:	2704      	movcc	r7, #4
    /*
     * If P == G, pre-compute a bit more, since this may be re-used later.
     * Just adding one avoids upping the cost of the first mul too much,
     * and the memory cost too.
     */
    if( p_eq_g )
   d9a18:	f1b9 0f00 	cmp.w	r9, #0
   d9a1c:	d000      	beq.n	d9a20 <mbedtls_ecp_mul_restartable+0x70>
        w++;
   d9a1e:	3701      	adds	r7, #1
     * (The last test is useful only for very small curves in the test suite.)
     */
    if( w > MBEDTLS_ECP_WINDOW_SIZE )
        w = MBEDTLS_ECP_WINDOW_SIZE;
    if( w >= grp->nbits )
        w = 2;
   d9a20:	42bb      	cmp	r3, r7
   d9a22:	bf98      	it	ls
   d9a24:	2702      	movls	r7, #2
    p_eq_g = 0;
#endif

    /* Pick window size and deduce related sizes */
    w = ecp_pick_window_size( grp, p_eq_g );
    T_size = 1U << ( w - 1 );
   d9a26:	f107 38ff 	add.w	r8, r7, #4294967295
   d9a2a:	2201      	movs	r2, #1
   d9a2c:	fa02 f208 	lsl.w	r2, r2, r8
   d9a30:	9207      	str	r2, [sp, #28]
   d9a32:	f89d 201c 	ldrb.w	r2, [sp, #28]
   d9a36:	9208      	str	r2, [sp, #32]
    d = ( grp->nbits + w - 1 ) / w;
   d9a38:	3b01      	subs	r3, #1
   d9a3a:	443b      	add	r3, r7
   d9a3c:	fbb3 f3f7 	udiv	r3, r3, r7
   d9a40:	9309      	str	r3, [sp, #36]	; 0x24

    /* Pre-computed table: do we have it already for the base point? */
    if( p_eq_g && grp->T != NULL )
   d9a42:	f1b9 0f00 	cmp.w	r9, #0
   d9a46:	d001      	beq.n	d9a4c <mbedtls_ecp_mul_restartable+0x9c>
   d9a48:	6f6c      	ldr	r4, [r5, #116]	; 0x74
   d9a4a:	bb24      	cbnz	r4, d9a96 <mbedtls_ecp_mul_restartable+0xe6>
    }
    else
#endif
    /* Allocate table if we didn't have any */
    {
        T = (mbedtls_ecp_point *)mbedtls_calloc( T_size, sizeof( mbedtls_ecp_point ) );
   d9a4c:	2124      	movs	r1, #36	; 0x24
   d9a4e:	9807      	ldr	r0, [sp, #28]
   d9a50:	f00f ff10 	bl	e9874 <calloc>
        if( T == NULL )
   d9a54:	4604      	mov	r4, r0
   d9a56:	2800      	cmp	r0, #0
   d9a58:	d02e      	beq.n	d9ab8 <mbedtls_ecp_mul_restartable+0x108>
   d9a5a:	f04f 0a00 	mov.w	sl, #0
            ret = MBEDTLS_ERR_ECP_ALLOC_FAILED;
            goto cleanup;
        }

        for( i = 0; i < T_size; i++ )
            mbedtls_ecp_point_init( &T[i] );
   d9a5e:	f04f 0b24 	mov.w	fp, #36	; 0x24
   d9a62:	fb0b 400a 	mla	r0, fp, sl, r4
   d9a66:	f7ff f9dd 	bl	d8e24 <mbedtls_ecp_point_init>
   d9a6a:	f10a 0a01 	add.w	sl, sl, #1
        {
            ret = MBEDTLS_ERR_ECP_ALLOC_FAILED;
            goto cleanup;
        }

        for( i = 0; i < T_size; i++ )
   d9a6e:	9a08      	ldr	r2, [sp, #32]
   d9a70:	fa5f f38a 	uxtb.w	r3, sl
   d9a74:	429a      	cmp	r2, r3
   d9a76:	d8f4      	bhi.n	d9a62 <mbedtls_ecp_mul_restartable+0xb2>
   d9a78:	e03d      	b.n	d9af6 <mbedtls_ecp_mul_restartable+0x146>
    for( j = 0; j + 1 < T_size; j++ )
        TT[j] = T + j + 1;

    MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_INV + 6 * j - 2 );

    MBEDTLS_MPI_CHK( ecp_normalize_jac_many( grp, TT, j ) );
   d9a7a:	9b07      	ldr	r3, [sp, #28]
   d9a7c:	a90f      	add	r1, sp, #60	; 0x3c
   d9a7e:	1e5a      	subs	r2, r3, #1
   d9a80:	4628      	mov	r0, r5
   d9a82:	f7ff f849 	bl	d8b18 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj>
    }

    /* Compute table (or finish computing it) if not done already */
    if( !T_ok )
    {
        MBEDTLS_MPI_CHK( ecp_precompute_comb( grp, T, P, w, d, rs_ctx ) );
   d9a86:	4683      	mov	fp, r0
   d9a88:	b9c0      	cbnz	r0, d9abc <mbedtls_ecp_mul_restartable+0x10c>

        if( p_eq_g )
   d9a8a:	f1b9 0f00 	cmp.w	r9, #0
   d9a8e:	d002      	beq.n	d9a96 <mbedtls_ecp_mul_restartable+0xe6>
        {
            /* almost transfer ownership of T to the group, but keep a copy of
             * the pointer to use for calling the next function more easily */
            grp->T = T;
            grp->T_size = T_size;
   d9a90:	9b07      	ldr	r3, [sp, #28]

        if( p_eq_g )
        {
            /* almost transfer ownership of T to the group, but keep a copy of
             * the pointer to use for calling the next function more easily */
            grp->T = T;
   d9a92:	676c      	str	r4, [r5, #116]	; 0x74
            grp->T_size = T_size;
   d9a94:	67ab      	str	r3, [r5, #120]	; 0x78
        }
    }

    /* Actual comb multiplication using precomputed points */
    MBEDTLS_MPI_CHK( ecp_mul_comb_after_precomp( grp, R, m,
   d9a96:	9b39      	ldr	r3, [sp, #228]	; 0xe4
   d9a98:	9304      	str	r3, [sp, #16]
   d9a9a:	9b38      	ldr	r3, [sp, #224]	; 0xe0
   d9a9c:	9303      	str	r3, [sp, #12]
   d9a9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d9aa0:	9302      	str	r3, [sp, #8]
   d9aa2:	9b08      	ldr	r3, [sp, #32]
   d9aa4:	9300      	str	r3, [sp, #0]
   d9aa6:	9701      	str	r7, [sp, #4]
   d9aa8:	4623      	mov	r3, r4
   d9aaa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d9aac:	990a      	ldr	r1, [sp, #40]	; 0x28
   d9aae:	4628      	mov	r0, r5
   d9ab0:	f7ff fc52 	bl	d9358 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6>
   d9ab4:	4683      	mov	fp, r0
   d9ab6:	e001      	b.n	d9abc <mbedtls_ecp_mul_restartable+0x10c>
    /* Allocate table if we didn't have any */
    {
        T = (mbedtls_ecp_point *)mbedtls_calloc( T_size, sizeof( mbedtls_ecp_point ) );
        if( T == NULL )
        {
            ret = MBEDTLS_ERR_ECP_ALLOC_FAILED;
   d9ab8:	f8df b140 	ldr.w	fp, [pc, #320]	; d9bfc <mbedtls_ecp_mul_restartable+0x24c>
                                                 f_rng, p_rng, rs_ctx ) );

cleanup:

    /* does T belong to the group? */
    if( T == grp->T )
   d9abc:	6f6a      	ldr	r2, [r5, #116]	; 0x74
   d9abe:	42a2      	cmp	r2, r4
   d9ac0:	d00e      	beq.n	d9ae0 <mbedtls_ecp_mul_restartable+0x130>
        T = NULL;
    }
#endif

    /* did T belong to us? then let's destroy it! */
    if( T != NULL )
   d9ac2:	b16c      	cbz	r4, d9ae0 <mbedtls_ecp_mul_restartable+0x130>
   d9ac4:	2500      	movs	r5, #0
    {
        for( i = 0; i < T_size; i++ )
            mbedtls_ecp_point_free( &T[i] );
   d9ac6:	2624      	movs	r6, #36	; 0x24
   d9ac8:	fb06 4005 	mla	r0, r6, r5, r4
   d9acc:	f7ff f9e7 	bl	d8e9e <mbedtls_ecp_point_free>
   d9ad0:	3501      	adds	r5, #1
#endif

    /* did T belong to us? then let's destroy it! */
    if( T != NULL )
    {
        for( i = 0; i < T_size; i++ )
   d9ad2:	9b08      	ldr	r3, [sp, #32]
   d9ad4:	b2ea      	uxtb	r2, r5
   d9ad6:	4293      	cmp	r3, r2
   d9ad8:	d8f6      	bhi.n	d9ac8 <mbedtls_ecp_mul_restartable+0x118>
            mbedtls_ecp_point_free( &T[i] );
        mbedtls_free( T );
   d9ada:	4620      	mov	r0, r4
   d9adc:	f00c faf2 	bl	e60c4 <free>
    /* don't free R while in progress in case R == P */
#if defined(MBEDTLS_ECP_RESTARTABLE)
    if( ret != MBEDTLS_ERR_ECP_IN_PROGRESS )
#endif
    /* prevent caller from using invalid value */
    if( ret != 0 )
   d9ae0:	f1bb 0f00 	cmp.w	fp, #0
   d9ae4:	f000 8085 	beq.w	d9bf2 <mbedtls_ecp_mul_restartable+0x242>
        mbedtls_ecp_point_free( R );
   d9ae8:	980a      	ldr	r0, [sp, #40]	; 0x28
   d9aea:	f7ff f9d8 	bl	d8e9e <mbedtls_ecp_point_free>
   d9aee:	e080      	b.n	d9bf2 <mbedtls_ecp_mul_restartable+0x242>
        /* Common sanity checks */
        MBEDTLS_MPI_CHK( mbedtls_ecp_check_privkey( grp, m ) );
        MBEDTLS_MPI_CHK( mbedtls_ecp_check_pubkey( grp, P ) );
    }

    ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
   d9af0:	f8df b10c 	ldr.w	fp, [pc, #268]	; d9c00 <mbedtls_ecp_mul_restartable+0x250>
#if defined(MBEDTLS_ECP_RESTARTABLE)
    if( rs_ctx != NULL )
        rs_ctx->depth--;
#endif

    return( ret );
   d9af4:	e07d      	b.n	d9bf2 <mbedtls_ecp_mul_restartable+0x242>
#endif
    /*
     * Set T[0] = P and
     * T[2^{l-1}] = 2^{dl} P for l = 1 .. w-1 (this is not the final value)
     */
    MBEDTLS_MPI_CHK( mbedtls_ecp_copy( &T[0], P ) );
   d9af6:	4631      	mov	r1, r6
   d9af8:	4620      	mov	r0, r4
   d9afa:	f7ff fa20 	bl	d8f3e <mbedtls_ecp_copy>
   d9afe:	4683      	mov	fp, r0
   d9b00:	2800      	cmp	r0, #0
   d9b02:	d1db      	bne.n	d9abc <mbedtls_ecp_mul_restartable+0x10c>
        j = rs_ctx->rsm->i;
    else
#endif
        j = 0;

    for( ; j < d * ( w - 1 ); j++ )
   d9b04:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d9b06:	fb03 f308 	mul.w	r3, r3, r8
   d9b0a:	930c      	str	r3, [sp, #48]	; 0x30
   d9b0c:	46d8      	mov	r8, fp
    {
        MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_DBL );

        i = 1U << ( j / d );
        cur = T + i;
   d9b0e:	2624      	movs	r6, #36	; 0x24
        j = rs_ctx->rsm->i;
    else
#endif
        j = 0;

    for( ; j < d * ( w - 1 ); j++ )
   d9b10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d9b12:	4543      	cmp	r3, r8
   d9b14:	d023      	beq.n	d9b5e <mbedtls_ecp_mul_restartable+0x1ae>
    {
        MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_DBL );

        i = 1U << ( j / d );
   d9b16:	2201      	movs	r2, #1
   d9b18:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d9b1a:	fbb8 f3f3 	udiv	r3, r8, r3
   d9b1e:	fa02 f103 	lsl.w	r1, r2, r3
        cur = T + i;

        if( j % d == 0 )
   d9b22:	9a09      	ldr	r2, [sp, #36]	; 0x24
    for( ; j < d * ( w - 1 ); j++ )
    {
        MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_DBL );

        i = 1U << ( j / d );
        cur = T + i;
   d9b24:	fa5f fa81 	uxtb.w	sl, r1

        if( j % d == 0 )
   d9b28:	fb02 8313 	mls	r3, r2, r3, r8
    for( ; j < d * ( w - 1 ); j++ )
    {
        MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_DBL );

        i = 1U << ( j / d );
        cur = T + i;
   d9b2c:	fb06 4a0a 	mla	sl, r6, sl, r4

        if( j % d == 0 )
   d9b30:	b153      	cbz	r3, d9b48 <mbedtls_ecp_mul_restartable+0x198>
            MBEDTLS_MPI_CHK( mbedtls_ecp_copy( cur, T + ( i >> 1 ) ) );

        MBEDTLS_MPI_CHK( ecp_double_jac( grp, cur, cur ) );
   d9b32:	4652      	mov	r2, sl
   d9b34:	4651      	mov	r1, sl
   d9b36:	4628      	mov	r0, r5
   d9b38:	f7fe fd5c 	bl	d85f4 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_>
   d9b3c:	4683      	mov	fp, r0
   d9b3e:	2800      	cmp	r0, #0
   d9b40:	d1bc      	bne.n	d9abc <mbedtls_ecp_mul_restartable+0x10c>
        j = rs_ctx->rsm->i;
    else
#endif
        j = 0;

    for( ; j < d * ( w - 1 ); j++ )
   d9b42:	f108 0801 	add.w	r8, r8, #1
   d9b46:	e7e3      	b.n	d9b10 <mbedtls_ecp_mul_restartable+0x160>

        i = 1U << ( j / d );
        cur = T + i;

        if( j % d == 0 )
            MBEDTLS_MPI_CHK( mbedtls_ecp_copy( cur, T + ( i >> 1 ) ) );
   d9b48:	f3c1 0146 	ubfx	r1, r1, #1, #7
   d9b4c:	fb06 4101 	mla	r1, r6, r1, r4
   d9b50:	4650      	mov	r0, sl
   d9b52:	f7ff f9f4 	bl	d8f3e <mbedtls_ecp_copy>
   d9b56:	4683      	mov	fp, r0
   d9b58:	2800      	cmp	r0, #0
   d9b5a:	d0ea      	beq.n	d9b32 <mbedtls_ecp_mul_restartable+0x182>
   d9b5c:	e7ae      	b.n	d9abc <mbedtls_ecp_mul_restartable+0x10c>
        j = rs_ctx->rsm->i;
    else
#endif
        j = 0;

    for( ; j < d * ( w - 1 ); j++ )
   d9b5e:	2200      	movs	r2, #0
   d9b60:	2301      	movs	r3, #1
     * Normalize current elements in T. As T has holes,
     * use an auxiliary array of pointers to elements in T.
     */
    j = 0;
    for( i = 1; i < T_size; i <<= 1 )
        TT[j++] = T + i;
   d9b62:	eb03 00c3 	add.w	r0, r3, r3, lsl #3
   d9b66:	a90f      	add	r1, sp, #60	; 0x3c
   d9b68:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   d9b6c:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
    /*
     * Normalize current elements in T. As T has holes,
     * use an auxiliary array of pointers to elements in T.
     */
    j = 0;
    for( i = 1; i < T_size; i <<= 1 )
   d9b70:	005b      	lsls	r3, r3, #1
   d9b72:	9808      	ldr	r0, [sp, #32]
   d9b74:	b2db      	uxtb	r3, r3
   d9b76:	4298      	cmp	r0, r3
   d9b78:	f102 0201 	add.w	r2, r2, #1
   d9b7c:	d8f1      	bhi.n	d9b62 <mbedtls_ecp_mul_restartable+0x1b2>
        TT[j++] = T + i;

    MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_INV + 6 * j - 2 );

    MBEDTLS_MPI_CHK( ecp_normalize_jac_many( grp, TT, j ) );
   d9b7e:	4628      	mov	r0, r5
   d9b80:	f7fe ffca 	bl	d8b18 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj>
   d9b84:	4683      	mov	fp, r0
   d9b86:	2800      	cmp	r0, #0
   d9b88:	d198      	bne.n	d9abc <mbedtls_ecp_mul_restartable+0x10c>
   d9b8a:	2601      	movs	r6, #1

    for( i = 1; i < T_size; i <<= 1 )
    {
        j = i;
        while( j-- )
            MBEDTLS_MPI_CHK( ecp_add_mixed( grp, &T[i + j], &T[j], &T[i] ) );
   d9b8c:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
   d9b90:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   d9b94:	f06f 0223 	mvn.w	r2, #35	; 0x23
   d9b98:	930d      	str	r3, [sp, #52]	; 0x34
   d9b9a:	2348      	movs	r3, #72	; 0x48
   d9b9c:	fb13 2a06 	smlabb	sl, r3, r6, r2
   d9ba0:	4613      	mov	r3, r2
   d9ba2:	4373      	muls	r3, r6
   d9ba4:	44a2      	add	sl, r4
   d9ba6:	930c      	str	r3, [sp, #48]	; 0x30
   d9ba8:	46b0      	mov	r8, r6
   d9baa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   d9bac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d9bae:	4452      	add	r2, sl
   d9bb0:	4651      	mov	r1, sl
   d9bb2:	4628      	mov	r0, r5
   d9bb4:	f7ff f9f0 	bl	d8f98 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_>
   d9bb8:	f108 38ff 	add.w	r8, r8, #4294967295
   d9bbc:	f1aa 0a24 	sub.w	sl, sl, #36	; 0x24
   d9bc0:	4683      	mov	fp, r0
   d9bc2:	2800      	cmp	r0, #0
   d9bc4:	f47f af7a 	bne.w	d9abc <mbedtls_ecp_mul_restartable+0x10c>
    MBEDTLS_ECP_BUDGET( ( T_size - 1 ) * MBEDTLS_ECP_OPS_ADD );

    for( i = 1; i < T_size; i <<= 1 )
    {
        j = i;
        while( j-- )
   d9bc8:	f1b8 0f00 	cmp.w	r8, #0
   d9bcc:	d1ed      	bne.n	d9baa <mbedtls_ecp_mul_restartable+0x1fa>
     * Compute the remaining ones using the minimal number of additions
     * Be careful to update T[2^l] only after using it!
     */
    MBEDTLS_ECP_BUDGET( ( T_size - 1 ) * MBEDTLS_ECP_OPS_ADD );

    for( i = 1; i < T_size; i <<= 1 )
   d9bce:	0076      	lsls	r6, r6, #1
   d9bd0:	9b08      	ldr	r3, [sp, #32]
   d9bd2:	b2f6      	uxtb	r6, r6
   d9bd4:	42b3      	cmp	r3, r6
   d9bd6:	d8d9      	bhi.n	d9b8c <mbedtls_ecp_mul_restartable+0x1dc>
   d9bd8:	ab0e      	add	r3, sp, #56	; 0x38
     * Normalize final elements in T. Even though there are no holes now, we
     * still need the auxiliary array for homogeneity with the previous
     * call. Also, skip T[0] which is already normalised, being a copy of P.
     */
    for( j = 0; j + 1 < T_size; j++ )
        TT[j] = T + j + 1;
   d9bda:	2124      	movs	r1, #36	; 0x24
    /*
     * Normalize final elements in T. Even though there are no holes now, we
     * still need the auxiliary array for homogeneity with the previous
     * call. Also, skip T[0] which is already normalised, being a copy of P.
     */
    for( j = 0; j + 1 < T_size; j++ )
   d9bdc:	9a07      	ldr	r2, [sp, #28]
   d9bde:	f108 0801 	add.w	r8, r8, #1
   d9be2:	4542      	cmp	r2, r8
   d9be4:	f43f af49 	beq.w	d9a7a <mbedtls_ecp_mul_restartable+0xca>
        TT[j] = T + j + 1;
   d9be8:	fb01 4208 	mla	r2, r1, r8, r4
   d9bec:	f843 2f04 	str.w	r2, [r3, #4]!
   d9bf0:	e7f4      	b.n	d9bdc <mbedtls_ecp_mul_restartable+0x22c>
    if( rs_ctx != NULL )
        rs_ctx->depth--;
#endif

    return( ret );
}
   d9bf2:	4658      	mov	r0, fp
   d9bf4:	b02f      	add	sp, #188	; 0xbc
   d9bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9bfa:	bf00      	nop
   d9bfc:	ffffb280 	.word	0xffffb280
   d9c00:	ffffb080 	.word	0xffffb080

000d9c04 <mbedtls_ecp_mul>:
 * Multiplication R = m * P
 */
int mbedtls_ecp_mul( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
             const mbedtls_mpi *m, const mbedtls_ecp_point *P,
             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
   d9c04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    ECP_VALIDATE_RET( grp != NULL );
    ECP_VALIDATE_RET( R   != NULL );
    ECP_VALIDATE_RET( m   != NULL );
    ECP_VALIDATE_RET( P   != NULL );
    return( mbedtls_ecp_mul_restartable( grp, R, m, P, f_rng, p_rng, NULL ) );
   d9c06:	2400      	movs	r4, #0
   d9c08:	9402      	str	r4, [sp, #8]
   d9c0a:	9c07      	ldr	r4, [sp, #28]
   d9c0c:	9401      	str	r4, [sp, #4]
   d9c0e:	9c06      	ldr	r4, [sp, #24]
   d9c10:	9400      	str	r4, [sp, #0]
   d9c12:	f7ff fecd 	bl	d99b0 <mbedtls_ecp_mul_restartable>
}
   d9c16:	b004      	add	sp, #16
   d9c18:	bd10      	pop	{r4, pc}

000d9c1a <_ZL25mbedtls_ecp_mul_shortcutsP17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS1_Pv>:
static int mbedtls_ecp_mul_shortcuts( mbedtls_ecp_group *grp,
                                      mbedtls_ecp_point *R,
                                      const mbedtls_mpi *m,
                                      const mbedtls_ecp_point *P,
                                      mbedtls_ecp_restart_ctx *rs_ctx )
{
   d9c1a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d9c1e:	4607      	mov	r7, r0
   d9c20:	460c      	mov	r4, r1
    int ret;

    if( mbedtls_mpi_cmp_int( m, 1 ) == 0 )
   d9c22:	4610      	mov	r0, r2
   d9c24:	2101      	movs	r1, #1
static int mbedtls_ecp_mul_shortcuts( mbedtls_ecp_group *grp,
                                      mbedtls_ecp_point *R,
                                      const mbedtls_mpi *m,
                                      const mbedtls_ecp_point *P,
                                      mbedtls_ecp_restart_ctx *rs_ctx )
{
   d9c26:	4615      	mov	r5, r2
   d9c28:	461e      	mov	r6, r3
   d9c2a:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    int ret;

    if( mbedtls_mpi_cmp_int( m, 1 ) == 0 )
   d9c2e:	f007 fba2 	bl	e1376 <mbedtls_mpi_cmp_int>
   d9c32:	b930      	cbnz	r0, d9c42 <_ZL25mbedtls_ecp_mul_shortcutsP17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS1_Pv+0x28>
    {
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, P ) );
   d9c34:	4631      	mov	r1, r6
   d9c36:	4620      	mov	r0, r4
                                                      NULL, NULL, rs_ctx ) );
    }

cleanup:
    return( ret );
}
   d9c38:	b004      	add	sp, #16
   d9c3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
{
    int ret;

    if( mbedtls_mpi_cmp_int( m, 1 ) == 0 )
    {
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, P ) );
   d9c3e:	f7ff b97e 	b.w	d8f3e <mbedtls_ecp_copy>
    }
    else if( mbedtls_mpi_cmp_int( m, -1 ) == 0 )
   d9c42:	f04f 31ff 	mov.w	r1, #4294967295
   d9c46:	4628      	mov	r0, r5
   d9c48:	f007 fb95 	bl	e1376 <mbedtls_mpi_cmp_int>
   d9c4c:	b998      	cbnz	r0, d9c76 <_ZL25mbedtls_ecp_mul_shortcutsP17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS1_Pv+0x5c>
    {
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, P ) );
   d9c4e:	4631      	mov	r1, r6
   d9c50:	4620      	mov	r0, r4
   d9c52:	f7ff f974 	bl	d8f3e <mbedtls_ecp_copy>
   d9c56:	4605      	mov	r5, r0
   d9c58:	b9c8      	cbnz	r0, d9c8e <_ZL25mbedtls_ecp_mul_shortcutsP17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS1_Pv+0x74>
        if( mbedtls_mpi_cmp_int( &R->Y, 0 ) != 0 )
   d9c5a:	340c      	adds	r4, #12
   d9c5c:	4601      	mov	r1, r0
   d9c5e:	4620      	mov	r0, r4
   d9c60:	f007 fb89 	bl	e1376 <mbedtls_mpi_cmp_int>
   d9c64:	b198      	cbz	r0, d9c8e <_ZL25mbedtls_ecp_mul_shortcutsP17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS1_Pv+0x74>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &R->Y, &grp->P, &R->Y ) );
   d9c66:	4622      	mov	r2, r4
   d9c68:	1d39      	adds	r1, r7, #4
   d9c6a:	4620      	mov	r0, r4
                                                      NULL, NULL, rs_ctx ) );
    }

cleanup:
    return( ret );
}
   d9c6c:	b004      	add	sp, #16
   d9c6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    }
    else if( mbedtls_mpi_cmp_int( m, -1 ) == 0 )
    {
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, P ) );
        if( mbedtls_mpi_cmp_int( &R->Y, 0 ) != 0 )
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &R->Y, &grp->P, &R->Y ) );
   d9c72:	f007 bc51 	b.w	e1518 <mbedtls_mpi_sub_mpi>
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_ecp_mul_restartable( grp, R, m, P,
   d9c76:	2300      	movs	r3, #0
   d9c78:	9301      	str	r3, [sp, #4]
   d9c7a:	9300      	str	r3, [sp, #0]
   d9c7c:	462a      	mov	r2, r5
   d9c7e:	f8cd 8008 	str.w	r8, [sp, #8]
   d9c82:	4633      	mov	r3, r6
   d9c84:	4621      	mov	r1, r4
   d9c86:	4638      	mov	r0, r7
   d9c88:	f7ff fe92 	bl	d99b0 <mbedtls_ecp_mul_restartable>
   d9c8c:	4605      	mov	r5, r0
                                                      NULL, NULL, rs_ctx ) );
    }

cleanup:
    return( ret );
}
   d9c8e:	4628      	mov	r0, r5
   d9c90:	b004      	add	sp, #16
   d9c92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d9c98 <mbedtls_ecp_muladd_restartable>:
int mbedtls_ecp_muladd_restartable(
             mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
             const mbedtls_mpi *m, const mbedtls_ecp_point *P,
             const mbedtls_mpi *n, const mbedtls_ecp_point *Q,
             mbedtls_ecp_restart_ctx *rs_ctx )
{
   d9c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9c9c:	b08c      	sub	sp, #48	; 0x30
   d9c9e:	4605      	mov	r5, r0
   d9ca0:	460e      	mov	r6, r1
   d9ca2:	4614      	mov	r4, r2
   d9ca4:	4698      	mov	r8, r3
    ECP_VALIDATE_RET( m   != NULL );
    ECP_VALIDATE_RET( P   != NULL );
    ECP_VALIDATE_RET( n   != NULL );
    ECP_VALIDATE_RET( Q   != NULL );

    if( ecp_get_type( grp ) != ECP_TYPE_SHORT_WEIERSTRASS )
   d9ca6:	f7fe fc56 	bl	d8556 <_ZL12ecp_get_typePK17mbedtls_ecp_group>
   d9caa:	2801      	cmp	r0, #1
int mbedtls_ecp_muladd_restartable(
             mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
             const mbedtls_mpi *m, const mbedtls_ecp_point *P,
             const mbedtls_mpi *n, const mbedtls_ecp_point *Q,
             mbedtls_ecp_restart_ctx *rs_ctx )
{
   d9cac:	9f14      	ldr	r7, [sp, #80]	; 0x50
    ECP_VALIDATE_RET( m   != NULL );
    ECP_VALIDATE_RET( P   != NULL );
    ECP_VALIDATE_RET( n   != NULL );
    ECP_VALIDATE_RET( Q   != NULL );

    if( ecp_get_type( grp ) != ECP_TYPE_SHORT_WEIERSTRASS )
   d9cae:	d126      	bne.n	d9cfe <mbedtls_ecp_muladd_restartable+0x66>
        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );

    mbedtls_ecp_point_init( &mP );
   d9cb0:	a803      	add	r0, sp, #12
   d9cb2:	f7ff f8b7 	bl	d8e24 <mbedtls_ecp_point_init>
        if( rs_ctx->ma->state == ecp_rsma_norm )
            goto norm;
    }
#endif /* MBEDTLS_ECP_RESTARTABLE */

    MBEDTLS_MPI_CHK( mbedtls_ecp_mul_shortcuts( grp, pmP, m, P, rs_ctx ) );
   d9cb6:	4622      	mov	r2, r4
   d9cb8:	9700      	str	r7, [sp, #0]
   d9cba:	4643      	mov	r3, r8
   d9cbc:	a903      	add	r1, sp, #12
   d9cbe:	4628      	mov	r0, r5
   d9cc0:	f7ff ffab 	bl	d9c1a <_ZL25mbedtls_ecp_mul_shortcutsP17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS1_Pv>
   d9cc4:	4604      	mov	r4, r0
   d9cc6:	b9a8      	cbnz	r0, d9cf4 <mbedtls_ecp_muladd_restartable+0x5c>
    if( rs_ctx != NULL && rs_ctx->ma != NULL )
        rs_ctx->ma->state = ecp_rsma_mul2;

mul2:
#endif
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul_shortcuts( grp, pR,  n, Q, rs_ctx ) );
   d9cc8:	9700      	str	r7, [sp, #0]
   d9cca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d9ccc:	9a12      	ldr	r2, [sp, #72]	; 0x48
   d9cce:	4631      	mov	r1, r6
   d9cd0:	4628      	mov	r0, r5
   d9cd2:	f7ff ffa2 	bl	d9c1a <_ZL25mbedtls_ecp_mul_shortcutsP17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS1_Pv>
   d9cd6:	4604      	mov	r4, r0
   d9cd8:	b960      	cbnz	r0, d9cf4 <mbedtls_ecp_muladd_restartable+0x5c>
        rs_ctx->ma->state = ecp_rsma_add;

add:
#endif
    MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_ADD );
    MBEDTLS_MPI_CHK( ecp_add_mixed( grp, pR, pmP, pR ) );
   d9cda:	4633      	mov	r3, r6
   d9cdc:	aa03      	add	r2, sp, #12
   d9cde:	4631      	mov	r1, r6
   d9ce0:	4628      	mov	r0, r5
   d9ce2:	f7ff f959 	bl	d8f98 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_>
   d9ce6:	4604      	mov	r4, r0
   d9ce8:	b920      	cbnz	r0, d9cf4 <mbedtls_ecp_muladd_restartable+0x5c>
        rs_ctx->ma->state = ecp_rsma_norm;

norm:
#endif
    MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_INV );
    MBEDTLS_MPI_CHK( ecp_normalize_jac( grp, pR ) );
   d9cea:	4631      	mov	r1, r6
   d9cec:	4628      	mov	r0, r5
   d9cee:	f7fe feb6 	bl	d8a5e <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point>
   d9cf2:	4604      	mov	r4, r0
#if defined(MBEDTLS_ECP_INTERNAL_ALT)
    if( is_grp_capable )
        mbedtls_internal_ecp_free( grp );
#endif /* MBEDTLS_ECP_INTERNAL_ALT */

    mbedtls_ecp_point_free( &mP );
   d9cf4:	a803      	add	r0, sp, #12
   d9cf6:	f7ff f8d2 	bl	d8e9e <mbedtls_ecp_point_free>

    ECP_RS_LEAVE( ma );

    return( ret );
   d9cfa:	4620      	mov	r0, r4
   d9cfc:	e000      	b.n	d9d00 <mbedtls_ecp_muladd_restartable+0x68>
    ECP_VALIDATE_RET( P   != NULL );
    ECP_VALIDATE_RET( n   != NULL );
    ECP_VALIDATE_RET( Q   != NULL );

    if( ecp_get_type( grp ) != ECP_TYPE_SHORT_WEIERSTRASS )
        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
   d9cfe:	4802      	ldr	r0, [pc, #8]	; (d9d08 <mbedtls_ecp_muladd_restartable+0x70>)
    mbedtls_ecp_point_free( &mP );

    ECP_RS_LEAVE( ma );

    return( ret );
}
   d9d00:	b00c      	add	sp, #48	; 0x30
   d9d02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d9d06:	bf00      	nop
   d9d08:	ffffb180 	.word	0xffffb180

000d9d0c <mbedtls_ecp_gen_privkey>:
 */
int mbedtls_ecp_gen_privkey( const mbedtls_ecp_group *grp,
                     mbedtls_mpi *d,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
   d9d0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9d10:	4607      	mov	r7, r0

    ECP_VALIDATE_RET( grp   != NULL );
    ECP_VALIDATE_RET( d     != NULL );
    ECP_VALIDATE_RET( f_rng != NULL );

    n_size = ( grp->nbits + 7 ) / 8;
   d9d12:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 */
int mbedtls_ecp_gen_privkey( const mbedtls_ecp_group *grp,
                     mbedtls_mpi *d,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
   d9d14:	460d      	mov	r5, r1
   d9d16:	4692      	mov	sl, r2
   d9d18:	469b      	mov	fp, r3
        }
    }
#endif /* ECP_MONTGOMERY */

#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
   d9d1a:	f7fe fc1c 	bl	d8556 <_ZL12ecp_get_typePK17mbedtls_ecp_group>

    ECP_VALIDATE_RET( grp   != NULL );
    ECP_VALIDATE_RET( d     != NULL );
    ECP_VALIDATE_RET( f_rng != NULL );

    n_size = ( grp->nbits + 7 ) / 8;
   d9d1e:	3407      	adds	r4, #7
        }
    }
#endif /* ECP_MONTGOMERY */

#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
   d9d20:	2801      	cmp	r0, #1

    ECP_VALIDATE_RET( grp   != NULL );
    ECP_VALIDATE_RET( d     != NULL );
    ECP_VALIDATE_RET( f_rng != NULL );

    n_size = ( grp->nbits + 7 ) / 8;
   d9d22:	ea4f 04d4 	mov.w	r4, r4, lsr #3
        }
    }
#endif /* ECP_MONTGOMERY */

#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
   d9d26:	d124      	bne.n	d9d72 <mbedtls_ecp_gen_privkey+0x66>
             */
            if( ++count > 30 )
                return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
        }
        while( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
               mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 );
   d9d28:	f107 034c 	add.w	r3, r7, #76	; 0x4c
         * This also avoids any biais, which is especially important for ECDSA.
         */
        do
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( d, n_size, f_rng, p_rng ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( d, 8 * n_size - grp->nbits ) );
   d9d2c:	ea4f 09c4 	mov.w	r9, r4, lsl #3
   d9d30:	261f      	movs	r6, #31
             */
            if( ++count > 30 )
                return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
        }
        while( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
               mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 );
   d9d32:	9301      	str	r3, [sp, #4]
         * - try until result is in the desired range.
         * This also avoids any biais, which is especially important for ECDSA.
         */
        do
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( d, n_size, f_rng, p_rng ) );
   d9d34:	465b      	mov	r3, fp
   d9d36:	4652      	mov	r2, sl
   d9d38:	4621      	mov	r1, r4
   d9d3a:	4628      	mov	r0, r5
   d9d3c:	f008 f94c 	bl	e1fd8 <mbedtls_mpi_fill_random>
   d9d40:	4680      	mov	r8, r0
   d9d42:	b9d8      	cbnz	r0, d9d7c <mbedtls_ecp_gen_privkey+0x70>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( d, 8 * n_size - grp->nbits ) );
   d9d44:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   d9d46:	4628      	mov	r0, r5
   d9d48:	ebc1 0109 	rsb	r1, r1, r9
   d9d4c:	f007 f9ef 	bl	e112e <mbedtls_mpi_shift_r>
   d9d50:	4680      	mov	r8, r0
   d9d52:	b998      	cbnz	r0, d9d7c <mbedtls_ecp_gen_privkey+0x70>
             *
             * For most curves, 1 try is enough with overwhelming probability,
             * since N starts with a lot of 1s in binary, but some curves
             * such as secp224k1 are actually very close to the worst case.
             */
            if( ++count > 30 )
   d9d54:	3e01      	subs	r6, #1
   d9d56:	d00f      	beq.n	d9d78 <mbedtls_ecp_gen_privkey+0x6c>
                return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
        }
        while( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
   d9d58:	2101      	movs	r1, #1
   d9d5a:	4628      	mov	r0, r5
   d9d5c:	f007 fb0b 	bl	e1376 <mbedtls_mpi_cmp_int>
   d9d60:	2800      	cmp	r0, #0
   d9d62:	dbe7      	blt.n	d9d34 <mbedtls_ecp_gen_privkey+0x28>
               mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 );
   d9d64:	9901      	ldr	r1, [sp, #4]
   d9d66:	4628      	mov	r0, r5
   d9d68:	f007 fac0 	bl	e12ec <mbedtls_mpi_cmp_mpi>
             * such as secp224k1 are actually very close to the worst case.
             */
            if( ++count > 30 )
                return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
        }
        while( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
   d9d6c:	2800      	cmp	r0, #0
   d9d6e:	dae1      	bge.n	d9d34 <mbedtls_ecp_gen_privkey+0x28>
   d9d70:	e004      	b.n	d9d7c <mbedtls_ecp_gen_privkey+0x70>
int mbedtls_ecp_gen_privkey( const mbedtls_ecp_group *grp,
                     mbedtls_mpi *d,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
    int ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
   d9d72:	f8df 8010 	ldr.w	r8, [pc, #16]	; d9d84 <mbedtls_ecp_gen_privkey+0x78>
   d9d76:	e001      	b.n	d9d7c <mbedtls_ecp_gen_privkey+0x70>
             * For most curves, 1 try is enough with overwhelming probability,
             * since N starts with a lot of 1s in binary, but some curves
             * such as secp224k1 are actually very close to the worst case.
             */
            if( ++count > 30 )
                return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
   d9d78:	f8df 800c 	ldr.w	r8, [pc, #12]	; d9d88 <mbedtls_ecp_gen_privkey+0x7c>
    }
#endif /* ECP_SHORTWEIERSTRASS */

cleanup:
    return( ret );
}
   d9d7c:	4640      	mov	r0, r8
   d9d7e:	b003      	add	sp, #12
   d9d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9d84:	ffffb080 	.word	0xffffb080
   d9d88:	ffffb300 	.word	0xffffb300

000d9d8c <mbedtls_ecp_check_pub_priv>:

/*
 * Check a public-private key pair
 */
int mbedtls_ecp_check_pub_priv( const mbedtls_ecp_keypair *pub, const mbedtls_ecp_keypair *prv )
{
   d9d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    mbedtls_ecp_point Q;
    mbedtls_ecp_group grp;
    ECP_VALIDATE_RET( pub != NULL );
    ECP_VALIDATE_RET( prv != NULL );

    if( pub->grp.id == MBEDTLS_ECP_DP_NONE ||
   d9d90:	7803      	ldrb	r3, [r0, #0]

/*
 * Check a public-private key pair
 */
int mbedtls_ecp_check_pub_priv( const mbedtls_ecp_keypair *pub, const mbedtls_ecp_keypair *prv )
{
   d9d92:	b0aa      	sub	sp, #168	; 0xa8
   d9d94:	4605      	mov	r5, r0
   d9d96:	460c      	mov	r4, r1
    ECP_VALIDATE_RET( prv != NULL );

    if( pub->grp.id == MBEDTLS_ECP_DP_NONE ||
        pub->grp.id != prv->grp.id ||
        mbedtls_mpi_cmp_mpi( &pub->Q.X, &prv->Q.X ) ||
        mbedtls_mpi_cmp_mpi( &pub->Q.Y, &prv->Q.Y ) ||
   d9d98:	2b00      	cmp	r3, #0
   d9d9a:	d049      	beq.n	d9e30 <mbedtls_ecp_check_pub_priv+0xa4>
    mbedtls_ecp_point Q;
    mbedtls_ecp_group grp;
    ECP_VALIDATE_RET( pub != NULL );
    ECP_VALIDATE_RET( prv != NULL );

    if( pub->grp.id == MBEDTLS_ECP_DP_NONE ||
   d9d9c:	780a      	ldrb	r2, [r1, #0]
   d9d9e:	429a      	cmp	r2, r3
   d9da0:	d146      	bne.n	d9e30 <mbedtls_ecp_check_pub_priv+0xa4>
        pub->grp.id != prv->grp.id ||
        mbedtls_mpi_cmp_mpi( &pub->Q.X, &prv->Q.X ) ||
   d9da2:	f101 0688 	add.w	r6, r1, #136	; 0x88
   d9da6:	4631      	mov	r1, r6
   d9da8:	3088      	adds	r0, #136	; 0x88
   d9daa:	f007 fa9f 	bl	e12ec <mbedtls_mpi_cmp_mpi>
    mbedtls_ecp_group grp;
    ECP_VALIDATE_RET( pub != NULL );
    ECP_VALIDATE_RET( prv != NULL );

    if( pub->grp.id == MBEDTLS_ECP_DP_NONE ||
        pub->grp.id != prv->grp.id ||
   d9dae:	2800      	cmp	r0, #0
   d9db0:	d13e      	bne.n	d9e30 <mbedtls_ecp_check_pub_priv+0xa4>
        mbedtls_mpi_cmp_mpi( &pub->Q.X, &prv->Q.X ) ||
        mbedtls_mpi_cmp_mpi( &pub->Q.Y, &prv->Q.Y ) ||
   d9db2:	f104 0794 	add.w	r7, r4, #148	; 0x94
   d9db6:	4639      	mov	r1, r7
   d9db8:	f105 0094 	add.w	r0, r5, #148	; 0x94
   d9dbc:	f007 fa96 	bl	e12ec <mbedtls_mpi_cmp_mpi>
    ECP_VALIDATE_RET( pub != NULL );
    ECP_VALIDATE_RET( prv != NULL );

    if( pub->grp.id == MBEDTLS_ECP_DP_NONE ||
        pub->grp.id != prv->grp.id ||
        mbedtls_mpi_cmp_mpi( &pub->Q.X, &prv->Q.X ) ||
   d9dc0:	2800      	cmp	r0, #0
   d9dc2:	d135      	bne.n	d9e30 <mbedtls_ecp_check_pub_priv+0xa4>
        mbedtls_mpi_cmp_mpi( &pub->Q.Y, &prv->Q.Y ) ||
        mbedtls_mpi_cmp_mpi( &pub->Q.Z, &prv->Q.Z ) )
   d9dc4:	f104 08a0 	add.w	r8, r4, #160	; 0xa0
   d9dc8:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
   d9dcc:	4641      	mov	r1, r8
   d9dce:	f007 fa8d 	bl	e12ec <mbedtls_mpi_cmp_mpi>
    ECP_VALIDATE_RET( prv != NULL );

    if( pub->grp.id == MBEDTLS_ECP_DP_NONE ||
        pub->grp.id != prv->grp.id ||
        mbedtls_mpi_cmp_mpi( &pub->Q.X, &prv->Q.X ) ||
        mbedtls_mpi_cmp_mpi( &pub->Q.Y, &prv->Q.Y ) ||
   d9dd2:	4605      	mov	r5, r0
   d9dd4:	bb60      	cbnz	r0, d9e30 <mbedtls_ecp_check_pub_priv+0xa4>
        mbedtls_mpi_cmp_mpi( &pub->Q.Z, &prv->Q.Z ) )
    {
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
    }

    mbedtls_ecp_point_init( &Q );
   d9dd6:	a802      	add	r0, sp, #8
   d9dd8:	f7ff f824 	bl	d8e24 <mbedtls_ecp_point_init>
    mbedtls_ecp_group_init( &grp );
   d9ddc:	a80b      	add	r0, sp, #44	; 0x2c
   d9dde:	f7ff f82f 	bl	d8e40 <mbedtls_ecp_group_init>

    /* mbedtls_ecp_mul() needs a non-const group... */
    mbedtls_ecp_group_copy( &grp, &prv->grp );
   d9de2:	4621      	mov	r1, r4
   d9de4:	a80b      	add	r0, sp, #44	; 0x2c
   d9de6:	f7ff f8c0 	bl	d8f6a <mbedtls_ecp_group_copy>

    /* Also checks d is valid */
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul( &grp, &Q, &prv->d, &prv->grp.G, NULL, NULL ) );
   d9dea:	f104 0328 	add.w	r3, r4, #40	; 0x28
   d9dee:	f104 027c 	add.w	r2, r4, #124	; 0x7c
   d9df2:	9501      	str	r5, [sp, #4]
   d9df4:	9500      	str	r5, [sp, #0]
   d9df6:	a902      	add	r1, sp, #8
   d9df8:	a80b      	add	r0, sp, #44	; 0x2c
   d9dfa:	f7ff ff03 	bl	d9c04 <mbedtls_ecp_mul>
   d9dfe:	4604      	mov	r4, r0
   d9e00:	b970      	cbnz	r0, d9e20 <mbedtls_ecp_check_pub_priv+0x94>

    if( mbedtls_mpi_cmp_mpi( &Q.X, &prv->Q.X ) ||
   d9e02:	4631      	mov	r1, r6
   d9e04:	a802      	add	r0, sp, #8
   d9e06:	f007 fa71 	bl	e12ec <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_mpi( &Q.Y, &prv->Q.Y ) ||
   d9e0a:	b998      	cbnz	r0, d9e34 <mbedtls_ecp_check_pub_priv+0xa8>
   d9e0c:	4639      	mov	r1, r7
   d9e0e:	a805      	add	r0, sp, #20
   d9e10:	f007 fa6c 	bl	e12ec <mbedtls_mpi_cmp_mpi>
    mbedtls_ecp_group_copy( &grp, &prv->grp );

    /* Also checks d is valid */
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul( &grp, &Q, &prv->d, &prv->grp.G, NULL, NULL ) );

    if( mbedtls_mpi_cmp_mpi( &Q.X, &prv->Q.X ) ||
   d9e14:	b970      	cbnz	r0, d9e34 <mbedtls_ecp_check_pub_priv+0xa8>
        mbedtls_mpi_cmp_mpi( &Q.Y, &prv->Q.Y ) ||
        mbedtls_mpi_cmp_mpi( &Q.Z, &prv->Q.Z ) )
   d9e16:	4641      	mov	r1, r8
   d9e18:	a808      	add	r0, sp, #32
   d9e1a:	f007 fa67 	bl	e12ec <mbedtls_mpi_cmp_mpi>

    /* Also checks d is valid */
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul( &grp, &Q, &prv->d, &prv->grp.G, NULL, NULL ) );

    if( mbedtls_mpi_cmp_mpi( &Q.X, &prv->Q.X ) ||
        mbedtls_mpi_cmp_mpi( &Q.Y, &prv->Q.Y ) ||
   d9e1e:	b948      	cbnz	r0, d9e34 <mbedtls_ecp_check_pub_priv+0xa8>
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
        goto cleanup;
    }

cleanup:
    mbedtls_ecp_point_free( &Q );
   d9e20:	a802      	add	r0, sp, #8
   d9e22:	f7ff f83c 	bl	d8e9e <mbedtls_ecp_point_free>
    mbedtls_ecp_group_free( &grp );
   d9e26:	a80b      	add	r0, sp, #44	; 0x2c
   d9e28:	f7ff f849 	bl	d8ebe <mbedtls_ecp_group_free>

    return( ret );
   d9e2c:	4620      	mov	r0, r4
   d9e2e:	e003      	b.n	d9e38 <mbedtls_ecp_check_pub_priv+0xac>
        pub->grp.id != prv->grp.id ||
        mbedtls_mpi_cmp_mpi( &pub->Q.X, &prv->Q.X ) ||
        mbedtls_mpi_cmp_mpi( &pub->Q.Y, &prv->Q.Y ) ||
        mbedtls_mpi_cmp_mpi( &pub->Q.Z, &prv->Q.Z ) )
    {
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   d9e30:	4803      	ldr	r0, [pc, #12]	; (d9e40 <mbedtls_ecp_check_pub_priv+0xb4>)
   d9e32:	e001      	b.n	d9e38 <mbedtls_ecp_check_pub_priv+0xac>

    if( mbedtls_mpi_cmp_mpi( &Q.X, &prv->Q.X ) ||
        mbedtls_mpi_cmp_mpi( &Q.Y, &prv->Q.Y ) ||
        mbedtls_mpi_cmp_mpi( &Q.Z, &prv->Q.Z ) )
    {
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
   d9e34:	4c02      	ldr	r4, [pc, #8]	; (d9e40 <mbedtls_ecp_check_pub_priv+0xb4>)
   d9e36:	e7f3      	b.n	d9e20 <mbedtls_ecp_check_pub_priv+0x94>
cleanup:
    mbedtls_ecp_point_free( &Q );
    mbedtls_ecp_group_free( &grp );

    return( ret );
}
   d9e38:	b02a      	add	sp, #168	; 0xa8
   d9e3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d9e3e:	bf00      	nop
   d9e40:	ffffb080 	.word	0xffffb080

000d9e44 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf>:
        { NULL, 0, NULL, NULL },
        MBEDTLS_MD_NONE, MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_sig_alg_t, sig_alg, oid_sig_alg)
   d9e44:	b538      	push	{r3, r4, r5, lr}
   d9e46:	4605      	mov	r5, r0
   d9e48:	b160      	cbz	r0, d9e64 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x20>
   d9e4a:	4c08      	ldr	r4, [pc, #32]	; (d9e6c <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x28>)
   d9e4c:	6820      	ldr	r0, [r4, #0]
   d9e4e:	b158      	cbz	r0, d9e68 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x24>
   d9e50:	6862      	ldr	r2, [r4, #4]
   d9e52:	686b      	ldr	r3, [r5, #4]
   d9e54:	429a      	cmp	r2, r3
   d9e56:	d103      	bne.n	d9e60 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x1c>
   d9e58:	68a9      	ldr	r1, [r5, #8]
   d9e5a:	f00f fe1d 	bl	e9a98 <memcmp>
   d9e5e:	b110      	cbz	r0, d9e66 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x22>
   d9e60:	3414      	adds	r4, #20
   d9e62:	e7f3      	b.n	d9e4c <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x8>
   d9e64:	bd38      	pop	{r3, r4, r5, pc}
   d9e66:	4620      	mov	r0, r4
   d9e68:	bd38      	pop	{r3, r4, r5, pc}
   d9e6a:	bf00      	nop
   d9e6c:	000ed828 	.word	0x000ed828

000d9e70 <mbedtls_oid_get_attr_short_name>:
        NULL,
    }
};

FN_OID_TYPED_FROM_ASN1(oid_x520_attr_t, x520_attr, oid_x520_attr_type)
FN_OID_GET_ATTR1(mbedtls_oid_get_attr_short_name, oid_x520_attr_t, x520_attr, const char *, short_name)
   d9e70:	b570      	push	{r4, r5, r6, lr}
   d9e72:	460e      	mov	r6, r1
        { NULL, 0, NULL, NULL },
        NULL,
    }
};

FN_OID_TYPED_FROM_ASN1(oid_x520_attr_t, x520_attr, oid_x520_attr_type)
   d9e74:	4605      	mov	r5, r0
   d9e76:	b160      	cbz	r0, d9e92 <mbedtls_oid_get_attr_short_name+0x22>
   d9e78:	4c09      	ldr	r4, [pc, #36]	; (d9ea0 <mbedtls_oid_get_attr_short_name+0x30>)
   d9e7a:	6820      	ldr	r0, [r4, #0]
   d9e7c:	b148      	cbz	r0, d9e92 <mbedtls_oid_get_attr_short_name+0x22>
   d9e7e:	6862      	ldr	r2, [r4, #4]
   d9e80:	686b      	ldr	r3, [r5, #4]
   d9e82:	429a      	cmp	r2, r3
   d9e84:	d103      	bne.n	d9e8e <mbedtls_oid_get_attr_short_name+0x1e>
   d9e86:	68a9      	ldr	r1, [r5, #8]
   d9e88:	f00f fe06 	bl	e9a98 <memcmp>
   d9e8c:	b120      	cbz	r0, d9e98 <mbedtls_oid_get_attr_short_name+0x28>
   d9e8e:	3414      	adds	r4, #20
   d9e90:	e7f3      	b.n	d9e7a <mbedtls_oid_get_attr_short_name+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_attr_short_name, oid_x520_attr_t, x520_attr, const char *, short_name)
   d9e92:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   d9e96:	bd70      	pop	{r4, r5, r6, pc}
   d9e98:	6923      	ldr	r3, [r4, #16]
   d9e9a:	6033      	str	r3, [r6, #0]
   d9e9c:	bd70      	pop	{r4, r5, r6, pc}
   d9e9e:	bf00      	nop
   d9ea0:	000ecc0c 	.word	0x000ecc0c

000d9ea4 <mbedtls_oid_get_x509_ext_type>:
        0,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_x509_ext_t, x509_ext, oid_x509_ext)
FN_OID_GET_ATTR1(mbedtls_oid_get_x509_ext_type, oid_x509_ext_t, x509_ext, int, ext_type)
   d9ea4:	b570      	push	{r4, r5, r6, lr}
   d9ea6:	460e      	mov	r6, r1
        { NULL, 0, NULL, NULL },
        0,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_x509_ext_t, x509_ext, oid_x509_ext)
   d9ea8:	4605      	mov	r5, r0
   d9eaa:	b160      	cbz	r0, d9ec6 <mbedtls_oid_get_x509_ext_type+0x22>
   d9eac:	4c09      	ldr	r4, [pc, #36]	; (d9ed4 <mbedtls_oid_get_x509_ext_type+0x30>)
   d9eae:	6820      	ldr	r0, [r4, #0]
   d9eb0:	b148      	cbz	r0, d9ec6 <mbedtls_oid_get_x509_ext_type+0x22>
   d9eb2:	6862      	ldr	r2, [r4, #4]
   d9eb4:	686b      	ldr	r3, [r5, #4]
   d9eb6:	429a      	cmp	r2, r3
   d9eb8:	d103      	bne.n	d9ec2 <mbedtls_oid_get_x509_ext_type+0x1e>
   d9eba:	68a9      	ldr	r1, [r5, #8]
   d9ebc:	f00f fdec 	bl	e9a98 <memcmp>
   d9ec0:	b120      	cbz	r0, d9ecc <mbedtls_oid_get_x509_ext_type+0x28>
   d9ec2:	3414      	adds	r4, #20
   d9ec4:	e7f3      	b.n	d9eae <mbedtls_oid_get_x509_ext_type+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_x509_ext_type, oid_x509_ext_t, x509_ext, int, ext_type)
   d9ec6:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   d9eca:	bd70      	pop	{r4, r5, r6, pc}
   d9ecc:	6923      	ldr	r3, [r4, #16]
   d9ece:	6033      	str	r3, [r6, #0]
   d9ed0:	bd70      	pop	{r4, r5, r6, pc}
   d9ed2:	bf00      	nop
   d9ed4:	000ed9a4 	.word	0x000ed9a4

000d9ed8 <mbedtls_oid_get_extended_key_usage>:
    { ADD_LEN( MBEDTLS_OID_OCSP_SIGNING ),     "id-kp-OCSPSigning",     "OCSP Signing" },
    { NULL, 0, NULL, NULL },
};

FN_OID_TYPED_FROM_ASN1(mbedtls_oid_descriptor_t, ext_key_usage, oid_ext_key_usage)
FN_OID_GET_ATTR1(mbedtls_oid_get_extended_key_usage, mbedtls_oid_descriptor_t, ext_key_usage, const char *, description)
   d9ed8:	b570      	push	{r4, r5, r6, lr}
   d9eda:	460e      	mov	r6, r1
    { ADD_LEN( MBEDTLS_OID_TIME_STAMPING ),    "id-kp-timeStamping",    "Time Stamping" },
    { ADD_LEN( MBEDTLS_OID_OCSP_SIGNING ),     "id-kp-OCSPSigning",     "OCSP Signing" },
    { NULL, 0, NULL, NULL },
};

FN_OID_TYPED_FROM_ASN1(mbedtls_oid_descriptor_t, ext_key_usage, oid_ext_key_usage)
   d9edc:	4605      	mov	r5, r0
   d9ede:	b160      	cbz	r0, d9efa <mbedtls_oid_get_extended_key_usage+0x22>
   d9ee0:	4c09      	ldr	r4, [pc, #36]	; (d9f08 <mbedtls_oid_get_extended_key_usage+0x30>)
   d9ee2:	6820      	ldr	r0, [r4, #0]
   d9ee4:	b148      	cbz	r0, d9efa <mbedtls_oid_get_extended_key_usage+0x22>
   d9ee6:	6862      	ldr	r2, [r4, #4]
   d9ee8:	686b      	ldr	r3, [r5, #4]
   d9eea:	429a      	cmp	r2, r3
   d9eec:	d103      	bne.n	d9ef6 <mbedtls_oid_get_extended_key_usage+0x1e>
   d9eee:	68a9      	ldr	r1, [r5, #8]
   d9ef0:	f00f fdd2 	bl	e9a98 <memcmp>
   d9ef4:	b120      	cbz	r0, d9f00 <mbedtls_oid_get_extended_key_usage+0x28>
   d9ef6:	3410      	adds	r4, #16
   d9ef8:	e7f3      	b.n	d9ee2 <mbedtls_oid_get_extended_key_usage+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_extended_key_usage, mbedtls_oid_descriptor_t, ext_key_usage, const char *, description)
   d9efa:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   d9efe:	bd70      	pop	{r4, r5, r6, pc}
   d9f00:	68e3      	ldr	r3, [r4, #12]
   d9f02:	6033      	str	r3, [r6, #0]
   d9f04:	bd70      	pop	{r4, r5, r6, pc}
   d9f06:	bf00      	nop
   d9f08:	000ecd9c 	.word	0x000ecd9c

000d9f0c <mbedtls_oid_get_sig_alg_desc>:
        MBEDTLS_MD_NONE, MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_sig_alg_t, sig_alg, oid_sig_alg)
FN_OID_GET_DESCRIPTOR_ATTR1(mbedtls_oid_get_sig_alg_desc, oid_sig_alg_t, sig_alg, const char *, description)
   d9f0c:	b510      	push	{r4, lr}
   d9f0e:	460c      	mov	r4, r1
   d9f10:	f7ff ff98 	bl	d9e44 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf>
   d9f14:	b118      	cbz	r0, d9f1e <mbedtls_oid_get_sig_alg_desc+0x12>
   d9f16:	68c3      	ldr	r3, [r0, #12]
   d9f18:	6023      	str	r3, [r4, #0]
   d9f1a:	2000      	movs	r0, #0
   d9f1c:	bd10      	pop	{r4, pc}
   d9f1e:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   d9f22:	bd10      	pop	{r4, pc}

000d9f24 <mbedtls_oid_get_sig_alg>:
FN_OID_GET_ATTR2(mbedtls_oid_get_sig_alg, oid_sig_alg_t, sig_alg, mbedtls_md_type_t, md_alg, mbedtls_pk_type_t, pk_alg)
   d9f24:	b538      	push	{r3, r4, r5, lr}
   d9f26:	460d      	mov	r5, r1
   d9f28:	4614      	mov	r4, r2
   d9f2a:	f7ff ff8b 	bl	d9e44 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf>
   d9f2e:	b128      	cbz	r0, d9f3c <mbedtls_oid_get_sig_alg+0x18>
   d9f30:	7c03      	ldrb	r3, [r0, #16]
   d9f32:	702b      	strb	r3, [r5, #0]
   d9f34:	7c43      	ldrb	r3, [r0, #17]
   d9f36:	7023      	strb	r3, [r4, #0]
   d9f38:	2000      	movs	r0, #0
   d9f3a:	bd38      	pop	{r3, r4, r5, pc}
   d9f3c:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   d9f40:	bd38      	pop	{r3, r4, r5, pc}
	...

000d9f44 <mbedtls_oid_get_pk_alg>:
        MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
   d9f44:	b570      	push	{r4, r5, r6, lr}
   d9f46:	460e      	mov	r6, r1
        { NULL, 0, NULL, NULL },
        MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
   d9f48:	4605      	mov	r5, r0
   d9f4a:	b160      	cbz	r0, d9f66 <mbedtls_oid_get_pk_alg+0x22>
   d9f4c:	4c09      	ldr	r4, [pc, #36]	; (d9f74 <mbedtls_oid_get_pk_alg+0x30>)
   d9f4e:	6820      	ldr	r0, [r4, #0]
   d9f50:	b148      	cbz	r0, d9f66 <mbedtls_oid_get_pk_alg+0x22>
   d9f52:	6862      	ldr	r2, [r4, #4]
   d9f54:	686b      	ldr	r3, [r5, #4]
   d9f56:	429a      	cmp	r2, r3
   d9f58:	d103      	bne.n	d9f62 <mbedtls_oid_get_pk_alg+0x1e>
   d9f5a:	68a9      	ldr	r1, [r5, #8]
   d9f5c:	f00f fd9c 	bl	e9a98 <memcmp>
   d9f60:	b120      	cbz	r0, d9f6c <mbedtls_oid_get_pk_alg+0x28>
   d9f62:	3414      	adds	r4, #20
   d9f64:	e7f3      	b.n	d9f4e <mbedtls_oid_get_pk_alg+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
   d9f66:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   d9f6a:	bd70      	pop	{r4, r5, r6, pc}
   d9f6c:	7c23      	ldrb	r3, [r4, #16]
   d9f6e:	7033      	strb	r3, [r6, #0]
   d9f70:	bd70      	pop	{r4, r5, r6, pc}
   d9f72:	bf00      	nop
   d9f74:	000ece0c 	.word	0x000ece0c

000d9f78 <mbedtls_oid_get_ec_grp>:
        MBEDTLS_ECP_DP_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_ecp_grp_t, grp_id, oid_ecp_grp)
FN_OID_GET_ATTR1(mbedtls_oid_get_ec_grp, oid_ecp_grp_t, grp_id, mbedtls_ecp_group_id, grp_id)
   d9f78:	b570      	push	{r4, r5, r6, lr}
   d9f7a:	460e      	mov	r6, r1
        { NULL, 0, NULL, NULL },
        MBEDTLS_ECP_DP_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_ecp_grp_t, grp_id, oid_ecp_grp)
   d9f7c:	4605      	mov	r5, r0
   d9f7e:	b160      	cbz	r0, d9f9a <mbedtls_oid_get_ec_grp+0x22>
   d9f80:	4c09      	ldr	r4, [pc, #36]	; (d9fa8 <mbedtls_oid_get_ec_grp+0x30>)
   d9f82:	6820      	ldr	r0, [r4, #0]
   d9f84:	b148      	cbz	r0, d9f9a <mbedtls_oid_get_ec_grp+0x22>
   d9f86:	6862      	ldr	r2, [r4, #4]
   d9f88:	686b      	ldr	r3, [r5, #4]
   d9f8a:	429a      	cmp	r2, r3
   d9f8c:	d103      	bne.n	d9f96 <mbedtls_oid_get_ec_grp+0x1e>
   d9f8e:	68a9      	ldr	r1, [r5, #8]
   d9f90:	f00f fd82 	bl	e9a98 <memcmp>
   d9f94:	b120      	cbz	r0, d9fa0 <mbedtls_oid_get_ec_grp+0x28>
   d9f96:	3414      	adds	r4, #20
   d9f98:	e7f3      	b.n	d9f82 <mbedtls_oid_get_ec_grp+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_ec_grp, oid_ecp_grp_t, grp_id, mbedtls_ecp_group_id, grp_id)
   d9f9a:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   d9f9e:	bd70      	pop	{r4, r5, r6, pc}
   d9fa0:	7c23      	ldrb	r3, [r4, #16]
   d9fa2:	7033      	strb	r3, [r6, #0]
   d9fa4:	bd70      	pop	{r4, r5, r6, pc}
   d9fa6:	bf00      	nop
   d9fa8:	000ece98 	.word	0x000ece98

000d9fac <mbedtls_oid_get_cipher_alg>:
        MBEDTLS_CIPHER_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_cipher_alg_t, cipher_alg, oid_cipher_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_cipher_alg, oid_cipher_alg_t, cipher_alg, mbedtls_cipher_type_t, cipher_alg)
   d9fac:	b570      	push	{r4, r5, r6, lr}
   d9fae:	460e      	mov	r6, r1
        { NULL, 0, NULL, NULL },
        MBEDTLS_CIPHER_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_cipher_alg_t, cipher_alg, oid_cipher_alg)
   d9fb0:	4605      	mov	r5, r0
   d9fb2:	b160      	cbz	r0, d9fce <mbedtls_oid_get_cipher_alg+0x22>
   d9fb4:	4c09      	ldr	r4, [pc, #36]	; (d9fdc <mbedtls_oid_get_cipher_alg+0x30>)
   d9fb6:	6820      	ldr	r0, [r4, #0]
   d9fb8:	b148      	cbz	r0, d9fce <mbedtls_oid_get_cipher_alg+0x22>
   d9fba:	6862      	ldr	r2, [r4, #4]
   d9fbc:	686b      	ldr	r3, [r5, #4]
   d9fbe:	429a      	cmp	r2, r3
   d9fc0:	d103      	bne.n	d9fca <mbedtls_oid_get_cipher_alg+0x1e>
   d9fc2:	68a9      	ldr	r1, [r5, #8]
   d9fc4:	f00f fd68 	bl	e9a98 <memcmp>
   d9fc8:	b120      	cbz	r0, d9fd4 <mbedtls_oid_get_cipher_alg+0x28>
   d9fca:	3414      	adds	r4, #20
   d9fcc:	e7f3      	b.n	d9fb6 <mbedtls_oid_get_cipher_alg+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_cipher_alg, oid_cipher_alg_t, cipher_alg, mbedtls_cipher_type_t, cipher_alg)
   d9fce:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   d9fd2:	bd70      	pop	{r4, r5, r6, pc}
   d9fd4:	7c23      	ldrb	r3, [r4, #16]
   d9fd6:	7033      	strb	r3, [r6, #0]
   d9fd8:	bd70      	pop	{r4, r5, r6, pc}
   d9fda:	bf00      	nop
   d9fdc:	000ece5c 	.word	0x000ece5c

000d9fe0 <mbedtls_oid_get_md_alg>:
        MBEDTLS_MD_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_md_alg_t, md_alg, oid_md_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_md_alg, oid_md_alg_t, md_alg, mbedtls_md_type_t, md_alg)
   d9fe0:	b570      	push	{r4, r5, r6, lr}
   d9fe2:	460e      	mov	r6, r1
        { NULL, 0, NULL, NULL },
        MBEDTLS_MD_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_md_alg_t, md_alg, oid_md_alg)
   d9fe4:	4605      	mov	r5, r0
   d9fe6:	b160      	cbz	r0, da002 <mbedtls_oid_get_md_alg+0x22>
   d9fe8:	4c09      	ldr	r4, [pc, #36]	; (da010 <mbedtls_oid_get_md_alg+0x30>)
   d9fea:	6820      	ldr	r0, [r4, #0]
   d9fec:	b148      	cbz	r0, da002 <mbedtls_oid_get_md_alg+0x22>
   d9fee:	6862      	ldr	r2, [r4, #4]
   d9ff0:	686b      	ldr	r3, [r5, #4]
   d9ff2:	429a      	cmp	r2, r3
   d9ff4:	d103      	bne.n	d9ffe <mbedtls_oid_get_md_alg+0x1e>
   d9ff6:	68a9      	ldr	r1, [r5, #8]
   d9ff8:	f00f fd4e 	bl	e9a98 <memcmp>
   d9ffc:	b120      	cbz	r0, da008 <mbedtls_oid_get_md_alg+0x28>
   d9ffe:	3414      	adds	r4, #20
   da000:	e7f3      	b.n	d9fea <mbedtls_oid_get_md_alg+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_md_alg, oid_md_alg_t, md_alg, mbedtls_md_type_t, md_alg)
   da002:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   da006:	bd70      	pop	{r4, r5, r6, pc}
   da008:	7c23      	ldrb	r3, [r4, #16]
   da00a:	7033      	strb	r3, [r6, #0]
   da00c:	bd70      	pop	{r4, r5, r6, pc}
   da00e:	bf00      	nop
   da010:	000ed7b0 	.word	0x000ed7b0

000da014 <mbedtls_oid_get_oid_by_md>:
FN_OID_GET_OID_BY_ATTR1(mbedtls_oid_get_oid_by_md, oid_md_alg_t, oid_md_alg, mbedtls_md_type_t, md_alg)
   da014:	b530      	push	{r4, r5, lr}
   da016:	4b08      	ldr	r3, [pc, #32]	; (da038 <mbedtls_oid_get_oid_by_md+0x24>)
   da018:	681c      	ldr	r4, [r3, #0]
   da01a:	b14c      	cbz	r4, da030 <mbedtls_oid_get_oid_by_md+0x1c>
   da01c:	7c1d      	ldrb	r5, [r3, #16]
   da01e:	4285      	cmp	r5, r0
   da020:	d104      	bne.n	da02c <mbedtls_oid_get_oid_by_md+0x18>
   da022:	600c      	str	r4, [r1, #0]
   da024:	685b      	ldr	r3, [r3, #4]
   da026:	6013      	str	r3, [r2, #0]
   da028:	2000      	movs	r0, #0
   da02a:	bd30      	pop	{r4, r5, pc}
   da02c:	3314      	adds	r3, #20
   da02e:	e7f3      	b.n	da018 <mbedtls_oid_get_oid_by_md+0x4>
   da030:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   da034:	bd30      	pop	{r4, r5, pc}
   da036:	bf00      	nop
   da038:	000ed7b0 	.word	0x000ed7b0

000da03c <mbedtls_oid_get_md_hmac>:
        MBEDTLS_MD_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_md_hmac_t, md_hmac, oid_md_hmac)
FN_OID_GET_ATTR1(mbedtls_oid_get_md_hmac, oid_md_hmac_t, md_hmac, mbedtls_md_type_t, md_hmac)
   da03c:	b570      	push	{r4, r5, r6, lr}
   da03e:	460e      	mov	r6, r1
        { NULL, 0, NULL, NULL },
        MBEDTLS_MD_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_md_hmac_t, md_hmac, oid_md_hmac)
   da040:	4605      	mov	r5, r0
   da042:	b160      	cbz	r0, da05e <mbedtls_oid_get_md_hmac+0x22>
   da044:	4c09      	ldr	r4, [pc, #36]	; (da06c <mbedtls_oid_get_md_hmac+0x30>)
   da046:	6820      	ldr	r0, [r4, #0]
   da048:	b148      	cbz	r0, da05e <mbedtls_oid_get_md_hmac+0x22>
   da04a:	6862      	ldr	r2, [r4, #4]
   da04c:	686b      	ldr	r3, [r5, #4]
   da04e:	429a      	cmp	r2, r3
   da050:	d103      	bne.n	da05a <mbedtls_oid_get_md_hmac+0x1e>
   da052:	68a9      	ldr	r1, [r5, #8]
   da054:	f00f fd20 	bl	e9a98 <memcmp>
   da058:	b120      	cbz	r0, da064 <mbedtls_oid_get_md_hmac+0x28>
   da05a:	3414      	adds	r4, #20
   da05c:	e7f3      	b.n	da046 <mbedtls_oid_get_md_hmac+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_md_hmac, oid_md_hmac_t, md_hmac, mbedtls_md_type_t, md_hmac)
   da05e:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   da062:	bd70      	pop	{r4, r5, r6, pc}
   da064:	7c23      	ldrb	r3, [r4, #16]
   da066:	7033      	strb	r3, [r6, #0]
   da068:	bd70      	pop	{r4, r5, r6, pc}
   da06a:	bf00      	nop
   da06c:	000ed92c 	.word	0x000ed92c

000da070 <mbedtls_oid_get_pkcs12_pbe_alg>:
        MBEDTLS_MD_NONE, MBEDTLS_CIPHER_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, oid_pkcs12_pbe_alg)
FN_OID_GET_ATTR2(mbedtls_oid_get_pkcs12_pbe_alg, oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, mbedtls_md_type_t, md_alg, mbedtls_cipher_type_t, cipher_alg)
   da070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   da072:	460f      	mov	r7, r1
   da074:	4616      	mov	r6, r2
        { NULL, 0, NULL, NULL },
        MBEDTLS_MD_NONE, MBEDTLS_CIPHER_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, oid_pkcs12_pbe_alg)
   da076:	4605      	mov	r5, r0
   da078:	b160      	cbz	r0, da094 <mbedtls_oid_get_pkcs12_pbe_alg+0x24>
   da07a:	4c0a      	ldr	r4, [pc, #40]	; (da0a4 <mbedtls_oid_get_pkcs12_pbe_alg+0x34>)
   da07c:	6820      	ldr	r0, [r4, #0]
   da07e:	b148      	cbz	r0, da094 <mbedtls_oid_get_pkcs12_pbe_alg+0x24>
   da080:	6862      	ldr	r2, [r4, #4]
   da082:	686b      	ldr	r3, [r5, #4]
   da084:	429a      	cmp	r2, r3
   da086:	d103      	bne.n	da090 <mbedtls_oid_get_pkcs12_pbe_alg+0x20>
   da088:	68a9      	ldr	r1, [r5, #8]
   da08a:	f00f fd05 	bl	e9a98 <memcmp>
   da08e:	b120      	cbz	r0, da09a <mbedtls_oid_get_pkcs12_pbe_alg+0x2a>
   da090:	3414      	adds	r4, #20
   da092:	e7f3      	b.n	da07c <mbedtls_oid_get_pkcs12_pbe_alg+0xc>
FN_OID_GET_ATTR2(mbedtls_oid_get_pkcs12_pbe_alg, oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, mbedtls_md_type_t, md_alg, mbedtls_cipher_type_t, cipher_alg)
   da094:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   da098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   da09a:	7c23      	ldrb	r3, [r4, #16]
   da09c:	703b      	strb	r3, [r7, #0]
   da09e:	7c63      	ldrb	r3, [r4, #17]
   da0a0:	7033      	strb	r3, [r6, #0]
   da0a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   da0a4:	000ed774 	.word	0x000ed774

000da0a8 <mbedtls_sha1_init>:

void mbedtls_sha1_init( mbedtls_sha1_context *ctx )
{
    SHA1_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_sha1_context ) );
   da0a8:	225c      	movs	r2, #92	; 0x5c
   da0aa:	2100      	movs	r1, #0
   da0ac:	f00f bd29 	b.w	e9b02 <memset>

000da0b0 <mbedtls_sha1_free>:
}

void mbedtls_sha1_free( mbedtls_sha1_context *ctx )
{
    if( ctx == NULL )
   da0b0:	b110      	cbz	r0, da0b8 <mbedtls_sha1_free+0x8>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_sha1_context ) );
   da0b2:	215c      	movs	r1, #92	; 0x5c
   da0b4:	f001 b8a2 	b.w	db1fc <mbedtls_platform_zeroize>
   da0b8:	4770      	bx	lr

000da0ba <mbedtls_sha1_clone>:
}

void mbedtls_sha1_clone( mbedtls_sha1_context *dst,
                         const mbedtls_sha1_context *src )
{
   da0ba:	b508      	push	{r3, lr}
    SHA1_VALIDATE( dst != NULL );
    SHA1_VALIDATE( src != NULL );

    *dst = *src;
   da0bc:	225c      	movs	r2, #92	; 0x5c
   da0be:	f00f fcfa 	bl	e9ab6 <memcpy>
   da0c2:	bd08      	pop	{r3, pc}

000da0c4 <mbedtls_sha1_starts_ret>:

/*
 * SHA-1 context setup
 */
int mbedtls_sha1_starts_ret( mbedtls_sha1_context *ctx )
{
   da0c4:	4603      	mov	r3, r0
    SHA1_VALIDATE_RET( ctx != NULL );

    ctx->total[0] = 0;
    ctx->total[1] = 0;

    ctx->state[0] = 0x67452301;
   da0c6:	4a0a      	ldr	r2, [pc, #40]	; (da0f0 <mbedtls_sha1_starts_ret+0x2c>)
   da0c8:	609a      	str	r2, [r3, #8]
    ctx->state[1] = 0xEFCDAB89;
   da0ca:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
   da0ce:	60da      	str	r2, [r3, #12]
    ctx->state[2] = 0x98BADCFE;
   da0d0:	f102 4229 	add.w	r2, r2, #2835349504	; 0xa9000000
   da0d4:	f5a2 1296 	sub.w	r2, r2, #1228800	; 0x12c000
   da0d8:	f6a2 628b 	subw	r2, r2, #3723	; 0xe8b
   da0dc:	611a      	str	r2, [r3, #16]
    ctx->state[3] = 0x10325476;
   da0de:	f1a2 3288 	sub.w	r2, r2, #2290649224	; 0x88888888
 */
int mbedtls_sha1_starts_ret( mbedtls_sha1_context *ctx )
{
    SHA1_VALIDATE_RET( ctx != NULL );

    ctx->total[0] = 0;
   da0e2:	2000      	movs	r0, #0
    ctx->total[1] = 0;

    ctx->state[0] = 0x67452301;
    ctx->state[1] = 0xEFCDAB89;
    ctx->state[2] = 0x98BADCFE;
    ctx->state[3] = 0x10325476;
   da0e4:	615a      	str	r2, [r3, #20]
    ctx->state[4] = 0xC3D2E1F0;
   da0e6:	4a03      	ldr	r2, [pc, #12]	; (da0f4 <mbedtls_sha1_starts_ret+0x30>)
 */
int mbedtls_sha1_starts_ret( mbedtls_sha1_context *ctx )
{
    SHA1_VALIDATE_RET( ctx != NULL );

    ctx->total[0] = 0;
   da0e8:	6018      	str	r0, [r3, #0]
    ctx->total[1] = 0;
   da0ea:	6058      	str	r0, [r3, #4]

    ctx->state[0] = 0x67452301;
    ctx->state[1] = 0xEFCDAB89;
    ctx->state[2] = 0x98BADCFE;
    ctx->state[3] = 0x10325476;
    ctx->state[4] = 0xC3D2E1F0;
   da0ec:	619a      	str	r2, [r3, #24]

    return( 0 );
}
   da0ee:	4770      	bx	lr
   da0f0:	67452301 	.word	0x67452301
   da0f4:	c3d2e1f0 	.word	0xc3d2e1f0

000da0f8 <mbedtls_internal_sha1_process>:
#endif

#if !defined(MBEDTLS_SHA1_PROCESS_ALT)
int mbedtls_internal_sha1_process( mbedtls_sha1_context *ctx,
                                   const unsigned char data[64] )
{
   da0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t temp, W[16], A, B, C, D, E;

    SHA1_VALIDATE_RET( ctx != NULL );
    SHA1_VALIDATE_RET( (const unsigned char *)data != NULL );

    GET_UINT32_BE( W[ 0], data,  0 );
   da0fc:	784b      	ldrb	r3, [r1, #1]
   da0fe:	780c      	ldrb	r4, [r1, #0]
    GET_UINT32_BE( W[ 1], data,  4 );
    GET_UINT32_BE( W[ 2], data,  8 );
   da100:	f891 9008 	ldrb.w	r9, [r1, #8]
    GET_UINT32_BE( W[ 3], data, 12 );
   da104:	f891 a00c 	ldrb.w	sl, [r1, #12]
    GET_UINT32_BE( W[ 4], data, 16 );
   da108:	7c0a      	ldrb	r2, [r1, #16]
    GET_UINT32_BE( W[ 5], data, 20 );
   da10a:	f891 8014 	ldrb.w	r8, [r1, #20]
    GET_UINT32_BE( W[ 6], data, 24 );
   da10e:	f891 c018 	ldrb.w	ip, [r1, #24]
    uint32_t temp, W[16], A, B, C, D, E;

    SHA1_VALIDATE_RET( ctx != NULL );
    SHA1_VALIDATE_RET( (const unsigned char *)data != NULL );

    GET_UINT32_BE( W[ 0], data,  0 );
   da112:	041b      	lsls	r3, r3, #16
   da114:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
   da118:	78cc      	ldrb	r4, [r1, #3]
   da11a:	4323      	orrs	r3, r4
   da11c:	788c      	ldrb	r4, [r1, #2]
#endif

#if !defined(MBEDTLS_SHA1_PROCESS_ALT)
int mbedtls_internal_sha1_process( mbedtls_sha1_context *ctx,
                                   const unsigned char data[64] )
{
   da11e:	b097      	sub	sp, #92	; 0x5c
    uint32_t temp, W[16], A, B, C, D, E;

    SHA1_VALIDATE_RET( ctx != NULL );
    SHA1_VALIDATE_RET( (const unsigned char *)data != NULL );

    GET_UINT32_BE( W[ 0], data,  0 );
   da120:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   da124:	9306      	str	r3, [sp, #24]
    GET_UINT32_BE( W[ 1], data,  4 );
   da126:	794b      	ldrb	r3, [r1, #5]
#endif

#if !defined(MBEDTLS_SHA1_PROCESS_ALT)
int mbedtls_internal_sha1_process( mbedtls_sha1_context *ctx,
                                   const unsigned char data[64] )
{
   da128:	9001      	str	r0, [sp, #4]

    SHA1_VALIDATE_RET( ctx != NULL );
    SHA1_VALIDATE_RET( (const unsigned char *)data != NULL );

    GET_UINT32_BE( W[ 0], data,  0 );
    GET_UINT32_BE( W[ 1], data,  4 );
   da12a:	7908      	ldrb	r0, [r1, #4]
   da12c:	041b      	lsls	r3, r3, #16
   da12e:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
   da132:	79c8      	ldrb	r0, [r1, #7]
   da134:	4303      	orrs	r3, r0
   da136:	7988      	ldrb	r0, [r1, #6]
   da138:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   da13c:	9307      	str	r3, [sp, #28]
    GET_UINT32_BE( W[ 2], data,  8 );
   da13e:	7a4b      	ldrb	r3, [r1, #9]
   da140:	041b      	lsls	r3, r3, #16
   da142:	ea43 6309 	orr.w	r3, r3, r9, lsl #24
   da146:	f891 900b 	ldrb.w	r9, [r1, #11]
   da14a:	ea43 0309 	orr.w	r3, r3, r9
   da14e:	f891 900a 	ldrb.w	r9, [r1, #10]
   da152:	ea43 2909 	orr.w	r9, r3, r9, lsl #8
    GET_UINT32_BE( W[ 3], data, 12 );
   da156:	7b4b      	ldrb	r3, [r1, #13]
   da158:	041b      	lsls	r3, r3, #16
   da15a:	ea43 630a 	orr.w	r3, r3, sl, lsl #24
   da15e:	f891 a00f 	ldrb.w	sl, [r1, #15]
   da162:	ea43 030a 	orr.w	r3, r3, sl
   da166:	f891 a00e 	ldrb.w	sl, [r1, #14]
   da16a:	ea43 2a0a 	orr.w	sl, r3, sl, lsl #8
    GET_UINT32_BE( W[ 4], data, 16 );
   da16e:	7c4b      	ldrb	r3, [r1, #17]
   da170:	041b      	lsls	r3, r3, #16
   da172:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   da176:	7cca      	ldrb	r2, [r1, #19]
   da178:	4313      	orrs	r3, r2
   da17a:	7c8a      	ldrb	r2, [r1, #18]
   da17c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   da180:	930e      	str	r3, [sp, #56]	; 0x38
    GET_UINT32_BE( W[ 5], data, 20 );
   da182:	7d4b      	ldrb	r3, [r1, #21]
   da184:	041b      	lsls	r3, r3, #16
   da186:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
   da18a:	f891 8017 	ldrb.w	r8, [r1, #23]
   da18e:	ea43 0308 	orr.w	r3, r3, r8
   da192:	f891 8016 	ldrb.w	r8, [r1, #22]
   da196:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
   da19a:	930f      	str	r3, [sp, #60]	; 0x3c
    GET_UINT32_BE( W[ 6], data, 24 );
   da19c:	7e4b      	ldrb	r3, [r1, #25]
   da19e:	041b      	lsls	r3, r3, #16
   da1a0:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
   da1a4:	f891 c01b 	ldrb.w	ip, [r1, #27]
    GET_UINT32_BE( W[ 7], data, 28 );
   da1a8:	f891 e01c 	ldrb.w	lr, [r1, #28]
    GET_UINT32_BE( W[ 8], data, 32 );
   da1ac:	f891 6020 	ldrb.w	r6, [r1, #32]
    GET_UINT32_BE( W[ 9], data, 36 );
   da1b0:	f891 2024 	ldrb.w	r2, [r1, #36]	; 0x24
    GET_UINT32_BE( W[10], data, 40 );
   da1b4:	f891 0028 	ldrb.w	r0, [r1, #40]	; 0x28
    GET_UINT32_BE( W[11], data, 44 );
    GET_UINT32_BE( W[12], data, 48 );
   da1b8:	f891 4030 	ldrb.w	r4, [r1, #48]	; 0x30
    GET_UINT32_BE( W[ 1], data,  4 );
    GET_UINT32_BE( W[ 2], data,  8 );
    GET_UINT32_BE( W[ 3], data, 12 );
    GET_UINT32_BE( W[ 4], data, 16 );
    GET_UINT32_BE( W[ 5], data, 20 );
    GET_UINT32_BE( W[ 6], data, 24 );
   da1bc:	ea43 030c 	orr.w	r3, r3, ip
   da1c0:	f891 c01a 	ldrb.w	ip, [r1, #26]
   da1c4:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
   da1c8:	9310      	str	r3, [sp, #64]	; 0x40
    GET_UINT32_BE( W[ 7], data, 28 );
   da1ca:	7f4b      	ldrb	r3, [r1, #29]
   da1cc:	041b      	lsls	r3, r3, #16
   da1ce:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
   da1d2:	f891 e01f 	ldrb.w	lr, [r1, #31]
   da1d6:	ea43 030e 	orr.w	r3, r3, lr
   da1da:	f891 e01e 	ldrb.w	lr, [r1, #30]
   da1de:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
   da1e2:	9313      	str	r3, [sp, #76]	; 0x4c
    GET_UINT32_BE( W[ 8], data, 32 );
   da1e4:	f891 3021 	ldrb.w	r3, [r1, #33]	; 0x21
   da1e8:	041b      	lsls	r3, r3, #16
   da1ea:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
   da1ee:	f891 6023 	ldrb.w	r6, [r1, #35]	; 0x23
   da1f2:	4333      	orrs	r3, r6
   da1f4:	f891 6022 	ldrb.w	r6, [r1, #34]	; 0x22
   da1f8:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
   da1fc:	9309      	str	r3, [sp, #36]	; 0x24
    GET_UINT32_BE( W[ 9], data, 36 );
   da1fe:	f891 3025 	ldrb.w	r3, [r1, #37]	; 0x25
   da202:	041b      	lsls	r3, r3, #16
   da204:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   da208:	f891 2027 	ldrb.w	r2, [r1, #39]	; 0x27
   da20c:	4313      	orrs	r3, r2
   da20e:	f891 2026 	ldrb.w	r2, [r1, #38]	; 0x26
   da212:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   da216:	930a      	str	r3, [sp, #40]	; 0x28
    GET_UINT32_BE( W[10], data, 40 );
   da218:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
    GET_UINT32_BE( W[11], data, 44 );
   da21c:	f891 202c 	ldrb.w	r2, [r1, #44]	; 0x2c
    GET_UINT32_BE( W[ 5], data, 20 );
    GET_UINT32_BE( W[ 6], data, 24 );
    GET_UINT32_BE( W[ 7], data, 28 );
    GET_UINT32_BE( W[ 8], data, 32 );
    GET_UINT32_BE( W[ 9], data, 36 );
    GET_UINT32_BE( W[10], data, 40 );
   da220:	041b      	lsls	r3, r3, #16
   da222:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
   da226:	f891 002b 	ldrb.w	r0, [r1, #43]	; 0x2b
   da22a:	4303      	orrs	r3, r0
   da22c:	f891 002a 	ldrb.w	r0, [r1, #42]	; 0x2a
   da230:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   da234:	930b      	str	r3, [sp, #44]	; 0x2c
    GET_UINT32_BE( W[11], data, 44 );
   da236:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
   da23a:	041b      	lsls	r3, r3, #16
   da23c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   da240:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
   da244:	4313      	orrs	r3, r2
   da246:	f891 202e 	ldrb.w	r2, [r1, #46]	; 0x2e
   da24a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   da24e:	930c      	str	r3, [sp, #48]	; 0x30
    GET_UINT32_BE( W[12], data, 48 );
   da250:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
   da254:	041b      	lsls	r3, r3, #16
   da256:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
   da25a:	f891 4033 	ldrb.w	r4, [r1, #51]	; 0x33
   da25e:	4323      	orrs	r3, r4
   da260:	f891 4032 	ldrb.w	r4, [r1, #50]	; 0x32
   da264:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   da268:	930d      	str	r3, [sp, #52]	; 0x34
    GET_UINT32_BE( W[13], data, 52 );
   da26a:	f891 3035 	ldrb.w	r3, [r1, #53]	; 0x35
   da26e:	f891 2034 	ldrb.w	r2, [r1, #52]	; 0x34
   da272:	041b      	lsls	r3, r3, #16
   da274:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   da278:	f891 2037 	ldrb.w	r2, [r1, #55]	; 0x37
   da27c:	4313      	orrs	r3, r2
   da27e:	f891 2036 	ldrb.w	r2, [r1, #54]	; 0x36
   da282:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   da286:	9302      	str	r3, [sp, #8]
    GET_UINT32_BE( W[14], data, 56 );
   da288:	f891 3039 	ldrb.w	r3, [r1, #57]	; 0x39
   da28c:	f891 2038 	ldrb.w	r2, [r1, #56]	; 0x38
   da290:	041b      	lsls	r3, r3, #16
   da292:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   da296:	f891 203b 	ldrb.w	r2, [r1, #59]	; 0x3b
   da29a:	4313      	orrs	r3, r2
   da29c:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
   da2a0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   da2a4:	9303      	str	r3, [sp, #12]
    GET_UINT32_BE( W[15], data, 60 );
   da2a6:	f891 303d 	ldrb.w	r3, [r1, #61]	; 0x3d
   da2aa:	f891 203c 	ldrb.w	r2, [r1, #60]	; 0x3c
   da2ae:	041b      	lsls	r3, r3, #16
   da2b0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   da2b4:	f891 203f 	ldrb.w	r2, [r1, #63]	; 0x3f
   da2b8:	f891 103e 	ldrb.w	r1, [r1, #62]	; 0x3e
   da2bc:	4313      	orrs	r3, r2
   da2be:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   da2c2:	9304      	str	r3, [sp, #16]
    {                                                           \
        (e) += S((a),5) + F((b),(c),(d)) + K + (x);             \
        (b) = S((b),30);                                        \
    } while( 0 )

    A = ctx->state[0];
   da2c4:	9b01      	ldr	r3, [sp, #4]
   da2c6:	689b      	ldr	r3, [r3, #8]
   da2c8:	9311      	str	r3, [sp, #68]	; 0x44
    B = ctx->state[1];
   da2ca:	9b01      	ldr	r3, [sp, #4]
   da2cc:	68db      	ldr	r3, [r3, #12]
   da2ce:	9314      	str	r3, [sp, #80]	; 0x50
    C = ctx->state[2];
   da2d0:	9b01      	ldr	r3, [sp, #4]
   da2d2:	691b      	ldr	r3, [r3, #16]
   da2d4:	9305      	str	r3, [sp, #20]
    D = ctx->state[3];
   da2d6:	9b01      	ldr	r3, [sp, #4]
   da2d8:	695b      	ldr	r3, [r3, #20]
   da2da:	9312      	str	r3, [sp, #72]	; 0x48
    E = ctx->state[4];
   da2dc:	9b01      	ldr	r3, [sp, #4]

#define F(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
#define K 0x5A827999

    P( A, B, C, D, E, W[0]  );
   da2de:	9a12      	ldr	r2, [sp, #72]	; 0x48

    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
   da2e0:	699b      	ldr	r3, [r3, #24]
   da2e2:	9315      	str	r3, [sp, #84]	; 0x54

#define F(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
#define K 0x5A827999

    P( A, B, C, D, E, W[0]  );
   da2e4:	9b05      	ldr	r3, [sp, #20]
   da2e6:	ea83 0002 	eor.w	r0, r3, r2
   da2ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
   da2ec:	9911      	ldr	r1, [sp, #68]	; 0x44
   da2ee:	4018      	ands	r0, r3
   da2f0:	4050      	eors	r0, r2
   da2f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
   da2f4:	4ade      	ldr	r2, [pc, #888]	; (da670 <mbedtls_internal_sha1_process+0x578>)
   da2f6:	4413      	add	r3, r2
   da2f8:	eb03 63f1 	add.w	r3, r3, r1, ror #27
   da2fc:	4418      	add	r0, r3
   da2fe:	9b06      	ldr	r3, [sp, #24]
   da300:	4418      	add	r0, r3
   da302:	9b14      	ldr	r3, [sp, #80]	; 0x50
   da304:	ea4f 05b3 	mov.w	r5, r3, ror #2
    P( E, A, B, C, D, W[1]  );
   da308:	9b05      	ldr	r3, [sp, #20]
   da30a:	ea83 0c05 	eor.w	ip, r3, r5
   da30e:	9b05      	ldr	r3, [sp, #20]
   da310:	ea0c 0c01 	and.w	ip, ip, r1
   da314:	ea8c 0c03 	eor.w	ip, ip, r3
   da318:	9b12      	ldr	r3, [sp, #72]	; 0x48
   da31a:	4413      	add	r3, r2
   da31c:	449c      	add	ip, r3
   da31e:	9b07      	ldr	r3, [sp, #28]
   da320:	ea4f 04b1 	mov.w	r4, r1, ror #2
   da324:	449c      	add	ip, r3
    P( D, E, A, B, C, W[2]  );
   da326:	9b05      	ldr	r3, [sp, #20]
   da328:	ea85 0804 	eor.w	r8, r5, r4

#define F(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
#define K 0x5A827999

    P( A, B, C, D, E, W[0]  );
    P( E, A, B, C, D, W[1]  );
   da32c:	eb0c 6cf0 	add.w	ip, ip, r0, ror #27
    P( D, E, A, B, C, W[2]  );
   da330:	ea08 0800 	and.w	r8, r8, r0
   da334:	4413      	add	r3, r2
   da336:	ea4f 00b0 	mov.w	r0, r0, ror #2
   da33a:	444b      	add	r3, r9
    P( C, D, E, A, B, W[3]  );
   da33c:	ea84 0100 	eor.w	r1, r4, r0
#define F(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
#define K 0x5A827999

    P( A, B, C, D, E, W[0]  );
    P( E, A, B, C, D, W[1]  );
    P( D, E, A, B, C, W[2]  );
   da340:	ea88 0805 	eor.w	r8, r8, r5
   da344:	4498      	add	r8, r3
    P( C, D, E, A, B, W[3]  );
   da346:	ea01 010c 	and.w	r1, r1, ip
   da34a:	18ab      	adds	r3, r5, r2
#define F(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
#define K 0x5A827999

    P( A, B, C, D, E, W[0]  );
    P( E, A, B, C, D, W[1]  );
    P( D, E, A, B, C, W[2]  );
   da34c:	eb08 68fc 	add.w	r8, r8, ip, ror #27
    P( C, D, E, A, B, W[3]  );
   da350:	4061      	eors	r1, r4
   da352:	ea4f 0cbc 	mov.w	ip, ip, ror #2
   da356:	4453      	add	r3, sl
    P( B, C, D, E, A, W[4]  );
   da358:	18a7      	adds	r7, r4, r2
#define K 0x5A827999

    P( A, B, C, D, E, W[0]  );
    P( E, A, B, C, D, W[1]  );
    P( D, E, A, B, C, W[2]  );
    P( C, D, E, A, B, W[3]  );
   da35a:	440b      	add	r3, r1
    P( B, C, D, E, A, W[4]  );
   da35c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   da35e:	ea80 010c 	eor.w	r1, r0, ip
   da362:	ea01 0108 	and.w	r1, r1, r8
   da366:	4041      	eors	r1, r0
   da368:	4427      	add	r7, r4
#define K 0x5A827999

    P( A, B, C, D, E, W[0]  );
    P( E, A, B, C, D, W[1]  );
    P( D, E, A, B, C, W[2]  );
    P( C, D, E, A, B, W[3]  );
   da36a:	eb03 63f8 	add.w	r3, r3, r8, ror #27
    P( B, C, D, E, A, W[4]  );
   da36e:	440f      	add	r7, r1
   da370:	ea4f 08b8 	mov.w	r8, r8, ror #2
    P( A, B, C, D, E, W[5]  );
   da374:	990f      	ldr	r1, [sp, #60]	; 0x3c
   da376:	ea8c 0408 	eor.w	r4, ip, r8
   da37a:	401c      	ands	r4, r3
   da37c:	4411      	add	r1, r2
   da37e:	ea84 040c 	eor.w	r4, r4, ip
   da382:	4401      	add	r1, r0

    P( A, B, C, D, E, W[0]  );
    P( E, A, B, C, D, W[1]  );
    P( D, E, A, B, C, W[2]  );
    P( C, D, E, A, B, W[3]  );
    P( B, C, D, E, A, W[4]  );
   da384:	eb07 67f3 	add.w	r7, r7, r3, ror #27
    P( A, B, C, D, E, W[5]  );
   da388:	4421      	add	r1, r4
   da38a:	ea4f 03b3 	mov.w	r3, r3, ror #2
    P( E, A, B, C, D, W[6]  );
   da38e:	9c10      	ldr	r4, [sp, #64]	; 0x40
   da390:	ea88 0003 	eor.w	r0, r8, r3
   da394:	18a6      	adds	r6, r4, r2
   da396:	4038      	ands	r0, r7
    P( A, B, C, D, E, W[0]  );
    P( E, A, B, C, D, W[1]  );
    P( D, E, A, B, C, W[2]  );
    P( C, D, E, A, B, W[3]  );
    P( B, C, D, E, A, W[4]  );
    P( A, B, C, D, E, W[5]  );
   da398:	eb01 61f7 	add.w	r1, r1, r7, ror #27
    P( E, A, B, C, D, W[6]  );
    P( D, E, A, B, C, W[7]  );
   da39c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    P( E, A, B, C, D, W[1]  );
    P( D, E, A, B, C, W[2]  );
    P( C, D, E, A, B, W[3]  );
    P( B, C, D, E, A, W[4]  );
    P( A, B, C, D, E, W[5]  );
    P( E, A, B, C, D, W[6]  );
   da39e:	ea4f 07b7 	mov.w	r7, r7, ror #2
   da3a2:	ea80 0008 	eor.w	r0, r0, r8
   da3a6:	4466      	add	r6, ip
   da3a8:	4406      	add	r6, r0
    P( D, E, A, B, C, W[7]  );
   da3aa:	ea83 0007 	eor.w	r0, r3, r7
   da3ae:	eb04 0e02 	add.w	lr, r4, r2
   da3b2:	4008      	ands	r0, r1
    P( E, A, B, C, D, W[1]  );
    P( D, E, A, B, C, W[2]  );
    P( C, D, E, A, B, W[3]  );
    P( B, C, D, E, A, W[4]  );
    P( A, B, C, D, E, W[5]  );
    P( E, A, B, C, D, W[6]  );
   da3b4:	eb06 66f1 	add.w	r6, r6, r1, ror #27
    P( D, E, A, B, C, W[7]  );
    P( C, D, E, A, B, W[8]  );
   da3b8:	9c09      	ldr	r4, [sp, #36]	; 0x24
    P( D, E, A, B, C, W[2]  );
    P( C, D, E, A, B, W[3]  );
    P( B, C, D, E, A, W[4]  );
    P( A, B, C, D, E, W[5]  );
    P( E, A, B, C, D, W[6]  );
    P( D, E, A, B, C, W[7]  );
   da3ba:	ea4f 01b1 	mov.w	r1, r1, ror #2
   da3be:	4058      	eors	r0, r3
   da3c0:	44c6      	add	lr, r8
   da3c2:	4486      	add	lr, r0
    P( C, D, E, A, B, W[8]  );
   da3c4:	ea87 0001 	eor.w	r0, r7, r1
   da3c8:	18a5      	adds	r5, r4, r2
   da3ca:	4030      	ands	r0, r6
   da3cc:	4078      	eors	r0, r7
   da3ce:	441d      	add	r5, r3
    P( D, E, A, B, C, W[2]  );
    P( C, D, E, A, B, W[3]  );
    P( B, C, D, E, A, W[4]  );
    P( A, B, C, D, E, W[5]  );
    P( E, A, B, C, D, W[6]  );
    P( D, E, A, B, C, W[7]  );
   da3d0:	eb0e 6ef6 	add.w	lr, lr, r6, ror #27
    P( C, D, E, A, B, W[8]  );
   da3d4:	4405      	add	r5, r0
   da3d6:	ea4f 06b6 	mov.w	r6, r6, ror #2
    P( B, C, D, E, A, W[9]  );
   da3da:	980a      	ldr	r0, [sp, #40]	; 0x28
   da3dc:	ea81 0306 	eor.w	r3, r1, r6
   da3e0:	1884      	adds	r4, r0, r2
   da3e2:	ea03 030e 	and.w	r3, r3, lr
    P( C, D, E, A, B, W[3]  );
    P( B, C, D, E, A, W[4]  );
    P( A, B, C, D, E, W[5]  );
    P( E, A, B, C, D, W[6]  );
    P( D, E, A, B, C, W[7]  );
    P( C, D, E, A, B, W[8]  );
   da3e6:	eb05 65fe 	add.w	r5, r5, lr, ror #27
    P( B, C, D, E, A, W[9]  );
   da3ea:	404b      	eors	r3, r1
   da3ec:	ea4f 0ebe 	mov.w	lr, lr, ror #2
    P( A, B, C, D, E, W[10] );
   da3f0:	980b      	ldr	r0, [sp, #44]	; 0x2c
    P( B, C, D, E, A, W[4]  );
    P( A, B, C, D, E, W[5]  );
    P( E, A, B, C, D, W[6]  );
    P( D, E, A, B, C, W[7]  );
    P( C, D, E, A, B, W[8]  );
    P( B, C, D, E, A, W[9]  );
   da3f2:	443c      	add	r4, r7
   da3f4:	441c      	add	r4, r3
    P( A, B, C, D, E, W[10] );
   da3f6:	ea86 030e 	eor.w	r3, r6, lr
   da3fa:	402b      	ands	r3, r5
   da3fc:	4410      	add	r0, r2
    P( B, C, D, E, A, W[4]  );
    P( A, B, C, D, E, W[5]  );
    P( E, A, B, C, D, W[6]  );
    P( D, E, A, B, C, W[7]  );
    P( C, D, E, A, B, W[8]  );
    P( B, C, D, E, A, W[9]  );
   da3fe:	eb04 64f5 	add.w	r4, r4, r5, ror #27
    P( A, B, C, D, E, W[10] );
   da402:	4073      	eors	r3, r6
   da404:	ea4f 05b5 	mov.w	r5, r5, ror #2
   da408:	4408      	add	r0, r1
    P( E, A, B, C, D, W[11] );
   da40a:	990c      	ldr	r1, [sp, #48]	; 0x30
    P( A, B, C, D, E, W[5]  );
    P( E, A, B, C, D, W[6]  );
    P( D, E, A, B, C, W[7]  );
    P( C, D, E, A, B, W[8]  );
    P( B, C, D, E, A, W[9]  );
    P( A, B, C, D, E, W[10] );
   da40c:	4418      	add	r0, r3
    P( E, A, B, C, D, W[11] );
   da40e:	ea8e 0305 	eor.w	r3, lr, r5
   da412:	eb01 0b02 	add.w	fp, r1, r2
   da416:	4023      	ands	r3, r4
    P( A, B, C, D, E, W[5]  );
    P( E, A, B, C, D, W[6]  );
    P( D, E, A, B, C, W[7]  );
    P( C, D, E, A, B, W[8]  );
    P( B, C, D, E, A, W[9]  );
    P( A, B, C, D, E, W[10] );
   da418:	eb00 60f4 	add.w	r0, r0, r4, ror #27
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
   da41c:	990d      	ldr	r1, [sp, #52]	; 0x34
    P( E, A, B, C, D, W[6]  );
    P( D, E, A, B, C, W[7]  );
    P( C, D, E, A, B, W[8]  );
    P( B, C, D, E, A, W[9]  );
    P( A, B, C, D, E, W[10] );
    P( E, A, B, C, D, W[11] );
   da41e:	ea4f 04b4 	mov.w	r4, r4, ror #2
   da422:	ea83 030e 	eor.w	r3, r3, lr
   da426:	44b3      	add	fp, r6
   da428:	449b      	add	fp, r3
    P( D, E, A, B, C, W[12] );
   da42a:	ea85 0304 	eor.w	r3, r5, r4
   da42e:	eb01 0802 	add.w	r8, r1, r2
   da432:	4003      	ands	r3, r0
   da434:	406b      	eors	r3, r5
   da436:	44f0      	add	r8, lr
    P( E, A, B, C, D, W[6]  );
    P( D, E, A, B, C, W[7]  );
    P( C, D, E, A, B, W[8]  );
    P( B, C, D, E, A, W[9]  );
    P( A, B, C, D, E, W[10] );
    P( E, A, B, C, D, W[11] );
   da438:	eb0b 6bf0 	add.w	fp, fp, r0, ror #27
    P( D, E, A, B, C, W[12] );
   da43c:	4498      	add	r8, r3
   da43e:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( C, D, E, A, B, W[13] );
   da442:	9b02      	ldr	r3, [sp, #8]
   da444:	ea84 0100 	eor.w	r1, r4, r0
   da448:	ea01 010b 	and.w	r1, r1, fp
   da44c:	4413      	add	r3, r2
    P( D, E, A, B, C, W[7]  );
    P( C, D, E, A, B, W[8]  );
    P( B, C, D, E, A, W[9]  );
    P( A, B, C, D, E, W[10] );
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
   da44e:	eb08 68fb 	add.w	r8, r8, fp, ror #27
    P( C, D, E, A, B, W[13] );
   da452:	4061      	eors	r1, r4
   da454:	ea4f 0bbb 	mov.w	fp, fp, ror #2
   da458:	442b      	add	r3, r5
    P( B, C, D, E, A, W[14] );
   da45a:	9d03      	ldr	r5, [sp, #12]
    P( C, D, E, A, B, W[8]  );
    P( B, C, D, E, A, W[9]  );
    P( A, B, C, D, E, W[10] );
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
   da45c:	440b      	add	r3, r1
    P( B, C, D, E, A, W[14] );
   da45e:	ea80 010b 	eor.w	r1, r0, fp
   da462:	18af      	adds	r7, r5, r2
   da464:	ea01 0108 	and.w	r1, r1, r8
   da468:	4041      	eors	r1, r0
   da46a:	4427      	add	r7, r4
   da46c:	440f      	add	r7, r1
    P( A, B, C, D, E, W[15] );
   da46e:	9904      	ldr	r1, [sp, #16]
    P( C, D, E, A, B, W[8]  );
    P( B, C, D, E, A, W[9]  );
    P( A, B, C, D, E, W[10] );
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
   da470:	eb03 63f8 	add.w	r3, r3, r8, ror #27
    P( B, C, D, E, A, W[14] );
   da474:	ea4f 08b8 	mov.w	r8, r8, ror #2
    P( A, B, C, D, E, W[15] );
   da478:	ea8b 0408 	eor.w	r4, fp, r8
   da47c:	4411      	add	r1, r2
   da47e:	401c      	ands	r4, r3
   da480:	4401      	add	r1, r0
    P( E, A, B, C, D, R(16) );
   da482:	9806      	ldr	r0, [sp, #24]
    P( A, B, C, D, E, W[10] );
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
   da484:	ea84 040b 	eor.w	r4, r4, fp
   da488:	4421      	add	r1, r4
    P( E, A, B, C, D, R(16) );
   da48a:	ea80 0409 	eor.w	r4, r0, r9
   da48e:	9809      	ldr	r0, [sp, #36]	; 0x24
   da490:	4044      	eors	r4, r0
   da492:	9802      	ldr	r0, [sp, #8]
   da494:	4044      	eors	r4, r0
   da496:	ea4f 70f4 	mov.w	r0, r4, ror #31
   da49a:	9006      	str	r0, [sp, #24]
    P( B, C, D, E, A, W[9]  );
    P( A, B, C, D, E, W[10] );
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
   da49c:	eb07 67f3 	add.w	r7, r7, r3, ror #27
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
   da4a0:	9c06      	ldr	r4, [sp, #24]
    P( A, B, C, D, E, W[10] );
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
   da4a2:	ea4f 03b3 	mov.w	r3, r3, ror #2
    P( E, A, B, C, D, R(16) );
   da4a6:	ea88 0003 	eor.w	r0, r8, r3
   da4aa:	eb04 0c02 	add.w	ip, r4, r2
   da4ae:	4038      	ands	r0, r7
   da4b0:	ea80 0008 	eor.w	r0, r0, r8
   da4b4:	44dc      	add	ip, fp
   da4b6:	4484      	add	ip, r0
    P( D, E, A, B, C, R(17) );
   da4b8:	9807      	ldr	r0, [sp, #28]
   da4ba:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   da4bc:	ea80 000a 	eor.w	r0, r0, sl
   da4c0:	4060      	eors	r0, r4
   da4c2:	4068      	eors	r0, r5
   da4c4:	ea4f 70f0 	mov.w	r0, r0, ror #31
   da4c8:	9007      	str	r0, [sp, #28]
    P( A, B, C, D, E, W[10] );
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
   da4ca:	eb01 61f7 	add.w	r1, r1, r7, ror #27
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
   da4ce:	9c07      	ldr	r4, [sp, #28]
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
   da4d0:	ea4f 07b7 	mov.w	r7, r7, ror #2
    P( D, E, A, B, C, R(17) );
   da4d4:	ea83 0007 	eor.w	r0, r3, r7
   da4d8:	eb04 0e02 	add.w	lr, r4, r2
   da4dc:	4008      	ands	r0, r1
   da4de:	4058      	eors	r0, r3
   da4e0:	44c6      	add	lr, r8
   da4e2:	4486      	add	lr, r0
    P( C, D, E, A, B, R(18) );
   da4e4:	980e      	ldr	r0, [sp, #56]	; 0x38
   da4e6:	ea89 0900 	eor.w	r9, r9, r0
   da4ea:	980b      	ldr	r0, [sp, #44]	; 0x2c
   da4ec:	ea89 0900 	eor.w	r9, r9, r0
   da4f0:	9804      	ldr	r0, [sp, #16]
   da4f2:	ea89 0900 	eor.w	r9, r9, r0
   da4f6:	ea4f 70f9 	mov.w	r0, r9, ror #31
   da4fa:	9008      	str	r0, [sp, #32]
   da4fc:	9c08      	ldr	r4, [sp, #32]
   da4fe:	18a6      	adds	r6, r4, r2
   da500:	441e      	add	r6, r3
    P( B, C, D, E, A, R(19) );
   da502:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   da504:	ea8a 0a03 	eor.w	sl, sl, r3
   da508:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
   da50a:	eb0c 6cf1 	add.w	ip, ip, r1, ror #27
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
    P( B, C, D, E, A, R(19) );
   da50e:	ea8a 0a03 	eor.w	sl, sl, r3
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
   da512:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( C, D, E, A, B, R(18) );
    P( B, C, D, E, A, R(19) );
   da516:	9b06      	ldr	r3, [sp, #24]
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
   da518:	ea87 0001 	eor.w	r0, r7, r1
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
   da51c:	eb0e 6efc 	add.w	lr, lr, ip, ror #27
    P( C, D, E, A, B, R(18) );
   da520:	ea00 000c 	and.w	r0, r0, ip
    P( B, C, D, E, A, R(19) );
   da524:	ea8a 0a03 	eor.w	sl, sl, r3
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
   da528:	ea4f 0cbc 	mov.w	ip, ip, ror #2
    P( B, C, D, E, A, R(19) );
   da52c:	ea4f 7afa 	mov.w	sl, sl, ror #31
   da530:	ea81 030c 	eor.w	r3, r1, ip
   da534:	ea03 030e 	and.w	r3, r3, lr
   da538:	4452      	add	r2, sl
   da53a:	404b      	eors	r3, r1
   da53c:	443a      	add	r2, r7
   da53e:	189d      	adds	r5, r3, r2
#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
   da540:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   da542:	9a10      	ldr	r2, [sp, #64]	; 0x40
   da544:	ea83 0902 	eor.w	r9, r3, r2
   da548:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    P( E, A, B, C, D, R(21) );
   da54a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
   da54c:	ea89 0903 	eor.w	r9, r9, r3
   da550:	9b07      	ldr	r3, [sp, #28]
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
   da552:	4078      	eors	r0, r7
   da554:	4406      	add	r6, r0
#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
   da556:	4f47      	ldr	r7, [pc, #284]	; (da674 <mbedtls_internal_sha1_process+0x57c>)
   da558:	ea89 0903 	eor.w	r9, r9, r3
   da55c:	ea4f 79f9 	mov.w	r9, r9, ror #31
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
   da560:	eb06 66fe 	add.w	r6, r6, lr, ror #27
    P( B, C, D, E, A, R(19) );
   da564:	ea4f 0ebe 	mov.w	lr, lr, ror #2
#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
   da568:	ea8c 030e 	eor.w	r3, ip, lr
   da56c:	eb09 0007 	add.w	r0, r9, r7
   da570:	4073      	eors	r3, r6
   da572:	4408      	add	r0, r1
   da574:	4418      	add	r0, r3
    P( E, A, B, C, D, R(21) );
   da576:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    P( D, E, A, B, C, R(22) );
   da578:	9909      	ldr	r1, [sp, #36]	; 0x24

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
   da57a:	ea83 0802 	eor.w	r8, r3, r2
   da57e:	9b02      	ldr	r3, [sp, #8]
   da580:	ea88 0803 	eor.w	r8, r8, r3
   da584:	ea88 0804 	eor.w	r8, r8, r4
   da588:	ea4f 78f8 	mov.w	r8, r8, ror #31
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
    P( B, C, D, E, A, R(19) );
   da58c:	eb05 65f6 	add.w	r5, r5, r6, ror #27
#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
   da590:	ea4f 06b6 	mov.w	r6, r6, ror #2
    P( E, A, B, C, D, R(21) );
   da594:	ea8e 0306 	eor.w	r3, lr, r6
   da598:	eb08 0207 	add.w	r2, r8, r7
   da59c:	406b      	eors	r3, r5
   da59e:	4462      	add	r2, ip
   da5a0:	441a      	add	r2, r3
    P( D, E, A, B, C, R(22) );
   da5a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   da5a4:	ea83 0c01 	eor.w	ip, r3, r1
   da5a8:	9b03      	ldr	r3, [sp, #12]
    P( C, D, E, A, B, R(23) );
   da5aa:	990a      	ldr	r1, [sp, #40]	; 0x28
#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
   da5ac:	ea8c 0c03 	eor.w	ip, ip, r3
   da5b0:	ea8c 0c0a 	eor.w	ip, ip, sl
   da5b4:	ea4f 7cfc 	mov.w	ip, ip, ror #31
#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
   da5b8:	eb00 60f5 	add.w	r0, r0, r5, ror #27
    P( E, A, B, C, D, R(21) );
   da5bc:	ea4f 05b5 	mov.w	r5, r5, ror #2
    P( D, E, A, B, C, R(22) );
   da5c0:	ea86 0305 	eor.w	r3, r6, r5
   da5c4:	eb0c 0407 	add.w	r4, ip, r7
   da5c8:	4043      	eors	r3, r0
   da5ca:	4474      	add	r4, lr
   da5cc:	441c      	add	r4, r3
    P( C, D, E, A, B, R(23) );
   da5ce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   da5d0:	ea83 0e01 	eor.w	lr, r3, r1
   da5d4:	9b04      	ldr	r3, [sp, #16]
   da5d6:	ea8e 0e03 	eor.w	lr, lr, r3
   da5da:	ea8e 0e09 	eor.w	lr, lr, r9
   da5de:	ea4f 7efe 	mov.w	lr, lr, ror #31

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
   da5e2:	eb02 62f0 	add.w	r2, r2, r0, ror #27
    P( D, E, A, B, C, R(22) );
   da5e6:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( C, D, E, A, B, R(23) );
   da5ea:	ea85 0100 	eor.w	r1, r5, r0
   da5ee:	eb0e 0307 	add.w	r3, lr, r7
   da5f2:	4051      	eors	r1, r2
   da5f4:	4433      	add	r3, r6
   da5f6:	440b      	add	r3, r1
    P( B, C, D, E, A, R(24) );
   da5f8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   da5fa:	9909      	ldr	r1, [sp, #36]	; 0x24
   da5fc:	404e      	eors	r6, r1
   da5fe:	9906      	ldr	r1, [sp, #24]
   da600:	404e      	eors	r6, r1
   da602:	ea86 0608 	eor.w	r6, r6, r8
   da606:	ea4f 71f6 	mov.w	r1, r6, ror #31
   da60a:	9109      	str	r1, [sp, #36]	; 0x24
   da60c:	9e09      	ldr	r6, [sp, #36]	; 0x24
#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
   da60e:	eb04 64f2 	add.w	r4, r4, r2, ror #27
    P( C, D, E, A, B, R(23) );
   da612:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( B, C, D, E, A, R(24) );
   da616:	ea80 0102 	eor.w	r1, r0, r2
   da61a:	eb06 0b07 	add.w	fp, r6, r7
   da61e:	4061      	eors	r1, r4
   da620:	44ab      	add	fp, r5
   da622:	448b      	add	fp, r1
    P( A, B, C, D, E, R(25) );
   da624:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   da626:	990a      	ldr	r1, [sp, #40]	; 0x28
   da628:	4069      	eors	r1, r5
   da62a:	9d07      	ldr	r5, [sp, #28]
   da62c:	4069      	eors	r1, r5
   da62e:	ea81 010c 	eor.w	r1, r1, ip
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
   da632:	eb03 63f4 	add.w	r3, r3, r4, ror #27
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
   da636:	ea4f 71f1 	mov.w	r1, r1, ror #31

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
   da63a:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( A, B, C, D, E, R(25) );
   da63e:	910a      	str	r1, [sp, #40]	; 0x28
   da640:	ea82 0504 	eor.w	r5, r2, r4
   da644:	4439      	add	r1, r7
   da646:	405d      	eors	r5, r3
   da648:	4401      	add	r1, r0
   da64a:	4429      	add	r1, r5
    P( E, A, B, C, D, R(26) );
   da64c:	980b      	ldr	r0, [sp, #44]	; 0x2c
   da64e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   da650:	4068      	eors	r0, r5
   da652:	9d08      	ldr	r5, [sp, #32]
   da654:	4068      	eors	r0, r5
   da656:	ea80 000e 	eor.w	r0, r0, lr

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
   da65a:	eb0b 6bf3 	add.w	fp, fp, r3, ror #27
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
   da65e:	ea4f 70f0 	mov.w	r0, r0, ror #31
    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
   da662:	ea4f 03b3 	mov.w	r3, r3, ror #2
    P( E, A, B, C, D, R(26) );
   da666:	900b      	str	r0, [sp, #44]	; 0x2c
   da668:	ea84 0503 	eor.w	r5, r4, r3
   da66c:	e004      	b.n	da678 <mbedtls_internal_sha1_process+0x580>
   da66e:	bf00      	nop
   da670:	5a827999 	.word	0x5a827999
   da674:	6ed9eba1 	.word	0x6ed9eba1
   da678:	4438      	add	r0, r7
   da67a:	ea85 050b 	eor.w	r5, r5, fp
   da67e:	4410      	add	r0, r2
   da680:	4428      	add	r0, r5
    P( D, E, A, B, C, R(27) );
   da682:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   da684:	9d02      	ldr	r5, [sp, #8]
   da686:	406a      	eors	r2, r5
   da688:	ea82 020a 	eor.w	r2, r2, sl
   da68c:	4072      	eors	r2, r6
    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
   da68e:	eb01 61fb 	add.w	r1, r1, fp, ror #27
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
   da692:	ea4f 72f2 	mov.w	r2, r2, ror #31
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
   da696:	ea4f 0bbb 	mov.w	fp, fp, ror #2
    P( D, E, A, B, C, R(27) );
   da69a:	920c      	str	r2, [sp, #48]	; 0x30
   da69c:	ea83 050b 	eor.w	r5, r3, fp
   da6a0:	443a      	add	r2, r7
   da6a2:	404d      	eors	r5, r1
   da6a4:	4422      	add	r2, r4
   da6a6:	442a      	add	r2, r5
    P( C, D, E, A, B, R(28) );
   da6a8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   da6aa:	9d03      	ldr	r5, [sp, #12]
   da6ac:	406c      	eors	r4, r5
   da6ae:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   da6b0:	ea84 0409 	eor.w	r4, r4, r9
   da6b4:	406c      	eors	r4, r5
   da6b6:	ea4f 74f4 	mov.w	r4, r4, ror #31
   da6ba:	940d      	str	r4, [sp, #52]	; 0x34
   da6bc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
   da6be:	eb00 60f1 	add.w	r0, r0, r1, ror #27
    P( D, E, A, B, C, R(27) );
   da6c2:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( C, D, E, A, B, R(28) );
   da6c6:	ea8b 0401 	eor.w	r4, fp, r1
   da6ca:	443d      	add	r5, r7
   da6cc:	4044      	eors	r4, r0
   da6ce:	441d      	add	r5, r3
   da6d0:	4425      	add	r5, r4
    P( B, C, D, E, A, R(29) );
   da6d2:	9b02      	ldr	r3, [sp, #8]
   da6d4:	9c04      	ldr	r4, [sp, #16]
   da6d6:	4063      	eors	r3, r4
   da6d8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   da6da:	ea83 0308 	eor.w	r3, r3, r8
   da6de:	4063      	eors	r3, r4
   da6e0:	ea4f 73f3 	mov.w	r3, r3, ror #31
   da6e4:	9302      	str	r3, [sp, #8]
   da6e6:	9c02      	ldr	r4, [sp, #8]
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
   da6e8:	eb02 62f0 	add.w	r2, r2, r0, ror #27
    P( C, D, E, A, B, R(28) );
   da6ec:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( B, C, D, E, A, R(29) );
   da6f0:	ea81 0300 	eor.w	r3, r1, r0
   da6f4:	443c      	add	r4, r7
   da6f6:	4053      	eors	r3, r2
   da6f8:	445c      	add	r4, fp
   da6fa:	441c      	add	r4, r3
    P( A, B, C, D, E, R(30) );
   da6fc:	9b03      	ldr	r3, [sp, #12]
   da6fe:	461e      	mov	r6, r3
   da700:	9b06      	ldr	r3, [sp, #24]
   da702:	4073      	eors	r3, r6
   da704:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   da706:	ea83 030c 	eor.w	r3, r3, ip
   da70a:	4073      	eors	r3, r6
   da70c:	ea4f 73f3 	mov.w	r3, r3, ror #31
   da710:	9303      	str	r3, [sp, #12]
   da712:	443b      	add	r3, r7
    P( E, A, B, C, D, R(31) );
   da714:	9e07      	ldr	r6, [sp, #28]
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
   da716:	440b      	add	r3, r1
    P( E, A, B, C, D, R(31) );
   da718:	9904      	ldr	r1, [sp, #16]
   da71a:	4071      	eors	r1, r6
   da71c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
   da71e:	eb05 65f2 	add.w	r5, r5, r2, ror #27
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
   da722:	ea81 010e 	eor.w	r1, r1, lr
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
   da726:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( A, B, C, D, E, R(30) );
   da72a:	ea80 0b02 	eor.w	fp, r0, r2
    P( E, A, B, C, D, R(31) );
   da72e:	4071      	eors	r1, r6
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
   da730:	eb04 64f5 	add.w	r4, r4, r5, ror #27
    P( A, B, C, D, E, R(30) );
   da734:	ea8b 0b05 	eor.w	fp, fp, r5
    P( E, A, B, C, D, R(31) );
   da738:	ea4f 71f1 	mov.w	r1, r1, ror #31
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
   da73c:	ea4f 05b5 	mov.w	r5, r5, ror #2
    P( E, A, B, C, D, R(31) );
   da740:	9104      	str	r1, [sp, #16]
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
   da742:	445b      	add	r3, fp
    P( E, A, B, C, D, R(31) );
   da744:	4439      	add	r1, r7
   da746:	ea82 0b05 	eor.w	fp, r2, r5
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
   da74a:	eb03 63f4 	add.w	r3, r3, r4, ror #27
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
   da74e:	9e08      	ldr	r6, [sp, #32]
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
   da750:	ea8b 0b04 	eor.w	fp, fp, r4
   da754:	4401      	add	r1, r0
   da756:	ea4f 00b4 	mov.w	r0, r4, ror #2
    P( D, E, A, B, C, R(32) );
   da75a:	9c06      	ldr	r4, [sp, #24]
   da75c:	4074      	eors	r4, r6
   da75e:	9e09      	ldr	r6, [sp, #36]	; 0x24
   da760:	4074      	eors	r4, r6
   da762:	9e02      	ldr	r6, [sp, #8]
   da764:	4074      	eors	r4, r6
   da766:	ea4f 74f4 	mov.w	r4, r4, ror #31
   da76a:	9406      	str	r4, [sp, #24]
   da76c:	9e06      	ldr	r6, [sp, #24]
   da76e:	ea85 0400 	eor.w	r4, r5, r0
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
   da772:	4459      	add	r1, fp
    P( D, E, A, B, C, R(32) );
   da774:	eb06 0b07 	add.w	fp, r6, r7
   da778:	445a      	add	r2, fp
   da77a:	405c      	eors	r4, r3
   da77c:	4414      	add	r4, r2
    P( C, D, E, A, B, R(33) );
   da77e:	9a07      	ldr	r2, [sp, #28]
   da780:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   da782:	ea82 020a 	eor.w	r2, r2, sl
   da786:	4072      	eors	r2, r6
   da788:	9e03      	ldr	r6, [sp, #12]
   da78a:	4072      	eors	r2, r6
   da78c:	ea4f 72f2 	mov.w	r2, r2, ror #31
   da790:	9207      	str	r2, [sp, #28]
   da792:	9e07      	ldr	r6, [sp, #28]
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
   da794:	eb01 61f3 	add.w	r1, r1, r3, ror #27
    P( D, E, A, B, C, R(32) );
   da798:	ea4f 03b3 	mov.w	r3, r3, ror #2
    P( C, D, E, A, B, R(33) );
   da79c:	eb06 0b07 	add.w	fp, r6, r7
   da7a0:	ea80 0203 	eor.w	r2, r0, r3
   da7a4:	445d      	add	r5, fp
   da7a6:	404a      	eors	r2, r1
   da7a8:	442a      	add	r2, r5
    P( B, C, D, E, A, R(34) );
   da7aa:	9d08      	ldr	r5, [sp, #32]
   da7ac:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   da7ae:	ea85 0509 	eor.w	r5, r5, r9
   da7b2:	4075      	eors	r5, r6
   da7b4:	9e04      	ldr	r6, [sp, #16]
   da7b6:	4075      	eors	r5, r6
   da7b8:	ea4f 75f5 	mov.w	r5, r5, ror #31
   da7bc:	9508      	str	r5, [sp, #32]
   da7be:	9e08      	ldr	r6, [sp, #32]
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
   da7c0:	eb04 64f1 	add.w	r4, r4, r1, ror #27
    P( C, D, E, A, B, R(33) );
   da7c4:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( B, C, D, E, A, R(34) );
   da7c8:	eb06 0b07 	add.w	fp, r6, r7
   da7cc:	ea83 0501 	eor.w	r5, r3, r1
   da7d0:	4458      	add	r0, fp
   da7d2:	4065      	eors	r5, r4
   da7d4:	4405      	add	r5, r0
    P( A, B, C, D, E, R(35) );
   da7d6:	980c      	ldr	r0, [sp, #48]	; 0x30
   da7d8:	ea8a 0a08 	eor.w	sl, sl, r8
   da7dc:	ea8a 0a00 	eor.w	sl, sl, r0
   da7e0:	9806      	ldr	r0, [sp, #24]
   da7e2:	ea8a 0a00 	eor.w	sl, sl, r0
   da7e6:	ea4f 7bfa 	mov.w	fp, sl, ror #31
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
   da7ea:	eb02 62f4 	add.w	r2, r2, r4, ror #27
    P( B, C, D, E, A, R(34) );
   da7ee:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( A, B, C, D, E, R(35) );
   da7f2:	eb0b 0a07 	add.w	sl, fp, r7
   da7f6:	ea81 0004 	eor.w	r0, r1, r4
   da7fa:	4050      	eors	r0, r2
   da7fc:	4453      	add	r3, sl
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
   da7fe:	eb05 65f2 	add.w	r5, r5, r2, ror #27
    P( A, B, C, D, E, R(35) );
   da802:	4403      	add	r3, r0
   da804:	eb03 60f5 	add.w	r0, r3, r5, ror #27
    P( E, A, B, C, D, R(36) );
   da808:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   da80a:	ea89 090c 	eor.w	r9, r9, ip
   da80e:	ea89 0903 	eor.w	r9, r9, r3
   da812:	9b07      	ldr	r3, [sp, #28]
   da814:	ea89 0903 	eor.w	r9, r9, r3
   da818:	ea4f 7af9 	mov.w	sl, r9, ror #31
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
   da81c:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( E, A, B, C, D, R(36) );
   da820:	eb0a 0907 	add.w	r9, sl, r7
   da824:	ea84 0302 	eor.w	r3, r4, r2
   da828:	406b      	eors	r3, r5
   da82a:	4449      	add	r1, r9
   da82c:	4419      	add	r1, r3
   da82e:	eb01 63f0 	add.w	r3, r1, r0, ror #27
    P( D, E, A, B, C, R(37) );
   da832:	9902      	ldr	r1, [sp, #8]
   da834:	ea88 080e 	eor.w	r8, r8, lr
   da838:	ea88 0801 	eor.w	r8, r8, r1
   da83c:	ea88 0806 	eor.w	r8, r8, r6
   da840:	ea4f 71f8 	mov.w	r1, r8, ror #31
   da844:	910e      	str	r1, [sp, #56]	; 0x38
   da846:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
   da848:	ea4f 05b5 	mov.w	r5, r5, ror #2
    P( D, E, A, B, C, R(37) );
   da84c:	eb06 0807 	add.w	r8, r6, r7
   da850:	ea82 0105 	eor.w	r1, r2, r5
   da854:	4041      	eors	r1, r0
   da856:	4444      	add	r4, r8
   da858:	440c      	add	r4, r1
   da85a:	eb04 61f3 	add.w	r1, r4, r3, ror #27
    P( C, D, E, A, B, R(38) );
   da85e:	9c09      	ldr	r4, [sp, #36]	; 0x24
   da860:	ea8c 0c04 	eor.w	ip, ip, r4
   da864:	9c03      	ldr	r4, [sp, #12]
   da866:	ea8c 0c04 	eor.w	ip, ip, r4
   da86a:	ea8c 0c0b 	eor.w	ip, ip, fp
   da86e:	ea4f 74fc 	mov.w	r4, ip, ror #31
   da872:	940f      	str	r4, [sp, #60]	; 0x3c
   da874:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
    P( D, E, A, B, C, R(37) );
   da876:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( C, D, E, A, B, R(38) );
   da87a:	eb06 0c07 	add.w	ip, r6, r7
   da87e:	ea85 0400 	eor.w	r4, r5, r0
   da882:	405c      	eors	r4, r3
   da884:	4462      	add	r2, ip
   da886:	4422      	add	r2, r4
   da888:	eb02 64f1 	add.w	r4, r2, r1, ror #27
    P( B, C, D, E, A, R(39) );
   da88c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   da88e:	ea8e 0e02 	eor.w	lr, lr, r2
   da892:	9a04      	ldr	r2, [sp, #16]
   da894:	ea8e 0e02 	eor.w	lr, lr, r2
   da898:	ea8e 0e0a 	eor.w	lr, lr, sl
   da89c:	ea4f 72fe 	mov.w	r2, lr, ror #31
   da8a0:	9210      	str	r2, [sp, #64]	; 0x40
   da8a2:	9e10      	ldr	r6, [sp, #64]	; 0x40
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
    P( D, E, A, B, C, R(37) );
    P( C, D, E, A, B, R(38) );
   da8a4:	ea4f 03b3 	mov.w	r3, r3, ror #2
    P( B, C, D, E, A, R(39) );
   da8a8:	ea80 0203 	eor.w	r2, r0, r3
   da8ac:	4437      	add	r7, r6
   da8ae:	404a      	eors	r2, r1
   da8b0:	443d      	add	r5, r7
#undef F

#define F(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
   da8b2:	9e09      	ldr	r6, [sp, #36]	; 0x24
   da8b4:	4fd2      	ldr	r7, [pc, #840]	; (dac00 <mbedtls_internal_sha1_process+0xb08>)
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
    P( D, E, A, B, C, R(37) );
    P( C, D, E, A, B, R(38) );
    P( B, C, D, E, A, R(39) );
   da8b6:	4415      	add	r5, r2
#undef F

#define F(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
   da8b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   da8ba:	4056      	eors	r6, r2
   da8bc:	9a06      	ldr	r2, [sp, #24]
   da8be:	4056      	eors	r6, r2
   da8c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   da8c2:	4056      	eors	r6, r2
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
    P( D, E, A, B, C, R(37) );
    P( C, D, E, A, B, R(38) );
    P( B, C, D, E, A, R(39) );
   da8c4:	ea4f 08b1 	mov.w	r8, r1, ror #2
#undef F

#define F(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
   da8c8:	ea4f 72f6 	mov.w	r2, r6, ror #31
   da8cc:	9209      	str	r2, [sp, #36]	; 0x24
   da8ce:	ea44 0208 	orr.w	r2, r4, r8
   da8d2:	ea04 0108 	and.w	r1, r4, r8
   da8d6:	401a      	ands	r2, r3
   da8d8:	430a      	orrs	r2, r1
   da8da:	9909      	ldr	r1, [sp, #36]	; 0x24
   da8dc:	4439      	add	r1, r7
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
    P( D, E, A, B, C, R(37) );
    P( C, D, E, A, B, R(38) );
    P( B, C, D, E, A, R(39) );
   da8de:	eb05 65f4 	add.w	r5, r5, r4, ror #27
#undef F

#define F(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
   da8e2:	4408      	add	r0, r1
   da8e4:	eb00 60f5 	add.w	r0, r0, r5, ror #27
   da8e8:	4402      	add	r2, r0
    P( E, A, B, C, D, R(41) );
   da8ea:	990a      	ldr	r1, [sp, #40]	; 0x28
   da8ec:	980c      	ldr	r0, [sp, #48]	; 0x30
   da8ee:	4041      	eors	r1, r0
   da8f0:	9807      	ldr	r0, [sp, #28]
   da8f2:	4041      	eors	r1, r0
   da8f4:	980f      	ldr	r0, [sp, #60]	; 0x3c
#undef F

#define F(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
   da8f6:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( E, A, B, C, D, R(41) );
   da8fa:	4041      	eors	r1, r0
   da8fc:	ea4f 71f1 	mov.w	r1, r1, ror #31
   da900:	ea45 0004 	orr.w	r0, r5, r4
   da904:	910a      	str	r1, [sp, #40]	; 0x28
   da906:	ea00 0008 	and.w	r0, r0, r8
   da90a:	ea05 0104 	and.w	r1, r5, r4
   da90e:	4308      	orrs	r0, r1
   da910:	990a      	ldr	r1, [sp, #40]	; 0x28
   da912:	4439      	add	r1, r7
   da914:	440b      	add	r3, r1
   da916:	4403      	add	r3, r0
    P( D, E, A, B, C, R(42) );
   da918:	990b      	ldr	r1, [sp, #44]	; 0x2c
   da91a:	980d      	ldr	r0, [sp, #52]	; 0x34
   da91c:	4048      	eors	r0, r1
   da91e:	9908      	ldr	r1, [sp, #32]
   da920:	4048      	eors	r0, r1
   da922:	9910      	ldr	r1, [sp, #64]	; 0x40

#define F(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
    P( E, A, B, C, D, R(41) );
   da924:	ea4f 05b5 	mov.w	r5, r5, ror #2
    P( D, E, A, B, C, R(42) );
   da928:	4048      	eors	r0, r1
   da92a:	ea4f 71f0 	mov.w	r1, r0, ror #31
   da92e:	ea42 0005 	orr.w	r0, r2, r5
   da932:	910b      	str	r1, [sp, #44]	; 0x2c
   da934:	4020      	ands	r0, r4
   da936:	ea02 0105 	and.w	r1, r2, r5
   da93a:	4308      	orrs	r0, r1
   da93c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   da93e:	4439      	add	r1, r7

#define F(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
    P( E, A, B, C, D, R(41) );
   da940:	eb03 63f2 	add.w	r3, r3, r2, ror #27
    P( D, E, A, B, C, R(42) );
   da944:	4441      	add	r1, r8
   da946:	eb01 61f3 	add.w	r1, r1, r3, ror #27
   da94a:	ea4f 06b2 	mov.w	r6, r2, ror #2
   da94e:	4408      	add	r0, r1
    P( C, D, E, A, B, R(43) );
   da950:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   da952:	9902      	ldr	r1, [sp, #8]
   da954:	4051      	eors	r1, r2
   da956:	9a09      	ldr	r2, [sp, #36]	; 0x24
   da958:	ea81 010b 	eor.w	r1, r1, fp
   da95c:	4051      	eors	r1, r2
   da95e:	ea4f 72f1 	mov.w	r2, r1, ror #31
   da962:	ea43 0106 	orr.w	r1, r3, r6
   da966:	920c      	str	r2, [sp, #48]	; 0x30
   da968:	4029      	ands	r1, r5
   da96a:	ea03 0206 	and.w	r2, r3, r6
   da96e:	4311      	orrs	r1, r2
   da970:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   da972:	443a      	add	r2, r7
   da974:	ea4f 0eb3 	mov.w	lr, r3, ror #2
   da978:	4414      	add	r4, r2
    P( B, C, D, E, A, R(44) );
   da97a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   da97c:	9a03      	ldr	r2, [sp, #12]
   da97e:	4053      	eors	r3, r2
   da980:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   da982:	ea83 030a 	eor.w	r3, r3, sl
   da986:	4053      	eors	r3, r2
   da988:	ea4f 73f3 	mov.w	r3, r3, ror #31
   da98c:	930d      	str	r3, [sp, #52]	; 0x34
   da98e:	ea40 030e 	orr.w	r3, r0, lr
   da992:	ea03 0206 	and.w	r2, r3, r6
   da996:	ea00 030e 	and.w	r3, r0, lr
   da99a:	4313      	orrs	r3, r2
   da99c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
    P( E, A, B, C, D, R(41) );
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
   da99e:	440c      	add	r4, r1
    P( B, C, D, E, A, R(44) );
   da9a0:	443a      	add	r2, r7
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
    P( E, A, B, C, D, R(41) );
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
   da9a2:	eb04 61f0 	add.w	r1, r4, r0, ror #27
    P( B, C, D, E, A, R(44) );
   da9a6:	4415      	add	r5, r2
   da9a8:	eb05 65f1 	add.w	r5, r5, r1, ror #27
   da9ac:	441d      	add	r5, r3
    P( A, B, C, D, E, R(45) );
   da9ae:	9a04      	ldr	r2, [sp, #16]
   da9b0:	9b02      	ldr	r3, [sp, #8]
   da9b2:	405a      	eors	r2, r3
   da9b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   da9b6:	405a      	eors	r2, r3
   da9b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   da9ba:	405a      	eors	r2, r3
   da9bc:	ea4f 73f2 	mov.w	r3, r2, ror #31
   da9c0:	9302      	str	r3, [sp, #8]

    P( A, B, C, D, E, R(40) );
    P( E, A, B, C, D, R(41) );
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
   da9c2:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( A, B, C, D, E, R(45) );
   da9c6:	9a02      	ldr	r2, [sp, #8]
   da9c8:	ea41 0300 	orr.w	r3, r1, r0
   da9cc:	ea03 0c0e 	and.w	ip, r3, lr
   da9d0:	443a      	add	r2, r7
   da9d2:	ea01 0300 	and.w	r3, r1, r0
   da9d6:	ea4c 0303 	orr.w	r3, ip, r3
   da9da:	4432      	add	r2, r6
   da9dc:	441a      	add	r2, r3
   da9de:	eb02 6cf5 	add.w	ip, r2, r5, ror #27
    P( E, A, B, C, D, R(46) );
   da9e2:	9b03      	ldr	r3, [sp, #12]
    P( A, B, C, D, E, R(40) );
    P( E, A, B, C, D, R(41) );
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
   da9e4:	ea4f 02b1 	mov.w	r2, r1, ror #2
    P( E, A, B, C, D, R(46) );
   da9e8:	9906      	ldr	r1, [sp, #24]
   da9ea:	ea83 0901 	eor.w	r9, r3, r1
   da9ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    P( D, E, A, B, C, R(47) );
   da9f0:	9904      	ldr	r1, [sp, #16]
    P( E, A, B, C, D, R(41) );
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
   da9f2:	ea89 0903 	eor.w	r9, r9, r3
   da9f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   da9f8:	ea89 0903 	eor.w	r9, r9, r3
   da9fc:	ea4f 73f9 	mov.w	r3, r9, ror #31
   daa00:	ea45 0402 	orr.w	r4, r5, r2
   daa04:	9303      	str	r3, [sp, #12]
   daa06:	4004      	ands	r4, r0
   daa08:	ea05 0302 	and.w	r3, r5, r2
   daa0c:	431c      	orrs	r4, r3
   daa0e:	9b03      	ldr	r3, [sp, #12]
   daa10:	443b      	add	r3, r7
   daa12:	449e      	add	lr, r3
   daa14:	eb0e 6efc 	add.w	lr, lr, ip, ror #27
   daa18:	44a6      	add	lr, r4
    P( D, E, A, B, C, R(47) );
   daa1a:	9c07      	ldr	r4, [sp, #28]
   daa1c:	ea81 0804 	eor.w	r8, r1, r4
   daa20:	9910      	ldr	r1, [sp, #64]	; 0x40
   daa22:	ea88 0801 	eor.w	r8, r8, r1
   daa26:	990d      	ldr	r1, [sp, #52]	; 0x34
    P( E, A, B, C, D, R(41) );
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
   daa28:	ea4f 03b5 	mov.w	r3, r5, ror #2
    P( D, E, A, B, C, R(47) );
   daa2c:	ea88 0801 	eor.w	r8, r8, r1
   daa30:	ea4f 71f8 	mov.w	r1, r8, ror #31
   daa34:	ea4c 0403 	orr.w	r4, ip, r3
   daa38:	9104      	str	r1, [sp, #16]
   daa3a:	4014      	ands	r4, r2
   daa3c:	ea0c 0103 	and.w	r1, ip, r3
   daa40:	430c      	orrs	r4, r1
   daa42:	9904      	ldr	r1, [sp, #16]
   daa44:	eb01 0807 	add.w	r8, r1, r7
   daa48:	4440      	add	r0, r8
    P( C, D, E, A, B, R(48) );
   daa4a:	9906      	ldr	r1, [sp, #24]
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
   daa4c:	eb04 0800 	add.w	r8, r4, r0
    P( C, D, E, A, B, R(48) );
   daa50:	9808      	ldr	r0, [sp, #32]
   daa52:	ea81 0900 	eor.w	r9, r1, r0
   daa56:	9909      	ldr	r1, [sp, #36]	; 0x24
   daa58:	ea89 0901 	eor.w	r9, r9, r1
   daa5c:	9902      	ldr	r1, [sp, #8]
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
   daa5e:	ea4f 0cbc 	mov.w	ip, ip, ror #2
    P( C, D, E, A, B, R(48) );
   daa62:	ea89 0901 	eor.w	r9, r9, r1
   daa66:	ea4f 71f9 	mov.w	r1, r9, ror #31
   daa6a:	ea4e 040c 	orr.w	r4, lr, ip
   daa6e:	9106      	str	r1, [sp, #24]
   daa70:	401c      	ands	r4, r3
   daa72:	ea0e 010c 	and.w	r1, lr, ip
   daa76:	ea44 0001 	orr.w	r0, r4, r1
   daa7a:	9906      	ldr	r1, [sp, #24]
   daa7c:	4439      	add	r1, r7
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
   daa7e:	eb08 68fe 	add.w	r8, r8, lr, ror #27
    P( C, D, E, A, B, R(48) );
   daa82:	4411      	add	r1, r2
   daa84:	eb01 65f8 	add.w	r5, r1, r8, ror #27
    P( B, C, D, E, A, R(49) );
   daa88:	9a07      	ldr	r2, [sp, #28]
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
   daa8a:	1944      	adds	r4, r0, r5
    P( B, C, D, E, A, R(49) );
   daa8c:	980a      	ldr	r0, [sp, #40]	; 0x28
   daa8e:	ea82 020b 	eor.w	r2, r2, fp
   daa92:	4042      	eors	r2, r0
   daa94:	9803      	ldr	r0, [sp, #12]
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
   daa96:	ea4f 01be 	mov.w	r1, lr, ror #2
    P( B, C, D, E, A, R(49) );
   daa9a:	4042      	eors	r2, r0
   daa9c:	ea4f 72f2 	mov.w	r2, r2, ror #31
   daaa0:	ea48 0001 	orr.w	r0, r8, r1
   daaa4:	9207      	str	r2, [sp, #28]
   daaa6:	ea00 000c 	and.w	r0, r0, ip
   daaaa:	ea08 0201 	and.w	r2, r8, r1
   daaae:	4310      	orrs	r0, r2
   daab0:	9a07      	ldr	r2, [sp, #28]
   daab2:	19d6      	adds	r6, r2, r7
   daab4:	4433      	add	r3, r6
   daab6:	18c6      	adds	r6, r0, r3
    P( A, B, C, D, E, R(50) );
   daab8:	9b08      	ldr	r3, [sp, #32]
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
   daaba:	eb06 69f4 	add.w	r9, r6, r4, ror #27
    P( A, B, C, D, E, R(50) );
   daabe:	ea83 060a 	eor.w	r6, r3, sl
   daac2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   daac4:	405e      	eors	r6, r3
   daac6:	9b04      	ldr	r3, [sp, #16]
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
   daac8:	ea4f 08b8 	mov.w	r8, r8, ror #2
    P( A, B, C, D, E, R(50) );
   daacc:	405e      	eors	r6, r3
   daace:	ea44 0208 	orr.w	r2, r4, r8
   daad2:	ea4f 7ef6 	mov.w	lr, r6, ror #31
   daad6:	400a      	ands	r2, r1
   daad8:	ea04 0308 	and.w	r3, r4, r8
   daadc:	4313      	orrs	r3, r2
   daade:	eb0e 0207 	add.w	r2, lr, r7
   daae2:	4462      	add	r2, ip
   daae4:	eb02 62f9 	add.w	r2, r2, r9, ror #27
   daae8:	441a      	add	r2, r3
    P( E, A, B, C, D, R(51) );
   daaea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   daaec:	ea8b 0c03 	eor.w	ip, fp, r3
   daaf0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   daaf2:	ea8c 0c03 	eor.w	ip, ip, r3
   daaf6:	9b06      	ldr	r3, [sp, #24]
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
   daaf8:	ea4f 05b4 	mov.w	r5, r4, ror #2
    P( E, A, B, C, D, R(51) );
   daafc:	ea8c 0c03 	eor.w	ip, ip, r3
   dab00:	ea49 0305 	orr.w	r3, r9, r5
   dab04:	ea4f 7cfc 	mov.w	ip, ip, ror #31
   dab08:	ea03 0b08 	and.w	fp, r3, r8
   dab0c:	ea09 0305 	and.w	r3, r9, r5
   dab10:	ea4b 0303 	orr.w	r3, fp, r3
   dab14:	eb0c 0b07 	add.w	fp, ip, r7
   dab18:	448b      	add	fp, r1
   dab1a:	449b      	add	fp, r3
    P( D, E, A, B, C, R(52) );
   dab1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dab1e:	990d      	ldr	r1, [sp, #52]	; 0x34
   dab20:	ea8a 0303 	eor.w	r3, sl, r3
   dab24:	404b      	eors	r3, r1
   dab26:	9907      	ldr	r1, [sp, #28]
   dab28:	404b      	eors	r3, r1
   dab2a:	ea4f 73f3 	mov.w	r3, r3, ror #31
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
   dab2e:	ea4f 06b9 	mov.w	r6, r9, ror #2
    P( D, E, A, B, C, R(52) );
   dab32:	9308      	str	r3, [sp, #32]
   dab34:	9908      	ldr	r1, [sp, #32]
   dab36:	ea42 0006 	orr.w	r0, r2, r6
   dab3a:	4028      	ands	r0, r5
   dab3c:	ea02 0306 	and.w	r3, r2, r6
   dab40:	4303      	orrs	r3, r0
   dab42:	19c8      	adds	r0, r1, r7
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
   dab44:	eb0b 6bf2 	add.w	fp, fp, r2, ror #27
    P( D, E, A, B, C, R(52) );
   dab48:	4440      	add	r0, r8
   dab4a:	eb00 60fb 	add.w	r0, r0, fp, ror #27
   dab4e:	4418      	add	r0, r3
    P( C, D, E, A, B, R(53) );
   dab50:	9910      	ldr	r1, [sp, #64]	; 0x40
   dab52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   dab54:	404b      	eors	r3, r1
   dab56:	9902      	ldr	r1, [sp, #8]
   dab58:	404b      	eors	r3, r1
   dab5a:	ea83 030e 	eor.w	r3, r3, lr
   dab5e:	ea4f 73f3 	mov.w	r3, r3, ror #31
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
   dab62:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( C, D, E, A, B, R(53) );
   dab66:	930e      	str	r3, [sp, #56]	; 0x38
   dab68:	990e      	ldr	r1, [sp, #56]	; 0x38
   dab6a:	ea4b 0302 	orr.w	r3, fp, r2
   dab6e:	ea03 0406 	and.w	r4, r3, r6
   dab72:	ea0b 0302 	and.w	r3, fp, r2
   dab76:	4323      	orrs	r3, r4
   dab78:	19cc      	adds	r4, r1, r7
   dab7a:	442c      	add	r4, r5
    P( B, C, D, E, A, R(54) );
   dab7c:	9909      	ldr	r1, [sp, #36]	; 0x24
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
   dab7e:	441c      	add	r4, r3
    P( B, C, D, E, A, R(54) );
   dab80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dab82:	ea83 0901 	eor.w	r9, r3, r1
   dab86:	9b03      	ldr	r3, [sp, #12]
   dab88:	ea89 0903 	eor.w	r9, r9, r3
   dab8c:	ea89 090c 	eor.w	r9, r9, ip
   dab90:	ea4f 73f9 	mov.w	r3, r9, ror #31
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
   dab94:	ea4f 0bbb 	mov.w	fp, fp, ror #2
    P( B, C, D, E, A, R(54) );
   dab98:	930f      	str	r3, [sp, #60]	; 0x3c
   dab9a:	990f      	ldr	r1, [sp, #60]	; 0x3c
   dab9c:	ea40 090b 	orr.w	r9, r0, fp
   daba0:	ea09 0902 	and.w	r9, r9, r2
   daba4:	ea00 030b 	and.w	r3, r0, fp
   daba8:	ea49 0303 	orr.w	r3, r9, r3
   dabac:	eb01 0907 	add.w	r9, r1, r7
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
   dabb0:	eb04 64f0 	add.w	r4, r4, r0, ror #27
    P( B, C, D, E, A, R(54) );
   dabb4:	44b1      	add	r9, r6
   dabb6:	eb09 69f4 	add.w	r9, r9, r4, ror #27
   dabba:	4499      	add	r9, r3
    P( A, B, C, D, E, R(55) );
   dabbc:	990a      	ldr	r1, [sp, #40]	; 0x28
   dabbe:	9b10      	ldr	r3, [sp, #64]	; 0x40
   dabc0:	ea83 0801 	eor.w	r8, r3, r1
   dabc4:	9b04      	ldr	r3, [sp, #16]
   dabc6:	ea88 0803 	eor.w	r8, r8, r3
   dabca:	9b08      	ldr	r3, [sp, #32]
   dabcc:	ea88 0803 	eor.w	r8, r8, r3
   dabd0:	ea4f 73f8 	mov.w	r3, r8, ror #31
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
   dabd4:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( A, B, C, D, E, R(55) );
   dabd8:	9310      	str	r3, [sp, #64]	; 0x40
   dabda:	9910      	ldr	r1, [sp, #64]	; 0x40
   dabdc:	ea44 0300 	orr.w	r3, r4, r0
   dabe0:	ea03 080b 	and.w	r8, r3, fp
   dabe4:	ea04 0300 	and.w	r3, r4, r0
   dabe8:	ea48 0303 	orr.w	r3, r8, r3
   dabec:	eb01 0807 	add.w	r8, r1, r7
   dabf0:	4490      	add	r8, r2
   dabf2:	4498      	add	r8, r3
    P( E, A, B, C, D, R(56) );
   dabf4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   dabf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dabf8:	ea83 0602 	eor.w	r6, r3, r2
   dabfc:	9b06      	ldr	r3, [sp, #24]
   dabfe:	e001      	b.n	dac04 <mbedtls_internal_sha1_process+0xb0c>
   dac00:	8f1bbcdc 	.word	0x8f1bbcdc
   dac04:	405e      	eors	r6, r3
   dac06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   dac08:	405e      	eors	r6, r3
   dac0a:	ea4f 73f6 	mov.w	r3, r6, ror #31
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
   dac0e:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( E, A, B, C, D, R(56) );
   dac12:	9309      	str	r3, [sp, #36]	; 0x24
   dac14:	9a09      	ldr	r2, [sp, #36]	; 0x24
   dac16:	ea49 0604 	orr.w	r6, r9, r4
   dac1a:	4006      	ands	r6, r0
   dac1c:	ea09 0304 	and.w	r3, r9, r4
   dac20:	4333      	orrs	r3, r6
   dac22:	19d6      	adds	r6, r2, r7
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
   dac24:	eb08 68f9 	add.w	r8, r8, r9, ror #27
    P( E, A, B, C, D, R(56) );
   dac28:	445e      	add	r6, fp
   dac2a:	eb06 66f8 	add.w	r6, r6, r8, ror #27
   dac2e:	441e      	add	r6, r3
    P( D, E, A, B, C, R(57) );
   dac30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   dac32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dac34:	ea83 0b02 	eor.w	fp, r3, r2
   dac38:	9b07      	ldr	r3, [sp, #28]
    P( C, D, E, A, B, R(58) );
   dac3a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
   dac3c:	ea8b 0b03 	eor.w	fp, fp, r3
   dac40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
   dac42:	ea4f 09b9 	mov.w	r9, r9, ror #2
    P( D, E, A, B, C, R(57) );
   dac46:	ea8b 0b03 	eor.w	fp, fp, r3
   dac4a:	ea48 0309 	orr.w	r3, r8, r9
   dac4e:	ea4f 7bfb 	mov.w	fp, fp, ror #31
   dac52:	ea03 0a04 	and.w	sl, r3, r4
   dac56:	ea08 0309 	and.w	r3, r8, r9
   dac5a:	ea4a 0303 	orr.w	r3, sl, r3
   dac5e:	eb0b 0a07 	add.w	sl, fp, r7
   dac62:	4482      	add	sl, r0
   dac64:	449a      	add	sl, r3
    P( C, D, E, A, B, R(58) );
   dac66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
   dac68:	9804      	ldr	r0, [sp, #16]
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
    P( C, D, E, A, B, R(58) );
   dac6a:	ea83 0502 	eor.w	r5, r3, r2
   dac6e:	ea85 050e 	eor.w	r5, r5, lr
   dac72:	404d      	eors	r5, r1
   dac74:	ea4f 73f5 	mov.w	r3, r5, ror #31
   dac78:	19dd      	adds	r5, r3, r7
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
   dac7a:	eb0a 6af6 	add.w	sl, sl, r6, ror #27
   dac7e:	ea4f 08b8 	mov.w	r8, r8, ror #2
    P( C, D, E, A, B, R(58) );
   dac82:	4425      	add	r5, r4
   dac84:	930a      	str	r3, [sp, #40]	; 0x28
   dac86:	eb05 63fa 	add.w	r3, r5, sl, ror #27
   dac8a:	ea46 0508 	orr.w	r5, r6, r8
   dac8e:	ea06 0208 	and.w	r2, r6, r8
   dac92:	ea05 0509 	and.w	r5, r5, r9
   dac96:	4315      	orrs	r5, r2
   dac98:	441d      	add	r5, r3
    P( B, C, D, E, A, R(59) );
   dac9a:	9a02      	ldr	r2, [sp, #8]
   dac9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   dac9e:	ea83 0102 	eor.w	r1, r3, r2
   daca2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   daca4:	ea81 010c 	eor.w	r1, r1, ip
   daca8:	4059      	eors	r1, r3
   dacaa:	ea4f 73f1 	mov.w	r3, r1, ror #31
   dacae:	930b      	str	r3, [sp, #44]	; 0x2c
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
    P( C, D, E, A, B, R(58) );
   dacb0:	ea4f 06b6 	mov.w	r6, r6, ror #2
    P( B, C, D, E, A, R(59) );
   dacb4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   dacb6:	ea4a 0106 	orr.w	r1, sl, r6
   dacba:	ea01 0108 	and.w	r1, r1, r8
   dacbe:	ea0a 0306 	and.w	r3, sl, r6
   dacc2:	4417      	add	r7, r2
   dacc4:	444f      	add	r7, r9
   dacc6:	430b      	orrs	r3, r1
#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
   dacc8:	9a03      	ldr	r2, [sp, #12]
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
    P( C, D, E, A, B, R(58) );
    P( B, C, D, E, A, R(59) );
   dacca:	19d9      	adds	r1, r3, r7
#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
   daccc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   dacce:	4fd9      	ldr	r7, [pc, #868]	; (db034 <mbedtls_internal_sha1_process+0xf3c>)
   dacd0:	4053      	eors	r3, r2
   dacd2:	9a08      	ldr	r2, [sp, #32]
   dacd4:	4053      	eors	r3, r2
   dacd6:	ea83 030b 	eor.w	r3, r3, fp
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
    P( C, D, E, A, B, R(58) );
    P( B, C, D, E, A, R(59) );
   dacda:	ea4f 0aba 	mov.w	sl, sl, ror #2
#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
   dacde:	ea4f 73f3 	mov.w	r3, r3, ror #31
   dace2:	930c      	str	r3, [sp, #48]	; 0x30
   dace4:	ea86 020a 	eor.w	r2, r6, sl
   dace8:	443b      	add	r3, r7
   dacea:	406a      	eors	r2, r5
   dacec:	4443      	add	r3, r8
   dacee:	4413      	add	r3, r2
    P( E, A, B, C, D, R(61) );
   dacf0:	9a02      	ldr	r2, [sp, #8]
   dacf2:	4042      	eors	r2, r0
   dacf4:	980e      	ldr	r0, [sp, #56]	; 0x38
   dacf6:	4042      	eors	r2, r0
   dacf8:	980a      	ldr	r0, [sp, #40]	; 0x28
    P( D, E, A, B, C, R(62) );
   dacfa:	9c06      	ldr	r4, [sp, #24]

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
   dacfc:	4042      	eors	r2, r0
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
    P( C, D, E, A, B, R(58) );
    P( B, C, D, E, A, R(59) );
   dacfe:	eb01 61f5 	add.w	r1, r1, r5, ror #27

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
   dad02:	ea4f 72f2 	mov.w	r2, r2, ror #31
#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
   dad06:	ea4f 05b5 	mov.w	r5, r5, ror #2
    P( E, A, B, C, D, R(61) );
   dad0a:	9202      	str	r2, [sp, #8]
   dad0c:	ea8a 0005 	eor.w	r0, sl, r5
   dad10:	443a      	add	r2, r7
   dad12:	4048      	eors	r0, r1
   dad14:	4432      	add	r2, r6
   dad16:	4402      	add	r2, r0
    P( D, E, A, B, C, R(62) );
   dad18:	9803      	ldr	r0, [sp, #12]
    P( C, D, E, A, B, R(63) );
   dad1a:	9e07      	ldr	r6, [sp, #28]
#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
   dad1c:	ea80 0904 	eor.w	r9, r0, r4
   dad20:	980f      	ldr	r0, [sp, #60]	; 0x3c
   dad22:	ea89 0900 	eor.w	r9, r9, r0
   dad26:	980b      	ldr	r0, [sp, #44]	; 0x2c
   dad28:	ea89 0900 	eor.w	r9, r9, r0
#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
   dad2c:	eb03 63f1 	add.w	r3, r3, r1, ror #27
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
   dad30:	ea4f 70f9 	mov.w	r0, r9, ror #31

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
   dad34:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( D, E, A, B, C, R(62) );
   dad38:	9003      	str	r0, [sp, #12]
   dad3a:	ea85 0401 	eor.w	r4, r5, r1
   dad3e:	4438      	add	r0, r7
   dad40:	405c      	eors	r4, r3
   dad42:	4450      	add	r0, sl
   dad44:	4420      	add	r0, r4
    P( C, D, E, A, B, R(63) );
   dad46:	9c04      	ldr	r4, [sp, #16]
   dad48:	ea84 0806 	eor.w	r8, r4, r6
   dad4c:	9c10      	ldr	r4, [sp, #64]	; 0x40
   dad4e:	ea88 0804 	eor.w	r8, r8, r4
   dad52:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   dad54:	ea88 0804 	eor.w	r8, r8, r4
   dad58:	ea4f 74f8 	mov.w	r4, r8, ror #31
   dad5c:	9404      	str	r4, [sp, #16]
   dad5e:	443c      	add	r4, r7
   dad60:	442c      	add	r4, r5
    P( B, C, D, E, A, R(64) );
   dad62:	9d06      	ldr	r5, [sp, #24]
   dad64:	ea85 090e 	eor.w	r9, r5, lr
   dad68:	9d09      	ldr	r5, [sp, #36]	; 0x24
   dad6a:	ea89 0905 	eor.w	r9, r9, r5
   dad6e:	9d02      	ldr	r5, [sp, #8]

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
   dad70:	eb02 62f3 	add.w	r2, r2, r3, ror #27
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
   dad74:	ea89 0905 	eor.w	r9, r9, r5
#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
   dad78:	ea4f 03b3 	mov.w	r3, r3, ror #2
    P( C, D, E, A, B, R(63) );
   dad7c:	ea81 0603 	eor.w	r6, r1, r3
    P( B, C, D, E, A, R(64) );
   dad80:	ea4f 75f9 	mov.w	r5, r9, ror #31
   dad84:	9506      	str	r5, [sp, #24]
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
   dad86:	4056      	eors	r6, r2
   dad88:	4434      	add	r4, r6
    P( B, C, D, E, A, R(64) );
   dad8a:	9e06      	ldr	r6, [sp, #24]
   dad8c:	eb06 0907 	add.w	r9, r6, r7
   dad90:	4489      	add	r9, r1
    P( A, B, C, D, E, R(65) );
   dad92:	9907      	ldr	r1, [sp, #28]
   dad94:	ea81 080c 	eor.w	r8, r1, ip
   dad98:	9903      	ldr	r1, [sp, #12]
   dad9a:	ea88 080b 	eor.w	r8, r8, fp
#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
   dad9e:	eb00 60f2 	add.w	r0, r0, r2, ror #27
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
   dada2:	ea88 0801 	eor.w	r8, r8, r1
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
   dada6:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( B, C, D, E, A, R(64) );
   dadaa:	ea83 0502 	eor.w	r5, r3, r2
    P( A, B, C, D, E, R(65) );
   dadae:	ea4f 71f8 	mov.w	r1, r8, ror #31
   dadb2:	9107      	str	r1, [sp, #28]

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
   dadb4:	4045      	eors	r5, r0
   dadb6:	44a9      	add	r9, r5
    P( A, B, C, D, E, R(65) );
   dadb8:	9d07      	ldr	r5, [sp, #28]
   dadba:	eb05 0807 	add.w	r8, r5, r7
   dadbe:	4498      	add	r8, r3
    P( E, A, B, C, D, R(66) );
   dadc0:	9b08      	ldr	r3, [sp, #32]
   dadc2:	ea8e 0603 	eor.w	r6, lr, r3
   dadc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dadc8:	405e      	eors	r6, r3
   dadca:	9b04      	ldr	r3, [sp, #16]
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
   dadcc:	eb04 64f0 	add.w	r4, r4, r0, ror #27
    P( B, C, D, E, A, R(64) );
   dadd0:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( A, B, C, D, E, R(65) );
   dadd4:	ea82 0100 	eor.w	r1, r2, r0
    P( E, A, B, C, D, R(66) );
   dadd8:	405e      	eors	r6, r3

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
   dadda:	eb09 69f4 	add.w	r9, r9, r4, ror #27
    P( A, B, C, D, E, R(65) );
   dadde:	4061      	eors	r1, r4
    P( E, A, B, C, D, R(66) );
   dade0:	ea4f 76f6 	mov.w	r6, r6, ror #31
    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
   dade4:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( E, A, B, C, D, R(66) );
   dade8:	ea80 0304 	eor.w	r3, r0, r4
   dadec:	eb06 0e07 	add.w	lr, r6, r7
   dadf0:	ea83 0309 	eor.w	r3, r3, r9
   dadf4:	4496      	add	lr, r2
   dadf6:	449e      	add	lr, r3
    P( D, E, A, B, C, R(67) );
   dadf8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    P( C, D, E, A, B, R(68) );
   dadfa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
   dadfc:	ea8c 0a03 	eor.w	sl, ip, r3
   dae00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   dae02:	ea8a 0a03 	eor.w	sl, sl, r3
   dae06:	9b06      	ldr	r3, [sp, #24]
    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
   dae08:	4488      	add	r8, r1
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
   dae0a:	ea8a 0a03 	eor.w	sl, sl, r3
    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
   dae0e:	eb08 68f9 	add.w	r8, r8, r9, ror #27
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
   dae12:	ea4f 7afa 	mov.w	sl, sl, ror #31
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
   dae16:	ea4f 09b9 	mov.w	r9, r9, ror #2
    P( D, E, A, B, C, R(67) );
   dae1a:	ea84 0309 	eor.w	r3, r4, r9
   dae1e:	eb0a 0c07 	add.w	ip, sl, r7
   dae22:	ea83 0308 	eor.w	r3, r3, r8
   dae26:	4484      	add	ip, r0
   dae28:	449c      	add	ip, r3
    P( C, D, E, A, B, R(68) );
   dae2a:	9b08      	ldr	r3, [sp, #32]
   dae2c:	4053      	eors	r3, r2
   dae2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   dae30:	4053      	eors	r3, r2
   dae32:	406b      	eors	r3, r5
   dae34:	ea4f 73f3 	mov.w	r3, r3, ror #31
   dae38:	9308      	str	r3, [sp, #32]
   dae3a:	9a08      	ldr	r2, [sp, #32]
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
   dae3c:	eb0e 6ef8 	add.w	lr, lr, r8, ror #27
    P( D, E, A, B, C, R(67) );
   dae40:	ea4f 08b8 	mov.w	r8, r8, ror #2
    P( C, D, E, A, B, R(68) );
   dae44:	ea89 0308 	eor.w	r3, r9, r8
   dae48:	19d5      	adds	r5, r2, r7
   dae4a:	ea83 030e 	eor.w	r3, r3, lr
   dae4e:	4425      	add	r5, r4
   dae50:	441d      	add	r5, r3
    P( B, C, D, E, A, R(69) );
   dae52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   dae54:	9a10      	ldr	r2, [sp, #64]	; 0x40
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
   dae56:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
   dae58:	4053      	eors	r3, r2
   dae5a:	9a02      	ldr	r2, [sp, #8]
   dae5c:	4053      	eors	r3, r2
   dae5e:	4073      	eors	r3, r6
   dae60:	ea4f 73f3 	mov.w	r3, r3, ror #31
   dae64:	930d      	str	r3, [sp, #52]	; 0x34
   dae66:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
   dae68:	eb0c 6cfe 	add.w	ip, ip, lr, ror #27
    P( C, D, E, A, B, R(68) );
   dae6c:	ea4f 0ebe 	mov.w	lr, lr, ror #2
    P( B, C, D, E, A, R(69) );
   dae70:	ea88 030e 	eor.w	r3, r8, lr
   dae74:	19d1      	adds	r1, r2, r7
   dae76:	ea83 030c 	eor.w	r3, r3, ip
   dae7a:	4449      	add	r1, r9
    P( A, B, C, D, E, R(70) );
   dae7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
   dae7e:	4419      	add	r1, r3
    P( A, B, C, D, E, R(70) );
   dae80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dae82:	ea83 0902 	eor.w	r9, r3, r2
   dae86:	9b03      	ldr	r3, [sp, #12]
   dae88:	ea89 0903 	eor.w	r9, r9, r3
   dae8c:	ea89 090a 	eor.w	r9, r9, sl
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
   dae90:	eb05 65fc 	add.w	r5, r5, ip, ror #27
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
   dae94:	ea4f 79f9 	mov.w	r9, r9, ror #31
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
   dae98:	ea4f 0cbc 	mov.w	ip, ip, ror #2
    P( A, B, C, D, E, R(70) );
   dae9c:	ea8e 020c 	eor.w	r2, lr, ip
   daea0:	eb09 0307 	add.w	r3, r9, r7
   daea4:	406a      	eors	r2, r5
   daea6:	4443      	add	r3, r8
   daea8:	4413      	add	r3, r2
    P( E, A, B, C, D, R(71) );
   daeaa:	9a10      	ldr	r2, [sp, #64]	; 0x40
   daeac:	ea82 080b 	eor.w	r8, r2, fp
   daeb0:	9a04      	ldr	r2, [sp, #16]
   daeb2:	ea88 0802 	eor.w	r8, r8, r2
   daeb6:	9a08      	ldr	r2, [sp, #32]
   daeb8:	ea88 0802 	eor.w	r8, r8, r2
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
   daebc:	eb01 61f5 	add.w	r1, r1, r5, ror #27
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
   daec0:	ea4f 78f8 	mov.w	r8, r8, ror #31
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
   daec4:	ea4f 05b5 	mov.w	r5, r5, ror #2
    P( E, A, B, C, D, R(71) );
   daec8:	ea8c 0005 	eor.w	r0, ip, r5
   daecc:	eb08 0207 	add.w	r2, r8, r7
   daed0:	4048      	eors	r0, r1
   daed2:	4472      	add	r2, lr
   daed4:	4402      	add	r2, r0
    P( D, E, A, B, C, R(72) );
   daed6:	9809      	ldr	r0, [sp, #36]	; 0x24
   daed8:	ea80 0e04 	eor.w	lr, r0, r4
   daedc:	9806      	ldr	r0, [sp, #24]
   daede:	ea8e 0e00 	eor.w	lr, lr, r0
   daee2:	980d      	ldr	r0, [sp, #52]	; 0x34
   daee4:	ea8e 0e00 	eor.w	lr, lr, r0
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
   daee8:	eb03 63f1 	add.w	r3, r3, r1, ror #27
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
   daeec:	ea4f 7efe 	mov.w	lr, lr, ror #31
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
   daef0:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( D, E, A, B, C, R(72) );
   daef4:	ea85 0401 	eor.w	r4, r5, r1
   daef8:	eb0e 0007 	add.w	r0, lr, r7
   daefc:	405c      	eors	r4, r3
   daefe:	4460      	add	r0, ip
   daf00:	4420      	add	r0, r4
    P( C, D, E, A, B, R(73) );
   daf02:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   daf04:	ea8b 0c04 	eor.w	ip, fp, r4
   daf08:	9c07      	ldr	r4, [sp, #28]
   daf0a:	ea8c 0c04 	eor.w	ip, ip, r4
   daf0e:	ea8c 0c09 	eor.w	ip, ip, r9
   daf12:	ea4f 7cfc 	mov.w	ip, ip, ror #31
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
   daf16:	eb02 62f3 	add.w	r2, r2, r3, ror #27
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
   daf1a:	eb0c 0407 	add.w	r4, ip, r7
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
   daf1e:	ea4f 03b3 	mov.w	r3, r3, ror #2
    P( C, D, E, A, B, R(73) );
   daf22:	ea81 0b03 	eor.w	fp, r1, r3
   daf26:	442c      	add	r4, r5
    P( B, C, D, E, A, R(74) );
   daf28:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
   daf2a:	ea8b 0b02 	eor.w	fp, fp, r2
   daf2e:	445c      	add	r4, fp
    P( B, C, D, E, A, R(74) );
   daf30:	46ab      	mov	fp, r5
   daf32:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   daf34:	ea8b 0505 	eor.w	r5, fp, r5
   daf38:	406e      	eors	r6, r5
   daf3a:	ea86 0608 	eor.w	r6, r6, r8
   daf3e:	ea4f 75f6 	mov.w	r5, r6, ror #31
   daf42:	9509      	str	r5, [sp, #36]	; 0x24
   daf44:	9e09      	ldr	r6, [sp, #36]	; 0x24
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
   daf46:	eb00 60f2 	add.w	r0, r0, r2, ror #27
    P( C, D, E, A, B, R(73) );
   daf4a:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( B, C, D, E, A, R(74) );
   daf4e:	eb06 0b07 	add.w	fp, r6, r7
   daf52:	ea83 0502 	eor.w	r5, r3, r2
   daf56:	4459      	add	r1, fp
   daf58:	4045      	eors	r5, r0
   daf5a:	440d      	add	r5, r1
    P( A, B, C, D, E, R(75) );
   daf5c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   daf5e:	460e      	mov	r6, r1
   daf60:	9902      	ldr	r1, [sp, #8]
   daf62:	4071      	eors	r1, r6
   daf64:	ea81 0a0a 	eor.w	sl, r1, sl
   daf68:	ea8a 0e0e 	eor.w	lr, sl, lr
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
   daf6c:	eb04 64f0 	add.w	r4, r4, r0, ror #27
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
   daf70:	ea4f 7efe 	mov.w	lr, lr, ror #31
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
   daf74:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( A, B, C, D, E, R(75) );
   daf78:	eb0e 0a07 	add.w	sl, lr, r7
   daf7c:	ea82 0100 	eor.w	r1, r2, r0
   daf80:	4453      	add	r3, sl
   daf82:	4061      	eors	r1, r4
   daf84:	4419      	add	r1, r3
    P( E, A, B, C, D, R(76) );
   daf86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   daf88:	461e      	mov	r6, r3
   daf8a:	9b03      	ldr	r3, [sp, #12]
   daf8c:	4073      	eors	r3, r6
   daf8e:	9e08      	ldr	r6, [sp, #32]
   daf90:	4073      	eors	r3, r6
   daf92:	ea83 0c0c 	eor.w	ip, r3, ip
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
   daf96:	eb05 65f4 	add.w	r5, r5, r4, ror #27
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
   daf9a:	ea4f 7cfc 	mov.w	ip, ip, ror #31
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
   daf9e:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( E, A, B, C, D, R(76) );
   dafa2:	eb0c 0a07 	add.w	sl, ip, r7
   dafa6:	ea80 0304 	eor.w	r3, r0, r4
   dafaa:	4452      	add	r2, sl
   dafac:	406b      	eors	r3, r5
    P( D, E, A, B, C, R(77) );
   dafae:	9e04      	ldr	r6, [sp, #16]
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
   dafb0:	4413      	add	r3, r2
    P( D, E, A, B, C, R(77) );
   dafb2:	9a02      	ldr	r2, [sp, #8]
   dafb4:	4072      	eors	r2, r6
   dafb6:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   dafb8:	4072      	eors	r2, r6
   dafba:	9e09      	ldr	r6, [sp, #36]	; 0x24
   dafbc:	4072      	eors	r2, r6
   dafbe:	eb07 72f2 	add.w	r2, r7, r2, ror #31
    P( C, D, E, A, B, R(78) );
   dafc2:	9e06      	ldr	r6, [sp, #24]
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
    P( D, E, A, B, C, R(77) );
   dafc4:	4410      	add	r0, r2
    P( C, D, E, A, B, R(78) );
   dafc6:	9a03      	ldr	r2, [sp, #12]
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
   dafc8:	eb01 61f5 	add.w	r1, r1, r5, ror #27
    P( E, A, B, C, D, R(76) );
    P( D, E, A, B, C, R(77) );
    P( C, D, E, A, B, R(78) );
   dafcc:	4072      	eors	r2, r6
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
   dafce:	ea4f 05b5 	mov.w	r5, r5, ror #2
    P( D, E, A, B, C, R(77) );
   dafd2:	ea84 0a05 	eor.w	sl, r4, r5
    P( C, D, E, A, B, R(78) );
   dafd6:	ea82 0909 	eor.w	r9, r2, r9
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
   dafda:	eb03 63f1 	add.w	r3, r3, r1, ror #27
    P( D, E, A, B, C, R(77) );
   dafde:	ea8a 0a01 	eor.w	sl, sl, r1
    P( C, D, E, A, B, R(78) );
   dafe2:	ea89 090e 	eor.w	r9, r9, lr
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
    P( D, E, A, B, C, R(77) );
   dafe6:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( C, D, E, A, B, R(78) );
   dafea:	eb07 79f9 	add.w	r9, r7, r9, ror #31
   dafee:	ea85 0601 	eor.w	r6, r5, r1
   daff2:	405e      	eors	r6, r3
   daff4:	444c      	add	r4, r9
    P( B, C, D, E, A, R(79) );

#undef K
#undef F

    ctx->state[0] += A;
   daff6:	9a04      	ldr	r2, [sp, #16]
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
    P( D, E, A, B, C, R(77) );
    P( C, D, E, A, B, R(78) );
   daff8:	4434      	add	r4, r6
    P( B, C, D, E, A, R(79) );

#undef K
#undef F

    ctx->state[0] += A;
   daffa:	9e07      	ldr	r6, [sp, #28]
   daffc:	4072      	eors	r2, r6
   daffe:	ea82 0808 	eor.w	r8, r2, r8
   db002:	9a11      	ldr	r2, [sp, #68]	; 0x44
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
    P( D, E, A, B, C, R(77) );
   db004:	4450      	add	r0, sl
   db006:	eb00 60f3 	add.w	r0, r0, r3, ror #27
    P( B, C, D, E, A, R(79) );

#undef K
#undef F

    ctx->state[0] += A;
   db00a:	4417      	add	r7, r2
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
    P( D, E, A, B, C, R(77) );
    P( C, D, E, A, B, R(78) );
   db00c:	ea4f 03b3 	mov.w	r3, r3, ror #2
    P( B, C, D, E, A, R(79) );

#undef K
#undef F

    ctx->state[0] += A;
   db010:	ea88 0c0c 	eor.w	ip, r8, ip
   db014:	ea81 0603 	eor.w	r6, r1, r3
   db018:	eb07 7cfc 	add.w	ip, r7, ip, ror #31
   db01c:	4046      	eors	r6, r0
   db01e:	4465      	add	r5, ip
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
    P( D, E, A, B, C, R(77) );
    P( C, D, E, A, B, R(78) );
   db020:	eb04 64f0 	add.w	r4, r4, r0, ror #27
    P( B, C, D, E, A, R(79) );

#undef K
#undef F

    ctx->state[0] += A;
   db024:	9a01      	ldr	r2, [sp, #4]
   db026:	4435      	add	r5, r6
   db028:	eb05 65f4 	add.w	r5, r5, r4, ror #27
   db02c:	6095      	str	r5, [r2, #8]
    ctx->state[1] += B;
   db02e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   db030:	e002      	b.n	db038 <mbedtls_internal_sha1_process+0xf40>
   db032:	bf00      	nop
   db034:	ca62c1d6 	.word	0xca62c1d6
   db038:	4414      	add	r4, r2
   db03a:	9a01      	ldr	r2, [sp, #4]
   db03c:	60d4      	str	r4, [r2, #12]
    ctx->state[2] += C;
   db03e:	9a05      	ldr	r2, [sp, #20]
   db040:	eb02 00b0 	add.w	r0, r2, r0, ror #2
   db044:	9a01      	ldr	r2, [sp, #4]
   db046:	6110      	str	r0, [r2, #16]
    ctx->state[3] += D;
   db048:	9a12      	ldr	r2, [sp, #72]	; 0x48
   db04a:	4413      	add	r3, r2
   db04c:	9a01      	ldr	r2, [sp, #4]
   db04e:	6153      	str	r3, [r2, #20]
    ctx->state[4] += E;
   db050:	9b15      	ldr	r3, [sp, #84]	; 0x54

    return( 0 );
}
   db052:	2000      	movs	r0, #0

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
    ctx->state[4] += E;
   db054:	4419      	add	r1, r3
   db056:	6191      	str	r1, [r2, #24]

    return( 0 );
}
   db058:	b017      	add	sp, #92	; 0x5c
   db05a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db05e:	bf00      	nop

000db060 <mbedtls_sha1_update_ret>:
 * SHA-1 process buffer
 */
int mbedtls_sha1_update_ret( mbedtls_sha1_context *ctx,
                             const unsigned char *input,
                             size_t ilen )
{
   db060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   db064:	4604      	mov	r4, r0
   db066:	460e      	mov	r6, r1
    uint32_t left;

    SHA1_VALIDATE_RET( ctx != NULL );
    SHA1_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
   db068:	4615      	mov	r5, r2
   db06a:	b382      	cbz	r2, db0ce <mbedtls_sha1_update_ret+0x6e>
        return( 0 );

    left = ctx->total[0] & 0x3F;
   db06c:	6803      	ldr	r3, [r0, #0]
   db06e:	f003 003f 	and.w	r0, r3, #63	; 0x3f
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
   db072:	4413      	add	r3, r2
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
   db074:	429a      	cmp	r2, r3
        return( 0 );

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
   db076:	6023      	str	r3, [r4, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;
   db078:	bf82      	ittt	hi
   db07a:	6863      	ldrhi	r3, [r4, #4]
   db07c:	3301      	addhi	r3, #1
   db07e:	6063      	strhi	r3, [r4, #4]

    if( left && ilen >= fill )
   db080:	b180      	cbz	r0, db0a4 <mbedtls_sha1_update_ret+0x44>

    if( ilen == 0 )
        return( 0 );

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;
   db082:	f1c0 0740 	rsb	r7, r0, #64	; 0x40
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;

    if( left && ilen >= fill )
   db086:	42ba      	cmp	r2, r7
   db088:	d31b      	bcc.n	db0c2 <mbedtls_sha1_update_ret+0x62>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
   db08a:	f104 081c 	add.w	r8, r4, #28
   db08e:	463a      	mov	r2, r7
   db090:	4440      	add	r0, r8
   db092:	f00e fd10 	bl	e9ab6 <memcpy>

        if( ( ret = mbedtls_internal_sha1_process( ctx, ctx->buffer ) ) != 0 )
   db096:	4641      	mov	r1, r8
   db098:	4620      	mov	r0, r4
   db09a:	f7ff f82d 	bl	da0f8 <mbedtls_internal_sha1_process>
   db09e:	b9b8      	cbnz	r0, db0d0 <mbedtls_sha1_update_ret+0x70>
            return( ret );

        input += fill;
   db0a0:	443e      	add	r6, r7
        ilen  -= fill;
   db0a2:	1bed      	subs	r5, r5, r7
 * SHA-1 process buffer
 */
int mbedtls_sha1_update_ret( mbedtls_sha1_context *ctx,
                             const unsigned char *input,
                             size_t ilen )
{
   db0a4:	462f      	mov	r7, r5
   db0a6:	1be9      	subs	r1, r5, r7
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 64 )
   db0a8:	2f3f      	cmp	r7, #63	; 0x3f
   db0aa:	4431      	add	r1, r6
   db0ac:	d905      	bls.n	db0ba <mbedtls_sha1_update_ret+0x5a>
    {
        if( ( ret = mbedtls_internal_sha1_process( ctx, input ) ) != 0 )
   db0ae:	4620      	mov	r0, r4
   db0b0:	f7ff f822 	bl	da0f8 <mbedtls_internal_sha1_process>
   db0b4:	b960      	cbnz	r0, db0d0 <mbedtls_sha1_update_ret+0x70>
            return( ret );

        input += 64;
        ilen  -= 64;
   db0b6:	3f40      	subs	r7, #64	; 0x40
   db0b8:	e7f5      	b.n	db0a6 <mbedtls_sha1_update_ret+0x46>
    }

    if( ilen > 0 )
   db0ba:	b147      	cbz	r7, db0ce <mbedtls_sha1_update_ret+0x6e>
   db0bc:	463d      	mov	r5, r7
   db0be:	460e      	mov	r6, r1
   db0c0:	2000      	movs	r0, #0
        memcpy( (void *) (ctx->buffer + left), input, ilen );
   db0c2:	341c      	adds	r4, #28
   db0c4:	462a      	mov	r2, r5
   db0c6:	4631      	mov	r1, r6
   db0c8:	4420      	add	r0, r4
   db0ca:	f00e fcf4 	bl	e9ab6 <memcpy>

    return( 0 );
   db0ce:	2000      	movs	r0, #0
}
   db0d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000db0d4 <mbedtls_sha1_finish_ret>:
/*
 * SHA-1 final digest
 */
int mbedtls_sha1_finish_ret( mbedtls_sha1_context *ctx,
                             unsigned char output[20] )
{
   db0d4:	b570      	push	{r4, r5, r6, lr}
    SHA1_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
   db0d6:	6803      	ldr	r3, [r0, #0]
/*
 * SHA-1 final digest
 */
int mbedtls_sha1_finish_ret( mbedtls_sha1_context *ctx,
                             unsigned char output[20] )
{
   db0d8:	4604      	mov	r4, r0
    SHA1_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
   db0da:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    ctx->buffer[used++] = 0x80;
   db0de:	1c58      	adds	r0, r3, #1
   db0e0:	4423      	add	r3, r4
   db0e2:	2280      	movs	r2, #128	; 0x80

    if( used <= 56 )
   db0e4:	2838      	cmp	r0, #56	; 0x38
/*
 * SHA-1 final digest
 */
int mbedtls_sha1_finish_ret( mbedtls_sha1_context *ctx,
                             unsigned char output[20] )
{
   db0e6:	460d      	mov	r5, r1
    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;
   db0e8:	771a      	strb	r2, [r3, #28]
   db0ea:	f104 061c 	add.w	r6, r4, #28

    if( used <= 56 )
   db0ee:	d804      	bhi.n	db0fa <mbedtls_sha1_finish_ret+0x26>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
   db0f0:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
   db0f4:	2100      	movs	r1, #0
   db0f6:	4430      	add	r0, r6
   db0f8:	e00e      	b.n	db118 <mbedtls_sha1_finish_ret+0x44>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 64 - used );
   db0fa:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
   db0fe:	2100      	movs	r1, #0
   db100:	4430      	add	r0, r6
   db102:	f00e fcfe 	bl	e9b02 <memset>

        if( ( ret = mbedtls_internal_sha1_process( ctx, ctx->buffer ) ) != 0 )
   db106:	4631      	mov	r1, r6
   db108:	4620      	mov	r0, r4
   db10a:	f7fe fff5 	bl	da0f8 <mbedtls_internal_sha1_process>
   db10e:	2800      	cmp	r0, #0
   db110:	d153      	bne.n	db1ba <mbedtls_sha1_finish_ret+0xe6>
            return( ret );

        memset( ctx->buffer, 0, 56 );
   db112:	4601      	mov	r1, r0
   db114:	2238      	movs	r2, #56	; 0x38
   db116:	4630      	mov	r0, r6
   db118:	f00e fcf3 	bl	e9b02 <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
   db11c:	6823      	ldr	r3, [r4, #0]
         | ( ctx->total[1] <<  3 );
   db11e:	6861      	ldr	r1, [r4, #4]
   db120:	0f5a      	lsrs	r2, r3, #29
   db122:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, ctx->buffer, 56 );
   db126:	0e11      	lsrs	r1, r2, #24
    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );
   db128:	00db      	lsls	r3, r3, #3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
   db12a:	f884 1054 	strb.w	r1, [r4, #84]	; 0x54
   db12e:	0c11      	lsrs	r1, r2, #16
   db130:	f884 1055 	strb.w	r1, [r4, #85]	; 0x55
   db134:	f884 2057 	strb.w	r2, [r4, #87]	; 0x57
   db138:	0a11      	lsrs	r1, r2, #8
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
   db13a:	0e1a      	lsrs	r2, r3, #24
   db13c:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
   db140:	0c1a      	lsrs	r2, r3, #16
   db142:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
   db146:	0a1a      	lsrs	r2, r3, #8
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, ctx->buffer, 56 );
   db148:	f884 1056 	strb.w	r1, [r4, #86]	; 0x56
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
   db14c:	f884 205a 	strb.w	r2, [r4, #90]	; 0x5a
   db150:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b

    if( ( ret = mbedtls_internal_sha1_process( ctx, ctx->buffer ) ) != 0 )
   db154:	4631      	mov	r1, r6
   db156:	4620      	mov	r0, r4
   db158:	f7fe ffce 	bl	da0f8 <mbedtls_internal_sha1_process>
   db15c:	2800      	cmp	r0, #0
   db15e:	d12c      	bne.n	db1ba <mbedtls_sha1_finish_ret+0xe6>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
   db160:	7ae3      	ldrb	r3, [r4, #11]
   db162:	702b      	strb	r3, [r5, #0]
   db164:	8963      	ldrh	r3, [r4, #10]
   db166:	706b      	strb	r3, [r5, #1]
   db168:	68a3      	ldr	r3, [r4, #8]
   db16a:	0a1b      	lsrs	r3, r3, #8
   db16c:	70ab      	strb	r3, [r5, #2]
   db16e:	68a3      	ldr	r3, [r4, #8]
   db170:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
   db172:	7be3      	ldrb	r3, [r4, #15]
   db174:	712b      	strb	r3, [r5, #4]
   db176:	89e3      	ldrh	r3, [r4, #14]
   db178:	716b      	strb	r3, [r5, #5]
   db17a:	68e3      	ldr	r3, [r4, #12]
   db17c:	0a1b      	lsrs	r3, r3, #8
   db17e:	71ab      	strb	r3, [r5, #6]
   db180:	68e3      	ldr	r3, [r4, #12]
   db182:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
   db184:	7ce3      	ldrb	r3, [r4, #19]
   db186:	722b      	strb	r3, [r5, #8]
   db188:	8a63      	ldrh	r3, [r4, #18]
   db18a:	726b      	strb	r3, [r5, #9]
   db18c:	6923      	ldr	r3, [r4, #16]
   db18e:	0a1b      	lsrs	r3, r3, #8
   db190:	72ab      	strb	r3, [r5, #10]
   db192:	6923      	ldr	r3, [r4, #16]
   db194:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
   db196:	7de3      	ldrb	r3, [r4, #23]
   db198:	732b      	strb	r3, [r5, #12]
   db19a:	8ae3      	ldrh	r3, [r4, #22]
   db19c:	736b      	strb	r3, [r5, #13]
   db19e:	6963      	ldr	r3, [r4, #20]
   db1a0:	0a1b      	lsrs	r3, r3, #8
   db1a2:	73ab      	strb	r3, [r5, #14]
   db1a4:	6963      	ldr	r3, [r4, #20]
   db1a6:	73eb      	strb	r3, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
   db1a8:	7ee3      	ldrb	r3, [r4, #27]
   db1aa:	742b      	strb	r3, [r5, #16]
   db1ac:	8b63      	ldrh	r3, [r4, #26]
   db1ae:	746b      	strb	r3, [r5, #17]
   db1b0:	69a3      	ldr	r3, [r4, #24]
   db1b2:	0a1b      	lsrs	r3, r3, #8
   db1b4:	74ab      	strb	r3, [r5, #18]
   db1b6:	69a3      	ldr	r3, [r4, #24]
   db1b8:	74eb      	strb	r3, [r5, #19]

    return( 0 );
}
   db1ba:	bd70      	pop	{r4, r5, r6, pc}

000db1bc <mbedtls_sha1_ret>:
 * output = SHA-1( input buffer )
 */
int mbedtls_sha1_ret( const unsigned char *input,
                      size_t ilen,
                      unsigned char output[20] )
{
   db1bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   db1be:	b099      	sub	sp, #100	; 0x64
   db1c0:	4606      	mov	r6, r0
    mbedtls_sha1_context ctx;

    SHA1_VALIDATE_RET( ilen == 0 || input != NULL );
    SHA1_VALIDATE_RET( (unsigned char *)output != NULL );

    mbedtls_sha1_init( &ctx );
   db1c2:	a801      	add	r0, sp, #4
 * output = SHA-1( input buffer )
 */
int mbedtls_sha1_ret( const unsigned char *input,
                      size_t ilen,
                      unsigned char output[20] )
{
   db1c4:	460f      	mov	r7, r1
   db1c6:	4615      	mov	r5, r2
    mbedtls_sha1_context ctx;

    SHA1_VALIDATE_RET( ilen == 0 || input != NULL );
    SHA1_VALIDATE_RET( (unsigned char *)output != NULL );

    mbedtls_sha1_init( &ctx );
   db1c8:	f7fe ff6e 	bl	da0a8 <mbedtls_sha1_init>

    if( ( ret = mbedtls_sha1_starts_ret( &ctx ) ) != 0 )
   db1cc:	a801      	add	r0, sp, #4
   db1ce:	f7fe ff79 	bl	da0c4 <mbedtls_sha1_starts_ret>
   db1d2:	4604      	mov	r4, r0
   db1d4:	b958      	cbnz	r0, db1ee <mbedtls_sha1_ret+0x32>
        goto exit;

    if( ( ret = mbedtls_sha1_update_ret( &ctx, input, ilen ) ) != 0 )
   db1d6:	463a      	mov	r2, r7
   db1d8:	4631      	mov	r1, r6
   db1da:	a801      	add	r0, sp, #4
   db1dc:	f7ff ff40 	bl	db060 <mbedtls_sha1_update_ret>
   db1e0:	4604      	mov	r4, r0
   db1e2:	b920      	cbnz	r0, db1ee <mbedtls_sha1_ret+0x32>
        goto exit;

    if( ( ret = mbedtls_sha1_finish_ret( &ctx, output ) ) != 0 )
   db1e4:	4629      	mov	r1, r5
   db1e6:	a801      	add	r0, sp, #4
   db1e8:	f7ff ff74 	bl	db0d4 <mbedtls_sha1_finish_ret>
   db1ec:	4604      	mov	r4, r0
        goto exit;

exit:
    mbedtls_sha1_free( &ctx );
   db1ee:	a801      	add	r0, sp, #4
   db1f0:	f7fe ff5e 	bl	da0b0 <mbedtls_sha1_free>

    return( ret );
}
   db1f4:	4620      	mov	r0, r4
   db1f6:	b019      	add	sp, #100	; 0x64
   db1f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000db1fc <mbedtls_platform_zeroize>:

void mbedtls_platform_zeroize( void *buf, size_t len )
{
    MBEDTLS_INTERNAL_VALIDATE( len == 0 || buf != NULL );

    if( len > 0 )
   db1fc:	460a      	mov	r2, r1
   db1fe:	b119      	cbz	r1, db208 <mbedtls_platform_zeroize+0xc>
        memset_func( buf, 0, len );
   db200:	4b02      	ldr	r3, [pc, #8]	; (db20c <mbedtls_platform_zeroize+0x10>)
   db202:	2100      	movs	r1, #0
   db204:	681b      	ldr	r3, [r3, #0]
   db206:	4718      	bx	r3
   db208:	4770      	bx	lr
   db20a:	bf00      	nop
   db20c:	2003ab74 	.word	0x2003ab74

000db210 <mbedtls_timing_get_timer.part.0>:
    (void) _beginthread( TimerProc, 0, NULL );
}

#else /* _WIN32 && !EFIX64 && !EFI32 */

unsigned long mbedtls_timing_get_timer( struct mbedtls_timing_hr_time *val, int reset )
   db210:	b513      	push	{r0, r1, r4, lr}
   db212:	4604      	mov	r4, r0
    }
    else
    {
        unsigned long delta;
        struct timeval now;
        gettimeofday( &now, NULL );
   db214:	2100      	movs	r1, #0
   db216:	4668      	mov	r0, sp
   db218:	f00f fc3a 	bl	eaa90 <gettimeofday>
        delta = ( now.tv_sec  - t->start.tv_sec  ) * 1000ul
              + ( now.tv_usec - t->start.tv_usec ) / 1000;
   db21c:	9b00      	ldr	r3, [sp, #0]
   db21e:	6822      	ldr	r2, [r4, #0]
   db220:	6861      	ldr	r1, [r4, #4]
   db222:	1a9a      	subs	r2, r3, r2
   db224:	9b01      	ldr	r3, [sp, #4]
   db226:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   db22a:	1a5b      	subs	r3, r3, r1
   db22c:	fb93 f3f0 	sdiv	r3, r3, r0
        return( delta );
    }
}
   db230:	fb00 3002 	mla	r0, r0, r2, r3
   db234:	b002      	add	sp, #8
   db236:	bd10      	pop	{r4, pc}

000db238 <_gettimeofday>:
#define HAVE_HARDCLOCK

#include "rtc_hal.h"
#include "timer_hal.h"
extern "C" int _gettimeofday( struct timeval *tv, void *tzvp )
{
   db238:	b538      	push	{r3, r4, r5, lr}
   db23a:	4604      	mov	r4, r0
    uint32_t t = HAL_Timer_Milliseconds();  // get uptime
   db23c:	f00a fcdc 	bl	e5bf8 <HAL_Timer_Get_Milli_Seconds>
   db240:	4605      	mov	r5, r0
    tv->tv_sec = HAL_RTC_Get_UnixTime();    // get rtc time before Particle.syncTime()
   db242:	f00a fce1 	bl	e5c08 <HAL_RTC_Get_UnixTime>
    tv->tv_usec = ( t % 1000 )*1000;        // get remaining microseconds
   db246:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
#include "rtc_hal.h"
#include "timer_hal.h"
extern "C" int _gettimeofday( struct timeval *tv, void *tzvp )
{
    uint32_t t = HAL_Timer_Milliseconds();  // get uptime
    tv->tv_sec = HAL_RTC_Get_UnixTime();    // get rtc time before Particle.syncTime()
   db24a:	6020      	str	r0, [r4, #0]
    tv->tv_usec = ( t % 1000 )*1000;        // get remaining microseconds
   db24c:	fbb5 f0f3 	udiv	r0, r5, r3
   db250:	fb03 5010 	mls	r0, r3, r0, r5
   db254:	4343      	muls	r3, r0
   db256:	6063      	str	r3, [r4, #4]
    return 0;
} // end _gettimeofday()
   db258:	2000      	movs	r0, #0
   db25a:	bd38      	pop	{r3, r4, r5, pc}

000db25c <mbedtls_timing_set_delay>:
 */
void mbedtls_timing_set_delay( void *data, uint32_t int_ms, uint32_t fin_ms )
{
    mbedtls_timing_delay_context *ctx = (mbedtls_timing_delay_context *) data;

    ctx->int_ms = int_ms;
   db25c:	6201      	str	r1, [r0, #32]
    ctx->fin_ms = fin_ms;
   db25e:	6242      	str	r2, [r0, #36]	; 0x24

    if( fin_ms != 0 )
   db260:	b112      	cbz	r2, db268 <mbedtls_timing_set_delay+0xc>
{
    struct _hr_time *t = (struct _hr_time *) val;

    if( reset )
    {
        gettimeofday( &t->start, NULL );
   db262:	2100      	movs	r1, #0
   db264:	f00f bc14 	b.w	eaa90 <gettimeofday>
   db268:	4770      	bx	lr

000db26a <mbedtls_timing_get_delay>:

/*
 * Get number of delays expired
 */
int mbedtls_timing_get_delay( void *data )
{
   db26a:	b510      	push	{r4, lr}
    mbedtls_timing_delay_context *ctx = (mbedtls_timing_delay_context *) data;
    unsigned long elapsed_ms;

    if( ctx->fin_ms == 0 )
   db26c:	6a43      	ldr	r3, [r0, #36]	; 0x24

/*
 * Get number of delays expired
 */
int mbedtls_timing_get_delay( void *data )
{
   db26e:	4604      	mov	r4, r0
    mbedtls_timing_delay_context *ctx = (mbedtls_timing_delay_context *) data;
    unsigned long elapsed_ms;

    if( ctx->fin_ms == 0 )
   db270:	b153      	cbz	r3, db288 <mbedtls_timing_get_delay+0x1e>
   db272:	f7ff ffcd 	bl	db210 <mbedtls_timing_get_timer.part.0>
        return( -1 );

    elapsed_ms = mbedtls_timing_get_timer( &ctx->timer, 0 );

    if( elapsed_ms >= ctx->fin_ms )
   db276:	6a63      	ldr	r3, [r4, #36]	; 0x24
   db278:	4283      	cmp	r3, r0
   db27a:	d908      	bls.n	db28e <mbedtls_timing_get_delay+0x24>
{
    mbedtls_timing_delay_context *ctx = (mbedtls_timing_delay_context *) data;
    unsigned long elapsed_ms;

    if( ctx->fin_ms == 0 )
        return( -1 );
   db27c:	6a23      	ldr	r3, [r4, #32]
   db27e:	4283      	cmp	r3, r0
   db280:	bf8c      	ite	hi
   db282:	2000      	movhi	r0, #0
   db284:	2001      	movls	r0, #1
   db286:	bd10      	pop	{r4, pc}
   db288:	f04f 30ff 	mov.w	r0, #4294967295
   db28c:	bd10      	pop	{r4, pc}

    elapsed_ms = mbedtls_timing_get_timer( &ctx->timer, 0 );

    if( elapsed_ms >= ctx->fin_ms )
        return( 2 );
   db28e:	2002      	movs	r0, #2

    if( elapsed_ms >= ctx->int_ms )
        return( 1 );

    return( 0 );
}
   db290:	bd10      	pop	{r4, pc}

000db292 <mbedtls_pkcs5_pbkdf2_hmac>:

int mbedtls_pkcs5_pbkdf2_hmac( mbedtls_md_context_t *ctx, const unsigned char *password,
                       size_t plen, const unsigned char *salt, size_t slen,
                       unsigned int iteration_count,
                       uint32_t key_length, unsigned char *output )
{
   db292:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db296:	b0a5      	sub	sp, #148	; 0x94
   db298:	4604      	mov	r4, r0
    int ret, j;
    unsigned int i;
    unsigned char md1[MBEDTLS_MD_MAX_SIZE];
    unsigned char work[MBEDTLS_MD_MAX_SIZE];
    unsigned char md_size = mbedtls_md_get_size( ctx->md_info );
   db29a:	6800      	ldr	r0, [r0, #0]

int mbedtls_pkcs5_pbkdf2_hmac( mbedtls_md_context_t *ctx, const unsigned char *password,
                       size_t plen, const unsigned char *salt, size_t slen,
                       unsigned int iteration_count,
                       uint32_t key_length, unsigned char *output )
{
   db29c:	9301      	str	r3, [sp, #4]
   db29e:	460f      	mov	r7, r1
   db2a0:	4693      	mov	fp, r2
   db2a2:	9e30      	ldr	r6, [sp, #192]	; 0xc0
    int ret, j;
    unsigned int i;
    unsigned char md1[MBEDTLS_MD_MAX_SIZE];
    unsigned char work[MBEDTLS_MD_MAX_SIZE];
    unsigned char md_size = mbedtls_md_get_size( ctx->md_info );
   db2a4:	f001 ff86 	bl	dd1b4 <mbedtls_md_get_size>
    size_t use_len;
    unsigned char *out_p = output;
    unsigned char counter[4];

    memset( counter, 0, 4 );
   db2a8:	2300      	movs	r3, #0
   db2aa:	9303      	str	r3, [sp, #12]
    counter[3] = 1;
   db2ac:	2301      	movs	r3, #1
{
    int ret, j;
    unsigned int i;
    unsigned char md1[MBEDTLS_MD_MAX_SIZE];
    unsigned char work[MBEDTLS_MD_MAX_SIZE];
    unsigned char md_size = mbedtls_md_get_size( ctx->md_info );
   db2ae:	4681      	mov	r9, r0
    size_t use_len;
    unsigned char *out_p = output;
    unsigned char counter[4];

    memset( counter, 0, 4 );
    counter[3] = 1;
   db2b0:	f88d 300f 	strb.w	r3, [sp, #15]
            return( ret );

        if( ( ret = mbedtls_md_hmac_update( ctx, counter, 4 ) ) != 0 )
            return( ret );

        if( ( ret = mbedtls_md_hmac_finish( ctx, work ) ) != 0 )
   db2b4:	f10d 0850 	add.w	r8, sp, #80	; 0x50
#if UINT_MAX > 0xFFFFFFFF
    if( iteration_count > 0xFFFFFFFF )
        return( MBEDTLS_ERR_PKCS5_BAD_INPUT_DATA );
#endif

    while( key_length )
   db2b8:	2e00      	cmp	r6, #0
   db2ba:	d05c      	beq.n	db376 <mbedtls_pkcs5_pbkdf2_hmac+0xe4>
    {
        // U1 ends up in work
        //
        if( ( ret = mbedtls_md_hmac_starts( ctx, password, plen ) ) != 0 )
   db2bc:	465a      	mov	r2, fp
   db2be:	4639      	mov	r1, r7
   db2c0:	4620      	mov	r0, r4
   db2c2:	f001 febb 	bl	dd03c <mbedtls_md_hmac_starts>
   db2c6:	2800      	cmp	r0, #0
   db2c8:	d156      	bne.n	db378 <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
            return( ret );

        if( ( ret = mbedtls_md_hmac_update( ctx, salt, slen ) ) != 0 )
   db2ca:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
   db2cc:	9901      	ldr	r1, [sp, #4]
   db2ce:	4620      	mov	r0, r4
   db2d0:	f001 ff14 	bl	dd0fc <mbedtls_md_hmac_update>
   db2d4:	2800      	cmp	r0, #0
   db2d6:	d14f      	bne.n	db378 <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
            return( ret );

        if( ( ret = mbedtls_md_hmac_update( ctx, counter, 4 ) ) != 0 )
   db2d8:	2204      	movs	r2, #4
   db2da:	a903      	add	r1, sp, #12
   db2dc:	4620      	mov	r0, r4
   db2de:	f001 ff0d 	bl	dd0fc <mbedtls_md_hmac_update>
   db2e2:	2800      	cmp	r0, #0
   db2e4:	d148      	bne.n	db378 <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
            return( ret );

        if( ( ret = mbedtls_md_hmac_finish( ctx, work ) ) != 0 )
   db2e6:	4641      	mov	r1, r8
   db2e8:	4620      	mov	r0, r4
   db2ea:	f001 ff19 	bl	dd120 <mbedtls_md_hmac_finish>
   db2ee:	2800      	cmp	r0, #0
   db2f0:	d142      	bne.n	db378 <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
            return( ret );

        memcpy( md1, work, md_size );
   db2f2:	ad04      	add	r5, sp, #16
   db2f4:	464a      	mov	r2, r9
   db2f6:	4641      	mov	r1, r8
   db2f8:	4628      	mov	r0, r5
   db2fa:	f00e fbdc 	bl	e9ab6 <memcpy>

        for( i = 1; i < iteration_count; i++ )
   db2fe:	f04f 0a01 	mov.w	sl, #1
   db302:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   db304:	459a      	cmp	sl, r3
   db306:	d21d      	bcs.n	db344 <mbedtls_pkcs5_pbkdf2_hmac+0xb2>
        {
            // U2 ends up in md1
            //
            if( ( ret = mbedtls_md_hmac_starts( ctx, password, plen ) ) != 0 )
   db308:	465a      	mov	r2, fp
   db30a:	4639      	mov	r1, r7
   db30c:	4620      	mov	r0, r4
   db30e:	f001 fe95 	bl	dd03c <mbedtls_md_hmac_starts>
   db312:	bb88      	cbnz	r0, db378 <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
                return( ret );

            if( ( ret = mbedtls_md_hmac_update( ctx, md1, md_size ) ) != 0 )
   db314:	464a      	mov	r2, r9
   db316:	4629      	mov	r1, r5
   db318:	4620      	mov	r0, r4
   db31a:	f001 feef 	bl	dd0fc <mbedtls_md_hmac_update>
   db31e:	bb58      	cbnz	r0, db378 <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
                return( ret );

            if( ( ret = mbedtls_md_hmac_finish( ctx, md1 ) ) != 0 )
   db320:	4629      	mov	r1, r5
   db322:	4620      	mov	r0, r4
   db324:	f001 fefc 	bl	dd120 <mbedtls_md_hmac_finish>
   db328:	bb30      	cbnz	r0, db378 <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
                return( ret );

            // U1 xor U2
            //
            for( j = 0; j < md_size; j++ )
   db32a:	4548      	cmp	r0, r9
   db32c:	da07      	bge.n	db33e <mbedtls_pkcs5_pbkdf2_hmac+0xac>
                work[j] ^= md1[j];
   db32e:	f810 2008 	ldrb.w	r2, [r0, r8]
   db332:	5d43      	ldrb	r3, [r0, r5]
   db334:	4053      	eors	r3, r2
   db336:	f800 3008 	strb.w	r3, [r0, r8]
            if( ( ret = mbedtls_md_hmac_finish( ctx, md1 ) ) != 0 )
                return( ret );

            // U1 xor U2
            //
            for( j = 0; j < md_size; j++ )
   db33a:	3001      	adds	r0, #1
   db33c:	e7f5      	b.n	db32a <mbedtls_pkcs5_pbkdf2_hmac+0x98>
        if( ( ret = mbedtls_md_hmac_finish( ctx, work ) ) != 0 )
            return( ret );

        memcpy( md1, work, md_size );

        for( i = 1; i < iteration_count; i++ )
   db33e:	f10a 0a01 	add.w	sl, sl, #1
   db342:	e7de      	b.n	db302 <mbedtls_pkcs5_pbkdf2_hmac+0x70>
            //
            for( j = 0; j < md_size; j++ )
                work[j] ^= md1[j];
        }

        use_len = ( key_length < md_size ) ? key_length : md_size;
   db344:	454e      	cmp	r6, r9
   db346:	4635      	mov	r5, r6
   db348:	bf28      	it	cs
   db34a:	464d      	movcs	r5, r9
        memcpy( out_p, work, use_len );
   db34c:	462a      	mov	r2, r5
   db34e:	4641      	mov	r1, r8
   db350:	9831      	ldr	r0, [sp, #196]	; 0xc4
   db352:	f00e fbb0 	bl	e9ab6 <memcpy>

        key_length -= (uint32_t) use_len;
        out_p += use_len;
   db356:	9b31      	ldr	r3, [sp, #196]	; 0xc4
   db358:	442b      	add	r3, r5
        }

        use_len = ( key_length < md_size ) ? key_length : md_size;
        memcpy( out_p, work, use_len );

        key_length -= (uint32_t) use_len;
   db35a:	1b76      	subs	r6, r6, r5
        out_p += use_len;
   db35c:	9331      	str	r3, [sp, #196]	; 0xc4
   db35e:	aa04      	add	r2, sp, #16

        for( i = 4; i > 0; i-- )
            if( ++counter[i - 1] != 0 )
   db360:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
   db364:	3301      	adds	r3, #1
   db366:	b2db      	uxtb	r3, r3
   db368:	7013      	strb	r3, [r2, #0]
   db36a:	2b00      	cmp	r3, #0
   db36c:	d1a4      	bne.n	db2b8 <mbedtls_pkcs5_pbkdf2_hmac+0x26>
        memcpy( out_p, work, use_len );

        key_length -= (uint32_t) use_len;
        out_p += use_len;

        for( i = 4; i > 0; i-- )
   db36e:	ab03      	add	r3, sp, #12
   db370:	4293      	cmp	r3, r2
   db372:	d1f5      	bne.n	db360 <mbedtls_pkcs5_pbkdf2_hmac+0xce>
   db374:	e7a0      	b.n	db2b8 <mbedtls_pkcs5_pbkdf2_hmac+0x26>
            if( ++counter[i - 1] != 0 )
                break;
    }

    return( 0 );
   db376:	4630      	mov	r0, r6
}
   db378:	b025      	add	sp, #148	; 0x94
   db37a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000db380 <mbedtls_pkcs5_pbes2>:

int mbedtls_pkcs5_pbes2( const mbedtls_asn1_buf *pbe_params, int mode,
                 const unsigned char *pwd,  size_t pwdlen,
                 const unsigned char *data, size_t datalen,
                 unsigned char *output )
{
   db380:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   db384:	b0bb      	sub	sp, #236	; 0xec
   db386:	461f      	mov	r7, r3
    int ret, iterations = 0, keylen = 0;
   db388:	2300      	movs	r3, #0
   db38a:	9306      	str	r3, [sp, #24]
   db38c:	9307      	str	r3, [sp, #28]
    unsigned char *p, *end;
    mbedtls_asn1_buf kdf_alg_oid, enc_scheme_oid, kdf_alg_params, enc_scheme_params;
    mbedtls_asn1_buf salt;
    mbedtls_md_type_t md_type = MBEDTLS_MD_SHA1;
    unsigned char key[32], iv[32];
    size_t olen = 0;
   db38e:	9309      	str	r3, [sp, #36]	; 0x24
    mbedtls_md_context_t md_ctx;
    mbedtls_cipher_type_t cipher_alg;
    mbedtls_cipher_context_t cipher_ctx;

    p = pbe_params->p;
    end = p + pbe_params->len;
   db390:	6844      	ldr	r4, [r0, #4]
    const mbedtls_cipher_info_t *cipher_info;
    mbedtls_md_context_t md_ctx;
    mbedtls_cipher_type_t cipher_alg;
    mbedtls_cipher_context_t cipher_ctx;

    p = pbe_params->p;
   db392:	6883      	ldr	r3, [r0, #8]
   db394:	9308      	str	r3, [sp, #32]
    end = p + pbe_params->len;
   db396:	441c      	add	r4, r3
     *  PBES2-params ::= SEQUENCE {
     *    keyDerivationFunc AlgorithmIdentifier {{PBES2-KDFs}},
     *    encryptionScheme AlgorithmIdentifier {{PBES2-Encs}}
     *  }
     */
    if( pbe_params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
   db398:	6803      	ldr	r3, [r0, #0]
{
    int ret, iterations = 0, keylen = 0;
    unsigned char *p, *end;
    mbedtls_asn1_buf kdf_alg_oid, enc_scheme_oid, kdf_alg_params, enc_scheme_params;
    mbedtls_asn1_buf salt;
    mbedtls_md_type_t md_type = MBEDTLS_MD_SHA1;
   db39a:	f04f 0904 	mov.w	r9, #4
     *  PBES2-params ::= SEQUENCE {
     *    keyDerivationFunc AlgorithmIdentifier {{PBES2-KDFs}},
     *    encryptionScheme AlgorithmIdentifier {{PBES2-Encs}}
     *  }
     */
    if( pbe_params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
   db39e:	2b30      	cmp	r3, #48	; 0x30

int mbedtls_pkcs5_pbes2( const mbedtls_asn1_buf *pbe_params, int mode,
                 const unsigned char *pwd,  size_t pwdlen,
                 const unsigned char *data, size_t datalen,
                 unsigned char *output )
{
   db3a0:	460d      	mov	r5, r1
   db3a2:	4616      	mov	r6, r2
    int ret, iterations = 0, keylen = 0;
    unsigned char *p, *end;
    mbedtls_asn1_buf kdf_alg_oid, enc_scheme_oid, kdf_alg_params, enc_scheme_params;
    mbedtls_asn1_buf salt;
    mbedtls_md_type_t md_type = MBEDTLS_MD_SHA1;
   db3a4:	f88d 9016 	strb.w	r9, [sp, #22]
     *  PBES2-params ::= SEQUENCE {
     *    keyDerivationFunc AlgorithmIdentifier {{PBES2-KDFs}},
     *    encryptionScheme AlgorithmIdentifier {{PBES2-Encs}}
     *  }
     */
    if( pbe_params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
   db3a8:	f040 80c9 	bne.w	db53e <mbedtls_pkcs5_pbes2+0x1be>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    if( ( ret = mbedtls_asn1_get_alg( &p, end, &kdf_alg_oid, &kdf_alg_params ) ) != 0 )
   db3ac:	ab10      	add	r3, sp, #64	; 0x40
   db3ae:	aa0a      	add	r2, sp, #40	; 0x28
   db3b0:	4621      	mov	r1, r4
   db3b2:	a808      	add	r0, sp, #32
   db3b4:	f7fb f927 	bl	d6606 <mbedtls_asn1_get_alg>
   db3b8:	2800      	cmp	r0, #0
   db3ba:	d158      	bne.n	db46e <mbedtls_pkcs5_pbes2+0xee>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    // Only PBKDF2 supported at the moment
    //
    if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS5_PBKDF2, &kdf_alg_oid ) != 0 )
   db3bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   db3be:	2a09      	cmp	r2, #9
   db3c0:	d14c      	bne.n	db45c <mbedtls_pkcs5_pbes2+0xdc>
   db3c2:	990c      	ldr	r1, [sp, #48]	; 0x30
   db3c4:	4861      	ldr	r0, [pc, #388]	; (db54c <mbedtls_pkcs5_pbes2+0x1cc>)
   db3c6:	f00e fb67 	bl	e9a98 <memcmp>
   db3ca:	2800      	cmp	r0, #0
   db3cc:	d146      	bne.n	db45c <mbedtls_pkcs5_pbes2+0xdc>
                                      mbedtls_asn1_buf *salt, int *iterations,
                                      int *keylen, mbedtls_md_type_t *md_type )
{
    int ret;
    mbedtls_asn1_buf prf_alg_oid;
    unsigned char *p = params->p;
   db3ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
    const unsigned char *end = params->p + params->len;
   db3d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
                                      mbedtls_asn1_buf *salt, int *iterations,
                                      int *keylen, mbedtls_md_type_t *md_type )
{
    int ret;
    mbedtls_asn1_buf prf_alg_oid;
    unsigned char *p = params->p;
   db3d2:	9324      	str	r3, [sp, #144]	; 0x90
    const unsigned char *end = params->p + params->len;
   db3d4:	eb03 0802 	add.w	r8, r3, r2

    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
   db3d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   db3da:	2b30      	cmp	r3, #48	; 0x30
   db3dc:	f040 80af 	bne.w	db53e <mbedtls_pkcs5_pbes2+0x1be>
     *    keyLength         INTEGER OPTIONAL
     *    prf               AlgorithmIdentifier DEFAULT algid-hmacWithSHA1
     *  }
     *
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &salt->len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
   db3e0:	464b      	mov	r3, r9
   db3e2:	aa17      	add	r2, sp, #92	; 0x5c
   db3e4:	4641      	mov	r1, r8
   db3e6:	a824      	add	r0, sp, #144	; 0x90
   db3e8:	f7fb f830 	bl	d644c <mbedtls_asn1_get_tag>
   db3ec:	b9f8      	cbnz	r0, db42e <mbedtls_pkcs5_pbes2+0xae>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    salt->p = p;
   db3ee:	9a24      	ldr	r2, [sp, #144]	; 0x90
    p += salt->len;
   db3f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
     *
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &salt->len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    salt->p = p;
   db3f2:	9218      	str	r2, [sp, #96]	; 0x60
    p += salt->len;
   db3f4:	4413      	add	r3, r2

    if( ( ret = mbedtls_asn1_get_int( &p, end, iterations ) ) != 0 )
   db3f6:	4641      	mov	r1, r8
   db3f8:	aa06      	add	r2, sp, #24
   db3fa:	a824      	add	r0, sp, #144	; 0x90
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &salt->len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    salt->p = p;
    p += salt->len;
   db3fc:	9324      	str	r3, [sp, #144]	; 0x90

    if( ( ret = mbedtls_asn1_get_int( &p, end, iterations ) ) != 0 )
   db3fe:	f7fb f852 	bl	d64a6 <mbedtls_asn1_get_int>
   db402:	b9a0      	cbnz	r0, db42e <mbedtls_pkcs5_pbes2+0xae>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    if( p == end )
   db404:	9b24      	ldr	r3, [sp, #144]	; 0x90
   db406:	4598      	cmp	r8, r3
   db408:	d022      	beq.n	db450 <mbedtls_pkcs5_pbes2+0xd0>
        return( 0 );

    if( ( ret = mbedtls_asn1_get_int( &p, end, keylen ) ) != 0 )
   db40a:	aa07      	add	r2, sp, #28
   db40c:	4641      	mov	r1, r8
   db40e:	a824      	add	r0, sp, #144	; 0x90
   db410:	f7fb f849 	bl	d64a6 <mbedtls_asn1_get_int>
   db414:	b110      	cbz	r0, db41c <mbedtls_pkcs5_pbes2+0x9c>
    {
        if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   db416:	f110 0f62 	cmn.w	r0, #98	; 0x62
   db41a:	d108      	bne.n	db42e <mbedtls_pkcs5_pbes2+0xae>
            return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );
    }

    if( p == end )
   db41c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   db41e:	4598      	cmp	r8, r3
   db420:	d016      	beq.n	db450 <mbedtls_pkcs5_pbes2+0xd0>
        return( 0 );

    if( ( ret = mbedtls_asn1_get_alg_null( &p, end, &prf_alg_oid ) ) != 0 )
   db422:	aa2c      	add	r2, sp, #176	; 0xb0
   db424:	4641      	mov	r1, r8
   db426:	a824      	add	r0, sp, #144	; 0x90
   db428:	f7fb f93a 	bl	d66a0 <mbedtls_asn1_get_alg_null>
   db42c:	b128      	cbz	r0, db43a <mbedtls_pkcs5_pbes2+0xba>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );
   db42e:	f5a0 503c 	sub.w	r0, r0, #12032	; 0x2f00
    // Only PBKDF2 supported at the moment
    //
    if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS5_PBKDF2, &kdf_alg_oid ) != 0 )
        return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );

    if( ( ret = pkcs5_parse_pbkdf2_params( &kdf_alg_params,
   db432:	2800      	cmp	r0, #0
   db434:	f040 8086 	bne.w	db544 <mbedtls_pkcs5_pbes2+0x1c4>
   db438:	e00a      	b.n	db450 <mbedtls_pkcs5_pbes2+0xd0>
        return( 0 );

    if( ( ret = mbedtls_asn1_get_alg_null( &p, end, &prf_alg_oid ) ) != 0 )
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    if( mbedtls_oid_get_md_hmac( &prf_alg_oid, md_type ) != 0 )
   db43a:	f10d 0116 	add.w	r1, sp, #22
   db43e:	a82c      	add	r0, sp, #176	; 0xb0
   db440:	f7fe fdfc 	bl	da03c <mbedtls_oid_get_md_hmac>
   db444:	b950      	cbnz	r0, db45c <mbedtls_pkcs5_pbes2+0xdc>
        return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );

    if( p != end )
   db446:	9b24      	ldr	r3, [sp, #144]	; 0x90
   db448:	4598      	cmp	r8, r3
   db44a:	d001      	beq.n	db450 <mbedtls_pkcs5_pbes2+0xd0>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   db44c:	4840      	ldr	r0, [pc, #256]	; (db550 <mbedtls_pkcs5_pbes2+0x1d0>)
   db44e:	e079      	b.n	db544 <mbedtls_pkcs5_pbes2+0x1c4>
                                           &md_type ) ) != 0 )
    {
        return( ret );
    }

    md_info = mbedtls_md_info_from_type( md_type );
   db450:	f89d 0016 	ldrb.w	r0, [sp, #22]
   db454:	f001 fd76 	bl	dcf44 <mbedtls_md_info_from_type>
    if( md_info == NULL )
   db458:	4681      	mov	r9, r0
   db45a:	b908      	cbnz	r0, db460 <mbedtls_pkcs5_pbes2+0xe0>

    if( ( ret = mbedtls_asn1_get_alg_null( &p, end, &prf_alg_oid ) ) != 0 )
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    if( mbedtls_oid_get_md_hmac( &prf_alg_oid, md_type ) != 0 )
        return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );
   db45c:	483d      	ldr	r0, [pc, #244]	; (db554 <mbedtls_pkcs5_pbes2+0x1d4>)
   db45e:	e071      	b.n	db544 <mbedtls_pkcs5_pbes2+0x1c4>

    md_info = mbedtls_md_info_from_type( md_type );
    if( md_info == NULL )
        return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );

    if( ( ret = mbedtls_asn1_get_alg( &p, end, &enc_scheme_oid,
   db460:	ab13      	add	r3, sp, #76	; 0x4c
   db462:	aa0d      	add	r2, sp, #52	; 0x34
   db464:	4621      	mov	r1, r4
   db466:	a808      	add	r0, sp, #32
   db468:	f7fb f8cd 	bl	d6606 <mbedtls_asn1_get_alg>
   db46c:	b110      	cbz	r0, db474 <mbedtls_pkcs5_pbes2+0xf4>
                              &enc_scheme_params ) ) != 0 )
    {
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );
   db46e:	f5a0 503c 	sub.w	r0, r0, #12032	; 0x2f00
   db472:	e067      	b.n	db544 <mbedtls_pkcs5_pbes2+0x1c4>
    }

    if( mbedtls_oid_get_cipher_alg( &enc_scheme_oid, &cipher_alg ) != 0 )
   db474:	f10d 0117 	add.w	r1, sp, #23
   db478:	a80d      	add	r0, sp, #52	; 0x34
   db47a:	f7fe fd97 	bl	d9fac <mbedtls_oid_get_cipher_alg>
   db47e:	2800      	cmp	r0, #0
   db480:	d1ec      	bne.n	db45c <mbedtls_pkcs5_pbes2+0xdc>
        return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );

    cipher_info = mbedtls_cipher_info_from_type( cipher_alg );
   db482:	f89d 0017 	ldrb.w	r0, [sp, #23]
   db486:	f7fa fe19 	bl	d60bc <mbedtls_cipher_info_from_type>
    if( cipher_info == NULL )
   db48a:	4680      	mov	r8, r0
   db48c:	2800      	cmp	r0, #0
   db48e:	d0e5      	beq.n	db45c <mbedtls_pkcs5_pbes2+0xdc>

    /*
     * The value of keylen from pkcs5_parse_pbkdf2_params() is ignored
     * since it is optional and we don't know if it was set or not
     */
    keylen = cipher_info->key_bitlen / 8;
   db490:	6843      	ldr	r3, [r0, #4]
   db492:	08db      	lsrs	r3, r3, #3
   db494:	9307      	str	r3, [sp, #28]

    if( enc_scheme_params.tag != MBEDTLS_ASN1_OCTET_STRING ||
   db496:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   db498:	2b04      	cmp	r3, #4
   db49a:	d152      	bne.n	db542 <mbedtls_pkcs5_pbes2+0x1c2>
   db49c:	68c3      	ldr	r3, [r0, #12]
   db49e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   db4a0:	429a      	cmp	r2, r3
   db4a2:	d14e      	bne.n	db542 <mbedtls_pkcs5_pbes2+0x1c2>
        enc_scheme_params.len != cipher_info->iv_size )
    {
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT );
    }

    mbedtls_md_init( &md_ctx );
   db4a4:	a819      	add	r0, sp, #100	; 0x64
   db4a6:	f001 fd59 	bl	dcf5c <mbedtls_md_init>
    mbedtls_cipher_init( &cipher_ctx );
   db4aa:	a82c      	add	r0, sp, #176	; 0xb0
   db4ac:	f7fa fe28 	bl	d6100 <mbedtls_cipher_init>

    memcpy( iv, enc_scheme_params.p, enc_scheme_params.len );
   db4b0:	9a14      	ldr	r2, [sp, #80]	; 0x50
   db4b2:	9915      	ldr	r1, [sp, #84]	; 0x54
   db4b4:	a824      	add	r0, sp, #144	; 0x90
   db4b6:	f00e fafe 	bl	e9ab6 <memcpy>

    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
   db4ba:	2201      	movs	r2, #1
   db4bc:	4649      	mov	r1, r9
   db4be:	a819      	add	r0, sp, #100	; 0x64
   db4c0:	f001 fd6c 	bl	dcf9c <mbedtls_md_setup>
   db4c4:	4604      	mov	r4, r0
   db4c6:	2800      	cmp	r0, #0
   db4c8:	d131      	bne.n	db52e <mbedtls_pkcs5_pbes2+0x1ae>
        goto exit;

    if( ( ret = mbedtls_pkcs5_pbkdf2_hmac( &md_ctx, pwd, pwdlen, salt.p, salt.len,
   db4ca:	9b07      	ldr	r3, [sp, #28]
   db4cc:	9302      	str	r3, [sp, #8]
   db4ce:	9b06      	ldr	r3, [sp, #24]
   db4d0:	9301      	str	r3, [sp, #4]
   db4d2:	f10d 0970 	add.w	r9, sp, #112	; 0x70
   db4d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   db4d8:	9300      	str	r3, [sp, #0]
   db4da:	f8cd 900c 	str.w	r9, [sp, #12]
   db4de:	9b18      	ldr	r3, [sp, #96]	; 0x60
   db4e0:	463a      	mov	r2, r7
   db4e2:	4631      	mov	r1, r6
   db4e4:	a819      	add	r0, sp, #100	; 0x64
   db4e6:	f7ff fed4 	bl	db292 <mbedtls_pkcs5_pbkdf2_hmac>
   db4ea:	4604      	mov	r4, r0
   db4ec:	b9f8      	cbnz	r0, db52e <mbedtls_pkcs5_pbes2+0x1ae>
                                   iterations, keylen, key ) ) != 0 )
    {
        goto exit;
    }

    if( ( ret = mbedtls_cipher_setup( &cipher_ctx, cipher_info ) ) != 0 )
   db4ee:	4641      	mov	r1, r8
   db4f0:	a82c      	add	r0, sp, #176	; 0xb0
   db4f2:	f7fa fe19 	bl	d6128 <mbedtls_cipher_setup>
   db4f6:	4604      	mov	r4, r0
   db4f8:	b9c8      	cbnz	r0, db52e <mbedtls_pkcs5_pbes2+0x1ae>
        goto exit;

    if( ( ret = mbedtls_cipher_setkey( &cipher_ctx, key, 8 * keylen, (mbedtls_operation_t) mode ) ) != 0 )
   db4fa:	9a07      	ldr	r2, [sp, #28]
   db4fc:	b26b      	sxtb	r3, r5
   db4fe:	00d2      	lsls	r2, r2, #3
   db500:	4649      	mov	r1, r9
   db502:	a82c      	add	r0, sp, #176	; 0xb0
   db504:	f7fa fe28 	bl	d6158 <mbedtls_cipher_setkey>
   db508:	4604      	mov	r4, r0
   db50a:	b980      	cbnz	r0, db52e <mbedtls_pkcs5_pbes2+0x1ae>
        goto exit;

    if( ( ret = mbedtls_cipher_crypt( &cipher_ctx, iv, enc_scheme_params.len,
   db50c:	ab09      	add	r3, sp, #36	; 0x24
   db50e:	9302      	str	r3, [sp, #8]
   db510:	9b44      	ldr	r3, [sp, #272]	; 0x110
   db512:	9301      	str	r3, [sp, #4]
   db514:	9b43      	ldr	r3, [sp, #268]	; 0x10c
   db516:	9300      	str	r3, [sp, #0]
   db518:	9a14      	ldr	r2, [sp, #80]	; 0x50
   db51a:	9b42      	ldr	r3, [sp, #264]	; 0x108
   db51c:	a924      	add	r1, sp, #144	; 0x90
   db51e:	a82c      	add	r0, sp, #176	; 0xb0
   db520:	f7fa feca 	bl	d62b8 <mbedtls_cipher_crypt>
                              data, datalen, output, &olen ) ) != 0 )
        ret = MBEDTLS_ERR_PKCS5_PASSWORD_MISMATCH;
   db524:	f5a4 5438 	sub.w	r4, r4, #11776	; 0x2e00
   db528:	2800      	cmp	r0, #0
   db52a:	bf08      	it	eq
   db52c:	2400      	moveq	r4, #0

exit:
    mbedtls_md_free( &md_ctx );
   db52e:	a819      	add	r0, sp, #100	; 0x64
   db530:	f001 fd19 	bl	dcf66 <mbedtls_md_free>
    mbedtls_cipher_free( &cipher_ctx );
   db534:	a82c      	add	r0, sp, #176	; 0xb0
   db536:	f7fa fde7 	bl	d6108 <mbedtls_cipher_free>

    return( ret );
   db53a:	4620      	mov	r0, r4
   db53c:	e002      	b.n	db544 <mbedtls_pkcs5_pbes2+0x1c4>
     *    encryptionScheme AlgorithmIdentifier {{PBES2-Encs}}
     *  }
     */
    if( pbe_params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
   db53e:	4806      	ldr	r0, [pc, #24]	; (db558 <mbedtls_pkcs5_pbes2+0x1d8>)
   db540:	e000      	b.n	db544 <mbedtls_pkcs5_pbes2+0x1c4>
    keylen = cipher_info->key_bitlen / 8;

    if( enc_scheme_params.tag != MBEDTLS_ASN1_OCTET_STRING ||
        enc_scheme_params.len != cipher_info->iv_size )
    {
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT );
   db542:	4806      	ldr	r0, [pc, #24]	; (db55c <mbedtls_pkcs5_pbes2+0x1dc>)
exit:
    mbedtls_md_free( &md_ctx );
    mbedtls_cipher_free( &cipher_ctx );

    return( ret );
}
   db544:	b03b      	add	sp, #236	; 0xec
   db546:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   db54a:	bf00      	nop
   db54c:	000eda1c 	.word	0x000eda1c
   db550:	ffffd09a 	.word	0xffffd09a
   db554:	ffffd180 	.word	0xffffd180
   db558:	ffffd09e 	.word	0xffffd09e
   db55c:	ffffd100 	.word	0xffffd100

000db560 <_ZL12gcm_ctx_freePv>:

    return( ctx );
}

static void gcm_ctx_free( void *ctx )
{
   db560:	b510      	push	{r4, lr}
   db562:	4604      	mov	r4, r0
    mbedtls_gcm_free( (mbedtls_gcm_context *)ctx );
   db564:	f001 fc48 	bl	dcdf8 <mbedtls_gcm_free>
    mbedtls_free( ctx );
   db568:	4620      	mov	r0, r4
}
   db56a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void gcm_ctx_free( void *ctx )
{
    mbedtls_gcm_free( (mbedtls_gcm_context *)ctx );
    mbedtls_free( ctx );
   db56e:	f00a bda9 	b.w	e60c4 <free>

000db572 <_ZL13gcm_ctx_allocv>:
#endif

#if defined(MBEDTLS_GCM_C)
/* shared by all GCM ciphers */
static void *gcm_ctx_alloc( void )
{
   db572:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_gcm_context ) );
   db574:	f44f 71c0 	mov.w	r1, #384	; 0x180
   db578:	2001      	movs	r0, #1
   db57a:	f00e f97b 	bl	e9874 <calloc>

    if( ctx != NULL )
   db57e:	4604      	mov	r4, r0
   db580:	b108      	cbz	r0, db586 <_ZL13gcm_ctx_allocv+0x14>
        mbedtls_gcm_init( (mbedtls_gcm_context *) ctx );
   db582:	f001 f9a3 	bl	dc8cc <mbedtls_gcm_init>

    return( ctx );
}
   db586:	4620      	mov	r0, r4
   db588:	bd10      	pop	{r4, pc}

000db58a <_ZL19gcm_aes_setkey_wrapPvPKhj>:
#if defined(MBEDTLS_GCM_C)
static int gcm_aes_setkey_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
    return mbedtls_gcm_setkey( (mbedtls_gcm_context *) ctx, MBEDTLS_CIPHER_ID_AES,
                     key, key_bitlen );
   db58a:	4613      	mov	r3, r2
   db58c:	460a      	mov	r2, r1
   db58e:	2102      	movs	r1, #2
   db590:	f001 b9a1 	b.w	dc8d6 <mbedtls_gcm_setkey>

000db594 <_ZL12aes_ctx_freePv>:

    return( aes );
}

static void aes_ctx_free( void *ctx )
{
   db594:	b510      	push	{r4, lr}
   db596:	4604      	mov	r4, r0
    mbedtls_aes_free( (mbedtls_aes_context *) ctx );
   db598:	f006 ffb1 	bl	e24fe <mbedtls_aes_free>
    mbedtls_free( ctx );
   db59c:	4620      	mov	r0, r4
}
   db59e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void aes_ctx_free( void *ctx )
{
    mbedtls_aes_free( (mbedtls_aes_context *) ctx );
    mbedtls_free( ctx );
   db5a2:	f00a bd8f 	b.w	e60c4 <free>

000db5a6 <_ZL13aes_ctx_allocv>:
{
    return mbedtls_aes_setkey_enc( (mbedtls_aes_context *) ctx, key, key_bitlen );
}

static void * aes_ctx_alloc( void )
{
   db5a6:	b510      	push	{r4, lr}
    mbedtls_aes_context *aes = (mbedtls_aes_context *)mbedtls_calloc( 1, sizeof( mbedtls_aes_context ) );
   db5a8:	f44f 718c 	mov.w	r1, #280	; 0x118
   db5ac:	2001      	movs	r0, #1
   db5ae:	f00e f961 	bl	e9874 <calloc>

    if( aes == NULL )
   db5b2:	4604      	mov	r4, r0
   db5b4:	b108      	cbz	r0, db5ba <_ZL13aes_ctx_allocv+0x14>
        return( NULL );

    mbedtls_aes_init( aes );
   db5b6:	f006 ff9d 	bl	e24f4 <mbedtls_aes_init>

    return( aes );
}
   db5ba:	4620      	mov	r0, r4
   db5bc:	bd10      	pop	{r4, pc}

000db5be <_ZL19aes_setkey_dec_wrapPvPKhj>:
#endif /* MBEDTLS_CIPHER_MODE_XTS */

static int aes_setkey_dec_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
    return mbedtls_aes_setkey_dec( (mbedtls_aes_context *) ctx, key, key_bitlen );
   db5be:	f007 b89f 	b.w	e2700 <mbedtls_aes_setkey_dec>

000db5c2 <_ZL19aes_setkey_enc_wrapPvPKhj>:
}

static int aes_setkey_enc_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
    return mbedtls_aes_setkey_enc( (mbedtls_aes_context *) ctx, key, key_bitlen );
   db5c2:	f006 bfa3 	b.w	e250c <mbedtls_aes_setkey_enc>

000db5c6 <_ZL18aes_crypt_ecb_wrapPv19mbedtls_operation_tPKhPh>:
#if defined(MBEDTLS_AES_C)

static int aes_crypt_ecb_wrap( void *ctx, mbedtls_operation_t operation,
        const unsigned char *input, unsigned char *output )
{
    return mbedtls_aes_crypt_ecb( (mbedtls_aes_context *) ctx, operation, input, output );
   db5c6:	f007 bc99 	b.w	e2efc <mbedtls_aes_crypt_ecb>

000db5ca <_ZL10rsa_can_do17mbedtls_pk_type_t>:
#include <stdint.h>

#if defined(MBEDTLS_RSA_C)
static int rsa_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_RSA ||
   db5ca:	2801      	cmp	r0, #1
   db5cc:	d002      	beq.n	db5d4 <_ZL10rsa_can_do17mbedtls_pk_type_t+0xa>
   db5ce:	1f83      	subs	r3, r0, #6
   db5d0:	4258      	negs	r0, r3
   db5d2:	4158      	adcs	r0, r3
            type == MBEDTLS_PK_RSASSA_PSS );
}
   db5d4:	4770      	bx	lr
	...

000db5d8 <_ZL9rsa_debugPKvP21mbedtls_pk_debug_item>:
    mbedtls_free( ctx );
}

static void rsa_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_MPI;
   db5d8:	2301      	movs	r3, #1
    items->name = "rsa.N";
   db5da:	4a06      	ldr	r2, [pc, #24]	; (db5f4 <_ZL9rsa_debugPKvP21mbedtls_pk_debug_item+0x1c>)
    mbedtls_free( ctx );
}

static void rsa_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_MPI;
   db5dc:	700b      	strb	r3, [r1, #0]
    items->name = "rsa.N";
   db5de:	604a      	str	r2, [r1, #4]
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );

    items++;

    items->type = MBEDTLS_PK_DEBUG_MPI;
   db5e0:	730b      	strb	r3, [r1, #12]

static void rsa_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_MPI;
    items->name = "rsa.N";
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );
   db5e2:	f100 0208 	add.w	r2, r0, #8

    items++;

    items->type = MBEDTLS_PK_DEBUG_MPI;
    items->name = "rsa.E";
   db5e6:	4b04      	ldr	r3, [pc, #16]	; (db5f8 <_ZL9rsa_debugPKvP21mbedtls_pk_debug_item+0x20>)

static void rsa_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_MPI;
    items->name = "rsa.N";
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );
   db5e8:	608a      	str	r2, [r1, #8]

    items++;

    items->type = MBEDTLS_PK_DEBUG_MPI;
    items->name = "rsa.E";
    items->value = &( ((mbedtls_rsa_context *) ctx)->E );
   db5ea:	3014      	adds	r0, #20
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );

    items++;

    items->type = MBEDTLS_PK_DEBUG_MPI;
    items->name = "rsa.E";
   db5ec:	610b      	str	r3, [r1, #16]
    items->value = &( ((mbedtls_rsa_context *) ctx)->E );
   db5ee:	6148      	str	r0, [r1, #20]
   db5f0:	4770      	bx	lr
   db5f2:	bf00      	nop
   db5f4:	000edb80 	.word	0x000edb80
   db5f8:	000edb86 	.word	0x000edb86

000db5fc <_ZL12eckey_can_do17mbedtls_pk_type_t>:
 */
static int eckey_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_ECKEY ||
            type == MBEDTLS_PK_ECKEY_DH ||
            type == MBEDTLS_PK_ECDSA );
   db5fc:	3802      	subs	r0, #2
}
   db5fe:	2802      	cmp	r0, #2
   db600:	bf8c      	ite	hi
   db602:	2000      	movhi	r0, #0
   db604:	2001      	movls	r0, #1
   db606:	4770      	bx	lr

000db608 <_ZL16eckey_get_bitlenPKv>:

static size_t eckey_get_bitlen( const void *ctx )
{
    return( ((mbedtls_ecp_keypair *) ctx)->grp.pbits );
}
   db608:	6d80      	ldr	r0, [r0, #88]	; 0x58
   db60a:	4770      	bx	lr

000db60c <_ZL11eckey_debugPKvP21mbedtls_pk_debug_item>:
    mbedtls_free( ctx );
}

static void eckey_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_ECP;
   db60c:	2302      	movs	r3, #2
   db60e:	700b      	strb	r3, [r1, #0]
    items->name = "eckey.Q";
    items->value = &( ((mbedtls_ecp_keypair *) ctx)->Q );
   db610:	3088      	adds	r0, #136	; 0x88
}

static void eckey_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_ECP;
    items->name = "eckey.Q";
   db612:	4b02      	ldr	r3, [pc, #8]	; (db61c <_ZL11eckey_debugPKvP21mbedtls_pk_debug_item+0x10>)
   db614:	604b      	str	r3, [r1, #4]
    items->value = &( ((mbedtls_ecp_keypair *) ctx)->Q );
   db616:	6088      	str	r0, [r1, #8]
   db618:	4770      	bx	lr
   db61a:	bf00      	nop
   db61c:	000edb8c 	.word	0x000edb8c

000db620 <_ZL14eckeydh_can_do17mbedtls_pk_type_t>:
 * EC key restricted to ECDH
 */
static int eckeydh_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_ECKEY ||
            type == MBEDTLS_PK_ECKEY_DH );
   db620:	3802      	subs	r0, #2
}
   db622:	2801      	cmp	r0, #1
   db624:	bf8c      	ite	hi
   db626:	2000      	movhi	r0, #0
   db628:	2001      	movls	r0, #1
   db62a:	4770      	bx	lr

000db62c <_ZL12ecdsa_can_do17mbedtls_pk_type_t>:

#if defined(MBEDTLS_ECDSA_C)
static int ecdsa_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_ECDSA );
}
   db62c:	1f03      	subs	r3, r0, #4
   db62e:	4258      	negs	r0, r3
   db630:	4158      	adcs	r0, r3
   db632:	4770      	bx	lr

000db634 <_ZL13rsa_free_wrapPv>:

    return( ctx );
}

static void rsa_free_wrap( void *ctx )
{
   db634:	b510      	push	{r4, lr}
   db636:	4604      	mov	r4, r0
    mbedtls_rsa_free( (mbedtls_rsa_context *) ctx );
   db638:	f7fc ff54 	bl	d84e4 <mbedtls_rsa_free>
    mbedtls_free( ctx );
   db63c:	4620      	mov	r0, r4
}
   db63e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void rsa_free_wrap( void *ctx )
{
    mbedtls_rsa_free( (mbedtls_rsa_context *) ctx );
    mbedtls_free( ctx );
   db642:	f00a bd3f 	b.w	e60c4 <free>

000db646 <_ZL14rsa_alloc_wrapv>:
    return( mbedtls_rsa_check_pub_priv( (const mbedtls_rsa_context *) pub,
                                (const mbedtls_rsa_context *) prv ) );
}

static void *rsa_alloc_wrap( void )
{
   db646:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_rsa_context ) );
   db648:	21ac      	movs	r1, #172	; 0xac
   db64a:	2001      	movs	r0, #1
   db64c:	f00e f912 	bl	e9874 <calloc>

    if( ctx != NULL )
   db650:	4604      	mov	r4, r0
   db652:	b118      	cbz	r0, db65c <_ZL14rsa_alloc_wrapv+0x16>
        mbedtls_rsa_init( (mbedtls_rsa_context *) ctx, 0, 0 );
   db654:	2200      	movs	r2, #0
   db656:	4611      	mov	r1, r2
   db658:	f7fb ff14 	bl	d7484 <mbedtls_rsa_init>

    return( ctx );
}
   db65c:	4620      	mov	r0, r4
   db65e:	bd10      	pop	{r4, pc}

000db660 <_ZL19rsa_check_pair_wrapPKvS0_>:
}

static int rsa_check_pair_wrap( const void *pub, const void *prv )
{
    return( mbedtls_rsa_check_pub_priv( (const mbedtls_rsa_context *) pub,
                                (const mbedtls_rsa_context *) prv ) );
   db660:	f7fb bf76 	b.w	d7550 <mbedtls_rsa_check_pub_priv>

000db664 <_ZL14rsa_get_bitlenPKv>:
    return( type == MBEDTLS_PK_RSA ||
            type == MBEDTLS_PK_RSASSA_PSS );
}

static size_t rsa_get_bitlen( const void *ctx )
{
   db664:	b508      	push	{r3, lr}
    const mbedtls_rsa_context * rsa = (const mbedtls_rsa_context *) ctx;
    return( 8 * mbedtls_rsa_get_len( rsa ) );
   db666:	f7fb ff1a 	bl	d749e <mbedtls_rsa_get_len>
}
   db66a:	00c0      	lsls	r0, r0, #3
   db66c:	bd08      	pop	{r3, pc}
	...

000db670 <_ZL16rsa_encrypt_wrapPvPKhjPhPjjPFiS_S2_jES_>:

static int rsa_encrypt_wrap( void *ctx,
                    const unsigned char *input, size_t ilen,
                    unsigned char *output, size_t *olen, size_t osize,
                    int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
   db670:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db674:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   db678:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   db67c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   db67e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   db680:	4604      	mov	r4, r0
   db682:	4688      	mov	r8, r1
   db684:	4617      	mov	r7, r2
   db686:	4699      	mov	r9, r3
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;
    *olen = mbedtls_rsa_get_len( rsa );
   db688:	f7fb ff09 	bl	d749e <mbedtls_rsa_get_len>

    if( *olen > osize )
   db68c:	4550      	cmp	r0, sl
                    const unsigned char *input, size_t ilen,
                    unsigned char *output, size_t *olen, size_t osize,
                    int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;
    *olen = mbedtls_rsa_get_len( rsa );
   db68e:	f8cb 0000 	str.w	r0, [fp]

    if( *olen > osize )
   db692:	d80d      	bhi.n	db6b0 <_ZL16rsa_encrypt_wrapPvPKhjPhPjjPFiS_S2_jES_+0x40>
        return( MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE );

    return( mbedtls_rsa_pkcs1_encrypt( rsa, f_rng, p_rng, MBEDTLS_RSA_PUBLIC,
                                       ilen, input, output ) );
   db694:	2300      	movs	r3, #0
   db696:	4632      	mov	r2, r6
   db698:	4629      	mov	r1, r5
   db69a:	4620      	mov	r0, r4
   db69c:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
   db6a0:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
   db6a4:	970a      	str	r7, [sp, #40]	; 0x28
}
   db6a6:	b001      	add	sp, #4
   db6a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    if( *olen > osize )
        return( MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE );

    return( mbedtls_rsa_pkcs1_encrypt( rsa, f_rng, p_rng, MBEDTLS_RSA_PUBLIC,
                                       ilen, input, output ) );
   db6ac:	f7fc ba68 	b.w	d7b80 <mbedtls_rsa_pkcs1_encrypt>
}
   db6b0:	4801      	ldr	r0, [pc, #4]	; (db6b8 <_ZL16rsa_encrypt_wrapPvPKhjPhPjjPFiS_S2_jES_+0x48>)
   db6b2:	b001      	add	sp, #4
   db6b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db6b8:	ffffbc00 	.word	0xffffbc00

000db6bc <_ZL16rsa_decrypt_wrapPvPKhjPhPjjPFiS_S2_jES_>:

static int rsa_decrypt_wrap( void *ctx,
                    const unsigned char *input, size_t ilen,
                    unsigned char *output, size_t *olen, size_t osize,
                    int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
   db6bc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db6c0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   db6c2:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   db6c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   db6c8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   db6ca:	4693      	mov	fp, r2
   db6cc:	4604      	mov	r4, r0
   db6ce:	4688      	mov	r8, r1
   db6d0:	4699      	mov	r9, r3
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;

    if( ilen != mbedtls_rsa_get_len( rsa ) )
   db6d2:	f7fb fee4 	bl	d749e <mbedtls_rsa_get_len>
   db6d6:	4558      	cmp	r0, fp
   db6d8:	d10f      	bne.n	db6fa <_ZL16rsa_decrypt_wrapPvPKhjPhPjjPFiS_S2_jES_+0x3e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    return( mbedtls_rsa_pkcs1_decrypt( rsa, f_rng, p_rng,
                MBEDTLS_RSA_PRIVATE, olen, input, output, osize ) );
   db6da:	2301      	movs	r3, #1
   db6dc:	4632      	mov	r2, r6
   db6de:	4629      	mov	r1, r5
   db6e0:	4620      	mov	r0, r4
   db6e2:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   db6e6:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
   db6ea:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
   db6ee:	970a      	str	r7, [sp, #40]	; 0x28
}
   db6f0:	b001      	add	sp, #4
   db6f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    if( ilen != mbedtls_rsa_get_len( rsa ) )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    return( mbedtls_rsa_pkcs1_decrypt( rsa, f_rng, p_rng,
                MBEDTLS_RSA_PRIVATE, olen, input, output, osize ) );
   db6f6:	f7fc bc03 	b.w	d7f00 <mbedtls_rsa_pkcs1_decrypt>
}
   db6fa:	4802      	ldr	r0, [pc, #8]	; (db704 <_ZL16rsa_decrypt_wrapPvPKhjPhPjjPFiS_S2_jES_+0x48>)
   db6fc:	b001      	add	sp, #4
   db6fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db702:	bf00      	nop
   db704:	ffffbf80 	.word	0xffffbf80

000db708 <_ZL13rsa_sign_wrapPv17mbedtls_md_type_tPKhjPhPjPFiS_S3_jES_>:

static int rsa_sign_wrap( void *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   unsigned char *sig, size_t *sig_len,
                   int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
   db708:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db70c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   db710:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   db714:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   db716:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   db718:	460f      	mov	r7, r1
   db71a:	4691      	mov	r9, r2
   db71c:	4698      	mov	r8, r3
   db71e:	4604      	mov	r4, r0
#if SIZE_MAX > UINT_MAX
    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

    *sig_len = mbedtls_rsa_get_len( rsa );
   db720:	f7fb febd 	bl	d749e <mbedtls_rsa_get_len>

    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
                md_alg, (unsigned int) hash_len, hash, sig ) );
   db724:	2301      	movs	r3, #1
#if SIZE_MAX > UINT_MAX
    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

    *sig_len = mbedtls_rsa_get_len( rsa );
   db726:	f8cb 0000 	str.w	r0, [fp]

    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
                md_alg, (unsigned int) hash_len, hash, sig ) );
   db72a:	4632      	mov	r2, r6
   db72c:	4629      	mov	r1, r5
   db72e:	4620      	mov	r0, r4
   db730:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   db734:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
   db738:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
   db73c:	970a      	str	r7, [sp, #40]	; 0x28
}
   db73e:	b001      	add	sp, #4
   db740:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#endif /* SIZE_MAX > UINT_MAX */

    *sig_len = mbedtls_rsa_get_len( rsa );

    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
                md_alg, (unsigned int) hash_len, hash, sig ) );
   db744:	f7fc bd34 	b.w	d81b0 <mbedtls_rsa_pkcs1_sign>

000db748 <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j>:
}

static int rsa_verify_wrap( void *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   const unsigned char *sig, size_t sig_len )
{
   db748:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   db74c:	b085      	sub	sp, #20
   db74e:	4606      	mov	r6, r0
   db750:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   db752:	460f      	mov	r7, r1
   db754:	4691      	mov	r9, r2
   db756:	4698      	mov	r8, r3
    int ret;
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;
    size_t rsa_len = mbedtls_rsa_get_len( rsa );
   db758:	f7fb fea1 	bl	d749e <mbedtls_rsa_get_len>
#if SIZE_MAX > UINT_MAX
    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

    if( sig_len < rsa_len )
   db75c:	42a0      	cmp	r0, r4
                   const unsigned char *hash, size_t hash_len,
                   const unsigned char *sig, size_t sig_len )
{
    int ret;
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;
    size_t rsa_len = mbedtls_rsa_get_len( rsa );
   db75e:	4605      	mov	r5, r0
#if SIZE_MAX > UINT_MAX
    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

    if( sig_len < rsa_len )
   db760:	d80f      	bhi.n	db782 <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x3a>
        return( MBEDTLS_ERR_RSA_VERIFY_FAILED );

    if( ( ret = mbedtls_rsa_pkcs1_verify( rsa, NULL, NULL,
   db762:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   db764:	9303      	str	r3, [sp, #12]
   db766:	2300      	movs	r3, #0
   db768:	e88d 0380 	stmia.w	sp, {r7, r8, r9}
   db76c:	461a      	mov	r2, r3
   db76e:	4619      	mov	r1, r3
   db770:	4630      	mov	r0, r6
   db772:	f7fc fe95 	bl	d84a0 <mbedtls_rsa_pkcs1_verify>
   db776:	b928      	cbnz	r0, db784 <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x3c>
     * We have a special error code for that so that so that callers can
     * use mbedtls_pk_verify() to check "Does the buffer start with a
     * valid signature?" and not just "Does the buffer contain a valid
     * signature?". */
    if( sig_len > rsa_len )
        return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );
   db778:	4b04      	ldr	r3, [pc, #16]	; (db78c <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x44>)
   db77a:	42a5      	cmp	r5, r4
   db77c:	bf38      	it	cc
   db77e:	4618      	movcc	r0, r3
   db780:	e000      	b.n	db784 <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x3c>
    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

    if( sig_len < rsa_len )
        return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
   db782:	4803      	ldr	r0, [pc, #12]	; (db790 <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x48>)
     * signature?". */
    if( sig_len > rsa_len )
        return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );

    return( 0 );
}
   db784:	b005      	add	sp, #20
   db786:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   db78a:	bf00      	nop
   db78c:	ffffc700 	.word	0xffffc700
   db790:	ffffbc80 	.word	0xffffbc80

000db794 <_ZL15eckey_free_wrapPv>:

    return( ctx );
}

static void eckey_free_wrap( void *ctx )
{
   db794:	b510      	push	{r4, lr}
   db796:	4604      	mov	r4, r0
    mbedtls_ecp_keypair_free( (mbedtls_ecp_keypair *) ctx );
   db798:	f7fd fbc1 	bl	d8f1e <mbedtls_ecp_keypair_free>
    mbedtls_free( ctx );
   db79c:	4620      	mov	r0, r4
}
   db79e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void eckey_free_wrap( void *ctx )
{
    mbedtls_ecp_keypair_free( (mbedtls_ecp_keypair *) ctx );
    mbedtls_free( ctx );
   db7a2:	f00a bc8f 	b.w	e60c4 <free>

000db7a6 <_ZL16eckey_alloc_wrapv>:
    return( mbedtls_ecp_check_pub_priv( (const mbedtls_ecp_keypair *) pub,
                                (const mbedtls_ecp_keypair *) prv ) );
}

static void *eckey_alloc_wrap( void )
{
   db7a6:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_ecp_keypair ) );
   db7a8:	21ac      	movs	r1, #172	; 0xac
   db7aa:	2001      	movs	r0, #1
   db7ac:	f00e f862 	bl	e9874 <calloc>

    if( ctx != NULL )
   db7b0:	4604      	mov	r4, r0
   db7b2:	b108      	cbz	r0, db7b8 <_ZL16eckey_alloc_wrapv+0x12>
        mbedtls_ecp_keypair_init( (mbedtls_ecp_keypair *)ctx );
   db7b4:	f7fd fb65 	bl	d8e82 <mbedtls_ecp_keypair_init>

    return( ctx );
}
   db7b8:	4620      	mov	r0, r4
   db7ba:	bd10      	pop	{r4, pc}

000db7bc <_ZL16eckey_check_pairPKvS0_>:
#endif /* MBEDTLS_ECDSA_C */

static int eckey_check_pair( const void *pub, const void *prv )
{
    return( mbedtls_ecp_check_pub_priv( (const mbedtls_ecp_keypair *) pub,
                                (const mbedtls_ecp_keypair *) prv ) );
   db7bc:	f7fe bae6 	b.w	d9d8c <mbedtls_ecp_check_pub_priv>

000db7c0 <_ZL16ecdsa_alloc_wrapv>:

}
#endif /* MBEDTLS_ECP_RESTARTABLE */

static void *ecdsa_alloc_wrap( void )
{
   db7c0:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_ecdsa_context ) );
   db7c2:	21ac      	movs	r1, #172	; 0xac
   db7c4:	2001      	movs	r0, #1
   db7c6:	f00e f855 	bl	e9874 <calloc>

    if( ctx != NULL )
   db7ca:	4604      	mov	r4, r0
   db7cc:	b108      	cbz	r0, db7d2 <_ZL16ecdsa_alloc_wrapv+0x12>
        mbedtls_ecdsa_init( (mbedtls_ecdsa_context *) ctx );
   db7ce:	f000 fab2 	bl	dbd36 <mbedtls_ecdsa_init>

    return( ctx );
}
   db7d2:	4620      	mov	r0, r4
   db7d4:	bd10      	pop	{r4, pc}

000db7d6 <_ZL15ecdsa_free_wrapPv>:

static void ecdsa_free_wrap( void *ctx )
{
   db7d6:	b510      	push	{r4, lr}
   db7d8:	4604      	mov	r4, r0
    mbedtls_ecdsa_free( (mbedtls_ecdsa_context *) ctx );
   db7da:	f000 faae 	bl	dbd3a <mbedtls_ecdsa_free>
    mbedtls_free( ctx );
   db7de:	4620      	mov	r0, r4
}
   db7e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void ecdsa_free_wrap( void *ctx )
{
    mbedtls_ecdsa_free( (mbedtls_ecdsa_context *) ctx );
    mbedtls_free( ctx );
   db7e4:	f00a bc6e 	b.w	e60c4 <free>

000db7e8 <_ZL15ecdsa_sign_wrapPv17mbedtls_md_type_tPKhjPhPjPFiS_S3_jES_>:

static int ecdsa_sign_wrap( void *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   unsigned char *sig, size_t *sig_len,
                   int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
   db7e8:	b410      	push	{r4}
    return( mbedtls_ecdsa_write_signature( (mbedtls_ecdsa_context *) ctx,
                md_alg, hash, hash_len, sig, sig_len, f_rng, p_rng ) );
}
   db7ea:	f85d 4b04 	ldr.w	r4, [sp], #4
                   const unsigned char *hash, size_t hash_len,
                   unsigned char *sig, size_t *sig_len,
                   int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
    return( mbedtls_ecdsa_write_signature( (mbedtls_ecdsa_context *) ctx,
                md_alg, hash, hash_len, sig, sig_len, f_rng, p_rng ) );
   db7ee:	f000 ba3b 	b.w	dbc68 <mbedtls_ecdsa_write_signature>

000db7f2 <_ZL15eckey_sign_wrapPv17mbedtls_md_type_tPKhjPhPjPFiS_S3_jES_>:

static int eckey_sign_wrap( void *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   unsigned char *sig, size_t *sig_len,
                   int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
   db7f2:	b5f0      	push	{r4, r5, r6, r7, lr}
   db7f4:	b0b1      	sub	sp, #196	; 0xc4
   db7f6:	4604      	mov	r4, r0
    int ret;
    mbedtls_ecdsa_context ecdsa;

    mbedtls_ecdsa_init( &ecdsa );
   db7f8:	a805      	add	r0, sp, #20

static int eckey_sign_wrap( void *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   unsigned char *sig, size_t *sig_len,
                   int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
   db7fa:	460d      	mov	r5, r1
   db7fc:	4616      	mov	r6, r2
   db7fe:	461f      	mov	r7, r3
    int ret;
    mbedtls_ecdsa_context ecdsa;

    mbedtls_ecdsa_init( &ecdsa );
   db800:	f000 fa99 	bl	dbd36 <mbedtls_ecdsa_init>

    if( ( ret = mbedtls_ecdsa_from_keypair( &ecdsa, (const mbedtls_ecp_keypair *)ctx ) ) == 0 )
   db804:	4621      	mov	r1, r4
   db806:	a805      	add	r0, sp, #20
   db808:	f000 fa9b 	bl	dbd42 <mbedtls_ecdsa_from_keypair>
   db80c:	4604      	mov	r4, r0
   db80e:	b970      	cbnz	r0, db82e <_ZL15eckey_sign_wrapPv17mbedtls_md_type_tPKhjPhPjPFiS_S3_jES_+0x3c>
                   const unsigned char *hash, size_t hash_len,
                   unsigned char *sig, size_t *sig_len,
                   int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
    return( mbedtls_ecdsa_write_signature( (mbedtls_ecdsa_context *) ctx,
                md_alg, hash, hash_len, sig, sig_len, f_rng, p_rng ) );
   db810:	9b39      	ldr	r3, [sp, #228]	; 0xe4
   db812:	9303      	str	r3, [sp, #12]
   db814:	9b38      	ldr	r3, [sp, #224]	; 0xe0
   db816:	9302      	str	r3, [sp, #8]
   db818:	9b37      	ldr	r3, [sp, #220]	; 0xdc
   db81a:	9301      	str	r3, [sp, #4]
   db81c:	9b36      	ldr	r3, [sp, #216]	; 0xd8
   db81e:	9300      	str	r3, [sp, #0]
   db820:	4632      	mov	r2, r6
   db822:	463b      	mov	r3, r7
   db824:	4629      	mov	r1, r5
   db826:	a805      	add	r0, sp, #20
   db828:	f000 fa1e 	bl	dbc68 <mbedtls_ecdsa_write_signature>
   db82c:	4604      	mov	r4, r0

    if( ( ret = mbedtls_ecdsa_from_keypair( &ecdsa, (const mbedtls_ecp_keypair *)ctx ) ) == 0 )
        ret = ecdsa_sign_wrap( &ecdsa, md_alg, hash, hash_len, sig, sig_len,
                               f_rng, p_rng );

    mbedtls_ecdsa_free( &ecdsa );
   db82e:	a805      	add	r0, sp, #20
   db830:	f000 fa83 	bl	dbd3a <mbedtls_ecdsa_free>

    return( ret );
}
   db834:	4620      	mov	r0, r4
   db836:	b031      	add	sp, #196	; 0xc4
   db838:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000db83c <_ZL17ecdsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j>:
}

static int ecdsa_verify_wrap( void *ctx, mbedtls_md_type_t md_alg,
                       const unsigned char *hash, size_t hash_len,
                       const unsigned char *sig, size_t sig_len )
{
   db83c:	b507      	push	{r0, r1, r2, lr}
   db83e:	4611      	mov	r1, r2
   db840:	461a      	mov	r2, r3
    int ret;
    ((void) md_alg);

    ret = mbedtls_ecdsa_read_signature( (mbedtls_ecdsa_context *) ctx,
   db842:	9b05      	ldr	r3, [sp, #20]
   db844:	9300      	str	r3, [sp, #0]
   db846:	9b04      	ldr	r3, [sp, #16]
   db848:	f000 fa6c 	bl	dbd24 <mbedtls_ecdsa_read_signature>

    if( ret == MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH )
        return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );

    return( ret );
}
   db84c:	4b03      	ldr	r3, [pc, #12]	; (db85c <_ZL17ecdsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x20>)
   db84e:	f510 4f98 	cmn.w	r0, #19456	; 0x4c00
   db852:	bf08      	it	eq
   db854:	4618      	moveq	r0, r3
   db856:	b003      	add	sp, #12
   db858:	f85d fb04 	ldr.w	pc, [sp], #4
   db85c:	ffffc700 	.word	0xffffc700

000db860 <_ZL17eckey_verify_wrapPv17mbedtls_md_type_tPKhjS2_j>:
                   int (*f_rng)(void *, unsigned char *, size_t), void *p_rng );

static int eckey_verify_wrap( void *ctx, mbedtls_md_type_t md_alg,
                       const unsigned char *hash, size_t hash_len,
                       const unsigned char *sig, size_t sig_len )
{
   db860:	b5f0      	push	{r4, r5, r6, r7, lr}
   db862:	b0af      	sub	sp, #188	; 0xbc
   db864:	4604      	mov	r4, r0
    int ret;
    mbedtls_ecdsa_context ecdsa;

    mbedtls_ecdsa_init( &ecdsa );
   db866:	a803      	add	r0, sp, #12
                   int (*f_rng)(void *, unsigned char *, size_t), void *p_rng );

static int eckey_verify_wrap( void *ctx, mbedtls_md_type_t md_alg,
                       const unsigned char *hash, size_t hash_len,
                       const unsigned char *sig, size_t sig_len )
{
   db868:	460d      	mov	r5, r1
   db86a:	4616      	mov	r6, r2
   db86c:	461f      	mov	r7, r3
    int ret;
    mbedtls_ecdsa_context ecdsa;

    mbedtls_ecdsa_init( &ecdsa );
   db86e:	f000 fa62 	bl	dbd36 <mbedtls_ecdsa_init>

    if( ( ret = mbedtls_ecdsa_from_keypair( &ecdsa, (const mbedtls_ecp_keypair *)ctx ) ) == 0 )
   db872:	4621      	mov	r1, r4
   db874:	a803      	add	r0, sp, #12
   db876:	f000 fa64 	bl	dbd42 <mbedtls_ecdsa_from_keypair>
   db87a:	4604      	mov	r4, r0
   db87c:	b950      	cbnz	r0, db894 <_ZL17eckey_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x34>
        ret = ecdsa_verify_wrap( &ecdsa, md_alg, hash, hash_len, sig, sig_len );
   db87e:	9b35      	ldr	r3, [sp, #212]	; 0xd4
   db880:	9301      	str	r3, [sp, #4]
   db882:	9b34      	ldr	r3, [sp, #208]	; 0xd0
   db884:	9300      	str	r3, [sp, #0]
   db886:	4632      	mov	r2, r6
   db888:	463b      	mov	r3, r7
   db88a:	4629      	mov	r1, r5
   db88c:	a803      	add	r0, sp, #12
   db88e:	f7ff ffd5 	bl	db83c <_ZL17ecdsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j>
   db892:	4604      	mov	r4, r0

    mbedtls_ecdsa_free( &ecdsa );
   db894:	a803      	add	r0, sp, #12
   db896:	f000 fa50 	bl	dbd3a <mbedtls_ecdsa_free>

    return( ret );
}
   db89a:	4620      	mov	r0, r4
   db89c:	b02f      	add	sp, #188	; 0xbc
   db89e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000db8a0 <_ZL10derive_mpiPK17mbedtls_ecp_groupP11mbedtls_mpiPKhj>:
 * Derive a suitable integer for group grp from a buffer of length len
 * SEC1 4.1.3 step 5 aka SEC1 4.1.4 step 3
 */
static int derive_mpi( const mbedtls_ecp_group *grp, mbedtls_mpi *x,
                       const unsigned char *buf, size_t blen )
{
   db8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret;
    size_t n_size = ( grp->nbits + 7 ) / 8;
   db8a2:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
   db8a4:	3407      	adds	r4, #7
   db8a6:	08e4      	lsrs	r4, r4, #3
   db8a8:	429c      	cmp	r4, r3
 * Derive a suitable integer for group grp from a buffer of length len
 * SEC1 4.1.3 step 5 aka SEC1 4.1.4 step 3
 */
static int derive_mpi( const mbedtls_ecp_group *grp, mbedtls_mpi *x,
                       const unsigned char *buf, size_t blen )
{
   db8aa:	460e      	mov	r6, r1
   db8ac:	bf28      	it	cs
   db8ae:	461c      	movcs	r4, r3
   db8b0:	4611      	mov	r1, r2
   db8b2:	4605      	mov	r5, r0
    int ret;
    size_t n_size = ( grp->nbits + 7 ) / 8;
    size_t use_size = blen > n_size ? n_size : blen;

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( x, buf, use_size ) );
   db8b4:	4622      	mov	r2, r4
   db8b6:	4630      	mov	r0, r6
   db8b8:	f005 fb7e 	bl	e0fb8 <mbedtls_mpi_read_binary>
   db8bc:	4607      	mov	r7, r0
   db8be:	b9c0      	cbnz	r0, db8f2 <_ZL10derive_mpiPK17mbedtls_ecp_groupP11mbedtls_mpiPKhj+0x52>
    if( use_size * 8 > grp->nbits )
   db8c0:	6de9      	ldr	r1, [r5, #92]	; 0x5c
   db8c2:	00e4      	lsls	r4, r4, #3
   db8c4:	428c      	cmp	r4, r1
   db8c6:	d80d      	bhi.n	db8e4 <_ZL10derive_mpiPK17mbedtls_ecp_groupP11mbedtls_mpiPKhj+0x44>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( x, use_size * 8 - grp->nbits ) );

    /* While at it, reduce modulo N */
    if( mbedtls_mpi_cmp_mpi( x, &grp->N ) >= 0 )
   db8c8:	354c      	adds	r5, #76	; 0x4c
   db8ca:	4629      	mov	r1, r5
   db8cc:	4630      	mov	r0, r6
   db8ce:	f005 fd0d 	bl	e12ec <mbedtls_mpi_cmp_mpi>
   db8d2:	2800      	cmp	r0, #0
   db8d4:	db0d      	blt.n	db8f2 <_ZL10derive_mpiPK17mbedtls_ecp_groupP11mbedtls_mpiPKhj+0x52>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( x, x, &grp->N ) );
   db8d6:	462a      	mov	r2, r5
   db8d8:	4631      	mov	r1, r6
   db8da:	4630      	mov	r0, r6

cleanup:
    return( ret );
}
   db8dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    if( use_size * 8 > grp->nbits )
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( x, use_size * 8 - grp->nbits ) );

    /* While at it, reduce modulo N */
    if( mbedtls_mpi_cmp_mpi( x, &grp->N ) >= 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( x, x, &grp->N ) );
   db8e0:	f005 be1a 	b.w	e1518 <mbedtls_mpi_sub_mpi>
    size_t n_size = ( grp->nbits + 7 ) / 8;
    size_t use_size = blen > n_size ? n_size : blen;

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( x, buf, use_size ) );
    if( use_size * 8 > grp->nbits )
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( x, use_size * 8 - grp->nbits ) );
   db8e4:	1a61      	subs	r1, r4, r1
   db8e6:	4630      	mov	r0, r6
   db8e8:	f005 fc21 	bl	e112e <mbedtls_mpi_shift_r>
   db8ec:	2800      	cmp	r0, #0
   db8ee:	d0eb      	beq.n	db8c8 <_ZL10derive_mpiPK17mbedtls_ecp_groupP11mbedtls_mpiPKhj+0x28>
   db8f0:	4607      	mov	r7, r0
    if( mbedtls_mpi_cmp_mpi( x, &grp->N ) >= 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( x, x, &grp->N ) );

cleanup:
    return( ret );
}
   db8f2:	4638      	mov	r0, r7
   db8f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000db8f8 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0>:
#if !defined(MBEDTLS_ECDSA_SIGN_ALT)
/*
 * Compute ECDSA signature of a hashed message (SEC1 4.1.3)
 * Obviously, compared to SEC1 4.1.3, we skip step 4 (hash message)
 */
static int ecdsa_sign_restartable( mbedtls_ecp_group *grp,
   db8f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db8fc:	469b      	mov	fp, r3
    mbedtls_ecp_point R;
    mbedtls_mpi k, e, t;
    mbedtls_mpi *pk = &k, *pr = r;

    /* Fail cleanly on curves such as Curve25519 that can't be used for ECDSA */
    if( grp->N.p == NULL )
   db8fe:	6d43      	ldr	r3, [r0, #84]	; 0x54
#if !defined(MBEDTLS_ECDSA_SIGN_ALT)
/*
 * Compute ECDSA signature of a hashed message (SEC1 4.1.3)
 * Obviously, compared to SEC1 4.1.3, we skip step 4 (hash message)
 */
static int ecdsa_sign_restartable( mbedtls_ecp_group *grp,
   db900:	b09b      	sub	sp, #108	; 0x6c
   db902:	4606      	mov	r6, r0
   db904:	468a      	mov	sl, r1
   db906:	4615      	mov	r5, r2
    mbedtls_ecp_point R;
    mbedtls_mpi k, e, t;
    mbedtls_mpi *pk = &k, *pr = r;

    /* Fail cleanly on curves such as Curve25519 that can't be used for ECDSA */
    if( grp->N.p == NULL )
   db908:	b173      	cbz	r3, db928 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x30>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    /* Make sure d is in range 1..n-1 */
    if( mbedtls_mpi_cmp_int( d, 1 ) < 0 || mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 )
   db90a:	2101      	movs	r1, #1
   db90c:	4658      	mov	r0, fp
   db90e:	f005 fd32 	bl	e1376 <mbedtls_mpi_cmp_int>
   db912:	2800      	cmp	r0, #0
   db914:	db0a      	blt.n	db92c <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x34>
   db916:	f106 074c 	add.w	r7, r6, #76	; 0x4c
   db91a:	4639      	mov	r1, r7
   db91c:	4658      	mov	r0, fp
   db91e:	f005 fce5 	bl	e12ec <mbedtls_mpi_cmp_mpi>
   db922:	2800      	cmp	r0, #0
   db924:	da02      	bge.n	db92c <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x34>
   db926:	e003      	b.n	db930 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x38>
    mbedtls_mpi k, e, t;
    mbedtls_mpi *pk = &k, *pr = r;

    /* Fail cleanly on curves such as Curve25519 that can't be used for ECDSA */
    if( grp->N.p == NULL )
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   db928:	4854      	ldr	r0, [pc, #336]	; (dba7c <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x184>)
   db92a:	e0a4      	b.n	dba76 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x17e>

    /* Make sure d is in range 1..n-1 */
    if( mbedtls_mpi_cmp_int( d, 1 ) < 0 || mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 )
        return( MBEDTLS_ERR_ECP_INVALID_KEY );
   db92c:	4854      	ldr	r0, [pc, #336]	; (dba80 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x188>)
   db92e:	e0a2      	b.n	dba76 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x17e>

    mbedtls_ecp_point_init( &R );
   db930:	a811      	add	r0, sp, #68	; 0x44
    mbedtls_mpi_init( &k ); mbedtls_mpi_init( &e ); mbedtls_mpi_init( &t );
   db932:	ac08      	add	r4, sp, #32

    /* Make sure d is in range 1..n-1 */
    if( mbedtls_mpi_cmp_int( d, 1 ) < 0 || mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 )
        return( MBEDTLS_ERR_ECP_INVALID_KEY );

    mbedtls_ecp_point_init( &R );
   db934:	f7fd fa76 	bl	d8e24 <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &k ); mbedtls_mpi_init( &e ); mbedtls_mpi_init( &t );
   db938:	4620      	mov	r0, r4
   db93a:	f005 f9f0 	bl	e0d1e <mbedtls_mpi_init>
   db93e:	a80b      	add	r0, sp, #44	; 0x2c
   db940:	f005 f9ed 	bl	e0d1e <mbedtls_mpi_init>
   db944:	a80e      	add	r0, sp, #56	; 0x38
   db946:	f005 f9ea 	bl	e0d1e <mbedtls_mpi_init>
   db94a:	f10d 0918 	add.w	r9, sp, #24
        if( rs_ctx->sig->state == ecdsa_sig_modn )
            goto modn;
    }
#endif /* MBEDTLS_ECP_RESTARTABLE */

    *p_sign_tries = 0;
   db94e:	2300      	movs	r3, #0
   db950:	9307      	str	r3, [sp, #28]
                int (*f_rng_blind)(void *, unsigned char *, size_t),
                void *p_rng_blind,
                mbedtls_ecdsa_restart_ctx *rs_ctx )
{
    int ret, key_tries, sign_tries;
    int *p_sign_tries = &sign_tries, *p_key_tries = &key_tries;
   db952:	46c8      	mov	r8, r9

        /*
         * Steps 1-3: generate a suitable ephemeral keypair
         * and set r = xR mod n
         */
        *p_key_tries = 0;
   db954:	9305      	str	r3, [sp, #20]
#endif /* MBEDTLS_ECP_RESTARTABLE */

    *p_sign_tries = 0;
    do
    {
        if( *p_sign_tries++ > 10 )
   db956:	f859 3f04 	ldr.w	r3, [r9, #4]!
   db95a:	2b0a      	cmp	r3, #10
   db95c:	dd01      	ble.n	db962 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x6a>
        {
            ret = MBEDTLS_ERR_ECP_RANDOM_FAILED;
   db95e:	4b49      	ldr	r3, [pc, #292]	; (dba84 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x18c>)
   db960:	e07a      	b.n	dba58 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x160>

        /*
         * Steps 1-3: generate a suitable ephemeral keypair
         * and set r = xR mod n
         */
        *p_key_tries = 0;
   db962:	9b05      	ldr	r3, [sp, #20]
   db964:	f8c8 3000 	str.w	r3, [r8]
            if( rs_ctx != NULL && rs_ctx->sig != NULL )
                rs_ctx->sig->state = ecdsa_sig_mul;

mul:
#endif
            MBEDTLS_MPI_CHK( mbedtls_ecp_mul_restartable( grp, &R, pk, &grp->G,
   db968:	f106 0328 	add.w	r3, r6, #40	; 0x28
   db96c:	9304      	str	r3, [sp, #16]
         * and set r = xR mod n
         */
        *p_key_tries = 0;
        do
        {
            if( *p_key_tries++ > 10 )
   db96e:	f858 3b04 	ldr.w	r3, [r8], #4
   db972:	2b0a      	cmp	r3, #10
   db974:	dcf3      	bgt.n	db95e <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x66>
            {
                ret = MBEDTLS_ERR_ECP_RANDOM_FAILED;
                goto cleanup;
            }

            MBEDTLS_MPI_CHK( mbedtls_ecp_gen_privkey( grp, pk, f_rng, p_rng ) );
   db976:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   db978:	9a26      	ldr	r2, [sp, #152]	; 0x98
   db97a:	4621      	mov	r1, r4
   db97c:	4630      	mov	r0, r6
   db97e:	f7fe f9c5 	bl	d9d0c <mbedtls_ecp_gen_privkey>
   db982:	4603      	mov	r3, r0
   db984:	2800      	cmp	r0, #0
   db986:	d167      	bne.n	dba58 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x160>
            if( rs_ctx != NULL && rs_ctx->sig != NULL )
                rs_ctx->sig->state = ecdsa_sig_mul;

mul:
#endif
            MBEDTLS_MPI_CHK( mbedtls_ecp_mul_restartable( grp, &R, pk, &grp->G,
   db988:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   db98a:	9301      	str	r3, [sp, #4]
   db98c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   db98e:	9002      	str	r0, [sp, #8]
   db990:	9300      	str	r3, [sp, #0]
   db992:	4622      	mov	r2, r4
   db994:	9b04      	ldr	r3, [sp, #16]
   db996:	a911      	add	r1, sp, #68	; 0x44
   db998:	4630      	mov	r0, r6
   db99a:	f7fe f809 	bl	d99b0 <mbedtls_ecp_mul_restartable>
   db99e:	4603      	mov	r3, r0
   db9a0:	2800      	cmp	r0, #0
   db9a2:	d159      	bne.n	dba58 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x160>
                                                          f_rng_blind,
                                                          p_rng_blind,
                                                          ECDSA_RS_ECP ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( pr, &R.X, &grp->N ) );
   db9a4:	463a      	mov	r2, r7
   db9a6:	a911      	add	r1, sp, #68	; 0x44
   db9a8:	4650      	mov	r0, sl
   db9aa:	f006 f83f 	bl	e1a2c <mbedtls_mpi_mod_mpi>
   db9ae:	4603      	mov	r3, r0
   db9b0:	2800      	cmp	r0, #0
   db9b2:	d151      	bne.n	dba58 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x160>
        }
        while( mbedtls_mpi_cmp_int( pr, 0 ) == 0 );
   db9b4:	4601      	mov	r1, r0
   db9b6:	4650      	mov	r0, sl
   db9b8:	f005 fcdd 	bl	e1376 <mbedtls_mpi_cmp_int>
        /*
         * Steps 1-3: generate a suitable ephemeral keypair
         * and set r = xR mod n
         */
        *p_key_tries = 0;
        do
   db9bc:	2800      	cmp	r0, #0
   db9be:	d0d6      	beq.n	db96e <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x76>
        ECDSA_BUDGET( MBEDTLS_ECP_OPS_INV + 4 );

        /*
         * Step 5: derive MPI from hashed message
         */
        MBEDTLS_MPI_CHK( derive_mpi( grp, &e, buf, blen ) );
   db9c0:	9b25      	ldr	r3, [sp, #148]	; 0x94
   db9c2:	9a24      	ldr	r2, [sp, #144]	; 0x90
   db9c4:	a90b      	add	r1, sp, #44	; 0x2c
   db9c6:	4630      	mov	r0, r6
   db9c8:	f7ff ff6a 	bl	db8a0 <_ZL10derive_mpiPK17mbedtls_ecp_groupP11mbedtls_mpiPKhj>
   db9cc:	4603      	mov	r3, r0
   db9ce:	2800      	cmp	r0, #0
   db9d0:	d142      	bne.n	dba58 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x160>

        /*
         * Generate a random value to blind inv_mod in next step,
         * avoiding a potential timing leak.
         */
        MBEDTLS_MPI_CHK( mbedtls_ecp_gen_privkey( grp, &t, f_rng_blind,
   db9d2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   db9d4:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   db9d6:	a90e      	add	r1, sp, #56	; 0x38
   db9d8:	4630      	mov	r0, r6
   db9da:	f7fe f997 	bl	d9d0c <mbedtls_ecp_gen_privkey>
   db9de:	4603      	mov	r3, r0
   db9e0:	2800      	cmp	r0, #0
   db9e2:	d139      	bne.n	dba58 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x160>
                                                  p_rng_blind ) );

        /*
         * Step 6: compute s = (e + r * d) / k = t (e + rd) / (kt) mod n
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( s, pr, d ) );
   db9e4:	465a      	mov	r2, fp
   db9e6:	4651      	mov	r1, sl
   db9e8:	4628      	mov	r0, r5
   db9ea:	f005 fde3 	bl	e15b4 <mbedtls_mpi_mul_mpi>
   db9ee:	4603      	mov	r3, r0
   db9f0:	bb90      	cbnz	r0, dba58 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x160>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &e, &e, s ) );
   db9f2:	a90b      	add	r1, sp, #44	; 0x2c
   db9f4:	462a      	mov	r2, r5
   db9f6:	4608      	mov	r0, r1
   db9f8:	f005 fd6d 	bl	e14d6 <mbedtls_mpi_add_mpi>
   db9fc:	4603      	mov	r3, r0
   db9fe:	bb58      	cbnz	r0, dba58 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x160>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &e, &e, &t ) );
   dba00:	a90b      	add	r1, sp, #44	; 0x2c
   dba02:	aa0e      	add	r2, sp, #56	; 0x38
   dba04:	4608      	mov	r0, r1
   dba06:	f005 fdd5 	bl	e15b4 <mbedtls_mpi_mul_mpi>
   dba0a:	4603      	mov	r3, r0
   dba0c:	bb20      	cbnz	r0, dba58 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x160>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( pk, pk, &t ) );
   dba0e:	aa0e      	add	r2, sp, #56	; 0x38
   dba10:	4621      	mov	r1, r4
   dba12:	4620      	mov	r0, r4
   dba14:	f005 fdce 	bl	e15b4 <mbedtls_mpi_mul_mpi>
   dba18:	4603      	mov	r3, r0
   dba1a:	b9e8      	cbnz	r0, dba58 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x160>
        MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( s, pk, &grp->N ) );
   dba1c:	463a      	mov	r2, r7
   dba1e:	4621      	mov	r1, r4
   dba20:	4628      	mov	r0, r5
   dba22:	f006 fb0d 	bl	e2040 <mbedtls_mpi_inv_mod>
   dba26:	4603      	mov	r3, r0
   dba28:	b9b0      	cbnz	r0, dba58 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x160>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( s, s, &e ) );
   dba2a:	aa0b      	add	r2, sp, #44	; 0x2c
   dba2c:	4629      	mov	r1, r5
   dba2e:	4628      	mov	r0, r5
   dba30:	f005 fdc0 	bl	e15b4 <mbedtls_mpi_mul_mpi>
   dba34:	4603      	mov	r3, r0
   dba36:	b978      	cbnz	r0, dba58 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x160>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( s, s, &grp->N ) );
   dba38:	463a      	mov	r2, r7
   dba3a:	4629      	mov	r1, r5
   dba3c:	4628      	mov	r0, r5
   dba3e:	f005 fff5 	bl	e1a2c <mbedtls_mpi_mod_mpi>
   dba42:	4603      	mov	r3, r0
   dba44:	b940      	cbnz	r0, dba58 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x160>
    }
    while( mbedtls_mpi_cmp_int( s, 0 ) == 0 );
   dba46:	4601      	mov	r1, r0
   dba48:	9004      	str	r0, [sp, #16]
   dba4a:	4628      	mov	r0, r5
   dba4c:	f005 fc93 	bl	e1376 <mbedtls_mpi_cmp_int>
            goto modn;
    }
#endif /* MBEDTLS_ECP_RESTARTABLE */

    *p_sign_tries = 0;
    do
   dba50:	9b04      	ldr	r3, [sp, #16]
   dba52:	2800      	cmp	r0, #0
   dba54:	f43f af7f 	beq.w	db956 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x5e>
    if( rs_ctx != NULL && rs_ctx->sig != NULL )
        mbedtls_mpi_copy( r, pr );
#endif

cleanup:
    mbedtls_ecp_point_free( &R );
   dba58:	a811      	add	r0, sp, #68	; 0x44
   dba5a:	9304      	str	r3, [sp, #16]
   dba5c:	f7fd fa1f 	bl	d8e9e <mbedtls_ecp_point_free>
    mbedtls_mpi_free( &k ); mbedtls_mpi_free( &e ); mbedtls_mpi_free( &t );
   dba60:	a808      	add	r0, sp, #32
   dba62:	f005 f962 	bl	e0d2a <mbedtls_mpi_free>
   dba66:	a80b      	add	r0, sp, #44	; 0x2c
   dba68:	f005 f95f 	bl	e0d2a <mbedtls_mpi_free>
   dba6c:	a80e      	add	r0, sp, #56	; 0x38
   dba6e:	f005 f95c 	bl	e0d2a <mbedtls_mpi_free>

    ECDSA_RS_LEAVE( sig );

    return( ret );
   dba72:	9b04      	ldr	r3, [sp, #16]
   dba74:	4618      	mov	r0, r3
}
   dba76:	b01b      	add	sp, #108	; 0x6c
   dba78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dba7c:	ffffb080 	.word	0xffffb080
   dba80:	ffffb380 	.word	0xffffb380
   dba84:	ffffb300 	.word	0xffffb300

000dba88 <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1>:
#if !defined(MBEDTLS_ECDSA_VERIFY_ALT)
/*
 * Verify ECDSA signature of hashed message (SEC1 4.1.4)
 * Obviously, compared to SEC1 4.1.3, we skip step 2 (hash message)
 */
static int ecdsa_verify_restartable( mbedtls_ecp_group *grp,
   dba88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dba8c:	b09a      	sub	sp, #104	; 0x68
   dba8e:	4606      	mov	r6, r0
    int ret;
    mbedtls_mpi e, s_inv, u1, u2;
    mbedtls_ecp_point R;
    mbedtls_mpi *pu1 = &u1, *pu2 = &u2;

    mbedtls_ecp_point_init( &R );
   dba90:	a811      	add	r0, sp, #68	; 0x44
#if !defined(MBEDTLS_ECDSA_VERIFY_ALT)
/*
 * Verify ECDSA signature of hashed message (SEC1 4.1.4)
 * Obviously, compared to SEC1 4.1.3, we skip step 2 (hash message)
 */
static int ecdsa_verify_restartable( mbedtls_ecp_group *grp,
   dba92:	4698      	mov	r8, r3
   dba94:	460c      	mov	r4, r1
   dba96:	4617      	mov	r7, r2
    int ret;
    mbedtls_mpi e, s_inv, u1, u2;
    mbedtls_ecp_point R;
    mbedtls_mpi *pu1 = &u1, *pu2 = &u2;

    mbedtls_ecp_point_init( &R );
   dba98:	f7fd f9c4 	bl	d8e24 <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &e ); mbedtls_mpi_init( &s_inv );
   dba9c:	a805      	add	r0, sp, #20
   dba9e:	f005 f93e 	bl	e0d1e <mbedtls_mpi_init>
   dbaa2:	a808      	add	r0, sp, #32
   dbaa4:	f005 f93b 	bl	e0d1e <mbedtls_mpi_init>
    mbedtls_mpi_init( &u1 ); mbedtls_mpi_init( &u2 );
   dbaa8:	a80b      	add	r0, sp, #44	; 0x2c
   dbaaa:	f005 f938 	bl	e0d1e <mbedtls_mpi_init>
   dbaae:	a80e      	add	r0, sp, #56	; 0x38
   dbab0:	f005 f935 	bl	e0d1e <mbedtls_mpi_init>

    /* Fail cleanly on curves such as Curve25519 that can't be used for ECDSA */
    if( grp->N.p == NULL )
   dbab4:	6d73      	ldr	r3, [r6, #84]	; 0x54
   dbab6:	2b00      	cmp	r3, #0
   dbab8:	d068      	beq.n	dbb8c <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0x104>
#endif /* MBEDTLS_ECP_RESTARTABLE */

    /*
     * Step 1: make sure r and s are in range 1..n-1
     */
    if( mbedtls_mpi_cmp_int( r, 1 ) < 0 || mbedtls_mpi_cmp_mpi( r, &grp->N ) >= 0 ||
   dbaba:	2101      	movs	r1, #1
   dbabc:	9820      	ldr	r0, [sp, #128]	; 0x80
   dbabe:	f005 fc5a 	bl	e1376 <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( s, 1 ) < 0 || mbedtls_mpi_cmp_mpi( s, &grp->N ) >= 0 )
   dbac2:	2800      	cmp	r0, #0
   dbac4:	db50      	blt.n	dbb68 <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0xe0>
#endif /* MBEDTLS_ECP_RESTARTABLE */

    /*
     * Step 1: make sure r and s are in range 1..n-1
     */
    if( mbedtls_mpi_cmp_int( r, 1 ) < 0 || mbedtls_mpi_cmp_mpi( r, &grp->N ) >= 0 ||
   dbac6:	f106 054c 	add.w	r5, r6, #76	; 0x4c
   dbaca:	4629      	mov	r1, r5
   dbacc:	9820      	ldr	r0, [sp, #128]	; 0x80
   dbace:	f005 fc0d 	bl	e12ec <mbedtls_mpi_cmp_mpi>
   dbad2:	2800      	cmp	r0, #0
   dbad4:	da48      	bge.n	dbb68 <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0xe0>
        mbedtls_mpi_cmp_int( s, 1 ) < 0 || mbedtls_mpi_cmp_mpi( s, &grp->N ) >= 0 )
   dbad6:	2101      	movs	r1, #1
   dbad8:	9821      	ldr	r0, [sp, #132]	; 0x84
   dbada:	f005 fc4c 	bl	e1376 <mbedtls_mpi_cmp_int>
#endif /* MBEDTLS_ECP_RESTARTABLE */

    /*
     * Step 1: make sure r and s are in range 1..n-1
     */
    if( mbedtls_mpi_cmp_int( r, 1 ) < 0 || mbedtls_mpi_cmp_mpi( r, &grp->N ) >= 0 ||
   dbade:	2800      	cmp	r0, #0
   dbae0:	db42      	blt.n	dbb68 <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0xe0>
        mbedtls_mpi_cmp_int( s, 1 ) < 0 || mbedtls_mpi_cmp_mpi( s, &grp->N ) >= 0 )
   dbae2:	4629      	mov	r1, r5
   dbae4:	9821      	ldr	r0, [sp, #132]	; 0x84
   dbae6:	f005 fc01 	bl	e12ec <mbedtls_mpi_cmp_mpi>
   dbaea:	2800      	cmp	r0, #0
   dbaec:	da3c      	bge.n	dbb68 <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0xe0>
    }

    /*
     * Step 3: derive MPI from hashed message
     */
    MBEDTLS_MPI_CHK( derive_mpi( grp, &e, buf, blen ) );
   dbaee:	4622      	mov	r2, r4
   dbaf0:	463b      	mov	r3, r7
   dbaf2:	a905      	add	r1, sp, #20
   dbaf4:	4630      	mov	r0, r6
   dbaf6:	f7ff fed3 	bl	db8a0 <_ZL10derive_mpiPK17mbedtls_ecp_groupP11mbedtls_mpiPKhj>
   dbafa:	4604      	mov	r4, r0
   dbafc:	2800      	cmp	r0, #0
   dbafe:	d134      	bne.n	dbb6a <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0xe2>
    /*
     * Step 4: u1 = e / s mod n, u2 = r / s mod n
     */
    ECDSA_BUDGET( MBEDTLS_ECP_OPS_CHK + MBEDTLS_ECP_OPS_INV + 2 );

    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &s_inv, s, &grp->N ) );
   dbb00:	462a      	mov	r2, r5
   dbb02:	9921      	ldr	r1, [sp, #132]	; 0x84
   dbb04:	a808      	add	r0, sp, #32
   dbb06:	f006 fa9b 	bl	e2040 <mbedtls_mpi_inv_mod>
   dbb0a:	4604      	mov	r4, r0
   dbb0c:	bb68      	cbnz	r0, dbb6a <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0xe2>

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( pu1, &e, &s_inv ) );
   dbb0e:	aa08      	add	r2, sp, #32
   dbb10:	a905      	add	r1, sp, #20
   dbb12:	a80b      	add	r0, sp, #44	; 0x2c
   dbb14:	f005 fd4e 	bl	e15b4 <mbedtls_mpi_mul_mpi>
   dbb18:	4604      	mov	r4, r0
   dbb1a:	bb30      	cbnz	r0, dbb6a <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0xe2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( pu1, pu1, &grp->N ) );
   dbb1c:	a90b      	add	r1, sp, #44	; 0x2c
   dbb1e:	462a      	mov	r2, r5
   dbb20:	4608      	mov	r0, r1
   dbb22:	f005 ff83 	bl	e1a2c <mbedtls_mpi_mod_mpi>
   dbb26:	4604      	mov	r4, r0
   dbb28:	b9f8      	cbnz	r0, dbb6a <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0xe2>

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( pu2, r, &s_inv ) );
   dbb2a:	aa08      	add	r2, sp, #32
   dbb2c:	9920      	ldr	r1, [sp, #128]	; 0x80
   dbb2e:	a80e      	add	r0, sp, #56	; 0x38
   dbb30:	f005 fd40 	bl	e15b4 <mbedtls_mpi_mul_mpi>
   dbb34:	4604      	mov	r4, r0
   dbb36:	b9c0      	cbnz	r0, dbb6a <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0xe2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( pu2, pu2, &grp->N ) );
   dbb38:	af0e      	add	r7, sp, #56	; 0x38
   dbb3a:	462a      	mov	r2, r5
   dbb3c:	4639      	mov	r1, r7
   dbb3e:	4638      	mov	r0, r7
   dbb40:	f005 ff74 	bl	e1a2c <mbedtls_mpi_mod_mpi>
   dbb44:	4604      	mov	r4, r0
   dbb46:	b980      	cbnz	r0, dbb6a <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0xe2>
muladd:
#endif
    /*
     * Step 5: R = u1 G + u2 Q
     */
    MBEDTLS_MPI_CHK( mbedtls_ecp_muladd_restartable( grp,
   dbb48:	9002      	str	r0, [sp, #8]
   dbb4a:	e88d 0180 	stmia.w	sp, {r7, r8}
   dbb4e:	f106 0328 	add.w	r3, r6, #40	; 0x28
   dbb52:	aa0b      	add	r2, sp, #44	; 0x2c
   dbb54:	a911      	add	r1, sp, #68	; 0x44
   dbb56:	4630      	mov	r0, r6
   dbb58:	f7fe f89e 	bl	d9c98 <mbedtls_ecp_muladd_restartable>
   dbb5c:	4604      	mov	r4, r0
   dbb5e:	b920      	cbnz	r0, dbb6a <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0xe2>
                     &R, pu1, &grp->G, pu2, Q, ECDSA_RS_ECP ) );

    if( mbedtls_ecp_is_zero( &R ) )
   dbb60:	a811      	add	r0, sp, #68	; 0x44
   dbb62:	f7fd fd69 	bl	d9638 <mbedtls_ecp_is_zero>
   dbb66:	b198      	cbz	r0, dbb90 <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0x108>
    /*
     * Step 8: check if v (that is, R.X) is equal to r
     */
    if( mbedtls_mpi_cmp_mpi( &R.X, r ) != 0 )
    {
        ret = MBEDTLS_ERR_ECP_VERIFY_FAILED;
   dbb68:	4c12      	ldr	r4, [pc, #72]	; (dbbb4 <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0x12c>)
        goto cleanup;
    }

cleanup:
    mbedtls_ecp_point_free( &R );
   dbb6a:	a811      	add	r0, sp, #68	; 0x44
   dbb6c:	f7fd f997 	bl	d8e9e <mbedtls_ecp_point_free>
    mbedtls_mpi_free( &e ); mbedtls_mpi_free( &s_inv );
   dbb70:	a805      	add	r0, sp, #20
   dbb72:	f005 f8da 	bl	e0d2a <mbedtls_mpi_free>
   dbb76:	a808      	add	r0, sp, #32
   dbb78:	f005 f8d7 	bl	e0d2a <mbedtls_mpi_free>
    mbedtls_mpi_free( &u1 ); mbedtls_mpi_free( &u2 );
   dbb7c:	a80b      	add	r0, sp, #44	; 0x2c
   dbb7e:	f005 f8d4 	bl	e0d2a <mbedtls_mpi_free>
   dbb82:	a80e      	add	r0, sp, #56	; 0x38
   dbb84:	f005 f8d1 	bl	e0d2a <mbedtls_mpi_free>

    ECDSA_RS_LEAVE( ver );

    return( ret );
   dbb88:	4620      	mov	r0, r4
   dbb8a:	e010      	b.n	dbbae <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0x126>
    mbedtls_mpi_init( &e ); mbedtls_mpi_init( &s_inv );
    mbedtls_mpi_init( &u1 ); mbedtls_mpi_init( &u2 );

    /* Fail cleanly on curves such as Curve25519 that can't be used for ECDSA */
    if( grp->N.p == NULL )
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   dbb8c:	480a      	ldr	r0, [pc, #40]	; (dbbb8 <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0x130>)
   dbb8e:	e00e      	b.n	dbbae <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0x126>

    /*
     * Step 6: convert xR to an integer (no-op)
     * Step 7: reduce xR mod n (gives v)
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &R.X, &R.X, &grp->N ) );
   dbb90:	a911      	add	r1, sp, #68	; 0x44
   dbb92:	462a      	mov	r2, r5
   dbb94:	4608      	mov	r0, r1
   dbb96:	f005 ff49 	bl	e1a2c <mbedtls_mpi_mod_mpi>
   dbb9a:	4604      	mov	r4, r0
   dbb9c:	2800      	cmp	r0, #0
   dbb9e:	d1e4      	bne.n	dbb6a <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0xe2>

    /*
     * Step 8: check if v (that is, R.X) is equal to r
     */
    if( mbedtls_mpi_cmp_mpi( &R.X, r ) != 0 )
   dbba0:	9920      	ldr	r1, [sp, #128]	; 0x80
   dbba2:	a811      	add	r0, sp, #68	; 0x44
   dbba4:	f005 fba2 	bl	e12ec <mbedtls_mpi_cmp_mpi>
   dbba8:	2800      	cmp	r0, #0
   dbbaa:	d0de      	beq.n	dbb6a <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0xe2>
   dbbac:	e7dc      	b.n	dbb68 <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0xe0>
    mbedtls_mpi_free( &u1 ); mbedtls_mpi_free( &u2 );

    ECDSA_RS_LEAVE( ver );

    return( ret );
}
   dbbae:	b01a      	add	sp, #104	; 0x68
   dbbb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dbbb4:	ffffb200 	.word	0xffffb200
   dbbb8:	ffffb080 	.word	0xffffb080

000dbbbc <mbedtls_ecdsa_write_signature_restartable>:
                           const unsigned char *hash, size_t hlen,
                           unsigned char *sig, size_t *slen,
                           int (*f_rng)(void *, unsigned char *, size_t),
                           void *p_rng,
                           mbedtls_ecdsa_restart_ctx *rs_ctx )
{
   dbbbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dbbc0:	b0b2      	sub	sp, #200	; 0xc8
   dbbc2:	4604      	mov	r4, r0
    ECDSA_VALIDATE_RET( ctx  != NULL );
    ECDSA_VALIDATE_RET( hash != NULL );
    ECDSA_VALIDATE_RET( sig  != NULL );
    ECDSA_VALIDATE_RET( slen != NULL );

    mbedtls_mpi_init( &r );
   dbbc4:	a808      	add	r0, sp, #32
                           const unsigned char *hash, size_t hlen,
                           unsigned char *sig, size_t *slen,
                           int (*f_rng)(void *, unsigned char *, size_t),
                           void *p_rng,
                           mbedtls_ecdsa_restart_ctx *rs_ctx )
{
   dbbc6:	4617      	mov	r7, r2
   dbbc8:	4698      	mov	r8, r3
   dbbca:	9d3a      	ldr	r5, [sp, #232]	; 0xe8
   dbbcc:	9e3b      	ldr	r6, [sp, #236]	; 0xec
    ECDSA_VALIDATE_RET( ctx  != NULL );
    ECDSA_VALIDATE_RET( hash != NULL );
    ECDSA_VALIDATE_RET( sig  != NULL );
    ECDSA_VALIDATE_RET( slen != NULL );

    mbedtls_mpi_init( &r );
   dbbce:	f005 f8a6 	bl	e0d1e <mbedtls_mpi_init>
    mbedtls_mpi_init( &s );
   dbbd2:	a80b      	add	r0, sp, #44	; 0x2c
   dbbd4:	f005 f8a3 	bl	e0d1e <mbedtls_mpi_init>
#if defined(MBEDTLS_ECDSA_SIGN_ALT)
    MBEDTLS_MPI_CHK( mbedtls_ecdsa_sign( &ctx->grp, &r, &s, &ctx->d,
                         hash, hlen, f_rng, p_rng ) );
#else
    /* Use the same RNG for both blinding and ephemeral key generation */
    MBEDTLS_MPI_CHK( ecdsa_sign_restartable( &ctx->grp, &r, &s, &ctx->d,
   dbbd8:	e88d 0180 	stmia.w	sp, {r7, r8}
   dbbdc:	9605      	str	r6, [sp, #20]
   dbbde:	9504      	str	r5, [sp, #16]
   dbbe0:	9603      	str	r6, [sp, #12]
   dbbe2:	9502      	str	r5, [sp, #8]
   dbbe4:	f104 037c 	add.w	r3, r4, #124	; 0x7c
   dbbe8:	aa0b      	add	r2, sp, #44	; 0x2c
   dbbea:	a908      	add	r1, sp, #32
   dbbec:	4620      	mov	r0, r4
   dbbee:	f7ff fe83 	bl	db8f8 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0>
   dbbf2:	4607      	mov	r7, r0
   dbbf4:	bb70      	cbnz	r0, dbc54 <mbedtls_ecdsa_write_signature_restartable+0x98>
static int ecdsa_signature_to_asn1( const mbedtls_mpi *r, const mbedtls_mpi *s,
                                    unsigned char *sig, size_t *slen )
{
    int ret;
    unsigned char buf[MBEDTLS_ECDSA_MAX_LEN];
    unsigned char *p = buf + sizeof( buf );
   dbbf6:	ae32      	add	r6, sp, #200	; 0xc8
   dbbf8:	f10d 03c5 	add.w	r3, sp, #197	; 0xc5
   dbbfc:	f846 3dac 	str.w	r3, [r6, #-172]!
    size_t len = 0;

    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &p, buf, s ) );
   dbc00:	aa0b      	add	r2, sp, #44	; 0x2c
   dbc02:	a90e      	add	r1, sp, #56	; 0x38
   dbc04:	4630      	mov	r0, r6
   dbc06:	f7fa f918 	bl	d5e3a <mbedtls_asn1_write_mpi>
   dbc0a:	1e04      	subs	r4, r0, #0
   dbc0c:	db21      	blt.n	dbc52 <mbedtls_ecdsa_write_signature_restartable+0x96>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &p, buf, r ) );
   dbc0e:	aa08      	add	r2, sp, #32
   dbc10:	a90e      	add	r1, sp, #56	; 0x38
   dbc12:	4630      	mov	r0, r6
   dbc14:	f7fa f911 	bl	d5e3a <mbedtls_asn1_write_mpi>
   dbc18:	2800      	cmp	r0, #0
   dbc1a:	db19      	blt.n	dbc50 <mbedtls_ecdsa_write_signature_restartable+0x94>
   dbc1c:	1825      	adds	r5, r4, r0

    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &p, buf, len ) );
   dbc1e:	462a      	mov	r2, r5
   dbc20:	a90e      	add	r1, sp, #56	; 0x38
   dbc22:	4630      	mov	r0, r6
   dbc24:	f7fa f887 	bl	d5d36 <mbedtls_asn1_write_len>
   dbc28:	1e04      	subs	r4, r0, #0
   dbc2a:	db12      	blt.n	dbc52 <mbedtls_ecdsa_write_signature_restartable+0x96>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &p, buf,
   dbc2c:	2230      	movs	r2, #48	; 0x30
   dbc2e:	a90e      	add	r1, sp, #56	; 0x38
   dbc30:	4630      	mov	r0, r6
   dbc32:	f7fa f8f4 	bl	d5e1e <mbedtls_asn1_write_tag>
   dbc36:	2800      	cmp	r0, #0
   dbc38:	db0a      	blt.n	dbc50 <mbedtls_ecdsa_write_signature_restartable+0x94>
   dbc3a:	442c      	add	r4, r5
   dbc3c:	4404      	add	r4, r0
                                       MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) );

    memcpy( sig, p, len );
   dbc3e:	4622      	mov	r2, r4
   dbc40:	9907      	ldr	r1, [sp, #28]
   dbc42:	9838      	ldr	r0, [sp, #224]	; 0xe0
   dbc44:	f00d ff37 	bl	e9ab6 <memcpy>
    *slen = len;
   dbc48:	9b39      	ldr	r3, [sp, #228]	; 0xe4
   dbc4a:	601c      	str	r4, [r3, #0]

    return( 0 );
   dbc4c:	463c      	mov	r4, r7
   dbc4e:	e000      	b.n	dbc52 <mbedtls_ecdsa_write_signature_restartable+0x96>

    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &p, buf, s ) );
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &p, buf, r ) );

    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &p, buf, len ) );
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &p, buf,
   dbc50:	4604      	mov	r4, r0
                                             hash, hlen, f_rng, p_rng, f_rng,
                                             p_rng, rs_ctx ) );
#endif /* MBEDTLS_ECDSA_SIGN_ALT */
#endif /* MBEDTLS_ECDSA_DETERMINISTIC */

    MBEDTLS_MPI_CHK( ecdsa_signature_to_asn1( &r, &s, sig, slen ) );
   dbc52:	4627      	mov	r7, r4

cleanup:
    mbedtls_mpi_free( &r );
   dbc54:	a808      	add	r0, sp, #32
   dbc56:	f005 f868 	bl	e0d2a <mbedtls_mpi_free>
    mbedtls_mpi_free( &s );
   dbc5a:	a80b      	add	r0, sp, #44	; 0x2c
   dbc5c:	f005 f865 	bl	e0d2a <mbedtls_mpi_free>

    return( ret );
}
   dbc60:	4638      	mov	r0, r7
   dbc62:	b032      	add	sp, #200	; 0xc8
   dbc64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000dbc68 <mbedtls_ecdsa_write_signature>:
                                 mbedtls_md_type_t md_alg,
                                 const unsigned char *hash, size_t hlen,
                                 unsigned char *sig, size_t *slen,
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng )
{
   dbc68:	b510      	push	{r4, lr}
   dbc6a:	b086      	sub	sp, #24
    ECDSA_VALIDATE_RET( ctx  != NULL );
    ECDSA_VALIDATE_RET( hash != NULL );
    ECDSA_VALIDATE_RET( sig  != NULL );
    ECDSA_VALIDATE_RET( slen != NULL );
    return( mbedtls_ecdsa_write_signature_restartable(
                ctx, md_alg, hash, hlen, sig, slen, f_rng, p_rng, NULL ) );
   dbc6c:	2400      	movs	r4, #0
   dbc6e:	9404      	str	r4, [sp, #16]
   dbc70:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   dbc72:	9403      	str	r4, [sp, #12]
   dbc74:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   dbc76:	9402      	str	r4, [sp, #8]
   dbc78:	9c09      	ldr	r4, [sp, #36]	; 0x24
   dbc7a:	9401      	str	r4, [sp, #4]
   dbc7c:	9c08      	ldr	r4, [sp, #32]
   dbc7e:	9400      	str	r4, [sp, #0]
   dbc80:	f7ff ff9c 	bl	dbbbc <mbedtls_ecdsa_write_signature_restartable>
}
   dbc84:	b006      	add	sp, #24
   dbc86:	bd10      	pop	{r4, pc}

000dbc88 <mbedtls_ecdsa_read_signature_restartable>:
 */
int mbedtls_ecdsa_read_signature_restartable( mbedtls_ecdsa_context *ctx,
                          const unsigned char *hash, size_t hlen,
                          const unsigned char *sig, size_t slen,
                          mbedtls_ecdsa_restart_ctx *rs_ctx )
{
   dbc88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dbc8c:	b08b      	sub	sp, #44	; 0x2c
    mbedtls_mpi r, s;
    ECDSA_VALIDATE_RET( ctx  != NULL );
    ECDSA_VALIDATE_RET( hash != NULL );
    ECDSA_VALIDATE_RET( sig  != NULL );

    mbedtls_mpi_init( &r );
   dbc8e:	ae04      	add	r6, sp, #16
                          const unsigned char *sig, size_t slen,
                          mbedtls_ecdsa_restart_ctx *rs_ctx )
{
    int ret;
    unsigned char *p = (unsigned char *) sig;
    const unsigned char *end = sig + slen;
   dbc90:	9d12      	ldr	r5, [sp, #72]	; 0x48
                          const unsigned char *hash, size_t hlen,
                          const unsigned char *sig, size_t slen,
                          mbedtls_ecdsa_restart_ctx *rs_ctx )
{
    int ret;
    unsigned char *p = (unsigned char *) sig;
   dbc92:	9302      	str	r3, [sp, #8]
 */
int mbedtls_ecdsa_read_signature_restartable( mbedtls_ecdsa_context *ctx,
                          const unsigned char *hash, size_t hlen,
                          const unsigned char *sig, size_t slen,
                          mbedtls_ecdsa_restart_ctx *rs_ctx )
{
   dbc94:	4604      	mov	r4, r0
    ECDSA_VALIDATE_RET( ctx  != NULL );
    ECDSA_VALIDATE_RET( hash != NULL );
    ECDSA_VALIDATE_RET( sig  != NULL );

    mbedtls_mpi_init( &r );
    mbedtls_mpi_init( &s );
   dbc96:	af07      	add	r7, sp, #28
    mbedtls_mpi r, s;
    ECDSA_VALIDATE_RET( ctx  != NULL );
    ECDSA_VALIDATE_RET( hash != NULL );
    ECDSA_VALIDATE_RET( sig  != NULL );

    mbedtls_mpi_init( &r );
   dbc98:	4630      	mov	r0, r6
                          const unsigned char *sig, size_t slen,
                          mbedtls_ecdsa_restart_ctx *rs_ctx )
{
    int ret;
    unsigned char *p = (unsigned char *) sig;
    const unsigned char *end = sig + slen;
   dbc9a:	441d      	add	r5, r3
 */
int mbedtls_ecdsa_read_signature_restartable( mbedtls_ecdsa_context *ctx,
                          const unsigned char *hash, size_t hlen,
                          const unsigned char *sig, size_t slen,
                          mbedtls_ecdsa_restart_ctx *rs_ctx )
{
   dbc9c:	4688      	mov	r8, r1
   dbc9e:	4691      	mov	r9, r2
    mbedtls_mpi r, s;
    ECDSA_VALIDATE_RET( ctx  != NULL );
    ECDSA_VALIDATE_RET( hash != NULL );
    ECDSA_VALIDATE_RET( sig  != NULL );

    mbedtls_mpi_init( &r );
   dbca0:	f005 f83d 	bl	e0d1e <mbedtls_mpi_init>
    mbedtls_mpi_init( &s );
   dbca4:	4638      	mov	r0, r7
   dbca6:	f005 f83a 	bl	e0d1e <mbedtls_mpi_init>

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   dbcaa:	2330      	movs	r3, #48	; 0x30
   dbcac:	aa03      	add	r2, sp, #12
   dbcae:	4629      	mov	r1, r5
   dbcb0:	a802      	add	r0, sp, #8
   dbcb2:	f7fa fbcb 	bl	d644c <mbedtls_asn1_get_tag>
   dbcb6:	b998      	cbnz	r0, dbce0 <mbedtls_ecdsa_read_signature_restartable+0x58>
    {
        ret += MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
        goto cleanup;
    }

    if( p + len != end )
   dbcb8:	9b03      	ldr	r3, [sp, #12]
   dbcba:	9a02      	ldr	r2, [sp, #8]
   dbcbc:	4413      	add	r3, r2
   dbcbe:	429d      	cmp	r5, r3
   dbcc0:	d10c      	bne.n	dbcdc <mbedtls_ecdsa_read_signature_restartable+0x54>
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA +
              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH;
        goto cleanup;
    }

    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &r ) ) != 0 ||
   dbcc2:	4632      	mov	r2, r6
   dbcc4:	4629      	mov	r1, r5
   dbcc6:	a802      	add	r0, sp, #8
   dbcc8:	f7fa fc11 	bl	d64ee <mbedtls_asn1_get_mpi>
   dbccc:	b940      	cbnz	r0, dbce0 <mbedtls_ecdsa_read_signature_restartable+0x58>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &s ) ) != 0 )
   dbcce:	463a      	mov	r2, r7
   dbcd0:	4629      	mov	r1, r5
   dbcd2:	a802      	add	r0, sp, #8
   dbcd4:	f7fa fc0b 	bl	d64ee <mbedtls_asn1_get_mpi>
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA +
              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH;
        goto cleanup;
    }

    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &r ) ) != 0 ||
   dbcd8:	b910      	cbnz	r0, dbce0 <mbedtls_ecdsa_read_signature_restartable+0x58>
   dbcda:	e004      	b.n	dbce6 <mbedtls_ecdsa_read_signature_restartable+0x5e>
    }

    if( p + len != end )
    {
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA +
              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH;
   dbcdc:	4c0f      	ldr	r4, [pc, #60]	; (dbd1c <mbedtls_ecdsa_read_signature_restartable+0x94>)
   dbcde:	e012      	b.n	dbd06 <mbedtls_ecdsa_read_signature_restartable+0x7e>
    }

    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &r ) ) != 0 ||
        ( ret = mbedtls_asn1_get_mpi( &p, end, &s ) ) != 0 )
    {
        ret += MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
   dbce0:	f5a0 449f 	sub.w	r4, r0, #20352	; 0x4f80
        goto cleanup;
   dbce4:	e00f      	b.n	dbd06 <mbedtls_ecdsa_read_signature_restartable+0x7e>
#if defined(MBEDTLS_ECDSA_VERIFY_ALT)
    if( ( ret = mbedtls_ecdsa_verify( &ctx->grp, hash, hlen,
                                      &ctx->Q, &r, &s ) ) != 0 )
        goto cleanup;
#else
    if( ( ret = ecdsa_verify_restartable( &ctx->grp, hash, hlen,
   dbce6:	f104 0388 	add.w	r3, r4, #136	; 0x88
   dbcea:	4620      	mov	r0, r4
   dbcec:	e88d 00c0 	stmia.w	sp, {r6, r7}
   dbcf0:	464a      	mov	r2, r9
   dbcf2:	4641      	mov	r1, r8
   dbcf4:	f7ff fec8 	bl	dba88 <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1>
   dbcf8:	4604      	mov	r4, r0
   dbcfa:	b920      	cbnz	r0, dbd06 <mbedtls_ecdsa_read_signature_restartable+0x7e>

    /* At this point we know that the buffer starts with a valid signature.
     * Return 0 if the buffer just contains the signature, and a specific
     * error code if the valid signature is followed by more data. */
    if( p != end )
        ret = MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH;
   dbcfc:	4b08      	ldr	r3, [pc, #32]	; (dbd20 <mbedtls_ecdsa_read_signature_restartable+0x98>)
   dbcfe:	9a02      	ldr	r2, [sp, #8]
   dbd00:	4295      	cmp	r5, r2
   dbd02:	bf18      	it	ne
   dbd04:	461c      	movne	r4, r3

cleanup:
    mbedtls_mpi_free( &r );
   dbd06:	4630      	mov	r0, r6
   dbd08:	f005 f80f 	bl	e0d2a <mbedtls_mpi_free>
    mbedtls_mpi_free( &s );
   dbd0c:	4638      	mov	r0, r7
   dbd0e:	f005 f80c 	bl	e0d2a <mbedtls_mpi_free>

    return( ret );
}
   dbd12:	4620      	mov	r0, r4
   dbd14:	b00b      	add	sp, #44	; 0x2c
   dbd16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dbd1a:	bf00      	nop
   dbd1c:	ffffb01a 	.word	0xffffb01a
   dbd20:	ffffb400 	.word	0xffffb400

000dbd24 <mbedtls_ecdsa_read_signature>:
 * Read and check signature
 */
int mbedtls_ecdsa_read_signature( mbedtls_ecdsa_context *ctx,
                          const unsigned char *hash, size_t hlen,
                          const unsigned char *sig, size_t slen )
{
   dbd24:	b513      	push	{r0, r1, r4, lr}
    ECDSA_VALIDATE_RET( ctx  != NULL );
    ECDSA_VALIDATE_RET( hash != NULL );
    ECDSA_VALIDATE_RET( sig  != NULL );
    return( mbedtls_ecdsa_read_signature_restartable(
                ctx, hash, hlen, sig, slen, NULL ) );
   dbd26:	2400      	movs	r4, #0
   dbd28:	9401      	str	r4, [sp, #4]
   dbd2a:	9c04      	ldr	r4, [sp, #16]
   dbd2c:	9400      	str	r4, [sp, #0]
   dbd2e:	f7ff ffab 	bl	dbc88 <mbedtls_ecdsa_read_signature_restartable>
}
   dbd32:	b002      	add	sp, #8
   dbd34:	bd10      	pop	{r4, pc}

000dbd36 <mbedtls_ecdsa_init>:
 */
void mbedtls_ecdsa_init( mbedtls_ecdsa_context *ctx )
{
    ECDSA_VALIDATE( ctx != NULL );

    mbedtls_ecp_keypair_init( ctx );
   dbd36:	f7fd b8a4 	b.w	d8e82 <mbedtls_ecp_keypair_init>

000dbd3a <mbedtls_ecdsa_free>:
/*
 * Free context
 */
void mbedtls_ecdsa_free( mbedtls_ecdsa_context *ctx )
{
    if( ctx == NULL )
   dbd3a:	b108      	cbz	r0, dbd40 <mbedtls_ecdsa_free+0x6>
        return;

    mbedtls_ecp_keypair_free( ctx );
   dbd3c:	f7fd b8ef 	b.w	d8f1e <mbedtls_ecp_keypair_free>
   dbd40:	4770      	bx	lr

000dbd42 <mbedtls_ecdsa_from_keypair>:

/*
 * Set context from an mbedtls_ecp_keypair
 */
int mbedtls_ecdsa_from_keypair( mbedtls_ecdsa_context *ctx, const mbedtls_ecp_keypair *key )
{
   dbd42:	b570      	push	{r4, r5, r6, lr}
   dbd44:	4605      	mov	r5, r0
   dbd46:	460e      	mov	r6, r1
    int ret;
    ECDSA_VALIDATE_RET( ctx != NULL );
    ECDSA_VALIDATE_RET( key != NULL );

    if( ( ret = mbedtls_ecp_group_copy( &ctx->grp, &key->grp ) ) != 0 ||
   dbd48:	f7fd f90f 	bl	d8f6a <mbedtls_ecp_group_copy>
        ( ret = mbedtls_mpi_copy( &ctx->d, &key->d ) ) != 0 ||
   dbd4c:	4604      	mov	r4, r0
   dbd4e:	b978      	cbnz	r0, dbd70 <mbedtls_ecdsa_from_keypair+0x2e>
   dbd50:	f106 017c 	add.w	r1, r6, #124	; 0x7c
   dbd54:	f105 007c 	add.w	r0, r5, #124	; 0x7c
   dbd58:	f005 f861 	bl	e0e1e <mbedtls_mpi_copy>
{
    int ret;
    ECDSA_VALIDATE_RET( ctx != NULL );
    ECDSA_VALIDATE_RET( key != NULL );

    if( ( ret = mbedtls_ecp_group_copy( &ctx->grp, &key->grp ) ) != 0 ||
   dbd5c:	4604      	mov	r4, r0
   dbd5e:	b938      	cbnz	r0, dbd70 <mbedtls_ecdsa_from_keypair+0x2e>
        ( ret = mbedtls_mpi_copy( &ctx->d, &key->d ) ) != 0 ||
        ( ret = mbedtls_ecp_copy( &ctx->Q, &key->Q ) ) != 0 )
   dbd60:	f106 0188 	add.w	r1, r6, #136	; 0x88
   dbd64:	f105 0088 	add.w	r0, r5, #136	; 0x88
   dbd68:	f7fd f8e9 	bl	d8f3e <mbedtls_ecp_copy>
    int ret;
    ECDSA_VALIDATE_RET( ctx != NULL );
    ECDSA_VALIDATE_RET( key != NULL );

    if( ( ret = mbedtls_ecp_group_copy( &ctx->grp, &key->grp ) ) != 0 ||
        ( ret = mbedtls_mpi_copy( &ctx->d, &key->d ) ) != 0 ||
   dbd6c:	4604      	mov	r4, r0
   dbd6e:	b110      	cbz	r0, dbd76 <mbedtls_ecdsa_from_keypair+0x34>
        ( ret = mbedtls_ecp_copy( &ctx->Q, &key->Q ) ) != 0 )
    {
        mbedtls_ecdsa_free( ctx );
   dbd70:	4628      	mov	r0, r5
   dbd72:	f7ff ffe2 	bl	dbd3a <mbedtls_ecdsa_free>
    }

    return( ret );
}
   dbd76:	4620      	mov	r0, r4
   dbd78:	bd70      	pop	{r4, r5, r6, pc}
	...

000dbd7c <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context>:
 *  }
 */
static int pk_get_rsapubkey( unsigned char **p,
                             const unsigned char *end,
                             mbedtls_rsa_context *rsa )
{
   dbd7c:	b570      	push	{r4, r5, r6, lr}
   dbd7e:	b08a      	sub	sp, #40	; 0x28
   dbd80:	4616      	mov	r6, r2
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   dbd82:	2330      	movs	r3, #48	; 0x30
   dbd84:	aa09      	add	r2, sp, #36	; 0x24
 *  }
 */
static int pk_get_rsapubkey( unsigned char **p,
                             const unsigned char *end,
                             mbedtls_rsa_context *rsa )
{
   dbd86:	4604      	mov	r4, r0
   dbd88:	460d      	mov	r5, r1
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   dbd8a:	f7fa fb5f 	bl	d644c <mbedtls_asn1_get_tag>
   dbd8e:	bb30      	cbnz	r0, dbdde <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0x62>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );

    if( *p + len != end )
   dbd90:	6822      	ldr	r2, [r4, #0]
   dbd92:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dbd94:	4413      	add	r3, r2
   dbd96:	429d      	cmp	r5, r3
   dbd98:	d001      	beq.n	dbd9e <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0x22>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   dbd9a:	4824      	ldr	r0, [pc, #144]	; (dbe2c <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0xb0>)
   dbd9c:	e043      	b.n	dbe26 <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0xaa>

    /* Import N */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
   dbd9e:	2302      	movs	r3, #2
   dbda0:	aa09      	add	r2, sp, #36	; 0x24
   dbda2:	4629      	mov	r1, r5
   dbda4:	4620      	mov	r0, r4
   dbda6:	f7fa fb51 	bl	d644c <mbedtls_asn1_get_tag>
   dbdaa:	b9c0      	cbnz	r0, dbdde <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0x62>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );

    if( ( ret = mbedtls_rsa_import_raw( rsa, *p, len, NULL, 0, NULL, 0,
   dbdac:	9006      	str	r0, [sp, #24]
   dbdae:	9005      	str	r0, [sp, #20]
   dbdb0:	9004      	str	r0, [sp, #16]
   dbdb2:	9003      	str	r0, [sp, #12]
   dbdb4:	9002      	str	r0, [sp, #8]
   dbdb6:	9001      	str	r0, [sp, #4]
   dbdb8:	9000      	str	r0, [sp, #0]
   dbdba:	4603      	mov	r3, r0
   dbdbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   dbdbe:	6821      	ldr	r1, [r4, #0]
   dbdc0:	4630      	mov	r0, r6
   dbdc2:	f7fb fa75 	bl	d72b0 <mbedtls_rsa_import_raw>
   dbdc6:	bb68      	cbnz	r0, dbe24 <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0xa8>
                                        NULL, 0, NULL, 0 ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );

    *p += len;
   dbdc8:	6822      	ldr	r2, [r4, #0]
   dbdca:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dbdcc:	4413      	add	r3, r2
   dbdce:	6023      	str	r3, [r4, #0]

    /* Import E */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
   dbdd0:	aa09      	add	r2, sp, #36	; 0x24
   dbdd2:	2302      	movs	r3, #2
   dbdd4:	4629      	mov	r1, r5
   dbdd6:	4620      	mov	r0, r4
   dbdd8:	f7fa fb38 	bl	d644c <mbedtls_asn1_get_tag>
   dbddc:	b110      	cbz	r0, dbde4 <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0x68>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
   dbdde:	f5a0 506c 	sub.w	r0, r0, #15104	; 0x3b00
   dbde2:	e020      	b.n	dbe26 <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0xaa>

    if( ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
   dbde4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dbde6:	9306      	str	r3, [sp, #24]
   dbde8:	6823      	ldr	r3, [r4, #0]
   dbdea:	9305      	str	r3, [sp, #20]
   dbdec:	9004      	str	r0, [sp, #16]
   dbdee:	9003      	str	r0, [sp, #12]
   dbdf0:	9002      	str	r0, [sp, #8]
   dbdf2:	9001      	str	r0, [sp, #4]
   dbdf4:	9000      	str	r0, [sp, #0]
   dbdf6:	4603      	mov	r3, r0
   dbdf8:	4602      	mov	r2, r0
   dbdfa:	4601      	mov	r1, r0
   dbdfc:	4630      	mov	r0, r6
   dbdfe:	f7fb fa57 	bl	d72b0 <mbedtls_rsa_import_raw>
   dbe02:	b978      	cbnz	r0, dbe24 <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0xa8>
                                        NULL, 0, *p, len ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );

    *p += len;
   dbe04:	6822      	ldr	r2, [r4, #0]
   dbe06:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dbe08:	4413      	add	r3, r2
   dbe0a:	6023      	str	r3, [r4, #0]

    if( mbedtls_rsa_complete( rsa ) != 0 ||
   dbe0c:	4630      	mov	r0, r6
   dbe0e:	f7fb fa8d 	bl	d732c <mbedtls_rsa_complete>
   dbe12:	b938      	cbnz	r0, dbe24 <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0xa8>
        mbedtls_rsa_check_pubkey( rsa ) != 0 )
   dbe14:	4630      	mov	r0, r6
   dbe16:	f7fb fb45 	bl	d74a4 <mbedtls_rsa_check_pubkey>
                                        NULL, 0, *p, len ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );

    *p += len;

    if( mbedtls_rsa_complete( rsa ) != 0 ||
   dbe1a:	b918      	cbnz	r0, dbe24 <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0xa8>
        mbedtls_rsa_check_pubkey( rsa ) != 0 )
    {
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );
    }

    if( *p != end )
   dbe1c:	6823      	ldr	r3, [r4, #0]
   dbe1e:	429d      	cmp	r5, r3
   dbe20:	d001      	beq.n	dbe26 <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0xaa>
   dbe22:	e7ba      	b.n	dbd9a <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0x1e>
    *p += len;

    if( mbedtls_rsa_complete( rsa ) != 0 ||
        mbedtls_rsa_check_pubkey( rsa ) != 0 )
    {
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );
   dbe24:	4802      	ldr	r0, [pc, #8]	; (dbe30 <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0xb4>)
    if( *p != end )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
   dbe26:	b00a      	add	sp, #40	; 0x28
   dbe28:	bd70      	pop	{r4, r5, r6, pc}
   dbe2a:	bf00      	nop
   dbe2c:	ffffc49a 	.word	0xffffc49a
   dbe30:	ffffc500 	.word	0xffffc500

000dbe34 <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group>:
 *   namedCurve         OBJECT IDENTIFIER
 *   specifiedCurve     SpecifiedECDomain -- = SEQUENCE { ... }
 *   -- implicitCurve   NULL
 */
static int pk_use_ecparams( const mbedtls_asn1_buf *params, mbedtls_ecp_group *grp )
{
   dbe34:	b513      	push	{r0, r1, r4, lr}
    int ret;
    mbedtls_ecp_group_id grp_id;

    if( params->tag == MBEDTLS_ASN1_OID )
   dbe36:	6803      	ldr	r3, [r0, #0]
   dbe38:	2b06      	cmp	r3, #6
 *   namedCurve         OBJECT IDENTIFIER
 *   specifiedCurve     SpecifiedECDomain -- = SEQUENCE { ... }
 *   -- implicitCurve   NULL
 */
static int pk_use_ecparams( const mbedtls_asn1_buf *params, mbedtls_ecp_group *grp )
{
   dbe3a:	460c      	mov	r4, r1
    int ret;
    mbedtls_ecp_group_id grp_id;

    if( params->tag == MBEDTLS_ASN1_OID )
   dbe3c:	d001      	beq.n	dbe42 <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group+0xe>
    {
#if defined(MBEDTLS_PK_PARSE_EC_EXTENDED)
        if( ( ret = pk_group_id_from_specified( params, &grp_id ) ) != 0 )
            return( ret );
#else
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
   dbe3e:	480a      	ldr	r0, [pc, #40]	; (dbe68 <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group+0x34>)
   dbe40:	e00f      	b.n	dbe62 <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group+0x2e>
    int ret;
    mbedtls_ecp_group_id grp_id;

    if( params->tag == MBEDTLS_ASN1_OID )
    {
        if( mbedtls_oid_get_ec_grp( params, &grp_id ) != 0 )
   dbe42:	f10d 0107 	add.w	r1, sp, #7
   dbe46:	f7fe f897 	bl	d9f78 <mbedtls_oid_get_ec_grp>
   dbe4a:	b948      	cbnz	r0, dbe60 <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group+0x2c>
    }

    /*
     * grp may already be initilialized; if so, make sure IDs match
     */
    if( grp->id != MBEDTLS_ECP_DP_NONE && grp->id != grp_id )
   dbe4c:	7823      	ldrb	r3, [r4, #0]
   dbe4e:	f89d 1007 	ldrb.w	r1, [sp, #7]
   dbe52:	b10b      	cbz	r3, dbe58 <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group+0x24>
   dbe54:	4299      	cmp	r1, r3
   dbe56:	d1f2      	bne.n	dbe3e <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group+0xa>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );

    if( ( ret = mbedtls_ecp_group_load( grp, grp_id ) ) != 0 )
   dbe58:	4620      	mov	r0, r4
   dbe5a:	f001 fc2d 	bl	dd6b8 <mbedtls_ecp_group_load>
   dbe5e:	e000      	b.n	dbe62 <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group+0x2e>
    mbedtls_ecp_group_id grp_id;

    if( params->tag == MBEDTLS_ASN1_OID )
    {
        if( mbedtls_oid_get_ec_grp( params, &grp_id ) != 0 )
            return( MBEDTLS_ERR_PK_UNKNOWN_NAMED_CURVE );
   dbe60:	4802      	ldr	r0, [pc, #8]	; (dbe6c <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group+0x38>)

    if( ( ret = mbedtls_ecp_group_load( grp, grp_id ) ) != 0 )
        return( ret );

    return( 0 );
}
   dbe62:	b002      	add	sp, #8
   dbe64:	bd10      	pop	{r4, pc}
   dbe66:	bf00      	nop
   dbe68:	ffffc300 	.word	0xffffc300
   dbe6c:	ffffc600 	.word	0xffffc600

000dbe70 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj>:
 * Parse a PKCS#1 encoded private RSA key
 */
static int pk_parse_key_pkcs1_der( mbedtls_rsa_context *rsa,
                                   const unsigned char *key,
                                   size_t keylen )
{
   dbe70:	b5f0      	push	{r4, r5, r6, r7, lr}
   dbe72:	b08f      	sub	sp, #60	; 0x3c
   dbe74:	460c      	mov	r4, r1
   dbe76:	4615      	mov	r5, r2
   dbe78:	4607      	mov	r7, r0
    int ret, version;
    size_t len;
    unsigned char *p, *end;

    mbedtls_mpi T;
    mbedtls_mpi_init( &T );
   dbe7a:	a80b      	add	r0, sp, #44	; 0x2c
   dbe7c:	f004 ff4f 	bl	e0d1e <mbedtls_mpi_init>
     *      exponent2         INTEGER,  -- d mod (q-1)
     *      coefficient       INTEGER,  -- (inverse of q) mod p
     *      otherPrimeInfos   OtherPrimeInfos OPTIONAL
     *  }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   dbe80:	2330      	movs	r3, #48	; 0x30
   dbe82:	aa09      	add	r2, sp, #36	; 0x24
   dbe84:	1961      	adds	r1, r4, r5
   dbe86:	a80a      	add	r0, sp, #40	; 0x28
    unsigned char *p, *end;

    mbedtls_mpi T;
    mbedtls_mpi_init( &T );

    p = (unsigned char *) key;
   dbe88:	940a      	str	r4, [sp, #40]	; 0x28
     *      exponent2         INTEGER,  -- d mod (q-1)
     *      coefficient       INTEGER,  -- (inverse of q) mod p
     *      otherPrimeInfos   OtherPrimeInfos OPTIONAL
     *  }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   dbe8a:	f7fa fadf 	bl	d644c <mbedtls_asn1_get_tag>
   dbe8e:	b940      	cbnz	r0, dbea2 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x32>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = p + len;
   dbe90:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dbe92:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   dbe94:	441e      	add	r6, r3

    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
   dbe96:	aa08      	add	r2, sp, #32
   dbe98:	4631      	mov	r1, r6
   dbe9a:	a80a      	add	r0, sp, #40	; 0x28
   dbe9c:	f7fa fb03 	bl	d64a6 <mbedtls_asn1_get_int>
   dbea0:	b110      	cbz	r0, dbea8 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x38>
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
   dbea2:	f5a0 5574 	sub.w	r5, r0, #15616	; 0x3d00
   dbea6:	e0d4      	b.n	dc052 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1e2>
    }

    if( version != 0 )
   dbea8:	9d08      	ldr	r5, [sp, #32]
   dbeaa:	b9dd      	cbnz	r5, dbee4 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x74>
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION );
    }

    /* Import N */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   dbeac:	2302      	movs	r3, #2
   dbeae:	aa09      	add	r2, sp, #36	; 0x24
   dbeb0:	4631      	mov	r1, r6
   dbeb2:	a80a      	add	r0, sp, #40	; 0x28
   dbeb4:	f7fa faca 	bl	d644c <mbedtls_asn1_get_tag>
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
   dbeb8:	4604      	mov	r4, r0
   dbeba:	2800      	cmp	r0, #0
   dbebc:	f040 80c5 	bne.w	dc04a <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, p, len, NULL, 0, NULL, 0,
   dbec0:	9006      	str	r0, [sp, #24]
   dbec2:	9005      	str	r0, [sp, #20]
   dbec4:	9004      	str	r0, [sp, #16]
   dbec6:	9003      	str	r0, [sp, #12]
   dbec8:	9002      	str	r0, [sp, #8]
   dbeca:	9001      	str	r0, [sp, #4]
   dbecc:	9000      	str	r0, [sp, #0]
   dbece:	4603      	mov	r3, r0
   dbed0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   dbed2:	990a      	ldr	r1, [sp, #40]	; 0x28
   dbed4:	4638      	mov	r0, r7
   dbed6:	f7fb f9eb 	bl	d72b0 <mbedtls_rsa_import_raw>
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION );
    }

    /* Import N */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
   dbeda:	4604      	mov	r4, r0
   dbedc:	2800      	cmp	r0, #0
   dbede:	f040 80b4 	bne.w	dc04a <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
   dbee2:	e001      	b.n	dbee8 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x78>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    if( version != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION );
   dbee4:	4d5c      	ldr	r5, [pc, #368]	; (dc058 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1e8>)
   dbee6:	e0b4      	b.n	dc052 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1e2>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
        ( ret = mbedtls_rsa_import_raw( rsa, p, len, NULL, 0, NULL, 0,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
   dbee8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   dbeea:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dbeec:	4413      	add	r3, r2
   dbeee:	930a      	str	r3, [sp, #40]	; 0x28

    /* Import E */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   dbef0:	aa09      	add	r2, sp, #36	; 0x24
   dbef2:	2302      	movs	r3, #2
   dbef4:	4631      	mov	r1, r6
   dbef6:	a80a      	add	r0, sp, #40	; 0x28
   dbef8:	f7fa faa8 	bl	d644c <mbedtls_asn1_get_tag>
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
   dbefc:	4604      	mov	r4, r0
   dbefe:	2800      	cmp	r0, #0
   dbf00:	f040 80a3 	bne.w	dc04a <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
   dbf04:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dbf06:	9306      	str	r3, [sp, #24]
   dbf08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dbf0a:	9305      	str	r3, [sp, #20]
   dbf0c:	9404      	str	r4, [sp, #16]
   dbf0e:	9403      	str	r4, [sp, #12]
   dbf10:	9402      	str	r4, [sp, #8]
   dbf12:	9401      	str	r4, [sp, #4]
   dbf14:	9400      	str	r4, [sp, #0]
   dbf16:	4623      	mov	r3, r4
   dbf18:	4622      	mov	r2, r4
   dbf1a:	4621      	mov	r1, r4
   dbf1c:	4638      	mov	r0, r7
   dbf1e:	f7fb f9c7 	bl	d72b0 <mbedtls_rsa_import_raw>
        goto cleanup;
    p += len;

    /* Import E */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
   dbf22:	4604      	mov	r4, r0
   dbf24:	2800      	cmp	r0, #0
   dbf26:	f040 8090 	bne.w	dc04a <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
                                        NULL, 0, p, len ) ) != 0 )
        goto cleanup;
    p += len;
   dbf2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   dbf2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dbf2e:	4413      	add	r3, r2
   dbf30:	930a      	str	r3, [sp, #40]	; 0x28

    /* Import D */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   dbf32:	aa09      	add	r2, sp, #36	; 0x24
   dbf34:	2302      	movs	r3, #2
   dbf36:	4631      	mov	r1, r6
   dbf38:	a80a      	add	r0, sp, #40	; 0x28
   dbf3a:	f7fa fa87 	bl	d644c <mbedtls_asn1_get_tag>
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
   dbf3e:	4604      	mov	r4, r0
   dbf40:	2800      	cmp	r0, #0
   dbf42:	f040 8082 	bne.w	dc04a <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
   dbf46:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dbf48:	9304      	str	r3, [sp, #16]
   dbf4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dbf4c:	9406      	str	r4, [sp, #24]
   dbf4e:	9405      	str	r4, [sp, #20]
   dbf50:	9303      	str	r3, [sp, #12]
   dbf52:	9402      	str	r4, [sp, #8]
   dbf54:	9401      	str	r4, [sp, #4]
   dbf56:	9400      	str	r4, [sp, #0]
   dbf58:	4623      	mov	r3, r4
   dbf5a:	4622      	mov	r2, r4
   dbf5c:	4621      	mov	r1, r4
   dbf5e:	4638      	mov	r0, r7
   dbf60:	f7fb f9a6 	bl	d72b0 <mbedtls_rsa_import_raw>
        goto cleanup;
    p += len;

    /* Import D */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
   dbf64:	4604      	mov	r4, r0
   dbf66:	2800      	cmp	r0, #0
   dbf68:	d16f      	bne.n	dc04a <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
                                        p, len, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
   dbf6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   dbf6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dbf6e:	4413      	add	r3, r2
   dbf70:	930a      	str	r3, [sp, #40]	; 0x28

    /* Import P */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   dbf72:	aa09      	add	r2, sp, #36	; 0x24
   dbf74:	2302      	movs	r3, #2
   dbf76:	4631      	mov	r1, r6
   dbf78:	a80a      	add	r0, sp, #40	; 0x28
   dbf7a:	f7fa fa67 	bl	d644c <mbedtls_asn1_get_tag>
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
   dbf7e:	4604      	mov	r4, r0
   dbf80:	2800      	cmp	r0, #0
   dbf82:	d162      	bne.n	dc04a <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, p, len, NULL, 0,
   dbf84:	2200      	movs	r2, #0
   dbf86:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dbf88:	9300      	str	r3, [sp, #0]
   dbf8a:	9206      	str	r2, [sp, #24]
   dbf8c:	9205      	str	r2, [sp, #20]
   dbf8e:	9204      	str	r2, [sp, #16]
   dbf90:	9203      	str	r2, [sp, #12]
   dbf92:	9202      	str	r2, [sp, #8]
   dbf94:	9201      	str	r2, [sp, #4]
   dbf96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dbf98:	4611      	mov	r1, r2
   dbf9a:	4638      	mov	r0, r7
   dbf9c:	f7fb f988 	bl	d72b0 <mbedtls_rsa_import_raw>
        goto cleanup;
    p += len;

    /* Import P */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
   dbfa0:	4604      	mov	r4, r0
   dbfa2:	2800      	cmp	r0, #0
   dbfa4:	d151      	bne.n	dc04a <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, p, len, NULL, 0,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
   dbfa6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   dbfa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dbfaa:	4413      	add	r3, r2
   dbfac:	930a      	str	r3, [sp, #40]	; 0x28

    /* Import Q */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   dbfae:	aa09      	add	r2, sp, #36	; 0x24
   dbfb0:	2302      	movs	r3, #2
   dbfb2:	4631      	mov	r1, r6
   dbfb4:	a80a      	add	r0, sp, #40	; 0x28
   dbfb6:	f7fa fa49 	bl	d644c <mbedtls_asn1_get_tag>
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
   dbfba:	4604      	mov	r4, r0
   dbfbc:	2800      	cmp	r0, #0
   dbfbe:	d144      	bne.n	dc04a <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, p, len,
   dbfc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dbfc2:	9302      	str	r3, [sp, #8]
   dbfc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dbfc6:	9406      	str	r4, [sp, #24]
   dbfc8:	9405      	str	r4, [sp, #20]
   dbfca:	9404      	str	r4, [sp, #16]
   dbfcc:	9403      	str	r4, [sp, #12]
   dbfce:	9301      	str	r3, [sp, #4]
   dbfd0:	9400      	str	r4, [sp, #0]
   dbfd2:	4623      	mov	r3, r4
   dbfd4:	4622      	mov	r2, r4
   dbfd6:	4621      	mov	r1, r4
   dbfd8:	4638      	mov	r0, r7
   dbfda:	f7fb f969 	bl	d72b0 <mbedtls_rsa_import_raw>
        goto cleanup;
    p += len;

    /* Import Q */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
   dbfde:	4604      	mov	r4, r0
   dbfe0:	2800      	cmp	r0, #0
   dbfe2:	d132      	bne.n	dc04a <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, p, len,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
   dbfe4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   dbfe6:	9b09      	ldr	r3, [sp, #36]	; 0x24

    /* Complete the RSA private key */
    if( ( ret = mbedtls_rsa_complete( rsa ) ) != 0 )
   dbfe8:	4638      	mov	r0, r7
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, p, len,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
   dbfea:	4413      	add	r3, r2
   dbfec:	930a      	str	r3, [sp, #40]	; 0x28

    /* Complete the RSA private key */
    if( ( ret = mbedtls_rsa_complete( rsa ) ) != 0 )
   dbfee:	f7fb f99d 	bl	d732c <mbedtls_rsa_complete>
   dbff2:	4604      	mov	r4, r0
   dbff4:	b9c8      	cbnz	r0, dc02a <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1ba>
        goto cleanup;

    /* Check optional parameters */
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
   dbff6:	aa0b      	add	r2, sp, #44	; 0x2c
   dbff8:	4631      	mov	r1, r6
   dbffa:	a80a      	add	r0, sp, #40	; 0x28
   dbffc:	f7fa fa77 	bl	d64ee <mbedtls_asn1_get_mpi>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
   dc000:	4604      	mov	r4, r0
   dc002:	bb10      	cbnz	r0, dc04a <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
   dc004:	aa0b      	add	r2, sp, #44	; 0x2c
   dc006:	4631      	mov	r1, r6
   dc008:	a80a      	add	r0, sp, #40	; 0x28
   dc00a:	f7fa fa70 	bl	d64ee <mbedtls_asn1_get_mpi>
    /* Complete the RSA private key */
    if( ( ret = mbedtls_rsa_complete( rsa ) ) != 0 )
        goto cleanup;

    /* Check optional parameters */
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
   dc00e:	4604      	mov	r4, r0
   dc010:	b9d8      	cbnz	r0, dc04a <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
        ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 )
   dc012:	aa0b      	add	r2, sp, #44	; 0x2c
   dc014:	4631      	mov	r1, r6
   dc016:	a80a      	add	r0, sp, #40	; 0x28
   dc018:	f7fa fa69 	bl	d64ee <mbedtls_asn1_get_mpi>
    if( ( ret = mbedtls_rsa_complete( rsa ) ) != 0 )
        goto cleanup;

    /* Check optional parameters */
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
        ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
   dc01c:	4604      	mov	r4, r0
   dc01e:	b9a0      	cbnz	r0, dc04a <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        goto cleanup;

    if( p != end )
    {
        ret = MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH ;
   dc020:	4b0e      	ldr	r3, [pc, #56]	; (dc05c <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1ec>)
   dc022:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   dc024:	4296      	cmp	r6, r2
   dc026:	bf18      	it	ne
   dc028:	461c      	movne	r4, r3
    }

cleanup:

    mbedtls_mpi_free( &T );
   dc02a:	a80b      	add	r0, sp, #44	; 0x2c
   dc02c:	f004 fe7d 	bl	e0d2a <mbedtls_mpi_free>

    if( ret != 0 )
   dc030:	b17c      	cbz	r4, dc052 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1e2>
    {
        /* Wrap error code if it's coming from a lower level */
        if( ( ret & 0xff80 ) == 0 )
   dc032:	f64f 7380 	movw	r3, #65408	; 0xff80
   dc036:	4023      	ands	r3, r4
   dc038:	b913      	cbnz	r3, dc040 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1d0>
            ret = MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret;
   dc03a:	f5a4 5574 	sub.w	r5, r4, #15616	; 0x3d00
   dc03e:	e000      	b.n	dc042 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1d2>
        else
            ret = MBEDTLS_ERR_PK_KEY_INVALID_FORMAT;
   dc040:	4d07      	ldr	r5, [pc, #28]	; (dc060 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1f0>)

        mbedtls_rsa_free( rsa );
   dc042:	4638      	mov	r0, r7
   dc044:	f7fc fa4e 	bl	d84e4 <mbedtls_rsa_free>
   dc048:	e003      	b.n	dc052 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1e2>
              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH ;
    }

cleanup:

    mbedtls_mpi_free( &T );
   dc04a:	a80b      	add	r0, sp, #44	; 0x2c
   dc04c:	f004 fe6d 	bl	e0d2a <mbedtls_mpi_free>
   dc050:	e7ef      	b.n	dc032 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1c2>

        mbedtls_rsa_free( rsa );
    }

    return( ret );
}
   dc052:	4628      	mov	r0, r5
   dc054:	b00f      	add	sp, #60	; 0x3c
   dc056:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dc058:	ffffc280 	.word	0xffffc280
   dc05c:	ffffc29a 	.word	0xffffc29a
   dc060:	ffffc300 	.word	0xffffc300

000dc064 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf>:
 *       parameters              ANY DEFINED BY algorithm OPTIONAL  }
 */
static int pk_get_pk_alg( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_pk_type_t *pk_alg, mbedtls_asn1_buf *params )
{
   dc064:	b530      	push	{r4, r5, lr}
   dc066:	4615      	mov	r5, r2
   dc068:	b085      	sub	sp, #20
    int ret;
    mbedtls_asn1_buf alg_oid;

    memset( params, 0, sizeof(mbedtls_asn1_buf) );
   dc06a:	2200      	movs	r2, #0
   dc06c:	601a      	str	r2, [r3, #0]
   dc06e:	605a      	str	r2, [r3, #4]
   dc070:	609a      	str	r2, [r3, #8]

    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
   dc072:	aa01      	add	r2, sp, #4
 *       parameters              ANY DEFINED BY algorithm OPTIONAL  }
 */
static int pk_get_pk_alg( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_pk_type_t *pk_alg, mbedtls_asn1_buf *params )
{
   dc074:	461c      	mov	r4, r3
    int ret;
    mbedtls_asn1_buf alg_oid;

    memset( params, 0, sizeof(mbedtls_asn1_buf) );

    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
   dc076:	f7fa fac6 	bl	d6606 <mbedtls_asn1_get_alg>
   dc07a:	b110      	cbz	r0, dc082 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x1e>
        return( MBEDTLS_ERR_PK_INVALID_ALG + ret );
   dc07c:	f5a0 506a 	sub.w	r0, r0, #14976	; 0x3a80
   dc080:	e014      	b.n	dc0ac <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x48>

    if( mbedtls_oid_get_pk_alg( &alg_oid, pk_alg ) != 0 )
   dc082:	4629      	mov	r1, r5
   dc084:	a801      	add	r0, sp, #4
   dc086:	f7fd ff5d 	bl	d9f44 <mbedtls_oid_get_pk_alg>
   dc08a:	b960      	cbnz	r0, dc0a6 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x42>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    /*
     * No parameters with RSA (only for EC)
     */
    if( *pk_alg == MBEDTLS_PK_RSA &&
   dc08c:	782b      	ldrb	r3, [r5, #0]
   dc08e:	2b01      	cmp	r3, #1
   dc090:	d10c      	bne.n	dc0ac <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x48>
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
   dc092:	6823      	ldr	r3, [r4, #0]
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    /*
     * No parameters with RSA (only for EC)
     */
    if( *pk_alg == MBEDTLS_PK_RSA &&
   dc094:	2b05      	cmp	r3, #5
   dc096:	d000      	beq.n	dc09a <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x36>
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
   dc098:	b93b      	cbnz	r3, dc0aa <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x46>
   dc09a:	6863      	ldr	r3, [r4, #4]
                params->len != 0 ) )
    {
        return( MBEDTLS_ERR_PK_INVALID_ALG );
   dc09c:	4804      	ldr	r0, [pc, #16]	; (dc0b0 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x4c>)
   dc09e:	2b00      	cmp	r3, #0
   dc0a0:	bf08      	it	eq
   dc0a2:	2000      	moveq	r0, #0
   dc0a4:	e002      	b.n	dc0ac <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x48>

    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_ALG + ret );

    if( mbedtls_oid_get_pk_alg( &alg_oid, pk_alg ) != 0 )
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
   dc0a6:	4803      	ldr	r0, [pc, #12]	; (dc0b4 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x50>)
   dc0a8:	e000      	b.n	dc0ac <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x48>
     */
    if( *pk_alg == MBEDTLS_PK_RSA &&
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
                params->len != 0 ) )
    {
        return( MBEDTLS_ERR_PK_INVALID_ALG );
   dc0aa:	4801      	ldr	r0, [pc, #4]	; (dc0b0 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x4c>)
    }

    return( 0 );
}
   dc0ac:	b005      	add	sp, #20
   dc0ae:	bd30      	pop	{r4, r5, pc}
   dc0b0:	ffffc580 	.word	0xffffc580
   dc0b4:	ffffc380 	.word	0xffffc380

000dc0b8 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj>:
 * Parse a SEC1 encoded private EC key
 */
static int pk_parse_key_sec1_der( mbedtls_ecp_keypair *eck,
                                  const unsigned char *key,
                                  size_t keylen )
{
   dc0b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   dc0ba:	b089      	sub	sp, #36	; 0x24
   dc0bc:	4605      	mov	r5, r0
    int ret;
    int version, pubkey_done;
    size_t len;
    mbedtls_asn1_buf params;
    unsigned char *p = (unsigned char *) key;
   dc0be:	9104      	str	r1, [sp, #16]
     *      privateKey     OCTET STRING,
     *      parameters [0] ECParameters {{ NamedCurve }} OPTIONAL,
     *      publicKey  [1] BIT STRING OPTIONAL
     *    }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   dc0c0:	2330      	movs	r3, #48	; 0x30
   dc0c2:	4411      	add	r1, r2
   dc0c4:	a804      	add	r0, sp, #16
   dc0c6:	aa03      	add	r2, sp, #12
   dc0c8:	f7fa f9c0 	bl	d644c <mbedtls_asn1_get_tag>
   dc0cc:	2800      	cmp	r0, #0
   dc0ce:	d168      	bne.n	dc1a2 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0xea>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = p + len;
   dc0d0:	9b03      	ldr	r3, [sp, #12]
   dc0d2:	9f04      	ldr	r7, [sp, #16]
   dc0d4:	441f      	add	r7, r3

    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
   dc0d6:	aa02      	add	r2, sp, #8
   dc0d8:	4639      	mov	r1, r7
   dc0da:	a804      	add	r0, sp, #16
   dc0dc:	f7fa f9e3 	bl	d64a6 <mbedtls_asn1_get_int>
   dc0e0:	2800      	cmp	r0, #0
   dc0e2:	d15e      	bne.n	dc1a2 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0xea>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( version != 1 )
   dc0e4:	9b02      	ldr	r3, [sp, #8]
   dc0e6:	2b01      	cmp	r3, #1
   dc0e8:	f040 8094 	bne.w	dc214 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x15c>
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION );

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
   dc0ec:	2304      	movs	r3, #4
   dc0ee:	aa03      	add	r2, sp, #12
   dc0f0:	4639      	mov	r1, r7
   dc0f2:	a804      	add	r0, sp, #16
   dc0f4:	f7fa f9aa 	bl	d644c <mbedtls_asn1_get_tag>
   dc0f8:	2800      	cmp	r0, #0
   dc0fa:	d152      	bne.n	dc1a2 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0xea>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( ( ret = mbedtls_mpi_read_binary( &eck->d, p, len ) ) != 0 )
   dc0fc:	f105 067c 	add.w	r6, r5, #124	; 0x7c
   dc100:	9a03      	ldr	r2, [sp, #12]
   dc102:	9904      	ldr	r1, [sp, #16]
   dc104:	4630      	mov	r0, r6
   dc106:	f004 ff57 	bl	e0fb8 <mbedtls_mpi_read_binary>
   dc10a:	4604      	mov	r4, r0
   dc10c:	2800      	cmp	r0, #0
   dc10e:	d166      	bne.n	dc1de <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x126>
    {
        mbedtls_ecp_keypair_free( eck );
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    p += len;
   dc110:	9a04      	ldr	r2, [sp, #16]
   dc112:	9b03      	ldr	r3, [sp, #12]
   dc114:	4413      	add	r3, r2

    pubkey_done = 0;
    if( p != end )
   dc116:	429f      	cmp	r7, r3
    {
        mbedtls_ecp_keypair_free( eck );
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    p += len;
   dc118:	9304      	str	r3, [sp, #16]

    pubkey_done = 0;
    if( p != end )
   dc11a:	d02e      	beq.n	dc17a <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0xc2>
    {
        /*
         * Is 'parameters' present?
         */
        if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   dc11c:	23a0      	movs	r3, #160	; 0xa0
   dc11e:	aa03      	add	r2, sp, #12
   dc120:	4639      	mov	r1, r7
   dc122:	a804      	add	r0, sp, #16
   dc124:	f7fa f992 	bl	d644c <mbedtls_asn1_get_tag>
   dc128:	4604      	mov	r4, r0
   dc12a:	bb18      	cbnz	r0, dc174 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0xbc>
                        MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 0 ) ) == 0 )
        {
            if( ( ret = pk_get_ecparams( &p, p + len, &params) ) != 0 ||
   dc12c:	9a03      	ldr	r2, [sp, #12]
   dc12e:	9b04      	ldr	r3, [sp, #16]
static int pk_get_ecparams( unsigned char **p, const unsigned char *end,
                            mbedtls_asn1_buf *params )
{
    int ret;

    if ( end - *p < 1 )
   dc130:	2a00      	cmp	r2, #0
         * Is 'parameters' present?
         */
        if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                        MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 0 ) ) == 0 )
        {
            if( ( ret = pk_get_ecparams( &p, p + len, &params) ) != 0 ||
   dc132:	eb03 0402 	add.w	r4, r3, r2
static int pk_get_ecparams( unsigned char **p, const unsigned char *end,
                            mbedtls_asn1_buf *params )
{
    int ret;

    if ( end - *p < 1 )
   dc136:	dd71      	ble.n	dc21c <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x164>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    /* Tag may be either OID or SEQUENCE */
    params->tag = **p;
   dc138:	781b      	ldrb	r3, [r3, #0]
   dc13a:	9305      	str	r3, [sp, #20]
    if( params->tag != MBEDTLS_ASN1_OID
   dc13c:	2b06      	cmp	r3, #6
   dc13e:	d16f      	bne.n	dc220 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x168>
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
    }

    if( ( ret = mbedtls_asn1_get_tag( p, end, &params->len, params->tag ) ) != 0 )
   dc140:	aa06      	add	r2, sp, #24
   dc142:	4621      	mov	r1, r4
   dc144:	a804      	add	r0, sp, #16
   dc146:	f7fa f981 	bl	d644c <mbedtls_asn1_get_tag>
   dc14a:	b150      	cbz	r0, dc162 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0xaa>
         * Is 'parameters' present?
         */
        if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                        MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 0 ) ) == 0 )
        {
            if( ( ret = pk_get_ecparams( &p, p + len, &params) ) != 0 ||
   dc14c:	f5b0 5474 	subs.w	r4, r0, #15616	; 0x3d00
   dc150:	d167      	bne.n	dc222 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x16a>
                ( ret = pk_use_ecparams( &params, &eck->grp )  ) != 0 )
   dc152:	4629      	mov	r1, r5
   dc154:	a805      	add	r0, sp, #20
   dc156:	f7ff fe6d 	bl	dbe34 <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group>
         * Is 'parameters' present?
         */
        if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                        MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 0 ) ) == 0 )
        {
            if( ( ret = pk_get_ecparams( &p, p + len, &params) ) != 0 ||
   dc15a:	4604      	mov	r4, r0
   dc15c:	2800      	cmp	r0, #0
   dc15e:	d160      	bne.n	dc222 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x16a>
   dc160:	e00b      	b.n	dc17a <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0xc2>
    if( ( ret = mbedtls_asn1_get_tag( p, end, &params->len, params->tag ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    params->p = *p;
   dc162:	9a04      	ldr	r2, [sp, #16]
    *p += params->len;
   dc164:	9b06      	ldr	r3, [sp, #24]
    if( ( ret = mbedtls_asn1_get_tag( p, end, &params->len, params->tag ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    params->p = *p;
   dc166:	9207      	str	r2, [sp, #28]
    *p += params->len;
   dc168:	4413      	add	r3, r2

    if( *p != end )
   dc16a:	429c      	cmp	r4, r3
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    params->p = *p;
    *p += params->len;
   dc16c:	9304      	str	r3, [sp, #16]

    if( *p != end )
   dc16e:	d0f0      	beq.n	dc152 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x9a>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   dc170:	4c2f      	ldr	r4, [pc, #188]	; (dc230 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x178>)
   dc172:	e056      	b.n	dc222 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x16a>
            {
                mbedtls_ecp_keypair_free( eck );
                return( ret );
            }
        }
        else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   dc174:	f110 0f62 	cmn.w	r0, #98	; 0x62
   dc178:	d131      	bne.n	dc1de <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x126>
            mbedtls_ecp_keypair_free( eck );
            return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
        }
    }

    if( p != end )
   dc17a:	9b04      	ldr	r3, [sp, #16]
   dc17c:	429f      	cmp	r7, r3
   dc17e:	d034      	beq.n	dc1ea <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x132>
    {
        /*
         * Is 'publickey' present? If not, or if we can't read it (eg because it
         * is compressed), create it from the private key.
         */
        if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   dc180:	23a1      	movs	r3, #161	; 0xa1
   dc182:	aa03      	add	r2, sp, #12
   dc184:	4639      	mov	r1, r7
   dc186:	a804      	add	r0, sp, #16
   dc188:	f7fa f960 	bl	d644c <mbedtls_asn1_get_tag>
   dc18c:	4604      	mov	r4, r0
   dc18e:	bb18      	cbnz	r0, dc1d8 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x120>
                        MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 1 ) ) == 0 )
        {
            end2 = p + len;
   dc190:	9b03      	ldr	r3, [sp, #12]
   dc192:	9c04      	ldr	r4, [sp, #16]
   dc194:	441c      	add	r4, r3

            if( ( ret = mbedtls_asn1_get_bitstring_null( &p, end2, &len ) ) != 0 )
   dc196:	aa03      	add	r2, sp, #12
   dc198:	4621      	mov	r1, r4
   dc19a:	a804      	add	r0, sp, #16
   dc19c:	f7fa f9df 	bl	d655e <mbedtls_asn1_get_bitstring_null>
   dc1a0:	b110      	cbz	r0, dc1a8 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0xf0>
                return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
   dc1a2:	f5a0 5474 	sub.w	r4, r0, #15616	; 0x3d00
   dc1a6:	e03f      	b.n	dc228 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x170>

            if( p + len != end2 )
   dc1a8:	9a04      	ldr	r2, [sp, #16]
   dc1aa:	9b03      	ldr	r3, [sp, #12]
   dc1ac:	4413      	add	r3, r2
   dc1ae:	429c      	cmp	r4, r3
   dc1b0:	d132      	bne.n	dc218 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x160>
static int pk_get_ecpubkey( unsigned char **p, const unsigned char *end,
                            mbedtls_ecp_keypair *key )
{
    int ret;

    if( ( ret = mbedtls_ecp_point_read_binary( &key->grp, &key->Q,
   dc1b2:	f105 0788 	add.w	r7, r5, #136	; 0x88
   dc1b6:	1aa3      	subs	r3, r4, r2
   dc1b8:	4639      	mov	r1, r7
   dc1ba:	4628      	mov	r0, r5
   dc1bc:	f7fd fa96 	bl	d96ec <mbedtls_ecp_point_read_binary>
   dc1c0:	b918      	cbnz	r0, dc1ca <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x112>
                    (const unsigned char *) *p, end - *p ) ) == 0 )
    {
        ret = mbedtls_ecp_check_pubkey( &key->grp, &key->Q );
   dc1c2:	4639      	mov	r1, r7
   dc1c4:	4628      	mov	r0, r5
   dc1c6:	f7fd fb19 	bl	d97fc <mbedtls_ecp_check_pubkey>
    }

    /*
     * We know mbedtls_ecp_point_read_binary consumed all bytes or failed
     */
    *p = (unsigned char *) end;
   dc1ca:	9404      	str	r4, [sp, #16]

            if( p + len != end2 )
                return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
                        MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

            if( ( ret = pk_get_ecpubkey( &p, end2, eck ) ) == 0 )
   dc1cc:	b1d8      	cbz	r0, dc206 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x14e>
            {
                /*
                 * The only acceptable failure mode of pk_get_ecpubkey() above
                 * is if the point format is not recognized.
                 */
                if( ret != MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE )
   dc1ce:	f510 4f9d 	cmn.w	r0, #20096	; 0x4e80
   dc1d2:	d00a      	beq.n	dc1ea <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x132>
                    return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
   dc1d4:	4c17      	ldr	r4, [pc, #92]	; (dc234 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x17c>)
   dc1d6:	e027      	b.n	dc228 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x170>
            }
        }
        else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   dc1d8:	f110 0f62 	cmn.w	r0, #98	; 0x62
   dc1dc:	d005      	beq.n	dc1ea <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x132>

    if( ! pubkey_done &&
        ( ret = mbedtls_ecp_mul( &eck->grp, &eck->Q, &eck->d, &eck->grp.G,
                                                      NULL, NULL ) ) != 0 )
    {
        mbedtls_ecp_keypair_free( eck );
   dc1de:	4628      	mov	r0, r5
   dc1e0:	f7fc fe9d 	bl	d8f1e <mbedtls_ecp_keypair_free>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
   dc1e4:	f5a4 5474 	sub.w	r4, r4, #15616	; 0x3d00
   dc1e8:	e01e      	b.n	dc228 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x170>
            return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
        }
    }

    if( ! pubkey_done &&
        ( ret = mbedtls_ecp_mul( &eck->grp, &eck->Q, &eck->d, &eck->grp.G,
   dc1ea:	2300      	movs	r3, #0
   dc1ec:	9301      	str	r3, [sp, #4]
   dc1ee:	9300      	str	r3, [sp, #0]
   dc1f0:	4632      	mov	r2, r6
   dc1f2:	f105 0328 	add.w	r3, r5, #40	; 0x28
   dc1f6:	f105 0188 	add.w	r1, r5, #136	; 0x88
   dc1fa:	4628      	mov	r0, r5
   dc1fc:	f7fd fd02 	bl	d9c04 <mbedtls_ecp_mul>
            mbedtls_ecp_keypair_free( eck );
            return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
        }
    }

    if( ! pubkey_done &&
   dc200:	4604      	mov	r4, r0
   dc202:	2800      	cmp	r0, #0
   dc204:	d1eb      	bne.n	dc1de <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x126>
    {
        mbedtls_ecp_keypair_free( eck );
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    if( ( ret = mbedtls_ecp_check_privkey( &eck->grp, &eck->d ) ) != 0 )
   dc206:	4631      	mov	r1, r6
   dc208:	4628      	mov	r0, r5
   dc20a:	f7fd fbb3 	bl	d9974 <mbedtls_ecp_check_privkey>
   dc20e:	4604      	mov	r4, r0
   dc210:	b150      	cbz	r0, dc228 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x170>
   dc212:	e006      	b.n	dc222 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x16a>

    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( version != 1 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION );
   dc214:	4c08      	ldr	r4, [pc, #32]	; (dc238 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x180>)
   dc216:	e007      	b.n	dc228 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x170>
            if( ( ret = mbedtls_asn1_get_bitstring_null( &p, end2, &len ) ) != 0 )
                return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

            if( p + len != end2 )
                return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
                        MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   dc218:	4c05      	ldr	r4, [pc, #20]	; (dc230 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x178>)
   dc21a:	e005      	b.n	dc228 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x170>
{
    int ret;

    if ( end - *p < 1 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   dc21c:	4c07      	ldr	r4, [pc, #28]	; (dc23c <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x184>)
   dc21e:	e000      	b.n	dc222 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x16a>
            && params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE )
#endif
            )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
   dc220:	4c07      	ldr	r4, [pc, #28]	; (dc240 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x188>)
                        MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 0 ) ) == 0 )
        {
            if( ( ret = pk_get_ecparams( &p, p + len, &params) ) != 0 ||
                ( ret = pk_use_ecparams( &params, &eck->grp )  ) != 0 )
            {
                mbedtls_ecp_keypair_free( eck );
   dc222:	4628      	mov	r0, r5
   dc224:	f7fc fe7b 	bl	d8f1e <mbedtls_ecp_keypair_free>
        mbedtls_ecp_keypair_free( eck );
        return( ret );
    }

    return( 0 );
}
   dc228:	4620      	mov	r0, r4
   dc22a:	b009      	add	sp, #36	; 0x24
   dc22c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dc22e:	bf00      	nop
   dc230:	ffffc29a 	.word	0xffffc29a
   dc234:	ffffc300 	.word	0xffffc300
   dc238:	ffffc280 	.word	0xffffc280
   dc23c:	ffffc2a0 	.word	0xffffc2a0
   dc240:	ffffc29e 	.word	0xffffc29e

000dc244 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj>:
 */
static int pk_parse_key_pkcs8_unencrypted_der(
                                    mbedtls_pk_context *pk,
                                    const unsigned char* key,
                                    size_t keylen )
{
   dc244:	b570      	push	{r4, r5, r6, lr}
   dc246:	b088      	sub	sp, #32
    int ret, version;
    size_t len;
    mbedtls_asn1_buf params;
    unsigned char *p = (unsigned char *) key;
    unsigned char *end = p + keylen;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
   dc248:	2300      	movs	r3, #0
 */
static int pk_parse_key_pkcs8_unencrypted_der(
                                    mbedtls_pk_context *pk,
                                    const unsigned char* key,
                                    size_t keylen )
{
   dc24a:	4605      	mov	r5, r0
    int ret, version;
    size_t len;
    mbedtls_asn1_buf params;
    unsigned char *p = (unsigned char *) key;
   dc24c:	9104      	str	r1, [sp, #16]
    unsigned char *end = p + keylen;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
   dc24e:	f88d 3007 	strb.w	r3, [sp, #7]
     *    PrivateKey ::= OCTET STRING
     *
     *  The PrivateKey OCTET STRING is a SEC1 ECPrivateKey
     */

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   dc252:	4411      	add	r1, r2
   dc254:	2330      	movs	r3, #48	; 0x30
   dc256:	aa03      	add	r2, sp, #12
   dc258:	a804      	add	r0, sp, #16
   dc25a:	f7fa f8f7 	bl	d644c <mbedtls_asn1_get_tag>
   dc25e:	b9d0      	cbnz	r0, dc296 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x52>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = p + len;
   dc260:	9b03      	ldr	r3, [sp, #12]
   dc262:	9e04      	ldr	r6, [sp, #16]
   dc264:	441e      	add	r6, r3

    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
   dc266:	aa02      	add	r2, sp, #8
   dc268:	4631      	mov	r1, r6
   dc26a:	a804      	add	r0, sp, #16
   dc26c:	f7fa f91b 	bl	d64a6 <mbedtls_asn1_get_int>
   dc270:	b988      	cbnz	r0, dc296 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x52>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( version != 0 )
   dc272:	9c02      	ldr	r4, [sp, #8]
   dc274:	2c00      	cmp	r4, #0
   dc276:	d13f      	bne.n	dc2f8 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xb4>
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION + ret );

    if( ( ret = pk_get_pk_alg( &p, end, &pk_alg, &params ) ) != 0 )
   dc278:	ab05      	add	r3, sp, #20
   dc27a:	f10d 0207 	add.w	r2, sp, #7
   dc27e:	4631      	mov	r1, r6
   dc280:	a804      	add	r0, sp, #16
   dc282:	f7ff feef 	bl	dc064 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf>
   dc286:	b930      	cbnz	r0, dc296 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x52>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
   dc288:	2304      	movs	r3, #4
   dc28a:	aa03      	add	r2, sp, #12
   dc28c:	4631      	mov	r1, r6
   dc28e:	a804      	add	r0, sp, #16
   dc290:	f7fa f8dc 	bl	d644c <mbedtls_asn1_get_tag>
   dc294:	b110      	cbz	r0, dc29c <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x58>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
   dc296:	f5a0 5474 	sub.w	r4, r0, #15616	; 0x3d00
   dc29a:	e039      	b.n	dc310 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xcc>

    if( len < 1 )
   dc29c:	9b03      	ldr	r3, [sp, #12]
   dc29e:	b36b      	cbz	r3, dc2fc <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xb8>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )
   dc2a0:	f89d 0007 	ldrb.w	r0, [sp, #7]
   dc2a4:	f002 fd3c 	bl	ded20 <mbedtls_pk_info_from_type>
   dc2a8:	4601      	mov	r1, r0
   dc2aa:	b908      	cbnz	r0, dc2b0 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x6c>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
   dc2ac:	4c1a      	ldr	r4, [pc, #104]	; (dc318 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xd4>)
   dc2ae:	e02f      	b.n	dc310 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xcc>

    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 )
   dc2b0:	4628      	mov	r0, r5
   dc2b2:	f002 fd41 	bl	ded38 <mbedtls_pk_setup>
   dc2b6:	bb18      	cbnz	r0, dc300 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xbc>
        return( ret );

#if defined(MBEDTLS_RSA_C)
    if( pk_alg == MBEDTLS_PK_RSA )
   dc2b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   dc2bc:	2b01      	cmp	r3, #1
   dc2be:	d10a      	bne.n	dc2d6 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x92>
    {
        if( ( ret = pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ), p, len ) ) != 0 )
   dc2c0:	9a03      	ldr	r2, [sp, #12]
   dc2c2:	9904      	ldr	r1, [sp, #16]
   dc2c4:	6868      	ldr	r0, [r5, #4]
   dc2c6:	f7ff fdd3 	bl	dbe70 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj>
   dc2ca:	4604      	mov	r4, r0
   dc2cc:	b1d0      	cbz	r0, dc304 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xc0>
        {
            mbedtls_pk_free( pk );
   dc2ce:	4628      	mov	r0, r5
   dc2d0:	f002 fd16 	bl	ded00 <mbedtls_pk_free>
            return( ret );
   dc2d4:	e01c      	b.n	dc310 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xcc>
        }
    } else
#endif /* MBEDTLS_RSA_C */
#if defined(MBEDTLS_ECP_C)
    if( pk_alg == MBEDTLS_PK_ECKEY || pk_alg == MBEDTLS_PK_ECKEY_DH )
   dc2d6:	3b02      	subs	r3, #2
   dc2d8:	2b01      	cmp	r3, #1
   dc2da:	d8e7      	bhi.n	dc2ac <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x68>
    {
        if( ( ret = pk_use_ecparams( &params, &mbedtls_pk_ec( *pk )->grp ) ) != 0 ||
   dc2dc:	6869      	ldr	r1, [r5, #4]
   dc2de:	a805      	add	r0, sp, #20
   dc2e0:	f7ff fda8 	bl	dbe34 <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group>
   dc2e4:	4606      	mov	r6, r0
   dc2e6:	b978      	cbnz	r0, dc308 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xc4>
            ( ret = pk_parse_key_sec1_der( mbedtls_pk_ec( *pk ), p, len )  ) != 0 )
   dc2e8:	9a03      	ldr	r2, [sp, #12]
   dc2ea:	9904      	ldr	r1, [sp, #16]
   dc2ec:	6868      	ldr	r0, [r5, #4]
   dc2ee:	f7ff fee3 	bl	dc0b8 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj>
    } else
#endif /* MBEDTLS_RSA_C */
#if defined(MBEDTLS_ECP_C)
    if( pk_alg == MBEDTLS_PK_ECKEY || pk_alg == MBEDTLS_PK_ECKEY_DH )
    {
        if( ( ret = pk_use_ecparams( &params, &mbedtls_pk_ec( *pk )->grp ) ) != 0 ||
   dc2f2:	4606      	mov	r6, r0
   dc2f4:	b940      	cbnz	r0, dc308 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xc4>
   dc2f6:	e00b      	b.n	dc310 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xcc>

    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( version != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION + ret );
   dc2f8:	4c08      	ldr	r4, [pc, #32]	; (dc31c <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xd8>)
   dc2fa:	e009      	b.n	dc310 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xcc>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( len < 1 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   dc2fc:	4c08      	ldr	r4, [pc, #32]	; (dc320 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xdc>)
   dc2fe:	e007      	b.n	dc310 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xcc>
   dc300:	4604      	mov	r4, r0
   dc302:	e005      	b.n	dc310 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xcc>
        }
    } else
#endif /* MBEDTLS_ECP_C */
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    return( 0 );
   dc304:	2400      	movs	r4, #0
   dc306:	e003      	b.n	dc310 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xcc>
    if( pk_alg == MBEDTLS_PK_ECKEY || pk_alg == MBEDTLS_PK_ECKEY_DH )
    {
        if( ( ret = pk_use_ecparams( &params, &mbedtls_pk_ec( *pk )->grp ) ) != 0 ||
            ( ret = pk_parse_key_sec1_der( mbedtls_pk_ec( *pk ), p, len )  ) != 0 )
        {
            mbedtls_pk_free( pk );
   dc308:	4628      	mov	r0, r5
   dc30a:	f002 fcf9 	bl	ded00 <mbedtls_pk_free>
            return( ret );
   dc30e:	4634      	mov	r4, r6
    } else
#endif /* MBEDTLS_ECP_C */
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    return( 0 );
}
   dc310:	4620      	mov	r0, r4
   dc312:	b008      	add	sp, #32
   dc314:	bd70      	pop	{r4, r5, r6, pc}
   dc316:	bf00      	nop
   dc318:	ffffc380 	.word	0xffffc380
   dc31c:	ffffc280 	.word	0xffffc280
   dc320:	ffffc2a0 	.word	0xffffc2a0

000dc324 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj>:
#if defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)
static int pk_parse_key_pkcs8_encrypted_der(
                                    mbedtls_pk_context *pk,
                                    unsigned char *key, size_t keylen,
                                    const unsigned char *pwd, size_t pwdlen )
{
   dc324:	b5f0      	push	{r4, r5, r6, r7, lr}
   dc326:	b091      	sub	sp, #68	; 0x44
   dc328:	4606      	mov	r6, r0
   dc32a:	9d16      	ldr	r5, [sp, #88]	; 0x58
#if defined(MBEDTLS_PKCS12_C)
    mbedtls_cipher_type_t cipher_alg;
    mbedtls_md_type_t md_alg;
#endif

    p = key;
   dc32c:	9109      	str	r1, [sp, #36]	; 0x24
#if defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)
static int pk_parse_key_pkcs8_encrypted_der(
                                    mbedtls_pk_context *pk,
                                    unsigned char *key, size_t keylen,
                                    const unsigned char *pwd, size_t pwdlen )
{
   dc32e:	461f      	mov	r7, r3
    mbedtls_cipher_type_t cipher_alg;
    mbedtls_md_type_t md_alg;
#endif

    p = key;
    end = p + keylen;
   dc330:	4411      	add	r1, r2

    if( pwdlen == 0 )
   dc332:	2d00      	cmp	r5, #0
   dc334:	d066      	beq.n	dc404 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe0>
     *  EncryptedData ::= OCTET STRING
     *
     *  The EncryptedData OCTET STRING is a PKCS#8 PrivateKeyInfo
     *
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   dc336:	2330      	movs	r3, #48	; 0x30
   dc338:	aa08      	add	r2, sp, #32
   dc33a:	a809      	add	r0, sp, #36	; 0x24
   dc33c:	f7fa f886 	bl	d644c <mbedtls_asn1_get_tag>
   dc340:	b980      	cbnz	r0, dc364 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x40>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = p + len;
   dc342:	9b08      	ldr	r3, [sp, #32]
   dc344:	9c09      	ldr	r4, [sp, #36]	; 0x24
   dc346:	441c      	add	r4, r3

    if( ( ret = mbedtls_asn1_get_alg( &p, end, &pbe_alg_oid, &pbe_params ) ) != 0 )
   dc348:	aa0a      	add	r2, sp, #40	; 0x28
   dc34a:	ab0d      	add	r3, sp, #52	; 0x34
   dc34c:	4621      	mov	r1, r4
   dc34e:	a809      	add	r0, sp, #36	; 0x24
   dc350:	f7fa f959 	bl	d6606 <mbedtls_asn1_get_alg>
   dc354:	b930      	cbnz	r0, dc364 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x40>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
   dc356:	2304      	movs	r3, #4
   dc358:	aa08      	add	r2, sp, #32
   dc35a:	4621      	mov	r1, r4
   dc35c:	a809      	add	r0, sp, #36	; 0x24
   dc35e:	f7fa f875 	bl	d644c <mbedtls_asn1_get_tag>
   dc362:	b110      	cbz	r0, dc36a <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x46>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
   dc364:	f5a0 5074 	sub.w	r0, r0, #15616	; 0x3d00
   dc368:	e055      	b.n	dc416 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>

    /*
     * Decrypt EncryptedData with appropriate PBE
     */
#if defined(MBEDTLS_PKCS12_C)
    if( mbedtls_oid_get_pkcs12_pbe_alg( &pbe_alg_oid, &md_alg, &cipher_alg ) == 0 )
   dc36a:	f10d 011f 	add.w	r1, sp, #31
   dc36e:	f10d 021e 	add.w	r2, sp, #30
   dc372:	a80a      	add	r0, sp, #40	; 0x28
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    buf = p;
   dc374:	9c09      	ldr	r4, [sp, #36]	; 0x24

    /*
     * Decrypt EncryptedData with appropriate PBE
     */
#if defined(MBEDTLS_PKCS12_C)
    if( mbedtls_oid_get_pkcs12_pbe_alg( &pbe_alg_oid, &md_alg, &cipher_alg ) == 0 )
   dc376:	f7fd fe7b 	bl	da070 <mbedtls_oid_get_pkcs12_pbe_alg>
   dc37a:	4601      	mov	r1, r0
   dc37c:	b9a0      	cbnz	r0, dc3a8 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x84>
    {
        if( ( ret = mbedtls_pkcs12_pbe( &pbe_params, MBEDTLS_PKCS12_PBE_DECRYPT,
   dc37e:	9808      	ldr	r0, [sp, #32]
   dc380:	9003      	str	r0, [sp, #12]
   dc382:	9809      	ldr	r0, [sp, #36]	; 0x24
   dc384:	9002      	str	r0, [sp, #8]
   dc386:	f89d 301f 	ldrb.w	r3, [sp, #31]
   dc38a:	f89d 201e 	ldrb.w	r2, [sp, #30]
   dc38e:	9404      	str	r4, [sp, #16]
   dc390:	9501      	str	r5, [sp, #4]
   dc392:	9700      	str	r7, [sp, #0]
   dc394:	a80d      	add	r0, sp, #52	; 0x34
   dc396:	f006 feb3 	bl	e3100 <mbedtls_pkcs12_pbe>
   dc39a:	2800      	cmp	r0, #0
   dc39c:	d036      	beq.n	dc40c <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe8>
                                cipher_alg, md_alg,
                                pwd, pwdlen, p, len, buf ) ) != 0 )
        {
            if( ret == MBEDTLS_ERR_PKCS12_PASSWORD_MISMATCH )
   dc39e:	f510 5ff0 	cmn.w	r0, #7680	; 0x1e00
   dc3a2:	d138      	bne.n	dc416 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>
                return( MBEDTLS_ERR_PK_PASSWORD_MISMATCH );
   dc3a4:	481d      	ldr	r0, [pc, #116]	; (dc41c <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf8>)
   dc3a6:	e036      	b.n	dc416 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>
            return( ret );
        }

        decrypted = 1;
    }
    else if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS12_PBE_SHA1_RC4_128, &pbe_alg_oid ) == 0 )
   dc3a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   dc3aa:	2a0a      	cmp	r2, #10
   dc3ac:	d114      	bne.n	dc3d8 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xb4>
   dc3ae:	990c      	ldr	r1, [sp, #48]	; 0x30
   dc3b0:	481b      	ldr	r0, [pc, #108]	; (dc420 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xfc>)
   dc3b2:	f00d fb71 	bl	e9a98 <memcmp>
   dc3b6:	4601      	mov	r1, r0
   dc3b8:	bb30      	cbnz	r0, dc408 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe4>
    {
        if( ( ret = mbedtls_pkcs12_pbe_sha1_rc4_128( &pbe_params,
   dc3ba:	9b08      	ldr	r3, [sp, #32]
   dc3bc:	9301      	str	r3, [sp, #4]
   dc3be:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dc3c0:	9300      	str	r3, [sp, #0]
   dc3c2:	9402      	str	r4, [sp, #8]
   dc3c4:	462b      	mov	r3, r5
   dc3c6:	463a      	mov	r2, r7
   dc3c8:	a80d      	add	r0, sp, #52	; 0x34
   dc3ca:	f006 fdbb 	bl	e2f44 <mbedtls_pkcs12_pbe_sha1_rc4_128>
   dc3ce:	bb10      	cbnz	r0, dc416 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>
        }

        // Best guess for password mismatch when using RC4. If first tag is
        // not MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE
        //
        if( *buf != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
   dc3d0:	7823      	ldrb	r3, [r4, #0]
   dc3d2:	2b30      	cmp	r3, #48	; 0x30
   dc3d4:	d01a      	beq.n	dc40c <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe8>
   dc3d6:	e7e5      	b.n	dc3a4 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x80>
        decrypted = 1;
    }
    else
#endif /* MBEDTLS_PKCS12_C */
#if defined(MBEDTLS_PKCS5_C)
    if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS5_PBES2, &pbe_alg_oid ) == 0 )
   dc3d8:	2a09      	cmp	r2, #9
   dc3da:	d115      	bne.n	dc408 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe4>
   dc3dc:	990c      	ldr	r1, [sp, #48]	; 0x30
   dc3de:	4811      	ldr	r0, [pc, #68]	; (dc424 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x100>)
   dc3e0:	f00d fb5a 	bl	e9a98 <memcmp>
   dc3e4:	4601      	mov	r1, r0
   dc3e6:	b978      	cbnz	r0, dc408 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe4>
    {
        if( ( ret = mbedtls_pkcs5_pbes2( &pbe_params, MBEDTLS_PKCS5_DECRYPT, pwd, pwdlen,
   dc3e8:	9b08      	ldr	r3, [sp, #32]
   dc3ea:	9301      	str	r3, [sp, #4]
   dc3ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dc3ee:	9300      	str	r3, [sp, #0]
   dc3f0:	9402      	str	r4, [sp, #8]
   dc3f2:	462b      	mov	r3, r5
   dc3f4:	463a      	mov	r2, r7
   dc3f6:	a80d      	add	r0, sp, #52	; 0x34
   dc3f8:	f7fe ffc2 	bl	db380 <mbedtls_pkcs5_pbes2>
   dc3fc:	b130      	cbz	r0, dc40c <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe8>
                                  p, len, buf ) ) != 0 )
        {
            if( ret == MBEDTLS_ERR_PKCS5_PASSWORD_MISMATCH )
   dc3fe:	f510 5f38 	cmn.w	r0, #11776	; 0x2e00
   dc402:	e7ce      	b.n	dc3a2 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x7e>

    p = key;
    end = p + keylen;

    if( pwdlen == 0 )
        return( MBEDTLS_ERR_PK_PASSWORD_REQUIRED );
   dc404:	4808      	ldr	r0, [pc, #32]	; (dc428 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x104>)
   dc406:	e006      	b.n	dc416 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>
    {
        ((void) pwd);
    }

    if( decrypted == 0 )
        return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );
   dc408:	4808      	ldr	r0, [pc, #32]	; (dc42c <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x108>)
   dc40a:	e004      	b.n	dc416 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>

    return( pk_parse_key_pkcs8_unencrypted_der( pk, buf, len ) );
   dc40c:	9a08      	ldr	r2, [sp, #32]
   dc40e:	4621      	mov	r1, r4
   dc410:	4630      	mov	r0, r6
   dc412:	f7ff ff17 	bl	dc244 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj>
}
   dc416:	b011      	add	sp, #68	; 0x44
   dc418:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dc41a:	bf00      	nop
   dc41c:	ffffc480 	.word	0xffffc480
   dc420:	000edc64 	.word	0x000edc64
   dc424:	000edc6f 	.word	0x000edc6f
   dc428:	ffffc400 	.word	0xffffc400
   dc42c:	ffffc680 	.word	0xffffc680

000dc430 <mbedtls_pk_parse_subpubkey>:
 *       algorithm            AlgorithmIdentifier,
 *       subjectPublicKey     BIT STRING }
 */
int mbedtls_pk_parse_subpubkey( unsigned char **p, const unsigned char *end,
                        mbedtls_pk_context *pk )
{
   dc430:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dc434:	b087      	sub	sp, #28
    int ret;
    size_t len;
    mbedtls_asn1_buf alg_params;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
   dc436:	2300      	movs	r3, #0
 *       algorithm            AlgorithmIdentifier,
 *       subjectPublicKey     BIT STRING }
 */
int mbedtls_pk_parse_subpubkey( unsigned char **p, const unsigned char *end,
                        mbedtls_pk_context *pk )
{
   dc438:	4617      	mov	r7, r2
    int ret;
    size_t len;
    mbedtls_asn1_buf alg_params;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
   dc43a:	f88d 3007 	strb.w	r3, [sp, #7]
    PK_VALIDATE_RET( p != NULL );
    PK_VALIDATE_RET( *p != NULL );
    PK_VALIDATE_RET( end != NULL );
    PK_VALIDATE_RET( pk != NULL );

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   dc43e:	aa02      	add	r2, sp, #8
   dc440:	2330      	movs	r3, #48	; 0x30
 *       algorithm            AlgorithmIdentifier,
 *       subjectPublicKey     BIT STRING }
 */
int mbedtls_pk_parse_subpubkey( unsigned char **p, const unsigned char *end,
                        mbedtls_pk_context *pk )
{
   dc442:	4606      	mov	r6, r0
    PK_VALIDATE_RET( p != NULL );
    PK_VALIDATE_RET( *p != NULL );
    PK_VALIDATE_RET( end != NULL );
    PK_VALIDATE_RET( pk != NULL );

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   dc444:	f7fa f802 	bl	d644c <mbedtls_asn1_get_tag>
   dc448:	b110      	cbz	r0, dc450 <mbedtls_pk_parse_subpubkey+0x20>
                    MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
   dc44a:	f5a0 5074 	sub.w	r0, r0, #15616	; 0x3d00
   dc44e:	e05c      	b.n	dc50a <mbedtls_pk_parse_subpubkey+0xda>
    }

    end = *p + len;
   dc450:	9b02      	ldr	r3, [sp, #8]
   dc452:	6835      	ldr	r5, [r6, #0]
   dc454:	441d      	add	r5, r3

    if( ( ret = pk_get_pk_alg( p, end, &pk_alg, &alg_params ) ) != 0 )
   dc456:	f10d 0207 	add.w	r2, sp, #7
   dc45a:	ab03      	add	r3, sp, #12
   dc45c:	4629      	mov	r1, r5
   dc45e:	4630      	mov	r0, r6
   dc460:	f7ff fe00 	bl	dc064 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf>
   dc464:	2800      	cmp	r0, #0
   dc466:	d150      	bne.n	dc50a <mbedtls_pk_parse_subpubkey+0xda>
        return( ret );

    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
   dc468:	aa02      	add	r2, sp, #8
   dc46a:	4629      	mov	r1, r5
   dc46c:	4630      	mov	r0, r6
   dc46e:	f7fa f876 	bl	d655e <mbedtls_asn1_get_bitstring_null>
   dc472:	b110      	cbz	r0, dc47a <mbedtls_pk_parse_subpubkey+0x4a>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
   dc474:	f5a0 506c 	sub.w	r0, r0, #15104	; 0x3b00
   dc478:	e047      	b.n	dc50a <mbedtls_pk_parse_subpubkey+0xda>

    if( *p + len != end )
   dc47a:	6832      	ldr	r2, [r6, #0]
   dc47c:	9b02      	ldr	r3, [sp, #8]
   dc47e:	4413      	add	r3, r2
   dc480:	429d      	cmp	r5, r3
   dc482:	d139      	bne.n	dc4f8 <mbedtls_pk_parse_subpubkey+0xc8>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )
   dc484:	f89d 0007 	ldrb.w	r0, [sp, #7]
   dc488:	f002 fc4a 	bl	ded20 <mbedtls_pk_info_from_type>
   dc48c:	4601      	mov	r1, r0
   dc48e:	b3a8      	cbz	r0, dc4fc <mbedtls_pk_parse_subpubkey+0xcc>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 )
   dc490:	4638      	mov	r0, r7
   dc492:	f002 fc51 	bl	ded38 <mbedtls_pk_setup>
   dc496:	2800      	cmp	r0, #0
   dc498:	d137      	bne.n	dc50a <mbedtls_pk_parse_subpubkey+0xda>
        return( ret );

#if defined(MBEDTLS_RSA_C)
    if( pk_alg == MBEDTLS_PK_RSA )
   dc49a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   dc49e:	2b01      	cmp	r3, #1
   dc4a0:	d107      	bne.n	dc4b2 <mbedtls_pk_parse_subpubkey+0x82>
    {
        ret = pk_get_rsapubkey( p, end, mbedtls_pk_rsa( *pk ) );
   dc4a2:	687a      	ldr	r2, [r7, #4]
   dc4a4:	4629      	mov	r1, r5
   dc4a6:	4630      	mov	r0, r6
   dc4a8:	f7ff fc68 	bl	dbd7c <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context>
            ret = pk_get_ecpubkey( p, end, mbedtls_pk_ec( *pk ) );
    } else
#endif /* MBEDTLS_ECP_C */
        ret = MBEDTLS_ERR_PK_UNKNOWN_PK_ALG;

    if( ret == 0 && *p != end )
   dc4ac:	4604      	mov	r4, r0
   dc4ae:	b1f0      	cbz	r0, dc4ee <mbedtls_pk_parse_subpubkey+0xbe>
   dc4b0:	e027      	b.n	dc502 <mbedtls_pk_parse_subpubkey+0xd2>
    {
        ret = pk_get_rsapubkey( p, end, mbedtls_pk_rsa( *pk ) );
    } else
#endif /* MBEDTLS_RSA_C */
#if defined(MBEDTLS_ECP_C)
    if( pk_alg == MBEDTLS_PK_ECKEY_DH || pk_alg == MBEDTLS_PK_ECKEY )
   dc4b2:	3b02      	subs	r3, #2
   dc4b4:	2b01      	cmp	r3, #1
   dc4b6:	d823      	bhi.n	dc500 <mbedtls_pk_parse_subpubkey+0xd0>
    {
        ret = pk_use_ecparams( &alg_params, &mbedtls_pk_ec( *pk )->grp );
   dc4b8:	6879      	ldr	r1, [r7, #4]
   dc4ba:	a803      	add	r0, sp, #12
   dc4bc:	f7ff fcba 	bl	dbe34 <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group>
        if( ret == 0 )
   dc4c0:	4604      	mov	r4, r0
   dc4c2:	b9f0      	cbnz	r0, dc502 <mbedtls_pk_parse_subpubkey+0xd2>
   dc4c4:	f8d7 8004 	ldr.w	r8, [r7, #4]
                            mbedtls_ecp_keypair *key )
{
    int ret;

    if( ( ret = mbedtls_ecp_point_read_binary( &key->grp, &key->Q,
                    (const unsigned char *) *p, end - *p ) ) == 0 )
   dc4c8:	6832      	ldr	r2, [r6, #0]
static int pk_get_ecpubkey( unsigned char **p, const unsigned char *end,
                            mbedtls_ecp_keypair *key )
{
    int ret;

    if( ( ret = mbedtls_ecp_point_read_binary( &key->grp, &key->Q,
   dc4ca:	f108 0988 	add.w	r9, r8, #136	; 0x88
   dc4ce:	1aab      	subs	r3, r5, r2
   dc4d0:	4649      	mov	r1, r9
   dc4d2:	4640      	mov	r0, r8
   dc4d4:	f7fd f90a 	bl	d96ec <mbedtls_ecp_point_read_binary>
   dc4d8:	4604      	mov	r4, r0
   dc4da:	b920      	cbnz	r0, dc4e6 <mbedtls_pk_parse_subpubkey+0xb6>
                    (const unsigned char *) *p, end - *p ) ) == 0 )
    {
        ret = mbedtls_ecp_check_pubkey( &key->grp, &key->Q );
   dc4dc:	4649      	mov	r1, r9
   dc4de:	4640      	mov	r0, r8
   dc4e0:	f7fd f98c 	bl	d97fc <mbedtls_ecp_check_pubkey>
   dc4e4:	4604      	mov	r4, r0
    }

    /*
     * We know mbedtls_ecp_point_read_binary consumed all bytes or failed
     */
    *p = (unsigned char *) end;
   dc4e6:	6035      	str	r5, [r6, #0]
            ret = pk_get_ecpubkey( p, end, mbedtls_pk_ec( *pk ) );
    } else
#endif /* MBEDTLS_ECP_C */
        ret = MBEDTLS_ERR_PK_UNKNOWN_PK_ALG;

    if( ret == 0 && *p != end )
   dc4e8:	b95c      	cbnz	r4, dc502 <mbedtls_pk_parse_subpubkey+0xd2>
   dc4ea:	2000      	movs	r0, #0
   dc4ec:	e00d      	b.n	dc50a <mbedtls_pk_parse_subpubkey+0xda>
   dc4ee:	6833      	ldr	r3, [r6, #0]
   dc4f0:	429d      	cmp	r5, r3
   dc4f2:	d0fa      	beq.n	dc4ea <mbedtls_pk_parse_subpubkey+0xba>
        ret = MBEDTLS_ERR_PK_INVALID_PUBKEY
              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH;
   dc4f4:	4c06      	ldr	r4, [pc, #24]	; (dc510 <mbedtls_pk_parse_subpubkey+0xe0>)
   dc4f6:	e004      	b.n	dc502 <mbedtls_pk_parse_subpubkey+0xd2>
    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );

    if( *p + len != end )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   dc4f8:	4805      	ldr	r0, [pc, #20]	; (dc510 <mbedtls_pk_parse_subpubkey+0xe0>)
   dc4fa:	e006      	b.n	dc50a <mbedtls_pk_parse_subpubkey+0xda>

    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
   dc4fc:	4805      	ldr	r0, [pc, #20]	; (dc514 <mbedtls_pk_parse_subpubkey+0xe4>)
   dc4fe:	e004      	b.n	dc50a <mbedtls_pk_parse_subpubkey+0xda>
        ret = pk_use_ecparams( &alg_params, &mbedtls_pk_ec( *pk )->grp );
        if( ret == 0 )
            ret = pk_get_ecpubkey( p, end, mbedtls_pk_ec( *pk ) );
    } else
#endif /* MBEDTLS_ECP_C */
        ret = MBEDTLS_ERR_PK_UNKNOWN_PK_ALG;
   dc500:	4c04      	ldr	r4, [pc, #16]	; (dc514 <mbedtls_pk_parse_subpubkey+0xe4>)
    if( ret == 0 && *p != end )
        ret = MBEDTLS_ERR_PK_INVALID_PUBKEY
              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH;

    if( ret != 0 )
        mbedtls_pk_free( pk );
   dc502:	4638      	mov	r0, r7
   dc504:	f002 fbfc 	bl	ded00 <mbedtls_pk_free>
   dc508:	4620      	mov	r0, r4

    return( ret );
}
   dc50a:	b007      	add	sp, #28
   dc50c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dc510:	ffffc49a 	.word	0xffffc49a
   dc514:	ffffc380 	.word	0xffffc380

000dc518 <mbedtls_pk_parse_key>:
 * Parse a private key
 */
int mbedtls_pk_parse_key( mbedtls_pk_context *pk,
                  const unsigned char *key, size_t keylen,
                  const unsigned char *pwd, size_t pwdlen )
{
   dc518:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dc51c:	b089      	sub	sp, #36	; 0x24
   dc51e:	4605      	mov	r5, r0
   dc520:	460c      	mov	r4, r1
   dc522:	461f      	mov	r7, r3
   dc524:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    size_t len;
    mbedtls_pem_context pem;
#endif

    PK_VALIDATE_RET( pk != NULL );
    if( keylen == 0 )
   dc528:	4616      	mov	r6, r2
   dc52a:	2a00      	cmp	r2, #0
   dc52c:	f000 80f7 	beq.w	dc71e <mbedtls_pk_parse_key+0x206>
#if defined(MBEDTLS_PEM_PARSE_C)
   mbedtls_pem_init( &pem );

#if defined(MBEDTLS_RSA_C)
    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( key[keylen - 1] != '\0' )
   dc530:	f106 39ff 	add.w	r9, r6, #4294967295
    if( keylen == 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
    PK_VALIDATE_RET( key != NULL );

#if defined(MBEDTLS_PEM_PARSE_C)
   mbedtls_pem_init( &pem );
   dc534:	a805      	add	r0, sp, #20
   dc536:	f007 ff4e 	bl	e43d6 <mbedtls_pem_init>

#if defined(MBEDTLS_RSA_C)
    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( key[keylen - 1] != '\0' )
   dc53a:	f814 3009 	ldrb.w	r3, [r4, r9]
   dc53e:	b123      	cbz	r3, dc54a <mbedtls_pk_parse_key+0x32>
        return( ret );
#endif /* MBEDTLS_RSA_C */

#if defined(MBEDTLS_ECP_C)
    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( key[keylen - 1] != '\0' )
   dc540:	f814 3009 	ldrb.w	r3, [r4, r9]
   dc544:	2b00      	cmp	r3, #0
   dc546:	d13f      	bne.n	dc5c8 <mbedtls_pk_parse_key+0xb0>
   dc548:	e029      	b.n	dc59e <mbedtls_pk_parse_key+0x86>
#if defined(MBEDTLS_RSA_C)
    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( key[keylen - 1] != '\0' )
        ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;
    else
        ret = mbedtls_pem_read_buffer( &pem,
   dc54a:	ab04      	add	r3, sp, #16
   dc54c:	9302      	str	r3, [sp, #8]
   dc54e:	e88d 0180 	stmia.w	sp, {r7, r8}
   dc552:	4623      	mov	r3, r4
   dc554:	4a75      	ldr	r2, [pc, #468]	; (dc72c <mbedtls_pk_parse_key+0x214>)
   dc556:	4976      	ldr	r1, [pc, #472]	; (dc730 <mbedtls_pk_parse_key+0x218>)
   dc558:	a805      	add	r0, sp, #20
   dc55a:	f007 ff41 	bl	e43e0 <mbedtls_pem_read_buffer>
                               "-----BEGIN RSA PRIVATE KEY-----",
                               "-----END RSA PRIVATE KEY-----",
                               key, pwd, pwdlen, &len );

    if( ret == 0 )
   dc55e:	b978      	cbnz	r0, dc580 <mbedtls_pk_parse_key+0x68>
    {
        pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA );
   dc560:	2001      	movs	r0, #1
   dc562:	f002 fbdd 	bl	ded20 <mbedtls_pk_info_from_type>
        if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 ||
   dc566:	4601      	mov	r1, r0
   dc568:	4628      	mov	r0, r5
   dc56a:	f002 fbe5 	bl	ded38 <mbedtls_pk_setup>
   dc56e:	4604      	mov	r4, r0
   dc570:	2800      	cmp	r0, #0
   dc572:	d177      	bne.n	dc664 <mbedtls_pk_parse_key+0x14c>
            ( ret = pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ),
   dc574:	9a06      	ldr	r2, [sp, #24]
   dc576:	9905      	ldr	r1, [sp, #20]
   dc578:	6868      	ldr	r0, [r5, #4]
   dc57a:	f7ff fc79 	bl	dbe70 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj>
   dc57e:	e06f      	b.n	dc660 <mbedtls_pk_parse_key+0x148>
        }

        mbedtls_pem_free( &pem );
        return( ret );
    }
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_MISMATCH )
   dc580:	f510 5f9c 	cmn.w	r0, #4992	; 0x1380
   dc584:	d101      	bne.n	dc58a <mbedtls_pk_parse_key+0x72>
        return( MBEDTLS_ERR_PK_PASSWORD_MISMATCH );
   dc586:	486b      	ldr	r0, [pc, #428]	; (dc734 <mbedtls_pk_parse_key+0x21c>)
   dc588:	e0cc      	b.n	dc724 <mbedtls_pk_parse_key+0x20c>
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_REQUIRED )
   dc58a:	f510 5f98 	cmn.w	r0, #4864	; 0x1300
   dc58e:	d101      	bne.n	dc594 <mbedtls_pk_parse_key+0x7c>
        return( MBEDTLS_ERR_PK_PASSWORD_REQUIRED );
   dc590:	4869      	ldr	r0, [pc, #420]	; (dc738 <mbedtls_pk_parse_key+0x220>)
   dc592:	e0c7      	b.n	dc724 <mbedtls_pk_parse_key+0x20c>
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
   dc594:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
   dc598:	f040 80c4 	bne.w	dc724 <mbedtls_pk_parse_key+0x20c>
   dc59c:	e7d0      	b.n	dc540 <mbedtls_pk_parse_key+0x28>
#if defined(MBEDTLS_ECP_C)
    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( key[keylen - 1] != '\0' )
        ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;
    else
        ret = mbedtls_pem_read_buffer( &pem,
   dc59e:	ab04      	add	r3, sp, #16
   dc5a0:	9302      	str	r3, [sp, #8]
   dc5a2:	e88d 0180 	stmia.w	sp, {r7, r8}
   dc5a6:	4623      	mov	r3, r4
   dc5a8:	4a64      	ldr	r2, [pc, #400]	; (dc73c <mbedtls_pk_parse_key+0x224>)
   dc5aa:	4965      	ldr	r1, [pc, #404]	; (dc740 <mbedtls_pk_parse_key+0x228>)
   dc5ac:	a805      	add	r0, sp, #20
   dc5ae:	f007 ff17 	bl	e43e0 <mbedtls_pem_read_buffer>
                               "-----BEGIN EC PRIVATE KEY-----",
                               "-----END EC PRIVATE KEY-----",
                               key, pwd, pwdlen, &len );
    if( ret == 0 )
   dc5b2:	b168      	cbz	r0, dc5d0 <mbedtls_pk_parse_key+0xb8>
        }

        mbedtls_pem_free( &pem );
        return( ret );
    }
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_MISMATCH )
   dc5b4:	f510 5f9c 	cmn.w	r0, #4992	; 0x1380
   dc5b8:	d0e5      	beq.n	dc586 <mbedtls_pk_parse_key+0x6e>
        return( MBEDTLS_ERR_PK_PASSWORD_MISMATCH );
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_REQUIRED )
   dc5ba:	f510 5f98 	cmn.w	r0, #4864	; 0x1300
   dc5be:	d0e7      	beq.n	dc590 <mbedtls_pk_parse_key+0x78>
        return( MBEDTLS_ERR_PK_PASSWORD_REQUIRED );
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
   dc5c0:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
   dc5c4:	f040 80ae 	bne.w	dc724 <mbedtls_pk_parse_key+0x20c>
        return( ret );
#endif /* MBEDTLS_ECP_C */

    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( key[keylen - 1] != '\0' )
   dc5c8:	f814 3009 	ldrb.w	r3, [r4, r9]
   dc5cc:	b9a3      	cbnz	r3, dc5f8 <mbedtls_pk_parse_key+0xe0>
   dc5ce:	e017      	b.n	dc600 <mbedtls_pk_parse_key+0xe8>
                               "-----BEGIN EC PRIVATE KEY-----",
                               "-----END EC PRIVATE KEY-----",
                               key, pwd, pwdlen, &len );
    if( ret == 0 )
    {
        pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_ECKEY );
   dc5d0:	2002      	movs	r0, #2
   dc5d2:	f002 fba5 	bl	ded20 <mbedtls_pk_info_from_type>

        if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 ||
   dc5d6:	4601      	mov	r1, r0
   dc5d8:	4628      	mov	r0, r5
   dc5da:	f002 fbad 	bl	ded38 <mbedtls_pk_setup>
   dc5de:	4604      	mov	r4, r0
   dc5e0:	2800      	cmp	r0, #0
   dc5e2:	d13f      	bne.n	dc664 <mbedtls_pk_parse_key+0x14c>
            ( ret = pk_parse_key_sec1_der( mbedtls_pk_ec( *pk ),
   dc5e4:	9a06      	ldr	r2, [sp, #24]
   dc5e6:	9905      	ldr	r1, [sp, #20]
   dc5e8:	6868      	ldr	r0, [r5, #4]
   dc5ea:	f7ff fd65 	bl	dc0b8 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj>
   dc5ee:	e037      	b.n	dc660 <mbedtls_pk_parse_key+0x148>
        }

        mbedtls_pem_free( &pem );
        return( ret );
    }
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
   dc5f0:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
   dc5f4:	f040 8096 	bne.w	dc724 <mbedtls_pk_parse_key+0x20c>
        return( ret );

#if defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)
    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( key[keylen - 1] != '\0' )
   dc5f8:	f814 3009 	ldrb.w	r3, [r4, r9]
   dc5fc:	b9ab      	cbnz	r3, dc62a <mbedtls_pk_parse_key+0x112>
   dc5fe:	e01b      	b.n	dc638 <mbedtls_pk_parse_key+0x120>

    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( key[keylen - 1] != '\0' )
        ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;
    else
        ret = mbedtls_pem_read_buffer( &pem,
   dc600:	aa04      	add	r2, sp, #16
   dc602:	9202      	str	r2, [sp, #8]
   dc604:	9301      	str	r3, [sp, #4]
   dc606:	9300      	str	r3, [sp, #0]
   dc608:	4a4e      	ldr	r2, [pc, #312]	; (dc744 <mbedtls_pk_parse_key+0x22c>)
   dc60a:	494f      	ldr	r1, [pc, #316]	; (dc748 <mbedtls_pk_parse_key+0x230>)
   dc60c:	4623      	mov	r3, r4
   dc60e:	a805      	add	r0, sp, #20
   dc610:	f007 fee6 	bl	e43e0 <mbedtls_pem_read_buffer>
                               "-----BEGIN PRIVATE KEY-----",
                               "-----END PRIVATE KEY-----",
                               key, NULL, 0, &len );
    if( ret == 0 )
   dc614:	2800      	cmp	r0, #0
   dc616:	d1eb      	bne.n	dc5f0 <mbedtls_pk_parse_key+0xd8>
    {
        if( ( ret = pk_parse_key_pkcs8_unencrypted_der( pk,
   dc618:	9a06      	ldr	r2, [sp, #24]
   dc61a:	9905      	ldr	r1, [sp, #20]
   dc61c:	4628      	mov	r0, r5
   dc61e:	f7ff fe11 	bl	dc244 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj>
   dc622:	e01d      	b.n	dc660 <mbedtls_pk_parse_key+0x148>
        }

        mbedtls_pem_free( &pem );
        return( ret );
    }
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
   dc624:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
   dc628:	d17c      	bne.n	dc724 <mbedtls_pk_parse_key+0x20c>
     */
#if defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)
    {
        unsigned char *key_copy;

        if( ( key_copy = (unsigned char *)mbedtls_calloc( 1, keylen ) ) == NULL )
   dc62a:	4631      	mov	r1, r6
   dc62c:	2001      	movs	r0, #1
   dc62e:	f00d f921 	bl	e9874 <calloc>
   dc632:	4681      	mov	r9, r0
   dc634:	b9f0      	cbnz	r0, dc674 <mbedtls_pk_parse_key+0x15c>
   dc636:	e074      	b.n	dc722 <mbedtls_pk_parse_key+0x20a>
#if defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)
    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( key[keylen - 1] != '\0' )
        ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;
    else
        ret = mbedtls_pem_read_buffer( &pem,
   dc638:	aa04      	add	r2, sp, #16
   dc63a:	9202      	str	r2, [sp, #8]
   dc63c:	9301      	str	r3, [sp, #4]
   dc63e:	9300      	str	r3, [sp, #0]
   dc640:	4a42      	ldr	r2, [pc, #264]	; (dc74c <mbedtls_pk_parse_key+0x234>)
   dc642:	4943      	ldr	r1, [pc, #268]	; (dc750 <mbedtls_pk_parse_key+0x238>)
   dc644:	4623      	mov	r3, r4
   dc646:	a805      	add	r0, sp, #20
   dc648:	f007 feca 	bl	e43e0 <mbedtls_pem_read_buffer>
                               "-----BEGIN ENCRYPTED PRIVATE KEY-----",
                               "-----END ENCRYPTED PRIVATE KEY-----",
                               key, NULL, 0, &len );
    if( ret == 0 )
   dc64c:	2800      	cmp	r0, #0
   dc64e:	d1e9      	bne.n	dc624 <mbedtls_pk_parse_key+0x10c>
    {
        if( ( ret = pk_parse_key_pkcs8_encrypted_der( pk,
   dc650:	f8cd 8000 	str.w	r8, [sp]
   dc654:	463b      	mov	r3, r7
   dc656:	9a06      	ldr	r2, [sp, #24]
   dc658:	9905      	ldr	r1, [sp, #20]
   dc65a:	4628      	mov	r0, r5
   dc65c:	f7ff fe62 	bl	dc324 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj>
   dc660:	4604      	mov	r4, r0
   dc662:	b110      	cbz	r0, dc66a <mbedtls_pk_parse_key+0x152>
                                                      pem.buf, pem.buflen,
                                                      pwd, pwdlen ) ) != 0 )
        {
            mbedtls_pk_free( pk );
   dc664:	4628      	mov	r0, r5
   dc666:	f002 fb4b 	bl	ded00 <mbedtls_pk_free>
        }

        mbedtls_pem_free( &pem );
   dc66a:	a805      	add	r0, sp, #20
   dc66c:	f007 ff42 	bl	e44f4 <mbedtls_pem_free>
                               "-----BEGIN ENCRYPTED PRIVATE KEY-----",
                               "-----END ENCRYPTED PRIVATE KEY-----",
                               key, NULL, 0, &len );
    if( ret == 0 )
    {
        if( ( ret = pk_parse_key_pkcs8_encrypted_der( pk,
   dc670:	4620      	mov	r0, r4
        {
            mbedtls_pk_free( pk );
        }

        mbedtls_pem_free( &pem );
        return( ret );
   dc672:	e057      	b.n	dc724 <mbedtls_pk_parse_key+0x20c>
        unsigned char *key_copy;

        if( ( key_copy = (unsigned char *)mbedtls_calloc( 1, keylen ) ) == NULL )
            return( MBEDTLS_ERR_PK_ALLOC_FAILED );

        memcpy( key_copy, key, keylen );
   dc674:	4632      	mov	r2, r6
   dc676:	4621      	mov	r1, r4
   dc678:	f00d fa1d 	bl	e9ab6 <memcpy>

        ret = pk_parse_key_pkcs8_encrypted_der( pk, key_copy, keylen,
   dc67c:	463b      	mov	r3, r7
   dc67e:	4632      	mov	r2, r6
   dc680:	4649      	mov	r1, r9
   dc682:	f8cd 8000 	str.w	r8, [sp]
   dc686:	4628      	mov	r0, r5
   dc688:	f7ff fe4c 	bl	dc324 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj>
                                                pwd, pwdlen );

        mbedtls_platform_zeroize( key_copy, keylen );
   dc68c:	4631      	mov	r1, r6
        if( ( key_copy = (unsigned char *)mbedtls_calloc( 1, keylen ) ) == NULL )
            return( MBEDTLS_ERR_PK_ALLOC_FAILED );

        memcpy( key_copy, key, keylen );

        ret = pk_parse_key_pkcs8_encrypted_der( pk, key_copy, keylen,
   dc68e:	4607      	mov	r7, r0
                                                pwd, pwdlen );

        mbedtls_platform_zeroize( key_copy, keylen );
   dc690:	4648      	mov	r0, r9
   dc692:	f7fe fdb3 	bl	db1fc <mbedtls_platform_zeroize>
        mbedtls_free( key_copy );
   dc696:	4648      	mov	r0, r9
   dc698:	f009 fd14 	bl	e60c4 <free>
    }

    if( ret == 0 )
   dc69c:	b90f      	cbnz	r7, dc6a2 <mbedtls_pk_parse_key+0x18a>
        return( 0 );
   dc69e:	2000      	movs	r0, #0
   dc6a0:	e040      	b.n	dc724 <mbedtls_pk_parse_key+0x20c>

    mbedtls_pk_free( pk );
   dc6a2:	4628      	mov	r0, r5
   dc6a4:	f002 fb2c 	bl	ded00 <mbedtls_pk_free>
    mbedtls_pk_init( pk );
   dc6a8:	4628      	mov	r0, r5
   dc6aa:	f002 fb25 	bl	decf8 <mbedtls_pk_init>

    if( ret == MBEDTLS_ERR_PK_PASSWORD_MISMATCH )
   dc6ae:	f517 5f6e 	cmn.w	r7, #15232	; 0x3b80
   dc6b2:	f43f af68 	beq.w	dc586 <mbedtls_pk_parse_key+0x6e>
    {
        return( ret );
    }
#endif /* MBEDTLS_PKCS12_C || MBEDTLS_PKCS5_C */

    if( ( ret = pk_parse_key_pkcs8_unencrypted_der( pk, key, keylen ) ) == 0 )
   dc6b6:	4632      	mov	r2, r6
   dc6b8:	4621      	mov	r1, r4
   dc6ba:	4628      	mov	r0, r5
   dc6bc:	f7ff fdc2 	bl	dc244 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj>
   dc6c0:	2800      	cmp	r0, #0
   dc6c2:	d0ec      	beq.n	dc69e <mbedtls_pk_parse_key+0x186>
        return( 0 );

    mbedtls_pk_free( pk );
   dc6c4:	4628      	mov	r0, r5
   dc6c6:	f002 fb1b 	bl	ded00 <mbedtls_pk_free>
    mbedtls_pk_init( pk );
   dc6ca:	4628      	mov	r0, r5
   dc6cc:	f002 fb14 	bl	decf8 <mbedtls_pk_init>

#if defined(MBEDTLS_RSA_C)

    pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA );
   dc6d0:	2001      	movs	r0, #1
   dc6d2:	f002 fb25 	bl	ded20 <mbedtls_pk_info_from_type>
    if( mbedtls_pk_setup( pk, pk_info ) == 0 &&
   dc6d6:	4601      	mov	r1, r0
   dc6d8:	4628      	mov	r0, r5
   dc6da:	f002 fb2d 	bl	ded38 <mbedtls_pk_setup>
   dc6de:	b930      	cbnz	r0, dc6ee <mbedtls_pk_parse_key+0x1d6>
        pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ), key, keylen ) == 0 )
   dc6e0:	4632      	mov	r2, r6
   dc6e2:	4621      	mov	r1, r4
   dc6e4:	6868      	ldr	r0, [r5, #4]
   dc6e6:	f7ff fbc3 	bl	dbe70 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj>
    mbedtls_pk_init( pk );

#if defined(MBEDTLS_RSA_C)

    pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA );
    if( mbedtls_pk_setup( pk, pk_info ) == 0 &&
   dc6ea:	2800      	cmp	r0, #0
   dc6ec:	d0d7      	beq.n	dc69e <mbedtls_pk_parse_key+0x186>
        pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ), key, keylen ) == 0 )
    {
        return( 0 );
    }

    mbedtls_pk_free( pk );
   dc6ee:	4628      	mov	r0, r5
   dc6f0:	f002 fb06 	bl	ded00 <mbedtls_pk_free>
    mbedtls_pk_init( pk );
   dc6f4:	4628      	mov	r0, r5
   dc6f6:	f002 faff 	bl	decf8 <mbedtls_pk_init>
#endif /* MBEDTLS_RSA_C */

#if defined(MBEDTLS_ECP_C)
    pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_ECKEY );
   dc6fa:	2002      	movs	r0, #2
   dc6fc:	f002 fb10 	bl	ded20 <mbedtls_pk_info_from_type>
    if( mbedtls_pk_setup( pk, pk_info ) == 0 &&
   dc700:	4601      	mov	r1, r0
   dc702:	4628      	mov	r0, r5
   dc704:	f002 fb18 	bl	ded38 <mbedtls_pk_setup>
   dc708:	b930      	cbnz	r0, dc718 <mbedtls_pk_parse_key+0x200>
        pk_parse_key_sec1_der( mbedtls_pk_ec( *pk ),
   dc70a:	4632      	mov	r2, r6
   dc70c:	4621      	mov	r1, r4
   dc70e:	6868      	ldr	r0, [r5, #4]
   dc710:	f7ff fcd2 	bl	dc0b8 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj>
    mbedtls_pk_init( pk );
#endif /* MBEDTLS_RSA_C */

#if defined(MBEDTLS_ECP_C)
    pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_ECKEY );
    if( mbedtls_pk_setup( pk, pk_info ) == 0 &&
   dc714:	2800      	cmp	r0, #0
   dc716:	d0c2      	beq.n	dc69e <mbedtls_pk_parse_key+0x186>
        pk_parse_key_sec1_der( mbedtls_pk_ec( *pk ),
                               key, keylen ) == 0 )
    {
        return( 0 );
    }
    mbedtls_pk_free( pk );
   dc718:	4628      	mov	r0, r5
   dc71a:	f002 faf1 	bl	ded00 <mbedtls_pk_free>
    mbedtls_pem_context pem;
#endif

    PK_VALIDATE_RET( pk != NULL );
    if( keylen == 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
   dc71e:	480d      	ldr	r0, [pc, #52]	; (dc754 <mbedtls_pk_parse_key+0x23c>)
   dc720:	e000      	b.n	dc724 <mbedtls_pk_parse_key+0x20c>
#if defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)
    {
        unsigned char *key_copy;

        if( ( key_copy = (unsigned char *)mbedtls_calloc( 1, keylen ) ) == NULL )
            return( MBEDTLS_ERR_PK_ALLOC_FAILED );
   dc722:	480d      	ldr	r0, [pc, #52]	; (dc758 <mbedtls_pk_parse_key+0x240>)
     * twice, once here and once by the caller, but this is
     * also ok and in line with the mbedtls_pk_free() calls
     * on failed PEM parsing attempts. */

    return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
}
   dc724:	b009      	add	sp, #36	; 0x24
   dc726:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dc72a:	bf00      	nop
   dc72c:	000edc79 	.word	0x000edc79
   dc730:	000edc97 	.word	0x000edc97
   dc734:	ffffc480 	.word	0xffffc480
   dc738:	ffffc400 	.word	0xffffc400
   dc73c:	000edcb7 	.word	0x000edcb7
   dc740:	000edcd4 	.word	0x000edcd4
   dc744:	000edcf3 	.word	0x000edcf3
   dc748:	000edd0d 	.word	0x000edd0d
   dc74c:	000edd29 	.word	0x000edd29
   dc750:	000edd4d 	.word	0x000edd4d
   dc754:	ffffc300 	.word	0xffffc300
   dc758:	ffffc080 	.word	0xffffc080

000dc75c <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>:
 * Sets output to x times H using the precomputed tables.
 * x and output are seen as elements of GF(2^128) as in [MGV].
 */
static void gcm_mult( mbedtls_gcm_context *ctx, const unsigned char x[16],
                      unsigned char output[16] )
{
   dc75c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        mbedtls_aesni_gcm_mult( output, x, h );
        return;
    }
#endif /* MBEDTLS_AESNI_C && MBEDTLS_HAVE_X86_64 */

    lo = x[15] & 0xf;
   dc760:	7bcb      	ldrb	r3, [r1, #15]
        if( i != 15 )
        {
            rem = (unsigned char) zl & 0xf;
            zl = ( zh << 60 ) | ( zl >> 4 );
            zh = ( zh >> 4 );
            zh ^= (uint64_t) last4[rem] << 48;
   dc762:	f8df c164 	ldr.w	ip, [pc, #356]	; dc8c8 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh+0x16c>
   dc766:	f003 030f 	and.w	r3, r3, #15
   dc76a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 * Sets output to x times H using the precomputed tables.
 * x and output are seen as elements of GF(2^128) as in [MGV].
 */
static void gcm_mult( mbedtls_gcm_context *ctx, const unsigned char x[16],
                      unsigned char output[16] )
{
   dc76e:	b093      	sub	sp, #76	; 0x4c
    }
#endif /* MBEDTLS_AESNI_C && MBEDTLS_HAVE_X86_64 */

    lo = x[15] & 0xf;

    zh = ctx->HH[lo];
   dc770:	e9d3 672e 	ldrd	r6, r7, [r3, #184]	; 0xb8
    zl = ctx->HL[lo];
   dc774:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
   dc778:	f101 0310 	add.w	r3, r1, #16
   dc77c:	9310      	str	r3, [sp, #64]	; 0x40

    for( i = 15; i >= 0; i-- )
    {
        lo = x[i] & 0xf;
   dc77e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   dc780:	f813 ed01 	ldrb.w	lr, [r3, #-1]!
   dc784:	9310      	str	r3, [sp, #64]	; 0x40
   dc786:	f00e 030f 	and.w	r3, lr, #15
   dc78a:	9311      	str	r3, [sp, #68]	; 0x44
        hi = x[i] >> 4;

        if( i != 15 )
   dc78c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   dc78e:	ebc1 0803 	rsb	r8, r1, r3
   dc792:	f1b8 0f0f 	cmp.w	r8, #15
    zl = ctx->HL[lo];

    for( i = 15; i >= 0; i-- )
    {
        lo = x[i] & 0xf;
        hi = x[i] >> 4;
   dc796:	ea4f 1e2e 	mov.w	lr, lr, asr #4

        if( i != 15 )
   dc79a:	d03a      	beq.n	dc812 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh+0xb6>
        {
            rem = (unsigned char) zl & 0xf;
            zl = ( zh << 60 ) | ( zl >> 4 );
   dc79c:	0733      	lsls	r3, r6, #28
   dc79e:	9309      	str	r3, [sp, #36]	; 0x24
   dc7a0:	2300      	movs	r3, #0
   dc7a2:	9308      	str	r3, [sp, #32]
   dc7a4:	0923      	lsrs	r3, r4, #4
   dc7a6:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   dc7aa:	9300      	str	r3, [sp, #0]
   dc7ac:	092b      	lsrs	r3, r5, #4
   dc7ae:	9301      	str	r3, [sp, #4]
   dc7b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
            zh = ( zh >> 4 );
            zh ^= (uint64_t) last4[rem] << 48;
   dc7b2:	f004 040f 	and.w	r4, r4, #15
        hi = x[i] >> 4;

        if( i != 15 )
        {
            rem = (unsigned char) zl & 0xf;
            zl = ( zh << 60 ) | ( zl >> 4 );
   dc7b6:	e9dd ab00 	ldrd	sl, fp, [sp]
   dc7ba:	eb00 05c3 	add.w	r5, r0, r3, lsl #3
   dc7be:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   dc7c2:	0933      	lsrs	r3, r6, #4
   dc7c4:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
            zh = ( zh >> 4 );
            zh ^= (uint64_t) last4[rem] << 48;
            zh ^= ctx->HH[lo];
   dc7c8:	f85c 4034 	ldr.w	r4, [ip, r4, lsl #3]
   dc7cc:	9302      	str	r3, [sp, #8]
   dc7ce:	093b      	lsrs	r3, r7, #4
        hi = x[i] >> 4;

        if( i != 15 )
        {
            rem = (unsigned char) zl & 0xf;
            zl = ( zh << 60 ) | ( zl >> 4 );
   dc7d0:	ea48 080a 	orr.w	r8, r8, sl
   dc7d4:	ea49 090b 	orr.w	r9, r9, fp
   dc7d8:	9303      	str	r3, [sp, #12]
            zh = ( zh >> 4 );
            zh ^= (uint64_t) last4[rem] << 48;
            zh ^= ctx->HH[lo];
   dc7da:	0423      	lsls	r3, r4, #16
   dc7dc:	e9d5 672e 	ldrd	r6, r7, [r5, #184]	; 0xb8
        hi = x[i] >> 4;

        if( i != 15 )
        {
            rem = (unsigned char) zl & 0xf;
            zl = ( zh << 60 ) | ( zl >> 4 );
   dc7e0:	46c2      	mov	sl, r8
   dc7e2:	46cb      	mov	fp, r9
            zh = ( zh >> 4 );
            zh ^= (uint64_t) last4[rem] << 48;
            zh ^= ctx->HH[lo];
   dc7e4:	930d      	str	r3, [sp, #52]	; 0x34
   dc7e6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
   dc7ea:	2300      	movs	r3, #0
   dc7ec:	930c      	str	r3, [sp, #48]	; 0x30
   dc7ee:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
   dc7f2:	ea89 0907 	eor.w	r9, r9, r7
   dc7f6:	464f      	mov	r7, r9
   dc7f8:	407c      	eors	r4, r7
   dc7fa:	ea88 0806 	eor.w	r8, r8, r6
   dc7fe:	4627      	mov	r7, r4
            zl ^= ctx->HL[lo];
   dc800:	e9d5 450e 	ldrd	r4, r5, [r5, #56]	; 0x38
   dc804:	4646      	mov	r6, r8
        {
            rem = (unsigned char) zl & 0xf;
            zl = ( zh << 60 ) | ( zl >> 4 );
            zh = ( zh >> 4 );
            zh ^= (uint64_t) last4[rem] << 48;
            zh ^= ctx->HH[lo];
   dc806:	4073      	eors	r3, r6
   dc808:	461e      	mov	r6, r3
            zl ^= ctx->HL[lo];
   dc80a:	ea84 040a 	eor.w	r4, r4, sl
   dc80e:	ea85 050b 	eor.w	r5, r5, fp

        }

        rem = (unsigned char) zl & 0xf;
        zl = ( zh << 60 ) | ( zl >> 4 );
   dc812:	0733      	lsls	r3, r6, #28
   dc814:	930b      	str	r3, [sp, #44]	; 0x2c
   dc816:	2300      	movs	r3, #0
   dc818:	930a      	str	r3, [sp, #40]	; 0x28
   dc81a:	0923      	lsrs	r3, r4, #4
   dc81c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   dc820:	9304      	str	r3, [sp, #16]
        zh = ( zh >> 4 );
        zh ^= (uint64_t) last4[rem] << 48;
   dc822:	f004 040f 	and.w	r4, r4, #15
            zl ^= ctx->HL[lo];

        }

        rem = (unsigned char) zl & 0xf;
        zl = ( zh << 60 ) | ( zl >> 4 );
   dc826:	092b      	lsrs	r3, r5, #4
   dc828:	9305      	str	r3, [sp, #20]
   dc82a:	0933      	lsrs	r3, r6, #4
   dc82c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   dc830:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
   dc834:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
        zh = ( zh >> 4 );
        zh ^= (uint64_t) last4[rem] << 48;
        zh ^= ctx->HH[hi];
   dc838:	f85c 4034 	ldr.w	r4, [ip, r4, lsl #3]
   dc83c:	9306      	str	r3, [sp, #24]
   dc83e:	093b      	lsrs	r3, r7, #4
   dc840:	eb00 0ece 	add.w	lr, r0, lr, lsl #3
   dc844:	9307      	str	r3, [sp, #28]
   dc846:	0423      	lsls	r3, r4, #16
   dc848:	e9de 672e 	ldrd	r6, r7, [lr, #184]	; 0xb8
            zl ^= ctx->HL[lo];

        }

        rem = (unsigned char) zl & 0xf;
        zl = ( zh << 60 ) | ( zl >> 4 );
   dc84c:	ea48 080a 	orr.w	r8, r8, sl
   dc850:	ea49 090b 	orr.w	r9, r9, fp
        zh = ( zh >> 4 );
        zh ^= (uint64_t) last4[rem] << 48;
        zh ^= ctx->HH[hi];
   dc854:	930f      	str	r3, [sp, #60]	; 0x3c
   dc856:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
   dc85a:	2300      	movs	r3, #0
   dc85c:	930e      	str	r3, [sp, #56]	; 0x38
   dc85e:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
   dc862:	ea8a 0a06 	eor.w	sl, sl, r6
   dc866:	ea8b 0b07 	eor.w	fp, fp, r7
   dc86a:	4656      	mov	r6, sl
   dc86c:	465f      	mov	r7, fp
   dc86e:	4073      	eors	r3, r6
   dc870:	407c      	eors	r4, r7
   dc872:	461e      	mov	r6, r3
   dc874:	4627      	mov	r7, r4
    lo = x[15] & 0xf;

    zh = ctx->HH[lo];
    zl = ctx->HL[lo];

    for( i = 15; i >= 0; i-- )
   dc876:	9b10      	ldr	r3, [sp, #64]	; 0x40
        rem = (unsigned char) zl & 0xf;
        zl = ( zh << 60 ) | ( zl >> 4 );
        zh = ( zh >> 4 );
        zh ^= (uint64_t) last4[rem] << 48;
        zh ^= ctx->HH[hi];
        zl ^= ctx->HL[hi];
   dc878:	e9de 450e 	ldrd	r4, r5, [lr, #56]	; 0x38
    lo = x[15] & 0xf;

    zh = ctx->HH[lo];
    zl = ctx->HL[lo];

    for( i = 15; i >= 0; i-- )
   dc87c:	4299      	cmp	r1, r3
        rem = (unsigned char) zl & 0xf;
        zl = ( zh << 60 ) | ( zl >> 4 );
        zh = ( zh >> 4 );
        zh ^= (uint64_t) last4[rem] << 48;
        zh ^= ctx->HH[hi];
        zl ^= ctx->HL[hi];
   dc87e:	ea84 0408 	eor.w	r4, r4, r8
   dc882:	ea85 0509 	eor.w	r5, r5, r9
    lo = x[15] & 0xf;

    zh = ctx->HH[lo];
    zl = ctx->HL[lo];

    for( i = 15; i >= 0; i-- )
   dc886:	f47f af7a 	bne.w	dc77e <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh+0x22>
        zh ^= (uint64_t) last4[rem] << 48;
        zh ^= ctx->HH[hi];
        zl ^= ctx->HL[hi];
    }

    PUT_UINT32_BE( zh >> 32, output, 0 );
   dc88a:	0e3b      	lsrs	r3, r7, #24
   dc88c:	7013      	strb	r3, [r2, #0]
   dc88e:	0c3b      	lsrs	r3, r7, #16
   dc890:	7053      	strb	r3, [r2, #1]
   dc892:	0a3b      	lsrs	r3, r7, #8
   dc894:	7093      	strb	r3, [r2, #2]
    PUT_UINT32_BE( zh, output, 4 );
   dc896:	0e33      	lsrs	r3, r6, #24
   dc898:	7113      	strb	r3, [r2, #4]
   dc89a:	0c33      	lsrs	r3, r6, #16
   dc89c:	7153      	strb	r3, [r2, #5]
   dc89e:	0a33      	lsrs	r3, r6, #8
   dc8a0:	7193      	strb	r3, [r2, #6]
    PUT_UINT32_BE( zl >> 32, output, 8 );
   dc8a2:	0e2b      	lsrs	r3, r5, #24
   dc8a4:	7213      	strb	r3, [r2, #8]
   dc8a6:	0c2b      	lsrs	r3, r5, #16
   dc8a8:	7253      	strb	r3, [r2, #9]
   dc8aa:	0a2b      	lsrs	r3, r5, #8
   dc8ac:	7293      	strb	r3, [r2, #10]
    PUT_UINT32_BE( zl, output, 12 );
   dc8ae:	0e23      	lsrs	r3, r4, #24
   dc8b0:	7313      	strb	r3, [r2, #12]
   dc8b2:	0c23      	lsrs	r3, r4, #16
   dc8b4:	7353      	strb	r3, [r2, #13]
   dc8b6:	0a23      	lsrs	r3, r4, #8
        zh ^= (uint64_t) last4[rem] << 48;
        zh ^= ctx->HH[hi];
        zl ^= ctx->HL[hi];
    }

    PUT_UINT32_BE( zh >> 32, output, 0 );
   dc8b8:	70d7      	strb	r7, [r2, #3]
    PUT_UINT32_BE( zh, output, 4 );
   dc8ba:	71d6      	strb	r6, [r2, #7]
    PUT_UINT32_BE( zl >> 32, output, 8 );
   dc8bc:	72d5      	strb	r5, [r2, #11]
    PUT_UINT32_BE( zl, output, 12 );
   dc8be:	7393      	strb	r3, [r2, #14]
   dc8c0:	73d4      	strb	r4, [r2, #15]
}
   dc8c2:	b013      	add	sp, #76	; 0x4c
   dc8c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc8c8:	000edde8 	.word	0x000edde8

000dc8cc <mbedtls_gcm_init>:
 * Initialize a context
 */
void mbedtls_gcm_init( mbedtls_gcm_context *ctx )
{
    GCM_VALIDATE( ctx != NULL );
    memset( ctx, 0, sizeof( mbedtls_gcm_context ) );
   dc8cc:	f44f 72c0 	mov.w	r2, #384	; 0x180
   dc8d0:	2100      	movs	r1, #0
   dc8d2:	f00d b916 	b.w	e9b02 <memset>

000dc8d6 <mbedtls_gcm_setkey>:

int mbedtls_gcm_setkey( mbedtls_gcm_context *ctx,
                        mbedtls_cipher_id_t cipher,
                        const unsigned char *key,
                        unsigned int keybits )
{
   dc8d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc8da:	4604      	mov	r4, r0
   dc8dc:	b08d      	sub	sp, #52	; 0x34
   dc8de:	4608      	mov	r0, r1
   dc8e0:	4691      	mov	r9, r2

    GCM_VALIDATE_RET( ctx != NULL );
    GCM_VALIDATE_RET( key != NULL );
    GCM_VALIDATE_RET( keybits == 128 || keybits == 192 || keybits == 256 );

    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
   dc8e2:	4619      	mov	r1, r3
   dc8e4:	2201      	movs	r2, #1

int mbedtls_gcm_setkey( mbedtls_gcm_context *ctx,
                        mbedtls_cipher_id_t cipher,
                        const unsigned char *key,
                        unsigned int keybits )
{
   dc8e6:	4698      	mov	r8, r3

    GCM_VALIDATE_RET( ctx != NULL );
    GCM_VALIDATE_RET( key != NULL );
    GCM_VALIDATE_RET( keybits == 128 || keybits == 192 || keybits == 256 );

    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
   dc8e8:	f7f9 fbf6 	bl	d60d8 <mbedtls_cipher_info_from_values>
    if( cipher_info == NULL )
   dc8ec:	2800      	cmp	r0, #0
   dc8ee:	f000 809c 	beq.w	dca2a <mbedtls_gcm_setkey+0x154>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    if( cipher_info->block_size != 16 )
   dc8f2:	6945      	ldr	r5, [r0, #20]
   dc8f4:	9002      	str	r0, [sp, #8]
   dc8f6:	2d10      	cmp	r5, #16
   dc8f8:	f040 8097 	bne.w	dca2a <mbedtls_gcm_setkey+0x154>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    mbedtls_cipher_free( &ctx->cipher_ctx );
   dc8fc:	4620      	mov	r0, r4
   dc8fe:	f7f9 fc03 	bl	d6108 <mbedtls_cipher_free>

    if( ( ret = mbedtls_cipher_setup( &ctx->cipher_ctx, cipher_info ) ) != 0 )
   dc902:	9902      	ldr	r1, [sp, #8]
   dc904:	4620      	mov	r0, r4
   dc906:	f7f9 fc0f 	bl	d6128 <mbedtls_cipher_setup>
   dc90a:	4684      	mov	ip, r0
   dc90c:	2800      	cmp	r0, #0
   dc90e:	f040 808e 	bne.w	dca2e <mbedtls_gcm_setkey+0x158>
        return( ret );

    if( ( ret = mbedtls_cipher_setkey( &ctx->cipher_ctx, key, keybits,
   dc912:	2301      	movs	r3, #1
   dc914:	4642      	mov	r2, r8
   dc916:	4649      	mov	r1, r9
   dc918:	4620      	mov	r0, r4
   dc91a:	f7f9 fc1d 	bl	d6158 <mbedtls_cipher_setkey>
   dc91e:	4684      	mov	ip, r0
   dc920:	2800      	cmp	r0, #0
   dc922:	f040 8084 	bne.w	dca2e <mbedtls_gcm_setkey+0x158>
    uint64_t hi, lo;
    uint64_t vl, vh;
    unsigned char h[16];
    size_t olen = 0;

    memset( h, 0, 16 );
   dc926:	4601      	mov	r1, r0
{
    int ret, i, j;
    uint64_t hi, lo;
    uint64_t vl, vh;
    unsigned char h[16];
    size_t olen = 0;
   dc928:	9007      	str	r0, [sp, #28]

    memset( h, 0, 16 );
   dc92a:	462a      	mov	r2, r5
   dc92c:	a808      	add	r0, sp, #32
   dc92e:	f00d f8e8 	bl	e9b02 <memset>
    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, h, 16, h, &olen ) ) != 0 )
   dc932:	ab07      	add	r3, sp, #28
   dc934:	9300      	str	r3, [sp, #0]
   dc936:	ab08      	add	r3, sp, #32
   dc938:	462a      	mov	r2, r5
   dc93a:	4619      	mov	r1, r3
   dc93c:	4620      	mov	r0, r4
   dc93e:	f7f9 fc55 	bl	d61ec <mbedtls_cipher_update>
   dc942:	4684      	mov	ip, r0
   dc944:	2800      	cmp	r0, #0
   dc946:	d172      	bne.n	dca2e <mbedtls_gcm_setkey+0x158>
   dc948:	9b09      	ldr	r3, [sp, #36]	; 0x24
        return( ret );

    /* pack h as two 64-bits ints, big-endian */
    GET_UINT32_BE( hi, h,  0  );
    GET_UINT32_BE( lo, h,  4  );
    vh = (uint64_t) hi << 32 | lo;
   dc94a:	9908      	ldr	r1, [sp, #32]

    GET_UINT32_BE( hi, h,  8  );
    GET_UINT32_BE( lo, h,  12 );
    vl = (uint64_t) hi << 32 | lo;
   dc94c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   dc94e:	ba18      	rev	r0, r3
        return( ret );

    /* pack h as two 64-bits ints, big-endian */
    GET_UINT32_BE( hi, h,  0  );
    GET_UINT32_BE( lo, h,  4  );
    vh = (uint64_t) hi << 32 | lo;
   dc950:	ba0b      	rev	r3, r1
   dc952:	990b      	ldr	r1, [sp, #44]	; 0x2c
   dc954:	4662      	mov	r2, ip
   dc956:	fa91 fe81 	rev.w	lr, r1
   dc95a:	4302      	orrs	r2, r0

    GET_UINT32_BE( hi, h,  8  );
    GET_UINT32_BE( lo, h,  12 );
    vl = (uint64_t) hi << 32 | lo;
   dc95c:	ba29      	rev	r1, r5
   dc95e:	ea4c 000e 	orr.w	r0, ip, lr

    /* 8 = 1000 corresponds to 1 in GF(2^128) */
    ctx->HL[8] = vl;
   dc962:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    ctx->HH[8] = vh;
   dc966:	e9c4 233e 	strd	r2, r3, [r4, #248]	; 0xf8
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_CLMUL ) )
        return( 0 );
#endif

    /* 0 corresponds to 0 in GF(2^128) */
    ctx->HH[0] = 0;
   dc96a:	f04f 0900 	mov.w	r9, #0
   dc96e:	f04f 0800 	mov.w	r8, #0
   dc972:	e9c4 892e 	strd	r8, r9, [r4, #184]	; 0xb8
    ctx->HL[0] = 0;
   dc976:	e9c4 890e 	strd	r8, r9, [r4, #56]	; 0x38
   dc97a:	f04f 0e03 	mov.w	lr, #3

    for( i = 4; i > 0; i >>= 1 )
   dc97e:	2504      	movs	r5, #4
    {
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
   dc980:	f04f 4961 	mov.w	r9, #3774873600	; 0xe1000000
   dc984:	f000 0801 	and.w	r8, r0, #1
        vl  = ( vh << 63 ) | ( vl >> 1 );
   dc988:	07d7      	lsls	r7, r2, #31
   dc98a:	0849      	lsrs	r1, r1, #1
   dc98c:	ea4f 0030 	mov.w	r0, r0, rrx
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
   dc990:	085b      	lsrs	r3, r3, #1
   dc992:	ea4f 0232 	mov.w	r2, r2, rrx
    ctx->HL[0] = 0;

    for( i = 4; i > 0; i >>= 1 )
    {
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
        vl  = ( vh << 63 ) | ( vl >> 1 );
   dc996:	2600      	movs	r6, #0
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
   dc998:	fb09 fb08 	mul.w	fp, r9, r8
    ctx->HL[0] = 0;

    for( i = 4; i > 0; i >>= 1 )
    {
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
        vl  = ( vh << 63 ) | ( vl >> 1 );
   dc99c:	4330      	orrs	r0, r6
   dc99e:	eb04 08c5 	add.w	r8, r4, r5, lsl #3
   dc9a2:	4339      	orrs	r1, r7
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
   dc9a4:	4072      	eors	r2, r6
   dc9a6:	ea83 030b 	eor.w	r3, r3, fp

    /* 0 corresponds to 0 in GF(2^128) */
    ctx->HH[0] = 0;
    ctx->HL[0] = 0;

    for( i = 4; i > 0; i >>= 1 )
   dc9aa:	f1be 0e01 	subs.w	lr, lr, #1
    {
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
        vl  = ( vh << 63 ) | ( vl >> 1 );
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);

        ctx->HL[i] = vl;
   dc9ae:	e9c8 010e 	strd	r0, r1, [r8, #56]	; 0x38
        ctx->HH[i] = vh;
   dc9b2:	e9c8 232e 	strd	r2, r3, [r8, #184]	; 0xb8

    /* 0 corresponds to 0 in GF(2^128) */
    ctx->HH[0] = 0;
    ctx->HL[0] = 0;

    for( i = 4; i > 0; i >>= 1 )
   dc9b6:	ea4f 0565 	mov.w	r5, r5, asr #1
   dc9ba:	d1e3      	bne.n	dc984 <mbedtls_gcm_setkey+0xae>
   dc9bc:	f04f 0803 	mov.w	r8, #3
   dc9c0:	2202      	movs	r2, #2
        ctx->HH[i] = vh;
    }

    for( i = 2; i <= 8; i *= 2 )
    {
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
   dc9c2:	f104 0938 	add.w	r9, r4, #56	; 0x38
   dc9c6:	f104 0eb8 	add.w	lr, r4, #184	; 0xb8
   dc9ca:	00d3      	lsls	r3, r2, #3
   dc9cc:	eb09 0703 	add.w	r7, r9, r3
   dc9d0:	4473      	add	r3, lr
        vh = *HiH;
   dc9d2:	e9d3 0100 	ldrd	r0, r1, [r3]
   dc9d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
        vl = *HiL;
   dc9da:	e9d7 0100 	ldrd	r0, r1, [r7]
   dc9de:	4676      	mov	r6, lr
   dc9e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
   dc9e4:	4648      	mov	r0, r9
        for( j = 1; j < i; j++ )
   dc9e6:	2101      	movs	r1, #1
        {
            HiH[j] = vh ^ ctx->HH[j];
   dc9e8:	e9f6 4502 	ldrd	r4, r5, [r6, #8]!
   dc9ec:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   dc9f0:	ea8a 0a04 	eor.w	sl, sl, r4
   dc9f4:	ea8b 0b05 	eor.w	fp, fp, r5
   dc9f8:	4654      	mov	r4, sl
   dc9fa:	465d      	mov	r5, fp
   dc9fc:	e9e3 4502 	strd	r4, r5, [r3, #8]!
            HiL[j] = vl ^ ctx->HL[j];
   dca00:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   dca04:	e9f0 4502 	ldrd	r4, r5, [r0, #8]!
    for( i = 2; i <= 8; i *= 2 )
    {
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
        vh = *HiH;
        vl = *HiL;
        for( j = 1; j < i; j++ )
   dca08:	3101      	adds	r1, #1
        {
            HiH[j] = vh ^ ctx->HH[j];
            HiL[j] = vl ^ ctx->HL[j];
   dca0a:	ea8a 0a04 	eor.w	sl, sl, r4
   dca0e:	ea8b 0b05 	eor.w	fp, fp, r5
   dca12:	4654      	mov	r4, sl
   dca14:	465d      	mov	r5, fp
    for( i = 2; i <= 8; i *= 2 )
    {
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
        vh = *HiH;
        vl = *HiL;
        for( j = 1; j < i; j++ )
   dca16:	4291      	cmp	r1, r2
        {
            HiH[j] = vh ^ ctx->HH[j];
            HiL[j] = vl ^ ctx->HL[j];
   dca18:	e9e7 4502 	strd	r4, r5, [r7, #8]!
    for( i = 2; i <= 8; i *= 2 )
    {
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
        vh = *HiH;
        vl = *HiL;
        for( j = 1; j < i; j++ )
   dca1c:	d1e4      	bne.n	dc9e8 <mbedtls_gcm_setkey+0x112>

        ctx->HL[i] = vl;
        ctx->HH[i] = vh;
    }

    for( i = 2; i <= 8; i *= 2 )
   dca1e:	f1b8 0801 	subs.w	r8, r8, #1
   dca22:	ea4f 0242 	mov.w	r2, r2, lsl #1
   dca26:	d1d0      	bne.n	dc9ca <mbedtls_gcm_setkey+0xf4>
   dca28:	e001      	b.n	dca2e <mbedtls_gcm_setkey+0x158>
    GCM_VALIDATE_RET( key != NULL );
    GCM_VALIDATE_RET( keybits == 128 || keybits == 192 || keybits == 256 );

    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
   dca2a:	f06f 0c13 	mvn.w	ip, #19

    if( ( ret = gcm_gen_table( ctx ) ) != 0 )
        return( ret );

    return( 0 );
}
   dca2e:	4660      	mov	r0, ip
   dca30:	b00d      	add	sp, #52	; 0x34
   dca32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000dca36 <mbedtls_gcm_starts>:
                int mode,
                const unsigned char *iv,
                size_t iv_len,
                const unsigned char *add,
                size_t add_len )
{
   dca36:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dca3a:	b08b      	sub	sp, #44	; 0x2c
    int ret;
    unsigned char work_buf[16];
    size_t i;
    const unsigned char *p;
    size_t use_len, olen = 0;
   dca3c:	f04f 0900 	mov.w	r9, #0
                int mode,
                const unsigned char *iv,
                size_t iv_len,
                const unsigned char *add,
                size_t add_len )
{
   dca40:	4604      	mov	r4, r0
   dca42:	468b      	mov	fp, r1
   dca44:	4617      	mov	r7, r2
   dca46:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
    int ret;
    unsigned char work_buf[16];
    size_t i;
    const unsigned char *p;
    size_t use_len, olen = 0;
   dca4a:	f8cd 9014 	str.w	r9, [sp, #20]
    GCM_VALIDATE_RET( iv != NULL );
    GCM_VALIDATE_RET( add_len == 0 || add != NULL );

    /* IV and AD are limited to 2^64 bits, so 2^61 bytes */
    /* IV is not allowed to be zero length */
    if( iv_len == 0 ||
   dca4e:	461d      	mov	r5, r3
   dca50:	2b00      	cmp	r3, #0
   dca52:	f000 808e 	beq.w	dcb72 <mbedtls_gcm_starts+0x13c>
      ( (uint64_t) add_len ) >> 61 != 0 )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
    }

    memset( ctx->y, 0x00, sizeof(ctx->y) );
   dca56:	f500 76ac 	add.w	r6, r0, #344	; 0x158
   dca5a:	2210      	movs	r2, #16
   dca5c:	4649      	mov	r1, r9
   dca5e:	4630      	mov	r0, r6
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );
   dca60:	f504 7ab4 	add.w	sl, r4, #360	; 0x168
      ( (uint64_t) add_len ) >> 61 != 0 )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
    }

    memset( ctx->y, 0x00, sizeof(ctx->y) );
   dca64:	f00d f84d 	bl	e9b02 <memset>
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );
   dca68:	4649      	mov	r1, r9
   dca6a:	2210      	movs	r2, #16
   dca6c:	4650      	mov	r0, sl
   dca6e:	f00d f848 	bl	e9b02 <memset>

    ctx->mode = mode;
   dca72:	f8c4 b178 	str.w	fp, [r4, #376]	; 0x178
    ctx->len = 0;
   dca76:	2000      	movs	r0, #0
   dca78:	2100      	movs	r1, #0
   dca7a:	f504 739c 	add.w	r3, r4, #312	; 0x138
    ctx->add_len = 0;
   dca7e:	46a3      	mov	fp, r4

    if( iv_len == 12 )
   dca80:	2d0c      	cmp	r5, #12

    memset( ctx->y, 0x00, sizeof(ctx->y) );
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );

    ctx->mode = mode;
    ctx->len = 0;
   dca82:	e9c3 0100 	strd	r0, r1, [r3]
    ctx->add_len = 0;
   dca86:	e9eb 0150 	strd	r0, r1, [fp, #320]!	; 0x140

    if( iv_len == 12 )
   dca8a:	d10a      	bne.n	dcaa2 <mbedtls_gcm_starts+0x6c>
    {
        memcpy( ctx->y, iv, iv_len );
   dca8c:	683b      	ldr	r3, [r7, #0]
   dca8e:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
   dca92:	687b      	ldr	r3, [r7, #4]
   dca94:	6073      	str	r3, [r6, #4]
   dca96:	68bb      	ldr	r3, [r7, #8]
   dca98:	60b3      	str	r3, [r6, #8]
        ctx->y[15] = 1;
   dca9a:	2301      	movs	r3, #1
   dca9c:	f884 3167 	strb.w	r3, [r4, #359]	; 0x167
   dcaa0:	e03a      	b.n	dcb18 <mbedtls_gcm_starts+0xe2>
    }
    else
    {
        memset( work_buf, 0x00, 16 );
   dcaa2:	2210      	movs	r2, #16
   dcaa4:	4649      	mov	r1, r9
   dcaa6:	a806      	add	r0, sp, #24
   dcaa8:	f00d f82b 	bl	e9b02 <memset>
        PUT_UINT32_BE( iv_len * 8, work_buf, 12 );
   dcaac:	00eb      	lsls	r3, r5, #3
   dcaae:	0e1a      	lsrs	r2, r3, #24
   dcab0:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
   dcab4:	0c1a      	lsrs	r2, r3, #16
   dcab6:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
   dcaba:	0a1a      	lsrs	r2, r3, #8
   dcabc:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
   dcac0:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27

        p = iv;
        while( iv_len > 0 )
        {
            use_len = ( iv_len < 16 ) ? iv_len : 16;
   dcac4:	2d10      	cmp	r5, #16
   dcac6:	462b      	mov	r3, r5
   dcac8:	f204 1957 	addw	r9, r4, #343	; 0x157
   dcacc:	bf28      	it	cs
   dcace:	2310      	movcs	r3, #16
   dcad0:	463a      	mov	r2, r7
   dcad2:	4649      	mov	r1, r9
   dcad4:	441f      	add	r7, r3

            for( i = 0; i < use_len; i++ )
                ctx->y[i] ^= p[i];
   dcad6:	f812 eb01 	ldrb.w	lr, [r2], #1
   dcada:	f811 0f01 	ldrb.w	r0, [r1, #1]!
        p = iv;
        while( iv_len > 0 )
        {
            use_len = ( iv_len < 16 ) ? iv_len : 16;

            for( i = 0; i < use_len; i++ )
   dcade:	42ba      	cmp	r2, r7
                ctx->y[i] ^= p[i];
   dcae0:	ea8e 0000 	eor.w	r0, lr, r0
   dcae4:	7008      	strb	r0, [r1, #0]
        p = iv;
        while( iv_len > 0 )
        {
            use_len = ( iv_len < 16 ) ? iv_len : 16;

            for( i = 0; i < use_len; i++ )
   dcae6:	d1f6      	bne.n	dcad6 <mbedtls_gcm_starts+0xa0>
                ctx->y[i] ^= p[i];

            gcm_mult( ctx, ctx->y, ctx->y );
   dcae8:	4632      	mov	r2, r6
   dcaea:	4631      	mov	r1, r6
   dcaec:	4620      	mov	r0, r4
   dcaee:	9303      	str	r3, [sp, #12]
   dcaf0:	f7ff fe34 	bl	dc75c <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>
    {
        memset( work_buf, 0x00, 16 );
        PUT_UINT32_BE( iv_len * 8, work_buf, 12 );

        p = iv;
        while( iv_len > 0 )
   dcaf4:	9b03      	ldr	r3, [sp, #12]
   dcaf6:	1aed      	subs	r5, r5, r3
   dcaf8:	d1e4      	bne.n	dcac4 <mbedtls_gcm_starts+0x8e>
            iv_len -= use_len;
            p += use_len;
        }

        for( i = 0; i < 16; i++ )
            ctx->y[i] ^= work_buf[i];
   dcafa:	ab06      	add	r3, sp, #24
   dcafc:	f819 2f01 	ldrb.w	r2, [r9, #1]!
   dcb00:	5d5b      	ldrb	r3, [r3, r5]

            iv_len -= use_len;
            p += use_len;
        }

        for( i = 0; i < 16; i++ )
   dcb02:	3501      	adds	r5, #1
            ctx->y[i] ^= work_buf[i];
   dcb04:	4053      	eors	r3, r2

            iv_len -= use_len;
            p += use_len;
        }

        for( i = 0; i < 16; i++ )
   dcb06:	2d10      	cmp	r5, #16
            ctx->y[i] ^= work_buf[i];
   dcb08:	f889 3000 	strb.w	r3, [r9]

            iv_len -= use_len;
            p += use_len;
        }

        for( i = 0; i < 16; i++ )
   dcb0c:	d1f5      	bne.n	dcafa <mbedtls_gcm_starts+0xc4>
            ctx->y[i] ^= work_buf[i];

        gcm_mult( ctx, ctx->y, ctx->y );
   dcb0e:	4632      	mov	r2, r6
   dcb10:	4631      	mov	r1, r6
   dcb12:	4620      	mov	r0, r4
   dcb14:	f7ff fe22 	bl	dc75c <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>
    }

    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ctx->base_ectr,
   dcb18:	ab05      	add	r3, sp, #20
   dcb1a:	9300      	str	r3, [sp, #0]
   dcb1c:	2210      	movs	r2, #16
   dcb1e:	f504 73a4 	add.w	r3, r4, #328	; 0x148
   dcb22:	4631      	mov	r1, r6
   dcb24:	4620      	mov	r0, r4
   dcb26:	f7f9 fb61 	bl	d61ec <mbedtls_cipher_update>
   dcb2a:	4605      	mov	r5, r0
   dcb2c:	bb18      	cbnz	r0, dcb76 <mbedtls_gcm_starts+0x140>
                             &olen ) ) != 0 )
    {
        return( ret );
    }

    ctx->add_len = add_len;
   dcb2e:	f8c4 8140 	str.w	r8, [r4, #320]	; 0x140
   dcb32:	f8cb 0004 	str.w	r0, [fp, #4]
    p = add;
    while( add_len > 0 )
   dcb36:	f1b8 0f00 	cmp.w	r8, #0
   dcb3a:	d01c      	beq.n	dcb76 <mbedtls_gcm_starts+0x140>
    {
        use_len = ( add_len < 16 ) ? add_len : 16;
   dcb3c:	4646      	mov	r6, r8
   dcb3e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   dcb40:	2e10      	cmp	r6, #16
   dcb42:	bf28      	it	cs
   dcb44:	2610      	movcs	r6, #16
   dcb46:	4619      	mov	r1, r3
   dcb48:	4431      	add	r1, r6
   dcb4a:	f204 1267 	addw	r2, r4, #359	; 0x167
   dcb4e:	9114      	str	r1, [sp, #80]	; 0x50

        for( i = 0; i < use_len; i++ )
            ctx->buf[i] ^= p[i];
   dcb50:	f813 0b01 	ldrb.w	r0, [r3], #1
   dcb54:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   dcb58:	4041      	eors	r1, r0
   dcb5a:	7011      	strb	r1, [r2, #0]
    p = add;
    while( add_len > 0 )
    {
        use_len = ( add_len < 16 ) ? add_len : 16;

        for( i = 0; i < use_len; i++ )
   dcb5c:	9914      	ldr	r1, [sp, #80]	; 0x50
   dcb5e:	4299      	cmp	r1, r3
   dcb60:	d1f6      	bne.n	dcb50 <mbedtls_gcm_starts+0x11a>
            ctx->buf[i] ^= p[i];

        gcm_mult( ctx, ctx->buf, ctx->buf );
   dcb62:	4652      	mov	r2, sl
   dcb64:	4651      	mov	r1, sl
   dcb66:	4620      	mov	r0, r4
   dcb68:	f7ff fdf8 	bl	dc75c <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>

        add_len -= use_len;
   dcb6c:	ebc6 0808 	rsb	r8, r6, r8
        return( ret );
    }

    ctx->add_len = add_len;
    p = add;
    while( add_len > 0 )
   dcb70:	e7e1      	b.n	dcb36 <mbedtls_gcm_starts+0x100>
    /* IV is not allowed to be zero length */
    if( iv_len == 0 ||
      ( (uint64_t) iv_len  ) >> 61 != 0 ||
      ( (uint64_t) add_len ) >> 61 != 0 )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
   dcb72:	f06f 0513 	mvn.w	r5, #19
        add_len -= use_len;
        p += use_len;
    }

    return( 0 );
}
   dcb76:	4628      	mov	r0, r5
   dcb78:	b00b      	add	sp, #44	; 0x2c
   dcb7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000dcb7e <mbedtls_gcm_update>:

int mbedtls_gcm_update( mbedtls_gcm_context *ctx,
                size_t length,
                const unsigned char *input,
                unsigned char *output )
{
   dcb7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dcb82:	461f      	mov	r7, r3
   dcb84:	b08b      	sub	sp, #44	; 0x2c
    int ret;
    unsigned char ectr[16];
    size_t i;
    const unsigned char *p;
    unsigned char *out_p = output;
    size_t use_len, olen = 0;
   dcb86:	2300      	movs	r3, #0

    GCM_VALIDATE_RET( ctx != NULL );
    GCM_VALIDATE_RET( length == 0 || input != NULL );
    GCM_VALIDATE_RET( length == 0 || output != NULL );

    if( output > input && (size_t) ( output - input ) < length )
   dcb88:	4297      	cmp	r7, r2

int mbedtls_gcm_update( mbedtls_gcm_context *ctx,
                size_t length,
                const unsigned char *input,
                unsigned char *output )
{
   dcb8a:	4604      	mov	r4, r0
   dcb8c:	460e      	mov	r6, r1
   dcb8e:	4690      	mov	r8, r2
    int ret;
    unsigned char ectr[16];
    size_t i;
    const unsigned char *p;
    unsigned char *out_p = output;
    size_t use_len, olen = 0;
   dcb90:	9305      	str	r3, [sp, #20]

    GCM_VALIDATE_RET( ctx != NULL );
    GCM_VALIDATE_RET( length == 0 || input != NULL );
    GCM_VALIDATE_RET( length == 0 || output != NULL );

    if( output > input && (size_t) ( output - input ) < length )
   dcb92:	d902      	bls.n	dcb9a <mbedtls_gcm_update+0x1c>
   dcb94:	1abb      	subs	r3, r7, r2
   dcb96:	428b      	cmp	r3, r1
   dcb98:	d35d      	bcc.n	dcc56 <mbedtls_gcm_update+0xd8>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    /* Total length is restricted to 2^39 - 256 bits, ie 2^36 - 2^5 bytes
     * Also check for possible overflow */
    if( ctx->len + length < ctx->len ||
   dcb9a:	4625      	mov	r5, r4
   dcb9c:	e9f5 014e 	ldrd	r0, r1, [r5, #312]!	; 0x138
   dcba0:	1982      	adds	r2, r0, r6
   dcba2:	f141 0300 	adc.w	r3, r1, #0
   dcba6:	428b      	cmp	r3, r1
   dcba8:	bf08      	it	eq
   dcbaa:	4282      	cmpeq	r2, r0
   dcbac:	d353      	bcc.n	dcc56 <mbedtls_gcm_update+0xd8>
   dcbae:	210f      	movs	r1, #15
   dcbb0:	f06f 001f 	mvn.w	r0, #31
   dcbb4:	4299      	cmp	r1, r3
   dcbb6:	bf08      	it	eq
   dcbb8:	4290      	cmpeq	r0, r2
   dcbba:	d34c      	bcc.n	dcc56 <mbedtls_gcm_update+0xd8>
        (uint64_t) ctx->len + length > 0xFFFFFFFE0ull )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
    }

    ctx->len += length;
   dcbbc:	e9c5 2300 	strd	r2, r3, [r5]
   dcbc0:	f504 73b2 	add.w	r3, r4, #356	; 0x164
   dcbc4:	9302      	str	r3, [sp, #8]

        for( i = 16; i > 12; i-- )
            if( ++ctx->y[i - 1] != 0 )
                break;

        if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ectr,
   dcbc6:	f504 73ac 	add.w	r3, r4, #344	; 0x158
   dcbca:	f10d 0a18 	add.w	sl, sp, #24
   dcbce:	9303      	str	r3, [sp, #12]
    }

    ctx->len += length;

    p = input;
    while( length > 0 )
   dcbd0:	2e00      	cmp	r6, #0
   dcbd2:	d043      	beq.n	dcc5c <mbedtls_gcm_update+0xde>
   dcbd4:	f504 75b4 	add.w	r5, r4, #360	; 0x168
    {
        use_len = ( length < 16 ) ? length : 16;
   dcbd8:	2e10      	cmp	r6, #16
   dcbda:	46b1      	mov	r9, r6
   dcbdc:	462a      	mov	r2, r5
   dcbde:	bf28      	it	cs
   dcbe0:	f04f 0910 	movcs.w	r9, #16
   dcbe4:	46ab      	mov	fp, r5

        for( i = 16; i > 12; i-- )
            if( ++ctx->y[i - 1] != 0 )
   dcbe6:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
   dcbea:	3301      	adds	r3, #1
   dcbec:	b2db      	uxtb	r3, r3
   dcbee:	7013      	strb	r3, [r2, #0]
   dcbf0:	b913      	cbnz	r3, dcbf8 <mbedtls_gcm_update+0x7a>
    p = input;
    while( length > 0 )
    {
        use_len = ( length < 16 ) ? length : 16;

        for( i = 16; i > 12; i-- )
   dcbf2:	9b02      	ldr	r3, [sp, #8]
   dcbf4:	429a      	cmp	r2, r3
   dcbf6:	d1f6      	bne.n	dcbe6 <mbedtls_gcm_update+0x68>
            if( ++ctx->y[i - 1] != 0 )
                break;

        if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ectr,
   dcbf8:	ab05      	add	r3, sp, #20
   dcbfa:	9300      	str	r3, [sp, #0]
   dcbfc:	2210      	movs	r2, #16
   dcbfe:	4653      	mov	r3, sl
   dcc00:	9903      	ldr	r1, [sp, #12]
   dcc02:	4620      	mov	r0, r4
   dcc04:	f7f9 faf2 	bl	d61ec <mbedtls_cipher_update>
   dcc08:	bb48      	cbnz	r0, dcc5e <mbedtls_gcm_update+0xe0>
   dcc0a:	4642      	mov	r2, r8
            return( ret );
        }

        for( i = 0; i < use_len; i++ )
        {
            if( ctx->mode == MBEDTLS_GCM_DECRYPT )
   dcc0c:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
   dcc10:	b91b      	cbnz	r3, dcc1a <mbedtls_gcm_update+0x9c>
                ctx->buf[i] ^= p[i];
   dcc12:	7829      	ldrb	r1, [r5, #0]
   dcc14:	7813      	ldrb	r3, [r2, #0]
   dcc16:	404b      	eors	r3, r1
   dcc18:	702b      	strb	r3, [r5, #0]
            out_p[i] = ectr[i] ^ p[i];
   dcc1a:	f812 1b01 	ldrb.w	r1, [r2], #1
   dcc1e:	f81a 3000 	ldrb.w	r3, [sl, r0]
   dcc22:	404b      	eors	r3, r1
   dcc24:	543b      	strb	r3, [r7, r0]
            if( ctx->mode == MBEDTLS_GCM_ENCRYPT )
   dcc26:	f8d4 1178 	ldr.w	r1, [r4, #376]	; 0x178
   dcc2a:	2901      	cmp	r1, #1
                ctx->buf[i] ^= out_p[i];
   dcc2c:	bf08      	it	eq
   dcc2e:	7829      	ldrbeq	r1, [r5, #0]
                                   &olen ) ) != 0 )
        {
            return( ret );
        }

        for( i = 0; i < use_len; i++ )
   dcc30:	f100 0001 	add.w	r0, r0, #1
        {
            if( ctx->mode == MBEDTLS_GCM_DECRYPT )
                ctx->buf[i] ^= p[i];
            out_p[i] = ectr[i] ^ p[i];
            if( ctx->mode == MBEDTLS_GCM_ENCRYPT )
                ctx->buf[i] ^= out_p[i];
   dcc34:	bf04      	itt	eq
   dcc36:	404b      	eoreq	r3, r1
   dcc38:	702b      	strbeq	r3, [r5, #0]
                                   &olen ) ) != 0 )
        {
            return( ret );
        }

        for( i = 0; i < use_len; i++ )
   dcc3a:	4581      	cmp	r9, r0
   dcc3c:	f105 0501 	add.w	r5, r5, #1
   dcc40:	d1e4      	bne.n	dcc0c <mbedtls_gcm_update+0x8e>
            out_p[i] = ectr[i] ^ p[i];
            if( ctx->mode == MBEDTLS_GCM_ENCRYPT )
                ctx->buf[i] ^= out_p[i];
        }

        gcm_mult( ctx, ctx->buf, ctx->buf );
   dcc42:	465a      	mov	r2, fp
   dcc44:	4659      	mov	r1, fp
   dcc46:	4620      	mov	r0, r4
   dcc48:	f7ff fd88 	bl	dc75c <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>

        length -= use_len;
   dcc4c:	ebc9 0606 	rsb	r6, r9, r6
        p += use_len;
   dcc50:	44c8      	add	r8, r9
        out_p += use_len;
   dcc52:	444f      	add	r7, r9
    }

    ctx->len += length;

    p = input;
    while( length > 0 )
   dcc54:	e7bc      	b.n	dcbd0 <mbedtls_gcm_update+0x52>
    GCM_VALIDATE_RET( ctx != NULL );
    GCM_VALIDATE_RET( length == 0 || input != NULL );
    GCM_VALIDATE_RET( length == 0 || output != NULL );

    if( output > input && (size_t) ( output - input ) < length )
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
   dcc56:	f06f 0013 	mvn.w	r0, #19
   dcc5a:	e000      	b.n	dcc5e <mbedtls_gcm_update+0xe0>
        length -= use_len;
        p += use_len;
        out_p += use_len;
    }

    return( 0 );
   dcc5c:	4630      	mov	r0, r6
}
   dcc5e:	b00b      	add	sp, #44	; 0x2c
   dcc60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000dcc64 <mbedtls_gcm_finish>:

int mbedtls_gcm_finish( mbedtls_gcm_context *ctx,
                unsigned char *tag,
                size_t tag_len )
{
   dcc64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   dcc68:	4688      	mov	r8, r1
    uint64_t orig_add_len;

    GCM_VALIDATE_RET( ctx != NULL );
    GCM_VALIDATE_RET( tag != NULL );

    orig_len = ctx->len * 8;
   dcc6a:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
   dcc6e:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
   dcc72:	00cd      	lsls	r5, r1, #3
    orig_add_len = ctx->add_len * 8;
   dcc74:	f8d0 1144 	ldr.w	r1, [r0, #324]	; 0x144
    uint64_t orig_add_len;

    GCM_VALIDATE_RET( ctx != NULL );
    GCM_VALIDATE_RET( tag != NULL );

    orig_len = ctx->len * 8;
   dcc78:	ea45 7553 	orr.w	r5, r5, r3, lsr #29
   dcc7c:	00dc      	lsls	r4, r3, #3
    orig_add_len = ctx->add_len * 8;
   dcc7e:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
   dcc82:	00cf      	lsls	r7, r1, #3
   dcc84:	ea47 7753 	orr.w	r7, r7, r3, lsr #29
   dcc88:	00de      	lsls	r6, r3, #3

    if( tag_len > 16 || tag_len < 4 )
   dcc8a:	1f13      	subs	r3, r2, #4
   dcc8c:	2b0c      	cmp	r3, #12
}

int mbedtls_gcm_finish( mbedtls_gcm_context *ctx,
                unsigned char *tag,
                size_t tag_len )
{
   dcc8e:	4681      	mov	r9, r0
   dcc90:	4692      	mov	sl, r2
    GCM_VALIDATE_RET( tag != NULL );

    orig_len = ctx->len * 8;
    orig_add_len = ctx->add_len * 8;

    if( tag_len > 16 || tag_len < 4 )
   dcc92:	d85b      	bhi.n	dcd4c <mbedtls_gcm_finish+0xe8>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    memcpy( tag, ctx->base_ectr, tag_len );
   dcc94:	f500 71a4 	add.w	r1, r0, #328	; 0x148
   dcc98:	4640      	mov	r0, r8
   dcc9a:	f00c ff0c 	bl	e9ab6 <memcpy>

    if( orig_len || orig_add_len )
   dcc9e:	ea54 0305 	orrs.w	r3, r4, r5
   dcca2:	d104      	bne.n	dccae <mbedtls_gcm_finish+0x4a>
   dcca4:	ea56 0307 	orrs.w	r3, r6, r7
   dcca8:	d101      	bne.n	dccae <mbedtls_gcm_finish+0x4a>

        for( i = 0; i < tag_len; i++ )
            tag[i] ^= ctx->buf[i];
    }

    return( 0 );
   dccaa:	2000      	movs	r0, #0
   dccac:	e050      	b.n	dcd50 <mbedtls_gcm_finish+0xec>

    memcpy( tag, ctx->base_ectr, tag_len );

    if( orig_len || orig_add_len )
    {
        memset( work_buf, 0x00, 16 );
   dccae:	2210      	movs	r2, #16
   dccb0:	2100      	movs	r1, #0
   dccb2:	4668      	mov	r0, sp
   dccb4:	f00c ff25 	bl	e9b02 <memset>

        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
   dccb8:	0e3b      	lsrs	r3, r7, #24
   dccba:	f88d 3000 	strb.w	r3, [sp]
   dccbe:	0c3b      	lsrs	r3, r7, #16
   dccc0:	f88d 3001 	strb.w	r3, [sp, #1]
   dccc4:	0a3b      	lsrs	r3, r7, #8
   dccc6:	f88d 3002 	strb.w	r3, [sp, #2]
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
   dccca:	0e33      	lsrs	r3, r6, #24
   dcccc:	f88d 3004 	strb.w	r3, [sp, #4]
   dccd0:	0c33      	lsrs	r3, r6, #16
   dccd2:	f88d 3005 	strb.w	r3, [sp, #5]
   dccd6:	0a33      	lsrs	r3, r6, #8
   dccd8:	f88d 3006 	strb.w	r3, [sp, #6]
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
   dccdc:	0e2b      	lsrs	r3, r5, #24
   dccde:	f88d 3008 	strb.w	r3, [sp, #8]
   dcce2:	0c2b      	lsrs	r3, r5, #16
   dcce4:	f88d 3009 	strb.w	r3, [sp, #9]
   dcce8:	0a2b      	lsrs	r3, r5, #8
   dccea:	f88d 300a 	strb.w	r3, [sp, #10]
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );
   dccee:	0e23      	lsrs	r3, r4, #24
   dccf0:	f88d 300c 	strb.w	r3, [sp, #12]
   dccf4:	0c23      	lsrs	r3, r4, #16
   dccf6:	f88d 300d 	strb.w	r3, [sp, #13]
   dccfa:	f88d 400f 	strb.w	r4, [sp, #15]
   dccfe:	0a23      	lsrs	r3, r4, #8
   dcd00:	f209 1467 	addw	r4, r9, #359	; 0x167
   dcd04:	f88d 300e 	strb.w	r3, [sp, #14]

    if( orig_len || orig_add_len )
    {
        memset( work_buf, 0x00, 16 );

        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
   dcd08:	f88d 7003 	strb.w	r7, [sp, #3]
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
   dcd0c:	f88d 6007 	strb.w	r6, [sp, #7]
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
   dcd10:	f88d 500b 	strb.w	r5, [sp, #11]
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );
   dcd14:	4622      	mov	r2, r4

        for( i = 0; i < 16; i++ )
   dcd16:	2300      	movs	r3, #0
            ctx->buf[i] ^= work_buf[i];
   dcd18:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   dcd1c:	f81d 1003 	ldrb.w	r1, [sp, r3]
        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );

        for( i = 0; i < 16; i++ )
   dcd20:	3301      	adds	r3, #1
            ctx->buf[i] ^= work_buf[i];
   dcd22:	4041      	eors	r1, r0
        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );

        for( i = 0; i < 16; i++ )
   dcd24:	2b10      	cmp	r3, #16
            ctx->buf[i] ^= work_buf[i];
   dcd26:	7011      	strb	r1, [r2, #0]
        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );

        for( i = 0; i < 16; i++ )
   dcd28:	d1f6      	bne.n	dcd18 <mbedtls_gcm_finish+0xb4>
            ctx->buf[i] ^= work_buf[i];

        gcm_mult( ctx, ctx->buf, ctx->buf );
   dcd2a:	f509 72b4 	add.w	r2, r9, #360	; 0x168
   dcd2e:	4611      	mov	r1, r2
   dcd30:	4648      	mov	r0, r9
   dcd32:	f7ff fd13 	bl	dc75c <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>
   dcd36:	44c2      	add	sl, r8
   dcd38:	4641      	mov	r1, r8

        for( i = 0; i < tag_len; i++ )
            tag[i] ^= ctx->buf[i];
   dcd3a:	780a      	ldrb	r2, [r1, #0]
   dcd3c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   dcd40:	4053      	eors	r3, r2
   dcd42:	f801 3b01 	strb.w	r3, [r1], #1
        for( i = 0; i < 16; i++ )
            ctx->buf[i] ^= work_buf[i];

        gcm_mult( ctx, ctx->buf, ctx->buf );

        for( i = 0; i < tag_len; i++ )
   dcd46:	4551      	cmp	r1, sl
   dcd48:	d1f7      	bne.n	dcd3a <mbedtls_gcm_finish+0xd6>
   dcd4a:	e7ae      	b.n	dccaa <mbedtls_gcm_finish+0x46>

    orig_len = ctx->len * 8;
    orig_add_len = ctx->add_len * 8;

    if( tag_len > 16 || tag_len < 4 )
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
   dcd4c:	f06f 0013 	mvn.w	r0, #19
        for( i = 0; i < tag_len; i++ )
            tag[i] ^= ctx->buf[i];
    }

    return( 0 );
}
   dcd50:	b004      	add	sp, #16
   dcd52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000dcd56 <mbedtls_gcm_crypt_and_tag>:
                       size_t add_len,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t tag_len,
                       unsigned char *tag )
{
   dcd56:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   dcd5a:	4617      	mov	r7, r2
   dcd5c:	461a      	mov	r2, r3
    GCM_VALIDATE_RET( add_len == 0 || add != NULL );
    GCM_VALIDATE_RET( length == 0 || input != NULL );
    GCM_VALIDATE_RET( length == 0 || output != NULL );
    GCM_VALIDATE_RET( tag != NULL );

    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
   dcd5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   dcd60:	9301      	str	r3, [sp, #4]
   dcd62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   dcd64:	9300      	str	r3, [sp, #0]
   dcd66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
                       size_t add_len,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t tag_len,
                       unsigned char *tag )
{
   dcd68:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   dcd6c:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
   dcd70:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   dcd72:	9d10      	ldr	r5, [sp, #64]	; 0x40
   dcd74:	4604      	mov	r4, r0
    GCM_VALIDATE_RET( add_len == 0 || add != NULL );
    GCM_VALIDATE_RET( length == 0 || input != NULL );
    GCM_VALIDATE_RET( length == 0 || output != NULL );
    GCM_VALIDATE_RET( tag != NULL );

    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
   dcd76:	f7ff fe5e 	bl	dca36 <mbedtls_gcm_starts>
   dcd7a:	b970      	cbnz	r0, dcd9a <mbedtls_gcm_crypt_and_tag+0x44>
        return( ret );

    if( ( ret = mbedtls_gcm_update( ctx, length, input, output ) ) != 0 )
   dcd7c:	464b      	mov	r3, r9
   dcd7e:	4642      	mov	r2, r8
   dcd80:	4639      	mov	r1, r7
   dcd82:	4620      	mov	r0, r4
   dcd84:	f7ff fefb 	bl	dcb7e <mbedtls_gcm_update>
   dcd88:	b938      	cbnz	r0, dcd9a <mbedtls_gcm_crypt_and_tag+0x44>
        return( ret );

    if( ( ret = mbedtls_gcm_finish( ctx, tag, tag_len ) ) != 0 )
   dcd8a:	4632      	mov	r2, r6
   dcd8c:	4629      	mov	r1, r5
   dcd8e:	4620      	mov	r0, r4
        return( ret );

    return( 0 );
}
   dcd90:	b003      	add	sp, #12
   dcd92:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return( ret );

    if( ( ret = mbedtls_gcm_update( ctx, length, input, output ) ) != 0 )
        return( ret );

    if( ( ret = mbedtls_gcm_finish( ctx, tag, tag_len ) ) != 0 )
   dcd96:	f7ff bf65 	b.w	dcc64 <mbedtls_gcm_finish>
        return( ret );

    return( 0 );
}
   dcd9a:	b003      	add	sp, #12
   dcd9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000dcda0 <mbedtls_gcm_auth_decrypt>:
                      size_t add_len,
                      const unsigned char *tag,
                      size_t tag_len,
                      const unsigned char *input,
                      unsigned char *output )
{
   dcda0:	b5f0      	push	{r4, r5, r6, r7, lr}
   dcda2:	b08d      	sub	sp, #52	; 0x34
   dcda4:	460e      	mov	r6, r1
    GCM_VALIDATE_RET( add_len == 0 || add != NULL );
    GCM_VALIDATE_RET( tag != NULL );
    GCM_VALIDATE_RET( length == 0 || input != NULL );
    GCM_VALIDATE_RET( length == 0 || output != NULL );

    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
   dcda6:	9916      	ldr	r1, [sp, #88]	; 0x58
   dcda8:	9103      	str	r1, [sp, #12]
   dcdaa:	9913      	ldr	r1, [sp, #76]	; 0x4c
                      size_t add_len,
                      const unsigned char *tag,
                      size_t tag_len,
                      const unsigned char *input,
                      unsigned char *output )
{
   dcdac:	9c15      	ldr	r4, [sp, #84]	; 0x54
   dcdae:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    GCM_VALIDATE_RET( add_len == 0 || add != NULL );
    GCM_VALIDATE_RET( tag != NULL );
    GCM_VALIDATE_RET( length == 0 || input != NULL );
    GCM_VALIDATE_RET( length == 0 || output != NULL );

    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
   dcdb0:	9102      	str	r1, [sp, #8]
   dcdb2:	af08      	add	r7, sp, #32
   dcdb4:	9912      	ldr	r1, [sp, #72]	; 0x48
   dcdb6:	9101      	str	r1, [sp, #4]
   dcdb8:	9300      	str	r3, [sp, #0]
   dcdba:	9706      	str	r7, [sp, #24]
   dcdbc:	4613      	mov	r3, r2
   dcdbe:	9405      	str	r4, [sp, #20]
   dcdc0:	9504      	str	r5, [sp, #16]
   dcdc2:	4632      	mov	r2, r6
   dcdc4:	2100      	movs	r1, #0
   dcdc6:	f7ff ffc6 	bl	dcd56 <mbedtls_gcm_crypt_and_tag>
   dcdca:	b998      	cbnz	r0, dcdf4 <mbedtls_gcm_auth_decrypt+0x54>
   dcdcc:	4602      	mov	r2, r0
   dcdce:	4603      	mov	r3, r0
    {
        return( ret );
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
   dcdd0:	42a3      	cmp	r3, r4
   dcdd2:	d008      	beq.n	dcde6 <mbedtls_gcm_auth_decrypt+0x46>
        diff |= tag[i] ^ check_tag[i];
   dcdd4:	9914      	ldr	r1, [sp, #80]	; 0x50
   dcdd6:	f811 e003 	ldrb.w	lr, [r1, r3]
   dcdda:	5cf9      	ldrb	r1, [r7, r3]
   dcddc:	ea8e 0101 	eor.w	r1, lr, r1
   dcde0:	430a      	orrs	r2, r1
    {
        return( ret );
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
   dcde2:	3301      	adds	r3, #1
   dcde4:	e7f4      	b.n	dcdd0 <mbedtls_gcm_auth_decrypt+0x30>
        diff |= tag[i] ^ check_tag[i];

    if( diff != 0 )
   dcde6:	b12a      	cbz	r2, dcdf4 <mbedtls_gcm_auth_decrypt+0x54>
    {
        mbedtls_platform_zeroize( output, length );
   dcde8:	4628      	mov	r0, r5
   dcdea:	4631      	mov	r1, r6
   dcdec:	f7fe fa06 	bl	db1fc <mbedtls_platform_zeroize>
        return( MBEDTLS_ERR_GCM_AUTH_FAILED );
   dcdf0:	f06f 0011 	mvn.w	r0, #17
    }

    return( 0 );
}
   dcdf4:	b00d      	add	sp, #52	; 0x34
   dcdf6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000dcdf8 <mbedtls_gcm_free>:

void mbedtls_gcm_free( mbedtls_gcm_context *ctx )
{
   dcdf8:	b510      	push	{r4, lr}
    if( ctx == NULL )
   dcdfa:	4604      	mov	r4, r0
   dcdfc:	b140      	cbz	r0, dce10 <mbedtls_gcm_free+0x18>
        return;
    mbedtls_cipher_free( &ctx->cipher_ctx );
   dcdfe:	f7f9 f983 	bl	d6108 <mbedtls_cipher_free>
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_gcm_context ) );
   dce02:	4620      	mov	r0, r4
   dce04:	f44f 71c0 	mov.w	r1, #384	; 0x180
}
   dce08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void mbedtls_gcm_free( mbedtls_gcm_context *ctx )
{
    if( ctx == NULL )
        return;
    mbedtls_cipher_free( &ctx->cipher_ctx );
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_gcm_context ) );
   dce0c:	f7fe b9f6 	b.w	db1fc <mbedtls_platform_zeroize>
   dce10:	bd10      	pop	{r4, pc}
	...

000dce14 <mbedtls_base64_decode>:
/*
 * Decode a base64-formatted buffer
 */
int mbedtls_base64_decode( unsigned char *dst, size_t dlen, size_t *olen,
                   const unsigned char *src, size_t slen )
{
   dce14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dce18:	f8dd e01c 	ldr.w	lr, [sp, #28]
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] == '=' && ++j > 2 )
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
   dce1c:	f8df 811c 	ldr.w	r8, [pc, #284]	; dcf3c <mbedtls_base64_decode+0x128>
    size_t i, n;
    uint32_t j, x;
    unsigned char *p;

    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
   dce20:	2700      	movs	r7, #0
   dce22:	463c      	mov	r4, r7
   dce24:	463d      	mov	r5, r7
   dce26:	4575      	cmp	r5, lr
   dce28:	d22d      	bcs.n	dce86 <mbedtls_base64_decode+0x72>
   dce2a:	f04f 0c00 	mov.w	ip, #0
    {
        /* Skip spaces before checking for EOL */
        x = 0;
        while( i < slen && src[i] == ' ' )
   dce2e:	5d5e      	ldrb	r6, [r3, r5]
   dce30:	2e20      	cmp	r6, #32
   dce32:	d104      	bne.n	dce3e <mbedtls_base64_decode+0x2a>
        {
            ++i;
   dce34:	3501      	adds	r5, #1
    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
    {
        /* Skip spaces before checking for EOL */
        x = 0;
        while( i < slen && src[i] == ' ' )
   dce36:	45ae      	cmp	lr, r5
        {
            ++i;
            ++x;
   dce38:	f10c 0c01 	add.w	ip, ip, #1
    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
    {
        /* Skip spaces before checking for EOL */
        x = 0;
        while( i < slen && src[i] == ' ' )
   dce3c:	d8f7      	bhi.n	dce2e <mbedtls_base64_decode+0x1a>
            ++i;
            ++x;
        }

        /* Spaces at end of buffer are OK */
        if( i == slen )
   dce3e:	45ae      	cmp	lr, r5
   dce40:	d021      	beq.n	dce86 <mbedtls_base64_decode+0x72>
            break;

        if( ( slen - i ) >= 2 &&
   dce42:	ebc5 060e 	rsb	r6, r5, lr
   dce46:	2e01      	cmp	r6, #1
   dce48:	d906      	bls.n	dce58 <mbedtls_base64_decode+0x44>
   dce4a:	5d5e      	ldrb	r6, [r3, r5]
   dce4c:	2e0d      	cmp	r6, #13
   dce4e:	d103      	bne.n	dce58 <mbedtls_base64_decode+0x44>
            src[i] == '\r' && src[i + 1] == '\n' )
   dce50:	195e      	adds	r6, r3, r5
   dce52:	7876      	ldrb	r6, [r6, #1]
   dce54:	2e0a      	cmp	r6, #10
   dce56:	d014      	beq.n	dce82 <mbedtls_base64_decode+0x6e>
            continue;

        if( src[i] == '\n' )
   dce58:	5d5e      	ldrb	r6, [r3, r5]
   dce5a:	2e0a      	cmp	r6, #10
   dce5c:	d011      	beq.n	dce82 <mbedtls_base64_decode+0x6e>
            continue;

        /* Space inside a line is an error */
        if( x != 0 )
   dce5e:	f1bc 0f00 	cmp.w	ip, #0
   dce62:	d166      	bne.n	dcf32 <mbedtls_base64_decode+0x11e>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] == '=' && ++j > 2 )
   dce64:	2e3d      	cmp	r6, #61	; 0x3d
   dce66:	d102      	bne.n	dce6e <mbedtls_base64_decode+0x5a>
   dce68:	3701      	adds	r7, #1
   dce6a:	2f02      	cmp	r7, #2
   dce6c:	d861      	bhi.n	dcf32 <mbedtls_base64_decode+0x11e>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
   dce6e:	f016 0f80 	tst.w	r6, #128	; 0x80
   dce72:	d15e      	bne.n	dcf32 <mbedtls_base64_decode+0x11e>
   dce74:	f818 6006 	ldrb.w	r6, [r8, r6]
   dce78:	2e7f      	cmp	r6, #127	; 0x7f
   dce7a:	d05a      	beq.n	dcf32 <mbedtls_base64_decode+0x11e>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( base64_dec_map[src[i]] < 64 && j != 0 )
   dce7c:	2e3f      	cmp	r6, #63	; 0x3f
   dce7e:	d956      	bls.n	dcf2e <mbedtls_base64_decode+0x11a>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        n++;
   dce80:	3401      	adds	r4, #1
    size_t i, n;
    uint32_t j, x;
    unsigned char *p;

    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
   dce82:	3501      	adds	r5, #1
   dce84:	e7cf      	b.n	dce26 <mbedtls_base64_decode+0x12>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        n++;
    }

    if( n == 0 )
   dce86:	b91c      	cbnz	r4, dce90 <mbedtls_base64_decode+0x7c>
    {
        *olen = 0;
   dce88:	6014      	str	r4, [r2, #0]
        return( 0 );
   dce8a:	4620      	mov	r0, r4
   dce8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    /* The following expression is to calculate the following formula without
     * risk of integer overflow in n:
     *     n = ( ( n * 6 ) + 7 ) >> 3;
     */
    n = ( 6 * ( n >> 3 ) ) + ( ( 6 * ( n & 0x7 ) + 7 ) >> 3 );
    n -= j;
   dce90:	f004 0e07 	and.w	lr, r4, #7
   dce94:	2606      	movs	r6, #6
   dce96:	08e4      	lsrs	r4, r4, #3
   dce98:	fb06 fe0e 	mul.w	lr, r6, lr
   dce9c:	4366      	muls	r6, r4
   dce9e:	f10e 0e07 	add.w	lr, lr, #7
   dcea2:	1bf6      	subs	r6, r6, r7
   dcea4:	eb06 04de 	add.w	r4, r6, lr, lsr #3

    if( dst == NULL || dlen < n )
   dcea8:	b160      	cbz	r0, dcec4 <mbedtls_base64_decode+0xb0>
   dceaa:	428c      	cmp	r4, r1
   dceac:	d80a      	bhi.n	dcec4 <mbedtls_base64_decode+0xb0>
   dceae:	2600      	movs	r6, #0
   dceb0:	eb03 0e05 	add.w	lr, r3, r5
   dceb4:	4601      	mov	r1, r0
   dceb6:	2503      	movs	r5, #3
   dceb8:	4634      	mov	r4, r6
   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
            continue;

        j -= ( base64_dec_map[*src] == 64 );
   dceba:	f8df c080 	ldr.w	ip, [pc, #128]	; dcf3c <mbedtls_base64_decode+0x128>
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
    }

   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
   dcebe:	f8df 8080 	ldr.w	r8, [pc, #128]	; dcf40 <mbedtls_base64_decode+0x12c>
   dcec2:	e00f      	b.n	dcee4 <mbedtls_base64_decode+0xd0>
    n = ( 6 * ( n >> 3 ) ) + ( ( 6 * ( n & 0x7 ) + 7 ) >> 3 );
    n -= j;

    if( dst == NULL || dlen < n )
    {
        *olen = n;
   dcec4:	6014      	str	r4, [r2, #0]
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
   dcec6:	f06f 0029 	mvn.w	r0, #41	; 0x29
   dceca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }

   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
   dcece:	f813 9b01 	ldrb.w	r9, [r3], #1
   dced2:	f1a9 070a 	sub.w	r7, r9, #10
   dced6:	b2ff      	uxtb	r7, r7
   dced8:	2f16      	cmp	r7, #22
   dceda:	d806      	bhi.n	dceea <mbedtls_base64_decode+0xd6>
   dcedc:	fa28 f707 	lsr.w	r7, r8, r7
   dcee0:	07ff      	lsls	r7, r7, #31
   dcee2:	d502      	bpl.n	dceea <mbedtls_base64_decode+0xd6>
    {
        *olen = n;
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
    }

   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
   dcee4:	4573      	cmp	r3, lr
   dcee6:	d1f2      	bne.n	dcece <mbedtls_base64_decode+0xba>
   dcee8:	e01c      	b.n	dcf24 <mbedtls_base64_decode+0x110>
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
            continue;

        j -= ( base64_dec_map[*src] == 64 );
   dceea:	f81c 7009 	ldrb.w	r7, [ip, r9]
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );

        if( ++n == 4 )
   dceee:	3401      	adds	r4, #1
   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
            continue;

        j -= ( base64_dec_map[*src] == 64 );
   dcef0:	2f40      	cmp	r7, #64	; 0x40
   dcef2:	bf08      	it	eq
   dcef4:	3d01      	subeq	r5, #1
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );
   dcef6:	f007 073f 	and.w	r7, r7, #63	; 0x3f

        if( ++n == 4 )
   dcefa:	2c04      	cmp	r4, #4
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
            continue;

        j -= ( base64_dec_map[*src] == 64 );
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );
   dcefc:	ea47 1686 	orr.w	r6, r7, r6, lsl #6

        if( ++n == 4 )
   dcf00:	d1f0      	bne.n	dcee4 <mbedtls_base64_decode+0xd0>
        {
            n = 0;
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
   dcf02:	b16d      	cbz	r5, dcf20 <mbedtls_base64_decode+0x10c>
   dcf04:	0c34      	lsrs	r4, r6, #16
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
   dcf06:	2d01      	cmp	r5, #1
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );

        if( ++n == 4 )
        {
            n = 0;
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
   dcf08:	700c      	strb	r4, [r1, #0]
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
   dcf0a:	d101      	bne.n	dcf10 <mbedtls_base64_decode+0xfc>
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );

        if( ++n == 4 )
        {
            n = 0;
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
   dcf0c:	3101      	adds	r1, #1
   dcf0e:	e007      	b.n	dcf20 <mbedtls_base64_decode+0x10c>
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
            if( j > 2 ) *p++ = (unsigned char)( x       );
   dcf10:	2d02      	cmp	r5, #2

        if( ++n == 4 )
        {
            n = 0;
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
   dcf12:	ea4f 2416 	mov.w	r4, r6, lsr #8
   dcf16:	704c      	strb	r4, [r1, #1]
            if( j > 2 ) *p++ = (unsigned char)( x       );
   dcf18:	bf16      	itet	ne
   dcf1a:	708e      	strbne	r6, [r1, #2]

        if( ++n == 4 )
        {
            n = 0;
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
   dcf1c:	3102      	addeq	r1, #2
            if( j > 2 ) *p++ = (unsigned char)( x       );
   dcf1e:	3103      	addne	r1, #3
        j -= ( base64_dec_map[*src] == 64 );
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );

        if( ++n == 4 )
        {
            n = 0;
   dcf20:	2400      	movs	r4, #0
   dcf22:	e7df      	b.n	dcee4 <mbedtls_base64_decode+0xd0>
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
            if( j > 2 ) *p++ = (unsigned char)( x       );
        }
    }

    *olen = p - dst;
   dcf24:	1a08      	subs	r0, r1, r0
   dcf26:	6010      	str	r0, [r2, #0]

    return( 0 );
   dcf28:	2000      	movs	r0, #0
   dcf2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( base64_dec_map[src[i]] < 64 && j != 0 )
   dcf2e:	2f00      	cmp	r7, #0
   dcf30:	d0a6      	beq.n	dce80 <mbedtls_base64_decode+0x6c>
        if( src[i] == '\n' )
            continue;

        /* Space inside a line is an error */
        if( x != 0 )
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
   dcf32:	f06f 002b 	mvn.w	r0, #43	; 0x2b
   dcf36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dcf3a:	bf00      	nop
   dcf3c:	000ede68 	.word	0x000ede68
   dcf40:	00400009 	.word	0x00400009

000dcf44 <mbedtls_md_info_from_type>:
#endif
    return( NULL );
}

const mbedtls_md_info_t *mbedtls_md_info_from_type( mbedtls_md_type_t md_type )
{
   dcf44:	3804      	subs	r0, #4
   dcf46:	b2c0      	uxtb	r0, r0
   dcf48:	2804      	cmp	r0, #4
   dcf4a:	bf9a      	itte	ls
   dcf4c:	4b02      	ldrls	r3, [pc, #8]	; (dcf58 <mbedtls_md_info_from_type+0x14>)
   dcf4e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   dcf52:	2000      	movhi	r0, #0
            return( &mbedtls_sha512_info );
#endif
        default:
            return( NULL );
    }
}
   dcf54:	4770      	bx	lr
   dcf56:	bf00      	nop
   dcf58:	000edee8 	.word	0x000edee8

000dcf5c <mbedtls_md_init>:

void mbedtls_md_init( mbedtls_md_context_t *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_md_context_t ) );
   dcf5c:	2300      	movs	r3, #0
   dcf5e:	6003      	str	r3, [r0, #0]
   dcf60:	6043      	str	r3, [r0, #4]
   dcf62:	6083      	str	r3, [r0, #8]
   dcf64:	4770      	bx	lr

000dcf66 <mbedtls_md_free>:
}

void mbedtls_md_free( mbedtls_md_context_t *ctx )
{
   dcf66:	b510      	push	{r4, lr}
    if( ctx == NULL || ctx->md_info == NULL )
   dcf68:	4604      	mov	r4, r0
   dcf6a:	b1a8      	cbz	r0, dcf98 <mbedtls_md_free+0x32>
   dcf6c:	6803      	ldr	r3, [r0, #0]
   dcf6e:	b19b      	cbz	r3, dcf98 <mbedtls_md_free+0x32>
        return;

    if( ctx->md_ctx != NULL )
   dcf70:	6840      	ldr	r0, [r0, #4]
   dcf72:	b108      	cbz	r0, dcf78 <mbedtls_md_free+0x12>
        ctx->md_info->ctx_free_func( ctx->md_ctx );
   dcf74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   dcf76:	4798      	blx	r3

    if( ctx->hmac_ctx != NULL )
   dcf78:	68a0      	ldr	r0, [r4, #8]
   dcf7a:	b138      	cbz	r0, dcf8c <mbedtls_md_free+0x26>
    {
        mbedtls_platform_zeroize( ctx->hmac_ctx,
                                  2 * ctx->md_info->block_size );
   dcf7c:	6823      	ldr	r3, [r4, #0]
   dcf7e:	68d9      	ldr	r1, [r3, #12]
   dcf80:	0049      	lsls	r1, r1, #1
   dcf82:	f7fe f93b 	bl	db1fc <mbedtls_platform_zeroize>
        mbedtls_free( ctx->hmac_ctx );
   dcf86:	68a0      	ldr	r0, [r4, #8]
   dcf88:	f009 f89c 	bl	e60c4 <free>
    }

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_md_context_t ) );
   dcf8c:	4620      	mov	r0, r4
   dcf8e:	210c      	movs	r1, #12
}
   dcf90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mbedtls_platform_zeroize( ctx->hmac_ctx,
                                  2 * ctx->md_info->block_size );
        mbedtls_free( ctx->hmac_ctx );
    }

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_md_context_t ) );
   dcf94:	f7fe b932 	b.w	db1fc <mbedtls_platform_zeroize>
   dcf98:	bd10      	pop	{r4, pc}
	...

000dcf9c <mbedtls_md_setup>:
    return mbedtls_md_setup( ctx, md_info, 1 );
}
#endif

int mbedtls_md_setup( mbedtls_md_context_t *ctx, const mbedtls_md_info_t *md_info, int hmac )
{
   dcf9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dcf9e:	4605      	mov	r5, r0
   dcfa0:	4617      	mov	r7, r2
    if( md_info == NULL || ctx == NULL )
   dcfa2:	460c      	mov	r4, r1
   dcfa4:	b199      	cbz	r1, dcfce <mbedtls_md_setup+0x32>
   dcfa6:	b190      	cbz	r0, dcfce <mbedtls_md_setup+0x32>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    if( ( ctx->md_ctx = md_info->ctx_alloc_func() ) == NULL )
   dcfa8:	6a0b      	ldr	r3, [r1, #32]
   dcfaa:	4798      	blx	r3
   dcfac:	4606      	mov	r6, r0
   dcfae:	6068      	str	r0, [r5, #4]
   dcfb0:	b178      	cbz	r0, dcfd2 <mbedtls_md_setup+0x36>
        return( MBEDTLS_ERR_MD_ALLOC_FAILED );

    if( hmac != 0 )
   dcfb2:	b14f      	cbz	r7, dcfc8 <mbedtls_md_setup+0x2c>
    {
        ctx->hmac_ctx = mbedtls_calloc( 2, md_info->block_size );
   dcfb4:	68e1      	ldr	r1, [r4, #12]
   dcfb6:	2002      	movs	r0, #2
   dcfb8:	f00c fc5c 	bl	e9874 <calloc>
   dcfbc:	60a8      	str	r0, [r5, #8]
        if( ctx->hmac_ctx == NULL )
   dcfbe:	b918      	cbnz	r0, dcfc8 <mbedtls_md_setup+0x2c>
        {
            md_info->ctx_free_func( ctx->md_ctx );
   dcfc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   dcfc2:	4630      	mov	r0, r6
   dcfc4:	4798      	blx	r3
   dcfc6:	e004      	b.n	dcfd2 <mbedtls_md_setup+0x36>
            return( MBEDTLS_ERR_MD_ALLOC_FAILED );
        }
    }

    ctx->md_info = md_info;
   dcfc8:	602c      	str	r4, [r5, #0]

    return( 0 );
   dcfca:	2000      	movs	r0, #0
   dcfcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
#endif

int mbedtls_md_setup( mbedtls_md_context_t *ctx, const mbedtls_md_info_t *md_info, int hmac )
{
    if( md_info == NULL || ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
   dcfce:	4802      	ldr	r0, [pc, #8]	; (dcfd8 <mbedtls_md_setup+0x3c>)
   dcfd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    if( ( ctx->md_ctx = md_info->ctx_alloc_func() ) == NULL )
        return( MBEDTLS_ERR_MD_ALLOC_FAILED );
   dcfd2:	4802      	ldr	r0, [pc, #8]	; (dcfdc <mbedtls_md_setup+0x40>)
    }

    ctx->md_info = md_info;

    return( 0 );
}
   dcfd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   dcfd6:	bf00      	nop
   dcfd8:	ffffaf00 	.word	0xffffaf00
   dcfdc:	ffffae80 	.word	0xffffae80

000dcfe0 <mbedtls_md_starts>:

int mbedtls_md_starts( mbedtls_md_context_t *ctx )
{
    if( ctx == NULL || ctx->md_info == NULL )
   dcfe0:	b120      	cbz	r0, dcfec <mbedtls_md_starts+0xc>
   dcfe2:	6803      	ldr	r3, [r0, #0]
   dcfe4:	b113      	cbz	r3, dcfec <mbedtls_md_starts+0xc>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->starts_func( ctx->md_ctx ) );
   dcfe6:	691b      	ldr	r3, [r3, #16]
   dcfe8:	6840      	ldr	r0, [r0, #4]
   dcfea:	4718      	bx	r3
}
   dcfec:	4800      	ldr	r0, [pc, #0]	; (dcff0 <mbedtls_md_starts+0x10>)
   dcfee:	4770      	bx	lr
   dcff0:	ffffaf00 	.word	0xffffaf00

000dcff4 <mbedtls_md_update>:

int mbedtls_md_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
    if( ctx == NULL || ctx->md_info == NULL )
   dcff4:	b120      	cbz	r0, dd000 <mbedtls_md_update+0xc>
   dcff6:	6803      	ldr	r3, [r0, #0]
   dcff8:	b113      	cbz	r3, dd000 <mbedtls_md_update+0xc>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
   dcffa:	695b      	ldr	r3, [r3, #20]
   dcffc:	6840      	ldr	r0, [r0, #4]
   dcffe:	4718      	bx	r3
}
   dd000:	4800      	ldr	r0, [pc, #0]	; (dd004 <mbedtls_md_update+0x10>)
   dd002:	4770      	bx	lr
   dd004:	ffffaf00 	.word	0xffffaf00

000dd008 <mbedtls_md_finish>:

int mbedtls_md_finish( mbedtls_md_context_t *ctx, unsigned char *output )
{
    if( ctx == NULL || ctx->md_info == NULL )
   dd008:	b120      	cbz	r0, dd014 <mbedtls_md_finish+0xc>
   dd00a:	6803      	ldr	r3, [r0, #0]
   dd00c:	b113      	cbz	r3, dd014 <mbedtls_md_finish+0xc>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
   dd00e:	699b      	ldr	r3, [r3, #24]
   dd010:	6840      	ldr	r0, [r0, #4]
   dd012:	4718      	bx	r3
}
   dd014:	4800      	ldr	r0, [pc, #0]	; (dd018 <mbedtls_md_finish+0x10>)
   dd016:	4770      	bx	lr
   dd018:	ffffaf00 	.word	0xffffaf00

000dd01c <mbedtls_md>:

int mbedtls_md( const mbedtls_md_info_t *md_info, const unsigned char *input, size_t ilen,
            unsigned char *output )
{
   dd01c:	b430      	push	{r4, r5}
   dd01e:	460d      	mov	r5, r1
   dd020:	4611      	mov	r1, r2
    if( md_info == NULL )
   dd022:	b128      	cbz	r0, dd030 <mbedtls_md+0x14>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( md_info->digest_func( input, ilen, output ) );
   dd024:	69c4      	ldr	r4, [r0, #28]
   dd026:	461a      	mov	r2, r3
   dd028:	4628      	mov	r0, r5
   dd02a:	4623      	mov	r3, r4
}
   dd02c:	bc30      	pop	{r4, r5}
            unsigned char *output )
{
    if( md_info == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( md_info->digest_func( input, ilen, output ) );
   dd02e:	4718      	bx	r3
}
   dd030:	4801      	ldr	r0, [pc, #4]	; (dd038 <mbedtls_md+0x1c>)
   dd032:	bc30      	pop	{r4, r5}
   dd034:	4770      	bx	lr
   dd036:	bf00      	nop
   dd038:	ffffaf00 	.word	0xffffaf00

000dd03c <mbedtls_md_hmac_starts>:
    return( ret );
}
#endif /* MBEDTLS_FS_IO */

int mbedtls_md_hmac_starts( mbedtls_md_context_t *ctx, const unsigned char *key, size_t keylen )
{
   dd03c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dd040:	460e      	mov	r6, r1
   dd042:	b090      	sub	sp, #64	; 0x40
   dd044:	4690      	mov	r8, r2
    int ret;
    unsigned char sum[MBEDTLS_MD_MAX_SIZE];
    unsigned char *ipad, *opad;
    size_t i;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
   dd046:	4604      	mov	r4, r0
   dd048:	2800      	cmp	r0, #0
   dd04a:	d050      	beq.n	dd0ee <mbedtls_md_hmac_starts+0xb2>
   dd04c:	6803      	ldr	r3, [r0, #0]
   dd04e:	2b00      	cmp	r3, #0
   dd050:	d04d      	beq.n	dd0ee <mbedtls_md_hmac_starts+0xb2>
   dd052:	6882      	ldr	r2, [r0, #8]
   dd054:	2a00      	cmp	r2, #0
   dd056:	d04a      	beq.n	dd0ee <mbedtls_md_hmac_starts+0xb2>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    if( keylen > (size_t) ctx->md_info->block_size )
   dd058:	68da      	ldr	r2, [r3, #12]
   dd05a:	4542      	cmp	r2, r8
   dd05c:	d219      	bcs.n	dd092 <mbedtls_md_hmac_starts+0x56>
    {
        if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
   dd05e:	691b      	ldr	r3, [r3, #16]
   dd060:	6840      	ldr	r0, [r0, #4]
   dd062:	4798      	blx	r3
   dd064:	4605      	mov	r5, r0
   dd066:	2800      	cmp	r0, #0
   dd068:	d13b      	bne.n	dd0e2 <mbedtls_md_hmac_starts+0xa6>
            goto cleanup;
        if( ( ret = ctx->md_info->update_func( ctx->md_ctx, key, keylen ) ) != 0 )
   dd06a:	6823      	ldr	r3, [r4, #0]
   dd06c:	6860      	ldr	r0, [r4, #4]
   dd06e:	695b      	ldr	r3, [r3, #20]
   dd070:	4642      	mov	r2, r8
   dd072:	4631      	mov	r1, r6
   dd074:	4798      	blx	r3
   dd076:	4605      	mov	r5, r0
   dd078:	2800      	cmp	r0, #0
   dd07a:	d132      	bne.n	dd0e2 <mbedtls_md_hmac_starts+0xa6>
            goto cleanup;
        if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, sum ) ) != 0 )
   dd07c:	6823      	ldr	r3, [r4, #0]
   dd07e:	6860      	ldr	r0, [r4, #4]
   dd080:	699b      	ldr	r3, [r3, #24]
   dd082:	4669      	mov	r1, sp
   dd084:	4798      	blx	r3
   dd086:	4605      	mov	r5, r0
   dd088:	bb58      	cbnz	r0, dd0e2 <mbedtls_md_hmac_starts+0xa6>
            goto cleanup;

        keylen = ctx->md_info->size;
   dd08a:	6823      	ldr	r3, [r4, #0]
   dd08c:	f8d3 8008 	ldr.w	r8, [r3, #8]
        key = sum;
   dd090:	466e      	mov	r6, sp
    }

    ipad = (unsigned char *) ctx->hmac_ctx;
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
   dd092:	6823      	ldr	r3, [r4, #0]

        keylen = ctx->md_info->size;
        key = sum;
    }

    ipad = (unsigned char *) ctx->hmac_ctx;
   dd094:	68a7      	ldr	r7, [r4, #8]
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
   dd096:	68da      	ldr	r2, [r3, #12]

    memset( ipad, 0x36, ctx->md_info->block_size );
   dd098:	2136      	movs	r1, #54	; 0x36
   dd09a:	4638      	mov	r0, r7
        keylen = ctx->md_info->size;
        key = sum;
    }

    ipad = (unsigned char *) ctx->hmac_ctx;
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
   dd09c:	18bd      	adds	r5, r7, r2

    memset( ipad, 0x36, ctx->md_info->block_size );
   dd09e:	f00c fd30 	bl	e9b02 <memset>
    memset( opad, 0x5C, ctx->md_info->block_size );
   dd0a2:	6823      	ldr	r3, [r4, #0]
   dd0a4:	215c      	movs	r1, #92	; 0x5c
   dd0a6:	68da      	ldr	r2, [r3, #12]
   dd0a8:	4628      	mov	r0, r5
   dd0aa:	f00c fd2a 	bl	e9b02 <memset>

    for( i = 0; i < keylen; i++ )
   dd0ae:	2300      	movs	r3, #0
   dd0b0:	4598      	cmp	r8, r3
   dd0b2:	d009      	beq.n	dd0c8 <mbedtls_md_hmac_starts+0x8c>
    {
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
   dd0b4:	5cf9      	ldrb	r1, [r7, r3]
   dd0b6:	5cf2      	ldrb	r2, [r6, r3]
   dd0b8:	404a      	eors	r2, r1
   dd0ba:	54fa      	strb	r2, [r7, r3]
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
   dd0bc:	5ce9      	ldrb	r1, [r5, r3]
   dd0be:	5cf2      	ldrb	r2, [r6, r3]
   dd0c0:	404a      	eors	r2, r1
   dd0c2:	54ea      	strb	r2, [r5, r3]
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;

    memset( ipad, 0x36, ctx->md_info->block_size );
    memset( opad, 0x5C, ctx->md_info->block_size );

    for( i = 0; i < keylen; i++ )
   dd0c4:	3301      	adds	r3, #1
   dd0c6:	e7f3      	b.n	dd0b0 <mbedtls_md_hmac_starts+0x74>
    {
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
    }

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
   dd0c8:	6823      	ldr	r3, [r4, #0]
   dd0ca:	6860      	ldr	r0, [r4, #4]
   dd0cc:	691b      	ldr	r3, [r3, #16]
   dd0ce:	4798      	blx	r3
   dd0d0:	4605      	mov	r5, r0
   dd0d2:	b930      	cbnz	r0, dd0e2 <mbedtls_md_hmac_starts+0xa6>
        goto cleanup;
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, ipad,
   dd0d4:	6823      	ldr	r3, [r4, #0]
   dd0d6:	6860      	ldr	r0, [r4, #4]
   dd0d8:	695d      	ldr	r5, [r3, #20]
   dd0da:	68da      	ldr	r2, [r3, #12]
   dd0dc:	4639      	mov	r1, r7
   dd0de:	47a8      	blx	r5
   dd0e0:	4605      	mov	r5, r0
                                           ctx->md_info->block_size ) ) != 0 )
        goto cleanup;

cleanup:
    mbedtls_platform_zeroize( sum, sizeof( sum ) );
   dd0e2:	4668      	mov	r0, sp
   dd0e4:	2140      	movs	r1, #64	; 0x40
   dd0e6:	f7fe f889 	bl	db1fc <mbedtls_platform_zeroize>

    return( ret );
   dd0ea:	4628      	mov	r0, r5
   dd0ec:	e000      	b.n	dd0f0 <mbedtls_md_hmac_starts+0xb4>
    unsigned char sum[MBEDTLS_MD_MAX_SIZE];
    unsigned char *ipad, *opad;
    size_t i;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
   dd0ee:	4802      	ldr	r0, [pc, #8]	; (dd0f8 <mbedtls_md_hmac_starts+0xbc>)

cleanup:
    mbedtls_platform_zeroize( sum, sizeof( sum ) );

    return( ret );
}
   dd0f0:	b010      	add	sp, #64	; 0x40
   dd0f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dd0f6:	bf00      	nop
   dd0f8:	ffffaf00 	.word	0xffffaf00

000dd0fc <mbedtls_md_hmac_update>:

int mbedtls_md_hmac_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
   dd0fc:	b410      	push	{r4}
    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
   dd0fe:	b140      	cbz	r0, dd112 <mbedtls_md_hmac_update+0x16>
   dd100:	6803      	ldr	r3, [r0, #0]
   dd102:	b133      	cbz	r3, dd112 <mbedtls_md_hmac_update+0x16>
   dd104:	6884      	ldr	r4, [r0, #8]
   dd106:	b124      	cbz	r4, dd112 <mbedtls_md_hmac_update+0x16>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
   dd108:	695b      	ldr	r3, [r3, #20]
   dd10a:	6840      	ldr	r0, [r0, #4]
}
   dd10c:	f85d 4b04 	ldr.w	r4, [sp], #4
int mbedtls_md_hmac_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
   dd110:	4718      	bx	r3
}
   dd112:	4802      	ldr	r0, [pc, #8]	; (dd11c <mbedtls_md_hmac_update+0x20>)
   dd114:	f85d 4b04 	ldr.w	r4, [sp], #4
   dd118:	4770      	bx	lr
   dd11a:	bf00      	nop
   dd11c:	ffffaf00 	.word	0xffffaf00

000dd120 <mbedtls_md_hmac_finish>:

int mbedtls_md_hmac_finish( mbedtls_md_context_t *ctx, unsigned char *output )
{
   dd120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dd124:	460e      	mov	r6, r1
   dd126:	b090      	sub	sp, #64	; 0x40
    int ret;
    unsigned char tmp[MBEDTLS_MD_MAX_SIZE];
    unsigned char *opad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
   dd128:	4604      	mov	r4, r0
   dd12a:	b320      	cbz	r0, dd176 <mbedtls_md_hmac_finish+0x56>
   dd12c:	6803      	ldr	r3, [r0, #0]
   dd12e:	b313      	cbz	r3, dd176 <mbedtls_md_hmac_finish+0x56>
   dd130:	6885      	ldr	r5, [r0, #8]
   dd132:	b305      	cbz	r5, dd176 <mbedtls_md_hmac_finish+0x56>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
   dd134:	f8d3 800c 	ldr.w	r8, [r3, #12]

    if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, tmp ) ) != 0 )
   dd138:	6840      	ldr	r0, [r0, #4]
   dd13a:	699b      	ldr	r3, [r3, #24]
   dd13c:	4669      	mov	r1, sp
   dd13e:	4798      	blx	r3
   dd140:	b9d0      	cbnz	r0, dd178 <mbedtls_md_hmac_finish+0x58>
        return( ret );
    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
   dd142:	6823      	ldr	r3, [r4, #0]
   dd144:	6860      	ldr	r0, [r4, #4]
   dd146:	691b      	ldr	r3, [r3, #16]
   dd148:	4798      	blx	r3
   dd14a:	b9a8      	cbnz	r0, dd178 <mbedtls_md_hmac_finish+0x58>
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, opad,
   dd14c:	6823      	ldr	r3, [r4, #0]
   dd14e:	6860      	ldr	r0, [r4, #4]
   dd150:	695f      	ldr	r7, [r3, #20]
   dd152:	68da      	ldr	r2, [r3, #12]
   dd154:	eb05 0108 	add.w	r1, r5, r8
   dd158:	47b8      	blx	r7
   dd15a:	b968      	cbnz	r0, dd178 <mbedtls_md_hmac_finish+0x58>
                                           ctx->md_info->block_size ) ) != 0 )
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, tmp,
   dd15c:	6823      	ldr	r3, [r4, #0]
   dd15e:	6860      	ldr	r0, [r4, #4]
   dd160:	695d      	ldr	r5, [r3, #20]
   dd162:	689a      	ldr	r2, [r3, #8]
   dd164:	4669      	mov	r1, sp
   dd166:	47a8      	blx	r5
   dd168:	b930      	cbnz	r0, dd178 <mbedtls_md_hmac_finish+0x58>
                                           ctx->md_info->size ) ) != 0 )
        return( ret );
    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
   dd16a:	6823      	ldr	r3, [r4, #0]
   dd16c:	6860      	ldr	r0, [r4, #4]
   dd16e:	699b      	ldr	r3, [r3, #24]
   dd170:	4631      	mov	r1, r6
   dd172:	4798      	blx	r3
   dd174:	e000      	b.n	dd178 <mbedtls_md_hmac_finish+0x58>
    int ret;
    unsigned char tmp[MBEDTLS_MD_MAX_SIZE];
    unsigned char *opad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
   dd176:	4802      	ldr	r0, [pc, #8]	; (dd180 <mbedtls_md_hmac_finish+0x60>)
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, tmp,
                                           ctx->md_info->size ) ) != 0 )
        return( ret );
    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
}
   dd178:	b010      	add	sp, #64	; 0x40
   dd17a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dd17e:	bf00      	nop
   dd180:	ffffaf00 	.word	0xffffaf00

000dd184 <mbedtls_md_hmac_reset>:

int mbedtls_md_hmac_reset( mbedtls_md_context_t *ctx )
{
   dd184:	b570      	push	{r4, r5, r6, lr}
    int ret;
    unsigned char *ipad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
   dd186:	4604      	mov	r4, r0
   dd188:	b180      	cbz	r0, dd1ac <mbedtls_md_hmac_reset+0x28>
   dd18a:	6803      	ldr	r3, [r0, #0]
   dd18c:	b173      	cbz	r3, dd1ac <mbedtls_md_hmac_reset+0x28>
   dd18e:	6885      	ldr	r5, [r0, #8]
   dd190:	b165      	cbz	r5, dd1ac <mbedtls_md_hmac_reset+0x28>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    ipad = (unsigned char *) ctx->hmac_ctx;

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
   dd192:	691b      	ldr	r3, [r3, #16]
   dd194:	6840      	ldr	r0, [r0, #4]
   dd196:	4798      	blx	r3
   dd198:	b948      	cbnz	r0, dd1ae <mbedtls_md_hmac_reset+0x2a>
        return( ret );
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
   dd19a:	6823      	ldr	r3, [r4, #0]
                                       ctx->md_info->block_size ) );
   dd19c:	6860      	ldr	r0, [r4, #4]
   dd19e:	695e      	ldr	r6, [r3, #20]
   dd1a0:	68da      	ldr	r2, [r3, #12]
   dd1a2:	4629      	mov	r1, r5
   dd1a4:	4633      	mov	r3, r6
}
   dd1a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ipad = (unsigned char *) ctx->hmac_ctx;

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
        return( ret );
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
                                       ctx->md_info->block_size ) );
   dd1aa:	4718      	bx	r3
{
    int ret;
    unsigned char *ipad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
   dd1ac:	4800      	ldr	r0, [pc, #0]	; (dd1b0 <mbedtls_md_hmac_reset+0x2c>)

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
        return( ret );
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
                                       ctx->md_info->block_size ) );
}
   dd1ae:	bd70      	pop	{r4, r5, r6, pc}
   dd1b0:	ffffaf00 	.word	0xffffaf00

000dd1b4 <mbedtls_md_get_size>:
    return( ctx->md_info->process_func( ctx->md_ctx, data ) );
}

unsigned char mbedtls_md_get_size( const mbedtls_md_info_t *md_info )
{
    if( md_info == NULL )
   dd1b4:	b100      	cbz	r0, dd1b8 <mbedtls_md_get_size+0x4>
        return( 0 );

    return md_info->size;
   dd1b6:	7a00      	ldrb	r0, [r0, #8]
}
   dd1b8:	4770      	bx	lr

000dd1ba <mbedtls_md_get_name>:
    return md_info->type;
}

const char *mbedtls_md_get_name( const mbedtls_md_info_t *md_info )
{
    if( md_info == NULL )
   dd1ba:	b100      	cbz	r0, dd1be <mbedtls_md_get_name+0x4>
        return( NULL );

    return md_info->name;
   dd1bc:	6840      	ldr	r0, [r0, #4]
}
   dd1be:	4770      	bx	lr

000dd1c0 <_ZL5add32PmmPa>:
/*
 * Helpers for addition and subtraction of chunks, with signed carry.
 */
static inline void add32( uint32_t *dst, uint32_t src, signed char *carry )
{
    *dst += src;
   dd1c0:	6803      	ldr	r3, [r0, #0]
   dd1c2:	440b      	add	r3, r1
   dd1c4:	6003      	str	r3, [r0, #0]
    *carry += ( *dst < src );
   dd1c6:	7810      	ldrb	r0, [r2, #0]
   dd1c8:	4299      	cmp	r1, r3
   dd1ca:	bf94      	ite	ls
   dd1cc:	4603      	movls	r3, r0
   dd1ce:	1c43      	addhi	r3, r0, #1
   dd1d0:	7013      	strb	r3, [r2, #0]
   dd1d2:	4770      	bx	lr

000dd1d4 <_ZL5sub32PmmPa>:
}

static inline void sub32( uint32_t *dst, uint32_t src, signed char *carry )
{
    *carry -= ( *dst < src );
   dd1d4:	6803      	ldr	r3, [r0, #0]
    *dst += src;
    *carry += ( *dst < src );
}

static inline void sub32( uint32_t *dst, uint32_t src, signed char *carry )
{
   dd1d6:	b510      	push	{r4, lr}
    *carry -= ( *dst < src );
   dd1d8:	7814      	ldrb	r4, [r2, #0]
   dd1da:	428b      	cmp	r3, r1
   dd1dc:	bf38      	it	cc
   dd1de:	3c01      	subcc	r4, #1
   dd1e0:	7014      	strb	r4, [r2, #0]
    *dst -= src;
   dd1e2:	6803      	ldr	r3, [r0, #0]
   dd1e4:	1a5b      	subs	r3, r3, r1
   dd1e6:	6003      	str	r3, [r0, #0]
   dd1e8:	bd10      	pop	{r4, pc}

000dd1ea <_ZL12ecp_mod_p256P11mbedtls_mpi>:
#if defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED)
/*
 * Fast quasi-reduction modulo p256 (FIPS 186-3 D.2.3)
 */
static int ecp_mod_p256( mbedtls_mpi *N )
{
   dd1ea:	b530      	push	{r4, r5, lr}
   dd1ec:	b08f      	sub	sp, #60	; 0x3c
    INIT( 256 );
   dd1ee:	2301      	movs	r3, #1
   dd1f0:	2100      	movs	r1, #0
#if defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED)
/*
 * Fast quasi-reduction modulo p256 (FIPS 186-3 D.2.3)
 */
static int ecp_mod_p256( mbedtls_mpi *N )
{
   dd1f2:	4604      	mov	r4, r0
    INIT( 256 );
   dd1f4:	9302      	str	r3, [sp, #8]
   dd1f6:	a805      	add	r0, sp, #20
   dd1f8:	2309      	movs	r3, #9
   dd1fa:	2224      	movs	r2, #36	; 0x24
   dd1fc:	f88d 1003 	strb.w	r1, [sp, #3]
   dd200:	9303      	str	r3, [sp, #12]
   dd202:	9004      	str	r0, [sp, #16]
   dd204:	f00c fc7d 	bl	e9b02 <memset>
   dd208:	2110      	movs	r1, #16
   dd20a:	4620      	mov	r0, r4
   dd20c:	f003 fd9f 	bl	e0d4e <mbedtls_mpi_grow>
   dd210:	4605      	mov	r5, r0
   dd212:	2800      	cmp	r0, #0
   dd214:	f040 824d 	bne.w	dd6b2 <_ZL12ecp_mod_p256P11mbedtls_mpi+0x4c8>
   dd218:	68a3      	ldr	r3, [r4, #8]
   dd21a:	681a      	ldr	r2, [r3, #0]

    ADD(  8 ); ADD(  9 );
   dd21c:	6a19      	ldr	r1, [r3, #32]
/*
 * Fast quasi-reduction modulo p256 (FIPS 186-3 D.2.3)
 */
static int ecp_mod_p256( mbedtls_mpi *N )
{
    INIT( 256 );
   dd21e:	9201      	str	r2, [sp, #4]

    ADD(  8 ); ADD(  9 );
   dd220:	a801      	add	r0, sp, #4
   dd222:	f10d 0203 	add.w	r2, sp, #3
   dd226:	f7ff ffcb 	bl	dd1c0 <_ZL5add32PmmPa>
   dd22a:	68a3      	ldr	r3, [r4, #8]
   dd22c:	f10d 0203 	add.w	r2, sp, #3
   dd230:	6a59      	ldr	r1, [r3, #36]	; 0x24
   dd232:	a801      	add	r0, sp, #4
   dd234:	f7ff ffc4 	bl	dd1c0 <_ZL5add32PmmPa>
    SUB( 11 ); SUB( 12 ); SUB( 13 ); SUB( 14 );             NEXT; // A0
   dd238:	68a3      	ldr	r3, [r4, #8]
   dd23a:	f10d 0203 	add.w	r2, sp, #3
   dd23e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   dd240:	a801      	add	r0, sp, #4
   dd242:	f7ff ffc7 	bl	dd1d4 <_ZL5sub32PmmPa>
   dd246:	68a3      	ldr	r3, [r4, #8]
   dd248:	f10d 0203 	add.w	r2, sp, #3
   dd24c:	6b19      	ldr	r1, [r3, #48]	; 0x30
   dd24e:	a801      	add	r0, sp, #4
   dd250:	f7ff ffc0 	bl	dd1d4 <_ZL5sub32PmmPa>
   dd254:	68a3      	ldr	r3, [r4, #8]
   dd256:	f10d 0203 	add.w	r2, sp, #3
   dd25a:	6b59      	ldr	r1, [r3, #52]	; 0x34
   dd25c:	a801      	add	r0, sp, #4
   dd25e:	f7ff ffb9 	bl	dd1d4 <_ZL5sub32PmmPa>
   dd262:	68a3      	ldr	r3, [r4, #8]
   dd264:	f10d 0203 	add.w	r2, sp, #3
   dd268:	6b99      	ldr	r1, [r3, #56]	; 0x38
   dd26a:	a801      	add	r0, sp, #4
   dd26c:	f7ff ffb2 	bl	dd1d4 <_ZL5sub32PmmPa>
   dd270:	68a3      	ldr	r3, [r4, #8]
   dd272:	9a01      	ldr	r2, [sp, #4]
   dd274:	601a      	str	r2, [r3, #0]
   dd276:	f99d 1003 	ldrsb.w	r1, [sp, #3]
   dd27a:	68a3      	ldr	r3, [r4, #8]
   dd27c:	f88d 5003 	strb.w	r5, [sp, #3]
   dd280:	685b      	ldr	r3, [r3, #4]
   dd282:	9301      	str	r3, [sp, #4]
   dd284:	2900      	cmp	r1, #0
   dd286:	f10d 0203 	add.w	r2, sp, #3
   dd28a:	da04      	bge.n	dd296 <_ZL12ecp_mod_p256P11mbedtls_mpi+0xac>
   dd28c:	4249      	negs	r1, r1
   dd28e:	a801      	add	r0, sp, #4
   dd290:	f7ff ffa0 	bl	dd1d4 <_ZL5sub32PmmPa>
   dd294:	e002      	b.n	dd29c <_ZL12ecp_mod_p256P11mbedtls_mpi+0xb2>
   dd296:	a801      	add	r0, sp, #4
   dd298:	f7ff ff92 	bl	dd1c0 <_ZL5add32PmmPa>

    ADD(  9 ); ADD( 10 );
   dd29c:	68a3      	ldr	r3, [r4, #8]
   dd29e:	f10d 0203 	add.w	r2, sp, #3
   dd2a2:	6a59      	ldr	r1, [r3, #36]	; 0x24
   dd2a4:	a801      	add	r0, sp, #4
   dd2a6:	f7ff ff8b 	bl	dd1c0 <_ZL5add32PmmPa>
   dd2aa:	68a3      	ldr	r3, [r4, #8]
   dd2ac:	f10d 0203 	add.w	r2, sp, #3
   dd2b0:	6a99      	ldr	r1, [r3, #40]	; 0x28
   dd2b2:	a801      	add	r0, sp, #4
   dd2b4:	f7ff ff84 	bl	dd1c0 <_ZL5add32PmmPa>
    SUB( 12 ); SUB( 13 ); SUB( 14 ); SUB( 15 );             NEXT; // A1
   dd2b8:	68a3      	ldr	r3, [r4, #8]
   dd2ba:	f10d 0203 	add.w	r2, sp, #3
   dd2be:	6b19      	ldr	r1, [r3, #48]	; 0x30
   dd2c0:	a801      	add	r0, sp, #4
   dd2c2:	f7ff ff87 	bl	dd1d4 <_ZL5sub32PmmPa>
   dd2c6:	68a3      	ldr	r3, [r4, #8]
   dd2c8:	f10d 0203 	add.w	r2, sp, #3
   dd2cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
   dd2ce:	a801      	add	r0, sp, #4
   dd2d0:	f7ff ff80 	bl	dd1d4 <_ZL5sub32PmmPa>
   dd2d4:	68a3      	ldr	r3, [r4, #8]
   dd2d6:	f10d 0203 	add.w	r2, sp, #3
   dd2da:	6b99      	ldr	r1, [r3, #56]	; 0x38
   dd2dc:	a801      	add	r0, sp, #4
   dd2de:	f7ff ff79 	bl	dd1d4 <_ZL5sub32PmmPa>
   dd2e2:	68a3      	ldr	r3, [r4, #8]
   dd2e4:	f10d 0203 	add.w	r2, sp, #3
   dd2e8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   dd2ea:	a801      	add	r0, sp, #4
   dd2ec:	f7ff ff72 	bl	dd1d4 <_ZL5sub32PmmPa>
   dd2f0:	68a3      	ldr	r3, [r4, #8]
   dd2f2:	9a01      	ldr	r2, [sp, #4]
   dd2f4:	605a      	str	r2, [r3, #4]
   dd2f6:	68a3      	ldr	r3, [r4, #8]
   dd2f8:	f99d 1003 	ldrsb.w	r1, [sp, #3]
   dd2fc:	689b      	ldr	r3, [r3, #8]
   dd2fe:	9301      	str	r3, [sp, #4]
   dd300:	2300      	movs	r3, #0
   dd302:	4299      	cmp	r1, r3
   dd304:	f88d 3003 	strb.w	r3, [sp, #3]
   dd308:	f10d 0203 	add.w	r2, sp, #3
   dd30c:	da04      	bge.n	dd318 <_ZL12ecp_mod_p256P11mbedtls_mpi+0x12e>
   dd30e:	4249      	negs	r1, r1
   dd310:	a801      	add	r0, sp, #4
   dd312:	f7ff ff5f 	bl	dd1d4 <_ZL5sub32PmmPa>
   dd316:	e002      	b.n	dd31e <_ZL12ecp_mod_p256P11mbedtls_mpi+0x134>
   dd318:	a801      	add	r0, sp, #4
   dd31a:	f7ff ff51 	bl	dd1c0 <_ZL5add32PmmPa>

    ADD( 10 ); ADD( 11 );
   dd31e:	68a3      	ldr	r3, [r4, #8]
   dd320:	f10d 0203 	add.w	r2, sp, #3
   dd324:	6a99      	ldr	r1, [r3, #40]	; 0x28
   dd326:	a801      	add	r0, sp, #4
   dd328:	f7ff ff4a 	bl	dd1c0 <_ZL5add32PmmPa>
   dd32c:	68a3      	ldr	r3, [r4, #8]
   dd32e:	f10d 0203 	add.w	r2, sp, #3
   dd332:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   dd334:	a801      	add	r0, sp, #4
   dd336:	f7ff ff43 	bl	dd1c0 <_ZL5add32PmmPa>
    SUB( 13 ); SUB( 14 ); SUB( 15 );                        NEXT; // A2
   dd33a:	68a3      	ldr	r3, [r4, #8]
   dd33c:	f10d 0203 	add.w	r2, sp, #3
   dd340:	6b59      	ldr	r1, [r3, #52]	; 0x34
   dd342:	a801      	add	r0, sp, #4
   dd344:	f7ff ff46 	bl	dd1d4 <_ZL5sub32PmmPa>
   dd348:	68a3      	ldr	r3, [r4, #8]
   dd34a:	f10d 0203 	add.w	r2, sp, #3
   dd34e:	6b99      	ldr	r1, [r3, #56]	; 0x38
   dd350:	a801      	add	r0, sp, #4
   dd352:	f7ff ff3f 	bl	dd1d4 <_ZL5sub32PmmPa>
   dd356:	68a3      	ldr	r3, [r4, #8]
   dd358:	f10d 0203 	add.w	r2, sp, #3
   dd35c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   dd35e:	a801      	add	r0, sp, #4
   dd360:	f7ff ff38 	bl	dd1d4 <_ZL5sub32PmmPa>
   dd364:	68a3      	ldr	r3, [r4, #8]
   dd366:	9a01      	ldr	r2, [sp, #4]
   dd368:	609a      	str	r2, [r3, #8]
   dd36a:	68a3      	ldr	r3, [r4, #8]
   dd36c:	f99d 1003 	ldrsb.w	r1, [sp, #3]
   dd370:	68db      	ldr	r3, [r3, #12]
   dd372:	9301      	str	r3, [sp, #4]
   dd374:	2300      	movs	r3, #0
   dd376:	4299      	cmp	r1, r3
   dd378:	f88d 3003 	strb.w	r3, [sp, #3]
   dd37c:	f10d 0203 	add.w	r2, sp, #3
   dd380:	da04      	bge.n	dd38c <_ZL12ecp_mod_p256P11mbedtls_mpi+0x1a2>
   dd382:	4249      	negs	r1, r1
   dd384:	a801      	add	r0, sp, #4
   dd386:	f7ff ff25 	bl	dd1d4 <_ZL5sub32PmmPa>
   dd38a:	e002      	b.n	dd392 <_ZL12ecp_mod_p256P11mbedtls_mpi+0x1a8>
   dd38c:	a801      	add	r0, sp, #4
   dd38e:	f7ff ff17 	bl	dd1c0 <_ZL5add32PmmPa>

    ADD( 11 ); ADD( 11 ); ADD( 12 ); ADD( 12 ); ADD( 13 );
   dd392:	68a3      	ldr	r3, [r4, #8]
   dd394:	f10d 0203 	add.w	r2, sp, #3
   dd398:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   dd39a:	a801      	add	r0, sp, #4
   dd39c:	f7ff ff10 	bl	dd1c0 <_ZL5add32PmmPa>
   dd3a0:	68a3      	ldr	r3, [r4, #8]
   dd3a2:	f10d 0203 	add.w	r2, sp, #3
   dd3a6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   dd3a8:	a801      	add	r0, sp, #4
   dd3aa:	f7ff ff09 	bl	dd1c0 <_ZL5add32PmmPa>
   dd3ae:	68a3      	ldr	r3, [r4, #8]
   dd3b0:	f10d 0203 	add.w	r2, sp, #3
   dd3b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
   dd3b6:	a801      	add	r0, sp, #4
   dd3b8:	f7ff ff02 	bl	dd1c0 <_ZL5add32PmmPa>
   dd3bc:	68a3      	ldr	r3, [r4, #8]
   dd3be:	f10d 0203 	add.w	r2, sp, #3
   dd3c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
   dd3c4:	a801      	add	r0, sp, #4
   dd3c6:	f7ff fefb 	bl	dd1c0 <_ZL5add32PmmPa>
   dd3ca:	68a3      	ldr	r3, [r4, #8]
   dd3cc:	f10d 0203 	add.w	r2, sp, #3
   dd3d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
   dd3d2:	a801      	add	r0, sp, #4
   dd3d4:	f7ff fef4 	bl	dd1c0 <_ZL5add32PmmPa>
    SUB( 15 ); SUB(  8 ); SUB(  9 );                        NEXT; // A3
   dd3d8:	68a3      	ldr	r3, [r4, #8]
   dd3da:	f10d 0203 	add.w	r2, sp, #3
   dd3de:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   dd3e0:	a801      	add	r0, sp, #4
   dd3e2:	f7ff fef7 	bl	dd1d4 <_ZL5sub32PmmPa>
   dd3e6:	68a3      	ldr	r3, [r4, #8]
   dd3e8:	f10d 0203 	add.w	r2, sp, #3
   dd3ec:	6a19      	ldr	r1, [r3, #32]
   dd3ee:	a801      	add	r0, sp, #4
   dd3f0:	f7ff fef0 	bl	dd1d4 <_ZL5sub32PmmPa>
   dd3f4:	68a3      	ldr	r3, [r4, #8]
   dd3f6:	f10d 0203 	add.w	r2, sp, #3
   dd3fa:	6a59      	ldr	r1, [r3, #36]	; 0x24
   dd3fc:	a801      	add	r0, sp, #4
   dd3fe:	f7ff fee9 	bl	dd1d4 <_ZL5sub32PmmPa>
   dd402:	68a3      	ldr	r3, [r4, #8]
   dd404:	9a01      	ldr	r2, [sp, #4]
   dd406:	60da      	str	r2, [r3, #12]
   dd408:	68a3      	ldr	r3, [r4, #8]
   dd40a:	f99d 1003 	ldrsb.w	r1, [sp, #3]
   dd40e:	691b      	ldr	r3, [r3, #16]
   dd410:	9301      	str	r3, [sp, #4]
   dd412:	2300      	movs	r3, #0
   dd414:	4299      	cmp	r1, r3
   dd416:	f88d 3003 	strb.w	r3, [sp, #3]
   dd41a:	f10d 0203 	add.w	r2, sp, #3
   dd41e:	da04      	bge.n	dd42a <_ZL12ecp_mod_p256P11mbedtls_mpi+0x240>
   dd420:	4249      	negs	r1, r1
   dd422:	a801      	add	r0, sp, #4
   dd424:	f7ff fed6 	bl	dd1d4 <_ZL5sub32PmmPa>
   dd428:	e002      	b.n	dd430 <_ZL12ecp_mod_p256P11mbedtls_mpi+0x246>
   dd42a:	a801      	add	r0, sp, #4
   dd42c:	f7ff fec8 	bl	dd1c0 <_ZL5add32PmmPa>

    ADD( 12 ); ADD( 12 ); ADD( 13 ); ADD( 13 ); ADD( 14 );
   dd430:	68a3      	ldr	r3, [r4, #8]
   dd432:	f10d 0203 	add.w	r2, sp, #3
   dd436:	6b19      	ldr	r1, [r3, #48]	; 0x30
   dd438:	a801      	add	r0, sp, #4
   dd43a:	f7ff fec1 	bl	dd1c0 <_ZL5add32PmmPa>
   dd43e:	68a3      	ldr	r3, [r4, #8]
   dd440:	f10d 0203 	add.w	r2, sp, #3
   dd444:	6b19      	ldr	r1, [r3, #48]	; 0x30
   dd446:	a801      	add	r0, sp, #4
   dd448:	f7ff feba 	bl	dd1c0 <_ZL5add32PmmPa>
   dd44c:	68a3      	ldr	r3, [r4, #8]
   dd44e:	f10d 0203 	add.w	r2, sp, #3
   dd452:	6b59      	ldr	r1, [r3, #52]	; 0x34
   dd454:	a801      	add	r0, sp, #4
   dd456:	f7ff feb3 	bl	dd1c0 <_ZL5add32PmmPa>
   dd45a:	68a3      	ldr	r3, [r4, #8]
   dd45c:	f10d 0203 	add.w	r2, sp, #3
   dd460:	6b59      	ldr	r1, [r3, #52]	; 0x34
   dd462:	a801      	add	r0, sp, #4
   dd464:	f7ff feac 	bl	dd1c0 <_ZL5add32PmmPa>
   dd468:	68a3      	ldr	r3, [r4, #8]
   dd46a:	f10d 0203 	add.w	r2, sp, #3
   dd46e:	6b99      	ldr	r1, [r3, #56]	; 0x38
   dd470:	a801      	add	r0, sp, #4
   dd472:	f7ff fea5 	bl	dd1c0 <_ZL5add32PmmPa>
    SUB(  9 ); SUB( 10 );                                   NEXT; // A4
   dd476:	68a3      	ldr	r3, [r4, #8]
   dd478:	f10d 0203 	add.w	r2, sp, #3
   dd47c:	6a59      	ldr	r1, [r3, #36]	; 0x24
   dd47e:	a801      	add	r0, sp, #4
   dd480:	f7ff fea8 	bl	dd1d4 <_ZL5sub32PmmPa>
   dd484:	68a3      	ldr	r3, [r4, #8]
   dd486:	f10d 0203 	add.w	r2, sp, #3
   dd48a:	6a99      	ldr	r1, [r3, #40]	; 0x28
   dd48c:	a801      	add	r0, sp, #4
   dd48e:	f7ff fea1 	bl	dd1d4 <_ZL5sub32PmmPa>
   dd492:	68a3      	ldr	r3, [r4, #8]
   dd494:	9a01      	ldr	r2, [sp, #4]
   dd496:	611a      	str	r2, [r3, #16]
   dd498:	68a3      	ldr	r3, [r4, #8]
   dd49a:	f99d 1003 	ldrsb.w	r1, [sp, #3]
   dd49e:	695b      	ldr	r3, [r3, #20]
   dd4a0:	9301      	str	r3, [sp, #4]
   dd4a2:	2300      	movs	r3, #0
   dd4a4:	4299      	cmp	r1, r3
   dd4a6:	f88d 3003 	strb.w	r3, [sp, #3]
   dd4aa:	f10d 0203 	add.w	r2, sp, #3
   dd4ae:	da04      	bge.n	dd4ba <_ZL12ecp_mod_p256P11mbedtls_mpi+0x2d0>
   dd4b0:	4249      	negs	r1, r1
   dd4b2:	a801      	add	r0, sp, #4
   dd4b4:	f7ff fe8e 	bl	dd1d4 <_ZL5sub32PmmPa>
   dd4b8:	e002      	b.n	dd4c0 <_ZL12ecp_mod_p256P11mbedtls_mpi+0x2d6>
   dd4ba:	a801      	add	r0, sp, #4
   dd4bc:	f7ff fe80 	bl	dd1c0 <_ZL5add32PmmPa>

    ADD( 13 ); ADD( 13 ); ADD( 14 ); ADD( 14 ); ADD( 15 );
   dd4c0:	68a3      	ldr	r3, [r4, #8]
   dd4c2:	f10d 0203 	add.w	r2, sp, #3
   dd4c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
   dd4c8:	a801      	add	r0, sp, #4
   dd4ca:	f7ff fe79 	bl	dd1c0 <_ZL5add32PmmPa>
   dd4ce:	68a3      	ldr	r3, [r4, #8]
   dd4d0:	f10d 0203 	add.w	r2, sp, #3
   dd4d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
   dd4d6:	a801      	add	r0, sp, #4
   dd4d8:	f7ff fe72 	bl	dd1c0 <_ZL5add32PmmPa>
   dd4dc:	68a3      	ldr	r3, [r4, #8]
   dd4de:	f10d 0203 	add.w	r2, sp, #3
   dd4e2:	6b99      	ldr	r1, [r3, #56]	; 0x38
   dd4e4:	a801      	add	r0, sp, #4
   dd4e6:	f7ff fe6b 	bl	dd1c0 <_ZL5add32PmmPa>
   dd4ea:	68a3      	ldr	r3, [r4, #8]
   dd4ec:	f10d 0203 	add.w	r2, sp, #3
   dd4f0:	6b99      	ldr	r1, [r3, #56]	; 0x38
   dd4f2:	a801      	add	r0, sp, #4
   dd4f4:	f7ff fe64 	bl	dd1c0 <_ZL5add32PmmPa>
   dd4f8:	68a3      	ldr	r3, [r4, #8]
   dd4fa:	f10d 0203 	add.w	r2, sp, #3
   dd4fe:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   dd500:	a801      	add	r0, sp, #4
   dd502:	f7ff fe5d 	bl	dd1c0 <_ZL5add32PmmPa>
    SUB( 10 ); SUB( 11 );                                   NEXT; // A5
   dd506:	68a3      	ldr	r3, [r4, #8]
   dd508:	f10d 0203 	add.w	r2, sp, #3
   dd50c:	6a99      	ldr	r1, [r3, #40]	; 0x28
   dd50e:	a801      	add	r0, sp, #4
   dd510:	f7ff fe60 	bl	dd1d4 <_ZL5sub32PmmPa>
   dd514:	68a3      	ldr	r3, [r4, #8]
   dd516:	f10d 0203 	add.w	r2, sp, #3
   dd51a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   dd51c:	a801      	add	r0, sp, #4
   dd51e:	f7ff fe59 	bl	dd1d4 <_ZL5sub32PmmPa>
   dd522:	68a3      	ldr	r3, [r4, #8]
   dd524:	9a01      	ldr	r2, [sp, #4]
   dd526:	615a      	str	r2, [r3, #20]
   dd528:	68a3      	ldr	r3, [r4, #8]
   dd52a:	f99d 1003 	ldrsb.w	r1, [sp, #3]
   dd52e:	699b      	ldr	r3, [r3, #24]
   dd530:	9301      	str	r3, [sp, #4]
   dd532:	2300      	movs	r3, #0
   dd534:	4299      	cmp	r1, r3
   dd536:	f88d 3003 	strb.w	r3, [sp, #3]
   dd53a:	f10d 0203 	add.w	r2, sp, #3
   dd53e:	da04      	bge.n	dd54a <_ZL12ecp_mod_p256P11mbedtls_mpi+0x360>
   dd540:	4249      	negs	r1, r1
   dd542:	a801      	add	r0, sp, #4
   dd544:	f7ff fe46 	bl	dd1d4 <_ZL5sub32PmmPa>
   dd548:	e002      	b.n	dd550 <_ZL12ecp_mod_p256P11mbedtls_mpi+0x366>
   dd54a:	a801      	add	r0, sp, #4
   dd54c:	f7ff fe38 	bl	dd1c0 <_ZL5add32PmmPa>

    ADD( 14 ); ADD( 14 ); ADD( 15 ); ADD( 15 ); ADD( 14 ); ADD( 13 );
   dd550:	68a3      	ldr	r3, [r4, #8]
   dd552:	f10d 0203 	add.w	r2, sp, #3
   dd556:	6b99      	ldr	r1, [r3, #56]	; 0x38
   dd558:	a801      	add	r0, sp, #4
   dd55a:	f7ff fe31 	bl	dd1c0 <_ZL5add32PmmPa>
   dd55e:	68a3      	ldr	r3, [r4, #8]
   dd560:	f10d 0203 	add.w	r2, sp, #3
   dd564:	6b99      	ldr	r1, [r3, #56]	; 0x38
   dd566:	a801      	add	r0, sp, #4
   dd568:	f7ff fe2a 	bl	dd1c0 <_ZL5add32PmmPa>
   dd56c:	68a3      	ldr	r3, [r4, #8]
   dd56e:	f10d 0203 	add.w	r2, sp, #3
   dd572:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   dd574:	a801      	add	r0, sp, #4
   dd576:	f7ff fe23 	bl	dd1c0 <_ZL5add32PmmPa>
   dd57a:	68a3      	ldr	r3, [r4, #8]
   dd57c:	f10d 0203 	add.w	r2, sp, #3
   dd580:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   dd582:	a801      	add	r0, sp, #4
   dd584:	f7ff fe1c 	bl	dd1c0 <_ZL5add32PmmPa>
   dd588:	68a3      	ldr	r3, [r4, #8]
   dd58a:	f10d 0203 	add.w	r2, sp, #3
   dd58e:	6b99      	ldr	r1, [r3, #56]	; 0x38
   dd590:	a801      	add	r0, sp, #4
   dd592:	f7ff fe15 	bl	dd1c0 <_ZL5add32PmmPa>
   dd596:	68a3      	ldr	r3, [r4, #8]
   dd598:	f10d 0203 	add.w	r2, sp, #3
   dd59c:	6b59      	ldr	r1, [r3, #52]	; 0x34
   dd59e:	a801      	add	r0, sp, #4
   dd5a0:	f7ff fe0e 	bl	dd1c0 <_ZL5add32PmmPa>
    SUB(  8 ); SUB(  9 );                                   NEXT; // A6
   dd5a4:	68a3      	ldr	r3, [r4, #8]
   dd5a6:	f10d 0203 	add.w	r2, sp, #3
   dd5aa:	6a19      	ldr	r1, [r3, #32]
   dd5ac:	a801      	add	r0, sp, #4
   dd5ae:	f7ff fe11 	bl	dd1d4 <_ZL5sub32PmmPa>
   dd5b2:	68a3      	ldr	r3, [r4, #8]
   dd5b4:	f10d 0203 	add.w	r2, sp, #3
   dd5b8:	6a59      	ldr	r1, [r3, #36]	; 0x24
   dd5ba:	a801      	add	r0, sp, #4
   dd5bc:	f7ff fe0a 	bl	dd1d4 <_ZL5sub32PmmPa>
   dd5c0:	68a3      	ldr	r3, [r4, #8]
   dd5c2:	9a01      	ldr	r2, [sp, #4]
   dd5c4:	619a      	str	r2, [r3, #24]
   dd5c6:	68a3      	ldr	r3, [r4, #8]
   dd5c8:	f99d 1003 	ldrsb.w	r1, [sp, #3]
   dd5cc:	69db      	ldr	r3, [r3, #28]
   dd5ce:	9301      	str	r3, [sp, #4]
   dd5d0:	2300      	movs	r3, #0
   dd5d2:	4299      	cmp	r1, r3
   dd5d4:	f88d 3003 	strb.w	r3, [sp, #3]
   dd5d8:	f10d 0203 	add.w	r2, sp, #3
   dd5dc:	da04      	bge.n	dd5e8 <_ZL12ecp_mod_p256P11mbedtls_mpi+0x3fe>
   dd5de:	4249      	negs	r1, r1
   dd5e0:	a801      	add	r0, sp, #4
   dd5e2:	f7ff fdf7 	bl	dd1d4 <_ZL5sub32PmmPa>
   dd5e6:	e002      	b.n	dd5ee <_ZL12ecp_mod_p256P11mbedtls_mpi+0x404>
   dd5e8:	a801      	add	r0, sp, #4
   dd5ea:	f7ff fde9 	bl	dd1c0 <_ZL5add32PmmPa>

    ADD( 15 ); ADD( 15 ); ADD( 15 ); ADD( 8 );
   dd5ee:	68a3      	ldr	r3, [r4, #8]
   dd5f0:	f10d 0203 	add.w	r2, sp, #3
   dd5f4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   dd5f6:	a801      	add	r0, sp, #4
   dd5f8:	f7ff fde2 	bl	dd1c0 <_ZL5add32PmmPa>
   dd5fc:	68a3      	ldr	r3, [r4, #8]
   dd5fe:	f10d 0203 	add.w	r2, sp, #3
   dd602:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   dd604:	a801      	add	r0, sp, #4
   dd606:	f7ff fddb 	bl	dd1c0 <_ZL5add32PmmPa>
   dd60a:	68a3      	ldr	r3, [r4, #8]
   dd60c:	f10d 0203 	add.w	r2, sp, #3
   dd610:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   dd612:	a801      	add	r0, sp, #4
   dd614:	f7ff fdd4 	bl	dd1c0 <_ZL5add32PmmPa>
   dd618:	68a3      	ldr	r3, [r4, #8]
   dd61a:	f10d 0203 	add.w	r2, sp, #3
   dd61e:	6a19      	ldr	r1, [r3, #32]
   dd620:	a801      	add	r0, sp, #4
   dd622:	f7ff fdcd 	bl	dd1c0 <_ZL5add32PmmPa>
    SUB( 10 ); SUB( 11 ); SUB( 12 ); SUB( 13 );             LAST; // A7
   dd626:	68a3      	ldr	r3, [r4, #8]
   dd628:	f10d 0203 	add.w	r2, sp, #3
   dd62c:	6a99      	ldr	r1, [r3, #40]	; 0x28
   dd62e:	a801      	add	r0, sp, #4
   dd630:	f7ff fdd0 	bl	dd1d4 <_ZL5sub32PmmPa>
   dd634:	68a3      	ldr	r3, [r4, #8]
   dd636:	f10d 0203 	add.w	r2, sp, #3
   dd63a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   dd63c:	a801      	add	r0, sp, #4
   dd63e:	f7ff fdc9 	bl	dd1d4 <_ZL5sub32PmmPa>
   dd642:	68a3      	ldr	r3, [r4, #8]
   dd644:	f10d 0203 	add.w	r2, sp, #3
   dd648:	6b19      	ldr	r1, [r3, #48]	; 0x30
   dd64a:	a801      	add	r0, sp, #4
   dd64c:	f7ff fdc2 	bl	dd1d4 <_ZL5sub32PmmPa>
   dd650:	68a3      	ldr	r3, [r4, #8]
   dd652:	f10d 0203 	add.w	r2, sp, #3
   dd656:	6b59      	ldr	r1, [r3, #52]	; 0x34
   dd658:	a801      	add	r0, sp, #4
   dd65a:	f7ff fdbb 	bl	dd1d4 <_ZL5sub32PmmPa>
   dd65e:	68a3      	ldr	r3, [r4, #8]
   dd660:	9a01      	ldr	r2, [sp, #4]
   dd662:	61da      	str	r2, [r3, #28]
   dd664:	f99d 3003 	ldrsb.w	r3, [sp, #3]
   dd668:	68a2      	ldr	r2, [r4, #8]
   dd66a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   dd66e:	6213      	str	r3, [r2, #32]
   dd670:	2300      	movs	r3, #0
   dd672:	9301      	str	r3, [sp, #4]
   dd674:	2308      	movs	r3, #8
   dd676:	6862      	ldr	r2, [r4, #4]
   dd678:	3301      	adds	r3, #1
   dd67a:	4293      	cmp	r3, r2
   dd67c:	d204      	bcs.n	dd688 <_ZL12ecp_mod_p256P11mbedtls_mpi+0x49e>
   dd67e:	68a2      	ldr	r2, [r4, #8]
   dd680:	9901      	ldr	r1, [sp, #4]
   dd682:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   dd686:	e7f6      	b.n	dd676 <_ZL12ecp_mod_p256P11mbedtls_mpi+0x48c>
   dd688:	f99d 2003 	ldrsb.w	r2, [sp, #3]
   dd68c:	2a00      	cmp	r2, #0
   dd68e:	da10      	bge.n	dd6b2 <_ZL12ecp_mod_p256P11mbedtls_mpi+0x4c8>
#else
    if( bits == 224 )
        C->p[ C->n - 1 ] = ((mbedtls_mpi_uint) -c) << 32;
    else
#endif
        C->p[ C->n - 1 ] = (mbedtls_mpi_uint) -c;
   dd690:	9b03      	ldr	r3, [sp, #12]
   dd692:	9904      	ldr	r1, [sp, #16]
   dd694:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   dd698:	3b01      	subs	r3, #1
   dd69a:	4252      	negs	r2, r2
   dd69c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    /* N = - ( C - N ) */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, C, N ) );
   dd6a0:	4620      	mov	r0, r4
   dd6a2:	4622      	mov	r2, r4
   dd6a4:	a902      	add	r1, sp, #8
   dd6a6:	f003 fed6 	bl	e1456 <mbedtls_mpi_sub_abs>
   dd6aa:	b910      	cbnz	r0, dd6b2 <_ZL12ecp_mod_p256P11mbedtls_mpi+0x4c8>
    N->s = -1;
   dd6ac:	f04f 33ff 	mov.w	r3, #4294967295
   dd6b0:	6023      	str	r3, [r4, #0]
    ADD( 15 ); ADD( 15 ); ADD( 15 ); ADD( 8 );
    SUB( 10 ); SUB( 11 ); SUB( 12 ); SUB( 13 );             LAST; // A7

cleanup:
    return( ret );
}
   dd6b2:	4628      	mov	r0, r5
   dd6b4:	b00f      	add	sp, #60	; 0x3c
   dd6b6:	bd30      	pop	{r4, r5, pc}

000dd6b8 <mbedtls_ecp_group_load>:

/*
 * Set a group using well-known domain parameters
 */
int mbedtls_ecp_group_load( mbedtls_ecp_group *grp, mbedtls_ecp_group_id id )
{
   dd6b8:	b538      	push	{r3, r4, r5, lr}
   dd6ba:	460d      	mov	r5, r1
   dd6bc:	4604      	mov	r4, r0
    ECP_VALIDATE_RET( grp != NULL );
    mbedtls_ecp_group_free( grp );
   dd6be:	f7fb fbfe 	bl	d8ebe <mbedtls_ecp_group_free>

    grp->id = id;

    switch( id )
   dd6c2:	2d03      	cmp	r5, #3
int mbedtls_ecp_group_load( mbedtls_ecp_group *grp, mbedtls_ecp_group_id id )
{
    ECP_VALIDATE_RET( grp != NULL );
    mbedtls_ecp_group_free( grp );

    grp->id = id;
   dd6c4:	7025      	strb	r5, [r4, #0]

    switch( id )
   dd6c6:	d127      	bne.n	dd718 <mbedtls_ecp_group_load+0x60>
            return( LOAD_GROUP( secp224r1 ) );
#endif /* MBEDTLS_ECP_DP_SECP224R1_ENABLED */

#if defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED)
        case MBEDTLS_ECP_DP_SECP256R1:
            NIST_MODP( p256 );
   dd6c8:	4b16      	ldr	r3, [pc, #88]	; (dd724 <mbedtls_ecp_group_load+0x6c>)
 */
static inline void ecp_mpi_load( mbedtls_mpi *X, const mbedtls_mpi_uint *p, size_t len )
{
    X->s = 1;
    X->n = len / sizeof( mbedtls_mpi_uint );
    X->p = (mbedtls_mpi_uint *) p;
   dd6ca:	4a17      	ldr	r2, [pc, #92]	; (dd728 <mbedtls_ecp_group_load+0x70>)
            return( LOAD_GROUP( secp224r1 ) );
#endif /* MBEDTLS_ECP_DP_SECP224R1_ENABLED */

#if defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED)
        case MBEDTLS_ECP_DP_SECP256R1:
            NIST_MODP( p256 );
   dd6cc:	6663      	str	r3, [r4, #100]	; 0x64
 */
static inline void ecp_mpi_load( mbedtls_mpi *X, const mbedtls_mpi_uint *p, size_t len )
{
    X->s = 1;
    X->n = len / sizeof( mbedtls_mpi_uint );
    X->p = (mbedtls_mpi_uint *) p;
   dd6ce:	60e2      	str	r2, [r4, #12]
 * (assumes len is an exact multiple of sizeof mbedtls_mpi_uint)
 */
static inline void ecp_mpi_load( mbedtls_mpi *X, const mbedtls_mpi_uint *p, size_t len )
{
    X->s = 1;
    X->n = len / sizeof( mbedtls_mpi_uint );
   dd6d0:	2308      	movs	r3, #8
    X->p = (mbedtls_mpi_uint *) p;
   dd6d2:	4a16      	ldr	r2, [pc, #88]	; (dd72c <mbedtls_ecp_group_load+0x74>)
 * (assumes len is an exact multiple of sizeof mbedtls_mpi_uint)
 */
static inline void ecp_mpi_load( mbedtls_mpi *X, const mbedtls_mpi_uint *p, size_t len )
{
    X->s = 1;
    X->n = len / sizeof( mbedtls_mpi_uint );
   dd6d4:	60a3      	str	r3, [r4, #8]
   dd6d6:	6223      	str	r3, [r4, #32]
    X->p = (mbedtls_mpi_uint *) p;
   dd6d8:	6262      	str	r2, [r4, #36]	; 0x24
 * (assumes len is an exact multiple of sizeof mbedtls_mpi_uint)
 */
static inline void ecp_mpi_load( mbedtls_mpi *X, const mbedtls_mpi_uint *p, size_t len )
{
    X->s = 1;
    X->n = len / sizeof( mbedtls_mpi_uint );
   dd6da:	6523      	str	r3, [r4, #80]	; 0x50
   dd6dc:	62e3      	str	r3, [r4, #44]	; 0x2c
   dd6de:	63a3      	str	r3, [r4, #56]	; 0x38
    X->p = (mbedtls_mpi_uint *) p;
   dd6e0:	4a13      	ldr	r2, [pc, #76]	; (dd730 <mbedtls_ecp_group_load+0x78>)
   dd6e2:	4b14      	ldr	r3, [pc, #80]	; (dd734 <mbedtls_ecp_group_load+0x7c>)
   dd6e4:	6562      	str	r2, [r4, #84]	; 0x54
 * Create an MPI from embedded constants
 * (assumes len is an exact multiple of sizeof mbedtls_mpi_uint)
 */
static inline void ecp_mpi_load( mbedtls_mpi *X, const mbedtls_mpi_uint *p, size_t len )
{
    X->s = 1;
   dd6e6:	2501      	movs	r5, #1
    X->n = len / sizeof( mbedtls_mpi_uint );
    X->p = (mbedtls_mpi_uint *) p;
   dd6e8:	4a13      	ldr	r2, [pc, #76]	; (dd738 <mbedtls_ecp_group_load+0x80>)
   dd6ea:	63e3      	str	r3, [r4, #60]	; 0x3c
static inline void ecp_mpi_set1( mbedtls_mpi *X )
{
    static mbedtls_mpi_uint one[] = { 1 };
    X->s = 1;
    X->n = 1;
    X->p = one;
   dd6ec:	4b13      	ldr	r3, [pc, #76]	; (dd73c <mbedtls_ecp_group_load+0x84>)
 */
static inline void ecp_mpi_load( mbedtls_mpi *X, const mbedtls_mpi_uint *p, size_t len )
{
    X->s = 1;
    X->n = len / sizeof( mbedtls_mpi_uint );
    X->p = (mbedtls_mpi_uint *) p;
   dd6ee:	6322      	str	r2, [r4, #48]	; 0x30
static inline void ecp_mpi_set1( mbedtls_mpi *X )
{
    static mbedtls_mpi_uint one[] = { 1 };
    X->s = 1;
    X->n = 1;
    X->p = one;
   dd6f0:	64a3      	str	r3, [r4, #72]	; 0x48
 * Create an MPI from embedded constants
 * (assumes len is an exact multiple of sizeof mbedtls_mpi_uint)
 */
static inline void ecp_mpi_load( mbedtls_mpi *X, const mbedtls_mpi_uint *p, size_t len )
{
    X->s = 1;
   dd6f2:	6065      	str	r5, [r4, #4]
   dd6f4:	61e5      	str	r5, [r4, #28]
   dd6f6:	64e5      	str	r5, [r4, #76]	; 0x4c
   dd6f8:	62a5      	str	r5, [r4, #40]	; 0x28
   dd6fa:	6365      	str	r5, [r4, #52]	; 0x34
 * Set an MPI to static value 1
 */
static inline void ecp_mpi_set1( mbedtls_mpi *X )
{
    static mbedtls_mpi_uint one[] = { 1 };
    X->s = 1;
   dd6fc:	6425      	str	r5, [r4, #64]	; 0x40
    X->n = 1;
   dd6fe:	6465      	str	r5, [r4, #68]	; 0x44

    ecp_mpi_load( &grp->G.X, gx, gxlen );
    ecp_mpi_load( &grp->G.Y, gy, gylen );
    ecp_mpi_set1( &grp->G.Z );

    grp->pbits = mbedtls_mpi_bitlen( &grp->P );
   dd700:	1d20      	adds	r0, r4, #4
   dd702:	f003 fc33 	bl	e0f6c <mbedtls_mpi_bitlen>
   dd706:	65a0      	str	r0, [r4, #88]	; 0x58
    grp->nbits = mbedtls_mpi_bitlen( &grp->N );
   dd708:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   dd70c:	f003 fc2e 	bl	e0f6c <mbedtls_mpi_bitlen>

    grp->h = 1;
   dd710:	6625      	str	r5, [r4, #96]	; 0x60
    ecp_mpi_load( &grp->G.X, gx, gxlen );
    ecp_mpi_load( &grp->G.Y, gy, gylen );
    ecp_mpi_set1( &grp->G.Z );

    grp->pbits = mbedtls_mpi_bitlen( &grp->P );
    grp->nbits = mbedtls_mpi_bitlen( &grp->N );
   dd712:	65e0      	str	r0, [r4, #92]	; 0x5c
#endif /* MBEDTLS_ECP_DP_SECP224R1_ENABLED */

#if defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED)
        case MBEDTLS_ECP_DP_SECP256R1:
            NIST_MODP( p256 );
            return( LOAD_GROUP( secp256r1 ) );
   dd714:	2000      	movs	r0, #0
   dd716:	bd38      	pop	{r3, r4, r5, pc}
            grp->modp = ecp_mod_p448;
            return( ecp_use_curve448( grp ) );
#endif /* MBEDTLS_ECP_DP_CURVE448_ENABLED */

        default:
            mbedtls_ecp_group_free( grp );
   dd718:	4620      	mov	r0, r4
   dd71a:	f7fb fbd0 	bl	d8ebe <mbedtls_ecp_group_free>
            return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
   dd71e:	4808      	ldr	r0, [pc, #32]	; (dd740 <mbedtls_ecp_group_load+0x88>)
    }
}
   dd720:	bd38      	pop	{r3, r4, r5, pc}
   dd722:	bf00      	nop
   dd724:	000dd1eb 	.word	0x000dd1eb
   dd728:	000edf3c 	.word	0x000edf3c
   dd72c:	000edefc 	.word	0x000edefc
   dd730:	000edf1c 	.word	0x000edf1c
   dd734:	000edf7c 	.word	0x000edf7c
   dd738:	000edf5c 	.word	0x000edf5c
   dd73c:	2003ab78 	.word	0x2003ab78
   dd740:	ffffb180 	.word	0xffffb180

000dd744 <_ZL15x509_memcasecmpPKvS0_j>:

/*
 * Like memcmp, but case-insensitive and always returns -1 if different
 */
static int x509_memcasecmp( const void *s1, const void *s2, size_t len )
{
   dd744:	b530      	push	{r4, r5, lr}
    size_t i;
    unsigned char diff;
    const unsigned char *n1 = (const unsigned char *)s1, *n2 = (const unsigned char *)s2;

    for( i = 0; i < len; i++ )
   dd746:	2400      	movs	r4, #0
   dd748:	4294      	cmp	r4, r2
   dd74a:	d00c      	beq.n	dd766 <_ZL15x509_memcasecmpPKvS0_j+0x22>
    {
        diff = n1[i] ^ n2[i];
   dd74c:	5d03      	ldrb	r3, [r0, r4]
   dd74e:	5d0d      	ldrb	r5, [r1, r4]

        if( diff == 0 )
   dd750:	405d      	eors	r5, r3
   dd752:	d006      	beq.n	dd762 <_ZL15x509_memcasecmpPKvS0_j+0x1e>
            continue;

        if( diff == 32 &&
   dd754:	2d20      	cmp	r5, #32
   dd756:	d108      	bne.n	dd76a <_ZL15x509_memcasecmpPKvS0_j+0x26>
            ( ( n1[i] >= 'a' && n1[i] <= 'z' ) ||
   dd758:	f023 0320 	bic.w	r3, r3, #32
   dd75c:	3b41      	subs	r3, #65	; 0x41
   dd75e:	2b19      	cmp	r3, #25
   dd760:	d803      	bhi.n	dd76a <_ZL15x509_memcasecmpPKvS0_j+0x26>
{
    size_t i;
    unsigned char diff;
    const unsigned char *n1 = (const unsigned char *)s1, *n2 = (const unsigned char *)s2;

    for( i = 0; i < len; i++ )
   dd762:	3401      	adds	r4, #1
   dd764:	e7f0      	b.n	dd748 <_ZL15x509_memcasecmpPKvS0_j+0x4>
        }

        return( -1 );
    }

    return( 0 );
   dd766:	2000      	movs	r0, #0
   dd768:	bd30      	pop	{r4, r5, pc}
              ( n1[i] >= 'A' && n1[i] <= 'Z' ) ) )
        {
            continue;
        }

        return( -1 );
   dd76a:	f04f 30ff 	mov.w	r0, #4294967295
    }

    return( 0 );
}
   dd76e:	bd30      	pop	{r4, r5, pc}

000dd770 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_>:
 * or space folding.)
 *
 * Return 0 if equal, -1 otherwise.
 */
static int x509_name_cmp( const mbedtls_x509_name *a, const mbedtls_x509_name *b )
{
   dd770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dd772:	4605      	mov	r5, r0
   dd774:	460c      	mov	r4, r1
    /* Avoid recursion, it might not be optimised by the compiler */
    while( a != NULL || b != NULL )
   dd776:	b925      	cbnz	r5, dd782 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x12>
   dd778:	1c20      	adds	r0, r4, #0
   dd77a:	bf18      	it	ne
   dd77c:	2001      	movne	r0, #1
   dd77e:	4240      	negs	r0, r0
   dd780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    {
        if( a == NULL || b == NULL )
   dd782:	2c00      	cmp	r4, #0
   dd784:	d031      	beq.n	dd7ea <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
            return( -1 );

        /* type */
        if( a->oid.tag != b->oid.tag ||
   dd786:	682a      	ldr	r2, [r5, #0]
   dd788:	6823      	ldr	r3, [r4, #0]
   dd78a:	429a      	cmp	r2, r3
   dd78c:	d12d      	bne.n	dd7ea <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
            a->oid.len != b->oid.len ||
   dd78e:	686a      	ldr	r2, [r5, #4]
    {
        if( a == NULL || b == NULL )
            return( -1 );

        /* type */
        if( a->oid.tag != b->oid.tag ||
   dd790:	6863      	ldr	r3, [r4, #4]
   dd792:	429a      	cmp	r2, r3
   dd794:	d129      	bne.n	dd7ea <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
            a->oid.len != b->oid.len ||
            memcmp( a->oid.p, b->oid.p, b->oid.len ) != 0 )
   dd796:	68a1      	ldr	r1, [r4, #8]
   dd798:	68a8      	ldr	r0, [r5, #8]
   dd79a:	f00c f97d 	bl	e9a98 <memcmp>
        if( a == NULL || b == NULL )
            return( -1 );

        /* type */
        if( a->oid.tag != b->oid.tag ||
            a->oid.len != b->oid.len ||
   dd79e:	bb20      	cbnz	r0, dd7ea <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
 *
 * Return 0 if equal, -1 otherwise.
 */
static int x509_string_cmp( const mbedtls_x509_buf *a, const mbedtls_x509_buf *b )
{
    if( a->tag == b->tag &&
   dd7a0:	68ef      	ldr	r7, [r5, #12]
   dd7a2:	68e6      	ldr	r6, [r4, #12]
   dd7a4:	42b7      	cmp	r7, r6
   dd7a6:	d108      	bne.n	dd7ba <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x4a>
        a->len == b->len &&
   dd7a8:	692a      	ldr	r2, [r5, #16]
 *
 * Return 0 if equal, -1 otherwise.
 */
static int x509_string_cmp( const mbedtls_x509_buf *a, const mbedtls_x509_buf *b )
{
    if( a->tag == b->tag &&
   dd7aa:	6923      	ldr	r3, [r4, #16]
   dd7ac:	429a      	cmp	r2, r3
   dd7ae:	d104      	bne.n	dd7ba <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x4a>
        a->len == b->len &&
        memcmp( a->p, b->p, b->len ) == 0 )
   dd7b0:	6961      	ldr	r1, [r4, #20]
   dd7b2:	6968      	ldr	r0, [r5, #20]
   dd7b4:	f00c f970 	bl	e9a98 <memcmp>
 * Return 0 if equal, -1 otherwise.
 */
static int x509_string_cmp( const mbedtls_x509_buf *a, const mbedtls_x509_buf *b )
{
    if( a->tag == b->tag &&
        a->len == b->len &&
   dd7b8:	b180      	cbz	r0, dd7dc <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x6c>
        return( 0 );
    }

    if( ( a->tag == MBEDTLS_ASN1_UTF8_STRING || a->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
        a->len == b->len &&
   dd7ba:	2f0c      	cmp	r7, #12
   dd7bc:	d001      	beq.n	dd7c2 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x52>
        memcmp( a->p, b->p, b->len ) == 0 )
    {
        return( 0 );
    }

    if( ( a->tag == MBEDTLS_ASN1_UTF8_STRING || a->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
   dd7be:	2f13      	cmp	r7, #19
   dd7c0:	d113      	bne.n	dd7ea <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
   dd7c2:	2e0c      	cmp	r6, #12
   dd7c4:	d001      	beq.n	dd7ca <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x5a>
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
   dd7c6:	2e13      	cmp	r6, #19
   dd7c8:	d10f      	bne.n	dd7ea <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
        a->len == b->len &&
   dd7ca:	692a      	ldr	r2, [r5, #16]
    {
        return( 0 );
    }

    if( ( a->tag == MBEDTLS_ASN1_UTF8_STRING || a->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
   dd7cc:	6923      	ldr	r3, [r4, #16]
   dd7ce:	429a      	cmp	r2, r3
   dd7d0:	d10b      	bne.n	dd7ea <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
        a->len == b->len &&
        x509_memcasecmp( a->p, b->p, b->len ) == 0 )
   dd7d2:	6961      	ldr	r1, [r4, #20]
   dd7d4:	6968      	ldr	r0, [r5, #20]
   dd7d6:	f7ff ffb5 	bl	dd744 <_ZL15x509_memcasecmpPKvS0_j>
        {
            return( -1 );
        }

        /* value */
        if( x509_string_cmp( &a->val, &b->val ) != 0 )
   dd7da:	b930      	cbnz	r0, dd7ea <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
            return( -1 );

        /* structure of the list of sets */
        if( a->next_merged != b->next_merged )
   dd7dc:	7f2a      	ldrb	r2, [r5, #28]
   dd7de:	7f23      	ldrb	r3, [r4, #28]
   dd7e0:	429a      	cmp	r2, r3
   dd7e2:	d102      	bne.n	dd7ea <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
            return( -1 );

        a = a->next;
   dd7e4:	69ad      	ldr	r5, [r5, #24]
        b = b->next;
   dd7e6:	69a4      	ldr	r4, [r4, #24]
 * Return 0 if equal, -1 otherwise.
 */
static int x509_name_cmp( const mbedtls_x509_name *a, const mbedtls_x509_name *b )
{
    /* Avoid recursion, it might not be optimised by the compiler */
    while( a != NULL || b != NULL )
   dd7e8:	e7c5      	b.n	dd776 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x6>
    {
        if( a == NULL || b == NULL )
            return( -1 );
   dd7ea:	f04f 30ff 	mov.w	r0, #4294967295
        b = b->next;
    }

    /* a == NULL == b */
    return( 0 );
}
   dd7ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000dd7f0 <_ZL25x509_profile_check_md_algPK24mbedtls_x509_crt_profile17mbedtls_md_type_t.isra.1>:
 * Return 0 if pk_alg is acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_pk_alg( const mbedtls_x509_crt_profile *profile,
                                      mbedtls_pk_type_t pk_alg )
{
    if( pk_alg == MBEDTLS_PK_NONE )
   dd7f0:	b151      	cbz	r1, dd808 <_ZL25x509_profile_check_md_algPK24mbedtls_x509_crt_profile17mbedtls_md_type_t.isra.1+0x18>
        return( -1 );

    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
   dd7f2:	2301      	movs	r3, #1
   dd7f4:	3901      	subs	r1, #1
   dd7f6:	fa03 f101 	lsl.w	r1, r3, r1
   dd7fa:	6803      	ldr	r3, [r0, #0]
   dd7fc:	4219      	tst	r1, r3
   dd7fe:	bf0c      	ite	eq
   dd800:	f04f 30ff 	moveq.w	r0, #4294967295
   dd804:	2000      	movne	r0, #0
   dd806:	4770      	bx	lr
 */
static int x509_profile_check_pk_alg( const mbedtls_x509_crt_profile *profile,
                                      mbedtls_pk_type_t pk_alg )
{
    if( pk_alg == MBEDTLS_PK_NONE )
        return( -1 );
   dd808:	f04f 30ff 	mov.w	r0, #4294967295

    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
        return( 0 );

    return( -1 );
}
   dd80c:	4770      	bx	lr

000dd80e <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi>:
 * X.509 v2/v3 unique identifier (not parsed)
 */
static int x509_get_uid( unsigned char **p,
                         const unsigned char *end,
                         mbedtls_x509_buf *uid, int n )
{
   dd80e:	b570      	push	{r4, r5, r6, lr}
   dd810:	4615      	mov	r5, r2
    int ret;

    if( *p == end )
   dd812:	6802      	ldr	r2, [r0, #0]
   dd814:	428a      	cmp	r2, r1
 * X.509 v2/v3 unique identifier (not parsed)
 */
static int x509_get_uid( unsigned char **p,
                         const unsigned char *end,
                         mbedtls_x509_buf *uid, int n )
{
   dd816:	4604      	mov	r4, r0
    int ret;

    if( *p == end )
   dd818:	d101      	bne.n	dd81e <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi+0x10>
        return( 0 );
   dd81a:	2000      	movs	r0, #0
   dd81c:	bd70      	pop	{r4, r5, r6, pc}

    uid->tag = **p;
   dd81e:	7816      	ldrb	r6, [r2, #0]
   dd820:	462a      	mov	r2, r5

    if( ( ret = mbedtls_asn1_get_tag( p, end, &uid->len,
   dd822:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
    int ret;

    if( *p == end )
        return( 0 );

    uid->tag = **p;
   dd826:	f842 6b04 	str.w	r6, [r2], #4

    if( ( ret = mbedtls_asn1_get_tag( p, end, &uid->len,
   dd82a:	f7f8 fe0f 	bl	d644c <mbedtls_asn1_get_tag>
   dd82e:	b128      	cbz	r0, dd83c <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi+0x2e>
            MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | n ) ) != 0 )
    {
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   dd830:	f110 0f62 	cmn.w	r0, #98	; 0x62
   dd834:	d0f1      	beq.n	dd81a <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi+0xc>
            return( 0 );

        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
   dd836:	f5a0 5006 	sub.w	r0, r0, #8576	; 0x2180
   dd83a:	bd70      	pop	{r4, r5, r6, pc}
    }

    uid->p = *p;
   dd83c:	6823      	ldr	r3, [r4, #0]
   dd83e:	60ab      	str	r3, [r5, #8]
    *p += uid->len;
   dd840:	6822      	ldr	r2, [r4, #0]
   dd842:	686b      	ldr	r3, [r5, #4]
   dd844:	4413      	add	r3, r2
   dd846:	6023      	str	r3, [r4, #0]

    return( 0 );
}
   dd848:	bd70      	pop	{r4, r5, r6, pc}

000dd84a <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profilePK18mbedtls_pk_context>:
 * Check key against profile
 * Return 0 if pk is acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_key( const mbedtls_x509_crt_profile *profile,
                                   const mbedtls_pk_context *pk )
{
   dd84a:	b538      	push	{r3, r4, r5, lr}
   dd84c:	4604      	mov	r4, r0
    const mbedtls_pk_type_t pk_alg = mbedtls_pk_get_type( pk );
   dd84e:	4608      	mov	r0, r1
 * Check key against profile
 * Return 0 if pk is acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_key( const mbedtls_x509_crt_profile *profile,
                                   const mbedtls_pk_context *pk )
{
   dd850:	460d      	mov	r5, r1
    const mbedtls_pk_type_t pk_alg = mbedtls_pk_get_type( pk );
   dd852:	f001 fb7b 	bl	def4c <mbedtls_pk_get_type>

#if defined(MBEDTLS_RSA_C)
    if( pk_alg == MBEDTLS_PK_RSA || pk_alg == MBEDTLS_PK_RSASSA_PSS )
   dd856:	2801      	cmp	r0, #1
   dd858:	d001      	beq.n	dd85e <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profilePK18mbedtls_pk_context+0x14>
   dd85a:	2806      	cmp	r0, #6
   dd85c:	d109      	bne.n	dd872 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profilePK18mbedtls_pk_context+0x28>
    {
        if( mbedtls_pk_get_bitlen( pk ) >= profile->rsa_min_bitlen )
   dd85e:	4628      	mov	r0, r5
   dd860:	f001 fb08 	bl	dee74 <mbedtls_pk_get_bitlen>
   dd864:	68e3      	ldr	r3, [r4, #12]
   dd866:	4298      	cmp	r0, r3
   dd868:	f04f 30ff 	mov.w	r0, #4294967295
   dd86c:	bf28      	it	cs
   dd86e:	2000      	movcs	r0, #0
   dd870:	bd38      	pop	{r3, r4, r5, pc}
        return( -1 );
    }
#endif

#if defined(MBEDTLS_ECP_C)
    if( pk_alg == MBEDTLS_PK_ECDSA ||
   dd872:	3802      	subs	r0, #2
   dd874:	b2c0      	uxtb	r0, r0
   dd876:	2802      	cmp	r0, #2
   dd878:	d80d      	bhi.n	dd896 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profilePK18mbedtls_pk_context+0x4c>
        pk_alg == MBEDTLS_PK_ECKEY ||
        pk_alg == MBEDTLS_PK_ECKEY_DH )
    {
        const mbedtls_ecp_group_id gid = mbedtls_pk_ec( *pk )->grp.id;
   dd87a:	686b      	ldr	r3, [r5, #4]
   dd87c:	781b      	ldrb	r3, [r3, #0]

        if( gid == MBEDTLS_ECP_DP_NONE )
   dd87e:	b153      	cbz	r3, dd896 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profilePK18mbedtls_pk_context+0x4c>
            return( -1 );

        if( ( profile->allowed_curves & MBEDTLS_X509_ID_FLAG( gid ) ) != 0 )
   dd880:	2201      	movs	r2, #1
   dd882:	3b01      	subs	r3, #1
   dd884:	fa02 f303 	lsl.w	r3, r2, r3
   dd888:	68a2      	ldr	r2, [r4, #8]
   dd88a:	4213      	tst	r3, r2
   dd88c:	bf0c      	ite	eq
   dd88e:	f04f 30ff 	moveq.w	r0, #4294967295
   dd892:	2000      	movne	r0, #0
   dd894:	bd38      	pop	{r3, r4, r5, pc}

        return( -1 );
    }
#endif

    return( -1 );
   dd896:	f04f 30ff 	mov.w	r0, #4294967295
}
   dd89a:	bd38      	pop	{r3, r4, r5, pc}

000dd89c <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj>:
/*
 * Check for CN match
 */
static int x509_crt_check_cn( const mbedtls_x509_buf *name,
                              const char *cn, size_t cn_len )
{
   dd89c:	b570      	push	{r4, r5, r6, lr}
    /* try exact match */
    if( name->len == cn_len &&
   dd89e:	6845      	ldr	r5, [r0, #4]
   dd8a0:	4295      	cmp	r5, r2
/*
 * Check for CN match
 */
static int x509_crt_check_cn( const mbedtls_x509_buf *name,
                              const char *cn, size_t cn_len )
{
   dd8a2:	4606      	mov	r6, r0
   dd8a4:	460c      	mov	r4, r1
    /* try exact match */
    if( name->len == cn_len &&
   dd8a6:	d104      	bne.n	dd8b2 <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj+0x16>
        x509_memcasecmp( cn, name->p, cn_len ) == 0 )
   dd8a8:	6881      	ldr	r1, [r0, #8]
   dd8aa:	4620      	mov	r0, r4
   dd8ac:	f7ff ff4a 	bl	dd744 <_ZL15x509_memcasecmpPKvS0_j>
 */
static int x509_crt_check_cn( const mbedtls_x509_buf *name,
                              const char *cn, size_t cn_len )
{
    /* try exact match */
    if( name->len == cn_len &&
   dd8b0:	b350      	cbz	r0, dd908 <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj+0x6c>
 * Return 0 if name matches wildcard, -1 otherwise
 */
static int x509_check_wildcard( const char *cn, const mbedtls_x509_buf *name )
{
    size_t i;
    size_t cn_idx = 0, cn_len = strlen( cn );
   dd8b2:	4620      	mov	r0, r4
   dd8b4:	f00c f976 	bl	e9ba4 <strlen>

    /* We can't have a match if there is no wildcard to match */
    if( name->len < 3 || name->p[0] != '*' || name->p[1] != '.' )
   dd8b8:	2d02      	cmp	r5, #2
   dd8ba:	d922      	bls.n	dd902 <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj+0x66>
   dd8bc:	68b3      	ldr	r3, [r6, #8]
   dd8be:	781a      	ldrb	r2, [r3, #0]
   dd8c0:	2a2a      	cmp	r2, #42	; 0x2a
   dd8c2:	d11e      	bne.n	dd902 <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj+0x66>
   dd8c4:	785a      	ldrb	r2, [r3, #1]
   dd8c6:	2a2e      	cmp	r2, #46	; 0x2e
   dd8c8:	d11b      	bne.n	dd902 <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj+0x66>
   dd8ca:	2200      	movs	r2, #0
        return( -1 );

    for( i = 0; i < cn_len; ++i )
   dd8cc:	4290      	cmp	r0, r2
   dd8ce:	d013      	beq.n	dd8f8 <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj+0x5c>
    {
        if( cn[i] == '.' )
   dd8d0:	4621      	mov	r1, r4
   dd8d2:	3401      	adds	r4, #1
   dd8d4:	780e      	ldrb	r6, [r1, #0]
   dd8d6:	2e2e      	cmp	r6, #46	; 0x2e
   dd8d8:	d001      	beq.n	dd8de <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj+0x42>

    /* We can't have a match if there is no wildcard to match */
    if( name->len < 3 || name->p[0] != '*' || name->p[1] != '.' )
        return( -1 );

    for( i = 0; i < cn_len; ++i )
   dd8da:	3201      	adds	r2, #1
   dd8dc:	e7f6      	b.n	dd8cc <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj+0x30>
            cn_idx = i;
            break;
        }
    }

    if( cn_idx == 0 )
   dd8de:	b182      	cbz	r2, dd902 <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj+0x66>
        return( -1 );

    if( cn_len - cn_idx == name->len - 1 &&
   dd8e0:	1a82      	subs	r2, r0, r2
   dd8e2:	3d01      	subs	r5, #1
   dd8e4:	42aa      	cmp	r2, r5
   dd8e6:	d107      	bne.n	dd8f8 <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj+0x5c>
        x509_memcasecmp( name->p + 1, cn + cn_idx, name->len - 1 ) == 0 )
   dd8e8:	1c58      	adds	r0, r3, #1
   dd8ea:	f7ff ff2b 	bl	dd744 <_ZL15x509_memcasecmpPKvS0_j>
    }

    if( cn_idx == 0 )
        return( -1 );

    if( cn_len - cn_idx == name->len - 1 &&
   dd8ee:	3000      	adds	r0, #0
   dd8f0:	bf18      	it	ne
   dd8f2:	2001      	movne	r0, #1
   dd8f4:	4240      	negs	r0, r0
   dd8f6:	e001      	b.n	dd8fc <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj+0x60>
        x509_memcasecmp( name->p + 1, cn + cn_idx, name->len - 1 ) == 0 )
    {
        return( 0 );
    }

    return( -1 );
   dd8f8:	f04f 30ff 	mov.w	r0, #4294967295
    {
        return( 0 );
    }

    /* try wildcard match */
    if( x509_check_wildcard( cn, name ) == 0 )
   dd8fc:	4240      	negs	r0, r0
   dd8fe:	4240      	negs	r0, r0
   dd900:	bd70      	pop	{r4, r5, r6, pc}
    {
        return( 0 );
    }

    return( -1 );
   dd902:	f04f 30ff 	mov.w	r0, #4294967295
   dd906:	bd70      	pop	{r4, r5, r6, pc}
}
   dd908:	bd70      	pop	{r4, r5, r6, pc}
	...

000dd90c <mbedtls_x509_crt_info>:
 */
#define BEFORE_COLON    18
#define BC              "18"
int mbedtls_x509_crt_info( char *buf, size_t size, const char *prefix,
                   const mbedtls_x509_crt *crt )
{
   dd90c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dd910:	4681      	mov	r9, r0
   dd912:	b08d      	sub	sp, #52	; 0x34
   dd914:	460f      	mov	r7, r1
   dd916:	4690      	mov	r8, r2
    char key_size_str[BEFORE_COLON];

    p = buf;
    n = size;

    if( NULL == crt )
   dd918:	461e      	mov	r6, r3
   dd91a:	b94b      	cbnz	r3, dd930 <mbedtls_x509_crt_info+0x24>
    {
        ret = mbedtls_snprintf( p, n, "\nCertificate is uninitialised!\n" );
   dd91c:	4aa9      	ldr	r2, [pc, #676]	; (ddbc4 <mbedtls_x509_crt_info+0x2b8>)
   dd91e:	f008 fbf9 	bl	e6114 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   dd922:	2800      	cmp	r0, #0
   dd924:	f2c0 82f2 	blt.w	ddf0c <mbedtls_x509_crt_info+0x600>
   dd928:	4287      	cmp	r7, r0
   dd92a:	f200 82f0 	bhi.w	ddf0e <mbedtls_x509_crt_info+0x602>
   dd92e:	e2ed      	b.n	ddf0c <mbedtls_x509_crt_info+0x600>

        return( (int) ( size - n ) );
    }

    ret = mbedtls_snprintf( p, n, "%scert. version     : %d\n",
   dd930:	699b      	ldr	r3, [r3, #24]
   dd932:	9300      	str	r3, [sp, #0]
   dd934:	4613      	mov	r3, r2
   dd936:	4aa4      	ldr	r2, [pc, #656]	; (ddbc8 <mbedtls_x509_crt_info+0x2bc>)
   dd938:	f008 fbec 	bl	e6114 <snprintf>
                               prefix, crt->version );
    MBEDTLS_X509_SAFE_SNPRINTF;
   dd93c:	2800      	cmp	r0, #0
   dd93e:	f2c0 82e5 	blt.w	ddf0c <mbedtls_x509_crt_info+0x600>
   dd942:	4287      	cmp	r7, r0
   dd944:	f240 82e2 	bls.w	ddf0c <mbedtls_x509_crt_info+0x600>
   dd948:	1a3c      	subs	r4, r7, r0
   dd94a:	4481      	add	r9, r0
    ret = mbedtls_snprintf( p, n, "%sserial number     : ",
   dd94c:	4643      	mov	r3, r8
   dd94e:	4a9f      	ldr	r2, [pc, #636]	; (ddbcc <mbedtls_x509_crt_info+0x2c0>)
   dd950:	4621      	mov	r1, r4
   dd952:	4648      	mov	r0, r9
   dd954:	f008 fbde 	bl	e6114 <snprintf>
                               prefix );
    MBEDTLS_X509_SAFE_SNPRINTF;
   dd958:	2800      	cmp	r0, #0
   dd95a:	f2c0 82d7 	blt.w	ddf0c <mbedtls_x509_crt_info+0x600>
   dd95e:	4284      	cmp	r4, r0
   dd960:	f240 82d4 	bls.w	ddf0c <mbedtls_x509_crt_info+0x600>
   dd964:	1a24      	subs	r4, r4, r0
   dd966:	4481      	add	r9, r0

    ret = mbedtls_x509_serial_gets( p, n, &crt->serial );
   dd968:	f106 021c 	add.w	r2, r6, #28
   dd96c:	4621      	mov	r1, r4
   dd96e:	4648      	mov	r0, r9
   dd970:	f7f9 fa30 	bl	d6dd4 <mbedtls_x509_serial_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
   dd974:	2800      	cmp	r0, #0
   dd976:	f2c0 82c9 	blt.w	ddf0c <mbedtls_x509_crt_info+0x600>
   dd97a:	4284      	cmp	r4, r0
   dd97c:	f240 82c6 	bls.w	ddf0c <mbedtls_x509_crt_info+0x600>
   dd980:	1a24      	subs	r4, r4, r0
   dd982:	4481      	add	r9, r0

    ret = mbedtls_snprintf( p, n, "\n%sissuer name       : ", prefix );
   dd984:	4643      	mov	r3, r8
   dd986:	4a92      	ldr	r2, [pc, #584]	; (ddbd0 <mbedtls_x509_crt_info+0x2c4>)
   dd988:	4621      	mov	r1, r4
   dd98a:	4648      	mov	r0, r9
   dd98c:	f008 fbc2 	bl	e6114 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
   dd990:	2800      	cmp	r0, #0
   dd992:	f2c0 82bb 	blt.w	ddf0c <mbedtls_x509_crt_info+0x600>
   dd996:	4284      	cmp	r4, r0
   dd998:	f240 82b8 	bls.w	ddf0c <mbedtls_x509_crt_info+0x600>
   dd99c:	1a24      	subs	r4, r4, r0
   dd99e:	4481      	add	r9, r0
    ret = mbedtls_x509_dn_gets( p, n, &crt->issuer  );
   dd9a0:	f106 024c 	add.w	r2, r6, #76	; 0x4c
   dd9a4:	4621      	mov	r1, r4
   dd9a6:	4648      	mov	r0, r9
   dd9a8:	f7f9 f992 	bl	d6cd0 <mbedtls_x509_dn_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
   dd9ac:	2800      	cmp	r0, #0
   dd9ae:	f2c0 82ad 	blt.w	ddf0c <mbedtls_x509_crt_info+0x600>
   dd9b2:	4284      	cmp	r4, r0
   dd9b4:	f240 82aa 	bls.w	ddf0c <mbedtls_x509_crt_info+0x600>
   dd9b8:	1a24      	subs	r4, r4, r0
   dd9ba:	4481      	add	r9, r0

    ret = mbedtls_snprintf( p, n, "\n%ssubject name      : ", prefix );
   dd9bc:	4643      	mov	r3, r8
   dd9be:	4a85      	ldr	r2, [pc, #532]	; (ddbd4 <mbedtls_x509_crt_info+0x2c8>)
   dd9c0:	4621      	mov	r1, r4
   dd9c2:	4648      	mov	r0, r9
   dd9c4:	f008 fba6 	bl	e6114 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
   dd9c8:	2800      	cmp	r0, #0
   dd9ca:	f2c0 829f 	blt.w	ddf0c <mbedtls_x509_crt_info+0x600>
   dd9ce:	4284      	cmp	r4, r0
   dd9d0:	f240 829c 	bls.w	ddf0c <mbedtls_x509_crt_info+0x600>
   dd9d4:	1a24      	subs	r4, r4, r0
   dd9d6:	4481      	add	r9, r0
    ret = mbedtls_x509_dn_gets( p, n, &crt->subject );
   dd9d8:	f106 026c 	add.w	r2, r6, #108	; 0x6c
   dd9dc:	4621      	mov	r1, r4
   dd9de:	4648      	mov	r0, r9
   dd9e0:	f7f9 f976 	bl	d6cd0 <mbedtls_x509_dn_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
   dd9e4:	2800      	cmp	r0, #0
   dd9e6:	f2c0 8291 	blt.w	ddf0c <mbedtls_x509_crt_info+0x600>
   dd9ea:	4284      	cmp	r4, r0
   dd9ec:	f240 828e 	bls.w	ddf0c <mbedtls_x509_crt_info+0x600>

    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
   dd9f0:	f8d6 30a0 	ldr.w	r3, [r6, #160]	; 0xa0
   dd9f4:	9305      	str	r3, [sp, #20]
   dd9f6:	f8d6 309c 	ldr.w	r3, [r6, #156]	; 0x9c
   dd9fa:	9304      	str	r3, [sp, #16]
   dd9fc:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
   dda00:	9303      	str	r3, [sp, #12]
   dda02:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
   dda06:	9302      	str	r3, [sp, #8]
   dda08:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
   dda0c:	9301      	str	r3, [sp, #4]
   dda0e:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
   dda12:	9300      	str	r3, [sp, #0]
    MBEDTLS_X509_SAFE_SNPRINTF;

    ret = mbedtls_snprintf( p, n, "\n%ssubject name      : ", prefix );
    MBEDTLS_X509_SAFE_SNPRINTF;
    ret = mbedtls_x509_dn_gets( p, n, &crt->subject );
    MBEDTLS_X509_SAFE_SNPRINTF;
   dda14:	1a24      	subs	r4, r4, r0
   dda16:	4481      	add	r9, r0

    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
   dda18:	4643      	mov	r3, r8
   dda1a:	4a6f      	ldr	r2, [pc, #444]	; (ddbd8 <mbedtls_x509_crt_info+0x2cc>)
   dda1c:	4621      	mov	r1, r4
   dda1e:	4648      	mov	r0, r9
   dda20:	f008 fb78 	bl	e6114 <snprintf>
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_from.year, crt->valid_from.mon,
                   crt->valid_from.day,  crt->valid_from.hour,
                   crt->valid_from.min,  crt->valid_from.sec );
    MBEDTLS_X509_SAFE_SNPRINTF;
   dda24:	2800      	cmp	r0, #0
   dda26:	f2c0 8271 	blt.w	ddf0c <mbedtls_x509_crt_info+0x600>
   dda2a:	4284      	cmp	r4, r0
   dda2c:	f240 826e 	bls.w	ddf0c <mbedtls_x509_crt_info+0x600>

    ret = mbedtls_snprintf( p, n, "\n%sexpires on        : " \
   dda30:	f8d6 30b8 	ldr.w	r3, [r6, #184]	; 0xb8
   dda34:	9305      	str	r3, [sp, #20]
   dda36:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
   dda3a:	9304      	str	r3, [sp, #16]
   dda3c:	f8d6 30b0 	ldr.w	r3, [r6, #176]	; 0xb0
   dda40:	9303      	str	r3, [sp, #12]
   dda42:	f8d6 30ac 	ldr.w	r3, [r6, #172]	; 0xac
   dda46:	9302      	str	r3, [sp, #8]
   dda48:	f8d6 30a8 	ldr.w	r3, [r6, #168]	; 0xa8
   dda4c:	9301      	str	r3, [sp, #4]
   dda4e:	f8d6 30a4 	ldr.w	r3, [r6, #164]	; 0xa4
   dda52:	9300      	str	r3, [sp, #0]
    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_from.year, crt->valid_from.mon,
                   crt->valid_from.day,  crt->valid_from.hour,
                   crt->valid_from.min,  crt->valid_from.sec );
    MBEDTLS_X509_SAFE_SNPRINTF;
   dda54:	1a24      	subs	r4, r4, r0
   dda56:	4481      	add	r9, r0

    ret = mbedtls_snprintf( p, n, "\n%sexpires on        : " \
   dda58:	4643      	mov	r3, r8
   dda5a:	4a60      	ldr	r2, [pc, #384]	; (ddbdc <mbedtls_x509_crt_info+0x2d0>)
   dda5c:	4621      	mov	r1, r4
   dda5e:	4648      	mov	r0, r9
   dda60:	f008 fb58 	bl	e6114 <snprintf>
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_to.year, crt->valid_to.mon,
                   crt->valid_to.day,  crt->valid_to.hour,
                   crt->valid_to.min,  crt->valid_to.sec );
    MBEDTLS_X509_SAFE_SNPRINTF;
   dda64:	2800      	cmp	r0, #0
   dda66:	f2c0 8251 	blt.w	ddf0c <mbedtls_x509_crt_info+0x600>
   dda6a:	4284      	cmp	r4, r0
   dda6c:	f240 824e 	bls.w	ddf0c <mbedtls_x509_crt_info+0x600>
   dda70:	1a24      	subs	r4, r4, r0
   dda72:	4481      	add	r9, r0

    ret = mbedtls_snprintf( p, n, "\n%ssigned using      : ", prefix );
   dda74:	4643      	mov	r3, r8
   dda76:	4a5a      	ldr	r2, [pc, #360]	; (ddbe0 <mbedtls_x509_crt_info+0x2d4>)
   dda78:	4621      	mov	r1, r4
   dda7a:	4648      	mov	r0, r9
   dda7c:	f008 fb4a 	bl	e6114 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
   dda80:	2800      	cmp	r0, #0
   dda82:	f2c0 8243 	blt.w	ddf0c <mbedtls_x509_crt_info+0x600>
   dda86:	4284      	cmp	r4, r0
   dda88:	f240 8240 	bls.w	ddf0c <mbedtls_x509_crt_info+0x600>

    ret = mbedtls_x509_sig_alg_gets( p, n, &crt->sig_oid, crt->sig_pk,
   dda8c:	f8d6 212c 	ldr.w	r2, [r6, #300]	; 0x12c
   dda90:	f896 3129 	ldrb.w	r3, [r6, #297]	; 0x129
   dda94:	9201      	str	r2, [sp, #4]
   dda96:	f896 2128 	ldrb.w	r2, [r6, #296]	; 0x128
   dda9a:	9200      	str	r2, [sp, #0]
                   crt->valid_to.day,  crt->valid_to.hour,
                   crt->valid_to.min,  crt->valid_to.sec );
    MBEDTLS_X509_SAFE_SNPRINTF;

    ret = mbedtls_snprintf( p, n, "\n%ssigned using      : ", prefix );
    MBEDTLS_X509_SAFE_SNPRINTF;
   dda9c:	1a24      	subs	r4, r4, r0
   dda9e:	4481      	add	r9, r0

    ret = mbedtls_x509_sig_alg_gets( p, n, &crt->sig_oid, crt->sig_pk,
   ddaa0:	f106 0228 	add.w	r2, r6, #40	; 0x28
   ddaa4:	4621      	mov	r1, r4
   ddaa6:	4648      	mov	r0, r9
   ddaa8:	f7f9 f9de 	bl	d6e68 <mbedtls_x509_sig_alg_gets>
                             crt->sig_md, crt->sig_opts );
    MBEDTLS_X509_SAFE_SNPRINTF;
   ddaac:	1e05      	subs	r5, r0, #0
   ddaae:	f2c0 822d 	blt.w	ddf0c <mbedtls_x509_crt_info+0x600>
   ddab2:	42ac      	cmp	r4, r5
   ddab4:	f240 822a 	bls.w	ddf0c <mbedtls_x509_crt_info+0x600>

    /* Key size */
    if( ( ret = mbedtls_x509_key_size_helper( key_size_str, BEFORE_COLON,
   ddab8:	f106 0bbc 	add.w	fp, r6, #188	; 0xbc
   ddabc:	4658      	mov	r0, fp
   ddabe:	f001 fa3b 	bl	def38 <mbedtls_pk_get_name>
   ddac2:	f10d 0a1c 	add.w	sl, sp, #28
   ddac6:	4602      	mov	r2, r0
   ddac8:	2112      	movs	r1, #18
   ddaca:	4650      	mov	r0, sl
   ddacc:	f7f9 fa2a 	bl	d6f24 <mbedtls_x509_key_size_helper>
   ddad0:	2800      	cmp	r0, #0
   ddad2:	f040 821c 	bne.w	ddf0e <mbedtls_x509_crt_info+0x602>
    {
        return( ret );
    }

    ret = mbedtls_snprintf( p, n, "\n%s%-" BC "s: %d bits", prefix, key_size_str,
                          (int) mbedtls_pk_get_bitlen( &crt->pk ) );
   ddad6:	4658      	mov	r0, fp
   ddad8:	f001 f9cc 	bl	dee74 <mbedtls_pk_get_bitlen>
    ret = mbedtls_snprintf( p, n, "\n%ssigned using      : ", prefix );
    MBEDTLS_X509_SAFE_SNPRINTF;

    ret = mbedtls_x509_sig_alg_gets( p, n, &crt->sig_oid, crt->sig_pk,
                             crt->sig_md, crt->sig_opts );
    MBEDTLS_X509_SAFE_SNPRINTF;
   ddadc:	1b64      	subs	r4, r4, r5
   ddade:	444d      	add	r5, r9
                                      mbedtls_pk_get_name( &crt->pk ) ) ) != 0 )
    {
        return( ret );
    }

    ret = mbedtls_snprintf( p, n, "\n%s%-" BC "s: %d bits", prefix, key_size_str,
   ddae0:	9001      	str	r0, [sp, #4]
   ddae2:	f8cd a000 	str.w	sl, [sp]
   ddae6:	4643      	mov	r3, r8
   ddae8:	4a3e      	ldr	r2, [pc, #248]	; (ddbe4 <mbedtls_x509_crt_info+0x2d8>)
   ddaea:	4621      	mov	r1, r4
   ddaec:	4628      	mov	r0, r5
   ddaee:	f008 fb11 	bl	e6114 <snprintf>
                          (int) mbedtls_pk_get_bitlen( &crt->pk ) );
    MBEDTLS_X509_SAFE_SNPRINTF;
   ddaf2:	2800      	cmp	r0, #0
   ddaf4:	f2c0 820a 	blt.w	ddf0c <mbedtls_x509_crt_info+0x600>
   ddaf8:	4284      	cmp	r4, r0
   ddafa:	f240 8207 	bls.w	ddf0c <mbedtls_x509_crt_info+0x600>

    /*
     * Optional extensions
     */

    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
   ddafe:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
   ddb02:	05db      	lsls	r3, r3, #23
        return( ret );
    }

    ret = mbedtls_snprintf( p, n, "\n%s%-" BC "s: %d bits", prefix, key_size_str,
                          (int) mbedtls_pk_get_bitlen( &crt->pk ) );
    MBEDTLS_X509_SAFE_SNPRINTF;
   ddb04:	eba4 0400 	sub.w	r4, r4, r0
   ddb08:	4405      	add	r5, r0

    /*
     * Optional extensions
     */

    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
   ddb0a:	d528      	bpl.n	ddb5e <mbedtls_x509_crt_info+0x252>
    {
        ret = mbedtls_snprintf( p, n, "\n%sbasic constraints : CA=%s", prefix,
   ddb0c:	f8d6 10fc 	ldr.w	r1, [r6, #252]	; 0xfc
   ddb10:	4a35      	ldr	r2, [pc, #212]	; (ddbe8 <mbedtls_x509_crt_info+0x2dc>)
   ddb12:	4b36      	ldr	r3, [pc, #216]	; (ddbec <mbedtls_x509_crt_info+0x2e0>)
   ddb14:	2900      	cmp	r1, #0
   ddb16:	bf18      	it	ne
   ddb18:	4613      	movne	r3, r2
   ddb1a:	9300      	str	r3, [sp, #0]
   ddb1c:	4a34      	ldr	r2, [pc, #208]	; (ddbf0 <mbedtls_x509_crt_info+0x2e4>)
   ddb1e:	4643      	mov	r3, r8
   ddb20:	4621      	mov	r1, r4
   ddb22:	4628      	mov	r0, r5
   ddb24:	f008 faf6 	bl	e6114 <snprintf>
                        crt->ca_istrue ? "true" : "false" );
        MBEDTLS_X509_SAFE_SNPRINTF;
   ddb28:	2800      	cmp	r0, #0
   ddb2a:	f2c0 81ef 	blt.w	ddf0c <mbedtls_x509_crt_info+0x600>
   ddb2e:	4284      	cmp	r4, r0
   ddb30:	f240 81ec 	bls.w	ddf0c <mbedtls_x509_crt_info+0x600>

        if( crt->max_pathlen > 0 )
   ddb34:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
   ddb38:	2b00      	cmp	r3, #0

    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
    {
        ret = mbedtls_snprintf( p, n, "\n%sbasic constraints : CA=%s", prefix,
                        crt->ca_istrue ? "true" : "false" );
        MBEDTLS_X509_SAFE_SNPRINTF;
   ddb3a:	eba4 0400 	sub.w	r4, r4, r0
   ddb3e:	4405      	add	r5, r0

        if( crt->max_pathlen > 0 )
   ddb40:	dd0d      	ble.n	ddb5e <mbedtls_x509_crt_info+0x252>
        {
            ret = mbedtls_snprintf( p, n, ", max_pathlen=%d", crt->max_pathlen - 1 );
   ddb42:	3b01      	subs	r3, #1
   ddb44:	4a2b      	ldr	r2, [pc, #172]	; (ddbf4 <mbedtls_x509_crt_info+0x2e8>)
   ddb46:	4621      	mov	r1, r4
   ddb48:	4628      	mov	r0, r5
   ddb4a:	f008 fae3 	bl	e6114 <snprintf>
            MBEDTLS_X509_SAFE_SNPRINTF;
   ddb4e:	2800      	cmp	r0, #0
   ddb50:	f2c0 81dc 	blt.w	ddf0c <mbedtls_x509_crt_info+0x600>
   ddb54:	4284      	cmp	r4, r0
   ddb56:	f240 81d9 	bls.w	ddf0c <mbedtls_x509_crt_info+0x600>
   ddb5a:	1a24      	subs	r4, r4, r0
   ddb5c:	4405      	add	r5, r0
        }
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
   ddb5e:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
   ddb62:	0698      	lsls	r0, r3, #26
   ddb64:	d553      	bpl.n	ddc0e <mbedtls_x509_crt_info+0x302>
    {
        ret = mbedtls_snprintf( p, n, "\n%ssubject alt name  : ", prefix );
   ddb66:	4643      	mov	r3, r8
   ddb68:	4a23      	ldr	r2, [pc, #140]	; (ddbf8 <mbedtls_x509_crt_info+0x2ec>)
   ddb6a:	4621      	mov	r1, r4
   ddb6c:	4628      	mov	r0, r5
   ddb6e:	f008 fad1 	bl	e6114 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   ddb72:	2800      	cmp	r0, #0
   ddb74:	f2c0 81ca 	blt.w	ddf0c <mbedtls_x509_crt_info+0x600>
   ddb78:	42a0      	cmp	r0, r4
   ddb7a:	f080 81c7 	bcs.w	ddf0c <mbedtls_x509_crt_info+0x600>
{
    size_t i;
    size_t n = *size;
    char *p = *buf;
    const mbedtls_x509_sequence *cur = subject_alt_name;
    const char *sep = "";
   ddb7e:	f8df e07c 	ldr.w	lr, [pc, #124]	; ddbfc <mbedtls_x509_crt_info+0x2f0>
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
    {
        ret = mbedtls_snprintf( p, n, "\n%ssubject alt name  : ", prefix );
        MBEDTLS_X509_SAFE_SNPRINTF;
   ddb82:	1a24      	subs	r4, r4, r0
   ddb84:	4405      	add	r5, r0

        if( ( ret = x509_info_subject_alt_name( &p, &n,
   ddb86:	f106 02e8 	add.w	r2, r6, #232	; 0xe8
    size_t i;
    size_t n = *size;
    char *p = *buf;
    const mbedtls_x509_sequence *cur = subject_alt_name;
    const char *sep = "";
    size_t sep_len = 0;
   ddb8a:	2000      	movs	r0, #0

    while( cur != NULL )
    {
        if( cur->buf.len + sep_len >= n )
   ddb8c:	6851      	ldr	r1, [r2, #4]
   ddb8e:	4401      	add	r1, r0
   ddb90:	42a1      	cmp	r1, r4
   ddb92:	f04f 0300 	mov.w	r3, #0
   ddb96:	d301      	bcc.n	ddb9c <mbedtls_x509_crt_info+0x290>
        {
            *p = '\0';
   ddb98:	702b      	strb	r3, [r5, #0]
   ddb9a:	e1b7      	b.n	ddf0c <mbedtls_x509_crt_info+0x600>
            return( MBEDTLS_ERR_X509_BUFFER_TOO_SMALL );
        }

        n -= cur->buf.len + sep_len;
   ddb9c:	1a64      	subs	r4, r4, r1
        for( i = 0; i < sep_len; i++ )
   ddb9e:	4283      	cmp	r3, r0
   ddba0:	d004      	beq.n	ddbac <mbedtls_x509_crt_info+0x2a0>
            *p++ = sep[i];
   ddba2:	f81e 1003 	ldrb.w	r1, [lr, r3]
   ddba6:	54e9      	strb	r1, [r5, r3]
            *p = '\0';
            return( MBEDTLS_ERR_X509_BUFFER_TOO_SMALL );
        }

        n -= cur->buf.len + sep_len;
        for( i = 0; i < sep_len; i++ )
   ddba8:	3301      	adds	r3, #1
   ddbaa:	e7f8      	b.n	ddb9e <mbedtls_x509_crt_info+0x292>
   ddbac:	441d      	add	r5, r3
   ddbae:	4628      	mov	r0, r5
            *p++ = sep[i];
        for( i = 0; i < cur->buf.len; i++ )
   ddbb0:	6851      	ldr	r1, [r2, #4]
   ddbb2:	1a2b      	subs	r3, r5, r0
   ddbb4:	4299      	cmp	r1, r3
   ddbb6:	d923      	bls.n	ddc00 <mbedtls_x509_crt_info+0x2f4>
            *p++ = cur->buf.p[i];
   ddbb8:	6891      	ldr	r1, [r2, #8]
   ddbba:	5ccb      	ldrb	r3, [r1, r3]
   ddbbc:	f805 3b01 	strb.w	r3, [r5], #1
   ddbc0:	e7f6      	b.n	ddbb0 <mbedtls_x509_crt_info+0x2a4>
   ddbc2:	bf00      	nop
   ddbc4:	000edfbf 	.word	0x000edfbf
   ddbc8:	000edfdf 	.word	0x000edfdf
   ddbcc:	000edff9 	.word	0x000edff9
   ddbd0:	000ee010 	.word	0x000ee010
   ddbd4:	000ee028 	.word	0x000ee028
   ddbd8:	000ee040 	.word	0x000ee040
   ddbdc:	000ee075 	.word	0x000ee075
   ddbe0:	000ee0aa 	.word	0x000ee0aa
   ddbe4:	000ee0c2 	.word	0x000ee0c2
   ddbe8:	000edfb4 	.word	0x000edfb4
   ddbec:	000edfb9 	.word	0x000edfb9
   ddbf0:	000ee0d4 	.word	0x000ee0d4
   ddbf4:	000ee0f1 	.word	0x000ee0f1
   ddbf8:	000ee102 	.word	0x000ee102
   ddbfc:	000ed091 	.word	0x000ed091

        sep = ", ";
        sep_len = 2;

        cur = cur->next;
   ddc00:	68d2      	ldr	r2, [r2, #12]
        for( i = 0; i < sep_len; i++ )
            *p++ = sep[i];
        for( i = 0; i < cur->buf.len; i++ )
            *p++ = cur->buf.p[i];

        sep = ", ";
   ddc02:	f8df e31c 	ldr.w	lr, [pc, #796]	; ddf20 <mbedtls_x509_crt_info+0x614>
        sep_len = 2;
   ddc06:	2002      	movs	r0, #2
    char *p = *buf;
    const mbedtls_x509_sequence *cur = subject_alt_name;
    const char *sep = "";
    size_t sep_len = 0;

    while( cur != NULL )
   ddc08:	2a00      	cmp	r2, #0
   ddc0a:	d1bf      	bne.n	ddb8c <mbedtls_x509_crt_info+0x280>
        sep_len = 2;

        cur = cur->next;
    }

    *p = '\0';
   ddc0c:	702a      	strb	r2, [r5, #0]
        if( ( ret = x509_info_subject_alt_name( &p, &n,
                                            &crt->subject_alt_names ) ) != 0 )
            return( ret );
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_NS_CERT_TYPE )
   ddc0e:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
   ddc12:	03d9      	lsls	r1, r3, #15
   ddc14:	f140 8099 	bpl.w	ddd4a <mbedtls_x509_crt_info+0x43e>
    {
        ret = mbedtls_snprintf( p, n, "\n%scert. type        : ", prefix );
   ddc18:	4643      	mov	r3, r8
   ddc1a:	4abe      	ldr	r2, [pc, #760]	; (ddf14 <mbedtls_x509_crt_info+0x608>)
   ddc1c:	4621      	mov	r1, r4
   ddc1e:	4628      	mov	r0, r5
   ddc20:	f008 fa78 	bl	e6114 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   ddc24:	2800      	cmp	r0, #0
   ddc26:	f2c0 8171 	blt.w	ddf0c <mbedtls_x509_crt_info+0x600>
   ddc2a:	42a0      	cmp	r0, r4
   ddc2c:	f080 816e 	bcs.w	ddf0c <mbedtls_x509_crt_info+0x600>

        if( ( ret = x509_info_cert_type( &p, &n, crt->ns_cert_type ) ) != 0 )
   ddc30:	f896 9118 	ldrb.w	r9, [r6, #280]	; 0x118
    int ret;
    size_t n = *size;
    char *p = *buf;
    const char *sep = "";

    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT,         "SSL Client" );
   ddc34:	4bb8      	ldr	r3, [pc, #736]	; (ddf18 <mbedtls_x509_crt_info+0x60c>)
   ddc36:	f019 0f80 	tst.w	r9, #128	; 0x80
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_NS_CERT_TYPE )
    {
        ret = mbedtls_snprintf( p, n, "\n%scert. type        : ", prefix );
        MBEDTLS_X509_SAFE_SNPRINTF;
   ddc3a:	eba4 0400 	sub.w	r4, r4, r0
   ddc3e:	4405      	add	r5, r0
    int ret;
    size_t n = *size;
    char *p = *buf;
    const char *sep = "";

    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT,         "SSL Client" );
   ddc40:	d00d      	beq.n	ddc5e <mbedtls_x509_crt_info+0x352>
   ddc42:	4ab6      	ldr	r2, [pc, #728]	; (ddf1c <mbedtls_x509_crt_info+0x610>)
   ddc44:	4621      	mov	r1, r4
   ddc46:	4628      	mov	r0, r5
   ddc48:	f008 fa64 	bl	e6114 <snprintf>
   ddc4c:	2800      	cmp	r0, #0
   ddc4e:	f2c0 815d 	blt.w	ddf0c <mbedtls_x509_crt_info+0x600>
   ddc52:	4284      	cmp	r4, r0
   ddc54:	f240 815a 	bls.w	ddf0c <mbedtls_x509_crt_info+0x600>
   ddc58:	4bb1      	ldr	r3, [pc, #708]	; (ddf20 <mbedtls_x509_crt_info+0x614>)
   ddc5a:	1a24      	subs	r4, r4, r0
   ddc5c:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_SERVER,         "SSL Server" );
   ddc5e:	f019 0f40 	tst.w	r9, #64	; 0x40
   ddc62:	d00d      	beq.n	ddc80 <mbedtls_x509_crt_info+0x374>
   ddc64:	4aaf      	ldr	r2, [pc, #700]	; (ddf24 <mbedtls_x509_crt_info+0x618>)
   ddc66:	4621      	mov	r1, r4
   ddc68:	4628      	mov	r0, r5
   ddc6a:	f008 fa53 	bl	e6114 <snprintf>
   ddc6e:	2800      	cmp	r0, #0
   ddc70:	f2c0 814c 	blt.w	ddf0c <mbedtls_x509_crt_info+0x600>
   ddc74:	4284      	cmp	r4, r0
   ddc76:	f240 8149 	bls.w	ddf0c <mbedtls_x509_crt_info+0x600>
   ddc7a:	4ba9      	ldr	r3, [pc, #676]	; (ddf20 <mbedtls_x509_crt_info+0x614>)
   ddc7c:	1a24      	subs	r4, r4, r0
   ddc7e:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_EMAIL,              "Email" );
   ddc80:	f019 0f20 	tst.w	r9, #32
   ddc84:	d00d      	beq.n	ddca2 <mbedtls_x509_crt_info+0x396>
   ddc86:	4aa8      	ldr	r2, [pc, #672]	; (ddf28 <mbedtls_x509_crt_info+0x61c>)
   ddc88:	4621      	mov	r1, r4
   ddc8a:	4628      	mov	r0, r5
   ddc8c:	f008 fa42 	bl	e6114 <snprintf>
   ddc90:	2800      	cmp	r0, #0
   ddc92:	f2c0 813b 	blt.w	ddf0c <mbedtls_x509_crt_info+0x600>
   ddc96:	4284      	cmp	r4, r0
   ddc98:	f240 8138 	bls.w	ddf0c <mbedtls_x509_crt_info+0x600>
   ddc9c:	4ba0      	ldr	r3, [pc, #640]	; (ddf20 <mbedtls_x509_crt_info+0x614>)
   ddc9e:	1a24      	subs	r4, r4, r0
   ddca0:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING,     "Object Signing" );
   ddca2:	f019 0f10 	tst.w	r9, #16
   ddca6:	d00d      	beq.n	ddcc4 <mbedtls_x509_crt_info+0x3b8>
   ddca8:	4aa0      	ldr	r2, [pc, #640]	; (ddf2c <mbedtls_x509_crt_info+0x620>)
   ddcaa:	4621      	mov	r1, r4
   ddcac:	4628      	mov	r0, r5
   ddcae:	f008 fa31 	bl	e6114 <snprintf>
   ddcb2:	2800      	cmp	r0, #0
   ddcb4:	f2c0 812a 	blt.w	ddf0c <mbedtls_x509_crt_info+0x600>
   ddcb8:	4284      	cmp	r4, r0
   ddcba:	f240 8127 	bls.w	ddf0c <mbedtls_x509_crt_info+0x600>
   ddcbe:	4b98      	ldr	r3, [pc, #608]	; (ddf20 <mbedtls_x509_crt_info+0x614>)
   ddcc0:	1a24      	subs	r4, r4, r0
   ddcc2:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_RESERVED,           "Reserved" );
   ddcc4:	f019 0f08 	tst.w	r9, #8
   ddcc8:	d00d      	beq.n	ddce6 <mbedtls_x509_crt_info+0x3da>
   ddcca:	4a99      	ldr	r2, [pc, #612]	; (ddf30 <mbedtls_x509_crt_info+0x624>)
   ddccc:	4621      	mov	r1, r4
   ddcce:	4628      	mov	r0, r5
   ddcd0:	f008 fa20 	bl	e6114 <snprintf>
   ddcd4:	2800      	cmp	r0, #0
   ddcd6:	f2c0 8119 	blt.w	ddf0c <mbedtls_x509_crt_info+0x600>
   ddcda:	4284      	cmp	r4, r0
   ddcdc:	f240 8116 	bls.w	ddf0c <mbedtls_x509_crt_info+0x600>
   ddce0:	4b8f      	ldr	r3, [pc, #572]	; (ddf20 <mbedtls_x509_crt_info+0x614>)
   ddce2:	1a24      	subs	r4, r4, r0
   ddce4:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CA,             "SSL CA" );
   ddce6:	f019 0f04 	tst.w	r9, #4
   ddcea:	d00d      	beq.n	ddd08 <mbedtls_x509_crt_info+0x3fc>
   ddcec:	4a91      	ldr	r2, [pc, #580]	; (ddf34 <mbedtls_x509_crt_info+0x628>)
   ddcee:	4621      	mov	r1, r4
   ddcf0:	4628      	mov	r0, r5
   ddcf2:	f008 fa0f 	bl	e6114 <snprintf>
   ddcf6:	2800      	cmp	r0, #0
   ddcf8:	f2c0 8108 	blt.w	ddf0c <mbedtls_x509_crt_info+0x600>
   ddcfc:	4284      	cmp	r4, r0
   ddcfe:	f240 8105 	bls.w	ddf0c <mbedtls_x509_crt_info+0x600>
   ddd02:	4b87      	ldr	r3, [pc, #540]	; (ddf20 <mbedtls_x509_crt_info+0x614>)
   ddd04:	1a24      	subs	r4, r4, r0
   ddd06:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_EMAIL_CA,           "Email CA" );
   ddd08:	f019 0f02 	tst.w	r9, #2
   ddd0c:	d00d      	beq.n	ddd2a <mbedtls_x509_crt_info+0x41e>
   ddd0e:	4a8a      	ldr	r2, [pc, #552]	; (ddf38 <mbedtls_x509_crt_info+0x62c>)
   ddd10:	4621      	mov	r1, r4
   ddd12:	4628      	mov	r0, r5
   ddd14:	f008 f9fe 	bl	e6114 <snprintf>
   ddd18:	2800      	cmp	r0, #0
   ddd1a:	f2c0 80f7 	blt.w	ddf0c <mbedtls_x509_crt_info+0x600>
   ddd1e:	4284      	cmp	r4, r0
   ddd20:	f240 80f4 	bls.w	ddf0c <mbedtls_x509_crt_info+0x600>
   ddd24:	4b7e      	ldr	r3, [pc, #504]	; (ddf20 <mbedtls_x509_crt_info+0x614>)
   ddd26:	1a24      	subs	r4, r4, r0
   ddd28:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING_CA,  "Object Signing CA" );
   ddd2a:	f019 0f01 	tst.w	r9, #1
   ddd2e:	d00c      	beq.n	ddd4a <mbedtls_x509_crt_info+0x43e>
   ddd30:	4a82      	ldr	r2, [pc, #520]	; (ddf3c <mbedtls_x509_crt_info+0x630>)
   ddd32:	4621      	mov	r1, r4
   ddd34:	4628      	mov	r0, r5
   ddd36:	f008 f9ed 	bl	e6114 <snprintf>
   ddd3a:	2800      	cmp	r0, #0
   ddd3c:	f2c0 80e6 	blt.w	ddf0c <mbedtls_x509_crt_info+0x600>
   ddd40:	4284      	cmp	r4, r0
   ddd42:	f240 80e3 	bls.w	ddf0c <mbedtls_x509_crt_info+0x600>
   ddd46:	1a24      	subs	r4, r4, r0
   ddd48:	4405      	add	r5, r0

        if( ( ret = x509_info_cert_type( &p, &n, crt->ns_cert_type ) ) != 0 )
            return( ret );
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_KEY_USAGE )
   ddd4a:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
   ddd4e:	075a      	lsls	r2, r3, #29
   ddd50:	f140 80a0 	bpl.w	dde94 <mbedtls_x509_crt_info+0x588>
    {
        ret = mbedtls_snprintf( p, n, "\n%skey usage         : ", prefix );
   ddd54:	4643      	mov	r3, r8
   ddd56:	4a7a      	ldr	r2, [pc, #488]	; (ddf40 <mbedtls_x509_crt_info+0x634>)
   ddd58:	4621      	mov	r1, r4
   ddd5a:	4628      	mov	r0, r5
   ddd5c:	f008 f9da 	bl	e6114 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   ddd60:	2800      	cmp	r0, #0
   ddd62:	f2c0 80d3 	blt.w	ddf0c <mbedtls_x509_crt_info+0x600>
   ddd66:	42a0      	cmp	r0, r4
   ddd68:	f080 80d0 	bcs.w	ddf0c <mbedtls_x509_crt_info+0x600>

        if( ( ret = x509_info_key_usage( &p, &n, crt->key_usage ) ) != 0 )
   ddd6c:	f8d6 9104 	ldr.w	r9, [r6, #260]	; 0x104
    int ret;
    size_t n = *size;
    char *p = *buf;
    const char *sep = "";

    KEY_USAGE( MBEDTLS_X509_KU_DIGITAL_SIGNATURE,    "Digital Signature" );
   ddd70:	4b69      	ldr	r3, [pc, #420]	; (ddf18 <mbedtls_x509_crt_info+0x60c>)
   ddd72:	f019 0f80 	tst.w	r9, #128	; 0x80
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_KEY_USAGE )
    {
        ret = mbedtls_snprintf( p, n, "\n%skey usage         : ", prefix );
        MBEDTLS_X509_SAFE_SNPRINTF;
   ddd76:	eba4 0400 	sub.w	r4, r4, r0
   ddd7a:	4405      	add	r5, r0
    int ret;
    size_t n = *size;
    char *p = *buf;
    const char *sep = "";

    KEY_USAGE( MBEDTLS_X509_KU_DIGITAL_SIGNATURE,    "Digital Signature" );
   ddd7c:	d00d      	beq.n	ddd9a <mbedtls_x509_crt_info+0x48e>
   ddd7e:	4a71      	ldr	r2, [pc, #452]	; (ddf44 <mbedtls_x509_crt_info+0x638>)
   ddd80:	4621      	mov	r1, r4
   ddd82:	4628      	mov	r0, r5
   ddd84:	f008 f9c6 	bl	e6114 <snprintf>
   ddd88:	2800      	cmp	r0, #0
   ddd8a:	f2c0 80bf 	blt.w	ddf0c <mbedtls_x509_crt_info+0x600>
   ddd8e:	4284      	cmp	r4, r0
   ddd90:	f240 80bc 	bls.w	ddf0c <mbedtls_x509_crt_info+0x600>
   ddd94:	4b62      	ldr	r3, [pc, #392]	; (ddf20 <mbedtls_x509_crt_info+0x614>)
   ddd96:	1a24      	subs	r4, r4, r0
   ddd98:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_NON_REPUDIATION,      "Non Repudiation" );
   ddd9a:	f019 0f40 	tst.w	r9, #64	; 0x40
   ddd9e:	d00d      	beq.n	dddbc <mbedtls_x509_crt_info+0x4b0>
   ddda0:	4a69      	ldr	r2, [pc, #420]	; (ddf48 <mbedtls_x509_crt_info+0x63c>)
   ddda2:	4621      	mov	r1, r4
   ddda4:	4628      	mov	r0, r5
   ddda6:	f008 f9b5 	bl	e6114 <snprintf>
   dddaa:	2800      	cmp	r0, #0
   dddac:	f2c0 80ae 	blt.w	ddf0c <mbedtls_x509_crt_info+0x600>
   dddb0:	4284      	cmp	r4, r0
   dddb2:	f240 80ab 	bls.w	ddf0c <mbedtls_x509_crt_info+0x600>
   dddb6:	4b5a      	ldr	r3, [pc, #360]	; (ddf20 <mbedtls_x509_crt_info+0x614>)
   dddb8:	1a24      	subs	r4, r4, r0
   dddba:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_KEY_ENCIPHERMENT,     "Key Encipherment" );
   dddbc:	f019 0f20 	tst.w	r9, #32
   dddc0:	d00d      	beq.n	dddde <mbedtls_x509_crt_info+0x4d2>
   dddc2:	4a62      	ldr	r2, [pc, #392]	; (ddf4c <mbedtls_x509_crt_info+0x640>)
   dddc4:	4621      	mov	r1, r4
   dddc6:	4628      	mov	r0, r5
   dddc8:	f008 f9a4 	bl	e6114 <snprintf>
   dddcc:	2800      	cmp	r0, #0
   dddce:	f2c0 809d 	blt.w	ddf0c <mbedtls_x509_crt_info+0x600>
   dddd2:	4284      	cmp	r4, r0
   dddd4:	f240 809a 	bls.w	ddf0c <mbedtls_x509_crt_info+0x600>
   dddd8:	4b51      	ldr	r3, [pc, #324]	; (ddf20 <mbedtls_x509_crt_info+0x614>)
   dddda:	1a24      	subs	r4, r4, r0
   ddddc:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_DATA_ENCIPHERMENT,    "Data Encipherment" );
   dddde:	f019 0f10 	tst.w	r9, #16
   ddde2:	d00d      	beq.n	dde00 <mbedtls_x509_crt_info+0x4f4>
   ddde4:	4a5a      	ldr	r2, [pc, #360]	; (ddf50 <mbedtls_x509_crt_info+0x644>)
   ddde6:	4621      	mov	r1, r4
   ddde8:	4628      	mov	r0, r5
   dddea:	f008 f993 	bl	e6114 <snprintf>
   dddee:	2800      	cmp	r0, #0
   dddf0:	f2c0 808c 	blt.w	ddf0c <mbedtls_x509_crt_info+0x600>
   dddf4:	4284      	cmp	r4, r0
   dddf6:	f240 8089 	bls.w	ddf0c <mbedtls_x509_crt_info+0x600>
   dddfa:	4b49      	ldr	r3, [pc, #292]	; (ddf20 <mbedtls_x509_crt_info+0x614>)
   dddfc:	1a24      	subs	r4, r4, r0
   dddfe:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_KEY_AGREEMENT,        "Key Agreement" );
   dde00:	f019 0f08 	tst.w	r9, #8
   dde04:	d00b      	beq.n	dde1e <mbedtls_x509_crt_info+0x512>
   dde06:	4a53      	ldr	r2, [pc, #332]	; (ddf54 <mbedtls_x509_crt_info+0x648>)
   dde08:	4621      	mov	r1, r4
   dde0a:	4628      	mov	r0, r5
   dde0c:	f008 f982 	bl	e6114 <snprintf>
   dde10:	2800      	cmp	r0, #0
   dde12:	db7b      	blt.n	ddf0c <mbedtls_x509_crt_info+0x600>
   dde14:	4284      	cmp	r4, r0
   dde16:	d979      	bls.n	ddf0c <mbedtls_x509_crt_info+0x600>
   dde18:	4b41      	ldr	r3, [pc, #260]	; (ddf20 <mbedtls_x509_crt_info+0x614>)
   dde1a:	1a24      	subs	r4, r4, r0
   dde1c:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_KEY_CERT_SIGN,        "Key Cert Sign" );
   dde1e:	f019 0f04 	tst.w	r9, #4
   dde22:	d00b      	beq.n	dde3c <mbedtls_x509_crt_info+0x530>
   dde24:	4a4c      	ldr	r2, [pc, #304]	; (ddf58 <mbedtls_x509_crt_info+0x64c>)
   dde26:	4621      	mov	r1, r4
   dde28:	4628      	mov	r0, r5
   dde2a:	f008 f973 	bl	e6114 <snprintf>
   dde2e:	2800      	cmp	r0, #0
   dde30:	db6c      	blt.n	ddf0c <mbedtls_x509_crt_info+0x600>
   dde32:	4284      	cmp	r4, r0
   dde34:	d96a      	bls.n	ddf0c <mbedtls_x509_crt_info+0x600>
   dde36:	4b3a      	ldr	r3, [pc, #232]	; (ddf20 <mbedtls_x509_crt_info+0x614>)
   dde38:	1a24      	subs	r4, r4, r0
   dde3a:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_CRL_SIGN,             "CRL Sign" );
   dde3c:	f019 0f02 	tst.w	r9, #2
   dde40:	d00b      	beq.n	dde5a <mbedtls_x509_crt_info+0x54e>
   dde42:	4a46      	ldr	r2, [pc, #280]	; (ddf5c <mbedtls_x509_crt_info+0x650>)
   dde44:	4621      	mov	r1, r4
   dde46:	4628      	mov	r0, r5
   dde48:	f008 f964 	bl	e6114 <snprintf>
   dde4c:	2800      	cmp	r0, #0
   dde4e:	db5d      	blt.n	ddf0c <mbedtls_x509_crt_info+0x600>
   dde50:	4284      	cmp	r4, r0
   dde52:	d95b      	bls.n	ddf0c <mbedtls_x509_crt_info+0x600>
   dde54:	4b32      	ldr	r3, [pc, #200]	; (ddf20 <mbedtls_x509_crt_info+0x614>)
   dde56:	1a24      	subs	r4, r4, r0
   dde58:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_ENCIPHER_ONLY,        "Encipher Only" );
   dde5a:	f019 0f01 	tst.w	r9, #1
   dde5e:	d00b      	beq.n	dde78 <mbedtls_x509_crt_info+0x56c>
   dde60:	4a3f      	ldr	r2, [pc, #252]	; (ddf60 <mbedtls_x509_crt_info+0x654>)
   dde62:	4621      	mov	r1, r4
   dde64:	4628      	mov	r0, r5
   dde66:	f008 f955 	bl	e6114 <snprintf>
   dde6a:	2800      	cmp	r0, #0
   dde6c:	db4e      	blt.n	ddf0c <mbedtls_x509_crt_info+0x600>
   dde6e:	4284      	cmp	r4, r0
   dde70:	d94c      	bls.n	ddf0c <mbedtls_x509_crt_info+0x600>
   dde72:	4b2b      	ldr	r3, [pc, #172]	; (ddf20 <mbedtls_x509_crt_info+0x614>)
   dde74:	1a24      	subs	r4, r4, r0
   dde76:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_DECIPHER_ONLY,        "Decipher Only" );
   dde78:	f419 4f00 	tst.w	r9, #32768	; 0x8000
   dde7c:	d00a      	beq.n	dde94 <mbedtls_x509_crt_info+0x588>
   dde7e:	4a39      	ldr	r2, [pc, #228]	; (ddf64 <mbedtls_x509_crt_info+0x658>)
   dde80:	4621      	mov	r1, r4
   dde82:	4628      	mov	r0, r5
   dde84:	f008 f946 	bl	e6114 <snprintf>
   dde88:	2800      	cmp	r0, #0
   dde8a:	db3f      	blt.n	ddf0c <mbedtls_x509_crt_info+0x600>
   dde8c:	4284      	cmp	r4, r0
   dde8e:	d93d      	bls.n	ddf0c <mbedtls_x509_crt_info+0x600>
   dde90:	1a24      	subs	r4, r4, r0
   dde92:	4405      	add	r5, r0

        if( ( ret = x509_info_key_usage( &p, &n, crt->key_usage ) ) != 0 )
            return( ret );
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE )
   dde94:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
   dde98:	051b      	lsls	r3, r3, #20
   dde9a:	d52b      	bpl.n	ddef4 <mbedtls_x509_crt_info+0x5e8>
    {
        ret = mbedtls_snprintf( p, n, "\n%sext key usage     : ", prefix );
   dde9c:	4643      	mov	r3, r8
   dde9e:	4a32      	ldr	r2, [pc, #200]	; (ddf68 <mbedtls_x509_crt_info+0x65c>)
   ddea0:	4621      	mov	r1, r4
   ddea2:	4628      	mov	r0, r5
   ddea4:	f008 f936 	bl	e6114 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   ddea8:	2800      	cmp	r0, #0
   ddeaa:	db2f      	blt.n	ddf0c <mbedtls_x509_crt_info+0x600>
   ddeac:	42a0      	cmp	r0, r4
   ddeae:	d22d      	bcs.n	ddf0c <mbedtls_x509_crt_info+0x600>
    int ret;
    const char *desc;
    size_t n = *size;
    char *p = *buf;
    const mbedtls_x509_sequence *cur = extended_key_usage;
    const char *sep = "";
   ddeb0:	f8df 8064 	ldr.w	r8, [pc, #100]	; ddf18 <mbedtls_x509_crt_info+0x60c>

    while( cur != NULL )
    {
        if( mbedtls_oid_get_extended_key_usage( &cur->buf, &desc ) != 0 )
            desc = "???";
   ddeb4:	f8df 90c0 	ldr.w	r9, [pc, #192]	; ddf78 <mbedtls_x509_crt_info+0x66c>
    if( crt->ext_types & MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE )
    {
        ret = mbedtls_snprintf( p, n, "\n%sext key usage     : ", prefix );
        MBEDTLS_X509_SAFE_SNPRINTF;

        if( ( ret = x509_info_ext_key_usage( &p, &n,
   ddeb8:	f506 7684 	add.w	r6, r6, #264	; 0x108
static int x509_info_ext_key_usage( char **buf, size_t *size,
                                    const mbedtls_x509_sequence *extended_key_usage )
{
    int ret;
    const char *desc;
    size_t n = *size;
   ddebc:	1a24      	subs	r4, r4, r0
    char *p = *buf;
   ddebe:	4405      	add	r5, r0
    const mbedtls_x509_sequence *cur = extended_key_usage;
    const char *sep = "";

    while( cur != NULL )
    {
        if( mbedtls_oid_get_extended_key_usage( &cur->buf, &desc ) != 0 )
   ddec0:	a906      	add	r1, sp, #24
   ddec2:	4630      	mov	r0, r6
   ddec4:	f7fc f808 	bl	d9ed8 <mbedtls_oid_get_extended_key_usage>
   ddec8:	b108      	cbz	r0, ddece <mbedtls_x509_crt_info+0x5c2>
            desc = "???";
   ddeca:	f8cd 9018 	str.w	r9, [sp, #24]

        ret = mbedtls_snprintf( p, n, "%s%s", sep, desc );
   ddece:	9b06      	ldr	r3, [sp, #24]
   dded0:	9300      	str	r3, [sp, #0]
   dded2:	4a26      	ldr	r2, [pc, #152]	; (ddf6c <mbedtls_x509_crt_info+0x660>)
   dded4:	4643      	mov	r3, r8
   dded6:	4621      	mov	r1, r4
   dded8:	4628      	mov	r0, r5
   ddeda:	f008 f91b 	bl	e6114 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   ddede:	2800      	cmp	r0, #0
   ddee0:	db14      	blt.n	ddf0c <mbedtls_x509_crt_info+0x600>
   ddee2:	42a0      	cmp	r0, r4
   ddee4:	d212      	bcs.n	ddf0c <mbedtls_x509_crt_info+0x600>

        sep = ", ";

        cur = cur->next;
   ddee6:	68f6      	ldr	r6, [r6, #12]
            desc = "???";

        ret = mbedtls_snprintf( p, n, "%s%s", sep, desc );
        MBEDTLS_X509_SAFE_SNPRINTF;

        sep = ", ";
   ddee8:	f8df 8034 	ldr.w	r8, [pc, #52]	; ddf20 <mbedtls_x509_crt_info+0x614>
    {
        if( mbedtls_oid_get_extended_key_usage( &cur->buf, &desc ) != 0 )
            desc = "???";

        ret = mbedtls_snprintf( p, n, "%s%s", sep, desc );
        MBEDTLS_X509_SAFE_SNPRINTF;
   ddeec:	1a24      	subs	r4, r4, r0
   ddeee:	4405      	add	r5, r0
    size_t n = *size;
    char *p = *buf;
    const mbedtls_x509_sequence *cur = extended_key_usage;
    const char *sep = "";

    while( cur != NULL )
   ddef0:	2e00      	cmp	r6, #0
   ddef2:	d1e5      	bne.n	ddec0 <mbedtls_x509_crt_info+0x5b4>
        if( ( ret = x509_info_ext_key_usage( &p, &n,
                                             &crt->ext_key_usage ) ) != 0 )
            return( ret );
    }

    ret = mbedtls_snprintf( p, n, "\n" );
   ddef4:	4a1e      	ldr	r2, [pc, #120]	; (ddf70 <mbedtls_x509_crt_info+0x664>)
   ddef6:	4621      	mov	r1, r4
   ddef8:	4628      	mov	r0, r5
   ddefa:	f008 f90b 	bl	e6114 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
   ddefe:	2800      	cmp	r0, #0
   ddf00:	db04      	blt.n	ddf0c <mbedtls_x509_crt_info+0x600>
   ddf02:	4284      	cmp	r4, r0
   ddf04:	d902      	bls.n	ddf0c <mbedtls_x509_crt_info+0x600>

    return( (int) ( size - n ) );
   ddf06:	1a20      	subs	r0, r4, r0
   ddf08:	1a38      	subs	r0, r7, r0
   ddf0a:	e000      	b.n	ddf0e <mbedtls_x509_crt_info+0x602>
    while( cur != NULL )
    {
        if( cur->buf.len + sep_len >= n )
        {
            *p = '\0';
            return( MBEDTLS_ERR_X509_BUFFER_TOO_SMALL );
   ddf0c:	4819      	ldr	r0, [pc, #100]	; (ddf74 <mbedtls_x509_crt_info+0x668>)

    ret = mbedtls_snprintf( p, n, "\n" );
    MBEDTLS_X509_SAFE_SNPRINTF;

    return( (int) ( size - n ) );
}
   ddf0e:	b00d      	add	sp, #52	; 0x34
   ddf10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ddf14:	000ee11a 	.word	0x000ee11a
   ddf18:	000ed091 	.word	0x000ed091
   ddf1c:	000ee132 	.word	0x000ee132
   ddf20:	000ecaba 	.word	0x000ecaba
   ddf24:	000ee13f 	.word	0x000ee13f
   ddf28:	000ee14c 	.word	0x000ee14c
   ddf2c:	000ee154 	.word	0x000ee154
   ddf30:	000ee165 	.word	0x000ee165
   ddf34:	000ee170 	.word	0x000ee170
   ddf38:	000ee179 	.word	0x000ee179
   ddf3c:	000ee184 	.word	0x000ee184
   ddf40:	000ee198 	.word	0x000ee198
   ddf44:	000ee1b0 	.word	0x000ee1b0
   ddf48:	000ee1c4 	.word	0x000ee1c4
   ddf4c:	000ee1d6 	.word	0x000ee1d6
   ddf50:	000ee1e9 	.word	0x000ee1e9
   ddf54:	000ee1fd 	.word	0x000ee1fd
   ddf58:	000ee20d 	.word	0x000ee20d
   ddf5c:	000ee21d 	.word	0x000ee21d
   ddf60:	000ee228 	.word	0x000ee228
   ddf64:	000ee238 	.word	0x000ee238
   ddf68:	000ee248 	.word	0x000ee248
   ddf6c:	000ee260 	.word	0x000ee260
   ddf70:	000ed2cd 	.word	0x000ed2cd
   ddf74:	ffffd680 	.word	0xffffd680
   ddf78:	000ecad1 	.word	0x000ecad1

000ddf7c <mbedtls_x509_crt_check_key_usage>:
{
    unsigned int usage_must, usage_may;
    unsigned int may_mask = MBEDTLS_X509_KU_ENCIPHER_ONLY
                          | MBEDTLS_X509_KU_DECIPHER_ONLY;

    if( ( crt->ext_types & MBEDTLS_X509_EXT_KEY_USAGE ) == 0 )
   ddf7c:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
   ddf80:	f013 0304 	ands.w	r3, r3, #4
   ddf84:	d01a      	beq.n	ddfbc <mbedtls_x509_crt_check_key_usage+0x40>
        return( 0 );

    usage_must = usage & ~may_mask;

    if( ( ( crt->key_usage & ~may_mask ) & usage_must ) != usage_must )
   ddf86:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
   ddf8a:	f422 4300 	bic.w	r3, r2, #32768	; 0x8000
   ddf8e:	f421 4000 	bic.w	r0, r1, #32768	; 0x8000
   ddf92:	f023 0301 	bic.w	r3, r3, #1
   ddf96:	f020 0001 	bic.w	r0, r0, #1
   ddf9a:	400b      	ands	r3, r1
   ddf9c:	4298      	cmp	r0, r3
   ddf9e:	d10c      	bne.n	ddfba <mbedtls_x509_crt_check_key_usage+0x3e>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    usage_may = usage & may_mask;

    if( ( ( crt->key_usage & may_mask ) | usage_may ) != usage_may )
   ddfa0:	430a      	orrs	r2, r1
   ddfa2:	f248 0301 	movw	r3, #32769	; 0x8001
   ddfa6:	4013      	ands	r3, r2
   ddfa8:	f248 0001 	movw	r0, #32769	; 0x8001
        return( 0 );

    usage_must = usage & ~may_mask;

    if( ( ( crt->key_usage & ~may_mask ) & usage_must ) != usage_must )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
   ddfac:	4a04      	ldr	r2, [pc, #16]	; (ddfc0 <mbedtls_x509_crt_check_key_usage+0x44>)

    usage_may = usage & may_mask;

    if( ( ( crt->key_usage & may_mask ) | usage_may ) != usage_may )
   ddfae:	4008      	ands	r0, r1
        return( 0 );

    usage_must = usage & ~may_mask;

    if( ( ( crt->key_usage & ~may_mask ) & usage_must ) != usage_must )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
   ddfb0:	4298      	cmp	r0, r3
   ddfb2:	bf14      	ite	ne
   ddfb4:	4613      	movne	r3, r2
   ddfb6:	2300      	moveq	r3, #0
   ddfb8:	e000      	b.n	ddfbc <mbedtls_x509_crt_check_key_usage+0x40>
   ddfba:	4b01      	ldr	r3, [pc, #4]	; (ddfc0 <mbedtls_x509_crt_check_key_usage+0x44>)

    if( ( ( crt->key_usage & may_mask ) | usage_may ) != usage_may )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    return( 0 );
}
   ddfbc:	4618      	mov	r0, r3
   ddfbe:	4770      	bx	lr
   ddfc0:	ffffd800 	.word	0xffffd800

000ddfc4 <mbedtls_x509_crt_check_extended_key_usage>:

#if defined(MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE)
int mbedtls_x509_crt_check_extended_key_usage( const mbedtls_x509_crt *crt,
                                       const char *usage_oid,
                                       size_t usage_len )
{
   ddfc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    const mbedtls_x509_sequence *cur;

    /* Extension is not mandatory, absent means no restriction */
    if( ( crt->ext_types & MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE ) == 0 )
   ddfc6:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8

#if defined(MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE)
int mbedtls_x509_crt_check_extended_key_usage( const mbedtls_x509_crt *crt,
                                       const char *usage_oid,
                                       size_t usage_len )
{
   ddfca:	4604      	mov	r4, r0
    const mbedtls_x509_sequence *cur;

    /* Extension is not mandatory, absent means no restriction */
    if( ( crt->ext_types & MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE ) == 0 )
   ddfcc:	f413 6000 	ands.w	r0, r3, #2048	; 0x800

#if defined(MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE)
int mbedtls_x509_crt_check_extended_key_usage( const mbedtls_x509_crt *crt,
                                       const char *usage_oid,
                                       size_t usage_len )
{
   ddfd0:	460f      	mov	r7, r1
   ddfd2:	4616      	mov	r6, r2
    const mbedtls_x509_sequence *cur;

    /* Extension is not mandatory, absent means no restriction */
    if( ( crt->ext_types & MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE ) == 0 )
   ddfd4:	d016      	beq.n	de004 <mbedtls_x509_crt_check_extended_key_usage+0x40>
        return( 0 );

    /*
     * Look for the requested usage (or wildcard ANY) in our list
     */
    for( cur = &crt->ext_key_usage; cur != NULL; cur = cur->next )
   ddfd6:	f504 7484 	add.w	r4, r4, #264	; 0x108
    {
        const mbedtls_x509_buf *cur_oid = &cur->buf;

        if( cur_oid->len == usage_len &&
   ddfda:	6865      	ldr	r5, [r4, #4]
   ddfdc:	42b5      	cmp	r5, r6
   ddfde:	d105      	bne.n	ddfec <mbedtls_x509_crt_check_extended_key_usage+0x28>
            memcmp( cur_oid->p, usage_oid, usage_len ) == 0 )
   ddfe0:	4632      	mov	r2, r6
   ddfe2:	4639      	mov	r1, r7
   ddfe4:	68a0      	ldr	r0, [r4, #8]
   ddfe6:	f00b fd57 	bl	e9a98 <memcmp>
     */
    for( cur = &crt->ext_key_usage; cur != NULL; cur = cur->next )
    {
        const mbedtls_x509_buf *cur_oid = &cur->buf;

        if( cur_oid->len == usage_len &&
   ddfea:	b158      	cbz	r0, de004 <mbedtls_x509_crt_check_extended_key_usage+0x40>
            memcmp( cur_oid->p, usage_oid, usage_len ) == 0 )
        {
            return( 0 );
        }

        if( MBEDTLS_OID_CMP( MBEDTLS_OID_ANY_EXTENDED_KEY_USAGE, cur_oid ) == 0 )
   ddfec:	2d04      	cmp	r5, #4
   ddfee:	d105      	bne.n	ddffc <mbedtls_x509_crt_check_extended_key_usage+0x38>
   ddff0:	462a      	mov	r2, r5
   ddff2:	68a1      	ldr	r1, [r4, #8]
   ddff4:	4804      	ldr	r0, [pc, #16]	; (de008 <mbedtls_x509_crt_check_extended_key_usage+0x44>)
   ddff6:	f00b fd4f 	bl	e9a98 <memcmp>
   ddffa:	b118      	cbz	r0, de004 <mbedtls_x509_crt_check_extended_key_usage+0x40>
        return( 0 );

    /*
     * Look for the requested usage (or wildcard ANY) in our list
     */
    for( cur = &crt->ext_key_usage; cur != NULL; cur = cur->next )
   ddffc:	68e4      	ldr	r4, [r4, #12]
   ddffe:	2c00      	cmp	r4, #0
   de000:	d1eb      	bne.n	ddfda <mbedtls_x509_crt_check_extended_key_usage+0x16>

        if( MBEDTLS_OID_CMP( MBEDTLS_OID_ANY_EXTENDED_KEY_USAGE, cur_oid ) == 0 )
            return( 0 );
    }

    return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
   de002:	4802      	ldr	r0, [pc, #8]	; (de00c <mbedtls_x509_crt_check_extended_key_usage+0x48>)
}
   de004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   de006:	bf00      	nop
   de008:	000edf9c 	.word	0x000edf9c
   de00c:	ffffd800 	.word	0xffffd800

000de010 <mbedtls_x509_crt_is_revoked>:
#if defined(MBEDTLS_X509_CRL_PARSE_C)
/*
 * Return 1 if the certificate is revoked, or 0 otherwise.
 */
int mbedtls_x509_crt_is_revoked( const mbedtls_x509_crt *crt, const mbedtls_x509_crl *crl )
{
   de010:	b538      	push	{r3, r4, r5, lr}
   de012:	4605      	mov	r5, r0
    const mbedtls_x509_crl_entry *cur = &crl->entry;
   de014:	f101 0484 	add.w	r4, r1, #132	; 0x84

    while( cur != NULL && cur->serial.len != 0 )
   de018:	b1a4      	cbz	r4, de044 <mbedtls_x509_crt_is_revoked+0x34>
   de01a:	6922      	ldr	r2, [r4, #16]
   de01c:	b1a2      	cbz	r2, de048 <mbedtls_x509_crt_is_revoked+0x38>
    {
        if( crt->serial.len == cur->serial.len &&
   de01e:	6a2b      	ldr	r3, [r5, #32]
   de020:	429a      	cmp	r2, r3
   de022:	d001      	beq.n	de028 <mbedtls_x509_crt_is_revoked+0x18>
        {
            if( mbedtls_x509_time_is_past( &cur->revocation_date ) )
                return( 1 );
        }

        cur = cur->next;
   de024:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 */
int mbedtls_x509_crt_is_revoked( const mbedtls_x509_crt *crt, const mbedtls_x509_crl *crl )
{
    const mbedtls_x509_crl_entry *cur = &crl->entry;

    while( cur != NULL && cur->serial.len != 0 )
   de026:	e7f7      	b.n	de018 <mbedtls_x509_crt_is_revoked+0x8>
    {
        if( crt->serial.len == cur->serial.len &&
            memcmp( crt->serial.p, cur->serial.p, crt->serial.len ) == 0 )
   de028:	6961      	ldr	r1, [r4, #20]
   de02a:	6a68      	ldr	r0, [r5, #36]	; 0x24
   de02c:	f00b fd34 	bl	e9a98 <memcmp>
{
    const mbedtls_x509_crl_entry *cur = &crl->entry;

    while( cur != NULL && cur->serial.len != 0 )
    {
        if( crt->serial.len == cur->serial.len &&
   de030:	2800      	cmp	r0, #0
   de032:	d1f7      	bne.n	de024 <mbedtls_x509_crt_is_revoked+0x14>
            memcmp( crt->serial.p, cur->serial.p, crt->serial.len ) == 0 )
        {
            if( mbedtls_x509_time_is_past( &cur->revocation_date ) )
   de034:	f104 0018 	add.w	r0, r4, #24
   de038:	f7f8 ff88 	bl	d6f4c <mbedtls_x509_time_is_past>
   de03c:	2800      	cmp	r0, #0
   de03e:	d0f1      	beq.n	de024 <mbedtls_x509_crt_is_revoked+0x14>
                return( 1 );
   de040:	2001      	movs	r0, #1
   de042:	bd38      	pop	{r3, r4, r5, pc}
        }

        cur = cur->next;
    }

    return( 0 );
   de044:	4620      	mov	r0, r4
   de046:	bd38      	pop	{r3, r4, r5, pc}
   de048:	4610      	mov	r0, r2
}
   de04a:	bd38      	pop	{r3, r4, r5, pc}

000de04c <mbedtls_x509_crt_verify_restartable>:
                     const mbedtls_x509_crt_profile *profile,
                     const char *cn, uint32_t *flags,
                     int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                     void *p_vrfy,
                     mbedtls_x509_crt_restart_ctx *rs_ctx )
{
   de04c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   de050:	b0b7      	sub	sp, #220	; 0xdc
   de052:	4604      	mov	r4, r0
   de054:	920c      	str	r2, [sp, #48]	; 0x30
    int ret;
    mbedtls_pk_type_t pk_type;
    mbedtls_x509_crt_verify_chain ver_chain;
    uint32_t ee_flags;

    *flags = 0;
   de056:	9a41      	ldr	r2, [sp, #260]	; 0x104
                     const mbedtls_x509_crt_profile *profile,
                     const char *cn, uint32_t *flags,
                     int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                     void *p_vrfy,
                     mbedtls_x509_crt_restart_ctx *rs_ctx )
{
   de058:	9305      	str	r3, [sp, #20]
   de05a:	9e40      	ldr	r6, [sp, #256]	; 0x100
   de05c:	9109      	str	r1, [sp, #36]	; 0x24
    int ret;
    mbedtls_pk_type_t pk_type;
    mbedtls_x509_crt_verify_chain ver_chain;
    uint32_t ee_flags;

    *flags = 0;
   de05e:	2300      	movs	r3, #0
   de060:	6013      	str	r3, [r2, #0]
{
    size_t i;

    for( i = 0; i < MBEDTLS_X509_MAX_VERIFY_CHAIN_SIZE; i++ )
    {
        ver_chain->items[i].crt = NULL;
   de062:	ad21      	add	r5, sp, #132	; 0x84
   de064:	4618      	mov	r0, r3
        ver_chain->items[i].flags = (uint32_t) -1;
   de066:	f04f 31ff 	mov.w	r1, #4294967295
{
    size_t i;

    for( i = 0; i < MBEDTLS_X509_MAX_VERIFY_CHAIN_SIZE; i++ )
    {
        ver_chain->items[i].crt = NULL;
   de06a:	5158      	str	r0, [r3, r5]
        ver_chain->items[i].flags = (uint32_t) -1;
   de06c:	18ea      	adds	r2, r5, r3
   de06e:	3308      	adds	r3, #8
static void x509_crt_verify_chain_reset(
    mbedtls_x509_crt_verify_chain *ver_chain )
{
    size_t i;

    for( i = 0; i < MBEDTLS_X509_MAX_VERIFY_CHAIN_SIZE; i++ )
   de070:	2b50      	cmp	r3, #80	; 0x50
    {
        ver_chain->items[i].crt = NULL;
        ver_chain->items[i].flags = (uint32_t) -1;
   de072:	6051      	str	r1, [r2, #4]
static void x509_crt_verify_chain_reset(
    mbedtls_x509_crt_verify_chain *ver_chain )
{
    size_t i;

    for( i = 0; i < MBEDTLS_X509_MAX_VERIFY_CHAIN_SIZE; i++ )
   de074:	d1f9      	bne.n	de06a <mbedtls_x509_crt_verify_restartable+0x1e>

    *flags = 0;
    ee_flags = 0;
    x509_crt_verify_chain_reset( &ver_chain );

    if( profile == NULL )
   de076:	9b05      	ldr	r3, [sp, #20]
   de078:	2b00      	cmp	r3, #0
   de07a:	f000 8120 	beq.w	de2be <mbedtls_x509_crt_verify_restartable+0x272>
        ret = MBEDTLS_ERR_X509_BAD_INPUT_DATA;
        goto exit;
    }

    /* check name if requested */
    if( cn != NULL )
   de07e:	b34e      	cbz	r6, de0d4 <mbedtls_x509_crt_verify_restartable+0x88>
                                  const char *cn,
                                  uint32_t *flags )
{
    const mbedtls_x509_name *name;
    const mbedtls_x509_sequence *cur;
    size_t cn_len = strlen( cn );
   de080:	4630      	mov	r0, r6
   de082:	f00b fd8f 	bl	e9ba4 <strlen>

    if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
   de086:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   de08a:	069b      	lsls	r3, r3, #26
                                  const char *cn,
                                  uint32_t *flags )
{
    const mbedtls_x509_name *name;
    const mbedtls_x509_sequence *cur;
    size_t cn_len = strlen( cn );
   de08c:	4607      	mov	r7, r0

    if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
   de08e:	d50d      	bpl.n	de0ac <mbedtls_x509_crt_verify_restartable+0x60>
    {
        for( cur = &crt->subject_alt_names; cur != NULL; cur = cur->next )
   de090:	f104 08e8 	add.w	r8, r4, #232	; 0xe8
        {
            if( x509_crt_check_cn( &cur->buf, cn, cn_len ) == 0 )
   de094:	463a      	mov	r2, r7
   de096:	4631      	mov	r1, r6
   de098:	4640      	mov	r0, r8
   de09a:	f7ff fbff 	bl	dd89c <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj>
   de09e:	b1d8      	cbz	r0, de0d8 <mbedtls_x509_crt_verify_restartable+0x8c>
    const mbedtls_x509_sequence *cur;
    size_t cn_len = strlen( cn );

    if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
    {
        for( cur = &crt->subject_alt_names; cur != NULL; cur = cur->next )
   de0a0:	f8d8 800c 	ldr.w	r8, [r8, #12]
   de0a4:	f1b8 0f00 	cmp.w	r8, #0
   de0a8:	d1f4      	bne.n	de094 <mbedtls_x509_crt_verify_restartable+0x48>
   de0aa:	e01c      	b.n	de0e6 <mbedtls_x509_crt_verify_restartable+0x9a>
        if( cur == NULL )
            *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
    }
    else
    {
        for( name = &crt->subject; name != NULL; name = name->next )
   de0ac:	f104 086c 	add.w	r8, r4, #108	; 0x6c
        {
            if( MBEDTLS_OID_CMP( MBEDTLS_OID_AT_CN, &name->oid ) == 0 &&
   de0b0:	f8d8 2004 	ldr.w	r2, [r8, #4]
   de0b4:	2a03      	cmp	r2, #3
   de0b6:	d111      	bne.n	de0dc <mbedtls_x509_crt_verify_restartable+0x90>
   de0b8:	f8d8 1008 	ldr.w	r1, [r8, #8]
   de0bc:	4893      	ldr	r0, [pc, #588]	; (de30c <mbedtls_x509_crt_verify_restartable+0x2c0>)
   de0be:	f00b fceb 	bl	e9a98 <memcmp>
   de0c2:	b958      	cbnz	r0, de0dc <mbedtls_x509_crt_verify_restartable+0x90>
                x509_crt_check_cn( &name->val, cn, cn_len ) == 0 )
   de0c4:	463a      	mov	r2, r7
   de0c6:	4631      	mov	r1, r6
   de0c8:	f108 000c 	add.w	r0, r8, #12
   de0cc:	f7ff fbe6 	bl	dd89c <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj>
    }
    else
    {
        for( name = &crt->subject; name != NULL; name = name->next )
        {
            if( MBEDTLS_OID_CMP( MBEDTLS_OID_AT_CN, &name->oid ) == 0 &&
   de0d0:	b920      	cbnz	r0, de0dc <mbedtls_x509_crt_verify_restartable+0x90>
   de0d2:	e001      	b.n	de0d8 <mbedtls_x509_crt_verify_restartable+0x8c>
    mbedtls_pk_type_t pk_type;
    mbedtls_x509_crt_verify_chain ver_chain;
    uint32_t ee_flags;

    *flags = 0;
    ee_flags = 0;
   de0d4:	46b3      	mov	fp, r6
   de0d6:	e008      	b.n	de0ea <mbedtls_x509_crt_verify_restartable+0x9e>
   de0d8:	4683      	mov	fp, r0
   de0da:	e006      	b.n	de0ea <mbedtls_x509_crt_verify_restartable+0x9e>
        if( cur == NULL )
            *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
    }
    else
    {
        for( name = &crt->subject; name != NULL; name = name->next )
   de0dc:	f8d8 8018 	ldr.w	r8, [r8, #24]
   de0e0:	f1b8 0f00 	cmp.w	r8, #0
   de0e4:	d1e4      	bne.n	de0b0 <mbedtls_x509_crt_verify_restartable+0x64>
                break;
            }
        }

        if( name == NULL )
            *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
   de0e6:	f04f 0b04 	mov.w	fp, #4
    /* check name if requested */
    if( cn != NULL )
        x509_crt_verify_name( crt, cn, &ee_flags );

    /* Check the type and size of the key */
    pk_type = mbedtls_pk_get_type( &crt->pk );
   de0ea:	f104 06bc 	add.w	r6, r4, #188	; 0xbc
   de0ee:	4630      	mov	r0, r6
   de0f0:	f000 ff2c 	bl	def4c <mbedtls_pk_get_type>
   de0f4:	9b05      	ldr	r3, [sp, #20]
   de0f6:	3304      	adds	r3, #4

    if( x509_profile_check_pk_alg( profile, pk_type ) != 0 )
   de0f8:	4601      	mov	r1, r0
   de0fa:	4618      	mov	r0, r3
   de0fc:	9306      	str	r3, [sp, #24]
   de0fe:	f7ff fb77 	bl	dd7f0 <_ZL25x509_profile_check_md_algPK24mbedtls_x509_crt_profile17mbedtls_md_type_t.isra.1>
   de102:	b108      	cbz	r0, de108 <mbedtls_x509_crt_verify_restartable+0xbc>
        ee_flags |= MBEDTLS_X509_BADCERT_BAD_PK;
   de104:	f44b 4b00 	orr.w	fp, fp, #32768	; 0x8000

    if( x509_profile_check_key( profile, &crt->pk ) != 0 )
   de108:	4631      	mov	r1, r6
   de10a:	9805      	ldr	r0, [sp, #20]
   de10c:	f7ff fb9d 	bl	dd84a <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profilePK18mbedtls_pk_context>
   de110:	b108      	cbz	r0, de116 <mbedtls_x509_crt_verify_restartable+0xca>
        ee_flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
   de112:	f44b 3b80 	orr.w	fp, fp, #65536	; 0x10000
    {
        ver_chain->items[i].crt = NULL;
        ver_chain->items[i].flags = (uint32_t) -1;
    }

    ver_chain->len = 0;
   de116:	2700      	movs	r7, #0
        goto find_parent;
    }
#endif /* MBEDTLS_ECDSA_C && MBEDTLS_ECP_RESTARTABLE */

    child = crt;
    self_cnt = 0;
   de118:	9707      	str	r7, [sp, #28]
    parent_is_trusted = 0;
    child_is_trusted = 0;
   de11a:	463e      	mov	r6, r7

    while( 1 ) {
        /* Add certificate to the verification chain */
        cur = &ver_chain->items[ver_chain->len];
        cur->crt = child;
   de11c:	ab21      	add	r3, sp, #132	; 0x84
        cur->flags = 0;
        ver_chain->len++;
        flags = &cur->flags;

        /* Check time-validity (all certificates) */
        if( mbedtls_x509_time_is_past( &child->valid_to ) )
   de11e:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
    child_is_trusted = 0;

    while( 1 ) {
        /* Add certificate to the verification chain */
        cur = &ver_chain->items[ver_chain->len];
        cur->crt = child;
   de122:	f843 4037 	str.w	r4, [r3, r7, lsl #3]
        cur->flags = 0;
   de126:	2300      	movs	r3, #0
   de128:	606b      	str	r3, [r5, #4]
        ver_chain->len++;
   de12a:	f107 0a01 	add.w	sl, r7, #1
        flags = &cur->flags;

        /* Check time-validity (all certificates) */
        if( mbedtls_x509_time_is_past( &child->valid_to ) )
   de12e:	f7f8 ff0d 	bl	d6f4c <mbedtls_x509_time_is_past>
   de132:	b108      	cbz	r0, de138 <mbedtls_x509_crt_verify_restartable+0xec>
            *flags |= MBEDTLS_X509_BADCERT_EXPIRED;
   de134:	2301      	movs	r3, #1
   de136:	606b      	str	r3, [r5, #4]

        if( mbedtls_x509_time_is_future( &child->valid_from ) )
   de138:	f104 008c 	add.w	r0, r4, #140	; 0x8c
   de13c:	f7f8 ff08 	bl	d6f50 <mbedtls_x509_time_is_future>
   de140:	b118      	cbz	r0, de14a <mbedtls_x509_crt_verify_restartable+0xfe>
            *flags |= MBEDTLS_X509_BADCERT_FUTURE;
   de142:	686b      	ldr	r3, [r5, #4]
   de144:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   de148:	606b      	str	r3, [r5, #4]

        /* Stop here for trusted roots (but not for trusted EE certs) */
        if( child_is_trusted )
   de14a:	2e00      	cmp	r6, #0
   de14c:	f040 8194 	bne.w	de478 <mbedtls_x509_crt_verify_restartable+0x42c>
            return( 0 );

        /* Check signature algorithm: MD & PK algs */
        if( x509_profile_check_md_alg( profile, child->sig_md ) != 0 )
   de150:	f894 1128 	ldrb.w	r1, [r4, #296]	; 0x128
   de154:	9805      	ldr	r0, [sp, #20]
   de156:	f7ff fb4b 	bl	dd7f0 <_ZL25x509_profile_check_md_algPK24mbedtls_x509_crt_profile17mbedtls_md_type_t.isra.1>
   de15a:	b118      	cbz	r0, de164 <mbedtls_x509_crt_verify_restartable+0x118>
            *flags |= MBEDTLS_X509_BADCERT_BAD_MD;
   de15c:	686b      	ldr	r3, [r5, #4]
   de15e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   de162:	606b      	str	r3, [r5, #4]

        if( x509_profile_check_pk_alg( profile, child->sig_pk ) != 0 )
   de164:	f894 1129 	ldrb.w	r1, [r4, #297]	; 0x129
   de168:	9806      	ldr	r0, [sp, #24]
   de16a:	f7ff fb41 	bl	dd7f0 <_ZL25x509_profile_check_md_algPK24mbedtls_x509_crt_profile17mbedtls_md_type_t.isra.1>
   de16e:	b118      	cbz	r0, de178 <mbedtls_x509_crt_verify_restartable+0x12c>
            *flags |= MBEDTLS_X509_BADCERT_BAD_PK;
   de170:	686b      	ldr	r3, [r5, #4]
   de172:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   de176:	606b      	str	r3, [r5, #4]

        /* Special case: EE certs that are locally trusted */
        if( ver_chain->len == 1 &&
   de178:	f1ba 0f01 	cmp.w	sl, #1
   de17c:	d119      	bne.n	de1b2 <mbedtls_x509_crt_verify_restartable+0x166>
                    mbedtls_x509_crt *trust_ca )
{
    mbedtls_x509_crt *cur;

    /* must be self-issued */
    if( x509_name_cmp( &crt->issuer, &crt->subject ) != 0 )
   de17e:	f104 016c 	add.w	r1, r4, #108	; 0x6c
   de182:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   de186:	f7ff faf3 	bl	dd770 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_>
   de18a:	b978      	cbnz	r0, de1ac <mbedtls_x509_crt_verify_restartable+0x160>
   de18c:	9e09      	ldr	r6, [sp, #36]	; 0x24
        return( -1 );

    /* look for an exact match with trusted cert */
    for( cur = trust_ca; cur != NULL; cur = cur->next )
   de18e:	b186      	cbz	r6, de1b2 <mbedtls_x509_crt_verify_restartable+0x166>
    {
        if( crt->raw.len == cur->raw.len &&
   de190:	6862      	ldr	r2, [r4, #4]
   de192:	6873      	ldr	r3, [r6, #4]
   de194:	429a      	cmp	r2, r3
   de196:	d106      	bne.n	de1a6 <mbedtls_x509_crt_verify_restartable+0x15a>
            memcmp( crt->raw.p, cur->raw.p, crt->raw.len ) == 0 )
   de198:	68b1      	ldr	r1, [r6, #8]
   de19a:	68a0      	ldr	r0, [r4, #8]
   de19c:	f00b fc7c 	bl	e9a98 <memcmp>
        return( -1 );

    /* look for an exact match with trusted cert */
    for( cur = trust_ca; cur != NULL; cur = cur->next )
    {
        if( crt->raw.len == cur->raw.len &&
   de1a0:	2800      	cmp	r0, #0
   de1a2:	f000 8169 	beq.w	de478 <mbedtls_x509_crt_verify_restartable+0x42c>
    /* must be self-issued */
    if( x509_name_cmp( &crt->issuer, &crt->subject ) != 0 )
        return( -1 );

    /* look for an exact match with trusted cert */
    for( cur = trust_ca; cur != NULL; cur = cur->next )
   de1a6:	f8d6 6130 	ldr.w	r6, [r6, #304]	; 0x130
   de1aa:	e7f0      	b.n	de18e <mbedtls_x509_crt_verify_restartable+0x142>
                    mbedtls_x509_crt *trust_ca )
{
    mbedtls_x509_crt *cur;

    /* must be self-issued */
    if( x509_name_cmp( &crt->issuer, &crt->subject ) != 0 )
   de1ac:	f8cd a010 	str.w	sl, [sp, #16]
   de1b0:	e001      	b.n	de1b6 <mbedtls_x509_crt_verify_restartable+0x16a>
        return( -1 );

    /* look for an exact match with trusted cert */
    for( cur = trust_ca; cur != NULL; cur = cur->next )
   de1b2:	2301      	movs	r3, #1
   de1b4:	9304      	str	r3, [sp, #16]
                                  int top )
{
    int need_ca_bit;

    /* Parent must be the issuer */
    if( x509_name_cmp( &child->issuer, &parent->subject ) != 0 )
   de1b6:	f104 034c 	add.w	r3, r4, #76	; 0x4c
   de1ba:	930d      	str	r3, [sp, #52]	; 0x34
        rs_ctx->parent_is_trusted = -1;
    }
#endif

    while( 1 ) {
        search_list = *parent_is_trusted ? trust_ca : child->next;
   de1bc:	9b04      	ldr	r3, [sp, #16]
   de1be:	b913      	cbnz	r3, de1c6 <mbedtls_x509_crt_verify_restartable+0x17a>
   de1c0:	f8d4 6130 	ldr.w	r6, [r4, #304]	; 0x130
   de1c4:	e000      	b.n	de1c8 <mbedtls_x509_crt_verify_restartable+0x17c>
   de1c6:	9e09      	ldr	r6, [sp, #36]	; 0x24
   de1c8:	2300      	movs	r3, #0
   de1ca:	9308      	str	r3, [sp, #32]
   de1cc:	4698      	mov	r8, r3
#endif

    fallback_parent = NULL;
    fallback_signature_is_good = 0;

    for( parent = candidates; parent != NULL; parent = parent->next )
   de1ce:	2e00      	cmp	r6, #0
   de1d0:	d06b      	beq.n	de2aa <mbedtls_x509_crt_verify_restartable+0x25e>
                                  int top )
{
    int need_ca_bit;

    /* Parent must be the issuer */
    if( x509_name_cmp( &child->issuer, &parent->subject ) != 0 )
   de1d2:	f106 016c 	add.w	r1, r6, #108	; 0x6c
   de1d6:	980d      	ldr	r0, [sp, #52]	; 0x34
   de1d8:	f7ff faca 	bl	dd770 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_>
   de1dc:	2800      	cmp	r0, #0
   de1de:	d161      	bne.n	de2a4 <mbedtls_x509_crt_verify_restartable+0x258>

    /* Parent must have the basicConstraints CA bit set as a general rule */
    need_ca_bit = 1;

    /* Exception: v1/v2 certificates that are locally trusted. */
    if( top && parent->version < 3 )
   de1e0:	9b04      	ldr	r3, [sp, #16]
   de1e2:	b113      	cbz	r3, de1ea <mbedtls_x509_crt_verify_restartable+0x19e>
   de1e4:	69b3      	ldr	r3, [r6, #24]
   de1e6:	2b02      	cmp	r3, #2
   de1e8:	dd09      	ble.n	de1fe <mbedtls_x509_crt_verify_restartable+0x1b2>
        need_ca_bit = 0;

    if( need_ca_bit && ! parent->ca_istrue )
   de1ea:	f8d6 30fc 	ldr.w	r3, [r6, #252]	; 0xfc
   de1ee:	2b00      	cmp	r3, #0
   de1f0:	d058      	beq.n	de2a4 <mbedtls_x509_crt_verify_restartable+0x258>
        return( -1 );

#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    if( need_ca_bit &&
        mbedtls_x509_crt_check_key_usage( parent, MBEDTLS_X509_KU_KEY_CERT_SIGN ) != 0 )
   de1f2:	2104      	movs	r1, #4
   de1f4:	4630      	mov	r0, r6
   de1f6:	f7ff fec1 	bl	ddf7c <mbedtls_x509_crt_check_key_usage>
    fallback_signature_is_good = 0;

    for( parent = candidates; parent != NULL; parent = parent->next )
    {
        /* basic parenting skills (name, CA bit, key usage) */
        if( x509_crt_check_parent( child, parent, top ) != 0 )
   de1fa:	2800      	cmp	r0, #0
   de1fc:	d152      	bne.n	de2a4 <mbedtls_x509_crt_verify_restartable+0x258>
            continue;

        /* +1 because stored max_pathlen is 1 higher that the actual value */
        if( parent->max_pathlen > 0 &&
   de1fe:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
   de202:	2b00      	cmp	r3, #0
   de204:	dd04      	ble.n	de210 <mbedtls_x509_crt_verify_restartable+0x1c4>
   de206:	9a07      	ldr	r2, [sp, #28]
   de208:	ebc2 020a 	rsb	r2, r2, sl
   de20c:	4293      	cmp	r3, r2
   de20e:	d349      	bcc.n	de2a4 <mbedtls_x509_crt_verify_restartable+0x258>
                                     mbedtls_x509_crt_restart_ctx *rs_ctx )
{
    const mbedtls_md_info_t *md_info;
    unsigned char hash[MBEDTLS_MD_MAX_SIZE];

    md_info = mbedtls_md_info_from_type( child->sig_md );
   de210:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
   de214:	f7fe fe96 	bl	dcf44 <mbedtls_md_info_from_type>
    if( mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash ) != 0 )
   de218:	ab11      	add	r3, sp, #68	; 0x44
   de21a:	6922      	ldr	r2, [r4, #16]
   de21c:	6961      	ldr	r1, [r4, #20]
                                     mbedtls_x509_crt_restart_ctx *rs_ctx )
{
    const mbedtls_md_info_t *md_info;
    unsigned char hash[MBEDTLS_MD_MAX_SIZE];

    md_info = mbedtls_md_info_from_type( child->sig_md );
   de21e:	900a      	str	r0, [sp, #40]	; 0x28
    if( mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash ) != 0 )
   de220:	f7fe fefc 	bl	dd01c <mbedtls_md>
   de224:	b110      	cbz	r0, de22c <mbedtls_x509_crt_verify_restartable+0x1e0>
    {
        /* Note: this can't happen except after an internal error */
        return( -1 );
   de226:	f04f 30ff 	mov.w	r0, #4294967295
   de22a:	e023      	b.n	de274 <mbedtls_x509_crt_verify_restartable+0x228>
    }

    /* Skip expensive computation on obvious mismatch */
    if( ! mbedtls_pk_can_do( &parent->pk, child->sig_pk ) )
   de22c:	f106 09bc 	add.w	r9, r6, #188	; 0xbc
   de230:	f894 1129 	ldrb.w	r1, [r4, #297]	; 0x129
   de234:	4648      	mov	r0, r9
   de236:	f000 fd95 	bl	ded64 <mbedtls_pk_can_do>
   de23a:	2800      	cmp	r0, #0
   de23c:	d0f3      	beq.n	de226 <mbedtls_x509_crt_verify_restartable+0x1da>
    }
#else
    (void) rs_ctx;
#endif

    return( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
   de23e:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
   de242:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
   de246:	930b      	str	r3, [sp, #44]	; 0x2c
                child->sig_md, hash, mbedtls_md_get_size( md_info ),
   de248:	980a      	ldr	r0, [sp, #40]	; 0x28
   de24a:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    }
#else
    (void) rs_ctx;
#endif

    return( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
   de24e:	910f      	str	r1, [sp, #60]	; 0x3c
                child->sig_md, hash, mbedtls_md_get_size( md_info ),
   de250:	930e      	str	r3, [sp, #56]	; 0x38
   de252:	f7fe ffaf 	bl	dd1b4 <mbedtls_md_get_size>
                child->sig.p, child->sig.len ) );
   de256:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
   de25a:	9203      	str	r2, [sp, #12]
   de25c:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   de260:	9202      	str	r2, [sp, #8]
   de262:	ab11      	add	r3, sp, #68	; 0x44
   de264:	9001      	str	r0, [sp, #4]
   de266:	9300      	str	r3, [sp, #0]
   de268:	464a      	mov	r2, r9
   de26a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   de26c:	990f      	ldr	r1, [sp, #60]	; 0x3c
   de26e:	980b      	ldr	r0, [sp, #44]	; 0x2c
   de270:	f000 fe08 	bl	dee84 <mbedtls_pk_verify_ext>
#else
        (void) ret;
#endif

        signature_is_good = ret == 0;
        if( top && ! signature_is_good )
   de274:	9b04      	ldr	r3, [sp, #16]
   de276:	b103      	cbz	r3, de27a <mbedtls_x509_crt_verify_restartable+0x22e>
   de278:	b9a0      	cbnz	r0, de2a4 <mbedtls_x509_crt_verify_restartable+0x258>
        }
#else
        (void) ret;
#endif

        signature_is_good = ret == 0;
   de27a:	fab0 f980 	clz	r9, r0
        if( top && ! signature_is_good )
            continue;

        /* optional time check */
        if( mbedtls_x509_time_is_past( &parent->valid_to ) ||
   de27e:	f106 00a4 	add.w	r0, r6, #164	; 0xa4
        }
#else
        (void) ret;
#endif

        signature_is_good = ret == 0;
   de282:	ea4f 1959 	mov.w	r9, r9, lsr #5
        if( top && ! signature_is_good )
            continue;

        /* optional time check */
        if( mbedtls_x509_time_is_past( &parent->valid_to ) ||
   de286:	f7f8 fe61 	bl	d6f4c <mbedtls_x509_time_is_past>
   de28a:	b928      	cbnz	r0, de298 <mbedtls_x509_crt_verify_restartable+0x24c>
            mbedtls_x509_time_is_future( &parent->valid_from ) )
   de28c:	f106 008c 	add.w	r0, r6, #140	; 0x8c
   de290:	f7f8 fe5e 	bl	d6f50 <mbedtls_x509_time_is_future>
        signature_is_good = ret == 0;
        if( top && ! signature_is_good )
            continue;

        /* optional time check */
        if( mbedtls_x509_time_is_past( &parent->valid_to ) ||
   de294:	2800      	cmp	r0, #0
   de296:	d040      	beq.n	de31a <mbedtls_x509_crt_verify_restartable+0x2ce>
            mbedtls_x509_time_is_future( &parent->valid_from ) )
        {
            if( fallback_parent == NULL )
   de298:	f1b8 0f00 	cmp.w	r8, #0
   de29c:	d102      	bne.n	de2a4 <mbedtls_x509_crt_verify_restartable+0x258>
        }
#else
        (void) ret;
#endif

        signature_is_good = ret == 0;
   de29e:	f8cd 9020 	str.w	r9, [sp, #32]

        /* optional time check */
        if( mbedtls_x509_time_is_past( &parent->valid_to ) ||
            mbedtls_x509_time_is_future( &parent->valid_from ) )
        {
            if( fallback_parent == NULL )
   de2a2:	46b0      	mov	r8, r6
#endif

    fallback_parent = NULL;
    fallback_signature_is_good = 0;

    for( parent = candidates; parent != NULL; parent = parent->next )
   de2a4:	f8d6 6130 	ldr.w	r6, [r6, #304]	; 0x130
   de2a8:	e791      	b.n	de1ce <mbedtls_x509_crt_verify_restartable+0x182>
#else
        (void) ret;
#endif

        /* stop here if found or already in second iteration */
        if( *parent != NULL || *parent_is_trusted == 0 )
   de2aa:	f1b8 0f00 	cmp.w	r8, #0
   de2ae:	d131      	bne.n	de314 <mbedtls_x509_crt_verify_restartable+0x2c8>
   de2b0:	9b04      	ldr	r3, [sp, #16]
   de2b2:	2b00      	cmp	r3, #0
   de2b4:	f000 8095 	beq.w	de3e2 <mbedtls_x509_crt_verify_restartable+0x396>
            break;

        /* prepare second iteration */
        *parent_is_trusted = 0;
   de2b8:	f8cd 8010 	str.w	r8, [sp, #16]
   de2bc:	e780      	b.n	de1c0 <mbedtls_x509_crt_verify_restartable+0x174>
    ee_flags = 0;
    x509_crt_verify_chain_reset( &ver_chain );

    if( profile == NULL )
    {
        ret = MBEDTLS_ERR_X509_BAD_INPUT_DATA;
   de2be:	4814      	ldr	r0, [pc, #80]	; (de310 <mbedtls_x509_crt_verify_restartable+0x2c4>)
   de2c0:	e01f      	b.n	de302 <mbedtls_x509_crt_verify_restartable+0x2b6>

        if( NULL != f_vrfy )
            if( ( ret = f_vrfy( p_vrfy, cur->crt, (int) i-1, &cur_flags ) ) != 0 )
                return( ret );

        *flags |= cur_flags;
   de2c2:	9b41      	ldr	r3, [sp, #260]	; 0x104
   de2c4:	681a      	ldr	r2, [r3, #0]
   de2c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   de2c8:	4313      	orrs	r3, r2
   de2ca:	9a41      	ldr	r2, [sp, #260]	; 0x104
   de2cc:	3d08      	subs	r5, #8
   de2ce:	6013      	str	r3, [r2, #0]
   de2d0:	4622      	mov	r2, r4
    int ret;
    unsigned i;
    uint32_t cur_flags;
    const mbedtls_x509_crt_verify_chain_item *cur;

    for( i = ver_chain->len; i != 0; --i )
   de2d2:	2c00      	cmp	r4, #0
   de2d4:	f000 80da 	beq.w	de48c <mbedtls_x509_crt_verify_restartable+0x440>
    {
        cur = &ver_chain->items[i-1];
        cur_flags = cur->flags;
   de2d8:	682b      	ldr	r3, [r5, #0]
   de2da:	9311      	str	r3, [sp, #68]	; 0x44

        if( NULL != f_vrfy )
   de2dc:	9b42      	ldr	r3, [sp, #264]	; 0x108
   de2de:	1e54      	subs	r4, r2, #1
   de2e0:	2b00      	cmp	r3, #0
   de2e2:	d0ee      	beq.n	de2c2 <mbedtls_x509_crt_verify_restartable+0x276>
            if( ( ret = f_vrfy( p_vrfy, cur->crt, (int) i-1, &cur_flags ) ) != 0 )
   de2e4:	ab11      	add	r3, sp, #68	; 0x44
   de2e6:	4622      	mov	r2, r4
   de2e8:	f855 1c04 	ldr.w	r1, [r5, #-4]
   de2ec:	9843      	ldr	r0, [sp, #268]	; 0x10c
   de2ee:	9e42      	ldr	r6, [sp, #264]	; 0x108
   de2f0:	47b0      	blx	r6
   de2f2:	2800      	cmp	r0, #0
   de2f4:	d0e5      	beq.n	de2c2 <mbedtls_x509_crt_verify_restartable+0x276>
#endif

    /* prevent misuse of the vrfy callback - VERIFY_FAILED would be ignored by
     * the SSL module for authmode optional, but non-zero return from the
     * callback means a fatal error so it shouldn't be ignored */
    if( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED )
   de2f6:	f510 5f1c 	cmn.w	r0, #9984	; 0x2700
   de2fa:	d070      	beq.n	de3de <mbedtls_x509_crt_verify_restartable+0x392>
        ret = MBEDTLS_ERR_X509_FATAL_ERROR;

    if( ret != 0 )
   de2fc:	2800      	cmp	r0, #0
   de2fe:	f000 80c5 	beq.w	de48c <mbedtls_x509_crt_verify_restartable+0x440>
    {
        *flags = (uint32_t) -1;
   de302:	9a41      	ldr	r2, [sp, #260]	; 0x104
   de304:	f04f 33ff 	mov.w	r3, #4294967295
   de308:	6013      	str	r3, [r2, #0]
        return( ret );
   de30a:	e0c5      	b.n	de498 <mbedtls_x509_crt_verify_restartable+0x44c>
   de30c:	000ed4c1 	.word	0x000ed4c1
   de310:	ffffd800 	.word	0xffffd800
#else
        (void) ret;
#endif

        /* stop here if found or already in second iteration */
        if( *parent != NULL || *parent_is_trusted == 0 )
   de314:	f8dd 9020 	ldr.w	r9, [sp, #32]
   de318:	4646      	mov	r6, r8
        }

        /* Count intermediate self-issued (not necessarily self-signed) certs.
         * These can occur with some strategies for key rollover, see [SIRO],
         * and should be excluded from max_pathlen checks. */
        if( ver_chain->len != 1 &&
   de31a:	f1ba 0f01 	cmp.w	sl, #1
   de31e:	d00c      	beq.n	de33a <mbedtls_x509_crt_verify_restartable+0x2ee>
            x509_name_cmp( &child->issuer, &child->subject ) == 0 )
   de320:	f104 016c 	add.w	r1, r4, #108	; 0x6c
   de324:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   de328:	f7ff fa22 	bl	dd770 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_>
        }

        /* Count intermediate self-issued (not necessarily self-signed) certs.
         * These can occur with some strategies for key rollover, see [SIRO],
         * and should be excluded from max_pathlen checks. */
        if( ver_chain->len != 1 &&
   de32c:	2800      	cmp	r0, #0
   de32e:	d062      	beq.n	de3f6 <mbedtls_x509_crt_verify_restartable+0x3aa>
            self_cnt++;
        }

        /* path_cnt is 0 for the first intermediate CA,
         * and if parent is trusted it's not an intermediate CA */
        if( ! parent_is_trusted &&
   de330:	9b04      	ldr	r3, [sp, #16]
   de332:	b913      	cbnz	r3, de33a <mbedtls_x509_crt_verify_restartable+0x2ee>
   de334:	f1ba 0f08 	cmp.w	sl, #8
   de338:	d851      	bhi.n	de3de <mbedtls_x509_crt_verify_restartable+0x392>
            /* return immediately to avoid overflow the chain array */
            return( MBEDTLS_ERR_X509_FATAL_ERROR );
        }

        /* signature was checked while searching parent */
        if( ! signature_is_good )
   de33a:	f1b9 0f00 	cmp.w	r9, #0
   de33e:	d103      	bne.n	de348 <mbedtls_x509_crt_verify_restartable+0x2fc>
            *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
   de340:	686b      	ldr	r3, [r5, #4]
   de342:	f043 0308 	orr.w	r3, r3, #8
   de346:	606b      	str	r3, [r5, #4]

        /* check size of signing key */
        if( x509_profile_check_key( profile, &parent->pk ) != 0 )
   de348:	f106 09bc 	add.w	r9, r6, #188	; 0xbc
   de34c:	4649      	mov	r1, r9
   de34e:	9805      	ldr	r0, [sp, #20]
   de350:	f7ff fa7b 	bl	dd84a <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profilePK18mbedtls_pk_context>
   de354:	b118      	cbz	r0, de35e <mbedtls_x509_crt_verify_restartable+0x312>
            *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
   de356:	686b      	ldr	r3, [r5, #4]
   de358:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   de35c:	606b      	str	r3, [r5, #4]
        return( flags );

    while( crl_list != NULL )
    {
        if( crl_list->version == 0 ||
            x509_name_cmp( &crl_list->issuer, &ca->subject ) != 0 )
   de35e:	f106 036c 	add.w	r3, r6, #108	; 0x6c

        /* optional time check */
        if( mbedtls_x509_time_is_past( &parent->valid_to ) ||
            mbedtls_x509_time_is_future( &parent->valid_from ) )
        {
            if( fallback_parent == NULL )
   de362:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
        return( flags );

    while( crl_list != NULL )
    {
        if( crl_list->version == 0 ||
            x509_name_cmp( &crl_list->issuer, &ca->subject ) != 0 )
   de366:	930b      	str	r3, [sp, #44]	; 0x2c

        /* optional time check */
        if( mbedtls_x509_time_is_past( &parent->valid_to ) ||
            mbedtls_x509_time_is_future( &parent->valid_from ) )
        {
            if( fallback_parent == NULL )
   de368:	2700      	movs	r7, #0
    const mbedtls_md_info_t *md_info;

    if( ca == NULL )
        return( flags );

    while( crl_list != NULL )
   de36a:	f1b8 0f00 	cmp.w	r8, #0
   de36e:	d02e      	beq.n	de3ce <mbedtls_x509_crt_verify_restartable+0x382>
    {
        if( crl_list->version == 0 ||
   de370:	f8d8 3018 	ldr.w	r3, [r8, #24]
   de374:	2b00      	cmp	r3, #0
   de376:	d07c      	beq.n	de472 <mbedtls_x509_crt_verify_restartable+0x426>
            x509_name_cmp( &crl_list->issuer, &ca->subject ) != 0 )
   de378:	990b      	ldr	r1, [sp, #44]	; 0x2c
   de37a:	f108 0034 	add.w	r0, r8, #52	; 0x34
   de37e:	f7ff f9f7 	bl	dd770 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_>
    if( ca == NULL )
        return( flags );

    while( crl_list != NULL )
    {
        if( crl_list->version == 0 ||
   de382:	2800      	cmp	r0, #0
   de384:	d175      	bne.n	de472 <mbedtls_x509_crt_verify_restartable+0x426>

        /*
         * Check if the CA is configured to sign CRLs
         */
#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
        if( mbedtls_x509_crt_check_key_usage( ca,
   de386:	2102      	movs	r1, #2
   de388:	4630      	mov	r0, r6
   de38a:	f7ff fdf7 	bl	ddf7c <mbedtls_x509_crt_check_key_usage>
   de38e:	b9e0      	cbnz	r0, de3ca <mbedtls_x509_crt_verify_restartable+0x37e>
#endif

        /*
         * Check if CRL is correctly signed by the trusted CA
         */
        if( x509_profile_check_md_alg( profile, crl_list->sig_md ) != 0 )
   de390:	f898 20e8 	ldrb.w	r2, [r8, #232]	; 0xe8
   de394:	9805      	ldr	r0, [sp, #20]
   de396:	4611      	mov	r1, r2
   de398:	f7ff fa2a 	bl	dd7f0 <_ZL25x509_profile_check_md_algPK24mbedtls_x509_crt_profile17mbedtls_md_type_t.isra.1>
   de39c:	b108      	cbz	r0, de3a2 <mbedtls_x509_crt_verify_restartable+0x356>
            flags |= MBEDTLS_X509_BADCRL_BAD_MD;
   de39e:	f447 3700 	orr.w	r7, r7, #131072	; 0x20000

        if( x509_profile_check_pk_alg( profile, crl_list->sig_pk ) != 0 )
   de3a2:	f898 10e9 	ldrb.w	r1, [r8, #233]	; 0xe9
   de3a6:	9806      	ldr	r0, [sp, #24]
   de3a8:	f7ff fa22 	bl	dd7f0 <_ZL25x509_profile_check_md_algPK24mbedtls_x509_crt_profile17mbedtls_md_type_t.isra.1>
   de3ac:	b108      	cbz	r0, de3b2 <mbedtls_x509_crt_verify_restartable+0x366>
            flags |= MBEDTLS_X509_BADCRL_BAD_PK;
   de3ae:	f447 2780 	orr.w	r7, r7, #262144	; 0x40000

        md_info = mbedtls_md_info_from_type( crl_list->sig_md );
   de3b2:	4610      	mov	r0, r2
   de3b4:	f7fe fdc6 	bl	dcf44 <mbedtls_md_info_from_type>
        if( mbedtls_md( md_info, crl_list->tbs.p, crl_list->tbs.len, hash ) != 0 )
   de3b8:	ab11      	add	r3, sp, #68	; 0x44
   de3ba:	f8d8 2010 	ldr.w	r2, [r8, #16]
   de3be:	f8d8 1014 	ldr.w	r1, [r8, #20]
            flags |= MBEDTLS_X509_BADCRL_BAD_MD;

        if( x509_profile_check_pk_alg( profile, crl_list->sig_pk ) != 0 )
            flags |= MBEDTLS_X509_BADCRL_BAD_PK;

        md_info = mbedtls_md_info_from_type( crl_list->sig_md );
   de3c2:	9008      	str	r0, [sp, #32]
        if( mbedtls_md( md_info, crl_list->tbs.p, crl_list->tbs.len, hash ) != 0 )
   de3c4:	f7fe fe2a 	bl	dd01c <mbedtls_md>
   de3c8:	b1c8      	cbz	r0, de3fe <mbedtls_x509_crt_verify_restartable+0x3b2>

        if( mbedtls_pk_verify_ext( crl_list->sig_pk, crl_list->sig_opts, &ca->pk,
                           crl_list->sig_md, hash, mbedtls_md_get_size( md_info ),
                           crl_list->sig.p, crl_list->sig.len ) != 0 )
        {
            flags |= MBEDTLS_X509_BADCRL_NOT_TRUSTED;
   de3ca:	f047 0710 	orr.w	r7, r7, #16
        if( x509_profile_check_key( profile, &parent->pk ) != 0 )
            *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;

#if defined(MBEDTLS_X509_CRL_PARSE_C)
        /* Check trusted CA's CRL for the given crt */
        *flags |= x509_crt_verifycrl( child, parent, ca_crl, profile );
   de3ce:	686b      	ldr	r3, [r5, #4]
   de3d0:	431f      	orrs	r7, r3
   de3d2:	606f      	str	r7, [r5, #4]
   de3d4:	4634      	mov	r4, r6
   de3d6:	3508      	adds	r5, #8
    while( 1 ) {
        /* Add certificate to the verification chain */
        cur = &ver_chain->items[ver_chain->len];
        cur->crt = child;
        cur->flags = 0;
        ver_chain->len++;
   de3d8:	4657      	mov	r7, sl
   de3da:	9e04      	ldr	r6, [sp, #16]
   de3dc:	e69e      	b.n	de11c <mbedtls_x509_crt_verify_restartable+0xd0>

    /* prevent misuse of the vrfy callback - VERIFY_FAILED would be ignored by
     * the SSL module for authmode optional, but non-zero return from the
     * callback means a fatal error so it shouldn't be ignored */
    if( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED )
        ret = MBEDTLS_ERR_X509_FATAL_ERROR;
   de3de:	4830      	ldr	r0, [pc, #192]	; (de4a0 <mbedtls_x509_crt_verify_restartable+0x454>)
   de3e0:	e78f      	b.n	de302 <mbedtls_x509_crt_verify_restartable+0x2b6>
#endif

        /* No parent? We're done here */
        if( parent == NULL )
        {
            *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
   de3e2:	ab36      	add	r3, sp, #216	; 0xd8
   de3e4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
   de3e8:	f857 3c50 	ldr.w	r3, [r7, #-80]
   de3ec:	f043 0308 	orr.w	r3, r3, #8
   de3f0:	f847 3c50 	str.w	r3, [r7, #-80]
   de3f4:	e040      	b.n	de478 <mbedtls_x509_crt_verify_restartable+0x42c>
         * These can occur with some strategies for key rollover, see [SIRO],
         * and should be excluded from max_pathlen checks. */
        if( ver_chain->len != 1 &&
            x509_name_cmp( &child->issuer, &child->subject ) == 0 )
        {
            self_cnt++;
   de3f6:	9b07      	ldr	r3, [sp, #28]
   de3f8:	3301      	adds	r3, #1
   de3fa:	9307      	str	r3, [sp, #28]
   de3fc:	e798      	b.n	de330 <mbedtls_x509_crt_verify_restartable+0x2e4>
            /* Note: this can't happen except after an internal error */
            flags |= MBEDTLS_X509_BADCRL_NOT_TRUSTED;
            break;
        }

        if( x509_profile_check_key( profile, &ca->pk ) != 0 )
   de3fe:	4649      	mov	r1, r9
   de400:	9805      	ldr	r0, [sp, #20]
   de402:	f7ff fa22 	bl	dd84a <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profilePK18mbedtls_pk_context>
   de406:	b108      	cbz	r0, de40c <mbedtls_x509_crt_verify_restartable+0x3c0>
            flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
   de408:	f447 3780 	orr.w	r7, r7, #65536	; 0x10000

        if( mbedtls_pk_verify_ext( crl_list->sig_pk, crl_list->sig_opts, &ca->pk,
   de40c:	f898 30e9 	ldrb.w	r3, [r8, #233]	; 0xe9
   de410:	f8d8 10ec 	ldr.w	r1, [r8, #236]	; 0xec
   de414:	930a      	str	r3, [sp, #40]	; 0x28
                           crl_list->sig_md, hash, mbedtls_md_get_size( md_info ),
   de416:	9808      	ldr	r0, [sp, #32]
        }

        if( x509_profile_check_key( profile, &ca->pk ) != 0 )
            flags |= MBEDTLS_X509_BADCERT_BAD_KEY;

        if( mbedtls_pk_verify_ext( crl_list->sig_pk, crl_list->sig_opts, &ca->pk,
   de418:	f898 30e8 	ldrb.w	r3, [r8, #232]	; 0xe8
   de41c:	910e      	str	r1, [sp, #56]	; 0x38
   de41e:	930d      	str	r3, [sp, #52]	; 0x34
                           crl_list->sig_md, hash, mbedtls_md_get_size( md_info ),
   de420:	f7fe fec8 	bl	dd1b4 <mbedtls_md_get_size>
        }

        if( x509_profile_check_key( profile, &ca->pk ) != 0 )
            flags |= MBEDTLS_X509_BADCERT_BAD_KEY;

        if( mbedtls_pk_verify_ext( crl_list->sig_pk, crl_list->sig_opts, &ca->pk,
   de424:	f8d8 20e0 	ldr.w	r2, [r8, #224]	; 0xe0
   de428:	9203      	str	r2, [sp, #12]
   de42a:	f8d8 20e4 	ldr.w	r2, [r8, #228]	; 0xe4
   de42e:	9202      	str	r2, [sp, #8]
   de430:	ab11      	add	r3, sp, #68	; 0x44
   de432:	9001      	str	r0, [sp, #4]
   de434:	9300      	str	r3, [sp, #0]
   de436:	464a      	mov	r2, r9
   de438:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   de43a:	990e      	ldr	r1, [sp, #56]	; 0x38
   de43c:	980a      	ldr	r0, [sp, #40]	; 0x28
   de43e:	f000 fd21 	bl	dee84 <mbedtls_pk_verify_ext>
   de442:	2800      	cmp	r0, #0
   de444:	d1c1      	bne.n	de3ca <mbedtls_x509_crt_verify_restartable+0x37e>
        }

        /*
         * Check for validity of CRL (Do not drop out)
         */
        if( mbedtls_x509_time_is_past( &crl_list->next_update ) )
   de446:	f108 006c 	add.w	r0, r8, #108	; 0x6c
   de44a:	f7f8 fd7f 	bl	d6f4c <mbedtls_x509_time_is_past>
   de44e:	b108      	cbz	r0, de454 <mbedtls_x509_crt_verify_restartable+0x408>
            flags |= MBEDTLS_X509_BADCRL_EXPIRED;
   de450:	f047 0720 	orr.w	r7, r7, #32

        if( mbedtls_x509_time_is_future( &crl_list->this_update ) )
   de454:	f108 0054 	add.w	r0, r8, #84	; 0x54
   de458:	f7f8 fd7a 	bl	d6f50 <mbedtls_x509_time_is_future>
   de45c:	b108      	cbz	r0, de462 <mbedtls_x509_crt_verify_restartable+0x416>
            flags |= MBEDTLS_X509_BADCRL_FUTURE;
   de45e:	f447 6780 	orr.w	r7, r7, #1024	; 0x400

        /*
         * Check if certificate is revoked
         */
        if( mbedtls_x509_crt_is_revoked( crt, crl_list ) )
   de462:	4641      	mov	r1, r8
   de464:	4620      	mov	r0, r4
   de466:	f7ff fdd3 	bl	de010 <mbedtls_x509_crt_is_revoked>
   de46a:	b110      	cbz	r0, de472 <mbedtls_x509_crt_verify_restartable+0x426>
        {
            flags |= MBEDTLS_X509_BADCERT_REVOKED;
   de46c:	f047 0702 	orr.w	r7, r7, #2
   de470:	e7ad      	b.n	de3ce <mbedtls_x509_crt_verify_restartable+0x382>
    while( crl_list != NULL )
    {
        if( crl_list->version == 0 ||
            x509_name_cmp( &crl_list->issuer, &ca->subject ) != 0 )
        {
            crl_list = crl_list->next;
   de472:	f8d8 80f0 	ldr.w	r8, [r8, #240]	; 0xf0
   de476:	e778      	b.n	de36a <mbedtls_x509_crt_verify_restartable+0x31e>

    if( ret != 0 )
        goto exit;

    /* Merge end-entity flags */
    ver_chain.items[0].flags |= ee_flags;
   de478:	9822      	ldr	r0, [sp, #136]	; 0x88
   de47a:	ab36      	add	r3, sp, #216	; 0xd8
   de47c:	ea40 000b 	orr.w	r0, r0, fp
   de480:	eb03 05ca 	add.w	r5, r3, sl, lsl #3
   de484:	9022      	str	r0, [sp, #136]	; 0x88
   de486:	3d58      	subs	r5, #88	; 0x58
   de488:	4652      	mov	r2, sl
   de48a:	e725      	b.n	de2d8 <mbedtls_x509_crt_verify_restartable+0x28c>
    {
        *flags = (uint32_t) -1;
        return( ret );
    }

    if( *flags != 0 )
   de48c:	9b41      	ldr	r3, [sp, #260]	; 0x104
        return( MBEDTLS_ERR_X509_CERT_VERIFY_FAILED );
   de48e:	4805      	ldr	r0, [pc, #20]	; (de4a4 <mbedtls_x509_crt_verify_restartable+0x458>)
    {
        *flags = (uint32_t) -1;
        return( ret );
    }

    if( *flags != 0 )
   de490:	681b      	ldr	r3, [r3, #0]
        return( MBEDTLS_ERR_X509_CERT_VERIFY_FAILED );
   de492:	2b00      	cmp	r3, #0
   de494:	bf08      	it	eq
   de496:	2000      	moveq	r0, #0

    return( 0 );
}
   de498:	b037      	add	sp, #220	; 0xdc
   de49a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de49e:	bf00      	nop
   de4a0:	ffffd000 	.word	0xffffd000
   de4a4:	ffffd900 	.word	0xffffd900

000de4a8 <mbedtls_x509_crt_init>:
/*
 * Initialize a certificate chain
 */
void mbedtls_x509_crt_init( mbedtls_x509_crt *crt )
{
    memset( crt, 0, sizeof(mbedtls_x509_crt) );
   de4a8:	f44f 729a 	mov.w	r2, #308	; 0x134
   de4ac:	2100      	movs	r1, #0
   de4ae:	f00b bb28 	b.w	e9b02 <memset>

000de4b2 <mbedtls_x509_crt_free>:

/*
 * Unallocate all certificate data
 */
void mbedtls_x509_crt_free( mbedtls_x509_crt *crt )
{
   de4b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    mbedtls_x509_name *name_cur;
    mbedtls_x509_name *name_prv;
    mbedtls_x509_sequence *seq_cur;
    mbedtls_x509_sequence *seq_prv;

    if( crt == NULL )
   de4b4:	4606      	mov	r6, r0
   de4b6:	2800      	cmp	r0, #0
   de4b8:	d057      	beq.n	de56a <mbedtls_x509_crt_free+0xb8>
   de4ba:	4604      	mov	r4, r0
        return;

    do
    {
        mbedtls_pk_free( &cert_cur->pk );
   de4bc:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   de4c0:	f000 fc1e 	bl	ded00 <mbedtls_pk_free>

#if defined(MBEDTLS_X509_RSASSA_PSS_SUPPORT)
        mbedtls_free( cert_cur->sig_opts );
   de4c4:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
   de4c8:	f007 fdfc 	bl	e60c4 <free>
#endif

        name_cur = cert_cur->issuer.next;
   de4cc:	6e65      	ldr	r5, [r4, #100]	; 0x64
        while( name_cur != NULL )
   de4ce:	b14d      	cbz	r5, de4e4 <mbedtls_x509_crt_free+0x32>
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
            mbedtls_platform_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
   de4d0:	4628      	mov	r0, r5

        name_cur = cert_cur->issuer.next;
        while( name_cur != NULL )
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
   de4d2:	69af      	ldr	r7, [r5, #24]
            mbedtls_platform_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
   de4d4:	2120      	movs	r1, #32
   de4d6:	f7fc fe91 	bl	db1fc <mbedtls_platform_zeroize>
            mbedtls_free( name_prv );
   de4da:	4628      	mov	r0, r5
   de4dc:	f007 fdf2 	bl	e60c4 <free>

        name_cur = cert_cur->issuer.next;
        while( name_cur != NULL )
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
   de4e0:	463d      	mov	r5, r7
#if defined(MBEDTLS_X509_RSASSA_PSS_SUPPORT)
        mbedtls_free( cert_cur->sig_opts );
#endif

        name_cur = cert_cur->issuer.next;
        while( name_cur != NULL )
   de4e2:	e7f4      	b.n	de4ce <mbedtls_x509_crt_free+0x1c>
            name_cur = name_cur->next;
            mbedtls_platform_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        name_cur = cert_cur->subject.next;
   de4e4:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
        while( name_cur != NULL )
   de4e8:	b14d      	cbz	r5, de4fe <mbedtls_x509_crt_free+0x4c>
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
            mbedtls_platform_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
   de4ea:	4628      	mov	r0, r5

        name_cur = cert_cur->subject.next;
        while( name_cur != NULL )
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
   de4ec:	69af      	ldr	r7, [r5, #24]
            mbedtls_platform_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
   de4ee:	2120      	movs	r1, #32
   de4f0:	f7fc fe84 	bl	db1fc <mbedtls_platform_zeroize>
            mbedtls_free( name_prv );
   de4f4:	4628      	mov	r0, r5
   de4f6:	f007 fde5 	bl	e60c4 <free>

        name_cur = cert_cur->subject.next;
        while( name_cur != NULL )
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
   de4fa:	463d      	mov	r5, r7
            mbedtls_platform_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        name_cur = cert_cur->subject.next;
        while( name_cur != NULL )
   de4fc:	e7f4      	b.n	de4e8 <mbedtls_x509_crt_free+0x36>
            name_cur = name_cur->next;
            mbedtls_platform_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        seq_cur = cert_cur->ext_key_usage.next;
   de4fe:	f8d4 5114 	ldr.w	r5, [r4, #276]	; 0x114
        while( seq_cur != NULL )
   de502:	b14d      	cbz	r5, de518 <mbedtls_x509_crt_free+0x66>
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
            mbedtls_platform_zeroize( seq_prv,
                                      sizeof( mbedtls_x509_sequence ) );
   de504:	4628      	mov	r0, r5

        seq_cur = cert_cur->ext_key_usage.next;
        while( seq_cur != NULL )
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
   de506:	68ef      	ldr	r7, [r5, #12]
            mbedtls_platform_zeroize( seq_prv,
                                      sizeof( mbedtls_x509_sequence ) );
   de508:	2110      	movs	r1, #16
   de50a:	f7fc fe77 	bl	db1fc <mbedtls_platform_zeroize>
            mbedtls_free( seq_prv );
   de50e:	4628      	mov	r0, r5
   de510:	f007 fdd8 	bl	e60c4 <free>

        seq_cur = cert_cur->ext_key_usage.next;
        while( seq_cur != NULL )
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
   de514:	463d      	mov	r5, r7
            mbedtls_platform_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        seq_cur = cert_cur->ext_key_usage.next;
        while( seq_cur != NULL )
   de516:	e7f4      	b.n	de502 <mbedtls_x509_crt_free+0x50>
            mbedtls_platform_zeroize( seq_prv,
                                      sizeof( mbedtls_x509_sequence ) );
            mbedtls_free( seq_prv );
        }

        seq_cur = cert_cur->subject_alt_names.next;
   de518:	f8d4 50f4 	ldr.w	r5, [r4, #244]	; 0xf4
        while( seq_cur != NULL )
   de51c:	b14d      	cbz	r5, de532 <mbedtls_x509_crt_free+0x80>
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
            mbedtls_platform_zeroize( seq_prv,
                                      sizeof( mbedtls_x509_sequence ) );
   de51e:	4628      	mov	r0, r5

        seq_cur = cert_cur->subject_alt_names.next;
        while( seq_cur != NULL )
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
   de520:	68ef      	ldr	r7, [r5, #12]
            mbedtls_platform_zeroize( seq_prv,
                                      sizeof( mbedtls_x509_sequence ) );
   de522:	2110      	movs	r1, #16
   de524:	f7fc fe6a 	bl	db1fc <mbedtls_platform_zeroize>
            mbedtls_free( seq_prv );
   de528:	4628      	mov	r0, r5
   de52a:	f007 fdcb 	bl	e60c4 <free>

        seq_cur = cert_cur->subject_alt_names.next;
        while( seq_cur != NULL )
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
   de52e:	463d      	mov	r5, r7
                                      sizeof( mbedtls_x509_sequence ) );
            mbedtls_free( seq_prv );
        }

        seq_cur = cert_cur->subject_alt_names.next;
        while( seq_cur != NULL )
   de530:	e7f4      	b.n	de51c <mbedtls_x509_crt_free+0x6a>
            mbedtls_platform_zeroize( seq_prv,
                                      sizeof( mbedtls_x509_sequence ) );
            mbedtls_free( seq_prv );
        }

        if( cert_cur->raw.p != NULL )
   de532:	68a0      	ldr	r0, [r4, #8]
   de534:	b128      	cbz	r0, de542 <mbedtls_x509_crt_free+0x90>
        {
            mbedtls_platform_zeroize( cert_cur->raw.p, cert_cur->raw.len );
   de536:	6861      	ldr	r1, [r4, #4]
   de538:	f7fc fe60 	bl	db1fc <mbedtls_platform_zeroize>
            mbedtls_free( cert_cur->raw.p );
   de53c:	68a0      	ldr	r0, [r4, #8]
   de53e:	f007 fdc1 	bl	e60c4 <free>
        }

        cert_cur = cert_cur->next;
   de542:	f8d4 4130 	ldr.w	r4, [r4, #304]	; 0x130
    }
    while( cert_cur != NULL );
   de546:	2c00      	cmp	r4, #0
   de548:	d1b8      	bne.n	de4bc <mbedtls_x509_crt_free+0xa>
   de54a:	4634      	mov	r4, r6
    do
    {
        cert_prv = cert_cur;
        cert_cur = cert_cur->next;

        mbedtls_platform_zeroize( cert_prv, sizeof( mbedtls_x509_crt ) );
   de54c:	f44f 719a 	mov.w	r1, #308	; 0x134
   de550:	4620      	mov	r0, r4

    cert_cur = crt;
    do
    {
        cert_prv = cert_cur;
        cert_cur = cert_cur->next;
   de552:	f8d4 5130 	ldr.w	r5, [r4, #304]	; 0x130

        mbedtls_platform_zeroize( cert_prv, sizeof( mbedtls_x509_crt ) );
   de556:	f7fc fe51 	bl	db1fc <mbedtls_platform_zeroize>
        if( cert_prv != crt )
   de55a:	42b4      	cmp	r4, r6
   de55c:	d002      	beq.n	de564 <mbedtls_x509_crt_free+0xb2>
            mbedtls_free( cert_prv );
   de55e:	4620      	mov	r0, r4
   de560:	f007 fdb0 	bl	e60c4 <free>
    }
    while( cert_cur != NULL );
   de564:	462c      	mov	r4, r5
   de566:	2d00      	cmp	r5, #0
   de568:	d1f0      	bne.n	de54c <mbedtls_x509_crt_free+0x9a>
   de56a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000de56c <mbedtls_x509_crt_parse_der>:
 * Parse one X.509 certificate in DER format from a buffer and add them to a
 * chained list
 */
int mbedtls_x509_crt_parse_der( mbedtls_x509_crt *chain, const unsigned char *buf,
                        size_t buflen )
{
   de56c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   de570:	4688      	mov	r8, r1
   de572:	b09b      	sub	sp, #108	; 0x6c
   de574:	4615      	mov	r5, r2
    mbedtls_x509_crt *crt = chain, *prev = NULL;

    /*
     * Check for valid input
     */
    if( crt == NULL || buf == NULL )
   de576:	4682      	mov	sl, r0
   de578:	2800      	cmp	r0, #0
   de57a:	f000 81bd 	beq.w	de8f8 <mbedtls_x509_crt_parse_der+0x38c>
   de57e:	2900      	cmp	r1, #0
   de580:	f000 81ba 	beq.w	de8f8 <mbedtls_x509_crt_parse_der+0x38c>
   de584:	4604      	mov	r4, r0
   de586:	f04f 0900 	mov.w	r9, #0
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    while( crt->version != 0 && crt->next != NULL )
   de58a:	69a3      	ldr	r3, [r4, #24]
   de58c:	b1a3      	cbz	r3, de5b8 <mbedtls_x509_crt_parse_der+0x4c>
   de58e:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
   de592:	46a1      	mov	r9, r4
   de594:	b10b      	cbz	r3, de59a <mbedtls_x509_crt_parse_der+0x2e>
   de596:	461c      	mov	r4, r3
   de598:	e7f7      	b.n	de58a <mbedtls_x509_crt_parse_der+0x1e>
    /*
     * Add new certificate on the end of the chain if needed.
     */
    if( crt->version != 0 && crt->next == NULL )
    {
        crt->next = (mbedtls_x509_crt *)mbedtls_calloc( 1, sizeof( mbedtls_x509_crt ) );
   de59a:	f44f 719a 	mov.w	r1, #308	; 0x134
   de59e:	2001      	movs	r0, #1
   de5a0:	f00b f968 	bl	e9874 <calloc>
   de5a4:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130

        if( crt->next == NULL )
   de5a8:	2800      	cmp	r0, #0
   de5aa:	f000 81a7 	beq.w	de8fc <mbedtls_x509_crt_parse_der+0x390>
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );

        prev = crt;
        mbedtls_x509_crt_init( crt->next );
   de5ae:	f7ff ff7b 	bl	de4a8 <mbedtls_x509_crt_init>
   de5b2:	46a1      	mov	r9, r4
        crt = crt->next;
   de5b4:	f8d4 4130 	ldr.w	r4, [r4, #304]	; 0x130
    int ret;
    size_t len;
    unsigned char *p, *end, *crt_end;
    mbedtls_x509_buf sig_params1, sig_params2, sig_oid2;

    memset( &sig_params1, 0, sizeof( mbedtls_x509_buf ) );
   de5b8:	2300      	movs	r3, #0
   de5ba:	930b      	str	r3, [sp, #44]	; 0x2c
   de5bc:	930c      	str	r3, [sp, #48]	; 0x30
   de5be:	930d      	str	r3, [sp, #52]	; 0x34
    memset( &sig_params2, 0, sizeof( mbedtls_x509_buf ) );
   de5c0:	930e      	str	r3, [sp, #56]	; 0x38
   de5c2:	930f      	str	r3, [sp, #60]	; 0x3c
   de5c4:	9310      	str	r3, [sp, #64]	; 0x40
    memset( &sig_oid2, 0, sizeof( mbedtls_x509_buf ) );
   de5c6:	9311      	str	r3, [sp, #68]	; 0x44
   de5c8:	9312      	str	r3, [sp, #72]	; 0x48
   de5ca:	9313      	str	r3, [sp, #76]	; 0x4c

    /*
     * Check for valid input
     */
    if( crt == NULL || buf == NULL )
   de5cc:	2c00      	cmp	r4, #0
   de5ce:	f000 80ef 	beq.w	de7b0 <mbedtls_x509_crt_parse_der+0x244>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    // Use the original buffer until we figure out actual length
    p = (unsigned char*) buf;
    len = buflen;
   de5d2:	ae1a      	add	r6, sp, #104	; 0x68
    end = p + len;
   de5d4:	eb08 0b05 	add.w	fp, r8, r5
    if( crt == NULL || buf == NULL )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    // Use the original buffer until we figure out actual length
    p = (unsigned char*) buf;
    len = buflen;
   de5d8:	f846 5d54 	str.w	r5, [r6, #-84]!
     * Certificate  ::=  SEQUENCE  {
     *      tbsCertificate       TBSCertificate,
     *      signatureAlgorithm   AlgorithmIdentifier,
     *      signatureValue       BIT STRING  }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   de5dc:	2330      	movs	r3, #48	; 0x30
   de5de:	4632      	mov	r2, r6
   de5e0:	4659      	mov	r1, fp
   de5e2:	a806      	add	r0, sp, #24
     */
    if( crt == NULL || buf == NULL )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    // Use the original buffer until we figure out actual length
    p = (unsigned char*) buf;
   de5e4:	f8cd 8018 	str.w	r8, [sp, #24]
     * Certificate  ::=  SEQUENCE  {
     *      tbsCertificate       TBSCertificate,
     *      signatureAlgorithm   AlgorithmIdentifier,
     *      signatureValue       BIT STRING  }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   de5e8:	f7f7 ff30 	bl	d644c <mbedtls_asn1_get_tag>
   de5ec:	b120      	cbz	r0, de5f8 <mbedtls_x509_crt_parse_der+0x8c>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        mbedtls_x509_crt_free( crt );
   de5ee:	4620      	mov	r0, r4
   de5f0:	f7ff ff5f 	bl	de4b2 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT );
   de5f4:	4dbb      	ldr	r5, [pc, #748]	; (de8e4 <mbedtls_x509_crt_parse_der+0x378>)
   de5f6:	e168      	b.n	de8ca <mbedtls_x509_crt_parse_der+0x35e>
    }

    if( len > (size_t) ( end - p ) )
   de5f8:	9d06      	ldr	r5, [sp, #24]
   de5fa:	9f05      	ldr	r7, [sp, #20]
   de5fc:	ebc5 0b0b 	rsb	fp, r5, fp
   de600:	45bb      	cmp	fp, r7
   de602:	f0c0 80d0 	bcc.w	de7a6 <mbedtls_x509_crt_parse_der+0x23a>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    }
    crt_end = p + len;

    // Create and populate a new buffer for the raw field
    crt->raw.len = crt_end - buf;
   de606:	443d      	add	r5, r7
   de608:	ebc8 0505 	rsb	r5, r8, r5
   de60c:	6065      	str	r5, [r4, #4]
    crt->raw.p = p = (unsigned char *)mbedtls_calloc( 1, crt->raw.len );
   de60e:	4629      	mov	r1, r5
   de610:	2001      	movs	r0, #1
   de612:	f00b f92f 	bl	e9874 <calloc>
   de616:	4683      	mov	fp, r0
   de618:	9006      	str	r0, [sp, #24]
   de61a:	60a0      	str	r0, [r4, #8]
    if( p == NULL )
   de61c:	2800      	cmp	r0, #0
   de61e:	f000 80c9 	beq.w	de7b4 <mbedtls_x509_crt_parse_der+0x248>
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );

    memcpy( p, buf, crt->raw.len );
   de622:	462a      	mov	r2, r5

    // Direct pointers to the new buffer
    p += crt->raw.len - len;
   de624:	1bed      	subs	r5, r5, r7
   de626:	445d      	add	r5, fp
    crt->raw.len = crt_end - buf;
    crt->raw.p = p = (unsigned char *)mbedtls_calloc( 1, crt->raw.len );
    if( p == NULL )
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );

    memcpy( p, buf, crt->raw.len );
   de628:	4641      	mov	r1, r8

    // Direct pointers to the new buffer
    p += crt->raw.len - len;
    end = crt_end = p + len;
   de62a:	442f      	add	r7, r5
    crt->raw.len = crt_end - buf;
    crt->raw.p = p = (unsigned char *)mbedtls_calloc( 1, crt->raw.len );
    if( p == NULL )
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );

    memcpy( p, buf, crt->raw.len );
   de62c:	f00b fa43 	bl	e9ab6 <memcpy>
    end = crt_end = p + len;

    /*
     * TBSCertificate  ::=  SEQUENCE  {
     */
    crt->tbs.p = p;
   de630:	6165      	str	r5, [r4, #20]

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   de632:	2330      	movs	r3, #48	; 0x30
   de634:	4632      	mov	r2, r6
   de636:	4639      	mov	r1, r7
   de638:	a806      	add	r0, sp, #24
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );

    memcpy( p, buf, crt->raw.len );

    // Direct pointers to the new buffer
    p += crt->raw.len - len;
   de63a:	9506      	str	r5, [sp, #24]
    /*
     * TBSCertificate  ::=  SEQUENCE  {
     */
    crt->tbs.p = p;

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   de63c:	f7f7 ff06 	bl	d644c <mbedtls_asn1_get_tag>
   de640:	4605      	mov	r5, r0
   de642:	2800      	cmp	r0, #0
   de644:	d15b      	bne.n	de6fe <mbedtls_x509_crt_parse_der+0x192>
    {
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    end = p + len;
   de646:	9b05      	ldr	r3, [sp, #20]
   de648:	9e06      	ldr	r6, [sp, #24]
   de64a:	441e      	add	r6, r3
    crt->tbs.len = end - crt->tbs.p;
   de64c:	6963      	ldr	r3, [r4, #20]
   de64e:	1af3      	subs	r3, r6, r3
   de650:	6123      	str	r3, [r4, #16]
                             int *ver )
{
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   de652:	aa17      	add	r2, sp, #92	; 0x5c
   de654:	23a0      	movs	r3, #160	; 0xa0
   de656:	4631      	mov	r1, r6
   de658:	a806      	add	r0, sp, #24
   de65a:	f7f7 fef7 	bl	d644c <mbedtls_asn1_get_tag>
   de65e:	b138      	cbz	r0, de670 <mbedtls_x509_crt_parse_der+0x104>
            MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 0 ) ) != 0 )
    {
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   de660:	f110 0f62 	cmn.w	r0, #98	; 0x62
   de664:	d101      	bne.n	de66a <mbedtls_x509_crt_parse_der+0xfe>
        {
            *ver = 0;
   de666:	61a5      	str	r5, [r4, #24]
   de668:	e017      	b.n	de69a <mbedtls_x509_crt_parse_der+0x12e>
            return( 0 );
        }

        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
   de66a:	f5a0 5506 	sub.w	r5, r0, #8576	; 0x2180
   de66e:	e011      	b.n	de694 <mbedtls_x509_crt_parse_der+0x128>
    }

    end = *p + len;
   de670:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   de672:	9d06      	ldr	r5, [sp, #24]
   de674:	441d      	add	r5, r3

    if( ( ret = mbedtls_asn1_get_int( p, end, ver ) ) != 0 )
   de676:	f104 0218 	add.w	r2, r4, #24
   de67a:	4629      	mov	r1, r5
   de67c:	a806      	add	r0, sp, #24
   de67e:	f7f7 ff12 	bl	d64a6 <mbedtls_asn1_get_int>
   de682:	b110      	cbz	r0, de68a <mbedtls_x509_crt_parse_der+0x11e>
        return( MBEDTLS_ERR_X509_INVALID_VERSION + ret );
   de684:	f5a0 5508 	sub.w	r5, r0, #8704	; 0x2200
   de688:	e004      	b.n	de694 <mbedtls_x509_crt_parse_der+0x128>

    if( *p != end )
   de68a:	9b06      	ldr	r3, [sp, #24]
   de68c:	429d      	cmp	r5, r3
   de68e:	d004      	beq.n	de69a <mbedtls_x509_crt_parse_der+0x12e>
        return( MBEDTLS_ERR_X509_INVALID_VERSION +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   de690:	4d95      	ldr	r5, [pc, #596]	; (de8e8 <mbedtls_x509_crt_parse_der+0x37c>)
   de692:	e1b3      	b.n	de9fc <mbedtls_x509_crt_parse_der+0x490>
     * CertificateSerialNumber  ::=  INTEGER
     *
     * signature            AlgorithmIdentifier
     */
    if( ( ret = x509_get_version(  &p, end, &crt->version  ) ) != 0 ||
        ( ret = mbedtls_x509_get_serial(   &p, end, &crt->serial   ) ) != 0 ||
   de694:	2d00      	cmp	r5, #0
   de696:	f040 81b1 	bne.w	de9fc <mbedtls_x509_crt_parse_der+0x490>
   de69a:	f104 021c 	add.w	r2, r4, #28
   de69e:	4631      	mov	r1, r6
   de6a0:	a806      	add	r0, sp, #24
   de6a2:	f7f8 f835 	bl	d6710 <mbedtls_x509_get_serial>
     *
     * CertificateSerialNumber  ::=  INTEGER
     *
     * signature            AlgorithmIdentifier
     */
    if( ( ret = x509_get_version(  &p, end, &crt->version  ) ) != 0 ||
   de6a6:	4605      	mov	r5, r0
   de6a8:	2800      	cmp	r0, #0
   de6aa:	f040 81a7 	bne.w	de9fc <mbedtls_x509_crt_parse_der+0x490>
        ( ret = mbedtls_x509_get_serial(   &p, end, &crt->serial   ) ) != 0 ||
        ( ret = mbedtls_x509_get_alg(      &p, end, &crt->sig_oid,
   de6ae:	f104 0828 	add.w	r8, r4, #40	; 0x28
   de6b2:	ab0b      	add	r3, sp, #44	; 0x2c
   de6b4:	4642      	mov	r2, r8
   de6b6:	4631      	mov	r1, r6
   de6b8:	a806      	add	r0, sp, #24
   de6ba:	f7f8 f858 	bl	d676e <mbedtls_x509_get_alg>
     * CertificateSerialNumber  ::=  INTEGER
     *
     * signature            AlgorithmIdentifier
     */
    if( ( ret = x509_get_version(  &p, end, &crt->version  ) ) != 0 ||
        ( ret = mbedtls_x509_get_serial(   &p, end, &crt->serial   ) ) != 0 ||
   de6be:	4605      	mov	r5, r0
   de6c0:	2800      	cmp	r0, #0
   de6c2:	f040 819b 	bne.w	de9fc <mbedtls_x509_crt_parse_der+0x490>
   de6c6:	e11b      	b.n	de900 <mbedtls_x509_crt_parse_der+0x394>
    {
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_UNKNOWN_VERSION );
    }

    crt->version++;
   de6c8:	3301      	adds	r3, #1
   de6ca:	61a3      	str	r3, [r4, #24]

    if( ( ret = mbedtls_x509_get_sig_alg( &crt->sig_oid, &sig_params1,
   de6cc:	f504 7396 	add.w	r3, r4, #300	; 0x12c
   de6d0:	9300      	str	r3, [sp, #0]
   de6d2:	f504 7294 	add.w	r2, r4, #296	; 0x128
   de6d6:	f204 1329 	addw	r3, r4, #297	; 0x129
   de6da:	a90b      	add	r1, sp, #44	; 0x2c
   de6dc:	4640      	mov	r0, r8
   de6de:	f7f8 fa91 	bl	d6c04 <mbedtls_x509_get_sig_alg>
   de6e2:	4605      	mov	r5, r0
   de6e4:	2800      	cmp	r0, #0
   de6e6:	f040 8189 	bne.w	de9fc <mbedtls_x509_crt_parse_der+0x490>
    }

    /*
     * issuer               Name
     */
    crt->issuer_raw.p = p;
   de6ea:	9b06      	ldr	r3, [sp, #24]
   de6ec:	63e3      	str	r3, [r4, #60]	; 0x3c

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   de6ee:	aa05      	add	r2, sp, #20
   de6f0:	2330      	movs	r3, #48	; 0x30
   de6f2:	4631      	mov	r1, r6
   de6f4:	a806      	add	r0, sp, #24
   de6f6:	f7f7 fea9 	bl	d644c <mbedtls_asn1_get_tag>
   de6fa:	4605      	mov	r5, r0
   de6fc:	b128      	cbz	r0, de70a <mbedtls_x509_crt_parse_der+0x19e>
    crt->subject_raw.p = p;

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        mbedtls_x509_crt_free( crt );
   de6fe:	4620      	mov	r0, r4
   de700:	f7ff fed7 	bl	de4b2 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
   de704:	f5a5 5506 	sub.w	r5, r5, #8576	; 0x2180
   de708:	e0dc      	b.n	de8c4 <mbedtls_x509_crt_parse_der+0x358>
    {
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    if( ( ret = mbedtls_x509_get_name( &p, p + len, &crt->issuer ) ) != 0 )
   de70a:	9b05      	ldr	r3, [sp, #20]
   de70c:	9906      	ldr	r1, [sp, #24]
   de70e:	f104 024c 	add.w	r2, r4, #76	; 0x4c
   de712:	4419      	add	r1, r3
   de714:	a806      	add	r0, sp, #24
   de716:	f7f8 f921 	bl	d695c <mbedtls_x509_get_name>
   de71a:	4605      	mov	r5, r0
   de71c:	2800      	cmp	r0, #0
   de71e:	f040 816d 	bne.w	de9fc <mbedtls_x509_crt_parse_der+0x490>
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    crt->issuer_raw.len = p - crt->issuer_raw.p;
   de722:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   de724:	9b06      	ldr	r3, [sp, #24]
   de726:	1a9b      	subs	r3, r3, r2
   de728:	63a3      	str	r3, [r4, #56]	; 0x38
                           mbedtls_x509_time *to )
{
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   de72a:	aa17      	add	r2, sp, #92	; 0x5c
   de72c:	2330      	movs	r3, #48	; 0x30
   de72e:	4631      	mov	r1, r6
   de730:	a806      	add	r0, sp, #24
   de732:	f7f7 fe8b 	bl	d644c <mbedtls_asn1_get_tag>
   de736:	2800      	cmp	r0, #0
   de738:	f000 80eb 	beq.w	de912 <mbedtls_x509_crt_parse_der+0x3a6>
     * Validity ::= SEQUENCE {
     *      notBefore      Time,
     *      notAfter       Time }
     *
     */
    if( ( ret = x509_get_dates( &p, end, &crt->valid_from,
   de73c:	f5b0 5510 	subs.w	r5, r0, #9216	; 0x2400
   de740:	f040 815c 	bne.w	de9fc <mbedtls_x509_crt_parse_der+0x490>
    }

    /*
     * subject              Name
     */
    crt->subject_raw.p = p;
   de744:	f10d 0868 	add.w	r8, sp, #104	; 0x68

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   de748:	aa05      	add	r2, sp, #20
    }

    /*
     * subject              Name
     */
    crt->subject_raw.p = p;
   de74a:	f858 3d50 	ldr.w	r3, [r8, #-80]!
   de74e:	64a3      	str	r3, [r4, #72]	; 0x48

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   de750:	4631      	mov	r1, r6
   de752:	2330      	movs	r3, #48	; 0x30
   de754:	4640      	mov	r0, r8
   de756:	f7f7 fe79 	bl	d644c <mbedtls_asn1_get_tag>
   de75a:	4605      	mov	r5, r0
   de75c:	2800      	cmp	r0, #0
   de75e:	d1ce      	bne.n	de6fe <mbedtls_x509_crt_parse_der+0x192>
    {
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    if( len && ( ret = mbedtls_x509_get_name( &p, p + len, &crt->subject ) ) != 0 )
   de760:	9b05      	ldr	r3, [sp, #20]
   de762:	2b00      	cmp	r3, #0
   de764:	f040 80f1 	bne.w	de94a <mbedtls_x509_crt_parse_der+0x3de>
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    crt->subject_raw.len = p - crt->subject_raw.p;
   de768:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   de76a:	9b06      	ldr	r3, [sp, #24]
   de76c:	1a9b      	subs	r3, r3, r2
   de76e:	6463      	str	r3, [r4, #68]	; 0x44

    /*
     * SubjectPublicKeyInfo
     */
    if( ( ret = mbedtls_pk_parse_subpubkey( &p, end, &crt->pk ) ) != 0 )
   de770:	f104 02bc 	add.w	r2, r4, #188	; 0xbc
   de774:	4631      	mov	r1, r6
   de776:	4640      	mov	r0, r8
   de778:	f7fd fe5a 	bl	dc430 <mbedtls_pk_parse_subpubkey>
   de77c:	4605      	mov	r5, r0
   de77e:	2800      	cmp	r0, #0
   de780:	f040 813c 	bne.w	de9fc <mbedtls_x509_crt_parse_der+0x490>
     *  subjectUniqueID [2]  IMPLICIT UniqueIdentifier OPTIONAL,
     *                       -- If present, version shall be v2 or v3
     *  extensions      [3]  EXPLICIT Extensions OPTIONAL
     *                       -- If present, version shall be v3
     */
    if( crt->version == 2 || crt->version == 3 )
   de784:	69a3      	ldr	r3, [r4, #24]
   de786:	3b02      	subs	r3, #2
   de788:	2b01      	cmp	r3, #1
   de78a:	f240 80e9 	bls.w	de960 <mbedtls_x509_crt_parse_der+0x3f4>
            mbedtls_x509_crt_free( crt );
            return( ret );
        }
    }

    if( crt->version == 2 || crt->version == 3 )
   de78e:	69a3      	ldr	r3, [r4, #24]
   de790:	3b02      	subs	r3, #2
   de792:	2b01      	cmp	r3, #1
   de794:	f240 80f0 	bls.w	de978 <mbedtls_x509_crt_parse_der+0x40c>
            return( ret );
        }
    }

#if !defined(MBEDTLS_X509_ALLOW_EXTENSIONS_NON_V3)
    if( crt->version == 3 )
   de798:	69a3      	ldr	r3, [r4, #24]
   de79a:	2b03      	cmp	r3, #3
   de79c:	d00c      	beq.n	de7b8 <mbedtls_x509_crt_parse_der+0x24c>
            mbedtls_x509_crt_free( crt );
            return( ret );
        }
    }

    if( p != end )
   de79e:	9b06      	ldr	r3, [sp, #24]
   de7a0:	429e      	cmp	r6, r3
   de7a2:	f000 80fe 	beq.w	de9a2 <mbedtls_x509_crt_parse_der+0x436>
        return( ret );
    }

    if( p != end )
    {
        mbedtls_x509_crt_free( crt );
   de7a6:	4620      	mov	r0, r4
   de7a8:	f7ff fe83 	bl	de4b2 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   de7ac:	4d4f      	ldr	r5, [pc, #316]	; (de8ec <mbedtls_x509_crt_parse_der+0x380>)
   de7ae:	e08c      	b.n	de8ca <mbedtls_x509_crt_parse_der+0x35e>

    /*
     * Check for valid input
     */
    if( crt == NULL || buf == NULL )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
   de7b0:	4d4f      	ldr	r5, [pc, #316]	; (de8f0 <mbedtls_x509_crt_parse_der+0x384>)
   de7b2:	e08a      	b.n	de8ca <mbedtls_x509_crt_parse_der+0x35e>

    // Create and populate a new buffer for the raw field
    crt->raw.len = crt_end - buf;
    crt->raw.p = p = (unsigned char *)mbedtls_calloc( 1, crt->raw.len );
    if( p == NULL )
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );
   de7b4:	4d4f      	ldr	r5, [pc, #316]	; (de8f4 <mbedtls_x509_crt_parse_der+0x388>)
   de7b6:	e088      	b.n	de8ca <mbedtls_x509_crt_parse_der+0x35e>
{
    int ret;
    size_t len;
    unsigned char *end_ext_data, *end_ext_octet;

    if( *p == end )
   de7b8:	9a06      	ldr	r2, [sp, #24]
   de7ba:	4296      	cmp	r6, r2
   de7bc:	d0ef      	beq.n	de79e <mbedtls_x509_crt_parse_der+0x232>
        return( 0 );

    if( ( ret = mbedtls_x509_get_ext( p, end, &crt->v3_ext, 3 ) ) != 0 )
   de7be:	f104 02dc 	add.w	r2, r4, #220	; 0xdc
   de7c2:	4631      	mov	r1, r6
   de7c4:	4640      	mov	r0, r8
   de7c6:	f7f8 fa5d 	bl	d6c84 <mbedtls_x509_get_ext>
   de7ca:	4603      	mov	r3, r0
   de7cc:	2800      	cmp	r0, #0
   de7ce:	d173      	bne.n	de8b8 <mbedtls_x509_crt_parse_der+0x34c>
        return( ret );

    end = crt->v3_ext.p + crt->v3_ext.len;
   de7d0:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
   de7d4:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
   de7d8:	188a      	adds	r2, r1, r2
   de7da:	9202      	str	r2, [sp, #8]
         * Extension  ::=  SEQUENCE  {
         *      extnID      OBJECT IDENTIFIER,
         *      critical    BOOLEAN DEFAULT FALSE,
         *      extnValue   OCTET STRING  }
         */
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
   de7dc:	4680      	mov	r8, r0

    if( ( ret = mbedtls_x509_get_ext( p, end, &crt->v3_ext, 3 ) ) != 0 )
        return( ret );

    end = crt->v3_ext.p + crt->v3_ext.len;
    while( *p < end )
   de7de:	9b06      	ldr	r3, [sp, #24]
   de7e0:	9a02      	ldr	r2, [sp, #8]
   de7e2:	429a      	cmp	r2, r3
   de7e4:	f240 80d9 	bls.w	de99a <mbedtls_x509_crt_parse_der+0x42e>
         */
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
        int is_critical = 0; /* DEFAULT FALSE */
        int ext_type = 0;

        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   de7e8:	2330      	movs	r3, #48	; 0x30
   de7ea:	aa07      	add	r2, sp, #28
   de7ec:	9902      	ldr	r1, [sp, #8]
         * Extension  ::=  SEQUENCE  {
         *      extnID      OBJECT IDENTIFIER,
         *      critical    BOOLEAN DEFAULT FALSE,
         *      extnValue   OCTET STRING  }
         */
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
   de7ee:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
        int is_critical = 0; /* DEFAULT FALSE */
        int ext_type = 0;

        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   de7f2:	a806      	add	r0, sp, #24
         * Extension  ::=  SEQUENCE  {
         *      extnID      OBJECT IDENTIFIER,
         *      critical    BOOLEAN DEFAULT FALSE,
         *      extnValue   OCTET STRING  }
         */
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
   de7f4:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
   de7f8:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
        int is_critical = 0; /* DEFAULT FALSE */
   de7fc:	f8cd 8020 	str.w	r8, [sp, #32]
        int ext_type = 0;
   de800:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24

        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   de804:	f7f7 fe22 	bl	d644c <mbedtls_asn1_get_tag>
   de808:	2800      	cmp	r0, #0
   de80a:	f040 80fb 	bne.w	dea04 <mbedtls_x509_crt_parse_der+0x498>
                MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        end_ext_data = *p + len;
   de80e:	9b07      	ldr	r3, [sp, #28]
   de810:	9d06      	ldr	r5, [sp, #24]
   de812:	441d      	add	r5, r3

        /* Get extension ID */
        if( ( ret = mbedtls_asn1_get_tag( p, end_ext_data, &extn_oid.len,
   de814:	aa15      	add	r2, sp, #84	; 0x54
   de816:	2306      	movs	r3, #6
   de818:	4629      	mov	r1, r5
   de81a:	a806      	add	r0, sp, #24
   de81c:	f7f7 fe16 	bl	d644c <mbedtls_asn1_get_tag>
   de820:	2800      	cmp	r0, #0
   de822:	f040 80ef 	bne.w	dea04 <mbedtls_x509_crt_parse_der+0x498>
                                          MBEDTLS_ASN1_OID ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        extn_oid.tag = MBEDTLS_ASN1_OID;
   de826:	2306      	movs	r3, #6
        extn_oid.p = *p;
   de828:	9a06      	ldr	r2, [sp, #24]
        /* Get extension ID */
        if( ( ret = mbedtls_asn1_get_tag( p, end_ext_data, &extn_oid.len,
                                          MBEDTLS_ASN1_OID ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        extn_oid.tag = MBEDTLS_ASN1_OID;
   de82a:	9314      	str	r3, [sp, #80]	; 0x50
        extn_oid.p = *p;
        *p += extn_oid.len;
   de82c:	9b15      	ldr	r3, [sp, #84]	; 0x54
        if( ( ret = mbedtls_asn1_get_tag( p, end_ext_data, &extn_oid.len,
                                          MBEDTLS_ASN1_OID ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        extn_oid.tag = MBEDTLS_ASN1_OID;
        extn_oid.p = *p;
   de82e:	9216      	str	r2, [sp, #88]	; 0x58
        *p += extn_oid.len;
   de830:	4413      	add	r3, r2

        /* Get optional critical */
        if( ( ret = mbedtls_asn1_get_bool( p, end_ext_data, &is_critical ) ) != 0 &&
   de832:	4629      	mov	r1, r5
   de834:	aa08      	add	r2, sp, #32
   de836:	a806      	add	r0, sp, #24
                                          MBEDTLS_ASN1_OID ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        extn_oid.tag = MBEDTLS_ASN1_OID;
        extn_oid.p = *p;
        *p += extn_oid.len;
   de838:	9306      	str	r3, [sp, #24]

        /* Get optional critical */
        if( ( ret = mbedtls_asn1_get_bool( p, end_ext_data, &is_critical ) ) != 0 &&
   de83a:	f7f7 fe1b 	bl	d6474 <mbedtls_asn1_get_bool>
   de83e:	2800      	cmp	r0, #0
   de840:	f040 80a6 	bne.w	de990 <mbedtls_x509_crt_parse_der+0x424>
            ( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG ) )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        /* Data should be octet string type */
        if( ( ret = mbedtls_asn1_get_tag( p, end_ext_data, &len,
   de844:	2304      	movs	r3, #4
   de846:	aa07      	add	r2, sp, #28
   de848:	4629      	mov	r1, r5
   de84a:	a806      	add	r0, sp, #24
   de84c:	f7f7 fdfe 	bl	d644c <mbedtls_asn1_get_tag>
   de850:	2800      	cmp	r0, #0
   de852:	f040 80d7 	bne.w	dea04 <mbedtls_x509_crt_parse_der+0x498>
                MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        end_ext_octet = *p + len;

        if( end_ext_octet != end_ext_data )
   de856:	9b07      	ldr	r3, [sp, #28]
   de858:	9a06      	ldr	r2, [sp, #24]
   de85a:	4413      	add	r3, r2
   de85c:	429d      	cmp	r5, r3
   de85e:	f040 809e 	bne.w	de99e <mbedtls_x509_crt_parse_der+0x432>
                    MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

        /*
         * Detect supported extensions
         */
        ret = mbedtls_oid_get_x509_ext_type( &extn_oid, &ext_type );
   de862:	a909      	add	r1, sp, #36	; 0x24
   de864:	a814      	add	r0, sp, #80	; 0x50
   de866:	f7fb fb1d 	bl	d9ea4 <mbedtls_oid_get_x509_ext_type>

        if( ret != 0 )
   de86a:	2800      	cmp	r0, #0
   de86c:	f040 80d0 	bne.w	dea10 <mbedtls_x509_crt_parse_der+0x4a4>
#endif
            continue;
        }

        /* Forbid repeated extensions */
        if( ( crt->ext_types & ext_type ) != 0 )
   de870:	f8d4 10f8 	ldr.w	r1, [r4, #248]	; 0xf8
   de874:	9a09      	ldr	r2, [sp, #36]	; 0x24
   de876:	ea11 0302 	ands.w	r3, r1, r2
   de87a:	f040 81b9 	bne.w	debf0 <mbedtls_x509_crt_parse_der+0x684>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );

        crt->ext_types |= ext_type;
   de87e:	4311      	orrs	r1, r2

        switch( ext_type )
   de880:	f5b2 7f80 	cmp.w	r2, #256	; 0x100

        /* Forbid repeated extensions */
        if( ( crt->ext_types & ext_type ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );

        crt->ext_types |= ext_type;
   de884:	f8c4 10f8 	str.w	r1, [r4, #248]	; 0xf8

        switch( ext_type )
   de888:	f040 80c8 	bne.w	dea1c <mbedtls_x509_crt_parse_der+0x4b0>
        {
        case MBEDTLS_X509_EXT_BASIC_CONSTRAINTS:
            /* Parse basic constraints */
            if( ( ret = x509_get_basic_constraints( p, end_ext_octet,
   de88c:	f504 7280 	add.w	r2, r4, #256	; 0x100
   de890:	9203      	str	r2, [sp, #12]
    /*
     * BasicConstraints ::= SEQUENCE {
     *      cA                      BOOLEAN DEFAULT FALSE,
     *      pathLenConstraint       INTEGER (0..MAX) OPTIONAL }
     */
    *ca_istrue = 0; /* DEFAULT FALSE */
   de892:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
    *max_pathlen = 0; /* endless */
   de896:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   de89a:	aa17      	add	r2, sp, #92	; 0x5c
   de89c:	2330      	movs	r3, #48	; 0x30
   de89e:	4629      	mov	r1, r5
   de8a0:	a806      	add	r0, sp, #24

        switch( ext_type )
        {
        case MBEDTLS_X509_EXT_BASIC_CONSTRAINTS:
            /* Parse basic constraints */
            if( ( ret = x509_get_basic_constraints( p, end_ext_octet,
   de8a2:	f104 0bfc 	add.w	fp, r4, #252	; 0xfc
     *      pathLenConstraint       INTEGER (0..MAX) OPTIONAL }
     */
    *ca_istrue = 0; /* DEFAULT FALSE */
    *max_pathlen = 0; /* endless */

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   de8a6:	f7f7 fdd1 	bl	d644c <mbedtls_asn1_get_tag>
   de8aa:	2800      	cmp	r0, #0
   de8ac:	f000 80c4 	beq.w	dea38 <mbedtls_x509_crt_parse_der+0x4cc>
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        tag = **p;
        (*p)++;
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
   de8b0:	f5a0 5314 	sub.w	r3, r0, #9472	; 0x2500
                return( ret );
            break;

        case MBEDTLS_X509_EXT_SUBJECT_ALT_NAME:
            /* Parse subject alt name */
            if( ( ret = x509_get_subject_alt_name( p, end_ext_octet,
   de8b4:	2b00      	cmp	r3, #0
   de8b6:	d092      	beq.n	de7de <mbedtls_x509_crt_parse_der+0x272>
#endif
    {
        ret = x509_get_crt_ext( &p, end, crt );
        if( ret != 0 )
        {
            mbedtls_x509_crt_free( crt );
   de8b8:	4620      	mov	r0, r4
   de8ba:	9302      	str	r3, [sp, #8]
   de8bc:	f7ff fdf9 	bl	de4b2 <mbedtls_x509_crt_free>
   de8c0:	9b02      	ldr	r3, [sp, #8]
   de8c2:	461d      	mov	r5, r3
        prev = crt;
        mbedtls_x509_crt_init( crt->next );
        crt = crt->next;
    }

    if( ( ret = x509_crt_parse_der_core( crt, buf, buflen ) ) != 0 )
   de8c4:	2d00      	cmp	r5, #0
   de8c6:	f000 8199 	beq.w	debfc <mbedtls_x509_crt_parse_der+0x690>
    {
        if( prev )
   de8ca:	f1b9 0f00 	cmp.w	r9, #0
   de8ce:	d002      	beq.n	de8d6 <mbedtls_x509_crt_parse_der+0x36a>
            prev->next = NULL;
   de8d0:	2300      	movs	r3, #0
   de8d2:	f8c9 3130 	str.w	r3, [r9, #304]	; 0x130

        if( crt != chain )
   de8d6:	4554      	cmp	r4, sl
   de8d8:	f000 8190 	beq.w	debfc <mbedtls_x509_crt_parse_der+0x690>
            mbedtls_free( crt );
   de8dc:	4620      	mov	r0, r4
   de8de:	f007 fbf1 	bl	e60c4 <free>
   de8e2:	e18b      	b.n	debfc <mbedtls_x509_crt_parse_der+0x690>
   de8e4:	ffffde80 	.word	0xffffde80
   de8e8:	ffffdd9a 	.word	0xffffdd9a
   de8ec:	ffffde1a 	.word	0xffffde1a
   de8f0:	ffffd800 	.word	0xffffd800
   de8f4:	ffffd780 	.word	0xffffd780

    /*
     * Check for valid input
     */
    if( crt == NULL || buf == NULL )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
   de8f8:	4db0      	ldr	r5, [pc, #704]	; (debbc <mbedtls_x509_crt_parse_der+0x650>)
   de8fa:	e17f      	b.n	debfc <mbedtls_x509_crt_parse_der+0x690>
    if( crt->version != 0 && crt->next == NULL )
    {
        crt->next = (mbedtls_x509_crt *)mbedtls_calloc( 1, sizeof( mbedtls_x509_crt ) );

        if( crt->next == NULL )
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );
   de8fc:	4db0      	ldr	r5, [pc, #704]	; (debc0 <mbedtls_x509_crt_parse_der+0x654>)
   de8fe:	e17d      	b.n	debfc <mbedtls_x509_crt_parse_der+0x690>
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    if( crt->version < 0 || crt->version > 2 )
   de900:	69a3      	ldr	r3, [r4, #24]
   de902:	2b02      	cmp	r3, #2
   de904:	f67f aee0 	bls.w	de6c8 <mbedtls_x509_crt_parse_der+0x15c>
    {
        mbedtls_x509_crt_free( crt );
   de908:	4620      	mov	r0, r4
   de90a:	f7ff fdd2 	bl	de4b2 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_UNKNOWN_VERSION );
   de90e:	4dad      	ldr	r5, [pc, #692]	; (debc4 <mbedtls_x509_crt_parse_der+0x658>)
   de910:	e7db      	b.n	de8ca <mbedtls_x509_crt_parse_der+0x35e>

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );

    end = *p + len;
   de912:	9a06      	ldr	r2, [sp, #24]
   de914:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   de916:	eb02 0803 	add.w	r8, r2, r3

    if( ( ret = mbedtls_x509_get_time( p, end, from ) ) != 0 )
   de91a:	4641      	mov	r1, r8
   de91c:	f104 028c 	add.w	r2, r4, #140	; 0x8c
   de920:	a806      	add	r0, sp, #24
   de922:	f7f8 f89b 	bl	d6a5c <mbedtls_x509_get_time>
   de926:	4605      	mov	r5, r0
   de928:	2800      	cmp	r0, #0
   de92a:	d167      	bne.n	de9fc <mbedtls_x509_crt_parse_der+0x490>
        return( ret );

    if( ( ret = mbedtls_x509_get_time( p, end, to ) ) != 0 )
   de92c:	f104 02a4 	add.w	r2, r4, #164	; 0xa4
   de930:	4641      	mov	r1, r8
   de932:	a806      	add	r0, sp, #24
   de934:	f7f8 f892 	bl	d6a5c <mbedtls_x509_get_time>
   de938:	4605      	mov	r5, r0
   de93a:	2800      	cmp	r0, #0
   de93c:	d15e      	bne.n	de9fc <mbedtls_x509_crt_parse_der+0x490>
        return( ret );

    if( *p != end )
   de93e:	9b06      	ldr	r3, [sp, #24]
   de940:	4598      	cmp	r8, r3
   de942:	f43f aeff 	beq.w	de744 <mbedtls_x509_crt_parse_der+0x1d8>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   de946:	4da0      	ldr	r5, [pc, #640]	; (debc8 <mbedtls_x509_crt_parse_der+0x65c>)
   de948:	e058      	b.n	de9fc <mbedtls_x509_crt_parse_der+0x490>
    {
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    if( len && ( ret = mbedtls_x509_get_name( &p, p + len, &crt->subject ) ) != 0 )
   de94a:	9906      	ldr	r1, [sp, #24]
   de94c:	f104 026c 	add.w	r2, r4, #108	; 0x6c
   de950:	4419      	add	r1, r3
   de952:	4640      	mov	r0, r8
   de954:	f7f8 f802 	bl	d695c <mbedtls_x509_get_name>
   de958:	4605      	mov	r5, r0
   de95a:	2800      	cmp	r0, #0
   de95c:	d14e      	bne.n	de9fc <mbedtls_x509_crt_parse_der+0x490>
   de95e:	e703      	b.n	de768 <mbedtls_x509_crt_parse_der+0x1fc>
     *  extensions      [3]  EXPLICIT Extensions OPTIONAL
     *                       -- If present, version shall be v3
     */
    if( crt->version == 2 || crt->version == 3 )
    {
        ret = x509_get_uid( &p, end, &crt->issuer_id,  1 );
   de960:	2301      	movs	r3, #1
   de962:	f104 02c4 	add.w	r2, r4, #196	; 0xc4
   de966:	4631      	mov	r1, r6
   de968:	4640      	mov	r0, r8
   de96a:	f7fe ff50 	bl	dd80e <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi>
        if( ret != 0 )
   de96e:	4605      	mov	r5, r0
   de970:	2800      	cmp	r0, #0
   de972:	f43f af0c 	beq.w	de78e <mbedtls_x509_crt_parse_der+0x222>
   de976:	e041      	b.n	de9fc <mbedtls_x509_crt_parse_der+0x490>
        }
    }

    if( crt->version == 2 || crt->version == 3 )
    {
        ret = x509_get_uid( &p, end, &crt->subject_id,  2 );
   de978:	2302      	movs	r3, #2
   de97a:	f104 02d0 	add.w	r2, r4, #208	; 0xd0
   de97e:	4631      	mov	r1, r6
   de980:	4640      	mov	r0, r8
   de982:	f7fe ff44 	bl	dd80e <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi>
        if( ret != 0 )
   de986:	4605      	mov	r5, r0
   de988:	2800      	cmp	r0, #0
   de98a:	f43f af05 	beq.w	de798 <mbedtls_x509_crt_parse_der+0x22c>
   de98e:	e035      	b.n	de9fc <mbedtls_x509_crt_parse_der+0x490>
        extn_oid.tag = MBEDTLS_ASN1_OID;
        extn_oid.p = *p;
        *p += extn_oid.len;

        /* Get optional critical */
        if( ( ret = mbedtls_asn1_get_bool( p, end_ext_data, &is_critical ) ) != 0 &&
   de990:	f110 0f62 	cmn.w	r0, #98	; 0x62
   de994:	f43f af56 	beq.w	de844 <mbedtls_x509_crt_parse_der+0x2d8>
   de998:	e034      	b.n	dea04 <mbedtls_x509_crt_parse_der+0x498>
        default:
            return( MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE );
        }
    }

    if( *p != end )
   de99a:	f43f af00 	beq.w	de79e <mbedtls_x509_crt_parse_der+0x232>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   de99e:	4b8b      	ldr	r3, [pc, #556]	; (debcc <mbedtls_x509_crt_parse_der+0x660>)
   de9a0:	e78a      	b.n	de8b8 <mbedtls_x509_crt_parse_der+0x34c>
     *  -- end of TBSCertificate
     *
     *  signatureAlgorithm   AlgorithmIdentifier,
     *  signatureValue       BIT STRING
     */
    if( ( ret = mbedtls_x509_get_alg( &p, end, &sig_oid2, &sig_params2 ) ) != 0 )
   de9a2:	ab0e      	add	r3, sp, #56	; 0x38
   de9a4:	aa11      	add	r2, sp, #68	; 0x44
   de9a6:	4639      	mov	r1, r7
   de9a8:	a806      	add	r0, sp, #24
   de9aa:	f7f7 fee0 	bl	d676e <mbedtls_x509_get_alg>
   de9ae:	4605      	mov	r5, r0
   de9b0:	bb20      	cbnz	r0, de9fc <mbedtls_x509_crt_parse_der+0x490>
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    if( crt->sig_oid.len != sig_oid2.len ||
   de9b2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   de9b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   de9b6:	429a      	cmp	r2, r3
   de9b8:	d10e      	bne.n	de9d8 <mbedtls_x509_crt_parse_der+0x46c>
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
   de9ba:	9913      	ldr	r1, [sp, #76]	; 0x4c
   de9bc:	6b20      	ldr	r0, [r4, #48]	; 0x30
   de9be:	f00b f86b 	bl	e9a98 <memcmp>
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    if( crt->sig_oid.len != sig_oid2.len ||
   de9c2:	b948      	cbnz	r0, de9d8 <mbedtls_x509_crt_parse_der+0x46c>
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
        sig_params1.len != sig_params2.len ||
   de9c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    if( crt->sig_oid.len != sig_oid2.len ||
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
   de9c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   de9c8:	429a      	cmp	r2, r3
   de9ca:	d105      	bne.n	de9d8 <mbedtls_x509_crt_parse_der+0x46c>
        sig_params1.len != sig_params2.len ||
   de9cc:	b14a      	cbz	r2, de9e2 <mbedtls_x509_crt_parse_der+0x476>
        ( sig_params1.len != 0 &&
          memcmp( sig_params1.p, sig_params2.p, sig_params1.len ) != 0 ) )
   de9ce:	9910      	ldr	r1, [sp, #64]	; 0x40
   de9d0:	980d      	ldr	r0, [sp, #52]	; 0x34
   de9d2:	f00b f861 	bl	e9a98 <memcmp>
    }

    if( crt->sig_oid.len != sig_oid2.len ||
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
        sig_params1.len != sig_params2.len ||
        ( sig_params1.len != 0 &&
   de9d6:	b120      	cbz	r0, de9e2 <mbedtls_x509_crt_parse_der+0x476>
          memcmp( sig_params1.p, sig_params2.p, sig_params1.len ) != 0 ) )
    {
        mbedtls_x509_crt_free( crt );
   de9d8:	4620      	mov	r0, r4
   de9da:	f7ff fd6a 	bl	de4b2 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_SIG_MISMATCH );
   de9de:	4d7c      	ldr	r5, [pc, #496]	; (debd0 <mbedtls_x509_crt_parse_der+0x664>)
   de9e0:	e773      	b.n	de8ca <mbedtls_x509_crt_parse_der+0x35e>
    }

    if( ( ret = mbedtls_x509_get_sig( &p, end, &crt->sig ) ) != 0 )
   de9e2:	f504 728e 	add.w	r2, r4, #284	; 0x11c
   de9e6:	4639      	mov	r1, r7
   de9e8:	a806      	add	r0, sp, #24
   de9ea:	f7f8 f8ed 	bl	d6bc8 <mbedtls_x509_get_sig>
   de9ee:	4605      	mov	r5, r0
   de9f0:	b920      	cbnz	r0, de9fc <mbedtls_x509_crt_parse_der+0x490>
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    if( p != end )
   de9f2:	9b06      	ldr	r3, [sp, #24]
   de9f4:	429f      	cmp	r7, r3
   de9f6:	f000 8101 	beq.w	debfc <mbedtls_x509_crt_parse_der+0x690>
   de9fa:	e6d4      	b.n	de7a6 <mbedtls_x509_crt_parse_der+0x23a>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    if( len && ( ret = mbedtls_x509_get_name( &p, p + len, &crt->subject ) ) != 0 )
    {
        mbedtls_x509_crt_free( crt );
   de9fc:	4620      	mov	r0, r4
   de9fe:	f7ff fd58 	bl	de4b2 <mbedtls_x509_crt_free>
   dea02:	e75f      	b.n	de8c4 <mbedtls_x509_crt_parse_der+0x358>
        *p += extn_oid.len;

        /* Get optional critical */
        if( ( ret = mbedtls_asn1_get_bool( p, end_ext_data, &is_critical ) ) != 0 &&
            ( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG ) )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
   dea04:	f5a0 5314 	sub.w	r3, r0, #9472	; 0x2500
#if !defined(MBEDTLS_X509_ALLOW_EXTENSIONS_NON_V3)
    if( crt->version == 3 )
#endif
    {
        ret = x509_get_crt_ext( &p, end, crt );
        if( ret != 0 )
   dea08:	2b00      	cmp	r3, #0
   dea0a:	f43f aec8 	beq.w	de79e <mbedtls_x509_crt_parse_der+0x232>
   dea0e:	e753      	b.n	de8b8 <mbedtls_x509_crt_parse_der+0x34c>
        {
            /* No parser found, skip extension */
            *p = end_ext_octet;

#if !defined(MBEDTLS_X509_ALLOW_UNSUPPORTED_CRITICAL_EXTENSION)
            if( is_critical )
   dea10:	9b08      	ldr	r3, [sp, #32]
        ret = mbedtls_oid_get_x509_ext_type( &extn_oid, &ext_type );

        if( ret != 0 )
        {
            /* No parser found, skip extension */
            *p = end_ext_octet;
   dea12:	9506      	str	r5, [sp, #24]

#if !defined(MBEDTLS_X509_ALLOW_UNSUPPORTED_CRITICAL_EXTENSION)
            if( is_critical )
   dea14:	2b00      	cmp	r3, #0
   dea16:	f43f aee2 	beq.w	de7de <mbedtls_x509_crt_parse_der+0x272>
   dea1a:	e0e7      	b.n	debec <mbedtls_x509_crt_parse_der+0x680>
        if( ( crt->ext_types & ext_type ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );

        crt->ext_types |= ext_type;

        switch( ext_type )
   dea1c:	dc04      	bgt.n	dea28 <mbedtls_x509_crt_parse_der+0x4bc>
   dea1e:	2a04      	cmp	r2, #4
   dea20:	d03b      	beq.n	dea9a <mbedtls_x509_crt_parse_der+0x52e>
   dea22:	2a20      	cmp	r2, #32
   dea24:	d069      	beq.n	deafa <mbedtls_x509_crt_parse_der+0x58e>
   dea26:	e0e5      	b.n	debf4 <mbedtls_x509_crt_parse_der+0x688>
   dea28:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   dea2c:	d056      	beq.n	deadc <mbedtls_x509_crt_parse_der+0x570>
   dea2e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   dea32:	f000 80b3 	beq.w	deb9c <mbedtls_x509_crt_parse_der+0x630>
   dea36:	e0dd      	b.n	debf4 <mbedtls_x509_crt_parse_der+0x688>

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( *p == end )
   dea38:	9b06      	ldr	r3, [sp, #24]
   dea3a:	429d      	cmp	r5, r3
   dea3c:	f43f aecf 	beq.w	de7de <mbedtls_x509_crt_parse_der+0x272>
        return( 0 );

    if( ( ret = mbedtls_asn1_get_bool( p, end, ca_istrue ) ) != 0 )
   dea40:	465a      	mov	r2, fp
   dea42:	4629      	mov	r1, r5
   dea44:	a806      	add	r0, sp, #24
   dea46:	f7f7 fd15 	bl	d6474 <mbedtls_asn1_get_bool>
   dea4a:	b188      	cbz	r0, dea70 <mbedtls_x509_crt_parse_der+0x504>
    {
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   dea4c:	f110 0f62 	cmn.w	r0, #98	; 0x62
   dea50:	f47f af2e 	bne.w	de8b0 <mbedtls_x509_crt_parse_der+0x344>
            ret = mbedtls_asn1_get_int( p, end, ca_istrue );
   dea54:	465a      	mov	r2, fp
   dea56:	4629      	mov	r1, r5
   dea58:	a806      	add	r0, sp, #24
   dea5a:	f7f7 fd24 	bl	d64a6 <mbedtls_asn1_get_int>

        if( ret != 0 )
   dea5e:	2800      	cmp	r0, #0
   dea60:	f47f af26 	bne.w	de8b0 <mbedtls_x509_crt_parse_der+0x344>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        if( *ca_istrue != 0 )
   dea64:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
   dea68:	b113      	cbz	r3, dea70 <mbedtls_x509_crt_parse_der+0x504>
            *ca_istrue = 1;
   dea6a:	2301      	movs	r3, #1
   dea6c:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
    }

    if( *p == end )
   dea70:	9b06      	ldr	r3, [sp, #24]
   dea72:	429d      	cmp	r5, r3
   dea74:	f43f aeb3 	beq.w	de7de <mbedtls_x509_crt_parse_der+0x272>
        return( 0 );

    if( ( ret = mbedtls_asn1_get_int( p, end, max_pathlen ) ) != 0 )
   dea78:	9a03      	ldr	r2, [sp, #12]
   dea7a:	4629      	mov	r1, r5
   dea7c:	a806      	add	r0, sp, #24
   dea7e:	f7f7 fd12 	bl	d64a6 <mbedtls_asn1_get_int>
   dea82:	2800      	cmp	r0, #0
   dea84:	f47f af14 	bne.w	de8b0 <mbedtls_x509_crt_parse_der+0x344>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( *p != end )
   dea88:	9b06      	ldr	r3, [sp, #24]
   dea8a:	429d      	cmp	r5, r3
   dea8c:	d187      	bne.n	de99e <mbedtls_x509_crt_parse_der+0x432>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    (*max_pathlen)++;
   dea8e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   dea92:	3301      	adds	r3, #1
   dea94:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   dea98:	e6a1      	b.n	de7de <mbedtls_x509_crt_parse_der+0x272>
{
    int ret;
    size_t i;
    mbedtls_x509_bitstring bs = { 0, 0, NULL };

    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
   dea9a:	aa17      	add	r2, sp, #92	; 0x5c
   dea9c:	4629      	mov	r1, r5
   dea9e:	a806      	add	r0, sp, #24
                               const unsigned char *end,
                               unsigned int *key_usage)
{
    int ret;
    size_t i;
    mbedtls_x509_bitstring bs = { 0, 0, NULL };
   deaa0:	9317      	str	r3, [sp, #92]	; 0x5c
   deaa2:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
   deaa6:	9319      	str	r3, [sp, #100]	; 0x64

    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
   deaa8:	f7f7 fd34 	bl	d6514 <mbedtls_asn1_get_bitstring>
   deaac:	2800      	cmp	r0, #0
   deaae:	d17f      	bne.n	debb0 <mbedtls_x509_crt_parse_der+0x644>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( bs.len < 1 )
   deab0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   deab2:	2a00      	cmp	r2, #0
   deab4:	f000 80a0 	beq.w	debf8 <mbedtls_x509_crt_parse_der+0x68c>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    /* Get actual bitstring */
    *key_usage = 0;
   deab8:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
    {
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
   deabc:	9d19      	ldr	r5, [sp, #100]	; 0x64
   deabe:	5c2b      	ldrb	r3, [r5, r0]
   deac0:	00c1      	lsls	r1, r0, #3
   deac2:	408b      	lsls	r3, r1
   deac4:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    /* Get actual bitstring */
    *key_usage = 0;
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
   deac8:	3001      	adds	r0, #1
    {
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
   deaca:	430b      	orrs	r3, r1
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    /* Get actual bitstring */
    *key_usage = 0;
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
   deacc:	4282      	cmp	r2, r0
    {
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
   deace:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    /* Get actual bitstring */
    *key_usage = 0;
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
   dead2:	f43f ae84 	beq.w	de7de <mbedtls_x509_crt_parse_der+0x272>
   dead6:	2804      	cmp	r0, #4
   dead8:	d1f1      	bne.n	deabe <mbedtls_x509_crt_parse_der+0x552>
   deada:	e680      	b.n	de7de <mbedtls_x509_crt_parse_der+0x272>
                               const unsigned char *end,
                               mbedtls_x509_sequence *ext_key_usage)
{
    int ret;

    if( ( ret = mbedtls_asn1_get_sequence_of( p, end, ext_key_usage, MBEDTLS_ASN1_OID ) ) != 0 )
   deadc:	2306      	movs	r3, #6
   deade:	f504 7284 	add.w	r2, r4, #264	; 0x108
   deae2:	4629      	mov	r1, r5
   deae4:	a806      	add	r0, sp, #24
   deae6:	f7f7 fd4e 	bl	d6586 <mbedtls_asn1_get_sequence_of>
   deaea:	2800      	cmp	r0, #0
   deaec:	d160      	bne.n	debb0 <mbedtls_x509_crt_parse_der+0x644>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    /* Sequence length must be >= 1 */
    if( ext_key_usage->buf.p == NULL )
   deaee:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   deaf2:	2b00      	cmp	r3, #0
   deaf4:	f47f ae73 	bne.w	de7de <mbedtls_x509_crt_parse_der+0x272>
   deaf8:	e07e      	b.n	debf8 <mbedtls_x509_crt_parse_der+0x68c>
    mbedtls_asn1_buf *buf;
    unsigned char tag;
    mbedtls_asn1_sequence *cur = subject_alt_name;

    /* Get main sequence tag */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   deafa:	2330      	movs	r3, #48	; 0x30
   deafc:	aa0a      	add	r2, sp, #40	; 0x28
   deafe:	4629      	mov	r1, r5
   deb00:	a806      	add	r0, sp, #24
                return( ret );
            break;

        case MBEDTLS_X509_EXT_SUBJECT_ALT_NAME:
            /* Parse subject alt name */
            if( ( ret = x509_get_subject_alt_name( p, end_ext_octet,
   deb02:	f104 0be8 	add.w	fp, r4, #232	; 0xe8
    mbedtls_asn1_buf *buf;
    unsigned char tag;
    mbedtls_asn1_sequence *cur = subject_alt_name;

    /* Get main sequence tag */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   deb06:	f7f7 fca1 	bl	d644c <mbedtls_asn1_get_tag>
   deb0a:	2800      	cmp	r0, #0
   deb0c:	f47f aed0 	bne.w	de8b0 <mbedtls_x509_crt_parse_der+0x344>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( *p + len != end )
   deb10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   deb12:	9a06      	ldr	r2, [sp, #24]
   deb14:	4413      	add	r3, r2
   deb16:	429d      	cmp	r5, r3
   deb18:	f47f af41 	bne.w	de99e <mbedtls_x509_crt_parse_der+0x432>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    while( *p < end )
   deb1c:	9a06      	ldr	r2, [sp, #24]
   deb1e:	4295      	cmp	r5, r2
   deb20:	d933      	bls.n	deb8a <mbedtls_x509_crt_parse_der+0x61e>
    {
        if( ( end - *p ) < 1 )
   deb22:	1aab      	subs	r3, r5, r2
   deb24:	2b00      	cmp	r3, #0
   deb26:	dd35      	ble.n	deb94 <mbedtls_x509_crt_parse_der+0x628>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        tag = **p;
   deb28:	f812 3b01 	ldrb.w	r3, [r2], #1
        (*p)++;
   deb2c:	9206      	str	r2, [sp, #24]
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
   deb2e:	4629      	mov	r1, r5
   deb30:	aa17      	add	r2, sp, #92	; 0x5c
   deb32:	a806      	add	r0, sp, #24
    {
        if( ( end - *p ) < 1 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        tag = **p;
   deb34:	9303      	str	r3, [sp, #12]
        (*p)++;
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
   deb36:	f7f7 fc37 	bl	d63a8 <mbedtls_asn1_get_len>
   deb3a:	9b03      	ldr	r3, [sp, #12]
   deb3c:	2800      	cmp	r0, #0
   deb3e:	f47f aeb7 	bne.w	de8b0 <mbedtls_x509_crt_parse_der+0x344>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        if( ( tag & MBEDTLS_ASN1_TAG_CLASS_MASK ) !=
   deb42:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   deb46:	2a80      	cmp	r2, #128	; 0x80
   deb48:	d150      	bne.n	debec <mbedtls_x509_crt_parse_der+0x680>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
        }

        /* Skip everything but DNS name */
        if( tag != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | 2 ) )
   deb4a:	2b82      	cmp	r3, #130	; 0x82
   deb4c:	d002      	beq.n	deb54 <mbedtls_x509_crt_parse_der+0x5e8>
        {
            *p += tag_len;
   deb4e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   deb50:	9a06      	ldr	r2, [sp, #24]
   deb52:	e017      	b.n	deb84 <mbedtls_x509_crt_parse_der+0x618>
            continue;
        }

        /* Allocate and assign next pointer */
        if( cur->buf.p != NULL )
   deb54:	f8db 3008 	ldr.w	r3, [fp, #8]
   deb58:	b15b      	cbz	r3, deb72 <mbedtls_x509_crt_parse_der+0x606>
        {
            if( cur->next != NULL )
   deb5a:	f8db 300c 	ldr.w	r3, [fp, #12]
   deb5e:	2b00      	cmp	r3, #0
   deb60:	d146      	bne.n	debf0 <mbedtls_x509_crt_parse_der+0x684>
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );

            cur->next = (mbedtls_asn1_sequence *)mbedtls_calloc( 1, sizeof( mbedtls_asn1_sequence ) );
   deb62:	2110      	movs	r1, #16
   deb64:	2001      	movs	r0, #1
   deb66:	f00a fe85 	bl	e9874 <calloc>
   deb6a:	f8cb 000c 	str.w	r0, [fp, #12]

            if( cur->next == NULL )
   deb6e:	b198      	cbz	r0, deb98 <mbedtls_x509_crt_parse_der+0x62c>
   deb70:	4683      	mov	fp, r0

            cur = cur->next;
        }

        buf = &(cur->buf);
        buf->tag = tag;
   deb72:	2382      	movs	r3, #130	; 0x82
   deb74:	f8cb 3000 	str.w	r3, [fp]
        buf->p = *p;
   deb78:	9a06      	ldr	r2, [sp, #24]
   deb7a:	f8cb 2008 	str.w	r2, [fp, #8]
        buf->len = tag_len;
   deb7e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   deb80:	f8cb 3004 	str.w	r3, [fp, #4]
        *p += buf->len;
   deb84:	4413      	add	r3, r2
   deb86:	9306      	str	r3, [sp, #24]
   deb88:	e7c8      	b.n	deb1c <mbedtls_x509_crt_parse_der+0x5b0>
    }

    /* Set final sequence entry's next pointer to NULL */
    cur->next = NULL;
   deb8a:	f8cb 800c 	str.w	r8, [fp, #12]

    if( *p != end )
   deb8e:	f43f ae26 	beq.w	de7de <mbedtls_x509_crt_parse_der+0x272>
   deb92:	e704      	b.n	de99e <mbedtls_x509_crt_parse_der+0x432>

    while( *p < end )
    {
        if( ( end - *p ) < 1 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   deb94:	4b0f      	ldr	r3, [pc, #60]	; (debd4 <mbedtls_x509_crt_parse_der+0x668>)
   deb96:	e68f      	b.n	de8b8 <mbedtls_x509_crt_parse_der+0x34c>

            cur->next = (mbedtls_asn1_sequence *)mbedtls_calloc( 1, sizeof( mbedtls_asn1_sequence ) );

            if( cur->next == NULL )
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                        MBEDTLS_ERR_ASN1_ALLOC_FAILED );
   deb98:	4b0f      	ldr	r3, [pc, #60]	; (debd8 <mbedtls_x509_crt_parse_der+0x66c>)
   deb9a:	e68d      	b.n	de8b8 <mbedtls_x509_crt_parse_der+0x34c>
                                       unsigned char *ns_cert_type)
{
    int ret;
    mbedtls_x509_bitstring bs = { 0, 0, NULL };

    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
   deb9c:	aa17      	add	r2, sp, #92	; 0x5c
   deb9e:	4629      	mov	r1, r5
   deba0:	a806      	add	r0, sp, #24
static int x509_get_ns_cert_type( unsigned char **p,
                                       const unsigned char *end,
                                       unsigned char *ns_cert_type)
{
    int ret;
    mbedtls_x509_bitstring bs = { 0, 0, NULL };
   deba2:	9317      	str	r3, [sp, #92]	; 0x5c
   deba4:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
   deba8:	9319      	str	r3, [sp, #100]	; 0x64

    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
   debaa:	f7f7 fcb3 	bl	d6514 <mbedtls_asn1_get_bitstring>
   debae:	b1a8      	cbz	r0, debdc <mbedtls_x509_crt_parse_der+0x670>
                return( ret );
            break;

        case MBEDTLS_X509_EXT_NS_CERT_TYPE:
            /* Parse netscape certificate type */
            if( ( ret = x509_get_ns_cert_type( p, end_ext_octet,
   debb0:	f5b0 5314 	subs.w	r3, r0, #9472	; 0x2500
   debb4:	f43f ae13 	beq.w	de7de <mbedtls_x509_crt_parse_der+0x272>
   debb8:	e67e      	b.n	de8b8 <mbedtls_x509_crt_parse_der+0x34c>
   debba:	bf00      	nop
   debbc:	ffffd800 	.word	0xffffd800
   debc0:	ffffd780 	.word	0xffffd780
   debc4:	ffffda80 	.word	0xffffda80
   debc8:	ffffdb9a 	.word	0xffffdb9a
   debcc:	ffffda9a 	.word	0xffffda9a
   debd0:	ffffd980 	.word	0xffffd980
   debd4:	ffffdaa0 	.word	0xffffdaa0
   debd8:	ffffda96 	.word	0xffffda96
    mbedtls_x509_bitstring bs = { 0, 0, NULL };

    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( bs.len != 1 )
   debdc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   debde:	2b01      	cmp	r3, #1
   debe0:	d10a      	bne.n	debf8 <mbedtls_x509_crt_parse_der+0x68c>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    /* Get actual bitstring */
    *ns_cert_type = *bs.p;
   debe2:	9b19      	ldr	r3, [sp, #100]	; 0x64
   debe4:	781b      	ldrb	r3, [r3, #0]
   debe6:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
   debea:	e5f8      	b.n	de7de <mbedtls_x509_crt_parse_der+0x272>
#if !defined(MBEDTLS_X509_ALLOW_UNSUPPORTED_CRITICAL_EXTENSION)
            if( is_critical )
            {
                /* Data is marked as critical: fail */
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                        MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
   debec:	4b05      	ldr	r3, [pc, #20]	; (dec04 <mbedtls_x509_crt_parse_der+0x698>)
   debee:	e663      	b.n	de8b8 <mbedtls_x509_crt_parse_der+0x34c>
            continue;
        }

        /* Forbid repeated extensions */
        if( ( crt->ext_types & ext_type ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );
   debf0:	4b05      	ldr	r3, [pc, #20]	; (dec08 <mbedtls_x509_crt_parse_der+0x69c>)
   debf2:	e661      	b.n	de8b8 <mbedtls_x509_crt_parse_der+0x34c>
                    &crt->ns_cert_type ) ) != 0 )
                return( ret );
            break;

        default:
            return( MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE );
   debf4:	4b05      	ldr	r3, [pc, #20]	; (dec0c <mbedtls_x509_crt_parse_der+0x6a0>)
   debf6:	e65f      	b.n	de8b8 <mbedtls_x509_crt_parse_der+0x34c>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    /* Sequence length must be >= 1 */
    if( ext_key_usage->buf.p == NULL )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );
   debf8:	4b05      	ldr	r3, [pc, #20]	; (dec10 <mbedtls_x509_crt_parse_der+0x6a4>)
   debfa:	e65d      	b.n	de8b8 <mbedtls_x509_crt_parse_der+0x34c>

        return( ret );
    }

    return( 0 );
}
   debfc:	4628      	mov	r0, r5
   debfe:	b01b      	add	sp, #108	; 0x6c
   dec00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dec04:	ffffda9e 	.word	0xffffda9e
   dec08:	ffffdb00 	.word	0xffffdb00
   dec0c:	ffffdf80 	.word	0xffffdf80
   dec10:	ffffda9c 	.word	0xffffda9c

000dec14 <mbedtls_x509_crt_parse>:
/*
 * Parse one or more PEM certificates from a buffer and add them to the chained
 * list
 */
int mbedtls_x509_crt_parse( mbedtls_x509_crt *chain, const unsigned char *buf, size_t buflen )
{
   dec14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dec18:	460d      	mov	r5, r1
   dec1a:	b088      	sub	sp, #32
   dec1c:	4617      	mov	r7, r2
#endif

    /*
     * Check for valid input
     */
    if( chain == NULL || buf == NULL )
   dec1e:	4681      	mov	r9, r0
   dec20:	2800      	cmp	r0, #0
   dec22:	d054      	beq.n	decce <mbedtls_x509_crt_parse+0xba>
   dec24:	2900      	cmp	r1, #0
   dec26:	d052      	beq.n	decce <mbedtls_x509_crt_parse+0xba>
    /*
     * Determine buffer content. Buffer contains either one DER certificate or
     * one or more PEM certificates.
     */
#if defined(MBEDTLS_PEM_PARSE_C)
    if( buflen != 0 && buf[buflen - 1] == '\0' &&
   dec28:	2a00      	cmp	r2, #0
   dec2a:	d054      	beq.n	decd6 <mbedtls_x509_crt_parse+0xc2>
   dec2c:	188b      	adds	r3, r1, r2
   dec2e:	f813 4c01 	ldrb.w	r4, [r3, #-1]
   dec32:	2c00      	cmp	r4, #0
   dec34:	d14f      	bne.n	decd6 <mbedtls_x509_crt_parse+0xc2>
        strstr( (const char *) buf, "-----BEGIN CERTIFICATE-----" ) != NULL )
   dec36:	492c      	ldr	r1, [pc, #176]	; (dece8 <mbedtls_x509_crt_parse+0xd4>)
   dec38:	4628      	mov	r0, r5
   dec3a:	f00a ffd0 	bl	e9bde <strstr>
    /*
     * Determine buffer content. Buffer contains either one DER certificate or
     * one or more PEM certificates.
     */
#if defined(MBEDTLS_PEM_PARSE_C)
    if( buflen != 0 && buf[buflen - 1] == '\0' &&
   dec3e:	2800      	cmp	r0, #0
   dec40:	d049      	beq.n	decd6 <mbedtls_x509_crt_parse+0xc2>
   dec42:	46a0      	mov	r8, r4
   dec44:	46a2      	mov	sl, r4
    {
        int ret;
        mbedtls_pem_context pem;

        /* 1 rather than 0 since the terminating NULL byte is counted in */
        while( buflen > 1 )
   dec46:	2f01      	cmp	r7, #1
   dec48:	d938      	bls.n	decbc <mbedtls_x509_crt_parse+0xa8>
        {
            size_t use_len;
            mbedtls_pem_init( &pem );
   dec4a:	a805      	add	r0, sp, #20
   dec4c:	f005 fbc3 	bl	e43d6 <mbedtls_pem_init>

            /* If we get there, we know the string is null-terminated */
            ret = mbedtls_pem_read_buffer( &pem,
   dec50:	ab04      	add	r3, sp, #16
   dec52:	9302      	str	r3, [sp, #8]
   dec54:	2300      	movs	r3, #0
   dec56:	9301      	str	r3, [sp, #4]
   dec58:	9300      	str	r3, [sp, #0]
   dec5a:	4a24      	ldr	r2, [pc, #144]	; (decec <mbedtls_x509_crt_parse+0xd8>)
   dec5c:	4922      	ldr	r1, [pc, #136]	; (dece8 <mbedtls_x509_crt_parse+0xd4>)
   dec5e:	462b      	mov	r3, r5
   dec60:	a805      	add	r0, sp, #20
   dec62:	f005 fbbd 	bl	e43e0 <mbedtls_pem_read_buffer>
                           "-----BEGIN CERTIFICATE-----",
                           "-----END CERTIFICATE-----",
                           buf, NULL, 0, &use_len );

            if( ret == 0 )
   dec66:	4606      	mov	r6, r0
   dec68:	b968      	cbnz	r0, dec86 <mbedtls_x509_crt_parse+0x72>
            {
                /*
                 * Was PEM encoded
                 */
                buflen -= use_len;
   dec6a:	9b04      	ldr	r3, [sp, #16]
                continue;
            }
            else
                break;

            ret = mbedtls_x509_crt_parse_der( chain, pem.buf, pem.buflen );
   dec6c:	9a06      	ldr	r2, [sp, #24]
   dec6e:	9905      	ldr	r1, [sp, #20]
   dec70:	4648      	mov	r0, r9
            if( ret == 0 )
            {
                /*
                 * Was PEM encoded
                 */
                buflen -= use_len;
   dec72:	1aff      	subs	r7, r7, r3
                buf += use_len;
   dec74:	441d      	add	r5, r3
                continue;
            }
            else
                break;

            ret = mbedtls_x509_crt_parse_der( chain, pem.buf, pem.buflen );
   dec76:	f7ff fc79 	bl	de56c <mbedtls_x509_crt_parse_der>
   dec7a:	4606      	mov	r6, r0

            mbedtls_pem_free( &pem );
   dec7c:	a805      	add	r0, sp, #20
   dec7e:	f005 fc39 	bl	e44f4 <mbedtls_pem_free>

            if( ret != 0 )
   dec82:	b96e      	cbnz	r6, deca0 <mbedtls_x509_crt_parse+0x8c>
   dec84:	e015      	b.n	decb2 <mbedtls_x509_crt_parse+0x9e>
                 * Was PEM encoded
                 */
                buflen -= use_len;
                buf += use_len;
            }
            else if( ret == MBEDTLS_ERR_PEM_BAD_INPUT_DATA )
   dec86:	f510 5fa4 	cmn.w	r0, #5248	; 0x1480
   dec8a:	d015      	beq.n	decb8 <mbedtls_x509_crt_parse+0xa4>
            {
                return( ret );
            }
            else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
   dec8c:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
   dec90:	d014      	beq.n	decbc <mbedtls_x509_crt_parse+0xa8>
            {
                mbedtls_pem_free( &pem );
   dec92:	a805      	add	r0, sp, #20
   dec94:	f005 fc2e 	bl	e44f4 <mbedtls_pem_free>

                /*
                 * PEM header and footer were found
                 */
                buflen -= use_len;
   dec98:	9b04      	ldr	r3, [sp, #16]
   dec9a:	1aff      	subs	r7, r7, r3
                buf += use_len;
   dec9c:	441d      	add	r5, r3
   dec9e:	e002      	b.n	deca6 <mbedtls_x509_crt_parse+0x92>
            if( ret != 0 )
            {
                /*
                 * Quit parsing on a memory error
                 */
                if( ret == MBEDTLS_ERR_X509_ALLOC_FAILED )
   deca0:	f516 5f22 	cmn.w	r6, #10368	; 0x2880
   deca4:	d008      	beq.n	decb8 <mbedtls_x509_crt_parse+0xa4>
                    return( ret );

                if( first_error == 0 )
   deca6:	f1b8 0f00 	cmp.w	r8, #0
   decaa:	bf08      	it	eq
   decac:	46b0      	moveq	r8, r6
                    first_error = ret;

                total_failed++;
   decae:	3401      	adds	r4, #1
                continue;
   decb0:	e7c9      	b.n	dec46 <mbedtls_x509_crt_parse+0x32>
            }

            success = 1;
   decb2:	f04f 0a01 	mov.w	sl, #1
   decb6:	e7c6      	b.n	dec46 <mbedtls_x509_crt_parse+0x32>
   decb8:	4630      	mov	r0, r6
   decba:	e011      	b.n	dece0 <mbedtls_x509_crt_parse+0xcc>
        }
    }

    if( success )
   decbc:	f1ba 0f00 	cmp.w	sl, #0
   decc0:	d107      	bne.n	decd2 <mbedtls_x509_crt_parse+0xbe>
        return( total_failed );
    else if( first_error )
   decc2:	480b      	ldr	r0, [pc, #44]	; (decf0 <mbedtls_x509_crt_parse+0xdc>)
   decc4:	f1b8 0f00 	cmp.w	r8, #0
   decc8:	bf18      	it	ne
   decca:	4640      	movne	r0, r8
   deccc:	e008      	b.n	dece0 <mbedtls_x509_crt_parse+0xcc>

    /*
     * Check for valid input
     */
    if( chain == NULL || buf == NULL )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
   decce:	4809      	ldr	r0, [pc, #36]	; (decf4 <mbedtls_x509_crt_parse+0xe0>)
   decd0:	e006      	b.n	dece0 <mbedtls_x509_crt_parse+0xcc>
   decd2:	4620      	mov	r0, r4
   decd4:	e004      	b.n	dece0 <mbedtls_x509_crt_parse+0xcc>
    {
        buf_format = MBEDTLS_X509_FORMAT_PEM;
    }

    if( buf_format == MBEDTLS_X509_FORMAT_DER )
        return mbedtls_x509_crt_parse_der( chain, buf, buflen );
   decd6:	463a      	mov	r2, r7
   decd8:	4629      	mov	r1, r5
   decda:	4648      	mov	r0, r9
   decdc:	f7ff fc46 	bl	de56c <mbedtls_x509_crt_parse_der>
    else if( first_error )
        return( first_error );
    else
        return( MBEDTLS_ERR_X509_CERT_UNKNOWN_FORMAT );
#endif /* MBEDTLS_PEM_PARSE_C */
}
   dece0:	b008      	add	sp, #32
   dece2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dece6:	bf00      	nop
   dece8:	000ee296 	.word	0x000ee296
   decec:	000ee2b2 	.word	0x000ee2b2
   decf0:	ffffd880 	.word	0xffffd880
   decf4:	ffffd800 	.word	0xffffd800

000decf8 <mbedtls_pk_init>:
 */
void mbedtls_pk_init( mbedtls_pk_context *ctx )
{
    PK_VALIDATE( ctx != NULL );

    ctx->pk_info = NULL;
   decf8:	2300      	movs	r3, #0
   decfa:	6003      	str	r3, [r0, #0]
    ctx->pk_ctx = NULL;
   decfc:	6043      	str	r3, [r0, #4]
   decfe:	4770      	bx	lr

000ded00 <mbedtls_pk_free>:

/*
 * Free (the components of) a mbedtls_pk_context
 */
void mbedtls_pk_free( mbedtls_pk_context *ctx )
{
   ded00:	b510      	push	{r4, lr}
    if( ctx == NULL )
   ded02:	4604      	mov	r4, r0
   ded04:	b150      	cbz	r0, ded1c <mbedtls_pk_free+0x1c>
        return;

    if ( ctx->pk_info != NULL )
   ded06:	6803      	ldr	r3, [r0, #0]
   ded08:	b113      	cbz	r3, ded10 <mbedtls_pk_free+0x10>
        ctx->pk_info->ctx_free_func( ctx->pk_ctx );
   ded0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   ded0c:	6840      	ldr	r0, [r0, #4]
   ded0e:	4798      	blx	r3

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_pk_context ) );
   ded10:	4620      	mov	r0, r4
   ded12:	2108      	movs	r1, #8
}
   ded14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return;

    if ( ctx->pk_info != NULL )
        ctx->pk_info->ctx_free_func( ctx->pk_ctx );

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_pk_context ) );
   ded18:	f7fc ba70 	b.w	db1fc <mbedtls_platform_zeroize>
   ded1c:	bd10      	pop	{r4, pc}
	...

000ded20 <mbedtls_pk_info_from_type>:

/*
 * Get pk_info structure from type
 */
const mbedtls_pk_info_t * mbedtls_pk_info_from_type( mbedtls_pk_type_t pk_type )
{
   ded20:	3801      	subs	r0, #1
   ded22:	b2c0      	uxtb	r0, r0
   ded24:	2803      	cmp	r0, #3
   ded26:	bf9a      	itte	ls
   ded28:	4b02      	ldrls	r3, [pc, #8]	; (ded34 <mbedtls_pk_info_from_type+0x14>)
   ded2a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   ded2e:	2000      	movhi	r0, #0
#endif
        /* MBEDTLS_PK_RSA_ALT omitted on purpose */
        default:
            return( NULL );
    }
}
   ded30:	4770      	bx	lr
   ded32:	bf00      	nop
   ded34:	000ee6cc 	.word	0x000ee6cc

000ded38 <mbedtls_pk_setup>:

/*
 * Initialise context
 */
int mbedtls_pk_setup( mbedtls_pk_context *ctx, const mbedtls_pk_info_t *info )
{
   ded38:	b570      	push	{r4, r5, r6, lr}
   ded3a:	4605      	mov	r5, r0
    PK_VALIDATE_RET( ctx != NULL );
    if( info == NULL || ctx->pk_info != NULL )
   ded3c:	460e      	mov	r6, r1
   ded3e:	b141      	cbz	r1, ded52 <mbedtls_pk_setup+0x1a>
   ded40:	6804      	ldr	r4, [r0, #0]
   ded42:	b934      	cbnz	r4, ded52 <mbedtls_pk_setup+0x1a>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ( ctx->pk_ctx = info->ctx_alloc_func() ) == NULL )
   ded44:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   ded46:	4798      	blx	r3
   ded48:	6068      	str	r0, [r5, #4]
   ded4a:	b120      	cbz	r0, ded56 <mbedtls_pk_setup+0x1e>
        return( MBEDTLS_ERR_PK_ALLOC_FAILED );

    ctx->pk_info = info;
   ded4c:	602e      	str	r6, [r5, #0]

    return( 0 );
   ded4e:	4620      	mov	r0, r4
   ded50:	bd70      	pop	{r4, r5, r6, pc}
 */
int mbedtls_pk_setup( mbedtls_pk_context *ctx, const mbedtls_pk_info_t *info )
{
    PK_VALIDATE_RET( ctx != NULL );
    if( info == NULL || ctx->pk_info != NULL )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
   ded52:	4802      	ldr	r0, [pc, #8]	; (ded5c <mbedtls_pk_setup+0x24>)
   ded54:	bd70      	pop	{r4, r5, r6, pc}

    if( ( ctx->pk_ctx = info->ctx_alloc_func() ) == NULL )
        return( MBEDTLS_ERR_PK_ALLOC_FAILED );
   ded56:	4802      	ldr	r0, [pc, #8]	; (ded60 <mbedtls_pk_setup+0x28>)

    ctx->pk_info = info;

    return( 0 );
}
   ded58:	bd70      	pop	{r4, r5, r6, pc}
   ded5a:	bf00      	nop
   ded5c:	ffffc180 	.word	0xffffc180
   ded60:	ffffc080 	.word	0xffffc080

000ded64 <mbedtls_pk_can_do>:
int mbedtls_pk_can_do( const mbedtls_pk_context *ctx, mbedtls_pk_type_t type )
{
    /* A context with null pk_info is not set up yet and can't do anything.
     * For backward compatibility, also accept NULL instead of a context
     * pointer. */
    if( ctx == NULL || ctx->pk_info == NULL )
   ded64:	b120      	cbz	r0, ded70 <mbedtls_pk_can_do+0xc>
   ded66:	6803      	ldr	r3, [r0, #0]
   ded68:	b113      	cbz	r3, ded70 <mbedtls_pk_can_do+0xc>
        return( 0 );

    return( ctx->pk_info->can_do( type ) );
   ded6a:	68db      	ldr	r3, [r3, #12]
   ded6c:	4608      	mov	r0, r1
   ded6e:	4718      	bx	r3
}
   ded70:	2000      	movs	r0, #0
   ded72:	4770      	bx	lr

000ded74 <mbedtls_pk_verify_restartable>:
int mbedtls_pk_verify_restartable( mbedtls_pk_context *ctx,
               mbedtls_md_type_t md_alg,
               const unsigned char *hash, size_t hash_len,
               const unsigned char *sig, size_t sig_len,
               mbedtls_pk_restart_ctx *rs_ctx )
{
   ded74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   ded78:	4617      	mov	r7, r2
    PK_VALIDATE_RET( ctx != NULL );
    PK_VALIDATE_RET( ( md_alg == MBEDTLS_MD_NONE && hash_len == 0 ) ||
                     hash != NULL );
    PK_VALIDATE_RET( sig != NULL );

    if( ctx->pk_info == NULL ||
   ded7a:	6802      	ldr	r2, [r0, #0]
int mbedtls_pk_verify_restartable( mbedtls_pk_context *ctx,
               mbedtls_md_type_t md_alg,
               const unsigned char *hash, size_t hash_len,
               const unsigned char *sig, size_t sig_len,
               mbedtls_pk_restart_ctx *rs_ctx )
{
   ded7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
   ded80:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   ded84:	4604      	mov	r4, r0
   ded86:	460e      	mov	r6, r1
    PK_VALIDATE_RET( ctx != NULL );
    PK_VALIDATE_RET( ( md_alg == MBEDTLS_MD_NONE && hash_len == 0 ) ||
                     hash != NULL );
    PK_VALIDATE_RET( sig != NULL );

    if( ctx->pk_info == NULL ||
   ded88:	b912      	cbnz	r2, ded90 <mbedtls_pk_verify_restartable+0x1c>
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
   ded8a:	480e      	ldr	r0, [pc, #56]	; (dedc4 <mbedtls_pk_verify_restartable+0x50>)
   ded8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 */
static inline int pk_hashlen_helper( mbedtls_md_type_t md_alg, size_t *hash_len )
{
    const mbedtls_md_info_t *md_info;

    if( *hash_len != 0 )
   ded90:	b93b      	cbnz	r3, deda2 <mbedtls_pk_verify_restartable+0x2e>
        return( 0 );

    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
   ded92:	4608      	mov	r0, r1
   ded94:	f7fe f8d6 	bl	dcf44 <mbedtls_md_info_from_type>
   ded98:	2800      	cmp	r0, #0
   ded9a:	d0f6      	beq.n	ded8a <mbedtls_pk_verify_restartable+0x16>
        return( -1 );

    *hash_len = mbedtls_md_get_size( md_info );
   ded9c:	f7fe fa0a 	bl	dd1b4 <mbedtls_md_get_size>
   deda0:	4603      	mov	r3, r0
    }
#else /* MBEDTLS_ECDSA_C && MBEDTLS_ECP_RESTARTABLE */
    (void) rs_ctx;
#endif /* MBEDTLS_ECDSA_C && MBEDTLS_ECP_RESTARTABLE */

    if( ctx->pk_info->verify_func == NULL )
   deda2:	6822      	ldr	r2, [r4, #0]
   deda4:	6915      	ldr	r5, [r2, #16]
   deda6:	b155      	cbz	r5, dedbe <mbedtls_pk_verify_restartable+0x4a>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->verify_func( ctx->pk_ctx, md_alg, hash, hash_len,
                                       sig, sig_len ) );
   deda8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   dedac:	f8cd 8020 	str.w	r8, [sp, #32]
   dedb0:	463a      	mov	r2, r7
   dedb2:	4631      	mov	r1, r6
   dedb4:	6860      	ldr	r0, [r4, #4]
   dedb6:	46ac      	mov	ip, r5
}
   dedb8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    if( ctx->pk_info->verify_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->verify_func( ctx->pk_ctx, md_alg, hash, hash_len,
                                       sig, sig_len ) );
   dedbc:	4760      	bx	ip
#else /* MBEDTLS_ECDSA_C && MBEDTLS_ECP_RESTARTABLE */
    (void) rs_ctx;
#endif /* MBEDTLS_ECDSA_C && MBEDTLS_ECP_RESTARTABLE */

    if( ctx->pk_info->verify_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
   dedbe:	4802      	ldr	r0, [pc, #8]	; (dedc8 <mbedtls_pk_verify_restartable+0x54>)
   dedc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dedc4:	ffffc180 	.word	0xffffc180
   dedc8:	ffffc100 	.word	0xffffc100

000dedcc <mbedtls_pk_verify>:
 * Verify a signature
 */
int mbedtls_pk_verify( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
               const unsigned char *hash, size_t hash_len,
               const unsigned char *sig, size_t sig_len )
{
   dedcc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return( mbedtls_pk_verify_restartable( ctx, md_alg, hash, hash_len,
                                           sig, sig_len, NULL ) );
   dedce:	2400      	movs	r4, #0
   dedd0:	9402      	str	r4, [sp, #8]
   dedd2:	9c07      	ldr	r4, [sp, #28]
   dedd4:	9401      	str	r4, [sp, #4]
   dedd6:	9c06      	ldr	r4, [sp, #24]
   dedd8:	9400      	str	r4, [sp, #0]
   dedda:	f7ff ffcb 	bl	ded74 <mbedtls_pk_verify_restartable>
}
   dedde:	b004      	add	sp, #16
   dede0:	bd10      	pop	{r4, pc}
	...

000dede4 <mbedtls_pk_sign_restartable>:
             mbedtls_md_type_t md_alg,
             const unsigned char *hash, size_t hash_len,
             unsigned char *sig, size_t *sig_len,
             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng,
             mbedtls_pk_restart_ctx *rs_ctx )
{
   dede4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dede8:	4616      	mov	r6, r2
    PK_VALIDATE_RET( ctx != NULL );
    PK_VALIDATE_RET( ( md_alg == MBEDTLS_MD_NONE && hash_len == 0 ) ||
                     hash != NULL );
    PK_VALIDATE_RET( sig != NULL );

    if( ctx->pk_info == NULL ||
   dedea:	6802      	ldr	r2, [r0, #0]
             mbedtls_md_type_t md_alg,
             const unsigned char *hash, size_t hash_len,
             unsigned char *sig, size_t *sig_len,
             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng,
             mbedtls_pk_restart_ctx *rs_ctx )
{
   dedec:	af08      	add	r7, sp, #32
   dedee:	4604      	mov	r4, r0
   dedf0:	460d      	mov	r5, r1
   dedf2:	e897 0780 	ldmia.w	r7, {r7, r8, r9, sl}
    PK_VALIDATE_RET( ctx != NULL );
    PK_VALIDATE_RET( ( md_alg == MBEDTLS_MD_NONE && hash_len == 0 ) ||
                     hash != NULL );
    PK_VALIDATE_RET( sig != NULL );

    if( ctx->pk_info == NULL ||
   dedf6:	b912      	cbnz	r2, dedfe <mbedtls_pk_sign_restartable+0x1a>
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
   dedf8:	4811      	ldr	r0, [pc, #68]	; (dee40 <mbedtls_pk_sign_restartable+0x5c>)
   dedfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 */
static inline int pk_hashlen_helper( mbedtls_md_type_t md_alg, size_t *hash_len )
{
    const mbedtls_md_info_t *md_info;

    if( *hash_len != 0 )
   dedfe:	b93b      	cbnz	r3, dee10 <mbedtls_pk_sign_restartable+0x2c>
        return( 0 );

    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
   dee00:	4608      	mov	r0, r1
   dee02:	f7fe f89f 	bl	dcf44 <mbedtls_md_info_from_type>
   dee06:	2800      	cmp	r0, #0
   dee08:	d0f6      	beq.n	dedf8 <mbedtls_pk_sign_restartable+0x14>
        return( -1 );

    *hash_len = mbedtls_md_get_size( md_info );
   dee0a:	f7fe f9d3 	bl	dd1b4 <mbedtls_md_get_size>
   dee0e:	4603      	mov	r3, r0
    }
#else /* MBEDTLS_ECDSA_C && MBEDTLS_ECP_RESTARTABLE */
    (void) rs_ctx;
#endif /* MBEDTLS_ECDSA_C && MBEDTLS_ECP_RESTARTABLE */

    if( ctx->pk_info->sign_func == NULL )
   dee10:	6822      	ldr	r2, [r4, #0]
   dee12:	f8d2 e014 	ldr.w	lr, [r2, #20]
   dee16:	f1be 0f00 	cmp.w	lr, #0
   dee1a:	d00d      	beq.n	dee38 <mbedtls_pk_sign_restartable+0x54>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->sign_func( ctx->pk_ctx, md_alg, hash, hash_len,
                                     sig, sig_len, f_rng, p_rng ) );
   dee1c:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
   dee20:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   dee24:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
   dee28:	9708      	str	r7, [sp, #32]
   dee2a:	4632      	mov	r2, r6
   dee2c:	4629      	mov	r1, r5
   dee2e:	6860      	ldr	r0, [r4, #4]
   dee30:	46f4      	mov	ip, lr
}
   dee32:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    if( ctx->pk_info->sign_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->sign_func( ctx->pk_ctx, md_alg, hash, hash_len,
                                     sig, sig_len, f_rng, p_rng ) );
   dee36:	4760      	bx	ip
#else /* MBEDTLS_ECDSA_C && MBEDTLS_ECP_RESTARTABLE */
    (void) rs_ctx;
#endif /* MBEDTLS_ECDSA_C && MBEDTLS_ECP_RESTARTABLE */

    if( ctx->pk_info->sign_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
   dee38:	4802      	ldr	r0, [pc, #8]	; (dee44 <mbedtls_pk_sign_restartable+0x60>)
   dee3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dee3e:	bf00      	nop
   dee40:	ffffc180 	.word	0xffffc180
   dee44:	ffffc100 	.word	0xffffc100

000dee48 <mbedtls_pk_encrypt>:
 */
int mbedtls_pk_encrypt( mbedtls_pk_context *ctx,
                const unsigned char *input, size_t ilen,
                unsigned char *output, size_t *olen, size_t osize,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
   dee48:	b5f0      	push	{r4, r5, r6, r7, lr}
    PK_VALIDATE_RET( ctx != NULL );
    PK_VALIDATE_RET( input != NULL || ilen == 0 );
    PK_VALIDATE_RET( output != NULL || osize == 0 );
    PK_VALIDATE_RET( olen != NULL );

    if( ctx->pk_info == NULL )
   dee4a:	6804      	ldr	r4, [r0, #0]
 */
int mbedtls_pk_encrypt( mbedtls_pk_context *ctx,
                const unsigned char *input, size_t ilen,
                unsigned char *output, size_t *olen, size_t osize,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
   dee4c:	ad05      	add	r5, sp, #20
   dee4e:	e895 40e0 	ldmia.w	r5, {r5, r6, r7, lr}
    PK_VALIDATE_RET( ctx != NULL );
    PK_VALIDATE_RET( input != NULL || ilen == 0 );
    PK_VALIDATE_RET( output != NULL || osize == 0 );
    PK_VALIDATE_RET( olen != NULL );

    if( ctx->pk_info == NULL )
   dee52:	b134      	cbz	r4, dee62 <mbedtls_pk_encrypt+0x1a>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ctx->pk_info->encrypt_func == NULL )
   dee54:	69e4      	ldr	r4, [r4, #28]
   dee56:	b134      	cbz	r4, dee66 <mbedtls_pk_encrypt+0x1e>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->encrypt_func( ctx->pk_ctx, input, ilen,
                output, olen, osize, f_rng, p_rng ) );
   dee58:	46a4      	mov	ip, r4
   dee5a:	6840      	ldr	r0, [r0, #4]
}
   dee5c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}

    if( ctx->pk_info->encrypt_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->encrypt_func( ctx->pk_ctx, input, ilen,
                output, olen, osize, f_rng, p_rng ) );
   dee60:	4760      	bx	ip
    PK_VALIDATE_RET( input != NULL || ilen == 0 );
    PK_VALIDATE_RET( output != NULL || osize == 0 );
    PK_VALIDATE_RET( olen != NULL );

    if( ctx->pk_info == NULL )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
   dee62:	4802      	ldr	r0, [pc, #8]	; (dee6c <mbedtls_pk_encrypt+0x24>)
   dee64:	bdf0      	pop	{r4, r5, r6, r7, pc}

    if( ctx->pk_info->encrypt_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
   dee66:	4802      	ldr	r0, [pc, #8]	; (dee70 <mbedtls_pk_encrypt+0x28>)

    return( ctx->pk_info->encrypt_func( ctx->pk_ctx, input, ilen,
                output, olen, osize, f_rng, p_rng ) );
}
   dee68:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dee6a:	bf00      	nop
   dee6c:	ffffc180 	.word	0xffffc180
   dee70:	ffffc100 	.word	0xffffc100

000dee74 <mbedtls_pk_get_bitlen>:
 */
size_t mbedtls_pk_get_bitlen( const mbedtls_pk_context *ctx )
{
    /* For backward compatibility, accept NULL or a context that
     * isn't set up yet, and return a fake value that should be safe. */
    if( ctx == NULL || ctx->pk_info == NULL )
   dee74:	b120      	cbz	r0, dee80 <mbedtls_pk_get_bitlen+0xc>
   dee76:	6803      	ldr	r3, [r0, #0]
   dee78:	b113      	cbz	r3, dee80 <mbedtls_pk_get_bitlen+0xc>
        return( 0 );

    return( ctx->pk_info->get_bitlen( ctx->pk_ctx ) );
   dee7a:	689b      	ldr	r3, [r3, #8]
   dee7c:	6840      	ldr	r0, [r0, #4]
   dee7e:	4718      	bx	r3
}
   dee80:	2000      	movs	r0, #0
   dee82:	4770      	bx	lr

000dee84 <mbedtls_pk_verify_ext>:
 */
int mbedtls_pk_verify_ext( mbedtls_pk_type_t type, const void *options,
                   mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   const unsigned char *sig, size_t sig_len )
{
   dee84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dee88:	461f      	mov	r7, r3
   dee8a:	b087      	sub	sp, #28
    PK_VALIDATE_RET( ctx != NULL );
    PK_VALIDATE_RET( ( md_alg == MBEDTLS_MD_NONE && hash_len == 0 ) ||
                     hash != NULL );
    PK_VALIDATE_RET( sig != NULL );

    if( ctx->pk_info == NULL )
   dee8c:	6813      	ldr	r3, [r2, #0]
 */
int mbedtls_pk_verify_ext( mbedtls_pk_type_t type, const void *options,
                   mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   const unsigned char *sig, size_t sig_len )
{
   dee8e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   dee90:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   dee94:	4683      	mov	fp, r0
   dee96:	460d      	mov	r5, r1
   dee98:	4614      	mov	r4, r2
   dee9a:	e898 0700 	ldmia.w	r8, {r8, r9, sl}
    PK_VALIDATE_RET( ctx != NULL );
    PK_VALIDATE_RET( ( md_alg == MBEDTLS_MD_NONE && hash_len == 0 ) ||
                     hash != NULL );
    PK_VALIDATE_RET( sig != NULL );

    if( ctx->pk_info == NULL )
   dee9e:	b90b      	cbnz	r3, deea4 <mbedtls_pk_verify_ext+0x20>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
   deea0:	4821      	ldr	r0, [pc, #132]	; (def28 <mbedtls_pk_verify_ext+0xa4>)
   deea2:	e03d      	b.n	def20 <mbedtls_pk_verify_ext+0x9c>

    if( ! mbedtls_pk_can_do( ctx, type ) )
   deea4:	4601      	mov	r1, r0
   deea6:	4610      	mov	r0, r2
   deea8:	f7ff ff5c 	bl	ded64 <mbedtls_pk_can_do>
   deeac:	2800      	cmp	r0, #0
   deeae:	d034      	beq.n	def1a <mbedtls_pk_verify_ext+0x96>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    if( type == MBEDTLS_PK_RSASSA_PSS )
   deeb0:	f1bb 0f06 	cmp.w	fp, #6
   deeb4:	d123      	bne.n	deefe <mbedtls_pk_verify_ext+0x7a>
#if SIZE_MAX > UINT_MAX
        if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
            return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

        if( options == NULL )
   deeb6:	2d00      	cmp	r5, #0
   deeb8:	d0f2      	beq.n	deea0 <mbedtls_pk_verify_ext+0x1c>
 *
 * \return          Key length in bytes, or 0 on error
 */
static inline size_t mbedtls_pk_get_len( const mbedtls_pk_context *ctx )
{
    return( ( mbedtls_pk_get_bitlen( ctx ) + 7 ) / 8 );
   deeba:	4620      	mov	r0, r4
   deebc:	f7ff ffda 	bl	dee74 <mbedtls_pk_get_bitlen>
            return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

        pss_opts = (const mbedtls_pk_rsassa_pss_options *) options;

        if( sig_len < mbedtls_pk_get_len( ctx ) )
   deec0:	3007      	adds	r0, #7
   deec2:	ebb6 0fd0 	cmp.w	r6, r0, lsr #3
   deec6:	d32a      	bcc.n	def1e <mbedtls_pk_verify_ext+0x9a>
            return( MBEDTLS_ERR_RSA_VERIFY_FAILED );

        ret = mbedtls_rsa_rsassa_pss_verify_ext( mbedtls_pk_rsa( *ctx ),
   deec8:	686b      	ldr	r3, [r5, #4]
   deeca:	9304      	str	r3, [sp, #16]
   deecc:	782b      	ldrb	r3, [r5, #0]
   deece:	9303      	str	r3, [sp, #12]
   deed0:	2300      	movs	r3, #0
   deed2:	f8cd a014 	str.w	sl, [sp, #20]
   deed6:	f8cd 8008 	str.w	r8, [sp, #8]
   deeda:	e88d 0280 	stmia.w	sp, {r7, r9}
   deede:	461a      	mov	r2, r3
   deee0:	4619      	mov	r1, r3
   deee2:	6860      	ldr	r0, [r4, #4]
   deee4:	f7f9 f986 	bl	d81f4 <mbedtls_rsa_rsassa_pss_verify_ext>
                NULL, NULL, MBEDTLS_RSA_PUBLIC,
                md_alg, (unsigned int) hash_len, hash,
                pss_opts->mgf1_hash_id,
                pss_opts->expected_salt_len,
                sig );
        if( ret != 0 )
   deee8:	b9d0      	cbnz	r0, def20 <mbedtls_pk_verify_ext+0x9c>
   deeea:	4620      	mov	r0, r4
   deeec:	f7ff ffc2 	bl	dee74 <mbedtls_pk_get_bitlen>
            return( ret );

        if( sig_len > mbedtls_pk_get_len( ctx ) )
   deef0:	3007      	adds	r0, #7
            return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );

        return( 0 );
   deef2:	ebb6 0fd0 	cmp.w	r6, r0, lsr #3
   deef6:	480d      	ldr	r0, [pc, #52]	; (def2c <mbedtls_pk_verify_ext+0xa8>)
   deef8:	bf98      	it	ls
   deefa:	2000      	movls	r0, #0
   deefc:	e010      	b.n	def20 <mbedtls_pk_verify_ext+0x9c>
        return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );
#endif /* MBEDTLS_RSA_C && MBEDTLS_PKCS1_V21 */
    }

    /* General case: no options */
    if( options != NULL )
   deefe:	2d00      	cmp	r5, #0
   def00:	d1ce      	bne.n	deea0 <mbedtls_pk_verify_ext+0x1c>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    return( mbedtls_pk_verify( ctx, md_alg, hash, hash_len, sig, sig_len ) );
   def02:	464b      	mov	r3, r9
   def04:	4642      	mov	r2, r8
   def06:	4639      	mov	r1, r7
   def08:	4620      	mov	r0, r4
   def0a:	9611      	str	r6, [sp, #68]	; 0x44
   def0c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
}
   def10:	b007      	add	sp, #28
   def12:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    /* General case: no options */
    if( options != NULL )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    return( mbedtls_pk_verify( ctx, md_alg, hash, hash_len, sig, sig_len ) );
   def16:	f7ff bf59 	b.w	dedcc <mbedtls_pk_verify>

    if( ctx->pk_info == NULL )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ! mbedtls_pk_can_do( ctx, type ) )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
   def1a:	4805      	ldr	r0, [pc, #20]	; (def30 <mbedtls_pk_verify_ext+0xac>)
   def1c:	e000      	b.n	def20 <mbedtls_pk_verify_ext+0x9c>
            return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

        pss_opts = (const mbedtls_pk_rsassa_pss_options *) options;

        if( sig_len < mbedtls_pk_get_len( ctx ) )
            return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
   def1e:	4805      	ldr	r0, [pc, #20]	; (def34 <mbedtls_pk_verify_ext+0xb0>)
    /* General case: no options */
    if( options != NULL )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    return( mbedtls_pk_verify( ctx, md_alg, hash, hash_len, sig, sig_len ) );
}
   def20:	b007      	add	sp, #28
   def22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   def26:	bf00      	nop
   def28:	ffffc180 	.word	0xffffc180
   def2c:	ffffc700 	.word	0xffffc700
   def30:	ffffc100 	.word	0xffffc100
   def34:	ffffbc80 	.word	0xffffbc80

000def38 <mbedtls_pk_get_name>:
/*
 * Access the PK type name
 */
const char *mbedtls_pk_get_name( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
   def38:	b118      	cbz	r0, def42 <mbedtls_pk_get_name+0xa>
   def3a:	6803      	ldr	r3, [r0, #0]
   def3c:	b10b      	cbz	r3, def42 <mbedtls_pk_get_name+0xa>
        return( "invalid PK" );

    return( ctx->pk_info->name );
   def3e:	6858      	ldr	r0, [r3, #4]
   def40:	4770      	bx	lr
 * Access the PK type name
 */
const char *mbedtls_pk_get_name( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
        return( "invalid PK" );
   def42:	4801      	ldr	r0, [pc, #4]	; (def48 <mbedtls_pk_get_name+0x10>)

    return( ctx->pk_info->name );
}
   def44:	4770      	bx	lr
   def46:	bf00      	nop
   def48:	000ee6c0 	.word	0x000ee6c0

000def4c <mbedtls_pk_get_type>:
/*
 * Access the PK type
 */
mbedtls_pk_type_t mbedtls_pk_get_type( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
   def4c:	b110      	cbz	r0, def54 <mbedtls_pk_get_type+0x8>
   def4e:	6800      	ldr	r0, [r0, #0]
   def50:	b100      	cbz	r0, def54 <mbedtls_pk_get_type+0x8>
        return( MBEDTLS_PK_NONE );

    return( ctx->pk_info->type );
   def52:	7800      	ldrb	r0, [r0, #0]
}
   def54:	4770      	bx	lr

000def56 <_ZL13ssl_set_timerP19mbedtls_ssl_contextm>:
 * Start a timer.
 * Passing millisecs = 0 cancels a running timer.
 */
static void ssl_set_timer( mbedtls_ssl_context *ssl, uint32_t millisecs )
{
    if( ssl->f_set_timer == NULL )
   def56:	6c83      	ldr	r3, [r0, #72]	; 0x48
/*
 * Start a timer.
 * Passing millisecs = 0 cancels a running timer.
 */
static void ssl_set_timer( mbedtls_ssl_context *ssl, uint32_t millisecs )
{
   def58:	460a      	mov	r2, r1
    if( ssl->f_set_timer == NULL )
   def5a:	b113      	cbz	r3, def62 <_ZL13ssl_set_timerP19mbedtls_ssl_contextm+0xc>
        return;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "set_timer to %d ms", (int) millisecs ) );
    ssl->f_set_timer( ssl->p_timer, millisecs / 4, millisecs );
   def5c:	0889      	lsrs	r1, r1, #2
   def5e:	6c40      	ldr	r0, [r0, #68]	; 0x44
   def60:	4718      	bx	r3
   def62:	4770      	bx	lr

000def64 <_ZL23ssl_update_out_pointersP19mbedtls_ssl_contextP21mbedtls_ssl_transform>:
        ssl->out_iv  = ssl->out_hdr + 13;
    }
    else
#endif
    {
        ssl->out_ctr = ssl->out_hdr - 8;
   def64:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
   def68:	f1a3 0208 	sub.w	r2, r3, #8
   def6c:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
        ssl->out_len = ssl->out_hdr + 3;
   def70:	1cda      	adds	r2, r3, #3
        ssl->out_iv  = ssl->out_hdr + 5;
   def72:	3305      	adds	r3, #5
    }
    else
#endif
    {
        ssl->out_ctr = ssl->out_hdr - 8;
        ssl->out_len = ssl->out_hdr + 3;
   def74:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
        ssl->out_iv  = ssl->out_hdr + 5;
   def78:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
    }

    /* Adjust out_msg to make space for explicit IV, if used. */
    if( transform != NULL &&
   def7c:	b131      	cbz	r1, def8c <_ZL23ssl_update_out_pointersP19mbedtls_ssl_contextP21mbedtls_ssl_transform+0x28>
   def7e:	68c2      	ldr	r2, [r0, #12]
   def80:	2a01      	cmp	r2, #1
        ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
    {
        ssl->out_msg = ssl->out_iv + transform->ivlen - transform->fixed_ivlen;
   def82:	bfc1      	itttt	gt
   def84:	68ca      	ldrgt	r2, [r1, #12]
   def86:	6909      	ldrgt	r1, [r1, #16]
   def88:	1a52      	subgt	r2, r2, r1
   def8a:	189b      	addgt	r3, r3, r2
    }
    else
        ssl->out_msg = ssl->out_iv;
   def8c:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
   def90:	4770      	bx	lr
	...

000def94 <_ZL28ssl_calc_finished_tls_sha256P19mbedtls_ssl_contextPhi>:

#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
static void ssl_calc_finished_tls_sha256(
                mbedtls_ssl_context *ssl, unsigned char *buf, int from )
{
   def94:	b5f0      	push	{r4, r5, r6, r7, lr}
    int len = 12;
    const char *sender;
    mbedtls_sha256_context sha256;
    unsigned char padbuf[32];

    mbedtls_ssl_session *session = ssl->session_negotiate;
   def96:	6ac5      	ldr	r5, [r0, #44]	; 0x2c

#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
static void ssl_calc_finished_tls_sha256(
                mbedtls_ssl_context *ssl, unsigned char *buf, int from )
{
   def98:	b0a9      	sub	sp, #164	; 0xa4
   def9a:	4604      	mov	r4, r0
   def9c:	460f      	mov	r7, r1
   def9e:	4616      	mov	r6, r2
    const char *sender;
    mbedtls_sha256_context sha256;
    unsigned char padbuf[32];

    mbedtls_ssl_session *session = ssl->session_negotiate;
    if( !session )
   defa0:	b905      	cbnz	r5, defa4 <_ZL28ssl_calc_finished_tls_sha256P19mbedtls_ssl_contextPhi+0x10>
        session = ssl->session;
   defa2:	6a85      	ldr	r5, [r0, #40]	; 0x28

    mbedtls_sha256_init( &sha256 );
   defa4:	a80d      	add	r0, sp, #52	; 0x34
   defa6:	f7f6 fa13 	bl	d53d0 <mbedtls_sha256_init>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc  finished tls sha256" ) );

    mbedtls_sha256_clone( &sha256, &ssl->handshake->fin_sha256 );
   defaa:	6b21      	ldr	r1, [r4, #48]	; 0x30
   defac:	a80d      	add	r0, sp, #52	; 0x34
   defae:	f501 71ac 	add.w	r1, r1, #344	; 0x158
   defb2:	f7f6 fa16 	bl	d53e2 <mbedtls_sha256_clone>
                   sha256.state, sizeof( sha256.state ) );
#endif

    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
             ? "client finished"
             : "server finished";
   defb6:	4b10      	ldr	r3, [pc, #64]	; (deff8 <_ZL28ssl_calc_finished_tls_sha256P19mbedtls_ssl_contextPhi+0x64>)
   defb8:	4910      	ldr	r1, [pc, #64]	; (deffc <_ZL28ssl_calc_finished_tls_sha256P19mbedtls_ssl_contextPhi+0x68>)

    mbedtls_sha256_finish_ret( &sha256, padbuf );
   defba:	a80d      	add	r0, sp, #52	; 0x34
                   sha256.state, sizeof( sha256.state ) );
#endif

    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
             ? "client finished"
             : "server finished";
   defbc:	2e00      	cmp	r6, #0
   defbe:	bf0c      	ite	eq
   defc0:	461e      	moveq	r6, r3
   defc2:	460e      	movne	r6, r1

    mbedtls_sha256_finish_ret( &sha256, padbuf );
   defc4:	a905      	add	r1, sp, #20
   defc6:	f7f6 fe01 	bl	d5bcc <mbedtls_sha256_finish_ret>

    ssl->handshake->tls_prf( session->master, 48, sender,
   defca:	6b23      	ldr	r3, [r4, #48]	; 0x30
                             padbuf, 32, buf, len );
   defcc:	9701      	str	r7, [sp, #4]
   defce:	2420      	movs	r4, #32
   defd0:	220c      	movs	r2, #12
   defd2:	9202      	str	r2, [sp, #8]
   defd4:	9400      	str	r4, [sp, #0]
   defd6:	4632      	mov	r2, r6
   defd8:	f8d3 72ac 	ldr.w	r7, [r3, #684]	; 0x2ac
   defdc:	2130      	movs	r1, #48	; 0x30
   defde:	ab05      	add	r3, sp, #20
   defe0:	f105 002c 	add.w	r0, r5, #44	; 0x2c
   defe4:	47b8      	blx	r7

    MBEDTLS_SSL_DEBUG_BUF( 3, "calc finished result", buf, len );

    mbedtls_sha256_free( &sha256 );
   defe6:	a80d      	add	r0, sp, #52	; 0x34
   defe8:	f7f6 f9f6 	bl	d53d8 <mbedtls_sha256_free>

    mbedtls_platform_zeroize(  padbuf, sizeof(  padbuf ) );
   defec:	4621      	mov	r1, r4
   defee:	a805      	add	r0, sp, #20
   deff0:	f7fc f904 	bl	db1fc <mbedtls_platform_zeroize>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc  finished" ) );
}
   deff4:	b029      	add	sp, #164	; 0xa4
   deff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   deff8:	000ee6e1 	.word	0x000ee6e1
   deffc:	000ee6f1 	.word	0x000ee6f1

000df000 <_ZL26ssl_calc_verify_tls_sha256P19mbedtls_ssl_contextPh>:
#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 */

#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
void ssl_calc_verify_tls_sha256( mbedtls_ssl_context *ssl, unsigned char hash[32] )
{
   df000:	b530      	push	{r4, r5, lr}
   df002:	4605      	mov	r5, r0
   df004:	b09d      	sub	sp, #116	; 0x74
    mbedtls_sha256_context sha256;

    mbedtls_sha256_init( &sha256 );
   df006:	a801      	add	r0, sp, #4
#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 */

#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
void ssl_calc_verify_tls_sha256( mbedtls_ssl_context *ssl, unsigned char hash[32] )
{
   df008:	460c      	mov	r4, r1
    mbedtls_sha256_context sha256;

    mbedtls_sha256_init( &sha256 );
   df00a:	f7f6 f9e1 	bl	d53d0 <mbedtls_sha256_init>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc verify sha256" ) );

    mbedtls_sha256_clone( &sha256, &ssl->handshake->fin_sha256 );
   df00e:	6b29      	ldr	r1, [r5, #48]	; 0x30
   df010:	a801      	add	r0, sp, #4
   df012:	f501 71ac 	add.w	r1, r1, #344	; 0x158
   df016:	f7f6 f9e4 	bl	d53e2 <mbedtls_sha256_clone>
    mbedtls_sha256_finish_ret( &sha256, hash );
   df01a:	4621      	mov	r1, r4
   df01c:	a801      	add	r0, sp, #4
   df01e:	f7f6 fdd5 	bl	d5bcc <mbedtls_sha256_finish_ret>

    MBEDTLS_SSL_DEBUG_BUF( 3, "calculated verify result", hash, 32 );
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc verify" ) );

    mbedtls_sha256_free( &sha256 );
   df022:	a801      	add	r0, sp, #4
   df024:	f7f6 f9d8 	bl	d53d8 <mbedtls_sha256_free>

    return;
}
   df028:	b01d      	add	sp, #116	; 0x74
   df02a:	bd30      	pop	{r4, r5, pc}

000df02c <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj>:
static int tls_prf_generic( mbedtls_md_type_t md_type,
                            const unsigned char *secret, size_t slen,
                            const char *label,
                            const unsigned char *random, size_t rlen,
                            unsigned char *dstbuf, size_t dlen )
{
   df02c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   df030:	b0b7      	sub	sp, #220	; 0xdc
   df032:	4604      	mov	r4, r0
    unsigned char h_i[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;
    int ret;

    mbedtls_md_init( &md_ctx );
   df034:	a803      	add	r0, sp, #12
static int tls_prf_generic( mbedtls_md_type_t md_type,
                            const unsigned char *secret, size_t slen,
                            const char *label,
                            const unsigned char *random, size_t rlen,
                            unsigned char *dstbuf, size_t dlen )
{
   df036:	468a      	mov	sl, r1
   df038:	4693      	mov	fp, r2
   df03a:	4699      	mov	r9, r3
   df03c:	9e43      	ldr	r6, [sp, #268]	; 0x10c
    unsigned char h_i[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;
    int ret;

    mbedtls_md_init( &md_ctx );
   df03e:	f7fd ff8d 	bl	dcf5c <mbedtls_md_init>

    if( ( md_info = mbedtls_md_info_from_type( md_type ) ) == NULL )
   df042:	4620      	mov	r0, r4
   df044:	f7fd ff7e 	bl	dcf44 <mbedtls_md_info_from_type>
   df048:	4607      	mov	r7, r0
   df04a:	2800      	cmp	r0, #0
   df04c:	d074      	beq.n	df138 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x10c>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );

    md_len = mbedtls_md_get_size( md_info );
   df04e:	f7fe f8b1 	bl	dd1b4 <mbedtls_md_get_size>
   df052:	4604      	mov	r4, r0

    if( sizeof( tmp ) < md_len + strlen( label ) + rlen )
   df054:	4648      	mov	r0, r9
   df056:	f00a fda5 	bl	e9ba4 <strlen>
   df05a:	9a41      	ldr	r2, [sp, #260]	; 0x104
   df05c:	1823      	adds	r3, r4, r0
   df05e:	189a      	adds	r2, r3, r2
   df060:	2a80      	cmp	r2, #128	; 0x80
   df062:	4605      	mov	r5, r0
   df064:	9301      	str	r3, [sp, #4]
   df066:	d869      	bhi.n	df13c <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x110>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    nb = strlen( label );
    memcpy( tmp + md_len, label, nb );
   df068:	ab16      	add	r3, sp, #88	; 0x58
   df06a:	eb03 0804 	add.w	r8, r3, r4
   df06e:	4602      	mov	r2, r0
   df070:	4649      	mov	r1, r9
   df072:	4640      	mov	r0, r8
   df074:	f00a fd1f 	bl	e9ab6 <memcpy>
    memcpy( tmp + md_len + nb, random, rlen );
   df078:	9b01      	ldr	r3, [sp, #4]
   df07a:	9a41      	ldr	r2, [sp, #260]	; 0x104
   df07c:	9940      	ldr	r1, [sp, #256]	; 0x100
   df07e:	a816      	add	r0, sp, #88	; 0x58
   df080:	4418      	add	r0, r3
   df082:	f00a fd18 	bl	e9ab6 <memcpy>
    nb += rlen;

    /*
     * Compute P_<hash>(secret, label + random)[0..dlen]
     */
    if ( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
   df086:	4639      	mov	r1, r7
   df088:	2201      	movs	r2, #1
   df08a:	a803      	add	r0, sp, #12
   df08c:	f7fd ff86 	bl	dcf9c <mbedtls_md_setup>
   df090:	4607      	mov	r7, r0
   df092:	2800      	cmp	r0, #0
   df094:	d153      	bne.n	df13e <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x112>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    nb = strlen( label );
    memcpy( tmp + md_len, label, nb );
    memcpy( tmp + md_len + nb, random, rlen );
    nb += rlen;
   df096:	9b41      	ldr	r3, [sp, #260]	; 0x104
     * Compute P_<hash>(secret, label + random)[0..dlen]
     */
    if ( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
        return( ret );

    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
   df098:	4651      	mov	r1, sl
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    nb = strlen( label );
    memcpy( tmp + md_len, label, nb );
    memcpy( tmp + md_len + nb, random, rlen );
    nb += rlen;
   df09a:	441d      	add	r5, r3
     * Compute P_<hash>(secret, label + random)[0..dlen]
     */
    if ( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
        return( ret );

    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
   df09c:	465a      	mov	r2, fp
   df09e:	a803      	add	r0, sp, #12
   df0a0:	f7fd ffcc 	bl	dd03c <mbedtls_md_hmac_starts>
    mbedtls_md_hmac_update( &md_ctx, tmp + md_len, nb );
   df0a4:	462a      	mov	r2, r5
   df0a6:	4641      	mov	r1, r8
   df0a8:	a803      	add	r0, sp, #12
   df0aa:	f7fe f827 	bl	dd0fc <mbedtls_md_hmac_update>
    mbedtls_md_hmac_finish( &md_ctx, tmp );
   df0ae:	a916      	add	r1, sp, #88	; 0x58
   df0b0:	a803      	add	r0, sp, #12
   df0b2:	f7fe f835 	bl	dd120 <mbedtls_md_hmac_finish>

    for( i = 0; i < dlen; i += md_len )
   df0b6:	46b8      	mov	r8, r7
   df0b8:	f10d 0a18 	add.w	sl, sp, #24
    {
        mbedtls_md_hmac_reset ( &md_ctx );
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len + nb );
   df0bc:	4425      	add	r5, r4

    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
    mbedtls_md_hmac_update( &md_ctx, tmp + md_len, nb );
    mbedtls_md_hmac_finish( &md_ctx, tmp );

    for( i = 0; i < dlen; i += md_len )
   df0be:	45b0      	cmp	r8, r6

        for( j = 0; j < k; j++ )
            dstbuf[i + j]  = h_i[j];
    }

    mbedtls_md_free( &md_ctx );
   df0c0:	a803      	add	r0, sp, #12

    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
    mbedtls_md_hmac_update( &md_ctx, tmp + md_len, nb );
    mbedtls_md_hmac_finish( &md_ctx, tmp );

    for( i = 0; i < dlen; i += md_len )
   df0c2:	d22e      	bcs.n	df122 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0xf6>
    {
        mbedtls_md_hmac_reset ( &md_ctx );
   df0c4:	f7fe f85e 	bl	dd184 <mbedtls_md_hmac_reset>
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len + nb );
   df0c8:	462a      	mov	r2, r5
   df0ca:	a916      	add	r1, sp, #88	; 0x58
   df0cc:	a803      	add	r0, sp, #12
   df0ce:	f7fe f815 	bl	dd0fc <mbedtls_md_hmac_update>
        mbedtls_md_hmac_finish( &md_ctx, h_i );
   df0d2:	4651      	mov	r1, sl
   df0d4:	a803      	add	r0, sp, #12
   df0d6:	f7fe f823 	bl	dd120 <mbedtls_md_hmac_finish>

        mbedtls_md_hmac_reset ( &md_ctx );
   df0da:	a803      	add	r0, sp, #12
   df0dc:	f7fe f852 	bl	dd184 <mbedtls_md_hmac_reset>
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
   df0e0:	4622      	mov	r2, r4
   df0e2:	a916      	add	r1, sp, #88	; 0x58
   df0e4:	a803      	add	r0, sp, #12
   df0e6:	f7fe f809 	bl	dd0fc <mbedtls_md_hmac_update>
        mbedtls_md_hmac_finish( &md_ctx, tmp );
   df0ea:	a916      	add	r1, sp, #88	; 0x58
   df0ec:	a803      	add	r0, sp, #12
   df0ee:	f7fe f817 	bl	dd120 <mbedtls_md_hmac_finish>

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;
   df0f2:	eb08 0104 	add.w	r1, r8, r4

        for( j = 0; j < k; j++ )
            dstbuf[i + j]  = h_i[j];
   df0f6:	9842      	ldr	r0, [sp, #264]	; 0x108

        mbedtls_md_hmac_reset ( &md_ctx );
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
        mbedtls_md_hmac_finish( &md_ctx, tmp );

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;
   df0f8:	428e      	cmp	r6, r1
   df0fa:	bf2c      	ite	cs
   df0fc:	4622      	movcs	r2, r4
   df0fe:	fbb6 f2f4 	udivcc	r2, r6, r4

        for( j = 0; j < k; j++ )
   df102:	f04f 0300 	mov.w	r3, #0

        mbedtls_md_hmac_reset ( &md_ctx );
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
        mbedtls_md_hmac_finish( &md_ctx, tmp );

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;
   df106:	bf38      	it	cc
   df108:	fb04 6212 	mlscc	r2, r4, r2, r6

        for( j = 0; j < k; j++ )
            dstbuf[i + j]  = h_i[j];
   df10c:	4480      	add	r8, r0
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
        mbedtls_md_hmac_finish( &md_ctx, tmp );

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;

        for( j = 0; j < k; j++ )
   df10e:	4293      	cmp	r3, r2
   df110:	d101      	bne.n	df116 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0xea>

        mbedtls_md_hmac_reset ( &md_ctx );
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
        mbedtls_md_hmac_finish( &md_ctx, tmp );

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;
   df112:	4688      	mov	r8, r1
   df114:	e7d3      	b.n	df0be <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x92>

        for( j = 0; j < k; j++ )
            dstbuf[i + j]  = h_i[j];
   df116:	f81a 0003 	ldrb.w	r0, [sl, r3]
   df11a:	f808 0003 	strb.w	r0, [r8, r3]
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
        mbedtls_md_hmac_finish( &md_ctx, tmp );

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;

        for( j = 0; j < k; j++ )
   df11e:	3301      	adds	r3, #1
   df120:	e7f5      	b.n	df10e <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0xe2>
            dstbuf[i + j]  = h_i[j];
    }

    mbedtls_md_free( &md_ctx );
   df122:	f7fd ff20 	bl	dcf66 <mbedtls_md_free>

    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
   df126:	a816      	add	r0, sp, #88	; 0x58
   df128:	2180      	movs	r1, #128	; 0x80
   df12a:	f7fc f867 	bl	db1fc <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( h_i, sizeof( h_i ) );
   df12e:	2140      	movs	r1, #64	; 0x40
   df130:	4650      	mov	r0, sl
   df132:	f7fc f863 	bl	db1fc <mbedtls_platform_zeroize>

    return( 0 );
   df136:	e002      	b.n	df13e <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x112>
    int ret;

    mbedtls_md_init( &md_ctx );

    if( ( md_info = mbedtls_md_info_from_type( md_type ) ) == NULL )
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   df138:	4f03      	ldr	r7, [pc, #12]	; (df148 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x11c>)
   df13a:	e000      	b.n	df13e <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x112>

    md_len = mbedtls_md_get_size( md_info );

    if( sizeof( tmp ) < md_len + strlen( label ) + rlen )
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   df13c:	4f03      	ldr	r7, [pc, #12]	; (df14c <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x120>)

    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
    mbedtls_platform_zeroize( h_i, sizeof( h_i ) );

    return( 0 );
}
   df13e:	4638      	mov	r0, r7
   df140:	b037      	add	sp, #220	; 0xdc
   df142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   df146:	bf00      	nop
   df148:	ffff9400 	.word	0xffff9400
   df14c:	ffff8f00 	.word	0xffff8f00

000df150 <_ZL14tls_prf_sha256PKhjPKcS0_jPhj>:
#if defined(MBEDTLS_SHA256_C)
static int tls_prf_sha256( const unsigned char *secret, size_t slen,
                           const char *label,
                           const unsigned char *random, size_t rlen,
                           unsigned char *dstbuf, size_t dlen )
{
   df150:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return( tls_prf_generic( MBEDTLS_MD_SHA256, secret, slen,
                             label, random, rlen, dstbuf, dlen ) );
   df152:	9c08      	ldr	r4, [sp, #32]
   df154:	9403      	str	r4, [sp, #12]
   df156:	9c07      	ldr	r4, [sp, #28]
   df158:	9402      	str	r4, [sp, #8]
   df15a:	9c06      	ldr	r4, [sp, #24]
   df15c:	e88d 0018 	stmia.w	sp, {r3, r4}
   df160:	4613      	mov	r3, r2
   df162:	460a      	mov	r2, r1
   df164:	4601      	mov	r1, r0
   df166:	2006      	movs	r0, #6
   df168:	f7ff ff60 	bl	df02c <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj>
}
   df16c:	b004      	add	sp, #16
   df16e:	bd10      	pop	{r4, pc}

000df170 <_ZL14tls_prf_sha384PKhjPKcS0_jPhj>:
#if defined(MBEDTLS_SHA512_C)
static int tls_prf_sha384( const unsigned char *secret, size_t slen,
                           const char *label,
                           const unsigned char *random, size_t rlen,
                           unsigned char *dstbuf, size_t dlen )
{
   df170:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return( tls_prf_generic( MBEDTLS_MD_SHA384, secret, slen,
                             label, random, rlen, dstbuf, dlen ) );
   df172:	9c08      	ldr	r4, [sp, #32]
   df174:	9403      	str	r4, [sp, #12]
   df176:	9c07      	ldr	r4, [sp, #28]
   df178:	9402      	str	r4, [sp, #8]
   df17a:	9c06      	ldr	r4, [sp, #24]
   df17c:	e88d 0018 	stmia.w	sp, {r3, r4}
   df180:	4613      	mov	r3, r2
   df182:	460a      	mov	r2, r1
   df184:	4601      	mov	r1, r0
   df186:	2007      	movs	r0, #7
   df188:	f7ff ff50 	bl	df02c <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj>
}
   df18c:	b004      	add	sp, #16
   df18e:	bd10      	pop	{r4, pc}

000df190 <_ZL28ssl_calc_finished_tls_sha384P19mbedtls_ssl_contextPhi>:
#endif /* MBEDTLS_SHA256_C */

#if defined(MBEDTLS_SHA512_C)
static void ssl_calc_finished_tls_sha384(
                mbedtls_ssl_context *ssl, unsigned char *buf, int from )
{
   df190:	b5f0      	push	{r4, r5, r6, r7, lr}
    int len = 12;
    const char *sender;
    mbedtls_sha512_context sha512;
    unsigned char padbuf[48];

    mbedtls_ssl_session *session = ssl->session_negotiate;
   df192:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
#endif /* MBEDTLS_SHA256_C */

#if defined(MBEDTLS_SHA512_C)
static void ssl_calc_finished_tls_sha384(
                mbedtls_ssl_context *ssl, unsigned char *buf, int from )
{
   df194:	b0c7      	sub	sp, #284	; 0x11c
   df196:	4604      	mov	r4, r0
   df198:	460f      	mov	r7, r1
   df19a:	4616      	mov	r6, r2
    const char *sender;
    mbedtls_sha512_context sha512;
    unsigned char padbuf[48];

    mbedtls_ssl_session *session = ssl->session_negotiate;
    if( !session )
   df19c:	b905      	cbnz	r5, df1a0 <_ZL28ssl_calc_finished_tls_sha384P19mbedtls_ssl_contextPhi+0x10>
        session = ssl->session;
   df19e:	6a85      	ldr	r5, [r0, #40]	; 0x28

    mbedtls_sha512_init( &sha512 );
   df1a0:	a810      	add	r0, sp, #64	; 0x40
   df1a2:	f004 f879 	bl	e3298 <mbedtls_sha512_init>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc  finished tls sha384" ) );

    mbedtls_sha512_clone( &sha512, &ssl->handshake->fin_sha512 );
   df1a6:	6b21      	ldr	r1, [r4, #48]	; 0x30
   df1a8:	a810      	add	r0, sp, #64	; 0x40
   df1aa:	f501 71e4 	add.w	r1, r1, #456	; 0x1c8
   df1ae:	f004 f87c 	bl	e32aa <mbedtls_sha512_clone>
                   sha512.state, sizeof( sha512.state ) );
#endif

    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
             ? "client finished"
             : "server finished";
   df1b2:	4b10      	ldr	r3, [pc, #64]	; (df1f4 <_ZL28ssl_calc_finished_tls_sha384P19mbedtls_ssl_contextPhi+0x64>)
   df1b4:	4910      	ldr	r1, [pc, #64]	; (df1f8 <_ZL28ssl_calc_finished_tls_sha384P19mbedtls_ssl_contextPhi+0x68>)

    mbedtls_sha512_finish_ret( &sha512, padbuf );
   df1b6:	a810      	add	r0, sp, #64	; 0x40
                   sha512.state, sizeof( sha512.state ) );
#endif

    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
             ? "client finished"
             : "server finished";
   df1b8:	2e00      	cmp	r6, #0
   df1ba:	bf0c      	ite	eq
   df1bc:	461e      	moveq	r6, r3
   df1be:	460e      	movne	r6, r1

    mbedtls_sha512_finish_ret( &sha512, padbuf );
   df1c0:	a904      	add	r1, sp, #16
   df1c2:	f004 ffb7 	bl	e4134 <mbedtls_sha512_finish_ret>

    ssl->handshake->tls_prf( session->master, 48, sender,
   df1c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
                             padbuf, 48, buf, len );
   df1c8:	9701      	str	r7, [sp, #4]
   df1ca:	2430      	movs	r4, #48	; 0x30
   df1cc:	220c      	movs	r2, #12
   df1ce:	9202      	str	r2, [sp, #8]
   df1d0:	9400      	str	r4, [sp, #0]
   df1d2:	4632      	mov	r2, r6
   df1d4:	4621      	mov	r1, r4
   df1d6:	f8d3 72ac 	ldr.w	r7, [r3, #684]	; 0x2ac
   df1da:	f105 002c 	add.w	r0, r5, #44	; 0x2c
   df1de:	ab04      	add	r3, sp, #16
   df1e0:	47b8      	blx	r7

    MBEDTLS_SSL_DEBUG_BUF( 3, "calc finished result", buf, len );

    mbedtls_sha512_free( &sha512 );
   df1e2:	a810      	add	r0, sp, #64	; 0x40
   df1e4:	f004 f85c 	bl	e32a0 <mbedtls_sha512_free>

    mbedtls_platform_zeroize(  padbuf, sizeof( padbuf ) );
   df1e8:	4621      	mov	r1, r4
   df1ea:	a804      	add	r0, sp, #16
   df1ec:	f7fc f806 	bl	db1fc <mbedtls_platform_zeroize>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc  finished" ) );
}
   df1f0:	b047      	add	sp, #284	; 0x11c
   df1f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   df1f4:	000ee6e1 	.word	0x000ee6e1
   df1f8:	000ee6f1 	.word	0x000ee6f1

000df1fc <_ZL26ssl_calc_verify_tls_sha384P19mbedtls_ssl_contextPh>:
}
#endif /* MBEDTLS_SHA256_C */

#if defined(MBEDTLS_SHA512_C)
void ssl_calc_verify_tls_sha384( mbedtls_ssl_context *ssl, unsigned char hash[48] )
{
   df1fc:	b530      	push	{r4, r5, lr}
   df1fe:	4605      	mov	r5, r0
   df200:	b0b7      	sub	sp, #220	; 0xdc
    mbedtls_sha512_context sha512;

    mbedtls_sha512_init( &sha512 );
   df202:	4668      	mov	r0, sp
}
#endif /* MBEDTLS_SHA256_C */

#if defined(MBEDTLS_SHA512_C)
void ssl_calc_verify_tls_sha384( mbedtls_ssl_context *ssl, unsigned char hash[48] )
{
   df204:	460c      	mov	r4, r1
    mbedtls_sha512_context sha512;

    mbedtls_sha512_init( &sha512 );
   df206:	f004 f847 	bl	e3298 <mbedtls_sha512_init>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc verify sha384" ) );

    mbedtls_sha512_clone( &sha512, &ssl->handshake->fin_sha512 );
   df20a:	6b29      	ldr	r1, [r5, #48]	; 0x30
   df20c:	4668      	mov	r0, sp
   df20e:	f501 71e4 	add.w	r1, r1, #456	; 0x1c8
   df212:	f004 f84a 	bl	e32aa <mbedtls_sha512_clone>
    mbedtls_sha512_finish_ret( &sha512, hash );
   df216:	4621      	mov	r1, r4
   df218:	4668      	mov	r0, sp
   df21a:	f004 ff8b 	bl	e4134 <mbedtls_sha512_finish_ret>

    MBEDTLS_SSL_DEBUG_BUF( 3, "calculated verify result", hash, 48 );
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc verify" ) );

    mbedtls_sha512_free( &sha512 );
   df21e:	4668      	mov	r0, sp
   df220:	f004 f83e 	bl	e32a0 <mbedtls_sha512_free>

    return;
}
   df224:	b037      	add	sp, #220	; 0xdc
   df226:	bd30      	pop	{r4, r5, pc}

000df228 <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context>:

/* Append a new keycert entry to a (possibly empty) list */
static int ssl_append_key_cert( mbedtls_ssl_key_cert **head,
                                mbedtls_x509_crt *cert,
                                mbedtls_pk_context *key )
{
   df228:	b570      	push	{r4, r5, r6, lr}
   df22a:	4604      	mov	r4, r0
   df22c:	460e      	mov	r6, r1
    mbedtls_ssl_key_cert *new_cert;

    new_cert = (mbedtls_ssl_key_cert *)mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
   df22e:	2001      	movs	r0, #1
   df230:	210c      	movs	r1, #12

/* Append a new keycert entry to a (possibly empty) list */
static int ssl_append_key_cert( mbedtls_ssl_key_cert **head,
                                mbedtls_x509_crt *cert,
                                mbedtls_pk_context *key )
{
   df232:	4615      	mov	r5, r2
    mbedtls_ssl_key_cert *new_cert;

    new_cert = (mbedtls_ssl_key_cert *)mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
   df234:	f00a fb1e 	bl	e9874 <calloc>
    if( new_cert == NULL )
   df238:	b178      	cbz	r0, df25a <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x32>
    new_cert->cert = cert;
    new_cert->key  = key;
    new_cert->next = NULL;

    /* Update head is the list was null, else add to the end */
    if( *head == NULL )
   df23a:	6822      	ldr	r2, [r4, #0]

    new_cert = (mbedtls_ssl_key_cert *)mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
    if( new_cert == NULL )
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );

    new_cert->cert = cert;
   df23c:	6006      	str	r6, [r0, #0]
    new_cert->key  = key;
    new_cert->next = NULL;
   df23e:	2300      	movs	r3, #0
    new_cert = (mbedtls_ssl_key_cert *)mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
    if( new_cert == NULL )
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );

    new_cert->cert = cert;
    new_cert->key  = key;
   df240:	6045      	str	r5, [r0, #4]
    new_cert->next = NULL;
   df242:	6083      	str	r3, [r0, #8]

    /* Update head is the list was null, else add to the end */
    if( *head == NULL )
   df244:	b912      	cbnz	r2, df24c <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x24>
    {
        *head = new_cert;
   df246:	6020      	str	r0, [r4, #0]
        while( cur->next != NULL )
            cur = cur->next;
        cur->next = new_cert;
    }

    return( 0 );
   df248:	4610      	mov	r0, r2
   df24a:	bd70      	pop	{r4, r5, r6, pc}
        *head = new_cert;
    }
    else
    {
        mbedtls_ssl_key_cert *cur = *head;
        while( cur->next != NULL )
   df24c:	6893      	ldr	r3, [r2, #8]
   df24e:	b10b      	cbz	r3, df254 <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x2c>
   df250:	461a      	mov	r2, r3
   df252:	e7fb      	b.n	df24c <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x24>
            cur = cur->next;
        cur->next = new_cert;
   df254:	6090      	str	r0, [r2, #8]
    }

    return( 0 );
   df256:	4618      	mov	r0, r3
   df258:	bd70      	pop	{r4, r5, r6, pc}
{
    mbedtls_ssl_key_cert *new_cert;

    new_cert = (mbedtls_ssl_key_cert *)mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
    if( new_cert == NULL )
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
   df25a:	4801      	ldr	r0, [pc, #4]	; (df260 <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x38>)
            cur = cur->next;
        cur->next = new_cert;
    }

    return( 0 );
}
   df25c:	bd70      	pop	{r4, r5, r6, pc}
   df25e:	bf00      	nop
   df260:	ffff8100 	.word	0xffff8100

000df264 <_ZL26ssl_update_checksum_sha256P19mbedtls_ssl_contextPKhj>:
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
static void ssl_update_checksum_sha256( mbedtls_ssl_context *ssl,
                                        const unsigned char *buf, size_t len )
{
    mbedtls_sha256_update_ret( &ssl->handshake->fin_sha256, buf, len );
   df264:	6b00      	ldr	r0, [r0, #48]	; 0x30
   df266:	f500 70ac 	add.w	r0, r0, #344	; 0x158
   df26a:	f7f6 bc75 	b.w	d5b58 <mbedtls_sha256_update_ret>

000df26e <_ZL26ssl_update_checksum_sha384P19mbedtls_ssl_contextPKhj>:

#if defined(MBEDTLS_SHA512_C)
static void ssl_update_checksum_sha384( mbedtls_ssl_context *ssl,
                                        const unsigned char *buf, size_t len )
{
    mbedtls_sha512_update_ret( &ssl->handshake->fin_sha512, buf, len );
   df26e:	6b00      	ldr	r0, [r0, #48]	; 0x30
   df270:	f500 70e4 	add.w	r0, r0, #456	; 0x1c8
   df274:	f004 bf16 	b.w	e40a4 <mbedtls_sha512_update_ret>

000df278 <_ZL25ssl_update_checksum_startP19mbedtls_ssl_contextPKhj>:
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
}

static void ssl_update_checksum_start( mbedtls_ssl_context *ssl,
                                       const unsigned char *buf, size_t len )
{
   df278:	b570      	push	{r4, r5, r6, lr}
   df27a:	4604      	mov	r4, r0
     mbedtls_md5_update_ret( &ssl->handshake->fin_md5 , buf, len );
    mbedtls_sha1_update_ret( &ssl->handshake->fin_sha1, buf, len );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_update_ret( &ssl->handshake->fin_sha256, buf, len );
   df27c:	6b00      	ldr	r0, [r0, #48]	; 0x30
   df27e:	f500 70ac 	add.w	r0, r0, #344	; 0x158
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
}

static void ssl_update_checksum_start( mbedtls_ssl_context *ssl,
                                       const unsigned char *buf, size_t len )
{
   df282:	460d      	mov	r5, r1
   df284:	4616      	mov	r6, r2
     mbedtls_md5_update_ret( &ssl->handshake->fin_md5 , buf, len );
    mbedtls_sha1_update_ret( &ssl->handshake->fin_sha1, buf, len );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_update_ret( &ssl->handshake->fin_sha256, buf, len );
   df286:	f7f6 fc67 	bl	d5b58 <mbedtls_sha256_update_ret>
#endif
#if defined(MBEDTLS_SHA512_C)
    mbedtls_sha512_update_ret( &ssl->handshake->fin_sha512, buf, len );
   df28a:	6b20      	ldr	r0, [r4, #48]	; 0x30
   df28c:	4632      	mov	r2, r6
   df28e:	4629      	mov	r1, r5
   df290:	f500 70e4 	add.w	r0, r0, #456	; 0x1c8
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
}
   df294:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_update_ret( &ssl->handshake->fin_sha256, buf, len );
#endif
#if defined(MBEDTLS_SHA512_C)
    mbedtls_sha512_update_ret( &ssl->handshake->fin_sha512, buf, len );
   df298:	f004 bf04 	b.w	e40a4 <mbedtls_sha512_update_ret>

000df29c <_ZL25ssl_reset_in_out_pointersP19mbedtls_ssl_context>:
        ssl->in_hdr  = ssl->in_buf;
    }
    else
#endif /* MBEDTLS_SSL_PROTO_DTLS */
    {
        ssl->out_hdr = ssl->out_buf + 8;
   df29c:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
   df2a0:	3308      	adds	r3, #8
   df2a2:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
        ssl->in_hdr  = ssl->in_buf  + 8;
   df2a6:	6d03      	ldr	r3, [r0, #80]	; 0x50
   df2a8:	3308      	adds	r3, #8
   df2aa:	6583      	str	r3, [r0, #88]	; 0x58
/*
 * Setup an SSL context
 */

static void ssl_reset_in_out_pointers( mbedtls_ssl_context *ssl )
{
   df2ac:	b510      	push	{r4, lr}
        ssl->out_hdr = ssl->out_buf + 8;
        ssl->in_hdr  = ssl->in_buf  + 8;
    }

    /* Derive other internal pointers. */
    ssl_update_out_pointers( ssl, NULL /* no transform enabled */ );
   df2ae:	2100      	movs	r1, #0
   df2b0:	f7ff fe58 	bl	def64 <_ZL23ssl_update_out_pointersP19mbedtls_ssl_contextP21mbedtls_ssl_transform>
        ssl->in_iv  = ssl->in_hdr + 13;
    }
    else
#endif
    {
        ssl->in_ctr = ssl->in_hdr - 8;
   df2b4:	6d83      	ldr	r3, [r0, #88]	; 0x58
   df2b6:	f1a3 0208 	sub.w	r2, r3, #8
   df2ba:	6542      	str	r2, [r0, #84]	; 0x54
        ssl->in_len = ssl->in_hdr + 3;
   df2bc:	1cda      	adds	r2, r3, #3
        ssl->in_iv  = ssl->in_hdr + 5;
   df2be:	3305      	adds	r3, #5
    }
    else
#endif
    {
        ssl->in_ctr = ssl->in_hdr - 8;
        ssl->in_len = ssl->in_hdr + 3;
   df2c0:	65c2      	str	r2, [r0, #92]	; 0x5c
        ssl->in_iv  = ssl->in_hdr + 5;
   df2c2:	6603      	str	r3, [r0, #96]	; 0x60
        ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
    {
        ssl->in_msg = ssl->in_iv + transform->ivlen - transform->fixed_ivlen;
    }
    else
        ssl->in_msg = ssl->in_iv;
   df2c4:	6643      	str	r3, [r0, #100]	; 0x64
   df2c6:	bd10      	pop	{r4, pc}

000df2c8 <mbedtls_ssl_derive_keys>:
static void ssl_calc_finished_tls_sha384( mbedtls_ssl_context *, unsigned char *, int );
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

int mbedtls_ssl_derive_keys( mbedtls_ssl_context *ssl )
{
   df2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    size_t iv_copy_len;
    const mbedtls_cipher_info_t *cipher_info;
    const mbedtls_md_info_t *md_info;

    mbedtls_ssl_session *session = ssl->session_negotiate;
    mbedtls_ssl_transform *transform = ssl->transform_negotiate;
   df2cc:	6c04      	ldr	r4, [r0, #64]	; 0x40
    size_t mac_key_len;
    size_t iv_copy_len;
    const mbedtls_cipher_info_t *cipher_info;
    const mbedtls_md_info_t *md_info;

    mbedtls_ssl_session *session = ssl->session_negotiate;
   df2ce:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    mbedtls_ssl_transform *transform = ssl->transform_negotiate;
    mbedtls_ssl_handshake_params *handshake = ssl->handshake;
   df2d0:	6b05      	ldr	r5, [r0, #48]	; 0x30
static void ssl_calc_finished_tls_sha384( mbedtls_ssl_context *, unsigned char *, int );
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

int mbedtls_ssl_derive_keys( mbedtls_ssl_context *ssl )
{
   df2d2:	b0d7      	sub	sp, #348	; 0x15c
   df2d4:	4680      	mov	r8, r0
    size_t mac_key_len;
    size_t iv_copy_len;
    const mbedtls_cipher_info_t *cipher_info;
    const mbedtls_md_info_t *md_info;

    mbedtls_ssl_session *session = ssl->session_negotiate;
   df2d6:	9305      	str	r3, [sp, #20]
    mbedtls_ssl_transform *transform = ssl->transform_negotiate;
    mbedtls_ssl_handshake_params *handshake = ssl->handshake;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> derive keys" ) );

    cipher_info = mbedtls_cipher_info_from_type( transform->ciphersuite_info->cipher );
   df2d8:	6823      	ldr	r3, [r4, #0]
   df2da:	7a18      	ldrb	r0, [r3, #8]
   df2dc:	f7f6 feee 	bl	d60bc <mbedtls_cipher_info_from_type>
    if( cipher_info == NULL )
   df2e0:	4606      	mov	r6, r0
   df2e2:	b908      	cbnz	r0, df2e8 <mbedtls_ssl_derive_keys+0x20>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "cipher info for %d not found",
                            transform->ciphersuite_info->cipher ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   df2e4:	4ba3      	ldr	r3, [pc, #652]	; (df574 <mbedtls_ssl_derive_keys+0x2ac>)
   df2e6:	e140      	b.n	df56a <mbedtls_ssl_derive_keys+0x2a2>
    }

    md_info = mbedtls_md_info_from_type( transform->ciphersuite_info->mac );
   df2e8:	6823      	ldr	r3, [r4, #0]
   df2ea:	7a58      	ldrb	r0, [r3, #9]
   df2ec:	f7fd fe2a 	bl	dcf44 <mbedtls_md_info_from_type>
    if( md_info == NULL )
   df2f0:	4682      	mov	sl, r0
   df2f2:	2800      	cmp	r0, #0
   df2f4:	d0f6      	beq.n	df2e4 <mbedtls_ssl_derive_keys+0x1c>
    }
    else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA512_C)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 &&
   df2f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
   df2fa:	2b03      	cmp	r3, #3
   df2fc:	d001      	beq.n	df302 <mbedtls_ssl_derive_keys+0x3a>
    else
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   df2fe:	4b9e      	ldr	r3, [pc, #632]	; (df578 <mbedtls_ssl_derive_keys+0x2b0>)
   df300:	e133      	b.n	df56a <mbedtls_ssl_derive_keys+0x2a2>
    else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA512_C)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 &&
        transform->ciphersuite_info->mac == MBEDTLS_MD_SHA384 )
   df302:	6823      	ldr	r3, [r4, #0]
    }
    else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA512_C)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 &&
   df304:	7a5b      	ldrb	r3, [r3, #9]
   df306:	2b07      	cmp	r3, #7
   df308:	d107      	bne.n	df31a <mbedtls_ssl_derive_keys+0x52>
        transform->ciphersuite_info->mac == MBEDTLS_MD_SHA384 )
    {
        handshake->tls_prf = tls_prf_sha384;
   df30a:	4b9c      	ldr	r3, [pc, #624]	; (df57c <mbedtls_ssl_derive_keys+0x2b4>)
   df30c:	f8c5 32ac 	str.w	r3, [r5, #684]	; 0x2ac
        handshake->calc_verify = ssl_calc_verify_tls_sha384;
   df310:	4b9b      	ldr	r3, [pc, #620]	; (df580 <mbedtls_ssl_derive_keys+0x2b8>)
   df312:	f8c5 32a4 	str.w	r3, [r5, #676]	; 0x2a4
        handshake->calc_finished = ssl_calc_finished_tls_sha384;
   df316:	4b9b      	ldr	r3, [pc, #620]	; (df584 <mbedtls_ssl_derive_keys+0x2bc>)
   df318:	e006      	b.n	df328 <mbedtls_ssl_derive_keys+0x60>
    else
#endif
#if defined(MBEDTLS_SHA256_C)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
    {
        handshake->tls_prf = tls_prf_sha256;
   df31a:	4b9b      	ldr	r3, [pc, #620]	; (df588 <mbedtls_ssl_derive_keys+0x2c0>)
   df31c:	f8c5 32ac 	str.w	r3, [r5, #684]	; 0x2ac
        handshake->calc_verify = ssl_calc_verify_tls_sha256;
   df320:	4b9a      	ldr	r3, [pc, #616]	; (df58c <mbedtls_ssl_derive_keys+0x2c4>)
   df322:	f8c5 32a4 	str.w	r3, [r5, #676]	; 0x2a4
        handshake->calc_finished = ssl_calc_finished_tls_sha256;
   df326:	4b9a      	ldr	r3, [pc, #616]	; (df590 <mbedtls_ssl_derive_keys+0x2c8>)
   df328:	f8c5 32a8 	str.w	r3, [r5, #680]	; 0x2a8
     *     MD5( premaster + SHA1( 'CCC' + premaster + randbytes ) )
     *
     * TLSv1+:
     *   master = PRF( premaster, "master secret", randbytes )[0..47]
     */
    if( handshake->resume == 0 )
   df32c:	f8d5 3348 	ldr.w	r3, [r5, #840]	; 0x348
   df330:	f505 7b3d 	add.w	fp, r5, #756	; 0x2f4
   df334:	f505 792d 	add.w	r9, r5, #692	; 0x2b4
   df338:	b9b3      	cbnz	r3, df368 <mbedtls_ssl_derive_keys+0xa0>
            }

        }
        else
#endif
        ret = handshake->tls_prf( handshake->premaster, handshake->pmslen,
   df33a:	2330      	movs	r3, #48	; 0x30
   df33c:	9302      	str	r3, [sp, #8]
   df33e:	9b05      	ldr	r3, [sp, #20]
   df340:	4a94      	ldr	r2, [pc, #592]	; (df594 <mbedtls_ssl_derive_keys+0x2cc>)
   df342:	332c      	adds	r3, #44	; 0x2c
   df344:	9301      	str	r3, [sp, #4]
   df346:	2340      	movs	r3, #64	; 0x40
   df348:	9300      	str	r3, [sp, #0]
   df34a:	f8d5 72ac 	ldr.w	r7, [r5, #684]	; 0x2ac
   df34e:	f8d5 12b0 	ldr.w	r1, [r5, #688]	; 0x2b0
   df352:	464b      	mov	r3, r9
   df354:	4658      	mov	r0, fp
   df356:	47b8      	blx	r7
                                  "master secret",
                                  handshake->randbytes, 64,
                                  session->master, 48 );
        if( ret != 0 )
   df358:	4603      	mov	r3, r0
   df35a:	2800      	cmp	r0, #0
   df35c:	f040 8105 	bne.w	df56a <mbedtls_ssl_derive_keys+0x2a2>
            MBEDTLS_SSL_DEBUG_RET( 1, "prf", ret );
            return( ret );
        }

        mbedtls_platform_zeroize( handshake->premaster,
                                  sizeof(handshake->premaster) );
   df360:	2154      	movs	r1, #84	; 0x54
   df362:	4658      	mov	r0, fp
   df364:	f7fb ff4a 	bl	db1fc <mbedtls_platform_zeroize>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "no premaster (session resumed)" ) );

    /*
     * Swap the client and server random values.
     */
    memcpy( tmp, handshake->randbytes, 64 );
   df368:	464b      	mov	r3, r9
   df36a:	af06      	add	r7, sp, #24
   df36c:	6818      	ldr	r0, [r3, #0]
   df36e:	6859      	ldr	r1, [r3, #4]
   df370:	463a      	mov	r2, r7
   df372:	c203      	stmia	r2!, {r0, r1}
   df374:	3308      	adds	r3, #8
   df376:	455b      	cmp	r3, fp
   df378:	4617      	mov	r7, r2
   df37a:	d1f7      	bne.n	df36c <mbedtls_ssl_derive_keys+0xa4>
    memcpy( handshake->randbytes, tmp + 32, 32 );
   df37c:	af0e      	add	r7, sp, #56	; 0x38
   df37e:	464a      	mov	r2, r9
   df380:	f10d 0b58 	add.w	fp, sp, #88	; 0x58
   df384:	463b      	mov	r3, r7
   df386:	cb03      	ldmia	r3!, {r0, r1}
   df388:	455b      	cmp	r3, fp
   df38a:	6010      	str	r0, [r2, #0]
   df38c:	6051      	str	r1, [r2, #4]
   df38e:	461f      	mov	r7, r3
   df390:	f102 0208 	add.w	r2, r2, #8
   df394:	d1f6      	bne.n	df384 <mbedtls_ssl_derive_keys+0xbc>
    memcpy( handshake->randbytes + 32, tmp, 32 );
   df396:	af06      	add	r7, sp, #24
   df398:	f505 7235 	add.w	r2, r5, #724	; 0x2d4
   df39c:	f10d 0e38 	add.w	lr, sp, #56	; 0x38
   df3a0:	463b      	mov	r3, r7
   df3a2:	cb03      	ldmia	r3!, {r0, r1}
   df3a4:	4573      	cmp	r3, lr
   df3a6:	6010      	str	r0, [r2, #0]
   df3a8:	6051      	str	r1, [r2, #4]
   df3aa:	461f      	mov	r7, r3
   df3ac:	f102 0208 	add.w	r2, r2, #8
   df3b0:	d1f6      	bne.n	df3a0 <mbedtls_ssl_derive_keys+0xd8>
    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
   df3b2:	2140      	movs	r1, #64	; 0x40
   df3b4:	a806      	add	r0, sp, #24
   df3b6:	f7fb ff21 	bl	db1fc <mbedtls_platform_zeroize>
     *      ...
     *
     *  TLSv1:
     *    key block = PRF( master, "key expansion", randbytes )
     */
    ret = handshake->tls_prf( session->master, 48, "key expansion",
   df3ba:	9f05      	ldr	r7, [sp, #20]
   df3bc:	f8cd b004 	str.w	fp, [sp, #4]
   df3c0:	f44f 7380 	mov.w	r3, #256	; 0x100
   df3c4:	f04f 0b40 	mov.w	fp, #64	; 0x40
   df3c8:	9302      	str	r3, [sp, #8]
   df3ca:	f8cd b000 	str.w	fp, [sp]
   df3ce:	372c      	adds	r7, #44	; 0x2c
   df3d0:	464b      	mov	r3, r9
   df3d2:	f8d5 52ac 	ldr.w	r5, [r5, #684]	; 0x2ac
   df3d6:	4a70      	ldr	r2, [pc, #448]	; (df598 <mbedtls_ssl_derive_keys+0x2d0>)
   df3d8:	2130      	movs	r1, #48	; 0x30
   df3da:	4638      	mov	r0, r7
   df3dc:	47a8      	blx	r5
                              handshake->randbytes, 64, keyblk, 256 );
    if( ret != 0 )
   df3de:	4603      	mov	r3, r0
   df3e0:	2800      	cmp	r0, #0
   df3e2:	f040 80c2 	bne.w	df56a <mbedtls_ssl_derive_keys+0x2a2>
    MBEDTLS_SSL_DEBUG_BUF( 3, "master secret", session->master, 48 );
    MBEDTLS_SSL_DEBUG_BUF( 4, "random bytes", handshake->randbytes, 64 );
    MBEDTLS_SSL_DEBUG_BUF( 4, "key block", keyblk, 256 );

    mbedtls_platform_zeroize( handshake->randbytes,
                              sizeof( handshake->randbytes ) );
   df3e6:	4659      	mov	r1, fp
   df3e8:	4648      	mov	r0, r9
   df3ea:	f7fb ff07 	bl	db1fc <mbedtls_platform_zeroize>

    /*
     * Determine the appropriate key, IV and MAC length.
     */

    transform->keylen = cipher_info->key_bitlen / 8;
   df3ee:	6873      	ldr	r3, [r6, #4]
   df3f0:	08db      	lsrs	r3, r3, #3
   df3f2:	6063      	str	r3, [r4, #4]

    if( cipher_info->mode == MBEDTLS_MODE_GCM ||
   df3f4:	7873      	ldrb	r3, [r6, #1]
   df3f6:	2b06      	cmp	r3, #6
   df3f8:	d003      	beq.n	df402 <mbedtls_ssl_derive_keys+0x13a>
   df3fa:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   df3fe:	2b08      	cmp	r3, #8
   df400:	d116      	bne.n	df430 <mbedtls_ssl_derive_keys+0x168>
        cipher_info->mode == MBEDTLS_MODE_CCM ||
        cipher_info->mode == MBEDTLS_MODE_CHACHAPOLY )
    {
        size_t taglen, explicit_ivlen;

        transform->maclen = 0;
   df402:	2300      	movs	r3, #0
   df404:	6163      	str	r3, [r4, #20]

        /* All modes haves 96-bit IVs;
         * GCM and CCM has 4 implicit and 8 explicit bytes
         * ChachaPoly has all 12 bytes implicit
         */
        transform->ivlen = 12;
   df406:	230c      	movs	r3, #12
   df408:	60e3      	str	r3, [r4, #12]
        if( cipher_info->mode == MBEDTLS_MODE_CHACHAPOLY )
   df40a:	7872      	ldrb	r2, [r6, #1]
   df40c:	2a0a      	cmp	r2, #10
            transform->fixed_ivlen = 12;
        else
            transform->fixed_ivlen = 4;
   df40e:	bf18      	it	ne
   df410:	2304      	movne	r3, #4
   df412:	6123      	str	r3, [r4, #16]

        /* All modes have 128-bit tags, except CCM_8 (ciphersuite flag) */
        taglen = transform->ciphersuite_info->flags &
   df414:	6823      	ldr	r3, [r4, #0]
                  MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
   df416:	7f1b      	ldrb	r3, [r3, #28]
   df418:	f013 0f02 	tst.w	r3, #2


        /* Minimum length of encrypted record */
        explicit_ivlen = transform->ivlen - transform->fixed_ivlen;
        transform->minlen = explicit_ivlen + taglen;
   df41c:	6923      	ldr	r3, [r4, #16]
        else
            transform->fixed_ivlen = 4;

        /* All modes have 128-bit tags, except CCM_8 (ciphersuite flag) */
        taglen = transform->ciphersuite_info->flags &
                  MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
   df41e:	bf14      	ite	ne
   df420:	2208      	movne	r2, #8
   df422:	2210      	moveq	r2, #16


        /* Minimum length of encrypted record */
        explicit_ivlen = transform->ivlen - transform->fixed_ivlen;
        transform->minlen = explicit_ivlen + taglen;
   df424:	f1c3 030c 	rsb	r3, r3, #12
   df428:	4413      	add	r3, r2
   df42a:	60a3      	str	r3, [r4, #8]
        cipher_info->mode == MBEDTLS_MODE_CHACHAPOLY )
    {
        size_t taglen, explicit_ivlen;

        transform->maclen = 0;
        mac_key_len = 0;
   df42c:	2500      	movs	r5, #0
                  MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;


        /* Minimum length of encrypted record */
        explicit_ivlen = transform->ivlen - transform->fixed_ivlen;
        transform->minlen = explicit_ivlen + taglen;
   df42e:	e01b      	b.n	df468 <mbedtls_ssl_derive_keys+0x1a0>
    }
    else
    {
        /* Initialize HMAC contexts */
        if( ( ret = mbedtls_md_setup( &transform->md_ctx_enc, md_info, 1 ) ) != 0 ||
   df430:	2201      	movs	r2, #1
   df432:	4651      	mov	r1, sl
   df434:	f104 0038 	add.w	r0, r4, #56	; 0x38
   df438:	f7fd fdb0 	bl	dcf9c <mbedtls_md_setup>
   df43c:	2800      	cmp	r0, #0
   df43e:	f040 8083 	bne.w	df548 <mbedtls_ssl_derive_keys+0x280>
            ( ret = mbedtls_md_setup( &transform->md_ctx_dec, md_info, 1 ) ) != 0 )
   df442:	2201      	movs	r2, #1
   df444:	4651      	mov	r1, sl
   df446:	f104 0044 	add.w	r0, r4, #68	; 0x44
   df44a:	f7fd fda7 	bl	dcf9c <mbedtls_md_setup>
        transform->minlen = explicit_ivlen + taglen;
    }
    else
    {
        /* Initialize HMAC contexts */
        if( ( ret = mbedtls_md_setup( &transform->md_ctx_enc, md_info, 1 ) ) != 0 ||
   df44e:	2800      	cmp	r0, #0
   df450:	d17a      	bne.n	df548 <mbedtls_ssl_derive_keys+0x280>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_setup", ret );
            return( ret );
        }

        /* Get MAC length */
        mac_key_len = mbedtls_md_get_size( md_info );
   df452:	4650      	mov	r0, sl
   df454:	f7fd feae 	bl	dd1b4 <mbedtls_md_get_size>
        transform->maclen = mac_key_len;
   df458:	6160      	str	r0, [r4, #20]
#endif
        }
#endif /* MBEDTLS_SSL_TRUNCATED_HMAC */

        /* IV length */
        transform->ivlen = cipher_info->iv_size;
   df45a:	68f1      	ldr	r1, [r6, #12]
   df45c:	60e1      	str	r1, [r4, #12]

        /* Minimum length */
        if( cipher_info->mode == MBEDTLS_MODE_STREAM )
   df45e:	7873      	ldrb	r3, [r6, #1]
   df460:	2b07      	cmp	r3, #7
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_setup", ret );
            return( ret );
        }

        /* Get MAC length */
        mac_key_len = mbedtls_md_get_size( md_info );
   df462:	4605      	mov	r5, r0

        /* IV length */
        transform->ivlen = cipher_info->iv_size;

        /* Minimum length */
        if( cipher_info->mode == MBEDTLS_MODE_STREAM )
   df464:	d172      	bne.n	df54c <mbedtls_ssl_derive_keys+0x284>
            transform->minlen = transform->maclen;
   df466:	60a5      	str	r5, [r4, #8]

    /*
     * Finally setup the cipher contexts, IVs and MAC secrets.
     */
#if defined(MBEDTLS_SSL_CLI_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
   df468:	f8d8 3000 	ldr.w	r3, [r8]
   df46c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
   df470:	07db      	lsls	r3, r3, #31
   df472:	f53f af44 	bmi.w	df2fe <mbedtls_ssl_derive_keys+0x36>
    {
        key1 = keyblk + mac_key_len * 2;
        key2 = keyblk + mac_key_len * 2 + transform->keylen;
   df476:	6863      	ldr	r3, [r4, #4]
        mac_dec = keyblk + mac_key_len;

        /*
         * This is not used in TLS v1.1.
         */
        iv_copy_len = ( transform->fixed_ivlen ) ?
   df478:	f8d4 b010 	ldr.w	fp, [r4, #16]
     * Finally setup the cipher contexts, IVs and MAC secrets.
     */
#if defined(MBEDTLS_SSL_CLI_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
    {
        key1 = keyblk + mac_key_len * 2;
   df47c:	ea4f 0a45 	mov.w	sl, r5, lsl #1
        key2 = keyblk + mac_key_len * 2 + transform->keylen;
   df480:	eb0a 0903 	add.w	r9, sl, r3
   df484:	aa16      	add	r2, sp, #88	; 0x58
   df486:	4491      	add	r9, r2

        /*
         * This is not used in TLS v1.1.
         */
        iv_copy_len = ( transform->fixed_ivlen ) ?
                            transform->fixed_ivlen : transform->ivlen;
   df488:	f1bb 0f00 	cmp.w	fp, #0
   df48c:	d101      	bne.n	df492 <mbedtls_ssl_derive_keys+0x1ca>
   df48e:	f8d4 b00c 	ldr.w	fp, [r4, #12]
        memcpy( transform->iv_enc, key2 + transform->keylen,  iv_copy_len );
   df492:	9305      	str	r3, [sp, #20]
   df494:	eb09 0103 	add.w	r1, r9, r3
   df498:	465a      	mov	r2, fp
   df49a:	f104 0018 	add.w	r0, r4, #24
   df49e:	f00a fb0a 	bl	e9ab6 <memcpy>
        memcpy( transform->iv_dec, key2 + transform->keylen + iv_copy_len,
                iv_copy_len );
   df4a2:	9b05      	ldr	r3, [sp, #20]
   df4a4:	eb0b 0103 	add.w	r1, fp, r3
   df4a8:	465a      	mov	r2, fp
   df4aa:	4449      	add	r1, r9
   df4ac:	f104 0028 	add.w	r0, r4, #40	; 0x28
   df4b0:	f00a fb01 	bl	e9ab6 <memcpy>
    }
    else
#endif /* MBEDTLS_SSL_PROTO_SSL3 */
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
   df4b4:	f8d8 300c 	ldr.w	r3, [r8, #12]
   df4b8:	2b00      	cmp	r3, #0
   df4ba:	f77f af20 	ble.w	df2fe <mbedtls_ssl_derive_keys+0x36>
    {
        /* For HMAC-based ciphersuites, initialize the HMAC transforms.
           For AEAD-based ciphersuites, there is nothing to do here. */
        if( mac_key_len != 0 )
   df4be:	b165      	cbz	r5, df4da <mbedtls_ssl_derive_keys+0x212>
        {
            mbedtls_md_hmac_starts( &transform->md_ctx_enc, mac_enc, mac_key_len );
   df4c0:	462a      	mov	r2, r5
   df4c2:	a916      	add	r1, sp, #88	; 0x58
   df4c4:	f104 0038 	add.w	r0, r4, #56	; 0x38
   df4c8:	f7fd fdb8 	bl	dd03c <mbedtls_md_hmac_starts>
            mbedtls_md_hmac_starts( &transform->md_ctx_dec, mac_dec, mac_key_len );
   df4cc:	ab16      	add	r3, sp, #88	; 0x58
   df4ce:	462a      	mov	r2, r5
   df4d0:	1959      	adds	r1, r3, r5
   df4d2:	f104 0044 	add.w	r0, r4, #68	; 0x44
   df4d6:	f7fd fdb1 	bl	dd03c <mbedtls_md_hmac_starts>
        }
    }
#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */

#if defined(MBEDTLS_SSL_EXPORT_KEYS)
    if( ssl->conf->f_export_keys != NULL )
   df4da:	f8d8 0000 	ldr.w	r0, [r8]
   df4de:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
   df4e2:	f1b8 0f00 	cmp.w	r8, #0
   df4e6:	d008      	beq.n	df4fa <mbedtls_ssl_derive_keys+0x232>
    {
        ssl->conf->f_export_keys( ssl->conf->p_export_keys,
                                  session->master, keyblk,
                                  mac_key_len, transform->keylen,
                                  iv_copy_len );
   df4e8:	f8cd b004 	str.w	fp, [sp, #4]
   df4ec:	6863      	ldr	r3, [r4, #4]
   df4ee:	9300      	str	r3, [sp, #0]
   df4f0:	aa16      	add	r2, sp, #88	; 0x58
   df4f2:	462b      	mov	r3, r5
   df4f4:	4639      	mov	r1, r7
   df4f6:	6c80      	ldr	r0, [r0, #72]	; 0x48
   df4f8:	47c0      	blx	r8
    }
#endif

    if( ( ret = mbedtls_cipher_setup( &transform->cipher_ctx_enc,
   df4fa:	f104 0550 	add.w	r5, r4, #80	; 0x50
   df4fe:	4631      	mov	r1, r6
   df500:	4628      	mov	r0, r5
   df502:	f7f6 fe11 	bl	d6128 <mbedtls_cipher_setup>
   df506:	4603      	mov	r3, r0
   df508:	bb78      	cbnz	r0, df56a <mbedtls_ssl_derive_keys+0x2a2>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setup", ret );
        return( ret );
    }

    if( ( ret = mbedtls_cipher_setup( &transform->cipher_ctx_dec,
   df50a:	3488      	adds	r4, #136	; 0x88
   df50c:	4631      	mov	r1, r6
   df50e:	4620      	mov	r0, r4
   df510:	f7f6 fe0a 	bl	d6128 <mbedtls_cipher_setup>
   df514:	4603      	mov	r3, r0
   df516:	bb40      	cbnz	r0, df56a <mbedtls_ssl_derive_keys+0x2a2>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setup", ret );
        return( ret );
    }

    if( ( ret = mbedtls_cipher_setkey( &transform->cipher_ctx_enc, key1,
   df518:	a916      	add	r1, sp, #88	; 0x58
   df51a:	2301      	movs	r3, #1
   df51c:	6872      	ldr	r2, [r6, #4]
   df51e:	4451      	add	r1, sl
   df520:	4628      	mov	r0, r5
   df522:	f7f6 fe19 	bl	d6158 <mbedtls_cipher_setkey>
   df526:	4603      	mov	r3, r0
   df528:	b9f8      	cbnz	r0, df56a <mbedtls_ssl_derive_keys+0x2a2>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setkey", ret );
        return( ret );
    }

    if( ( ret = mbedtls_cipher_setkey( &transform->cipher_ctx_dec, key2,
   df52a:	6872      	ldr	r2, [r6, #4]
   df52c:	4649      	mov	r1, r9
   df52e:	4620      	mov	r0, r4
   df530:	f7f6 fe12 	bl	d6158 <mbedtls_cipher_setkey>
   df534:	4603      	mov	r3, r0
   df536:	b9c0      	cbnz	r0, df56a <mbedtls_ssl_derive_keys+0x2a2>
   df538:	9005      	str	r0, [sp, #20]
            return( ret );
        }
    }
#endif /* MBEDTLS_CIPHER_MODE_CBC */

    mbedtls_platform_zeroize( keyblk, sizeof( keyblk ) );
   df53a:	f44f 7180 	mov.w	r1, #256	; 0x100
   df53e:	a816      	add	r0, sp, #88	; 0x58
   df540:	f7fb fe5c 	bl	db1fc <mbedtls_platform_zeroize>
    }
#endif /* MBEDTLS_ZLIB_SUPPORT */

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= derive keys" ) );

    return( 0 );
   df544:	9b05      	ldr	r3, [sp, #20]
   df546:	e010      	b.n	df56a <mbedtls_ssl_derive_keys+0x2a2>
    else
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   df548:	4603      	mov	r3, r0
   df54a:	e00e      	b.n	df56a <mbedtls_ssl_derive_keys+0x2a2>
            }
            else
#endif
            {
                transform->minlen = transform->maclen
                                  + cipher_info->block_size
   df54c:	6973      	ldr	r3, [r6, #20]
                                  - transform->maclen % cipher_info->block_size;
   df54e:	fbb5 f2f3 	udiv	r2, r5, r3
   df552:	fb03 3302 	mla	r3, r3, r2, r3
   df556:	60a3      	str	r3, [r4, #8]
                ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_1 )
                ; /* No need to adjust minlen */
            else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
            if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_2 ||
   df558:	f8d8 200c 	ldr.w	r2, [r8, #12]
   df55c:	3a02      	subs	r2, #2
   df55e:	2a01      	cmp	r2, #1
   df560:	f63f aecd 	bhi.w	df2fe <mbedtls_ssl_derive_keys+0x36>
                ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
            {
                transform->minlen += transform->ivlen;
   df564:	440b      	add	r3, r1
   df566:	60a3      	str	r3, [r4, #8]
   df568:	e77e      	b.n	df468 <mbedtls_ssl_derive_keys+0x1a0>
#endif /* MBEDTLS_ZLIB_SUPPORT */

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= derive keys" ) );

    return( 0 );
}
   df56a:	4618      	mov	r0, r3
   df56c:	b057      	add	sp, #348	; 0x15c
   df56e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   df572:	bf00      	nop
   df574:	ffff8f00 	.word	0xffff8f00
   df578:	ffff9400 	.word	0xffff9400
   df57c:	000df171 	.word	0x000df171
   df580:	000df1fd 	.word	0x000df1fd
   df584:	000df191 	.word	0x000df191
   df588:	000df151 	.word	0x000df151
   df58c:	000df001 	.word	0x000df001
   df590:	000def95 	.word	0x000def95
   df594:	000ee701 	.word	0x000ee701
   df598:	000ee70f 	.word	0x000ee70f

000df59c <mbedtls_ssl_psk_derive_premaster>:
#endif /* MBEDTLS_SHA512_C */
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

#if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)
int mbedtls_ssl_psk_derive_premaster( mbedtls_ssl_context *ssl, mbedtls_key_exchange_type_t key_ex )
{
   df59c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   df5a0:	4606      	mov	r6, r0
    unsigned char *p = ssl->handshake->premaster;
   df5a2:	6b00      	ldr	r0, [r0, #48]	; 0x30
    unsigned char *end = p + sizeof( ssl->handshake->premaster );
    const unsigned char *psk = ssl->conf->psk;
   df5a4:	6832      	ldr	r2, [r6, #0]
   df5a6:	6e57      	ldr	r7, [r2, #100]	; 0x64
    size_t psk_len = ssl->conf->psk_len;
   df5a8:	6e94      	ldr	r4, [r2, #104]	; 0x68

    /* If the psk callback was called, use its result */
    if( ssl->handshake->psk != NULL )
   df5aa:	f8d0 213c 	ldr.w	r2, [r0, #316]	; 0x13c
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

#if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)
int mbedtls_ssl_psk_derive_premaster( mbedtls_ssl_context *ssl, mbedtls_key_exchange_type_t key_ex )
{
    unsigned char *p = ssl->handshake->premaster;
   df5ae:	f500 733d 	add.w	r3, r0, #756	; 0x2f4
    unsigned char *end = p + sizeof( ssl->handshake->premaster );
   df5b2:	f500 7552 	add.w	r5, r0, #840	; 0x348
    const unsigned char *psk = ssl->conf->psk;
    size_t psk_len = ssl->conf->psk_len;

    /* If the psk callback was called, use its result */
    if( ssl->handshake->psk != NULL )
   df5b6:	b112      	cbz	r2, df5be <mbedtls_ssl_psk_derive_premaster+0x22>
    {
        psk = ssl->handshake->psk;
        psk_len = ssl->handshake->psk_len;
   df5b8:	f8d0 4140 	ldr.w	r4, [r0, #320]	; 0x140
   df5bc:	4617      	mov	r7, r2
     *     opaque psk<0..2^16-1>;
     * };
     * with "other_secret" depending on the particular key exchange
     */
#if defined(MBEDTLS_KEY_EXCHANGE_PSK_ENABLED)
    if( key_ex == MBEDTLS_KEY_EXCHANGE_PSK )
   df5be:	2905      	cmp	r1, #5
   df5c0:	d11a      	bne.n	df5f8 <mbedtls_ssl_psk_derive_premaster+0x5c>
    {
        if( end - p < 2 )
   df5c2:	1aeb      	subs	r3, r5, r3
   df5c4:	2b01      	cmp	r3, #1
   df5c6:	dc02      	bgt.n	df5ce <mbedtls_ssl_psk_derive_premaster+0x32>
            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   df5c8:	4821      	ldr	r0, [pc, #132]	; (df650 <mbedtls_ssl_psk_derive_premaster+0xb4>)
   df5ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

        *(p++) = (unsigned char)( psk_len >> 8 );
        *(p++) = (unsigned char)( psk_len      );
   df5ce:	f200 28f6 	addw	r8, r0, #758	; 0x2f6
    if( key_ex == MBEDTLS_KEY_EXCHANGE_PSK )
    {
        if( end - p < 2 )
            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

        *(p++) = (unsigned char)( psk_len >> 8 );
   df5d2:	0a23      	lsrs	r3, r4, #8
        *(p++) = (unsigned char)( psk_len      );

        if( end < p || (size_t)( end - p ) < psk_len )
   df5d4:	4545      	cmp	r5, r8
    if( key_ex == MBEDTLS_KEY_EXCHANGE_PSK )
    {
        if( end - p < 2 )
            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

        *(p++) = (unsigned char)( psk_len >> 8 );
   df5d6:	f880 32f4 	strb.w	r3, [r0, #756]	; 0x2f4
        *(p++) = (unsigned char)( psk_len      );
   df5da:	f880 42f5 	strb.w	r4, [r0, #757]	; 0x2f5

        if( end < p || (size_t)( end - p ) < psk_len )
   df5de:	d3f3      	bcc.n	df5c8 <mbedtls_ssl_psk_derive_premaster+0x2c>
   df5e0:	ebc8 0305 	rsb	r3, r8, r5
   df5e4:	42a3      	cmp	r3, r4
   df5e6:	d3ef      	bcc.n	df5c8 <mbedtls_ssl_psk_derive_premaster+0x2c>
            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

        memset( p, 0, psk_len );
   df5e8:	4622      	mov	r2, r4
   df5ea:	2100      	movs	r1, #0
   df5ec:	4640      	mov	r0, r8
   df5ee:	f00a fa88 	bl	e9b02 <memset>
        p += psk_len;
   df5f2:	eb08 0004 	add.w	r0, r8, r4
   df5f6:	e00c      	b.n	df612 <mbedtls_ssl_psk_derive_premaster+0x76>
    }
    else
#endif /* MBEDTLS_KEY_EXCHANGE_PSK_ENABLED */
#if defined(MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED)
    if( key_ex == MBEDTLS_KEY_EXCHANGE_RSA_PSK )
   df5f8:	2907      	cmp	r1, #7
   df5fa:	d126      	bne.n	df64a <mbedtls_ssl_psk_derive_premaster+0xae>
    {
        /*
         * other_secret already set by the ClientKeyExchange message,
         * and is 48 bytes long
         */
        if( end - p < 2 )
   df5fc:	1aeb      	subs	r3, r5, r3
   df5fe:	2b01      	cmp	r3, #1
   df600:	dde2      	ble.n	df5c8 <mbedtls_ssl_psk_derive_premaster+0x2c>
            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

        *p++ = 0;
   df602:	2300      	movs	r3, #0
   df604:	f880 32f4 	strb.w	r3, [r0, #756]	; 0x2f4
        *p++ = 48;
   df608:	2330      	movs	r3, #48	; 0x30
   df60a:	f880 32f5 	strb.w	r3, [r0, #757]	; 0x2f5
        p += 48;
   df60e:	f200 3026 	addw	r0, r0, #806	; 0x326
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    /* opaque psk<0..2^16-1>; */
    if( end - p < 2 )
   df612:	1a2b      	subs	r3, r5, r0
   df614:	2b01      	cmp	r3, #1
   df616:	ddd7      	ble.n	df5c8 <mbedtls_ssl_psk_derive_premaster+0x2c>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    *(p++) = (unsigned char)( psk_len >> 8 );
   df618:	4603      	mov	r3, r0
   df61a:	0a22      	lsrs	r2, r4, #8
   df61c:	f803 2b02 	strb.w	r2, [r3], #2
    *(p++) = (unsigned char)( psk_len      );

    if( end < p || (size_t)( end - p ) < psk_len )
   df620:	429d      	cmp	r5, r3
    /* opaque psk<0..2^16-1>; */
    if( end - p < 2 )
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    *(p++) = (unsigned char)( psk_len >> 8 );
    *(p++) = (unsigned char)( psk_len      );
   df622:	7044      	strb	r4, [r0, #1]

    if( end < p || (size_t)( end - p ) < psk_len )
   df624:	d3d0      	bcc.n	df5c8 <mbedtls_ssl_psk_derive_premaster+0x2c>
   df626:	1aed      	subs	r5, r5, r3
   df628:	42a5      	cmp	r5, r4
   df62a:	d3cd      	bcc.n	df5c8 <mbedtls_ssl_psk_derive_premaster+0x2c>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    memcpy( p, psk, psk_len );
   df62c:	4622      	mov	r2, r4
   df62e:	4639      	mov	r1, r7
   df630:	4618      	mov	r0, r3
   df632:	f00a fa40 	bl	e9ab6 <memcpy>
    p += psk_len;

    ssl->handshake->pmslen = p - ssl->handshake->premaster;
   df636:	6b32      	ldr	r2, [r6, #48]	; 0x30
   df638:	4404      	add	r4, r0
   df63a:	f502 733d 	add.w	r3, r2, #756	; 0x2f4
   df63e:	1ae4      	subs	r4, r4, r3
   df640:	f8c2 42b0 	str.w	r4, [r2, #688]	; 0x2b0

    return( 0 );
   df644:	2000      	movs	r0, #0
   df646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    else
#endif /* MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED */
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   df64a:	4802      	ldr	r0, [pc, #8]	; (df654 <mbedtls_ssl_psk_derive_premaster+0xb8>)
    p += psk_len;

    ssl->handshake->pmslen = p - ssl->handshake->premaster;

    return( 0 );
}
   df64c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   df650:	ffff8f00 	.word	0xffff8f00
   df654:	ffff9400 	.word	0xffff9400

000df658 <mbedtls_ssl_fetch_input>:
 *
 * For DTLS, it is up to the caller to set ssl->next_record_offset when
 * they're done reading a record.
 */
int mbedtls_ssl_fetch_input( mbedtls_ssl_context *ssl, size_t nb_want )
{
   df658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret;
    size_t len;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> fetch input" ) );

    if( ssl->f_recv == NULL && ssl->f_recv_timeout == NULL )
   df65a:	6943      	ldr	r3, [r0, #20]
 *
 * For DTLS, it is up to the caller to set ssl->next_record_offset when
 * they're done reading a record.
 */
int mbedtls_ssl_fetch_input( mbedtls_ssl_context *ssl, size_t nb_want )
{
   df65c:	4604      	mov	r4, r0
   df65e:	460e      	mov	r6, r1
    int ret;
    size_t len;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> fetch input" ) );

    if( ssl->f_recv == NULL && ssl->f_recv_timeout == NULL )
   df660:	b90b      	cbnz	r3, df666 <mbedtls_ssl_fetch_input+0xe>
   df662:	6983      	ldr	r3, [r0, #24]
   df664:	b19b      	cbz	r3, df68e <mbedtls_ssl_fetch_input+0x36>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
                            "or mbedtls_ssl_set_bio()" ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
    }

    if( nb_want > MBEDTLS_SSL_IN_BUFFER_LEN - (size_t)( ssl->in_hdr - ssl->in_buf ) )
   df666:	6da3      	ldr	r3, [r4, #88]	; 0x58
   df668:	6d22      	ldr	r2, [r4, #80]	; 0x50
   df66a:	1a9b      	subs	r3, r3, r2
   df66c:	f5c3 5300 	rsb	r3, r3, #8192	; 0x2000
   df670:	332d      	adds	r3, #45	; 0x2d
   df672:	42b3      	cmp	r3, r6
   df674:	d30b      	bcc.n	df68e <mbedtls_ssl_fetch_input+0x36>
#endif
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
                       ssl->in_left, nb_want ) );

        while( ssl->in_left < nb_want )
   df676:	6f65      	ldr	r5, [r4, #116]	; 0x74
   df678:	42ae      	cmp	r6, r5
   df67a:	d90a      	bls.n	df692 <mbedtls_ssl_fetch_input+0x3a>
/*
 * Return -1 is timer is expired, 0 if it isn't.
 */
static int ssl_check_timer( mbedtls_ssl_context *ssl )
{
    if( ssl->f_get_timer == NULL )
   df67c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
                       ssl->in_left, nb_want ) );

        while( ssl->in_left < nb_want )
        {
            len = nb_want - ssl->in_left;
   df67e:	1b75      	subs	r5, r6, r5
/*
 * Return -1 is timer is expired, 0 if it isn't.
 */
static int ssl_check_timer( mbedtls_ssl_context *ssl )
{
    if( ssl->f_get_timer == NULL )
   df680:	b14b      	cbz	r3, df696 <mbedtls_ssl_fetch_input+0x3e>
        return( 0 );

    if( ssl->f_get_timer( ssl->p_timer ) == 2 )
   df682:	6c60      	ldr	r0, [r4, #68]	; 0x44
   df684:	4798      	blx	r3
   df686:	2802      	cmp	r0, #2
   df688:	d105      	bne.n	df696 <mbedtls_ssl_fetch_input+0x3e>
        while( ssl->in_left < nb_want )
        {
            len = nb_want - ssl->in_left;

            if( ssl_check_timer( ssl ) != 0 )
                ret = MBEDTLS_ERR_SSL_TIMEOUT;
   df68a:	4812      	ldr	r0, [pc, #72]	; (df6d4 <mbedtls_ssl_fetch_input+0x7c>)
   df68c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    if( ssl->f_recv == NULL && ssl->f_recv_timeout == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
                            "or mbedtls_ssl_set_bio()" ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   df68e:	4812      	ldr	r0, [pc, #72]	; (df6d8 <mbedtls_ssl_fetch_input+0x80>)
   df690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        }
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= fetch input" ) );

    return( 0 );
   df692:	2000      	movs	r0, #0
   df694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

            if( ssl_check_timer( ssl ) != 0 )
                ret = MBEDTLS_ERR_SSL_TIMEOUT;
            else
            {
                if( ssl->f_recv_timeout != NULL )
   df696:	69a7      	ldr	r7, [r4, #24]
   df698:	6da1      	ldr	r1, [r4, #88]	; 0x58
   df69a:	6f60      	ldr	r0, [r4, #116]	; 0x74
   df69c:	b137      	cbz	r7, df6ac <mbedtls_ssl_fetch_input+0x54>
                {
                    ret = ssl->f_recv_timeout( ssl->p_bio,
                                               ssl->in_hdr + ssl->in_left, len,
                                               ssl->conf->read_timeout );
   df69e:	6823      	ldr	r3, [r4, #0]
                ret = MBEDTLS_ERR_SSL_TIMEOUT;
            else
            {
                if( ssl->f_recv_timeout != NULL )
                {
                    ret = ssl->f_recv_timeout( ssl->p_bio,
   df6a0:	4401      	add	r1, r0
   df6a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   df6a4:	69e0      	ldr	r0, [r4, #28]
   df6a6:	462a      	mov	r2, r5
   df6a8:	47b8      	blx	r7
   df6aa:	e004      	b.n	df6b6 <mbedtls_ssl_fetch_input+0x5e>
                                               ssl->in_hdr + ssl->in_left, len,
                                               ssl->conf->read_timeout );
                }
                else
                {
                    ret = ssl->f_recv( ssl->p_bio,
   df6ac:	4401      	add	r1, r0
   df6ae:	6963      	ldr	r3, [r4, #20]
   df6b0:	69e0      	ldr	r0, [r4, #28]
   df6b2:	462a      	mov	r2, r5
   df6b4:	4798      	blx	r3

            MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
                                        ssl->in_left, nb_want ) );
            MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_recv(_timeout)", ret );

            if( ret == 0 )
   df6b6:	2800      	cmp	r0, #0
   df6b8:	d006      	beq.n	df6c8 <mbedtls_ssl_fetch_input+0x70>
                return( MBEDTLS_ERR_SSL_CONN_EOF );

            if( ret < 0 )
   df6ba:	db09      	blt.n	df6d0 <mbedtls_ssl_fetch_input+0x78>
                return( ret );

            if ( (size_t)ret > len || ( INT_MAX > SIZE_MAX && ret > SIZE_MAX ) )
   df6bc:	4285      	cmp	r5, r0
   df6be:	d305      	bcc.n	df6cc <mbedtls_ssl_fetch_input+0x74>
                    ( "f_recv returned %d bytes but only %lu were requested",
                    ret, (unsigned long)len ) );
                return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
            }

            ssl->in_left += ret;
   df6c0:	6f63      	ldr	r3, [r4, #116]	; 0x74
   df6c2:	4418      	add	r0, r3
   df6c4:	6760      	str	r0, [r4, #116]	; 0x74
   df6c6:	e7d6      	b.n	df676 <mbedtls_ssl_fetch_input+0x1e>
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
                                        ssl->in_left, nb_want ) );
            MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_recv(_timeout)", ret );

            if( ret == 0 )
                return( MBEDTLS_ERR_SSL_CONN_EOF );
   df6c8:	4804      	ldr	r0, [pc, #16]	; (df6dc <mbedtls_ssl_fetch_input+0x84>)
   df6ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if ( (size_t)ret > len || ( INT_MAX > SIZE_MAX && ret > SIZE_MAX ) )
            {
                MBEDTLS_SSL_DEBUG_MSG( 1,
                    ( "f_recv returned %d bytes but only %lu were requested",
                    ret, (unsigned long)len ) );
                return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   df6cc:	4804      	ldr	r0, [pc, #16]	; (df6e0 <mbedtls_ssl_fetch_input+0x88>)
   df6ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= fetch input" ) );

    return( 0 );
}
   df6d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   df6d2:	bf00      	nop
   df6d4:	ffff9800 	.word	0xffff9800
   df6d8:	ffff8f00 	.word	0xffff8f00
   df6dc:	ffff8d80 	.word	0xffff8d80
   df6e0:	ffff9400 	.word	0xffff9400

000df6e4 <mbedtls_ssl_flush_output>:

/*
 * Flush any data not yet written
 */
int mbedtls_ssl_flush_output( mbedtls_ssl_context *ssl )
{
   df6e4:	b538      	push	{r3, r4, r5, lr}
    int ret;
    unsigned char *buf;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> flush output" ) );

    if( ssl->f_send == NULL )
   df6e6:	6903      	ldr	r3, [r0, #16]

/*
 * Flush any data not yet written
 */
int mbedtls_ssl_flush_output( mbedtls_ssl_context *ssl )
{
   df6e8:	4605      	mov	r5, r0
    int ret;
    unsigned char *buf;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> flush output" ) );

    if( ssl->f_send == NULL )
   df6ea:	b30b      	cbz	r3, df730 <mbedtls_ssl_flush_output+0x4c>
                            "or mbedtls_ssl_set_bio()" ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
    }

    /* Avoid incrementing counter if data is flushed */
    if( ssl->out_left == 0 )
   df6ec:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   df6f0:	b308      	cbz	r0, df736 <mbedtls_ssl_flush_output+0x52>
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= flush output" ) );
        return( 0 );
    }

    while( ssl->out_left > 0 )
   df6f2:	f8d5 40a4 	ldr.w	r4, [r5, #164]	; 0xa4
   df6f6:	b184      	cbz	r4, df71a <mbedtls_ssl_flush_output+0x36>
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "message length: %d, out_left: %d",
                       mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen, ssl->out_left ) );

        buf = ssl->out_hdr - ssl->out_left;
        ret = ssl->f_send( ssl->p_bio, buf, ssl->out_left );
   df6f8:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
   df6fc:	692b      	ldr	r3, [r5, #16]
   df6fe:	69e8      	ldr	r0, [r5, #28]
   df700:	4622      	mov	r2, r4
   df702:	1b09      	subs	r1, r1, r4
   df704:	4798      	blx	r3

        MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_send", ret );

        if( ret <= 0 )
   df706:	2800      	cmp	r0, #0
   df708:	dd15      	ble.n	df736 <mbedtls_ssl_flush_output+0x52>
            return( ret );

        if( (size_t)ret > ssl->out_left || ( INT_MAX > SIZE_MAX && ret > SIZE_MAX ) )
   df70a:	f8d5 20a4 	ldr.w	r2, [r5, #164]	; 0xa4
   df70e:	4282      	cmp	r2, r0
   df710:	d310      	bcc.n	df734 <mbedtls_ssl_flush_output+0x50>
                ( "f_send returned %d bytes but only %lu bytes were sent",
                ret, (unsigned long)ssl->out_left ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        ssl->out_left -= ret;
   df712:	1a10      	subs	r0, r2, r0
   df714:	f8c5 00a4 	str.w	r0, [r5, #164]	; 0xa4
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= flush output" ) );
        return( 0 );
    }

    while( ssl->out_left > 0 )
   df718:	e7eb      	b.n	df6f2 <mbedtls_ssl_flush_output+0xe>
        ssl->out_hdr = ssl->out_buf;
    }
    else
#endif
    {
        ssl->out_hdr = ssl->out_buf + 8;
   df71a:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
    }
    ssl_update_out_pointers( ssl, ssl->transform_out );
   df71e:	6ba9      	ldr	r1, [r5, #56]	; 0x38
        ssl->out_hdr = ssl->out_buf;
    }
    else
#endif
    {
        ssl->out_hdr = ssl->out_buf + 8;
   df720:	3308      	adds	r3, #8
    }
    ssl_update_out_pointers( ssl, ssl->transform_out );
   df722:	4628      	mov	r0, r5
        ssl->out_hdr = ssl->out_buf;
    }
    else
#endif
    {
        ssl->out_hdr = ssl->out_buf + 8;
   df724:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
    }
    ssl_update_out_pointers( ssl, ssl->transform_out );
   df728:	f7ff fc1c 	bl	def64 <_ZL23ssl_update_out_pointersP19mbedtls_ssl_contextP21mbedtls_ssl_transform>
   df72c:	4620      	mov	r0, r4
   df72e:	bd38      	pop	{r3, r4, r5, pc}

    if( ssl->f_send == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
                            "or mbedtls_ssl_set_bio()" ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   df730:	4801      	ldr	r0, [pc, #4]	; (df738 <mbedtls_ssl_flush_output+0x54>)
   df732:	bd38      	pop	{r3, r4, r5, pc}
        if( (size_t)ret > ssl->out_left || ( INT_MAX > SIZE_MAX && ret > SIZE_MAX ) )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1,
                ( "f_send returned %d bytes but only %lu bytes were sent",
                ret, (unsigned long)ssl->out_left ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   df734:	4801      	ldr	r0, [pc, #4]	; (df73c <mbedtls_ssl_flush_output+0x58>)
    ssl_update_out_pointers( ssl, ssl->transform_out );

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= flush output" ) );

    return( 0 );
}
   df736:	bd38      	pop	{r3, r4, r5, pc}
   df738:	ffff8f00 	.word	0xffff8f00
   df73c:	ffff9400 	.word	0xffff9400

000df740 <mbedtls_ssl_write_record>:
 *  - ssl->out_msgtype: type of the message (AppData, Handshake, Alert, CCS)
 *  - ssl->out_msglen: length of the record content (excl headers)
 *  - ssl->out_msg: record content
 */
int mbedtls_ssl_write_record( mbedtls_ssl_context *ssl, uint8_t force_flush )
{
   df740:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if( !done )
    {
        unsigned i;
        size_t protected_record_size;

        ssl->out_hdr[0] = (unsigned char) ssl->out_msgtype;
   df744:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 *  - ssl->out_msg: record content
 */
int mbedtls_ssl_write_record( mbedtls_ssl_context *ssl, uint8_t force_flush )
{
    int ret, done = 0;
    size_t len = ssl->out_msglen;
   df748:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
 *  - ssl->out_msgtype: type of the message (AppData, Handshake, Alert, CCS)
 *  - ssl->out_msglen: length of the record content (excl headers)
 *  - ssl->out_msg: record content
 */
int mbedtls_ssl_write_record( mbedtls_ssl_context *ssl, uint8_t force_flush )
{
   df74c:	460f      	mov	r7, r1
    if( !done )
    {
        unsigned i;
        size_t protected_record_size;

        ssl->out_hdr[0] = (unsigned char) ssl->out_msgtype;
   df74e:	f8d0 109c 	ldr.w	r1, [r0, #156]	; 0x9c
   df752:	7011      	strb	r1, [r2, #0]
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
                           ssl->conf->transport, ssl->out_hdr + 1 );
   df754:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
    {
        unsigned i;
        size_t protected_record_size;

        ssl->out_hdr[0] = (unsigned char) ssl->out_msgtype;
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
   df758:	68c1      	ldr	r1, [r0, #12]
 *  - ssl->out_msgtype: type of the message (AppData, Handshake, Alert, CCS)
 *  - ssl->out_msglen: length of the record content (excl headers)
 *  - ssl->out_msg: record content
 */
int mbedtls_ssl_write_record( mbedtls_ssl_context *ssl, uint8_t force_flush )
{
   df75a:	4604      	mov	r4, r0
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
   df75c:	6880      	ldr	r0, [r0, #8]
   df75e:	7050      	strb	r0, [r2, #1]
        ver[1] = (unsigned char) minor;
   df760:	7091      	strb	r1, [r2, #2]

        ssl->out_hdr[0] = (unsigned char) ssl->out_msgtype;
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
                           ssl->conf->transport, ssl->out_hdr + 1 );

        memcpy( ssl->out_ctr, ssl->cur_out_ctr, 8 );
   df762:	4626      	mov	r6, r4
   df764:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
   df768:	f856 2fa8 	ldr.w	r2, [r6, #168]!
   df76c:	600a      	str	r2, [r1, #0]
   df76e:	6872      	ldr	r2, [r6, #4]
   df770:	604a      	str	r2, [r1, #4]
        ssl->out_len[0] = (unsigned char)( len >> 8 );
   df772:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   df776:	0a19      	lsrs	r1, r3, #8
   df778:	7011      	strb	r1, [r2, #0]
        ssl->out_len[1] = (unsigned char)( len      );
   df77a:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   df77e:	7053      	strb	r3, [r2, #1]

        if( ssl->transform_out != NULL )
   df780:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 *  - ssl->out_msgtype: type of the message (AppData, Handshake, Alert, CCS)
 *  - ssl->out_msglen: length of the record content (excl headers)
 *  - ssl->out_msg: record content
 */
int mbedtls_ssl_write_record( mbedtls_ssl_context *ssl, uint8_t force_flush )
{
   df782:	b091      	sub	sp, #68	; 0x44

        memcpy( ssl->out_ctr, ssl->cur_out_ctr, 8 );
        ssl->out_len[0] = (unsigned char)( len >> 8 );
        ssl->out_len[1] = (unsigned char)( len      );

        if( ssl->transform_out != NULL )
   df784:	2d00      	cmp	r5, #0
   df786:	f000 8095 	beq.w	df8b4 <mbedtls_ssl_write_record+0x174>
    mbedtls_cipher_mode_t mode;
    int auth_done = 0;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> encrypt buf" ) );

    if( ssl->session_out == NULL || ssl->transform_out == NULL )
   df78a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   df78c:	2b00      	cmp	r3, #0
   df78e:	f000 80ac 	beq.w	df8ea <mbedtls_ssl_write_record+0x1aa>
   df792:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 */
static inline mbedtls_cipher_mode_t mbedtls_cipher_get_cipher_mode(
    const mbedtls_cipher_context_t *ctx )
{
    MBEDTLS_INTERNAL_VALIDATE_RET( ctx != NULL, MBEDTLS_MODE_NONE );
    if( ctx->cipher_info == NULL )
   df794:	2b00      	cmp	r3, #0
   df796:	f000 80a8 	beq.w	df8ea <mbedtls_ssl_write_record+0x1aa>
        return MBEDTLS_MODE_NONE;

    return ctx->cipher_info->mode;
   df79a:	785b      	ldrb	r3, [r3, #1]
    else
#endif /* MBEDTLS_ARC4_C || MBEDTLS_CIPHER_NULL_CIPHER */
#if defined(MBEDTLS_GCM_C) || \
    defined(MBEDTLS_CCM_C) || \
    defined(MBEDTLS_CHACHAPOLY_C)
    if( mode == MBEDTLS_MODE_GCM ||
   df79c:	2b06      	cmp	r3, #6
   df79e:	d004      	beq.n	df7aa <mbedtls_ssl_write_record+0x6a>
   df7a0:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   df7a4:	2b08      	cmp	r3, #8
   df7a6:	f040 80a0 	bne.w	df8ea <mbedtls_ssl_write_record+0x1aa>
        size_t enc_msglen, olen;
        unsigned char *enc_msg;
        unsigned char add_data[13];
        unsigned char iv[12];
        mbedtls_ssl_transform *transform = ssl->transform_out;
        unsigned char taglen = transform->ciphersuite_info->flags &
   df7aa:	682b      	ldr	r3, [r5, #0]
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
        size_t explicit_ivlen = transform->ivlen - transform->fixed_ivlen;
   df7ac:	68ea      	ldr	r2, [r5, #12]
        unsigned char *enc_msg;
        unsigned char add_data[13];
        unsigned char iv[12];
        mbedtls_ssl_transform *transform = ssl->transform_out;
        unsigned char taglen = transform->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
   df7ae:	7f1b      	ldrb	r3, [r3, #28]
        size_t explicit_ivlen = transform->ivlen - transform->fixed_ivlen;
   df7b0:	f8d5 c010 	ldr.w	ip, [r5, #16]
        unsigned char *enc_msg;
        unsigned char add_data[13];
        unsigned char iv[12];
        mbedtls_ssl_transform *transform = ssl->transform_out;
        unsigned char taglen = transform->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
   df7b4:	f013 0f02 	tst.w	r3, #2
        size_t explicit_ivlen = transform->ivlen - transform->fixed_ivlen;

        /*
         * Prepare additional authenticated data
         */
        memcpy( add_data, ssl->out_ctr, 8 );
   df7b8:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   df7bc:	6818      	ldr	r0, [r3, #0]
   df7be:	6859      	ldr	r1, [r3, #4]
   df7c0:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
   df7c4:	e8ae 0003 	stmia.w	lr!, {r0, r1}
        add_data[8]  = ssl->out_msgtype;
   df7c8:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
   df7cc:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
   df7d0:	68e1      	ldr	r1, [r4, #12]
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
        ver[1] = (unsigned char) minor;
   df7d2:	f88d 103a 	strb.w	r1, [sp, #58]	; 0x3a
         */
        memcpy( add_data, ssl->out_ctr, 8 );
        add_data[8]  = ssl->out_msgtype;
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
                           ssl->conf->transport, add_data + 9 );
        add_data[11] = ( ssl->out_msglen >> 8 ) & 0xFF;
   df7d6:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
   df7da:	68a0      	ldr	r0, [r4, #8]
   df7dc:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
         */
        memcpy( add_data, ssl->out_ctr, 8 );
        add_data[8]  = ssl->out_msgtype;
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
                           ssl->conf->transport, add_data + 9 );
        add_data[11] = ( ssl->out_msglen >> 8 ) & 0xFF;
   df7e0:	ea4f 2011 	mov.w	r0, r1, lsr #8
   df7e4:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
        add_data[12] = ssl->out_msglen & 0xFF;
   df7e8:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data for AEAD", add_data, 13 );

        /*
         * Generate IV
         */
        if( transform->ivlen == 12 && transform->fixed_ivlen == 4 )
   df7ec:	68e9      	ldr	r1, [r5, #12]
        unsigned char *enc_msg;
        unsigned char add_data[13];
        unsigned char iv[12];
        mbedtls_ssl_transform *transform = ssl->transform_out;
        unsigned char taglen = transform->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
   df7ee:	bf14      	ite	ne
   df7f0:	f04f 0808 	movne.w	r8, #8
   df7f4:	f04f 0810 	moveq.w	r8, #16
        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data for AEAD", add_data, 13 );

        /*
         * Generate IV
         */
        if( transform->ivlen == 12 && transform->fixed_ivlen == 4 )
   df7f8:	290c      	cmp	r1, #12
   df7fa:	d176      	bne.n	df8ea <mbedtls_ssl_write_record+0x1aa>
   df7fc:	f1bc 0f04 	cmp.w	ip, #4
   df800:	d10e      	bne.n	df820 <mbedtls_ssl_write_record+0xe0>
        {
            /* GCM and CCM: fixed || explicit (=seqnum) */
            memcpy( iv, transform->iv_enc, transform->fixed_ivlen );
   df802:	69a8      	ldr	r0, [r5, #24]
   df804:	9009      	str	r0, [sp, #36]	; 0x24
            memcpy( iv + transform->fixed_ivlen, ssl->out_ctr, 8 );
   df806:	6818      	ldr	r0, [r3, #0]
   df808:	6859      	ldr	r1, [r3, #4]
   df80a:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
   df80e:	e8ae 0003 	stmia.w	lr!, {r0, r1}
            memcpy( ssl->out_iv, ssl->out_ctr, 8 );
   df812:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   df816:	6819      	ldr	r1, [r3, #0]
   df818:	6001      	str	r1, [r0, #0]
   df81a:	6859      	ldr	r1, [r3, #4]
   df81c:	6041      	str	r1, [r0, #4]
   df81e:	e01c      	b.n	df85a <mbedtls_ssl_write_record+0x11a>

        }
        else if( transform->ivlen == 12 && transform->fixed_ivlen == 12 )
   df820:	f1bc 0f0c 	cmp.w	ip, #12
   df824:	d161      	bne.n	df8ea <mbedtls_ssl_write_record+0x1aa>
        {
            /* ChachaPoly: fixed XOR sequence number */
            unsigned char i;

            memcpy( iv, transform->iv_enc, transform->fixed_ivlen );
   df826:	46a9      	mov	r9, r5
   df828:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
   df82c:	f859 0f18 	ldr.w	r0, [r9, #24]!
   df830:	f8d9 1004 	ldr.w	r1, [r9, #4]
   df834:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   df838:	f8d9 0008 	ldr.w	r0, [r9, #8]
   df83c:	f8ce 0000 	str.w	r0, [lr]
   df840:	1e59      	subs	r1, r3, #1
   df842:	a80a      	add	r0, sp, #40	; 0x28
   df844:	3307      	adds	r3, #7

            for( i = 0; i < 8; i++ )
                iv[i+4] ^= ssl->out_ctr[i];
   df846:	f811 ef01 	ldrb.w	lr, [r1, #1]!
   df84a:	f890 9000 	ldrb.w	r9, [r0]
            /* ChachaPoly: fixed XOR sequence number */
            unsigned char i;

            memcpy( iv, transform->iv_enc, transform->fixed_ivlen );

            for( i = 0; i < 8; i++ )
   df84e:	428b      	cmp	r3, r1
                iv[i+4] ^= ssl->out_ctr[i];
   df850:	ea89 0e0e 	eor.w	lr, r9, lr
   df854:	f800 eb01 	strb.w	lr, [r0], #1
            /* ChachaPoly: fixed XOR sequence number */
            unsigned char i;

            memcpy( iv, transform->iv_enc, transform->fixed_ivlen );

            for( i = 0; i < 8; i++ )
   df858:	d1f5      	bne.n	df846 <mbedtls_ssl_write_record+0x106>

        /*
         * Fix message length with added IV
         */
        enc_msg = ssl->out_msg;
        enc_msglen = ssl->out_msglen;
   df85a:	f8d4 90a0 	ldr.w	r9, [r4, #160]	; 0xa0
                                  ssl->out_iv, explicit_ivlen );

        /*
         * Fix message length with added IV
         */
        enc_msg = ssl->out_msg;
   df85e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
                                    ssl->out_msglen ) );

        /*
         * Encrypt and authenticate
         */
        if( ( ret = mbedtls_cipher_auth_encrypt( &transform->cipher_ctx_enc,
   df862:	9303      	str	r3, [sp, #12]
        /*
         * Fix message length with added IV
         */
        enc_msg = ssl->out_msg;
        enc_msglen = ssl->out_msglen;
        ssl->out_msglen += explicit_ivlen;
   df864:	444a      	add	r2, r9
   df866:	ebcc 0202 	rsb	r2, ip, r2
   df86a:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
                                    ssl->out_msglen ) );

        /*
         * Encrypt and authenticate
         */
        if( ( ret = mbedtls_cipher_auth_encrypt( &transform->cipher_ctx_enc,
   df86e:	eb03 0209 	add.w	r2, r3, r9
   df872:	9205      	str	r2, [sp, #20]
   df874:	9301      	str	r3, [sp, #4]
   df876:	aa08      	add	r2, sp, #32
   df878:	230d      	movs	r3, #13
   df87a:	9300      	str	r3, [sp, #0]
   df87c:	f8cd 8018 	str.w	r8, [sp, #24]
   df880:	9204      	str	r2, [sp, #16]
   df882:	f8cd 9008 	str.w	r9, [sp, #8]
   df886:	ab0c      	add	r3, sp, #48	; 0x30
   df888:	68ea      	ldr	r2, [r5, #12]
   df88a:	a909      	add	r1, sp, #36	; 0x24
   df88c:	f105 0050 	add.w	r0, r5, #80	; 0x50
   df890:	f7f6 fd38 	bl	d6304 <mbedtls_cipher_auth_encrypt>
   df894:	bb90      	cbnz	r0, df8fc <mbedtls_ssl_write_record+0x1bc>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_auth_encrypt", ret );
            return( ret );
        }

        if( olen != enc_msglen )
   df896:	9b08      	ldr	r3, [sp, #32]
   df898:	4599      	cmp	r9, r3
   df89a:	d126      	bne.n	df8ea <mbedtls_ssl_write_record+0x1aa>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        ssl->out_msglen += taglen;
   df89c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
                MBEDTLS_SSL_DEBUG_RET( 1, "ssl_encrypt_buf", ret );
                return( ret );
            }

            len = ssl->out_msglen;
            ssl->out_len[0] = (unsigned char)( len >> 8 );
   df8a0:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        ssl->out_msglen += taglen;
   df8a4:	4443      	add	r3, r8
                MBEDTLS_SSL_DEBUG_RET( 1, "ssl_encrypt_buf", ret );
                return( ret );
            }

            len = ssl->out_msglen;
            ssl->out_len[0] = (unsigned char)( len >> 8 );
   df8a6:	0a19      	lsrs	r1, r3, #8
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        ssl->out_msglen += taglen;
   df8a8:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
                MBEDTLS_SSL_DEBUG_RET( 1, "ssl_encrypt_buf", ret );
                return( ret );
            }

            len = ssl->out_msglen;
            ssl->out_len[0] = (unsigned char)( len >> 8 );
   df8ac:	7011      	strb	r1, [r2, #0]
            ssl->out_len[1] = (unsigned char)( len      );
   df8ae:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   df8b2:	7053      	strb	r3, [r2, #1]
                                    ssl->out_hdr[2], len ) );

        MBEDTLS_SSL_DEBUG_BUF( 4, "output record sent to network",
                               ssl->out_hdr, protected_record_size );

        ssl->out_left += protected_record_size;
   df8b4:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
        ssl->out_hdr  += protected_record_size;
        ssl_update_out_pointers( ssl, ssl->transform_out );
   df8b8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
            len = ssl->out_msglen;
            ssl->out_len[0] = (unsigned char)( len >> 8 );
            ssl->out_len[1] = (unsigned char)( len      );
        }

        protected_record_size = len + mbedtls_ssl_hdr_len( ssl );
   df8ba:	3305      	adds	r3, #5
                                    ssl->out_hdr[2], len ) );

        MBEDTLS_SSL_DEBUG_BUF( 4, "output record sent to network",
                               ssl->out_hdr, protected_record_size );

        ssl->out_left += protected_record_size;
   df8bc:	441a      	add	r2, r3
   df8be:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
        ssl->out_hdr  += protected_record_size;
   df8c2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   df8c6:	4413      	add	r3, r2
   df8c8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        ssl_update_out_pointers( ssl, ssl->transform_out );
   df8cc:	4620      	mov	r0, r4
   df8ce:	f7ff fb49 	bl	def64 <_ZL23ssl_update_out_pointersP19mbedtls_ssl_contextP21mbedtls_ssl_transform>
   df8d2:	f104 02b0 	add.w	r2, r4, #176	; 0xb0

        for( i = 8; i > ssl_ep_len( ssl ); i-- )
            if( ++ssl->cur_out_ctr[i - 1] != 0 )
   df8d6:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
   df8da:	3301      	adds	r3, #1
   df8dc:	b2db      	uxtb	r3, r3
   df8de:	7013      	strb	r3, [r2, #0]
   df8e0:	b92b      	cbnz	r3, df8ee <mbedtls_ssl_write_record+0x1ae>

        ssl->out_left += protected_record_size;
        ssl->out_hdr  += protected_record_size;
        ssl_update_out_pointers( ssl, ssl->transform_out );

        for( i = 8; i > ssl_ep_len( ssl ); i-- )
   df8e2:	4296      	cmp	r6, r2
   df8e4:	d1f7      	bne.n	df8d6 <mbedtls_ssl_write_record+0x196>

        /* The loop goes to its end iff the counter is wrapping */
        if( i == ssl_ep_len( ssl ) )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "outgoing message counter would wrap" ) );
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
   df8e6:	4807      	ldr	r0, [pc, #28]	; (df904 <mbedtls_ssl_write_record+0x1c4>)
   df8e8:	e008      	b.n	df8fc <mbedtls_ssl_write_record+0x1bc>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> encrypt buf" ) );

    if( ssl->session_out == NULL || ssl->transform_out == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   df8ea:	4807      	ldr	r0, [pc, #28]	; (df908 <mbedtls_ssl_write_record+0x1c8>)
   df8ec:	e006      	b.n	df8fc <mbedtls_ssl_write_record+0x1bc>
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "Still %u bytes available in current datagram", (unsigned) remaining ) );
        }
    }
#endif /* MBEDTLS_SSL_PROTO_DTLS */

    if( ( flush == SSL_FORCE_FLUSH ) &&
   df8ee:	2f01      	cmp	r7, #1
   df8f0:	d103      	bne.n	df8fa <mbedtls_ssl_write_record+0x1ba>
        ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
   df8f2:	4620      	mov	r0, r4
   df8f4:	f7ff fef6 	bl	df6e4 <mbedtls_ssl_flush_output>
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "Still %u bytes available in current datagram", (unsigned) remaining ) );
        }
    }
#endif /* MBEDTLS_SSL_PROTO_DTLS */

    if( ( flush == SSL_FORCE_FLUSH ) &&
   df8f8:	b900      	cbnz	r0, df8fc <mbedtls_ssl_write_record+0x1bc>
        return( ret );
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write record" ) );

    return( 0 );
   df8fa:	2000      	movs	r0, #0
}
   df8fc:	b011      	add	sp, #68	; 0x44
   df8fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   df902:	bf00      	nop
   df904:	ffff9480 	.word	0xffff9480
   df908:	ffff9400 	.word	0xffff9400

000df90c <mbedtls_ssl_write_handshake_msg>:
 *   - ssl->out_msglen: the length of the record contents
 *      (including handshake headers but excluding record headers)
 *   - ssl->out_msg: the record contents (handshake headers + content)
 */
int mbedtls_ssl_write_handshake_msg( mbedtls_ssl_context *ssl )
{
   df90c:	b538      	push	{r3, r4, r5, lr}
   df90e:	4604      	mov	r4, r0
    int ret;
    const size_t hs_len = ssl->out_msglen - 4;
    const unsigned char hs_type = ssl->out_msg[0];
   df910:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write handshake message" ) );

    /*
     * Sanity checks
     */
    if( ssl->out_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE          &&
   df914:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 *   - ssl->out_msg: the record contents (handshake headers + content)
 */
int mbedtls_ssl_write_handshake_msg( mbedtls_ssl_context *ssl )
{
    int ret;
    const size_t hs_len = ssl->out_msglen - 4;
   df918:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    const unsigned char hs_type = ssl->out_msg[0];
   df91c:	7808      	ldrb	r0, [r1, #0]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write handshake message" ) );

    /*
     * Sanity checks
     */
    if( ssl->out_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE          &&
   df91e:	2a16      	cmp	r2, #22
   df920:	d002      	beq.n	df928 <mbedtls_ssl_write_handshake_msg+0x1c>
   df922:	2a14      	cmp	r2, #20
   df924:	d001      	beq.n	df92a <mbedtls_ssl_write_handshake_msg+0x1e>
   df926:	e024      	b.n	df972 <mbedtls_ssl_write_handshake_msg+0x66>
    }

    /* Whenever we send anything different from a
     * HelloRequest we should be in a handshake - double check. */
    if( ! ( ssl->out_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE &&
            hs_type          == MBEDTLS_SSL_HS_HELLO_REQUEST ) &&
   df928:	b300      	cbz	r0, df96c <mbedtls_ssl_write_handshake_msg+0x60>
   df92a:	6b25      	ldr	r5, [r4, #48]	; 0x30
   df92c:	b30d      	cbz	r5, df972 <mbedtls_ssl_write_handshake_msg+0x66>
     * writing functions must obey the bounds of the
     * outgoing record buffer, but better be safe.
     *
     * Note: We deliberately do not check for the MTU or MFL here.
     */
    if( ssl->out_msglen > MBEDTLS_SSL_OUT_CONTENT_LEN )
   df92e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   df932:	d81e      	bhi.n	df972 <mbedtls_ssl_write_handshake_msg+0x66>
    }

    /*
     * Fill handshake headers
     */
    if( ssl->out_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
   df934:	2a16      	cmp	r2, #22
   df936:	d113      	bne.n	df960 <mbedtls_ssl_write_handshake_msg+0x54>
 *   - ssl->out_msg: the record contents (handshake headers + content)
 */
int mbedtls_ssl_write_handshake_msg( mbedtls_ssl_context *ssl )
{
    int ret;
    const size_t hs_len = ssl->out_msglen - 4;
   df938:	3b04      	subs	r3, #4
    /*
     * Fill handshake headers
     */
    if( ssl->out_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
    {
        ssl->out_msg[1] = (unsigned char)( hs_len >> 16 );
   df93a:	0c1a      	lsrs	r2, r3, #16
   df93c:	704a      	strb	r2, [r1, #1]
        ssl->out_msg[2] = (unsigned char)( hs_len >>  8 );
   df93e:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   df942:	0a19      	lsrs	r1, r3, #8
   df944:	7091      	strb	r1, [r2, #2]
        ssl->out_msg[3] = (unsigned char)( hs_len       );
   df946:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   df94a:	70d3      	strb	r3, [r2, #3]
            memcpy( ssl->out_msg + 9, ssl->out_msg + 1, 3 );
        }
#endif /* MBEDTLS_SSL_PROTO_DTLS */

        /* Update running hashes of handshake messages seen */
        if( hs_type != MBEDTLS_SSL_HS_HELLO_REQUEST )
   df94c:	b140      	cbz	r0, df960 <mbedtls_ssl_write_handshake_msg+0x54>
            ssl->handshake->update_checksum( ssl, ssl->out_msg, ssl->out_msglen );
   df94e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   df950:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   df954:	f8d3 32a0 	ldr.w	r3, [r3, #672]	; 0x2a0
   df958:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
   df95c:	4620      	mov	r0, r4
   df95e:	4798      	blx	r3
        }
    }
    else
#endif
    {
        if( ( ret = mbedtls_ssl_write_record( ssl, SSL_FORCE_FLUSH ) ) != 0 )
   df960:	4620      	mov	r0, r4
   df962:	2101      	movs	r1, #1
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write handshake message" ) );

    return( 0 );
}
   df964:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        }
    }
    else
#endif
    {
        if( ( ret = mbedtls_ssl_write_record( ssl, SSL_FORCE_FLUSH ) ) != 0 )
   df968:	f7ff beea 	b.w	df740 <mbedtls_ssl_write_record>
     * writing functions must obey the bounds of the
     * outgoing record buffer, but better be safe.
     *
     * Note: We deliberately do not check for the MTU or MFL here.
     */
    if( ssl->out_msglen > MBEDTLS_SSL_OUT_CONTENT_LEN )
   df96c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   df970:	d9e2      	bls.n	df938 <mbedtls_ssl_write_handshake_msg+0x2c>
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write handshake message" ) );

    return( 0 );
}
   df972:	4801      	ldr	r0, [pc, #4]	; (df978 <mbedtls_ssl_write_handshake_msg+0x6c>)
   df974:	bd38      	pop	{r3, r4, r5, pc}
   df976:	bf00      	nop
   df978:	ffff9400 	.word	0xffff9400

000df97c <mbedtls_ssl_prepare_handshake_record>:
            ( ssl->in_msg[2] << 8  ) |
              ssl->in_msg[3] );
}

int mbedtls_ssl_prepare_handshake_record( mbedtls_ssl_context *ssl )
{
   df97c:	b510      	push	{r4, lr}
    if( ssl->in_msglen < mbedtls_ssl_hs_hdr_len( ssl ) )
   df97e:	6f04      	ldr	r4, [r0, #112]	; 0x70
   df980:	2c03      	cmp	r4, #3
   df982:	d90f      	bls.n	df9a4 <mbedtls_ssl_prepare_handshake_record+0x28>
   df984:	6e41      	ldr	r1, [r0, #100]	; 0x64
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "handshake message too short: %d",
                            ssl->in_msglen ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    ssl->in_hslen = mbedtls_ssl_hs_hdr_len( ssl ) + ssl_get_hs_total_len( ssl );
   df986:	788a      	ldrb	r2, [r1, #2]
   df988:	784b      	ldrb	r3, [r1, #1]
   df98a:	0212      	lsls	r2, r2, #8
   df98c:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   df990:	78ca      	ldrb	r2, [r1, #3]
   df992:	4313      	orrs	r3, r2
   df994:	3304      	adds	r3, #4
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "TLS handshake fragmentation not supported" ) );
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
    }

    return( 0 );
   df996:	4a04      	ldr	r2, [pc, #16]	; (df9a8 <mbedtls_ssl_prepare_handshake_record+0x2c>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "handshake message too short: %d",
                            ssl->in_msglen ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    ssl->in_hslen = mbedtls_ssl_hs_hdr_len( ssl ) + ssl_get_hs_total_len( ssl );
   df998:	6783      	str	r3, [r0, #120]	; 0x78
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "TLS handshake fragmentation not supported" ) );
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
    }

    return( 0 );
   df99a:	429c      	cmp	r4, r3
   df99c:	bf34      	ite	cc
   df99e:	4610      	movcc	r0, r2
   df9a0:	2000      	movcs	r0, #0
   df9a2:	bd10      	pop	{r4, pc}
{
    if( ssl->in_msglen < mbedtls_ssl_hs_hdr_len( ssl ) )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "handshake message too short: %d",
                            ssl->in_msglen ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
   df9a4:	4801      	ldr	r0, [pc, #4]	; (df9ac <mbedtls_ssl_prepare_handshake_record+0x30>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "TLS handshake fragmentation not supported" ) );
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
    }

    return( 0 );
}
   df9a6:	bd10      	pop	{r4, pc}
   df9a8:	ffff8f80 	.word	0xffff8f80
   df9ac:	ffff8e00 	.word	0xffff8e00

000df9b0 <mbedtls_ssl_update_handshake_status>:

void mbedtls_ssl_update_handshake_status( mbedtls_ssl_context *ssl )
{
    mbedtls_ssl_handshake_params * const hs = ssl->handshake;

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER && hs != NULL )
   df9b0:	6842      	ldr	r2, [r0, #4]
   df9b2:	2a10      	cmp	r2, #16

    return( 0 );
}

void mbedtls_ssl_update_handshake_status( mbedtls_ssl_context *ssl )
{
   df9b4:	b410      	push	{r4}
    mbedtls_ssl_handshake_params * const hs = ssl->handshake;

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER && hs != NULL )
   df9b6:	d009      	beq.n	df9cc <mbedtls_ssl_update_handshake_status+0x1c>
    return( 0 );
}

void mbedtls_ssl_update_handshake_status( mbedtls_ssl_context *ssl )
{
    mbedtls_ssl_handshake_params * const hs = ssl->handshake;
   df9b8:	6b02      	ldr	r2, [r0, #48]	; 0x30

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER && hs != NULL )
   df9ba:	b13a      	cbz	r2, df9cc <mbedtls_ssl_update_handshake_status+0x1c>
    {
        ssl->handshake->update_checksum( ssl, ssl->in_msg, ssl->in_hslen );
   df9bc:	f8d2 42a0 	ldr.w	r4, [r2, #672]	; 0x2a0
   df9c0:	6e41      	ldr	r1, [r0, #100]	; 0x64
   df9c2:	6f82      	ldr	r2, [r0, #120]	; 0x78
   df9c4:	4623      	mov	r3, r4

        /* Create a fresh last entry */
        memset( hs_buf, 0, sizeof( mbedtls_ssl_hs_buffer ) );
    }
#endif
}
   df9c6:	f85d 4b04 	ldr.w	r4, [sp], #4
{
    mbedtls_ssl_handshake_params * const hs = ssl->handshake;

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER && hs != NULL )
    {
        ssl->handshake->update_checksum( ssl, ssl->in_msg, ssl->in_hslen );
   df9ca:	4718      	bx	r3

        /* Create a fresh last entry */
        memset( hs_buf, 0, sizeof( mbedtls_ssl_hs_buffer ) );
    }
#endif
}
   df9cc:	f85d 4b04 	ldr.w	r4, [sp], #4
   df9d0:	4770      	bx	lr
	...

000df9d4 <mbedtls_ssl_handle_message_type>:

    return( 0 );
}

int mbedtls_ssl_handle_message_type( mbedtls_ssl_context *ssl )
{
   df9d4:	b510      	push	{r4, lr}
    int ret;

    /*
     * Handle particular types of records
     */
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
   df9d6:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   df9d8:	2b16      	cmp	r3, #22

    return( 0 );
}

int mbedtls_ssl_handle_message_type( mbedtls_ssl_context *ssl )
{
   df9da:	4604      	mov	r4, r0
    int ret;

    /*
     * Handle particular types of records
     */
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
   df9dc:	d003      	beq.n	df9e6 <mbedtls_ssl_handle_message_type+0x12>
        {
            return( ret );
        }
    }

    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC )
   df9de:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   df9e0:	2b14      	cmp	r3, #20
   df9e2:	d10d      	bne.n	dfa00 <mbedtls_ssl_handle_message_type+0x2c>
   df9e4:	e004      	b.n	df9f0 <mbedtls_ssl_handle_message_type+0x1c>
    /*
     * Handle particular types of records
     */
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
    {
        if( ( ret = mbedtls_ssl_prepare_handshake_record( ssl ) ) != 0 )
   df9e6:	f7ff ffc9 	bl	df97c <mbedtls_ssl_prepare_handshake_record>
   df9ea:	2800      	cmp	r0, #0
   df9ec:	d0f7      	beq.n	df9de <mbedtls_ssl_handle_message_type+0xa>
   df9ee:	bd10      	pop	{r4, pc}
        }
    }

    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC )
    {
        if( ssl->in_msglen != 1 )
   df9f0:	6f23      	ldr	r3, [r4, #112]	; 0x70
   df9f2:	2b01      	cmp	r3, #1
   df9f4:	d118      	bne.n	dfa28 <mbedtls_ssl_handle_message_type+0x54>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid CCS message, len: %d",
                           ssl->in_msglen ) );
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
        }

        if( ssl->in_msg[0] != 1 )
   df9f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
    {
        if( ssl->in_msglen != 1 )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid CCS message, len: %d",
                           ssl->in_msglen ) );
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
   df9f8:	480f      	ldr	r0, [pc, #60]	; (dfa38 <mbedtls_ssl_handle_message_type+0x64>)
        }

        if( ssl->in_msg[0] != 1 )
   df9fa:	781b      	ldrb	r3, [r3, #0]
    {
        if( ssl->in_msglen != 1 )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid CCS message, len: %d",
                           ssl->in_msglen ) );
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
   df9fc:	2b01      	cmp	r3, #1
   df9fe:	e00e      	b.n	dfa1e <mbedtls_ssl_handle_message_type+0x4a>
            return( MBEDTLS_ERR_SSL_EARLY_MESSAGE );
        }
#endif
    }

    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT )
   dfa00:	2b15      	cmp	r3, #21
   dfa02:	d10f      	bne.n	dfa24 <mbedtls_ssl_handle_message_type+0x50>
    {
        if( ssl->in_msglen != 2 )
   dfa04:	6f23      	ldr	r3, [r4, #112]	; 0x70
   dfa06:	2b02      	cmp	r3, #2
   dfa08:	d10e      	bne.n	dfa28 <mbedtls_ssl_handle_message_type+0x54>
                       ssl->in_msg[0], ssl->in_msg[1] ) );

        /*
         * Ignore non-fatal alerts, except close_notify and no_renegotiation
         */
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_FATAL )
   dfa0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   dfa0c:	781a      	ldrb	r2, [r3, #0]
   dfa0e:	2a02      	cmp	r2, #2
   dfa10:	d00c      	beq.n	dfa2c <mbedtls_ssl_handle_message_type+0x58>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "is a fatal alert message (msg %d)",
                           ssl->in_msg[1] ) );
            return( MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE );
        }

        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
   dfa12:	2a01      	cmp	r2, #1
   dfa14:	d10c      	bne.n	dfa30 <mbedtls_ssl_handle_message_type+0x5c>
            ssl->in_msg[1] == MBEDTLS_SSL_ALERT_MSG_CLOSE_NOTIFY )
   dfa16:	785b      	ldrb	r3, [r3, #1]
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "is a fatal alert message (msg %d)",
                           ssl->in_msg[1] ) );
            return( MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE );
        }

        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
   dfa18:	b163      	cbz	r3, dfa34 <mbedtls_ssl_handle_message_type+0x60>
    {
        ssl_handshake_wrapup_free_hs_transform( ssl );
    }
#endif

    return( 0 );
   dfa1a:	4808      	ldr	r0, [pc, #32]	; (dfa3c <mbedtls_ssl_handle_message_type+0x68>)
   dfa1c:	2b64      	cmp	r3, #100	; 0x64
   dfa1e:	bf08      	it	eq
   dfa20:	2000      	moveq	r0, #0
   dfa22:	bd10      	pop	{r4, pc}
   dfa24:	2000      	movs	r0, #0
   dfa26:	bd10      	pop	{r4, pc}
    {
        if( ssl->in_msglen != 1 )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid CCS message, len: %d",
                           ssl->in_msglen ) );
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
   dfa28:	4803      	ldr	r0, [pc, #12]	; (dfa38 <mbedtls_ssl_handle_message_type+0x64>)
   dfa2a:	bd10      	pop	{r4, pc}
         */
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_FATAL )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "is a fatal alert message (msg %d)",
                           ssl->in_msg[1] ) );
            return( MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE );
   dfa2c:	4804      	ldr	r0, [pc, #16]	; (dfa40 <mbedtls_ssl_handle_message_type+0x6c>)
   dfa2e:	bd10      	pop	{r4, pc}
            return( 0 );
        }
#endif /* MBEDTLS_SSL_PROTO_SSL3 && MBEDTLS_SSL_SRV_C */

        /* Silently ignore: fetch new message */
        return MBEDTLS_ERR_SSL_NON_FATAL;
   dfa30:	4802      	ldr	r0, [pc, #8]	; (dfa3c <mbedtls_ssl_handle_message_type+0x68>)
   dfa32:	bd10      	pop	{r4, pc}

        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
            ssl->in_msg[1] == MBEDTLS_SSL_ALERT_MSG_CLOSE_NOTIFY )
        {
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "is a close notify message" ) );
            return( MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY );
   dfa34:	4803      	ldr	r0, [pc, #12]	; (dfa44 <mbedtls_ssl_handle_message_type+0x70>)
        ssl_handshake_wrapup_free_hs_transform( ssl );
    }
#endif

    return( 0 );
}
   dfa36:	bd10      	pop	{r4, pc}
   dfa38:	ffff8e00 	.word	0xffff8e00
   dfa3c:	ffff9980 	.word	0xffff9980
   dfa40:	ffff8880 	.word	0xffff8880
   dfa44:	ffff8780 	.word	0xffff8780

000dfa48 <mbedtls_ssl_send_alert_message>:
}

int mbedtls_ssl_send_alert_message( mbedtls_ssl_context *ssl,
                            unsigned char level,
                            unsigned char message )
{
   dfa48:	b410      	push	{r4}
    int ret;

    if( ssl == NULL || ssl->conf == NULL )
   dfa4a:	b190      	cbz	r0, dfa72 <mbedtls_ssl_send_alert_message+0x2a>
   dfa4c:	6804      	ldr	r4, [r0, #0]
   dfa4e:	b184      	cbz	r4, dfa72 <mbedtls_ssl_send_alert_message+0x2a>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> send alert message" ) );
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "send alert level=%u message=%u", level, message ));

    ssl->out_msgtype = MBEDTLS_SSL_MSG_ALERT;
   dfa50:	2415      	movs	r4, #21
   dfa52:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
    ssl->out_msglen = 2;
   dfa56:	2402      	movs	r4, #2
   dfa58:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
    ssl->out_msg[0] = level;
   dfa5c:	f8d0 4098 	ldr.w	r4, [r0, #152]	; 0x98
   dfa60:	7021      	strb	r1, [r4, #0]
    ssl->out_msg[1] = message;
   dfa62:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
   dfa66:	705a      	strb	r2, [r3, #1]

    if( ( ret = mbedtls_ssl_write_record( ssl, SSL_FORCE_FLUSH ) ) != 0 )
   dfa68:	2101      	movs	r1, #1
        return( ret );
    }
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= send alert message" ) );

    return( 0 );
}
   dfa6a:	f85d 4b04 	ldr.w	r4, [sp], #4
    ssl->out_msgtype = MBEDTLS_SSL_MSG_ALERT;
    ssl->out_msglen = 2;
    ssl->out_msg[0] = level;
    ssl->out_msg[1] = message;

    if( ( ret = mbedtls_ssl_write_record( ssl, SSL_FORCE_FLUSH ) ) != 0 )
   dfa6e:	f7ff be67 	b.w	df740 <mbedtls_ssl_write_record>
        return( ret );
    }
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= send alert message" ) );

    return( 0 );
}
   dfa72:	4802      	ldr	r0, [pc, #8]	; (dfa7c <mbedtls_ssl_send_alert_message+0x34>)
   dfa74:	f85d 4b04 	ldr.w	r4, [sp], #4
   dfa78:	4770      	bx	lr
   dfa7a:	bf00      	nop
   dfa7c:	ffff8f00 	.word	0xffff8f00

000dfa80 <mbedtls_ssl_read_record>:
static int ssl_get_next_record( mbedtls_ssl_context *ssl );
static int ssl_record_is_in_progress( mbedtls_ssl_context *ssl );

int mbedtls_ssl_read_record( mbedtls_ssl_context *ssl,
                             unsigned update_hs_digest )
{
   dfa80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> read record" ) );

    if( ssl->keep_current_message == 0 )
   dfa84:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
static int ssl_get_next_record( mbedtls_ssl_context *ssl );
static int ssl_record_is_in_progress( mbedtls_ssl_context *ssl );

int mbedtls_ssl_read_record( mbedtls_ssl_context *ssl,
                             unsigned update_hs_digest )
{
   dfa88:	b090      	sub	sp, #64	; 0x40
   dfa8a:	4604      	mov	r4, r0
   dfa8c:	460e      	mov	r6, r1
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> read record" ) );

    if( ssl->keep_current_message == 0 )
   dfa8e:	b9a5      	cbnz	r5, dfaba <mbedtls_ssl_read_record+0x3a>
        else
        {
            ssl->in_msglen = 0;
        }

        ssl->in_hslen   = 0;
   dfa90:	462f      	mov	r7, r5
     *     and consumes through mbedtls_ssl_read only.
     *
     */

    /* Case (1): Handshake messages */
    if( ssl->in_hslen != 0 )
   dfa92:	6fa1      	ldr	r1, [r4, #120]	; 0x78
   dfa94:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   dfa96:	b169      	cbz	r1, dfab4 <mbedtls_ssl_read_record+0x34>
    {
        /* Hard assertion to be sure that no application data
         * is in flight, as corrupting ssl->in_msglen during
         * ssl->in_offt != NULL is fatal. */
        if( ssl->in_offt != NULL )
   dfa98:	b99b      	cbnz	r3, dfac2 <mbedtls_ssl_read_record+0x42>
         *     should not be treated as a silently corrected assertion.
         *     Additionally, ssl->in_hslen might be arbitrarily out of
         *     bounds after handling a DTLS message with an unexpected
         *     sequence number, see mbedtls_ssl_prepare_handshake_record.
         */
        if( ssl->in_hslen < ssl->in_msglen )
   dfa9a:	6f22      	ldr	r2, [r4, #112]	; 0x70
   dfa9c:	4291      	cmp	r1, r2
   dfa9e:	d206      	bcs.n	dfaae <mbedtls_ssl_read_record+0x2e>
        {
            ssl->in_msglen -= ssl->in_hslen;
            memmove( ssl->in_msg, ssl->in_msg + ssl->in_hslen,
   dfaa0:	6e60      	ldr	r0, [r4, #100]	; 0x64
         *     bounds after handling a DTLS message with an unexpected
         *     sequence number, see mbedtls_ssl_prepare_handshake_record.
         */
        if( ssl->in_hslen < ssl->in_msglen )
        {
            ssl->in_msglen -= ssl->in_hslen;
   dfaa2:	1a52      	subs	r2, r2, r1
   dfaa4:	6722      	str	r2, [r4, #112]	; 0x70
            memmove( ssl->in_msg, ssl->in_msg + ssl->in_hslen,
                     ssl->in_msglen );
   dfaa6:	4401      	add	r1, r0
   dfaa8:	f00a f810 	bl	e9acc <memmove>
   dfaac:	e000      	b.n	dfab0 <mbedtls_ssl_read_record+0x30>
            MBEDTLS_SSL_DEBUG_BUF( 4, "remaining content in record",
                                   ssl->in_msg, ssl->in_msglen );
        }
        else
        {
            ssl->in_msglen = 0;
   dfaae:	6723      	str	r3, [r4, #112]	; 0x70
        }

        ssl->in_hslen   = 0;
   dfab0:	67a7      	str	r7, [r4, #120]	; 0x78
   dfab2:	e008      	b.n	dfac6 <mbedtls_ssl_read_record+0x46>
    }
    /* Case (4): Application data */
    else if( ssl->in_offt != NULL )
   dfab4:	b93b      	cbnz	r3, dfac6 <mbedtls_ssl_read_record+0x46>
        return( 0 );
    }
    /* Everything else (CCS & Alerts) */
    else
    {
        ssl->in_msglen = 0;
   dfab6:	6723      	str	r3, [r4, #112]	; 0x70
   dfab8:	e005      	b.n	dfac6 <mbedtls_ssl_read_record+0x46>
        }
    }
    else
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "reuse previously read message" ) );
        ssl->keep_current_message = 0;
   dfaba:	2500      	movs	r5, #0
   dfabc:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
   dfac0:	e127      	b.n	dfd12 <mbedtls_ssl_read_record+0x292>
         * is in flight, as corrupting ssl->in_msglen during
         * ssl->in_offt != NULL is fatal. */
        if( ssl->in_offt != NULL )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   dfac2:	4d96      	ldr	r5, [pc, #600]	; (dfd1c <mbedtls_ssl_read_record+0x29c>)
   dfac4:	e125      	b.n	dfd12 <mbedtls_ssl_read_record+0x292>
    return( 0 );
}

static int ssl_record_is_in_progress( mbedtls_ssl_context *ssl )
{
    if( ssl->in_msglen > 0 )
   dfac6:	6f23      	ldr	r3, [r4, #112]	; 0x70
   dfac8:	2b00      	cmp	r3, #0
   dfaca:	f040 8105 	bne.w	dfcd8 <mbedtls_ssl_read_record+0x258>
    ret = ssl_load_buffered_record( ssl );
    if( ret != 0 )
        return( ret );
#endif /* MBEDTLS_SSL_PROTO_DTLS */

    if( ( ret = mbedtls_ssl_fetch_input( ssl, mbedtls_ssl_hdr_len( ssl ) ) ) != 0 )
   dface:	2105      	movs	r1, #5
   dfad0:	4620      	mov	r0, r4
   dfad2:	f7ff fdc1 	bl	df658 <mbedtls_ssl_fetch_input>
   dfad6:	2800      	cmp	r0, #0
   dfad8:	f040 8113 	bne.w	dfd02 <mbedtls_ssl_read_record+0x282>
{
    int major_ver, minor_ver;

    MBEDTLS_SSL_DEBUG_BUF( 4, "input record header", ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) );

    ssl->in_msgtype =  ssl->in_hdr[0];
   dfadc:	6da2      	ldr	r2, [r4, #88]	; 0x58
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
   dfade:	6de0      	ldr	r0, [r4, #92]	; 0x5c
{
    int major_ver, minor_ver;

    MBEDTLS_SSL_DEBUG_BUF( 4, "input record header", ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) );

    ssl->in_msgtype =  ssl->in_hdr[0];
   dfae0:	7813      	ldrb	r3, [r2, #0]
   dfae2:	66e3      	str	r3, [r4, #108]	; 0x6c
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
   dfae4:	f890 e000 	ldrb.w	lr, [r0]
   dfae8:	7841      	ldrb	r1, [r0, #1]
    mbedtls_ssl_read_version( &major_ver, &minor_ver, ssl->conf->transport, ssl->in_hdr + 1 );
   dfaea:	6820      	ldr	r0, [r4, #0]
    int major_ver, minor_ver;

    MBEDTLS_SSL_DEBUG_BUF( 4, "input record header", ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) );

    ssl->in_msgtype =  ssl->in_hdr[0];
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
   dfaec:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
                        "version = [%d:%d], msglen = %d",
                        ssl->in_msgtype,
                        major_ver, minor_ver, ssl->in_msglen ) );

    /* Check record type */
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE &&
   dfaf0:	3b14      	subs	r3, #20
    int major_ver, minor_ver;

    MBEDTLS_SSL_DEBUG_BUF( 4, "input record header", ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) );

    ssl->in_msgtype =  ssl->in_hdr[0];
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
   dfaf2:	6721      	str	r1, [r4, #112]	; 0x70
                        "version = [%d:%d], msglen = %d",
                        ssl->in_msgtype,
                        major_ver, minor_ver, ssl->in_msglen ) );

    /* Check record type */
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE &&
   dfaf4:	2b03      	cmp	r3, #3
    else
#else
    ((void) transport);
#endif
    {
        *major = ver[0];
   dfaf6:	f892 e001 	ldrb.w	lr, [r2, #1]
        *minor = ver[1];
   dfafa:	7892      	ldrb	r2, [r2, #2]
                        "version = [%d:%d], msglen = %d",
                        ssl->in_msgtype,
                        major_ver, minor_ver, ssl->in_msglen ) );

    /* Check record type */
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE &&
   dfafc:	d905      	bls.n	dfb0a <mbedtls_ssl_read_record+0x8a>
        /* Silently ignore invalid DTLS records as recommended by RFC 6347
         * Section 4.1.2.7 */
        if( ssl->conf->transport != MBEDTLS_SSL_TRANSPORT_DATAGRAM )
#endif /* MBEDTLS_SSL_PROTO_DTLS */
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                    MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
   dfafe:	220a      	movs	r2, #10
   dfb00:	2102      	movs	r1, #2
   dfb02:	4620      	mov	r0, r4
   dfb04:	f7ff ffa0 	bl	dfa48 <mbedtls_ssl_send_alert_message>
   dfb08:	e0e2      	b.n	dfcd0 <mbedtls_ssl_read_record+0x250>

        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    /* Check version */
    if( major_ver != ssl->major_ver )
   dfb0a:	68a3      	ldr	r3, [r4, #8]
   dfb0c:	459e      	cmp	lr, r3
   dfb0e:	f040 80df 	bne.w	dfcd0 <mbedtls_ssl_read_record+0x250>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "major version mismatch" ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    if( minor_ver > ssl->conf->max_minor_ver )
   dfb12:	f890 3079 	ldrb.w	r3, [r0, #121]	; 0x79
   dfb16:	429a      	cmp	r2, r3
   dfb18:	f300 80da 	bgt.w	dfcd0 <mbedtls_ssl_read_record+0x250>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "minor version mismatch" ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    /* Check length against the size of our buffer */
    if( ssl->in_msglen > MBEDTLS_SSL_IN_BUFFER_LEN
   dfb1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   dfb1e:	6d22      	ldr	r2, [r4, #80]	; 0x50
   dfb20:	1a9b      	subs	r3, r3, r2
   dfb22:	f5c3 5300 	rsb	r3, r3, #8192	; 0x2000
   dfb26:	332d      	adds	r3, #45	; 0x2d
   dfb28:	4299      	cmp	r1, r3
   dfb2a:	f200 80d1 	bhi.w	dfcd0 <mbedtls_ssl_read_record+0x250>
    }
#endif /* MBEDTLS_SSL_PROTO_DTLS */


    /* Check length against bounds of the current transform and version */
    if( ssl->transform_in == NULL )
   dfb2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   dfb30:	b923      	cbnz	r3, dfb3c <mbedtls_ssl_read_record+0xbc>
    {
        if( ssl->in_msglen < 1 ||
   dfb32:	1e4b      	subs	r3, r1, #1
   dfb34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   dfb38:	d30c      	bcc.n	dfb54 <mbedtls_ssl_read_record+0xd4>
   dfb3a:	e0c9      	b.n	dfcd0 <mbedtls_ssl_read_record+0x250>
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
        }
    }
    else
    {
        if( ssl->in_msglen < ssl->transform_in->minlen )
   dfb3c:	689b      	ldr	r3, [r3, #8]
   dfb3e:	4299      	cmp	r1, r3
   dfb40:	f0c0 80c6 	bcc.w	dfcd0 <mbedtls_ssl_read_record+0x250>
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
        /*
         * TLS encrypted messages can have up to 256 bytes of padding
         */
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 &&
   dfb44:	68e2      	ldr	r2, [r4, #12]
   dfb46:	2a00      	cmp	r2, #0
   dfb48:	dd04      	ble.n	dfb54 <mbedtls_ssl_read_record+0xd4>
   dfb4a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
   dfb4e:	4299      	cmp	r1, r3
   dfb50:	f200 80be 	bhi.w	dfcd0 <mbedtls_ssl_read_record+0x250>
    }

    /*
     * Read and optionally decrypt the message contents
     */
    if( ( ret = mbedtls_ssl_fetch_input( ssl,
   dfb54:	3105      	adds	r1, #5
   dfb56:	4620      	mov	r0, r4
   dfb58:	f7ff fd7e 	bl	df658 <mbedtls_ssl_fetch_input>
   dfb5c:	2800      	cmp	r0, #0
   dfb5e:	f040 80d0 	bne.w	dfd02 <mbedtls_ssl_read_record+0x282>

        if( ret == 0 )
            done = 1;
    }
#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */
    if( !done && ssl->transform_in != NULL )
   dfb62:	f8d4 e034 	ldr.w	lr, [r4, #52]	; 0x34
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "more than one record within datagram" ) );
        }
    }
    else
#endif
        ssl->in_left = 0;
   dfb66:	6760      	str	r0, [r4, #116]	; 0x74

        if( ret == 0 )
            done = 1;
    }
#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */
    if( !done && ssl->transform_in != NULL )
   dfb68:	f1be 0f00 	cmp.w	lr, #0
   dfb6c:	f000 80b4 	beq.w	dfcd8 <mbedtls_ssl_read_record+0x258>
    size_t padlen = 0, correct = 1;
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> decrypt buf" ) );

    if( ssl->session_in == NULL || ssl->transform_in == NULL )
   dfb70:	6a23      	ldr	r3, [r4, #32]
   dfb72:	2b00      	cmp	r3, #0
   dfb74:	f000 80ae 	beq.w	dfcd4 <mbedtls_ssl_read_record+0x254>
   dfb78:	f8de 3088 	ldr.w	r3, [lr, #136]	; 0x88
 */
static inline mbedtls_cipher_mode_t mbedtls_cipher_get_cipher_mode(
    const mbedtls_cipher_context_t *ctx )
{
    MBEDTLS_INTERNAL_VALIDATE_RET( ctx != NULL, MBEDTLS_MODE_NONE );
    if( ctx->cipher_info == NULL )
   dfb7c:	b103      	cbz	r3, dfb80 <mbedtls_ssl_read_record+0x100>
        return MBEDTLS_MODE_NONE;

    return ctx->cipher_info->mode;
   dfb7e:	785b      	ldrb	r3, [r3, #1]
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    mode = mbedtls_cipher_get_cipher_mode( &ssl->transform_in->cipher_ctx_dec );

    if( ssl->in_msglen < ssl->transform_in->minlen )
   dfb80:	6f22      	ldr	r2, [r4, #112]	; 0x70
   dfb82:	f8de 1008 	ldr.w	r1, [lr, #8]
   dfb86:	428a      	cmp	r2, r1
   dfb88:	f0c0 808a 	bcc.w	dfca0 <mbedtls_ssl_read_record+0x220>
    else
#endif /* MBEDTLS_ARC4_C || MBEDTLS_CIPHER_NULL_CIPHER */
#if defined(MBEDTLS_GCM_C) || \
    defined(MBEDTLS_CCM_C) || \
    defined(MBEDTLS_CHACHAPOLY_C)
    if( mode == MBEDTLS_MODE_GCM ||
   dfb8c:	2b06      	cmp	r3, #6
   dfb8e:	d004      	beq.n	dfb9a <mbedtls_ssl_read_record+0x11a>
   dfb90:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   dfb94:	2b08      	cmp	r3, #8
   dfb96:	f040 809d 	bne.w	dfcd4 <mbedtls_ssl_read_record+0x254>
        unsigned char *dec_msg;
        unsigned char *dec_msg_result;
        unsigned char add_data[13];
        unsigned char iv[12];
        mbedtls_ssl_transform *transform = ssl->transform_in;
        unsigned char taglen = transform->ciphersuite_info->flags &
   dfb9a:	f8de 3000 	ldr.w	r3, [lr]
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
        size_t explicit_iv_len = transform->ivlen - transform->fixed_ivlen;
   dfb9e:	f8de 1010 	ldr.w	r1, [lr, #16]
        unsigned char *dec_msg_result;
        unsigned char add_data[13];
        unsigned char iv[12];
        mbedtls_ssl_transform *transform = ssl->transform_in;
        unsigned char taglen = transform->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
   dfba2:	7f1b      	ldrb	r3, [r3, #28]
   dfba4:	f013 0f02 	tst.w	r3, #2
        size_t explicit_iv_len = transform->ivlen - transform->fixed_ivlen;
   dfba8:	f8de 300c 	ldr.w	r3, [lr, #12]
        unsigned char *dec_msg_result;
        unsigned char add_data[13];
        unsigned char iv[12];
        mbedtls_ssl_transform *transform = ssl->transform_in;
        unsigned char taglen = transform->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
   dfbac:	bf0c      	ite	eq
   dfbae:	f04f 0c10 	moveq.w	ip, #16
   dfbb2:	f04f 0c08 	movne.w	ip, #8
        size_t explicit_iv_len = transform->ivlen - transform->fixed_ivlen;
   dfbb6:	ebc1 0803 	rsb	r8, r1, r3

        /*
         * Compute and update sizes
         */
        if( ssl->in_msglen < explicit_iv_len + taglen )
   dfbba:	eb08 030c 	add.w	r3, r8, ip
   dfbbe:	429a      	cmp	r2, r3
   dfbc0:	d36e      	bcc.n	dfca0 <mbedtls_ssl_read_record+0x220>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) < explicit_iv_len (%d) "
                                "+ taglen (%d)", ssl->in_msglen,
                                explicit_iv_len, taglen ) );
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
        }
        dec_msglen = ssl->in_msglen - explicit_iv_len - taglen;
   dfbc2:	ebc8 0802 	rsb	r8, r8, r2
   dfbc6:	ebcc 0808 	rsb	r8, ip, r8
        ssl->in_msglen = dec_msglen;

        /*
         * Prepare additional authenticated data
         */
        memcpy( add_data, ssl->in_ctr, 8 );
   dfbca:	6d63      	ldr	r3, [r4, #84]	; 0x54
        }
        dec_msglen = ssl->in_msglen - explicit_iv_len - taglen;

        dec_msg = ssl->in_msg;
        dec_msg_result = ssl->in_msg;
        ssl->in_msglen = dec_msglen;
   dfbcc:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70

        /*
         * Prepare additional authenticated data
         */
        memcpy( add_data, ssl->in_ctr, 8 );
   dfbd0:	6859      	ldr	r1, [r3, #4]
   dfbd2:	6818      	ldr	r0, [r3, #0]
        add_data[8]  = ssl->in_msgtype;
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
                           ssl->conf->transport, add_data + 9 );
        add_data[11] = ( ssl->in_msglen >> 8 ) & 0xFF;
        add_data[12] = ssl->in_msglen & 0xFF;
   dfbd4:	f88d 803c 	strb.w	r8, [sp, #60]	; 0x3c
        ssl->in_msglen = dec_msglen;

        /*
         * Prepare additional authenticated data
         */
        memcpy( add_data, ssl->in_ctr, 8 );
   dfbd8:	aa0c      	add	r2, sp, #48	; 0x30
   dfbda:	c203      	stmia	r2!, {r0, r1}
        add_data[8]  = ssl->in_msgtype;
   dfbdc:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   dfbde:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
   dfbe2:	68e2      	ldr	r2, [r4, #12]
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
        ver[1] = (unsigned char) minor;
   dfbe4:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
         */
        memcpy( add_data, ssl->in_ctr, 8 );
        add_data[8]  = ssl->in_msgtype;
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
                           ssl->conf->transport, add_data + 9 );
        add_data[11] = ( ssl->in_msglen >> 8 ) & 0xFF;
   dfbe8:	ea4f 2218 	mov.w	r2, r8, lsr #8
   dfbec:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data for AEAD", add_data, 13 );

        /*
         * Prepare IV
         */
        if( transform->ivlen == 12 && transform->fixed_ivlen == 4 )
   dfbf0:	f8de 200c 	ldr.w	r2, [lr, #12]
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
   dfbf4:	68a1      	ldr	r1, [r4, #8]
                                explicit_iv_len, taglen ) );
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
        }
        dec_msglen = ssl->in_msglen - explicit_iv_len - taglen;

        dec_msg = ssl->in_msg;
   dfbf6:	f8d4 a064 	ldr.w	sl, [r4, #100]	; 0x64
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
   dfbfa:	f88d 1039 	strb.w	r1, [sp, #57]	; 0x39
        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data for AEAD", add_data, 13 );

        /*
         * Prepare IV
         */
        if( transform->ivlen == 12 && transform->fixed_ivlen == 4 )
   dfbfe:	2a0c      	cmp	r2, #12
   dfc00:	d168      	bne.n	dfcd4 <mbedtls_ssl_read_record+0x254>
   dfc02:	f8de 2010 	ldr.w	r2, [lr, #16]
   dfc06:	2a04      	cmp	r2, #4
   dfc08:	d108      	bne.n	dfc1c <mbedtls_ssl_read_record+0x19c>
        {
            /* GCM and CCM: fixed || explicit (transmitted) */
            memcpy( iv, transform->iv_dec, transform->fixed_ivlen );
   dfc0a:	f8de 0028 	ldr.w	r0, [lr, #40]	; 0x28
            memcpy( iv + transform->fixed_ivlen, ssl->in_iv, 8 );
   dfc0e:	6e22      	ldr	r2, [r4, #96]	; 0x60
         * Prepare IV
         */
        if( transform->ivlen == 12 && transform->fixed_ivlen == 4 )
        {
            /* GCM and CCM: fixed || explicit (transmitted) */
            memcpy( iv, transform->iv_dec, transform->fixed_ivlen );
   dfc10:	9009      	str	r0, [sp, #36]	; 0x24
            memcpy( iv + transform->fixed_ivlen, ssl->in_iv, 8 );
   dfc12:	6810      	ldr	r0, [r2, #0]
   dfc14:	6851      	ldr	r1, [r2, #4]
   dfc16:	ab0a      	add	r3, sp, #40	; 0x28
   dfc18:	c303      	stmia	r3!, {r0, r1}
   dfc1a:	e018      	b.n	dfc4e <mbedtls_ssl_read_record+0x1ce>

        }
        else if( transform->ivlen == 12 && transform->fixed_ivlen == 12 )
   dfc1c:	2a0c      	cmp	r2, #12
   dfc1e:	d159      	bne.n	dfcd4 <mbedtls_ssl_read_record+0x254>
        {
            /* ChachaPoly: fixed XOR sequence number */
            unsigned char i;

            memcpy( iv, transform->iv_dec, transform->fixed_ivlen );
   dfc20:	46f1      	mov	r9, lr
   dfc22:	aa09      	add	r2, sp, #36	; 0x24
   dfc24:	f859 0f28 	ldr.w	r0, [r9, #40]!
   dfc28:	f8d9 1004 	ldr.w	r1, [r9, #4]
   dfc2c:	c203      	stmia	r2!, {r0, r1}
   dfc2e:	f8d9 0008 	ldr.w	r0, [r9, #8]
   dfc32:	6010      	str	r0, [r2, #0]
   dfc34:	a90a      	add	r1, sp, #40	; 0x28
   dfc36:	1e5a      	subs	r2, r3, #1
   dfc38:	3307      	adds	r3, #7

            for( i = 0; i < 8; i++ )
                iv[i+4] ^= ssl->in_ctr[i];
   dfc3a:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   dfc3e:	f891 9000 	ldrb.w	r9, [r1]
            /* ChachaPoly: fixed XOR sequence number */
            unsigned char i;

            memcpy( iv, transform->iv_dec, transform->fixed_ivlen );

            for( i = 0; i < 8; i++ )
   dfc42:	4293      	cmp	r3, r2
                iv[i+4] ^= ssl->in_ctr[i];
   dfc44:	ea89 0000 	eor.w	r0, r9, r0
   dfc48:	f801 0b01 	strb.w	r0, [r1], #1
            /* ChachaPoly: fixed XOR sequence number */
            unsigned char i;

            memcpy( iv, transform->iv_dec, transform->fixed_ivlen );

            for( i = 0; i < 8; i++ )
   dfc4c:	d1f5      	bne.n	dfc3a <mbedtls_ssl_read_record+0x1ba>
        MBEDTLS_SSL_DEBUG_BUF( 4, "TAG used", dec_msg + dec_msglen, taglen );

        /*
         * Decrypt and authenticate
         */
        if( ( ret = mbedtls_cipher_auth_decrypt( &ssl->transform_in->cipher_ctx_dec,
   dfc4e:	eb0a 0308 	add.w	r3, sl, r8
   dfc52:	9305      	str	r3, [sp, #20]
   dfc54:	ab08      	add	r3, sp, #32
   dfc56:	9304      	str	r3, [sp, #16]
   dfc58:	230d      	movs	r3, #13
   dfc5a:	9300      	str	r3, [sp, #0]
   dfc5c:	f8cd c018 	str.w	ip, [sp, #24]
   dfc60:	f8cd a00c 	str.w	sl, [sp, #12]
   dfc64:	f8cd 8008 	str.w	r8, [sp, #8]
   dfc68:	f8cd a004 	str.w	sl, [sp, #4]
   dfc6c:	ab0c      	add	r3, sp, #48	; 0x30
   dfc6e:	220c      	movs	r2, #12
   dfc70:	a909      	add	r1, sp, #36	; 0x24
   dfc72:	f10e 0088 	add.w	r0, lr, #136	; 0x88
   dfc76:	f7f6 fb6f 	bl	d6358 <mbedtls_cipher_auth_decrypt>
   dfc7a:	b120      	cbz	r0, dfc86 <mbedtls_ssl_read_record+0x206>
                                         dec_msg_result, &olen,
                                         dec_msg + dec_msglen, taglen ) ) != 0 )
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_auth_decrypt", ret );

            if( ret == MBEDTLS_ERR_CIPHER_AUTH_FAILED )
   dfc7c:	f510 4fc6 	cmn.w	r0, #25344	; 0x6300
   dfc80:	d00e      	beq.n	dfca0 <mbedtls_ssl_read_record+0x220>
            done = 1;
    }
#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */
    if( !done && ssl->transform_in != NULL )
    {
        if( ( ret = ssl_decrypt_buf( ssl ) ) != 0 )
   dfc82:	b300      	cbz	r0, dfcc6 <mbedtls_ssl_read_record+0x246>
   dfc84:	e03d      	b.n	dfd02 <mbedtls_ssl_read_record+0x282>

            return( ret );
        }
        auth_done++;

        if( olen != dec_msglen )
   dfc86:	9b08      	ldr	r3, [sp, #32]
   dfc88:	4598      	cmp	r8, r3
   dfc8a:	d123      	bne.n	dfcd4 <mbedtls_ssl_read_record+0x254>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    if( ssl->in_msglen == 0 )
   dfc8c:	6f23      	ldr	r3, [r4, #112]	; 0x70
   dfc8e:	b96b      	cbnz	r3, dfcac <mbedtls_ssl_read_record+0x22c>
    {
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3
   dfc90:	68e3      	ldr	r3, [r4, #12]
   dfc92:	2b03      	cmp	r3, #3
   dfc94:	d006      	beq.n	dfca4 <mbedtls_ssl_read_record+0x224>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid zero-length message type: %d", ssl->in_msgtype ) );
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
        }
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

        ssl->nb_zero++;
   dfc96:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   dfc98:	3301      	adds	r3, #1

        /*
         * Three or more empty messages may be a DoS attack
         * (excessive CPU consumption).
         */
        if( ssl->nb_zero > 3 )
   dfc9a:	2b03      	cmp	r3, #3
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid zero-length message type: %d", ssl->in_msgtype ) );
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
        }
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

        ssl->nb_zero++;
   dfc9c:	67e3      	str	r3, [r4, #124]	; 0x7c

        /*
         * Three or more empty messages may be a DoS attack
         * (excessive CPU consumption).
         */
        if( ssl->nb_zero > 3 )
   dfc9e:	dd06      	ble.n	dfcae <mbedtls_ssl_read_record+0x22e>
                                         dec_msg + dec_msglen, taglen ) ) != 0 )
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_auth_decrypt", ret );

            if( ret == MBEDTLS_ERR_CIPHER_AUTH_FAILED )
                return( MBEDTLS_ERR_SSL_INVALID_MAC );
   dfca0:	481f      	ldr	r0, [pc, #124]	; (dfd20 <mbedtls_ssl_read_record+0x2a0>)
   dfca2:	e032      	b.n	dfd0a <mbedtls_ssl_read_record+0x28a>

    if( ssl->in_msglen == 0 )
    {
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3
            && ssl->in_msgtype != MBEDTLS_SSL_MSG_APPLICATION_DATA )
   dfca4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   dfca6:	2b17      	cmp	r3, #23
   dfca8:	d0f5      	beq.n	dfc96 <mbedtls_ssl_read_record+0x216>
   dfcaa:	e030      	b.n	dfd0e <mbedtls_ssl_read_record+0x28e>
                                "messages, possible DoS attack" ) );
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
        }
    }
    else
        ssl->nb_zero = 0;
   dfcac:	67e0      	str	r0, [r4, #124]	; 0x7c
                                         dec_msg_result, &olen,
                                         dec_msg + dec_msglen, taglen ) ) != 0 )
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_auth_decrypt", ret );

            if( ret == MBEDTLS_ERR_CIPHER_AUTH_FAILED )
   dfcae:	2207      	movs	r2, #7
    else
#endif
    {
        unsigned char i;
        for( i = 8; i > ssl_ep_len( ssl ); i-- )
            if( ++ssl->in_ctr[i - 1] != 0 )
   dfcb0:	6d61      	ldr	r1, [r4, #84]	; 0x54
   dfcb2:	5c8b      	ldrb	r3, [r1, r2]
   dfcb4:	3301      	adds	r3, #1
   dfcb6:	b2db      	uxtb	r3, r3
   dfcb8:	548b      	strb	r3, [r1, r2]
   dfcba:	b923      	cbnz	r3, dfcc6 <mbedtls_ssl_read_record+0x246>
    }
    else
#endif
    {
        unsigned char i;
        for( i = 8; i > ssl_ep_len( ssl ); i-- )
   dfcbc:	f112 32ff 	adds.w	r2, r2, #4294967295
   dfcc0:	d2f6      	bcs.n	dfcb0 <mbedtls_ssl_read_record+0x230>

        /* The loop goes to its end iff the counter is wrapping */
        if( i == ssl_ep_len( ssl ) )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "incoming message counter would wrap" ) );
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
   dfcc2:	4818      	ldr	r0, [pc, #96]	; (dfd24 <mbedtls_ssl_read_record+0x2a4>)
   dfcc4:	e021      	b.n	dfd0a <mbedtls_ssl_read_record+0x28a>
        }

        MBEDTLS_SSL_DEBUG_BUF( 4, "input payload after decrypt",
                       ssl->in_msg, ssl->in_msglen );

        if( ssl->in_msglen > MBEDTLS_SSL_IN_CONTENT_LEN )
   dfcc6:	6f23      	ldr	r3, [r4, #112]	; 0x70
   dfcc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   dfccc:	d904      	bls.n	dfcd8 <mbedtls_ssl_read_record+0x258>
   dfcce:	e01e      	b.n	dfd0e <mbedtls_ssl_read_record+0x28e>
        ssl->keep_current_message = 0;
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= read record" ) );

    return( 0 );
   dfcd0:	4d15      	ldr	r5, [pc, #84]	; (dfd28 <mbedtls_ssl_read_record+0x2a8>)
   dfcd2:	e01e      	b.n	dfd12 <mbedtls_ssl_read_record+0x292>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> decrypt buf" ) );

    if( ssl->session_in == NULL || ssl->transform_in == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   dfcd4:	4811      	ldr	r0, [pc, #68]	; (dfd1c <mbedtls_ssl_read_record+0x29c>)
   dfcd6:	e018      	b.n	dfd0a <mbedtls_ssl_read_record+0x28a>
                        return( ret );
                    }
                }
            }

            ret = mbedtls_ssl_handle_message_type( ssl );
   dfcd8:	4620      	mov	r0, r4
   dfcda:	f7ff fe7b 	bl	df9d4 <mbedtls_ssl_handle_message_type>

                ret = MBEDTLS_ERR_SSL_CONTINUE_PROCESSING;
            }
#endif /* MBEDTLS_SSL_PROTO_DTLS */

        } while( MBEDTLS_ERR_SSL_NON_FATAL           == ret  ||
   dfcde:	f510 4fcd 	cmn.w	r0, #26240	; 0x6680
   dfce2:	f43f aed6 	beq.w	dfa92 <mbedtls_ssl_read_record+0x12>
   dfce6:	f510 4fcb 	cmn.w	r0, #25984	; 0x6580
   dfcea:	f43f aed2 	beq.w	dfa92 <mbedtls_ssl_read_record+0x12>
                 MBEDTLS_ERR_SSL_CONTINUE_PROCESSING == ret );

        if( 0 != ret )
   dfcee:	b960      	cbnz	r0, dfd0a <mbedtls_ssl_read_record+0x28a>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, ( "mbedtls_ssl_handle_message_type" ), ret );
            return( ret );
        }

        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE &&
   dfcf0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   dfcf2:	2b16      	cmp	r3, #22
   dfcf4:	d10d      	bne.n	dfd12 <mbedtls_ssl_read_record+0x292>
   dfcf6:	2e01      	cmp	r6, #1
   dfcf8:	d10b      	bne.n	dfd12 <mbedtls_ssl_read_record+0x292>
            update_hs_digest == 1 )
        {
            mbedtls_ssl_update_handshake_status( ssl );
   dfcfa:	4620      	mov	r0, r4
   dfcfc:	f7ff fe58 	bl	df9b0 <mbedtls_ssl_update_handshake_status>
   dfd00:	e007      	b.n	dfd12 <mbedtls_ssl_read_record+0x292>

                if( have_buffered == 0 )
#endif /* MBEDTLS_SSL_PROTO_DTLS */
                {
                    ret = ssl_get_next_record( ssl );
                    if( ret == MBEDTLS_ERR_SSL_CONTINUE_PROCESSING )
   dfd02:	f510 4fcb 	cmn.w	r0, #25984	; 0x6580
   dfd06:	f43f aec4 	beq.w	dfa92 <mbedtls_ssl_read_record+0x12>
         * is in flight, as corrupting ssl->in_msglen during
         * ssl->in_offt != NULL is fatal. */
        if( ssl->in_offt != NULL )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   dfd0a:	4605      	mov	r5, r0
   dfd0c:	e001      	b.n	dfd12 <mbedtls_ssl_read_record+0x292>
                       ssl->in_msg, ssl->in_msglen );

        if( ssl->in_msglen > MBEDTLS_SSL_IN_CONTENT_LEN )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
   dfd0e:	4806      	ldr	r0, [pc, #24]	; (dfd28 <mbedtls_ssl_read_record+0x2a8>)
   dfd10:	e7fb      	b.n	dfd0a <mbedtls_ssl_read_record+0x28a>
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= read record" ) );

    return( 0 );
}
   dfd12:	4628      	mov	r0, r5
   dfd14:	b010      	add	sp, #64	; 0x40
   dfd16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dfd1a:	bf00      	nop
   dfd1c:	ffff9400 	.word	0xffff9400
   dfd20:	ffff8e80 	.word	0xffff8e80
   dfd24:	ffff9480 	.word	0xffff9480
   dfd28:	ffff8e00 	.word	0xffff8e00

000dfd2c <mbedtls_ssl_write_certificate>:

#else
/* Some certificate support -> implement write and parse */

int mbedtls_ssl_write_certificate( mbedtls_ssl_context *ssl )
{
   dfd2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    size_t i, n;
    const mbedtls_x509_crt *crt;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
   dfd2e:	6c03      	ldr	r3, [r0, #64]	; 0x40

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate" ) );

    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
   dfd30:	681b      	ldr	r3, [r3, #0]
   dfd32:	7a9a      	ldrb	r2, [r3, #10]
   dfd34:	2a0b      	cmp	r2, #11

#else
/* Some certificate support -> implement write and parse */

int mbedtls_ssl_write_certificate( mbedtls_ssl_context *ssl )
{
   dfd36:	4604      	mov	r4, r0
    const mbedtls_x509_crt *crt;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate" ) );

    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
   dfd38:	d809      	bhi.n	dfd4e <mbedtls_ssl_write_certificate+0x22>
   dfd3a:	f44f 6316 	mov.w	r3, #2400	; 0x960
   dfd3e:	40d3      	lsrs	r3, r2
   dfd40:	07da      	lsls	r2, r3, #31
   dfd42:	d504      	bpl.n	dfd4e <mbedtls_ssl_write_certificate+0x22>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate" ) );
        ssl->state++;
   dfd44:	6863      	ldr	r3, [r4, #4]
   dfd46:	3301      	adds	r3, #1
   dfd48:	6063      	str	r3, [r4, #4]
        return( 0 );
   dfd4a:	2000      	movs	r0, #0
   dfd4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }

#if defined(MBEDTLS_SSL_CLI_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
   dfd4e:	6822      	ldr	r2, [r4, #0]
   dfd50:	f892 307c 	ldrb.w	r3, [r2, #124]	; 0x7c
   dfd54:	07db      	lsls	r3, r3, #31
   dfd56:	d403      	bmi.n	dfd60 <mbedtls_ssl_write_certificate+0x34>
    {
        if( ssl->client_auth == 0 )
   dfd58:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   dfd5c:	2b00      	cmp	r3, #0
   dfd5e:	d0f1      	beq.n	dfd44 <mbedtls_ssl_write_certificate+0x18>

static inline mbedtls_x509_crt *mbedtls_ssl_own_cert( mbedtls_ssl_context *ssl )
{
    mbedtls_ssl_key_cert *key_cert;

    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
   dfd60:	6b23      	ldr	r3, [r4, #48]	; 0x30
   dfd62:	b113      	cbz	r3, dfd6a <mbedtls_ssl_write_certificate+0x3e>
   dfd64:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
   dfd68:	b90b      	cbnz	r3, dfd6e <mbedtls_ssl_write_certificate+0x42>
        key_cert = ssl->handshake->key_cert;
    else
        key_cert = ssl->conf->key_cert;
   dfd6a:	6d13      	ldr	r3, [r2, #80]	; 0x50

    return( key_cert == NULL ? NULL : key_cert->cert );
   dfd6c:	b30b      	cbz	r3, dfdb2 <mbedtls_ssl_write_certificate+0x86>
   dfd6e:	681e      	ldr	r6, [r3, #0]
   dfd70:	2307      	movs	r3, #7
     *    n+3 . ...   upper level cert, etc.
     */
    i = 7;
    crt = mbedtls_ssl_own_cert( ssl );

    while( crt != NULL )
   dfd72:	b1fe      	cbz	r6, dfdb4 <mbedtls_ssl_write_certificate+0x88>
    {
        n = crt->raw.len;
   dfd74:	6875      	ldr	r5, [r6, #4]
        if( n > MBEDTLS_SSL_OUT_CONTENT_LEN - 3 - i )
   dfd76:	f5c3 52ff 	rsb	r2, r3, #8160	; 0x1fe0
   dfd7a:	321d      	adds	r2, #29
   dfd7c:	4295      	cmp	r5, r2
   dfd7e:	d836      	bhi.n	dfdee <mbedtls_ssl_write_certificate+0xc2>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate too large, %d > %d",
                           i + 3 + n, MBEDTLS_SSL_OUT_CONTENT_LEN ) );
            return( MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE );
        }

        ssl->out_msg[i    ] = (unsigned char)( n >> 16 );
   dfd80:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   dfd84:	0c29      	lsrs	r1, r5, #16
   dfd86:	54d1      	strb	r1, [r2, r3]
        ssl->out_msg[i + 1] = (unsigned char)( n >>  8 );
   dfd88:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   dfd8c:	441a      	add	r2, r3
   dfd8e:	0a29      	lsrs	r1, r5, #8
   dfd90:	7051      	strb	r1, [r2, #1]
        ssl->out_msg[i + 2] = (unsigned char)( n       );
   dfd92:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   dfd96:	441a      	add	r2, r3

        i += 3; memcpy( ssl->out_msg + i, crt->raw.p, n );
   dfd98:	1cdf      	adds	r7, r3, #3
            return( MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE );
        }

        ssl->out_msg[i    ] = (unsigned char)( n >> 16 );
        ssl->out_msg[i + 1] = (unsigned char)( n >>  8 );
        ssl->out_msg[i + 2] = (unsigned char)( n       );
   dfd9a:	7095      	strb	r5, [r2, #2]

        i += 3; memcpy( ssl->out_msg + i, crt->raw.p, n );
   dfd9c:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   dfda0:	68b1      	ldr	r1, [r6, #8]
   dfda2:	462a      	mov	r2, r5
   dfda4:	4438      	add	r0, r7
   dfda6:	f009 fe86 	bl	e9ab6 <memcpy>
        i += n; crt = crt->next;
   dfdaa:	19eb      	adds	r3, r5, r7
   dfdac:	f8d6 6130 	ldr.w	r6, [r6, #304]	; 0x130
     *    n+3 . ...   upper level cert, etc.
     */
    i = 7;
    crt = mbedtls_ssl_own_cert( ssl );

    while( crt != NULL )
   dfdb0:	e7df      	b.n	dfd72 <mbedtls_ssl_write_certificate+0x46>
   dfdb2:	2307      	movs	r3, #7

        i += 3; memcpy( ssl->out_msg + i, crt->raw.p, n );
        i += n; crt = crt->next;
    }

    ssl->out_msg[4]  = (unsigned char)( ( i - 7 ) >> 16 );
   dfdb4:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
   dfdb8:	1fda      	subs	r2, r3, #7
   dfdba:	0c10      	lsrs	r0, r2, #16
   dfdbc:	7108      	strb	r0, [r1, #4]
    ssl->out_msg[5]  = (unsigned char)( ( i - 7 ) >>  8 );
   dfdbe:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
   dfdc2:	0a10      	lsrs	r0, r2, #8
   dfdc4:	7148      	strb	r0, [r1, #5]
    ssl->out_msg[6]  = (unsigned char)( ( i - 7 )       );
   dfdc6:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
   dfdca:	718a      	strb	r2, [r1, #6]

    ssl->out_msglen  = i;
   dfdcc:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
   dfdd0:	2316      	movs	r3, #22
   dfdd2:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE;
   dfdd6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   dfdda:	220b      	movs	r2, #11
   dfddc:	701a      	strb	r2, [r3, #0]

#if defined(MBEDTLS_SSL_PROTO_SSL3) && defined(MBEDTLS_SSL_CLI_C)
write_msg:
#endif

    ssl->state++;
   dfdde:	6863      	ldr	r3, [r4, #4]
   dfde0:	3301      	adds	r3, #1
   dfde2:	6063      	str	r3, [r4, #4]

    if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
   dfde4:	4620      	mov	r0, r4
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write certificate" ) );

    return( ret );
}
   dfde6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
write_msg:
#endif

    ssl->state++;

    if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
   dfdea:	f7ff bd8f 	b.w	df90c <mbedtls_ssl_write_handshake_msg>
        n = crt->raw.len;
        if( n > MBEDTLS_SSL_OUT_CONTENT_LEN - 3 - i )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate too large, %d > %d",
                           i + 3 + n, MBEDTLS_SSL_OUT_CONTENT_LEN ) );
            return( MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE );
   dfdee:	4801      	ldr	r0, [pc, #4]	; (dfdf4 <mbedtls_ssl_write_certificate+0xc8>)
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write certificate" ) );

    return( ret );
}
   dfdf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   dfdf2:	bf00      	nop
   dfdf4:	ffff8b00 	.word	0xffff8b00

000dfdf8 <mbedtls_ssl_write_change_cipher_spec>:
{
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write change cipher spec" ) );

    ssl->out_msgtype = MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC;
   dfdf8:	2214      	movs	r2, #20
    ssl->out_msglen  = 1;
    ssl->out_msg[0]  = 1;
   dfdfa:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
{
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write change cipher spec" ) );

    ssl->out_msgtype = MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC;
   dfdfe:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
    ssl->out_msglen  = 1;
   dfe02:	2201      	movs	r2, #1
   dfe04:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
    ssl->out_msg[0]  = 1;
   dfe08:	700a      	strb	r2, [r1, #0]

    ssl->state++;
   dfe0a:	6842      	ldr	r2, [r0, #4]
   dfe0c:	3201      	adds	r2, #1
   dfe0e:	6042      	str	r2, [r0, #4]

    if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
   dfe10:	f7ff bd7c 	b.w	df90c <mbedtls_ssl_write_handshake_msg>

000dfe14 <mbedtls_ssl_parse_change_cipher_spec>:

    return( 0 );
}

int mbedtls_ssl_parse_change_cipher_spec( mbedtls_ssl_context *ssl )
{
   dfe14:	b510      	push	{r4, lr}
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse change cipher spec" ) );

    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   dfe16:	2101      	movs	r1, #1

    return( 0 );
}

int mbedtls_ssl_parse_change_cipher_spec( mbedtls_ssl_context *ssl )
{
   dfe18:	4604      	mov	r4, r0
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse change cipher spec" ) );

    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   dfe1a:	f7ff fe31 	bl	dfa80 <mbedtls_ssl_read_record>
   dfe1e:	bb28      	cbnz	r0, dfe6c <mbedtls_ssl_parse_change_cipher_spec+0x58>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC )
   dfe20:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   dfe22:	2b14      	cmp	r3, #20
   dfe24:	d006      	beq.n	dfe34 <mbedtls_ssl_parse_change_cipher_spec+0x20>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad change cipher spec message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
   dfe26:	220a      	movs	r2, #10
   dfe28:	2102      	movs	r1, #2
   dfe2a:	4620      	mov	r0, r4
   dfe2c:	f7ff fe0c 	bl	dfa48 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
   dfe30:	480f      	ldr	r0, [pc, #60]	; (dfe70 <mbedtls_ssl_parse_change_cipher_spec+0x5c>)
   dfe32:	bd10      	pop	{r4, pc}
    /*
     * Switch to our negotiated transform and session parameters for inbound
     * data.
     */
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "switching to new transform spec for inbound data" ) );
    ssl->transform_in = ssl->transform_negotiate;
   dfe34:	6c23      	ldr	r3, [r4, #64]	; 0x40
   dfe36:	6363      	str	r3, [r4, #52]	; 0x34
    ssl->session_in = ssl->session_negotiate;
   dfe38:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   dfe3a:	6223      	str	r3, [r4, #32]
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
        }
    }
    else
#endif /* MBEDTLS_SSL_PROTO_DTLS */
    memset( ssl->in_ctr, 0, 8 );
   dfe3c:	6d63      	ldr	r3, [r4, #84]	; 0x54
   dfe3e:	6018      	str	r0, [r3, #0]
   dfe40:	6058      	str	r0, [r3, #4]
        ssl->in_iv  = ssl->in_hdr + 13;
    }
    else
#endif
    {
        ssl->in_ctr = ssl->in_hdr - 8;
   dfe42:	6da3      	ldr	r3, [r4, #88]	; 0x58
    }
    else
#endif /* MBEDTLS_SSL_PROTO_DTLS */
    memset( ssl->in_ctr, 0, 8 );

    ssl_update_in_pointers( ssl, ssl->transform_negotiate );
   dfe44:	6c21      	ldr	r1, [r4, #64]	; 0x40
        ssl->in_iv  = ssl->in_hdr + 13;
    }
    else
#endif
    {
        ssl->in_ctr = ssl->in_hdr - 8;
   dfe46:	f1a3 0208 	sub.w	r2, r3, #8
   dfe4a:	6562      	str	r2, [r4, #84]	; 0x54
        ssl->in_len = ssl->in_hdr + 3;
   dfe4c:	1cda      	adds	r2, r3, #3
        ssl->in_iv  = ssl->in_hdr + 5;
   dfe4e:	3305      	adds	r3, #5
    }
    else
#endif
    {
        ssl->in_ctr = ssl->in_hdr - 8;
        ssl->in_len = ssl->in_hdr + 3;
   dfe50:	65e2      	str	r2, [r4, #92]	; 0x5c
        ssl->in_iv  = ssl->in_hdr + 5;
   dfe52:	6623      	str	r3, [r4, #96]	; 0x60
    }

    /* Offset in_msg from in_iv to allow space for explicit IV, if used. */
    if( transform != NULL &&
   dfe54:	b131      	cbz	r1, dfe64 <mbedtls_ssl_parse_change_cipher_spec+0x50>
   dfe56:	68e2      	ldr	r2, [r4, #12]
   dfe58:	2a01      	cmp	r2, #1
        ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
    {
        ssl->in_msg = ssl->in_iv + transform->ivlen - transform->fixed_ivlen;
   dfe5a:	bfc1      	itttt	gt
   dfe5c:	68ca      	ldrgt	r2, [r1, #12]
   dfe5e:	6909      	ldrgt	r1, [r1, #16]
   dfe60:	1a52      	subgt	r2, r2, r1
   dfe62:	189b      	addgt	r3, r3, r2
    }
    else
        ssl->in_msg = ssl->in_iv;
   dfe64:	6663      	str	r3, [r4, #100]	; 0x64
            return( MBEDTLS_ERR_SSL_HW_ACCEL_FAILED );
        }
    }
#endif

    ssl->state++;
   dfe66:	6863      	ldr	r3, [r4, #4]
   dfe68:	3301      	adds	r3, #1
   dfe6a:	6063      	str	r3, [r4, #4]

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse change cipher spec" ) );

    return( 0 );
}
   dfe6c:	bd10      	pop	{r4, pc}
   dfe6e:	bf00      	nop
   dfe70:	ffff8900 	.word	0xffff8900

000dfe74 <mbedtls_ssl_optimize_checksum>:
        ssl->handshake->update_checksum = ssl_update_checksum_md5sha1;
    else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA512_C)
    if( ciphersuite_info->mac == MBEDTLS_MD_SHA384 )
   dfe74:	7a4b      	ldrb	r3, [r1, #9]
   dfe76:	2b07      	cmp	r3, #7
   dfe78:	6b03      	ldr	r3, [r0, #48]	; 0x30
        ssl->handshake->update_checksum = ssl_update_checksum_sha384;
   dfe7a:	bf0c      	ite	eq
   dfe7c:	4a02      	ldreq	r2, [pc, #8]	; (dfe88 <mbedtls_ssl_optimize_checksum+0x14>)
    else
#endif
#if defined(MBEDTLS_SHA256_C)
    if( ciphersuite_info->mac != MBEDTLS_MD_SHA384 )
        ssl->handshake->update_checksum = ssl_update_checksum_sha256;
   dfe7e:	4a03      	ldrne	r2, [pc, #12]	; (dfe8c <mbedtls_ssl_optimize_checksum+0x18>)
   dfe80:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
   dfe84:	4770      	bx	lr
   dfe86:	bf00      	nop
   dfe88:	000df26f 	.word	0x000df26f
   dfe8c:	000df265 	.word	0x000df265

000dfe90 <mbedtls_ssl_write_finished>:

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup" ) );
}

int mbedtls_ssl_write_finished( mbedtls_ssl_context *ssl )
{
   dfe90:	b510      	push	{r4, lr}
    int ret, hash_len;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write finished" ) );

    ssl_update_out_pointers( ssl, ssl->transform_negotiate );
   dfe92:	6c01      	ldr	r1, [r0, #64]	; 0x40

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup" ) );
}

int mbedtls_ssl_write_finished( mbedtls_ssl_context *ssl )
{
   dfe94:	4604      	mov	r4, r0
    int ret, hash_len;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write finished" ) );

    ssl_update_out_pointers( ssl, ssl->transform_negotiate );
   dfe96:	f7ff f865 	bl	def64 <_ZL23ssl_update_out_pointersP19mbedtls_ssl_contextP21mbedtls_ssl_transform>

    ssl->handshake->calc_finished( ssl, ssl->out_msg + 4, ssl->conf->endpoint );
   dfe9a:	6803      	ldr	r3, [r0, #0]
   dfe9c:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
   dfea0:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
   dfea4:	6b03      	ldr	r3, [r0, #48]	; 0x30
   dfea6:	f002 0201 	and.w	r2, r2, #1
   dfeaa:	f8d3 32a8 	ldr.w	r3, [r3, #680]	; 0x2a8
   dfeae:	3104      	adds	r1, #4
   dfeb0:	4798      	blx	r3
     * RFC 5246 7.4.9 (Page 63) says 12 is the default length and ciphersuites
     * may define some other value. Currently (early 2016), no defined
     * ciphersuite does this (and this is unlikely to change as activity has
     * moved to TLS 1.3 now) so we can keep the hardcoded 12 here.
     */
    hash_len = ( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ) ? 36 : 12;
   dfeb2:	68e3      	ldr	r3, [r4, #12]
   dfeb4:	2b00      	cmp	r3, #0
#if defined(MBEDTLS_SSL_RENEGOTIATION)
    ssl->verify_data_len = hash_len;
    memcpy( ssl->own_verify_data, ssl->out_msg + 4, hash_len );
#endif

    ssl->out_msglen  = 4 + hash_len;
   dfeb6:	bf14      	ite	ne
   dfeb8:	2310      	movne	r3, #16
   dfeba:	2328      	moveq	r3, #40	; 0x28
   dfebc:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
   dfec0:	2316      	movs	r3, #22
   dfec2:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_FINISHED;
   dfec6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   dfeca:	2214      	movs	r2, #20
   dfecc:	701a      	strb	r2, [r3, #0]

    /*
     * In case of session resuming, invert the client and server
     * ChangeCipherSpec messages order.
     */
    if( ssl->handshake->resume != 0 )
   dfece:	6b23      	ldr	r3, [r4, #48]	; 0x30
   dfed0:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
   dfed4:	b133      	cbz	r3, dfee4 <mbedtls_ssl_write_finished+0x54>
    {
#if defined(MBEDTLS_SSL_CLI_C)
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
   dfed6:	6823      	ldr	r3, [r4, #0]
   dfed8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
   dfedc:	07db      	lsls	r3, r3, #31
   dfede:	d404      	bmi.n	dfeea <mbedtls_ssl_write_finished+0x5a>
            ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
   dfee0:	230f      	movs	r3, #15
   dfee2:	e001      	b.n	dfee8 <mbedtls_ssl_write_finished+0x58>
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
            ssl->state = MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC;
#endif
    }
    else
        ssl->state++;
   dfee4:	6863      	ldr	r3, [r4, #4]
   dfee6:	3301      	adds	r3, #1
   dfee8:	6063      	str	r3, [r4, #4]
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
        }
    }
    else
#endif /* MBEDTLS_SSL_PROTO_DTLS */
    memset( ssl->cur_out_ctr, 0, 8 );
   dfeea:	2300      	movs	r3, #0
   dfeec:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
   dfef0:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac

    ssl->transform_out = ssl->transform_negotiate;
   dfef4:	6c23      	ldr	r3, [r4, #64]	; 0x40
   dfef6:	63a3      	str	r3, [r4, #56]	; 0x38
    ssl->session_out = ssl->session_negotiate;
   dfef8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   dfefa:	6263      	str	r3, [r4, #36]	; 0x24
#if defined(MBEDTLS_SSL_PROTO_DTLS)
    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        mbedtls_ssl_send_flight_completed( ssl );
#endif

    if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
   dfefc:	4620      	mov	r0, r4
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write finished" ) );

    return( 0 );
}
   dfefe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#if defined(MBEDTLS_SSL_PROTO_DTLS)
    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        mbedtls_ssl_send_flight_completed( ssl );
#endif

    if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
   dff02:	f7ff bd03 	b.w	df90c <mbedtls_ssl_write_handshake_msg>
	...

000dff08 <mbedtls_ssl_parse_finished>:
#else
#define SSL_MAX_HASH_LEN 12
#endif

int mbedtls_ssl_parse_finished( mbedtls_ssl_context *ssl )
{
   dff08:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    unsigned int hash_len;
    unsigned char buf[SSL_MAX_HASH_LEN];

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse finished" ) );

    ssl->handshake->calc_finished( ssl, buf, ssl->conf->endpoint ^ 1 );
   dff0a:	6803      	ldr	r3, [r0, #0]
   dff0c:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
   dff10:	6b03      	ldr	r3, [r0, #48]	; 0x30
   dff12:	43d2      	mvns	r2, r2
   dff14:	ad01      	add	r5, sp, #4
#else
#define SSL_MAX_HASH_LEN 12
#endif

int mbedtls_ssl_parse_finished( mbedtls_ssl_context *ssl )
{
   dff16:	4604      	mov	r4, r0
    unsigned int hash_len;
    unsigned char buf[SSL_MAX_HASH_LEN];

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse finished" ) );

    ssl->handshake->calc_finished( ssl, buf, ssl->conf->endpoint ^ 1 );
   dff18:	4629      	mov	r1, r5
   dff1a:	f8d3 32a8 	ldr.w	r3, [r3, #680]	; 0x2a8
   dff1e:	f002 0201 	and.w	r2, r2, #1
   dff22:	4798      	blx	r3

    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   dff24:	2101      	movs	r1, #1
   dff26:	4620      	mov	r0, r4
   dff28:	f7ff fdaa 	bl	dfa80 <mbedtls_ssl_read_record>
   dff2c:	2800      	cmp	r0, #0
   dff2e:	d13b      	bne.n	dffa8 <mbedtls_ssl_parse_finished+0xa0>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
   dff30:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   dff32:	2b16      	cmp	r3, #22
   dff34:	d006      	beq.n	dff44 <mbedtls_ssl_parse_finished+0x3c>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
   dff36:	220a      	movs	r2, #10
   dff38:	2102      	movs	r1, #2
   dff3a:	4620      	mov	r0, r4
   dff3c:	f7ff fd84 	bl	dfa48 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
   dff40:	481a      	ldr	r0, [pc, #104]	; (dffac <mbedtls_ssl_parse_finished+0xa4>)
   dff42:	e031      	b.n	dffa8 <mbedtls_ssl_parse_finished+0xa0>
        hash_len = 36;
    else
#endif
        hash_len = 12;

    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_FINISHED ||
   dff44:	6e61      	ldr	r1, [r4, #100]	; 0x64
   dff46:	780b      	ldrb	r3, [r1, #0]
   dff48:	2b14      	cmp	r3, #20
   dff4a:	d115      	bne.n	dff78 <mbedtls_ssl_parse_finished+0x70>
   dff4c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   dff4e:	2b10      	cmp	r3, #16
   dff50:	d112      	bne.n	dff78 <mbedtls_ssl_parse_finished+0x70>
static inline int mbedtls_ssl_safer_memcmp( const void *a, const void *b, size_t n )
{
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;
   dff52:	f88d 0003 	strb.w	r0, [sp, #3]
   dff56:	1d03      	adds	r3, r0, #4
    for( i = 0; i < n; i++ )
    {
        /* Read volatile data in order before computing diff.
         * This avoids IAR compiler warning:
         * 'the order of volatile accesses is undefined ..' */
        unsigned char x = A[i], y = B[i];
   dff58:	5ccb      	ldrb	r3, [r1, r3]
   dff5a:	5c2a      	ldrb	r2, [r5, r0]
        diff |= x ^ y;
   dff5c:	f89d 6003 	ldrb.w	r6, [sp, #3]
   dff60:	4053      	eors	r3, r2
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;

    for( i = 0; i < n; i++ )
   dff62:	3001      	adds	r0, #1
    {
        /* Read volatile data in order before computing diff.
         * This avoids IAR compiler warning:
         * 'the order of volatile accesses is undefined ..' */
        unsigned char x = A[i], y = B[i];
        diff |= x ^ y;
   dff64:	4333      	orrs	r3, r6
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;

    for( i = 0; i < n; i++ )
   dff66:	280c      	cmp	r0, #12
    {
        /* Read volatile data in order before computing diff.
         * This avoids IAR compiler warning:
         * 'the order of volatile accesses is undefined ..' */
        unsigned char x = A[i], y = B[i];
        diff |= x ^ y;
   dff68:	f88d 3003 	strb.w	r3, [sp, #3]
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;

    for( i = 0; i < n; i++ )
   dff6c:	d1f3      	bne.n	dff56 <mbedtls_ssl_parse_finished+0x4e>
         * 'the order of volatile accesses is undefined ..' */
        unsigned char x = A[i], y = B[i];
        diff |= x ^ y;
    }

    return( diff );
   dff6e:	f89d 3003 	ldrb.w	r3, [sp, #3]
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_FINISHED );
    }

    if( mbedtls_ssl_safer_memcmp( ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl ),
   dff72:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   dff76:	b133      	cbz	r3, dff86 <mbedtls_ssl_parse_finished+0x7e>
                      buf, hash_len ) != 0 )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
   dff78:	2232      	movs	r2, #50	; 0x32
   dff7a:	2102      	movs	r1, #2
   dff7c:	4620      	mov	r0, r4
   dff7e:	f7ff fd63 	bl	dfa48 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_FINISHED );
   dff82:	480b      	ldr	r0, [pc, #44]	; (dffb0 <mbedtls_ssl_parse_finished+0xa8>)
   dff84:	e010      	b.n	dffa8 <mbedtls_ssl_parse_finished+0xa0>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
    ssl->verify_data_len = hash_len;
    memcpy( ssl->peer_verify_data, buf, hash_len );
#endif

    if( ssl->handshake->resume != 0 )
   dff86:	6b23      	ldr	r3, [r4, #48]	; 0x30
   dff88:	f8d3 0348 	ldr.w	r0, [r3, #840]	; 0x348
   dff8c:	b138      	cbz	r0, dff9e <mbedtls_ssl_parse_finished+0x96>
    {
#if defined(MBEDTLS_SSL_CLI_C)
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
   dff8e:	6823      	ldr	r3, [r4, #0]
   dff90:	f893 007c 	ldrb.w	r0, [r3, #124]	; 0x7c
   dff94:	f010 0001 	ands.w	r0, r0, #1
   dff98:	d105      	bne.n	dffa6 <mbedtls_ssl_parse_finished+0x9e>
            ssl->state = MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC;
   dff9a:	230a      	movs	r3, #10
   dff9c:	e001      	b.n	dffa2 <mbedtls_ssl_parse_finished+0x9a>
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
            ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
#endif
    }
    else
        ssl->state++;
   dff9e:	6863      	ldr	r3, [r4, #4]
   dffa0:	3301      	adds	r3, #1
   dffa2:	6063      	str	r3, [r4, #4]
   dffa4:	e000      	b.n	dffa8 <mbedtls_ssl_parse_finished+0xa0>
        mbedtls_ssl_recv_flight_completed( ssl );
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse finished" ) );

    return( 0 );
   dffa6:	4610      	mov	r0, r2
}
   dffa8:	b004      	add	sp, #16
   dffaa:	bd70      	pop	{r4, r5, r6, pc}
   dffac:	ffff8900 	.word	0xffff8900
   dffb0:	ffff8180 	.word	0xffff8180

000dffb4 <mbedtls_ssl_session_init>:
    mbedtls_md_init( &transform->md_ctx_dec );
}

void mbedtls_ssl_session_init( mbedtls_ssl_session *session )
{
    memset( session, 0, sizeof(mbedtls_ssl_session) );
   dffb4:	2274      	movs	r2, #116	; 0x74
   dffb6:	2100      	movs	r1, #0
   dffb8:	f009 bda3 	b.w	e9b02 <memset>

000dffbc <mbedtls_ssl_init>:
/*
 * Initialize an SSL context
 */
void mbedtls_ssl_init( mbedtls_ssl_context *ssl )
{
    memset( ssl, 0, sizeof( mbedtls_ssl_context ) );
   dffbc:	22bc      	movs	r2, #188	; 0xbc
   dffbe:	2100      	movs	r1, #0
   dffc0:	f009 bd9f 	b.w	e9b02 <memset>

000dffc4 <mbedtls_ssl_conf_authmode>:
}
#endif

void mbedtls_ssl_conf_authmode( mbedtls_ssl_config *conf, int authmode )
{
    conf->authmode   = authmode;
   dffc4:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
   dffc8:	f361 0383 	bfi	r3, r1, #2, #2
   dffcc:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
   dffd0:	4770      	bx	lr

000dffd2 <mbedtls_ssl_conf_verify>:
#if defined(MBEDTLS_X509_CRT_PARSE_C)
void mbedtls_ssl_conf_verify( mbedtls_ssl_config *conf,
                     int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                     void *p_vrfy )
{
    conf->f_vrfy      = f_vrfy;
   dffd2:	6341      	str	r1, [r0, #52]	; 0x34
    conf->p_vrfy      = p_vrfy;
   dffd4:	6382      	str	r2, [r0, #56]	; 0x38
   dffd6:	4770      	bx	lr

000dffd8 <mbedtls_ssl_conf_rng>:

void mbedtls_ssl_conf_rng( mbedtls_ssl_config *conf,
                  int (*f_rng)(void *, unsigned char *, size_t),
                  void *p_rng )
{
    conf->f_rng      = f_rng;
   dffd8:	6181      	str	r1, [r0, #24]
    conf->p_rng      = p_rng;
   dffda:	61c2      	str	r2, [r0, #28]
   dffdc:	4770      	bx	lr

000dffde <mbedtls_ssl_conf_dbg>:

void mbedtls_ssl_conf_dbg( mbedtls_ssl_config *conf,
                  void (*f_dbg)(void *, int, const char *, int, const char *),
                  void  *p_dbg )
{
    conf->f_dbg      = f_dbg;
   dffde:	6101      	str	r1, [r0, #16]
    conf->p_dbg      = p_dbg;
   dffe0:	6142      	str	r2, [r0, #20]
   dffe2:	4770      	bx	lr

000dffe4 <mbedtls_ssl_set_bio>:
        mbedtls_ssl_recv_t *f_recv,
        mbedtls_ssl_recv_timeout_t *f_recv_timeout )
{
    ssl->p_bio          = p_bio;
    ssl->f_send         = f_send;
    ssl->f_recv         = f_recv;
   dffe4:	6143      	str	r3, [r0, #20]
    ssl->f_recv_timeout = f_recv_timeout;
   dffe6:	9b00      	ldr	r3, [sp, #0]
        void *p_bio,
        mbedtls_ssl_send_t *f_send,
        mbedtls_ssl_recv_t *f_recv,
        mbedtls_ssl_recv_timeout_t *f_recv_timeout )
{
    ssl->p_bio          = p_bio;
   dffe8:	61c1      	str	r1, [r0, #28]
    ssl->f_send         = f_send;
   dffea:	6102      	str	r2, [r0, #16]
    ssl->f_recv         = f_recv;
    ssl->f_recv_timeout = f_recv_timeout;
   dffec:	6183      	str	r3, [r0, #24]
   dffee:	4770      	bx	lr

000dfff0 <mbedtls_ssl_set_timer_cb>:

void mbedtls_ssl_set_timer_cb( mbedtls_ssl_context *ssl,
                               void *p_timer,
                               mbedtls_ssl_set_timer_t *f_set_timer,
                               mbedtls_ssl_get_timer_t *f_get_timer )
{
   dfff0:	b410      	push	{r4}
    ssl->p_timer        = p_timer;
   dfff2:	6441      	str	r1, [r0, #68]	; 0x44
    ssl->f_set_timer    = f_set_timer;
   dfff4:	6482      	str	r2, [r0, #72]	; 0x48
    ssl->f_get_timer    = f_get_timer;
   dfff6:	64c3      	str	r3, [r0, #76]	; 0x4c

    /* Make sure we start with no timer running */
    ssl_set_timer( ssl, 0 );
   dfff8:	2100      	movs	r1, #0
}
   dfffa:	f85d 4b04 	ldr.w	r4, [sp], #4
    ssl->p_timer        = p_timer;
    ssl->f_set_timer    = f_set_timer;
    ssl->f_get_timer    = f_get_timer;

    /* Make sure we start with no timer running */
    ssl_set_timer( ssl, 0 );
   dfffe:	f7fe bfaa 	b.w	def56 <_ZL13ssl_set_timerP19mbedtls_ssl_contextm>

000e0002 <mbedtls_ssl_conf_own_cert>:

int mbedtls_ssl_conf_own_cert( mbedtls_ssl_config *conf,
                              mbedtls_x509_crt *own_cert,
                              mbedtls_pk_context *pk_key )
{
    return( ssl_append_key_cert( &conf->key_cert, own_cert, pk_key ) );
   e0002:	3050      	adds	r0, #80	; 0x50
   e0004:	f7ff b910 	b.w	df228 <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context>

000e0008 <mbedtls_ssl_conf_ca_chain>:

void mbedtls_ssl_conf_ca_chain( mbedtls_ssl_config *conf,
                               mbedtls_x509_crt *ca_chain,
                               mbedtls_x509_crl *ca_crl )
{
    conf->ca_chain   = ca_chain;
   e0008:	6541      	str	r1, [r0, #84]	; 0x54
    conf->ca_crl     = ca_crl;
   e000a:	6582      	str	r2, [r0, #88]	; 0x58
   e000c:	4770      	bx	lr
	...

000e0010 <mbedtls_ssl_set_hostname>:
}
#endif /* MBEDTLS_ECP_C */

#if defined(MBEDTLS_X509_CRT_PARSE_C)
int mbedtls_ssl_set_hostname( mbedtls_ssl_context *ssl, const char *hostname )
{
   e0010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e0012:	4606      	mov	r6, r0
    /* Initialize to suppress unnecessary compiler warning */
    size_t hostname_len = 0;

    /* Check if new hostname is valid before
     * making any change to current one */
    if( hostname != NULL )
   e0014:	460c      	mov	r4, r1
   e0016:	b131      	cbz	r1, e0026 <mbedtls_ssl_set_hostname+0x16>
    {
        hostname_len = strlen( hostname );
   e0018:	4608      	mov	r0, r1
   e001a:	f009 fdc3 	bl	e9ba4 <strlen>

        if( hostname_len > MBEDTLS_SSL_MAX_HOST_NAME_LEN )
   e001e:	28ff      	cmp	r0, #255	; 0xff

    /* Check if new hostname is valid before
     * making any change to current one */
    if( hostname != NULL )
    {
        hostname_len = strlen( hostname );
   e0020:	4605      	mov	r5, r0

        if( hostname_len > MBEDTLS_SSL_MAX_HOST_NAME_LEN )
   e0022:	d901      	bls.n	e0028 <mbedtls_ssl_set_hostname+0x18>
   e0024:	e022      	b.n	e006c <mbedtls_ssl_set_hostname+0x5c>

#if defined(MBEDTLS_X509_CRT_PARSE_C)
int mbedtls_ssl_set_hostname( mbedtls_ssl_context *ssl, const char *hostname )
{
    /* Initialize to suppress unnecessary compiler warning */
    size_t hostname_len = 0;
   e0026:	460d      	mov	r5, r1
    }

    /* Now it's clear that we will overwrite the old hostname,
     * so we can free it safely */

    if( ssl->hostname != NULL )
   e0028:	f8d6 70b4 	ldr.w	r7, [r6, #180]	; 0xb4
   e002c:	b157      	cbz	r7, e0044 <mbedtls_ssl_set_hostname+0x34>
    {
        mbedtls_platform_zeroize( ssl->hostname, strlen( ssl->hostname ) );
   e002e:	4638      	mov	r0, r7
   e0030:	f009 fdb8 	bl	e9ba4 <strlen>
   e0034:	4601      	mov	r1, r0
   e0036:	4638      	mov	r0, r7
   e0038:	f7fb f8e0 	bl	db1fc <mbedtls_platform_zeroize>
        mbedtls_free( ssl->hostname );
   e003c:	f8d6 00b4 	ldr.w	r0, [r6, #180]	; 0xb4
   e0040:	f006 f840 	bl	e60c4 <free>
    }

    /* Passing NULL as hostname shall clear the old one */

    if( hostname == NULL )
   e0044:	b91c      	cbnz	r4, e004e <mbedtls_ssl_set_hostname+0x3e>
    {
        ssl->hostname = NULL;
   e0046:	f8c6 40b4 	str.w	r4, [r6, #180]	; 0xb4
        memcpy( ssl->hostname, hostname, hostname_len );

        ssl->hostname[hostname_len] = '\0';
    }

    return( 0 );
   e004a:	4620      	mov	r0, r4
   e004c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    {
        ssl->hostname = NULL;
    }
    else
    {
        ssl->hostname = (char *)mbedtls_calloc( 1, hostname_len + 1 );
   e004e:	1c69      	adds	r1, r5, #1
   e0050:	2001      	movs	r0, #1
   e0052:	f009 fc0f 	bl	e9874 <calloc>
   e0056:	4607      	mov	r7, r0
   e0058:	f8c6 00b4 	str.w	r0, [r6, #180]	; 0xb4
        if( ssl->hostname == NULL )
   e005c:	b140      	cbz	r0, e0070 <mbedtls_ssl_set_hostname+0x60>
            return( MBEDTLS_ERR_SSL_ALLOC_FAILED );

        memcpy( ssl->hostname, hostname, hostname_len );
   e005e:	462a      	mov	r2, r5
   e0060:	4621      	mov	r1, r4
   e0062:	f009 fd28 	bl	e9ab6 <memcpy>

        ssl->hostname[hostname_len] = '\0';
   e0066:	2000      	movs	r0, #0
   e0068:	5578      	strb	r0, [r7, r5]
   e006a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if( hostname != NULL )
    {
        hostname_len = strlen( hostname );

        if( hostname_len > MBEDTLS_SSL_MAX_HOST_NAME_LEN )
            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   e006c:	4801      	ldr	r0, [pc, #4]	; (e0074 <mbedtls_ssl_set_hostname+0x64>)
   e006e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    else
    {
        ssl->hostname = (char *)mbedtls_calloc( 1, hostname_len + 1 );
        if( ssl->hostname == NULL )
            return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
   e0070:	4801      	ldr	r0, [pc, #4]	; (e0078 <mbedtls_ssl_set_hostname+0x68>)

        ssl->hostname[hostname_len] = '\0';
    }

    return( 0 );
}
   e0072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   e0074:	ffff8f00 	.word	0xffff8f00
   e0078:	ffff8100 	.word	0xffff8100

000e007c <mbedtls_ssl_conf_min_version>:
    conf->max_minor_ver = minor;
}

void mbedtls_ssl_conf_min_version( mbedtls_ssl_config *conf, int major, int minor )
{
    conf->min_major_ver = major;
   e007c:	f880 107a 	strb.w	r1, [r0, #122]	; 0x7a
    conf->min_minor_ver = minor;
   e0080:	f880 207b 	strb.w	r2, [r0, #123]	; 0x7b
   e0084:	4770      	bx	lr
	...

000e0088 <mbedtls_ssl_get_max_frag_len>:
    size_t max_len;

    /*
     * Assume mfl_code is correct since it was checked when set
     */
    max_len = ssl_mfl_code_to_length( ssl->conf->mfl_code );
   e0088:	6803      	ldr	r3, [r0, #0]
   e008a:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
   e008e:	f3c3 1382 	ubfx	r3, r3, #6, #3
   e0092:	3b01      	subs	r3, #1
   e0094:	2b03      	cmp	r3, #3
   e0096:	bf9c      	itt	ls
   e0098:	4a16      	ldrls	r2, [pc, #88]	; (e00f4 <mbedtls_ssl_get_max_frag_len+0x6c>)
   e009a:	f832 3013 	ldrhls.w	r3, [r2, r3, lsl #1]

    /* Check if a smaller max length was negotiated */
    if( ssl->session_out != NULL &&
   e009e:	6a42      	ldr	r2, [r0, #36]	; 0x24
 *    } MaxFragmentLength;
 * and we add 0 -> extension unused
 */
static unsigned int ssl_mfl_code_to_length( int mfl )
{
    switch( mfl )
   e00a0:	bf88      	it	hi
   e00a2:	f44f 5300 	movhi.w	r3, #8192	; 0x2000
     * Assume mfl_code is correct since it was checked when set
     */
    max_len = ssl_mfl_code_to_length( ssl->conf->mfl_code );

    /* Check if a smaller max length was negotiated */
    if( ssl->session_out != NULL &&
   e00a6:	b182      	cbz	r2, e00ca <mbedtls_ssl_get_max_frag_len+0x42>
   e00a8:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
   e00ac:	3a01      	subs	r2, #1
   e00ae:	2a03      	cmp	r2, #3
   e00b0:	d806      	bhi.n	e00c0 <mbedtls_ssl_get_max_frag_len+0x38>
   e00b2:	4910      	ldr	r1, [pc, #64]	; (e00f4 <mbedtls_ssl_get_max_frag_len+0x6c>)
   e00b4:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
   e00b8:	4293      	cmp	r3, r2
   e00ba:	bf28      	it	cs
   e00bc:	4613      	movcs	r3, r2
   e00be:	e004      	b.n	e00ca <mbedtls_ssl_get_max_frag_len+0x42>
   e00c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   e00c4:	bf28      	it	cs
   e00c6:	f44f 5300 	movcs.w	r3, #8192	; 0x2000
    {
        max_len = ssl_mfl_code_to_length( ssl->session_out->mfl_code );
    }

    /* During a handshake, use the value being negotiated */
    if( ssl->session_negotiate != NULL &&
   e00ca:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   e00cc:	b182      	cbz	r2, e00f0 <mbedtls_ssl_get_max_frag_len+0x68>
   e00ce:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
   e00d2:	3a01      	subs	r2, #1
   e00d4:	2a03      	cmp	r2, #3
   e00d6:	d806      	bhi.n	e00e6 <mbedtls_ssl_get_max_frag_len+0x5e>
   e00d8:	4906      	ldr	r1, [pc, #24]	; (e00f4 <mbedtls_ssl_get_max_frag_len+0x6c>)
   e00da:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
   e00de:	4293      	cmp	r3, r2
   e00e0:	bf28      	it	cs
   e00e2:	4613      	movcs	r3, r2
   e00e4:	e004      	b.n	e00f0 <mbedtls_ssl_get_max_frag_len+0x68>
   e00e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   e00ea:	bf28      	it	cs
   e00ec:	f44f 5300 	movcs.w	r3, #8192	; 0x2000
    {
        max_len = ssl_mfl_code_to_length( ssl->session_negotiate->mfl_code );
    }

    return( max_len );
}
   e00f0:	4618      	mov	r0, r3
   e00f2:	4770      	bx	lr
   e00f4:	000ee746 	.word	0x000ee746

000e00f8 <mbedtls_ssl_get_max_out_record_payload>:
            ssl->mtu : ssl->handshake->mtu );
}
#endif /* MBEDTLS_SSL_PROTO_DTLS */

int mbedtls_ssl_get_max_out_record_payload( const mbedtls_ssl_context *ssl )
{
   e00f8:	b508      	push	{r3, lr}
    !defined(MBEDTLS_SSL_PROTO_DTLS)
    (void) ssl;
#endif

#if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)
    const size_t mfl = mbedtls_ssl_get_max_frag_len( ssl );
   e00fa:	f7ff ffc5 	bl	e0088 <mbedtls_ssl_get_max_frag_len>
    !defined(MBEDTLS_SSL_PROTO_DTLS)
    ((void) ssl);
#endif

    return( (int) max_len );
}
   e00fe:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
   e0102:	bf28      	it	cs
   e0104:	f44f 5000 	movcs.w	r0, #8192	; 0x2000
   e0108:	bd08      	pop	{r3, pc}
	...

000e010c <mbedtls_ssl_handshake_step>:
 */
int mbedtls_ssl_handshake_step( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;

    if( ssl == NULL || ssl->conf == NULL )
   e010c:	b138      	cbz	r0, e011e <mbedtls_ssl_handshake_step+0x12>
   e010e:	6803      	ldr	r3, [r0, #0]
   e0110:	b12b      	cbz	r3, e011e <mbedtls_ssl_handshake_step+0x12>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

#if defined(MBEDTLS_SSL_CLI_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
   e0112:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
   e0116:	07db      	lsls	r3, r3, #31
   e0118:	d403      	bmi.n	e0122 <mbedtls_ssl_handshake_step+0x16>
        ret = mbedtls_ssl_handshake_client_step( ssl );
   e011a:	f004 bdbf 	b.w	e4c9c <mbedtls_ssl_handshake_client_step>
int mbedtls_ssl_handshake_step( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;

    if( ssl == NULL || ssl->conf == NULL )
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   e011e:	4802      	ldr	r0, [pc, #8]	; (e0128 <mbedtls_ssl_handshake_step+0x1c>)
   e0120:	4770      	bx	lr
/*
 * Perform a single step of the SSL handshake
 */
int mbedtls_ssl_handshake_step( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
   e0122:	4802      	ldr	r0, [pc, #8]	; (e012c <mbedtls_ssl_handshake_step+0x20>)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
        ret = mbedtls_ssl_handshake_server_step( ssl );
#endif

    return( ret );
}
   e0124:	4770      	bx	lr
   e0126:	bf00      	nop
   e0128:	ffff8f00 	.word	0xffff8f00
   e012c:	ffff8f80 	.word	0xffff8f80

000e0130 <mbedtls_ssl_handshake>:

/*
 * Perform the SSL handshake
 */
int mbedtls_ssl_handshake( mbedtls_ssl_context *ssl )
{
   e0130:	b510      	push	{r4, lr}
    int ret = 0;

    if( ssl == NULL || ssl->conf == NULL )
   e0132:	4604      	mov	r4, r0
   e0134:	b150      	cbz	r0, e014c <mbedtls_ssl_handshake+0x1c>
   e0136:	6803      	ldr	r3, [r0, #0]
   e0138:	b143      	cbz	r3, e014c <mbedtls_ssl_handshake+0x1c>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> handshake" ) );

    while( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
   e013a:	6863      	ldr	r3, [r4, #4]
   e013c:	2b10      	cmp	r3, #16
   e013e:	d007      	beq.n	e0150 <mbedtls_ssl_handshake+0x20>
    {
        ret = mbedtls_ssl_handshake_step( ssl );
   e0140:	4620      	mov	r0, r4
   e0142:	f7ff ffe3 	bl	e010c <mbedtls_ssl_handshake_step>

        if( ret != 0 )
   e0146:	2800      	cmp	r0, #0
   e0148:	d0f7      	beq.n	e013a <mbedtls_ssl_handshake+0xa>
   e014a:	bd10      	pop	{r4, pc}
int mbedtls_ssl_handshake( mbedtls_ssl_context *ssl )
{
    int ret = 0;

    if( ssl == NULL || ssl->conf == NULL )
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   e014c:	4801      	ldr	r0, [pc, #4]	; (e0154 <mbedtls_ssl_handshake+0x24>)
   e014e:	bd10      	pop	{r4, pc}
   e0150:	2000      	movs	r0, #0
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= handshake" ) );

    return( ret );
}
   e0152:	bd10      	pop	{r4, pc}
   e0154:	ffff8f00 	.word	0xffff8f00

000e0158 <mbedtls_ssl_read>:

/*
 * Receive application data decrypted from the SSL layer
 */
int mbedtls_ssl_read( mbedtls_ssl_context *ssl, unsigned char *buf, size_t len )
{
   e0158:	b570      	push	{r4, r5, r6, lr}
   e015a:	460e      	mov	r6, r1
   e015c:	4614      	mov	r4, r2
    int ret;
    size_t n;

    if( ssl == NULL || ssl->conf == NULL )
   e015e:	4605      	mov	r5, r0
   e0160:	2800      	cmp	r0, #0
   e0162:	d05f      	beq.n	e0224 <mbedtls_ssl_read+0xcc>
   e0164:	6803      	ldr	r3, [r0, #0]
   e0166:	2b00      	cmp	r3, #0
   e0168:	d05c      	beq.n	e0224 <mbedtls_ssl_read+0xcc>
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_check_ctr_renegotiate", ret );
        return( ret );
    }
#endif

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
   e016a:	6843      	ldr	r3, [r0, #4]
   e016c:	2b10      	cmp	r3, #16
   e016e:	d006      	beq.n	e017e <mbedtls_ssl_read+0x26>
    {
        ret = mbedtls_ssl_handshake( ssl );
   e0170:	f7ff ffde 	bl	e0130 <mbedtls_ssl_handshake>
        if( ret != MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO &&
   e0174:	f510 4fd6 	cmn.w	r0, #27392	; 0x6b00
   e0178:	d001      	beq.n	e017e <mbedtls_ssl_read+0x26>
   e017a:	2800      	cmp	r0, #0
   e017c:	d16a      	bne.n	e0254 <mbedtls_ssl_read+0xfc>
            return( ret );
        }
    }

    /* Loop as long as no application data record is available */
    while( ssl->in_offt == NULL )
   e017e:	6ea9      	ldr	r1, [r5, #104]	; 0x68
   e0180:	2900      	cmp	r1, #0
   e0182:	d13a      	bne.n	e01fa <mbedtls_ssl_read+0xa2>
    {
        /* Start timer if not already running */
        if( ssl->f_get_timer != NULL &&
   e0184:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   e0186:	b11b      	cbz	r3, e0190 <mbedtls_ssl_read+0x38>
            ssl->f_get_timer( ssl->p_timer ) == -1 )
   e0188:	6c68      	ldr	r0, [r5, #68]	; 0x44
   e018a:	4798      	blx	r3

    /* Loop as long as no application data record is available */
    while( ssl->in_offt == NULL )
    {
        /* Start timer if not already running */
        if( ssl->f_get_timer != NULL &&
   e018c:	3001      	adds	r0, #1
   e018e:	d04f      	beq.n	e0230 <mbedtls_ssl_read+0xd8>
            ssl->f_get_timer( ssl->p_timer ) == -1 )
        {
            ssl_set_timer( ssl, ssl->conf->read_timeout );
        }

        if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   e0190:	2101      	movs	r1, #1
   e0192:	4628      	mov	r0, r5
   e0194:	f7ff fc74 	bl	dfa80 <mbedtls_ssl_read_record>
   e0198:	b120      	cbz	r0, e01a4 <mbedtls_ssl_read+0x4c>
        {
            if( ret == MBEDTLS_ERR_SSL_CONN_EOF )
   e019a:	f510 4fe5 	cmn.w	r0, #29312	; 0x7280
   e019e:	d159      	bne.n	e0254 <mbedtls_ssl_read+0xfc>
                return( 0 );
   e01a0:	2000      	movs	r0, #0
   e01a2:	bd70      	pop	{r4, r5, r6, pc}

            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
            return( ret );
        }

        if( ssl->in_msglen  == 0 &&
   e01a4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   e01a6:	b95b      	cbnz	r3, e01c0 <mbedtls_ssl_read+0x68>
   e01a8:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
   e01aa:	2b17      	cmp	r3, #23
   e01ac:	d108      	bne.n	e01c0 <mbedtls_ssl_read+0x68>
            ssl->in_msgtype == MBEDTLS_SSL_MSG_APPLICATION_DATA )
        {
            /*
             * OpenSSL sends empty messages to randomize the IV
             */
            if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   e01ae:	2101      	movs	r1, #1
   e01b0:	4628      	mov	r0, r5
   e01b2:	f7ff fc65 	bl	dfa80 <mbedtls_ssl_read_record>
   e01b6:	b118      	cbz	r0, e01c0 <mbedtls_ssl_read+0x68>
            {
                if( ret == MBEDTLS_ERR_SSL_CONN_EOF )
   e01b8:	f510 4fe5 	cmn.w	r0, #29312	; 0x7280
   e01bc:	d0f0      	beq.n	e01a0 <mbedtls_ssl_read+0x48>
   e01be:	bd70      	pop	{r4, r5, r6, pc}
                MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
                return( ret );
            }
        }

        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
   e01c0:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
   e01c2:	2b16      	cmp	r3, #22
   e01c4:	d10b      	bne.n	e01de <mbedtls_ssl_read+0x86>
             * - For server-side, expect CLIENT_HELLO.
             * - Fail (TLS) or silently drop record (DTLS) in other cases.
             */

#if defined(MBEDTLS_SSL_CLI_C)
            if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT &&
   e01c6:	682b      	ldr	r3, [r5, #0]
   e01c8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
   e01cc:	07db      	lsls	r3, r3, #31
   e01ce:	d435      	bmi.n	e023c <mbedtls_ssl_read+0xe4>
                ( ssl->in_msg[0] != MBEDTLS_SSL_HS_HELLO_REQUEST ||
   e01d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
             * - For server-side, expect CLIENT_HELLO.
             * - Fail (TLS) or silently drop record (DTLS) in other cases.
             */

#if defined(MBEDTLS_SSL_CLI_C)
            if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT &&
   e01d2:	781b      	ldrb	r3, [r3, #0]
   e01d4:	bb53      	cbnz	r3, e022c <mbedtls_ssl_read+0xd4>
                ( ssl->in_msg[0] != MBEDTLS_SSL_HS_HELLO_REQUEST ||
   e01d6:	6fab      	ldr	r3, [r5, #120]	; 0x78
   e01d8:	2b04      	cmp	r3, #4
   e01da:	d127      	bne.n	e022c <mbedtls_ssl_read+0xd4>
   e01dc:	e02e      	b.n	e023c <mbedtls_ssl_read+0xe4>
            }
        }
#endif /* MBEDTLS_SSL_RENEGOTIATION */

        /* Fatal and closure alerts handled by mbedtls_ssl_read_record() */
        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT )
   e01de:	2b15      	cmp	r3, #21
   e01e0:	d022      	beq.n	e0228 <mbedtls_ssl_read+0xd0>
        {
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "ignoring non-fatal non-closure alert" ) );
            return( MBEDTLS_ERR_SSL_WANT_READ );
        }

        if( ssl->in_msgtype != MBEDTLS_SSL_MSG_APPLICATION_DATA )
   e01e2:	2b17      	cmp	r3, #23
   e01e4:	d122      	bne.n	e022c <mbedtls_ssl_read+0xd4>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad application data message" ) );
            return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
        }

        ssl->in_offt = ssl->in_msg;
   e01e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   e01e8:	66ab      	str	r3, [r5, #104]	; 0x68

        /* We're going to return something now, cancel timer,
         * except if handshake (renegotiation) is in progress */
        if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER )
   e01ea:	686b      	ldr	r3, [r5, #4]
   e01ec:	2b10      	cmp	r3, #16
   e01ee:	d1c6      	bne.n	e017e <mbedtls_ssl_read+0x26>
            ssl_set_timer( ssl, 0 );
   e01f0:	2100      	movs	r1, #0
   e01f2:	4628      	mov	r0, r5
   e01f4:	f7fe feaf 	bl	def56 <_ZL13ssl_set_timerP19mbedtls_ssl_contextm>
   e01f8:	e7c1      	b.n	e017e <mbedtls_ssl_read+0x26>
        }
#endif /* MBEDTLS_SSL_SRV_C && MBEDTLS_SSL_RENEGOTIATION */
#endif /* MBEDTLS_SSL_PROTO_DTLS */
    }

    n = ( len < ssl->in_msglen )
   e01fa:	6f28      	ldr	r0, [r5, #112]	; 0x70
   e01fc:	4284      	cmp	r4, r0
   e01fe:	bf28      	it	cs
   e0200:	4604      	movcs	r4, r0
        ? len : ssl->in_msglen;

    memcpy( buf, ssl->in_offt, n );
   e0202:	4622      	mov	r2, r4
   e0204:	4630      	mov	r0, r6
   e0206:	f009 fc56 	bl	e9ab6 <memcpy>
    ssl->in_msglen -= n;
   e020a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   e020c:	1b1b      	subs	r3, r3, r4
   e020e:	672b      	str	r3, [r5, #112]	; 0x70

    if( ssl->in_msglen == 0 )
   e0210:	b91b      	cbnz	r3, e021a <mbedtls_ssl_read+0xc2>
    {
        /* all bytes consumed */
        ssl->in_offt = NULL;
   e0212:	66ab      	str	r3, [r5, #104]	; 0x68
        ssl->keep_current_message = 0;
   e0214:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
   e0218:	e002      	b.n	e0220 <mbedtls_ssl_read+0xc8>
    }
    else
    {
        /* more data available */
        ssl->in_offt += n;
   e021a:	6eab      	ldr	r3, [r5, #104]	; 0x68
   e021c:	4423      	add	r3, r4
   e021e:	66ab      	str	r3, [r5, #104]	; 0x68
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= read" ) );

    return( (int) n );
   e0220:	4620      	mov	r0, r4
   e0222:	bd70      	pop	{r4, r5, r6, pc}
{
    int ret;
    size_t n;

    if( ssl == NULL || ssl->conf == NULL )
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   e0224:	480c      	ldr	r0, [pc, #48]	; (e0258 <mbedtls_ssl_read+0x100>)
   e0226:	bd70      	pop	{r4, r5, r6, pc}

        /* Fatal and closure alerts handled by mbedtls_ssl_read_record() */
        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT )
        {
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "ignoring non-fatal non-closure alert" ) );
            return( MBEDTLS_ERR_SSL_WANT_READ );
   e0228:	480c      	ldr	r0, [pc, #48]	; (e025c <mbedtls_ssl_read+0x104>)
   e022a:	bd70      	pop	{r4, r5, r6, pc}
                if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
                {
                    continue;
                }
#endif
                return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
   e022c:	480c      	ldr	r0, [pc, #48]	; (e0260 <mbedtls_ssl_read+0x108>)
   e022e:	bd70      	pop	{r4, r5, r6, pc}
    {
        /* Start timer if not already running */
        if( ssl->f_get_timer != NULL &&
            ssl->f_get_timer( ssl->p_timer ) == -1 )
        {
            ssl_set_timer( ssl, ssl->conf->read_timeout );
   e0230:	682b      	ldr	r3, [r5, #0]
   e0232:	4628      	mov	r0, r5
   e0234:	6f59      	ldr	r1, [r3, #116]	; 0x74
   e0236:	f7fe fe8e 	bl	def56 <_ZL13ssl_set_timerP19mbedtls_ssl_contextm>
   e023a:	e7a9      	b.n	e0190 <mbedtls_ssl_read+0x38>
                }
                else
#endif /* MBEDTLS_SSL_PROTO_SSL3 */
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
                if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
   e023c:	68eb      	ldr	r3, [r5, #12]
   e023e:	2b00      	cmp	r3, #0
   e0240:	dd07      	ble.n	e0252 <mbedtls_ssl_read+0xfa>
                {
                    if( ( ret = mbedtls_ssl_send_alert_message( ssl,
   e0242:	2264      	movs	r2, #100	; 0x64
   e0244:	2101      	movs	r1, #1
   e0246:	4628      	mov	r0, r5
   e0248:	f7ff fbfe 	bl	dfa48 <mbedtls_ssl_send_alert_message>
   e024c:	2800      	cmp	r0, #0
   e024e:	d096      	beq.n	e017e <mbedtls_ssl_read+0x26>
   e0250:	bd70      	pop	{r4, r5, r6, pc}
                else
#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 ||
          MBEDTLS_SSL_PROTO_TLS1_2 */
                {
                    MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
                    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   e0252:	4804      	ldr	r0, [pc, #16]	; (e0264 <mbedtls_ssl_read+0x10c>)
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= read" ) );

    return( (int) n );
}
   e0254:	bd70      	pop	{r4, r5, r6, pc}
   e0256:	bf00      	nop
   e0258:	ffff8f00 	.word	0xffff8f00
   e025c:	ffff9700 	.word	0xffff9700
   e0260:	ffff8900 	.word	0xffff8900
   e0264:	ffff9400 	.word	0xffff9400

000e0268 <mbedtls_ssl_write>:

/*
 * Write application data (public-facing wrapper)
 */
int mbedtls_ssl_write( mbedtls_ssl_context *ssl, const unsigned char *buf, size_t len )
{
   e0268:	b570      	push	{r4, r5, r6, lr}
   e026a:	460e      	mov	r6, r1
   e026c:	4615      	mov	r5, r2
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write" ) );

    if( ssl == NULL || ssl->conf == NULL )
   e026e:	4604      	mov	r4, r0
   e0270:	b368      	cbz	r0, e02ce <mbedtls_ssl_write+0x66>
   e0272:	6803      	ldr	r3, [r0, #0]
   e0274:	b35b      	cbz	r3, e02ce <mbedtls_ssl_write+0x66>
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_check_ctr_renegotiate", ret );
        return( ret );
    }
#endif

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
   e0276:	6843      	ldr	r3, [r0, #4]
   e0278:	2b10      	cmp	r3, #16
   e027a:	d105      	bne.n	e0288 <mbedtls_ssl_write+0x20>
 * corresponding return code is 0 on success.
 */
static int ssl_write_real( mbedtls_ssl_context *ssl,
                           const unsigned char *buf, size_t len )
{
    int ret = mbedtls_ssl_get_max_out_record_payload( ssl );
   e027c:	4620      	mov	r0, r4
   e027e:	f7ff ff3b 	bl	e00f8 <mbedtls_ssl_get_max_out_record_payload>
    const size_t max_len = (size_t) ret;

    if( ret < 0 )
   e0282:	2800      	cmp	r0, #0
   e0284:	da05      	bge.n	e0292 <mbedtls_ssl_write+0x2a>
   e0286:	bd70      	pop	{r4, r5, r6, pc}
    }
#endif

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
    {
        if( ( ret = mbedtls_ssl_handshake( ssl ) ) != 0 )
   e0288:	f7ff ff52 	bl	e0130 <mbedtls_ssl_handshake>
   e028c:	2800      	cmp	r0, #0
   e028e:	d0f5      	beq.n	e027c <mbedtls_ssl_write+0x14>
   e0290:	bd70      	pop	{r4, r5, r6, pc}
        else
#endif
            len = max_len;
    }

    if( ssl->out_left != 0 )
   e0292:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   e0296:	4285      	cmp	r5, r0
   e0298:	bf28      	it	cs
   e029a:	4605      	movcs	r5, r0
   e029c:	b12b      	cbz	r3, e02aa <mbedtls_ssl_write+0x42>
         * The user has previously tried to send the data and
         * MBEDTLS_ERR_SSL_WANT_WRITE or the message was only partially
         * written. In this case, we expect the high-level write function
         * (e.g. mbedtls_ssl_write()) to be called with the same parameters
         */
        if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
   e029e:	4620      	mov	r0, r4
   e02a0:	f7ff fa20 	bl	df6e4 <mbedtls_ssl_flush_output>
   e02a4:	b9a0      	cbnz	r0, e02d0 <mbedtls_ssl_write+0x68>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
            return( ret );
        }
    }

    return( (int) len );
   e02a6:	4628      	mov	r0, r5
   e02a8:	bd70      	pop	{r4, r5, r6, pc}
         * The user is trying to send a message the first time, so we need to
         * copy the data into the internal buffers and setup the data structure
         * to keep track of partial writes
         */
        ssl->out_msglen  = len;
        ssl->out_msgtype = MBEDTLS_SSL_MSG_APPLICATION_DATA;
   e02aa:	2317      	movs	r3, #23
        memcpy( ssl->out_msg, buf, len );
   e02ac:	4631      	mov	r1, r6
        /*
         * The user is trying to send a message the first time, so we need to
         * copy the data into the internal buffers and setup the data structure
         * to keep track of partial writes
         */
        ssl->out_msglen  = len;
   e02ae:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
        ssl->out_msgtype = MBEDTLS_SSL_MSG_APPLICATION_DATA;
   e02b2:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
        memcpy( ssl->out_msg, buf, len );
   e02b6:	462a      	mov	r2, r5
   e02b8:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   e02bc:	f009 fbfb 	bl	e9ab6 <memcpy>

        if( ( ret = mbedtls_ssl_write_record( ssl, SSL_FORCE_FLUSH ) ) != 0 )
   e02c0:	2101      	movs	r1, #1
   e02c2:	4620      	mov	r0, r4
   e02c4:	f7ff fa3c 	bl	df740 <mbedtls_ssl_write_record>
   e02c8:	2800      	cmp	r0, #0
   e02ca:	d0ec      	beq.n	e02a6 <mbedtls_ssl_write+0x3e>
   e02cc:	bd70      	pop	{r4, r5, r6, pc}
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write" ) );

    if( ssl == NULL || ssl->conf == NULL )
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   e02ce:	4801      	ldr	r0, [pc, #4]	; (e02d4 <mbedtls_ssl_write+0x6c>)
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write" ) );

    return( ret );
}
   e02d0:	bd70      	pop	{r4, r5, r6, pc}
   e02d2:	bf00      	nop
   e02d4:	ffff8f00 	.word	0xffff8f00

000e02d8 <mbedtls_ssl_transform_free>:

    return( 0 );
}

void mbedtls_ssl_transform_free( mbedtls_ssl_transform *transform )
{
   e02d8:	b510      	push	{r4, lr}
    if( transform == NULL )
   e02da:	4604      	mov	r4, r0
   e02dc:	b1a0      	cbz	r0, e0308 <mbedtls_ssl_transform_free+0x30>
#if defined(MBEDTLS_ZLIB_SUPPORT)
    deflateEnd( &transform->ctx_deflate );
    inflateEnd( &transform->ctx_inflate );
#endif

    mbedtls_cipher_free( &transform->cipher_ctx_enc );
   e02de:	3050      	adds	r0, #80	; 0x50
   e02e0:	f7f5 ff12 	bl	d6108 <mbedtls_cipher_free>
    mbedtls_cipher_free( &transform->cipher_ctx_dec );
   e02e4:	f104 0088 	add.w	r0, r4, #136	; 0x88
   e02e8:	f7f5 ff0e 	bl	d6108 <mbedtls_cipher_free>

    mbedtls_md_free( &transform->md_ctx_enc );
   e02ec:	f104 0038 	add.w	r0, r4, #56	; 0x38
   e02f0:	f7fc fe39 	bl	dcf66 <mbedtls_md_free>
    mbedtls_md_free( &transform->md_ctx_dec );
   e02f4:	f104 0044 	add.w	r0, r4, #68	; 0x44
   e02f8:	f7fc fe35 	bl	dcf66 <mbedtls_md_free>

    mbedtls_platform_zeroize( transform, sizeof( mbedtls_ssl_transform ) );
   e02fc:	4620      	mov	r0, r4
   e02fe:	21c0      	movs	r1, #192	; 0xc0
}
   e0300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_cipher_free( &transform->cipher_ctx_dec );

    mbedtls_md_free( &transform->md_ctx_enc );
    mbedtls_md_free( &transform->md_ctx_dec );

    mbedtls_platform_zeroize( transform, sizeof( mbedtls_ssl_transform ) );
   e0304:	f7fa bf7a 	b.w	db1fc <mbedtls_platform_zeroize>
   e0308:	bd10      	pop	{r4, pc}

000e030a <mbedtls_ssl_handshake_free>:
}

#endif /* MBEDTLS_SSL_PROTO_DTLS */

void mbedtls_ssl_handshake_free( mbedtls_ssl_context *ssl )
{
   e030a:	b538      	push	{r3, r4, r5, lr}
    mbedtls_ssl_handshake_params *handshake = ssl->handshake;
   e030c:	6b04      	ldr	r4, [r0, #48]	; 0x30

    if( handshake == NULL )
   e030e:	b344      	cbz	r4, e0362 <mbedtls_ssl_handshake_free+0x58>
    mbedtls_md5_free(    &handshake->fin_md5  );
    mbedtls_sha1_free(   &handshake->fin_sha1 );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_free(   &handshake->fin_sha256    );
   e0310:	f504 70ac 	add.w	r0, r4, #344	; 0x158
   e0314:	f7f5 f860 	bl	d53d8 <mbedtls_sha256_free>
#endif
#if defined(MBEDTLS_SHA512_C)
    mbedtls_sha512_free(   &handshake->fin_sha512    );
   e0318:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   e031c:	f002 ffc0 	bl	e32a0 <mbedtls_sha512_free>

#if defined(MBEDTLS_DHM_C)
    mbedtls_dhm_free( &handshake->dhm_ctx );
#endif
#if defined(MBEDTLS_ECDH_C)
    mbedtls_ecdh_free( &handshake->ecdh_ctx );
   e0320:	1d20      	adds	r0, r4, #4
   e0322:	f7f5 fe2b 	bl	d5f7c <mbedtls_ecdh_free>
#endif

#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C) || \
    defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
    /* explicit void pointer cast for buggy MS compiler */
    mbedtls_free( (void *) handshake->curves );
   e0326:	f8d4 0138 	ldr.w	r0, [r4, #312]	; 0x138
   e032a:	f005 fecb 	bl	e60c4 <free>
#endif

#if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)
    if( handshake->psk != NULL )
   e032e:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
   e0332:	b138      	cbz	r0, e0344 <mbedtls_ssl_handshake_free+0x3a>
    {
        mbedtls_platform_zeroize( handshake->psk, handshake->psk_len );
   e0334:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
   e0338:	f7fa ff60 	bl	db1fc <mbedtls_platform_zeroize>
        mbedtls_free( handshake->psk );
   e033c:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
   e0340:	f005 fec0 	bl	e60c4 <free>
    defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
    /*
     * Free only the linked list wrapper, not the keys themselves
     * since the belong to the SNI callback
     */
    if( handshake->sni_key_cert != NULL )
   e0344:	f8d4 014c 	ldr.w	r0, [r4, #332]	; 0x14c
   e0348:	b930      	cbnz	r0, e0358 <mbedtls_ssl_handshake_free+0x4e>
    ssl_flight_free( handshake->flight );
    ssl_buffering_free( ssl );
#endif

    mbedtls_platform_zeroize( handshake,
                              sizeof( mbedtls_ssl_handshake_params ) );
   e034a:	4620      	mov	r0, r4
   e034c:	f44f 7158 	mov.w	r1, #864	; 0x360
}
   e0350:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ssl_flight_free( handshake->flight );
    ssl_buffering_free( ssl );
#endif

    mbedtls_platform_zeroize( handshake,
                              sizeof( mbedtls_ssl_handshake_params ) );
   e0354:	f7fa bf52 	b.w	db1fc <mbedtls_platform_zeroize>
    {
        mbedtls_ssl_key_cert *cur = handshake->sni_key_cert, *next;

        while( cur != NULL )
        {
            next = cur->next;
   e0358:	6885      	ldr	r5, [r0, #8]
            mbedtls_free( cur );
   e035a:	f005 feb3 	bl	e60c4 <free>
     */
    if( handshake->sni_key_cert != NULL )
    {
        mbedtls_ssl_key_cert *cur = handshake->sni_key_cert, *next;

        while( cur != NULL )
   e035e:	4628      	mov	r0, r5
   e0360:	e7f2      	b.n	e0348 <mbedtls_ssl_handshake_free+0x3e>
   e0362:	bd38      	pop	{r3, r4, r5, pc}

000e0364 <mbedtls_ssl_session_free>:
    mbedtls_platform_zeroize( handshake,
                              sizeof( mbedtls_ssl_handshake_params ) );
}

void mbedtls_ssl_session_free( mbedtls_ssl_session *session )
{
   e0364:	b510      	push	{r4, lr}
    if( session == NULL )
   e0366:	4604      	mov	r4, r0
   e0368:	b178      	cbz	r0, e038a <mbedtls_ssl_session_free+0x26>
        return;

#if defined(MBEDTLS_X509_CRT_PARSE_C)
    if( session->peer_cert != NULL )
   e036a:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   e036c:	b120      	cbz	r0, e0378 <mbedtls_ssl_session_free+0x14>
    {
        mbedtls_x509_crt_free( session->peer_cert );
   e036e:	f7fe f8a0 	bl	de4b2 <mbedtls_x509_crt_free>
        mbedtls_free( session->peer_cert );
   e0372:	6de0      	ldr	r0, [r4, #92]	; 0x5c
   e0374:	f005 fea6 	bl	e60c4 <free>
    }
#endif

#if defined(MBEDTLS_SSL_SESSION_TICKETS) && defined(MBEDTLS_SSL_CLI_C)
    mbedtls_free( session->ticket );
   e0378:	6e60      	ldr	r0, [r4, #100]	; 0x64
   e037a:	f005 fea3 	bl	e60c4 <free>
#endif

    mbedtls_platform_zeroize( session, sizeof( mbedtls_ssl_session ) );
   e037e:	4620      	mov	r0, r4
   e0380:	2174      	movs	r1, #116	; 0x74
}
   e0382:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if defined(MBEDTLS_SSL_SESSION_TICKETS) && defined(MBEDTLS_SSL_CLI_C)
    mbedtls_free( session->ticket );
#endif

    mbedtls_platform_zeroize( session, sizeof( mbedtls_ssl_session ) );
   e0386:	f7fa bf39 	b.w	db1fc <mbedtls_platform_zeroize>
   e038a:	bd10      	pop	{r4, pc}

000e038c <mbedtls_ssl_handshake_wrapup>:

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup: final free" ) );
}

void mbedtls_ssl_handshake_wrapup( mbedtls_ssl_context *ssl )
{
   e038c:	b538      	push	{r3, r4, r5, lr}
   e038e:	4604      	mov	r4, r0
    int resume = ssl->handshake->resume;
   e0390:	6b03      	ldr	r3, [r0, #48]	; 0x30
#endif

    /*
     * Free the previous session and switch in the current one
     */
    if( ssl->session )
   e0392:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup: final free" ) );
}

void mbedtls_ssl_handshake_wrapup( mbedtls_ssl_context *ssl )
{
    int resume = ssl->handshake->resume;
   e0394:	f8d3 5348 	ldr.w	r5, [r3, #840]	; 0x348
#endif

    /*
     * Free the previous session and switch in the current one
     */
    if( ssl->session )
   e0398:	b120      	cbz	r0, e03a4 <mbedtls_ssl_handshake_wrapup+0x18>
        /* RFC 7366 3.1: keep the EtM state */
        ssl->session_negotiate->encrypt_then_mac =
                  ssl->session->encrypt_then_mac;
#endif

        mbedtls_ssl_session_free( ssl->session );
   e039a:	f7ff ffe3 	bl	e0364 <mbedtls_ssl_session_free>
        mbedtls_free( ssl->session );
   e039e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   e03a0:	f005 fe90 	bl	e60c4 <free>
    }
    ssl->session = ssl->session_negotiate;
   e03a4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    ssl->session_negotiate = NULL;

    /*
     * Add cache entry
     */
    if( ssl->conf->f_set_cache != NULL &&
   e03a6:	6822      	ldr	r2, [r4, #0]
#endif

        mbedtls_ssl_session_free( ssl->session );
        mbedtls_free( ssl->session );
    }
    ssl->session = ssl->session_negotiate;
   e03a8:	62a1      	str	r1, [r4, #40]	; 0x28
    ssl->session_negotiate = NULL;
   e03aa:	2300      	movs	r3, #0
   e03ac:	62e3      	str	r3, [r4, #44]	; 0x2c

    /*
     * Add cache entry
     */
    if( ssl->conf->f_set_cache != NULL &&
   e03ae:	6a53      	ldr	r3, [r2, #36]	; 0x24
   e03b0:	b123      	cbz	r3, e03bc <mbedtls_ssl_handshake_wrapup+0x30>
   e03b2:	6888      	ldr	r0, [r1, #8]
   e03b4:	b110      	cbz	r0, e03bc <mbedtls_ssl_handshake_wrapup+0x30>
        ssl->session->id_len != 0 &&
   e03b6:	b90d      	cbnz	r5, e03bc <mbedtls_ssl_handshake_wrapup+0x30>
        resume == 0 )
    {
        if( ssl->conf->f_set_cache( ssl->conf->p_cache, ssl->session ) != 0 )
   e03b8:	6a90      	ldr	r0, [r2, #40]	; 0x28
   e03ba:	4798      	blx	r3
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "=> handshake wrapup: final free" ) );

    /*
     * Free our handshake params
     */
    mbedtls_ssl_handshake_free( ssl );
   e03bc:	4620      	mov	r0, r4
   e03be:	f7ff ffa4 	bl	e030a <mbedtls_ssl_handshake_free>
    mbedtls_free( ssl->handshake );
   e03c2:	6b20      	ldr	r0, [r4, #48]	; 0x30
   e03c4:	f005 fe7e 	bl	e60c4 <free>
    ssl->handshake = NULL;

    /*
     * Free the previous transform and swith in the current one
     */
    if( ssl->transform )
   e03c8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    /*
     * Free our handshake params
     */
    mbedtls_ssl_handshake_free( ssl );
    mbedtls_free( ssl->handshake );
    ssl->handshake = NULL;
   e03ca:	2300      	movs	r3, #0
   e03cc:	6323      	str	r3, [r4, #48]	; 0x30

    /*
     * Free the previous transform and swith in the current one
     */
    if( ssl->transform )
   e03ce:	b120      	cbz	r0, e03da <mbedtls_ssl_handshake_wrapup+0x4e>
    {
        mbedtls_ssl_transform_free( ssl->transform );
   e03d0:	f7ff ff82 	bl	e02d8 <mbedtls_ssl_transform_free>
        mbedtls_free( ssl->transform );
   e03d4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   e03d6:	f005 fe75 	bl	e60c4 <free>
    }
    ssl->transform = ssl->transform_negotiate;
   e03da:	6c23      	ldr	r3, [r4, #64]	; 0x40
   e03dc:	63e3      	str	r3, [r4, #60]	; 0x3c
    ssl->transform_negotiate = NULL;
   e03de:	2300      	movs	r3, #0
   e03e0:	6423      	str	r3, [r4, #64]	; 0x40
    }
    else
#endif
        ssl_handshake_wrapup_free_hs_transform( ssl );

    ssl->state++;
   e03e2:	6863      	ldr	r3, [r4, #4]
   e03e4:	3301      	adds	r3, #1
   e03e6:	6063      	str	r3, [r4, #4]
   e03e8:	bd38      	pop	{r3, r4, r5, pc}
	...

000e03ec <_ZL18ssl_handshake_initP19mbedtls_ssl_context>:
{
    memset( session, 0, sizeof(mbedtls_ssl_session) );
}

static int ssl_handshake_init( mbedtls_ssl_context *ssl )
{
   e03ec:	b538      	push	{r3, r4, r5, lr}
   e03ee:	4604      	mov	r4, r0
    /* Clear old handshake information if present */
    if( ssl->transform_negotiate )
   e03f0:	6c00      	ldr	r0, [r0, #64]	; 0x40
   e03f2:	b108      	cbz	r0, e03f8 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0xc>
        mbedtls_ssl_transform_free( ssl->transform_negotiate );
   e03f4:	f7ff ff70 	bl	e02d8 <mbedtls_ssl_transform_free>
    if( ssl->session_negotiate )
   e03f8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   e03fa:	b108      	cbz	r0, e0400 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x14>
        mbedtls_ssl_session_free( ssl->session_negotiate );
   e03fc:	f7ff ffb2 	bl	e0364 <mbedtls_ssl_session_free>
    if( ssl->handshake )
   e0400:	6b23      	ldr	r3, [r4, #48]	; 0x30
   e0402:	b113      	cbz	r3, e040a <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x1e>
        mbedtls_ssl_handshake_free( ssl );
   e0404:	4620      	mov	r0, r4
   e0406:	f7ff ff80 	bl	e030a <mbedtls_ssl_handshake_free>

    /*
     * Either the pointers are now NULL or cleared properly and can be freed.
     * Now allocate missing structures.
     */
    if( ssl->transform_negotiate == NULL )
   e040a:	6c23      	ldr	r3, [r4, #64]	; 0x40
   e040c:	b923      	cbnz	r3, e0418 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x2c>
    {
        ssl->transform_negotiate = (mbedtls_ssl_transform *)mbedtls_calloc( 1, sizeof(mbedtls_ssl_transform) );
   e040e:	21c0      	movs	r1, #192	; 0xc0
   e0410:	2001      	movs	r0, #1
   e0412:	f009 fa2f 	bl	e9874 <calloc>
   e0416:	6420      	str	r0, [r4, #64]	; 0x40
    }

    if( ssl->session_negotiate == NULL )
   e0418:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e041a:	b923      	cbnz	r3, e0426 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x3a>
    {
        ssl->session_negotiate = (mbedtls_ssl_session *)mbedtls_calloc( 1, sizeof(mbedtls_ssl_session) );
   e041c:	2174      	movs	r1, #116	; 0x74
   e041e:	2001      	movs	r0, #1
   e0420:	f009 fa28 	bl	e9874 <calloc>
   e0424:	62e0      	str	r0, [r4, #44]	; 0x2c
    }

    if( ssl->handshake == NULL )
   e0426:	6b23      	ldr	r3, [r4, #48]	; 0x30
   e0428:	b92b      	cbnz	r3, e0436 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x4a>
    {
        ssl->handshake = (mbedtls_ssl_handshake_params *)mbedtls_calloc( 1, sizeof(mbedtls_ssl_handshake_params) );
   e042a:	f44f 7158 	mov.w	r1, #864	; 0x360
   e042e:	2001      	movs	r0, #1
   e0430:	f009 fa20 	bl	e9874 <calloc>
   e0434:	6320      	str	r0, [r4, #48]	; 0x30
    }

    /* All pointers should exist and can be directly freed without issue */
    if( ssl->handshake == NULL ||
   e0436:	6b20      	ldr	r0, [r4, #48]	; 0x30
   e0438:	b118      	cbz	r0, e0442 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x56>
   e043a:	6c23      	ldr	r3, [r4, #64]	; 0x40
   e043c:	b10b      	cbz	r3, e0442 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x56>
        ssl->transform_negotiate == NULL ||
        ssl->session_negotiate == NULL )
   e043e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        ssl->handshake = (mbedtls_ssl_handshake_params *)mbedtls_calloc( 1, sizeof(mbedtls_ssl_handshake_params) );
    }

    /* All pointers should exist and can be directly freed without issue */
    if( ssl->handshake == NULL ||
        ssl->transform_negotiate == NULL ||
   e0440:	b96b      	cbnz	r3, e045e <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x72>
        ssl->session_negotiate == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc() of ssl sub-contexts failed" ) );

        mbedtls_free( ssl->handshake );
   e0442:	f005 fe3f 	bl	e60c4 <free>
        mbedtls_free( ssl->transform_negotiate );
   e0446:	6c20      	ldr	r0, [r4, #64]	; 0x40
   e0448:	f005 fe3c 	bl	e60c4 <free>
        mbedtls_free( ssl->session_negotiate );
   e044c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   e044e:	f005 fe39 	bl	e60c4 <free>

        ssl->handshake = NULL;
   e0452:	2300      	movs	r3, #0
   e0454:	6323      	str	r3, [r4, #48]	; 0x30
        ssl->transform_negotiate = NULL;
   e0456:	6423      	str	r3, [r4, #64]	; 0x40
        ssl->session_negotiate = NULL;
   e0458:	62e3      	str	r3, [r4, #44]	; 0x2c

        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
   e045a:	4821      	ldr	r0, [pc, #132]	; (e04e0 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0xf4>)
   e045c:	bd38      	pop	{r3, r4, r5, pc}
    }

    /* Initialize structures */
    mbedtls_ssl_session_init( ssl->session_negotiate );
   e045e:	4618      	mov	r0, r3
   e0460:	f7ff fda8 	bl	dffb4 <mbedtls_ssl_session_init>
    ssl_transform_init( ssl->transform_negotiate );
   e0464:	6c25      	ldr	r5, [r4, #64]	; 0x40
#endif
}

static void ssl_transform_init( mbedtls_ssl_transform *transform )
{
    memset( transform, 0, sizeof(mbedtls_ssl_transform) );
   e0466:	22c0      	movs	r2, #192	; 0xc0
   e0468:	2100      	movs	r1, #0
   e046a:	4628      	mov	r0, r5
   e046c:	f009 fb49 	bl	e9b02 <memset>

    mbedtls_cipher_init( &transform->cipher_ctx_enc );
   e0470:	f105 0050 	add.w	r0, r5, #80	; 0x50
   e0474:	f7f5 fe44 	bl	d6100 <mbedtls_cipher_init>
    mbedtls_cipher_init( &transform->cipher_ctx_dec );
   e0478:	f105 0088 	add.w	r0, r5, #136	; 0x88
   e047c:	f7f5 fe40 	bl	d6100 <mbedtls_cipher_init>

    mbedtls_md_init( &transform->md_ctx_enc );
   e0480:	f105 0038 	add.w	r0, r5, #56	; 0x38
   e0484:	f7fc fd6a 	bl	dcf5c <mbedtls_md_init>
    mbedtls_md_init( &transform->md_ctx_dec );
   e0488:	f105 0044 	add.w	r0, r5, #68	; 0x44
   e048c:	f7fc fd66 	bl	dcf5c <mbedtls_md_init>
    }

    /* Initialize structures */
    mbedtls_ssl_session_init( ssl->session_negotiate );
    ssl_transform_init( ssl->transform_negotiate );
    ssl_handshake_params_init( ssl->handshake );
   e0490:	6b24      	ldr	r4, [r4, #48]	; 0x30
    return( 0 );
}

static void ssl_handshake_params_init( mbedtls_ssl_handshake_params *handshake )
{
    memset( handshake, 0, sizeof( mbedtls_ssl_handshake_params ) );
   e0492:	f44f 7258 	mov.w	r2, #864	; 0x360
     mbedtls_md5_starts_ret( &handshake->fin_md5  );
    mbedtls_sha1_starts_ret( &handshake->fin_sha1 );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_init(   &handshake->fin_sha256    );
   e0496:	f504 75ac 	add.w	r5, r4, #344	; 0x158
    return( 0 );
}

static void ssl_handshake_params_init( mbedtls_ssl_handshake_params *handshake )
{
    memset( handshake, 0, sizeof( mbedtls_ssl_handshake_params ) );
   e049a:	2100      	movs	r1, #0
   e049c:	4620      	mov	r0, r4
   e049e:	f009 fb30 	bl	e9b02 <memset>
     mbedtls_md5_starts_ret( &handshake->fin_md5  );
    mbedtls_sha1_starts_ret( &handshake->fin_sha1 );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_init(   &handshake->fin_sha256    );
   e04a2:	4628      	mov	r0, r5
   e04a4:	f7f4 ff94 	bl	d53d0 <mbedtls_sha256_init>
    mbedtls_sha256_starts_ret( &handshake->fin_sha256, 0 );
   e04a8:	2100      	movs	r1, #0
   e04aa:	4628      	mov	r0, r5
#endif
#if defined(MBEDTLS_SHA512_C)
    mbedtls_sha512_init(   &handshake->fin_sha512    );
   e04ac:	f504 75e4 	add.w	r5, r4, #456	; 0x1c8
    mbedtls_sha1_starts_ret( &handshake->fin_sha1 );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_init(   &handshake->fin_sha256    );
    mbedtls_sha256_starts_ret( &handshake->fin_sha256, 0 );
   e04b0:	f7f4 ff9c 	bl	d53ec <mbedtls_sha256_starts_ret>
#endif
#if defined(MBEDTLS_SHA512_C)
    mbedtls_sha512_init(   &handshake->fin_sha512    );
   e04b4:	4628      	mov	r0, r5
   e04b6:	f002 feef 	bl	e3298 <mbedtls_sha512_init>
    mbedtls_sha512_starts_ret( &handshake->fin_sha512, 1 );
   e04ba:	2101      	movs	r1, #1
   e04bc:	4628      	mov	r0, r5
   e04be:	f002 fefb 	bl	e32b8 <mbedtls_sha512_starts_ret>

/* Allow exactly one hash algorithm for each signature. */
void mbedtls_ssl_sig_hash_set_const_hash( mbedtls_ssl_sig_hash_set_t *set,
                                          mbedtls_md_type_t md_alg )
{
    set->rsa   = md_alg;
   e04c2:	2500      	movs	r5, #0
    mbedtls_sha512_init(   &handshake->fin_sha512    );
    mbedtls_sha512_starts_ret( &handshake->fin_sha512, 1 );
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

    handshake->update_checksum = ssl_update_checksum_start;
   e04c4:	4b07      	ldr	r3, [pc, #28]	; (e04e4 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0xf8>)
   e04c6:	f8c4 32a0 	str.w	r3, [r4, #672]	; 0x2a0

#if defined(MBEDTLS_DHM_C)
    mbedtls_dhm_init( &handshake->dhm_ctx );
#endif
#if defined(MBEDTLS_ECDH_C)
    mbedtls_ecdh_init( &handshake->ecdh_ctx );
   e04ca:	1d20      	adds	r0, r4, #4

/* Allow exactly one hash algorithm for each signature. */
void mbedtls_ssl_sig_hash_set_const_hash( mbedtls_ssl_sig_hash_set_t *set,
                                          mbedtls_md_type_t md_alg )
{
    set->rsa   = md_alg;
   e04cc:	7025      	strb	r5, [r4, #0]
    set->ecdsa = md_alg;
   e04ce:	7065      	strb	r5, [r4, #1]

#if defined(MBEDTLS_DHM_C)
    mbedtls_dhm_init( &handshake->dhm_ctx );
#endif
#if defined(MBEDTLS_ECDH_C)
    mbedtls_ecdh_init( &handshake->ecdh_ctx );
   e04d0:	f7f5 fd30 	bl	d5f34 <mbedtls_ecdh_init>
#if defined(MBEDTLS_SSL__ECP_RESTARTABLE)
    mbedtls_x509_crt_restart_init( &handshake->ecrs_ctx );
#endif

#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
    handshake->sni_authmode = MBEDTLS_SSL_VERIFY_UNSET;
   e04d4:	2303      	movs	r3, #3
   e04d6:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148

        ssl_set_timer( ssl, 0 );
    }
#endif

    return( 0 );
   e04da:	4628      	mov	r0, r5
}
   e04dc:	bd38      	pop	{r3, r4, r5, pc}
   e04de:	bf00      	nop
   e04e0:	ffff8100 	.word	0xffff8100
   e04e4:	000df279 	.word	0x000df279

000e04e8 <mbedtls_ssl_setup>:
    ssl_update_in_pointers ( ssl, NULL /* no transform enabled */ );
}

int mbedtls_ssl_setup( mbedtls_ssl_context *ssl,
                       const mbedtls_ssl_config *conf )
{
   e04e8:	b538      	push	{r3, r4, r5, lr}
    /*
     * Prepare base structures
     */

    /* Set to NULL in case of an error condition */
    ssl->out_buf = NULL;
   e04ea:	2300      	movs	r3, #0
int mbedtls_ssl_setup( mbedtls_ssl_context *ssl,
                       const mbedtls_ssl_config *conf )
{
    int ret;

    ssl->conf = conf;
   e04ec:	6001      	str	r1, [r0, #0]
    ssl_update_in_pointers ( ssl, NULL /* no transform enabled */ );
}

int mbedtls_ssl_setup( mbedtls_ssl_context *ssl,
                       const mbedtls_ssl_config *conf )
{
   e04ee:	4604      	mov	r4, r0
    /*
     * Prepare base structures
     */

    /* Set to NULL in case of an error condition */
    ssl->out_buf = NULL;
   e04f0:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

    ssl->in_buf = (unsigned char *)mbedtls_calloc( 1, MBEDTLS_SSL_IN_BUFFER_LEN );
   e04f4:	f242 012d 	movw	r1, #8237	; 0x202d
   e04f8:	2001      	movs	r0, #1
   e04fa:	f009 f9bb 	bl	e9874 <calloc>
   e04fe:	6520      	str	r0, [r4, #80]	; 0x50
    if( ssl->in_buf == NULL )
   e0500:	b908      	cbnz	r0, e0506 <mbedtls_ssl_setup+0x1e>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc(%d bytes) failed", MBEDTLS_SSL_IN_BUFFER_LEN) );
        ret = MBEDTLS_ERR_SSL_ALLOC_FAILED;
   e0502:	4d18      	ldr	r5, [pc, #96]	; (e0564 <mbedtls_ssl_setup+0x7c>)
   e0504:	e010      	b.n	e0528 <mbedtls_ssl_setup+0x40>
        goto error;
    }

    ssl->out_buf = (unsigned char *)mbedtls_calloc( 1, MBEDTLS_SSL_OUT_BUFFER_LEN );
   e0506:	f242 012d 	movw	r1, #8237	; 0x202d
   e050a:	2001      	movs	r0, #1
   e050c:	f009 f9b2 	bl	e9874 <calloc>
   e0510:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    if( ssl->out_buf == NULL )
   e0514:	2800      	cmp	r0, #0
   e0516:	d0f4      	beq.n	e0502 <mbedtls_ssl_setup+0x1a>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc(%d bytes) failed", MBEDTLS_SSL_OUT_BUFFER_LEN) );
        ret = MBEDTLS_ERR_SSL_ALLOC_FAILED;
        goto error;
    }

    ssl_reset_in_out_pointers( ssl );
   e0518:	4620      	mov	r0, r4
   e051a:	f7fe febf 	bl	df29c <_ZL25ssl_reset_in_out_pointersP19mbedtls_ssl_context>

    if( ( ret = ssl_handshake_init( ssl ) ) != 0 )
   e051e:	4620      	mov	r0, r4
   e0520:	f7ff ff64 	bl	e03ec <_ZL18ssl_handshake_initP19mbedtls_ssl_context>
   e0524:	4605      	mov	r5, r0
   e0526:	b1d0      	cbz	r0, e055e <mbedtls_ssl_setup+0x76>
        goto error;

    return( 0 );

error:
    mbedtls_free( ssl->in_buf );
   e0528:	6d20      	ldr	r0, [r4, #80]	; 0x50
   e052a:	f005 fdcb 	bl	e60c4 <free>
    mbedtls_free( ssl->out_buf );
   e052e:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
   e0532:	f005 fdc7 	bl	e60c4 <free>

    ssl->conf = NULL;
   e0536:	2300      	movs	r3, #0
   e0538:	6023      	str	r3, [r4, #0]

    ssl->in_buf = NULL;
   e053a:	6523      	str	r3, [r4, #80]	; 0x50
    ssl->out_buf = NULL;
   e053c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84

    ssl->in_hdr = NULL;
   e0540:	65a3      	str	r3, [r4, #88]	; 0x58
    ssl->in_ctr = NULL;
   e0542:	6563      	str	r3, [r4, #84]	; 0x54
    ssl->in_len = NULL;
   e0544:	65e3      	str	r3, [r4, #92]	; 0x5c
    ssl->in_iv = NULL;
   e0546:	6623      	str	r3, [r4, #96]	; 0x60
    ssl->in_msg = NULL;
   e0548:	6663      	str	r3, [r4, #100]	; 0x64

    ssl->out_hdr = NULL;
   e054a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    ssl->out_ctr = NULL;
   e054e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    ssl->out_len = NULL;
   e0552:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    ssl->out_iv = NULL;
   e0556:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    ssl->out_msg = NULL;
   e055a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98

    return( ret );
}
   e055e:	4628      	mov	r0, r5
   e0560:	bd38      	pop	{r3, r4, r5, pc}
   e0562:	bf00      	nop
   e0564:	ffff8100 	.word	0xffff8100

000e0568 <mbedtls_ssl_free>:

/*
 * Free an SSL context
 */
void mbedtls_ssl_free( mbedtls_ssl_context *ssl )
{
   e0568:	b538      	push	{r3, r4, r5, lr}
    if( ssl == NULL )
   e056a:	4604      	mov	r4, r0
   e056c:	2800      	cmp	r0, #0
   e056e:	d049      	beq.n	e0604 <mbedtls_ssl_free+0x9c>
        return;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> free" ) );

    if( ssl->out_buf != NULL )
   e0570:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
   e0574:	b138      	cbz	r0, e0586 <mbedtls_ssl_free+0x1e>
    {
        mbedtls_platform_zeroize( ssl->out_buf, MBEDTLS_SSL_OUT_BUFFER_LEN );
   e0576:	f242 012d 	movw	r1, #8237	; 0x202d
   e057a:	f7fa fe3f 	bl	db1fc <mbedtls_platform_zeroize>
        mbedtls_free( ssl->out_buf );
   e057e:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
   e0582:	f005 fd9f 	bl	e60c4 <free>
    }

    if( ssl->in_buf != NULL )
   e0586:	6d20      	ldr	r0, [r4, #80]	; 0x50
   e0588:	b130      	cbz	r0, e0598 <mbedtls_ssl_free+0x30>
    {
        mbedtls_platform_zeroize( ssl->in_buf, MBEDTLS_SSL_IN_BUFFER_LEN );
   e058a:	f242 012d 	movw	r1, #8237	; 0x202d
   e058e:	f7fa fe35 	bl	db1fc <mbedtls_platform_zeroize>
        mbedtls_free( ssl->in_buf );
   e0592:	6d20      	ldr	r0, [r4, #80]	; 0x50
   e0594:	f005 fd96 	bl	e60c4 <free>
        mbedtls_platform_zeroize( ssl->compress_buf, MBEDTLS_SSL_COMPRESS_BUFFER_LEN );
        mbedtls_free( ssl->compress_buf );
    }
#endif

    if( ssl->transform )
   e0598:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   e059a:	b120      	cbz	r0, e05a6 <mbedtls_ssl_free+0x3e>
    {
        mbedtls_ssl_transform_free( ssl->transform );
   e059c:	f7ff fe9c 	bl	e02d8 <mbedtls_ssl_transform_free>
        mbedtls_free( ssl->transform );
   e05a0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   e05a2:	f005 fd8f 	bl	e60c4 <free>
    }

    if( ssl->handshake )
   e05a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   e05a8:	b18b      	cbz	r3, e05ce <mbedtls_ssl_free+0x66>
    {
        mbedtls_ssl_handshake_free( ssl );
   e05aa:	4620      	mov	r0, r4
   e05ac:	f7ff fead 	bl	e030a <mbedtls_ssl_handshake_free>
        mbedtls_ssl_transform_free( ssl->transform_negotiate );
   e05b0:	6c20      	ldr	r0, [r4, #64]	; 0x40
   e05b2:	f7ff fe91 	bl	e02d8 <mbedtls_ssl_transform_free>
        mbedtls_ssl_session_free( ssl->session_negotiate );
   e05b6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   e05b8:	f7ff fed4 	bl	e0364 <mbedtls_ssl_session_free>

        mbedtls_free( ssl->handshake );
   e05bc:	6b20      	ldr	r0, [r4, #48]	; 0x30
   e05be:	f005 fd81 	bl	e60c4 <free>
        mbedtls_free( ssl->transform_negotiate );
   e05c2:	6c20      	ldr	r0, [r4, #64]	; 0x40
   e05c4:	f005 fd7e 	bl	e60c4 <free>
        mbedtls_free( ssl->session_negotiate );
   e05c8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   e05ca:	f005 fd7b 	bl	e60c4 <free>
    }

    if( ssl->session )
   e05ce:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   e05d0:	b120      	cbz	r0, e05dc <mbedtls_ssl_free+0x74>
    {
        mbedtls_ssl_session_free( ssl->session );
   e05d2:	f7ff fec7 	bl	e0364 <mbedtls_ssl_session_free>
        mbedtls_free( ssl->session );
   e05d6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   e05d8:	f005 fd74 	bl	e60c4 <free>
    }

#if defined(MBEDTLS_X509_CRT_PARSE_C)
    if( ssl->hostname != NULL )
   e05dc:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
   e05e0:	b155      	cbz	r5, e05f8 <mbedtls_ssl_free+0x90>
    {
        mbedtls_platform_zeroize( ssl->hostname, strlen( ssl->hostname ) );
   e05e2:	4628      	mov	r0, r5
   e05e4:	f009 fade 	bl	e9ba4 <strlen>
   e05e8:	4601      	mov	r1, r0
   e05ea:	4628      	mov	r0, r5
   e05ec:	f7fa fe06 	bl	db1fc <mbedtls_platform_zeroize>
        mbedtls_free( ssl->hostname );
   e05f0:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   e05f4:	f005 fd66 	bl	e60c4 <free>
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= free" ) );

    /* Actually clear after last debug message */
    mbedtls_platform_zeroize( ssl, sizeof( mbedtls_ssl_context ) );
   e05f8:	4620      	mov	r0, r4
   e05fa:	21bc      	movs	r1, #188	; 0xbc
}
   e05fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= free" ) );

    /* Actually clear after last debug message */
    mbedtls_platform_zeroize( ssl, sizeof( mbedtls_ssl_context ) );
   e0600:	f7fa bdfc 	b.w	db1fc <mbedtls_platform_zeroize>
   e0604:	bd38      	pop	{r3, r4, r5, pc}

000e0606 <mbedtls_ssl_config_init>:
/*
 * Initialze mbedtls_ssl_config
 */
void mbedtls_ssl_config_init( mbedtls_ssl_config *conf )
{
    memset( conf, 0, sizeof( mbedtls_ssl_config ) );
   e0606:	2280      	movs	r2, #128	; 0x80
   e0608:	2100      	movs	r1, #0
   e060a:	f009 ba7a 	b.w	e9b02 <memset>
	...

000e0610 <mbedtls_ssl_config_defaults>:
/*
 * Load default in mbedtls_ssl_config
 */
int mbedtls_ssl_config_defaults( mbedtls_ssl_config *conf,
                                 int endpoint, int transport, int preset )
{
   e0610:	b510      	push	{r4, lr}
   e0612:	4604      	mov	r4, r0
/*
 * SSL set accessors
 */
void mbedtls_ssl_conf_endpoint( mbedtls_ssl_config *conf, int endpoint )
{
    conf->endpoint   = endpoint;
   e0614:	f890 007c 	ldrb.w	r0, [r0, #124]	; 0x7c
   e0618:	f361 0000 	bfi	r0, r1, #0, #1
}

void mbedtls_ssl_conf_transport( mbedtls_ssl_config *conf, int transport )
{
    conf->transport = transport;
   e061c:	f362 0041 	bfi	r0, r2, #1, #1
   e0620:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c

    /*
     * Things that are common to all presets
     */
#if defined(MBEDTLS_SSL_CLI_C)
    if( endpoint == MBEDTLS_SSL_IS_CLIENT )
   e0624:	b951      	cbnz	r1, e063c <mbedtls_ssl_config_defaults+0x2c>
    {
        conf->authmode = MBEDTLS_SSL_VERIFY_REQUIRED;
   e0626:	2102      	movs	r1, #2
   e0628:	b2c2      	uxtb	r2, r0
   e062a:	f361 0283 	bfi	r2, r1, #2, #2
   e062e:	f884 207c 	strb.w	r2, [r4, #124]	; 0x7c
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
        conf->session_tickets = MBEDTLS_SSL_SESSION_TICKETS_ENABLED;
   e0632:	f894 207d 	ldrb.w	r2, [r4, #125]	; 0x7d
   e0636:	430a      	orrs	r2, r1
   e0638:	f884 207d 	strb.w	r2, [r4, #125]	; 0x7d
#endif

    /*
     * Preset-specific defaults
     */
    switch( preset )
   e063c:	2b02      	cmp	r3, #2
   e063e:	f04f 0303 	mov.w	r3, #3
    {
        /*
         * NSA Suite B
         */
        case MBEDTLS_SSL_PRESET_SUITEB:
            conf->min_major_ver = MBEDTLS_SSL_MAJOR_VERSION_3;
   e0642:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
            conf->min_minor_ver = MBEDTLS_SSL_MINOR_VERSION_3; /* TLS 1.2 */
   e0646:	f884 307b 	strb.w	r3, [r4, #123]	; 0x7b
            conf->max_major_ver = MBEDTLS_SSL_MAX_MAJOR_VERSION;
   e064a:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
            conf->max_minor_ver = MBEDTLS_SSL_MAX_MINOR_VERSION;
   e064e:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
#endif

    /*
     * Preset-specific defaults
     */
    switch( preset )
   e0652:	d10b      	bne.n	e066c <mbedtls_ssl_config_defaults+0x5c>

            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
                                   ssl_preset_suiteb_ciphersuites;
   e0654:	4b0d      	ldr	r3, [pc, #52]	; (e068c <mbedtls_ssl_config_defaults+0x7c>)
   e0656:	60e3      	str	r3, [r4, #12]
   e0658:	60a3      	str	r3, [r4, #8]
   e065a:	6063      	str	r3, [r4, #4]
   e065c:	6023      	str	r3, [r4, #0]

#if defined(MBEDTLS_X509_CRT_PARSE_C)
            conf->cert_profile = &mbedtls_x509_crt_profile_suiteb;
   e065e:	4b0c      	ldr	r3, [pc, #48]	; (e0690 <mbedtls_ssl_config_defaults+0x80>)
   e0660:	64e3      	str	r3, [r4, #76]	; 0x4c
#endif

#if defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
            conf->sig_hashes = ssl_preset_suiteb_hashes;
   e0662:	4b0c      	ldr	r3, [pc, #48]	; (e0694 <mbedtls_ssl_config_defaults+0x84>)
   e0664:	65e3      	str	r3, [r4, #92]	; 0x5c
#endif

#if defined(MBEDTLS_ECP_C)
            conf->curve_list = ssl_preset_suiteb_curves;
   e0666:	4b0c      	ldr	r3, [pc, #48]	; (e0698 <mbedtls_ssl_config_defaults+0x88>)
   e0668:	6623      	str	r3, [r4, #96]	; 0x60
#endif
            break;
   e066a:	e00c      	b.n	e0686 <mbedtls_ssl_config_defaults+0x76>

            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
                                   mbedtls_ssl_list_ciphersuites();
   e066c:	f003 ff64 	bl	e4538 <mbedtls_ssl_list_ciphersuites>

#if defined(MBEDTLS_X509_CRT_PARSE_C)
            conf->cert_profile = &mbedtls_x509_crt_profile_default;
   e0670:	4b0a      	ldr	r3, [pc, #40]	; (e069c <mbedtls_ssl_config_defaults+0x8c>)
   e0672:	64e3      	str	r3, [r4, #76]	; 0x4c
#endif

#if defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
            conf->sig_hashes = ssl_preset_default_hashes;
   e0674:	4b0a      	ldr	r3, [pc, #40]	; (e06a0 <mbedtls_ssl_config_defaults+0x90>)

            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
                                   mbedtls_ssl_list_ciphersuites();
   e0676:	60e0      	str	r0, [r4, #12]
   e0678:	60a0      	str	r0, [r4, #8]
   e067a:	6060      	str	r0, [r4, #4]
   e067c:	6020      	str	r0, [r4, #0]
#if defined(MBEDTLS_X509_CRT_PARSE_C)
            conf->cert_profile = &mbedtls_x509_crt_profile_default;
#endif

#if defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
            conf->sig_hashes = ssl_preset_default_hashes;
   e067e:	65e3      	str	r3, [r4, #92]	; 0x5c
#endif

#if defined(MBEDTLS_ECP_C)
            conf->curve_list = mbedtls_ecp_grp_id_list();
   e0680:	f7f8 fba4 	bl	d8dcc <mbedtls_ecp_grp_id_list>
   e0684:	6620      	str	r0, [r4, #96]	; 0x60
            conf->dhm_min_bitlen = 1024;
#endif
    }

    return( 0 );
}
   e0686:	2000      	movs	r0, #0
   e0688:	bd10      	pop	{r4, pc}
   e068a:	bf00      	nop
   e068c:	2003ab7c 	.word	0x2003ab7c
   e0690:	000ee6b0 	.word	0x000ee6b0
   e0694:	2003aba4 	.word	0x2003aba4
   e0698:	2003aba0 	.word	0x2003aba0
   e069c:	000edfa4 	.word	0x000edfa4
   e06a0:	2003ab88 	.word	0x2003ab88

000e06a4 <mbedtls_ssl_config_free>:

/*
 * Free mbedtls_ssl_config
 */
void mbedtls_ssl_config_free( mbedtls_ssl_config *conf )
{
   e06a4:	b538      	push	{r3, r4, r5, lr}
   e06a6:	4604      	mov	r4, r0
    mbedtls_mpi_free( &conf->dhm_P );
    mbedtls_mpi_free( &conf->dhm_G );
#endif

#if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)
    if( conf->psk != NULL )
   e06a8:	6e40      	ldr	r0, [r0, #100]	; 0x64
   e06aa:	b140      	cbz	r0, e06be <mbedtls_ssl_config_free+0x1a>
    {
        mbedtls_platform_zeroize( conf->psk, conf->psk_len );
   e06ac:	6ea1      	ldr	r1, [r4, #104]	; 0x68
   e06ae:	f7fa fda5 	bl	db1fc <mbedtls_platform_zeroize>
        mbedtls_free( conf->psk );
   e06b2:	6e60      	ldr	r0, [r4, #100]	; 0x64
   e06b4:	f005 fd06 	bl	e60c4 <free>
        conf->psk = NULL;
   e06b8:	2300      	movs	r3, #0
   e06ba:	6663      	str	r3, [r4, #100]	; 0x64
        conf->psk_len = 0;
   e06bc:	66a3      	str	r3, [r4, #104]	; 0x68
    }

    if( conf->psk_identity != NULL )
   e06be:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
   e06c0:	b140      	cbz	r0, e06d4 <mbedtls_ssl_config_free+0x30>
    {
        mbedtls_platform_zeroize( conf->psk_identity, conf->psk_identity_len );
   e06c2:	6f21      	ldr	r1, [r4, #112]	; 0x70
   e06c4:	f7fa fd9a 	bl	db1fc <mbedtls_platform_zeroize>
        mbedtls_free( conf->psk_identity );
   e06c8:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
   e06ca:	f005 fcfb 	bl	e60c4 <free>
        conf->psk_identity = NULL;
   e06ce:	2300      	movs	r3, #0
   e06d0:	66e3      	str	r3, [r4, #108]	; 0x6c
        conf->psk_identity_len = 0;
   e06d2:	6723      	str	r3, [r4, #112]	; 0x70
    }
#endif

#if defined(MBEDTLS_X509_CRT_PARSE_C)
    ssl_key_cert_free( conf->key_cert );
   e06d4:	6d20      	ldr	r0, [r4, #80]	; 0x50
#if defined(MBEDTLS_X509_CRT_PARSE_C)
static void ssl_key_cert_free( mbedtls_ssl_key_cert *key_cert )
{
    mbedtls_ssl_key_cert *cur = key_cert, *next;

    while( cur != NULL )
   e06d6:	b120      	cbz	r0, e06e2 <mbedtls_ssl_config_free+0x3e>
    {
        next = cur->next;
   e06d8:	6885      	ldr	r5, [r0, #8]
        mbedtls_free( cur );
   e06da:	f005 fcf3 	bl	e60c4 <free>
        cur = next;
   e06de:	4628      	mov	r0, r5
   e06e0:	e7f9      	b.n	e06d6 <mbedtls_ssl_config_free+0x32>

#if defined(MBEDTLS_X509_CRT_PARSE_C)
    ssl_key_cert_free( conf->key_cert );
#endif

    mbedtls_platform_zeroize( conf, sizeof( mbedtls_ssl_config ) );
   e06e2:	4620      	mov	r0, r4
   e06e4:	2180      	movs	r1, #128	; 0x80
}
   e06e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

#if defined(MBEDTLS_X509_CRT_PARSE_C)
    ssl_key_cert_free( conf->key_cert );
#endif

    mbedtls_platform_zeroize( conf, sizeof( mbedtls_ssl_config ) );
   e06ea:	f7fa bd87 	b.w	db1fc <mbedtls_platform_zeroize>

000e06ee <mbedtls_ssl_sig_from_pk>:
    ( defined(MBEDTLS_RSA_C) || defined(MBEDTLS_ECDSA_C) )
/*
 * Convert between MBEDTLS_PK_XXX and SSL_SIG_XXX
 */
unsigned char mbedtls_ssl_sig_from_pk( mbedtls_pk_context *pk )
{
   e06ee:	b510      	push	{r4, lr}
#if defined(MBEDTLS_RSA_C)
    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_RSA ) )
   e06f0:	2101      	movs	r1, #1
    ( defined(MBEDTLS_RSA_C) || defined(MBEDTLS_ECDSA_C) )
/*
 * Convert between MBEDTLS_PK_XXX and SSL_SIG_XXX
 */
unsigned char mbedtls_ssl_sig_from_pk( mbedtls_pk_context *pk )
{
   e06f2:	4604      	mov	r4, r0
#if defined(MBEDTLS_RSA_C)
    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_RSA ) )
   e06f4:	f7fe fb36 	bl	ded64 <mbedtls_pk_can_do>
   e06f8:	b940      	cbnz	r0, e070c <mbedtls_ssl_sig_from_pk+0x1e>
        return( MBEDTLS_SSL_SIG_RSA );
#endif
#if defined(MBEDTLS_ECDSA_C)
    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_ECDSA ) )
   e06fa:	2104      	movs	r1, #4
   e06fc:	4620      	mov	r0, r4
   e06fe:	f7fe fb31 	bl	ded64 <mbedtls_pk_can_do>
   e0702:	2800      	cmp	r0, #0
        return( MBEDTLS_SSL_SIG_ECDSA );
#endif
    return( MBEDTLS_SSL_SIG_ANON );
   e0704:	bf14      	ite	ne
   e0706:	2003      	movne	r0, #3
   e0708:	2000      	moveq	r0, #0
   e070a:	bd10      	pop	{r4, pc}
 */
unsigned char mbedtls_ssl_sig_from_pk( mbedtls_pk_context *pk )
{
#if defined(MBEDTLS_RSA_C)
    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_RSA ) )
        return( MBEDTLS_SSL_SIG_RSA );
   e070c:	2001      	movs	r0, #1
#if defined(MBEDTLS_ECDSA_C)
    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_ECDSA ) )
        return( MBEDTLS_SSL_SIG_ECDSA );
#endif
    return( MBEDTLS_SSL_SIG_ANON );
}
   e070e:	bd10      	pop	{r4, pc}

000e0710 <mbedtls_ssl_pk_alg_from_sig>:
    }
}

mbedtls_pk_type_t mbedtls_ssl_pk_alg_from_sig( unsigned char sig )
{
    switch( sig )
   e0710:	2801      	cmp	r0, #1
   e0712:	d003      	beq.n	e071c <mbedtls_ssl_pk_alg_from_sig+0xc>
   e0714:	2803      	cmp	r0, #3
#if defined(MBEDTLS_ECDSA_C)
        case MBEDTLS_SSL_SIG_ECDSA:
            return( MBEDTLS_PK_ECDSA );
#endif
        default:
            return( MBEDTLS_PK_NONE );
   e0716:	bf0c      	ite	eq
   e0718:	2004      	moveq	r0, #4
   e071a:	2000      	movne	r0, #0
    }
}
   e071c:	4770      	bx	lr
	...

000e0720 <mbedtls_ssl_md_alg_from_hash>:

/*
 * Convert from MBEDTLS_SSL_HASH_XXX to MBEDTLS_MD_XXX
 */
mbedtls_md_type_t mbedtls_ssl_md_alg_from_hash( unsigned char hash )
{
   e0720:	3802      	subs	r0, #2
   e0722:	b2c0      	uxtb	r0, r0
   e0724:	2804      	cmp	r0, #4
   e0726:	bf9a      	itte	ls
   e0728:	4b01      	ldrls	r3, [pc, #4]	; (e0730 <mbedtls_ssl_md_alg_from_hash+0x10>)
   e072a:	5c18      	ldrbls	r0, [r3, r0]
   e072c:	2000      	movhi	r0, #0
            return( MBEDTLS_MD_SHA512 );
#endif
        default:
            return( MBEDTLS_MD_NONE );
    }
}
   e072e:	4770      	bx	lr
   e0730:	000ee6dc 	.word	0x000ee6dc

000e0734 <mbedtls_ssl_hash_from_md_alg>:

/*
 * Convert from MBEDTLS_MD_XXX to MBEDTLS_SSL_HASH_XXX
 */
unsigned char mbedtls_ssl_hash_from_md_alg( int md )
{
   e0734:	3804      	subs	r0, #4
   e0736:	2804      	cmp	r0, #4
   e0738:	bf9a      	itte	ls
   e073a:	4b02      	ldrls	r3, [pc, #8]	; (e0744 <mbedtls_ssl_hash_from_md_alg+0x10>)
   e073c:	5c18      	ldrbls	r0, [r3, r0]
    switch( md )
   e073e:	2000      	movhi	r0, #0
            return( MBEDTLS_SSL_HASH_SHA512 );
#endif
        default:
            return( MBEDTLS_SSL_HASH_NONE );
    }
}
   e0740:	4770      	bx	lr
   e0742:	bf00      	nop
   e0744:	000ee74e 	.word	0x000ee74e

000e0748 <mbedtls_ssl_check_curve>:
 */
int mbedtls_ssl_check_curve( const mbedtls_ssl_context *ssl, mbedtls_ecp_group_id grp_id )
{
    const mbedtls_ecp_group_id *gid;

    if( ssl->conf->curve_list == NULL )
   e0748:	6803      	ldr	r3, [r0, #0]
   e074a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   e074c:	b13b      	cbz	r3, e075e <mbedtls_ssl_check_curve+0x16>
   e074e:	3b01      	subs	r3, #1
        return( -1 );

    for( gid = ssl->conf->curve_list; *gid != MBEDTLS_ECP_DP_NONE; gid++ )
   e0750:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   e0754:	b11a      	cbz	r2, e075e <mbedtls_ssl_check_curve+0x16>
        if( *gid == grp_id )
   e0756:	428a      	cmp	r2, r1
   e0758:	d1fa      	bne.n	e0750 <mbedtls_ssl_check_curve+0x8>
            return( 0 );
   e075a:	2000      	movs	r0, #0
   e075c:	4770      	bx	lr
int mbedtls_ssl_check_curve( const mbedtls_ssl_context *ssl, mbedtls_ecp_group_id grp_id )
{
    const mbedtls_ecp_group_id *gid;

    if( ssl->conf->curve_list == NULL )
        return( -1 );
   e075e:	f04f 30ff 	mov.w	r0, #4294967295
    for( gid = ssl->conf->curve_list; *gid != MBEDTLS_ECP_DP_NONE; gid++ )
        if( *gid == grp_id )
            return( 0 );

    return( -1 );
}
   e0762:	4770      	bx	lr

000e0764 <mbedtls_ssl_check_sig_hash>:
int mbedtls_ssl_check_sig_hash( const mbedtls_ssl_context *ssl,
                                mbedtls_md_type_t md )
{
    const int *cur;

    if( ssl->conf->sig_hashes == NULL )
   e0764:	6803      	ldr	r3, [r0, #0]
   e0766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   e0768:	b13b      	cbz	r3, e077a <mbedtls_ssl_check_sig_hash+0x16>
   e076a:	3b04      	subs	r3, #4
        return( -1 );

    for( cur = ssl->conf->sig_hashes; *cur != MBEDTLS_MD_NONE; cur++ )
   e076c:	f853 2f04 	ldr.w	r2, [r3, #4]!
   e0770:	b11a      	cbz	r2, e077a <mbedtls_ssl_check_sig_hash+0x16>
        if( *cur == (int) md )
   e0772:	428a      	cmp	r2, r1
   e0774:	d1fa      	bne.n	e076c <mbedtls_ssl_check_sig_hash+0x8>
            return( 0 );
   e0776:	2000      	movs	r0, #0
   e0778:	4770      	bx	lr
                                mbedtls_md_type_t md )
{
    const int *cur;

    if( ssl->conf->sig_hashes == NULL )
        return( -1 );
   e077a:	f04f 30ff 	mov.w	r0, #4294967295
    for( cur = ssl->conf->sig_hashes; *cur != MBEDTLS_MD_NONE; cur++ )
        if( *cur == (int) md )
            return( 0 );

    return( -1 );
}
   e077e:	4770      	bx	lr

000e0780 <mbedtls_ssl_check_cert_usage>:
    ((void) cert_endpoint);
    ((void) flags);
#endif

#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    if( cert_endpoint == MBEDTLS_SSL_IS_SERVER )
   e0780:	2a01      	cmp	r2, #1
#if defined(MBEDTLS_X509_CRT_PARSE_C)
int mbedtls_ssl_check_cert_usage( const mbedtls_x509_crt *cert,
                          const mbedtls_ssl_ciphersuite_t *ciphersuite,
                          int cert_endpoint,
                          uint32_t *flags )
{
   e0782:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e0784:	4607      	mov	r7, r0
   e0786:	4616      	mov	r6, r2
   e0788:	461d      	mov	r5, r3
    ((void) cert_endpoint);
    ((void) flags);
#endif

#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    if( cert_endpoint == MBEDTLS_SSL_IS_SERVER )
   e078a:	d110      	bne.n	e07ae <mbedtls_ssl_check_cert_usage+0x2e>
    {
        /* Server part of the key exchange */
        switch( ciphersuite->key_exchange )
   e078c:	7a8a      	ldrb	r2, [r1, #10]
   e078e:	2a0a      	cmp	r2, #10
   e0790:	d80f      	bhi.n	e07b2 <mbedtls_ssl_check_cert_usage+0x32>
   e0792:	fa06 f202 	lsl.w	r2, r6, r2
   e0796:	f012 0f82 	tst.w	r2, #130	; 0x82
   e079a:	d10c      	bne.n	e07b6 <mbedtls_ssl_check_cert_usage+0x36>
   e079c:	f412 6fc0 	tst.w	r2, #1536	; 0x600
   e07a0:	d10b      	bne.n	e07ba <mbedtls_ssl_check_cert_usage+0x3a>
                          int cert_endpoint,
                          uint32_t *flags )
{
    int ret = 0;
#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    int usage = 0;
   e07a2:	f012 0f1c 	tst.w	r2, #28
   e07a6:	bf14      	ite	ne
   e07a8:	2180      	movne	r1, #128	; 0x80
   e07aa:	2100      	moveq	r1, #0
   e07ac:	e006      	b.n	e07bc <mbedtls_ssl_check_cert_usage+0x3c>
        }
    }
    else
    {
        /* Client auth: we only implement rsa_sign and mbedtls_ecdsa_sign for now */
        usage = MBEDTLS_X509_KU_DIGITAL_SIGNATURE;
   e07ae:	2180      	movs	r1, #128	; 0x80
   e07b0:	e004      	b.n	e07bc <mbedtls_ssl_check_cert_usage+0x3c>
                          int cert_endpoint,
                          uint32_t *flags )
{
    int ret = 0;
#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    int usage = 0;
   e07b2:	2100      	movs	r1, #0
   e07b4:	e002      	b.n	e07bc <mbedtls_ssl_check_cert_usage+0x3c>
        /* Server part of the key exchange */
        switch( ciphersuite->key_exchange )
        {
            case MBEDTLS_KEY_EXCHANGE_RSA:
            case MBEDTLS_KEY_EXCHANGE_RSA_PSK:
                usage = MBEDTLS_X509_KU_KEY_ENCIPHERMENT;
   e07b6:	2120      	movs	r1, #32
   e07b8:	e000      	b.n	e07bc <mbedtls_ssl_check_cert_usage+0x3c>
                usage = MBEDTLS_X509_KU_DIGITAL_SIGNATURE;
                break;

            case MBEDTLS_KEY_EXCHANGE_ECDH_RSA:
            case MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA:
                usage = MBEDTLS_X509_KU_KEY_AGREEMENT;
   e07ba:	2108      	movs	r1, #8
    {
        /* Client auth: we only implement rsa_sign and mbedtls_ecdsa_sign for now */
        usage = MBEDTLS_X509_KU_DIGITAL_SIGNATURE;
    }

    if( mbedtls_x509_crt_check_key_usage( cert, usage ) != 0 )
   e07bc:	4638      	mov	r0, r7
   e07be:	f7fd fbdd 	bl	ddf7c <mbedtls_x509_crt_check_key_usage>
   e07c2:	b130      	cbz	r0, e07d2 <mbedtls_ssl_check_cert_usage+0x52>
    {
        *flags |= MBEDTLS_X509_BADCERT_KEY_USAGE;
   e07c4:	682b      	ldr	r3, [r5, #0]
   e07c6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   e07ca:	602b      	str	r3, [r5, #0]
        ret = -1;
   e07cc:	f04f 34ff 	mov.w	r4, #4294967295
   e07d0:	e000      	b.n	e07d4 <mbedtls_ssl_check_cert_usage+0x54>
int mbedtls_ssl_check_cert_usage( const mbedtls_x509_crt *cert,
                          const mbedtls_ssl_ciphersuite_t *ciphersuite,
                          int cert_endpoint,
                          uint32_t *flags )
{
    int ret = 0;
   e07d2:	4604      	mov	r4, r0
    {
        ext_oid = MBEDTLS_OID_CLIENT_AUTH;
        ext_len = MBEDTLS_OID_SIZE( MBEDTLS_OID_CLIENT_AUTH );
    }

    if( mbedtls_x509_crt_check_extended_key_usage( cert, ext_oid, ext_len ) != 0 )
   e07d4:	4b08      	ldr	r3, [pc, #32]	; (e07f8 <mbedtls_ssl_check_cert_usage+0x78>)
   e07d6:	4909      	ldr	r1, [pc, #36]	; (e07fc <mbedtls_ssl_check_cert_usage+0x7c>)
   e07d8:	2208      	movs	r2, #8
   e07da:	2e01      	cmp	r6, #1
   e07dc:	bf18      	it	ne
   e07de:	4619      	movne	r1, r3
   e07e0:	4638      	mov	r0, r7
   e07e2:	f7fd fbef 	bl	ddfc4 <mbedtls_x509_crt_check_extended_key_usage>
   e07e6:	b128      	cbz	r0, e07f4 <mbedtls_ssl_check_cert_usage+0x74>
    {
        *flags |= MBEDTLS_X509_BADCERT_EXT_KEY_USAGE;
   e07e8:	682b      	ldr	r3, [r5, #0]
   e07ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   e07ee:	602b      	str	r3, [r5, #0]
        ret = -1;
   e07f0:	f04f 34ff 	mov.w	r4, #4294967295
    }
#endif /* MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE */

    return( ret );
}
   e07f4:	4620      	mov	r0, r4
   e07f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   e07f8:	000ed312 	.word	0x000ed312
   e07fc:	000ed2da 	.word	0x000ed2da

000e0800 <mbedtls_ssl_parse_certificate>:

    return( 0 );
}

int mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )
{
   e0800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int ret;
    const mbedtls_ssl_ciphersuite_t * const ciphersuite_info =
          ssl->transform_negotiate->ciphersuite_info;
   e0804:	6c03      	ldr	r3, [r0, #64]	; 0x40
   e0806:	f8d3 9000 	ldr.w	r9, [r3]
#endif
    void *rs_ctx = NULL;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate" ) );

    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
   e080a:	f899 200a 	ldrb.w	r2, [r9, #10]
   e080e:	2a0b      	cmp	r2, #11

    return( 0 );
}

int mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )
{
   e0810:	b086      	sub	sp, #24
   e0812:	4604      	mov	r4, r0
#endif
    void *rs_ctx = NULL;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate" ) );

    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
   e0814:	d808      	bhi.n	e0828 <mbedtls_ssl_parse_certificate+0x28>
   e0816:	f44f 6316 	mov.w	r3, #2400	; 0x960
   e081a:	40d3      	lsrs	r3, r2
   e081c:	f003 0301 	and.w	r3, r3, #1
   e0820:	f083 0001 	eor.w	r0, r3, #1
   e0824:	2b00      	cmp	r3, #0
   e0826:	d143      	bne.n	e08b0 <mbedtls_ssl_parse_certificate+0xb0>
#if defined(MBEDTLS_SSL_SRV_C) && defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
    const int authmode = ssl->handshake->sni_authmode != MBEDTLS_SSL_VERIFY_UNSET
                       ? ssl->handshake->sni_authmode
                       : ssl->conf->authmode;
#else
    const int authmode = ssl->conf->authmode;
   e0828:	6823      	ldr	r3, [r4, #0]
    {
        goto crt_verify;
    }
#endif

    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   e082a:	2101      	movs	r1, #1
   e082c:	4620      	mov	r0, r4
#if defined(MBEDTLS_SSL_SRV_C) && defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
    const int authmode = ssl->handshake->sni_authmode != MBEDTLS_SSL_VERIFY_UNSET
                       ? ssl->handshake->sni_authmode
                       : ssl->conf->authmode;
#else
    const int authmode = ssl->conf->authmode;
   e082e:	f893 707c 	ldrb.w	r7, [r3, #124]	; 0x7c
    {
        goto crt_verify;
    }
#endif

    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   e0832:	f7ff f925 	bl	dfa80 <mbedtls_ssl_read_record>
#if defined(MBEDTLS_SSL_SRV_C) && defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
    const int authmode = ssl->handshake->sni_authmode != MBEDTLS_SSL_VERIFY_UNSET
                       ? ssl->handshake->sni_authmode
                       : ssl->conf->authmode;
#else
    const int authmode = ssl->conf->authmode;
   e0836:	f3c7 0781 	ubfx	r7, r7, #2, #2
    {
        goto crt_verify;
    }
#endif

    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   e083a:	4605      	mov	r5, r0
   e083c:	2800      	cmp	r0, #0
   e083e:	d14b      	bne.n	e08d8 <mbedtls_ssl_parse_certificate+0xd8>
    }
#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 || \
          MBEDTLS_SSL_PROTO_TLS1_2 */
#endif /* MBEDTLS_SSL_SRV_C */

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
   e0840:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   e0842:	2b16      	cmp	r3, #22
   e0844:	d006      	beq.n	e0854 <mbedtls_ssl_parse_certificate+0x54>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
   e0846:	220a      	movs	r2, #10
   e0848:	2102      	movs	r1, #2
   e084a:	4620      	mov	r0, r4
   e084c:	f7ff f8fc 	bl	dfa48 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
   e0850:	4884      	ldr	r0, [pc, #528]	; (e0a64 <mbedtls_ssl_parse_certificate+0x264>)
   e0852:	e02d      	b.n	e08b0 <mbedtls_ssl_parse_certificate+0xb0>
    }

    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_CERTIFICATE ||
   e0854:	6e62      	ldr	r2, [r4, #100]	; 0x64
   e0856:	7813      	ldrb	r3, [r2, #0]
   e0858:	2b0b      	cmp	r3, #11
   e085a:	d10b      	bne.n	e0874 <mbedtls_ssl_parse_certificate+0x74>
        ssl->in_hslen < mbedtls_ssl_hs_hdr_len( ssl ) + 3 + 3 )
   e085c:	6fa1      	ldr	r1, [r4, #120]	; 0x78
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
    }

    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_CERTIFICATE ||
   e085e:	2909      	cmp	r1, #9
   e0860:	d908      	bls.n	e0874 <mbedtls_ssl_parse_certificate+0x74>
    /*
     * Same message structure as in mbedtls_ssl_write_certificate()
     */
    n = ( ssl->in_msg[i+1] << 8 ) | ssl->in_msg[i+2];

    if( ssl->in_msg[i] != 0 ||
   e0862:	7913      	ldrb	r3, [r2, #4]
   e0864:	b933      	cbnz	r3, e0874 <mbedtls_ssl_parse_certificate+0x74>
   e0866:	7950      	ldrb	r0, [r2, #5]
   e0868:	7993      	ldrb	r3, [r2, #6]
   e086a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   e086e:	3307      	adds	r3, #7
   e0870:	4299      	cmp	r1, r3
   e0872:	d006      	beq.n	e0882 <mbedtls_ssl_parse_certificate+0x82>
    while( i < ssl->in_hslen )
    {
        if ( i + 3 > ssl->in_hslen ) {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                           MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
   e0874:	2232      	movs	r2, #50	; 0x32
   e0876:	2102      	movs	r1, #2
   e0878:	4620      	mov	r0, r4
   e087a:	f7ff f8e5 	bl	dfa48 <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
   e087e:	487a      	ldr	r0, [pc, #488]	; (e0a68 <mbedtls_ssl_parse_certificate+0x268>)
   e0880:	e016      	b.n	e08b0 <mbedtls_ssl_parse_certificate+0xb0>
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
    }

    /* In case we tried to reuse a session but it failed */
    if( ssl->session_negotiate->peer_cert != NULL )
   e0882:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e0884:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
   e0886:	b128      	cbz	r0, e0894 <mbedtls_ssl_parse_certificate+0x94>
    {
        mbedtls_x509_crt_free( ssl->session_negotiate->peer_cert );
   e0888:	f7fd fe13 	bl	de4b2 <mbedtls_x509_crt_free>
        mbedtls_free( ssl->session_negotiate->peer_cert );
   e088c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e088e:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
   e0890:	f005 fc18 	bl	e60c4 <free>
    }

    if( ( ssl->session_negotiate->peer_cert = (mbedtls_x509_crt *)mbedtls_calloc( 1,
   e0894:	f44f 719a 	mov.w	r1, #308	; 0x134
   e0898:	2001      	movs	r0, #1
   e089a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   e089c:	f008 ffea 	bl	e9874 <calloc>
   e08a0:	65f0      	str	r0, [r6, #92]	; 0x5c
   e08a2:	b948      	cbnz	r0, e08b8 <mbedtls_ssl_parse_certificate+0xb8>
                    sizeof( mbedtls_x509_crt ) ) ) == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc(%d bytes) failed",
                       sizeof( mbedtls_x509_crt ) ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
   e08a4:	2250      	movs	r2, #80	; 0x50
   e08a6:	2102      	movs	r1, #2
   e08a8:	4620      	mov	r0, r4
   e08aa:	f7ff f8cd 	bl	dfa48 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
   e08ae:	486f      	ldr	r0, [pc, #444]	; (e0a6c <mbedtls_ssl_parse_certificate+0x26c>)
        {
            ret = 0;
        }
#endif

        ssl->state++;
   e08b0:	6863      	ldr	r3, [r4, #4]
   e08b2:	3301      	adds	r3, #1
   e08b4:	6063      	str	r3, [r4, #4]
        return( ret );
   e08b6:	e0d1      	b.n	e0a5c <mbedtls_ssl_parse_certificate+0x25c>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
    }

    mbedtls_x509_crt_init( ssl->session_negotiate->peer_cert );
   e08b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }

        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
                                  ssl->in_msg + i, n );
        switch( ret )
   e08ba:	f8df a1b8 	ldr.w	sl, [pc, #440]	; e0a74 <mbedtls_ssl_parse_certificate+0x274>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
    }

    mbedtls_x509_crt_init( ssl->session_negotiate->peer_cert );
   e08be:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
   e08c0:	f7fd fdf2 	bl	de4a8 <mbedtls_x509_crt_init>

    i += 3;
   e08c4:	2607      	movs	r6, #7

    while( i < ssl->in_hslen )
   e08c6:	f8d4 e078 	ldr.w	lr, [r4, #120]	; 0x78
   e08ca:	45b6      	cmp	lr, r6
   e08cc:	d806      	bhi.n	e08dc <mbedtls_ssl_parse_certificate+0xdc>
crt_verify:
    if( ssl->handshake->ecrs_enabled)
        rs_ctx = &ssl->handshake->ecrs_ctx;
#endif

    if( authmode != MBEDTLS_SSL_VERIFY_NONE )
   e08ce:	2f00      	cmp	r7, #0
   e08d0:	d136      	bne.n	e0940 <mbedtls_ssl_parse_certificate+0x140>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "Certificate verification flags clear" ) );
        }
#endif /* MBEDTLS_DEBUG_C */
    }

    ssl->state++;
   e08d2:	6863      	ldr	r3, [r4, #4]
   e08d4:	3301      	adds	r3, #1
   e08d6:	6063      	str	r3, [r4, #4]
   e08d8:	4628      	mov	r0, r5
   e08da:	e0bf      	b.n	e0a5c <mbedtls_ssl_parse_certificate+0x25c>

    i += 3;

    while( i < ssl->in_hslen )
    {
        if ( i + 3 > ssl->in_hslen ) {
   e08dc:	1cf1      	adds	r1, r6, #3
   e08de:	458e      	cmp	lr, r1
   e08e0:	d3c8      	bcc.n	e0874 <mbedtls_ssl_parse_certificate+0x74>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                           MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }
        if( ssl->in_msg[i] != 0 )
   e08e2:	6e60      	ldr	r0, [r4, #100]	; 0x64
   e08e4:	5d83      	ldrb	r3, [r0, r6]
   e08e6:	2b00      	cmp	r3, #0
   e08e8:	d1c4      	bne.n	e0874 <mbedtls_ssl_parse_certificate+0x74>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }

        n = ( (unsigned int) ssl->in_msg[i + 1] << 8 )
   e08ea:	4406      	add	r6, r0
            | (unsigned int) ssl->in_msg[i + 2];
   e08ec:	7872      	ldrb	r2, [r6, #1]
   e08ee:	78b3      	ldrb	r3, [r6, #2]
   e08f0:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
        i += 3;

        if( n < 128 || i + n > ssl->in_hslen )
   e08f4:	2a7f      	cmp	r2, #127	; 0x7f
   e08f6:	d9bd      	bls.n	e0874 <mbedtls_ssl_parse_certificate+0x74>
   e08f8:	188e      	adds	r6, r1, r2
   e08fa:	45b6      	cmp	lr, r6
   e08fc:	d3ba      	bcc.n	e0874 <mbedtls_ssl_parse_certificate+0x74>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }

        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
   e08fe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e0900:	4401      	add	r1, r0
   e0902:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
   e0904:	f7fd fe32 	bl	de56c <mbedtls_x509_crt_parse_der>
                                  ssl->in_msg + i, n );
        switch( ret )
   e0908:	4550      	cmp	r0, sl
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }

        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
   e090a:	4680      	mov	r8, r0
                                  ssl->in_msg + i, n );
        switch( ret )
   e090c:	d0db      	beq.n	e08c6 <mbedtls_ssl_parse_certificate+0xc6>
   e090e:	dc03      	bgt.n	e0918 <mbedtls_ssl_parse_certificate+0x118>
   e0910:	f510 5f22 	cmn.w	r0, #10368	; 0x2880
   e0914:	d00a      	beq.n	e092c <mbedtls_ssl_parse_certificate+0x12c>
   e0916:	e007      	b.n	e0928 <mbedtls_ssl_parse_certificate+0x128>
   e0918:	f510 5f16 	cmn.w	r0, #9600	; 0x2580
   e091c:	d002      	beq.n	e0924 <mbedtls_ssl_parse_certificate+0x124>
   e091e:	2800      	cmp	r0, #0
   e0920:	d0d1      	beq.n	e08c6 <mbedtls_ssl_parse_certificate+0xc6>
   e0922:	e001      	b.n	e0928 <mbedtls_ssl_parse_certificate+0x128>
        case MBEDTLS_ERR_X509_ALLOC_FAILED:
            alert = MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR;
            goto crt_parse_der_failed;

        case MBEDTLS_ERR_X509_UNKNOWN_VERSION:
            alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
   e0924:	222b      	movs	r2, #43	; 0x2b
   e0926:	e002      	b.n	e092e <mbedtls_ssl_parse_certificate+0x12e>
            goto crt_parse_der_failed;

        default:
            alert = MBEDTLS_SSL_ALERT_MSG_BAD_CERT;
   e0928:	222a      	movs	r2, #42	; 0x2a
   e092a:	e000      	b.n	e092e <mbedtls_ssl_parse_certificate+0x12e>
            /* Ignore certificate with an unknown algorithm: maybe a
               prior certificate was already trusted. */
            break;

        case MBEDTLS_ERR_X509_ALLOC_FAILED:
            alert = MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR;
   e092c:	2250      	movs	r2, #80	; 0x50
            goto crt_parse_der_failed;

        default:
            alert = MBEDTLS_SSL_ALERT_MSG_BAD_CERT;
        crt_parse_der_failed:
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL, alert );
   e092e:	2102      	movs	r1, #2
   e0930:	4620      	mov	r0, r4
   e0932:	f7ff f889 	bl	dfa48 <mbedtls_ssl_send_alert_message>
           let it decide whether to alert. */
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ( ret = ssl_parse_certificate_chain( ssl ) ) != 0 )
   e0936:	f1b8 0f00 	cmp.w	r8, #0
   e093a:	d0c8      	beq.n	e08ce <mbedtls_ssl_parse_certificate+0xce>
   e093c:	4640      	mov	r0, r8
   e093e:	e7b7      	b.n	e08b0 <mbedtls_ssl_parse_certificate+0xb0>
    {
        mbedtls_x509_crt *ca_chain;
        mbedtls_x509_crl *ca_crl;

#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
        if( ssl->handshake->sni_ca_chain != NULL )
   e0940:	6b22      	ldr	r2, [r4, #48]	; 0x30
   e0942:	6823      	ldr	r3, [r4, #0]
   e0944:	f8d2 8150 	ldr.w	r8, [r2, #336]	; 0x150
   e0948:	f1b8 0f00 	cmp.w	r8, #0
   e094c:	d002      	beq.n	e0954 <mbedtls_ssl_parse_certificate+0x154>
        {
            ca_chain = ssl->handshake->sni_ca_chain;
            ca_crl   = ssl->handshake->sni_ca_crl;
   e094e:	f8d2 2154 	ldr.w	r2, [r2, #340]	; 0x154
   e0952:	e002      	b.n	e095a <mbedtls_ssl_parse_certificate+0x15a>
        }
        else
#endif
        {
            ca_chain = ssl->conf->ca_chain;
   e0954:	f8d3 8054 	ldr.w	r8, [r3, #84]	; 0x54
            ca_crl   = ssl->conf->ca_crl;
   e0958:	6d9a      	ldr	r2, [r3, #88]	; 0x58

        /*
         * Main check: verify certificate
         */
        ret = mbedtls_x509_crt_verify_restartable(
                                ssl->session_negotiate->peer_cert,
   e095a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
        }

        /*
         * Main check: verify certificate
         */
        ret = mbedtls_x509_crt_verify_restartable(
   e095c:	2100      	movs	r1, #0
   e095e:	9104      	str	r1, [sp, #16]
   e0960:	6b99      	ldr	r1, [r3, #56]	; 0x38
   e0962:	9103      	str	r1, [sp, #12]
   e0964:	6b59      	ldr	r1, [r3, #52]	; 0x34
   e0966:	9102      	str	r1, [sp, #8]
   e0968:	f100 0160 	add.w	r1, r0, #96	; 0x60
   e096c:	9101      	str	r1, [sp, #4]
   e096e:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   e0972:	9100      	str	r1, [sp, #0]
   e0974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   e0976:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   e0978:	4641      	mov	r1, r8
   e097a:	f7fd fb67 	bl	de04c <mbedtls_x509_crt_verify_restartable>
         * Secondary checks: always done, but change 'ret' only if it was 0
         */

#if defined(MBEDTLS_ECP_C)
        {
            const mbedtls_pk_context *pk = &ssl->session_negotiate->peer_cert->pk;
   e097e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e0980:	f8d3 a05c 	ldr.w	sl, [r3, #92]	; 0x5c
        }

        /*
         * Main check: verify certificate
         */
        ret = mbedtls_x509_crt_verify_restartable(
   e0984:	4606      	mov	r6, r0
#if defined(MBEDTLS_ECP_C)
        {
            const mbedtls_pk_context *pk = &ssl->session_negotiate->peer_cert->pk;

            /* If certificate uses an EC key, make sure the curve is OK */
            if( mbedtls_pk_can_do( pk, MBEDTLS_PK_ECKEY ) &&
   e0986:	2102      	movs	r1, #2
   e0988:	f10a 00bc 	add.w	r0, sl, #188	; 0xbc
   e098c:	f7fe f9ea 	bl	ded64 <mbedtls_pk_can_do>
   e0990:	b138      	cbz	r0, e09a2 <mbedtls_ssl_parse_certificate+0x1a2>
                mbedtls_ssl_check_curve( ssl, mbedtls_pk_ec( *pk )->grp.id ) != 0 )
   e0992:	f8da 30c0 	ldr.w	r3, [sl, #192]	; 0xc0
   e0996:	4620      	mov	r0, r4
   e0998:	7819      	ldrb	r1, [r3, #0]
   e099a:	f7ff fed5 	bl	e0748 <mbedtls_ssl_check_curve>
#if defined(MBEDTLS_ECP_C)
        {
            const mbedtls_pk_context *pk = &ssl->session_negotiate->peer_cert->pk;

            /* If certificate uses an EC key, make sure the curve is OK */
            if( mbedtls_pk_can_do( pk, MBEDTLS_PK_ECKEY ) &&
   e099e:	2800      	cmp	r0, #0
   e09a0:	d14c      	bne.n	e0a3c <mbedtls_ssl_parse_certificate+0x23c>
                    ret = MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE;
            }
        }
#endif /* MBEDTLS_ECP_C */

        if( mbedtls_ssl_check_cert_usage( ssl->session_negotiate->peer_cert,
   e09a2:	6823      	ldr	r3, [r4, #0]
   e09a4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   e09a6:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
   e09aa:	f002 0201 	and.w	r2, r2, #1
   e09ae:	f100 0360 	add.w	r3, r0, #96	; 0x60
   e09b2:	f082 0201 	eor.w	r2, r2, #1
   e09b6:	4649      	mov	r1, r9
   e09b8:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   e09ba:	f7ff fee1 	bl	e0780 <mbedtls_ssl_check_cert_usage>
   e09be:	b100      	cbz	r0, e09c2 <mbedtls_ssl_parse_certificate+0x1c2>
                                 ciphersuite_info,
                                 ! ssl->conf->endpoint,
                                 &ssl->session_negotiate->verify_result ) != 0 )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate (usage extensions)" ) );
            if( ret == 0 )
   e09c0:	b19e      	cbz	r6, e09ea <mbedtls_ssl_parse_certificate+0x1ea>
         * verification failure through MBEDTLS_ERR_X509_CERT_VERIFY_FAILED,
         * with details encoded in the verification flags. All other kinds
         * of error codes, including those from the user provided f_vrfy
         * functions, are treated as fatal and lead to a failure of
         * ssl_parse_certificate even if verification was optional. */
        if( authmode == MBEDTLS_SSL_VERIFY_OPTIONAL &&
   e09c2:	2f01      	cmp	r7, #1
   e09c4:	d106      	bne.n	e09d4 <mbedtls_ssl_parse_certificate+0x1d4>
   e09c6:	f516 5f1c 	cmn.w	r6, #9984	; 0x2700
   e09ca:	d082      	beq.n	e08d2 <mbedtls_ssl_parse_certificate+0xd2>
            ( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED ||
   e09cc:	f516 4ff4 	cmn.w	r6, #31232	; 0x7a00
   e09d0:	f43f af7f 	beq.w	e08d2 <mbedtls_ssl_parse_certificate+0xd2>
              ret == MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE ) )
        {
            ret = 0;
        }

        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
   e09d4:	f1b8 0f00 	cmp.w	r8, #0
   e09d8:	d101      	bne.n	e09de <mbedtls_ssl_parse_certificate+0x1de>
   e09da:	2f02      	cmp	r7, #2
   e09dc:	d003      	beq.n	e09e6 <mbedtls_ssl_parse_certificate+0x1e6>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no CA chain" ) );
            ret = MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED;
        }

        if( ret != 0 )
   e09de:	2e00      	cmp	r6, #0
   e09e0:	f43f af77 	beq.w	e08d2 <mbedtls_ssl_parse_certificate+0xd2>
   e09e4:	e008      	b.n	e09f8 <mbedtls_ssl_parse_certificate+0x1f8>
        }

        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no CA chain" ) );
            ret = MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED;
   e09e6:	4e22      	ldr	r6, [pc, #136]	; (e0a70 <mbedtls_ssl_parse_certificate+0x270>)
   e09e8:	e006      	b.n	e09f8 <mbedtls_ssl_parse_certificate+0x1f8>
         * verification failure through MBEDTLS_ERR_X509_CERT_VERIFY_FAILED,
         * with details encoded in the verification flags. All other kinds
         * of error codes, including those from the user provided f_vrfy
         * functions, are treated as fatal and lead to a failure of
         * ssl_parse_certificate even if verification was optional. */
        if( authmode == MBEDTLS_SSL_VERIFY_OPTIONAL &&
   e09ea:	2f01      	cmp	r7, #1
   e09ec:	f43f af71 	beq.w	e08d2 <mbedtls_ssl_parse_certificate+0xd2>
              ret == MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE ) )
        {
            ret = 0;
        }

        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
   e09f0:	f1b8 0f00 	cmp.w	r8, #0
   e09f4:	d02c      	beq.n	e0a50 <mbedtls_ssl_parse_certificate+0x250>
                                 ! ssl->conf->endpoint,
                                 &ssl->session_negotiate->verify_result ) != 0 )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate (usage extensions)" ) );
            if( ret == 0 )
                ret = MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE;
   e09f6:	4e1c      	ldr	r6, [pc, #112]	; (e0a68 <mbedtls_ssl_parse_certificate+0x268>)
            uint8_t alert;

            /* The certificate may have been rejected for several reasons.
               Pick one and send the corresponding alert. Which alert to send
               may be a subject of debate in some cases. */
            if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_OTHER )
   e09f8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e09fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   e09fc:	05df      	lsls	r7, r3, #23
   e09fe:	d40e      	bmi.n	e0a1e <mbedtls_ssl_parse_certificate+0x21e>
                alert = MBEDTLS_SSL_ALERT_MSG_ACCESS_DENIED;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_CN_MISMATCH )
   e0a00:	075d      	lsls	r5, r3, #29
   e0a02:	d40e      	bmi.n	e0a22 <mbedtls_ssl_parse_certificate+0x222>
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_NS_CERT_TYPE )
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_PK )
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_KEY )
   e0a04:	f413 3fdc 	tst.w	r3, #112640	; 0x1b800
   e0a08:	d10d      	bne.n	e0a26 <mbedtls_ssl_parse_certificate+0x226>
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_EXPIRED )
   e0a0a:	07d8      	lsls	r0, r3, #31
   e0a0c:	d40d      	bmi.n	e0a2a <mbedtls_ssl_parse_certificate+0x22a>
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_EXPIRED;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_REVOKED )
   e0a0e:	0799      	lsls	r1, r3, #30
   e0a10:	d40d      	bmi.n	e0a2e <mbedtls_ssl_parse_certificate+0x22e>
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_REVOKED;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_NOT_TRUSTED )
                alert = MBEDTLS_SSL_ALERT_MSG_UNKNOWN_CA;
            else
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_UNKNOWN;
   e0a12:	f013 0f08 	tst.w	r3, #8
   e0a16:	bf14      	ite	ne
   e0a18:	2230      	movne	r2, #48	; 0x30
   e0a1a:	222e      	moveq	r2, #46	; 0x2e
   e0a1c:	e008      	b.n	e0a30 <mbedtls_ssl_parse_certificate+0x230>

            /* The certificate may have been rejected for several reasons.
               Pick one and send the corresponding alert. Which alert to send
               may be a subject of debate in some cases. */
            if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_OTHER )
                alert = MBEDTLS_SSL_ALERT_MSG_ACCESS_DENIED;
   e0a1e:	2231      	movs	r2, #49	; 0x31
   e0a20:	e006      	b.n	e0a30 <mbedtls_ssl_parse_certificate+0x230>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_CN_MISMATCH )
                alert = MBEDTLS_SSL_ALERT_MSG_BAD_CERT;
   e0a22:	222a      	movs	r2, #42	; 0x2a
   e0a24:	e004      	b.n	e0a30 <mbedtls_ssl_parse_certificate+0x230>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_NS_CERT_TYPE )
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_PK )
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_KEY )
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
   e0a26:	222b      	movs	r2, #43	; 0x2b
   e0a28:	e002      	b.n	e0a30 <mbedtls_ssl_parse_certificate+0x230>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_EXPIRED )
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_EXPIRED;
   e0a2a:	222d      	movs	r2, #45	; 0x2d
   e0a2c:	e000      	b.n	e0a30 <mbedtls_ssl_parse_certificate+0x230>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_REVOKED )
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_REVOKED;
   e0a2e:	222c      	movs	r2, #44	; 0x2c
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_NOT_TRUSTED )
                alert = MBEDTLS_SSL_ALERT_MSG_UNKNOWN_CA;
            else
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_UNKNOWN;
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            alert );
   e0a30:	2102      	movs	r1, #2
   e0a32:	4620      	mov	r0, r4
   e0a34:	f7ff f808 	bl	dfa48 <mbedtls_ssl_send_alert_message>
   e0a38:	4635      	mov	r5, r6
   e0a3a:	e74a      	b.n	e08d2 <mbedtls_ssl_parse_certificate+0xd2>

            /* If certificate uses an EC key, make sure the curve is OK */
            if( mbedtls_pk_can_do( pk, MBEDTLS_PK_ECKEY ) &&
                mbedtls_ssl_check_curve( ssl, mbedtls_pk_ec( *pk )->grp.id ) != 0 )
            {
                ssl->session_negotiate->verify_result |= MBEDTLS_X509_BADCERT_BAD_KEY;
   e0a3c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   e0a3e:	6e13      	ldr	r3, [r2, #96]	; 0x60
   e0a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   e0a44:	6613      	str	r3, [r2, #96]	; 0x60

                MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate (EC key curve)" ) );
                if( ret == 0 )
                    ret = MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE;
   e0a46:	4b08      	ldr	r3, [pc, #32]	; (e0a68 <mbedtls_ssl_parse_certificate+0x268>)
   e0a48:	2e00      	cmp	r6, #0
   e0a4a:	bf08      	it	eq
   e0a4c:	461e      	moveq	r6, r3
   e0a4e:	e7a8      	b.n	e09a2 <mbedtls_ssl_parse_certificate+0x1a2>
        }

        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no CA chain" ) );
            ret = MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED;
   e0a50:	4b07      	ldr	r3, [pc, #28]	; (e0a70 <mbedtls_ssl_parse_certificate+0x270>)
   e0a52:	4e05      	ldr	r6, [pc, #20]	; (e0a68 <mbedtls_ssl_parse_certificate+0x268>)
   e0a54:	2f02      	cmp	r7, #2
   e0a56:	bf08      	it	eq
   e0a58:	461e      	moveq	r6, r3
   e0a5a:	e7cd      	b.n	e09f8 <mbedtls_ssl_parse_certificate+0x1f8>
    ssl->state++;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse certificate" ) );

    return( ret );
}
   e0a5c:	b006      	add	sp, #24
   e0a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e0a62:	bf00      	nop
   e0a64:	ffff8900 	.word	0xffff8900
   e0a68:	ffff8600 	.word	0xffff8600
   e0a6c:	ffff8100 	.word	0xffff8100
   e0a70:	ffff8980 	.word	0xffff8980
   e0a74:	ffffd9d2 	.word	0xffffd9d2

000e0a78 <mbedtls_ssl_write_version>:
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
   e0a78:	7018      	strb	r0, [r3, #0]
        ver[1] = (unsigned char) minor;
   e0a7a:	7059      	strb	r1, [r3, #1]
   e0a7c:	4770      	bx	lr

000e0a7e <mbedtls_ssl_read_version>:
    else
#else
    ((void) transport);
#endif
    {
        *major = ver[0];
   e0a7e:	781a      	ldrb	r2, [r3, #0]
   e0a80:	6002      	str	r2, [r0, #0]
        *minor = ver[1];
   e0a82:	785b      	ldrb	r3, [r3, #1]
   e0a84:	600b      	str	r3, [r1, #0]
   e0a86:	4770      	bx	lr

000e0a88 <mbedtls_ssl_get_key_exchange_md_tls1_2>:
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
int mbedtls_ssl_get_key_exchange_md_tls1_2( mbedtls_ssl_context *ssl,
                                            unsigned char *hash, size_t *hashlen,
                                            unsigned char *data, size_t data_len,
                                            mbedtls_md_type_t md_alg )
{
   e0a88:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   e0a8c:	4605      	mov	r5, r0
    int ret = 0;
    mbedtls_md_context_t ctx;
    const mbedtls_md_info_t *md_info = mbedtls_md_info_from_type( md_alg );
   e0a8e:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
int mbedtls_ssl_get_key_exchange_md_tls1_2( mbedtls_ssl_context *ssl,
                                            unsigned char *hash, size_t *hashlen,
                                            unsigned char *data, size_t data_len,
                                            mbedtls_md_type_t md_alg )
{
   e0a92:	4690      	mov	r8, r2
   e0a94:	460e      	mov	r6, r1
   e0a96:	461f      	mov	r7, r3
    int ret = 0;
    mbedtls_md_context_t ctx;
    const mbedtls_md_info_t *md_info = mbedtls_md_info_from_type( md_alg );
   e0a98:	f7fc fa54 	bl	dcf44 <mbedtls_md_info_from_type>
   e0a9c:	4604      	mov	r4, r0
    *hashlen = mbedtls_md_get_size( md_info );
   e0a9e:	f7fc fb89 	bl	dd1b4 <mbedtls_md_get_size>
   e0aa2:	f8c8 0000 	str.w	r0, [r8]

    mbedtls_md_init( &ctx );
   e0aa6:	a801      	add	r0, sp, #4
   e0aa8:	f7fc fa58 	bl	dcf5c <mbedtls_md_init>
     *     opaque client_random[32];
     *     opaque server_random[32];
     *     ServerDHParams params;
     * };
     */
    if( ( ret = mbedtls_md_setup( &ctx, md_info, 0 ) ) != 0 )
   e0aac:	4621      	mov	r1, r4
   e0aae:	2200      	movs	r2, #0
   e0ab0:	a801      	add	r0, sp, #4
   e0ab2:	f7fc fa73 	bl	dcf9c <mbedtls_md_setup>
   e0ab6:	4604      	mov	r4, r0
   e0ab8:	b9c8      	cbnz	r0, e0aee <mbedtls_ssl_get_key_exchange_md_tls1_2+0x66>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_setup", ret );
        goto exit;
    }
    if( ( ret = mbedtls_md_starts( &ctx ) ) != 0 )
   e0aba:	a801      	add	r0, sp, #4
   e0abc:	f7fc fa90 	bl	dcfe0 <mbedtls_md_starts>
   e0ac0:	4604      	mov	r4, r0
   e0ac2:	b9a0      	cbnz	r0, e0aee <mbedtls_ssl_get_key_exchange_md_tls1_2+0x66>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_starts", ret );
        goto exit;
    }
    if( ( ret = mbedtls_md_update( &ctx, ssl->handshake->randbytes, 64 ) ) != 0 )
   e0ac4:	6b29      	ldr	r1, [r5, #48]	; 0x30
   e0ac6:	2240      	movs	r2, #64	; 0x40
   e0ac8:	f501 712d 	add.w	r1, r1, #692	; 0x2b4
   e0acc:	a801      	add	r0, sp, #4
   e0ace:	f7fc fa91 	bl	dcff4 <mbedtls_md_update>
   e0ad2:	4604      	mov	r4, r0
   e0ad4:	b958      	cbnz	r0, e0aee <mbedtls_ssl_get_key_exchange_md_tls1_2+0x66>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_update", ret );
        goto exit;
    }
    if( ( ret = mbedtls_md_update( &ctx, data, data_len ) ) != 0 )
   e0ad6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   e0ad8:	4639      	mov	r1, r7
   e0ada:	a801      	add	r0, sp, #4
   e0adc:	f7fc fa8a 	bl	dcff4 <mbedtls_md_update>
   e0ae0:	4604      	mov	r4, r0
   e0ae2:	b920      	cbnz	r0, e0aee <mbedtls_ssl_get_key_exchange_md_tls1_2+0x66>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_update", ret );
        goto exit;
    }
    if( ( ret = mbedtls_md_finish( &ctx, hash ) ) != 0 )
   e0ae4:	4631      	mov	r1, r6
   e0ae6:	a801      	add	r0, sp, #4
   e0ae8:	f7fc fa8e 	bl	dd008 <mbedtls_md_finish>
   e0aec:	4604      	mov	r4, r0
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_finish", ret );
        goto exit;
    }

exit:
    mbedtls_md_free( &ctx );
   e0aee:	a801      	add	r0, sp, #4
   e0af0:	f7fc fa39 	bl	dcf66 <mbedtls_md_free>

    if( ret != 0 )
   e0af4:	b124      	cbz	r4, e0b00 <mbedtls_ssl_get_key_exchange_md_tls1_2+0x78>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
   e0af6:	2250      	movs	r2, #80	; 0x50
   e0af8:	2102      	movs	r1, #2
   e0afa:	4628      	mov	r0, r5
   e0afc:	f7fe ffa4 	bl	dfa48 <mbedtls_ssl_send_alert_message>

    return( ret );
}
   e0b00:	4620      	mov	r0, r4
   e0b02:	b004      	add	sp, #16
   e0b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000e0b08 <_ZL11mpi_sub_hlpjPmS_>:
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
   e0b08:	2300      	movs	r3, #0

/*
 * Helper for mbedtls_mpi subtraction
 */
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
   e0b0a:	b5f0      	push	{r4, r5, r6, r7, lr}
   e0b0c:	4616      	mov	r6, r2
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
   e0b0e:	461c      	mov	r4, r3
   e0b10:	4284      	cmp	r4, r0
   e0b12:	d016      	beq.n	e0b42 <_ZL11mpi_sub_hlpjPmS_+0x3a>
    {
        z = ( *d <  c );     *d -=  c;
   e0b14:	f8d6 e000 	ldr.w	lr, [r6]
   e0b18:	ebc3 050e 	rsb	r5, r3, lr
   e0b1c:	6035      	str	r5, [r6, #0]
        c = ( *d < *s ) + z; *d -= *s;
   e0b1e:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   e0b22:	42bd      	cmp	r5, r7
   e0b24:	bf2c      	ite	cs
   e0b26:	f04f 0c00 	movcs.w	ip, #0
   e0b2a:	f04f 0c01 	movcc.w	ip, #1
   e0b2e:	1bed      	subs	r5, r5, r7
   e0b30:	4573      	cmp	r3, lr
   e0b32:	bf94      	ite	ls
   e0b34:	4663      	movls	r3, ip
   e0b36:	f10c 0301 	addhi.w	r3, ip, #1
   e0b3a:	f846 5b04 	str.w	r5, [r6], #4
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
   e0b3e:	3401      	adds	r4, #1
   e0b40:	e7e6      	b.n	e0b10 <_ZL11mpi_sub_hlpjPmS_+0x8>
   e0b42:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        z = ( *d <  c );     *d -=  c;
        c = ( *d < *s ) + z; *d -= *s;
    }

    while( c != 0 )
   e0b46:	b143      	cbz	r3, e0b5a <_ZL11mpi_sub_hlpjPmS_+0x52>
    {
        z = ( *d < c ); *d -= c;
   e0b48:	6811      	ldr	r1, [r2, #0]
   e0b4a:	1ac8      	subs	r0, r1, r3
        c = z; d++;
   e0b4c:	428b      	cmp	r3, r1
        c = ( *d < *s ) + z; *d -= *s;
    }

    while( c != 0 )
    {
        z = ( *d < c ); *d -= c;
   e0b4e:	f842 0b04 	str.w	r0, [r2], #4
        c = z; d++;
   e0b52:	bf94      	ite	ls
   e0b54:	2300      	movls	r3, #0
   e0b56:	2301      	movhi	r3, #1
    {
        z = ( *d <  c );     *d -=  c;
        c = ( *d < *s ) + z; *d -= *s;
    }

    while( c != 0 )
   e0b58:	e7f5      	b.n	e0b46 <_ZL11mpi_sub_hlpjPmS_+0x3e>
   e0b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000e0b5c <_ZL11mpi_mul_hlpjPmS_m>:
 * appears to need this to prevent bad ARM code generation at -O3.
 */
__attribute__ ((noinline))
#endif
void mpi_mul_hlp( size_t i, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d, mbedtls_mpi_uint b )
{
   e0b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   e0b5e:	4605      	mov	r5, r0
   e0b60:	4607      	mov	r7, r0
    mbedtls_mpi_uint c = 0, t = 0;
   e0b62:	2400      	movs	r4, #0
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
   e0b64:	2f0f      	cmp	r7, #15
   e0b66:	d973      	bls.n	e0c50 <_ZL11mpi_mul_hlpjPmS_m+0xf4>

        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
   e0b68:	460e      	mov	r6, r1
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
   e0b6a:	3f10      	subs	r7, #16

        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
   e0b6c:	f856 0b04 	ldr.w	r0, [r6], #4
   e0b70:	6811      	ldr	r1, [r2, #0]
   e0b72:	fbe3 1460 	umaal	r1, r4, r3, r0
   e0b76:	f842 1b04 	str.w	r1, [r2], #4
   e0b7a:	f856 0b04 	ldr.w	r0, [r6], #4
   e0b7e:	6811      	ldr	r1, [r2, #0]
   e0b80:	fbe3 1460 	umaal	r1, r4, r3, r0
   e0b84:	f842 1b04 	str.w	r1, [r2], #4
   e0b88:	f856 0b04 	ldr.w	r0, [r6], #4
   e0b8c:	6811      	ldr	r1, [r2, #0]
   e0b8e:	fbe3 1460 	umaal	r1, r4, r3, r0
   e0b92:	f842 1b04 	str.w	r1, [r2], #4
   e0b96:	f856 0b04 	ldr.w	r0, [r6], #4
   e0b9a:	6811      	ldr	r1, [r2, #0]
   e0b9c:	fbe3 1460 	umaal	r1, r4, r3, r0
   e0ba0:	f842 1b04 	str.w	r1, [r2], #4
   e0ba4:	f856 0b04 	ldr.w	r0, [r6], #4
   e0ba8:	6811      	ldr	r1, [r2, #0]
   e0baa:	fbe3 1460 	umaal	r1, r4, r3, r0
   e0bae:	f842 1b04 	str.w	r1, [r2], #4
   e0bb2:	f856 0b04 	ldr.w	r0, [r6], #4
   e0bb6:	6811      	ldr	r1, [r2, #0]
   e0bb8:	fbe3 1460 	umaal	r1, r4, r3, r0
   e0bbc:	f842 1b04 	str.w	r1, [r2], #4
   e0bc0:	f856 0b04 	ldr.w	r0, [r6], #4
   e0bc4:	6811      	ldr	r1, [r2, #0]
   e0bc6:	fbe3 1460 	umaal	r1, r4, r3, r0
   e0bca:	f842 1b04 	str.w	r1, [r2], #4
   e0bce:	f856 0b04 	ldr.w	r0, [r6], #4
   e0bd2:	6811      	ldr	r1, [r2, #0]
   e0bd4:	fbe3 1460 	umaal	r1, r4, r3, r0
   e0bd8:	f842 1b04 	str.w	r1, [r2], #4
   e0bdc:	f856 0b04 	ldr.w	r0, [r6], #4
   e0be0:	6811      	ldr	r1, [r2, #0]
   e0be2:	fbe3 1460 	umaal	r1, r4, r3, r0
   e0be6:	f842 1b04 	str.w	r1, [r2], #4
   e0bea:	f856 0b04 	ldr.w	r0, [r6], #4
   e0bee:	6811      	ldr	r1, [r2, #0]
   e0bf0:	fbe3 1460 	umaal	r1, r4, r3, r0
   e0bf4:	f842 1b04 	str.w	r1, [r2], #4
   e0bf8:	f856 0b04 	ldr.w	r0, [r6], #4
   e0bfc:	6811      	ldr	r1, [r2, #0]
   e0bfe:	fbe3 1460 	umaal	r1, r4, r3, r0
   e0c02:	f842 1b04 	str.w	r1, [r2], #4
   e0c06:	f856 0b04 	ldr.w	r0, [r6], #4
   e0c0a:	6811      	ldr	r1, [r2, #0]
   e0c0c:	fbe3 1460 	umaal	r1, r4, r3, r0
   e0c10:	f842 1b04 	str.w	r1, [r2], #4
   e0c14:	f856 0b04 	ldr.w	r0, [r6], #4
   e0c18:	6811      	ldr	r1, [r2, #0]
   e0c1a:	fbe3 1460 	umaal	r1, r4, r3, r0
   e0c1e:	f842 1b04 	str.w	r1, [r2], #4
   e0c22:	f856 0b04 	ldr.w	r0, [r6], #4
   e0c26:	6811      	ldr	r1, [r2, #0]
   e0c28:	fbe3 1460 	umaal	r1, r4, r3, r0
   e0c2c:	f842 1b04 	str.w	r1, [r2], #4
   e0c30:	f856 0b04 	ldr.w	r0, [r6], #4
   e0c34:	6811      	ldr	r1, [r2, #0]
   e0c36:	fbe3 1460 	umaal	r1, r4, r3, r0
   e0c3a:	f842 1b04 	str.w	r1, [r2], #4
   e0c3e:	f856 0b04 	ldr.w	r0, [r6], #4
   e0c42:	6811      	ldr	r1, [r2, #0]
   e0c44:	fbe3 1460 	umaal	r1, r4, r3, r0
   e0c48:	f842 1b04 	str.w	r1, [r2], #4
   e0c4c:	4631      	mov	r1, r6
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
   e0c4e:	e789      	b.n	e0b64 <_ZL11mpi_mul_hlpjPmS_m+0x8>
   e0c50:	f005 050f 	and.w	r5, r5, #15
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i >= 8; i -= 8 )
   e0c54:	2d07      	cmp	r5, #7
   e0c56:	d939      	bls.n	e0ccc <_ZL11mpi_mul_hlpjPmS_m+0x170>
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE

        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
   e0c58:	460e      	mov	r6, r1
   e0c5a:	f856 0b04 	ldr.w	r0, [r6], #4
   e0c5e:	6811      	ldr	r1, [r2, #0]
   e0c60:	fbe3 1460 	umaal	r1, r4, r3, r0
   e0c64:	f842 1b04 	str.w	r1, [r2], #4
   e0c68:	f856 0b04 	ldr.w	r0, [r6], #4
   e0c6c:	6811      	ldr	r1, [r2, #0]
   e0c6e:	fbe3 1460 	umaal	r1, r4, r3, r0
   e0c72:	f842 1b04 	str.w	r1, [r2], #4
   e0c76:	f856 0b04 	ldr.w	r0, [r6], #4
   e0c7a:	6811      	ldr	r1, [r2, #0]
   e0c7c:	fbe3 1460 	umaal	r1, r4, r3, r0
   e0c80:	f842 1b04 	str.w	r1, [r2], #4
   e0c84:	f856 0b04 	ldr.w	r0, [r6], #4
   e0c88:	6811      	ldr	r1, [r2, #0]
   e0c8a:	fbe3 1460 	umaal	r1, r4, r3, r0
   e0c8e:	f842 1b04 	str.w	r1, [r2], #4
   e0c92:	f856 0b04 	ldr.w	r0, [r6], #4
   e0c96:	6811      	ldr	r1, [r2, #0]
   e0c98:	fbe3 1460 	umaal	r1, r4, r3, r0
   e0c9c:	f842 1b04 	str.w	r1, [r2], #4
   e0ca0:	f856 0b04 	ldr.w	r0, [r6], #4
   e0ca4:	6811      	ldr	r1, [r2, #0]
   e0ca6:	fbe3 1460 	umaal	r1, r4, r3, r0
   e0caa:	f842 1b04 	str.w	r1, [r2], #4
   e0cae:	f856 0b04 	ldr.w	r0, [r6], #4
   e0cb2:	6811      	ldr	r1, [r2, #0]
   e0cb4:	fbe3 1460 	umaal	r1, r4, r3, r0
   e0cb8:	f842 1b04 	str.w	r1, [r2], #4
   e0cbc:	f856 0b04 	ldr.w	r0, [r6], #4
   e0cc0:	6811      	ldr	r1, [r2, #0]
   e0cc2:	fbe3 1460 	umaal	r1, r4, r3, r0
   e0cc6:	f842 1b04 	str.w	r1, [r2], #4
   e0cca:	4631      	mov	r1, r6
   e0ccc:	f005 0507 	and.w	r5, r5, #7
    }

    for( ; i > 0; i-- )
   e0cd0:	b155      	cbz	r5, e0ce8 <_ZL11mpi_mul_hlpjPmS_m+0x18c>
    {
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
   e0cd2:	460e      	mov	r6, r1
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i > 0; i-- )
   e0cd4:	3d01      	subs	r5, #1
    {
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
   e0cd6:	f856 0b04 	ldr.w	r0, [r6], #4
   e0cda:	6811      	ldr	r1, [r2, #0]
   e0cdc:	fbe3 1460 	umaal	r1, r4, r3, r0
   e0ce0:	f842 1b04 	str.w	r1, [r2], #4
   e0ce4:	4631      	mov	r1, r6
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i > 0; i-- )
   e0ce6:	e7f3      	b.n	e0cd0 <_ZL11mpi_mul_hlpjPmS_m+0x174>
#endif /* MULADDC_HUIT */

    t++;

    do {
        *d += c; c = ( *d < c ); d++;
   e0ce8:	6813      	ldr	r3, [r2, #0]
   e0cea:	4423      	add	r3, r4
   e0cec:	429c      	cmp	r4, r3
   e0cee:	f842 3b04 	str.w	r3, [r2], #4
   e0cf2:	bf8c      	ite	hi
   e0cf4:	2401      	movhi	r4, #1
   e0cf6:	2400      	movls	r4, #0
    }
    while( c != 0 );
   e0cf8:	d8f6      	bhi.n	e0ce8 <_ZL11mpi_mul_hlpjPmS_m+0x18c>
}
   e0cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000e0cfc <_ZL21mpi_bigendian_to_hostPmj.part.1>:
     * For that, simultaneously traverse the limbs from left to right
     * and from right to left, as long as the left index is not bigger
     * than the right index (it's not a problem if limbs is odd and the
     * indices coincide in the last iteration).
     */
    for( cur_limb_left = p, cur_limb_right = p + ( limbs - 1 );
   e0cfc:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   e0d00:	3901      	subs	r1, #1
   e0d02:	eb00 0181 	add.w	r1, r0, r1, lsl #2
         cur_limb_left <= cur_limb_right;
   e0d06:	4288      	cmp	r0, r1
   e0d08:	d808      	bhi.n	e0d1c <_ZL21mpi_bigendian_to_hostPmj.part.1+0x20>
#if defined(have_bswap)
    /* The compiler is hopefully able to statically evaluate this! */
    switch( sizeof(mbedtls_mpi_uint) )
    {
        case 4:
            return( __builtin_bswap32(x) );
   e0d0a:	6803      	ldr	r3, [r0, #0]
   e0d0c:	680a      	ldr	r2, [r1, #0]
   e0d0e:	ba1b      	rev	r3, r3
   e0d10:	ba12      	rev	r2, r2
    {
        mbedtls_mpi_uint tmp;
        /* Note that if cur_limb_left == cur_limb_right,
         * this code effectively swaps the bytes only once. */
        tmp             = mpi_uint_bigendian_to_host( *cur_limb_left  );
        *cur_limb_left  = mpi_uint_bigendian_to_host( *cur_limb_right );
   e0d12:	f840 2b04 	str.w	r2, [r0], #4
        *cur_limb_right = tmp;
   e0d16:	f841 3904 	str.w	r3, [r1], #-4
   e0d1a:	e7f4      	b.n	e0d06 <_ZL21mpi_bigendian_to_hostPmj.part.1+0xa>
   e0d1c:	4770      	bx	lr

000e0d1e <mbedtls_mpi_init>:
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   e0d1e:	2301      	movs	r3, #1
   e0d20:	6003      	str	r3, [r0, #0]
    X->n = 0;
   e0d22:	2300      	movs	r3, #0
   e0d24:	6043      	str	r3, [r0, #4]
    X->p = NULL;
   e0d26:	6083      	str	r3, [r0, #8]
   e0d28:	4770      	bx	lr

000e0d2a <mbedtls_mpi_free>:

/*
 * Unallocate one MPI
 */
void mbedtls_mpi_free( mbedtls_mpi *X )
{
   e0d2a:	b510      	push	{r4, lr}
    if( X == NULL )
   e0d2c:	4604      	mov	r4, r0
   e0d2e:	b168      	cbz	r0, e0d4c <mbedtls_mpi_free+0x22>
        return;

    if( X->p != NULL )
   e0d30:	6880      	ldr	r0, [r0, #8]
   e0d32:	b130      	cbz	r0, e0d42 <mbedtls_mpi_free+0x18>
#define CHARS_TO_LIMBS(i) ( (i) / ciL + ( (i) % ciL != 0 ) )

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_mpi_zeroize( mbedtls_mpi_uint *v, size_t n )
{
    mbedtls_platform_zeroize( v, ciL * n );
   e0d34:	6861      	ldr	r1, [r4, #4]
   e0d36:	0089      	lsls	r1, r1, #2
   e0d38:	f7fa fa60 	bl	db1fc <mbedtls_platform_zeroize>
        return;

    if( X->p != NULL )
    {
        mbedtls_mpi_zeroize( X->p, X->n );
        mbedtls_free( X->p );
   e0d3c:	68a0      	ldr	r0, [r4, #8]
   e0d3e:	f005 f9c1 	bl	e60c4 <free>
    }

    X->s = 1;
   e0d42:	2301      	movs	r3, #1
   e0d44:	6023      	str	r3, [r4, #0]
    X->n = 0;
   e0d46:	2300      	movs	r3, #0
   e0d48:	6063      	str	r3, [r4, #4]
    X->p = NULL;
   e0d4a:	60a3      	str	r3, [r4, #8]
   e0d4c:	bd10      	pop	{r4, pc}

000e0d4e <mbedtls_mpi_grow>:
int mbedtls_mpi_grow( mbedtls_mpi *X, size_t nblimbs )
{
    mbedtls_mpi_uint *p;
    MPI_VALIDATE_RET( X != NULL );

    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
   e0d4e:	f242 7310 	movw	r3, #10000	; 0x2710
   e0d52:	4299      	cmp	r1, r3

/*
 * Enlarge to the specified number of limbs
 */
int mbedtls_mpi_grow( mbedtls_mpi *X, size_t nblimbs )
{
   e0d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e0d58:	4604      	mov	r4, r0
   e0d5a:	460e      	mov	r6, r1
    mbedtls_mpi_uint *p;
    MPI_VALIDATE_RET( X != NULL );

    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
   e0d5c:	d903      	bls.n	e0d66 <mbedtls_mpi_grow+0x18>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
   e0d5e:	f06f 000f 	mvn.w	r0, #15
   e0d62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

    if( X->n < nblimbs )
   e0d66:	6845      	ldr	r5, [r0, #4]
   e0d68:	42a9      	cmp	r1, r5
   e0d6a:	d917      	bls.n	e0d9c <mbedtls_mpi_grow+0x4e>
    {
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
   e0d6c:	2104      	movs	r1, #4
   e0d6e:	4630      	mov	r0, r6
   e0d70:	f008 fd80 	bl	e9874 <calloc>
   e0d74:	4680      	mov	r8, r0
   e0d76:	2800      	cmp	r0, #0
   e0d78:	d0f1      	beq.n	e0d5e <mbedtls_mpi_grow+0x10>
            return( MBEDTLS_ERR_MPI_ALLOC_FAILED );

        if( X->p != NULL )
   e0d7a:	68a7      	ldr	r7, [r4, #8]
   e0d7c:	b15f      	cbz	r7, e0d96 <mbedtls_mpi_grow+0x48>
        {
            memcpy( p, X->p, X->n * ciL );
   e0d7e:	00ad      	lsls	r5, r5, #2
   e0d80:	462a      	mov	r2, r5
   e0d82:	4639      	mov	r1, r7
   e0d84:	f008 fe97 	bl	e9ab6 <memcpy>
#define CHARS_TO_LIMBS(i) ( (i) / ciL + ( (i) % ciL != 0 ) )

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_mpi_zeroize( mbedtls_mpi_uint *v, size_t n )
{
    mbedtls_platform_zeroize( v, ciL * n );
   e0d88:	4638      	mov	r0, r7
   e0d8a:	4629      	mov	r1, r5
   e0d8c:	f7fa fa36 	bl	db1fc <mbedtls_platform_zeroize>

        if( X->p != NULL )
        {
            memcpy( p, X->p, X->n * ciL );
            mbedtls_mpi_zeroize( X->p, X->n );
            mbedtls_free( X->p );
   e0d90:	68a0      	ldr	r0, [r4, #8]
   e0d92:	f005 f997 	bl	e60c4 <free>
        }

        X->n = nblimbs;
   e0d96:	6066      	str	r6, [r4, #4]
        X->p = p;
   e0d98:	f8c4 8008 	str.w	r8, [r4, #8]
    }

    return( 0 );
   e0d9c:	2000      	movs	r0, #0
}
   e0d9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000e0da2 <mbedtls_mpi_shrink>:
{
    mbedtls_mpi_uint *p;
    size_t i;
    MPI_VALIDATE_RET( X != NULL );

    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
   e0da2:	f242 7310 	movw	r3, #10000	; 0x2710
   e0da6:	4299      	cmp	r1, r3
/*
 * Resize down as much as possible,
 * while keeping at least the specified number of limbs
 */
int mbedtls_mpi_shrink( mbedtls_mpi *X, size_t nblimbs )
{
   e0da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e0dac:	4606      	mov	r6, r0
   e0dae:	460c      	mov	r4, r1
    mbedtls_mpi_uint *p;
    size_t i;
    MPI_VALIDATE_RET( X != NULL );

    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
   e0db0:	d903      	bls.n	e0dba <mbedtls_mpi_shrink+0x18>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
   e0db2:	f06f 000f 	mvn.w	r0, #15
   e0db6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

    /* Actually resize up in this case */
    if( X->n <= nblimbs )
   e0dba:	6843      	ldr	r3, [r0, #4]
   e0dbc:	4299      	cmp	r1, r3
   e0dbe:	d303      	bcc.n	e0dc8 <mbedtls_mpi_shrink+0x26>

    X->n = i;
    X->p = p;

    return( 0 );
}
   e0dc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );

    /* Actually resize up in this case */
    if( X->n <= nblimbs )
        return( mbedtls_mpi_grow( X, nblimbs ) );
   e0dc4:	f7ff bfc3 	b.w	e0d4e <mbedtls_mpi_grow>

    for( i = X->n - 1; i > 0; i-- )
   e0dc8:	1e59      	subs	r1, r3, #1
   e0dca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   e0dce:	3b01      	subs	r3, #1
   e0dd0:	009d      	lsls	r5, r3, #2
   e0dd2:	462b      	mov	r3, r5
   e0dd4:	b129      	cbz	r1, e0de2 <mbedtls_mpi_shrink+0x40>
        if( X->p[i] != 0 )
   e0dd6:	68b2      	ldr	r2, [r6, #8]
   e0dd8:	58d2      	ldr	r2, [r2, r3]
   e0dda:	3b04      	subs	r3, #4
   e0ddc:	b90a      	cbnz	r2, e0de2 <mbedtls_mpi_shrink+0x40>

    /* Actually resize up in this case */
    if( X->n <= nblimbs )
        return( mbedtls_mpi_grow( X, nblimbs ) );

    for( i = X->n - 1; i > 0; i-- )
   e0dde:	3901      	subs	r1, #1
   e0de0:	e7f8      	b.n	e0dd4 <mbedtls_mpi_shrink+0x32>
        if( X->p[i] != 0 )
            break;
    i++;
   e0de2:	3101      	adds	r1, #1
   e0de4:	428c      	cmp	r4, r1
   e0de6:	bf38      	it	cc
   e0de8:	460c      	movcc	r4, r1

    if( i < nblimbs )
        i = nblimbs;

    if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( i, ciL ) ) == NULL )
   e0dea:	4620      	mov	r0, r4
   e0dec:	2104      	movs	r1, #4
   e0dee:	f008 fd41 	bl	e9874 <calloc>
   e0df2:	4680      	mov	r8, r0
   e0df4:	2800      	cmp	r0, #0
   e0df6:	d0dc      	beq.n	e0db2 <mbedtls_mpi_shrink+0x10>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );

    if( X->p != NULL )
   e0df8:	68b7      	ldr	r7, [r6, #8]
   e0dfa:	b157      	cbz	r7, e0e12 <mbedtls_mpi_shrink+0x70>
    {
        memcpy( p, X->p, i * ciL );
   e0dfc:	00a2      	lsls	r2, r4, #2
   e0dfe:	4639      	mov	r1, r7
   e0e00:	f008 fe59 	bl	e9ab6 <memcpy>
#define CHARS_TO_LIMBS(i) ( (i) / ciL + ( (i) % ciL != 0 ) )

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_mpi_zeroize( mbedtls_mpi_uint *v, size_t n )
{
    mbedtls_platform_zeroize( v, ciL * n );
   e0e04:	4638      	mov	r0, r7
   e0e06:	1d29      	adds	r1, r5, #4
   e0e08:	f7fa f9f8 	bl	db1fc <mbedtls_platform_zeroize>

    if( X->p != NULL )
    {
        memcpy( p, X->p, i * ciL );
        mbedtls_mpi_zeroize( X->p, X->n );
        mbedtls_free( X->p );
   e0e0c:	68b0      	ldr	r0, [r6, #8]
   e0e0e:	f005 f959 	bl	e60c4 <free>
    }

    X->n = i;
   e0e12:	6074      	str	r4, [r6, #4]
    X->p = p;
   e0e14:	f8c6 8008 	str.w	r8, [r6, #8]

    return( 0 );
   e0e18:	2000      	movs	r0, #0
}
   e0e1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000e0e1e <mbedtls_mpi_copy>:
    int ret = 0;
    size_t i;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    if( X == Y )
   e0e1e:	4288      	cmp	r0, r1

/*
 * Copy the contents of Y into X
 */
int mbedtls_mpi_copy( mbedtls_mpi *X, const mbedtls_mpi *Y )
{
   e0e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e0e22:	4606      	mov	r6, r0
   e0e24:	460f      	mov	r7, r1
    int ret = 0;
    size_t i;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    if( X == Y )
   e0e26:	d024      	beq.n	e0e72 <mbedtls_mpi_copy+0x54>
        return( 0 );

    if( Y->p == NULL )
   e0e28:	688d      	ldr	r5, [r1, #8]
   e0e2a:	b915      	cbnz	r5, e0e32 <mbedtls_mpi_copy+0x14>
    {
        mbedtls_mpi_free( X );
   e0e2c:	f7ff ff7d 	bl	e0d2a <mbedtls_mpi_free>
   e0e30:	e01f      	b.n	e0e72 <mbedtls_mpi_copy+0x54>
        return( 0 );
    }

    for( i = Y->n - 1; i > 0; i-- )
   e0e32:	684c      	ldr	r4, [r1, #4]
   e0e34:	3c01      	subs	r4, #1
   e0e36:	b11c      	cbz	r4, e0e40 <mbedtls_mpi_copy+0x22>
        if( Y->p[i] != 0 )
   e0e38:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   e0e3c:	2b00      	cmp	r3, #0
   e0e3e:	d0f9      	beq.n	e0e34 <mbedtls_mpi_copy+0x16>
            break;
    i++;

    X->s = Y->s;

    if( X->n < i )
   e0e40:	6872      	ldr	r2, [r6, #4]
    for( i = Y->n - 1; i > 0; i-- )
        if( Y->p[i] != 0 )
            break;
    i++;

    X->s = Y->s;
   e0e42:	683b      	ldr	r3, [r7, #0]
   e0e44:	6033      	str	r3, [r6, #0]
    }

    for( i = Y->n - 1; i > 0; i-- )
        if( Y->p[i] != 0 )
            break;
    i++;
   e0e46:	3401      	adds	r4, #1

    X->s = Y->s;

    if( X->n < i )
   e0e48:	4294      	cmp	r4, r2
   e0e4a:	d905      	bls.n	e0e58 <mbedtls_mpi_copy+0x3a>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i ) );
   e0e4c:	4621      	mov	r1, r4
   e0e4e:	4630      	mov	r0, r6
   e0e50:	f7ff ff7d 	bl	e0d4e <mbedtls_mpi_grow>
   e0e54:	b140      	cbz	r0, e0e68 <mbedtls_mpi_copy+0x4a>
   e0e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    else
    {
        memset( X->p + i, 0, ( X->n - i ) * ciL );
   e0e58:	68b0      	ldr	r0, [r6, #8]
   e0e5a:	1b12      	subs	r2, r2, r4
   e0e5c:	0092      	lsls	r2, r2, #2
   e0e5e:	2100      	movs	r1, #0
   e0e60:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   e0e64:	f008 fe4d 	bl	e9b02 <memset>
    }

    memcpy( X->p, Y->p, i * ciL );
   e0e68:	00a2      	lsls	r2, r4, #2
   e0e6a:	68b9      	ldr	r1, [r7, #8]
   e0e6c:	68b0      	ldr	r0, [r6, #8]
   e0e6e:	f008 fe22 	bl	e9ab6 <memcpy>
    size_t i;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    if( X == Y )
        return( 0 );
   e0e72:	2000      	movs	r0, #0
    memcpy( X->p, Y->p, i * ciL );

cleanup:

    return( ret );
}
   e0e74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000e0e76 <mbedtls_mpi_safe_cond_assign>:
 * Conditionally assign X = Y, without leaking information
 * about whether the assignment was made or not.
 * (Leaking information about the respective sizes of X and Y is ok however.)
 */
int mbedtls_mpi_safe_cond_assign( mbedtls_mpi *X, const mbedtls_mpi *Y, unsigned char assign )
{
   e0e76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e0e78:	460d      	mov	r5, r1
    MPI_VALIDATE_RET( Y != NULL );

    /* make sure assign is 0 or 1 in a time-constant manner */
    assign = (assign | (unsigned char)-assign) >> 7;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
   e0e7a:	6849      	ldr	r1, [r1, #4]
 * Conditionally assign X = Y, without leaking information
 * about whether the assignment was made or not.
 * (Leaking information about the respective sizes of X and Y is ok however.)
 */
int mbedtls_mpi_safe_cond_assign( mbedtls_mpi *X, const mbedtls_mpi *Y, unsigned char assign )
{
   e0e7c:	4604      	mov	r4, r0
   e0e7e:	4616      	mov	r6, r2
    MPI_VALIDATE_RET( Y != NULL );

    /* make sure assign is 0 or 1 in a time-constant manner */
    assign = (assign | (unsigned char)-assign) >> 7;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
   e0e80:	f7ff ff65 	bl	e0d4e <mbedtls_mpi_grow>
   e0e84:	bb58      	cbnz	r0, e0ede <mbedtls_mpi_safe_cond_assign+0x68>
    size_t i;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    /* make sure assign is 0 or 1 in a time-constant manner */
    assign = (assign | (unsigned char)-assign) >> 7;
   e0e86:	4273      	negs	r3, r6
   e0e88:	ea46 0203 	orr.w	r2, r6, r3

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );

    X->s = X->s * ( 1 - assign ) + Y->s * assign;
   e0e8c:	6829      	ldr	r1, [r5, #0]
   e0e8e:	6823      	ldr	r3, [r4, #0]
    size_t i;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    /* make sure assign is 0 or 1 in a time-constant manner */
    assign = (assign | (unsigned char)-assign) >> 7;
   e0e90:	f3c2 12c0 	ubfx	r2, r2, #7, #1

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );

    X->s = X->s * ( 1 - assign ) + Y->s * assign;
   e0e94:	f1c2 0601 	rsb	r6, r2, #1
   e0e98:	4351      	muls	r1, r2
   e0e9a:	fb03 1306 	mla	r3, r3, r6, r1
   e0e9e:	6023      	str	r3, [r4, #0]

    for( i = 0; i < Y->n; i++ )
   e0ea0:	4603      	mov	r3, r0
   e0ea2:	6869      	ldr	r1, [r5, #4]
   e0ea4:	428b      	cmp	r3, r1
   e0ea6:	ea4f 0183 	mov.w	r1, r3, lsl #2
   e0eaa:	d20d      	bcs.n	e0ec8 <mbedtls_mpi_safe_cond_assign+0x52>
        X->p[i] = X->p[i] * ( 1 - assign ) + Y->p[i] * assign;
   e0eac:	68a9      	ldr	r1, [r5, #8]
   e0eae:	f8d4 e008 	ldr.w	lr, [r4, #8]
   e0eb2:	f851 7023 	ldr.w	r7, [r1, r3, lsl #2]
   e0eb6:	f85e 1023 	ldr.w	r1, [lr, r3, lsl #2]
   e0eba:	4371      	muls	r1, r6
   e0ebc:	fb07 1102 	mla	r1, r7, r2, r1
   e0ec0:	f84e 1023 	str.w	r1, [lr, r3, lsl #2]

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );

    X->s = X->s * ( 1 - assign ) + Y->s * assign;

    for( i = 0; i < Y->n; i++ )
   e0ec4:	3301      	adds	r3, #1
   e0ec6:	e7ec      	b.n	e0ea2 <mbedtls_mpi_safe_cond_assign+0x2c>
   e0ec8:	460a      	mov	r2, r1
        X->p[i] = X->p[i] * ( 1 - assign ) + Y->p[i] * assign;

    for( ; i < X->n; i++ )
   e0eca:	6861      	ldr	r1, [r4, #4]
   e0ecc:	428b      	cmp	r3, r1
   e0ece:	d206      	bcs.n	e0ede <mbedtls_mpi_safe_cond_assign+0x68>
        X->p[i] *= ( 1 - assign );
   e0ed0:	68a5      	ldr	r5, [r4, #8]
   e0ed2:	58a9      	ldr	r1, [r5, r2]
   e0ed4:	4371      	muls	r1, r6
   e0ed6:	50a9      	str	r1, [r5, r2]
    X->s = X->s * ( 1 - assign ) + Y->s * assign;

    for( i = 0; i < Y->n; i++ )
        X->p[i] = X->p[i] * ( 1 - assign ) + Y->p[i] * assign;

    for( ; i < X->n; i++ )
   e0ed8:	3301      	adds	r3, #1
   e0eda:	3204      	adds	r2, #4
   e0edc:	e7f5      	b.n	e0eca <mbedtls_mpi_safe_cond_assign+0x54>
        X->p[i] *= ( 1 - assign );

cleanup:
    return( ret );
}
   e0ede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000e0ee0 <mbedtls_mpi_lset>:

/*
 * Set value from integer
 */
int mbedtls_mpi_lset( mbedtls_mpi *X, mbedtls_mpi_sint z )
{
   e0ee0:	b570      	push	{r4, r5, r6, lr}
   e0ee2:	460e      	mov	r6, r1
    int ret;
    MPI_VALIDATE_RET( X != NULL );

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
   e0ee4:	2101      	movs	r1, #1

/*
 * Set value from integer
 */
int mbedtls_mpi_lset( mbedtls_mpi *X, mbedtls_mpi_sint z )
{
   e0ee6:	4604      	mov	r4, r0
    int ret;
    MPI_VALIDATE_RET( X != NULL );

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
   e0ee8:	f7ff ff31 	bl	e0d4e <mbedtls_mpi_grow>
   e0eec:	4605      	mov	r5, r0
   e0eee:	b988      	cbnz	r0, e0f14 <mbedtls_mpi_lset+0x34>
    memset( X->p, 0, X->n * ciL );
   e0ef0:	6862      	ldr	r2, [r4, #4]
   e0ef2:	4601      	mov	r1, r0
   e0ef4:	0092      	lsls	r2, r2, #2
   e0ef6:	68a0      	ldr	r0, [r4, #8]
   e0ef8:	f008 fe03 	bl	e9b02 <memset>

    X->p[0] = ( z < 0 ) ? -z : z;
   e0efc:	68a3      	ldr	r3, [r4, #8]
   e0efe:	ea86 72e6 	eor.w	r2, r6, r6, asr #31
    X->s    = ( z < 0 ) ? -1 : 1;
   e0f02:	2e00      	cmp	r6, #0
    MPI_VALIDATE_RET( X != NULL );

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
    memset( X->p, 0, X->n * ciL );

    X->p[0] = ( z < 0 ) ? -z : z;
   e0f04:	eba2 72e6 	sub.w	r2, r2, r6, asr #31
   e0f08:	601a      	str	r2, [r3, #0]
    X->s    = ( z < 0 ) ? -1 : 1;
   e0f0a:	bfb4      	ite	lt
   e0f0c:	f04f 33ff 	movlt.w	r3, #4294967295
   e0f10:	2301      	movge	r3, #1
   e0f12:	6023      	str	r3, [r4, #0]

cleanup:

    return( ret );
}
   e0f14:	4628      	mov	r0, r5
   e0f16:	bd70      	pop	{r4, r5, r6, pc}

000e0f18 <mbedtls_mpi_get_bit>:
 */
int mbedtls_mpi_get_bit( const mbedtls_mpi *X, size_t pos )
{
    MPI_VALIDATE_RET( X != NULL );

    if( X->n * biL <= pos )
   e0f18:	6843      	ldr	r3, [r0, #4]
   e0f1a:	ebb1 1f43 	cmp.w	r1, r3, lsl #5
        return( 0 );

    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
   e0f1e:	bf3f      	itttt	cc
   e0f20:	6883      	ldrcc	r3, [r0, #8]
   e0f22:	094a      	lsrcc	r2, r1, #5
   e0f24:	f001 001f 	andcc.w	r0, r1, #31
   e0f28:	f853 3022 	ldrcc.w	r3, [r3, r2, lsl #2]
   e0f2c:	bf3a      	itte	cc
   e0f2e:	fa23 f000 	lsrcc.w	r0, r3, r0
   e0f32:	f000 0001 	andcc.w	r0, r0, #1
int mbedtls_mpi_get_bit( const mbedtls_mpi *X, size_t pos )
{
    MPI_VALIDATE_RET( X != NULL );

    if( X->n * biL <= pos )
        return( 0 );
   e0f36:	2000      	movcs	r0, #0

    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
}
   e0f38:	4770      	bx	lr

000e0f3a <mbedtls_mpi_lsb>:

/*
 * Return the number of less significant zero-bits
 */
size_t mbedtls_mpi_lsb( const mbedtls_mpi *X )
{
   e0f3a:	b570      	push	{r4, r5, r6, lr}
    size_t i, j, count = 0;
   e0f3c:	2300      	movs	r3, #0
    MBEDTLS_INTERNAL_VALIDATE_RET( X != NULL, 0 );

    for( i = 0; i < X->n; i++ )
   e0f3e:	6844      	ldr	r4, [r0, #4]
   e0f40:	461a      	mov	r2, r3
   e0f42:	42a2      	cmp	r2, r4
   e0f44:	d00e      	beq.n	e0f64 <mbedtls_mpi_lsb+0x2a>
        for( j = 0; j < biL; j++, count++ )
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
   e0f46:	6881      	ldr	r1, [r0, #8]
   e0f48:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   e0f4c:	2100      	movs	r1, #0
   e0f4e:	fa25 f601 	lsr.w	r6, r5, r1
   e0f52:	07f6      	lsls	r6, r6, #31
   e0f54:	d408      	bmi.n	e0f68 <mbedtls_mpi_lsb+0x2e>
{
    size_t i, j, count = 0;
    MBEDTLS_INTERNAL_VALIDATE_RET( X != NULL, 0 );

    for( i = 0; i < X->n; i++ )
        for( j = 0; j < biL; j++, count++ )
   e0f56:	3101      	adds	r1, #1
   e0f58:	2920      	cmp	r1, #32
   e0f5a:	f103 0301 	add.w	r3, r3, #1
   e0f5e:	d1f6      	bne.n	e0f4e <mbedtls_mpi_lsb+0x14>
size_t mbedtls_mpi_lsb( const mbedtls_mpi *X )
{
    size_t i, j, count = 0;
    MBEDTLS_INTERNAL_VALIDATE_RET( X != NULL, 0 );

    for( i = 0; i < X->n; i++ )
   e0f60:	3201      	adds	r2, #1
   e0f62:	e7ee      	b.n	e0f42 <mbedtls_mpi_lsb+0x8>
        for( j = 0; j < biL; j++, count++ )
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
                return( count );

    return( 0 );
   e0f64:	2000      	movs	r0, #0
   e0f66:	bd70      	pop	{r4, r5, r6, pc}
   e0f68:	4618      	mov	r0, r3
}
   e0f6a:	bd70      	pop	{r4, r5, r6, pc}

000e0f6c <mbedtls_mpi_bitlen>:

/*
 * Return the number of bits
 */
size_t mbedtls_mpi_bitlen( const mbedtls_mpi *X )
{
   e0f6c:	b510      	push	{r4, lr}
    size_t i, j;

    if( X->n == 0 )
   e0f6e:	6843      	ldr	r3, [r0, #4]
   e0f70:	b1d3      	cbz	r3, e0fa8 <mbedtls_mpi_bitlen+0x3c>
   e0f72:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   e0f76:	3a01      	subs	r2, #1
        return( 0 );

    for( i = X->n - 1; i > 0; i-- )
   e0f78:	1e59      	subs	r1, r3, #1
   e0f7a:	0092      	lsls	r2, r2, #2
   e0f7c:	6883      	ldr	r3, [r0, #8]
   e0f7e:	b121      	cbz	r1, e0f8a <mbedtls_mpi_bitlen+0x1e>
        if( X->p[i] != 0 )
   e0f80:	589c      	ldr	r4, [r3, r2]
   e0f82:	3a04      	subs	r2, #4
   e0f84:	b90c      	cbnz	r4, e0f8a <mbedtls_mpi_bitlen+0x1e>
    size_t i, j;

    if( X->n == 0 )
        return( 0 );

    for( i = X->n - 1; i > 0; i-- )
   e0f86:	3901      	subs	r1, #1
   e0f88:	e7f8      	b.n	e0f7c <mbedtls_mpi_bitlen+0x10>
        if( X->p[i] != 0 )
            break;

    j = biL - mbedtls_clz( X->p[i] );
   e0f8a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 * Count leading zero bits in a given integer
 */
static size_t mbedtls_clz( const mbedtls_mpi_uint x )
{
    size_t j;
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);
   e0f8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000

    for( j = 0; j < biL; j++ )
   e0f92:	2300      	movs	r3, #0
    {
        if( x & mask ) break;
   e0f94:	4210      	tst	r0, r2
   e0f96:	d104      	bne.n	e0fa2 <mbedtls_mpi_bitlen+0x36>
static size_t mbedtls_clz( const mbedtls_mpi_uint x )
{
    size_t j;
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);

    for( j = 0; j < biL; j++ )
   e0f98:	3301      	adds	r3, #1
   e0f9a:	2b20      	cmp	r3, #32
    {
        if( x & mask ) break;

        mask >>= 1;
   e0f9c:	ea4f 0252 	mov.w	r2, r2, lsr #1
static size_t mbedtls_clz( const mbedtls_mpi_uint x )
{
    size_t j;
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);

    for( j = 0; j < biL; j++ )
   e0fa0:	d1f8      	bne.n	e0f94 <mbedtls_mpi_bitlen+0x28>
        if( X->p[i] != 0 )
            break;

    j = biL - mbedtls_clz( X->p[i] );

    return( ( i * biL ) + j );
   e0fa2:	ebc3 1341 	rsb	r3, r3, r1, lsl #5
   e0fa6:	3320      	adds	r3, #32
}
   e0fa8:	4618      	mov	r0, r3
   e0faa:	bd10      	pop	{r4, pc}

000e0fac <mbedtls_mpi_size>:

/*
 * Return the total size in bytes
 */
size_t mbedtls_mpi_size( const mbedtls_mpi *X )
{
   e0fac:	b508      	push	{r3, lr}
    return( ( mbedtls_mpi_bitlen( X ) + 7 ) >> 3 );
   e0fae:	f7ff ffdd 	bl	e0f6c <mbedtls_mpi_bitlen>
   e0fb2:	3007      	adds	r0, #7
}
   e0fb4:	08c0      	lsrs	r0, r0, #3
   e0fb6:	bd08      	pop	{r3, pc}

000e0fb8 <mbedtls_mpi_read_binary>:

/*
 * Import X from unsigned binary data, big endian
 */
int mbedtls_mpi_read_binary( mbedtls_mpi *X, const unsigned char *buf, size_t buflen )
{
   e0fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    int ret;
    size_t const limbs    = CHARS_TO_LIMBS( buflen );
   e0fbc:	f012 0403 	ands.w	r4, r2, #3
   e0fc0:	bf18      	it	ne
   e0fc2:	2401      	movne	r4, #1

    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( buflen == 0 || buf != NULL );

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
   e0fc4:	6843      	ldr	r3, [r0, #4]
 * Import X from unsigned binary data, big endian
 */
int mbedtls_mpi_read_binary( mbedtls_mpi *X, const unsigned char *buf, size_t buflen )
{
    int ret;
    size_t const limbs    = CHARS_TO_LIMBS( buflen );
   e0fc6:	eb04 0492 	add.w	r4, r4, r2, lsr #2

    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( buflen == 0 || buf != NULL );

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
   e0fca:	429c      	cmp	r4, r3

/*
 * Import X from unsigned binary data, big endian
 */
int mbedtls_mpi_read_binary( mbedtls_mpi *X, const unsigned char *buf, size_t buflen )
{
   e0fcc:	4607      	mov	r7, r0
   e0fce:	4688      	mov	r8, r1
   e0fd0:	4615      	mov	r5, r2

    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( buflen == 0 || buf != NULL );

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
   e0fd2:	d106      	bne.n	e0fe2 <mbedtls_mpi_read_binary+0x2a>
    {
        mbedtls_mpi_free( X );
        mbedtls_mpi_init( X );
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
   e0fd4:	2100      	movs	r1, #0
   e0fd6:	4638      	mov	r0, r7
   e0fd8:	f7ff ff82 	bl	e0ee0 <mbedtls_mpi_lset>
   e0fdc:	4606      	mov	r6, r0
   e0fde:	b178      	cbz	r0, e1000 <mbedtls_mpi_read_binary+0x48>
   e0fe0:	e01e      	b.n	e1020 <mbedtls_mpi_read_binary+0x68>
    MPI_VALIDATE_RET( buflen == 0 || buf != NULL );

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
    {
        mbedtls_mpi_free( X );
   e0fe2:	f7ff fea2 	bl	e0d2a <mbedtls_mpi_free>
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   e0fe6:	2301      	movs	r3, #1
   e0fe8:	603b      	str	r3, [r7, #0]
    X->n = 0;
   e0fea:	2300      	movs	r3, #0
   e0fec:	607b      	str	r3, [r7, #4]
    X->p = NULL;
   e0fee:	60bb      	str	r3, [r7, #8]
    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
    {
        mbedtls_mpi_free( X );
        mbedtls_mpi_init( X );
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
   e0ff0:	4621      	mov	r1, r4
   e0ff2:	4638      	mov	r0, r7
   e0ff4:	f7ff feab 	bl	e0d4e <mbedtls_mpi_grow>
   e0ff8:	4606      	mov	r6, r0
   e0ffa:	2800      	cmp	r0, #0
   e0ffc:	d0ea      	beq.n	e0fd4 <mbedtls_mpi_read_binary+0x1c>
   e0ffe:	e00f      	b.n	e1020 <mbedtls_mpi_read_binary+0x68>
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );

    /* Avoid calling `memcpy` with NULL source argument,
     * even if buflen is 0. */
    if( buf != NULL )
   e1000:	f1b8 0f00 	cmp.w	r8, #0
   e1004:	d00c      	beq.n	e1020 <mbedtls_mpi_read_binary+0x68>
    {
        Xp = (unsigned char*) X->p;
        memcpy( Xp + overhead, buf, buflen );
   e1006:	68bb      	ldr	r3, [r7, #8]
   e1008:	ebc5 0084 	rsb	r0, r5, r4, lsl #2
   e100c:	462a      	mov	r2, r5
   e100e:	4641      	mov	r1, r8
   e1010:	4418      	add	r0, r3
   e1012:	f008 fd50 	bl	e9ab6 <memcpy>

static void mpi_bigendian_to_host( mbedtls_mpi_uint * const p, size_t limbs )
{
    mbedtls_mpi_uint *cur_limb_left;
    mbedtls_mpi_uint *cur_limb_right;
    if( limbs == 0 )
   e1016:	b11c      	cbz	r4, e1020 <mbedtls_mpi_read_binary+0x68>
   e1018:	4621      	mov	r1, r4
   e101a:	68b8      	ldr	r0, [r7, #8]
   e101c:	f7ff fe6e 	bl	e0cfc <_ZL21mpi_bigendian_to_hostPmj.part.1>
    }

cleanup:

    return( ret );
}
   e1020:	4630      	mov	r0, r6
   e1022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000e1026 <mbedtls_mpi_write_binary>:
/*
 * Export X into unsigned binary data, big endian
 */
int mbedtls_mpi_write_binary( const mbedtls_mpi *X,
                              unsigned char *buf, size_t buflen )
{
   e1026:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e1028:	4605      	mov	r5, r0
   e102a:	4608      	mov	r0, r1
    size_t i;

    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( buflen == 0 || buf != NULL );

    stored_bytes = X->n * ciL;
   e102c:	686c      	ldr	r4, [r5, #4]
   e102e:	00a4      	lsls	r4, r4, #2

    if( stored_bytes < buflen )
   e1030:	4294      	cmp	r4, r2
   e1032:	d301      	bcc.n	e1038 <mbedtls_mpi_write_binary+0x12>
   e1034:	4613      	mov	r3, r2
   e1036:	e014      	b.n	e1062 <mbedtls_mpi_write_binary+0x3c>
         * null bytes and record the position at which to start
         * writing the significant bytes. In this case, the execution
         * trace of this function does not depend on the value of the
         * number. */
        bytes_to_copy = stored_bytes;
        p = buf + buflen - stored_bytes;
   e1038:	1b12      	subs	r2, r2, r4
   e103a:	188e      	adds	r6, r1, r2
        memset( buf, 0, buflen - stored_bytes );
   e103c:	2100      	movs	r1, #0
   e103e:	f008 fd60 	bl	e9b02 <memset>
         * null bytes and record the position at which to start
         * writing the significant bytes. In this case, the execution
         * trace of this function does not depend on the value of the
         * number. */
        bytes_to_copy = stored_bytes;
        p = buf + buflen - stored_bytes;
   e1042:	4630      	mov	r0, r6
   e1044:	4622      	mov	r2, r4
   e1046:	e00e      	b.n	e1066 <mbedtls_mpi_write_binary+0x40>
         * However X may fit if its leading bytes are zero. */
        bytes_to_copy = buflen;
        p = buf;
        for( i = bytes_to_copy; i < stored_bytes; i++ )
        {
            if( GET_BYTE( X, i ) != 0 )
   e1048:	ea4f 0e93 	mov.w	lr, r3, lsr #2
   e104c:	68af      	ldr	r7, [r5, #8]
   e104e:	f003 0103 	and.w	r1, r3, #3
   e1052:	00ce      	lsls	r6, r1, #3
   e1054:	f857 102e 	ldr.w	r1, [r7, lr, lsl #2]
   e1058:	40f1      	lsrs	r1, r6
   e105a:	f011 0fff 	tst.w	r1, #255	; 0xff
   e105e:	d112      	bne.n	e1086 <mbedtls_mpi_write_binary+0x60>
    {
        /* The output buffer is smaller than the allocated size of X.
         * However X may fit if its leading bytes are zero. */
        bytes_to_copy = buflen;
        p = buf;
        for( i = bytes_to_copy; i < stored_bytes; i++ )
   e1060:	3301      	adds	r3, #1
   e1062:	429c      	cmp	r4, r3
   e1064:	d1f0      	bne.n	e1048 <mbedtls_mpi_write_binary+0x22>
   e1066:	4410      	add	r0, r2
            if( GET_BYTE( X, i ) != 0 )
                return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
        }
    }

    for( i = 0; i < bytes_to_copy; i++ )
   e1068:	2300      	movs	r3, #0
   e106a:	429a      	cmp	r2, r3
   e106c:	d00e      	beq.n	e108c <mbedtls_mpi_write_binary+0x66>
        p[bytes_to_copy - i - 1] = GET_BYTE( X, i );
   e106e:	089f      	lsrs	r7, r3, #2
   e1070:	68ae      	ldr	r6, [r5, #8]
   e1072:	f003 0103 	and.w	r1, r3, #3
   e1076:	00cc      	lsls	r4, r1, #3
   e1078:	f856 1027 	ldr.w	r1, [r6, r7, lsl #2]
   e107c:	40e1      	lsrs	r1, r4
   e107e:	f800 1d01 	strb.w	r1, [r0, #-1]!
            if( GET_BYTE( X, i ) != 0 )
                return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
        }
    }

    for( i = 0; i < bytes_to_copy; i++ )
   e1082:	3301      	adds	r3, #1
   e1084:	e7f1      	b.n	e106a <mbedtls_mpi_write_binary+0x44>
        bytes_to_copy = buflen;
        p = buf;
        for( i = bytes_to_copy; i < stored_bytes; i++ )
        {
            if( GET_BYTE( X, i ) != 0 )
                return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
   e1086:	f06f 0007 	mvn.w	r0, #7
   e108a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }

    for( i = 0; i < bytes_to_copy; i++ )
        p[bytes_to_copy - i - 1] = GET_BYTE( X, i );

    return( 0 );
   e108c:	2000      	movs	r0, #0
}
   e108e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000e1090 <mbedtls_mpi_shift_l>:

/*
 * Left-shift: X <<= count
 */
int mbedtls_mpi_shift_l( mbedtls_mpi *X, size_t count )
{
   e1090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e1092:	4604      	mov	r4, r0
   e1094:	460d      	mov	r5, r1
    int ret;
    size_t i, v0, t1;
    mbedtls_mpi_uint r0 = 0, r1;
    MPI_VALIDATE_RET( X != NULL );

    v0 = count / (biL    );
   e1096:	094e      	lsrs	r6, r1, #5
    t1 = count & (biL - 1);
   e1098:	f001 071f 	and.w	r7, r1, #31

    i = mbedtls_mpi_bitlen( X ) + count;
   e109c:	f7ff ff66 	bl	e0f6c <mbedtls_mpi_bitlen>

    if( X->n * biL < i )
   e10a0:	6863      	ldr	r3, [r4, #4]
    MPI_VALIDATE_RET( X != NULL );

    v0 = count / (biL    );
    t1 = count & (biL - 1);

    i = mbedtls_mpi_bitlen( X ) + count;
   e10a2:	4428      	add	r0, r5

    if( X->n * biL < i )
   e10a4:	ebb0 1f43 	cmp.w	r0, r3, lsl #5
   e10a8:	d809      	bhi.n	e10be <mbedtls_mpi_shift_l+0x2e>
    ret = 0;

    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
   e10aa:	b346      	cbz	r6, e10fe <mbedtls_mpi_shift_l+0x6e>
    {
        for( i = X->n; i > v0; i-- )
   e10ac:	6863      	ldr	r3, [r4, #4]
   e10ae:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   e10b2:	3a01      	subs	r2, #1
   e10b4:	f06f 0103 	mvn.w	r1, #3
   e10b8:	0092      	lsls	r2, r2, #2
   e10ba:	4371      	muls	r1, r6
   e10bc:	e00b      	b.n	e10d6 <mbedtls_mpi_shift_l+0x46>
    t1 = count & (biL - 1);

    i = mbedtls_mpi_bitlen( X ) + count;

    if( X->n * biL < i )
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );
   e10be:	f010 011f 	ands.w	r1, r0, #31
   e10c2:	bf18      	it	ne
   e10c4:	2101      	movne	r1, #1
   e10c6:	eb01 1150 	add.w	r1, r1, r0, lsr #5
   e10ca:	4620      	mov	r0, r4
   e10cc:	f7ff fe3f 	bl	e0d4e <mbedtls_mpi_grow>
   e10d0:	2800      	cmp	r0, #0
   e10d2:	d0ea      	beq.n	e10aa <mbedtls_mpi_shift_l+0x1a>
   e10d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
   e10d6:	429e      	cmp	r6, r3
   e10d8:	d206      	bcs.n	e10e8 <mbedtls_mpi_shift_l+0x58>
            X->p[i - 1] = X->p[i - v0 - 1];
   e10da:	68a0      	ldr	r0, [r4, #8]
   e10dc:	1885      	adds	r5, r0, r2
    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
   e10de:	3b01      	subs	r3, #1
            X->p[i - 1] = X->p[i - v0 - 1];
   e10e0:	586d      	ldr	r5, [r5, r1]
   e10e2:	5085      	str	r5, [r0, r2]
   e10e4:	3a04      	subs	r2, #4
    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
   e10e6:	e7f6      	b.n	e10d6 <mbedtls_mpi_shift_l+0x46>
   e10e8:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   e10ec:	3a01      	subs	r2, #1
   e10ee:	0092      	lsls	r2, r2, #2
            X->p[i - 1] = X->p[i - v0 - 1];

        for( ; i > 0; i-- )
            X->p[i - 1] = 0;
   e10f0:	2000      	movs	r0, #0
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
            X->p[i - 1] = X->p[i - v0 - 1];

        for( ; i > 0; i-- )
   e10f2:	b123      	cbz	r3, e10fe <mbedtls_mpi_shift_l+0x6e>
            X->p[i - 1] = 0;
   e10f4:	68a1      	ldr	r1, [r4, #8]
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
            X->p[i - 1] = X->p[i - v0 - 1];

        for( ; i > 0; i-- )
   e10f6:	3b01      	subs	r3, #1
            X->p[i - 1] = 0;
   e10f8:	5088      	str	r0, [r1, r2]
   e10fa:	3a04      	subs	r2, #4
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
            X->p[i - 1] = X->p[i - v0 - 1];

        for( ; i > 0; i-- )
   e10fc:	e7f9      	b.n	e10f2 <mbedtls_mpi_shift_l+0x62>
    }

    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
   e10fe:	b90f      	cbnz	r7, e1104 <mbedtls_mpi_shift_l+0x74>
    i = mbedtls_mpi_bitlen( X ) + count;

    if( X->n * biL < i )
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );

    ret = 0;
   e1100:	2000      	movs	r0, #0
   e1102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   e1104:	00b3      	lsls	r3, r6, #2
    }

    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
   e1106:	2200      	movs	r2, #0
    {
        for( i = v0; i < X->n; i++ )
        {
            r1 = X->p[i] >> (biL - t1);
   e1108:	f1c7 0e20 	rsb	lr, r7, #32
    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
    {
        for( i = v0; i < X->n; i++ )
   e110c:	6861      	ldr	r1, [r4, #4]
   e110e:	428e      	cmp	r6, r1
   e1110:	d2f6      	bcs.n	e1100 <mbedtls_mpi_shift_l+0x70>
        {
            r1 = X->p[i] >> (biL - t1);
   e1112:	68a0      	ldr	r0, [r4, #8]
   e1114:	58c1      	ldr	r1, [r0, r3]
            X->p[i] <<= t1;
   e1116:	fa01 f507 	lsl.w	r5, r1, r7
   e111a:	50c5      	str	r5, [r0, r3]
            X->p[i] |= r0;
   e111c:	68a0      	ldr	r0, [r4, #8]
   e111e:	58c5      	ldr	r5, [r0, r3]
   e1120:	432a      	orrs	r2, r5
   e1122:	50c2      	str	r2, [r0, r3]
    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
    {
        for( i = v0; i < X->n; i++ )
   e1124:	3601      	adds	r6, #1
   e1126:	3304      	adds	r3, #4
        {
            r1 = X->p[i] >> (biL - t1);
            X->p[i] <<= t1;
            X->p[i] |= r0;
            r0 = r1;
   e1128:	fa21 f20e 	lsr.w	r2, r1, lr
    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
    {
        for( i = v0; i < X->n; i++ )
   e112c:	e7ee      	b.n	e110c <mbedtls_mpi_shift_l+0x7c>

000e112e <mbedtls_mpi_shift_r>:

/*
 * Right-shift: X >>= count
 */
int mbedtls_mpi_shift_r( mbedtls_mpi *X, size_t count )
{
   e112e:	b5f0      	push	{r4, r5, r6, r7, lr}
    MPI_VALIDATE_RET( X != NULL );

    v0 = count /  biL;
    v1 = count & (biL - 1);

    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
   e1130:	6843      	ldr	r3, [r0, #4]
{
    size_t i, v0, v1;
    mbedtls_mpi_uint r0 = 0, r1;
    MPI_VALIDATE_RET( X != NULL );

    v0 = count /  biL;
   e1132:	094a      	lsrs	r2, r1, #5
    v1 = count & (biL - 1);

    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
   e1134:	429a      	cmp	r2, r3
    size_t i, v0, v1;
    mbedtls_mpi_uint r0 = 0, r1;
    MPI_VALIDATE_RET( X != NULL );

    v0 = count /  biL;
    v1 = count & (biL - 1);
   e1136:	f001 011f 	and.w	r1, r1, #31

    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
   e113a:	d801      	bhi.n	e1140 <mbedtls_mpi_shift_r+0x12>
   e113c:	d105      	bne.n	e114a <mbedtls_mpi_shift_r+0x1c>
   e113e:	b159      	cbz	r1, e1158 <mbedtls_mpi_shift_r+0x2a>
        return mbedtls_mpi_lset( X, 0 );
   e1140:	2100      	movs	r1, #0
            r0 = r1;
        }
    }

    return( 0 );
}
   e1142:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}

    v0 = count /  biL;
    v1 = count & (biL - 1);

    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
        return mbedtls_mpi_lset( X, 0 );
   e1146:	f7ff becb 	b.w	e0ee0 <mbedtls_mpi_lset>

    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
   e114a:	b1d2      	cbz	r2, e1182 <mbedtls_mpi_shift_r+0x54>
   e114c:	2300      	movs	r3, #0
    {
        for( i = 0; i < X->n - v0; i++ )
   e114e:	6844      	ldr	r4, [r0, #4]
   e1150:	1aa4      	subs	r4, r4, r2
   e1152:	42a3      	cmp	r3, r4
   e1154:	d305      	bcc.n	e1162 <mbedtls_mpi_shift_r+0x34>
   e1156:	e001      	b.n	e115c <mbedtls_mpi_shift_r+0x2e>
        return mbedtls_mpi_lset( X, 0 );

    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
   e1158:	b35a      	cbz	r2, e11b2 <mbedtls_mpi_shift_r+0x84>
   e115a:	460b      	mov	r3, r1
   e115c:	009a      	lsls	r2, r3, #2
    {
        for( i = 0; i < X->n - v0; i++ )
            X->p[i] = X->p[i + v0];

        for( ; i < X->n; i++ )
            X->p[i] = 0;
   e115e:	2500      	movs	r5, #0
   e1160:	e007      	b.n	e1172 <mbedtls_mpi_shift_r+0x44>
     * shift by count / limb_size
     */
    if( v0 > 0 )
    {
        for( i = 0; i < X->n - v0; i++ )
            X->p[i] = X->p[i + v0];
   e1162:	6884      	ldr	r4, [r0, #8]
   e1164:	189d      	adds	r5, r3, r2
   e1166:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
   e116a:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
    {
        for( i = 0; i < X->n - v0; i++ )
   e116e:	3301      	adds	r3, #1
   e1170:	e7ed      	b.n	e114e <mbedtls_mpi_shift_r+0x20>
            X->p[i] = X->p[i + v0];

        for( ; i < X->n; i++ )
   e1172:	6844      	ldr	r4, [r0, #4]
   e1174:	42a3      	cmp	r3, r4
   e1176:	d204      	bcs.n	e1182 <mbedtls_mpi_shift_r+0x54>
            X->p[i] = 0;
   e1178:	6884      	ldr	r4, [r0, #8]
    if( v0 > 0 )
    {
        for( i = 0; i < X->n - v0; i++ )
            X->p[i] = X->p[i + v0];

        for( ; i < X->n; i++ )
   e117a:	3301      	adds	r3, #1
            X->p[i] = 0;
   e117c:	50a5      	str	r5, [r4, r2]
   e117e:	3204      	adds	r2, #4
    if( v0 > 0 )
    {
        for( i = 0; i < X->n - v0; i++ )
            X->p[i] = X->p[i + v0];

        for( ; i < X->n; i++ )
   e1180:	e7f7      	b.n	e1172 <mbedtls_mpi_shift_r+0x44>
    }

    /*
     * shift by count % limb_size
     */
    if( v1 > 0 )
   e1182:	b1b1      	cbz	r1, e11b2 <mbedtls_mpi_shift_r+0x84>
    {
        for( i = X->n; i > 0; i-- )
   e1184:	6844      	ldr	r4, [r0, #4]
   e1186:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   e118a:	3b01      	subs	r3, #1
   e118c:	009b      	lsls	r3, r3, #2
 * Right-shift: X >>= count
 */
int mbedtls_mpi_shift_r( mbedtls_mpi *X, size_t count )
{
    size_t i, v0, v1;
    mbedtls_mpi_uint r0 = 0, r1;
   e118e:	2200      	movs	r2, #0
     */
    if( v1 > 0 )
    {
        for( i = X->n; i > 0; i-- )
        {
            r1 = X->p[i - 1] << (biL - v1);
   e1190:	f1c1 0e20 	rsb	lr, r1, #32
    /*
     * shift by count % limb_size
     */
    if( v1 > 0 )
    {
        for( i = X->n; i > 0; i-- )
   e1194:	b16c      	cbz	r4, e11b2 <mbedtls_mpi_shift_r+0x84>
        {
            r1 = X->p[i - 1] << (biL - v1);
   e1196:	6886      	ldr	r6, [r0, #8]
   e1198:	58f5      	ldr	r5, [r6, r3]
            X->p[i - 1] >>= v1;
   e119a:	fa25 f701 	lsr.w	r7, r5, r1
   e119e:	50f7      	str	r7, [r6, r3]
            X->p[i - 1] |= r0;
   e11a0:	6886      	ldr	r6, [r0, #8]
   e11a2:	58f7      	ldr	r7, [r6, r3]
   e11a4:	433a      	orrs	r2, r7
   e11a6:	50f2      	str	r2, [r6, r3]
    /*
     * shift by count % limb_size
     */
    if( v1 > 0 )
    {
        for( i = X->n; i > 0; i-- )
   e11a8:	3c01      	subs	r4, #1
   e11aa:	3b04      	subs	r3, #4
        {
            r1 = X->p[i - 1] << (biL - v1);
            X->p[i - 1] >>= v1;
            X->p[i - 1] |= r0;
            r0 = r1;
   e11ac:	fa05 f20e 	lsl.w	r2, r5, lr
    /*
     * shift by count % limb_size
     */
    if( v1 > 0 )
    {
        for( i = X->n; i > 0; i-- )
   e11b0:	e7f0      	b.n	e1194 <mbedtls_mpi_shift_r+0x66>
            r0 = r1;
        }
    }

    return( 0 );
}
   e11b2:	2000      	movs	r0, #0
   e11b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000e11b6 <mbedtls_mpi_cmp_abs>:

/*
 * Compare unsigned values
 */
int mbedtls_mpi_cmp_abs( const mbedtls_mpi *X, const mbedtls_mpi *Y )
{
   e11b6:	b570      	push	{r4, r5, r6, lr}
    size_t i, j;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    for( i = X->n; i > 0; i-- )
   e11b8:	6843      	ldr	r3, [r0, #4]
   e11ba:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   e11be:	3a01      	subs	r2, #1
   e11c0:	0092      	lsls	r2, r2, #2
   e11c2:	b12b      	cbz	r3, e11d0 <mbedtls_mpi_cmp_abs+0x1a>
        if( X->p[i - 1] != 0 )
   e11c4:	6884      	ldr	r4, [r0, #8]
   e11c6:	58a4      	ldr	r4, [r4, r2]
   e11c8:	3a04      	subs	r2, #4
   e11ca:	b90c      	cbnz	r4, e11d0 <mbedtls_mpi_cmp_abs+0x1a>
{
    size_t i, j;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    for( i = X->n; i > 0; i-- )
   e11cc:	3b01      	subs	r3, #1
   e11ce:	e7f8      	b.n	e11c2 <mbedtls_mpi_cmp_abs+0xc>
        if( X->p[i - 1] != 0 )
            break;

    for( j = Y->n; j > 0; j-- )
   e11d0:	684c      	ldr	r4, [r1, #4]
   e11d2:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   e11d6:	3a01      	subs	r2, #1
   e11d8:	0092      	lsls	r2, r2, #2
   e11da:	b1c4      	cbz	r4, e120e <mbedtls_mpi_cmp_abs+0x58>
        if( Y->p[j - 1] != 0 )
   e11dc:	688d      	ldr	r5, [r1, #8]
   e11de:	58ae      	ldr	r6, [r5, r2]
   e11e0:	3a04      	subs	r2, #4
   e11e2:	b90e      	cbnz	r6, e11e8 <mbedtls_mpi_cmp_abs+0x32>

    for( i = X->n; i > 0; i-- )
        if( X->p[i - 1] != 0 )
            break;

    for( j = Y->n; j > 0; j-- )
   e11e4:	3c01      	subs	r4, #1
   e11e6:	e7f8      	b.n	e11da <mbedtls_mpi_cmp_abs+0x24>
            break;

    if( i == 0 && j == 0 )
        return( 0 );

    if( i > j ) return(  1 );
   e11e8:	429c      	cmp	r4, r3
   e11ea:	d30b      	bcc.n	e1204 <mbedtls_mpi_cmp_abs+0x4e>
    if( j > i ) return( -1 );
   e11ec:	d913      	bls.n	e1216 <mbedtls_mpi_cmp_abs+0x60>
   e11ee:	e00b      	b.n	e1208 <mbedtls_mpi_cmp_abs+0x52>
   e11f0:	f1a2 0204 	sub.w	r2, r2, #4

    for( ; i > 0; i-- )
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
   e11f4:	d308      	bcc.n	e1208 <mbedtls_mpi_cmp_abs+0x52>
        return( 0 );

    if( i > j ) return(  1 );
    if( j > i ) return( -1 );

    for( ; i > 0; i-- )
   e11f6:	3b01      	subs	r3, #1
   e11f8:	b193      	cbz	r3, e1220 <mbedtls_mpi_cmp_abs+0x6a>
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
   e11fa:	6881      	ldr	r1, [r0, #8]
   e11fc:	588c      	ldr	r4, [r1, r2]
   e11fe:	58a9      	ldr	r1, [r5, r2]
   e1200:	428c      	cmp	r4, r1
   e1202:	d9f5      	bls.n	e11f0 <mbedtls_mpi_cmp_abs+0x3a>
            break;

    if( i == 0 && j == 0 )
        return( 0 );

    if( i > j ) return(  1 );
   e1204:	2001      	movs	r0, #1
   e1206:	bd70      	pop	{r4, r5, r6, pc}
    if( j > i ) return( -1 );
   e1208:	f04f 30ff 	mov.w	r0, #4294967295
   e120c:	bd70      	pop	{r4, r5, r6, pc}
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
    }

    return( 0 );
   e120e:	1c18      	adds	r0, r3, #0
   e1210:	bf18      	it	ne
   e1212:	2001      	movne	r0, #1
   e1214:	bd70      	pop	{r4, r5, r6, pc}
   e1216:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   e121a:	3a01      	subs	r2, #1
   e121c:	0092      	lsls	r2, r2, #2
   e121e:	e7eb      	b.n	e11f8 <mbedtls_mpi_cmp_abs+0x42>
   e1220:	4618      	mov	r0, r3
   e1222:	bd70      	pop	{r4, r5, r6, pc}

000e1224 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>:
/*
 * Montgomery multiplication: A = A * B * R^-1 mod N  (HAC 14.36)
 */
static int mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
                         const mbedtls_mpi *T )
{
   e1224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e1228:	b085      	sub	sp, #20
   e122a:	4616      	mov	r6, r2
   e122c:	9303      	str	r3, [sp, #12]
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    if( T->n < N->n + 1 || T->p == NULL )
   e122e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   e1230:	685a      	ldr	r2, [r3, #4]
   e1232:	6873      	ldr	r3, [r6, #4]
   e1234:	3301      	adds	r3, #1
   e1236:	429a      	cmp	r2, r3
/*
 * Montgomery multiplication: A = A * B * R^-1 mod N  (HAC 14.36)
 */
static int mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
                         const mbedtls_mpi *T )
{
   e1238:	4681      	mov	r9, r0
   e123a:	468b      	mov	fp, r1
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    if( T->n < N->n + 1 || T->p == NULL )
   e123c:	d351      	bcc.n	e12e2 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0xbe>
   e123e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   e1240:	6898      	ldr	r0, [r3, #8]
   e1242:	2800      	cmp	r0, #0
   e1244:	d04d      	beq.n	e12e2 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0xbe>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    memset( T->p, 0, T->n * ciL );
   e1246:	0092      	lsls	r2, r2, #2
   e1248:	2100      	movs	r1, #0
   e124a:	f008 fc5a 	bl	e9b02 <memset>

    d = T->p;
   e124e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    n = N->n;
   e1250:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if( T->n < N->n + 1 || T->p == NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    memset( T->p, 0, T->n * ciL );

    d = T->p;
   e1254:	689b      	ldr	r3, [r3, #8]
   e1256:	9300      	str	r3, [sp, #0]
    n = N->n;
    m = ( B->n < n ) ? B->n : n;
   e1258:	f8db 3004 	ldr.w	r3, [fp, #4]
    if( T->n < N->n + 1 || T->p == NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    memset( T->p, 0, T->n * ciL );

    d = T->p;
   e125c:	9d00      	ldr	r5, [sp, #0]
   e125e:	4553      	cmp	r3, sl
   e1260:	bf28      	it	cs
   e1262:	4653      	movcs	r3, sl
        u1 = ( d[0] + u0 * B->p[0] ) * mm;

        mpi_mul_hlp( m, B->p, d, u0 );
        mpi_mul_hlp( n, N->p, d, u1 );

        *d++ = u0; d[n + 1] = 0;
   e1264:	f10a 0701 	add.w	r7, sl, #1
   e1268:	9302      	str	r3, [sp, #8]
   e126a:	00bf      	lsls	r7, r7, #2

    d = T->p;
    n = N->n;
    m = ( B->n < n ) ? B->n : n;

    for( i = 0; i < n; i++ )
   e126c:	2400      	movs	r4, #0
   e126e:	4554      	cmp	r4, sl
   e1270:	f8d9 0008 	ldr.w	r0, [r9, #8]
   e1274:	d01b      	beq.n	e12ae <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0x8a>
    {
        /*
         * T = (T + u0*B + u1*N) / 2^biL
         */
        u0 = A->p[i];
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
   e1276:	f8db 1008 	ldr.w	r1, [fp, #8]
    for( i = 0; i < n; i++ )
    {
        /*
         * T = (T + u0*B + u1*N) / 2^biL
         */
        u0 = A->p[i];
   e127a:	f850 8024 	ldr.w	r8, [r0, r4, lsl #2]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
   e127e:	682a      	ldr	r2, [r5, #0]
   e1280:	680b      	ldr	r3, [r1, #0]

        mpi_mul_hlp( m, B->p, d, u0 );
   e1282:	9802      	ldr	r0, [sp, #8]
    {
        /*
         * T = (T + u0*B + u1*N) / 2^biL
         */
        u0 = A->p[i];
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
   e1284:	fb03 2308 	mla	r3, r3, r8, r2
   e1288:	9a03      	ldr	r2, [sp, #12]
   e128a:	4353      	muls	r3, r2
   e128c:	9301      	str	r3, [sp, #4]

        mpi_mul_hlp( m, B->p, d, u0 );
   e128e:	462a      	mov	r2, r5
   e1290:	4643      	mov	r3, r8
   e1292:	f7ff fc63 	bl	e0b5c <_ZL11mpi_mul_hlpjPmS_m>
        mpi_mul_hlp( n, N->p, d, u1 );
   e1296:	9b01      	ldr	r3, [sp, #4]
   e1298:	68b1      	ldr	r1, [r6, #8]
   e129a:	462a      	mov	r2, r5
   e129c:	4650      	mov	r0, sl
   e129e:	f7ff fc5d 	bl	e0b5c <_ZL11mpi_mul_hlpjPmS_m>

        *d++ = u0; d[n + 1] = 0;
   e12a2:	f845 8b04 	str.w	r8, [r5], #4
   e12a6:	2300      	movs	r3, #0
   e12a8:	51eb      	str	r3, [r5, r7]

    d = T->p;
    n = N->n;
    m = ( B->n < n ) ? B->n : n;

    for( i = 0; i < n; i++ )
   e12aa:	3401      	adds	r4, #1
   e12ac:	e7df      	b.n	e126e <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0x4a>
        mpi_mul_hlp( n, N->p, d, u1 );

        *d++ = u0; d[n + 1] = 0;
    }

    memcpy( A->p, d, ( n + 1 ) * ciL );
   e12ae:	9b00      	ldr	r3, [sp, #0]
   e12b0:	1f39      	subs	r1, r7, #4
   e12b2:	440b      	add	r3, r1
   e12b4:	463a      	mov	r2, r7
   e12b6:	4619      	mov	r1, r3
   e12b8:	f008 fbfd 	bl	e9ab6 <memcpy>

    if( mbedtls_mpi_cmp_abs( A, N ) >= 0 )
   e12bc:	4631      	mov	r1, r6
   e12be:	4648      	mov	r0, r9
   e12c0:	f7ff ff79 	bl	e11b6 <mbedtls_mpi_cmp_abs>
   e12c4:	2800      	cmp	r0, #0
        mpi_sub_hlp( n, N->p, A->p );
    else
        /* prevent timing attacks */
        mpi_sub_hlp( n, A->p, T->p );
   e12c6:	bfb3      	iteet	lt
   e12c8:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
    }

    memcpy( A->p, d, ( n + 1 ) * ciL );

    if( mbedtls_mpi_cmp_abs( A, N ) >= 0 )
        mpi_sub_hlp( n, N->p, A->p );
   e12ca:	f8d9 2008 	ldrge.w	r2, [r9, #8]
   e12ce:	68b1      	ldrge	r1, [r6, #8]
    else
        /* prevent timing attacks */
        mpi_sub_hlp( n, A->p, T->p );
   e12d0:	689a      	ldrlt	r2, [r3, #8]
   e12d2:	bfb8      	it	lt
   e12d4:	f8d9 1008 	ldrlt.w	r1, [r9, #8]
   e12d8:	4620      	mov	r0, r4
   e12da:	f7ff fc15 	bl	e0b08 <_ZL11mpi_sub_hlpjPmS_>

    return( 0 );
   e12de:	2000      	movs	r0, #0
   e12e0:	e001      	b.n	e12e6 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0xc2>
{
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    if( T->n < N->n + 1 || T->p == NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
   e12e2:	f06f 0003 	mvn.w	r0, #3
    else
        /* prevent timing attacks */
        mpi_sub_hlp( n, A->p, T->p );

    return( 0 );
}
   e12e6:	b005      	add	sp, #20
   e12e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000e12ec <mbedtls_mpi_cmp_mpi>:

/*
 * Compare signed values
 */
int mbedtls_mpi_cmp_mpi( const mbedtls_mpi *X, const mbedtls_mpi *Y )
{
   e12ec:	b570      	push	{r4, r5, r6, lr}
    size_t i, j;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    for( i = X->n; i > 0; i-- )
   e12ee:	6843      	ldr	r3, [r0, #4]
   e12f0:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   e12f4:	3a01      	subs	r2, #1
   e12f6:	0092      	lsls	r2, r2, #2
   e12f8:	b12b      	cbz	r3, e1306 <mbedtls_mpi_cmp_mpi+0x1a>
        if( X->p[i - 1] != 0 )
   e12fa:	6884      	ldr	r4, [r0, #8]
   e12fc:	58a4      	ldr	r4, [r4, r2]
   e12fe:	3a04      	subs	r2, #4
   e1300:	b90c      	cbnz	r4, e1306 <mbedtls_mpi_cmp_mpi+0x1a>
{
    size_t i, j;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    for( i = X->n; i > 0; i-- )
   e1302:	3b01      	subs	r3, #1
   e1304:	e7f8      	b.n	e12f8 <mbedtls_mpi_cmp_mpi+0xc>
        if( X->p[i - 1] != 0 )
            break;

    for( j = Y->n; j > 0; j-- )
   e1306:	684c      	ldr	r4, [r1, #4]
   e1308:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   e130c:	3a01      	subs	r2, #1
   e130e:	0092      	lsls	r2, r2, #2
   e1310:	b364      	cbz	r4, e136c <mbedtls_mpi_cmp_mpi+0x80>
        if( Y->p[j - 1] != 0 )
   e1312:	688d      	ldr	r5, [r1, #8]
   e1314:	58ae      	ldr	r6, [r5, r2]
   e1316:	3a04      	subs	r2, #4
   e1318:	b90e      	cbnz	r6, e131e <mbedtls_mpi_cmp_mpi+0x32>

    for( i = X->n; i > 0; i-- )
        if( X->p[i - 1] != 0 )
            break;

    for( j = Y->n; j > 0; j-- )
   e131a:	3c01      	subs	r4, #1
   e131c:	e7f8      	b.n	e1310 <mbedtls_mpi_cmp_mpi+0x24>
            break;

    if( i == 0 && j == 0 )
        return( 0 );

    if( i > j ) return(  X->s );
   e131e:	429c      	cmp	r4, r3
   e1320:	d201      	bcs.n	e1326 <mbedtls_mpi_cmp_mpi+0x3a>
   e1322:	6802      	ldr	r2, [r0, #0]
   e1324:	e025      	b.n	e1372 <mbedtls_mpi_cmp_mpi+0x86>
   e1326:	6809      	ldr	r1, [r1, #0]
    if( j > i ) return( -Y->s );
   e1328:	d901      	bls.n	e132e <mbedtls_mpi_cmp_mpi+0x42>
   e132a:	424a      	negs	r2, r1
   e132c:	e021      	b.n	e1372 <mbedtls_mpi_cmp_mpi+0x86>

    if( X->s > 0 && Y->s < 0 ) return(  1 );
   e132e:	6802      	ldr	r2, [r0, #0]
   e1330:	2a00      	cmp	r2, #0
   e1332:	dd01      	ble.n	e1338 <mbedtls_mpi_cmp_mpi+0x4c>
   e1334:	2900      	cmp	r1, #0
   e1336:	db14      	blt.n	e1362 <mbedtls_mpi_cmp_mpi+0x76>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
   e1338:	2900      	cmp	r1, #0
   e133a:	dd01      	ble.n	e1340 <mbedtls_mpi_cmp_mpi+0x54>
   e133c:	2a00      	cmp	r2, #0
   e133e:	db12      	blt.n	e1366 <mbedtls_mpi_cmp_mpi+0x7a>
   e1340:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
   e1344:	3901      	subs	r1, #1
   e1346:	0089      	lsls	r1, r1, #2

    for( ; i > 0; i-- )
   e1348:	b193      	cbz	r3, e1370 <mbedtls_mpi_cmp_mpi+0x84>
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
   e134a:	6884      	ldr	r4, [r0, #8]
   e134c:	5866      	ldr	r6, [r4, r1]
   e134e:	586c      	ldr	r4, [r5, r1]
   e1350:	42a6      	cmp	r6, r4
   e1352:	d80e      	bhi.n	e1372 <mbedtls_mpi_cmp_mpi+0x86>
   e1354:	f1a1 0104 	sub.w	r1, r1, #4
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
   e1358:	d201      	bcs.n	e135e <mbedtls_mpi_cmp_mpi+0x72>
   e135a:	4252      	negs	r2, r2
   e135c:	e009      	b.n	e1372 <mbedtls_mpi_cmp_mpi+0x86>
    if( j > i ) return( -Y->s );

    if( X->s > 0 && Y->s < 0 ) return(  1 );
    if( Y->s > 0 && X->s < 0 ) return( -1 );

    for( ; i > 0; i-- )
   e135e:	3b01      	subs	r3, #1
   e1360:	e7f2      	b.n	e1348 <mbedtls_mpi_cmp_mpi+0x5c>
        return( 0 );

    if( i > j ) return(  X->s );
    if( j > i ) return( -Y->s );

    if( X->s > 0 && Y->s < 0 ) return(  1 );
   e1362:	2201      	movs	r2, #1
   e1364:	e005      	b.n	e1372 <mbedtls_mpi_cmp_mpi+0x86>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
   e1366:	f04f 32ff 	mov.w	r2, #4294967295
   e136a:	e002      	b.n	e1372 <mbedtls_mpi_cmp_mpi+0x86>

    for( j = Y->n; j > 0; j-- )
        if( Y->p[j - 1] != 0 )
            break;

    if( i == 0 && j == 0 )
   e136c:	2b00      	cmp	r3, #0
   e136e:	d1d8      	bne.n	e1322 <mbedtls_mpi_cmp_mpi+0x36>
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
    }

    return( 0 );
   e1370:	461a      	mov	r2, r3
}
   e1372:	4610      	mov	r0, r2
   e1374:	bd70      	pop	{r4, r5, r6, pc}

000e1376 <mbedtls_mpi_cmp_int>:

/*
 * Compare signed values
 */
int mbedtls_mpi_cmp_int( const mbedtls_mpi *X, mbedtls_mpi_sint z )
{
   e1376:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    mbedtls_mpi Y;
    mbedtls_mpi_uint p[1];
    MPI_VALIDATE_RET( X != NULL );

    *p  = ( z < 0 ) ? -z : z;
   e1378:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
   e137c:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
    Y.s = ( z < 0 ) ? -1 : 1;
   e1380:	2900      	cmp	r1, #0
{
    mbedtls_mpi Y;
    mbedtls_mpi_uint p[1];
    MPI_VALIDATE_RET( X != NULL );

    *p  = ( z < 0 ) ? -z : z;
   e1382:	9300      	str	r3, [sp, #0]
    Y.s = ( z < 0 ) ? -1 : 1;
   e1384:	bfb4      	ite	lt
   e1386:	f04f 33ff 	movlt.w	r3, #4294967295
   e138a:	2301      	movge	r3, #1
   e138c:	9301      	str	r3, [sp, #4]
    Y.n = 1;
    Y.p = p;

    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
   e138e:	a901      	add	r1, sp, #4
    mbedtls_mpi_uint p[1];
    MPI_VALIDATE_RET( X != NULL );

    *p  = ( z < 0 ) ? -z : z;
    Y.s = ( z < 0 ) ? -1 : 1;
    Y.n = 1;
   e1390:	2301      	movs	r3, #1
   e1392:	9302      	str	r3, [sp, #8]
    Y.p = p;
   e1394:	f8cd d00c 	str.w	sp, [sp, #12]

    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
   e1398:	f7ff ffa8 	bl	e12ec <mbedtls_mpi_cmp_mpi>
}
   e139c:	b005      	add	sp, #20
   e139e:	f85d fb04 	ldr.w	pc, [sp], #4

000e13a2 <mbedtls_mpi_add_abs>:
    mbedtls_mpi_uint *o, *p, c, tmp;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( X == B )
   e13a2:	4290      	cmp	r0, r2

/*
 * Unsigned addition: X = |A| + |B|  (HAC 14.7)
 */
int mbedtls_mpi_add_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
   e13a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e13a8:	4606      	mov	r6, r0
   e13aa:	4615      	mov	r5, r2
    mbedtls_mpi_uint *o, *p, c, tmp;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( X == B )
   e13ac:	d006      	beq.n	e13bc <mbedtls_mpi_add_abs+0x1a>
    {
        const mbedtls_mpi *T = A; A = X; B = T;
    }

    if( X != A )
   e13ae:	4288      	cmp	r0, r1
   e13b0:	d005      	beq.n	e13be <mbedtls_mpi_add_abs+0x1c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
   e13b2:	f7ff fd34 	bl	e0e1e <mbedtls_mpi_copy>
   e13b6:	4607      	mov	r7, r0
   e13b8:	b108      	cbz	r0, e13be <mbedtls_mpi_add_abs+0x1c>
   e13ba:	e049      	b.n	e1450 <mbedtls_mpi_add_abs+0xae>
   e13bc:	460d      	mov	r5, r1

    /*
     * X should always be positive as a result of unsigned additions.
     */
    X->s = 1;
   e13be:	2301      	movs	r3, #1
   e13c0:	6033      	str	r3, [r6, #0]

    for( j = B->n; j > 0; j-- )
   e13c2:	686c      	ldr	r4, [r5, #4]
   e13c4:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   e13c8:	3b01      	subs	r3, #1
   e13ca:	009b      	lsls	r3, r3, #2
   e13cc:	b12c      	cbz	r4, e13da <mbedtls_mpi_add_abs+0x38>
        if( B->p[j - 1] != 0 )
   e13ce:	68aa      	ldr	r2, [r5, #8]
   e13d0:	58d2      	ldr	r2, [r2, r3]
   e13d2:	3b04      	subs	r3, #4
   e13d4:	b90a      	cbnz	r2, e13da <mbedtls_mpi_add_abs+0x38>
    /*
     * X should always be positive as a result of unsigned additions.
     */
    X->s = 1;

    for( j = B->n; j > 0; j-- )
   e13d6:	3c01      	subs	r4, #1
   e13d8:	e7f8      	b.n	e13cc <mbedtls_mpi_add_abs+0x2a>
        if( B->p[j - 1] != 0 )
            break;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
   e13da:	4621      	mov	r1, r4
   e13dc:	4630      	mov	r0, r6
   e13de:	f7ff fcb6 	bl	e0d4e <mbedtls_mpi_grow>
   e13e2:	4607      	mov	r7, r0
   e13e4:	2800      	cmp	r0, #0
   e13e6:	d133      	bne.n	e1450 <mbedtls_mpi_add_abs+0xae>

    o = B->p; p = X->p; c = 0;
   e13e8:	68b3      	ldr	r3, [r6, #8]
   e13ea:	f8d5 c008 	ldr.w	ip, [r5, #8]
   e13ee:	4618      	mov	r0, r3
   e13f0:	463d      	mov	r5, r7

    /*
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
   e13f2:	4639      	mov	r1, r7
   e13f4:	42a1      	cmp	r1, r4
   e13f6:	d00f      	beq.n	e1418 <mbedtls_mpi_add_abs+0x76>
    {
        tmp= *o;
        *p +=  c; c  = ( *p <  c );
   e13f8:	6802      	ldr	r2, [r0, #0]
    /*
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
    {
        tmp= *o;
   e13fa:	f85c e021 	ldr.w	lr, [ip, r1, lsl #2]
        *p +=  c; c  = ( *p <  c );
   e13fe:	18ad      	adds	r5, r5, r2
        *p += tmp; c += ( *p < tmp );
   e1400:	4475      	add	r5, lr
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
    {
        tmp= *o;
        *p +=  c; c  = ( *p <  c );
   e1402:	bf2c      	ite	cs
   e1404:	2201      	movcs	r2, #1
   e1406:	2200      	movcc	r2, #0
        *p += tmp; c += ( *p < tmp );
   e1408:	f840 5b04 	str.w	r5, [r0], #4
    o = B->p; p = X->p; c = 0;

    /*
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
   e140c:	3101      	adds	r1, #1
    {
        tmp= *o;
        *p +=  c; c  = ( *p <  c );
        *p += tmp; c += ( *p < tmp );
   e140e:	45ae      	cmp	lr, r5
   e1410:	bf94      	ite	ls
   e1412:	4615      	movls	r5, r2
   e1414:	1c55      	addhi	r5, r2, #1
    o = B->p; p = X->p; c = 0;

    /*
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
   e1416:	e7ed      	b.n	e13f4 <mbedtls_mpi_add_abs+0x52>
   e1418:	ea4f 0884 	mov.w	r8, r4, lsl #2
   e141c:	4443      	add	r3, r8
        tmp= *o;
        *p +=  c; c  = ( *p <  c );
        *p += tmp; c += ( *p < tmp );
    }

    while( c != 0 )
   e141e:	b1bd      	cbz	r5, e1450 <mbedtls_mpi_add_abs+0xae>
    {
        if( i >= X->n )
   e1420:	6872      	ldr	r2, [r6, #4]
   e1422:	4294      	cmp	r4, r2
   e1424:	f104 0401 	add.w	r4, r4, #1
   e1428:	d306      	bcc.n	e1438 <mbedtls_mpi_add_abs+0x96>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
   e142a:	4621      	mov	r1, r4
   e142c:	4630      	mov	r0, r6
   e142e:	f7ff fc8e 	bl	e0d4e <mbedtls_mpi_grow>
   e1432:	b960      	cbnz	r0, e144e <mbedtls_mpi_add_abs+0xac>
            p = X->p + i;
   e1434:	68b3      	ldr	r3, [r6, #8]
   e1436:	4443      	add	r3, r8
        }

        *p += c; c = ( *p < c ); i++; p++;
   e1438:	681a      	ldr	r2, [r3, #0]
   e143a:	442a      	add	r2, r5
   e143c:	4295      	cmp	r5, r2
   e143e:	f843 2b04 	str.w	r2, [r3], #4
   e1442:	bf94      	ite	ls
   e1444:	2500      	movls	r5, #0
   e1446:	2501      	movhi	r5, #1
   e1448:	f108 0804 	add.w	r8, r8, #4
        tmp= *o;
        *p +=  c; c  = ( *p <  c );
        *p += tmp; c += ( *p < tmp );
    }

    while( c != 0 )
   e144c:	e7e7      	b.n	e141e <mbedtls_mpi_add_abs+0x7c>
    {
        if( i >= X->n )
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
   e144e:	4607      	mov	r7, r0
    }

cleanup:

    return( ret );
}
   e1450:	4638      	mov	r0, r7
   e1452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000e1456 <mbedtls_mpi_sub_abs>:

/*
 * Unsigned subtraction: X = |A| - |B|  (HAC 14.9)
 */
int mbedtls_mpi_sub_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
   e1456:	b5f0      	push	{r4, r5, r6, r7, lr}
   e1458:	460f      	mov	r7, r1
   e145a:	b085      	sub	sp, #20
   e145c:	4606      	mov	r6, r0
    size_t n;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
   e145e:	4611      	mov	r1, r2
   e1460:	4638      	mov	r0, r7

/*
 * Unsigned subtraction: X = |A| - |B|  (HAC 14.9)
 */
int mbedtls_mpi_sub_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
   e1462:	4615      	mov	r5, r2
    size_t n;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
   e1464:	f7ff fea7 	bl	e11b6 <mbedtls_mpi_cmp_abs>
   e1468:	2800      	cmp	r0, #0
   e146a:	db30      	blt.n	e14ce <mbedtls_mpi_sub_abs+0x78>
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   e146c:	2301      	movs	r3, #1
   e146e:	9301      	str	r3, [sp, #4]
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );

    mbedtls_mpi_init( &TB );

    if( X == B )
   e1470:	42b5      	cmp	r5, r6
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
    X->n = 0;
   e1472:	f04f 0300 	mov.w	r3, #0
   e1476:	9302      	str	r3, [sp, #8]
    X->p = NULL;
   e1478:	9303      	str	r3, [sp, #12]
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );

    mbedtls_mpi_init( &TB );

    if( X == B )
   e147a:	d106      	bne.n	e148a <mbedtls_mpi_sub_abs+0x34>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
   e147c:	4629      	mov	r1, r5
   e147e:	a801      	add	r0, sp, #4
   e1480:	f7ff fccd 	bl	e0e1e <mbedtls_mpi_copy>
   e1484:	4604      	mov	r4, r0
   e1486:	b9e8      	cbnz	r0, e14c4 <mbedtls_mpi_sub_abs+0x6e>
        B = &TB;
   e1488:	ad01      	add	r5, sp, #4
    }

    if( X != A )
   e148a:	42b7      	cmp	r7, r6
   e148c:	d107      	bne.n	e149e <mbedtls_mpi_sub_abs+0x48>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );

    /*
     * X should always be positive as a result of unsigned subtractions.
     */
    X->s = 1;
   e148e:	2301      	movs	r3, #1
   e1490:	6033      	str	r3, [r6, #0]

    ret = 0;

    for( n = B->n; n > 0; n-- )
   e1492:	6868      	ldr	r0, [r5, #4]
   e1494:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   e1498:	3b01      	subs	r3, #1
   e149a:	009b      	lsls	r3, r3, #2
   e149c:	e00b      	b.n	e14b6 <mbedtls_mpi_sub_abs+0x60>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
        B = &TB;
    }

    if( X != A )
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
   e149e:	4639      	mov	r1, r7
   e14a0:	4630      	mov	r0, r6
   e14a2:	f7ff fcbc 	bl	e0e1e <mbedtls_mpi_copy>
   e14a6:	4604      	mov	r4, r0
   e14a8:	b960      	cbnz	r0, e14c4 <mbedtls_mpi_sub_abs+0x6e>
   e14aa:	e7f0      	b.n	e148e <mbedtls_mpi_sub_abs+0x38>
    X->s = 1;

    ret = 0;

    for( n = B->n; n > 0; n-- )
        if( B->p[n - 1] != 0 )
   e14ac:	68aa      	ldr	r2, [r5, #8]
   e14ae:	58d2      	ldr	r2, [r2, r3]
   e14b0:	3b04      	subs	r3, #4
   e14b2:	b912      	cbnz	r2, e14ba <mbedtls_mpi_sub_abs+0x64>
     */
    X->s = 1;

    ret = 0;

    for( n = B->n; n > 0; n-- )
   e14b4:	3801      	subs	r0, #1
   e14b6:	2800      	cmp	r0, #0
   e14b8:	d1f8      	bne.n	e14ac <mbedtls_mpi_sub_abs+0x56>
        if( B->p[n - 1] != 0 )
            break;

    mpi_sub_hlp( n, B->p, X->p );
   e14ba:	68b2      	ldr	r2, [r6, #8]
   e14bc:	68a9      	ldr	r1, [r5, #8]
   e14be:	f7ff fb23 	bl	e0b08 <_ZL11mpi_sub_hlpjPmS_>
    /*
     * X should always be positive as a result of unsigned subtractions.
     */
    X->s = 1;

    ret = 0;
   e14c2:	2400      	movs	r4, #0

    mpi_sub_hlp( n, B->p, X->p );

cleanup:

    mbedtls_mpi_free( &TB );
   e14c4:	a801      	add	r0, sp, #4
   e14c6:	f7ff fc30 	bl	e0d2a <mbedtls_mpi_free>

    return( ret );
   e14ca:	4620      	mov	r0, r4
   e14cc:	e001      	b.n	e14d2 <mbedtls_mpi_sub_abs+0x7c>
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
   e14ce:	f06f 0009 	mvn.w	r0, #9
cleanup:

    mbedtls_mpi_free( &TB );

    return( ret );
}
   e14d2:	b005      	add	sp, #20
   e14d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000e14d6 <mbedtls_mpi_add_mpi>:

/*
 * Signed addition: X = A + B
 */
int mbedtls_mpi_add_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
   e14d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret, s;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    s = A->s;
   e14d8:	680c      	ldr	r4, [r1, #0]
    if( A->s * B->s < 0 )
   e14da:	6813      	ldr	r3, [r2, #0]
   e14dc:	4363      	muls	r3, r4

/*
 * Signed addition: X = A + B
 */
int mbedtls_mpi_add_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
   e14de:	4605      	mov	r5, r0
   e14e0:	460f      	mov	r7, r1
   e14e2:	4616      	mov	r6, r2
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    s = A->s;
    if( A->s * B->s < 0 )
   e14e4:	d513      	bpl.n	e150e <mbedtls_mpi_add_mpi+0x38>
    {
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
   e14e6:	4611      	mov	r1, r2
   e14e8:	4638      	mov	r0, r7
   e14ea:	f7ff fe64 	bl	e11b6 <mbedtls_mpi_cmp_abs>
   e14ee:	2800      	cmp	r0, #0
   e14f0:	db05      	blt.n	e14fe <mbedtls_mpi_add_mpi+0x28>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
   e14f2:	4632      	mov	r2, r6
   e14f4:	4639      	mov	r1, r7
   e14f6:	4628      	mov	r0, r5
   e14f8:	f7ff ffad 	bl	e1456 <mbedtls_mpi_sub_abs>
   e14fc:	e009      	b.n	e1512 <mbedtls_mpi_add_mpi+0x3c>
            X->s =  s;
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
   e14fe:	463a      	mov	r2, r7
   e1500:	4631      	mov	r1, r6
   e1502:	4628      	mov	r0, r5
   e1504:	f7ff ffa7 	bl	e1456 <mbedtls_mpi_sub_abs>
   e1508:	b928      	cbnz	r0, e1516 <mbedtls_mpi_add_mpi+0x40>
            X->s = -s;
   e150a:	4264      	negs	r4, r4
   e150c:	e002      	b.n	e1514 <mbedtls_mpi_add_mpi+0x3e>
        }
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
   e150e:	f7ff ff48 	bl	e13a2 <mbedtls_mpi_add_abs>
   e1512:	b900      	cbnz	r0, e1516 <mbedtls_mpi_add_mpi+0x40>
        X->s = s;
   e1514:	602c      	str	r4, [r5, #0]
    }

cleanup:

    return( ret );
}
   e1516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000e1518 <mbedtls_mpi_sub_mpi>:

/*
 * Signed subtraction: X = A - B
 */
int mbedtls_mpi_sub_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
   e1518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret, s;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    s = A->s;
   e151a:	680c      	ldr	r4, [r1, #0]
    if( A->s * B->s > 0 )
   e151c:	6813      	ldr	r3, [r2, #0]
   e151e:	4363      	muls	r3, r4
   e1520:	2b00      	cmp	r3, #0

/*
 * Signed subtraction: X = A - B
 */
int mbedtls_mpi_sub_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
   e1522:	4605      	mov	r5, r0
   e1524:	460f      	mov	r7, r1
   e1526:	4616      	mov	r6, r2
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    s = A->s;
    if( A->s * B->s > 0 )
   e1528:	dd13      	ble.n	e1552 <mbedtls_mpi_sub_mpi+0x3a>
    {
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
   e152a:	4611      	mov	r1, r2
   e152c:	4638      	mov	r0, r7
   e152e:	f7ff fe42 	bl	e11b6 <mbedtls_mpi_cmp_abs>
   e1532:	2800      	cmp	r0, #0
   e1534:	db05      	blt.n	e1542 <mbedtls_mpi_sub_mpi+0x2a>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
   e1536:	4632      	mov	r2, r6
   e1538:	4639      	mov	r1, r7
   e153a:	4628      	mov	r0, r5
   e153c:	f7ff ff8b 	bl	e1456 <mbedtls_mpi_sub_abs>
   e1540:	e009      	b.n	e1556 <mbedtls_mpi_sub_mpi+0x3e>
            X->s =  s;
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
   e1542:	463a      	mov	r2, r7
   e1544:	4631      	mov	r1, r6
   e1546:	4628      	mov	r0, r5
   e1548:	f7ff ff85 	bl	e1456 <mbedtls_mpi_sub_abs>
   e154c:	b928      	cbnz	r0, e155a <mbedtls_mpi_sub_mpi+0x42>
            X->s = -s;
   e154e:	4264      	negs	r4, r4
   e1550:	e002      	b.n	e1558 <mbedtls_mpi_sub_mpi+0x40>
        }
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
   e1552:	f7ff ff26 	bl	e13a2 <mbedtls_mpi_add_abs>
   e1556:	b900      	cbnz	r0, e155a <mbedtls_mpi_sub_mpi+0x42>
        X->s = s;
   e1558:	602c      	str	r4, [r5, #0]
    }

cleanup:

    return( ret );
}
   e155a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000e155c <mbedtls_mpi_add_int>:

/*
 * Signed addition: X = A + b
 */
int mbedtls_mpi_add_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
{
   e155c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );

    p[0] = ( b < 0 ) ? -b : b;
   e155e:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
   e1562:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    _B.s = ( b < 0 ) ? -1 : 1;
   e1566:	2a00      	cmp	r2, #0
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );

    p[0] = ( b < 0 ) ? -b : b;
   e1568:	9300      	str	r3, [sp, #0]
    _B.s = ( b < 0 ) ? -1 : 1;
   e156a:	bfb4      	ite	lt
   e156c:	f04f 33ff 	movlt.w	r3, #4294967295
   e1570:	2301      	movge	r3, #1
   e1572:	9301      	str	r3, [sp, #4]
    _B.n = 1;
    _B.p = p;

    return( mbedtls_mpi_add_mpi( X, A, &_B ) );
   e1574:	aa01      	add	r2, sp, #4
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );

    p[0] = ( b < 0 ) ? -b : b;
    _B.s = ( b < 0 ) ? -1 : 1;
    _B.n = 1;
   e1576:	2301      	movs	r3, #1
   e1578:	9302      	str	r3, [sp, #8]
    _B.p = p;
   e157a:	f8cd d00c 	str.w	sp, [sp, #12]

    return( mbedtls_mpi_add_mpi( X, A, &_B ) );
   e157e:	f7ff ffaa 	bl	e14d6 <mbedtls_mpi_add_mpi>
}
   e1582:	b005      	add	sp, #20
   e1584:	f85d fb04 	ldr.w	pc, [sp], #4

000e1588 <mbedtls_mpi_sub_int>:

/*
 * Signed subtraction: X = A - b
 */
int mbedtls_mpi_sub_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
{
   e1588:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );

    p[0] = ( b < 0 ) ? -b : b;
   e158a:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
   e158e:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    _B.s = ( b < 0 ) ? -1 : 1;
   e1592:	2a00      	cmp	r2, #0
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );

    p[0] = ( b < 0 ) ? -b : b;
   e1594:	9300      	str	r3, [sp, #0]
    _B.s = ( b < 0 ) ? -1 : 1;
   e1596:	bfb4      	ite	lt
   e1598:	f04f 33ff 	movlt.w	r3, #4294967295
   e159c:	2301      	movge	r3, #1
   e159e:	9301      	str	r3, [sp, #4]
    _B.n = 1;
    _B.p = p;

    return( mbedtls_mpi_sub_mpi( X, A, &_B ) );
   e15a0:	aa01      	add	r2, sp, #4
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );

    p[0] = ( b < 0 ) ? -b : b;
    _B.s = ( b < 0 ) ? -1 : 1;
    _B.n = 1;
   e15a2:	2301      	movs	r3, #1
   e15a4:	9302      	str	r3, [sp, #8]
    _B.p = p;
   e15a6:	f8cd d00c 	str.w	sp, [sp, #12]

    return( mbedtls_mpi_sub_mpi( X, A, &_B ) );
   e15aa:	f7ff ffb5 	bl	e1518 <mbedtls_mpi_sub_mpi>
}
   e15ae:	b005      	add	sp, #20
   e15b0:	f85d fb04 	ldr.w	pc, [sp], #4

000e15b4 <mbedtls_mpi_mul_mpi>:

/*
 * Baseline multiplication: X = A * B  (HAC 14.12)
 */
int mbedtls_mpi_mul_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
   e15b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e15b8:	b086      	sub	sp, #24
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
    X->n = 0;
   e15ba:	2300      	movs	r3, #0

/*
 * Baseline multiplication: X = A * B  (HAC 14.12)
 */
int mbedtls_mpi_mul_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
   e15bc:	4615      	mov	r5, r2
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
   e15be:	4288      	cmp	r0, r1
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
    X->n = 0;
   e15c0:	f04f 0201 	mov.w	r2, #1

/*
 * Baseline multiplication: X = A * B  (HAC 14.12)
 */
int mbedtls_mpi_mul_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
   e15c4:	4681      	mov	r9, r0
   e15c6:	460e      	mov	r6, r1
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
    X->n = 0;
   e15c8:	e88d 000c 	stmia.w	sp, {r2, r3}
    X->p = NULL;
   e15cc:	9302      	str	r3, [sp, #8]
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   e15ce:	9203      	str	r2, [sp, #12]
    X->n = 0;
   e15d0:	9304      	str	r3, [sp, #16]
    X->p = NULL;
   e15d2:	9305      	str	r3, [sp, #20]
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
   e15d4:	d106      	bne.n	e15e4 <mbedtls_mpi_mul_mpi+0x30>
   e15d6:	4668      	mov	r0, sp
   e15d8:	f7ff fc21 	bl	e0e1e <mbedtls_mpi_copy>
   e15dc:	4604      	mov	r4, r0
   e15de:	2800      	cmp	r0, #0
   e15e0:	d14d      	bne.n	e167e <mbedtls_mpi_mul_mpi+0xca>
   e15e2:	466e      	mov	r6, sp
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }
   e15e4:	45a9      	cmp	r9, r5
   e15e6:	d107      	bne.n	e15f8 <mbedtls_mpi_mul_mpi+0x44>
   e15e8:	4649      	mov	r1, r9
   e15ea:	a803      	add	r0, sp, #12
   e15ec:	f7ff fc17 	bl	e0e1e <mbedtls_mpi_copy>
   e15f0:	4604      	mov	r4, r0
   e15f2:	2800      	cmp	r0, #0
   e15f4:	d143      	bne.n	e167e <mbedtls_mpi_mul_mpi+0xca>
   e15f6:	ad03      	add	r5, sp, #12

    for( i = A->n; i > 0; i-- )
   e15f8:	f8d6 a004 	ldr.w	sl, [r6, #4]
   e15fc:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
   e1600:	3b01      	subs	r3, #1
   e1602:	009b      	lsls	r3, r3, #2
   e1604:	f1ba 0f00 	cmp.w	sl, #0
   e1608:	d006      	beq.n	e1618 <mbedtls_mpi_mul_mpi+0x64>
        if( A->p[i - 1] != 0 )
   e160a:	68b2      	ldr	r2, [r6, #8]
   e160c:	58d2      	ldr	r2, [r2, r3]
   e160e:	3b04      	subs	r3, #4
   e1610:	b912      	cbnz	r2, e1618 <mbedtls_mpi_mul_mpi+0x64>
    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }

    for( i = A->n; i > 0; i-- )
   e1612:	f10a 3aff 	add.w	sl, sl, #4294967295
   e1616:	e7f5      	b.n	e1604 <mbedtls_mpi_mul_mpi+0x50>
        if( A->p[i - 1] != 0 )
            break;

    for( j = B->n; j > 0; j-- )
   e1618:	686f      	ldr	r7, [r5, #4]
   e161a:	f107 4380 	add.w	r3, r7, #1073741824	; 0x40000000
   e161e:	3b01      	subs	r3, #1
   e1620:	009b      	lsls	r3, r3, #2
   e1622:	b12f      	cbz	r7, e1630 <mbedtls_mpi_mul_mpi+0x7c>
        if( B->p[j - 1] != 0 )
   e1624:	68aa      	ldr	r2, [r5, #8]
   e1626:	58d2      	ldr	r2, [r2, r3]
   e1628:	3b04      	subs	r3, #4
   e162a:	b90a      	cbnz	r2, e1630 <mbedtls_mpi_mul_mpi+0x7c>

    for( i = A->n; i > 0; i-- )
        if( A->p[i - 1] != 0 )
            break;

    for( j = B->n; j > 0; j-- )
   e162c:	3f01      	subs	r7, #1
   e162e:	e7f8      	b.n	e1622 <mbedtls_mpi_mul_mpi+0x6e>
        if( B->p[j - 1] != 0 )
            break;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );
   e1630:	eb0a 0107 	add.w	r1, sl, r7
   e1634:	4648      	mov	r0, r9
   e1636:	f7ff fb8a 	bl	e0d4e <mbedtls_mpi_grow>
   e163a:	4604      	mov	r4, r0
   e163c:	b9f8      	cbnz	r0, e167e <mbedtls_mpi_mul_mpi+0xca>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
   e163e:	4601      	mov	r1, r0
   e1640:	4648      	mov	r0, r9
   e1642:	f7ff fc4d 	bl	e0ee0 <mbedtls_mpi_lset>
   e1646:	4604      	mov	r4, r0
   e1648:	b9c8      	cbnz	r0, e167e <mbedtls_mpi_mul_mpi+0xca>
   e164a:	f107 4880 	add.w	r8, r7, #1073741824	; 0x40000000
   e164e:	f108 38ff 	add.w	r8, r8, #4294967295
   e1652:	ea4f 0888 	mov.w	r8, r8, lsl #2

    for( ; j > 0; j-- )
   e1656:	b16f      	cbz	r7, e1674 <mbedtls_mpi_mul_mpi+0xc0>
        mpi_mul_hlp( i, A->p, X->p + j - 1, B->p[j - 1] );
   e1658:	68ab      	ldr	r3, [r5, #8]
   e165a:	f8d9 2008 	ldr.w	r2, [r9, #8]
   e165e:	f853 3008 	ldr.w	r3, [r3, r8]
   e1662:	68b1      	ldr	r1, [r6, #8]
   e1664:	4442      	add	r2, r8
   e1666:	4650      	mov	r0, sl
   e1668:	f7ff fa78 	bl	e0b5c <_ZL11mpi_mul_hlpjPmS_m>
            break;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );

    for( ; j > 0; j-- )
   e166c:	3f01      	subs	r7, #1
   e166e:	f1a8 0804 	sub.w	r8, r8, #4
   e1672:	e7f0      	b.n	e1656 <mbedtls_mpi_mul_mpi+0xa2>
        mpi_mul_hlp( i, A->p, X->p + j - 1, B->p[j - 1] );

    X->s = A->s * B->s;
   e1674:	6832      	ldr	r2, [r6, #0]
   e1676:	682b      	ldr	r3, [r5, #0]
   e1678:	4353      	muls	r3, r2
   e167a:	f8c9 3000 	str.w	r3, [r9]

cleanup:

    mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TA );
   e167e:	a803      	add	r0, sp, #12
   e1680:	f7ff fb53 	bl	e0d2a <mbedtls_mpi_free>
   e1684:	4668      	mov	r0, sp
   e1686:	f7ff fb50 	bl	e0d2a <mbedtls_mpi_free>

    return( ret );
}
   e168a:	4620      	mov	r0, r4
   e168c:	b006      	add	sp, #24
   e168e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000e1692 <mbedtls_mpi_mul_int>:

/*
 * Baseline multiplication: X = A * b
 */
int mbedtls_mpi_mul_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_uint b )
{
   e1692:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );

    _B.s = 1;
   e1694:	2301      	movs	r3, #1
    _B.n = 1;
    _B.p = p;
    p[0] = b;
   e1696:	9200      	str	r2, [sp, #0]

    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
   e1698:	aa01      	add	r2, sp, #4
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );

    _B.s = 1;
   e169a:	9301      	str	r3, [sp, #4]
    _B.n = 1;
   e169c:	9302      	str	r3, [sp, #8]
    _B.p = p;
   e169e:	f8cd d00c 	str.w	sp, [sp, #12]
    p[0] = b;

    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
   e16a2:	f7ff ff87 	bl	e15b4 <mbedtls_mpi_mul_mpi>
}
   e16a6:	b005      	add	sp, #20
   e16a8:	f85d fb04 	ldr.w	pc, [sp], #4

000e16ac <mbedtls_mpi_div_mpi>:
/*
 * Division by mbedtls_mpi: A = Q * B + R  (HAC 14.20)
 */
int mbedtls_mpi_div_mpi( mbedtls_mpi *Q, mbedtls_mpi *R, const mbedtls_mpi *A,
                         const mbedtls_mpi *B )
{
   e16ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e16b0:	b09b      	sub	sp, #108	; 0x6c
   e16b2:	460f      	mov	r7, r1
   e16b4:	9001      	str	r0, [sp, #4]
    size_t i, n, t, k;
    mbedtls_mpi X, Y, Z, T1, T2;
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
   e16b6:	2100      	movs	r1, #0
   e16b8:	4618      	mov	r0, r3
/*
 * Division by mbedtls_mpi: A = Q * B + R  (HAC 14.20)
 */
int mbedtls_mpi_div_mpi( mbedtls_mpi *Q, mbedtls_mpi *R, const mbedtls_mpi *A,
                         const mbedtls_mpi *B )
{
   e16ba:	4690      	mov	r8, r2
   e16bc:	9304      	str	r3, [sp, #16]
    size_t i, n, t, k;
    mbedtls_mpi X, Y, Z, T1, T2;
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
   e16be:	f7ff fe5a 	bl	e1376 <mbedtls_mpi_cmp_int>
   e16c2:	2800      	cmp	r0, #0
   e16c4:	f000 81ad 	beq.w	e1a22 <mbedtls_mpi_div_mpi+0x376>
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
    X->n = 0;
   e16c8:	2400      	movs	r4, #0
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   e16ca:	2501      	movs	r5, #1
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );

    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 );

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
   e16cc:	9904      	ldr	r1, [sp, #16]
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   e16ce:	950b      	str	r5, [sp, #44]	; 0x2c
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );

    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 );

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
   e16d0:	4640      	mov	r0, r8
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
    X->n = 0;
   e16d2:	940c      	str	r4, [sp, #48]	; 0x30
    X->p = NULL;
   e16d4:	940d      	str	r4, [sp, #52]	; 0x34
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   e16d6:	950e      	str	r5, [sp, #56]	; 0x38
    X->n = 0;
   e16d8:	940f      	str	r4, [sp, #60]	; 0x3c
    X->p = NULL;
   e16da:	9410      	str	r4, [sp, #64]	; 0x40
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   e16dc:	9511      	str	r5, [sp, #68]	; 0x44
    X->n = 0;
   e16de:	9412      	str	r4, [sp, #72]	; 0x48
    X->p = NULL;
   e16e0:	9413      	str	r4, [sp, #76]	; 0x4c
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   e16e2:	9514      	str	r5, [sp, #80]	; 0x50
    X->n = 0;
   e16e4:	9415      	str	r4, [sp, #84]	; 0x54
    X->p = NULL;
   e16e6:	9416      	str	r4, [sp, #88]	; 0x58
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   e16e8:	9517      	str	r5, [sp, #92]	; 0x5c
    X->n = 0;
   e16ea:	9418      	str	r4, [sp, #96]	; 0x60
    X->p = NULL;
   e16ec:	9419      	str	r4, [sp, #100]	; 0x64
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );

    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 );

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
   e16ee:	f7ff fd62 	bl	e11b6 <mbedtls_mpi_cmp_abs>
   e16f2:	42a0      	cmp	r0, r4
   e16f4:	da16      	bge.n	e1724 <mbedtls_mpi_div_mpi+0x78>
    {
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
   e16f6:	9b01      	ldr	r3, [sp, #4]
   e16f8:	b90b      	cbnz	r3, e16fe <mbedtls_mpi_div_mpi+0x52>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
   e16fa:	b94f      	cbnz	r7, e1710 <mbedtls_mpi_div_mpi+0x64>
   e16fc:	e010      	b.n	e1720 <mbedtls_mpi_div_mpi+0x74>
    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 );

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
    {
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
   e16fe:	4621      	mov	r1, r4
   e1700:	9801      	ldr	r0, [sp, #4]
   e1702:	f7ff fbed 	bl	e0ee0 <mbedtls_mpi_lset>
   e1706:	4604      	mov	r4, r0
   e1708:	2800      	cmp	r0, #0
   e170a:	f040 8179 	bne.w	e1a00 <mbedtls_mpi_div_mpi+0x354>
   e170e:	e7f4      	b.n	e16fa <mbedtls_mpi_div_mpi+0x4e>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
   e1710:	4641      	mov	r1, r8
   e1712:	4638      	mov	r0, r7
   e1714:	f7ff fb83 	bl	e0e1e <mbedtls_mpi_copy>
   e1718:	4604      	mov	r4, r0
   e171a:	2800      	cmp	r0, #0
   e171c:	f040 8170 	bne.w	e1a00 <mbedtls_mpi_div_mpi+0x354>
        return( 0 );
   e1720:	2000      	movs	r0, #0
   e1722:	e180      	b.n	e1a26 <mbedtls_mpi_div_mpi+0x37a>
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
   e1724:	4641      	mov	r1, r8
   e1726:	a80b      	add	r0, sp, #44	; 0x2c
   e1728:	f7ff fb79 	bl	e0e1e <mbedtls_mpi_copy>
   e172c:	4604      	mov	r4, r0
   e172e:	2800      	cmp	r0, #0
   e1730:	f040 8166 	bne.w	e1a00 <mbedtls_mpi_div_mpi+0x354>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
   e1734:	ae0e      	add	r6, sp, #56	; 0x38
   e1736:	9904      	ldr	r1, [sp, #16]
   e1738:	4630      	mov	r0, r6
   e173a:	f7ff fb70 	bl	e0e1e <mbedtls_mpi_copy>
   e173e:	4604      	mov	r4, r0
   e1740:	2800      	cmp	r0, #0
   e1742:	f040 815d 	bne.w	e1a00 <mbedtls_mpi_div_mpi+0x354>
    X.s = Y.s = 1;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
   e1746:	f8d8 1004 	ldr.w	r1, [r8, #4]
        return( 0 );
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
    X.s = Y.s = 1;
   e174a:	950e      	str	r5, [sp, #56]	; 0x38

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
   e174c:	3102      	adds	r1, #2
   e174e:	a811      	add	r0, sp, #68	; 0x44
        return( 0 );
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
    X.s = Y.s = 1;
   e1750:	950b      	str	r5, [sp, #44]	; 0x2c

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
   e1752:	f7ff fafc 	bl	e0d4e <mbedtls_mpi_grow>
   e1756:	4604      	mov	r4, r0
   e1758:	2800      	cmp	r0, #0
   e175a:	f040 8151 	bne.w	e1a00 <mbedtls_mpi_div_mpi+0x354>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Z,  0 ) );
   e175e:	4601      	mov	r1, r0
   e1760:	a811      	add	r0, sp, #68	; 0x44
   e1762:	f7ff fbbd 	bl	e0ee0 <mbedtls_mpi_lset>
   e1766:	4604      	mov	r4, r0
   e1768:	2800      	cmp	r0, #0
   e176a:	f040 8149 	bne.w	e1a00 <mbedtls_mpi_div_mpi+0x354>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T1, 2 ) );
   e176e:	2102      	movs	r1, #2
   e1770:	a814      	add	r0, sp, #80	; 0x50
   e1772:	f7ff faec 	bl	e0d4e <mbedtls_mpi_grow>
   e1776:	4604      	mov	r4, r0
   e1778:	2800      	cmp	r0, #0
   e177a:	f040 8141 	bne.w	e1a00 <mbedtls_mpi_div_mpi+0x354>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T2, 3 ) );
   e177e:	2103      	movs	r1, #3
   e1780:	a817      	add	r0, sp, #92	; 0x5c
   e1782:	f7ff fae4 	bl	e0d4e <mbedtls_mpi_grow>
   e1786:	4604      	mov	r4, r0
   e1788:	2800      	cmp	r0, #0
   e178a:	f040 8139 	bne.w	e1a00 <mbedtls_mpi_div_mpi+0x354>

    k = mbedtls_mpi_bitlen( &Y ) % biL;
   e178e:	4630      	mov	r0, r6
   e1790:	f7ff fbec 	bl	e0f6c <mbedtls_mpi_bitlen>
   e1794:	f000 001f 	and.w	r0, r0, #31
    if( k < biL - 1 )
   e1798:	281f      	cmp	r0, #31
   e179a:	d013      	beq.n	e17c4 <mbedtls_mpi_div_mpi+0x118>
    {
        k = biL - 1 - k;
   e179c:	f1c0 031f 	rsb	r3, r0, #31
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
   e17a0:	4619      	mov	r1, r3
   e17a2:	a80b      	add	r0, sp, #44	; 0x2c
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T2, 3 ) );

    k = mbedtls_mpi_bitlen( &Y ) % biL;
    if( k < biL - 1 )
    {
        k = biL - 1 - k;
   e17a4:	9302      	str	r3, [sp, #8]
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
   e17a6:	f7ff fc73 	bl	e1090 <mbedtls_mpi_shift_l>
   e17aa:	4604      	mov	r4, r0
   e17ac:	2800      	cmp	r0, #0
   e17ae:	f040 8127 	bne.w	e1a00 <mbedtls_mpi_div_mpi+0x354>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
   e17b2:	9902      	ldr	r1, [sp, #8]
   e17b4:	4630      	mov	r0, r6
   e17b6:	f7ff fc6b 	bl	e1090 <mbedtls_mpi_shift_l>
   e17ba:	4604      	mov	r4, r0
   e17bc:	2800      	cmp	r0, #0
   e17be:	f040 811f 	bne.w	e1a00 <mbedtls_mpi_div_mpi+0x354>
   e17c2:	e000      	b.n	e17c6 <mbedtls_mpi_div_mpi+0x11a>
    }
    else k = 0;
   e17c4:	9402      	str	r4, [sp, #8]

    n = X.n - 1;
   e17c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    t = Y.n - 1;
   e17c8:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
    }
    else k = 0;

    n = X.n - 1;
   e17cc:	f105 39ff 	add.w	r9, r5, #4294967295
    t = Y.n - 1;
   e17d0:	f10a 33ff 	add.w	r3, sl, #4294967295
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
   e17d4:	ebc3 0b09 	rsb	fp, r3, r9
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
    }
    else k = 0;

    n = X.n - 1;
    t = Y.n - 1;
   e17d8:	9300      	str	r3, [sp, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
   e17da:	ea4f 134b 	mov.w	r3, fp, lsl #5
   e17de:	4619      	mov	r1, r3
   e17e0:	4630      	mov	r0, r6
   e17e2:	9303      	str	r3, [sp, #12]
   e17e4:	f7ff fc54 	bl	e1090 <mbedtls_mpi_shift_l>
   e17e8:	4604      	mov	r4, r0
   e17ea:	2800      	cmp	r0, #0
   e17ec:	f040 8108 	bne.w	e1a00 <mbedtls_mpi_div_mpi+0x354>

    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
    {
        Z.p[n - t]++;
   e17f0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2

    n = X.n - 1;
    t = Y.n - 1;
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );

    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
   e17f4:	4631      	mov	r1, r6
   e17f6:	a80b      	add	r0, sp, #44	; 0x2c
   e17f8:	f7ff fd78 	bl	e12ec <mbedtls_mpi_cmp_mpi>
   e17fc:	2800      	cmp	r0, #0
   e17fe:	db0e      	blt.n	e181e <mbedtls_mpi_div_mpi+0x172>
    {
        Z.p[n - t]++;
   e1800:	9913      	ldr	r1, [sp, #76]	; 0x4c
   e1802:	f851 200b 	ldr.w	r2, [r1, fp]
   e1806:	3201      	adds	r2, #1
   e1808:	f841 200b 	str.w	r2, [r1, fp]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
   e180c:	a90b      	add	r1, sp, #44	; 0x2c
   e180e:	4632      	mov	r2, r6
   e1810:	4608      	mov	r0, r1
   e1812:	f7ff fe81 	bl	e1518 <mbedtls_mpi_sub_mpi>
   e1816:	4604      	mov	r4, r0
   e1818:	2800      	cmp	r0, #0
   e181a:	d0eb      	beq.n	e17f4 <mbedtls_mpi_div_mpi+0x148>
   e181c:	e0f0      	b.n	e1a00 <mbedtls_mpi_div_mpi+0x354>
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );
   e181e:	9903      	ldr	r1, [sp, #12]
   e1820:	4630      	mov	r0, r6
   e1822:	f7ff fc84 	bl	e112e <mbedtls_mpi_shift_r>
   e1826:	4604      	mov	r4, r0
   e1828:	2800      	cmp	r0, #0
   e182a:	f040 80e9 	bne.w	e1a00 <mbedtls_mpi_div_mpi+0x354>

    for( i = n; i > t ; i-- )
    {
        if( X.p[i] >= Y.p[t] )
   e182e:	9b00      	ldr	r3, [sp, #0]
   e1830:	009b      	lsls	r3, r3, #2
   e1832:	9305      	str	r3, [sp, #20]
        do
        {
            Z.p[i - t - 1]--;

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
   e1834:	3b04      	subs	r3, #4
   e1836:	f105 4680 	add.w	r6, r5, #1073741824	; 0x40000000
   e183a:	9308      	str	r3, [sp, #32]
   e183c:	f105 6300 	add.w	r3, r5, #134217728	; 0x8000000
   e1840:	3b01      	subs	r3, #1
   e1842:	3e01      	subs	r6, #1
   e1844:	ebca 0606 	rsb	r6, sl, r6
   e1848:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
   e184c:	ebca 0a03 	rsb	sl, sl, r3
   e1850:	ea4f 134a 	mov.w	r3, sl, lsl #5
   e1854:	3d02      	subs	r5, #2
   e1856:	00b6      	lsls	r6, r6, #2
   e1858:	9303      	str	r3, [sp, #12]
   e185a:	00ad      	lsls	r5, r5, #2
        Z.p[n - t]++;
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );

    for( i = n; i > t ; i-- )
   e185c:	9b00      	ldr	r3, [sp, #0]
   e185e:	4599      	cmp	r9, r3
   e1860:	f240 80a8 	bls.w	e19b4 <mbedtls_mpi_div_mpi+0x308>
   e1864:	1d2b      	adds	r3, r5, #4
    {
        if( X.p[i] >= Y.p[t] )
   e1866:	9805      	ldr	r0, [sp, #20]
   e1868:	990d      	ldr	r1, [sp, #52]	; 0x34
   e186a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   e186c:	9309      	str	r3, [sp, #36]	; 0x24
   e186e:	5812      	ldr	r2, [r2, r0]
   e1870:	58cb      	ldr	r3, [r1, r3]
   e1872:	9813      	ldr	r0, [sp, #76]	; 0x4c
   e1874:	4293      	cmp	r3, r2
   e1876:	d303      	bcc.n	e1880 <mbedtls_mpi_div_mpi+0x1d4>
            Z.p[i - t - 1] = ~0;
   e1878:	f04f 33ff 	mov.w	r3, #4294967295
   e187c:	5183      	str	r3, [r0, r6]
   e187e:	e01b      	b.n	e18b8 <mbedtls_mpi_div_mpi+0x20c>
        else
        {
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
   e1880:	eb00 0a06 	add.w	sl, r0, r6
   e1884:	5948      	ldr	r0, [r1, r5]
#endif

    /*
     * Check for overflow
     */
    if( 0 == d || u1 >= d )
   e1886:	b19a      	cbz	r2, e18b0 <mbedtls_mpi_div_mpi+0x204>

        return ( ~0 );
    }

#if defined(MBEDTLS_HAVE_UDBL)
    dividend  = (mbedtls_t_udbl) u1 << biL;
   e1888:	9307      	str	r3, [sp, #28]
   e188a:	2300      	movs	r3, #0
   e188c:	9306      	str	r3, [sp, #24]
    dividend |= (mbedtls_t_udbl) u0;
    quotient = dividend / d;
   e188e:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
   e1892:	ea4b 0b00 	orr.w	fp, fp, r0
   e1896:	4658      	mov	r0, fp
   e1898:	4661      	mov	r1, ip
   e189a:	f007 fe1f 	bl	e94dc <__aeabi_uldivmod>
        quotient = ( (mbedtls_t_udbl) 1 << biL ) - 1;

    if( r != NULL )
        *r = (mbedtls_mpi_uint)( dividend - (quotient * d ) );

    return (mbedtls_mpi_uint) quotient;
   e189e:	2300      	movs	r3, #0
   e18a0:	f04f 32ff 	mov.w	r2, #4294967295
   e18a4:	428b      	cmp	r3, r1
   e18a6:	bf08      	it	eq
   e18a8:	4282      	cmpeq	r2, r0
   e18aa:	d203      	bcs.n	e18b4 <mbedtls_mpi_div_mpi+0x208>
   e18ac:	4610      	mov	r0, r2
   e18ae:	e001      	b.n	e18b4 <mbedtls_mpi_div_mpi+0x208>
     */
    if( 0 == d || u1 >= d )
    {
        if (r != NULL) *r = ~0;

        return ( ~0 );
   e18b0:	f04f 30ff 	mov.w	r0, #4294967295
        if( X.p[i] >= Y.p[t] )
            Z.p[i - t - 1] = ~0;
        else
        {
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
                                                            Y.p[t], NULL);
   e18b4:	f8ca 0000 	str.w	r0, [sl]
        }

        Z.p[i - t - 1]++;
   e18b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   e18ba:	5993      	ldr	r3, [r2, r6]
   e18bc:	3301      	adds	r3, #1
   e18be:	5193      	str	r3, [r2, r6]
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
            T1.p[1] = Y.p[t];
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
   e18c0:	f1a5 0a04 	sub.w	sl, r5, #4
        }

        Z.p[i - t - 1]++;
        do
        {
            Z.p[i - t - 1]--;
   e18c4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   e18c6:	5993      	ldr	r3, [r2, r6]
   e18c8:	3b01      	subs	r3, #1
   e18ca:	5193      	str	r3, [r2, r6]

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
   e18cc:	2100      	movs	r1, #0
   e18ce:	a814      	add	r0, sp, #80	; 0x50
   e18d0:	f7ff fb06 	bl	e0ee0 <mbedtls_mpi_lset>
   e18d4:	2800      	cmp	r0, #0
   e18d6:	f040 8090 	bne.w	e19fa <mbedtls_mpi_div_mpi+0x34e>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
   e18da:	9b00      	ldr	r3, [sp, #0]
   e18dc:	9a16      	ldr	r2, [sp, #88]	; 0x58
   e18de:	b11b      	cbz	r3, e18e8 <mbedtls_mpi_div_mpi+0x23c>
   e18e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   e18e2:	9908      	ldr	r1, [sp, #32]
   e18e4:	585b      	ldr	r3, [r3, r1]
   e18e6:	e000      	b.n	e18ea <mbedtls_mpi_div_mpi+0x23e>
   e18e8:	9b00      	ldr	r3, [sp, #0]
   e18ea:	6013      	str	r3, [r2, #0]
            T1.p[1] = Y.p[t];
   e18ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
   e18ee:	9a05      	ldr	r2, [sp, #20]
   e18f0:	589a      	ldr	r2, [r3, r2]
   e18f2:	9b16      	ldr	r3, [sp, #88]	; 0x58
   e18f4:	605a      	str	r2, [r3, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
   e18f6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   e18f8:	a914      	add	r1, sp, #80	; 0x50
   e18fa:	4608      	mov	r0, r1
   e18fc:	599a      	ldr	r2, [r3, r6]
   e18fe:	f7ff fec8 	bl	e1692 <mbedtls_mpi_mul_int>
   e1902:	4601      	mov	r1, r0
   e1904:	2800      	cmp	r0, #0
   e1906:	d17a      	bne.n	e19fe <mbedtls_mpi_div_mpi+0x352>

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
   e1908:	a817      	add	r0, sp, #92	; 0x5c
   e190a:	f7ff fae9 	bl	e0ee0 <mbedtls_mpi_lset>
   e190e:	2800      	cmp	r0, #0
   e1910:	d173      	bne.n	e19fa <mbedtls_mpi_div_mpi+0x34e>
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
   e1912:	f1b9 0f01 	cmp.w	r9, #1
   e1916:	bf18      	it	ne
   e1918:	9a0d      	ldrne	r2, [sp, #52]	; 0x34
   e191a:	9b19      	ldr	r3, [sp, #100]	; 0x64
   e191c:	bf18      	it	ne
   e191e:	f852 000a 	ldrne.w	r0, [r2, sl]
   e1922:	6018      	str	r0, [r3, #0]
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
   e1924:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   e1926:	595a      	ldr	r2, [r3, r5]
   e1928:	9b19      	ldr	r3, [sp, #100]	; 0x64
   e192a:	605a      	str	r2, [r3, #4]
            T2.p[2] = X.p[i];
   e192c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   e192e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   e1930:	589a      	ldr	r2, [r3, r2]
   e1932:	9b19      	ldr	r3, [sp, #100]	; 0x64
        }
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
   e1934:	a917      	add	r1, sp, #92	; 0x5c
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
            T2.p[2] = X.p[i];
   e1936:	609a      	str	r2, [r3, #8]
        }
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
   e1938:	a814      	add	r0, sp, #80	; 0x50
   e193a:	f7ff fcd7 	bl	e12ec <mbedtls_mpi_cmp_mpi>
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
                                                            Y.p[t], NULL);
        }

        Z.p[i - t - 1]++;
        do
   e193e:	2800      	cmp	r0, #0
   e1940:	dcc0      	bgt.n	e18c4 <mbedtls_mpi_div_mpi+0x218>
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
            T2.p[2] = X.p[i];
        }
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );

        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
   e1942:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   e1944:	a90e      	add	r1, sp, #56	; 0x38
   e1946:	599a      	ldr	r2, [r3, r6]
   e1948:	a814      	add	r0, sp, #80	; 0x50
   e194a:	f7ff fea2 	bl	e1692 <mbedtls_mpi_mul_int>
   e194e:	2800      	cmp	r0, #0
   e1950:	d153      	bne.n	e19fa <mbedtls_mpi_div_mpi+0x34e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );
   e1952:	9903      	ldr	r1, [sp, #12]
   e1954:	a814      	add	r0, sp, #80	; 0x50
   e1956:	f7ff fb9b 	bl	e1090 <mbedtls_mpi_shift_l>
   e195a:	2800      	cmp	r0, #0
   e195c:	d14d      	bne.n	e19fa <mbedtls_mpi_div_mpi+0x34e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );
   e195e:	a90b      	add	r1, sp, #44	; 0x2c
   e1960:	4608      	mov	r0, r1
   e1962:	aa14      	add	r2, sp, #80	; 0x50
   e1964:	f7ff fdd8 	bl	e1518 <mbedtls_mpi_sub_mpi>
   e1968:	4601      	mov	r1, r0
   e196a:	2800      	cmp	r0, #0
   e196c:	d147      	bne.n	e19fe <mbedtls_mpi_div_mpi+0x352>

        if( mbedtls_mpi_cmp_int( &X, 0 ) < 0 )
   e196e:	a80b      	add	r0, sp, #44	; 0x2c
   e1970:	f7ff fd01 	bl	e1376 <mbedtls_mpi_cmp_int>
   e1974:	2800      	cmp	r0, #0
   e1976:	da15      	bge.n	e19a4 <mbedtls_mpi_div_mpi+0x2f8>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );
   e1978:	a90e      	add	r1, sp, #56	; 0x38
   e197a:	a814      	add	r0, sp, #80	; 0x50
   e197c:	f7ff fa4f 	bl	e0e1e <mbedtls_mpi_copy>
   e1980:	2800      	cmp	r0, #0
   e1982:	d13a      	bne.n	e19fa <mbedtls_mpi_div_mpi+0x34e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );
   e1984:	9903      	ldr	r1, [sp, #12]
   e1986:	a814      	add	r0, sp, #80	; 0x50
   e1988:	f7ff fb82 	bl	e1090 <mbedtls_mpi_shift_l>
   e198c:	2800      	cmp	r0, #0
   e198e:	d134      	bne.n	e19fa <mbedtls_mpi_div_mpi+0x34e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
   e1990:	a90b      	add	r1, sp, #44	; 0x2c
   e1992:	aa14      	add	r2, sp, #80	; 0x50
   e1994:	4608      	mov	r0, r1
   e1996:	f7ff fd9e 	bl	e14d6 <mbedtls_mpi_add_mpi>
   e199a:	bb70      	cbnz	r0, e19fa <mbedtls_mpi_div_mpi+0x34e>
            Z.p[i - t - 1]--;
   e199c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   e199e:	5993      	ldr	r3, [r2, r6]
   e19a0:	3b01      	subs	r3, #1
   e19a2:	5193      	str	r3, [r2, r6]
   e19a4:	9b03      	ldr	r3, [sp, #12]
   e19a6:	3b20      	subs	r3, #32
        Z.p[n - t]++;
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );

    for( i = n; i > t ; i-- )
   e19a8:	f109 39ff 	add.w	r9, r9, #4294967295
   e19ac:	3e04      	subs	r6, #4
   e19ae:	9303      	str	r3, [sp, #12]
   e19b0:	3d04      	subs	r5, #4
   e19b2:	e753      	b.n	e185c <mbedtls_mpi_div_mpi+0x1b0>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
            Z.p[i - t - 1]--;
        }
    }

    if( Q != NULL )
   e19b4:	9b01      	ldr	r3, [sp, #4]
   e19b6:	b15b      	cbz	r3, e19d0 <mbedtls_mpi_div_mpi+0x324>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );
   e19b8:	a911      	add	r1, sp, #68	; 0x44
   e19ba:	4618      	mov	r0, r3
   e19bc:	f7ff fa2f 	bl	e0e1e <mbedtls_mpi_copy>
   e19c0:	b9d8      	cbnz	r0, e19fa <mbedtls_mpi_div_mpi+0x34e>
        Q->s = A->s * B->s;
   e19c2:	9b04      	ldr	r3, [sp, #16]
   e19c4:	f8d8 2000 	ldr.w	r2, [r8]
   e19c8:	681b      	ldr	r3, [r3, #0]
   e19ca:	4353      	muls	r3, r2
   e19cc:	9a01      	ldr	r2, [sp, #4]
   e19ce:	6013      	str	r3, [r2, #0]
    }

    if( R != NULL )
   e19d0:	b1b7      	cbz	r7, e1a00 <mbedtls_mpi_div_mpi+0x354>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
   e19d2:	9902      	ldr	r1, [sp, #8]
   e19d4:	a80b      	add	r0, sp, #44	; 0x2c
   e19d6:	f7ff fbaa 	bl	e112e <mbedtls_mpi_shift_r>
   e19da:	b970      	cbnz	r0, e19fa <mbedtls_mpi_div_mpi+0x34e>
        X.s = A->s;
   e19dc:	f8d8 3000 	ldr.w	r3, [r8]
   e19e0:	930b      	str	r3, [sp, #44]	; 0x2c
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
   e19e2:	a90b      	add	r1, sp, #44	; 0x2c
   e19e4:	4638      	mov	r0, r7
   e19e6:	f7ff fa1a 	bl	e0e1e <mbedtls_mpi_copy>
   e19ea:	4601      	mov	r1, r0
   e19ec:	b938      	cbnz	r0, e19fe <mbedtls_mpi_div_mpi+0x352>

        if( mbedtls_mpi_cmp_int( R, 0 ) == 0 )
   e19ee:	4638      	mov	r0, r7
   e19f0:	f7ff fcc1 	bl	e1376 <mbedtls_mpi_cmp_int>
   e19f4:	b920      	cbnz	r0, e1a00 <mbedtls_mpi_div_mpi+0x354>
            R->s = 1;
   e19f6:	2301      	movs	r3, #1
   e19f8:	603b      	str	r3, [r7, #0]
   e19fa:	4604      	mov	r4, r0
   e19fc:	e000      	b.n	e1a00 <mbedtls_mpi_div_mpi+0x354>
   e19fe:	460c      	mov	r4, r1
    }

cleanup:

    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
   e1a00:	a80b      	add	r0, sp, #44	; 0x2c
   e1a02:	f7ff f992 	bl	e0d2a <mbedtls_mpi_free>
   e1a06:	a80e      	add	r0, sp, #56	; 0x38
   e1a08:	f7ff f98f 	bl	e0d2a <mbedtls_mpi_free>
   e1a0c:	a811      	add	r0, sp, #68	; 0x44
   e1a0e:	f7ff f98c 	bl	e0d2a <mbedtls_mpi_free>
    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 );
   e1a12:	a814      	add	r0, sp, #80	; 0x50
   e1a14:	f7ff f989 	bl	e0d2a <mbedtls_mpi_free>
   e1a18:	a817      	add	r0, sp, #92	; 0x5c
   e1a1a:	f7ff f986 	bl	e0d2a <mbedtls_mpi_free>

    return( ret );
   e1a1e:	4620      	mov	r0, r4
   e1a20:	e001      	b.n	e1a26 <mbedtls_mpi_div_mpi+0x37a>
    mbedtls_mpi X, Y, Z, T1, T2;
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );
   e1a22:	f06f 000b 	mvn.w	r0, #11

    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 );

    return( ret );
}
   e1a26:	b01b      	add	sp, #108	; 0x6c
   e1a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000e1a2c <mbedtls_mpi_mod_mpi>:

/*
 * Modulo: R = A mod B
 */
int mbedtls_mpi_mod_mpi( mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
   e1a2c:	b570      	push	{r4, r5, r6, lr}
   e1a2e:	4604      	mov	r4, r0
   e1a30:	460e      	mov	r6, r1
    int ret;
    MPI_VALIDATE_RET( R != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
   e1a32:	4610      	mov	r0, r2
   e1a34:	2100      	movs	r1, #0

/*
 * Modulo: R = A mod B
 */
int mbedtls_mpi_mod_mpi( mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
   e1a36:	4615      	mov	r5, r2
    int ret;
    MPI_VALIDATE_RET( R != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
   e1a38:	f7ff fc9d 	bl	e1376 <mbedtls_mpi_cmp_int>
   e1a3c:	2800      	cmp	r0, #0
   e1a3e:	db22      	blt.n	e1a86 <mbedtls_mpi_mod_mpi+0x5a>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );

    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );
   e1a40:	462b      	mov	r3, r5
   e1a42:	4632      	mov	r2, r6
   e1a44:	4621      	mov	r1, r4
   e1a46:	2000      	movs	r0, #0
   e1a48:	f7ff fe30 	bl	e16ac <mbedtls_mpi_div_mpi>
   e1a4c:	b9f8      	cbnz	r0, e1a8e <mbedtls_mpi_mod_mpi+0x62>

    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
   e1a4e:	2100      	movs	r1, #0
   e1a50:	4620      	mov	r0, r4
   e1a52:	f7ff fc90 	bl	e1376 <mbedtls_mpi_cmp_int>
   e1a56:	2800      	cmp	r0, #0
   e1a58:	da07      	bge.n	e1a6a <mbedtls_mpi_mod_mpi+0x3e>
      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );
   e1a5a:	462a      	mov	r2, r5
   e1a5c:	4621      	mov	r1, r4
   e1a5e:	4620      	mov	r0, r4
   e1a60:	f7ff fd39 	bl	e14d6 <mbedtls_mpi_add_mpi>
   e1a64:	2800      	cmp	r0, #0
   e1a66:	d0f2      	beq.n	e1a4e <mbedtls_mpi_mod_mpi+0x22>
   e1a68:	bd70      	pop	{r4, r5, r6, pc}

    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
   e1a6a:	4629      	mov	r1, r5
   e1a6c:	4620      	mov	r0, r4
   e1a6e:	f7ff fc3d 	bl	e12ec <mbedtls_mpi_cmp_mpi>
   e1a72:	2800      	cmp	r0, #0
   e1a74:	db0a      	blt.n	e1a8c <mbedtls_mpi_mod_mpi+0x60>
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );
   e1a76:	462a      	mov	r2, r5
   e1a78:	4621      	mov	r1, r4
   e1a7a:	4620      	mov	r0, r4
   e1a7c:	f7ff fd4c 	bl	e1518 <mbedtls_mpi_sub_mpi>
   e1a80:	2800      	cmp	r0, #0
   e1a82:	d0f2      	beq.n	e1a6a <mbedtls_mpi_mod_mpi+0x3e>
   e1a84:	bd70      	pop	{r4, r5, r6, pc}
    MPI_VALIDATE_RET( R != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
   e1a86:	f06f 0009 	mvn.w	r0, #9
   e1a8a:	bd70      	pop	{r4, r5, r6, pc}
   e1a8c:	2000      	movs	r0, #0
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );

cleanup:

    return( ret );
}
   e1a8e:	bd70      	pop	{r4, r5, r6, pc}

000e1a90 <mbedtls_mpi_exp_mod>:
 * Sliding-window exponentiation: X = A^E mod N  (HAC 14.85)
 */
int mbedtls_mpi_exp_mod( mbedtls_mpi *X, const mbedtls_mpi *A,
                         const mbedtls_mpi *E, const mbedtls_mpi *N,
                         mbedtls_mpi *_RR )
{
   e1a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e1a94:	f2ad 6d54 	subw	sp, sp, #1620	; 0x654
   e1a98:	4606      	mov	r6, r0
   e1a9a:	460f      	mov	r7, r1
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( E != NULL );
    MPI_VALIDATE_RET( N != NULL );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
   e1a9c:	4618      	mov	r0, r3
   e1a9e:	2100      	movs	r1, #0
 * Sliding-window exponentiation: X = A^E mod N  (HAC 14.85)
 */
int mbedtls_mpi_exp_mod( mbedtls_mpi *X, const mbedtls_mpi *A,
                         const mbedtls_mpi *E, const mbedtls_mpi *N,
                         mbedtls_mpi *_RR )
{
   e1aa0:	9202      	str	r2, [sp, #8]
   e1aa2:	461d      	mov	r5, r3
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( E != NULL );
    MPI_VALIDATE_RET( N != NULL );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
   e1aa4:	f7ff fc67 	bl	e1376 <mbedtls_mpi_cmp_int>
   e1aa8:	2800      	cmp	r0, #0
   e1aaa:	dd05      	ble.n	e1ab8 <mbedtls_mpi_exp_mod+0x28>
   e1aac:	68ab      	ldr	r3, [r5, #8]
   e1aae:	f8d3 8000 	ldr.w	r8, [r3]
   e1ab2:	f018 0f01 	tst.w	r8, #1
   e1ab6:	d102      	bne.n	e1abe <mbedtls_mpi_exp_mod+0x2e>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
   e1ab8:	f06f 0003 	mvn.w	r0, #3
   e1abc:	e203      	b.n	e1ec6 <mbedtls_mpi_exp_mod+0x436>

    if( mbedtls_mpi_cmp_int( E, 0 ) < 0 )
   e1abe:	2100      	movs	r1, #0
   e1ac0:	9802      	ldr	r0, [sp, #8]
   e1ac2:	f7ff fc58 	bl	e1376 <mbedtls_mpi_cmp_int>
   e1ac6:	2800      	cmp	r0, #0
   e1ac8:	dbf6      	blt.n	e1ab8 <mbedtls_mpi_exp_mod+0x28>
{
    mbedtls_mpi_uint x, m0 = N->p[0];
    unsigned int i;

    x  = m0;
    x += ( ( m0 + 2 ) & 4 ) << 1;
   e1aca:	f108 0402 	add.w	r4, r8, #2
   e1ace:	0064      	lsls	r4, r4, #1
   e1ad0:	f004 0408 	and.w	r4, r4, #8
   e1ad4:	4444      	add	r4, r8
   e1ad6:	2103      	movs	r1, #3

    for( i = biL; i >= 8; i /= 2 )
        x *= ( 2 - ( m0 * x ) );
   e1ad8:	fb04 f308 	mul.w	r3, r4, r8
   e1adc:	f1c3 0302 	rsb	r3, r3, #2
    unsigned int i;

    x  = m0;
    x += ( ( m0 + 2 ) & 4 ) << 1;

    for( i = biL; i >= 8; i /= 2 )
   e1ae0:	3901      	subs	r1, #1
        x *= ( 2 - ( m0 * x ) );
   e1ae2:	fb03 f404 	mul.w	r4, r3, r4
    unsigned int i;

    x  = m0;
    x += ( ( m0 + 2 ) & 4 ) << 1;

    for( i = biL; i >= 8; i /= 2 )
   e1ae6:	d1f7      	bne.n	e1ad8 <mbedtls_mpi_exp_mod+0x48>
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   e1ae8:	2301      	movs	r3, #1
     * Init temps and window size
     */
    mpi_montg_init( &mm, N );
    mbedtls_mpi_init( &RR ); mbedtls_mpi_init( &T );
    mbedtls_mpi_init( &Apos );
    memset( W, 0, sizeof( W ) );
   e1aea:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   e1aee:	a814      	add	r0, sp, #80	; 0x50
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   e1af0:	9308      	str	r3, [sp, #32]
    X->n = 0;
   e1af2:	9109      	str	r1, [sp, #36]	; 0x24
    X->p = NULL;
   e1af4:	910a      	str	r1, [sp, #40]	; 0x28
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   e1af6:	930b      	str	r3, [sp, #44]	; 0x2c
    X->n = 0;
   e1af8:	910c      	str	r1, [sp, #48]	; 0x30
    X->p = NULL;
   e1afa:	910d      	str	r1, [sp, #52]	; 0x34
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   e1afc:	930e      	str	r3, [sp, #56]	; 0x38
    X->n = 0;
   e1afe:	910f      	str	r1, [sp, #60]	; 0x3c
    X->p = NULL;
   e1b00:	9110      	str	r1, [sp, #64]	; 0x40
     * Init temps and window size
     */
    mpi_montg_init( &mm, N );
    mbedtls_mpi_init( &RR ); mbedtls_mpi_init( &T );
    mbedtls_mpi_init( &Apos );
    memset( W, 0, sizeof( W ) );
   e1b02:	f007 fffe 	bl	e9b02 <memset>

    i = mbedtls_mpi_bitlen( E );
   e1b06:	9802      	ldr	r0, [sp, #8]
   e1b08:	f7ff fa30 	bl	e0f6c <mbedtls_mpi_bitlen>

    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
            ( i >  79 ) ? 4 : ( i >  23 ) ? 3 : 1;
   e1b0c:	f5b0 7f28 	cmp.w	r0, #672	; 0x2a0
   e1b10:	d20a      	bcs.n	e1b28 <mbedtls_mpi_exp_mod+0x98>
   e1b12:	28ef      	cmp	r0, #239	; 0xef
   e1b14:	d80b      	bhi.n	e1b2e <mbedtls_mpi_exp_mod+0x9e>
   e1b16:	284f      	cmp	r0, #79	; 0x4f
   e1b18:	d80c      	bhi.n	e1b34 <mbedtls_mpi_exp_mod+0xa4>
   e1b1a:	2818      	cmp	r0, #24
   e1b1c:	bf34      	ite	cc
   e1b1e:	f04f 0b01 	movcc.w	fp, #1
   e1b22:	f04f 0b03 	movcs.w	fp, #3
   e1b26:	e007      	b.n	e1b38 <mbedtls_mpi_exp_mod+0xa8>
   e1b28:	f04f 0b06 	mov.w	fp, #6
   e1b2c:	e004      	b.n	e1b38 <mbedtls_mpi_exp_mod+0xa8>
   e1b2e:	f04f 0b05 	mov.w	fp, #5
   e1b32:	e001      	b.n	e1b38 <mbedtls_mpi_exp_mod+0xa8>
   e1b34:	f04f 0b04 	mov.w	fp, #4
#if( MBEDTLS_MPI_WINDOW_SIZE < 6 )
    if( wsize > MBEDTLS_MPI_WINDOW_SIZE )
        wsize = MBEDTLS_MPI_WINDOW_SIZE;
#endif

    j = N->n + 1;
   e1b38:	686b      	ldr	r3, [r5, #4]
   e1b3a:	f103 0801 	add.w	r8, r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
   e1b3e:	4641      	mov	r1, r8
   e1b40:	4630      	mov	r0, r6
   e1b42:	f7ff f904 	bl	e0d4e <mbedtls_mpi_grow>
   e1b46:	4603      	mov	r3, r0
   e1b48:	2800      	cmp	r0, #0
   e1b4a:	f040 8194 	bne.w	e1e76 <mbedtls_mpi_exp_mod+0x3e6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1],  j ) );
   e1b4e:	4641      	mov	r1, r8
   e1b50:	a817      	add	r0, sp, #92	; 0x5c
   e1b52:	f7ff f8fc 	bl	e0d4e <mbedtls_mpi_grow>
   e1b56:	4603      	mov	r3, r0
   e1b58:	2800      	cmp	r0, #0
   e1b5a:	f040 818c 	bne.w	e1e76 <mbedtls_mpi_exp_mod+0x3e6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T, j * 2 ) );
   e1b5e:	ea4f 0148 	mov.w	r1, r8, lsl #1
   e1b62:	a80b      	add	r0, sp, #44	; 0x2c
   e1b64:	f7ff f8f3 	bl	e0d4e <mbedtls_mpi_grow>
   e1b68:	4603      	mov	r3, r0
   e1b6a:	2800      	cmp	r0, #0
   e1b6c:	f040 8183 	bne.w	e1e76 <mbedtls_mpi_exp_mod+0x3e6>

    /*
     * Compensate for negative A (and correct at the end)
     */
    neg = ( A->s == -1 );
   e1b70:	683b      	ldr	r3, [r7, #0]
   e1b72:	9304      	str	r3, [sp, #16]
    if( neg )
   e1b74:	3301      	adds	r3, #1
   e1b76:	d10a      	bne.n	e1b8e <mbedtls_mpi_exp_mod+0xfe>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Apos, A ) );
   e1b78:	4639      	mov	r1, r7
   e1b7a:	a80e      	add	r0, sp, #56	; 0x38
   e1b7c:	f7ff f94f 	bl	e0e1e <mbedtls_mpi_copy>
   e1b80:	4603      	mov	r3, r0
   e1b82:	2800      	cmp	r0, #0
   e1b84:	f040 8177 	bne.w	e1e76 <mbedtls_mpi_exp_mod+0x3e6>
        Apos.s = 1;
   e1b88:	2301      	movs	r3, #1
   e1b8a:	930e      	str	r3, [sp, #56]	; 0x38
        A = &Apos;
   e1b8c:	af0e      	add	r7, sp, #56	; 0x38
    }

    /*
     * If 1st call, pre-compute R^2 mod N
     */
    if( _RR == NULL || _RR->p == NULL )
   e1b8e:	f8dd 3678 	ldr.w	r3, [sp, #1656]	; 0x678
   e1b92:	b10b      	cbz	r3, e1b98 <mbedtls_mpi_exp_mod+0x108>
   e1b94:	689b      	ldr	r3, [r3, #8]
   e1b96:	bb2b      	cbnz	r3, e1be4 <mbedtls_mpi_exp_mod+0x154>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &RR, 1 ) );
   e1b98:	2101      	movs	r1, #1
   e1b9a:	a808      	add	r0, sp, #32
   e1b9c:	f7ff f9a0 	bl	e0ee0 <mbedtls_mpi_lset>
   e1ba0:	4603      	mov	r3, r0
   e1ba2:	2800      	cmp	r0, #0
   e1ba4:	f040 8167 	bne.w	e1e76 <mbedtls_mpi_exp_mod+0x3e6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &RR, N->n * 2 * biL ) );
   e1ba8:	6869      	ldr	r1, [r5, #4]
   e1baa:	a808      	add	r0, sp, #32
   e1bac:	0189      	lsls	r1, r1, #6
   e1bae:	f7ff fa6f 	bl	e1090 <mbedtls_mpi_shift_l>
   e1bb2:	4603      	mov	r3, r0
   e1bb4:	2800      	cmp	r0, #0
   e1bb6:	f040 815e 	bne.w	e1e76 <mbedtls_mpi_exp_mod+0x3e6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &RR, &RR, N ) );
   e1bba:	a908      	add	r1, sp, #32
   e1bbc:	462a      	mov	r2, r5
   e1bbe:	4608      	mov	r0, r1
   e1bc0:	f7ff ff34 	bl	e1a2c <mbedtls_mpi_mod_mpi>
   e1bc4:	4603      	mov	r3, r0
   e1bc6:	2800      	cmp	r0, #0
   e1bc8:	f040 8155 	bne.w	e1e76 <mbedtls_mpi_exp_mod+0x3e6>

        if( _RR != NULL )
   e1bcc:	f8dd 3678 	ldr.w	r3, [sp, #1656]	; 0x678
   e1bd0:	b183      	cbz	r3, e1bf4 <mbedtls_mpi_exp_mod+0x164>
            memcpy( _RR, &RR, sizeof( mbedtls_mpi ) );
   e1bd2:	ab08      	add	r3, sp, #32
   e1bd4:	cb03      	ldmia	r3!, {r0, r1}
   e1bd6:	f8dd 2678 	ldr.w	r2, [sp, #1656]	; 0x678
   e1bda:	6010      	str	r0, [r2, #0]
   e1bdc:	6818      	ldr	r0, [r3, #0]
   e1bde:	6051      	str	r1, [r2, #4]
   e1be0:	6090      	str	r0, [r2, #8]
   e1be2:	e007      	b.n	e1bf4 <mbedtls_mpi_exp_mod+0x164>
    }
    else
        memcpy( &RR, _RR, sizeof( mbedtls_mpi ) );
   e1be4:	f8dd 2678 	ldr.w	r2, [sp, #1656]	; 0x678
   e1be8:	6810      	ldr	r0, [r2, #0]
   e1bea:	6851      	ldr	r1, [r2, #4]
   e1bec:	ab08      	add	r3, sp, #32
   e1bee:	c303      	stmia	r3!, {r0, r1}
   e1bf0:	6890      	ldr	r0, [r2, #8]
   e1bf2:	6018      	str	r0, [r3, #0]

    /*
     * W[1] = A * R^2 * R^-1 mod N = A * R mod N
     */
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
   e1bf4:	4629      	mov	r1, r5
   e1bf6:	4638      	mov	r0, r7
   e1bf8:	f7ff fb78 	bl	e12ec <mbedtls_mpi_cmp_mpi>
   e1bfc:	2800      	cmp	r0, #0
   e1bfe:	db18      	blt.n	e1c32 <mbedtls_mpi_exp_mod+0x1a2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
   e1c00:	462a      	mov	r2, r5
   e1c02:	4639      	mov	r1, r7
   e1c04:	a817      	add	r0, sp, #92	; 0x5c
   e1c06:	f7ff ff11 	bl	e1a2c <mbedtls_mpi_mod_mpi>
   e1c0a:	4603      	mov	r3, r0
   e1c0c:	2800      	cmp	r0, #0
   e1c0e:	f040 8132 	bne.w	e1e76 <mbedtls_mpi_exp_mod+0x3e6>
    x += ( ( m0 + 2 ) & 4 ) << 1;

    for( i = biL; i >= 8; i /= 2 )
        x *= ( 2 - ( m0 * x ) );

    *mm = ~x + 1;
   e1c12:	4264      	negs	r4, r4
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
    else
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );

    MBEDTLS_MPI_CHK( mpi_montmul( &W[1], &RR, N, mm, &T ) );
   e1c14:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
   e1c18:	4623      	mov	r3, r4
   e1c1a:	f8cd 9000 	str.w	r9, [sp]
   e1c1e:	462a      	mov	r2, r5
   e1c20:	a908      	add	r1, sp, #32
   e1c22:	a817      	add	r0, sp, #92	; 0x5c
   e1c24:	f7ff fafe 	bl	e1224 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
   e1c28:	4603      	mov	r3, r0
   e1c2a:	2800      	cmp	r0, #0
   e1c2c:	f040 8123 	bne.w	e1e76 <mbedtls_mpi_exp_mod+0x3e6>
   e1c30:	e004      	b.n	e1c3c <mbedtls_mpi_exp_mod+0x1ac>
     * W[1] = A * R^2 * R^-1 mod N = A * R mod N
     */
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
    else
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );
   e1c32:	4639      	mov	r1, r7
   e1c34:	a817      	add	r0, sp, #92	; 0x5c
   e1c36:	f7ff f8f2 	bl	e0e1e <mbedtls_mpi_copy>
   e1c3a:	e7e6      	b.n	e1c0a <mbedtls_mpi_exp_mod+0x17a>
    MBEDTLS_MPI_CHK( mpi_montmul( &W[1], &RR, N, mm, &T ) );

    /*
     * X = R^2 * R^-1 mod N = R mod N
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &RR ) );
   e1c3c:	a908      	add	r1, sp, #32
   e1c3e:	4630      	mov	r0, r6
   e1c40:	f7ff f8ed 	bl	e0e1e <mbedtls_mpi_copy>
   e1c44:	4603      	mov	r3, r0
   e1c46:	2800      	cmp	r0, #0
   e1c48:	f040 8115 	bne.w	e1e76 <mbedtls_mpi_exp_mod+0x3e6>
{
    mbedtls_mpi_uint z = 1;
    mbedtls_mpi U;

    U.n = U.s = (int) z;
    U.p = &z;
   e1c4c:	ab07      	add	r3, sp, #28
 * Montgomery reduction: A = A * R^-1 mod N
 */
static int mpi_montred( mbedtls_mpi *A, const mbedtls_mpi *N,
                        mbedtls_mpi_uint mm, const mbedtls_mpi *T )
{
    mbedtls_mpi_uint z = 1;
   e1c4e:	2701      	movs	r7, #1
    mbedtls_mpi U;

    U.n = U.s = (int) z;
    U.p = &z;
   e1c50:	9313      	str	r3, [sp, #76]	; 0x4c

    return( mpi_montmul( A, &U, N, mm, T ) );
   e1c52:	f8cd 9000 	str.w	r9, [sp]
   e1c56:	4623      	mov	r3, r4
   e1c58:	462a      	mov	r2, r5
   e1c5a:	a911      	add	r1, sp, #68	; 0x44
   e1c5c:	4630      	mov	r0, r6
 * Montgomery reduction: A = A * R^-1 mod N
 */
static int mpi_montred( mbedtls_mpi *A, const mbedtls_mpi *N,
                        mbedtls_mpi_uint mm, const mbedtls_mpi *T )
{
    mbedtls_mpi_uint z = 1;
   e1c5e:	9707      	str	r7, [sp, #28]
    mbedtls_mpi U;

    U.n = U.s = (int) z;
   e1c60:	9711      	str	r7, [sp, #68]	; 0x44
   e1c62:	9712      	str	r7, [sp, #72]	; 0x48
    U.p = &z;

    return( mpi_montmul( A, &U, N, mm, T ) );
   e1c64:	f7ff fade 	bl	e1224 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>

    /*
     * X = R^2 * R^-1 mod N = R mod N
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &RR ) );
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
   e1c68:	4603      	mov	r3, r0
   e1c6a:	2800      	cmp	r0, #0
   e1c6c:	f040 8103 	bne.w	e1e76 <mbedtls_mpi_exp_mod+0x3e6>

    if( wsize > 1 )
   e1c70:	45bb      	cmp	fp, r7
   e1c72:	d05b      	beq.n	e1d2c <mbedtls_mpi_exp_mod+0x29c>
    {
        /*
         * W[1 << (wsize - 1)] = W[1] ^ (wsize - 1)
         */
        j =  one << ( wsize - 1 );
   e1c74:	f10b 33ff 	add.w	r3, fp, #4294967295
   e1c78:	9303      	str	r3, [sp, #12]
   e1c7a:	409f      	lsls	r7, r3

        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
   e1c7c:	6869      	ldr	r1, [r5, #4]
   e1c7e:	ab14      	add	r3, sp, #80	; 0x50
   e1c80:	f04f 080c 	mov.w	r8, #12
   e1c84:	fb08 3807 	mla	r8, r8, r7, r3
   e1c88:	3101      	adds	r1, #1
   e1c8a:	4640      	mov	r0, r8
   e1c8c:	f7ff f85f 	bl	e0d4e <mbedtls_mpi_grow>
   e1c90:	4603      	mov	r3, r0
   e1c92:	2800      	cmp	r0, #0
   e1c94:	f040 80ef 	bne.w	e1e76 <mbedtls_mpi_exp_mod+0x3e6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );
   e1c98:	a917      	add	r1, sp, #92	; 0x5c
   e1c9a:	4640      	mov	r0, r8
   e1c9c:	f7ff f8bf 	bl	e0e1e <mbedtls_mpi_copy>
   e1ca0:	4603      	mov	r3, r0
   e1ca2:	2800      	cmp	r0, #0
   e1ca4:	f040 80e7 	bne.w	e1e76 <mbedtls_mpi_exp_mod+0x3e6>
   e1ca8:	4682      	mov	sl, r0

        for( i = 0; i < wsize - 1; i++ )
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );
   e1caa:	4623      	mov	r3, r4
   e1cac:	f8cd 9000 	str.w	r9, [sp]
   e1cb0:	462a      	mov	r2, r5
   e1cb2:	4641      	mov	r1, r8
   e1cb4:	4640      	mov	r0, r8
   e1cb6:	f7ff fab5 	bl	e1224 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
   e1cba:	4603      	mov	r3, r0
   e1cbc:	2800      	cmp	r0, #0
   e1cbe:	f040 80da 	bne.w	e1e76 <mbedtls_mpi_exp_mod+0x3e6>
        j =  one << ( wsize - 1 );

        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );

        for( i = 0; i < wsize - 1; i++ )
   e1cc2:	9b03      	ldr	r3, [sp, #12]
   e1cc4:	f10a 0a01 	add.w	sl, sl, #1
   e1cc8:	4553      	cmp	r3, sl
   e1cca:	d8ee      	bhi.n	e1caa <mbedtls_mpi_exp_mod+0x21a>
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );

        /*
         * W[i] = W[i - 1] * W[1]
         */
        for( i = j + 1; i < ( one << wsize ); i++ )
   e1ccc:	3701      	adds	r7, #1
   e1cce:	f04f 0901 	mov.w	r9, #1
   e1cd2:	f04f 080c 	mov.w	r8, #12
   e1cd6:	ab14      	add	r3, sp, #80	; 0x50
   e1cd8:	fa09 f90b 	lsl.w	r9, r9, fp
   e1cdc:	fb08 3807 	mla	r8, r8, r7, r3
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );

            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
   e1ce0:	f10d 0a2c 	add.w	sl, sp, #44	; 0x2c
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );

        /*
         * W[i] = W[i - 1] * W[1]
         */
        for( i = j + 1; i < ( one << wsize ); i++ )
   e1ce4:	454f      	cmp	r7, r9
   e1ce6:	d221      	bcs.n	e1d2c <mbedtls_mpi_exp_mod+0x29c>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
   e1ce8:	6869      	ldr	r1, [r5, #4]
   e1cea:	4640      	mov	r0, r8
   e1cec:	3101      	adds	r1, #1
   e1cee:	f7ff f82e 	bl	e0d4e <mbedtls_mpi_grow>
   e1cf2:	4603      	mov	r3, r0
   e1cf4:	2800      	cmp	r0, #0
   e1cf6:	f040 80be 	bne.w	e1e76 <mbedtls_mpi_exp_mod+0x3e6>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );
   e1cfa:	f1a8 010c 	sub.w	r1, r8, #12
   e1cfe:	4640      	mov	r0, r8
   e1d00:	f7ff f88d 	bl	e0e1e <mbedtls_mpi_copy>
   e1d04:	4603      	mov	r3, r0
   e1d06:	2800      	cmp	r0, #0
   e1d08:	f040 80b5 	bne.w	e1e76 <mbedtls_mpi_exp_mod+0x3e6>

            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
   e1d0c:	4623      	mov	r3, r4
   e1d0e:	4640      	mov	r0, r8
   e1d10:	f8cd a000 	str.w	sl, [sp]
   e1d14:	462a      	mov	r2, r5
   e1d16:	a917      	add	r1, sp, #92	; 0x5c
   e1d18:	f7ff fa84 	bl	e1224 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
   e1d1c:	f108 080c 	add.w	r8, r8, #12
   e1d20:	4603      	mov	r3, r0
   e1d22:	2800      	cmp	r0, #0
   e1d24:	f040 80a7 	bne.w	e1e76 <mbedtls_mpi_exp_mod+0x3e6>
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );

        /*
         * W[i] = W[i - 1] * W[1]
         */
        for( i = j + 1; i < ( one << wsize ); i++ )
   e1d28:	3701      	adds	r7, #1
   e1d2a:	e7db      	b.n	e1ce4 <mbedtls_mpi_exp_mod+0x254>

            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
        }
    }

    nblimbs = E->n;
   e1d2c:	9b02      	ldr	r3, [sp, #8]
    bufsize = 0;
    nbits   = 0;
    wbits   = 0;
    state   = 0;
   e1d2e:	2700      	movs	r7, #0

            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
        }
    }

    nblimbs = E->n;
   e1d30:	685b      	ldr	r3, [r3, #4]
   e1d32:	9303      	str	r3, [sp, #12]
    bufsize = 0;
    nbits   = 0;
   e1d34:	46b9      	mov	r9, r7
            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
        }
    }

    nblimbs = E->n;
    bufsize = 0;
   e1d36:	46ba      	mov	sl, r7
    nbits   = 0;
    wbits   = 0;
   e1d38:	46b8      	mov	r8, r7
    state   = 0;

    while( 1 )
    {
        if( bufsize == 0 )
   e1d3a:	f1ba 0f00 	cmp.w	sl, #0
   e1d3e:	d10e      	bne.n	e1d5e <mbedtls_mpi_exp_mod+0x2ce>
        {
            if( nblimbs == 0 )
   e1d40:	9b03      	ldr	r3, [sp, #12]
   e1d42:	b93b      	cbnz	r3, e1d54 <mbedtls_mpi_exp_mod+0x2c4>
    {
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );

        wbits <<= 1;

        if( ( wbits & ( one << wsize ) ) != 0 )
   e1d44:	2301      	movs	r3, #1
   e1d46:	fa03 f30b 	lsl.w	r3, r3, fp
   e1d4a:	9305      	str	r3, [sp, #20]
   e1d4c:	9f03      	ldr	r7, [sp, #12]
   e1d4e:	f10d 0a2c 	add.w	sl, sp, #44	; 0x2c
   e1d52:	e05e      	b.n	e1e12 <mbedtls_mpi_exp_mod+0x382>
        if( bufsize == 0 )
        {
            if( nblimbs == 0 )
                break;

            nblimbs--;
   e1d54:	9b03      	ldr	r3, [sp, #12]
   e1d56:	3b01      	subs	r3, #1
   e1d58:	9303      	str	r3, [sp, #12]

            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
   e1d5a:	f04f 0a20 	mov.w	sl, #32
        }

        bufsize--;

        ei = (E->p[nblimbs] >> bufsize) & 1;
   e1d5e:	9b02      	ldr	r3, [sp, #8]
   e1d60:	9a03      	ldr	r2, [sp, #12]
   e1d62:	689b      	ldr	r3, [r3, #8]
   e1d64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
            nblimbs--;

            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
        }

        bufsize--;
   e1d68:	f10a 3aff 	add.w	sl, sl, #4294967295

        ei = (E->p[nblimbs] >> bufsize) & 1;
   e1d6c:	fa23 f30a 	lsr.w	r3, r3, sl

        /*
         * skip leading 0s
         */
        if( ei == 0 && state == 0 )
   e1d70:	f013 0301 	ands.w	r3, r3, #1
   e1d74:	d10f      	bne.n	e1d96 <mbedtls_mpi_exp_mod+0x306>
   e1d76:	2f00      	cmp	r7, #0
   e1d78:	d0df      	beq.n	e1d3a <mbedtls_mpi_exp_mod+0x2aa>
            continue;

        if( ei == 0 && state == 1 )
   e1d7a:	2f01      	cmp	r7, #1
   e1d7c:	d10b      	bne.n	e1d96 <mbedtls_mpi_exp_mod+0x306>
        {
            /*
             * out of window, square X
             */
            MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
   e1d7e:	ab0b      	add	r3, sp, #44	; 0x2c
   e1d80:	9300      	str	r3, [sp, #0]
   e1d82:	462a      	mov	r2, r5
   e1d84:	4623      	mov	r3, r4
   e1d86:	4631      	mov	r1, r6
   e1d88:	4630      	mov	r0, r6
   e1d8a:	f7ff fa4b 	bl	e1224 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
   e1d8e:	4603      	mov	r3, r0
   e1d90:	2800      	cmp	r0, #0
   e1d92:	d0d2      	beq.n	e1d3a <mbedtls_mpi_exp_mod+0x2aa>
   e1d94:	e06f      	b.n	e1e76 <mbedtls_mpi_exp_mod+0x3e6>
        /*
         * add ei to current window
         */
        state = 2;

        nbits++;
   e1d96:	f109 0901 	add.w	r9, r9, #1
        wbits |= ( ei << ( wsize - nbits ) );
   e1d9a:	ebc9 020b 	rsb	r2, r9, fp
   e1d9e:	4093      	lsls	r3, r2

        if( nbits == wsize )
   e1da0:	45cb      	cmp	fp, r9
         * add ei to current window
         */
        state = 2;

        nbits++;
        wbits |= ( ei << ( wsize - nbits ) );
   e1da2:	ea48 0803 	orr.w	r8, r8, r3

        if( nbits == wsize )
   e1da6:	d001      	beq.n	e1dac <mbedtls_mpi_exp_mod+0x31c>
        }

        /*
         * add ei to current window
         */
        state = 2;
   e1da8:	2702      	movs	r7, #2
   e1daa:	e7c6      	b.n	e1d3a <mbedtls_mpi_exp_mod+0x2aa>
   e1dac:	2700      	movs	r7, #0
        {
            /*
             * X = X^wsize R^-1 mod N
             */
            for( i = 0; i < wsize; i++ )
                MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
   e1dae:	ab0b      	add	r3, sp, #44	; 0x2c
   e1db0:	9300      	str	r3, [sp, #0]
   e1db2:	462a      	mov	r2, r5
   e1db4:	4623      	mov	r3, r4
   e1db6:	4631      	mov	r1, r6
   e1db8:	4630      	mov	r0, r6
   e1dba:	f7ff fa33 	bl	e1224 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
   e1dbe:	4603      	mov	r3, r0
   e1dc0:	2800      	cmp	r0, #0
   e1dc2:	d158      	bne.n	e1e76 <mbedtls_mpi_exp_mod+0x3e6>
        if( nbits == wsize )
        {
            /*
             * X = X^wsize R^-1 mod N
             */
            for( i = 0; i < wsize; i++ )
   e1dc4:	3701      	adds	r7, #1
   e1dc6:	45bb      	cmp	fp, r7
   e1dc8:	d1f1      	bne.n	e1dae <mbedtls_mpi_exp_mod+0x31e>
                MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );

            /*
             * X = X * W[wbits] R^-1 mod N
             */
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[wbits], N, mm, &T ) );
   e1dca:	ab0b      	add	r3, sp, #44	; 0x2c
   e1dcc:	a814      	add	r0, sp, #80	; 0x50
   e1dce:	210c      	movs	r1, #12
   e1dd0:	9300      	str	r3, [sp, #0]
   e1dd2:	fb01 0108 	mla	r1, r1, r8, r0
   e1dd6:	4623      	mov	r3, r4
   e1dd8:	462a      	mov	r2, r5
   e1dda:	4630      	mov	r0, r6
   e1ddc:	f7ff fa22 	bl	e1224 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
   e1de0:	4603      	mov	r3, r0
   e1de2:	2800      	cmp	r0, #0
   e1de4:	d147      	bne.n	e1e76 <mbedtls_mpi_exp_mod+0x3e6>

            state--;
   e1de6:	2701      	movs	r7, #1
            nbits = 0;
   e1de8:	4680      	mov	r8, r0
            wbits = 0;
   e1dea:	4681      	mov	r9, r0
   e1dec:	e7a5      	b.n	e1d3a <mbedtls_mpi_exp_mod+0x2aa>
    /*
     * process the remaining bits
     */
    for( i = 0; i < nbits; i++ )
    {
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
   e1dee:	4623      	mov	r3, r4
   e1df0:	f8cd a000 	str.w	sl, [sp]
   e1df4:	462a      	mov	r2, r5
   e1df6:	4631      	mov	r1, r6
   e1df8:	4630      	mov	r0, r6
   e1dfa:	f7ff fa13 	bl	e1224 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
   e1dfe:	4603      	mov	r3, r0
   e1e00:	2800      	cmp	r0, #0
   e1e02:	d138      	bne.n	e1e76 <mbedtls_mpi_exp_mod+0x3e6>

        wbits <<= 1;

        if( ( wbits & ( one << wsize ) ) != 0 )
   e1e04:	9b05      	ldr	r3, [sp, #20]
     */
    for( i = 0; i < nbits; i++ )
    {
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );

        wbits <<= 1;
   e1e06:	ea4f 0848 	mov.w	r8, r8, lsl #1

        if( ( wbits & ( one << wsize ) ) != 0 )
   e1e0a:	ea18 0f03 	tst.w	r8, r3
   e1e0e:	d103      	bne.n	e1e18 <mbedtls_mpi_exp_mod+0x388>
    }

    /*
     * process the remaining bits
     */
    for( i = 0; i < nbits; i++ )
   e1e10:	3701      	adds	r7, #1
   e1e12:	454f      	cmp	r7, r9
   e1e14:	d1eb      	bne.n	e1dee <mbedtls_mpi_exp_mod+0x35e>
   e1e16:	e00b      	b.n	e1e30 <mbedtls_mpi_exp_mod+0x3a0>
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );

        wbits <<= 1;

        if( ( wbits & ( one << wsize ) ) != 0 )
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[1], N, mm, &T ) );
   e1e18:	4623      	mov	r3, r4
   e1e1a:	f8cd a000 	str.w	sl, [sp]
   e1e1e:	462a      	mov	r2, r5
   e1e20:	a917      	add	r1, sp, #92	; 0x5c
   e1e22:	4630      	mov	r0, r6
   e1e24:	f7ff f9fe 	bl	e1224 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
   e1e28:	4603      	mov	r3, r0
   e1e2a:	2800      	cmp	r0, #0
   e1e2c:	d0f0      	beq.n	e1e10 <mbedtls_mpi_exp_mod+0x380>
   e1e2e:	e022      	b.n	e1e76 <mbedtls_mpi_exp_mod+0x3e6>
 * Montgomery reduction: A = A * R^-1 mod N
 */
static int mpi_montred( mbedtls_mpi *A, const mbedtls_mpi *N,
                        mbedtls_mpi_uint mm, const mbedtls_mpi *T )
{
    mbedtls_mpi_uint z = 1;
   e1e30:	2301      	movs	r3, #1
   e1e32:	9307      	str	r3, [sp, #28]
    mbedtls_mpi U;

    U.n = U.s = (int) z;
   e1e34:	9311      	str	r3, [sp, #68]	; 0x44
   e1e36:	9312      	str	r3, [sp, #72]	; 0x48
    U.p = &z;
   e1e38:	ab07      	add	r3, sp, #28
   e1e3a:	9313      	str	r3, [sp, #76]	; 0x4c

    return( mpi_montmul( A, &U, N, mm, T ) );
   e1e3c:	f8cd a000 	str.w	sl, [sp]
   e1e40:	4623      	mov	r3, r4
   e1e42:	462a      	mov	r2, r5
   e1e44:	a911      	add	r1, sp, #68	; 0x44
   e1e46:	4630      	mov	r0, r6
   e1e48:	f7ff f9ec 	bl	e1224 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
    }

    /*
     * X = A^E * R * R^-1 mod N = A^E mod N
     */
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
   e1e4c:	4603      	mov	r3, r0
   e1e4e:	b990      	cbnz	r0, e1e76 <mbedtls_mpi_exp_mod+0x3e6>

    if( neg && E->n != 0 && ( E->p[0] & 1 ) != 0 )
   e1e50:	9a04      	ldr	r2, [sp, #16]
   e1e52:	3201      	adds	r2, #1
   e1e54:	d10f      	bne.n	e1e76 <mbedtls_mpi_exp_mod+0x3e6>
   e1e56:	9a02      	ldr	r2, [sp, #8]
   e1e58:	6852      	ldr	r2, [r2, #4]
   e1e5a:	b162      	cbz	r2, e1e76 <mbedtls_mpi_exp_mod+0x3e6>
   e1e5c:	9a02      	ldr	r2, [sp, #8]
   e1e5e:	6892      	ldr	r2, [r2, #8]
   e1e60:	6812      	ldr	r2, [r2, #0]
   e1e62:	07d2      	lsls	r2, r2, #31
   e1e64:	d507      	bpl.n	e1e76 <mbedtls_mpi_exp_mod+0x3e6>
    {
        X->s = -1;
   e1e66:	9b04      	ldr	r3, [sp, #16]
   e1e68:	6033      	str	r3, [r6, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
   e1e6a:	4632      	mov	r2, r6
   e1e6c:	4629      	mov	r1, r5
   e1e6e:	4630      	mov	r0, r6
   e1e70:	f7ff fb31 	bl	e14d6 <mbedtls_mpi_add_mpi>
   e1e74:	4603      	mov	r3, r0
    }

cleanup:

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
   e1e76:	2201      	movs	r2, #1
   e1e78:	f10b 34ff 	add.w	r4, fp, #4294967295
   e1e7c:	fa02 f404 	lsl.w	r4, r2, r4
   e1e80:	fa02 f50b 	lsl.w	r5, r2, fp
        mbedtls_mpi_free( &W[i] );
   e1e84:	260c      	movs	r6, #12
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
    }

cleanup:

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
   e1e86:	42ac      	cmp	r4, r5
   e1e88:	9302      	str	r3, [sp, #8]
   e1e8a:	d207      	bcs.n	e1e9c <mbedtls_mpi_exp_mod+0x40c>
        mbedtls_mpi_free( &W[i] );
   e1e8c:	ab14      	add	r3, sp, #80	; 0x50
   e1e8e:	fb06 3004 	mla	r0, r6, r4, r3
   e1e92:	f7fe ff4a 	bl	e0d2a <mbedtls_mpi_free>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
    }

cleanup:

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
   e1e96:	3401      	adds	r4, #1
   e1e98:	9b02      	ldr	r3, [sp, #8]
   e1e9a:	e7f4      	b.n	e1e86 <mbedtls_mpi_exp_mod+0x3f6>
        mbedtls_mpi_free( &W[i] );

    mbedtls_mpi_free( &W[1] ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &Apos );
   e1e9c:	a817      	add	r0, sp, #92	; 0x5c
   e1e9e:	f7fe ff44 	bl	e0d2a <mbedtls_mpi_free>
   e1ea2:	a80b      	add	r0, sp, #44	; 0x2c
   e1ea4:	f7fe ff41 	bl	e0d2a <mbedtls_mpi_free>
   e1ea8:	a80e      	add	r0, sp, #56	; 0x38
   e1eaa:	f7fe ff3e 	bl	e0d2a <mbedtls_mpi_free>

    if( _RR == NULL || _RR->p == NULL )
   e1eae:	f8dd 2678 	ldr.w	r2, [sp, #1656]	; 0x678
   e1eb2:	9b02      	ldr	r3, [sp, #8]
   e1eb4:	b10a      	cbz	r2, e1eba <mbedtls_mpi_exp_mod+0x42a>
   e1eb6:	6892      	ldr	r2, [r2, #8]
   e1eb8:	b922      	cbnz	r2, e1ec4 <mbedtls_mpi_exp_mod+0x434>
        mbedtls_mpi_free( &RR );
   e1eba:	a808      	add	r0, sp, #32
   e1ebc:	9302      	str	r3, [sp, #8]
   e1ebe:	f7fe ff34 	bl	e0d2a <mbedtls_mpi_free>

    return( ret );
   e1ec2:	9b02      	ldr	r3, [sp, #8]
   e1ec4:	4618      	mov	r0, r3
}
   e1ec6:	f20d 6d54 	addw	sp, sp, #1620	; 0x654
   e1eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000e1ece <mbedtls_mpi_gcd>:

/*
 * Greatest common divisor: G = gcd(A, B)  (HAC 14.54)
 */
int mbedtls_mpi_gcd( mbedtls_mpi *G, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
   e1ece:	b5f0      	push	{r4, r5, r6, r7, lr}
   e1ed0:	b08b      	sub	sp, #44	; 0x2c
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
    X->n = 0;
   e1ed2:	2300      	movs	r3, #0
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   e1ed4:	2601      	movs	r6, #1

/*
 * Greatest common divisor: G = gcd(A, B)  (HAC 14.54)
 */
int mbedtls_mpi_gcd( mbedtls_mpi *G, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
   e1ed6:	4607      	mov	r7, r0
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    mbedtls_mpi_init( &TG ); mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
   e1ed8:	a804      	add	r0, sp, #16

/*
 * Greatest common divisor: G = gcd(A, B)  (HAC 14.54)
 */
int mbedtls_mpi_gcd( mbedtls_mpi *G, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
   e1eda:	4615      	mov	r5, r2
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   e1edc:	9601      	str	r6, [sp, #4]
    X->n = 0;
   e1ede:	9302      	str	r3, [sp, #8]
    X->p = NULL;
   e1ee0:	9303      	str	r3, [sp, #12]
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   e1ee2:	9604      	str	r6, [sp, #16]
    X->n = 0;
   e1ee4:	9305      	str	r3, [sp, #20]
    X->p = NULL;
   e1ee6:	9306      	str	r3, [sp, #24]
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   e1ee8:	9607      	str	r6, [sp, #28]
    X->n = 0;
   e1eea:	9308      	str	r3, [sp, #32]
    X->p = NULL;
   e1eec:	9309      	str	r3, [sp, #36]	; 0x24
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    mbedtls_mpi_init( &TG ); mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
   e1eee:	f7fe ff96 	bl	e0e1e <mbedtls_mpi_copy>
   e1ef2:	4604      	mov	r4, r0
   e1ef4:	2800      	cmp	r0, #0
   e1ef6:	d163      	bne.n	e1fc0 <mbedtls_mpi_gcd+0xf2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
   e1ef8:	4629      	mov	r1, r5
   e1efa:	a807      	add	r0, sp, #28
   e1efc:	f7fe ff8f 	bl	e0e1e <mbedtls_mpi_copy>
   e1f00:	4604      	mov	r4, r0
   e1f02:	2800      	cmp	r0, #0
   e1f04:	d15c      	bne.n	e1fc0 <mbedtls_mpi_gcd+0xf2>

    lz = mbedtls_mpi_lsb( &TA );
   e1f06:	a804      	add	r0, sp, #16
   e1f08:	f7ff f817 	bl	e0f3a <mbedtls_mpi_lsb>
   e1f0c:	4605      	mov	r5, r0
    lzt = mbedtls_mpi_lsb( &TB );
   e1f0e:	a807      	add	r0, sp, #28
   e1f10:	f7ff f813 	bl	e0f3a <mbedtls_mpi_lsb>
   e1f14:	4285      	cmp	r5, r0
   e1f16:	bf28      	it	cs
   e1f18:	4605      	movcs	r5, r0

    if( lzt < lz )
        lz = lzt;

    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, lz ) );
   e1f1a:	4629      	mov	r1, r5
   e1f1c:	a804      	add	r0, sp, #16
   e1f1e:	f7ff f906 	bl	e112e <mbedtls_mpi_shift_r>
   e1f22:	4604      	mov	r4, r0
   e1f24:	2800      	cmp	r0, #0
   e1f26:	d14b      	bne.n	e1fc0 <mbedtls_mpi_gcd+0xf2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, lz ) );
   e1f28:	4629      	mov	r1, r5
   e1f2a:	a807      	add	r0, sp, #28
   e1f2c:	f7ff f8ff 	bl	e112e <mbedtls_mpi_shift_r>
   e1f30:	4604      	mov	r4, r0
   e1f32:	2800      	cmp	r0, #0
   e1f34:	d144      	bne.n	e1fc0 <mbedtls_mpi_gcd+0xf2>

    TA.s = TB.s = 1;
   e1f36:	9607      	str	r6, [sp, #28]
   e1f38:	9604      	str	r6, [sp, #16]

    while( mbedtls_mpi_cmp_int( &TA, 0 ) != 0 )
   e1f3a:	2100      	movs	r1, #0
   e1f3c:	a804      	add	r0, sp, #16
   e1f3e:	f7ff fa1a 	bl	e1376 <mbedtls_mpi_cmp_int>
   e1f42:	2800      	cmp	r0, #0
   e1f44:	d031      	beq.n	e1faa <mbedtls_mpi_gcd+0xdc>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, mbedtls_mpi_lsb( &TA ) ) );
   e1f46:	a804      	add	r0, sp, #16
   e1f48:	f7fe fff7 	bl	e0f3a <mbedtls_mpi_lsb>
   e1f4c:	4601      	mov	r1, r0
   e1f4e:	a804      	add	r0, sp, #16
   e1f50:	f7ff f8ed 	bl	e112e <mbedtls_mpi_shift_r>
   e1f54:	4604      	mov	r4, r0
   e1f56:	2800      	cmp	r0, #0
   e1f58:	d132      	bne.n	e1fc0 <mbedtls_mpi_gcd+0xf2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, mbedtls_mpi_lsb( &TB ) ) );
   e1f5a:	a807      	add	r0, sp, #28
   e1f5c:	f7fe ffed 	bl	e0f3a <mbedtls_mpi_lsb>
   e1f60:	4601      	mov	r1, r0
   e1f62:	a807      	add	r0, sp, #28
   e1f64:	f7ff f8e3 	bl	e112e <mbedtls_mpi_shift_r>
   e1f68:	4604      	mov	r4, r0
   e1f6a:	bb48      	cbnz	r0, e1fc0 <mbedtls_mpi_gcd+0xf2>

        if( mbedtls_mpi_cmp_mpi( &TA, &TB ) >= 0 )
   e1f6c:	a907      	add	r1, sp, #28
   e1f6e:	a804      	add	r0, sp, #16
   e1f70:	f7ff f9bc 	bl	e12ec <mbedtls_mpi_cmp_mpi>
   e1f74:	2800      	cmp	r0, #0
   e1f76:	db09      	blt.n	e1f8c <mbedtls_mpi_gcd+0xbe>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TA, &TA, &TB ) );
   e1f78:	a904      	add	r1, sp, #16
   e1f7a:	aa07      	add	r2, sp, #28
   e1f7c:	4608      	mov	r0, r1
   e1f7e:	f7ff fa6a 	bl	e1456 <mbedtls_mpi_sub_abs>
   e1f82:	4604      	mov	r4, r0
   e1f84:	b9e0      	cbnz	r0, e1fc0 <mbedtls_mpi_gcd+0xf2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, 1 ) );
   e1f86:	2101      	movs	r1, #1
   e1f88:	a804      	add	r0, sp, #16
   e1f8a:	e008      	b.n	e1f9e <mbedtls_mpi_gcd+0xd0>
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TB, &TB, &TA ) );
   e1f8c:	a907      	add	r1, sp, #28
   e1f8e:	aa04      	add	r2, sp, #16
   e1f90:	4608      	mov	r0, r1
   e1f92:	f7ff fa60 	bl	e1456 <mbedtls_mpi_sub_abs>
   e1f96:	4604      	mov	r4, r0
   e1f98:	b990      	cbnz	r0, e1fc0 <mbedtls_mpi_gcd+0xf2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, 1 ) );
   e1f9a:	2101      	movs	r1, #1
   e1f9c:	a807      	add	r0, sp, #28
   e1f9e:	f7ff f8c6 	bl	e112e <mbedtls_mpi_shift_r>
   e1fa2:	4604      	mov	r4, r0
   e1fa4:	2800      	cmp	r0, #0
   e1fa6:	d0c8      	beq.n	e1f3a <mbedtls_mpi_gcd+0x6c>
   e1fa8:	e00a      	b.n	e1fc0 <mbedtls_mpi_gcd+0xf2>
        }
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &TB, lz ) );
   e1faa:	4629      	mov	r1, r5
   e1fac:	a807      	add	r0, sp, #28
   e1fae:	f7ff f86f 	bl	e1090 <mbedtls_mpi_shift_l>
   e1fb2:	4604      	mov	r4, r0
   e1fb4:	b920      	cbnz	r0, e1fc0 <mbedtls_mpi_gcd+0xf2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( G, &TB ) );
   e1fb6:	a907      	add	r1, sp, #28
   e1fb8:	4638      	mov	r0, r7
   e1fba:	f7fe ff30 	bl	e0e1e <mbedtls_mpi_copy>
   e1fbe:	4604      	mov	r4, r0

cleanup:

    mbedtls_mpi_free( &TG ); mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TB );
   e1fc0:	a801      	add	r0, sp, #4
   e1fc2:	f7fe feb2 	bl	e0d2a <mbedtls_mpi_free>
   e1fc6:	a804      	add	r0, sp, #16
   e1fc8:	f7fe feaf 	bl	e0d2a <mbedtls_mpi_free>
   e1fcc:	a807      	add	r0, sp, #28
   e1fce:	f7fe feac 	bl	e0d2a <mbedtls_mpi_free>

    return( ret );
}
   e1fd2:	4620      	mov	r0, r4
   e1fd4:	b00b      	add	sp, #44	; 0x2c
   e1fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000e1fd8 <mbedtls_mpi_fill_random>:
 * deterministic, eg for tests).
 */
int mbedtls_mpi_fill_random( mbedtls_mpi *X, size_t size,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
   e1fd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    int ret;
    size_t const limbs = CHARS_TO_LIMBS( size );
   e1fdc:	f011 0403 	ands.w	r4, r1, #3
   e1fe0:	bf18      	it	ne
   e1fe2:	2401      	movne	r4, #1
 * deterministic, eg for tests).
 */
int mbedtls_mpi_fill_random( mbedtls_mpi *X, size_t size,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
   e1fe4:	4699      	mov	r9, r3

    MPI_VALIDATE_RET( X     != NULL );
    MPI_VALIDATE_RET( f_rng != NULL );

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
   e1fe6:	6843      	ldr	r3, [r0, #4]
int mbedtls_mpi_fill_random( mbedtls_mpi *X, size_t size,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
    int ret;
    size_t const limbs = CHARS_TO_LIMBS( size );
   e1fe8:	eb04 0491 	add.w	r4, r4, r1, lsr #2

    MPI_VALIDATE_RET( X     != NULL );
    MPI_VALIDATE_RET( f_rng != NULL );

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
   e1fec:	429c      	cmp	r4, r3
 * deterministic, eg for tests).
 */
int mbedtls_mpi_fill_random( mbedtls_mpi *X, size_t size,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
   e1fee:	4606      	mov	r6, r0
   e1ff0:	460f      	mov	r7, r1
   e1ff2:	4690      	mov	r8, r2

    MPI_VALIDATE_RET( X     != NULL );
    MPI_VALIDATE_RET( f_rng != NULL );

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
   e1ff4:	d106      	bne.n	e2004 <mbedtls_mpi_fill_random+0x2c>
    {
        mbedtls_mpi_free( X );
        mbedtls_mpi_init( X );
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
   e1ff6:	2100      	movs	r1, #0
   e1ff8:	4630      	mov	r0, r6
   e1ffa:	f7fe ff71 	bl	e0ee0 <mbedtls_mpi_lset>
   e1ffe:	4605      	mov	r5, r0
   e2000:	b9d8      	cbnz	r0, e203a <mbedtls_mpi_fill_random+0x62>
   e2002:	e00e      	b.n	e2022 <mbedtls_mpi_fill_random+0x4a>
    MPI_VALIDATE_RET( f_rng != NULL );

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
    {
        mbedtls_mpi_free( X );
   e2004:	f7fe fe91 	bl	e0d2a <mbedtls_mpi_free>
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   e2008:	2301      	movs	r3, #1
   e200a:	6033      	str	r3, [r6, #0]
    X->n = 0;
   e200c:	2300      	movs	r3, #0
   e200e:	6073      	str	r3, [r6, #4]
    X->p = NULL;
   e2010:	60b3      	str	r3, [r6, #8]
    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
    {
        mbedtls_mpi_free( X );
        mbedtls_mpi_init( X );
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
   e2012:	4621      	mov	r1, r4
   e2014:	4630      	mov	r0, r6
   e2016:	f7fe fe9a 	bl	e0d4e <mbedtls_mpi_grow>
   e201a:	4605      	mov	r5, r0
   e201c:	2800      	cmp	r0, #0
   e201e:	d0ea      	beq.n	e1ff6 <mbedtls_mpi_fill_random+0x1e>
   e2020:	e00b      	b.n	e203a <mbedtls_mpi_fill_random+0x62>
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );

    Xp = (unsigned char*) X->p;
    f_rng( p_rng, Xp + overhead, size );
   e2022:	68b1      	ldr	r1, [r6, #8]
   e2024:	ebc7 0384 	rsb	r3, r7, r4, lsl #2
   e2028:	463a      	mov	r2, r7
   e202a:	4419      	add	r1, r3
   e202c:	4648      	mov	r0, r9
   e202e:	47c0      	blx	r8

static void mpi_bigendian_to_host( mbedtls_mpi_uint * const p, size_t limbs )
{
    mbedtls_mpi_uint *cur_limb_left;
    mbedtls_mpi_uint *cur_limb_right;
    if( limbs == 0 )
   e2030:	b11c      	cbz	r4, e203a <mbedtls_mpi_fill_random+0x62>
   e2032:	4621      	mov	r1, r4
   e2034:	68b0      	ldr	r0, [r6, #8]
   e2036:	f7fe fe61 	bl	e0cfc <_ZL21mpi_bigendian_to_hostPmj.part.1>

    mpi_bigendian_to_host( X->p, limbs );

cleanup:
    return( ret );
}
   e203a:	4628      	mov	r0, r5
   e203c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000e2040 <mbedtls_mpi_inv_mod>:

/*
 * Modular inverse: X = A^-1 mod N  (HAC 14.61 / 14.64)
 */
int mbedtls_mpi_inv_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *N )
{
   e2040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e2044:	4680      	mov	r8, r0
   e2046:	b09c      	sub	sp, #112	; 0x70
   e2048:	460f      	mov	r7, r1
    mbedtls_mpi G, TA, TU, U1, U2, TB, TV, V1, V2;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( N != NULL );

    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
   e204a:	4610      	mov	r0, r2
   e204c:	2101      	movs	r1, #1

/*
 * Modular inverse: X = A^-1 mod N  (HAC 14.61 / 14.64)
 */
int mbedtls_mpi_inv_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *N )
{
   e204e:	4616      	mov	r6, r2
    mbedtls_mpi G, TA, TU, U1, U2, TB, TV, V1, V2;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( N != NULL );

    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
   e2050:	f7ff f991 	bl	e1376 <mbedtls_mpi_cmp_int>
   e2054:	2800      	cmp	r0, #0
   e2056:	f340 814c 	ble.w	e22f2 <mbedtls_mpi_inv_mod+0x2b2>
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
    X->n = 0;
   e205a:	2300      	movs	r3, #0
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   e205c:	2501      	movs	r5, #1

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TU ); mbedtls_mpi_init( &U1 ); mbedtls_mpi_init( &U2 );
    mbedtls_mpi_init( &G ); mbedtls_mpi_init( &TB ); mbedtls_mpi_init( &TV );
    mbedtls_mpi_init( &V1 ); mbedtls_mpi_init( &V2 );

    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
   e205e:	4632      	mov	r2, r6
   e2060:	4639      	mov	r1, r7
   e2062:	a801      	add	r0, sp, #4
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   e2064:	9504      	str	r5, [sp, #16]
    X->n = 0;
   e2066:	9305      	str	r3, [sp, #20]
    X->p = NULL;
   e2068:	9306      	str	r3, [sp, #24]
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   e206a:	9507      	str	r5, [sp, #28]
    X->n = 0;
   e206c:	9308      	str	r3, [sp, #32]
    X->p = NULL;
   e206e:	9309      	str	r3, [sp, #36]	; 0x24
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   e2070:	950a      	str	r5, [sp, #40]	; 0x28
    X->n = 0;
   e2072:	930b      	str	r3, [sp, #44]	; 0x2c
    X->p = NULL;
   e2074:	930c      	str	r3, [sp, #48]	; 0x30
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   e2076:	950d      	str	r5, [sp, #52]	; 0x34
    X->n = 0;
   e2078:	930e      	str	r3, [sp, #56]	; 0x38
    X->p = NULL;
   e207a:	930f      	str	r3, [sp, #60]	; 0x3c
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   e207c:	9501      	str	r5, [sp, #4]
    X->n = 0;
   e207e:	9302      	str	r3, [sp, #8]
    X->p = NULL;
   e2080:	9303      	str	r3, [sp, #12]
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   e2082:	9510      	str	r5, [sp, #64]	; 0x40
    X->n = 0;
   e2084:	9311      	str	r3, [sp, #68]	; 0x44
    X->p = NULL;
   e2086:	9312      	str	r3, [sp, #72]	; 0x48
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   e2088:	9513      	str	r5, [sp, #76]	; 0x4c
    X->n = 0;
   e208a:	9314      	str	r3, [sp, #80]	; 0x50
    X->p = NULL;
   e208c:	9315      	str	r3, [sp, #84]	; 0x54
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   e208e:	9516      	str	r5, [sp, #88]	; 0x58
    X->n = 0;
   e2090:	9317      	str	r3, [sp, #92]	; 0x5c
    X->p = NULL;
   e2092:	9318      	str	r3, [sp, #96]	; 0x60
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   e2094:	9519      	str	r5, [sp, #100]	; 0x64
    X->n = 0;
   e2096:	931a      	str	r3, [sp, #104]	; 0x68
    X->p = NULL;
   e2098:	931b      	str	r3, [sp, #108]	; 0x6c

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TU ); mbedtls_mpi_init( &U1 ); mbedtls_mpi_init( &U2 );
    mbedtls_mpi_init( &G ); mbedtls_mpi_init( &TB ); mbedtls_mpi_init( &TV );
    mbedtls_mpi_init( &V1 ); mbedtls_mpi_init( &V2 );

    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
   e209a:	f7ff ff18 	bl	e1ece <mbedtls_mpi_gcd>
   e209e:	4604      	mov	r4, r0
   e20a0:	2800      	cmp	r0, #0
   e20a2:	f040 8109 	bne.w	e22b8 <mbedtls_mpi_inv_mod+0x278>

    if( mbedtls_mpi_cmp_int( &G, 1 ) != 0 )
   e20a6:	4629      	mov	r1, r5
   e20a8:	a801      	add	r0, sp, #4
   e20aa:	f7ff f964 	bl	e1376 <mbedtls_mpi_cmp_int>
   e20ae:	2800      	cmp	r0, #0
   e20b0:	f040 8100 	bne.w	e22b4 <mbedtls_mpi_inv_mod+0x274>
    {
        ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
        goto cleanup;
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &TA, A, N ) );
   e20b4:	4632      	mov	r2, r6
   e20b6:	4639      	mov	r1, r7
   e20b8:	a804      	add	r0, sp, #16
   e20ba:	f7ff fcb7 	bl	e1a2c <mbedtls_mpi_mod_mpi>
   e20be:	4604      	mov	r4, r0
   e20c0:	2800      	cmp	r0, #0
   e20c2:	f040 80f9 	bne.w	e22b8 <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TU, &TA ) );
   e20c6:	a904      	add	r1, sp, #16
   e20c8:	a807      	add	r0, sp, #28
   e20ca:	f7fe fea8 	bl	e0e1e <mbedtls_mpi_copy>
   e20ce:	4604      	mov	r4, r0
   e20d0:	2800      	cmp	r0, #0
   e20d2:	f040 80f1 	bne.w	e22b8 <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, N ) );
   e20d6:	4631      	mov	r1, r6
   e20d8:	a810      	add	r0, sp, #64	; 0x40
   e20da:	f7fe fea0 	bl	e0e1e <mbedtls_mpi_copy>
   e20de:	4604      	mov	r4, r0
   e20e0:	2800      	cmp	r0, #0
   e20e2:	f040 80e9 	bne.w	e22b8 <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TV, N ) );
   e20e6:	4631      	mov	r1, r6
   e20e8:	a813      	add	r0, sp, #76	; 0x4c
   e20ea:	f7fe fe98 	bl	e0e1e <mbedtls_mpi_copy>
   e20ee:	4604      	mov	r4, r0
   e20f0:	2800      	cmp	r0, #0
   e20f2:	f040 80e1 	bne.w	e22b8 <mbedtls_mpi_inv_mod+0x278>

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U1, 1 ) );
   e20f6:	4629      	mov	r1, r5
   e20f8:	a80a      	add	r0, sp, #40	; 0x28
   e20fa:	f7fe fef1 	bl	e0ee0 <mbedtls_mpi_lset>
   e20fe:	4604      	mov	r4, r0
   e2100:	2800      	cmp	r0, #0
   e2102:	f040 80d9 	bne.w	e22b8 <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U2, 0 ) );
   e2106:	4601      	mov	r1, r0
   e2108:	a80d      	add	r0, sp, #52	; 0x34
   e210a:	f7fe fee9 	bl	e0ee0 <mbedtls_mpi_lset>
   e210e:	4604      	mov	r4, r0
   e2110:	2800      	cmp	r0, #0
   e2112:	f040 80d1 	bne.w	e22b8 <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V1, 0 ) );
   e2116:	4601      	mov	r1, r0
   e2118:	a816      	add	r0, sp, #88	; 0x58
   e211a:	f7fe fee1 	bl	e0ee0 <mbedtls_mpi_lset>
   e211e:	4604      	mov	r4, r0
   e2120:	2800      	cmp	r0, #0
   e2122:	f040 80c9 	bne.w	e22b8 <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V2, 1 ) );
   e2126:	4629      	mov	r1, r5
   e2128:	a819      	add	r0, sp, #100	; 0x64
   e212a:	f7fe fed9 	bl	e0ee0 <mbedtls_mpi_lset>
   e212e:	4604      	mov	r4, r0
   e2130:	2800      	cmp	r0, #0
   e2132:	f040 80c1 	bne.w	e22b8 <mbedtls_mpi_inv_mod+0x278>

    do
    {
        while( ( TU.p[0] & 1 ) == 0 )
   e2136:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e2138:	681b      	ldr	r3, [r3, #0]
   e213a:	07dd      	lsls	r5, r3, #31
   e213c:	d44c      	bmi.n	e21d8 <mbedtls_mpi_inv_mod+0x198>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TU, 1 ) );
   e213e:	2101      	movs	r1, #1
   e2140:	a807      	add	r0, sp, #28
   e2142:	f7fe fff4 	bl	e112e <mbedtls_mpi_shift_r>
   e2146:	4604      	mov	r4, r0
   e2148:	2800      	cmp	r0, #0
   e214a:	f040 80b5 	bne.w	e22b8 <mbedtls_mpi_inv_mod+0x278>

            if( ( U1.p[0] & 1 ) != 0 || ( U2.p[0] & 1 ) != 0 )
   e214e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   e2150:	681b      	ldr	r3, [r3, #0]
   e2152:	07dc      	lsls	r4, r3, #31
   e2154:	d410      	bmi.n	e2178 <mbedtls_mpi_inv_mod+0x138>
   e2156:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   e2158:	681b      	ldr	r3, [r3, #0]
   e215a:	07d8      	lsls	r0, r3, #31
   e215c:	d40c      	bmi.n	e2178 <mbedtls_mpi_inv_mod+0x138>
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &U1, &U1, &TB ) );
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &TA ) );
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U1, 1 ) );
   e215e:	2101      	movs	r1, #1
   e2160:	a80a      	add	r0, sp, #40	; 0x28
   e2162:	f7fe ffe4 	bl	e112e <mbedtls_mpi_shift_r>
   e2166:	4604      	mov	r4, r0
   e2168:	2800      	cmp	r0, #0
   e216a:	f040 80a5 	bne.w	e22b8 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
   e216e:	2101      	movs	r1, #1
   e2170:	a80d      	add	r0, sp, #52	; 0x34
   e2172:	f7fe ffdc 	bl	e112e <mbedtls_mpi_shift_r>
   e2176:	e7da      	b.n	e212e <mbedtls_mpi_inv_mod+0xee>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TU, 1 ) );

            if( ( U1.p[0] & 1 ) != 0 || ( U2.p[0] & 1 ) != 0 )
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &U1, &U1, &TB ) );
   e2178:	a90a      	add	r1, sp, #40	; 0x28
   e217a:	aa10      	add	r2, sp, #64	; 0x40
   e217c:	4608      	mov	r0, r1
   e217e:	f7ff f9aa 	bl	e14d6 <mbedtls_mpi_add_mpi>
   e2182:	4604      	mov	r4, r0
   e2184:	2800      	cmp	r0, #0
   e2186:	f040 8097 	bne.w	e22b8 <mbedtls_mpi_inv_mod+0x278>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &TA ) );
   e218a:	a90d      	add	r1, sp, #52	; 0x34
   e218c:	aa04      	add	r2, sp, #16
   e218e:	4608      	mov	r0, r1
   e2190:	f7ff f9c2 	bl	e1518 <mbedtls_mpi_sub_mpi>
   e2194:	4604      	mov	r4, r0
   e2196:	2800      	cmp	r0, #0
   e2198:	d0e1      	beq.n	e215e <mbedtls_mpi_inv_mod+0x11e>
   e219a:	e08d      	b.n	e22b8 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
        }

        while( ( TV.p[0] & 1 ) == 0 )
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TV, 1 ) );
   e219c:	2101      	movs	r1, #1
   e219e:	a813      	add	r0, sp, #76	; 0x4c
   e21a0:	f7fe ffc5 	bl	e112e <mbedtls_mpi_shift_r>
   e21a4:	4604      	mov	r4, r0
   e21a6:	2800      	cmp	r0, #0
   e21a8:	f040 8086 	bne.w	e22b8 <mbedtls_mpi_inv_mod+0x278>

            if( ( V1.p[0] & 1 ) != 0 || ( V2.p[0] & 1 ) != 0 )
   e21ac:	9b18      	ldr	r3, [sp, #96]	; 0x60
   e21ae:	681b      	ldr	r3, [r3, #0]
   e21b0:	07da      	lsls	r2, r3, #31
   e21b2:	d416      	bmi.n	e21e2 <mbedtls_mpi_inv_mod+0x1a2>
   e21b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   e21b6:	681b      	ldr	r3, [r3, #0]
   e21b8:	07db      	lsls	r3, r3, #31
   e21ba:	d412      	bmi.n	e21e2 <mbedtls_mpi_inv_mod+0x1a2>
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, &TB ) );
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &TA ) );
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V1, 1 ) );
   e21bc:	2101      	movs	r1, #1
   e21be:	a816      	add	r0, sp, #88	; 0x58
   e21c0:	f7fe ffb5 	bl	e112e <mbedtls_mpi_shift_r>
   e21c4:	4604      	mov	r4, r0
   e21c6:	2800      	cmp	r0, #0
   e21c8:	d176      	bne.n	e22b8 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V2, 1 ) );
   e21ca:	2101      	movs	r1, #1
   e21cc:	a819      	add	r0, sp, #100	; 0x64
   e21ce:	f7fe ffae 	bl	e112e <mbedtls_mpi_shift_r>
   e21d2:	4604      	mov	r4, r0
   e21d4:	2800      	cmp	r0, #0
   e21d6:	d16f      	bne.n	e22b8 <mbedtls_mpi_inv_mod+0x278>

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U1, 1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
        }

        while( ( TV.p[0] & 1 ) == 0 )
   e21d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e21da:	681b      	ldr	r3, [r3, #0]
   e21dc:	07d9      	lsls	r1, r3, #31
   e21de:	d411      	bmi.n	e2204 <mbedtls_mpi_inv_mod+0x1c4>
   e21e0:	e7dc      	b.n	e219c <mbedtls_mpi_inv_mod+0x15c>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TV, 1 ) );

            if( ( V1.p[0] & 1 ) != 0 || ( V2.p[0] & 1 ) != 0 )
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, &TB ) );
   e21e2:	a916      	add	r1, sp, #88	; 0x58
   e21e4:	aa10      	add	r2, sp, #64	; 0x40
   e21e6:	4608      	mov	r0, r1
   e21e8:	f7ff f975 	bl	e14d6 <mbedtls_mpi_add_mpi>
   e21ec:	4604      	mov	r4, r0
   e21ee:	2800      	cmp	r0, #0
   e21f0:	d162      	bne.n	e22b8 <mbedtls_mpi_inv_mod+0x278>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &TA ) );
   e21f2:	a919      	add	r1, sp, #100	; 0x64
   e21f4:	aa04      	add	r2, sp, #16
   e21f6:	4608      	mov	r0, r1
   e21f8:	f7ff f98e 	bl	e1518 <mbedtls_mpi_sub_mpi>
   e21fc:	4604      	mov	r4, r0
   e21fe:	2800      	cmp	r0, #0
   e2200:	d0dc      	beq.n	e21bc <mbedtls_mpi_inv_mod+0x17c>
   e2202:	e059      	b.n	e22b8 <mbedtls_mpi_inv_mod+0x278>

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V1, 1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V2, 1 ) );
        }

        if( mbedtls_mpi_cmp_mpi( &TU, &TV ) >= 0 )
   e2204:	a913      	add	r1, sp, #76	; 0x4c
   e2206:	a807      	add	r0, sp, #28
   e2208:	f7ff f870 	bl	e12ec <mbedtls_mpi_cmp_mpi>
   e220c:	2800      	cmp	r0, #0
   e220e:	db1f      	blt.n	e2250 <mbedtls_mpi_inv_mod+0x210>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TU, &TU, &TV ) );
   e2210:	a907      	add	r1, sp, #28
   e2212:	aa13      	add	r2, sp, #76	; 0x4c
   e2214:	4608      	mov	r0, r1
   e2216:	f7ff f97f 	bl	e1518 <mbedtls_mpi_sub_mpi>
   e221a:	4604      	mov	r4, r0
   e221c:	2800      	cmp	r0, #0
   e221e:	d14b      	bne.n	e22b8 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U1, &U1, &V1 ) );
   e2220:	a90a      	add	r1, sp, #40	; 0x28
   e2222:	aa16      	add	r2, sp, #88	; 0x58
   e2224:	4608      	mov	r0, r1
   e2226:	f7ff f977 	bl	e1518 <mbedtls_mpi_sub_mpi>
   e222a:	4604      	mov	r4, r0
   e222c:	2800      	cmp	r0, #0
   e222e:	d143      	bne.n	e22b8 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &V2 ) );
   e2230:	aa19      	add	r2, sp, #100	; 0x64
   e2232:	a90d      	add	r1, sp, #52	; 0x34
   e2234:	4608      	mov	r0, r1
   e2236:	f7ff f96f 	bl	e1518 <mbedtls_mpi_sub_mpi>
   e223a:	4604      	mov	r4, r0
   e223c:	2800      	cmp	r0, #0
   e223e:	d13b      	bne.n	e22b8 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TV, &TV, &TU ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, &U1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
        }
    }
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );
   e2240:	2100      	movs	r1, #0
   e2242:	a807      	add	r0, sp, #28
   e2244:	f7ff f897 	bl	e1376 <mbedtls_mpi_cmp_int>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U1, 1 ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U2, 0 ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V1, 0 ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V2, 1 ) );

    do
   e2248:	2800      	cmp	r0, #0
   e224a:	f47f af74 	bne.w	e2136 <mbedtls_mpi_inv_mod+0xf6>
   e224e:	e017      	b.n	e2280 <mbedtls_mpi_inv_mod+0x240>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U1, &U1, &V1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &V2 ) );
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TV, &TV, &TU ) );
   e2250:	a913      	add	r1, sp, #76	; 0x4c
   e2252:	aa07      	add	r2, sp, #28
   e2254:	4608      	mov	r0, r1
   e2256:	f7ff f95f 	bl	e1518 <mbedtls_mpi_sub_mpi>
   e225a:	4604      	mov	r4, r0
   e225c:	bb60      	cbnz	r0, e22b8 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, &U1 ) );
   e225e:	a916      	add	r1, sp, #88	; 0x58
   e2260:	aa0a      	add	r2, sp, #40	; 0x28
   e2262:	4608      	mov	r0, r1
   e2264:	f7ff f958 	bl	e1518 <mbedtls_mpi_sub_mpi>
   e2268:	4604      	mov	r4, r0
   e226a:	bb28      	cbnz	r0, e22b8 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
   e226c:	aa0d      	add	r2, sp, #52	; 0x34
   e226e:	a919      	add	r1, sp, #100	; 0x64
   e2270:	e7e0      	b.n	e2234 <mbedtls_mpi_inv_mod+0x1f4>
        }
    }
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );

    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );
   e2272:	a916      	add	r1, sp, #88	; 0x58
   e2274:	4632      	mov	r2, r6
   e2276:	4608      	mov	r0, r1
   e2278:	f7ff f92d 	bl	e14d6 <mbedtls_mpi_add_mpi>
   e227c:	4604      	mov	r4, r0
   e227e:	b9d8      	cbnz	r0, e22b8 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
        }
    }
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );

    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
   e2280:	2100      	movs	r1, #0
   e2282:	a816      	add	r0, sp, #88	; 0x58
   e2284:	f7ff f877 	bl	e1376 <mbedtls_mpi_cmp_int>
   e2288:	2800      	cmp	r0, #0
   e228a:	dbf2      	blt.n	e2272 <mbedtls_mpi_inv_mod+0x232>
   e228c:	e006      	b.n	e229c <mbedtls_mpi_inv_mod+0x25c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );

    while( mbedtls_mpi_cmp_mpi( &V1, N ) >= 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, N ) );
   e228e:	a916      	add	r1, sp, #88	; 0x58
   e2290:	4632      	mov	r2, r6
   e2292:	4608      	mov	r0, r1
   e2294:	f7ff f940 	bl	e1518 <mbedtls_mpi_sub_mpi>
   e2298:	4604      	mov	r4, r0
   e229a:	b968      	cbnz	r0, e22b8 <mbedtls_mpi_inv_mod+0x278>
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );

    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );

    while( mbedtls_mpi_cmp_mpi( &V1, N ) >= 0 )
   e229c:	4631      	mov	r1, r6
   e229e:	a816      	add	r0, sp, #88	; 0x58
   e22a0:	f7ff f824 	bl	e12ec <mbedtls_mpi_cmp_mpi>
   e22a4:	2800      	cmp	r0, #0
   e22a6:	daf2      	bge.n	e228e <mbedtls_mpi_inv_mod+0x24e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, N ) );

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &V1 ) );
   e22a8:	a916      	add	r1, sp, #88	; 0x58
   e22aa:	4640      	mov	r0, r8
   e22ac:	f7fe fdb7 	bl	e0e1e <mbedtls_mpi_copy>
   e22b0:	4604      	mov	r4, r0
   e22b2:	e001      	b.n	e22b8 <mbedtls_mpi_inv_mod+0x278>

    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );

    if( mbedtls_mpi_cmp_int( &G, 1 ) != 0 )
    {
        ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
   e22b4:	f06f 040d 	mvn.w	r4, #13

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &V1 ) );

cleanup:

    mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TU ); mbedtls_mpi_free( &U1 ); mbedtls_mpi_free( &U2 );
   e22b8:	a804      	add	r0, sp, #16
   e22ba:	f7fe fd36 	bl	e0d2a <mbedtls_mpi_free>
   e22be:	a807      	add	r0, sp, #28
   e22c0:	f7fe fd33 	bl	e0d2a <mbedtls_mpi_free>
   e22c4:	a80a      	add	r0, sp, #40	; 0x28
   e22c6:	f7fe fd30 	bl	e0d2a <mbedtls_mpi_free>
   e22ca:	a80d      	add	r0, sp, #52	; 0x34
   e22cc:	f7fe fd2d 	bl	e0d2a <mbedtls_mpi_free>
    mbedtls_mpi_free( &G ); mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TV );
   e22d0:	a801      	add	r0, sp, #4
   e22d2:	f7fe fd2a 	bl	e0d2a <mbedtls_mpi_free>
   e22d6:	a810      	add	r0, sp, #64	; 0x40
   e22d8:	f7fe fd27 	bl	e0d2a <mbedtls_mpi_free>
   e22dc:	a813      	add	r0, sp, #76	; 0x4c
   e22de:	f7fe fd24 	bl	e0d2a <mbedtls_mpi_free>
    mbedtls_mpi_free( &V1 ); mbedtls_mpi_free( &V2 );
   e22e2:	a816      	add	r0, sp, #88	; 0x58
   e22e4:	f7fe fd21 	bl	e0d2a <mbedtls_mpi_free>
   e22e8:	a819      	add	r0, sp, #100	; 0x64
   e22ea:	f7fe fd1e 	bl	e0d2a <mbedtls_mpi_free>

    return( ret );
   e22ee:	4620      	mov	r0, r4
   e22f0:	e001      	b.n	e22f6 <mbedtls_mpi_inv_mod+0x2b6>
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( N != NULL );

    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
   e22f2:	f06f 0003 	mvn.w	r0, #3
    mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TU ); mbedtls_mpi_free( &U1 ); mbedtls_mpi_free( &U2 );
    mbedtls_mpi_free( &G ); mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TV );
    mbedtls_mpi_free( &V1 ); mbedtls_mpi_free( &V2 );

    return( ret );
}
   e22f6:	b01c      	add	sp, #112	; 0x70
   e22f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000e22fc <_ZL14aes_gen_tablesv>:
#define MUL(x,y) ( ( (x) && (y) ) ? pow[(log[(x)]+log[(y)]) % 255] : 0 )

static int aes_init_done = 0;

static void aes_gen_tables( void )
{
   e22fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e2300:	f6ad 0d14 	subw	sp, sp, #2068	; 0x814
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
   e2304:	2301      	movs	r3, #1
   e2306:	2200      	movs	r2, #0
    {
        pow[i] = x;
        log[x] = i;
   e2308:	f50d 6082 	add.w	r0, sp, #1040	; 0x410
    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
    {
        pow[i] = x;
   e230c:	a904      	add	r1, sp, #16
        log[x] = i;
   e230e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
    {
        pow[i] = x;
   e2312:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        log[x] = i;
        x = ( x ^ XTIME( x ) ) & 0xFF;
   e2316:	f013 0180 	ands.w	r1, r3, #128	; 0x80
   e231a:	bf18      	it	ne
   e231c:	211b      	movne	r1, #27
   e231e:	ea83 0343 	eor.w	r3, r3, r3, lsl #1
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
   e2322:	3201      	adds	r2, #1
    {
        pow[i] = x;
        log[x] = i;
        x = ( x ^ XTIME( x ) ) & 0xFF;
   e2324:	404b      	eors	r3, r1
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
   e2326:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    {
        pow[i] = x;
        log[x] = i;
        x = ( x ^ XTIME( x ) ) & 0xFF;
   e232a:	b2db      	uxtb	r3, r3
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
   e232c:	d1ee      	bne.n	e230c <_ZL14aes_gen_tablesv+0x10>
    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
    {
        RCON[i] = (uint32_t) x;
   e232e:	4c66      	ldr	r4, [pc, #408]	; (e24c8 <_ZL14aes_gen_tablesv+0x1cc>)
   e2330:	2301      	movs	r3, #1
   e2332:	2200      	movs	r2, #0
        x = XTIME( x ) & 0xFF;
   e2334:	f013 0180 	ands.w	r1, r3, #128	; 0x80
    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
    {
        RCON[i] = (uint32_t) x;
   e2338:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
        x = XTIME( x ) & 0xFF;
   e233c:	bf18      	it	ne
   e233e:	211b      	movne	r1, #27
    }

    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
   e2340:	3201      	adds	r2, #1
    {
        RCON[i] = (uint32_t) x;
        x = XTIME( x ) & 0xFF;
   e2342:	ea81 0343 	eor.w	r3, r1, r3, lsl #1
    }

    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
   e2346:	2a0a      	cmp	r2, #10
    {
        RCON[i] = (uint32_t) x;
        x = XTIME( x ) & 0xFF;
   e2348:	b2db      	uxtb	r3, r3
    }

    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
   e234a:	d1f3      	bne.n	e2334 <_ZL14aes_gen_tablesv+0x38>
    }

    /*
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
   e234c:	4e5f      	ldr	r6, [pc, #380]	; (e24cc <_ZL14aes_gen_tablesv+0x1d0>)
    RSb[0x63] = 0x00;
   e234e:	4d60      	ldr	r5, [pc, #384]	; (e24d0 <_ZL14aes_gen_tablesv+0x1d4>)
    }

    /*
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
   e2350:	2363      	movs	r3, #99	; 0x63
   e2352:	7033      	strb	r3, [r6, #0]
    RSb[0x63] = 0x00;
   e2354:	2300      	movs	r3, #0
   e2356:	f885 3063 	strb.w	r3, [r5, #99]	; 0x63

    for( i = 1; i < 256; i++ )
   e235a:	2401      	movs	r4, #1
    {
        x = pow[255 - log[i]];
   e235c:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   e2360:	aa04      	add	r2, sp, #16
   e2362:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
   e2366:	f852 e023 	ldr.w	lr, [r2, r3, lsl #2]

        y  = x; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
   e236a:	ea4f 11ee 	mov.w	r1, lr, asr #7
   e236e:	ea41 014e 	orr.w	r1, r1, lr, lsl #1
   e2372:	b2c9      	uxtb	r1, r1
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
   e2374:	11ca      	asrs	r2, r1, #7
   e2376:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
   e237a:	b2d2      	uxtb	r2, r2
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
   e237c:	11d3      	asrs	r3, r2, #7
   e237e:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
   e2382:	b2db      	uxtb	r3, r3
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y ^ 0x63;
   e2384:	f08e 0e63 	eor.w	lr, lr, #99	; 0x63
        x = pow[255 - log[i]];

        y  = x; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
   e2388:	11df      	asrs	r7, r3, #7
        x ^= y ^ 0x63;
   e238a:	ea8e 0101 	eor.w	r1, lr, r1
        x = pow[255 - log[i]];

        y  = x; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
   e238e:	ea47 0743 	orr.w	r7, r7, r3, lsl #1
        x ^= y ^ 0x63;
   e2392:	404a      	eors	r2, r1
   e2394:	4053      	eors	r3, r2
   e2396:	b2fa      	uxtb	r2, r7
   e2398:	4053      	eors	r3, r2

        FSb[i] = (unsigned char) x;
   e239a:	5533      	strb	r3, [r6, r4]
        RSb[x] = (unsigned char) i;
   e239c:	54ec      	strb	r4, [r5, r3]
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
    RSb[0x63] = 0x00;

    for( i = 1; i < 256; i++ )
   e239e:	3401      	adds	r4, #1
   e23a0:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   e23a4:	d1da      	bne.n	e235c <_ZL14aes_gen_tablesv+0x60>
        FT3[i] = ROTL8( FT2[i] );
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
   e23a6:	6b83      	ldr	r3, [r0, #56]	; 0x38
   e23a8:	9301      	str	r3, [sp, #4]
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
   e23aa:	6a43      	ldr	r3, [r0, #36]	; 0x24
   e23ac:	9302      	str	r3, [sp, #8]
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
   e23ae:	6ac7      	ldr	r7, [r0, #44]	; 0x2c

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
   e23b0:	6b43      	ldr	r3, [r0, #52]	; 0x34
    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
    {
        x = FSb[i];
   e23b2:	f8df e118 	ldr.w	lr, [pc, #280]	; e24cc <_ZL14aes_gen_tablesv+0x1d0>
        z =  ( y ^ x ) & 0xFF;

        FT0[i] = ( (uint32_t) y       ) ^
                 ( (uint32_t) x <<  8 ) ^
                 ( (uint32_t) x << 16 ) ^
                 ( (uint32_t) z << 24 );
   e23b6:	f8df c12c 	ldr.w	ip, [pc, #300]	; e24e4 <_ZL14aes_gen_tablesv+0x1e8>

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        FT1[i] = ROTL8( FT0[i] );
   e23ba:	f8df 812c 	ldr.w	r8, [pc, #300]	; e24e8 <_ZL14aes_gen_tablesv+0x1ec>
        FT2[i] = ROTL8( FT1[i] );
   e23be:	f8df 912c 	ldr.w	r9, [pc, #300]	; e24ec <_ZL14aes_gen_tablesv+0x1f0>
        FT3[i] = ROTL8( FT2[i] );
   e23c2:	f8df a12c 	ldr.w	sl, [pc, #300]	; e24f0 <_ZL14aes_gen_tablesv+0x1f4>
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];
   e23c6:	f8df b108 	ldr.w	fp, [pc, #264]	; e24d0 <_ZL14aes_gen_tablesv+0x1d4>

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
   e23ca:	9303      	str	r3, [sp, #12]
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
   e23cc:	2200      	movs	r2, #0
    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
    {
        x = FSb[i];
   e23ce:	f812 000e 	ldrb.w	r0, [r2, lr]
        y = XTIME( x ) & 0xFF;
   e23d2:	f010 0f80 	tst.w	r0, #128	; 0x80
   e23d6:	bf14      	ite	ne
   e23d8:	211b      	movne	r1, #27
   e23da:	2100      	moveq	r1, #0
   e23dc:	ea81 0140 	eor.w	r1, r1, r0, lsl #1
        z =  ( y ^ x ) & 0xFF;

        FT0[i] = ( (uint32_t) y       ) ^
                 ( (uint32_t) x <<  8 ) ^
                 ( (uint32_t) x << 16 ) ^
   e23e0:	0403      	lsls	r3, r0, #16
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
    {
        x = FSb[i];
        y = XTIME( x ) & 0xFF;
   e23e2:	b2c9      	uxtb	r1, r1
        z =  ( y ^ x ) & 0xFF;

        FT0[i] = ( (uint32_t) y       ) ^
                 ( (uint32_t) x <<  8 ) ^
                 ( (uint32_t) x << 16 ) ^
   e23e4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   e23e8:	404b      	eors	r3, r1
   e23ea:	4041      	eors	r1, r0
   e23ec:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
                 ( (uint32_t) z << 24 );
   e23f0:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        FT1[i] = ROTL8( FT0[i] );
   e23f4:	ea4f 6333 	mov.w	r3, r3, ror #24
   e23f8:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
        FT2[i] = ROTL8( FT1[i] );
   e23fc:	ea4f 6333 	mov.w	r3, r3, ror #24
   e2400:	f849 3022 	str.w	r3, [r9, r2, lsl #2]
        FT3[i] = ROTL8( FT2[i] );
   e2404:	ea4f 6333 	mov.w	r3, r3, ror #24
   e2408:	f84a 3022 	str.w	r3, [sl, r2, lsl #2]
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];
   e240c:	f81b 3002 	ldrb.w	r3, [fp, r2]
   e2410:	0094      	lsls	r4, r2, #2

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
   e2412:	b1d3      	cbz	r3, e244a <_ZL14aes_gen_tablesv+0x14e>
   e2414:	f50d 6182 	add.w	r1, sp, #1040	; 0x410
   e2418:	9801      	ldr	r0, [sp, #4]
   e241a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
   e241e:	1845      	adds	r5, r0, r1
   e2420:	20ff      	movs	r0, #255	; 0xff
   e2422:	fb95 f6f0 	sdiv	r6, r5, r0
   e2426:	ebc6 2606 	rsb	r6, r6, r6, lsl #8
   e242a:	1bae      	subs	r6, r5, r6
   e242c:	ad04      	add	r5, sp, #16
   e242e:	f855 5026 	ldr.w	r5, [r5, r6, lsl #2]
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
   e2432:	9e02      	ldr	r6, [sp, #8]
   e2434:	4431      	add	r1, r6
   e2436:	fb91 f0f0 	sdiv	r0, r1, r0
   e243a:	ebc0 2000 	rsb	r0, r0, r0, lsl #8
   e243e:	1a09      	subs	r1, r1, r0
   e2440:	a804      	add	r0, sp, #16
   e2442:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   e2446:	0209      	lsls	r1, r1, #8
   e2448:	e001      	b.n	e244e <_ZL14aes_gen_tablesv+0x152>
        FT3[i] = ROTL8( FT2[i] );
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
   e244a:	461d      	mov	r5, r3
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
   e244c:	4619      	mov	r1, r3
        FT3[i] = ROTL8( FT2[i] );
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
   e244e:	404d      	eors	r5, r1
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
   e2450:	b183      	cbz	r3, e2474 <_ZL14aes_gen_tablesv+0x178>
   e2452:	f50d 6182 	add.w	r1, sp, #1040	; 0x410
   e2456:	9803      	ldr	r0, [sp, #12]
   e2458:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
   e245c:	4401      	add	r1, r0
   e245e:	20ff      	movs	r0, #255	; 0xff
   e2460:	fb91 f0f0 	sdiv	r0, r1, r0
   e2464:	ebc0 2000 	rsb	r0, r0, r0, lsl #8
   e2468:	1a08      	subs	r0, r1, r0
   e246a:	a904      	add	r1, sp, #16
   e246c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   e2470:	0409      	lsls	r1, r1, #16
   e2472:	e000      	b.n	e2476 <_ZL14aes_gen_tablesv+0x17a>
   e2474:	4619      	mov	r1, r3
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
   e2476:	404d      	eors	r5, r1
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
   e2478:	b173      	cbz	r3, e2498 <_ZL14aes_gen_tablesv+0x19c>
   e247a:	f50d 6182 	add.w	r1, sp, #1040	; 0x410
   e247e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   e2482:	21ff      	movs	r1, #255	; 0xff
   e2484:	443b      	add	r3, r7
   e2486:	fb93 f1f1 	sdiv	r1, r3, r1
   e248a:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
   e248e:	1a59      	subs	r1, r3, r1
   e2490:	ab04      	add	r3, sp, #16
   e2492:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   e2496:	061b      	lsls	r3, r3, #24

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
   e2498:	405d      	eors	r5, r3
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
   e249a:	4b0e      	ldr	r3, [pc, #56]	; (e24d4 <_ZL14aes_gen_tablesv+0x1d8>)
   e249c:	50e5      	str	r5, [r4, r3]

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        RT1[i] = ROTL8( RT0[i] );
   e249e:	4b0e      	ldr	r3, [pc, #56]	; (e24d8 <_ZL14aes_gen_tablesv+0x1dc>)
   e24a0:	ea4f 6535 	mov.w	r5, r5, ror #24
   e24a4:	50e5      	str	r5, [r4, r3]
        RT2[i] = ROTL8( RT1[i] );
   e24a6:	4b0d      	ldr	r3, [pc, #52]	; (e24dc <_ZL14aes_gen_tablesv+0x1e0>)
   e24a8:	ea4f 6535 	mov.w	r5, r5, ror #24
   e24ac:	50e5      	str	r5, [r4, r3]
    }

    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
   e24ae:	3201      	adds	r2, #1
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        RT1[i] = ROTL8( RT0[i] );
        RT2[i] = ROTL8( RT1[i] );
        RT3[i] = ROTL8( RT2[i] );
   e24b0:	4b0b      	ldr	r3, [pc, #44]	; (e24e0 <_ZL14aes_gen_tablesv+0x1e4>)
   e24b2:	ea4f 6535 	mov.w	r5, r5, ror #24
    }

    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
   e24b6:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        RT1[i] = ROTL8( RT0[i] );
        RT2[i] = ROTL8( RT1[i] );
        RT3[i] = ROTL8( RT2[i] );
   e24ba:	50e5      	str	r5, [r4, r3]
    }

    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
   e24bc:	d187      	bne.n	e23ce <_ZL14aes_gen_tablesv+0xd2>
        RT1[i] = ROTL8( RT0[i] );
        RT2[i] = ROTL8( RT1[i] );
        RT3[i] = ROTL8( RT2[i] );
#endif /* !MBEDTLS_AES_FEWER_TABLES */
    }
}
   e24be:	f60d 0d14 	addw	sp, sp, #2068	; 0x814
   e24c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e24c6:	bf00      	nop
   e24c8:	2003e43c 	.word	0x2003e43c
   e24cc:	2003d33c 	.word	0x2003d33c
   e24d0:	2003d23c 	.word	0x2003d23c
   e24d4:	2003d83c 	.word	0x2003d83c
   e24d8:	2003dc3c 	.word	0x2003dc3c
   e24dc:	2003e03c 	.word	0x2003e03c
   e24e0:	2003d43c 	.word	0x2003d43c
   e24e4:	2003c23c 	.word	0x2003c23c
   e24e8:	2003c63c 	.word	0x2003c63c
   e24ec:	2003ca3c 	.word	0x2003ca3c
   e24f0:	2003ce3c 	.word	0x2003ce3c

000e24f4 <mbedtls_aes_init>:

void mbedtls_aes_init( mbedtls_aes_context *ctx )
{
    AES_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
   e24f4:	f44f 728c 	mov.w	r2, #280	; 0x118
   e24f8:	2100      	movs	r1, #0
   e24fa:	f007 bb02 	b.w	e9b02 <memset>

000e24fe <mbedtls_aes_free>:
}

void mbedtls_aes_free( mbedtls_aes_context *ctx )
{
    if( ctx == NULL )
   e24fe:	b118      	cbz	r0, e2508 <mbedtls_aes_free+0xa>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_aes_context ) );
   e2500:	f44f 718c 	mov.w	r1, #280	; 0x118
   e2504:	f7f8 be7a 	b.w	db1fc <mbedtls_platform_zeroize>
   e2508:	4770      	bx	lr
	...

000e250c <mbedtls_aes_setkey_enc>:
    uint32_t *RK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    switch( keybits )
   e250c:	2ac0      	cmp	r2, #192	; 0xc0
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
   e250e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e2510:	4604      	mov	r4, r0
   e2512:	460f      	mov	r7, r1
   e2514:	4615      	mov	r5, r2
    uint32_t *RK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    switch( keybits )
   e2516:	d007      	beq.n	e2528 <mbedtls_aes_setkey_enc+0x1c>
   e2518:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   e251c:	d006      	beq.n	e252c <mbedtls_aes_setkey_enc+0x20>
   e251e:	2a80      	cmp	r2, #128	; 0x80
   e2520:	f040 80e2 	bne.w	e26e8 <mbedtls_aes_setkey_enc+0x1dc>
    {
        case 128: ctx->nr = 10; break;
   e2524:	230a      	movs	r3, #10
   e2526:	e002      	b.n	e252e <mbedtls_aes_setkey_enc+0x22>
        case 192: ctx->nr = 12; break;
   e2528:	230c      	movs	r3, #12
   e252a:	e000      	b.n	e252e <mbedtls_aes_setkey_enc+0x22>
        case 256: ctx->nr = 14; break;
   e252c:	230e      	movs	r3, #14
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
    }

#if !defined(MBEDTLS_AES_ROM_TABLES)
    if( aes_init_done == 0 )
   e252e:	4e71      	ldr	r6, [pc, #452]	; (e26f4 <mbedtls_aes_setkey_enc+0x1e8>)

    switch( keybits )
    {
        case 128: ctx->nr = 10; break;
        case 192: ctx->nr = 12; break;
        case 256: ctx->nr = 14; break;
   e2530:	6023      	str	r3, [r4, #0]
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
    }

#if !defined(MBEDTLS_AES_ROM_TABLES)
    if( aes_init_done == 0 )
   e2532:	6833      	ldr	r3, [r6, #0]
   e2534:	b91b      	cbnz	r3, e253e <mbedtls_aes_setkey_enc+0x32>
    {
        aes_gen_tables();
   e2536:	f7ff fee1 	bl	e22fc <_ZL14aes_gen_tablesv>
        aes_init_done = 1;
   e253a:	2301      	movs	r3, #1
   e253c:	6033      	str	r3, [r6, #0]

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
   e253e:	f104 0308 	add.w	r3, r4, #8
   e2542:	6063      	str	r3, [r4, #4]
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
   e2544:	096d      	lsrs	r5, r5, #5
   e2546:	2000      	movs	r0, #0
   e2548:	42a8      	cmp	r0, r5
   e254a:	d010      	beq.n	e256e <mbedtls_aes_setkey_enc+0x62>
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
   e254c:	eb07 0180 	add.w	r1, r7, r0, lsl #2
   e2550:	788a      	ldrb	r2, [r1, #2]
   e2552:	784e      	ldrb	r6, [r1, #1]
   e2554:	78c9      	ldrb	r1, [r1, #3]
   e2556:	0412      	lsls	r2, r2, #16
   e2558:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
   e255c:	f817 6020 	ldrb.w	r6, [r7, r0, lsl #2]
   e2560:	4332      	orrs	r2, r6
   e2562:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
   e2566:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
   e256a:	3001      	adds	r0, #1
   e256c:	e7ec      	b.n	e2548 <mbedtls_aes_setkey_enc+0x3c>
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
   e256e:	6822      	ldr	r2, [r4, #0]
   e2570:	2a0c      	cmp	r2, #12
   e2572:	d031      	beq.n	e25d8 <mbedtls_aes_setkey_enc+0xcc>
   e2574:	2a0e      	cmp	r2, #14
   e2576:	d066      	beq.n	e2646 <mbedtls_aes_setkey_enc+0x13a>
   e2578:	2a0a      	cmp	r2, #10
   e257a:	f040 80b8 	bne.w	e26ee <mbedtls_aes_setkey_enc+0x1e2>
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
   e257e:	4f5e      	ldr	r7, [pc, #376]	; (e26f8 <mbedtls_aes_setkey_enc+0x1ec>)
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
   e2580:	4e5e      	ldr	r6, [pc, #376]	; (e26fc <mbedtls_aes_setkey_enc+0x1f0>)
    for( i = 0; i < ( keybits >> 5 ); i++ )
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
   e2582:	2500      	movs	r5, #0
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
   e2584:	68dc      	ldr	r4, [r3, #12]
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
   e2586:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
   e258a:	681a      	ldr	r2, [r3, #0]
   e258c:	4051      	eors	r1, r2
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
   e258e:	f3c4 2207 	ubfx	r2, r4, #8, #8

    switch( ctx->nr )
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
   e2592:	3501      	adds	r5, #1
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
   e2594:	5cb0      	ldrb	r0, [r6, r2]
   e2596:	0e22      	lsrs	r2, r4, #24
   e2598:	4041      	eors	r1, r0
   e259a:	5cb2      	ldrb	r2, [r6, r2]
   e259c:	ea81 4102 	eor.w	r1, r1, r2, lsl #16
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
   e25a0:	b2e2      	uxtb	r2, r4

    switch( ctx->nr )
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
   e25a2:	2d0a      	cmp	r5, #10
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
   e25a4:	5cb2      	ldrb	r2, [r6, r2]
   e25a6:	ea81 6102 	eor.w	r1, r1, r2, lsl #24

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
   e25aa:	f3c4 4207 	ubfx	r2, r4, #16, #8

    switch( ctx->nr )
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
   e25ae:	f103 0310 	add.w	r3, r3, #16
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
   e25b2:	5cb2      	ldrb	r2, [r6, r2]
   e25b4:	ea81 2202 	eor.w	r2, r1, r2, lsl #8
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );

                RK[5]  = RK[1] ^ RK[4];
   e25b8:	f853 1c0c 	ldr.w	r1, [r3, #-12]
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
   e25bc:	601a      	str	r2, [r3, #0]

                RK[5]  = RK[1] ^ RK[4];
   e25be:	ea82 0201 	eor.w	r2, r2, r1
                RK[6]  = RK[2] ^ RK[5];
   e25c2:	f853 1c08 	ldr.w	r1, [r3, #-8]
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );

                RK[5]  = RK[1] ^ RK[4];
   e25c6:	605a      	str	r2, [r3, #4]
                RK[6]  = RK[2] ^ RK[5];
   e25c8:	ea82 0201 	eor.w	r2, r2, r1
   e25cc:	609a      	str	r2, [r3, #8]
                RK[7]  = RK[3] ^ RK[6];
   e25ce:	ea82 0204 	eor.w	r2, r2, r4
   e25d2:	60da      	str	r2, [r3, #12]

    switch( ctx->nr )
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
   e25d4:	d1d6      	bne.n	e2584 <mbedtls_aes_setkey_enc+0x78>
   e25d6:	e08a      	b.n	e26ee <mbedtls_aes_setkey_enc+0x1e2>

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
   e25d8:	4e47      	ldr	r6, [pc, #284]	; (e26f8 <mbedtls_aes_setkey_enc+0x1ec>)
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
   e25da:	4d48      	ldr	r5, [pc, #288]	; (e26fc <mbedtls_aes_setkey_enc+0x1f0>)
    for( i = 0; i < ( keybits >> 5 ); i++ )
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
   e25dc:	2400      	movs	r4, #0
            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
   e25de:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
   e25e2:	6958      	ldr	r0, [r3, #20]
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
   e25e4:	681a      	ldr	r2, [r3, #0]
   e25e6:	404a      	eors	r2, r1
        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
   e25e8:	f3c0 2107 	ubfx	r1, r0, #8, #8
            }
            break;

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
   e25ec:	3401      	adds	r4, #1
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
   e25ee:	5c69      	ldrb	r1, [r5, r1]
   e25f0:	404a      	eors	r2, r1
   e25f2:	0e01      	lsrs	r1, r0, #24
            }
            break;

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
   e25f4:	2c08      	cmp	r4, #8
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
   e25f6:	5c69      	ldrb	r1, [r5, r1]
   e25f8:	ea82 4201 	eor.w	r2, r2, r1, lsl #16
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
   e25fc:	b2c1      	uxtb	r1, r0
            }
            break;

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
   e25fe:	f103 0318 	add.w	r3, r3, #24
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
   e2602:	5c69      	ldrb	r1, [r5, r1]
   e2604:	ea82 6201 	eor.w	r2, r2, r1, lsl #24

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
   e2608:	f3c0 4107 	ubfx	r1, r0, #16, #8
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
   e260c:	5c69      	ldrb	r1, [r5, r1]
   e260e:	ea82 2201 	eor.w	r2, r2, r1, lsl #8
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
   e2612:	f853 1c14 	ldr.w	r1, [r3, #-20]
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
   e2616:	601a      	str	r2, [r3, #0]

                RK[7]  = RK[1] ^ RK[6];
   e2618:	ea82 0201 	eor.w	r2, r2, r1
                RK[8]  = RK[2] ^ RK[7];
   e261c:	f853 1c10 	ldr.w	r1, [r3, #-16]
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
   e2620:	605a      	str	r2, [r3, #4]
                RK[8]  = RK[2] ^ RK[7];
   e2622:	ea82 0201 	eor.w	r2, r2, r1
                RK[9]  = RK[3] ^ RK[8];
   e2626:	f853 1c0c 	ldr.w	r1, [r3, #-12]
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
                RK[8]  = RK[2] ^ RK[7];
   e262a:	609a      	str	r2, [r3, #8]
                RK[9]  = RK[3] ^ RK[8];
   e262c:	ea82 0201 	eor.w	r2, r2, r1
                RK[10] = RK[4] ^ RK[9];
   e2630:	f853 1c08 	ldr.w	r1, [r3, #-8]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
                RK[8]  = RK[2] ^ RK[7];
                RK[9]  = RK[3] ^ RK[8];
   e2634:	60da      	str	r2, [r3, #12]
                RK[10] = RK[4] ^ RK[9];
   e2636:	ea82 0201 	eor.w	r2, r2, r1
   e263a:	611a      	str	r2, [r3, #16]
                RK[11] = RK[5] ^ RK[10];
   e263c:	ea82 0200 	eor.w	r2, r2, r0
   e2640:	615a      	str	r2, [r3, #20]
            }
            break;

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
   e2642:	d1cc      	bne.n	e25de <mbedtls_aes_setkey_enc+0xd2>
   e2644:	e053      	b.n	e26ee <mbedtls_aes_setkey_enc+0x1e2>

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
   e2646:	4e2c      	ldr	r6, [pc, #176]	; (e26f8 <mbedtls_aes_setkey_enc+0x1ec>)
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
   e2648:	482c      	ldr	r0, [pc, #176]	; (e26fc <mbedtls_aes_setkey_enc+0x1f0>)
    for( i = 0; i < ( keybits >> 5 ); i++ )
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
   e264a:	2500      	movs	r5, #0
            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
   e264c:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
   e2650:	69dc      	ldr	r4, [r3, #28]
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
   e2652:	681a      	ldr	r2, [r3, #0]
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
   e2654:	685f      	ldr	r7, [r3, #4]
            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
   e2656:	4051      	eors	r1, r2
        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
   e2658:	f3c4 2207 	ubfx	r2, r4, #8, #8
            }
            break;

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
   e265c:	3501      	adds	r5, #1
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
   e265e:	5c82      	ldrb	r2, [r0, r2]
   e2660:	4051      	eors	r1, r2
   e2662:	0e22      	lsrs	r2, r4, #24
            }
            break;

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
   e2664:	2d07      	cmp	r5, #7
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
   e2666:	5c82      	ldrb	r2, [r0, r2]
   e2668:	ea81 4102 	eor.w	r1, r1, r2, lsl #16
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
   e266c:	b2e2      	uxtb	r2, r4
            }
            break;

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
   e266e:	f103 0320 	add.w	r3, r3, #32
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
   e2672:	5c82      	ldrb	r2, [r0, r2]
   e2674:	ea81 6102 	eor.w	r1, r1, r2, lsl #24

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
   e2678:	f3c4 4207 	ubfx	r2, r4, #16, #8
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
   e267c:	5c82      	ldrb	r2, [r0, r2]
   e267e:	ea81 2102 	eor.w	r1, r1, r2, lsl #8
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
                RK[10] = RK[2] ^ RK[9];
   e2682:	f853 2c18 	ldr.w	r2, [r3, #-24]
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
   e2686:	6019      	str	r1, [r3, #0]

                RK[9]  = RK[1] ^ RK[8];
   e2688:	ea81 0107 	eor.w	r1, r1, r7
                RK[10] = RK[2] ^ RK[9];
                RK[11] = RK[3] ^ RK[10];
   e268c:	f853 7c14 	ldr.w	r7, [r3, #-20]
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
   e2690:	6059      	str	r1, [r3, #4]
                RK[10] = RK[2] ^ RK[9];
   e2692:	ea81 0102 	eor.w	r1, r1, r2
                RK[11] = RK[3] ^ RK[10];
   e2696:	ea87 0701 	eor.w	r7, r7, r1

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
   e269a:	b2fa      	uxtb	r2, r7
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
                RK[10] = RK[2] ^ RK[9];
   e269c:	6099      	str	r1, [r3, #8]
                RK[11] = RK[3] ^ RK[10];
   e269e:	60df      	str	r7, [r3, #12]

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
   e26a0:	5c82      	ldrb	r2, [r0, r2]
   e26a2:	f853 1c10 	ldr.w	r1, [r3, #-16]
   e26a6:	ea81 0102 	eor.w	r1, r1, r2
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
   e26aa:	ea4f 6217 	mov.w	r2, r7, lsr #24
                RK[11] = RK[3] ^ RK[10];

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
   e26ae:	5c82      	ldrb	r2, [r0, r2]
   e26b0:	ea81 6102 	eor.w	r1, r1, r2, lsl #24
                RK[10] = RK[2] ^ RK[9];
                RK[11] = RK[3] ^ RK[10];

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
   e26b4:	f3c7 2207 	ubfx	r2, r7, #8, #8
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
   e26b8:	f3c7 4707 	ubfx	r7, r7, #16, #8
   e26bc:	5c82      	ldrb	r2, [r0, r2]
   e26be:	ea81 2102 	eor.w	r1, r1, r2, lsl #8
   e26c2:	5dc2      	ldrb	r2, [r0, r7]
   e26c4:	ea81 4202 	eor.w	r2, r1, r2, lsl #16
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );

                RK[13] = RK[5] ^ RK[12];
   e26c8:	f853 1c0c 	ldr.w	r1, [r3, #-12]

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
   e26cc:	611a      	str	r2, [r3, #16]

                RK[13] = RK[5] ^ RK[12];
   e26ce:	ea82 0201 	eor.w	r2, r2, r1
                RK[14] = RK[6] ^ RK[13];
   e26d2:	f853 1c08 	ldr.w	r1, [r3, #-8]
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );

                RK[13] = RK[5] ^ RK[12];
   e26d6:	615a      	str	r2, [r3, #20]
                RK[14] = RK[6] ^ RK[13];
   e26d8:	ea82 0201 	eor.w	r2, r2, r1
   e26dc:	619a      	str	r2, [r3, #24]
                RK[15] = RK[7] ^ RK[14];
   e26de:	ea82 0204 	eor.w	r2, r2, r4
   e26e2:	61da      	str	r2, [r3, #28]
            }
            break;

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
   e26e4:	d1b2      	bne.n	e264c <mbedtls_aes_setkey_enc+0x140>
   e26e6:	e002      	b.n	e26ee <mbedtls_aes_setkey_enc+0x1e2>
    switch( keybits )
    {
        case 128: ctx->nr = 10; break;
        case 192: ctx->nr = 12; break;
        case 256: ctx->nr = 14; break;
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
   e26e8:	f06f 001f 	mvn.w	r0, #31
   e26ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                RK[15] = RK[7] ^ RK[14];
            }
            break;
    }

    return( 0 );
   e26ee:	2000      	movs	r0, #0
}
   e26f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   e26f2:	bf00      	nop
   e26f4:	2003c238 	.word	0x2003c238
   e26f8:	2003e43c 	.word	0x2003e43c
   e26fc:	2003d33c 	.word	0x2003d33c

000e2700 <mbedtls_aes_setkey_dec>:
 * AES key schedule (decryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_DEC_ALT)
int mbedtls_aes_setkey_dec( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
   e2700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e2704:	b0c9      	sub	sp, #292	; 0x124
   e2706:	4604      	mov	r4, r0
    uint32_t *SK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    mbedtls_aes_init( &cty );
   e2708:	a802      	add	r0, sp, #8
 * AES key schedule (decryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_DEC_ALT)
int mbedtls_aes_setkey_dec( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
   e270a:	460d      	mov	r5, r1
   e270c:	4616      	mov	r6, r2
    uint32_t *SK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    mbedtls_aes_init( &cty );
   e270e:	f7ff fef1 	bl	e24f4 <mbedtls_aes_init>

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
   e2712:	f104 0308 	add.w	r3, r4, #8
   e2716:	6063      	str	r3, [r4, #4]

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
   e2718:	4632      	mov	r2, r6
   e271a:	4629      	mov	r1, r5
   e271c:	a802      	add	r0, sp, #8
   e271e:	f7ff fef5 	bl	e250c <mbedtls_aes_setkey_enc>
   e2722:	4680      	mov	r8, r0
   e2724:	2800      	cmp	r0, #0
   e2726:	d14c      	bne.n	e27c2 <mbedtls_aes_setkey_dec+0xc2>
        goto exit;

    ctx->nr = cty.nr;
   e2728:	9902      	ldr	r1, [sp, #8]
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
   e272a:	9803      	ldr	r0, [sp, #12]

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
        goto exit;

    ctx->nr = cty.nr;
   e272c:	6021      	str	r1, [r4, #0]
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
   e272e:	010a      	lsls	r2, r1, #4
   e2730:	1883      	adds	r3, r0, r2

    *RK++ = *SK++;
   e2732:	5882      	ldr	r2, [r0, r2]
   e2734:	60a2      	str	r2, [r4, #8]
    *RK++ = *SK++;
   e2736:	685a      	ldr	r2, [r3, #4]
   e2738:	60e2      	str	r2, [r4, #12]
    *RK++ = *SK++;
   e273a:	689a      	ldr	r2, [r3, #8]
   e273c:	6122      	str	r2, [r4, #16]
    *RK++ = *SK++;
   e273e:	68d8      	ldr	r0, [r3, #12]
   e2740:	6160      	str	r0, [r4, #20]
   e2742:	f104 0218 	add.w	r2, r4, #24
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
   e2746:	f8df c090 	ldr.w	ip, [pc, #144]	; e27d8 <mbedtls_aes_setkey_dec+0xd8>

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
   e274a:	4c21      	ldr	r4, [pc, #132]	; (e27d0 <mbedtls_aes_setkey_dec+0xd0>)
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
   e274c:	f8df 908c 	ldr.w	r9, [pc, #140]	; e27dc <mbedtls_aes_setkey_dec+0xdc>
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
   e2750:	f8df a08c 	ldr.w	sl, [pc, #140]	; e27e0 <mbedtls_aes_setkey_dec+0xe0>
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
   e2754:	3901      	subs	r1, #1
   e2756:	3b10      	subs	r3, #16
   e2758:	2900      	cmp	r1, #0
   e275a:	dd2a      	ble.n	e27b2 <mbedtls_aes_setkey_dec+0xb2>
   e275c:	1f1d      	subs	r5, r3, #4
   e275e:	f1a2 0e04 	sub.w	lr, r2, #4
   e2762:	f103 0b0c 	add.w	fp, r3, #12
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
   e2766:	f855 0f04 	ldr.w	r0, [r5, #4]!
   e276a:	b2c6      	uxtb	r6, r0
    *RK++ = *SK++;
    *RK++ = *SK++;

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
   e276c:	45ab      	cmp	fp, r5
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
   e276e:	5da7      	ldrb	r7, [r4, r6]
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
   e2770:	ea4f 6610 	mov.w	r6, r0, lsr #24
   e2774:	5da6      	ldrb	r6, [r4, r6]
   e2776:	9601      	str	r6, [sp, #4]
   e2778:	4e16      	ldr	r6, [pc, #88]	; (e27d4 <mbedtls_aes_setkey_dec+0xd4>)
   e277a:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
   e277e:	9e01      	ldr	r6, [sp, #4]
   e2780:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
   e2784:	ea87 0706 	eor.w	r7, r7, r6
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
   e2788:	f3c0 2607 	ubfx	r6, r0, #8, #8
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
   e278c:	f3c0 4007 	ubfx	r0, r0, #16, #8
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
   e2790:	5da6      	ldrb	r6, [r4, r6]
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
   e2792:	5c20      	ldrb	r0, [r4, r0]
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
   e2794:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
   e2798:	ea86 0607 	eor.w	r6, r6, r7
   e279c:	f85a 7020 	ldr.w	r7, [sl, r0, lsl #2]
   e27a0:	ea86 0607 	eor.w	r6, r6, r7
   e27a4:	f84e 6f04 	str.w	r6, [lr, #4]!
    *RK++ = *SK++;
    *RK++ = *SK++;

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
   e27a8:	d1dd      	bne.n	e2766 <mbedtls_aes_setkey_dec+0x66>
   e27aa:	3210      	adds	r2, #16
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
   e27ac:	3901      	subs	r1, #1
   e27ae:	3b10      	subs	r3, #16
   e27b0:	e7d2      	b.n	e2758 <mbedtls_aes_setkey_dec+0x58>
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
        }
    }

    *RK++ = *SK++;
   e27b2:	6819      	ldr	r1, [r3, #0]
   e27b4:	6011      	str	r1, [r2, #0]
    *RK++ = *SK++;
   e27b6:	6859      	ldr	r1, [r3, #4]
   e27b8:	6051      	str	r1, [r2, #4]
    *RK++ = *SK++;
   e27ba:	6899      	ldr	r1, [r3, #8]
   e27bc:	6091      	str	r1, [r2, #8]
    *RK++ = *SK++;
   e27be:	68db      	ldr	r3, [r3, #12]
   e27c0:	60d3      	str	r3, [r2, #12]

exit:
    mbedtls_aes_free( &cty );
   e27c2:	a802      	add	r0, sp, #8
   e27c4:	f7ff fe9b 	bl	e24fe <mbedtls_aes_free>

    return( ret );
}
   e27c8:	4640      	mov	r0, r8
   e27ca:	b049      	add	sp, #292	; 0x124
   e27cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e27d0:	2003d33c 	.word	0x2003d33c
   e27d4:	2003d83c 	.word	0x2003d83c
   e27d8:	2003d43c 	.word	0x2003d43c
   e27dc:	2003dc3c 	.word	0x2003dc3c
   e27e0:	2003e03c 	.word	0x2003e03c

000e27e4 <mbedtls_internal_aes_encrypt>:
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
   e27e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
   e27e8:	6846      	ldr	r6, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
   e27ea:	680c      	ldr	r4, [r1, #0]
   e27ec:	6833      	ldr	r3, [r6, #0]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
   e27ee:	688d      	ldr	r5, [r1, #8]
   e27f0:	f8df c374 	ldr.w	ip, [pc, #884]	; e2b68 <mbedtls_internal_aes_encrypt+0x384>
   e27f4:	f8df e374 	ldr.w	lr, [pc, #884]	; e2b6c <mbedtls_internal_aes_encrypt+0x388>
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
   e27f8:	4fd8      	ldr	r7, [pc, #864]	; (e2b5c <mbedtls_internal_aes_encrypt+0x378>)
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
   e27fa:	ea84 0b03 	eor.w	fp, r4, r3
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
   e27fe:	684c      	ldr	r4, [r1, #4]
   e2800:	6873      	ldr	r3, [r6, #4]
   e2802:	4063      	eors	r3, r4
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
   e2804:	68b4      	ldr	r4, [r6, #8]
   e2806:	406c      	eors	r4, r5
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
   e2808:	68cd      	ldr	r5, [r1, #12]
   e280a:	68f1      	ldr	r1, [r6, #12]
   e280c:	404d      	eors	r5, r1

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
   e280e:	6801      	ldr	r1, [r0, #0]
   e2810:	1049      	asrs	r1, r1, #1
   e2812:	3901      	subs	r1, #1
   e2814:	9101      	str	r1, [sp, #4]
    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
   e2816:	f106 0110 	add.w	r1, r6, #16

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
   e281a:	9e01      	ldr	r6, [sp, #4]
   e281c:	f8df 9348 	ldr.w	r9, [pc, #840]	; e2b68 <mbedtls_internal_aes_encrypt+0x384>
   e2820:	f8df 8348 	ldr.w	r8, [pc, #840]	; e2b6c <mbedtls_internal_aes_encrypt+0x388>
   e2824:	2e00      	cmp	r6, #0
   e2826:	4608      	mov	r0, r1
   e2828:	fa5f f68b 	uxtb.w	r6, fp
   e282c:	f101 0120 	add.w	r1, r1, #32
   e2830:	ea4f 6a15 	mov.w	sl, r5, lsr #24
   e2834:	f340 80be 	ble.w	e29b4 <mbedtls_internal_aes_encrypt+0x1d0>
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
   e2838:	f85e 002a 	ldr.w	r0, [lr, sl, lsl #2]
   e283c:	f85c 8026 	ldr.w	r8, [ip, r6, lsl #2]
   e2840:	4ec7      	ldr	r6, [pc, #796]	; (e2b60 <mbedtls_internal_aes_encrypt+0x37c>)
   e2842:	ea88 0800 	eor.w	r8, r8, r0
   e2846:	f851 0c20 	ldr.w	r0, [r1, #-32]
   e284a:	ea88 0800 	eor.w	r8, r8, r0
   e284e:	f3c3 2007 	ubfx	r0, r3, #8, #8
   e2852:	fa5f f983 	uxtb.w	r9, r3
   e2856:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
   e285a:	f85c 9029 	ldr.w	r9, [ip, r9, lsl #2]
   e285e:	ea88 0000 	eor.w	r0, r8, r0
   e2862:	f3c4 4807 	ubfx	r8, r4, #16, #8
   e2866:	fa5f fa84 	uxtb.w	sl, r4
   e286a:	f856 8028 	ldr.w	r8, [r6, r8, lsl #2]
   e286e:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
   e2872:	ea80 0808 	eor.w	r8, r0, r8
   e2876:	ea4f 601b 	mov.w	r0, fp, lsr #24
   e287a:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
   e287e:	ea89 0900 	eor.w	r9, r9, r0
   e2882:	f851 0c1c 	ldr.w	r0, [r1, #-28]
   e2886:	ea89 0000 	eor.w	r0, r9, r0
   e288a:	f3c4 2907 	ubfx	r9, r4, #8, #8
   e288e:	f857 9029 	ldr.w	r9, [r7, r9, lsl #2]
   e2892:	ea80 0009 	eor.w	r0, r0, r9
   e2896:	f3c5 4907 	ubfx	r9, r5, #16, #8
   e289a:	f856 9029 	ldr.w	r9, [r6, r9, lsl #2]
   e289e:	ea80 0909 	eor.w	r9, r0, r9
   e28a2:	0e18      	lsrs	r0, r3, #24
   e28a4:	f3c3 4307 	ubfx	r3, r3, #16, #8
   e28a8:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
   e28ac:	ea8a 0a00 	eor.w	sl, sl, r0
   e28b0:	f851 0c18 	ldr.w	r0, [r1, #-24]
   e28b4:	ea8a 0000 	eor.w	r0, sl, r0
   e28b8:	f3c5 2a07 	ubfx	sl, r5, #8, #8
   e28bc:	b2ed      	uxtb	r5, r5
   e28be:	f857 a02a 	ldr.w	sl, [r7, sl, lsl #2]
   e28c2:	ea80 000a 	eor.w	r0, r0, sl
   e28c6:	f3cb 4a07 	ubfx	sl, fp, #16, #8
   e28ca:	f856 a02a 	ldr.w	sl, [r6, sl, lsl #2]
   e28ce:	ea80 000a 	eor.w	r0, r0, sl
   e28d2:	ea4f 6a14 	mov.w	sl, r4, lsr #24
   e28d6:	f85c 4025 	ldr.w	r4, [ip, r5, lsl #2]
   e28da:	f85e 502a 	ldr.w	r5, [lr, sl, lsl #2]
   e28de:	4065      	eors	r5, r4
   e28e0:	f851 4c14 	ldr.w	r4, [r1, #-20]
   e28e4:	406c      	eors	r4, r5
   e28e6:	f3cb 2507 	ubfx	r5, fp, #8, #8
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
   e28ea:	fa5f fa80 	uxtb.w	sl, r0
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
   e28ee:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
   e28f2:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
   e28f6:	406c      	eors	r4, r5
   e28f8:	f856 5023 	ldr.w	r5, [r6, r3, lsl #2]
   e28fc:	4065      	eors	r5, r4
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
   e28fe:	0e2b      	lsrs	r3, r5, #24
   e2900:	fa5f f488 	uxtb.w	r4, r8
   e2904:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
   e2908:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
   e290c:	405c      	eors	r4, r3
   e290e:	f851 3c10 	ldr.w	r3, [r1, #-16]
   e2912:	4063      	eors	r3, r4
   e2914:	f3c9 2407 	ubfx	r4, r9, #8, #8
   e2918:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
   e291c:	4063      	eors	r3, r4
   e291e:	f3c0 4407 	ubfx	r4, r0, #16, #8
   e2922:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
   e2926:	ea83 0b04 	eor.w	fp, r3, r4
   e292a:	fa5f f489 	uxtb.w	r4, r9
   e292e:	ea4f 6318 	mov.w	r3, r8, lsr #24
   e2932:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
   e2936:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
   e293a:	405c      	eors	r4, r3
   e293c:	f851 3c0c 	ldr.w	r3, [r1, #-12]
   e2940:	4063      	eors	r3, r4
   e2942:	f3c0 2407 	ubfx	r4, r0, #8, #8
   e2946:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
   e294a:	4063      	eors	r3, r4
   e294c:	f3c5 4407 	ubfx	r4, r5, #16, #8
   e2950:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
   e2954:	4063      	eors	r3, r4
   e2956:	ea4f 6419 	mov.w	r4, r9, lsr #24
   e295a:	f3c9 4907 	ubfx	r9, r9, #16, #8
   e295e:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
   e2962:	ea8a 0a04 	eor.w	sl, sl, r4
   e2966:	f851 4c08 	ldr.w	r4, [r1, #-8]
   e296a:	ea8a 0404 	eor.w	r4, sl, r4
   e296e:	f3c5 2a07 	ubfx	sl, r5, #8, #8
   e2972:	b2ed      	uxtb	r5, r5
   e2974:	f857 a02a 	ldr.w	sl, [r7, sl, lsl #2]
   e2978:	ea84 040a 	eor.w	r4, r4, sl
   e297c:	f3c8 4a07 	ubfx	sl, r8, #16, #8
   e2980:	f3c8 2807 	ubfx	r8, r8, #8, #8
   e2984:	f856 a02a 	ldr.w	sl, [r6, sl, lsl #2]
   e2988:	ea84 040a 	eor.w	r4, r4, sl
   e298c:	ea4f 6a10 	mov.w	sl, r0, lsr #24
   e2990:	f85c 0025 	ldr.w	r0, [ip, r5, lsl #2]
   e2994:	f85e 502a 	ldr.w	r5, [lr, sl, lsl #2]
   e2998:	4045      	eors	r5, r0
   e299a:	f851 0c04 	ldr.w	r0, [r1, #-4]
   e299e:	4068      	eors	r0, r5
   e29a0:	f857 5028 	ldr.w	r5, [r7, r8, lsl #2]
   e29a4:	4068      	eors	r0, r5
   e29a6:	f856 5029 	ldr.w	r5, [r6, r9, lsl #2]
   e29aa:	4045      	eors	r5, r0
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
   e29ac:	9801      	ldr	r0, [sp, #4]
   e29ae:	3801      	subs	r0, #1
   e29b0:	9001      	str	r0, [sp, #4]
   e29b2:	e732      	b.n	e281a <mbedtls_internal_aes_encrypt+0x36>
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
   e29b4:	f858 102a 	ldr.w	r1, [r8, sl, lsl #2]
   e29b8:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
   e29bc:	f8df c19c 	ldr.w	ip, [pc, #412]	; e2b5c <mbedtls_internal_aes_encrypt+0x378>
   e29c0:	f8df e19c 	ldr.w	lr, [pc, #412]	; e2b60 <mbedtls_internal_aes_encrypt+0x37c>
   e29c4:	f3c3 2607 	ubfx	r6, r3, #8, #8
   e29c8:	404f      	eors	r7, r1
   e29ca:	6801      	ldr	r1, [r0, #0]
   e29cc:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
   e29d0:	4079      	eors	r1, r7
   e29d2:	4071      	eors	r1, r6
   e29d4:	f3c4 4607 	ubfx	r6, r4, #16, #8
   e29d8:	f85e 7026 	ldr.w	r7, [lr, r6, lsl #2]
   e29dc:	b2de      	uxtb	r6, r3
   e29de:	404f      	eors	r7, r1
   e29e0:	ea4f 611b 	mov.w	r1, fp, lsr #24
   e29e4:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
   e29e8:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
   e29ec:	ea86 0a01 	eor.w	sl, r6, r1
   e29f0:	f3c4 2607 	ubfx	r6, r4, #8, #8
   e29f4:	6841      	ldr	r1, [r0, #4]
   e29f6:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
   e29fa:	ea8a 0101 	eor.w	r1, sl, r1
   e29fe:	4071      	eors	r1, r6
   e2a00:	f3c5 4607 	ubfx	r6, r5, #16, #8
   e2a04:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
   e2a08:	ea81 0a06 	eor.w	sl, r1, r6
   e2a0c:	b2e6      	uxtb	r6, r4
   e2a0e:	0e19      	lsrs	r1, r3, #24
   e2a10:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
   e2a14:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
   e2a18:	4071      	eors	r1, r6
   e2a1a:	6886      	ldr	r6, [r0, #8]
   e2a1c:	404e      	eors	r6, r1
   e2a1e:	f3c5 2107 	ubfx	r1, r5, #8, #8
   e2a22:	0e24      	lsrs	r4, r4, #24
   e2a24:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
   e2a28:	404e      	eors	r6, r1
   e2a2a:	f3cb 4107 	ubfx	r1, fp, #16, #8
   e2a2e:	b2ed      	uxtb	r5, r5
   e2a30:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
   e2a34:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
   e2a38:	404e      	eors	r6, r1
   e2a3a:	f858 1024 	ldr.w	r1, [r8, r4, lsl #2]
   e2a3e:	68c4      	ldr	r4, [r0, #12]
   e2a40:	4069      	eors	r1, r5
   e2a42:	404c      	eors	r4, r1
   e2a44:	f3cb 2107 	ubfx	r1, fp, #8, #8
   e2a48:	f3c3 4307 	ubfx	r3, r3, #16, #8
   e2a4c:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
   e2a50:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
   e2a54:	404c      	eors	r4, r1
   e2a56:	405c      	eors	r4, r3

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
   e2a58:	b2f9      	uxtb	r1, r7
   e2a5a:	4b42      	ldr	r3, [pc, #264]	; (e2b64 <mbedtls_internal_aes_encrypt+0x380>)
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
   e2a5c:	0e25      	lsrs	r5, r4, #24
    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
   e2a5e:	f813 e001 	ldrb.w	lr, [r3, r1]
   e2a62:	6901      	ldr	r1, [r0, #16]
   e2a64:	ea8e 0101 	eor.w	r1, lr, r1
   e2a68:	f813 e005 	ldrb.w	lr, [r3, r5]

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
   e2a6c:	f3ca 2507 	ubfx	r5, sl, #8, #8
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
   e2a70:	ea81 610e 	eor.w	r1, r1, lr, lsl #24
   e2a74:	f813 e005 	ldrb.w	lr, [r3, r5]
   e2a78:	f3c6 4507 	ubfx	r5, r6, #16, #8
   e2a7c:	ea81 210e 	eor.w	r1, r1, lr, lsl #8
   e2a80:	f813 e005 	ldrb.w	lr, [r3, r5]
   e2a84:	ea81 4e0e 	eor.w	lr, r1, lr, lsl #16
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
   e2a88:	fa5f f18a 	uxtb.w	r1, sl
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
   e2a8c:	5c5d      	ldrb	r5, [r3, r1]
   e2a8e:	6941      	ldr	r1, [r0, #20]
   e2a90:	4069      	eors	r1, r5
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
   e2a92:	0e3d      	lsrs	r5, r7, #24
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
   e2a94:	5d5d      	ldrb	r5, [r3, r5]
   e2a96:	ea81 6105 	eor.w	r1, r1, r5, lsl #24
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
   e2a9a:	f3c6 2507 	ubfx	r5, r6, #8, #8
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
   e2a9e:	5d5d      	ldrb	r5, [r3, r5]
   e2aa0:	ea81 2105 	eor.w	r1, r1, r5, lsl #8
   e2aa4:	f3c4 4507 	ubfx	r5, r4, #16, #8
   e2aa8:	5d5d      	ldrb	r5, [r3, r5]
   e2aaa:	ea81 4505 	eor.w	r5, r1, r5, lsl #16
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
   e2aae:	b2f1      	uxtb	r1, r6

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
   e2ab0:	0e36      	lsrs	r6, r6, #24
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
   e2ab2:	f813 c001 	ldrb.w	ip, [r3, r1]
   e2ab6:	6981      	ldr	r1, [r0, #24]
   e2ab8:	ea8c 0101 	eor.w	r1, ip, r1
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
   e2abc:	ea4f 6c1a 	mov.w	ip, sl, lsr #24

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
   e2ac0:	f3ca 4a07 	ubfx	sl, sl, #16, #8
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
   e2ac4:	f813 c00c 	ldrb.w	ip, [r3, ip]
   e2ac8:	ea81 610c 	eor.w	r1, r1, ip, lsl #24
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
   e2acc:	f3c4 2c07 	ubfx	ip, r4, #8, #8
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
   e2ad0:	b2e4      	uxtb	r4, r4
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
   e2ad2:	f813 c00c 	ldrb.w	ip, [r3, ip]
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
   e2ad6:	5d1c      	ldrb	r4, [r3, r4]
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
   e2ad8:	ea81 210c 	eor.w	r1, r1, ip, lsl #8
   e2adc:	f3c7 4c07 	ubfx	ip, r7, #16, #8
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
   e2ae0:	f3c7 2707 	ubfx	r7, r7, #8, #8
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
   e2ae4:	f813 c00c 	ldrb.w	ip, [r3, ip]
   e2ae8:	ea81 4c0c 	eor.w	ip, r1, ip, lsl #16
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
   e2aec:	69c1      	ldr	r1, [r0, #28]
   e2aee:	ea84 0001 	eor.w	r0, r4, r1
   e2af2:	5d99      	ldrb	r1, [r3, r6]
   e2af4:	ea80 6001 	eor.w	r0, r0, r1, lsl #24
   e2af8:	5dd9      	ldrb	r1, [r3, r7]
   e2afa:	f813 300a 	ldrb.w	r3, [r3, sl]
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
   e2afe:	f882 e000 	strb.w	lr, [r2]
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
   e2b02:	ea80 2001 	eor.w	r0, r0, r1, lsl #8
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
   e2b06:	ea4f 211e 	mov.w	r1, lr, lsr #8
   e2b0a:	7051      	strb	r1, [r2, #1]
   e2b0c:	ea4f 411e 	mov.w	r1, lr, lsr #16
   e2b10:	7091      	strb	r1, [r2, #2]
    PUT_UINT32_LE( X1, output,  4 );
   e2b12:	0a29      	lsrs	r1, r5, #8
   e2b14:	7151      	strb	r1, [r2, #5]
   e2b16:	0c29      	lsrs	r1, r5, #16
   e2b18:	7191      	strb	r1, [r2, #6]
    PUT_UINT32_LE( X2, output,  8 );
   e2b1a:	ea4f 211c 	mov.w	r1, ip, lsr #8
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
   e2b1e:	ea80 4303 	eor.w	r3, r0, r3, lsl #16
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
   e2b22:	7251      	strb	r1, [r2, #9]
   e2b24:	ea4f 411c 	mov.w	r1, ip, lsr #16
   e2b28:	7291      	strb	r1, [r2, #10]
    PUT_UINT32_LE( X3, output, 12 );
   e2b2a:	0a19      	lsrs	r1, r3, #8
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
   e2b2c:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
    PUT_UINT32_LE( X1, output,  4 );
   e2b30:	7115      	strb	r5, [r2, #4]
    PUT_UINT32_LE( X2, output,  8 );
   e2b32:	f882 c008 	strb.w	ip, [r2, #8]
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
   e2b36:	0e2d      	lsrs	r5, r5, #24
    PUT_UINT32_LE( X2, output,  8 );
   e2b38:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
    PUT_UINT32_LE( X3, output, 12 );
   e2b3c:	7313      	strb	r3, [r2, #12]
   e2b3e:	7351      	strb	r1, [r2, #13]

    return( 0 );
}
   e2b40:	2000      	movs	r0, #0
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
    PUT_UINT32_LE( X3, output, 12 );
   e2b42:	0c19      	lsrs	r1, r3, #16
   e2b44:	0e1b      	lsrs	r3, r3, #24
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
   e2b46:	f882 e003 	strb.w	lr, [r2, #3]
    PUT_UINT32_LE( X1, output,  4 );
   e2b4a:	71d5      	strb	r5, [r2, #7]
    PUT_UINT32_LE( X2, output,  8 );
   e2b4c:	f882 c00b 	strb.w	ip, [r2, #11]
    PUT_UINT32_LE( X3, output, 12 );
   e2b50:	7391      	strb	r1, [r2, #14]
   e2b52:	73d3      	strb	r3, [r2, #15]

    return( 0 );
}
   e2b54:	b003      	add	sp, #12
   e2b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e2b5a:	bf00      	nop
   e2b5c:	2003c63c 	.word	0x2003c63c
   e2b60:	2003ca3c 	.word	0x2003ca3c
   e2b64:	2003d33c 	.word	0x2003d33c
   e2b68:	2003c23c 	.word	0x2003c23c
   e2b6c:	2003ce3c 	.word	0x2003ce3c

000e2b70 <mbedtls_internal_aes_decrypt>:
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
   e2b70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
   e2b74:	6845      	ldr	r5, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
   e2b76:	680c      	ldr	r4, [r1, #0]
   e2b78:	682b      	ldr	r3, [r5, #0]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
   e2b7a:	684e      	ldr	r6, [r1, #4]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
   e2b7c:	6800      	ldr	r0, [r0, #0]
   e2b7e:	f8df c374 	ldr.w	ip, [pc, #884]	; e2ef4 <mbedtls_internal_aes_decrypt+0x384>
   e2b82:	f8df e374 	ldr.w	lr, [pc, #884]	; e2ef8 <mbedtls_internal_aes_decrypt+0x388>
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
   e2b86:	4fd8      	ldr	r7, [pc, #864]	; (e2ee8 <mbedtls_internal_aes_decrypt+0x378>)
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
   e2b88:	405c      	eors	r4, r3
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
   e2b8a:	686b      	ldr	r3, [r5, #4]
   e2b8c:	ea86 0b03 	eor.w	fp, r6, r3
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
   e2b90:	688e      	ldr	r6, [r1, #8]
   e2b92:	68ab      	ldr	r3, [r5, #8]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
   e2b94:	1040      	asrs	r0, r0, #1

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
   e2b96:	4073      	eors	r3, r6
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
   e2b98:	68ce      	ldr	r6, [r1, #12]
   e2b9a:	68e9      	ldr	r1, [r5, #12]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
   e2b9c:	3801      	subs	r0, #1
   e2b9e:	9001      	str	r0, [sp, #4]
    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
   e2ba0:	4071      	eors	r1, r6
   e2ba2:	f105 0010 	add.w	r0, r5, #16

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
   e2ba6:	9e01      	ldr	r6, [sp, #4]
   e2ba8:	f8df 9348 	ldr.w	r9, [pc, #840]	; e2ef4 <mbedtls_internal_aes_decrypt+0x384>
   e2bac:	f8df 8348 	ldr.w	r8, [pc, #840]	; e2ef8 <mbedtls_internal_aes_decrypt+0x388>
   e2bb0:	2e00      	cmp	r6, #0
   e2bb2:	4605      	mov	r5, r0
   e2bb4:	b2e6      	uxtb	r6, r4
   e2bb6:	f100 0020 	add.w	r0, r0, #32
   e2bba:	ea4f 6a1b 	mov.w	sl, fp, lsr #24
   e2bbe:	f340 80c0 	ble.w	e2d42 <mbedtls_internal_aes_decrypt+0x1d2>
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
   e2bc2:	f85e 502a 	ldr.w	r5, [lr, sl, lsl #2]
   e2bc6:	f85c 8026 	ldr.w	r8, [ip, r6, lsl #2]
   e2bca:	4ec8      	ldr	r6, [pc, #800]	; (e2eec <mbedtls_internal_aes_decrypt+0x37c>)
   e2bcc:	ea88 0805 	eor.w	r8, r8, r5
   e2bd0:	f850 5c20 	ldr.w	r5, [r0, #-32]
   e2bd4:	ea88 0805 	eor.w	r8, r8, r5
   e2bd8:	f3c1 2507 	ubfx	r5, r1, #8, #8
   e2bdc:	fa5f f98b 	uxtb.w	r9, fp
   e2be0:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
   e2be4:	f85c 9029 	ldr.w	r9, [ip, r9, lsl #2]
   e2be8:	ea88 0505 	eor.w	r5, r8, r5
   e2bec:	f3c3 4807 	ubfx	r8, r3, #16, #8
   e2bf0:	fa5f fa83 	uxtb.w	sl, r3
   e2bf4:	f856 8028 	ldr.w	r8, [r6, r8, lsl #2]
   e2bf8:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
   e2bfc:	ea85 0808 	eor.w	r8, r5, r8
   e2c00:	0e1d      	lsrs	r5, r3, #24
   e2c02:	f3c3 2307 	ubfx	r3, r3, #8, #8
   e2c06:	f85e 5025 	ldr.w	r5, [lr, r5, lsl #2]
   e2c0a:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
   e2c0e:	ea89 0905 	eor.w	r9, r9, r5
   e2c12:	f850 5c1c 	ldr.w	r5, [r0, #-28]
   e2c16:	ea89 0505 	eor.w	r5, r9, r5
   e2c1a:	f3c4 2907 	ubfx	r9, r4, #8, #8
   e2c1e:	f857 9029 	ldr.w	r9, [r7, r9, lsl #2]
   e2c22:	ea85 0509 	eor.w	r5, r5, r9
   e2c26:	f3c1 4907 	ubfx	r9, r1, #16, #8
   e2c2a:	f856 9029 	ldr.w	r9, [r6, r9, lsl #2]
   e2c2e:	ea85 0909 	eor.w	r9, r5, r9
   e2c32:	0e0d      	lsrs	r5, r1, #24
   e2c34:	b2c9      	uxtb	r1, r1
   e2c36:	f85e 5025 	ldr.w	r5, [lr, r5, lsl #2]
   e2c3a:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
   e2c3e:	ea8a 0a05 	eor.w	sl, sl, r5
   e2c42:	f850 5c18 	ldr.w	r5, [r0, #-24]
   e2c46:	ea8a 0505 	eor.w	r5, sl, r5
   e2c4a:	f3cb 2a07 	ubfx	sl, fp, #8, #8
   e2c4e:	f857 a02a 	ldr.w	sl, [r7, sl, lsl #2]
   e2c52:	ea85 050a 	eor.w	r5, r5, sl
   e2c56:	f3c4 4a07 	ubfx	sl, r4, #16, #8
   e2c5a:	0e24      	lsrs	r4, r4, #24
   e2c5c:	f856 a02a 	ldr.w	sl, [r6, sl, lsl #2]
   e2c60:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
   e2c64:	404c      	eors	r4, r1
   e2c66:	f850 1c14 	ldr.w	r1, [r0, #-20]
   e2c6a:	4061      	eors	r1, r4
   e2c6c:	4059      	eors	r1, r3
   e2c6e:	f3cb 4307 	ubfx	r3, fp, #16, #8
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
   e2c72:	fa5f f488 	uxtb.w	r4, r8
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
   e2c76:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
   e2c7a:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
   e2c7e:	4059      	eors	r1, r3
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
   e2c80:	ea4f 6319 	mov.w	r3, r9, lsr #24
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
   e2c84:	ea85 050a 	eor.w	r5, r5, sl
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
   e2c88:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
   e2c8c:	405c      	eors	r4, r3
   e2c8e:	f850 3c10 	ldr.w	r3, [r0, #-16]
   e2c92:	4063      	eors	r3, r4
   e2c94:	f3c1 2407 	ubfx	r4, r1, #8, #8
   e2c98:	fa5f fa89 	uxtb.w	sl, r9
   e2c9c:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
   e2ca0:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
   e2ca4:	4063      	eors	r3, r4
   e2ca6:	f3c5 4407 	ubfx	r4, r5, #16, #8
   e2caa:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
   e2cae:	405c      	eors	r4, r3
   e2cb0:	0e2b      	lsrs	r3, r5, #24
   e2cb2:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
   e2cb6:	ea8a 0a03 	eor.w	sl, sl, r3
   e2cba:	f850 3c0c 	ldr.w	r3, [r0, #-12]
   e2cbe:	ea8a 0303 	eor.w	r3, sl, r3
   e2cc2:	f3c8 2a07 	ubfx	sl, r8, #8, #8
   e2cc6:	f857 a02a 	ldr.w	sl, [r7, sl, lsl #2]
   e2cca:	ea83 030a 	eor.w	r3, r3, sl
   e2cce:	f3c1 4a07 	ubfx	sl, r1, #16, #8
   e2cd2:	f856 a02a 	ldr.w	sl, [r6, sl, lsl #2]
   e2cd6:	ea83 0b0a 	eor.w	fp, r3, sl
   e2cda:	fa5f fa85 	uxtb.w	sl, r5
   e2cde:	0e0b      	lsrs	r3, r1, #24
   e2ce0:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
   e2ce4:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
   e2ce8:	ea8a 0a03 	eor.w	sl, sl, r3
   e2cec:	f850 3c08 	ldr.w	r3, [r0, #-8]
   e2cf0:	ea8a 0303 	eor.w	r3, sl, r3
   e2cf4:	f3c9 2a07 	ubfx	sl, r9, #8, #8
   e2cf8:	b2c9      	uxtb	r1, r1
   e2cfa:	f857 a02a 	ldr.w	sl, [r7, sl, lsl #2]
   e2cfe:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
   e2d02:	ea83 030a 	eor.w	r3, r3, sl
   e2d06:	f3c8 4a07 	ubfx	sl, r8, #16, #8
   e2d0a:	ea4f 6818 	mov.w	r8, r8, lsr #24
   e2d0e:	f3c5 2507 	ubfx	r5, r5, #8, #8
   e2d12:	f85e 8028 	ldr.w	r8, [lr, r8, lsl #2]
   e2d16:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
   e2d1a:	f856 a02a 	ldr.w	sl, [r6, sl, lsl #2]
   e2d1e:	ea81 0808 	eor.w	r8, r1, r8
   e2d22:	f850 1c04 	ldr.w	r1, [r0, #-4]
   e2d26:	f3c9 4907 	ubfx	r9, r9, #16, #8
   e2d2a:	ea88 0101 	eor.w	r1, r8, r1
   e2d2e:	4069      	eors	r1, r5
   e2d30:	f856 5029 	ldr.w	r5, [r6, r9, lsl #2]
   e2d34:	4069      	eors	r1, r5
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
   e2d36:	9d01      	ldr	r5, [sp, #4]
   e2d38:	3d01      	subs	r5, #1
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
   e2d3a:	ea83 030a 	eor.w	r3, r3, sl
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
   e2d3e:	9501      	str	r5, [sp, #4]
   e2d40:	e731      	b.n	e2ba6 <mbedtls_internal_aes_decrypt+0x36>
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
   e2d42:	f858 002a 	ldr.w	r0, [r8, sl, lsl #2]
   e2d46:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
   e2d4a:	f8df c19c 	ldr.w	ip, [pc, #412]	; e2ee8 <mbedtls_internal_aes_decrypt+0x378>
   e2d4e:	f8df e19c 	ldr.w	lr, [pc, #412]	; e2eec <mbedtls_internal_aes_decrypt+0x37c>
   e2d52:	f3c1 2607 	ubfx	r6, r1, #8, #8
   e2d56:	4047      	eors	r7, r0
   e2d58:	6828      	ldr	r0, [r5, #0]
   e2d5a:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
   e2d5e:	4078      	eors	r0, r7
   e2d60:	4070      	eors	r0, r6
   e2d62:	f3c3 4607 	ubfx	r6, r3, #16, #8
   e2d66:	f85e 7026 	ldr.w	r7, [lr, r6, lsl #2]
   e2d6a:	fa5f f68b 	uxtb.w	r6, fp
   e2d6e:	4047      	eors	r7, r0
   e2d70:	0e18      	lsrs	r0, r3, #24
   e2d72:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
   e2d76:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
   e2d7a:	ea86 0a00 	eor.w	sl, r6, r0
   e2d7e:	f3c4 2607 	ubfx	r6, r4, #8, #8
   e2d82:	6868      	ldr	r0, [r5, #4]
   e2d84:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
   e2d88:	ea8a 0000 	eor.w	r0, sl, r0
   e2d8c:	4070      	eors	r0, r6
   e2d8e:	f3c1 4607 	ubfx	r6, r1, #16, #8
   e2d92:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
   e2d96:	ea80 0a06 	eor.w	sl, r0, r6
   e2d9a:	b2de      	uxtb	r6, r3
   e2d9c:	0e08      	lsrs	r0, r1, #24
   e2d9e:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
   e2da2:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
   e2da6:	4070      	eors	r0, r6
   e2da8:	68ae      	ldr	r6, [r5, #8]
   e2daa:	4046      	eors	r6, r0
   e2dac:	f3cb 2007 	ubfx	r0, fp, #8, #8
   e2db0:	b2c9      	uxtb	r1, r1
   e2db2:	f85c 0020 	ldr.w	r0, [ip, r0, lsl #2]
   e2db6:	4046      	eors	r6, r0
   e2db8:	f3c4 4007 	ubfx	r0, r4, #16, #8
   e2dbc:	0e24      	lsrs	r4, r4, #24
   e2dbe:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
   e2dc2:	4046      	eors	r6, r0
   e2dc4:	f859 0021 	ldr.w	r0, [r9, r1, lsl #2]
   e2dc8:	f858 1024 	ldr.w	r1, [r8, r4, lsl #2]
   e2dcc:	f3c3 2307 	ubfx	r3, r3, #8, #8
   e2dd0:	4048      	eors	r0, r1
   e2dd2:	68e9      	ldr	r1, [r5, #12]
   e2dd4:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
   e2dd8:	4041      	eors	r1, r0
   e2dda:	4059      	eors	r1, r3
   e2ddc:	f3cb 4307 	ubfx	r3, fp, #16, #8

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
   e2de0:	b2f8      	uxtb	r0, r7
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
   e2de2:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
   e2de6:	4059      	eors	r1, r3

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
   e2de8:	4b41      	ldr	r3, [pc, #260]	; (e2ef0 <mbedtls_internal_aes_decrypt+0x380>)
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
   e2dea:	ea4f 641a 	mov.w	r4, sl, lsr #24
    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
   e2dee:	f813 e000 	ldrb.w	lr, [r3, r0]
   e2df2:	6928      	ldr	r0, [r5, #16]
   e2df4:	ea8e 0000 	eor.w	r0, lr, r0
   e2df8:	f813 e004 	ldrb.w	lr, [r3, r4]

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
   e2dfc:	f3c1 2407 	ubfx	r4, r1, #8, #8
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
   e2e00:	ea80 600e 	eor.w	r0, r0, lr, lsl #24
   e2e04:	f813 e004 	ldrb.w	lr, [r3, r4]
   e2e08:	f3c6 4407 	ubfx	r4, r6, #16, #8
   e2e0c:	ea80 200e 	eor.w	r0, r0, lr, lsl #8
   e2e10:	f813 e004 	ldrb.w	lr, [r3, r4]
   e2e14:	ea80 4e0e 	eor.w	lr, r0, lr, lsl #16
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
   e2e18:	fa5f f08a 	uxtb.w	r0, sl
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
   e2e1c:	5c1c      	ldrb	r4, [r3, r0]
   e2e1e:	6968      	ldr	r0, [r5, #20]
   e2e20:	4060      	eors	r0, r4
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
   e2e22:	0e34      	lsrs	r4, r6, #24
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
   e2e24:	5d1c      	ldrb	r4, [r3, r4]
   e2e26:	ea80 6004 	eor.w	r0, r0, r4, lsl #24
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
   e2e2a:	f3c7 2407 	ubfx	r4, r7, #8, #8
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
   e2e2e:	5d1c      	ldrb	r4, [r3, r4]
   e2e30:	ea80 2004 	eor.w	r0, r0, r4, lsl #8
   e2e34:	f3c1 4407 	ubfx	r4, r1, #16, #8
   e2e38:	5d1c      	ldrb	r4, [r3, r4]
   e2e3a:	ea80 4404 	eor.w	r4, r0, r4, lsl #16
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
   e2e3e:	b2f0      	uxtb	r0, r6
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
   e2e40:	f3c6 2607 	ubfx	r6, r6, #8, #8
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
   e2e44:	f813 c000 	ldrb.w	ip, [r3, r0]
   e2e48:	69a8      	ldr	r0, [r5, #24]
   e2e4a:	ea8c 0000 	eor.w	r0, ip, r0
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
   e2e4e:	ea4f 6c11 	mov.w	ip, r1, lsr #24

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
   e2e52:	b2c9      	uxtb	r1, r1
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
   e2e54:	f813 c00c 	ldrb.w	ip, [r3, ip]
   e2e58:	ea80 600c 	eor.w	r0, r0, ip, lsl #24
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
   e2e5c:	f3ca 2c07 	ubfx	ip, sl, #8, #8
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
   e2e60:	f3ca 4a07 	ubfx	sl, sl, #16, #8
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
   e2e64:	f813 c00c 	ldrb.w	ip, [r3, ip]
   e2e68:	ea80 200c 	eor.w	r0, r0, ip, lsl #8
   e2e6c:	f3c7 4c07 	ubfx	ip, r7, #16, #8

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
   e2e70:	0e3f      	lsrs	r7, r7, #24
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
   e2e72:	f813 c00c 	ldrb.w	ip, [r3, ip]
   e2e76:	ea80 4c0c 	eor.w	ip, r0, ip, lsl #16
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
   e2e7a:	5c58      	ldrb	r0, [r3, r1]
   e2e7c:	69e9      	ldr	r1, [r5, #28]
   e2e7e:	4041      	eors	r1, r0
   e2e80:	5dd8      	ldrb	r0, [r3, r7]
   e2e82:	ea81 6100 	eor.w	r1, r1, r0, lsl #24
   e2e86:	5d98      	ldrb	r0, [r3, r6]
   e2e88:	f813 300a 	ldrb.w	r3, [r3, sl]
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
   e2e8c:	f882 e000 	strb.w	lr, [r2]
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
   e2e90:	ea81 2100 	eor.w	r1, r1, r0, lsl #8
   e2e94:	ea81 4303 	eor.w	r3, r1, r3, lsl #16
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
   e2e98:	ea4f 211e 	mov.w	r1, lr, lsr #8
   e2e9c:	7051      	strb	r1, [r2, #1]
   e2e9e:	ea4f 411e 	mov.w	r1, lr, lsr #16
   e2ea2:	7091      	strb	r1, [r2, #2]
    PUT_UINT32_LE( X1, output,  4 );
   e2ea4:	0a21      	lsrs	r1, r4, #8
   e2ea6:	7151      	strb	r1, [r2, #5]
   e2ea8:	0c21      	lsrs	r1, r4, #16
   e2eaa:	7191      	strb	r1, [r2, #6]
    PUT_UINT32_LE( X2, output,  8 );
   e2eac:	ea4f 211c 	mov.w	r1, ip, lsr #8
   e2eb0:	7251      	strb	r1, [r2, #9]
   e2eb2:	ea4f 411c 	mov.w	r1, ip, lsr #16
   e2eb6:	7291      	strb	r1, [r2, #10]
    PUT_UINT32_LE( X3, output, 12 );
   e2eb8:	0a19      	lsrs	r1, r3, #8
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
   e2eba:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
    PUT_UINT32_LE( X1, output,  4 );
   e2ebe:	7114      	strb	r4, [r2, #4]
    PUT_UINT32_LE( X2, output,  8 );
   e2ec0:	f882 c008 	strb.w	ip, [r2, #8]
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
   e2ec4:	0e24      	lsrs	r4, r4, #24
    PUT_UINT32_LE( X2, output,  8 );
   e2ec6:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
    PUT_UINT32_LE( X3, output, 12 );
   e2eca:	7313      	strb	r3, [r2, #12]
   e2ecc:	7351      	strb	r1, [r2, #13]

    return( 0 );
}
   e2ece:	2000      	movs	r0, #0
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
    PUT_UINT32_LE( X3, output, 12 );
   e2ed0:	0c19      	lsrs	r1, r3, #16
   e2ed2:	0e1b      	lsrs	r3, r3, #24
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
   e2ed4:	f882 e003 	strb.w	lr, [r2, #3]
    PUT_UINT32_LE( X1, output,  4 );
   e2ed8:	71d4      	strb	r4, [r2, #7]
    PUT_UINT32_LE( X2, output,  8 );
   e2eda:	f882 c00b 	strb.w	ip, [r2, #11]
    PUT_UINT32_LE( X3, output, 12 );
   e2ede:	7391      	strb	r1, [r2, #14]
   e2ee0:	73d3      	strb	r3, [r2, #15]

    return( 0 );
}
   e2ee2:	b003      	add	sp, #12
   e2ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e2ee8:	2003dc3c 	.word	0x2003dc3c
   e2eec:	2003e03c 	.word	0x2003e03c
   e2ef0:	2003d23c 	.word	0x2003d23c
   e2ef4:	2003d83c 	.word	0x2003d83c
   e2ef8:	2003d43c 	.word	0x2003d43c

000e2efc <mbedtls_aes_crypt_ecb>:
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                           int mode,
                           const unsigned char input[16],
                           unsigned char output[16] )
{
   e2efc:	b410      	push	{r4}
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
   e2efe:	2901      	cmp	r1, #1
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                           int mode,
                           const unsigned char input[16],
                           unsigned char output[16] )
{
   e2f00:	4614      	mov	r4, r2
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
   e2f02:	4621      	mov	r1, r4
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                           int mode,
                           const unsigned char input[16],
                           unsigned char output[16] )
{
   e2f04:	461a      	mov	r2, r3
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
   e2f06:	d103      	bne.n	e2f10 <mbedtls_aes_crypt_ecb+0x14>
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
}
   e2f08:	f85d 4b04 	ldr.w	r4, [sp], #4
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
   e2f0c:	f7ff bc6a 	b.w	e27e4 <mbedtls_internal_aes_encrypt>
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
}
   e2f10:	f85d 4b04 	ldr.w	r4, [sp], #4
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
   e2f14:	f7ff be2c 	b.w	e2b70 <mbedtls_internal_aes_decrypt>

000e2f18 <_ZL18pkcs12_fill_bufferPhjPKhj>:

#endif /* MBEDTLS_ASN1_PARSE_C */

static void pkcs12_fill_buffer( unsigned char *data, size_t data_len,
                                const unsigned char *filler, size_t fill_len )
{
   e2f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e2f1c:	4606      	mov	r6, r0
   e2f1e:	460c      	mov	r4, r1
   e2f20:	4617      	mov	r7, r2
   e2f22:	4698      	mov	r8, r3
    unsigned char *p = data;
    size_t use_len;

    while( data_len > 0 )
   e2f24:	b15c      	cbz	r4, e2f3e <_ZL18pkcs12_fill_bufferPhjPKhj+0x26>
   e2f26:	4544      	cmp	r4, r8
   e2f28:	4625      	mov	r5, r4
   e2f2a:	bf28      	it	cs
   e2f2c:	4645      	movcs	r5, r8
    {
        use_len = ( data_len > fill_len ) ? fill_len : data_len;
        memcpy( p, filler, use_len );
   e2f2e:	4630      	mov	r0, r6
   e2f30:	462a      	mov	r2, r5
   e2f32:	4639      	mov	r1, r7
   e2f34:	f006 fdbf 	bl	e9ab6 <memcpy>
        p += use_len;
   e2f38:	442e      	add	r6, r5
        data_len -= use_len;
   e2f3a:	1b64      	subs	r4, r4, r5
                                const unsigned char *filler, size_t fill_len )
{
    unsigned char *p = data;
    size_t use_len;

    while( data_len > 0 )
   e2f3c:	e7f2      	b.n	e2f24 <_ZL18pkcs12_fill_bufferPhjPKhj+0xc>
   e2f3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000e2f44 <mbedtls_pkcs12_pbe_sha1_rc4_128>:
    mbedtls_platform_zeroize( key, sizeof( key ) );
    mbedtls_arc4_free( &ctx );

    return( ret );
#endif /* MBEDTLS_ARC4_C */
}
   e2f44:	4800      	ldr	r0, [pc, #0]	; (e2f48 <mbedtls_pkcs12_pbe_sha1_rc4_128+0x4>)
   e2f46:	4770      	bx	lr
   e2f48:	ffffe100 	.word	0xffffe100

000e2f4c <mbedtls_pkcs12_derivation>:

int mbedtls_pkcs12_derivation( unsigned char *data, size_t datalen,
                       const unsigned char *pwd, size_t pwdlen,
                       const unsigned char *salt, size_t saltlen,
                       mbedtls_md_type_t md_type, int id, int iterations )
{
   e2f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e2f50:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c

    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    // This version only allows max of 64 bytes of password or salt
    if( datalen > 128 || pwdlen > 64 || saltlen > 64 )
   e2f54:	2980      	cmp	r1, #128	; 0x80

int mbedtls_pkcs12_derivation( unsigned char *data, size_t datalen,
                       const unsigned char *pwd, size_t pwdlen,
                       const unsigned char *salt, size_t saltlen,
                       mbedtls_md_type_t md_type, int id, int iterations )
{
   e2f56:	9001      	str	r0, [sp, #4]
   e2f58:	460f      	mov	r7, r1
   e2f5a:	4693      	mov	fp, r2
   e2f5c:	4699      	mov	r9, r3
   e2f5e:	9da1      	ldr	r5, [sp, #644]	; 0x284

    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    // This version only allows max of 64 bytes of password or salt
    if( datalen > 128 || pwdlen > 64 || saltlen > 64 )
   e2f60:	f200 80c3 	bhi.w	e30ea <mbedtls_pkcs12_derivation+0x19e>
   e2f64:	2b40      	cmp	r3, #64	; 0x40
   e2f66:	f200 80c0 	bhi.w	e30ea <mbedtls_pkcs12_derivation+0x19e>
   e2f6a:	2d40      	cmp	r5, #64	; 0x40
   e2f6c:	f200 80bd 	bhi.w	e30ea <mbedtls_pkcs12_derivation+0x19e>
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );

    md_info = mbedtls_md_info_from_type( md_type );
   e2f70:	f89d 0288 	ldrb.w	r0, [sp, #648]	; 0x288
   e2f74:	f7f9 ffe6 	bl	dcf44 <mbedtls_md_info_from_type>
    if( md_info == NULL )
   e2f78:	9000      	str	r0, [sp, #0]
   e2f7a:	2800      	cmp	r0, #0
   e2f7c:	f000 80b7 	beq.w	e30ee <mbedtls_pkcs12_derivation+0x1a2>
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );

    mbedtls_md_init( &md_ctx );
   e2f80:	a803      	add	r0, sp, #12
   e2f82:	f7f9 ffeb 	bl	dcf5c <mbedtls_md_init>

    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
   e2f86:	2200      	movs	r2, #0
   e2f88:	9900      	ldr	r1, [sp, #0]
   e2f8a:	a803      	add	r0, sp, #12
   e2f8c:	f7fa f806 	bl	dcf9c <mbedtls_md_setup>
   e2f90:	2800      	cmp	r0, #0
   e2f92:	f040 80ad 	bne.w	e30f0 <mbedtls_pkcs12_derivation+0x1a4>
        return( ret );
    hlen = mbedtls_md_get_size( md_info );
   e2f96:	9800      	ldr	r0, [sp, #0]
   e2f98:	f7fa f90c 	bl	dd1b4 <mbedtls_md_get_size>

    if( hlen <= 32 )
        v = 64;
   e2f9c:	2820      	cmp	r0, #32
   e2f9e:	bf8c      	ite	hi
   e2fa0:	2480      	movhi	r4, #128	; 0x80
   e2fa2:	2440      	movls	r4, #64	; 0x40
    else
        v = 128;

    memset( diversifier, (unsigned char) id, v );
   e2fa4:	4622      	mov	r2, r4
   e2fa6:	f89d 128c 	ldrb.w	r1, [sp, #652]	; 0x28c

    mbedtls_md_init( &md_ctx );

    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
        return( ret );
    hlen = mbedtls_md_get_size( md_info );
   e2faa:	4682      	mov	sl, r0
    else
        v = 128;

    memset( diversifier, (unsigned char) id, v );

    pkcs12_fill_buffer( salt_block, v, salt, saltlen );
   e2fac:	f10d 08d8 	add.w	r8, sp, #216	; 0xd8
    if( hlen <= 32 )
        v = 64;
    else
        v = 128;

    memset( diversifier, (unsigned char) id, v );
   e2fb0:	a816      	add	r0, sp, #88	; 0x58
   e2fb2:	f006 fda6 	bl	e9b02 <memset>

    pkcs12_fill_buffer( salt_block, v, salt, saltlen );
   e2fb6:	462b      	mov	r3, r5
   e2fb8:	9aa0      	ldr	r2, [sp, #640]	; 0x280
   e2fba:	4621      	mov	r1, r4
   e2fbc:	4640      	mov	r0, r8
    pkcs12_fill_buffer( pwd_block,  v, pwd,  pwdlen  );
   e2fbe:	ad56      	add	r5, sp, #344	; 0x158
    else
        v = 128;

    memset( diversifier, (unsigned char) id, v );

    pkcs12_fill_buffer( salt_block, v, salt, saltlen );
   e2fc0:	f7ff ffaa 	bl	e2f18 <_ZL18pkcs12_fill_bufferPhjPKhj>
    pkcs12_fill_buffer( pwd_block,  v, pwd,  pwdlen  );
   e2fc4:	464b      	mov	r3, r9
   e2fc6:	465a      	mov	r2, fp
   e2fc8:	4621      	mov	r1, r4
   e2fca:	4628      	mov	r0, r5
   e2fcc:	f7ff ffa4 	bl	e2f18 <_ZL18pkcs12_fill_bufferPhjPKhj>

        if( datalen == 0 )
            break;

        // Concatenating copies of hash_output into hash_block (B)
        pkcs12_fill_buffer( hash_block, v, hash_output, hlen );
   e2fd0:	f50d 79ec 	add.w	r9, sp, #472	; 0x1d8

    pkcs12_fill_buffer( salt_block, v, salt, saltlen );
    pkcs12_fill_buffer( pwd_block,  v, pwd,  pwdlen  );

    p = data;
    while( datalen > 0 )
   e2fd4:	2f00      	cmp	r7, #0
   e2fd6:	d072      	beq.n	e30be <mbedtls_pkcs12_derivation+0x172>
    {
        // Calculate hash( diversifier || salt_block || pwd_block )
        if( ( ret = mbedtls_md_starts( &md_ctx ) ) != 0 )
   e2fd8:	a803      	add	r0, sp, #12
   e2fda:	f7fa f801 	bl	dcfe0 <mbedtls_md_starts>
   e2fde:	4606      	mov	r6, r0
   e2fe0:	2800      	cmp	r0, #0
   e2fe2:	d16d      	bne.n	e30c0 <mbedtls_pkcs12_derivation+0x174>
            goto exit;

        if( ( ret = mbedtls_md_update( &md_ctx, diversifier, v ) ) != 0 )
   e2fe4:	4622      	mov	r2, r4
   e2fe6:	a916      	add	r1, sp, #88	; 0x58
   e2fe8:	a803      	add	r0, sp, #12
   e2fea:	f7fa f803 	bl	dcff4 <mbedtls_md_update>
   e2fee:	4606      	mov	r6, r0
   e2ff0:	2800      	cmp	r0, #0
   e2ff2:	d165      	bne.n	e30c0 <mbedtls_pkcs12_derivation+0x174>
            goto exit;

        if( ( ret = mbedtls_md_update( &md_ctx, salt_block, v ) ) != 0 )
   e2ff4:	4622      	mov	r2, r4
   e2ff6:	4641      	mov	r1, r8
   e2ff8:	a803      	add	r0, sp, #12
   e2ffa:	f7f9 fffb 	bl	dcff4 <mbedtls_md_update>
   e2ffe:	4606      	mov	r6, r0
   e3000:	2800      	cmp	r0, #0
   e3002:	d15d      	bne.n	e30c0 <mbedtls_pkcs12_derivation+0x174>
            goto exit;

        if( ( ret = mbedtls_md_update( &md_ctx, pwd_block, v ) ) != 0 )
   e3004:	4622      	mov	r2, r4
   e3006:	4629      	mov	r1, r5
   e3008:	a803      	add	r0, sp, #12
   e300a:	f7f9 fff3 	bl	dcff4 <mbedtls_md_update>
   e300e:	4606      	mov	r6, r0
   e3010:	2800      	cmp	r0, #0
   e3012:	d155      	bne.n	e30c0 <mbedtls_pkcs12_derivation+0x174>
            goto exit;

        if( ( ret = mbedtls_md_finish( &md_ctx, hash_output ) ) != 0 )
   e3014:	a906      	add	r1, sp, #24
   e3016:	a803      	add	r0, sp, #12
   e3018:	f7f9 fff6 	bl	dd008 <mbedtls_md_finish>
   e301c:	4606      	mov	r6, r0
   e301e:	2800      	cmp	r0, #0
   e3020:	d14e      	bne.n	e30c0 <mbedtls_pkcs12_derivation+0x174>
   e3022:	f04f 0b01 	mov.w	fp, #1
            goto exit;

        // Perform remaining ( iterations - 1 ) recursive hash calculations
        for( i = 1; i < (size_t) iterations; i++ )
   e3026:	9ba4      	ldr	r3, [sp, #656]	; 0x290
   e3028:	459b      	cmp	fp, r3
   e302a:	d20b      	bcs.n	e3044 <mbedtls_pkcs12_derivation+0xf8>
        {
            if( ( ret = mbedtls_md( md_info, hash_output, hlen, hash_output ) ) != 0 )
   e302c:	ab06      	add	r3, sp, #24
   e302e:	4652      	mov	r2, sl
   e3030:	4619      	mov	r1, r3
   e3032:	9800      	ldr	r0, [sp, #0]
   e3034:	f7f9 fff2 	bl	dd01c <mbedtls_md>
   e3038:	4606      	mov	r6, r0
   e303a:	2800      	cmp	r0, #0
   e303c:	d140      	bne.n	e30c0 <mbedtls_pkcs12_derivation+0x174>

        if( ( ret = mbedtls_md_finish( &md_ctx, hash_output ) ) != 0 )
            goto exit;

        // Perform remaining ( iterations - 1 ) recursive hash calculations
        for( i = 1; i < (size_t) iterations; i++ )
   e303e:	f10b 0b01 	add.w	fp, fp, #1
   e3042:	e7f0      	b.n	e3026 <mbedtls_pkcs12_derivation+0xda>
   e3044:	4557      	cmp	r7, sl
   e3046:	46bb      	mov	fp, r7
   e3048:	bf28      	it	cs
   e304a:	46d3      	movcs	fp, sl
            if( ( ret = mbedtls_md( md_info, hash_output, hlen, hash_output ) ) != 0 )
                goto exit;
        }

        use_len = ( datalen > hlen ) ? hlen : datalen;
        memcpy( p, hash_output, use_len );
   e304c:	465a      	mov	r2, fp
   e304e:	a906      	add	r1, sp, #24
   e3050:	9801      	ldr	r0, [sp, #4]
   e3052:	f006 fd30 	bl	e9ab6 <memcpy>
        datalen -= use_len;
        p += use_len;
   e3056:	9b01      	ldr	r3, [sp, #4]

        if( datalen == 0 )
   e3058:	ebb7 070b 	subs.w	r7, r7, fp
        }

        use_len = ( datalen > hlen ) ? hlen : datalen;
        memcpy( p, hash_output, use_len );
        datalen -= use_len;
        p += use_len;
   e305c:	445b      	add	r3, fp
   e305e:	9301      	str	r3, [sp, #4]

        if( datalen == 0 )
   e3060:	d02d      	beq.n	e30be <mbedtls_pkcs12_derivation+0x172>
            break;

        // Concatenating copies of hash_output into hash_block (B)
        pkcs12_fill_buffer( hash_block, v, hash_output, hlen );
   e3062:	4653      	mov	r3, sl
   e3064:	aa06      	add	r2, sp, #24
   e3066:	4621      	mov	r1, r4
   e3068:	4648      	mov	r0, r9
   e306a:	f7ff ff55 	bl	e2f18 <_ZL18pkcs12_fill_bufferPhjPKhj>
   e306e:	eb09 0304 	add.w	r3, r9, r4

        // B += 1
        for( i = v; i > 0; i-- )
            if( ++hash_block[i - 1] != 0 )
   e3072:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   e3076:	3201      	adds	r2, #1
   e3078:	b2d2      	uxtb	r2, r2
   e307a:	701a      	strb	r2, [r3, #0]
   e307c:	b91a      	cbnz	r2, e3086 <mbedtls_pkcs12_derivation+0x13a>

        // Concatenating copies of hash_output into hash_block (B)
        pkcs12_fill_buffer( hash_block, v, hash_output, hlen );

        // B += 1
        for( i = v; i > 0; i-- )
   e307e:	454b      	cmp	r3, r9
   e3080:	d1f7      	bne.n	e3072 <mbedtls_pkcs12_derivation+0x126>
   e3082:	4623      	mov	r3, r4
   e3084:	e001      	b.n	e308a <mbedtls_pkcs12_derivation+0x13e>
   e3086:	4623      	mov	r3, r4
   e3088:	2200      	movs	r2, #0

        // salt_block += B
        c = 0;
        for( i = v; i > 0; i-- )
        {
            j = salt_block[i - 1] + hash_block[i - 1] + c;
   e308a:	3b01      	subs	r3, #1
   e308c:	f818 0003 	ldrb.w	r0, [r8, r3]
   e3090:	f813 1009 	ldrb.w	r1, [r3, r9]
   e3094:	4401      	add	r1, r0
   e3096:	4411      	add	r1, r2
            c = (unsigned char) (j >> 8);
   e3098:	f3c1 2207 	ubfx	r2, r1, #8, #8
            salt_block[i - 1] = j & 0xFF;
   e309c:	f808 1003 	strb.w	r1, [r8, r3]
            if( ++hash_block[i - 1] != 0 )
                break;

        // salt_block += B
        c = 0;
        for( i = v; i > 0; i-- )
   e30a0:	2b00      	cmp	r3, #0
   e30a2:	d1f2      	bne.n	e308a <mbedtls_pkcs12_derivation+0x13e>
   e30a4:	4622      	mov	r2, r4

        // pwd_block  += B
        c = 0;
        for( i = v; i > 0; i-- )
        {
            j = pwd_block[i - 1] + hash_block[i - 1] + c;
   e30a6:	3a01      	subs	r2, #1
   e30a8:	5d50      	ldrb	r0, [r2, r5]
   e30aa:	f812 1009 	ldrb.w	r1, [r2, r9]
   e30ae:	4401      	add	r1, r0
   e30b0:	4419      	add	r1, r3
            c = (unsigned char) (j >> 8);
   e30b2:	f3c1 2307 	ubfx	r3, r1, #8, #8
            pwd_block[i - 1] = j & 0xFF;
   e30b6:	5551      	strb	r1, [r2, r5]
            salt_block[i - 1] = j & 0xFF;
        }

        // pwd_block  += B
        c = 0;
        for( i = v; i > 0; i-- )
   e30b8:	2a00      	cmp	r2, #0
   e30ba:	d1f4      	bne.n	e30a6 <mbedtls_pkcs12_derivation+0x15a>
   e30bc:	e78a      	b.n	e2fd4 <mbedtls_pkcs12_derivation+0x88>
            c = (unsigned char) (j >> 8);
            pwd_block[i - 1] = j & 0xFF;
        }
    }

    ret = 0;
   e30be:	2600      	movs	r6, #0

exit:
    mbedtls_platform_zeroize( salt_block, sizeof( salt_block ) );
   e30c0:	2180      	movs	r1, #128	; 0x80
   e30c2:	4640      	mov	r0, r8
   e30c4:	f7f8 f89a 	bl	db1fc <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( pwd_block, sizeof( pwd_block ) );
   e30c8:	2180      	movs	r1, #128	; 0x80
   e30ca:	4628      	mov	r0, r5
   e30cc:	f7f8 f896 	bl	db1fc <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( hash_block, sizeof( hash_block ) );
   e30d0:	2180      	movs	r1, #128	; 0x80
   e30d2:	a876      	add	r0, sp, #472	; 0x1d8
   e30d4:	f7f8 f892 	bl	db1fc <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( hash_output, sizeof( hash_output ) );
   e30d8:	2140      	movs	r1, #64	; 0x40
   e30da:	a806      	add	r0, sp, #24
   e30dc:	f7f8 f88e 	bl	db1fc <mbedtls_platform_zeroize>

    mbedtls_md_free( &md_ctx );
   e30e0:	a803      	add	r0, sp, #12
   e30e2:	f7f9 ff40 	bl	dcf66 <mbedtls_md_free>

    return( ret );
   e30e6:	4630      	mov	r0, r6
   e30e8:	e002      	b.n	e30f0 <mbedtls_pkcs12_derivation+0x1a4>
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    // This version only allows max of 64 bytes of password or salt
    if( datalen > 128 || pwdlen > 64 || saltlen > 64 )
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );
   e30ea:	4803      	ldr	r0, [pc, #12]	; (e30f8 <mbedtls_pkcs12_derivation+0x1ac>)
   e30ec:	e000      	b.n	e30f0 <mbedtls_pkcs12_derivation+0x1a4>

    md_info = mbedtls_md_info_from_type( md_type );
    if( md_info == NULL )
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );
   e30ee:	4803      	ldr	r0, [pc, #12]	; (e30fc <mbedtls_pkcs12_derivation+0x1b0>)
    mbedtls_platform_zeroize( hash_output, sizeof( hash_output ) );

    mbedtls_md_free( &md_ctx );

    return( ret );
}
   e30f0:	f50d 7d17 	add.w	sp, sp, #604	; 0x25c
   e30f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e30f8:	ffffe080 	.word	0xffffe080
   e30fc:	ffffe100 	.word	0xffffe100

000e3100 <mbedtls_pkcs12_pbe>:
int mbedtls_pkcs12_pbe( mbedtls_asn1_buf *pbe_params, int mode,
                mbedtls_cipher_type_t cipher_type, mbedtls_md_type_t md_type,
                const unsigned char *pwd,  size_t pwdlen,
                const unsigned char *data, size_t len,
                unsigned char *output )
{
   e3100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e3104:	b0d9      	sub	sp, #356	; 0x164
   e3106:	4604      	mov	r4, r0
    int ret, keylen = 0;
    unsigned char key[32];
    unsigned char iv[16];
    const mbedtls_cipher_info_t *cipher_info;
    mbedtls_cipher_context_t cipher_ctx;
    size_t olen = 0;
   e3108:	2600      	movs	r6, #0

    cipher_info = mbedtls_cipher_info_from_type( cipher_type );
   e310a:	4610      	mov	r0, r2
int mbedtls_pkcs12_pbe( mbedtls_asn1_buf *pbe_params, int mode,
                mbedtls_cipher_type_t cipher_type, mbedtls_md_type_t md_type,
                const unsigned char *pwd,  size_t pwdlen,
                const unsigned char *data, size_t len,
                unsigned char *output )
{
   e310c:	468b      	mov	fp, r1
   e310e:	4699      	mov	r9, r3
    int ret, keylen = 0;
    unsigned char key[32];
    unsigned char iv[16];
    const mbedtls_cipher_info_t *cipher_info;
    mbedtls_cipher_context_t cipher_ctx;
    size_t olen = 0;
   e3110:	9606      	str	r6, [sp, #24]

    cipher_info = mbedtls_cipher_info_from_type( cipher_type );
   e3112:	f7f2 ffd3 	bl	d60bc <mbedtls_cipher_info_from_type>
    if( cipher_info == NULL )
   e3116:	4605      	mov	r5, r0
   e3118:	2800      	cmp	r0, #0
   e311a:	f000 80ac 	beq.w	e3276 <mbedtls_pkcs12_pbe+0x176>
    int ret, iterations = 0;
    mbedtls_asn1_buf salt;
    size_t i;
    unsigned char unipwd[PKCS12_MAX_PWDLEN * 2 + 2];

    if( pwdlen > PKCS12_MAX_PWDLEN )
   e311e:	9b63      	ldr	r3, [sp, #396]	; 0x18c

    cipher_info = mbedtls_cipher_info_from_type( cipher_type );
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );

    keylen = cipher_info->key_bitlen / 8;
   e3120:	6847      	ldr	r7, [r0, #4]

    if( ( ret = pkcs12_pbe_derive_key_iv( pbe_params, md_type, pwd, pwdlen,
                                          key, keylen,
                                          iv, cipher_info->iv_size ) ) != 0 )
   e3122:	f8d0 800c 	ldr.w	r8, [r0, #12]
static int pkcs12_pbe_derive_key_iv( mbedtls_asn1_buf *pbe_params, mbedtls_md_type_t md_type,
                                     const unsigned char *pwd,  size_t pwdlen,
                                     unsigned char *key, size_t keylen,
                                     unsigned char *iv,  size_t ivlen )
{
    int ret, iterations = 0;
   e3126:	9607      	str	r6, [sp, #28]
    mbedtls_asn1_buf salt;
    size_t i;
    unsigned char unipwd[PKCS12_MAX_PWDLEN * 2 + 2];

    if( pwdlen > PKCS12_MAX_PWDLEN )
   e3128:	2b80      	cmp	r3, #128	; 0x80

    cipher_info = mbedtls_cipher_info_from_type( cipher_type );
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );

    keylen = cipher_info->key_bitlen / 8;
   e312a:	ea4f 07d7 	mov.w	r7, r7, lsr #3
    int ret, iterations = 0;
    mbedtls_asn1_buf salt;
    size_t i;
    unsigned char unipwd[PKCS12_MAX_PWDLEN * 2 + 2];

    if( pwdlen > PKCS12_MAX_PWDLEN )
   e312e:	d860      	bhi.n	e31f2 <mbedtls_pkcs12_pbe+0xf2>
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );

    memset( &salt, 0, sizeof(mbedtls_asn1_buf) );
    memset( &unipwd, 0, sizeof(unipwd) );
   e3130:	4631      	mov	r1, r6
   e3132:	f44f 7281 	mov.w	r2, #258	; 0x102
   e3136:	a817      	add	r0, sp, #92	; 0x5c
    unsigned char unipwd[PKCS12_MAX_PWDLEN * 2 + 2];

    if( pwdlen > PKCS12_MAX_PWDLEN )
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );

    memset( &salt, 0, sizeof(mbedtls_asn1_buf) );
   e3138:	9608      	str	r6, [sp, #32]
   e313a:	9609      	str	r6, [sp, #36]	; 0x24
   e313c:	960a      	str	r6, [sp, #40]	; 0x28
    memset( &unipwd, 0, sizeof(unipwd) );
   e313e:	f006 fce0 	bl	e9b02 <memset>
static int pkcs12_parse_pbe_params( mbedtls_asn1_buf *params,
                                    mbedtls_asn1_buf *salt, int *iterations )
{
    int ret;
    unsigned char **p = &params->p;
    const unsigned char *end = params->p + params->len;
   e3142:	6863      	ldr	r3, [r4, #4]
   e3144:	68a6      	ldr	r6, [r4, #8]
   e3146:	441e      	add	r6, r3
     *    salt          OCTET STRING,
     *    iterations    INTEGER
     *  }
     *
     */
    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
   e3148:	6823      	ldr	r3, [r4, #0]
   e314a:	2b30      	cmp	r3, #48	; 0x30

static int pkcs12_parse_pbe_params( mbedtls_asn1_buf *params,
                                    mbedtls_asn1_buf *salt, int *iterations )
{
    int ret;
    unsigned char **p = &params->p;
   e314c:	f104 0a08 	add.w	sl, r4, #8
     *    salt          OCTET STRING,
     *    iterations    INTEGER
     *  }
     *
     */
    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
   e3150:	f040 8093 	bne.w	e327a <mbedtls_pkcs12_pbe+0x17a>
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    if( ( ret = mbedtls_asn1_get_tag( p, end, &salt->len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
   e3154:	2304      	movs	r3, #4
   e3156:	aa09      	add	r2, sp, #36	; 0x24
   e3158:	4631      	mov	r1, r6
   e315a:	4650      	mov	r0, sl
   e315c:	f7f3 f976 	bl	d644c <mbedtls_asn1_get_tag>
   e3160:	b950      	cbnz	r0, e3178 <mbedtls_pkcs12_pbe+0x78>
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT + ret );

    salt->p = *p;
   e3162:	68a2      	ldr	r2, [r4, #8]
    *p += salt->len;
   e3164:	9b09      	ldr	r3, [sp, #36]	; 0x24
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    if( ( ret = mbedtls_asn1_get_tag( p, end, &salt->len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT + ret );

    salt->p = *p;
   e3166:	920a      	str	r2, [sp, #40]	; 0x28
    *p += salt->len;
   e3168:	4413      	add	r3, r2
   e316a:	60a3      	str	r3, [r4, #8]

    if( ( ret = mbedtls_asn1_get_int( p, end, iterations ) ) != 0 )
   e316c:	aa07      	add	r2, sp, #28
   e316e:	4631      	mov	r1, r6
   e3170:	4650      	mov	r0, sl
   e3172:	f7f3 f998 	bl	d64a6 <mbedtls_asn1_get_int>
   e3176:	b118      	cbz	r0, e3180 <mbedtls_pkcs12_pbe+0x80>
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT + ret );
   e3178:	f5a0 50f4 	sub.w	r0, r0, #7808	; 0x1e80
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );

    memset( &salt, 0, sizeof(mbedtls_asn1_buf) );
    memset( &unipwd, 0, sizeof(unipwd) );

    if( ( ret = pkcs12_parse_pbe_params( pbe_params, &salt,
   e317c:	b118      	cbz	r0, e3186 <mbedtls_pkcs12_pbe+0x86>
   e317e:	e07f      	b.n	e3280 <mbedtls_pkcs12_pbe+0x180>
    *p += salt->len;

    if( ( ret = mbedtls_asn1_get_int( p, end, iterations ) ) != 0 )
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT + ret );

    if( *p != end )
   e3180:	68a3      	ldr	r3, [r4, #8]
   e3182:	429e      	cmp	r6, r3
   e3184:	d17b      	bne.n	e327e <mbedtls_pkcs12_pbe+0x17e>
int mbedtls_pkcs12_pbe( mbedtls_asn1_buf *pbe_params, int mode,
                mbedtls_cipher_type_t cipher_type, mbedtls_md_type_t md_type,
                const unsigned char *pwd,  size_t pwdlen,
                const unsigned char *data, size_t len,
                unsigned char *output )
{
   e3186:	2300      	movs	r3, #0

    if( ( ret = pkcs12_parse_pbe_params( pbe_params, &salt,
                                         &iterations ) ) != 0 )
        return( ret );

    for( i = 0; i < pwdlen; i++ )
   e3188:	9a63      	ldr	r2, [sp, #396]	; 0x18c
   e318a:	429a      	cmp	r2, r3
   e318c:	d007      	beq.n	e319e <mbedtls_pkcs12_pbe+0x9e>
        unipwd[i * 2 + 1] = pwd[i];
   e318e:	aa17      	add	r2, sp, #92	; 0x5c
   e3190:	9962      	ldr	r1, [sp, #392]	; 0x188
   e3192:	eb02 0243 	add.w	r2, r2, r3, lsl #1
   e3196:	5cc9      	ldrb	r1, [r1, r3]
   e3198:	7051      	strb	r1, [r2, #1]

    if( ( ret = pkcs12_parse_pbe_params( pbe_params, &salt,
                                         &iterations ) ) != 0 )
        return( ret );

    for( i = 0; i < pwdlen; i++ )
   e319a:	3301      	adds	r3, #1
   e319c:	e7f4      	b.n	e3188 <mbedtls_pkcs12_pbe+0x88>
        unipwd[i * 2 + 1] = pwd[i];

    if( ( ret = mbedtls_pkcs12_derivation( key, keylen, unipwd, pwdlen * 2 + 2,
   e319e:	9b63      	ldr	r3, [sp, #396]	; 0x18c
   e31a0:	f8cd 9008 	str.w	r9, [sp, #8]
   e31a4:	1c5c      	adds	r4, r3, #1
   e31a6:	9b07      	ldr	r3, [sp, #28]
   e31a8:	9304      	str	r3, [sp, #16]
   e31aa:	2301      	movs	r3, #1
   e31ac:	9303      	str	r3, [sp, #12]
   e31ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e31b0:	9301      	str	r3, [sp, #4]
   e31b2:	0064      	lsls	r4, r4, #1
   e31b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e31b6:	9300      	str	r3, [sp, #0]
   e31b8:	aa17      	add	r2, sp, #92	; 0x5c
   e31ba:	4623      	mov	r3, r4
   e31bc:	4639      	mov	r1, r7
   e31be:	a80f      	add	r0, sp, #60	; 0x3c
   e31c0:	f7ff fec4 	bl	e2f4c <mbedtls_pkcs12_derivation>
   e31c4:	2800      	cmp	r0, #0
   e31c6:	d15b      	bne.n	e3280 <mbedtls_pkcs12_pbe+0x180>
                                   MBEDTLS_PKCS12_DERIVE_KEY, iterations ) ) != 0 )
    {
        return( ret );
    }

    if( iv == NULL || ivlen == 0 )
   e31c8:	f1b8 0f00 	cmp.w	r8, #0
   e31cc:	d013      	beq.n	e31f6 <mbedtls_pkcs12_pbe+0xf6>
        return( 0 );

    if( ( ret = mbedtls_pkcs12_derivation( iv, ivlen, unipwd, pwdlen * 2 + 2,
   e31ce:	9b07      	ldr	r3, [sp, #28]
   e31d0:	9304      	str	r3, [sp, #16]
   e31d2:	2302      	movs	r3, #2
   e31d4:	9303      	str	r3, [sp, #12]
   e31d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e31d8:	9301      	str	r3, [sp, #4]
   e31da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e31dc:	9300      	str	r3, [sp, #0]
   e31de:	f8cd 9008 	str.w	r9, [sp, #8]
   e31e2:	4623      	mov	r3, r4
   e31e4:	aa17      	add	r2, sp, #92	; 0x5c
   e31e6:	4641      	mov	r1, r8
   e31e8:	a80b      	add	r0, sp, #44	; 0x2c
   e31ea:	f7ff feaf 	bl	e2f4c <mbedtls_pkcs12_derivation>
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );

    keylen = cipher_info->key_bitlen / 8;

    if( ( ret = pkcs12_pbe_derive_key_iv( pbe_params, md_type, pwd, pwdlen,
   e31ee:	b110      	cbz	r0, e31f6 <mbedtls_pkcs12_pbe+0xf6>
   e31f0:	e046      	b.n	e3280 <mbedtls_pkcs12_pbe+0x180>
    mbedtls_asn1_buf salt;
    size_t i;
    unsigned char unipwd[PKCS12_MAX_PWDLEN * 2 + 2];

    if( pwdlen > PKCS12_MAX_PWDLEN )
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );
   e31f2:	4825      	ldr	r0, [pc, #148]	; (e3288 <mbedtls_pkcs12_pbe+0x188>)
   e31f4:	e044      	b.n	e3280 <mbedtls_pkcs12_pbe+0x180>
                                          iv, cipher_info->iv_size ) ) != 0 )
    {
        return( ret );
    }

    mbedtls_cipher_init( &cipher_ctx );
   e31f6:	a817      	add	r0, sp, #92	; 0x5c
   e31f8:	f7f2 ff82 	bl	d6100 <mbedtls_cipher_init>

    if( ( ret = mbedtls_cipher_setup( &cipher_ctx, cipher_info ) ) != 0 )
   e31fc:	4629      	mov	r1, r5
   e31fe:	a817      	add	r0, sp, #92	; 0x5c
   e3200:	f7f2 ff92 	bl	d6128 <mbedtls_cipher_setup>
   e3204:	4604      	mov	r4, r0
   e3206:	bb48      	cbnz	r0, e325c <mbedtls_pkcs12_pbe+0x15c>
        goto exit;

    if( ( ret = mbedtls_cipher_setkey( &cipher_ctx, key, 8 * keylen, (mbedtls_operation_t) mode ) ) != 0 )
   e3208:	fa4f f38b 	sxtb.w	r3, fp
   e320c:	00fa      	lsls	r2, r7, #3
   e320e:	a90f      	add	r1, sp, #60	; 0x3c
   e3210:	a817      	add	r0, sp, #92	; 0x5c
   e3212:	f7f2 ffa1 	bl	d6158 <mbedtls_cipher_setkey>
   e3216:	4604      	mov	r4, r0
   e3218:	bb00      	cbnz	r0, e325c <mbedtls_pkcs12_pbe+0x15c>
        goto exit;

    if( ( ret = mbedtls_cipher_set_iv( &cipher_ctx, iv, cipher_info->iv_size ) ) != 0 )
   e321a:	68ea      	ldr	r2, [r5, #12]
   e321c:	a90b      	add	r1, sp, #44	; 0x2c
   e321e:	a817      	add	r0, sp, #92	; 0x5c
   e3220:	f7f2 ffba 	bl	d6198 <mbedtls_cipher_set_iv>
   e3224:	4604      	mov	r4, r0
   e3226:	b9c8      	cbnz	r0, e325c <mbedtls_pkcs12_pbe+0x15c>
        goto exit;

    if( ( ret = mbedtls_cipher_reset( &cipher_ctx ) ) != 0 )
   e3228:	a817      	add	r0, sp, #92	; 0x5c
   e322a:	f7f2 ffd5 	bl	d61d8 <mbedtls_cipher_reset>
   e322e:	4604      	mov	r4, r0
   e3230:	b9a0      	cbnz	r0, e325c <mbedtls_pkcs12_pbe+0x15c>
        goto exit;

    if( ( ret = mbedtls_cipher_update( &cipher_ctx, data, len,
   e3232:	ad06      	add	r5, sp, #24
   e3234:	9500      	str	r5, [sp, #0]
   e3236:	a964      	add	r1, sp, #400	; 0x190
   e3238:	c90e      	ldmia	r1, {r1, r2, r3}
   e323a:	a817      	add	r0, sp, #92	; 0x5c
   e323c:	f7f2 ffd6 	bl	d61ec <mbedtls_cipher_update>
   e3240:	4604      	mov	r4, r0
   e3242:	b958      	cbnz	r0, e325c <mbedtls_pkcs12_pbe+0x15c>
                                output, &olen ) ) != 0 )
    {
        goto exit;
    }

    if( ( ret = mbedtls_cipher_finish( &cipher_ctx, output + olen, &olen ) ) != 0 )
   e3244:	6829      	ldr	r1, [r5, #0]
   e3246:	9b66      	ldr	r3, [sp, #408]	; 0x198
   e3248:	462a      	mov	r2, r5
   e324a:	4419      	add	r1, r3
   e324c:	a817      	add	r0, sp, #92	; 0x5c
   e324e:	f7f3 f811 	bl	d6274 <mbedtls_cipher_finish>
        ret = MBEDTLS_ERR_PKCS12_PASSWORD_MISMATCH;
   e3252:	f5a4 54f0 	sub.w	r4, r4, #7680	; 0x1e00
   e3256:	2800      	cmp	r0, #0
   e3258:	bf08      	it	eq
   e325a:	2400      	moveq	r4, #0

exit:
    mbedtls_platform_zeroize( key, sizeof( key ) );
   e325c:	2120      	movs	r1, #32
   e325e:	a80f      	add	r0, sp, #60	; 0x3c
   e3260:	f7f7 ffcc 	bl	db1fc <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( iv,  sizeof( iv  ) );
   e3264:	2110      	movs	r1, #16
   e3266:	a80b      	add	r0, sp, #44	; 0x2c
   e3268:	f7f7 ffc8 	bl	db1fc <mbedtls_platform_zeroize>
    mbedtls_cipher_free( &cipher_ctx );
   e326c:	a817      	add	r0, sp, #92	; 0x5c
   e326e:	f7f2 ff4b 	bl	d6108 <mbedtls_cipher_free>

    return( ret );
   e3272:	4620      	mov	r0, r4
   e3274:	e004      	b.n	e3280 <mbedtls_pkcs12_pbe+0x180>
    mbedtls_cipher_context_t cipher_ctx;
    size_t olen = 0;

    cipher_info = mbedtls_cipher_info_from_type( cipher_type );
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );
   e3276:	4805      	ldr	r0, [pc, #20]	; (e328c <mbedtls_pkcs12_pbe+0x18c>)
   e3278:	e002      	b.n	e3280 <mbedtls_pkcs12_pbe+0x180>
     *  }
     *
     */
    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
   e327a:	4805      	ldr	r0, [pc, #20]	; (e3290 <mbedtls_pkcs12_pbe+0x190>)
   e327c:	e000      	b.n	e3280 <mbedtls_pkcs12_pbe+0x180>
    if( ( ret = mbedtls_asn1_get_int( p, end, iterations ) ) != 0 )
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT + ret );

    if( *p != end )
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   e327e:	4805      	ldr	r0, [pc, #20]	; (e3294 <mbedtls_pkcs12_pbe+0x194>)
    mbedtls_platform_zeroize( key, sizeof( key ) );
    mbedtls_platform_zeroize( iv,  sizeof( iv  ) );
    mbedtls_cipher_free( &cipher_ctx );

    return( ret );
}
   e3280:	b059      	add	sp, #356	; 0x164
   e3282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e3286:	bf00      	nop
   e3288:	ffffe080 	.word	0xffffe080
   e328c:	ffffe100 	.word	0xffffe100
   e3290:	ffffe11e 	.word	0xffffe11e
   e3294:	ffffe11a 	.word	0xffffe11a

000e3298 <mbedtls_sha512_init>:

void mbedtls_sha512_init( mbedtls_sha512_context *ctx )
{
    SHA512_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_sha512_context ) );
   e3298:	22d8      	movs	r2, #216	; 0xd8
   e329a:	2100      	movs	r1, #0
   e329c:	f006 bc31 	b.w	e9b02 <memset>

000e32a0 <mbedtls_sha512_free>:
}

void mbedtls_sha512_free( mbedtls_sha512_context *ctx )
{
    if( ctx == NULL )
   e32a0:	b110      	cbz	r0, e32a8 <mbedtls_sha512_free+0x8>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_sha512_context ) );
   e32a2:	21d8      	movs	r1, #216	; 0xd8
   e32a4:	f7f7 bfaa 	b.w	db1fc <mbedtls_platform_zeroize>
   e32a8:	4770      	bx	lr

000e32aa <mbedtls_sha512_clone>:
}

void mbedtls_sha512_clone( mbedtls_sha512_context *dst,
                           const mbedtls_sha512_context *src )
{
   e32aa:	b508      	push	{r3, lr}
    SHA512_VALIDATE( dst != NULL );
    SHA512_VALIDATE( src != NULL );

    *dst = *src;
   e32ac:	22d8      	movs	r2, #216	; 0xd8
   e32ae:	f006 fc02 	bl	e9ab6 <memcpy>
   e32b2:	bd08      	pop	{r3, pc}
   e32b4:	0000      	movs	r0, r0
	...

000e32b8 <mbedtls_sha512_starts_ret>:
int mbedtls_sha512_starts_ret( mbedtls_sha512_context *ctx, int is384 )
{
    SHA512_VALIDATE_RET( ctx != NULL );
    SHA512_VALIDATE_RET( is384 == 0 || is384 == 1 );

    ctx->total[0] = 0;
   e32b8:	2200      	movs	r2, #0
   e32ba:	2300      	movs	r3, #0
   e32bc:	e9c0 2300 	strd	r2, r3, [r0]
    ctx->total[1] = 0;
   e32c0:	e9c0 2302 	strd	r2, r3, [r0, #8]

    if( is384 == 0 )
   e32c4:	bb31      	cbnz	r1, e3314 <mbedtls_sha512_starts_ret+0x5c>
    {
        /* SHA-512 */
        ctx->state[0] = UL64(0x6A09E667F3BCC908);
   e32c6:	a32a      	add	r3, pc, #168	; (adr r3, e3370 <mbedtls_sha512_starts_ret+0xb8>)
   e32c8:	e9d3 2300 	ldrd	r2, r3, [r3]
   e32cc:	e9c0 2304 	strd	r2, r3, [r0, #16]
        ctx->state[1] = UL64(0xBB67AE8584CAA73B);
   e32d0:	a329      	add	r3, pc, #164	; (adr r3, e3378 <mbedtls_sha512_starts_ret+0xc0>)
   e32d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   e32d6:	e9c0 2306 	strd	r2, r3, [r0, #24]
        ctx->state[2] = UL64(0x3C6EF372FE94F82B);
   e32da:	a329      	add	r3, pc, #164	; (adr r3, e3380 <mbedtls_sha512_starts_ret+0xc8>)
   e32dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   e32e0:	e9c0 2308 	strd	r2, r3, [r0, #32]
        ctx->state[3] = UL64(0xA54FF53A5F1D36F1);
   e32e4:	a328      	add	r3, pc, #160	; (adr r3, e3388 <mbedtls_sha512_starts_ret+0xd0>)
   e32e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   e32ea:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
        ctx->state[4] = UL64(0x510E527FADE682D1);
   e32ee:	a328      	add	r3, pc, #160	; (adr r3, e3390 <mbedtls_sha512_starts_ret+0xd8>)
   e32f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   e32f4:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
        ctx->state[5] = UL64(0x9B05688C2B3E6C1F);
   e32f8:	a327      	add	r3, pc, #156	; (adr r3, e3398 <mbedtls_sha512_starts_ret+0xe0>)
   e32fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   e32fe:	e9c0 230e 	strd	r2, r3, [r0, #56]	; 0x38
        ctx->state[6] = UL64(0x1F83D9ABFB41BD6B);
   e3302:	a327      	add	r3, pc, #156	; (adr r3, e33a0 <mbedtls_sha512_starts_ret+0xe8>)
   e3304:	e9d3 2300 	ldrd	r2, r3, [r3]
   e3308:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
        ctx->state[7] = UL64(0x5BE0CD19137E2179);
   e330c:	a326      	add	r3, pc, #152	; (adr r3, e33a8 <mbedtls_sha512_starts_ret+0xf0>)
   e330e:	e9d3 2300 	ldrd	r2, r3, [r3]
   e3312:	e025      	b.n	e3360 <mbedtls_sha512_starts_ret+0xa8>
    }
    else
    {
        /* SHA-384 */
        ctx->state[0] = UL64(0xCBBB9D5DC1059ED8);
   e3314:	a326      	add	r3, pc, #152	; (adr r3, e33b0 <mbedtls_sha512_starts_ret+0xf8>)
   e3316:	e9d3 2300 	ldrd	r2, r3, [r3]
   e331a:	e9c0 2304 	strd	r2, r3, [r0, #16]
        ctx->state[1] = UL64(0x629A292A367CD507);
   e331e:	a326      	add	r3, pc, #152	; (adr r3, e33b8 <mbedtls_sha512_starts_ret+0x100>)
   e3320:	e9d3 2300 	ldrd	r2, r3, [r3]
   e3324:	e9c0 2306 	strd	r2, r3, [r0, #24]
        ctx->state[2] = UL64(0x9159015A3070DD17);
   e3328:	a325      	add	r3, pc, #148	; (adr r3, e33c0 <mbedtls_sha512_starts_ret+0x108>)
   e332a:	e9d3 2300 	ldrd	r2, r3, [r3]
   e332e:	e9c0 2308 	strd	r2, r3, [r0, #32]
        ctx->state[3] = UL64(0x152FECD8F70E5939);
   e3332:	a325      	add	r3, pc, #148	; (adr r3, e33c8 <mbedtls_sha512_starts_ret+0x110>)
   e3334:	e9d3 2300 	ldrd	r2, r3, [r3]
   e3338:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
        ctx->state[4] = UL64(0x67332667FFC00B31);
   e333c:	a324      	add	r3, pc, #144	; (adr r3, e33d0 <mbedtls_sha512_starts_ret+0x118>)
   e333e:	e9d3 2300 	ldrd	r2, r3, [r3]
   e3342:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
        ctx->state[5] = UL64(0x8EB44A8768581511);
   e3346:	a324      	add	r3, pc, #144	; (adr r3, e33d8 <mbedtls_sha512_starts_ret+0x120>)
   e3348:	e9d3 2300 	ldrd	r2, r3, [r3]
   e334c:	e9c0 230e 	strd	r2, r3, [r0, #56]	; 0x38
        ctx->state[6] = UL64(0xDB0C2E0D64F98FA7);
   e3350:	a323      	add	r3, pc, #140	; (adr r3, e33e0 <mbedtls_sha512_starts_ret+0x128>)
   e3352:	e9d3 2300 	ldrd	r2, r3, [r3]
   e3356:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
        ctx->state[7] = UL64(0x47B5481DBEFA4FA4);
   e335a:	a323      	add	r3, pc, #140	; (adr r3, e33e8 <mbedtls_sha512_starts_ret+0x130>)
   e335c:	e9d3 2300 	ldrd	r2, r3, [r3]
   e3360:	e9c0 2312 	strd	r2, r3, [r0, #72]	; 0x48
    }

    ctx->is384 = is384;
   e3364:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0

    return( 0 );
}
   e3368:	2000      	movs	r0, #0
   e336a:	4770      	bx	lr
   e336c:	f3af 8000 	nop.w
   e3370:	f3bcc908 	.word	0xf3bcc908
   e3374:	6a09e667 	.word	0x6a09e667
   e3378:	84caa73b 	.word	0x84caa73b
   e337c:	bb67ae85 	.word	0xbb67ae85
   e3380:	fe94f82b 	.word	0xfe94f82b
   e3384:	3c6ef372 	.word	0x3c6ef372
   e3388:	5f1d36f1 	.word	0x5f1d36f1
   e338c:	a54ff53a 	.word	0xa54ff53a
   e3390:	ade682d1 	.word	0xade682d1
   e3394:	510e527f 	.word	0x510e527f
   e3398:	2b3e6c1f 	.word	0x2b3e6c1f
   e339c:	9b05688c 	.word	0x9b05688c
   e33a0:	fb41bd6b 	.word	0xfb41bd6b
   e33a4:	1f83d9ab 	.word	0x1f83d9ab
   e33a8:	137e2179 	.word	0x137e2179
   e33ac:	5be0cd19 	.word	0x5be0cd19
   e33b0:	c1059ed8 	.word	0xc1059ed8
   e33b4:	cbbb9d5d 	.word	0xcbbb9d5d
   e33b8:	367cd507 	.word	0x367cd507
   e33bc:	629a292a 	.word	0x629a292a
   e33c0:	3070dd17 	.word	0x3070dd17
   e33c4:	9159015a 	.word	0x9159015a
   e33c8:	f70e5939 	.word	0xf70e5939
   e33cc:	152fecd8 	.word	0x152fecd8
   e33d0:	ffc00b31 	.word	0xffc00b31
   e33d4:	67332667 	.word	0x67332667
   e33d8:	68581511 	.word	0x68581511
   e33dc:	8eb44a87 	.word	0x8eb44a87
   e33e0:	64f98fa7 	.word	0x64f98fa7
   e33e4:	db0c2e0d 	.word	0xdb0c2e0d
   e33e8:	befa4fa4 	.word	0xbefa4fa4
   e33ec:	47b5481d 	.word	0x47b5481d

000e33f0 <mbedtls_internal_sha512_process>:
    UL64(0x5FCB6FAB3AD6FAEC),  UL64(0x6C44198C4A475817)
};

int mbedtls_internal_sha512_process( mbedtls_sha512_context *ctx,
                                     const unsigned char data[128] )
{
   e33f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e33f4:	f2ad 4d7c 	subw	sp, sp, #1148	; 0x47c
   e33f8:	4686      	mov	lr, r0
   e33fa:	f50d 7cf8 	add.w	ip, sp, #496	; 0x1f0
        temp1 = (h) + S3(e) + F1((e),(f),(g)) + (K) + (x);      \
        temp2 = S2(a) + F0((a),(b),(c));                        \
        (d) += temp1; (h) = temp1 + temp2;                      \
    } while( 0 )

    for( i = 0; i < 16; i++ )
   e33fe:	2000      	movs	r0, #0
    {
        GET_UINT64_BE( W[i], data, i << 3 );
   e3400:	eb01 04c0 	add.w	r4, r1, r0, lsl #3
   e3404:	f04f 0a00 	mov.w	sl, #0
   e3408:	7866      	ldrb	r6, [r4, #1]
   e340a:	f811 2030 	ldrb.w	r2, [r1, r0, lsl #3]
   e340e:	f8cd a020 	str.w	sl, [sp, #32]
   e3412:	0436      	lsls	r6, r6, #16
   e3414:	9609      	str	r6, [sp, #36]	; 0x24
   e3416:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
   e341a:	ea4f 6b02 	mov.w	fp, r2, lsl #24
   e341e:	2300      	movs	r3, #0
   e3420:	ea43 030b 	orr.w	r3, r3, fp
   e3424:	431e      	orrs	r6, r3
   e3426:	4633      	mov	r3, r6
   e3428:	79e2      	ldrb	r2, [r4, #7]
   e342a:	78a6      	ldrb	r6, [r4, #2]
   e342c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   e3430:	ea42 020a 	orr.w	r2, r2, sl
   e3434:	0236      	lsls	r6, r6, #8
   e3436:	4315      	orrs	r5, r2
   e3438:	960b      	str	r6, [sp, #44]	; 0x2c
   e343a:	462a      	mov	r2, r5
   e343c:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
   e3440:	431e      	orrs	r6, r3
   e3442:	4633      	mov	r3, r6
   e3444:	78e6      	ldrb	r6, [r4, #3]
   e3446:	960d      	str	r6, [sp, #52]	; 0x34
   e3448:	4315      	orrs	r5, r2
   e344a:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
   e344e:	462a      	mov	r2, r5
   e3450:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	; 0x30
   e3454:	431e      	orrs	r6, r3
   e3456:	4633      	mov	r3, r6
   e3458:	7926      	ldrb	r6, [r4, #4]
   e345a:	f8cd a014 	str.w	sl, [sp, #20]
   e345e:	4315      	orrs	r5, r2
   e3460:	462a      	mov	r2, r5
   e3462:	0635      	lsls	r5, r6, #24
   e3464:	9504      	str	r5, [sp, #16]
   e3466:	e9dd 5604 	ldrd	r5, r6, [sp, #16]
   e346a:	431e      	orrs	r6, r3
   e346c:	4633      	mov	r3, r6
   e346e:	7966      	ldrb	r6, [r4, #5]
   e3470:	f8cd a01c 	str.w	sl, [sp, #28]
   e3474:	4315      	orrs	r5, r2
   e3476:	462a      	mov	r2, r5
   e3478:	0435      	lsls	r5, r6, #16
   e347a:	9506      	str	r5, [sp, #24]
   e347c:	e9dd 5606 	ldrd	r5, r6, [sp, #24]
   e3480:	431e      	orrs	r6, r3
   e3482:	4633      	mov	r3, r6
   e3484:	79a6      	ldrb	r6, [r4, #6]
   e3486:	4315      	orrs	r5, r2
   e3488:	ea4f 2806 	mov.w	r8, r6, lsl #8
        temp1 = (h) + S3(e) + F1((e),(f),(g)) + (K) + (x);      \
        temp2 = S2(a) + F0((a),(b),(c));                        \
        (d) += temp1; (h) = temp1 + temp2;                      \
    } while( 0 )

    for( i = 0; i < 16; i++ )
   e348c:	3001      	adds	r0, #1
    {
        GET_UINT64_BE( W[i], data, i << 3 );
   e348e:	ea45 0208 	orr.w	r2, r5, r8
   e3492:	ea43 030a 	orr.w	r3, r3, sl
        temp1 = (h) + S3(e) + F1((e),(f),(g)) + (K) + (x);      \
        temp2 = S2(a) + F0((a),(b),(c));                        \
        (d) += temp1; (h) = temp1 + temp2;                      \
    } while( 0 )

    for( i = 0; i < 16; i++ )
   e3496:	2810      	cmp	r0, #16
    {
        GET_UINT64_BE( W[i], data, i << 3 );
   e3498:	e9ec 2302 	strd	r2, r3, [ip, #8]!
        temp1 = (h) + S3(e) + F1((e),(f),(g)) + (K) + (x);      \
        temp2 = S2(a) + F0((a),(b),(c));                        \
        (d) += temp1; (h) = temp1 + temp2;                      \
    } while( 0 )

    for( i = 0; i < 16; i++ )
   e349c:	d1b0      	bne.n	e3400 <mbedtls_internal_sha512_process+0x10>
   e349e:	a97e      	add	r1, sp, #504	; 0x1f8
        GET_UINT64_BE( W[i], data, i << 3 );
    }

    for( ; i < 80; i++ )
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
   e34a0:	6f0a      	ldr	r2, [r1, #112]	; 0x70
   e34a2:	6f4b      	ldr	r3, [r1, #116]	; 0x74
               S0(W[i - 15]) + W[i - 16];
   e34a4:	f8d1 8008 	ldr.w	r8, [r1, #8]
   e34a8:	f8d1 c00c 	ldr.w	ip, [r1, #12]
   e34ac:	0cd4      	lsrs	r4, r2, #19
   e34ae:	ea44 3443 	orr.w	r4, r4, r3, lsl #13
   e34b2:	940e      	str	r4, [sp, #56]	; 0x38
   e34b4:	0cdc      	lsrs	r4, r3, #19
   e34b6:	ea44 3442 	orr.w	r4, r4, r2, lsl #13
   e34ba:	940f      	str	r4, [sp, #60]	; 0x3c
   e34bc:	00dc      	lsls	r4, r3, #3
   e34be:	ea44 7452 	orr.w	r4, r4, r2, lsr #29
   e34c2:	9411      	str	r4, [sp, #68]	; 0x44
   e34c4:	00d4      	lsls	r4, r2, #3
   e34c6:	ea44 7453 	orr.w	r4, r4, r3, lsr #29
   e34ca:	9410      	str	r4, [sp, #64]	; 0x40
   e34cc:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
   e34d0:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
   e34d4:	0992      	lsrs	r2, r2, #6
   e34d6:	ea42 6283 	orr.w	r2, r2, r3, lsl #26
   e34da:	099b      	lsrs	r3, r3, #6
   e34dc:	9200      	str	r2, [sp, #0]
   e34de:	9301      	str	r3, [sp, #4]
   e34e0:	4066      	eors	r6, r4
   e34e2:	e9dd 3400 	ldrd	r3, r4, [sp]
   e34e6:	406f      	eors	r7, r5
   e34e8:	4073      	eors	r3, r6
   e34ea:	407c      	eors	r4, r7
   e34ec:	461e      	mov	r6, r3
   e34ee:	4627      	mov	r7, r4
   e34f0:	e9d1 2300 	ldrd	r2, r3, [r1]
   e34f4:	e9d1 4512 	ldrd	r4, r5, [r1, #72]	; 0x48
   e34f8:	1912      	adds	r2, r2, r4
   e34fa:	416b      	adcs	r3, r5
   e34fc:	18b4      	adds	r4, r6, r2
   e34fe:	eb47 0503 	adc.w	r5, r7, r3
   e3502:	ea4f 0358 	mov.w	r3, r8, lsr #1
   e3506:	ea43 73cc 	orr.w	r3, r3, ip, lsl #31
   e350a:	9312      	str	r3, [sp, #72]	; 0x48
   e350c:	ea4f 035c 	mov.w	r3, ip, lsr #1
   e3510:	ea43 73c8 	orr.w	r3, r3, r8, lsl #31
   e3514:	9313      	str	r3, [sp, #76]	; 0x4c
   e3516:	ea4f 2318 	mov.w	r3, r8, lsr #8
   e351a:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
   e351e:	9314      	str	r3, [sp, #80]	; 0x50
   e3520:	ea4f 231c 	mov.w	r3, ip, lsr #8
   e3524:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
   e3528:	9315      	str	r3, [sp, #84]	; 0x54
   e352a:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
   e352e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   e3532:	4072      	eors	r2, r6
   e3534:	ea4f 16d8 	mov.w	r6, r8, lsr #7
   e3538:	ea46 664c 	orr.w	r6, r6, ip, lsl #25
   e353c:	9602      	str	r6, [sp, #8]
   e353e:	ea4f 16dc 	mov.w	r6, ip, lsr #7
   e3542:	9603      	str	r6, [sp, #12]
   e3544:	407b      	eors	r3, r7
   e3546:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   e354a:	4056      	eors	r6, r2
   e354c:	1932      	adds	r2, r6, r4
   e354e:	ea87 0703 	eor.w	r7, r7, r3
    for( i = 0; i < 16; i++ )
    {
        GET_UINT64_BE( W[i], data, i << 3 );
    }

    for( ; i < 80; i++ )
   e3552:	f100 0001 	add.w	r0, r0, #1
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
   e3556:	eb47 0305 	adc.w	r3, r7, r5
    for( i = 0; i < 16; i++ )
    {
        GET_UINT64_BE( W[i], data, i << 3 );
    }

    for( ; i < 80; i++ )
   e355a:	2850      	cmp	r0, #80	; 0x50
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
   e355c:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
   e3560:	f101 0108 	add.w	r1, r1, #8
    for( i = 0; i < 16; i++ )
    {
        GET_UINT64_BE( W[i], data, i << 3 );
    }

    for( ; i < 80; i++ )
   e3564:	d19c      	bne.n	e34a0 <mbedtls_internal_sha512_process+0xb0>
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
    }

    A = ctx->state[0];
   e3566:	e9de 3404 	ldrd	r3, r4, [lr, #16]
   e356a:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
    B = ctx->state[1];
   e356e:	e9de 3406 	ldrd	r3, r4, [lr, #24]
   e3572:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    C = ctx->state[2];
   e3576:	e9de 3408 	ldrd	r3, r4, [lr, #32]
   e357a:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
    D = ctx->state[3];
   e357e:	e9de 340a 	ldrd	r3, r4, [lr, #40]	; 0x28
   e3582:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
    E = ctx->state[4];
   e3586:	e9de 340c 	ldrd	r3, r4, [lr, #48]	; 0x30
   e358a:	e9cd 3416 	strd	r3, r4, [sp, #88]	; 0x58
    F = ctx->state[5];
   e358e:	e9de 340e 	ldrd	r3, r4, [lr, #56]	; 0x38
   e3592:	e9cd 3418 	strd	r3, r4, [sp, #96]	; 0x60
    G = ctx->state[6];
   e3596:	e9de 3410 	ldrd	r3, r4, [lr, #64]	; 0x40
   e359a:	e9cd 341a 	strd	r3, r4, [sp, #104]	; 0x68
   e359e:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
   e35a2:	e9cd 0106 	strd	r0, r1, [sp, #24]
    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
    F = ctx->state[5];
   e35a6:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
   e35aa:	e9cd 0108 	strd	r0, r1, [sp, #32]

    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
   e35ae:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   e35b2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    }

    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
   e35b6:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   e35ba:	e9cd 0100 	strd	r0, r1, [sp]
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
    }

    A = ctx->state[0];
    B = ctx->state[1];
   e35be:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];
   e35c2:	e9de 3412 	ldrd	r3, r4, [lr, #72]	; 0x48
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
    }

    A = ctx->state[0];
    B = ctx->state[1];
   e35c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
    }

    A = ctx->state[0];
   e35ca:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];
   e35ce:	e9cd 341c 	strd	r3, r4, [sp, #112]	; 0x70
   e35d2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
   e35d6:	4b04      	ldr	r3, [pc, #16]	; (e35e8 <mbedtls_internal_sha512_process+0x1f8>)
               S0(W[i - 15]) + W[i - 16];
    }

    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
   e35d8:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
    }

    A = ctx->state[0];
   e35dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
   e35e0:	aa80      	add	r2, sp, #512	; 0x200
   e35e2:	f503 7c20 	add.w	ip, r3, #640	; 0x280
   e35e6:	e001      	b.n	e35ec <mbedtls_internal_sha512_process+0x1fc>
   e35e8:	000ee760 	.word	0x000ee760
    H = ctx->state[7];
    i = 0;

    do
    {
        P( A, B, C, D, E, F, G, H, W[i], K[i] ); i++;
   e35ec:	990a      	ldr	r1, [sp, #40]	; 0x28
   e35ee:	980b      	ldr	r0, [sp, #44]	; 0x2c
   e35f0:	0b89      	lsrs	r1, r1, #14
   e35f2:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
   e35f6:	911e      	str	r1, [sp, #120]	; 0x78
   e35f8:	0b81      	lsrs	r1, r0, #14
   e35fa:	980a      	ldr	r0, [sp, #40]	; 0x28
   e35fc:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
   e3600:	911f      	str	r1, [sp, #124]	; 0x7c
   e3602:	0c81      	lsrs	r1, r0, #18
   e3604:	980b      	ldr	r0, [sp, #44]	; 0x2c
   e3606:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
   e360a:	9120      	str	r1, [sp, #128]	; 0x80
   e360c:	0c81      	lsrs	r1, r0, #18
   e360e:	980a      	ldr	r0, [sp, #40]	; 0x28
   e3610:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
   e3614:	9121      	str	r1, [sp, #132]	; 0x84
   e3616:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
   e361a:	e9dd 671e 	ldrd	r6, r7, [sp, #120]	; 0x78
   e361e:	404f      	eors	r7, r1
   e3620:	990b      	ldr	r1, [sp, #44]	; 0x2c
   e3622:	4046      	eors	r6, r0
   e3624:	980a      	ldr	r0, [sp, #40]	; 0x28
   e3626:	05c9      	lsls	r1, r1, #23
   e3628:	ea41 2150 	orr.w	r1, r1, r0, lsr #9
   e362c:	9123      	str	r1, [sp, #140]	; 0x8c
   e362e:	05c1      	lsls	r1, r0, #23
   e3630:	980b      	ldr	r0, [sp, #44]	; 0x2c
   e3632:	ea41 2150 	orr.w	r1, r1, r0, lsr #9
   e3636:	9122      	str	r1, [sp, #136]	; 0x88
   e3638:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
   e363c:	4070      	eors	r0, r6
   e363e:	4079      	eors	r1, r7
   e3640:	e953 4502 	ldrd	r4, r5, [r3, #-8]
   e3644:	4606      	mov	r6, r0
   e3646:	460f      	mov	r7, r1
   e3648:	e952 0102 	ldrd	r0, r1, [r2, #-8]
   e364c:	1900      	adds	r0, r0, r4
   e364e:	4169      	adcs	r1, r5
   e3650:	1836      	adds	r6, r6, r0
   e3652:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
   e3656:	414f      	adcs	r7, r1
   e3658:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   e365c:	4060      	eors	r0, r4
   e365e:	4069      	eors	r1, r5
   e3660:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
   e3664:	4004      	ands	r4, r0
   e3666:	400d      	ands	r5, r1
   e3668:	4620      	mov	r0, r4
   e366a:	4629      	mov	r1, r5
   e366c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
   e3670:	4044      	eors	r4, r0
   e3672:	404d      	eors	r5, r1
   e3674:	e9dd 0100 	ldrd	r0, r1, [sp]
   e3678:	1936      	adds	r6, r6, r4
   e367a:	416f      	adcs	r7, r5
   e367c:	eb18 0806 	adds.w	r8, r8, r6
   e3680:	eb49 0907 	adc.w	r9, r9, r7
   e3684:	eb10 0008 	adds.w	r0, r0, r8
   e3688:	eb41 0109 	adc.w	r1, r1, r9
   e368c:	e9cd 0100 	strd	r0, r1, [sp]
   e3690:	9904      	ldr	r1, [sp, #16]
   e3692:	9805      	ldr	r0, [sp, #20]
   e3694:	0f09      	lsrs	r1, r1, #28
   e3696:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
   e369a:	9124      	str	r1, [sp, #144]	; 0x90
   e369c:	0f01      	lsrs	r1, r0, #28
   e369e:	9804      	ldr	r0, [sp, #16]
   e36a0:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
   e36a4:	9125      	str	r1, [sp, #148]	; 0x94
   e36a6:	9905      	ldr	r1, [sp, #20]
   e36a8:	0789      	lsls	r1, r1, #30
   e36aa:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
   e36ae:	9127      	str	r1, [sp, #156]	; 0x9c
   e36b0:	0781      	lsls	r1, r0, #30
   e36b2:	9805      	ldr	r0, [sp, #20]
   e36b4:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
   e36b8:	9126      	str	r1, [sp, #152]	; 0x98
   e36ba:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
   e36be:	e9dd 4524 	ldrd	r4, r5, [sp, #144]	; 0x90
   e36c2:	404d      	eors	r5, r1
   e36c4:	9905      	ldr	r1, [sp, #20]
   e36c6:	4044      	eors	r4, r0
   e36c8:	9804      	ldr	r0, [sp, #16]
   e36ca:	0649      	lsls	r1, r1, #25
   e36cc:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
   e36d0:	9129      	str	r1, [sp, #164]	; 0xa4
   e36d2:	0641      	lsls	r1, r0, #25
   e36d4:	9805      	ldr	r0, [sp, #20]
   e36d6:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
   e36da:	9128      	str	r1, [sp, #160]	; 0xa0
   e36dc:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
   e36e0:	4060      	eors	r0, r4
   e36e2:	4069      	eors	r1, r5
   e36e4:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
   e36e8:	4604      	mov	r4, r0
   e36ea:	460d      	mov	r5, r1
   e36ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   e36f0:	4330      	orrs	r0, r6
   e36f2:	4339      	orrs	r1, r7
   e36f4:	ea00 060a 	and.w	r6, r0, sl
   e36f8:	ea01 070b 	and.w	r7, r1, fp
   e36fc:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
   e3700:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   e3704:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   e3708:	4006      	ands	r6, r0
   e370a:	400f      	ands	r7, r1
   e370c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   e3710:	4330      	orrs	r0, r6
   e3712:	1900      	adds	r0, r0, r4
   e3714:	ea41 0107 	orr.w	r1, r1, r7
   e3718:	4169      	adcs	r1, r5
   e371a:	eb18 0800 	adds.w	r8, r8, r0
   e371e:	eb49 0901 	adc.w	r9, r9, r1
        P( H, A, B, C, D, E, F, G, W[i], K[i] ); i++;
   e3722:	e9d3 4500 	ldrd	r4, r5, [r3]
   e3726:	e9d2 0100 	ldrd	r0, r1, [r2]
   e372a:	1900      	adds	r0, r0, r4
   e372c:	4169      	adcs	r1, r5
   e372e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
   e3732:	1824      	adds	r4, r4, r0
   e3734:	414d      	adcs	r5, r1
   e3736:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
   e373a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   e373e:	4070      	eors	r0, r6
   e3740:	4079      	eors	r1, r7
   e3742:	e9dd 6700 	ldrd	r6, r7, [sp]
   e3746:	4006      	ands	r6, r0
   e3748:	400f      	ands	r7, r1
   e374a:	4630      	mov	r0, r6
   e374c:	4639      	mov	r1, r7
   e374e:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
   e3752:	4046      	eors	r6, r0
   e3754:	19a0      	adds	r0, r4, r6
   e3756:	ea87 0701 	eor.w	r7, r7, r1
   e375a:	9c00      	ldr	r4, [sp, #0]
   e375c:	eb45 0107 	adc.w	r1, r5, r7
   e3760:	9d01      	ldr	r5, [sp, #4]
   e3762:	0ba4      	lsrs	r4, r4, #14
   e3764:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
   e3768:	942a      	str	r4, [sp, #168]	; 0xa8
   e376a:	0bac      	lsrs	r4, r5, #14
   e376c:	9d00      	ldr	r5, [sp, #0]
   e376e:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
   e3772:	942b      	str	r4, [sp, #172]	; 0xac
   e3774:	0cac      	lsrs	r4, r5, #18
   e3776:	9d01      	ldr	r5, [sp, #4]
   e3778:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
   e377c:	942c      	str	r4, [sp, #176]	; 0xb0
   e377e:	0cac      	lsrs	r4, r5, #18
   e3780:	9d00      	ldr	r5, [sp, #0]
   e3782:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
   e3786:	942d      	str	r4, [sp, #180]	; 0xb4
   e3788:	e9dd 452a 	ldrd	r4, r5, [sp, #168]	; 0xa8
   e378c:	e9dd 672c 	ldrd	r6, r7, [sp, #176]	; 0xb0
   e3790:	4074      	eors	r4, r6
   e3792:	9e01      	ldr	r6, [sp, #4]
   e3794:	407d      	eors	r5, r7
   e3796:	9f00      	ldr	r7, [sp, #0]
   e3798:	05f6      	lsls	r6, r6, #23
   e379a:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
   e379e:	962f      	str	r6, [sp, #188]	; 0xbc
   e37a0:	05fe      	lsls	r6, r7, #23
   e37a2:	9f01      	ldr	r7, [sp, #4]
   e37a4:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
   e37a8:	962e      	str	r6, [sp, #184]	; 0xb8
   e37aa:	e9dd 672e 	ldrd	r6, r7, [sp, #184]	; 0xb8
   e37ae:	4066      	eors	r6, r4
   e37b0:	1986      	adds	r6, r0, r6
   e37b2:	ea87 0705 	eor.w	r7, r7, r5
   e37b6:	eb41 0707 	adc.w	r7, r1, r7
   e37ba:	eb1a 0006 	adds.w	r0, sl, r6
   e37be:	eb4b 0107 	adc.w	r1, fp, r7
   e37c2:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   e37c6:	ea4f 7118 	mov.w	r1, r8, lsr #28
   e37ca:	ea41 1109 	orr.w	r1, r1, r9, lsl #4
   e37ce:	9130      	str	r1, [sp, #192]	; 0xc0
   e37d0:	ea4f 7119 	mov.w	r1, r9, lsr #28
   e37d4:	ea41 1108 	orr.w	r1, r1, r8, lsl #4
   e37d8:	9131      	str	r1, [sp, #196]	; 0xc4
   e37da:	ea4f 7189 	mov.w	r1, r9, lsl #30
   e37de:	ea41 0198 	orr.w	r1, r1, r8, lsr #2
   e37e2:	9133      	str	r1, [sp, #204]	; 0xcc
   e37e4:	ea4f 7188 	mov.w	r1, r8, lsl #30
   e37e8:	ea41 0199 	orr.w	r1, r1, r9, lsr #2
   e37ec:	9132      	str	r1, [sp, #200]	; 0xc8
   e37ee:	e9dd 0132 	ldrd	r0, r1, [sp, #200]	; 0xc8
   e37f2:	e9dd 4530 	ldrd	r4, r5, [sp, #192]	; 0xc0
   e37f6:	404d      	eors	r5, r1
   e37f8:	ea4f 6149 	mov.w	r1, r9, lsl #25
   e37fc:	ea41 11d8 	orr.w	r1, r1, r8, lsr #7
   e3800:	9135      	str	r1, [sp, #212]	; 0xd4
   e3802:	ea4f 6148 	mov.w	r1, r8, lsl #25
   e3806:	ea41 11d9 	orr.w	r1, r1, r9, lsr #7
   e380a:	9134      	str	r1, [sp, #208]	; 0xd0
   e380c:	4044      	eors	r4, r0
   e380e:	e9dd 0134 	ldrd	r0, r1, [sp, #208]	; 0xd0
   e3812:	4060      	eors	r0, r4
   e3814:	4069      	eors	r1, r5
   e3816:	4604      	mov	r4, r0
   e3818:	460d      	mov	r5, r1
   e381a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   e381e:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   e3822:	ea40 0008 	orr.w	r0, r0, r8
   e3826:	ea41 0109 	orr.w	r1, r1, r9
   e382a:	ea0a 0a00 	and.w	sl, sl, r0
   e382e:	ea0b 0b01 	and.w	fp, fp, r1
   e3832:	4650      	mov	r0, sl
   e3834:	4659      	mov	r1, fp
   e3836:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   e383a:	ea0a 0a08 	and.w	sl, sl, r8
   e383e:	ea0b 0b09 	and.w	fp, fp, r9
   e3842:	ea4a 0a00 	orr.w	sl, sl, r0
   e3846:	eb1a 0004 	adds.w	r0, sl, r4
   e384a:	ea4b 0b01 	orr.w	fp, fp, r1
   e384e:	eb4b 0105 	adc.w	r1, fp, r5
   e3852:	1984      	adds	r4, r0, r6
   e3854:	eb41 0507 	adc.w	r5, r1, r7
   e3858:	e9cd 4506 	strd	r4, r5, [sp, #24]
        P( G, H, A, B, C, D, E, F, W[i], K[i] ); i++;
   e385c:	e9d2 0102 	ldrd	r0, r1, [r2, #8]
   e3860:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
   e3864:	1900      	adds	r0, r0, r4
   e3866:	4169      	adcs	r1, r5
   e3868:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
   e386c:	1824      	adds	r4, r4, r0
   e386e:	414d      	adcs	r5, r1
   e3870:	e9dd 6700 	ldrd	r6, r7, [sp]
   e3874:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   e3878:	4070      	eors	r0, r6
   e387a:	4079      	eors	r1, r7
   e387c:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
   e3880:	4006      	ands	r6, r0
   e3882:	400f      	ands	r7, r1
   e3884:	4630      	mov	r0, r6
   e3886:	4639      	mov	r1, r7
   e3888:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
   e388c:	4046      	eors	r6, r0
   e388e:	1930      	adds	r0, r6, r4
   e3890:	ea87 0701 	eor.w	r7, r7, r1
   e3894:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   e3896:	eb47 0105 	adc.w	r1, r7, r5
   e389a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   e389c:	0ba4      	lsrs	r4, r4, #14
   e389e:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
   e38a2:	9436      	str	r4, [sp, #216]	; 0xd8
   e38a4:	0bac      	lsrs	r4, r5, #14
   e38a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   e38a8:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
   e38ac:	9437      	str	r4, [sp, #220]	; 0xdc
   e38ae:	0cac      	lsrs	r4, r5, #18
   e38b0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   e38b2:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
   e38b6:	9438      	str	r4, [sp, #224]	; 0xe0
   e38b8:	0cac      	lsrs	r4, r5, #18
   e38ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   e38bc:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
   e38c0:	9439      	str	r4, [sp, #228]	; 0xe4
   e38c2:	e9dd 6738 	ldrd	r6, r7, [sp, #224]	; 0xe0
   e38c6:	e9dd 4536 	ldrd	r4, r5, [sp, #216]	; 0xd8
   e38ca:	4074      	eors	r4, r6
   e38cc:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   e38ce:	407d      	eors	r5, r7
   e38d0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   e38d2:	05f6      	lsls	r6, r6, #23
   e38d4:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
   e38d8:	963b      	str	r6, [sp, #236]	; 0xec
   e38da:	05fe      	lsls	r6, r7, #23
   e38dc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   e38de:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
   e38e2:	963a      	str	r6, [sp, #232]	; 0xe8
   e38e4:	e9dd 673a 	ldrd	r6, r7, [sp, #232]	; 0xe8
   e38e8:	4066      	eors	r6, r4
   e38ea:	1986      	adds	r6, r0, r6
   e38ec:	ea87 0705 	eor.w	r7, r7, r5
   e38f0:	eb41 0707 	adc.w	r7, r1, r7
   e38f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   e38f8:	1980      	adds	r0, r0, r6
   e38fa:	4179      	adcs	r1, r7
   e38fc:	e9cd 0108 	strd	r0, r1, [sp, #32]
   e3900:	9906      	ldr	r1, [sp, #24]
   e3902:	9807      	ldr	r0, [sp, #28]
   e3904:	0f09      	lsrs	r1, r1, #28
   e3906:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
   e390a:	913c      	str	r1, [sp, #240]	; 0xf0
   e390c:	0f01      	lsrs	r1, r0, #28
   e390e:	9806      	ldr	r0, [sp, #24]
   e3910:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
   e3914:	913d      	str	r1, [sp, #244]	; 0xf4
   e3916:	9907      	ldr	r1, [sp, #28]
   e3918:	0789      	lsls	r1, r1, #30
   e391a:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
   e391e:	913f      	str	r1, [sp, #252]	; 0xfc
   e3920:	0781      	lsls	r1, r0, #30
   e3922:	9807      	ldr	r0, [sp, #28]
   e3924:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
   e3928:	913e      	str	r1, [sp, #248]	; 0xf8
   e392a:	e9dd 013e 	ldrd	r0, r1, [sp, #248]	; 0xf8
   e392e:	e9dd 453c 	ldrd	r4, r5, [sp, #240]	; 0xf0
   e3932:	404d      	eors	r5, r1
   e3934:	9907      	ldr	r1, [sp, #28]
   e3936:	4044      	eors	r4, r0
   e3938:	9806      	ldr	r0, [sp, #24]
   e393a:	0649      	lsls	r1, r1, #25
   e393c:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
   e3940:	9141      	str	r1, [sp, #260]	; 0x104
   e3942:	0641      	lsls	r1, r0, #25
   e3944:	9807      	ldr	r0, [sp, #28]
   e3946:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
   e394a:	9140      	str	r1, [sp, #256]	; 0x100
   e394c:	a940      	add	r1, sp, #256	; 0x100
   e394e:	e9d1 0100 	ldrd	r0, r1, [r1]
   e3952:	4060      	eors	r0, r4
   e3954:	4069      	eors	r1, r5
   e3956:	4604      	mov	r4, r0
   e3958:	460d      	mov	r5, r1
   e395a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   e395e:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   e3962:	ea40 0008 	orr.w	r0, r0, r8
   e3966:	ea41 0109 	orr.w	r1, r1, r9
   e396a:	ea0a 0a00 	and.w	sl, sl, r0
   e396e:	ea0b 0b01 	and.w	fp, fp, r1
   e3972:	4650      	mov	r0, sl
   e3974:	4659      	mov	r1, fp
   e3976:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
   e397a:	ea0a 0a08 	and.w	sl, sl, r8
   e397e:	ea0b 0b09 	and.w	fp, fp, r9
   e3982:	ea4a 0a00 	orr.w	sl, sl, r0
   e3986:	eb1a 0004 	adds.w	r0, sl, r4
   e398a:	ea4b 0b01 	orr.w	fp, fp, r1
   e398e:	eb4b 0105 	adc.w	r1, fp, r5
   e3992:	1984      	adds	r4, r0, r6
   e3994:	eb41 0507 	adc.w	r5, r1, r7
   e3998:	e9cd 4502 	strd	r4, r5, [sp, #8]
        P( F, G, H, A, B, C, D, E, W[i], K[i] ); i++;
   e399c:	e9d2 0104 	ldrd	r0, r1, [r2, #16]
   e39a0:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
   e39a4:	1900      	adds	r0, r0, r4
   e39a6:	4169      	adcs	r1, r5
   e39a8:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
   e39ac:	1824      	adds	r4, r4, r0
   e39ae:	414d      	adcs	r5, r1
   e39b0:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
   e39b4:	e9dd 0100 	ldrd	r0, r1, [sp]
   e39b8:	4046      	eors	r6, r0
   e39ba:	404f      	eors	r7, r1
   e39bc:	4630      	mov	r0, r6
   e39be:	4639      	mov	r1, r7
   e39c0:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
   e39c4:	4006      	ands	r6, r0
   e39c6:	400f      	ands	r7, r1
   e39c8:	4630      	mov	r0, r6
   e39ca:	4639      	mov	r1, r7
   e39cc:	e9dd 6700 	ldrd	r6, r7, [sp]
   e39d0:	4046      	eors	r6, r0
   e39d2:	1930      	adds	r0, r6, r4
   e39d4:	ea87 0701 	eor.w	r7, r7, r1
   e39d8:	9c08      	ldr	r4, [sp, #32]
   e39da:	eb47 0105 	adc.w	r1, r7, r5
   e39de:	9d09      	ldr	r5, [sp, #36]	; 0x24
   e39e0:	0ba4      	lsrs	r4, r4, #14
   e39e2:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
   e39e6:	9442      	str	r4, [sp, #264]	; 0x108
   e39e8:	0bac      	lsrs	r4, r5, #14
   e39ea:	9d08      	ldr	r5, [sp, #32]
   e39ec:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
   e39f0:	9443      	str	r4, [sp, #268]	; 0x10c
   e39f2:	0cac      	lsrs	r4, r5, #18
   e39f4:	9d09      	ldr	r5, [sp, #36]	; 0x24
   e39f6:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
   e39fa:	9444      	str	r4, [sp, #272]	; 0x110
   e39fc:	0cac      	lsrs	r4, r5, #18
   e39fe:	9d08      	ldr	r5, [sp, #32]
   e3a00:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
   e3a04:	9445      	str	r4, [sp, #276]	; 0x114
   e3a06:	ae44      	add	r6, sp, #272	; 0x110
   e3a08:	ac42      	add	r4, sp, #264	; 0x108
   e3a0a:	e9d6 6700 	ldrd	r6, r7, [r6]
   e3a0e:	e9d4 4500 	ldrd	r4, r5, [r4]
   e3a12:	4074      	eors	r4, r6
   e3a14:	9e09      	ldr	r6, [sp, #36]	; 0x24
   e3a16:	407d      	eors	r5, r7
   e3a18:	9f08      	ldr	r7, [sp, #32]
   e3a1a:	05f6      	lsls	r6, r6, #23
   e3a1c:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
   e3a20:	9647      	str	r6, [sp, #284]	; 0x11c
   e3a22:	05fe      	lsls	r6, r7, #23
   e3a24:	9f09      	ldr	r7, [sp, #36]	; 0x24
   e3a26:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
   e3a2a:	9646      	str	r6, [sp, #280]	; 0x118
   e3a2c:	ae46      	add	r6, sp, #280	; 0x118
   e3a2e:	e9d6 6700 	ldrd	r6, r7, [r6]
   e3a32:	4066      	eors	r6, r4
   e3a34:	1986      	adds	r6, r0, r6
   e3a36:	ea87 0705 	eor.w	r7, r7, r5
   e3a3a:	eb41 0707 	adc.w	r7, r1, r7
   e3a3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   e3a42:	1980      	adds	r0, r0, r6
   e3a44:	4179      	adcs	r1, r7
   e3a46:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   e3a4a:	9902      	ldr	r1, [sp, #8]
   e3a4c:	9803      	ldr	r0, [sp, #12]
   e3a4e:	0f09      	lsrs	r1, r1, #28
   e3a50:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
   e3a54:	9148      	str	r1, [sp, #288]	; 0x120
   e3a56:	0f01      	lsrs	r1, r0, #28
   e3a58:	9802      	ldr	r0, [sp, #8]
   e3a5a:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
   e3a5e:	9149      	str	r1, [sp, #292]	; 0x124
   e3a60:	9903      	ldr	r1, [sp, #12]
   e3a62:	0789      	lsls	r1, r1, #30
   e3a64:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
   e3a68:	914b      	str	r1, [sp, #300]	; 0x12c
   e3a6a:	0781      	lsls	r1, r0, #30
   e3a6c:	9803      	ldr	r0, [sp, #12]
   e3a6e:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
   e3a72:	914a      	str	r1, [sp, #296]	; 0x128
   e3a74:	a948      	add	r1, sp, #288	; 0x120
   e3a76:	e9d1 4500 	ldrd	r4, r5, [r1]
   e3a7a:	a94a      	add	r1, sp, #296	; 0x128
   e3a7c:	e9d1 0100 	ldrd	r0, r1, [r1]
   e3a80:	404d      	eors	r5, r1
   e3a82:	9903      	ldr	r1, [sp, #12]
   e3a84:	4044      	eors	r4, r0
   e3a86:	9802      	ldr	r0, [sp, #8]
   e3a88:	0649      	lsls	r1, r1, #25
   e3a8a:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
   e3a8e:	914d      	str	r1, [sp, #308]	; 0x134
   e3a90:	0641      	lsls	r1, r0, #25
   e3a92:	9803      	ldr	r0, [sp, #12]
   e3a94:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
   e3a98:	914c      	str	r1, [sp, #304]	; 0x130
   e3a9a:	a94c      	add	r1, sp, #304	; 0x130
   e3a9c:	e9d1 0100 	ldrd	r0, r1, [r1]
   e3aa0:	4060      	eors	r0, r4
   e3aa2:	4069      	eors	r1, r5
   e3aa4:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   e3aa8:	4604      	mov	r4, r0
   e3aaa:	460d      	mov	r5, r1
   e3aac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   e3ab0:	ea40 000a 	orr.w	r0, r0, sl
   e3ab4:	ea41 010b 	orr.w	r1, r1, fp
   e3ab8:	ea00 0a08 	and.w	sl, r0, r8
   e3abc:	ea01 0b09 	and.w	fp, r1, r9
   e3ac0:	e9cd ab04 	strd	sl, fp, [sp, #16]
   e3ac4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   e3ac8:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
   e3acc:	ea0a 0a00 	and.w	sl, sl, r0
   e3ad0:	ea0b 0b01 	and.w	fp, fp, r1
   e3ad4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   e3ad8:	ea40 000a 	orr.w	r0, r0, sl
   e3adc:	1900      	adds	r0, r0, r4
   e3ade:	ea41 010b 	orr.w	r1, r1, fp
   e3ae2:	4169      	adcs	r1, r5
   e3ae4:	1984      	adds	r4, r0, r6
   e3ae6:	eb41 0507 	adc.w	r5, r1, r7
   e3aea:	e9cd 4504 	strd	r4, r5, [sp, #16]
        P( E, F, G, H, A, B, C, D, W[i], K[i] ); i++;
   e3aee:	e9d2 0106 	ldrd	r0, r1, [r2, #24]
   e3af2:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
   e3af6:	1900      	adds	r0, r0, r4
   e3af8:	4169      	adcs	r1, r5
   e3afa:	e9dd 4500 	ldrd	r4, r5, [sp]
   e3afe:	1824      	adds	r4, r4, r0
   e3b00:	414d      	adcs	r5, r1
   e3b02:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
   e3b06:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   e3b0a:	4046      	eors	r6, r0
   e3b0c:	404f      	eors	r7, r1
   e3b0e:	4630      	mov	r0, r6
   e3b10:	4639      	mov	r1, r7
   e3b12:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
   e3b16:	4006      	ands	r6, r0
   e3b18:	400f      	ands	r7, r1
   e3b1a:	4630      	mov	r0, r6
   e3b1c:	4639      	mov	r1, r7
   e3b1e:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
   e3b22:	4046      	eors	r6, r0
   e3b24:	19a0      	adds	r0, r4, r6
   e3b26:	ea87 0701 	eor.w	r7, r7, r1
   e3b2a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   e3b2c:	eb45 0107 	adc.w	r1, r5, r7
   e3b30:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   e3b32:	0ba4      	lsrs	r4, r4, #14
   e3b34:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
   e3b38:	944e      	str	r4, [sp, #312]	; 0x138
   e3b3a:	0bac      	lsrs	r4, r5, #14
   e3b3c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   e3b3e:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
   e3b42:	944f      	str	r4, [sp, #316]	; 0x13c
   e3b44:	0cac      	lsrs	r4, r5, #18
   e3b46:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   e3b48:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
   e3b4c:	9450      	str	r4, [sp, #320]	; 0x140
   e3b4e:	0cac      	lsrs	r4, r5, #18
   e3b50:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   e3b52:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
   e3b56:	9451      	str	r4, [sp, #324]	; 0x144
   e3b58:	ae50      	add	r6, sp, #320	; 0x140
   e3b5a:	ac4e      	add	r4, sp, #312	; 0x138
   e3b5c:	e9d6 6700 	ldrd	r6, r7, [r6]
   e3b60:	e9d4 4500 	ldrd	r4, r5, [r4]
   e3b64:	4074      	eors	r4, r6
   e3b66:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   e3b68:	407d      	eors	r5, r7
   e3b6a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   e3b6c:	05f6      	lsls	r6, r6, #23
   e3b6e:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
   e3b72:	9653      	str	r6, [sp, #332]	; 0x14c
   e3b74:	05fe      	lsls	r6, r7, #23
   e3b76:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   e3b78:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
   e3b7c:	9652      	str	r6, [sp, #328]	; 0x148
   e3b7e:	ae52      	add	r6, sp, #328	; 0x148
   e3b80:	e9d6 6700 	ldrd	r6, r7, [r6]
   e3b84:	4066      	eors	r6, r4
   e3b86:	1986      	adds	r6, r0, r6
   e3b88:	ea87 0705 	eor.w	r7, r7, r5
   e3b8c:	eb41 0707 	adc.w	r7, r1, r7
   e3b90:	9904      	ldr	r1, [sp, #16]
   e3b92:	9805      	ldr	r0, [sp, #20]
   e3b94:	0f09      	lsrs	r1, r1, #28
   e3b96:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
   e3b9a:	9154      	str	r1, [sp, #336]	; 0x150
   e3b9c:	0f01      	lsrs	r1, r0, #28
   e3b9e:	9804      	ldr	r0, [sp, #16]
   e3ba0:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
   e3ba4:	9155      	str	r1, [sp, #340]	; 0x154
   e3ba6:	9905      	ldr	r1, [sp, #20]
   e3ba8:	0789      	lsls	r1, r1, #30
   e3baa:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
   e3bae:	9157      	str	r1, [sp, #348]	; 0x15c
   e3bb0:	0781      	lsls	r1, r0, #30
   e3bb2:	9805      	ldr	r0, [sp, #20]
   e3bb4:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
   e3bb8:	9156      	str	r1, [sp, #344]	; 0x158
   e3bba:	a954      	add	r1, sp, #336	; 0x150
   e3bbc:	e9d1 4500 	ldrd	r4, r5, [r1]
   e3bc0:	a956      	add	r1, sp, #344	; 0x158
   e3bc2:	e9d1 0100 	ldrd	r0, r1, [r1]
   e3bc6:	404d      	eors	r5, r1
   e3bc8:	9905      	ldr	r1, [sp, #20]
   e3bca:	4044      	eors	r4, r0
   e3bcc:	9804      	ldr	r0, [sp, #16]
   e3bce:	0649      	lsls	r1, r1, #25
   e3bd0:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
   e3bd4:	9159      	str	r1, [sp, #356]	; 0x164
   e3bd6:	0641      	lsls	r1, r0, #25
   e3bd8:	9805      	ldr	r0, [sp, #20]
   e3bda:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
   e3bde:	9158      	str	r1, [sp, #352]	; 0x160
   e3be0:	a958      	add	r1, sp, #352	; 0x160
   e3be2:	e9d1 0100 	ldrd	r0, r1, [r1]
   e3be6:	4060      	eors	r0, r4
   e3be8:	4069      	eors	r1, r5
   e3bea:	4604      	mov	r4, r0
   e3bec:	460d      	mov	r5, r1
   e3bee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   e3bf2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   e3bf6:	ea40 000a 	orr.w	r0, r0, sl
   e3bfa:	ea41 010b 	orr.w	r1, r1, fp
   e3bfe:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
   e3c02:	ea0a 0a00 	and.w	sl, sl, r0
   e3c06:	ea0b 0b01 	and.w	fp, fp, r1
   e3c0a:	e9cd ab00 	strd	sl, fp, [sp]
   e3c0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   e3c12:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   e3c16:	ea0a 0a00 	and.w	sl, sl, r0
   e3c1a:	ea0b 0b01 	and.w	fp, fp, r1
   e3c1e:	e9dd 0100 	ldrd	r0, r1, [sp]
   e3c22:	eb18 0806 	adds.w	r8, r8, r6
   e3c26:	ea40 000a 	orr.w	r0, r0, sl
   e3c2a:	eb49 0907 	adc.w	r9, r9, r7
   e3c2e:	ea41 010b 	orr.w	r1, r1, fp
   e3c32:	1824      	adds	r4, r4, r0
   e3c34:	414d      	adcs	r5, r1
   e3c36:	19a0      	adds	r0, r4, r6
   e3c38:	eb45 0107 	adc.w	r1, r5, r7
   e3c3c:	e9cd 0100 	strd	r0, r1, [sp]
        P( D, E, F, G, H, A, B, C, W[i], K[i] ); i++;
   e3c40:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
   e3c44:	e9d2 0108 	ldrd	r0, r1, [r2, #32]
   e3c48:	e9dd ab0c 	ldrd	sl, fp, [sp, #48]	; 0x30
   e3c4c:	1900      	adds	r0, r0, r4
   e3c4e:	4169      	adcs	r1, r5
   e3c50:	eb1a 0a00 	adds.w	sl, sl, r0
   e3c54:	eb4b 0b01 	adc.w	fp, fp, r1
   e3c58:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
   e3c5c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   e3c60:	4060      	eors	r0, r4
   e3c62:	4069      	eors	r1, r5
   e3c64:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
   e3c68:	ea00 0008 	and.w	r0, r0, r8
   e3c6c:	4044      	eors	r4, r0
   e3c6e:	eb14 000a 	adds.w	r0, r4, sl
   e3c72:	ea4f 3498 	mov.w	r4, r8, lsr #14
   e3c76:	ea44 4489 	orr.w	r4, r4, r9, lsl #18
   e3c7a:	945a      	str	r4, [sp, #360]	; 0x168
   e3c7c:	ea4f 3499 	mov.w	r4, r9, lsr #14
   e3c80:	ea44 4488 	orr.w	r4, r4, r8, lsl #18
   e3c84:	945b      	str	r4, [sp, #364]	; 0x16c
   e3c86:	ea4f 4498 	mov.w	r4, r8, lsr #18
   e3c8a:	ea44 3489 	orr.w	r4, r4, r9, lsl #14
   e3c8e:	945c      	str	r4, [sp, #368]	; 0x170
   e3c90:	ea4f 4499 	mov.w	r4, r9, lsr #18
   e3c94:	ea01 0109 	and.w	r1, r1, r9
   e3c98:	ea44 3488 	orr.w	r4, r4, r8, lsl #14
   e3c9c:	945d      	str	r4, [sp, #372]	; 0x174
   e3c9e:	ea85 0501 	eor.w	r5, r5, r1
   e3ca2:	ac5a      	add	r4, sp, #360	; 0x168
   e3ca4:	eb45 010b 	adc.w	r1, r5, fp
   e3ca8:	e9d4 ab00 	ldrd	sl, fp, [r4]
   e3cac:	ac5c      	add	r4, sp, #368	; 0x170
   e3cae:	e9d4 4500 	ldrd	r4, r5, [r4]
   e3cb2:	ea8a 0a04 	eor.w	sl, sl, r4
   e3cb6:	ea4f 54c9 	mov.w	r4, r9, lsl #23
   e3cba:	ea44 2458 	orr.w	r4, r4, r8, lsr #9
   e3cbe:	945f      	str	r4, [sp, #380]	; 0x17c
   e3cc0:	ea4f 54c8 	mov.w	r4, r8, lsl #23
   e3cc4:	ea44 2459 	orr.w	r4, r4, r9, lsr #9
   e3cc8:	945e      	str	r4, [sp, #376]	; 0x178
   e3cca:	ac5e      	add	r4, sp, #376	; 0x178
   e3ccc:	ea8b 0b05 	eor.w	fp, fp, r5
   e3cd0:	e9d4 4500 	ldrd	r4, r5, [r4]
   e3cd4:	ea84 040a 	eor.w	r4, r4, sl
   e3cd8:	eb14 0a00 	adds.w	sl, r4, r0
   e3cdc:	ea85 050b 	eor.w	r5, r5, fp
   e3ce0:	eb45 0b01 	adc.w	fp, r5, r1
   e3ce4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   e3ce8:	eb10 000a 	adds.w	r0, r0, sl
   e3cec:	eb41 010b 	adc.w	r1, r1, fp
   e3cf0:	e9cd 0106 	strd	r0, r1, [sp, #24]
   e3cf4:	9900      	ldr	r1, [sp, #0]
   e3cf6:	9801      	ldr	r0, [sp, #4]
   e3cf8:	0f09      	lsrs	r1, r1, #28
   e3cfa:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
   e3cfe:	9160      	str	r1, [sp, #384]	; 0x180
   e3d00:	0f01      	lsrs	r1, r0, #28
   e3d02:	9800      	ldr	r0, [sp, #0]
   e3d04:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
   e3d08:	9161      	str	r1, [sp, #388]	; 0x184
   e3d0a:	9901      	ldr	r1, [sp, #4]
   e3d0c:	0789      	lsls	r1, r1, #30
   e3d0e:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
   e3d12:	9163      	str	r1, [sp, #396]	; 0x18c
   e3d14:	0781      	lsls	r1, r0, #30
   e3d16:	9801      	ldr	r0, [sp, #4]
   e3d18:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
   e3d1c:	9162      	str	r1, [sp, #392]	; 0x188
   e3d1e:	a960      	add	r1, sp, #384	; 0x180
   e3d20:	e9d1 4500 	ldrd	r4, r5, [r1]
   e3d24:	a962      	add	r1, sp, #392	; 0x188
   e3d26:	e9d1 0100 	ldrd	r0, r1, [r1]
   e3d2a:	404d      	eors	r5, r1
   e3d2c:	9901      	ldr	r1, [sp, #4]
   e3d2e:	4044      	eors	r4, r0
   e3d30:	9800      	ldr	r0, [sp, #0]
   e3d32:	0649      	lsls	r1, r1, #25
   e3d34:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
   e3d38:	9165      	str	r1, [sp, #404]	; 0x194
   e3d3a:	0641      	lsls	r1, r0, #25
   e3d3c:	9801      	ldr	r0, [sp, #4]
   e3d3e:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
   e3d42:	9164      	str	r1, [sp, #400]	; 0x190
   e3d44:	a964      	add	r1, sp, #400	; 0x190
   e3d46:	e9d1 0100 	ldrd	r0, r1, [r1]
   e3d4a:	4060      	eors	r0, r4
   e3d4c:	4069      	eors	r1, r5
   e3d4e:	e9dd 6700 	ldrd	r6, r7, [sp]
   e3d52:	4604      	mov	r4, r0
   e3d54:	460d      	mov	r5, r1
   e3d56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   e3d5a:	4330      	orrs	r0, r6
   e3d5c:	4339      	orrs	r1, r7
   e3d5e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   e3d62:	4006      	ands	r6, r0
   e3d64:	400f      	ands	r7, r1
   e3d66:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
   e3d6a:	e9dd 0100 	ldrd	r0, r1, [sp]
   e3d6e:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
   e3d72:	4006      	ands	r6, r0
   e3d74:	400f      	ands	r7, r1
   e3d76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   e3d7a:	4330      	orrs	r0, r6
   e3d7c:	1900      	adds	r0, r0, r4
   e3d7e:	ea41 0107 	orr.w	r1, r1, r7
   e3d82:	4169      	adcs	r1, r5
   e3d84:	eb1a 0a00 	adds.w	sl, sl, r0
   e3d88:	eb4b 0b01 	adc.w	fp, fp, r1
        P( C, D, E, F, G, H, A, B, W[i], K[i] ); i++;
   e3d8c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
   e3d90:	e9d2 010a 	ldrd	r0, r1, [r2, #40]	; 0x28
   e3d94:	1900      	adds	r0, r0, r4
   e3d96:	4169      	adcs	r1, r5
   e3d98:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
   e3d9c:	1824      	adds	r4, r4, r0
   e3d9e:	414d      	adcs	r5, r1
   e3da0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   e3da4:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
   e3da8:	ea80 0008 	eor.w	r0, r0, r8
   e3dac:	ea81 0109 	eor.w	r1, r1, r9
   e3db0:	4006      	ands	r6, r0
   e3db2:	400f      	ands	r7, r1
   e3db4:	4630      	mov	r0, r6
   e3db6:	4639      	mov	r1, r7
   e3db8:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
   e3dbc:	4046      	eors	r6, r0
   e3dbe:	19a0      	adds	r0, r4, r6
   e3dc0:	ea87 0701 	eor.w	r7, r7, r1
   e3dc4:	9c06      	ldr	r4, [sp, #24]
   e3dc6:	eb45 0107 	adc.w	r1, r5, r7
   e3dca:	9d07      	ldr	r5, [sp, #28]
   e3dcc:	0ba4      	lsrs	r4, r4, #14
   e3dce:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
   e3dd2:	9466      	str	r4, [sp, #408]	; 0x198
   e3dd4:	0bac      	lsrs	r4, r5, #14
   e3dd6:	9d06      	ldr	r5, [sp, #24]
   e3dd8:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
   e3ddc:	9467      	str	r4, [sp, #412]	; 0x19c
   e3dde:	0cac      	lsrs	r4, r5, #18
   e3de0:	9d07      	ldr	r5, [sp, #28]
   e3de2:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
   e3de6:	9468      	str	r4, [sp, #416]	; 0x1a0
   e3de8:	0cac      	lsrs	r4, r5, #18
   e3dea:	9d06      	ldr	r5, [sp, #24]
   e3dec:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
   e3df0:	9469      	str	r4, [sp, #420]	; 0x1a4
   e3df2:	ae68      	add	r6, sp, #416	; 0x1a0
   e3df4:	ac66      	add	r4, sp, #408	; 0x198
   e3df6:	e9d6 6700 	ldrd	r6, r7, [r6]
   e3dfa:	e9d4 4500 	ldrd	r4, r5, [r4]
   e3dfe:	4074      	eors	r4, r6
   e3e00:	9e07      	ldr	r6, [sp, #28]
   e3e02:	407d      	eors	r5, r7
   e3e04:	9f06      	ldr	r7, [sp, #24]
   e3e06:	05f6      	lsls	r6, r6, #23
   e3e08:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
   e3e0c:	966b      	str	r6, [sp, #428]	; 0x1ac
   e3e0e:	05fe      	lsls	r6, r7, #23
   e3e10:	9f07      	ldr	r7, [sp, #28]
   e3e12:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
   e3e16:	966a      	str	r6, [sp, #424]	; 0x1a8
   e3e18:	ae6a      	add	r6, sp, #424	; 0x1a8
   e3e1a:	e9d6 6700 	ldrd	r6, r7, [r6]
   e3e1e:	4066      	eors	r6, r4
   e3e20:	1986      	adds	r6, r0, r6
   e3e22:	ea87 0705 	eor.w	r7, r7, r5
   e3e26:	eb41 0707 	adc.w	r7, r1, r7
   e3e2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   e3e2e:	1980      	adds	r0, r0, r6
   e3e30:	4179      	adcs	r1, r7
   e3e32:	e9cd 0108 	strd	r0, r1, [sp, #32]
   e3e36:	ea4f 711a 	mov.w	r1, sl, lsr #28
   e3e3a:	ea41 110b 	orr.w	r1, r1, fp, lsl #4
   e3e3e:	916c      	str	r1, [sp, #432]	; 0x1b0
   e3e40:	ea4f 711b 	mov.w	r1, fp, lsr #28
   e3e44:	ea41 110a 	orr.w	r1, r1, sl, lsl #4
   e3e48:	916d      	str	r1, [sp, #436]	; 0x1b4
   e3e4a:	ea4f 718b 	mov.w	r1, fp, lsl #30
   e3e4e:	ea41 019a 	orr.w	r1, r1, sl, lsr #2
   e3e52:	916f      	str	r1, [sp, #444]	; 0x1bc
   e3e54:	ea4f 718a 	mov.w	r1, sl, lsl #30
   e3e58:	ea41 019b 	orr.w	r1, r1, fp, lsr #2
   e3e5c:	916e      	str	r1, [sp, #440]	; 0x1b8
   e3e5e:	a96c      	add	r1, sp, #432	; 0x1b0
   e3e60:	e9d1 4500 	ldrd	r4, r5, [r1]
   e3e64:	a96e      	add	r1, sp, #440	; 0x1b8
   e3e66:	e9d1 0100 	ldrd	r0, r1, [r1]
   e3e6a:	404d      	eors	r5, r1
   e3e6c:	ea4f 614b 	mov.w	r1, fp, lsl #25
   e3e70:	ea41 11da 	orr.w	r1, r1, sl, lsr #7
   e3e74:	9171      	str	r1, [sp, #452]	; 0x1c4
   e3e76:	ea4f 614a 	mov.w	r1, sl, lsl #25
   e3e7a:	ea41 11db 	orr.w	r1, r1, fp, lsr #7
   e3e7e:	9170      	str	r1, [sp, #448]	; 0x1c0
   e3e80:	a970      	add	r1, sp, #448	; 0x1c0
   e3e82:	4044      	eors	r4, r0
   e3e84:	e9d1 0100 	ldrd	r0, r1, [r1]
   e3e88:	4060      	eors	r0, r4
   e3e8a:	4069      	eors	r1, r5
   e3e8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
   e3e90:	e9dd 0100 	ldrd	r0, r1, [sp]
   e3e94:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
   e3e98:	ea40 000a 	orr.w	r0, r0, sl
   e3e9c:	ea41 010b 	orr.w	r1, r1, fp
   e3ea0:	4004      	ands	r4, r0
   e3ea2:	400d      	ands	r5, r1
   e3ea4:	4620      	mov	r0, r4
   e3ea6:	4629      	mov	r1, r5
   e3ea8:	e9dd 4500 	ldrd	r4, r5, [sp]
   e3eac:	ea04 040a 	and.w	r4, r4, sl
   e3eb0:	ea05 050b 	and.w	r5, r5, fp
   e3eb4:	4304      	orrs	r4, r0
   e3eb6:	430d      	orrs	r5, r1
   e3eb8:	4620      	mov	r0, r4
   e3eba:	4629      	mov	r1, r5
   e3ebc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
   e3ec0:	1824      	adds	r4, r4, r0
   e3ec2:	414d      	adcs	r5, r1
   e3ec4:	19a4      	adds	r4, r4, r6
   e3ec6:	417d      	adcs	r5, r7
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
   e3ec8:	e9d2 010c 	ldrd	r0, r1, [r2, #48]	; 0x30
        P( H, A, B, C, D, E, F, G, W[i], K[i] ); i++;
        P( G, H, A, B, C, D, E, F, W[i], K[i] ); i++;
        P( F, G, H, A, B, C, D, E, W[i], K[i] ); i++;
        P( E, F, G, H, A, B, C, D, W[i], K[i] ); i++;
        P( D, E, F, G, H, A, B, C, W[i], K[i] ); i++;
        P( C, D, E, F, G, H, A, B, W[i], K[i] ); i++;
   e3ecc:	e9cd 4502 	strd	r4, r5, [sp, #8]
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
   e3ed0:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
   e3ed4:	1900      	adds	r0, r0, r4
   e3ed6:	4169      	adcs	r1, r5
   e3ed8:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
   e3edc:	1824      	adds	r4, r4, r0
   e3ede:	414d      	adcs	r5, r1
   e3ee0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   e3ee4:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
   e3ee8:	ea80 0008 	eor.w	r0, r0, r8
   e3eec:	ea81 0109 	eor.w	r1, r1, r9
   e3ef0:	4006      	ands	r6, r0
   e3ef2:	400f      	ands	r7, r1
   e3ef4:	ea86 0608 	eor.w	r6, r6, r8
   e3ef8:	19a0      	adds	r0, r4, r6
   e3efa:	ea87 0709 	eor.w	r7, r7, r9
   e3efe:	9c08      	ldr	r4, [sp, #32]
   e3f00:	eb45 0107 	adc.w	r1, r5, r7
   e3f04:	9d09      	ldr	r5, [sp, #36]	; 0x24
   e3f06:	0ba4      	lsrs	r4, r4, #14
   e3f08:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
   e3f0c:	9472      	str	r4, [sp, #456]	; 0x1c8
   e3f0e:	0bac      	lsrs	r4, r5, #14
   e3f10:	9d08      	ldr	r5, [sp, #32]
   e3f12:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
   e3f16:	9473      	str	r4, [sp, #460]	; 0x1cc
   e3f18:	0cac      	lsrs	r4, r5, #18
   e3f1a:	9d09      	ldr	r5, [sp, #36]	; 0x24
   e3f1c:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
   e3f20:	9474      	str	r4, [sp, #464]	; 0x1d0
   e3f22:	0cac      	lsrs	r4, r5, #18
   e3f24:	9d08      	ldr	r5, [sp, #32]
   e3f26:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
   e3f2a:	9475      	str	r4, [sp, #468]	; 0x1d4
   e3f2c:	ae74      	add	r6, sp, #464	; 0x1d0
   e3f2e:	ac72      	add	r4, sp, #456	; 0x1c8
   e3f30:	e9d6 6700 	ldrd	r6, r7, [r6]
   e3f34:	e9d4 4500 	ldrd	r4, r5, [r4]
   e3f38:	4074      	eors	r4, r6
   e3f3a:	9e09      	ldr	r6, [sp, #36]	; 0x24
   e3f3c:	407d      	eors	r5, r7
   e3f3e:	9f08      	ldr	r7, [sp, #32]
   e3f40:	05f6      	lsls	r6, r6, #23
   e3f42:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
   e3f46:	9677      	str	r6, [sp, #476]	; 0x1dc
   e3f48:	05fe      	lsls	r6, r7, #23
   e3f4a:	9f09      	ldr	r7, [sp, #36]	; 0x24
   e3f4c:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
   e3f50:	9676      	str	r6, [sp, #472]	; 0x1d8
   e3f52:	ae76      	add	r6, sp, #472	; 0x1d8
   e3f54:	e9d6 6700 	ldrd	r6, r7, [r6]
   e3f58:	4066      	eors	r6, r4
   e3f5a:	1986      	adds	r6, r0, r6
   e3f5c:	ea87 0705 	eor.w	r7, r7, r5
   e3f60:	eb41 0707 	adc.w	r7, r1, r7
   e3f64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   e3f68:	1980      	adds	r0, r0, r6
   e3f6a:	4179      	adcs	r1, r7
   e3f6c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   e3f70:	9902      	ldr	r1, [sp, #8]
   e3f72:	9803      	ldr	r0, [sp, #12]
   e3f74:	0f09      	lsrs	r1, r1, #28
   e3f76:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
   e3f7a:	9178      	str	r1, [sp, #480]	; 0x1e0
   e3f7c:	0f01      	lsrs	r1, r0, #28
   e3f7e:	9802      	ldr	r0, [sp, #8]
   e3f80:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
   e3f84:	9179      	str	r1, [sp, #484]	; 0x1e4
   e3f86:	9903      	ldr	r1, [sp, #12]
   e3f88:	0789      	lsls	r1, r1, #30
   e3f8a:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
   e3f8e:	917b      	str	r1, [sp, #492]	; 0x1ec
   e3f90:	0781      	lsls	r1, r0, #30
   e3f92:	9803      	ldr	r0, [sp, #12]
   e3f94:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
   e3f98:	917a      	str	r1, [sp, #488]	; 0x1e8
   e3f9a:	a978      	add	r1, sp, #480	; 0x1e0
   e3f9c:	e9d1 4500 	ldrd	r4, r5, [r1]
   e3fa0:	a97a      	add	r1, sp, #488	; 0x1e8
   e3fa2:	e9d1 0100 	ldrd	r0, r1, [r1]
   e3fa6:	404d      	eors	r5, r1
   e3fa8:	9903      	ldr	r1, [sp, #12]
   e3faa:	4044      	eors	r4, r0
   e3fac:	9802      	ldr	r0, [sp, #8]
   e3fae:	0649      	lsls	r1, r1, #25
   e3fb0:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
   e3fb4:	917d      	str	r1, [sp, #500]	; 0x1f4
   e3fb6:	0641      	lsls	r1, r0, #25
   e3fb8:	9803      	ldr	r0, [sp, #12]
   e3fba:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
   e3fbe:	917c      	str	r1, [sp, #496]	; 0x1f0
   e3fc0:	a97c      	add	r1, sp, #496	; 0x1f0
   e3fc2:	e9d1 0100 	ldrd	r0, r1, [r1]
   e3fc6:	4060      	eors	r0, r4
   e3fc8:	4069      	eors	r1, r5
   e3fca:	e9cd 0104 	strd	r0, r1, [sp, #16]
   e3fce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   e3fd2:	e9dd 4500 	ldrd	r4, r5, [sp]
   e3fd6:	ea40 000a 	orr.w	r0, r0, sl
   e3fda:	ea41 010b 	orr.w	r1, r1, fp
   e3fde:	4004      	ands	r4, r0
   e3fe0:	400d      	ands	r5, r1
   e3fe2:	4620      	mov	r0, r4
   e3fe4:	4629      	mov	r1, r5
   e3fe6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
   e3fea:	ea04 040a 	and.w	r4, r4, sl
   e3fee:	ea05 050b 	and.w	r5, r5, fp
   e3ff2:	4304      	orrs	r4, r0
   e3ff4:	430d      	orrs	r5, r1
   e3ff6:	4620      	mov	r0, r4
   e3ff8:	4629      	mov	r1, r5
   e3ffa:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
   e3ffe:	1824      	adds	r4, r4, r0
   e4000:	414d      	adcs	r5, r1
   e4002:	3340      	adds	r3, #64	; 0x40
   e4004:	19a4      	adds	r4, r4, r6
   e4006:	417d      	adcs	r5, r7
    }
    while( i < 80 );
   e4008:	459c      	cmp	ip, r3
        P( G, H, A, B, C, D, E, F, W[i], K[i] ); i++;
        P( F, G, H, A, B, C, D, E, W[i], K[i] ); i++;
        P( E, F, G, H, A, B, C, D, W[i], K[i] ); i++;
        P( D, E, F, G, H, A, B, C, W[i], K[i] ); i++;
        P( C, D, E, F, G, H, A, B, W[i], K[i] ); i++;
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
   e400a:	e9cd 4504 	strd	r4, r5, [sp, #16]
   e400e:	f102 0240 	add.w	r2, r2, #64	; 0x40
    }
    while( i < 80 );
   e4012:	f47f aaeb 	bne.w	e35ec <mbedtls_internal_sha512_process+0x1fc>

    ctx->state[0] += A;
   e4016:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   e401a:	4623      	mov	r3, r4
   e401c:	18c0      	adds	r0, r0, r3
   e401e:	4169      	adcs	r1, r5
    ctx->state[1] += B;
   e4020:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
        P( C, D, E, F, G, H, A, B, W[i], K[i] ); i++;
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
    }
    while( i < 80 );

    ctx->state[0] += A;
   e4024:	e9ce 0104 	strd	r0, r1, [lr, #16]
    ctx->state[1] += B;
   e4028:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   e402c:	18c0      	adds	r0, r0, r3
   e402e:	4161      	adcs	r1, r4
    ctx->state[2] += C;
   e4030:	e9dd 3412 	ldrd	r3, r4, [sp, #72]	; 0x48
   e4034:	eb13 030a 	adds.w	r3, r3, sl
   e4038:	eb44 040b 	adc.w	r4, r4, fp
   e403c:	469a      	mov	sl, r3
   e403e:	46a3      	mov	fp, r4
    ctx->state[3] += D;
   e4040:	e9dd 2300 	ldrd	r2, r3, [sp]
   e4044:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
   e4048:	18a4      	adds	r4, r4, r2
   e404a:	415d      	adcs	r5, r3
   e404c:	e9ce 450a 	strd	r4, r5, [lr, #40]	; 0x28
    ctx->state[4] += E;
   e4050:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   e4054:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
   e4058:	18a4      	adds	r4, r4, r2
   e405a:	415d      	adcs	r5, r3
   e405c:	e9ce 450c 	strd	r4, r5, [lr, #48]	; 0x30
    ctx->state[5] += F;
   e4060:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   e4064:	e9dd 4518 	ldrd	r4, r5, [sp, #96]	; 0x60
   e4068:	18a4      	adds	r4, r4, r2
   e406a:	415d      	adcs	r5, r3
   e406c:	e9ce 450e 	strd	r4, r5, [lr, #56]	; 0x38
    ctx->state[6] += G;
   e4070:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   e4074:	e9dd 451a 	ldrd	r4, r5, [sp, #104]	; 0x68
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
    }
    while( i < 80 );

    ctx->state[0] += A;
    ctx->state[1] += B;
   e4078:	e9ce 0106 	strd	r0, r1, [lr, #24]
    ctx->state[2] += C;
    ctx->state[3] += D;
    ctx->state[4] += E;
    ctx->state[5] += F;
    ctx->state[6] += G;
    ctx->state[7] += H;
   e407c:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
    ctx->state[4] += E;
    ctx->state[5] += F;
    ctx->state[6] += G;
   e4080:	18a4      	adds	r4, r4, r2
   e4082:	415d      	adcs	r5, r3
    ctx->state[7] += H;
   e4084:	eb10 0008 	adds.w	r0, r0, r8
   e4088:	eb41 0109 	adc.w	r1, r1, r9
   e408c:	e9ce 0112 	strd	r0, r1, [lr, #72]	; 0x48

    return( 0 );
}
   e4090:	2000      	movs	r0, #0
    }
    while( i < 80 );

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
   e4092:	e9ce ab08 	strd	sl, fp, [lr, #32]
    ctx->state[3] += D;
    ctx->state[4] += E;
    ctx->state[5] += F;
    ctx->state[6] += G;
   e4096:	e9ce 4510 	strd	r4, r5, [lr, #64]	; 0x40
    ctx->state[7] += H;

    return( 0 );
}
   e409a:	f20d 4d7c 	addw	sp, sp, #1148	; 0x47c
   e409e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e40a2:	bf00      	nop

000e40a4 <mbedtls_sha512_update_ret>:
 * SHA-512 process buffer
 */
int mbedtls_sha512_update_ret( mbedtls_sha512_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
   e40a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   e40a8:	4604      	mov	r4, r0
   e40aa:	460e      	mov	r6, r1
    unsigned int left;

    SHA512_VALIDATE_RET( ctx != NULL );
    SHA512_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
   e40ac:	4615      	mov	r5, r2
   e40ae:	2a00      	cmp	r2, #0
   e40b0:	d03d      	beq.n	e412e <mbedtls_sha512_update_ret+0x8a>
        return( 0 );

    left = (unsigned int) (ctx->total[0] & 0x7F);
   e40b2:	e9d0 2300 	ldrd	r2, r3, [r0]
    fill = 128 - left;

    ctx->total[0] += (uint64_t) ilen;
   e40b6:	f04f 0900 	mov.w	r9, #0
    SHA512_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
        return( 0 );

    left = (unsigned int) (ctx->total[0] & 0x7F);
   e40ba:	f002 007f 	and.w	r0, r2, #127	; 0x7f
    fill = 128 - left;

    ctx->total[0] += (uint64_t) ilen;
   e40be:	1952      	adds	r2, r2, r5
   e40c0:	eb43 0309 	adc.w	r3, r3, r9

    if( ctx->total[0] < (uint64_t) ilen )
   e40c4:	454b      	cmp	r3, r9
   e40c6:	bf08      	it	eq
   e40c8:	42aa      	cmpeq	r2, r5
        return( 0 );

    left = (unsigned int) (ctx->total[0] & 0x7F);
    fill = 128 - left;

    ctx->total[0] += (uint64_t) ilen;
   e40ca:	e9c4 2300 	strd	r2, r3, [r4]

    if( ctx->total[0] < (uint64_t) ilen )
   e40ce:	d206      	bcs.n	e40de <mbedtls_sha512_update_ret+0x3a>
        ctx->total[1]++;
   e40d0:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   e40d4:	3201      	adds	r2, #1
   e40d6:	f143 0300 	adc.w	r3, r3, #0
   e40da:	e9c4 2302 	strd	r2, r3, [r4, #8]

    if( left && ilen >= fill )
   e40de:	b188      	cbz	r0, e4104 <mbedtls_sha512_update_ret+0x60>

    if( ilen == 0 )
        return( 0 );

    left = (unsigned int) (ctx->total[0] & 0x7F);
    fill = 128 - left;
   e40e0:	f1c0 0780 	rsb	r7, r0, #128	; 0x80
    ctx->total[0] += (uint64_t) ilen;

    if( ctx->total[0] < (uint64_t) ilen )
        ctx->total[1]++;

    if( left && ilen >= fill )
   e40e4:	42bd      	cmp	r5, r7
   e40e6:	d31c      	bcc.n	e4122 <mbedtls_sha512_update_ret+0x7e>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
   e40e8:	f104 0850 	add.w	r8, r4, #80	; 0x50
   e40ec:	4631      	mov	r1, r6
   e40ee:	463a      	mov	r2, r7
   e40f0:	4440      	add	r0, r8
   e40f2:	f005 fce0 	bl	e9ab6 <memcpy>

        if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
   e40f6:	4641      	mov	r1, r8
   e40f8:	4620      	mov	r0, r4
   e40fa:	f7ff f979 	bl	e33f0 <mbedtls_internal_sha512_process>
   e40fe:	b9b8      	cbnz	r0, e4130 <mbedtls_sha512_update_ret+0x8c>
            return( ret );

        input += fill;
   e4100:	443e      	add	r6, r7
        ilen  -= fill;
   e4102:	1bed      	subs	r5, r5, r7
 * SHA-512 process buffer
 */
int mbedtls_sha512_update_ret( mbedtls_sha512_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
   e4104:	462f      	mov	r7, r5
   e4106:	1be9      	subs	r1, r5, r7
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 128 )
   e4108:	2f7f      	cmp	r7, #127	; 0x7f
   e410a:	4431      	add	r1, r6
   e410c:	d905      	bls.n	e411a <mbedtls_sha512_update_ret+0x76>
    {
        if( ( ret = mbedtls_internal_sha512_process( ctx, input ) ) != 0 )
   e410e:	4620      	mov	r0, r4
   e4110:	f7ff f96e 	bl	e33f0 <mbedtls_internal_sha512_process>
   e4114:	b960      	cbnz	r0, e4130 <mbedtls_sha512_update_ret+0x8c>
            return( ret );

        input += 128;
        ilen  -= 128;
   e4116:	3f80      	subs	r7, #128	; 0x80
   e4118:	e7f5      	b.n	e4106 <mbedtls_sha512_update_ret+0x62>
    }

    if( ilen > 0 )
   e411a:	b147      	cbz	r7, e412e <mbedtls_sha512_update_ret+0x8a>
   e411c:	463d      	mov	r5, r7
   e411e:	460e      	mov	r6, r1
   e4120:	2000      	movs	r0, #0
        memcpy( (void *) (ctx->buffer + left), input, ilen );
   e4122:	3450      	adds	r4, #80	; 0x50
   e4124:	462a      	mov	r2, r5
   e4126:	4631      	mov	r1, r6
   e4128:	4420      	add	r0, r4
   e412a:	f005 fcc4 	bl	e9ab6 <memcpy>

    return( 0 );
   e412e:	2000      	movs	r0, #0
}
   e4130:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000e4134 <mbedtls_sha512_finish_ret>:
/*
 * SHA-512 final digest
 */
int mbedtls_sha512_finish_ret( mbedtls_sha512_context *ctx,
                               unsigned char output[64] )
{
   e4134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    SHA512_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 16 bytes remain for the length
     */
    used = ctx->total[0] & 0x7F;
   e4136:	6803      	ldr	r3, [r0, #0]
/*
 * SHA-512 final digest
 */
int mbedtls_sha512_finish_ret( mbedtls_sha512_context *ctx,
                               unsigned char output[64] )
{
   e4138:	4604      	mov	r4, r0
    SHA512_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 16 bytes remain for the length
     */
    used = ctx->total[0] & 0x7F;
   e413a:	f003 037f 	and.w	r3, r3, #127	; 0x7f

    ctx->buffer[used++] = 0x80;
   e413e:	1c58      	adds	r0, r3, #1
   e4140:	4423      	add	r3, r4
   e4142:	2280      	movs	r2, #128	; 0x80

    if( used <= 112 )
   e4144:	2870      	cmp	r0, #112	; 0x70
/*
 * SHA-512 final digest
 */
int mbedtls_sha512_finish_ret( mbedtls_sha512_context *ctx,
                               unsigned char output[64] )
{
   e4146:	460d      	mov	r5, r1
    /*
     * Add padding: 0x80 then 0x00 until 16 bytes remain for the length
     */
    used = ctx->total[0] & 0x7F;

    ctx->buffer[used++] = 0x80;
   e4148:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
   e414c:	f104 0650 	add.w	r6, r4, #80	; 0x50

    if( used <= 112 )
   e4150:	d804      	bhi.n	e415c <mbedtls_sha512_finish_ret+0x28>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 112 - used );
   e4152:	f1c0 0270 	rsb	r2, r0, #112	; 0x70
   e4156:	2100      	movs	r1, #0
   e4158:	4430      	add	r0, r6
   e415a:	e00f      	b.n	e417c <mbedtls_sha512_finish_ret+0x48>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 128 - used );
   e415c:	f1c0 0280 	rsb	r2, r0, #128	; 0x80
   e4160:	2100      	movs	r1, #0
   e4162:	4430      	add	r0, r6
   e4164:	f005 fccd 	bl	e9b02 <memset>

        if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
   e4168:	4631      	mov	r1, r6
   e416a:	4620      	mov	r0, r4
   e416c:	f7ff f940 	bl	e33f0 <mbedtls_internal_sha512_process>
   e4170:	2800      	cmp	r0, #0
   e4172:	f040 810e 	bne.w	e4392 <mbedtls_sha512_finish_ret+0x25e>
            return( ret );

        memset( ctx->buffer, 0, 112 );
   e4176:	4601      	mov	r1, r0
   e4178:	2270      	movs	r2, #112	; 0x70
   e417a:	4630      	mov	r0, r6
   e417c:	f005 fcc1 	bl	e9b02 <memset>

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 61 )
         | ( ctx->total[1] <<  3 );
   e4180:	68e3      	ldr	r3, [r4, #12]
   e4182:	68a2      	ldr	r2, [r4, #8]
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 61 )
   e4184:	e894 4080 	ldmia.w	r4, {r7, lr}
         | ( ctx->total[1] <<  3 );
   e4188:	00d9      	lsls	r1, r3, #3
   e418a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
   e418e:	2300      	movs	r3, #0
   e4190:	4319      	orrs	r1, r3
   e4192:	00d0      	lsls	r0, r2, #3
   e4194:	ea4f 725e 	mov.w	r2, lr, lsr #29
   e4198:	4310      	orrs	r0, r2
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT64_BE( high, ctx->buffer, 112 );
   e419a:	0e0a      	lsrs	r2, r1, #24
   e419c:	f884 20c0 	strb.w	r2, [r4, #192]	; 0xc0
   e41a0:	0c0a      	lsrs	r2, r1, #16
   e41a2:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
   e41a6:	0a0a      	lsrs	r2, r1, #8
   e41a8:	f884 20c2 	strb.w	r2, [r4, #194]	; 0xc2
   e41ac:	0e02      	lsrs	r2, r0, #24
    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 61 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );
   e41ae:	ea4f 03ce 	mov.w	r3, lr, lsl #3

    PUT_UINT64_BE( high, ctx->buffer, 112 );
   e41b2:	f884 20c4 	strb.w	r2, [r4, #196]	; 0xc4
   e41b6:	0c02      	lsrs	r2, r0, #16
    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 61 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );
   e41b8:	ea43 7357 	orr.w	r3, r3, r7, lsr #29

    PUT_UINT64_BE( high, ctx->buffer, 112 );
   e41bc:	f884 20c5 	strb.w	r2, [r4, #197]	; 0xc5
   e41c0:	0a02      	lsrs	r2, r0, #8
   e41c2:	f884 20c6 	strb.w	r2, [r4, #198]	; 0xc6
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
   e41c6:	0e1a      	lsrs	r2, r3, #24
    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 61 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );
   e41c8:	00ff      	lsls	r7, r7, #3

    PUT_UINT64_BE( high, ctx->buffer, 112 );
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
   e41ca:	f884 20c8 	strb.w	r2, [r4, #200]	; 0xc8
   e41ce:	0c1a      	lsrs	r2, r3, #16
   e41d0:	f884 20c9 	strb.w	r2, [r4, #201]	; 0xc9
   e41d4:	f884 30cb 	strb.w	r3, [r4, #203]	; 0xcb
   e41d8:	0a1a      	lsrs	r2, r3, #8
   e41da:	0e3b      	lsrs	r3, r7, #24
   e41dc:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
   e41e0:	0c3b      	lsrs	r3, r7, #16
   e41e2:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
   e41e6:	0a3b      	lsrs	r3, r7, #8
     */
    high = ( ctx->total[0] >> 61 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT64_BE( high, ctx->buffer, 112 );
   e41e8:	f884 10c3 	strb.w	r1, [r4, #195]	; 0xc3
   e41ec:	f884 00c7 	strb.w	r0, [r4, #199]	; 0xc7
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
   e41f0:	f884 20ca 	strb.w	r2, [r4, #202]	; 0xca
   e41f4:	f884 30ce 	strb.w	r3, [r4, #206]	; 0xce
   e41f8:	f884 70cf 	strb.w	r7, [r4, #207]	; 0xcf

    if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
   e41fc:	4631      	mov	r1, r6
   e41fe:	4620      	mov	r0, r4
   e4200:	f7ff f8f6 	bl	e33f0 <mbedtls_internal_sha512_process>
   e4204:	2800      	cmp	r0, #0
   e4206:	f040 80c4 	bne.w	e4392 <mbedtls_sha512_finish_ret+0x25e>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT64_BE( ctx->state[0], output,  0 );
   e420a:	7de3      	ldrb	r3, [r4, #23]
   e420c:	702b      	strb	r3, [r5, #0]
   e420e:	8ae3      	ldrh	r3, [r4, #22]
   e4210:	706b      	strb	r3, [r5, #1]
   e4212:	6963      	ldr	r3, [r4, #20]
   e4214:	0a1b      	lsrs	r3, r3, #8
   e4216:	70ab      	strb	r3, [r5, #2]
   e4218:	6963      	ldr	r3, [r4, #20]
   e421a:	70eb      	strb	r3, [r5, #3]
   e421c:	7ce3      	ldrb	r3, [r4, #19]
   e421e:	712b      	strb	r3, [r5, #4]
   e4220:	8a63      	ldrh	r3, [r4, #18]
   e4222:	716b      	strb	r3, [r5, #5]
   e4224:	6923      	ldr	r3, [r4, #16]
   e4226:	0a1b      	lsrs	r3, r3, #8
   e4228:	71ab      	strb	r3, [r5, #6]
   e422a:	6923      	ldr	r3, [r4, #16]
   e422c:	71eb      	strb	r3, [r5, #7]
    PUT_UINT64_BE( ctx->state[1], output,  8 );
   e422e:	7fe3      	ldrb	r3, [r4, #31]
   e4230:	722b      	strb	r3, [r5, #8]
   e4232:	8be3      	ldrh	r3, [r4, #30]
   e4234:	726b      	strb	r3, [r5, #9]
   e4236:	69e3      	ldr	r3, [r4, #28]
   e4238:	0a1b      	lsrs	r3, r3, #8
   e423a:	72ab      	strb	r3, [r5, #10]
   e423c:	69e3      	ldr	r3, [r4, #28]
   e423e:	72eb      	strb	r3, [r5, #11]
   e4240:	7ee3      	ldrb	r3, [r4, #27]
   e4242:	732b      	strb	r3, [r5, #12]
   e4244:	8b63      	ldrh	r3, [r4, #26]
   e4246:	736b      	strb	r3, [r5, #13]
   e4248:	69a3      	ldr	r3, [r4, #24]
   e424a:	0a1b      	lsrs	r3, r3, #8
   e424c:	73ab      	strb	r3, [r5, #14]
   e424e:	69a3      	ldr	r3, [r4, #24]
   e4250:	73eb      	strb	r3, [r5, #15]
    PUT_UINT64_BE( ctx->state[2], output, 16 );
   e4252:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   e4256:	742b      	strb	r3, [r5, #16]
   e4258:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   e425a:	746b      	strb	r3, [r5, #17]
   e425c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   e425e:	0a1b      	lsrs	r3, r3, #8
   e4260:	74ab      	strb	r3, [r5, #18]
   e4262:	6a63      	ldr	r3, [r4, #36]	; 0x24
   e4264:	74eb      	strb	r3, [r5, #19]
   e4266:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   e426a:	752b      	strb	r3, [r5, #20]
   e426c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   e426e:	756b      	strb	r3, [r5, #21]
   e4270:	6a23      	ldr	r3, [r4, #32]
   e4272:	0a1b      	lsrs	r3, r3, #8
   e4274:	75ab      	strb	r3, [r5, #22]
   e4276:	6a23      	ldr	r3, [r4, #32]
   e4278:	75eb      	strb	r3, [r5, #23]
    PUT_UINT64_BE( ctx->state[3], output, 24 );
   e427a:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   e427e:	762b      	strb	r3, [r5, #24]
   e4280:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   e4282:	766b      	strb	r3, [r5, #25]
   e4284:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e4286:	0a1b      	lsrs	r3, r3, #8
   e4288:	76ab      	strb	r3, [r5, #26]
   e428a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e428c:	76eb      	strb	r3, [r5, #27]
   e428e:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   e4292:	772b      	strb	r3, [r5, #28]
   e4294:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   e4296:	776b      	strb	r3, [r5, #29]
   e4298:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   e429a:	0a1b      	lsrs	r3, r3, #8
   e429c:	77ab      	strb	r3, [r5, #30]
   e429e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   e42a0:	77eb      	strb	r3, [r5, #31]
    PUT_UINT64_BE( ctx->state[4], output, 32 );
   e42a2:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
   e42a6:	f885 3020 	strb.w	r3, [r5, #32]
   e42aa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   e42ac:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
   e42b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   e42b2:	0a1b      	lsrs	r3, r3, #8
   e42b4:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   e42b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   e42ba:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
   e42be:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
   e42c2:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
   e42c6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   e42c8:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
   e42cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
   e42ce:	0a1b      	lsrs	r3, r3, #8
   e42d0:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26
   e42d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   e42d6:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
    PUT_UINT64_BE( ctx->state[5], output, 40 );
   e42da:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
   e42de:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
   e42e2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
   e42e4:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
   e42e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   e42ea:	0a1b      	lsrs	r3, r3, #8
   e42ec:	f885 302a 	strb.w	r3, [r5, #42]	; 0x2a
   e42f0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   e42f2:	f885 302b 	strb.w	r3, [r5, #43]	; 0x2b
   e42f6:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
   e42fa:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
   e42fe:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
   e4300:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
   e4304:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   e4306:	0a1b      	lsrs	r3, r3, #8
   e4308:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
   e430c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   e430e:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f

    if( ctx->is384 == 0 )
   e4312:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
   e4316:	2b00      	cmp	r3, #0
   e4318:	d13b      	bne.n	e4392 <mbedtls_sha512_finish_ret+0x25e>
    {
        PUT_UINT64_BE( ctx->state[6], output, 48 );
   e431a:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
   e431e:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
   e4322:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
   e4326:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
   e432a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   e432c:	0a1b      	lsrs	r3, r3, #8
   e432e:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
   e4332:	6c63      	ldr	r3, [r4, #68]	; 0x44
   e4334:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
   e4338:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   e433c:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
   e4340:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   e4344:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
   e4348:	6c23      	ldr	r3, [r4, #64]	; 0x40
   e434a:	0a1b      	lsrs	r3, r3, #8
   e434c:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
   e4350:	6c23      	ldr	r3, [r4, #64]	; 0x40
   e4352:	f885 3037 	strb.w	r3, [r5, #55]	; 0x37
        PUT_UINT64_BE( ctx->state[7], output, 56 );
   e4356:	f894 304f 	ldrb.w	r3, [r4, #79]	; 0x4f
   e435a:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
   e435e:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
   e4362:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
   e4366:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   e4368:	0a1b      	lsrs	r3, r3, #8
   e436a:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
   e436e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   e4370:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
   e4374:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
   e4378:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   e437c:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
   e4380:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
   e4384:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   e4386:	0a1b      	lsrs	r3, r3, #8
   e4388:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
   e438c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   e438e:	f885 303f 	strb.w	r3, [r5, #63]	; 0x3f
    }

    return( 0 );
}
   e4392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000e4394 <mbedtls_sha512_ret>:
 */
int mbedtls_sha512_ret( const unsigned char *input,
                    size_t ilen,
                    unsigned char output[64],
                    int is384 )
{
   e4394:	b5f0      	push	{r4, r5, r6, r7, lr}
   e4396:	b0b7      	sub	sp, #220	; 0xdc
   e4398:	461c      	mov	r4, r3
   e439a:	4606      	mov	r6, r0

    SHA512_VALIDATE_RET( is384 == 0 || is384 == 1 );
    SHA512_VALIDATE_RET( ilen == 0 || input != NULL );
    SHA512_VALIDATE_RET( (unsigned char *)output != NULL );

    mbedtls_sha512_init( &ctx );
   e439c:	4668      	mov	r0, sp
 */
int mbedtls_sha512_ret( const unsigned char *input,
                    size_t ilen,
                    unsigned char output[64],
                    int is384 )
{
   e439e:	460f      	mov	r7, r1
   e43a0:	4615      	mov	r5, r2

    SHA512_VALIDATE_RET( is384 == 0 || is384 == 1 );
    SHA512_VALIDATE_RET( ilen == 0 || input != NULL );
    SHA512_VALIDATE_RET( (unsigned char *)output != NULL );

    mbedtls_sha512_init( &ctx );
   e43a2:	f7fe ff79 	bl	e3298 <mbedtls_sha512_init>

    if( ( ret = mbedtls_sha512_starts_ret( &ctx, is384 ) ) != 0 )
   e43a6:	4621      	mov	r1, r4
   e43a8:	4668      	mov	r0, sp
   e43aa:	f7fe ff85 	bl	e32b8 <mbedtls_sha512_starts_ret>
   e43ae:	4604      	mov	r4, r0
   e43b0:	b958      	cbnz	r0, e43ca <mbedtls_sha512_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha512_update_ret( &ctx, input, ilen ) ) != 0 )
   e43b2:	463a      	mov	r2, r7
   e43b4:	4631      	mov	r1, r6
   e43b6:	4668      	mov	r0, sp
   e43b8:	f7ff fe74 	bl	e40a4 <mbedtls_sha512_update_ret>
   e43bc:	4604      	mov	r4, r0
   e43be:	b920      	cbnz	r0, e43ca <mbedtls_sha512_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha512_finish_ret( &ctx, output ) ) != 0 )
   e43c0:	4629      	mov	r1, r5
   e43c2:	4668      	mov	r0, sp
   e43c4:	f7ff feb6 	bl	e4134 <mbedtls_sha512_finish_ret>
   e43c8:	4604      	mov	r4, r0
        goto exit;

exit:
    mbedtls_sha512_free( &ctx );
   e43ca:	4668      	mov	r0, sp
   e43cc:	f7fe ff68 	bl	e32a0 <mbedtls_sha512_free>

    return( ret );
}
   e43d0:	4620      	mov	r0, r4
   e43d2:	b037      	add	sp, #220	; 0xdc
   e43d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000e43d6 <mbedtls_pem_init>:
#endif

#if defined(MBEDTLS_PEM_PARSE_C)
void mbedtls_pem_init( mbedtls_pem_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_pem_context ) );
   e43d6:	2300      	movs	r3, #0
   e43d8:	6003      	str	r3, [r0, #0]
   e43da:	6043      	str	r3, [r0, #4]
   e43dc:	6083      	str	r3, [r0, #8]
   e43de:	4770      	bx	lr

000e43e0 <mbedtls_pem_read_buffer>:
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */

int mbedtls_pem_read_buffer( mbedtls_pem_context *ctx, const char *header, const char *footer,
                     const unsigned char *data, const unsigned char *pwd,
                     size_t pwdlen, size_t *use_len )
{
   e43e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   e43e4:	4689      	mov	r9, r1
   e43e6:	b085      	sub	sp, #20
   e43e8:	4690      	mov	r8, r2
   e43ea:	461f      	mov	r7, r3
    ((void) pwd);
    ((void) pwdlen);
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */

    if( ctx == NULL )
   e43ec:	4606      	mov	r6, r0
   e43ee:	2800      	cmp	r0, #0
   e43f0:	d063      	beq.n	e44ba <mbedtls_pem_read_buffer+0xda>
        return( MBEDTLS_ERR_PEM_BAD_INPUT_DATA );

    s1 = (unsigned char *) strstr( (const char *) data, header );
   e43f2:	4618      	mov	r0, r3
   e43f4:	f005 fbf3 	bl	e9bde <strstr>

    if( s1 == NULL )
   e43f8:	4604      	mov	r4, r0
   e43fa:	2800      	cmp	r0, #0
   e43fc:	d05f      	beq.n	e44be <mbedtls_pem_read_buffer+0xde>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s2 = (unsigned char *) strstr( (const char *) data, footer );
   e43fe:	4641      	mov	r1, r8
   e4400:	4638      	mov	r0, r7
   e4402:	f005 fbec 	bl	e9bde <strstr>

    if( s2 == NULL || s2 <= s1 )
   e4406:	4605      	mov	r5, r0
   e4408:	2800      	cmp	r0, #0
   e440a:	d058      	beq.n	e44be <mbedtls_pem_read_buffer+0xde>
   e440c:	4284      	cmp	r4, r0
   e440e:	d256      	bcs.n	e44be <mbedtls_pem_read_buffer+0xde>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s1 += strlen( header );
   e4410:	4648      	mov	r0, r9
   e4412:	f005 fbc7 	bl	e9ba4 <strlen>
    if( *s1 == ' '  ) s1++;
   e4416:	5c22      	ldrb	r2, [r4, r0]
    s2 = (unsigned char *) strstr( (const char *) data, footer );

    if( s2 == NULL || s2 <= s1 )
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s1 += strlen( header );
   e4418:	1823      	adds	r3, r4, r0
    if( *s1 == ' '  ) s1++;
   e441a:	2a20      	cmp	r2, #32
   e441c:	bf08      	it	eq
   e441e:	3301      	addeq	r3, #1
    if( *s1 == '\r' ) s1++;
   e4420:	781a      	ldrb	r2, [r3, #0]
   e4422:	2a0d      	cmp	r2, #13
   e4424:	bf08      	it	eq
   e4426:	3301      	addeq	r3, #1
    if( *s1 == '\n' ) s1++;
   e4428:	781a      	ldrb	r2, [r3, #0]
   e442a:	2a0a      	cmp	r2, #10
   e442c:	d147      	bne.n	e44be <mbedtls_pem_read_buffer+0xde>
    else return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    end = s2;
    end += strlen( footer );
   e442e:	4640      	mov	r0, r8
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s1 += strlen( header );
    if( *s1 == ' '  ) s1++;
    if( *s1 == '\r' ) s1++;
    if( *s1 == '\n' ) s1++;
   e4430:	1c5c      	adds	r4, r3, #1
    else return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    end = s2;
    end += strlen( footer );
   e4432:	f005 fbb7 	bl	e9ba4 <strlen>
    if( *end == ' '  ) end++;
   e4436:	5c2a      	ldrb	r2, [r5, r0]
    if( *s1 == '\r' ) s1++;
    if( *s1 == '\n' ) s1++;
    else return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    end = s2;
    end += strlen( footer );
   e4438:	182b      	adds	r3, r5, r0
    if( *end == ' '  ) end++;
   e443a:	2a20      	cmp	r2, #32
   e443c:	bf08      	it	eq
   e443e:	3301      	addeq	r3, #1
    if( *end == '\r' ) end++;
   e4440:	781a      	ldrb	r2, [r3, #0]
   e4442:	2a0d      	cmp	r2, #13
   e4444:	bf08      	it	eq
   e4446:	3301      	addeq	r3, #1
    if( *end == '\n' ) end++;
   e4448:	781a      	ldrb	r2, [r3, #0]
   e444a:	2a0a      	cmp	r2, #10
   e444c:	bf08      	it	eq
   e444e:	3301      	addeq	r3, #1
    *use_len = end - data;
   e4450:	1bdb      	subs	r3, r3, r7
   e4452:	9a0e      	ldr	r2, [sp, #56]	; 0x38

    enc = 0;

    if( s2 - s1 >= 22 && memcmp( s1, "Proc-Type: 4,ENCRYPTED", 22 ) == 0 )
   e4454:	1b2f      	subs	r7, r5, r4
   e4456:	2f15      	cmp	r7, #21
    end = s2;
    end += strlen( footer );
    if( *end == ' '  ) end++;
    if( *end == '\r' ) end++;
    if( *end == '\n' ) end++;
    *use_len = end - data;
   e4458:	6013      	str	r3, [r2, #0]

    enc = 0;

    if( s2 - s1 >= 22 && memcmp( s1, "Proc-Type: 4,ENCRYPTED", 22 ) == 0 )
   e445a:	dd05      	ble.n	e4468 <mbedtls_pem_read_buffer+0x88>
   e445c:	2216      	movs	r2, #22
   e445e:	491e      	ldr	r1, [pc, #120]	; (e44d8 <mbedtls_pem_read_buffer+0xf8>)
   e4460:	4620      	mov	r0, r4
   e4462:	f005 fb19 	bl	e9a98 <memcmp>
   e4466:	b360      	cbz	r0, e44c2 <mbedtls_pem_read_buffer+0xe2>
        return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
    }

    if( s1 >= s2 )
   e4468:	42a5      	cmp	r5, r4
   e446a:	d92c      	bls.n	e44c6 <mbedtls_pem_read_buffer+0xe6>
        return( MBEDTLS_ERR_PEM_INVALID_DATA );

    ret = mbedtls_base64_decode( NULL, 0, &len, s1, s2 - s1 );
   e446c:	2100      	movs	r1, #0
   e446e:	9700      	str	r7, [sp, #0]
   e4470:	4623      	mov	r3, r4
   e4472:	aa03      	add	r2, sp, #12
   e4474:	4608      	mov	r0, r1
   e4476:	f7f8 fccd 	bl	dce14 <mbedtls_base64_decode>

    if( ret == MBEDTLS_ERR_BASE64_INVALID_CHARACTER )
   e447a:	302c      	adds	r0, #44	; 0x2c
   e447c:	d025      	beq.n	e44ca <mbedtls_pem_read_buffer+0xea>
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );

    if( ( buf = (unsigned char *)mbedtls_calloc( 1, len ) ) == NULL )
   e447e:	f8dd 800c 	ldr.w	r8, [sp, #12]
   e4482:	2001      	movs	r0, #1
   e4484:	4641      	mov	r1, r8
   e4486:	f005 f9f5 	bl	e9874 <calloc>
   e448a:	4605      	mov	r5, r0
   e448c:	b1f8      	cbz	r0, e44ce <mbedtls_pem_read_buffer+0xee>
        return( MBEDTLS_ERR_PEM_ALLOC_FAILED );

    if( ( ret = mbedtls_base64_decode( buf, len, &len, s1, s2 - s1 ) ) != 0 )
   e448e:	4623      	mov	r3, r4
   e4490:	9700      	str	r7, [sp, #0]
   e4492:	aa03      	add	r2, sp, #12
   e4494:	4641      	mov	r1, r8
   e4496:	f7f8 fcbd 	bl	dce14 <mbedtls_base64_decode>
   e449a:	4604      	mov	r4, r0
   e449c:	b148      	cbz	r0, e44b2 <mbedtls_pem_read_buffer+0xd2>
    {
        mbedtls_platform_zeroize( buf, len );
   e449e:	9903      	ldr	r1, [sp, #12]
   e44a0:	4628      	mov	r0, r5
   e44a2:	f7f6 feab 	bl	db1fc <mbedtls_platform_zeroize>
        mbedtls_free( buf );
   e44a6:	4628      	mov	r0, r5
   e44a8:	f001 fe0c 	bl	e60c4 <free>
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );
   e44ac:	f5a4 5088 	sub.w	r0, r4, #4352	; 0x1100
   e44b0:	e00e      	b.n	e44d0 <mbedtls_pem_read_buffer+0xf0>
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
    }

    ctx->buf = buf;
    ctx->buflen = len;
   e44b2:	9b03      	ldr	r3, [sp, #12]
        return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
    }

    ctx->buf = buf;
   e44b4:	6035      	str	r5, [r6, #0]
    ctx->buflen = len;
   e44b6:	6073      	str	r3, [r6, #4]

    return( 0 );
   e44b8:	e00a      	b.n	e44d0 <mbedtls_pem_read_buffer+0xf0>
    ((void) pwdlen);
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */

    if( ctx == NULL )
        return( MBEDTLS_ERR_PEM_BAD_INPUT_DATA );
   e44ba:	4808      	ldr	r0, [pc, #32]	; (e44dc <mbedtls_pem_read_buffer+0xfc>)
   e44bc:	e008      	b.n	e44d0 <mbedtls_pem_read_buffer+0xf0>

    s1 = (unsigned char *) strstr( (const char *) data, header );

    if( s1 == NULL )
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );
   e44be:	4808      	ldr	r0, [pc, #32]	; (e44e0 <mbedtls_pem_read_buffer+0x100>)
   e44c0:	e006      	b.n	e44d0 <mbedtls_pem_read_buffer+0xf0>

        if( *s1 == '\r' ) s1++;
        if( *s1 == '\n' ) s1++;
        else return( MBEDTLS_ERR_PEM_INVALID_DATA );
#else
        return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );
   e44c2:	4808      	ldr	r0, [pc, #32]	; (e44e4 <mbedtls_pem_read_buffer+0x104>)
   e44c4:	e004      	b.n	e44d0 <mbedtls_pem_read_buffer+0xf0>
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
    }

    if( s1 >= s2 )
        return( MBEDTLS_ERR_PEM_INVALID_DATA );
   e44c6:	4808      	ldr	r0, [pc, #32]	; (e44e8 <mbedtls_pem_read_buffer+0x108>)
   e44c8:	e002      	b.n	e44d0 <mbedtls_pem_read_buffer+0xf0>

    ret = mbedtls_base64_decode( NULL, 0, &len, s1, s2 - s1 );

    if( ret == MBEDTLS_ERR_BASE64_INVALID_CHARACTER )
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );
   e44ca:	4808      	ldr	r0, [pc, #32]	; (e44ec <mbedtls_pem_read_buffer+0x10c>)
   e44cc:	e000      	b.n	e44d0 <mbedtls_pem_read_buffer+0xf0>

    if( ( buf = (unsigned char *)mbedtls_calloc( 1, len ) ) == NULL )
        return( MBEDTLS_ERR_PEM_ALLOC_FAILED );
   e44ce:	4808      	ldr	r0, [pc, #32]	; (e44f0 <mbedtls_pem_read_buffer+0x110>)

    ctx->buf = buf;
    ctx->buflen = len;

    return( 0 );
}
   e44d0:	b005      	add	sp, #20
   e44d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   e44d6:	bf00      	nop
   e44d8:	000ee9d8 	.word	0x000ee9d8
   e44dc:	ffffeb80 	.word	0xffffeb80
   e44e0:	ffffef80 	.word	0xffffef80
   e44e4:	ffffec00 	.word	0xffffec00
   e44e8:	ffffef00 	.word	0xffffef00
   e44ec:	ffffeed4 	.word	0xffffeed4
   e44f0:	ffffee80 	.word	0xffffee80

000e44f4 <mbedtls_pem_free>:

void mbedtls_pem_free( mbedtls_pem_context *ctx )
{
   e44f4:	b510      	push	{r4, lr}
   e44f6:	4604      	mov	r4, r0
    if ( ctx->buf != NULL )
   e44f8:	6800      	ldr	r0, [r0, #0]
   e44fa:	b128      	cbz	r0, e4508 <mbedtls_pem_free+0x14>
    {
        mbedtls_platform_zeroize( ctx->buf, ctx->buflen );
   e44fc:	6861      	ldr	r1, [r4, #4]
   e44fe:	f7f6 fe7d 	bl	db1fc <mbedtls_platform_zeroize>
        mbedtls_free( ctx->buf );
   e4502:	6820      	ldr	r0, [r4, #0]
   e4504:	f001 fdde 	bl	e60c4 <free>
    }
    mbedtls_free( ctx->info );
   e4508:	68a0      	ldr	r0, [r4, #8]
   e450a:	f001 fddb 	bl	e60c4 <free>

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_pem_context ) );
   e450e:	4620      	mov	r0, r4
   e4510:	210c      	movs	r1, #12
}
   e4512:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mbedtls_platform_zeroize( ctx->buf, ctx->buflen );
        mbedtls_free( ctx->buf );
    }
    mbedtls_free( ctx->info );

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_pem_context ) );
   e4516:	f7f6 be71 	b.w	db1fc <mbedtls_platform_zeroize>
	...

000e451c <mbedtls_ssl_ciphersuite_from_id>:
    return( NULL );
}

const mbedtls_ssl_ciphersuite_t *mbedtls_ssl_ciphersuite_from_id( int ciphersuite )
{
    const mbedtls_ssl_ciphersuite_t *cur = ciphersuite_definitions;
   e451c:	4b05      	ldr	r3, [pc, #20]	; (e4534 <mbedtls_ssl_ciphersuite_from_id+0x18>)

    while( cur->id != 0 )
   e451e:	681a      	ldr	r2, [r3, #0]
   e4520:	b11a      	cbz	r2, e452a <mbedtls_ssl_ciphersuite_from_id+0xe>
    {
        if( cur->id == ciphersuite )
   e4522:	4282      	cmp	r2, r0
   e4524:	d003      	beq.n	e452e <mbedtls_ssl_ciphersuite_from_id+0x12>
            return( cur );

        cur++;
   e4526:	3320      	adds	r3, #32

const mbedtls_ssl_ciphersuite_t *mbedtls_ssl_ciphersuite_from_id( int ciphersuite )
{
    const mbedtls_ssl_ciphersuite_t *cur = ciphersuite_definitions;

    while( cur->id != 0 )
   e4528:	e7f9      	b.n	e451e <mbedtls_ssl_ciphersuite_from_id+0x2>
            return( cur );

        cur++;
    }

    return( NULL );
   e452a:	4610      	mov	r0, r2
   e452c:	4770      	bx	lr
   e452e:	4618      	mov	r0, r3
}
   e4530:	4770      	bx	lr
   e4532:	bf00      	nop
   e4534:	000eeb08 	.word	0x000eeb08

000e4538 <mbedtls_ssl_list_ciphersuites>:

    return( 0 );
}

const int *mbedtls_ssl_list_ciphersuites( void )
{
   e4538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /*
     * On initial call filter out all ciphersuites not supported by current
     * build based on presence in the ciphersuite_definitions.
     */
    if( supported_init == 0 )
   e453a:	4b0f      	ldr	r3, [pc, #60]	; (e4578 <mbedtls_ssl_list_ciphersuites+0x40>)
   e453c:	681a      	ldr	r2, [r3, #0]
   e453e:	461c      	mov	r4, r3
   e4540:	b9ba      	cbnz	r2, e4572 <mbedtls_ssl_list_ciphersuites+0x3a>
   e4542:	490e      	ldr	r1, [pc, #56]	; (e457c <mbedtls_ssl_list_ciphersuites+0x44>)
   e4544:	4e0e      	ldr	r6, [pc, #56]	; (e4580 <mbedtls_ssl_list_ciphersuites+0x48>)
    {
        const int *p;
        int *q;

        for( p = ciphersuite_preference, q = supported_ciphersuites;
             *p != 0 && q < supported_ciphersuites + MAX_CIPHERSUITES - 1;
   e4546:	f101 0720 	add.w	r7, r1, #32
   e454a:	f856 5f04 	ldr.w	r5, [r6, #4]!
   e454e:	b165      	cbz	r5, e456a <mbedtls_ssl_list_ciphersuites+0x32>
   e4550:	42b9      	cmp	r1, r7
   e4552:	d20a      	bcs.n	e456a <mbedtls_ssl_list_ciphersuites+0x32>
             p++ )
        {
            const mbedtls_ssl_ciphersuite_t *cs_info;
            if( ( cs_info = mbedtls_ssl_ciphersuite_from_id( *p ) ) != NULL &&
   e4554:	4628      	mov	r0, r5
   e4556:	f7ff ffe1 	bl	e451c <mbedtls_ssl_ciphersuite_from_id>
   e455a:	2800      	cmp	r0, #0
   e455c:	d0f5      	beq.n	e454a <mbedtls_ssl_list_ciphersuites+0x12>
   e455e:	7a03      	ldrb	r3, [r0, #8]
   e4560:	2b2a      	cmp	r3, #42	; 0x2a
   e4562:	d0f2      	beq.n	e454a <mbedtls_ssl_list_ciphersuites+0x12>
                !ciphersuite_is_removed( cs_info ) )
            {
                *(q++) = *p;
   e4564:	600d      	str	r5, [r1, #0]
   e4566:	3104      	adds	r1, #4
    if( supported_init == 0 )
    {
        const int *p;
        int *q;

        for( p = ciphersuite_preference, q = supported_ciphersuites;
   e4568:	e7ef      	b.n	e454a <mbedtls_ssl_list_ciphersuites+0x12>
                !ciphersuite_is_removed( cs_info ) )
            {
                *(q++) = *p;
            }
        }
        *q = 0;
   e456a:	2300      	movs	r3, #0
   e456c:	600b      	str	r3, [r1, #0]

        supported_init = 1;
   e456e:	2301      	movs	r3, #1
   e4570:	6023      	str	r3, [r4, #0]
    }

    return( supported_ciphersuites );
}
   e4572:	4802      	ldr	r0, [pc, #8]	; (e457c <mbedtls_ssl_list_ciphersuites+0x44>)
   e4574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   e4576:	bf00      	nop
   e4578:	2003e464 	.word	0x2003e464
   e457c:	2003e468 	.word	0x2003e468
   e4580:	000eec24 	.word	0x000eec24

000e4584 <mbedtls_ssl_get_ciphersuite_sig_pk_alg>:
}

#if defined(MBEDTLS_PK_C)
mbedtls_pk_type_t mbedtls_ssl_get_ciphersuite_sig_pk_alg( const mbedtls_ssl_ciphersuite_t *info )
{
    switch( info->key_exchange )
   e4584:	7a83      	ldrb	r3, [r0, #10]
   e4586:	2b0a      	cmp	r3, #10
   e4588:	d80e      	bhi.n	e45a8 <mbedtls_ssl_get_ciphersuite_sig_pk_alg+0x24>
   e458a:	2001      	movs	r0, #1
   e458c:	fa00 f303 	lsl.w	r3, r0, r3
   e4590:	f013 0f8e 	tst.w	r3, #142	; 0x8e
   e4594:	d10b      	bne.n	e45ae <mbedtls_ssl_get_ciphersuite_sig_pk_alg+0x2a>
   e4596:	f413 6fc0 	tst.w	r3, #1536	; 0x600
   e459a:	d107      	bne.n	e45ac <mbedtls_ssl_get_ciphersuite_sig_pk_alg+0x28>
   e459c:	f013 0f10 	tst.w	r3, #16
        case MBEDTLS_KEY_EXCHANGE_ECDHE_RSA:
        case MBEDTLS_KEY_EXCHANGE_RSA_PSK:
            return( MBEDTLS_PK_RSA );

        case MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA:
            return( MBEDTLS_PK_ECDSA );
   e45a0:	bf0c      	ite	eq
   e45a2:	2000      	moveq	r0, #0
   e45a4:	2004      	movne	r0, #4
   e45a6:	4770      	bx	lr
        case MBEDTLS_KEY_EXCHANGE_ECDH_RSA:
        case MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA:
            return( MBEDTLS_PK_ECKEY );

        default:
            return( MBEDTLS_PK_NONE );
   e45a8:	2000      	movs	r0, #0
   e45aa:	4770      	bx	lr
        case MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA:
            return( MBEDTLS_PK_ECDSA );

        case MBEDTLS_KEY_EXCHANGE_ECDH_RSA:
        case MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA:
            return( MBEDTLS_PK_ECKEY );
   e45ac:	2002      	movs	r0, #2

        default:
            return( MBEDTLS_PK_NONE );
    }
}
   e45ae:	4770      	bx	lr

000e45b0 <mbedtls_ssl_ciphersuite_uses_ec>:

#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C) || \
    defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
int mbedtls_ssl_ciphersuite_uses_ec( const mbedtls_ssl_ciphersuite_t *info )
{
    switch( info->key_exchange )
   e45b0:	7a82      	ldrb	r2, [r0, #10]
   e45b2:	2a0b      	cmp	r2, #11
   e45b4:	d808      	bhi.n	e45c8 <mbedtls_ssl_ciphersuite_uses_ec+0x18>
        case MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA:
        case MBEDTLS_KEY_EXCHANGE_ECDHE_PSK:
        case MBEDTLS_KEY_EXCHANGE_ECDH_RSA:
        case MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA:
        case MBEDTLS_KEY_EXCHANGE_ECJPAKE:
            return( 1 );
   e45b6:	2301      	movs	r3, #1
   e45b8:	4093      	lsls	r3, r2
   e45ba:	f640 7018 	movw	r0, #3864	; 0xf18
   e45be:	4018      	ands	r0, r3
   e45c0:	3000      	adds	r0, #0
   e45c2:	bf18      	it	ne
   e45c4:	2001      	movne	r0, #1
   e45c6:	4770      	bx	lr

        default:
            return( 0 );
   e45c8:	2000      	movs	r0, #0
    }
}
   e45ca:	4770      	bx	lr

000e45cc <mbedtls_ssl_ciphersuite_uses_psk>:
#endif /* MBEDTLS_ECDH_C || MBEDTLS_ECDSA_C || MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED*/

#if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)
int mbedtls_ssl_ciphersuite_uses_psk( const mbedtls_ssl_ciphersuite_t *info )
{
    switch( info->key_exchange )
   e45cc:	7a80      	ldrb	r0, [r0, #10]
   e45ce:	3805      	subs	r0, #5
            return( 1 );

        default:
            return( 0 );
    }
}
   e45d0:	2803      	cmp	r0, #3
   e45d2:	bf8c      	ite	hi
   e45d4:	2000      	movhi	r0, #0
   e45d6:	2001      	movls	r0, #1
   e45d8:	4770      	bx	lr
	...

000e45dc <mbedtls_rsa_deduce_primes>:
 *
 */
int mbedtls_rsa_deduce_primes( mbedtls_mpi const *N,
                     mbedtls_mpi const *E, mbedtls_mpi const *D,
                     mbedtls_mpi *P, mbedtls_mpi *Q )
{
   e45dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e45e0:	b096      	sub	sp, #88	; 0x58
   e45e2:	461f      	mov	r7, r3
          61,   67,   71,   73,   79,   83,   89,   97,
         101,  103,  107,  109,  113,  127,  131,  137,
         139,  149,  151,  157,  163,  167,  173,  179,
         181,  191,  193,  197,  199,  211,  223,  227,
         229,  233,  239,  241,  251
    };
   e45e4:	4b7a      	ldr	r3, [pc, #488]	; (e47d0 <mbedtls_rsa_deduce_primes+0x1f4>)
 *
 */
int mbedtls_rsa_deduce_primes( mbedtls_mpi const *N,
                     mbedtls_mpi const *E, mbedtls_mpi const *D,
                     mbedtls_mpi *P, mbedtls_mpi *Q )
{
   e45e6:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
   e45ea:	4615      	mov	r5, r2
   e45ec:	4606      	mov	r6, r0
   e45ee:	4688      	mov	r8, r1
          61,   67,   71,   73,   79,   83,   89,   97,
         101,  103,  107,  109,  113,  127,  131,  137,
         139,  149,  151,  157,  163,  167,  173,  179,
         181,  191,  193,  197,  199,  211,  223,  227,
         229,  233,  239,  241,  251
    };
   e45f0:	aa08      	add	r2, sp, #32
   e45f2:	f103 0e30 	add.w	lr, r3, #48	; 0x30
   e45f6:	6818      	ldr	r0, [r3, #0]
   e45f8:	6859      	ldr	r1, [r3, #4]
   e45fa:	4614      	mov	r4, r2
   e45fc:	c403      	stmia	r4!, {r0, r1}
   e45fe:	3308      	adds	r3, #8
   e4600:	4573      	cmp	r3, lr
   e4602:	4622      	mov	r2, r4
   e4604:	d1f7      	bne.n	e45f6 <mbedtls_rsa_deduce_primes+0x1a>
   e4606:	6818      	ldr	r0, [r3, #0]
   e4608:	889b      	ldrh	r3, [r3, #4]
   e460a:	6020      	str	r0, [r4, #0]
   e460c:	80a3      	strh	r3, [r4, #4]

    const size_t num_primes = sizeof( primes ) / sizeof( *primes );

    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
   e460e:	2f00      	cmp	r7, #0
   e4610:	f000 80b8 	beq.w	e4784 <mbedtls_rsa_deduce_primes+0x1a8>
   e4614:	f1b9 0f00 	cmp.w	r9, #0
   e4618:	f000 80b4 	beq.w	e4784 <mbedtls_rsa_deduce_primes+0x1a8>
   e461c:	68bb      	ldr	r3, [r7, #8]
   e461e:	2b00      	cmp	r3, #0
   e4620:	f040 80b0 	bne.w	e4784 <mbedtls_rsa_deduce_primes+0x1a8>
   e4624:	f8d9 1008 	ldr.w	r1, [r9, #8]
   e4628:	2900      	cmp	r1, #0
   e462a:	f040 80ab 	bne.w	e4784 <mbedtls_rsa_deduce_primes+0x1a8>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
   e462e:	4630      	mov	r0, r6
   e4630:	f7fc fea1 	bl	e1376 <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
   e4634:	2800      	cmp	r0, #0
   e4636:	f340 80a5 	ble.w	e4784 <mbedtls_rsa_deduce_primes+0x1a8>

    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
   e463a:	2101      	movs	r1, #1
   e463c:	4628      	mov	r0, r5
   e463e:	f7fc fe9a 	bl	e1376 <mbedtls_mpi_cmp_int>
    const size_t num_primes = sizeof( primes ) / sizeof( *primes );

    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
   e4642:	2800      	cmp	r0, #0
   e4644:	f340 809e 	ble.w	e4784 <mbedtls_rsa_deduce_primes+0x1a8>
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
   e4648:	4631      	mov	r1, r6
   e464a:	4628      	mov	r0, r5
   e464c:	f7fc fe4e 	bl	e12ec <mbedtls_mpi_cmp_mpi>

    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
   e4650:	2800      	cmp	r0, #0
   e4652:	f280 8097 	bge.w	e4784 <mbedtls_rsa_deduce_primes+0x1a8>
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
   e4656:	2101      	movs	r1, #1
   e4658:	4640      	mov	r0, r8
   e465a:	f7fc fe8c 	bl	e1376 <mbedtls_mpi_cmp_int>
    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
   e465e:	2800      	cmp	r0, #0
   e4660:	f340 8090 	ble.w	e4784 <mbedtls_rsa_deduce_primes+0x1a8>
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( E, N ) >= 0 )
   e4664:	4631      	mov	r1, r6
   e4666:	4640      	mov	r0, r8
   e4668:	f7fc fe40 	bl	e12ec <mbedtls_mpi_cmp_mpi>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
   e466c:	2800      	cmp	r0, #0
   e466e:	f280 8089 	bge.w	e4784 <mbedtls_rsa_deduce_primes+0x1a8>

    /*
     * Initializations and temporary changes
     */

    mbedtls_mpi_init( &K );
   e4672:	a805      	add	r0, sp, #20
   e4674:	f7fc fb53 	bl	e0d1e <mbedtls_mpi_init>
    mbedtls_mpi_init( &T );
   e4678:	a802      	add	r0, sp, #8
   e467a:	f7fc fb50 	bl	e0d1e <mbedtls_mpi_init>

    /* T := DE - 1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, D,  E ) );
   e467e:	4642      	mov	r2, r8
   e4680:	4629      	mov	r1, r5
   e4682:	a802      	add	r0, sp, #8
   e4684:	f7fc ff96 	bl	e15b4 <mbedtls_mpi_mul_mpi>
   e4688:	4604      	mov	r4, r0
   e468a:	2800      	cmp	r0, #0
   e468c:	d172      	bne.n	e4774 <mbedtls_rsa_deduce_primes+0x198>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &T, &T, 1 ) );
   e468e:	a902      	add	r1, sp, #8
   e4690:	2201      	movs	r2, #1
   e4692:	4608      	mov	r0, r1
   e4694:	f7fc ff78 	bl	e1588 <mbedtls_mpi_sub_int>
   e4698:	4604      	mov	r4, r0
   e469a:	2800      	cmp	r0, #0
   e469c:	d16a      	bne.n	e4774 <mbedtls_rsa_deduce_primes+0x198>

    if( ( order = (uint16_t) mbedtls_mpi_lsb( &T ) ) == 0 )
   e469e:	a802      	add	r0, sp, #8
   e46a0:	f7fc fc4b 	bl	e0f3a <mbedtls_mpi_lsb>
   e46a4:	fa1f fa80 	uxth.w	sl, r0
   e46a8:	f1ba 0f00 	cmp.w	sl, #0
   e46ac:	d102      	bne.n	e46b4 <mbedtls_rsa_deduce_primes+0xd8>
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
   e46ae:	f06f 0403 	mvn.w	r4, #3
   e46b2:	e05f      	b.n	e4774 <mbedtls_rsa_deduce_primes+0x198>
        goto cleanup;
    }

    /* After this operation, T holds the largest odd divisor of DE - 1. */
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &T, order ) );
   e46b4:	4651      	mov	r1, sl
   e46b6:	a802      	add	r0, sp, #8
   e46b8:	f7fc fd39 	bl	e112e <mbedtls_mpi_shift_r>
   e46bc:	4604      	mov	r4, r0
   e46be:	2800      	cmp	r0, #0
   e46c0:	d158      	bne.n	e4774 <mbedtls_rsa_deduce_primes+0x198>
     * Actual work
     */

    /* Skip trying 2 if N == 1 mod 8 */
    attempt = 0;
    if( N->p[0] % 8 == 1 )
   e46c2:	68b3      	ldr	r3, [r6, #8]
        attempt = 1;
   e46c4:	681d      	ldr	r5, [r3, #0]
   e46c6:	f005 0507 	and.w	r5, r5, #7
   e46ca:	1e6b      	subs	r3, r5, #1
   e46cc:	425d      	negs	r5, r3
   e46ce:	415d      	adcs	r5, r3

    for( ; attempt < num_primes; ++attempt )
    {
        mbedtls_mpi_lset( &K, primes[attempt] );
   e46d0:	ab16      	add	r3, sp, #88	; 0x58
   e46d2:	442b      	add	r3, r5
   e46d4:	a805      	add	r0, sp, #20
   e46d6:	f813 1c38 	ldrb.w	r1, [r3, #-56]
   e46da:	f7fc fc01 	bl	e0ee0 <mbedtls_mpi_lset>

        /* Check if gcd(K,N) = 1 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );
   e46de:	4632      	mov	r2, r6
   e46e0:	a905      	add	r1, sp, #20
   e46e2:	4638      	mov	r0, r7
   e46e4:	f7fd fbf3 	bl	e1ece <mbedtls_mpi_gcd>
   e46e8:	4604      	mov	r4, r0
   e46ea:	2800      	cmp	r0, #0
   e46ec:	d142      	bne.n	e4774 <mbedtls_rsa_deduce_primes+0x198>
        if( mbedtls_mpi_cmp_int( P, 1 ) != 0 )
   e46ee:	2101      	movs	r1, #1
   e46f0:	4638      	mov	r0, r7
   e46f2:	f7fc fe40 	bl	e1376 <mbedtls_mpi_cmp_int>
   e46f6:	b120      	cbz	r0, e4702 <mbedtls_rsa_deduce_primes+0x126>
    /* Skip trying 2 if N == 1 mod 8 */
    attempt = 0;
    if( N->p[0] % 8 == 1 )
        attempt = 1;

    for( ; attempt < num_primes; ++attempt )
   e46f8:	3501      	adds	r5, #1
   e46fa:	b2ad      	uxth	r5, r5
   e46fc:	2d36      	cmp	r5, #54	; 0x36
   e46fe:	d1e7      	bne.n	e46d0 <mbedtls_rsa_deduce_primes+0xf4>
   e4700:	e7d5      	b.n	e46ae <mbedtls_rsa_deduce_primes+0xd2>
        if( mbedtls_mpi_cmp_int( P, 1 ) != 0 )
            continue;

        /* Go through K^T + 1, K^(2T) + 1, K^(4T) + 1, ...
         * and check whether they have nontrivial GCD with N. */
        MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &K, &K, &T, N,
   e4702:	a905      	add	r1, sp, #20
   e4704:	f8cd 9000 	str.w	r9, [sp]
   e4708:	4633      	mov	r3, r6
   e470a:	aa02      	add	r2, sp, #8
   e470c:	4608      	mov	r0, r1
   e470e:	f7fd f9bf 	bl	e1a90 <mbedtls_mpi_exp_mod>
   e4712:	4604      	mov	r4, r0
   e4714:	bb70      	cbnz	r0, e4774 <mbedtls_rsa_deduce_primes+0x198>
   e4716:	f04f 0801 	mov.w	r8, #1

        for( iter = 1; iter <= order; ++iter )
        {
            /* If we reach 1 prematurely, there's no point
             * in continuing to square K */
            if( mbedtls_mpi_cmp_int( &K, 1 ) == 0 )
   e471a:	2101      	movs	r1, #1
   e471c:	a805      	add	r0, sp, #20
   e471e:	f7fc fe2a 	bl	e1376 <mbedtls_mpi_cmp_int>
   e4722:	b930      	cbnz	r0, e4732 <mbedtls_rsa_deduce_primes+0x156>
         * we reached 1, or K holds primes[attempt]^(DE - 1) mod N, which must
         * be 1 if D,E,N were consistent.
         * Check if that's the case and abort if not, to avoid very long,
         * yet eventually failing, computations if N,D,E were not sane.
         */
        if( mbedtls_mpi_cmp_int( &K, 1 ) != 0 )
   e4724:	2101      	movs	r1, #1
   e4726:	a805      	add	r0, sp, #20
   e4728:	f7fc fe25 	bl	e1376 <mbedtls_mpi_cmp_int>
   e472c:	2800      	cmp	r0, #0
   e472e:	d0e3      	beq.n	e46f8 <mbedtls_rsa_deduce_primes+0x11c>
   e4730:	e7bd      	b.n	e46ae <mbedtls_rsa_deduce_primes+0xd2>
            /* If we reach 1 prematurely, there's no point
             * in continuing to square K */
            if( mbedtls_mpi_cmp_int( &K, 1 ) == 0 )
                break;

            MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( &K, &K, 1 ) );
   e4732:	a905      	add	r1, sp, #20
   e4734:	2201      	movs	r2, #1
   e4736:	4608      	mov	r0, r1
   e4738:	f7fc ff10 	bl	e155c <mbedtls_mpi_add_int>
   e473c:	4604      	mov	r4, r0
   e473e:	b9c8      	cbnz	r0, e4774 <mbedtls_rsa_deduce_primes+0x198>
            MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );
   e4740:	4632      	mov	r2, r6
   e4742:	a905      	add	r1, sp, #20
   e4744:	4638      	mov	r0, r7
   e4746:	f7fd fbc2 	bl	e1ece <mbedtls_mpi_gcd>
   e474a:	4604      	mov	r4, r0
   e474c:	b990      	cbnz	r0, e4774 <mbedtls_rsa_deduce_primes+0x198>

            if( mbedtls_mpi_cmp_int( P, 1 ) ==  1 &&
   e474e:	2101      	movs	r1, #1
   e4750:	4638      	mov	r0, r7
   e4752:	f7fc fe10 	bl	e1376 <mbedtls_mpi_cmp_int>
   e4756:	2801      	cmp	r0, #1
   e4758:	d117      	bne.n	e478a <mbedtls_rsa_deduce_primes+0x1ae>
                mbedtls_mpi_cmp_mpi( P, N ) == -1 )
   e475a:	4631      	mov	r1, r6
   e475c:	4638      	mov	r0, r7
   e475e:	f7fc fdc5 	bl	e12ec <mbedtls_mpi_cmp_mpi>
                break;

            MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( &K, &K, 1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );

            if( mbedtls_mpi_cmp_int( P, 1 ) ==  1 &&
   e4762:	3001      	adds	r0, #1
   e4764:	d111      	bne.n	e478a <mbedtls_rsa_deduce_primes+0x1ae>
                /*
                 * Have found a nontrivial divisor P of N.
                 * Set Q := N / P.
                 */

                MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( Q, NULL, N, P ) );
   e4766:	4621      	mov	r1, r4
   e4768:	463b      	mov	r3, r7
   e476a:	4632      	mov	r2, r6
   e476c:	4648      	mov	r0, r9
   e476e:	f7fc ff9d 	bl	e16ac <mbedtls_mpi_div_mpi>
   e4772:	4604      	mov	r4, r0

    ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;

cleanup:

    mbedtls_mpi_free( &K );
   e4774:	a805      	add	r0, sp, #20
   e4776:	f7fc fad8 	bl	e0d2a <mbedtls_mpi_free>
    mbedtls_mpi_free( &T );
   e477a:	a802      	add	r0, sp, #8
   e477c:	f7fc fad5 	bl	e0d2a <mbedtls_mpi_free>
    return( ret );
   e4780:	4620      	mov	r0, r4
   e4782:	e021      	b.n	e47c8 <mbedtls_rsa_deduce_primes+0x1ec>
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( E, N ) >= 0 )
    {
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
   e4784:	f06f 0003 	mvn.w	r0, #3
   e4788:	e01e      	b.n	e47c8 <mbedtls_rsa_deduce_primes+0x1ec>

                MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( Q, NULL, N, P ) );
                goto cleanup;
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
   e478a:	a905      	add	r1, sp, #20
   e478c:	2201      	movs	r2, #1
   e478e:	4608      	mov	r0, r1
   e4790:	f7fc fefa 	bl	e1588 <mbedtls_mpi_sub_int>
   e4794:	4604      	mov	r4, r0
   e4796:	2800      	cmp	r0, #0
   e4798:	d1ec      	bne.n	e4774 <mbedtls_rsa_deduce_primes+0x198>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, &K, &K ) );
   e479a:	aa05      	add	r2, sp, #20
   e479c:	4611      	mov	r1, r2
   e479e:	4610      	mov	r0, r2
   e47a0:	f7fc ff08 	bl	e15b4 <mbedtls_mpi_mul_mpi>
   e47a4:	4604      	mov	r4, r0
   e47a6:	2800      	cmp	r0, #0
   e47a8:	d1e4      	bne.n	e4774 <mbedtls_rsa_deduce_primes+0x198>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, N ) );
   e47aa:	a905      	add	r1, sp, #20
   e47ac:	4632      	mov	r2, r6
   e47ae:	4608      	mov	r0, r1
   e47b0:	f7fd f93c 	bl	e1a2c <mbedtls_mpi_mod_mpi>
   e47b4:	4604      	mov	r4, r0
   e47b6:	2800      	cmp	r0, #0
   e47b8:	d1dc      	bne.n	e4774 <mbedtls_rsa_deduce_primes+0x198>
         * and check whether they have nontrivial GCD with N. */
        MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &K, &K, &T, N,
                             Q /* temporarily use Q for storing Montgomery
                                * multiplication helper values */ ) );

        for( iter = 1; iter <= order; ++iter )
   e47ba:	f108 0801 	add.w	r8, r8, #1
   e47be:	fa1f f888 	uxth.w	r8, r8
   e47c2:	45c2      	cmp	sl, r8
   e47c4:	d2a9      	bcs.n	e471a <mbedtls_rsa_deduce_primes+0x13e>
   e47c6:	e7ad      	b.n	e4724 <mbedtls_rsa_deduce_primes+0x148>
cleanup:

    mbedtls_mpi_free( &K );
    mbedtls_mpi_free( &T );
    return( ret );
}
   e47c8:	b016      	add	sp, #88	; 0x58
   e47ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e47ce:	bf00      	nop
   e47d0:	000eef68 	.word	0x000eef68

000e47d4 <mbedtls_rsa_deduce_private_exponent>:
 */
int mbedtls_rsa_deduce_private_exponent( mbedtls_mpi const *P,
                                         mbedtls_mpi const *Q,
                                         mbedtls_mpi const *E,
                                         mbedtls_mpi *D )
{
   e47d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e47d8:	4604      	mov	r4, r0
   e47da:	b086      	sub	sp, #24
   e47dc:	460e      	mov	r6, r1
   e47de:	4617      	mov	r7, r2
    int ret = 0;
    mbedtls_mpi K, L;

    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
   e47e0:	461d      	mov	r5, r3
   e47e2:	b18b      	cbz	r3, e4808 <mbedtls_rsa_deduce_private_exponent+0x34>
   e47e4:	2100      	movs	r1, #0
   e47e6:	4618      	mov	r0, r3
   e47e8:	f7fc fdc5 	bl	e1376 <mbedtls_mpi_cmp_int>
   e47ec:	4680      	mov	r8, r0
   e47ee:	b958      	cbnz	r0, e4808 <mbedtls_rsa_deduce_private_exponent+0x34>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
   e47f0:	2101      	movs	r1, #1
   e47f2:	4620      	mov	r0, r4
   e47f4:	f7fc fdbf 	bl	e1376 <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( Q, 1 ) <= 0 ||
   e47f8:	2800      	cmp	r0, #0
   e47fa:	dd05      	ble.n	e4808 <mbedtls_rsa_deduce_private_exponent+0x34>
   e47fc:	2101      	movs	r1, #1
   e47fe:	4630      	mov	r0, r6
   e4800:	f7fc fdb9 	bl	e1376 <mbedtls_mpi_cmp_int>
    mbedtls_mpi K, L;

    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
   e4804:	2800      	cmp	r0, #0
   e4806:	dc02      	bgt.n	e480e <mbedtls_rsa_deduce_private_exponent+0x3a>
{
    int ret = 0;
    mbedtls_mpi K, L;

    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
   e4808:	f06f 0003 	mvn.w	r0, #3
   e480c:	e03c      	b.n	e4888 <mbedtls_rsa_deduce_private_exponent+0xb4>

    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
        mbedtls_mpi_cmp_int( Q, 1 ) <= 0 ||
        mbedtls_mpi_cmp_int( E, 0 ) == 0 )
   e480e:	4641      	mov	r1, r8
   e4810:	4638      	mov	r0, r7
   e4812:	f7fc fdb0 	bl	e1376 <mbedtls_mpi_cmp_int>

    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
        mbedtls_mpi_cmp_int( Q, 1 ) <= 0 ||
   e4816:	2800      	cmp	r0, #0
   e4818:	d0f6      	beq.n	e4808 <mbedtls_rsa_deduce_private_exponent+0x34>
        mbedtls_mpi_cmp_int( E, 0 ) == 0 )
    {
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
    }

    mbedtls_mpi_init( &K );
   e481a:	4668      	mov	r0, sp
   e481c:	f7fc fa7f 	bl	e0d1e <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
   e4820:	a803      	add	r0, sp, #12
   e4822:	f7fc fa7c 	bl	e0d1e <mbedtls_mpi_init>

    /* Temporarily put K := P-1 and L := Q-1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1 ) );
   e4826:	4621      	mov	r1, r4
   e4828:	2201      	movs	r2, #1
   e482a:	4668      	mov	r0, sp
   e482c:	f7fc feac 	bl	e1588 <mbedtls_mpi_sub_int>
   e4830:	4604      	mov	r4, r0
   e4832:	bb10      	cbnz	r0, e487a <mbedtls_rsa_deduce_private_exponent+0xa6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
   e4834:	2201      	movs	r2, #1
   e4836:	4631      	mov	r1, r6
   e4838:	a803      	add	r0, sp, #12
   e483a:	f7fc fea5 	bl	e1588 <mbedtls_mpi_sub_int>
   e483e:	4604      	mov	r4, r0
   e4840:	b9d8      	cbnz	r0, e487a <mbedtls_rsa_deduce_private_exponent+0xa6>

    /* Temporarily put D := gcd(P-1, Q-1) */
    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( D, &K, &L ) );
   e4842:	aa03      	add	r2, sp, #12
   e4844:	4669      	mov	r1, sp
   e4846:	4628      	mov	r0, r5
   e4848:	f7fd fb41 	bl	e1ece <mbedtls_mpi_gcd>
   e484c:	4604      	mov	r4, r0
   e484e:	b9a0      	cbnz	r0, e487a <mbedtls_rsa_deduce_private_exponent+0xa6>

    /* K := LCM(P-1, Q-1) */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, &K, &L ) );
   e4850:	aa03      	add	r2, sp, #12
   e4852:	4669      	mov	r1, sp
   e4854:	4668      	mov	r0, sp
   e4856:	f7fc fead 	bl	e15b4 <mbedtls_mpi_mul_mpi>
   e485a:	4604      	mov	r4, r0
   e485c:	b968      	cbnz	r0, e487a <mbedtls_rsa_deduce_private_exponent+0xa6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( &K, NULL, &K, D ) );
   e485e:	4601      	mov	r1, r0
   e4860:	462b      	mov	r3, r5
   e4862:	466a      	mov	r2, sp
   e4864:	4668      	mov	r0, sp
   e4866:	f7fc ff21 	bl	e16ac <mbedtls_mpi_div_mpi>
   e486a:	4604      	mov	r4, r0
   e486c:	b928      	cbnz	r0, e487a <mbedtls_rsa_deduce_private_exponent+0xa6>

    /* Compute modular inverse of E in LCM(P-1, Q-1) */
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( D, E, &K ) );
   e486e:	466a      	mov	r2, sp
   e4870:	4639      	mov	r1, r7
   e4872:	4628      	mov	r0, r5
   e4874:	f7fd fbe4 	bl	e2040 <mbedtls_mpi_inv_mod>
   e4878:	4604      	mov	r4, r0

cleanup:

    mbedtls_mpi_free( &K );
   e487a:	4668      	mov	r0, sp
   e487c:	f7fc fa55 	bl	e0d2a <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
   e4880:	a803      	add	r0, sp, #12
   e4882:	f7fc fa52 	bl	e0d2a <mbedtls_mpi_free>

    return( ret );
   e4886:	4620      	mov	r0, r4
}
   e4888:	b006      	add	sp, #24
   e488a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000e4890 <mbedtls_rsa_validate_crt>:
 * Check that RSA CRT parameters are in accordance with core parameters.
 */
int mbedtls_rsa_validate_crt( const mbedtls_mpi *P,  const mbedtls_mpi *Q,
                              const mbedtls_mpi *D,  const mbedtls_mpi *DP,
                              const mbedtls_mpi *DQ, const mbedtls_mpi *QP )
{
   e4890:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   e4894:	b087      	sub	sp, #28
   e4896:	4604      	mov	r4, r0
    int ret = 0;

    mbedtls_mpi K, L;
    mbedtls_mpi_init( &K );
   e4898:	4668      	mov	r0, sp
 * Check that RSA CRT parameters are in accordance with core parameters.
 */
int mbedtls_rsa_validate_crt( const mbedtls_mpi *P,  const mbedtls_mpi *Q,
                              const mbedtls_mpi *D,  const mbedtls_mpi *DP,
                              const mbedtls_mpi *DQ, const mbedtls_mpi *QP )
{
   e489a:	4699      	mov	r9, r3
   e489c:	460d      	mov	r5, r1
   e489e:	4690      	mov	r8, r2
   e48a0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   e48a2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    int ret = 0;

    mbedtls_mpi K, L;
    mbedtls_mpi_init( &K );
   e48a4:	f7fc fa3b 	bl	e0d1e <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
   e48a8:	a803      	add	r0, sp, #12
   e48aa:	f7fc fa38 	bl	e0d1e <mbedtls_mpi_init>

    /* Check that DP - D == 0 mod P - 1 */
    if( DP != NULL )
   e48ae:	f1b9 0f00 	cmp.w	r9, #0
   e48b2:	d101      	bne.n	e48b8 <mbedtls_rsa_validate_crt+0x28>
            goto cleanup;
        }
    }

    /* Check that DQ - D == 0 mod Q - 1 */
    if( DQ != NULL )
   e48b4:	b9f7      	cbnz	r7, e48f4 <mbedtls_rsa_validate_crt+0x64>
   e48b6:	e035      	b.n	e4924 <mbedtls_rsa_validate_crt+0x94>
    mbedtls_mpi_init( &L );

    /* Check that DP - D == 0 mod P - 1 */
    if( DP != NULL )
    {
        if( P == NULL )
   e48b8:	2c00      	cmp	r4, #0
   e48ba:	d058      	beq.n	e496e <mbedtls_rsa_validate_crt+0xde>
        {
            ret = MBEDTLS_ERR_RSA_BAD_INPUT_DATA;
            goto cleanup;
        }

        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1 ) );
   e48bc:	2201      	movs	r2, #1
   e48be:	4621      	mov	r1, r4
   e48c0:	4668      	mov	r0, sp
   e48c2:	f7fc fe61 	bl	e1588 <mbedtls_mpi_sub_int>
   e48c6:	2800      	cmp	r0, #0
   e48c8:	d148      	bne.n	e495c <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &L, DP, D ) );
   e48ca:	4642      	mov	r2, r8
   e48cc:	4649      	mov	r1, r9
   e48ce:	a803      	add	r0, sp, #12
   e48d0:	f7fc fe22 	bl	e1518 <mbedtls_mpi_sub_mpi>
   e48d4:	2800      	cmp	r0, #0
   e48d6:	d141      	bne.n	e495c <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &L, &L, &K ) );
   e48d8:	a903      	add	r1, sp, #12
   e48da:	466a      	mov	r2, sp
   e48dc:	4608      	mov	r0, r1
   e48de:	f7fd f8a5 	bl	e1a2c <mbedtls_mpi_mod_mpi>
   e48e2:	2800      	cmp	r0, #0
   e48e4:	d13a      	bne.n	e495c <mbedtls_rsa_validate_crt+0xcc>

        if( mbedtls_mpi_cmp_int( &L, 0 ) != 0 )
   e48e6:	4601      	mov	r1, r0
   e48e8:	a803      	add	r0, sp, #12
   e48ea:	f7fc fd44 	bl	e1376 <mbedtls_mpi_cmp_int>
   e48ee:	2800      	cmp	r0, #0
   e48f0:	d13f      	bne.n	e4972 <mbedtls_rsa_validate_crt+0xe2>
   e48f2:	e7df      	b.n	e48b4 <mbedtls_rsa_validate_crt+0x24>
    }

    /* Check that DQ - D == 0 mod Q - 1 */
    if( DQ != NULL )
    {
        if( Q == NULL )
   e48f4:	b3dd      	cbz	r5, e496e <mbedtls_rsa_validate_crt+0xde>
        {
            ret = MBEDTLS_ERR_RSA_BAD_INPUT_DATA;
            goto cleanup;
        }

        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1 ) );
   e48f6:	2201      	movs	r2, #1
   e48f8:	4629      	mov	r1, r5
   e48fa:	4668      	mov	r0, sp
   e48fc:	f7fc fe44 	bl	e1588 <mbedtls_mpi_sub_int>
   e4900:	bb60      	cbnz	r0, e495c <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &L, DQ, D ) );
   e4902:	4642      	mov	r2, r8
   e4904:	4639      	mov	r1, r7
   e4906:	a803      	add	r0, sp, #12
   e4908:	f7fc fe06 	bl	e1518 <mbedtls_mpi_sub_mpi>
   e490c:	bb30      	cbnz	r0, e495c <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &L, &L, &K ) );
   e490e:	a903      	add	r1, sp, #12
   e4910:	466a      	mov	r2, sp
   e4912:	4608      	mov	r0, r1
   e4914:	f7fd f88a 	bl	e1a2c <mbedtls_mpi_mod_mpi>
   e4918:	bb00      	cbnz	r0, e495c <mbedtls_rsa_validate_crt+0xcc>

        if( mbedtls_mpi_cmp_int( &L, 0 ) != 0 )
   e491a:	4601      	mov	r1, r0
   e491c:	a803      	add	r0, sp, #12
   e491e:	f7fc fd2a 	bl	e1376 <mbedtls_mpi_cmp_int>
   e4922:	bb30      	cbnz	r0, e4972 <mbedtls_rsa_validate_crt+0xe2>
            goto cleanup;
        }
    }

    /* Check that QP * Q - 1 == 0 mod P */
    if( QP != NULL )
   e4924:	b1c6      	cbz	r6, e4958 <mbedtls_rsa_validate_crt+0xc8>
    {
        if( P == NULL || Q == NULL )
   e4926:	b314      	cbz	r4, e496e <mbedtls_rsa_validate_crt+0xde>
   e4928:	b30d      	cbz	r5, e496e <mbedtls_rsa_validate_crt+0xde>
        {
            ret = MBEDTLS_ERR_RSA_BAD_INPUT_DATA;
            goto cleanup;
        }

        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, QP, Q ) );
   e492a:	462a      	mov	r2, r5
   e492c:	4631      	mov	r1, r6
   e492e:	4668      	mov	r0, sp
   e4930:	f7fc fe40 	bl	e15b4 <mbedtls_mpi_mul_mpi>
   e4934:	b990      	cbnz	r0, e495c <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
   e4936:	2201      	movs	r2, #1
   e4938:	4669      	mov	r1, sp
   e493a:	4668      	mov	r0, sp
   e493c:	f7fc fe24 	bl	e1588 <mbedtls_mpi_sub_int>
   e4940:	b960      	cbnz	r0, e495c <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, P ) );
   e4942:	4622      	mov	r2, r4
   e4944:	4669      	mov	r1, sp
   e4946:	4668      	mov	r0, sp
   e4948:	f7fd f870 	bl	e1a2c <mbedtls_mpi_mod_mpi>
   e494c:	b930      	cbnz	r0, e495c <mbedtls_rsa_validate_crt+0xcc>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
   e494e:	4601      	mov	r1, r0
   e4950:	4668      	mov	r0, sp
   e4952:	f7fc fd10 	bl	e1376 <mbedtls_mpi_cmp_int>
   e4956:	b960      	cbnz	r0, e4972 <mbedtls_rsa_validate_crt+0xe2>
 * Check that RSA CRT parameters are in accordance with core parameters.
 */
int mbedtls_rsa_validate_crt( const mbedtls_mpi *P,  const mbedtls_mpi *Q,
                              const mbedtls_mpi *D,  const mbedtls_mpi *DP,
                              const mbedtls_mpi *DQ, const mbedtls_mpi *QP )
{
   e4958:	2400      	movs	r4, #0
   e495a:	e00b      	b.n	e4974 <mbedtls_rsa_validate_crt+0xe4>
    }

cleanup:

    /* Wrap MPI error codes by RSA check failure error code */
    if( ret != 0 &&
   e495c:	f510 4f84 	cmn.w	r0, #16896	; 0x4200
   e4960:	d007      	beq.n	e4972 <mbedtls_rsa_validate_crt+0xe2>
        ret != MBEDTLS_ERR_RSA_KEY_CHECK_FAILED &&
   e4962:	f510 4f81 	cmn.w	r0, #16512	; 0x4080
   e4966:	d002      	beq.n	e496e <mbedtls_rsa_validate_crt+0xde>
        ret != MBEDTLS_ERR_RSA_BAD_INPUT_DATA )
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
   e4968:	f5a0 4484 	sub.w	r4, r0, #16896	; 0x4200
   e496c:	e002      	b.n	e4974 <mbedtls_rsa_validate_crt+0xe4>
 * Check that RSA CRT parameters are in accordance with core parameters.
 */
int mbedtls_rsa_validate_crt( const mbedtls_mpi *P,  const mbedtls_mpi *Q,
                              const mbedtls_mpi *D,  const mbedtls_mpi *DP,
                              const mbedtls_mpi *DQ, const mbedtls_mpi *QP )
{
   e496e:	4c06      	ldr	r4, [pc, #24]	; (e4988 <mbedtls_rsa_validate_crt+0xf8>)
   e4970:	e000      	b.n	e4974 <mbedtls_rsa_validate_crt+0xe4>
   e4972:	4c06      	ldr	r4, [pc, #24]	; (e498c <mbedtls_rsa_validate_crt+0xfc>)
        ret != MBEDTLS_ERR_RSA_BAD_INPUT_DATA )
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
    }

    mbedtls_mpi_free( &K );
   e4974:	4668      	mov	r0, sp
   e4976:	f7fc f9d8 	bl	e0d2a <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
   e497a:	a803      	add	r0, sp, #12
   e497c:	f7fc f9d5 	bl	e0d2a <mbedtls_mpi_free>

    return( ret );
}
   e4980:	4620      	mov	r0, r4
   e4982:	b007      	add	sp, #28
   e4984:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   e4988:	ffffbf80 	.word	0xffffbf80
   e498c:	ffffbe00 	.word	0xffffbe00

000e4990 <mbedtls_rsa_validate_params>:
int mbedtls_rsa_validate_params( const mbedtls_mpi *N, const mbedtls_mpi *P,
                                 const mbedtls_mpi *Q, const mbedtls_mpi *D,
                                 const mbedtls_mpi *E,
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng )
{
   e4990:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   e4994:	b087      	sub	sp, #28
   e4996:	4605      	mov	r5, r0
    int ret = 0;
    mbedtls_mpi K, L;

    mbedtls_mpi_init( &K );
   e4998:	4668      	mov	r0, sp
int mbedtls_rsa_validate_params( const mbedtls_mpi *N, const mbedtls_mpi *P,
                                 const mbedtls_mpi *Q, const mbedtls_mpi *D,
                                 const mbedtls_mpi *E,
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng )
{
   e499a:	4688      	mov	r8, r1
   e499c:	4691      	mov	r9, r2
   e499e:	461e      	mov	r6, r3
   e49a0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    int ret = 0;
    mbedtls_mpi K, L;

    mbedtls_mpi_init( &K );
   e49a2:	f7fc f9bc 	bl	e0d1e <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
   e49a6:	a803      	add	r0, sp, #12
   e49a8:	f7fc f9b9 	bl	e0d1e <mbedtls_mpi_init>

    /*
     * Step 2: Check that 1 < N = P * Q
     */

    if( P != NULL && Q != NULL && N != NULL )
   e49ac:	f1b8 0f00 	cmp.w	r8, #0
   e49b0:	d018      	beq.n	e49e4 <mbedtls_rsa_validate_params+0x54>
   e49b2:	f1b9 0f00 	cmp.w	r9, #0
   e49b6:	d015      	beq.n	e49e4 <mbedtls_rsa_validate_params+0x54>
   e49b8:	b90d      	cbnz	r5, e49be <mbedtls_rsa_validate_params+0x2e>

    /*
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
   e49ba:	b9de      	cbnz	r6, e49f4 <mbedtls_rsa_validate_params+0x64>
   e49bc:	e018      	b.n	e49f0 <mbedtls_rsa_validate_params+0x60>
     * Step 2: Check that 1 < N = P * Q
     */

    if( P != NULL && Q != NULL && N != NULL )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, P, Q ) );
   e49be:	464a      	mov	r2, r9
   e49c0:	4641      	mov	r1, r8
   e49c2:	4668      	mov	r0, sp
   e49c4:	f7fc fdf6 	bl	e15b4 <mbedtls_mpi_mul_mpi>
   e49c8:	4604      	mov	r4, r0
   e49ca:	bb68      	cbnz	r0, e4a28 <mbedtls_rsa_validate_params+0x98>
        if( mbedtls_mpi_cmp_int( N, 1 )  <= 0 ||
   e49cc:	2101      	movs	r1, #1
   e49ce:	4628      	mov	r0, r5
   e49d0:	f7fc fcd1 	bl	e1376 <mbedtls_mpi_cmp_int>
   e49d4:	2800      	cmp	r0, #0
   e49d6:	dd26      	ble.n	e4a26 <mbedtls_rsa_validate_params+0x96>
            mbedtls_mpi_cmp_mpi( &K, N ) != 0 )
   e49d8:	4629      	mov	r1, r5
   e49da:	4668      	mov	r0, sp
   e49dc:	f7fc fc86 	bl	e12ec <mbedtls_mpi_cmp_mpi>
     */

    if( P != NULL && Q != NULL && N != NULL )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, P, Q ) );
        if( mbedtls_mpi_cmp_int( N, 1 )  <= 0 ||
   e49e0:	bb08      	cbnz	r0, e4a26 <mbedtls_rsa_validate_params+0x96>
   e49e2:	e016      	b.n	e4a12 <mbedtls_rsa_validate_params+0x82>

    /*
     * Step 3: Check and 1 < D, E < N if present.
     */

    if( N != NULL && D != NULL && E != NULL )
   e49e4:	b125      	cbz	r5, e49f0 <mbedtls_rsa_validate_params+0x60>
   e49e6:	b9b6      	cbnz	r6, e4a16 <mbedtls_rsa_validate_params+0x86>

    /*
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
   e49e8:	f1b8 0f00 	cmp.w	r8, #0
   e49ec:	f040 808a 	bne.w	e4b04 <mbedtls_rsa_validate_params+0x174>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
        {
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
   e49f0:	2400      	movs	r4, #0
   e49f2:	e019      	b.n	e4a28 <mbedtls_rsa_validate_params+0x98>

    /*
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
   e49f4:	2f00      	cmp	r7, #0
   e49f6:	d0fb      	beq.n	e49f0 <mbedtls_rsa_validate_params+0x60>
    {
        if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
   e49f8:	2101      	movs	r1, #1
   e49fa:	4640      	mov	r0, r8
   e49fc:	f7fc fcbb 	bl	e1376 <mbedtls_mpi_cmp_int>
   e4a00:	2800      	cmp	r0, #0
   e4a02:	dd10      	ble.n	e4a26 <mbedtls_rsa_validate_params+0x96>
            mbedtls_mpi_cmp_int( Q, 1 ) <= 0 )
   e4a04:	2101      	movs	r1, #1
   e4a06:	4648      	mov	r0, r9
   e4a08:	f7fc fcb5 	bl	e1376 <mbedtls_mpi_cmp_int>
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
    {
        if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
   e4a0c:	2800      	cmp	r0, #0
   e4a0e:	dc19      	bgt.n	e4a44 <mbedtls_rsa_validate_params+0xb4>
   e4a10:	e009      	b.n	e4a26 <mbedtls_rsa_validate_params+0x96>

    /*
     * Step 3: Check and 1 < D, E < N if present.
     */

    if( N != NULL && D != NULL && E != NULL )
   e4a12:	2e00      	cmp	r6, #0
   e4a14:	d0ec      	beq.n	e49f0 <mbedtls_rsa_validate_params+0x60>
   e4a16:	2f00      	cmp	r7, #0
   e4a18:	d0e6      	beq.n	e49e8 <mbedtls_rsa_validate_params+0x58>
    {
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
   e4a1a:	2101      	movs	r1, #1
   e4a1c:	4630      	mov	r0, r6
   e4a1e:	f7fc fcaa 	bl	e1376 <mbedtls_mpi_cmp_int>
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
   e4a22:	2800      	cmp	r0, #0
   e4a24:	dc5b      	bgt.n	e4ade <mbedtls_rsa_validate_params+0x14e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
        {
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
   e4a26:	4c3c      	ldr	r4, [pc, #240]	; (e4b18 <mbedtls_rsa_validate_params+0x188>)
        }
    }

cleanup:

    mbedtls_mpi_free( &K );
   e4a28:	4668      	mov	r0, sp
   e4a2a:	f7fc f97e 	bl	e0d2a <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
   e4a2e:	a803      	add	r0, sp, #12
   e4a30:	f7fc f97b 	bl	e0d2a <mbedtls_mpi_free>

    /* Wrap MPI error codes by RSA check failure error code */
    if( ret != 0 && ret != MBEDTLS_ERR_RSA_KEY_CHECK_FAILED )
   e4a34:	2c00      	cmp	r4, #0
   e4a36:	d06a      	beq.n	e4b0e <mbedtls_rsa_validate_params+0x17e>
   e4a38:	f514 4f84 	cmn.w	r4, #16896	; 0x4200
   e4a3c:	d067      	beq.n	e4b0e <mbedtls_rsa_validate_params+0x17e>
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
   e4a3e:	f5a4 4484 	sub.w	r4, r4, #16896	; 0x4200
    }

    return( ret );
   e4a42:	e064      	b.n	e4b0e <mbedtls_rsa_validate_params+0x17e>
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
            goto cleanup;
        }

        /* Compute DE-1 mod P-1 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, D, E ) );
   e4a44:	463a      	mov	r2, r7
   e4a46:	4631      	mov	r1, r6
   e4a48:	4668      	mov	r0, sp
   e4a4a:	f7fc fdb3 	bl	e15b4 <mbedtls_mpi_mul_mpi>
   e4a4e:	4604      	mov	r4, r0
   e4a50:	2800      	cmp	r0, #0
   e4a52:	d1e9      	bne.n	e4a28 <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
   e4a54:	2201      	movs	r2, #1
   e4a56:	4669      	mov	r1, sp
   e4a58:	4668      	mov	r0, sp
   e4a5a:	f7fc fd95 	bl	e1588 <mbedtls_mpi_sub_int>
   e4a5e:	4604      	mov	r4, r0
   e4a60:	2800      	cmp	r0, #0
   e4a62:	d1e1      	bne.n	e4a28 <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, P, 1 ) );
   e4a64:	2201      	movs	r2, #1
   e4a66:	4641      	mov	r1, r8
   e4a68:	a803      	add	r0, sp, #12
   e4a6a:	f7fc fd8d 	bl	e1588 <mbedtls_mpi_sub_int>
   e4a6e:	4604      	mov	r4, r0
   e4a70:	2800      	cmp	r0, #0
   e4a72:	d1d9      	bne.n	e4a28 <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
   e4a74:	aa03      	add	r2, sp, #12
   e4a76:	4669      	mov	r1, sp
   e4a78:	4668      	mov	r0, sp
   e4a7a:	f7fc ffd7 	bl	e1a2c <mbedtls_mpi_mod_mpi>
   e4a7e:	4604      	mov	r4, r0
   e4a80:	2800      	cmp	r0, #0
   e4a82:	d1d1      	bne.n	e4a28 <mbedtls_rsa_validate_params+0x98>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
   e4a84:	4601      	mov	r1, r0
   e4a86:	4668      	mov	r0, sp
   e4a88:	f7fc fc75 	bl	e1376 <mbedtls_mpi_cmp_int>
   e4a8c:	2800      	cmp	r0, #0
   e4a8e:	d1ca      	bne.n	e4a26 <mbedtls_rsa_validate_params+0x96>
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
            goto cleanup;
        }

        /* Compute DE-1 mod Q-1 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, D, E ) );
   e4a90:	463a      	mov	r2, r7
   e4a92:	4631      	mov	r1, r6
   e4a94:	4668      	mov	r0, sp
   e4a96:	f7fc fd8d 	bl	e15b4 <mbedtls_mpi_mul_mpi>
   e4a9a:	4604      	mov	r4, r0
   e4a9c:	2800      	cmp	r0, #0
   e4a9e:	d1c3      	bne.n	e4a28 <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
   e4aa0:	2201      	movs	r2, #1
   e4aa2:	4669      	mov	r1, sp
   e4aa4:	4668      	mov	r0, sp
   e4aa6:	f7fc fd6f 	bl	e1588 <mbedtls_mpi_sub_int>
   e4aaa:	4604      	mov	r4, r0
   e4aac:	2800      	cmp	r0, #0
   e4aae:	d1bb      	bne.n	e4a28 <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
   e4ab0:	2201      	movs	r2, #1
   e4ab2:	4649      	mov	r1, r9
   e4ab4:	a803      	add	r0, sp, #12
   e4ab6:	f7fc fd67 	bl	e1588 <mbedtls_mpi_sub_int>
   e4aba:	4604      	mov	r4, r0
   e4abc:	2800      	cmp	r0, #0
   e4abe:	d1b3      	bne.n	e4a28 <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
   e4ac0:	aa03      	add	r2, sp, #12
   e4ac2:	4669      	mov	r1, sp
   e4ac4:	4668      	mov	r0, sp
   e4ac6:	f7fc ffb1 	bl	e1a2c <mbedtls_mpi_mod_mpi>
   e4aca:	4604      	mov	r4, r0
   e4acc:	2800      	cmp	r0, #0
   e4ace:	d1ab      	bne.n	e4a28 <mbedtls_rsa_validate_params+0x98>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
   e4ad0:	4601      	mov	r1, r0
   e4ad2:	4668      	mov	r0, sp
   e4ad4:	f7fc fc4f 	bl	e1376 <mbedtls_mpi_cmp_int>
   e4ad8:	2800      	cmp	r0, #0
   e4ada:	d089      	beq.n	e49f0 <mbedtls_rsa_validate_params+0x60>
   e4adc:	e7a3      	b.n	e4a26 <mbedtls_rsa_validate_params+0x96>
     */

    if( N != NULL && D != NULL && E != NULL )
    {
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
   e4ade:	2101      	movs	r1, #1
   e4ae0:	4638      	mov	r0, r7
   e4ae2:	f7fc fc48 	bl	e1376 <mbedtls_mpi_cmp_int>
     * Step 3: Check and 1 < D, E < N if present.
     */

    if( N != NULL && D != NULL && E != NULL )
    {
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
   e4ae6:	2800      	cmp	r0, #0
   e4ae8:	dd9d      	ble.n	e4a26 <mbedtls_rsa_validate_params+0x96>
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
   e4aea:	4629      	mov	r1, r5
   e4aec:	4630      	mov	r0, r6
   e4aee:	f7fc fbfd 	bl	e12ec <mbedtls_mpi_cmp_mpi>
     */

    if( N != NULL && D != NULL && E != NULL )
    {
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
   e4af2:	2800      	cmp	r0, #0
   e4af4:	da97      	bge.n	e4a26 <mbedtls_rsa_validate_params+0x96>
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
             mbedtls_mpi_cmp_mpi( E, N ) >= 0 )
   e4af6:	4629      	mov	r1, r5
   e4af8:	4638      	mov	r0, r7
   e4afa:	f7fc fbf7 	bl	e12ec <mbedtls_mpi_cmp_mpi>

    if( N != NULL && D != NULL && E != NULL )
    {
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
   e4afe:	2800      	cmp	r0, #0
   e4b00:	da91      	bge.n	e4a26 <mbedtls_rsa_validate_params+0x96>
   e4b02:	e771      	b.n	e49e8 <mbedtls_rsa_validate_params+0x58>

    /*
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
   e4b04:	f1b9 0f00 	cmp.w	r9, #0
   e4b08:	f47f af57 	bne.w	e49ba <mbedtls_rsa_validate_params+0x2a>
   e4b0c:	e770      	b.n	e49f0 <mbedtls_rsa_validate_params+0x60>
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
    }

    return( ret );
}
   e4b0e:	4620      	mov	r0, r4
   e4b10:	b007      	add	sp, #28
   e4b12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   e4b16:	bf00      	nop
   e4b18:	ffffbe00 	.word	0xffffbe00

000e4b1c <mbedtls_rsa_deduce_crt>:

int mbedtls_rsa_deduce_crt( const mbedtls_mpi *P, const mbedtls_mpi *Q,
                            const mbedtls_mpi *D, mbedtls_mpi *DP,
                            mbedtls_mpi *DQ, mbedtls_mpi *QP )
{
   e4b1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   e4b20:	4607      	mov	r7, r0
   e4b22:	469a      	mov	sl, r3
    int ret = 0;
    mbedtls_mpi K;
    mbedtls_mpi_init( &K );
   e4b24:	a801      	add	r0, sp, #4
}

int mbedtls_rsa_deduce_crt( const mbedtls_mpi *P, const mbedtls_mpi *Q,
                            const mbedtls_mpi *D, mbedtls_mpi *DP,
                            mbedtls_mpi *DQ, mbedtls_mpi *QP )
{
   e4b26:	460e      	mov	r6, r1
   e4b28:	4691      	mov	r9, r2
   e4b2a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   e4b2e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    int ret = 0;
    mbedtls_mpi K;
    mbedtls_mpi_init( &K );
   e4b30:	f7fc f8f5 	bl	e0d1e <mbedtls_mpi_init>

    /* DP = D mod P-1 */
    if( DP != NULL )
   e4b34:	f1ba 0f00 	cmp.w	sl, #0
   e4b38:	d103      	bne.n	e4b42 <mbedtls_rsa_deduce_crt+0x26>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1  ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DP, D, &K ) );
    }

    /* DQ = D mod Q-1 */
    if( DQ != NULL )
   e4b3a:	f1b8 0f00 	cmp.w	r8, #0
   e4b3e:	d110      	bne.n	e4b62 <mbedtls_rsa_deduce_crt+0x46>
   e4b40:	e01d      	b.n	e4b7e <mbedtls_rsa_deduce_crt+0x62>
    mbedtls_mpi_init( &K );

    /* DP = D mod P-1 */
    if( DP != NULL )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1  ) );
   e4b42:	2201      	movs	r2, #1
   e4b44:	4639      	mov	r1, r7
   e4b46:	a801      	add	r0, sp, #4
   e4b48:	f7fc fd1e 	bl	e1588 <mbedtls_mpi_sub_int>
   e4b4c:	4604      	mov	r4, r0
   e4b4e:	b9f8      	cbnz	r0, e4b90 <mbedtls_rsa_deduce_crt+0x74>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DP, D, &K ) );
   e4b50:	aa01      	add	r2, sp, #4
   e4b52:	4649      	mov	r1, r9
   e4b54:	4650      	mov	r0, sl
   e4b56:	f7fc ff69 	bl	e1a2c <mbedtls_mpi_mod_mpi>
   e4b5a:	4604      	mov	r4, r0
   e4b5c:	2800      	cmp	r0, #0
   e4b5e:	d0ec      	beq.n	e4b3a <mbedtls_rsa_deduce_crt+0x1e>
   e4b60:	e016      	b.n	e4b90 <mbedtls_rsa_deduce_crt+0x74>
    }

    /* DQ = D mod Q-1 */
    if( DQ != NULL )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1  ) );
   e4b62:	2201      	movs	r2, #1
   e4b64:	4631      	mov	r1, r6
   e4b66:	a801      	add	r0, sp, #4
   e4b68:	f7fc fd0e 	bl	e1588 <mbedtls_mpi_sub_int>
   e4b6c:	4604      	mov	r4, r0
   e4b6e:	b978      	cbnz	r0, e4b90 <mbedtls_rsa_deduce_crt+0x74>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DQ, D, &K ) );
   e4b70:	aa01      	add	r2, sp, #4
   e4b72:	4649      	mov	r1, r9
   e4b74:	4640      	mov	r0, r8
   e4b76:	f7fc ff59 	bl	e1a2c <mbedtls_mpi_mod_mpi>
   e4b7a:	4604      	mov	r4, r0
   e4b7c:	b940      	cbnz	r0, e4b90 <mbedtls_rsa_deduce_crt+0x74>
    }

    /* QP = Q^{-1} mod P */
    if( QP != NULL )
   e4b7e:	b90d      	cbnz	r5, e4b84 <mbedtls_rsa_deduce_crt+0x68>
   e4b80:	462c      	mov	r4, r5
   e4b82:	e005      	b.n	e4b90 <mbedtls_rsa_deduce_crt+0x74>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( QP, Q, P ) );
   e4b84:	463a      	mov	r2, r7
   e4b86:	4631      	mov	r1, r6
   e4b88:	4628      	mov	r0, r5
   e4b8a:	f7fd fa59 	bl	e2040 <mbedtls_mpi_inv_mod>
   e4b8e:	4604      	mov	r4, r0
    }

cleanup:
    mbedtls_mpi_free( &K );
   e4b90:	a801      	add	r0, sp, #4
   e4b92:	f7fc f8ca 	bl	e0d2a <mbedtls_mpi_free>

    return( ret );
}
   e4b96:	4620      	mov	r0, r4
   e4b98:	b004      	add	sp, #16
   e4b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000e4b9e <mbedtls_ssl_own_key>:
#if defined(MBEDTLS_X509_CRT_PARSE_C)
static inline mbedtls_pk_context *mbedtls_ssl_own_key( mbedtls_ssl_context *ssl )
{
    mbedtls_ssl_key_cert *key_cert;

    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
   e4b9e:	6b03      	ldr	r3, [r0, #48]	; 0x30
   e4ba0:	b113      	cbz	r3, e4ba8 <mbedtls_ssl_own_key+0xa>
   e4ba2:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
   e4ba6:	b913      	cbnz	r3, e4bae <mbedtls_ssl_own_key+0x10>
        key_cert = ssl->handshake->key_cert;
    else
        key_cert = ssl->conf->key_cert;
   e4ba8:	6803      	ldr	r3, [r0, #0]
   e4baa:	6d1b      	ldr	r3, [r3, #80]	; 0x50

    return( key_cert == NULL ? NULL : key_cert->key );
   e4bac:	b10b      	cbz	r3, e4bb2 <mbedtls_ssl_own_key+0x14>
   e4bae:	6858      	ldr	r0, [r3, #4]
   e4bb0:	4770      	bx	lr
   e4bb2:	4618      	mov	r0, r3
}
   e4bb4:	4770      	bx	lr
	...

000e4bb8 <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj>:
 * Generate a pre-master secret and encrypt it with the server's RSA key
 */
static int ssl_write_encrypted_pms( mbedtls_ssl_context *ssl,
                                    size_t offset, size_t *olen,
                                    size_t pms_offset )
{
   e4bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e4bbc:	4617      	mov	r7, r2
    int ret;
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
   e4bbe:	68c2      	ldr	r2, [r0, #12]
    unsigned char *p = ssl->handshake->premaster + pms_offset;
   e4bc0:	6b05      	ldr	r5, [r0, #48]	; 0x30
static int ssl_write_encrypted_pms( mbedtls_ssl_context *ssl,
                                    size_t offset, size_t *olen,
                                    size_t pms_offset )
{
    int ret;
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
   e4bc2:	2a00      	cmp	r2, #0
   e4bc4:	bf0c      	ite	eq
   e4bc6:	f04f 0800 	moveq.w	r8, #0
   e4bca:	f04f 0802 	movne.w	r8, #2
    unsigned char *p = ssl->handshake->premaster + pms_offset;

    if( offset + len_bytes > MBEDTLS_SSL_OUT_CONTENT_LEN )
   e4bce:	eb08 0901 	add.w	r9, r8, r1
                                    size_t offset, size_t *olen,
                                    size_t pms_offset )
{
    int ret;
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
    unsigned char *p = ssl->handshake->premaster + pms_offset;
   e4bd2:	f505 753d 	add.w	r5, r5, #756	; 0x2f4

    if( offset + len_bytes > MBEDTLS_SSL_OUT_CONTENT_LEN )
   e4bd6:	f5b9 5f00 	cmp.w	r9, #8192	; 0x2000
 * Generate a pre-master secret and encrypt it with the server's RSA key
 */
static int ssl_write_encrypted_pms( mbedtls_ssl_context *ssl,
                                    size_t offset, size_t *olen,
                                    size_t pms_offset )
{
   e4bda:	b086      	sub	sp, #24
   e4bdc:	4604      	mov	r4, r0
   e4bde:	460e      	mov	r6, r1
    int ret;
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
    unsigned char *p = ssl->handshake->premaster + pms_offset;
   e4be0:	441d      	add	r5, r3

    if( offset + len_bytes > MBEDTLS_SSL_OUT_CONTENT_LEN )
   e4be2:	d84d      	bhi.n	e4c80 <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xc8>
     *  struct {
     *      ProtocolVersion client_version;
     *      opaque random[46];
     *  } PreMasterSecret;
     */
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
   e4be4:	6800      	ldr	r0, [r0, #0]
                       ssl->conf->transport, p );
   e4be6:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
   e4bea:	f890 1079 	ldrb.w	r1, [r0, #121]	; 0x79
   e4bee:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
   e4bf2:	462b      	mov	r3, r5
   e4bf4:	f3c2 0240 	ubfx	r2, r2, #1, #1
   e4bf8:	f7fb ff3e 	bl	e0a78 <mbedtls_ssl_write_version>

    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p + 2, 46 ) ) != 0 )
   e4bfc:	6823      	ldr	r3, [r4, #0]
   e4bfe:	222e      	movs	r2, #46	; 0x2e
   e4c00:	f8d3 a018 	ldr.w	sl, [r3, #24]
   e4c04:	69d8      	ldr	r0, [r3, #28]
   e4c06:	1ca9      	adds	r1, r5, #2
   e4c08:	47d0      	blx	sl
   e4c0a:	2800      	cmp	r0, #0
   e4c0c:	d13d      	bne.n	e4c8a <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xd2>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "f_rng", ret );
        return( ret );
    }

    ssl->handshake->pmslen = 48;
   e4c0e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   e4c10:	2230      	movs	r2, #48	; 0x30
   e4c12:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0

    if( ssl->session_negotiate->peer_cert == NULL )
   e4c16:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e4c18:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
   e4c1a:	2800      	cmp	r0, #0
   e4c1c:	d032      	beq.n	e4c84 <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xcc>
    }

    /*
     * Now write it out, encrypted
     */
    if( ! mbedtls_pk_can_do( &ssl->session_negotiate->peer_cert->pk,
   e4c1e:	2101      	movs	r1, #1
   e4c20:	30bc      	adds	r0, #188	; 0xbc
   e4c22:	f7fa f89f 	bl	ded64 <mbedtls_pk_can_do>
   e4c26:	2800      	cmp	r0, #0
   e4c28:	d02e      	beq.n	e4c88 <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xd0>

    if( ( ret = mbedtls_pk_encrypt( &ssl->session_negotiate->peer_cert->pk,
                            p, ssl->handshake->pmslen,
                            ssl->out_msg + offset + len_bytes, olen,
                            MBEDTLS_SSL_OUT_CONTENT_LEN - offset - len_bytes,
                            ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
   e4c2a:	6822      	ldr	r2, [r4, #0]
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate key type mismatch" ) );
        return( MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH );
    }

    if( ( ret = mbedtls_pk_encrypt( &ssl->session_negotiate->peer_cert->pk,
   e4c2c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   e4c30:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   e4c32:	9305      	str	r3, [sp, #20]
   e4c34:	69d3      	ldr	r3, [r2, #28]
   e4c36:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   e4c38:	9303      	str	r3, [sp, #12]
   e4c3a:	6992      	ldr	r2, [r2, #24]
   e4c3c:	9202      	str	r2, [sp, #8]
   e4c3e:	f5c6 5200 	rsb	r2, r6, #8192	; 0x2000
   e4c42:	6b21      	ldr	r1, [r4, #48]	; 0x30
   e4c44:	9b05      	ldr	r3, [sp, #20]
   e4c46:	9700      	str	r7, [sp, #0]
   e4c48:	ebc8 0202 	rsb	r2, r8, r2
   e4c4c:	9201      	str	r2, [sp, #4]
   e4c4e:	f8d1 22b0 	ldr.w	r2, [r1, #688]	; 0x2b0
   e4c52:	444b      	add	r3, r9
   e4c54:	4629      	mov	r1, r5
   e4c56:	30bc      	adds	r0, #188	; 0xbc
   e4c58:	f7fa f8f6 	bl	dee48 <mbedtls_pk_encrypt>
   e4c5c:	b9a8      	cbnz	r0, e4c8a <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xd2>
        return( ret );
    }

#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
    if( len_bytes == 2 )
   e4c5e:	f1b8 0f00 	cmp.w	r8, #0
   e4c62:	d012      	beq.n	e4c8a <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xd2>
    {
        ssl->out_msg[offset+0] = (unsigned char)( *olen >> 8 );
   e4c64:	683b      	ldr	r3, [r7, #0]
   e4c66:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   e4c6a:	0a1b      	lsrs	r3, r3, #8
   e4c6c:	5593      	strb	r3, [r2, r6]
        ssl->out_msg[offset+1] = (unsigned char)( *olen      );
   e4c6e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   e4c72:	441e      	add	r6, r3
   e4c74:	683b      	ldr	r3, [r7, #0]
   e4c76:	7073      	strb	r3, [r6, #1]
        *olen += 2;
   e4c78:	683b      	ldr	r3, [r7, #0]
   e4c7a:	3302      	adds	r3, #2
   e4c7c:	603b      	str	r3, [r7, #0]
   e4c7e:	e004      	b.n	e4c8a <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xd2>
    unsigned char *p = ssl->handshake->premaster + pms_offset;

    if( offset + len_bytes > MBEDTLS_SSL_OUT_CONTENT_LEN )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small for encrypted pms" ) );
        return( MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL );
   e4c80:	4803      	ldr	r0, [pc, #12]	; (e4c90 <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xd8>)
   e4c82:	e002      	b.n	e4c8a <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xd2>
    ssl->handshake->pmslen = 48;

    if( ssl->session_negotiate->peer_cert == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "certificate required" ) );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
   e4c84:	4803      	ldr	r0, [pc, #12]	; (e4c94 <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xdc>)
   e4c86:	e000      	b.n	e4c8a <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xd2>
     */
    if( ! mbedtls_pk_can_do( &ssl->session_negotiate->peer_cert->pk,
                MBEDTLS_PK_RSA ) )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate key type mismatch" ) );
        return( MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH );
   e4c88:	4803      	ldr	r0, [pc, #12]	; (e4c98 <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xe0>)
        *olen += 2;
    }
#endif

    return( 0 );
}
   e4c8a:	b006      	add	sp, #24
   e4c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e4c90:	ffff9600 	.word	0xffff9600
   e4c94:	ffff8900 	.word	0xffff8900
   e4c98:	ffff9300 	.word	0xffff9300

000e4c9c <mbedtls_ssl_handshake_client_step>:

/*
 * SSL handshake -- client side -- single step
 */
int mbedtls_ssl_handshake_client_step( mbedtls_ssl_context *ssl )
{
   e4c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret = 0;

    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER || ssl->handshake == NULL )
   e4ca0:	6843      	ldr	r3, [r0, #4]
   e4ca2:	2b10      	cmp	r3, #16

/*
 * SSL handshake -- client side -- single step
 */
int mbedtls_ssl_handshake_client_step( mbedtls_ssl_context *ssl )
{
   e4ca4:	b09f      	sub	sp, #124	; 0x7c
   e4ca6:	4604      	mov	r4, r0
    int ret = 0;

    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER || ssl->handshake == NULL )
   e4ca8:	f000 808e 	beq.w	e4dc8 <mbedtls_ssl_handshake_client_step+0x12c>
   e4cac:	6b03      	ldr	r3, [r0, #48]	; 0x30
   e4cae:	2b00      	cmp	r3, #0
   e4cb0:	f000 808a 	beq.w	e4dc8 <mbedtls_ssl_handshake_client_step+0x12c>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "client state: %d", ssl->state ) );

    if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
   e4cb4:	f7fa fd16 	bl	df6e4 <mbedtls_ssl_flush_output>
   e4cb8:	4605      	mov	r5, r0
   e4cba:	2800      	cmp	r0, #0
   e4cbc:	f040 869e 	bne.w	e59fc <mbedtls_ssl_handshake_client_step+0xd60>
#endif /* MBEDTLS_SSL_PROTO_DTLS */

    /* Change state now, so that it is right in mbedtls_ssl_read_record(), used
     * by DTLS for dropping out-of-sequence ChangeCipherSpec records */
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
    if( ssl->state == MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC &&
   e4cc0:	6863      	ldr	r3, [r4, #4]
   e4cc2:	2b0c      	cmp	r3, #12
   e4cc4:	d105      	bne.n	e4cd2 <mbedtls_ssl_handshake_client_step+0x36>
        ssl->handshake->new_session_ticket != 0 )
   e4cc6:	6b23      	ldr	r3, [r4, #48]	; 0x30
#endif /* MBEDTLS_SSL_PROTO_DTLS */

    /* Change state now, so that it is right in mbedtls_ssl_read_record(), used
     * by DTLS for dropping out-of-sequence ChangeCipherSpec records */
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
    if( ssl->state == MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC &&
   e4cc8:	f8d3 3358 	ldr.w	r3, [r3, #856]	; 0x358
   e4ccc:	b10b      	cbz	r3, e4cd2 <mbedtls_ssl_handshake_client_step+0x36>
        ssl->handshake->new_session_ticket != 0 )
    {
        ssl->state = MBEDTLS_SSL_SERVER_NEW_SESSION_TICKET;
   e4cce:	2311      	movs	r3, #17
   e4cd0:	6063      	str	r3, [r4, #4]
    }
#endif

    switch( ssl->state )
   e4cd2:	6863      	ldr	r3, [r4, #4]
   e4cd4:	2b11      	cmp	r3, #17
   e4cd6:	d877      	bhi.n	e4dc8 <mbedtls_ssl_handshake_client_step+0x12c>
   e4cd8:	e8df f013 	tbh	[pc, r3, lsl #1]
   e4cdc:	00170012 	.word	0x00170012
   e4ce0:	00e20051 	.word	0x00e20051
   e4ce4:	01bb00e8 	.word	0x01bb00e8
   e4ce8:	01ce01a2 	.word	0x01ce01a2
   e4cec:	026101d2 	.word	0x026101d2
   e4cf0:	02e102dd 	.word	0x02e102dd
   e4cf4:	030202fe 	.word	0x030202fe
   e4cf8:	03080306 	.word	0x03080306
   e4cfc:	02e50076 	.word	0x02e50076
    {
        case MBEDTLS_SSL_HELLO_REQUEST:
            ssl->state = MBEDTLS_SSL_CLIENT_HELLO;
   e4d00:	2201      	movs	r2, #1
   e4d02:	6062      	str	r2, [r4, #4]
            break;
   e4d04:	461d      	mov	r5, r3
   e4d06:	f000 be79 	b.w	e59fc <mbedtls_ssl_handshake_client_step+0xd60>
    int uses_ec = 0;
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write client hello" ) );

    if( ssl->conf->f_rng == NULL )
   e4d0a:	6821      	ldr	r1, [r4, #0]
   e4d0c:	698b      	ldr	r3, [r1, #24]
   e4d0e:	2b00      	cmp	r3, #0
   e4d10:	f000 82f0 	beq.w	e52f4 <mbedtls_ssl_handshake_client_step+0x658>

#if defined(MBEDTLS_SSL_RENEGOTIATION)
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
#endif
    {
        ssl->major_ver = ssl->conf->min_major_ver;
   e4d14:	f891 307a 	ldrb.w	r3, [r1, #122]	; 0x7a
   e4d18:	60a3      	str	r3, [r4, #8]
        ssl->minor_ver = ssl->conf->min_minor_ver;
   e4d1a:	f891 307b 	ldrb.w	r3, [r1, #123]	; 0x7b
   e4d1e:	60e3      	str	r3, [r4, #12]
    }

    if( ssl->conf->max_major_ver == 0 )
   e4d20:	f891 0078 	ldrb.w	r0, [r1, #120]	; 0x78
   e4d24:	2800      	cmp	r0, #0
   e4d26:	d04f      	beq.n	e4dc8 <mbedtls_ssl_handshake_client_step+0x12c>
     */
    buf = ssl->out_msg;
    p = buf + 4;

    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
                       ssl->conf->transport, p );
   e4d28:	f891 207c 	ldrb.w	r2, [r1, #124]	; 0x7c
     *     1  .   3   handshake length
     *     4  .   5   highest version supported
     *     6  .   9   current UNIX time
     *    10  .  37   random bytes
     */
    buf = ssl->out_msg;
   e4d2c:	f8d4 9098 	ldr.w	r9, [r4, #152]	; 0x98
    p = buf + 4;

    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
                       ssl->conf->transport, p );
   e4d30:	f891 1079 	ldrb.w	r1, [r1, #121]	; 0x79
   e4d34:	f109 0304 	add.w	r3, r9, #4
   e4d38:	f3c2 0240 	ubfx	r2, r2, #1, #1
   e4d3c:	f7fb fe9c 	bl	e0a78 <mbedtls_ssl_write_version>
    *p++ = (unsigned char)( t >>  8 );
    *p++ = (unsigned char)( t       );

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, current time: %lu", t ) );
#else
    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 4 ) ) != 0 )
   e4d40:	6823      	ldr	r3, [r4, #0]
 * Generate random bytes for ClientHello
 */
static int ssl_generate_random( mbedtls_ssl_context *ssl )
{
    int ret;
    unsigned char *p = ssl->handshake->randbytes;
   e4d42:	6b26      	ldr	r6, [r4, #48]	; 0x30
    *p++ = (unsigned char)( t >>  8 );
    *p++ = (unsigned char)( t       );

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, current time: %lu", t ) );
#else
    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 4 ) ) != 0 )
   e4d44:	699d      	ldr	r5, [r3, #24]
   e4d46:	69d8      	ldr	r0, [r3, #28]
   e4d48:	2204      	movs	r2, #4
   e4d4a:	f506 712d 	add.w	r1, r6, #692	; 0x2b4
   e4d4e:	47a8      	blx	r5
   e4d50:	4605      	mov	r5, r0
   e4d52:	2800      	cmp	r0, #0
   e4d54:	f040 8652 	bne.w	e59fc <mbedtls_ssl_handshake_client_step+0xd60>
        return( ret );

    p += 4;
#endif /* MBEDTLS_HAVE_TIME */

    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 28 ) ) != 0 )
   e4d58:	6823      	ldr	r3, [r4, #0]
   e4d5a:	221c      	movs	r2, #28
   e4d5c:	699d      	ldr	r5, [r3, #24]
   e4d5e:	69d8      	ldr	r0, [r3, #28]
   e4d60:	f506 712e 	add.w	r1, r6, #696	; 0x2b8
   e4d64:	47a8      	blx	r5
   e4d66:	4605      	mov	r5, r0
   e4d68:	2800      	cmp	r0, #0
   e4d6a:	f040 8647 	bne.w	e59fc <mbedtls_ssl_handshake_client_step+0xd60>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_generate_random", ret );
        return( ret );
    }

    memcpy( p, ssl->handshake->randbytes, 32 );
   e4d6e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   e4d70:	f109 0106 	add.w	r1, r9, #6
   e4d74:	f503 722d 	add.w	r2, r3, #692	; 0x2b4
   e4d78:	f503 7335 	add.w	r3, r3, #724	; 0x2d4
   e4d7c:	e2c0      	b.n	e5300 <mbedtls_ssl_handshake_client_step+0x664>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server hello" ) );

    buf = ssl->in_msg;

    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   e4d7e:	2101      	movs	r1, #1
   e4d80:	4620      	mov	r0, r4
    int handshake_failure = 0;
    const mbedtls_ssl_ciphersuite_t *suite_info;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server hello" ) );

    buf = ssl->in_msg;
   e4d82:	f8d4 8064 	ldr.w	r8, [r4, #100]	; 0x64

    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   e4d86:	f7fa fe7b 	bl	dfa80 <mbedtls_ssl_read_record>
   e4d8a:	2800      	cmp	r0, #0
   e4d8c:	f040 808b 	bne.w	e4ea6 <mbedtls_ssl_handshake_client_step+0x20a>
        /* No alert on a read error. */
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
   e4d90:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   e4d92:	2b16      	cmp	r3, #22
   e4d94:	f040 809e 	bne.w	e4ed4 <mbedtls_ssl_handshake_client_step+0x238>
            ssl->handshake->verify_cookie_len = 0;
        }
    }
#endif /* MBEDTLS_SSL_PROTO_DTLS */

    if( ssl->in_hslen < 38 + mbedtls_ssl_hs_hdr_len( ssl ) ||
   e4d98:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   e4d9a:	2b29      	cmp	r3, #41	; 0x29
   e4d9c:	d94e      	bls.n	e4e3c <mbedtls_ssl_handshake_client_step+0x1a0>
   e4d9e:	f898 3000 	ldrb.w	r3, [r8]
   e4da2:	2b02      	cmp	r3, #2
   e4da4:	d14a      	bne.n	e4e3c <mbedtls_ssl_handshake_client_step+0x1a0>
   e4da6:	e012      	b.n	e4dce <mbedtls_ssl_handshake_client_step+0x132>
    }

    /*
     * Initialize update checksum functions
     */
    ssl->transform_negotiate->ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( i );
   e4da8:	4648      	mov	r0, r9
   e4daa:	f8d4 b040 	ldr.w	fp, [r4, #64]	; 0x40
   e4dae:	f7ff fbb5 	bl	e451c <mbedtls_ssl_ciphersuite_from_id>
   e4db2:	f8cb 0000 	str.w	r0, [fp]

    if( ssl->transform_negotiate->ciphersuite_info == NULL )
   e4db6:	6c23      	ldr	r3, [r4, #64]	; 0x40
   e4db8:	6819      	ldr	r1, [r3, #0]
   e4dba:	2900      	cmp	r1, #0
   e4dbc:	d140      	bne.n	e4e40 <mbedtls_ssl_handshake_client_step+0x1a4>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "ciphersuite info for %04x not found", i ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
   e4dbe:	2250      	movs	r2, #80	; 0x50
   e4dc0:	2102      	movs	r1, #2
   e4dc2:	4620      	mov	r0, r4
   e4dc4:	f7fa fe40 	bl	dfa48 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   e4dc8:	4dc6      	ldr	r5, [pc, #792]	; (e50e4 <mbedtls_ssl_handshake_client_step+0x448>)
   e4dca:	f000 be17 	b.w	e59fc <mbedtls_ssl_handshake_client_step+0xd60>
     */
    buf += mbedtls_ssl_hs_hdr_len( ssl );

    MBEDTLS_SSL_DEBUG_BUF( 3, "server hello, version", buf + 0, 2 );
    mbedtls_ssl_read_version( &ssl->major_ver, &ssl->minor_ver,
                      ssl->conf->transport, buf + 0 );
   e4dce:	4621      	mov	r1, r4
     * 37+n . 37+n  compression_method
     *
     * 38+n . 39+n  extensions length (optional)
     * 40+n .  ..   extensions
     */
    buf += mbedtls_ssl_hs_hdr_len( ssl );
   e4dd0:	f108 0a04 	add.w	sl, r8, #4

    MBEDTLS_SSL_DEBUG_BUF( 3, "server hello, version", buf + 0, 2 );
    mbedtls_ssl_read_version( &ssl->major_ver, &ssl->minor_ver,
                      ssl->conf->transport, buf + 0 );
   e4dd4:	f851 3b0c 	ldr.w	r3, [r1], #12
   e4dd8:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
   e4ddc:	f104 0008 	add.w	r0, r4, #8
   e4de0:	4653      	mov	r3, sl
   e4de2:	f3c2 0240 	ubfx	r2, r2, #1, #1
   e4de6:	f7fb fe4a 	bl	e0a7e <mbedtls_ssl_read_version>

    if( ssl->major_ver < ssl->conf->min_major_ver ||
   e4dea:	6823      	ldr	r3, [r4, #0]
   e4dec:	68a2      	ldr	r2, [r4, #8]
   e4dee:	f893 107a 	ldrb.w	r1, [r3, #122]	; 0x7a
   e4df2:	428a      	cmp	r2, r1
   e4df4:	f2c0 8444 	blt.w	e5680 <mbedtls_ssl_handshake_client_step+0x9e4>
        ssl->minor_ver < ssl->conf->min_minor_ver ||
   e4df8:	68e1      	ldr	r1, [r4, #12]

    MBEDTLS_SSL_DEBUG_BUF( 3, "server hello, version", buf + 0, 2 );
    mbedtls_ssl_read_version( &ssl->major_ver, &ssl->minor_ver,
                      ssl->conf->transport, buf + 0 );

    if( ssl->major_ver < ssl->conf->min_major_ver ||
   e4dfa:	f893 007b 	ldrb.w	r0, [r3, #123]	; 0x7b
   e4dfe:	4281      	cmp	r1, r0
   e4e00:	f2c0 843e 	blt.w	e5680 <mbedtls_ssl_handshake_client_step+0x9e4>
        ssl->minor_ver < ssl->conf->min_minor_ver ||
   e4e04:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
   e4e08:	4282      	cmp	r2, r0
   e4e0a:	f300 8439 	bgt.w	e5680 <mbedtls_ssl_handshake_client_step+0x9e4>
        ssl->major_ver > ssl->conf->max_major_ver ||
   e4e0e:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
   e4e12:	4299      	cmp	r1, r3
   e4e14:	f300 8434 	bgt.w	e5680 <mbedtls_ssl_handshake_client_step+0x9e4>
                           ( (uint32_t) buf[2] << 24 ) |
                           ( (uint32_t) buf[3] << 16 ) |
                           ( (uint32_t) buf[4] <<  8 ) |
                           ( (uint32_t) buf[5]       ) ) );

    memcpy( ssl->handshake->randbytes + 32, buf + 2, 32 );
   e4e18:	6b23      	ldr	r3, [r4, #48]	; 0x30
   e4e1a:	f108 0206 	add.w	r2, r8, #6
   e4e1e:	f503 7335 	add.w	r3, r3, #724	; 0x2d4
   e4e22:	f108 0126 	add.w	r1, r8, #38	; 0x26
   e4e26:	f852 0b04 	ldr.w	r0, [r2], #4
   e4e2a:	f843 0b04 	str.w	r0, [r3], #4
   e4e2e:	428a      	cmp	r2, r1
   e4e30:	d1f9      	bne.n	e4e26 <mbedtls_ssl_handshake_client_step+0x18a>

    n = buf[34];
   e4e32:	f898 6026 	ldrb.w	r6, [r8, #38]	; 0x26

    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, random bytes", buf + 2, 32 );

    if( n > 32 )
   e4e36:	2e20      	cmp	r6, #32
   e4e38:	f240 8429 	bls.w	e568e <mbedtls_ssl_handshake_client_step+0x9f2>

    if( len == 0 || (size_t)( buf[0] + 1 ) != len )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
   e4e3c:	2232      	movs	r2, #50	; 0x32
   e4e3e:	e029      	b.n	e4e94 <mbedtls_ssl_handshake_client_step+0x1f8>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
    }

    mbedtls_ssl_optimize_checksum( ssl, ssl->transform_negotiate->ciphersuite_info );
   e4e40:	4620      	mov	r0, r4
   e4e42:	f7fb f817 	bl	dfe74 <mbedtls_ssl_optimize_checksum>
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, session id", buf + 35, n );

    /*
     * Check if the session can be resumed
     */
    if( ssl->handshake->resume == 0 || n == 0 ||
   e4e46:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
   e4e4a:	f8db 3348 	ldr.w	r3, [fp, #840]	; 0x348
   e4e4e:	f108 0827 	add.w	r8, r8, #39	; 0x27
   e4e52:	2b00      	cmp	r3, #0
   e4e54:	f040 844d 	bne.w	e56f2 <mbedtls_ssl_handshake_client_step+0xa56>
        ssl->session_negotiate->ciphersuite != i ||
        ssl->session_negotiate->compression != comp ||
        ssl->session_negotiate->id_len != n ||
        memcmp( ssl->session_negotiate->id, buf + 35, n ) != 0 )
    {
        ssl->state++;
   e4e58:	6863      	ldr	r3, [r4, #4]
   e4e5a:	3301      	adds	r3, #1
   e4e5c:	6063      	str	r3, [r4, #4]
        ssl->handshake->resume = 0;
   e4e5e:	2300      	movs	r3, #0
   e4e60:	f8cb 3348 	str.w	r3, [fp, #840]	; 0x348
#if defined(MBEDTLS_HAVE_TIME)
        ssl->session_negotiate->start = mbedtls_time( NULL );
#endif
        ssl->session_negotiate->ciphersuite = i;
   e4e64:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   e4e66:	f8c2 9000 	str.w	r9, [r2]
        ssl->session_negotiate->compression = comp;
   e4e6a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   e4e6c:	6053      	str	r3, [r2, #4]
        ssl->session_negotiate->id_len = n;
   e4e6e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e4e70:	609e      	str	r6, [r3, #8]
        memcpy( ssl->session_negotiate->id, buf + 35, n );
   e4e72:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   e4e74:	4632      	mov	r2, r6
   e4e76:	4641      	mov	r1, r8
   e4e78:	300c      	adds	r0, #12
   e4e7a:	f004 fe1c 	bl	e9ab6 <memcpy>
     * Perform cipher suite validation in same way as in ssl_write_client_hello.
     */
    i = 0;
    while( 1 )
    {
        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i] == 0 )
   e4e7e:	6823      	ldr	r3, [r4, #0]
   e4e80:	68e2      	ldr	r2, [r4, #12]
   e4e82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   e4e86:	3b04      	subs	r3, #4
   e4e88:	f853 0f04 	ldr.w	r0, [r3, #4]!
   e4e8c:	2800      	cmp	r0, #0
   e4e8e:	f040 8458 	bne.w	e5742 <mbedtls_ssl_handshake_client_step+0xaa6>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
   e4e92:	222f      	movs	r2, #47	; 0x2f
        p++;
    }

    MBEDTLS_SSL_DEBUG_MSG( 1, ( "no point format in common" ) );
    mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                    MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );
   e4e94:	2102      	movs	r1, #2
   e4e96:	4620      	mov	r0, r4
   e4e98:	f7fa fdd6 	bl	dfa48 <mbedtls_ssl_send_alert_message>
   e4e9c:	f000 bcd7 	b.w	e584e <mbedtls_ssl_handshake_client_step+0xbb2>
       case MBEDTLS_SSL_SERVER_HELLO:
           ret = ssl_parse_server_hello( ssl );
           break;

       case MBEDTLS_SSL_SERVER_CERTIFICATE:
           ret = mbedtls_ssl_parse_certificate( ssl );
   e4ea0:	4620      	mov	r0, r4
   e4ea2:	f7fb fcad 	bl	e0800 <mbedtls_ssl_parse_certificate>
   e4ea6:	4605      	mov	r5, r0
           break;
   e4ea8:	f000 bda8 	b.w	e59fc <mbedtls_ssl_handshake_client_step+0xd60>

static int ssl_parse_server_key_exchange( mbedtls_ssl_context *ssl )
{
    int ret;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
   e4eac:	6c23      	ldr	r3, [r4, #64]	; 0x40
   e4eae:	f8d3 8000 	ldr.w	r8, [r3]
    unsigned char *p = NULL, *end = NULL;
   e4eb2:	2300      	movs	r3, #0
   e4eb4:	930c      	str	r3, [sp, #48]	; 0x30

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server key exchange" ) );

#if defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA )
   e4eb6:	f898 300a 	ldrb.w	r3, [r8, #10]
   e4eba:	2b01      	cmp	r3, #1
   e4ebc:	d101      	bne.n	e4ec2 <mbedtls_ssl_handshake_client_step+0x226>
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse server key exchange" ) );
        ssl->state++;
   e4ebe:	2305      	movs	r3, #5
   e4ec0:	e0c4      	b.n	e504c <mbedtls_ssl_handshake_client_step+0x3b0>
    {
        goto start_processing;
    }
#endif

    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   e4ec2:	2101      	movs	r1, #1
   e4ec4:	4620      	mov	r0, r4
   e4ec6:	f7fa fddb 	bl	dfa80 <mbedtls_ssl_read_record>
   e4eca:	2800      	cmp	r0, #0
   e4ecc:	d1eb      	bne.n	e4ea6 <mbedtls_ssl_handshake_client_step+0x20a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
   e4ece:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   e4ed0:	2b16      	cmp	r3, #22
   e4ed2:	d001      	beq.n	e4ed8 <mbedtls_ssl_handshake_client_step+0x23c>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
   e4ed4:	220a      	movs	r2, #10
   e4ed6:	e09e      	b.n	e5016 <mbedtls_ssl_handshake_client_step+0x37a>

    /*
     * ServerKeyExchange may be skipped with PSK and RSA-PSK when the server
     * doesn't use a psk_identity_hint
     */
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_KEY_EXCHANGE )
   e4ed8:	6e63      	ldr	r3, [r4, #100]	; 0x64
   e4eda:	781a      	ldrb	r2, [r3, #0]
   e4edc:	2a0c      	cmp	r2, #12
   e4ede:	f898 200a 	ldrb.w	r2, [r8, #10]
   e4ee2:	d007      	beq.n	e4ef4 <mbedtls_ssl_handshake_client_step+0x258>
    {
        if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
   e4ee4:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
   e4ee8:	2a05      	cmp	r2, #5
   e4eea:	d1f3      	bne.n	e4ed4 <mbedtls_ssl_handshake_client_step+0x238>
            ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK )
        {
            /* Current message is probably either
             * CertificateRequest or ServerHelloDone */
            ssl->keep_current_message = 1;
   e4eec:	2301      	movs	r3, #1
   e4eee:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
   e4ef2:	e0a9      	b.n	e5048 <mbedtls_ssl_handshake_client_step+0x3ac>
        ssl->handshake->ecrs_state = ssl_ecrs_ske_start_processing;

start_processing:
#endif
    p   = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );
    end = ssl->in_msg + ssl->in_hslen;
   e4ef4:	6fa6      	ldr	r6, [r4, #120]	; 0x78
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server key exchange", p, end - p );

#if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
   e4ef6:	1f50      	subs	r0, r2, #5
    if( ssl->handshake->ecrs_enabled )
        ssl->handshake->ecrs_state = ssl_ecrs_ske_start_processing;

start_processing:
#endif
    p   = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );
   e4ef8:	1d19      	adds	r1, r3, #4
    end = ssl->in_msg + ssl->in_hslen;
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server key exchange", p, end - p );

#if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
   e4efa:	2803      	cmp	r0, #3
    if( ssl->handshake->ecrs_enabled )
        ssl->handshake->ecrs_state = ssl_ecrs_ske_start_processing;

start_processing:
#endif
    p   = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );
   e4efc:	910c      	str	r1, [sp, #48]	; 0x30
    end = ssl->in_msg + ssl->in_hslen;
   e4efe:	441e      	add	r6, r3
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server key exchange", p, end - p );

#if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
   e4f00:	d903      	bls.n	e4f0a <mbedtls_ssl_handshake_client_step+0x26e>
#endif /* MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED ||
          MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED */
#if defined(MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED) ||                     \
    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED) ||                     \
    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED)
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_RSA ||
   e4f02:	1ed3      	subs	r3, r2, #3
   e4f04:	2b01      	cmp	r3, #1
   e4f06:	d816      	bhi.n	e4f36 <mbedtls_ssl_handshake_client_step+0x29a>
   e4f08:	e018      	b.n	e4f3c <mbedtls_ssl_handshake_client_step+0x2a0>
    /*
     * PSK parameters:
     *
     * opaque psk_identity_hint<0..2^16-1>;
     */
    if( end - (*p) < 2 )
   e4f0a:	1a71      	subs	r1, r6, r1
   e4f0c:	2901      	cmp	r1, #1
   e4f0e:	f340 84a0 	ble.w	e5852 <mbedtls_ssl_handshake_client_step+0xbb6>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message "
                                    "(psk_identity_hint length)" ) );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );
    }
    len = (*p)[0] << 8 | (*p)[1];
   e4f12:	7918      	ldrb	r0, [r3, #4]
   e4f14:	7959      	ldrb	r1, [r3, #5]
    *p += 2;
   e4f16:	3306      	adds	r3, #6
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message "
                                    "(psk_identity_hint length)" ) );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );
    }
    len = (*p)[0] << 8 | (*p)[1];
   e4f18:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
    *p += 2;

    if( end - (*p) < (int) len )
   e4f1c:	1af0      	subs	r0, r6, r3
   e4f1e:	4281      	cmp	r1, r0
   e4f20:	dd02      	ble.n	e4f28 <mbedtls_ssl_handshake_client_step+0x28c>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message "
                                    "(psk_identity_hint length)" ) );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );
    }
    len = (*p)[0] << 8 | (*p)[1];
    *p += 2;
   e4f22:	930c      	str	r3, [sp, #48]	; 0x30
   e4f24:	f000 bc95 	b.w	e5852 <mbedtls_ssl_handshake_client_step+0xbb6>
    /*
     * Note: we currently ignore the PKS identity hint, as we only allow one
     * PSK to be provisionned on the client. This could be changed later if
     * someone needs that feature.
     */
    *p += len;
   e4f28:	440b      	add	r3, r1
   e4f2a:	930c      	str	r3, [sp, #48]	; 0x30
    } /* FALLTROUGH */
#endif /* MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED */

#if defined(MBEDTLS_KEY_EXCHANGE_PSK_ENABLED) ||                       \
    defined(MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED)
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
   e4f2c:	f002 03fd 	and.w	r3, r2, #253	; 0xfd
   e4f30:	2b05      	cmp	r3, #5
   e4f32:	d1e6      	bne.n	e4f02 <mbedtls_ssl_handshake_client_step+0x266>
   e4f34:	e01a      	b.n	e4f6c <mbedtls_ssl_handshake_client_step+0x2d0>
#endif /* MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED ||
          MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED */
#if defined(MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED) ||                     \
    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED) ||                     \
    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED)
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_RSA ||
   e4f36:	2a08      	cmp	r2, #8
   e4f38:	f040 84b9 	bne.w	e58ae <mbedtls_ssl_handshake_client_step+0xc12>
     * struct {
     *     ECParameters curve_params;
     *     ECPoint      public;
     * } ServerECDHParams;
     */
    if( ( ret = mbedtls_ecdh_read_params( &ssl->handshake->ecdh_ctx,
   e4f3c:	6b20      	ldr	r0, [r4, #48]	; 0x30
   e4f3e:	4632      	mov	r2, r6
   e4f40:	a90c      	add	r1, sp, #48	; 0x30
   e4f42:	3004      	adds	r0, #4
   e4f44:	f7f1 f83e 	bl	d5fc4 <mbedtls_ecdh_read_params>
   e4f48:	2800      	cmp	r0, #0
   e4f4a:	f040 8482 	bne.w	e5852 <mbedtls_ssl_handshake_client_step+0xbb6>
static int ssl_check_server_ecdh_params( const mbedtls_ssl_context *ssl )
{
    const mbedtls_ecp_curve_info *curve_info;
    mbedtls_ecp_group_id grp_id;
#if defined(MBEDTLS_ECDH_LEGACY_CONTEXT)
    grp_id = ssl->handshake->ecdh_ctx.grp.id;
   e4f4e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   e4f50:	791f      	ldrb	r7, [r3, #4]
#else
    grp_id = ssl->handshake->ecdh_ctx.grp_id;
#endif

    curve_info = mbedtls_ecp_curve_info_from_grp_id( grp_id );
   e4f52:	4638      	mov	r0, r7
   e4f54:	f7f3 ff4a 	bl	d8dec <mbedtls_ecp_curve_info_from_grp_id>
    if( curve_info == NULL )
   e4f58:	2800      	cmp	r0, #0
   e4f5a:	f000 847a 	beq.w	e5852 <mbedtls_ssl_handshake_client_step+0xbb6>
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "ECDH curve: %s", curve_info->name ) );

#if defined(MBEDTLS_ECP_C)
    if( mbedtls_ssl_check_curve( ssl, grp_id ) != 0 )
   e4f5e:	4639      	mov	r1, r7
   e4f60:	4620      	mov	r0, r4
   e4f62:	f7fb fbf1 	bl	e0748 <mbedtls_ssl_check_curve>
   e4f66:	2800      	cmp	r0, #0
   e4f68:	f040 8473 	bne.w	e5852 <mbedtls_ssl_handshake_client_step+0xbb6>
#endif /* MBEDTLS_KEY_EXCHANGE__SOME__ECDHE_ENABLED) */

#if defined(MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED)
static inline int mbedtls_ssl_ciphersuite_uses_server_signature( const mbedtls_ssl_ciphersuite_t *info )
{
    switch( info->key_exchange )
   e4f6c:	f898 300a 	ldrb.w	r3, [r8, #10]
   e4f70:	3b02      	subs	r3, #2
   e4f72:	2b02      	cmp	r3, #2
   e4f74:	d868      	bhi.n	e5048 <mbedtls_ssl_handshake_client_step+0x3ac>

        /*
         * Handle the digitally-signed structure
         */
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
   e4f76:	68e3      	ldr	r3, [r4, #12]
   e4f78:	2b03      	cmp	r3, #3
   e4f7a:	f040 8498 	bne.w	e58ae <mbedtls_ssl_handshake_client_step+0xc12>
        size_t sig_len, hashlen;
        unsigned char hash[64];
        mbedtls_md_type_t md_alg = MBEDTLS_MD_NONE;
        mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
        unsigned char *params = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );
        size_t params_len = p - params;
   e4f7e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    if( ssl->minor_ver != MBEDTLS_SSL_MINOR_VERSION_3 )
    {
        return( 0 );
    }

    if( (*p) + 2 > end )
   e4f80:	1cbb      	adds	r3, r7, #2
   e4f82:	429e      	cmp	r6, r3
   e4f84:	f0c0 8465 	bcc.w	e5852 <mbedtls_ssl_handshake_client_step+0xbb6>
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );

    /*
     * Get hash algorithm
     */
    if( ( *md_alg = mbedtls_ssl_md_alg_from_hash( (*p)[0] ) ) == MBEDTLS_MD_NONE )
   e4f88:	7838      	ldrb	r0, [r7, #0]
    {
        size_t sig_len, hashlen;
        unsigned char hash[64];
        mbedtls_md_type_t md_alg = MBEDTLS_MD_NONE;
        mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
        unsigned char *params = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );
   e4f8a:	f8d4 a064 	ldr.w	sl, [r4, #100]	; 0x64
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );

    /*
     * Get hash algorithm
     */
    if( ( *md_alg = mbedtls_ssl_md_alg_from_hash( (*p)[0] ) ) == MBEDTLS_MD_NONE )
   e4f8e:	f7fb fbc7 	bl	e0720 <mbedtls_ssl_md_alg_from_hash>
   e4f92:	4681      	mov	r9, r0
   e4f94:	2800      	cmp	r0, #0
   e4f96:	f000 845c 	beq.w	e5852 <mbedtls_ssl_handshake_client_step+0xbb6>
    }

    /*
     * Get signature algorithm
     */
    if( ( *pk_alg = mbedtls_ssl_pk_alg_from_sig( (*p)[1] ) ) == MBEDTLS_PK_NONE )
   e4f9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   e4f9c:	7858      	ldrb	r0, [r3, #1]
   e4f9e:	f7fb fbb7 	bl	e0710 <mbedtls_ssl_pk_alg_from_sig>
   e4fa2:	4683      	mov	fp, r0
   e4fa4:	2800      	cmp	r0, #0
   e4fa6:	f000 8454 	beq.w	e5852 <mbedtls_ssl_handshake_client_step+0xbb6>
    }

    /*
     * Check if the hash is acceptable
     */
    if( mbedtls_ssl_check_sig_hash( ssl, *md_alg ) != 0 )
   e4faa:	4649      	mov	r1, r9
   e4fac:	4620      	mov	r0, r4
   e4fae:	f7fb fbd9 	bl	e0764 <mbedtls_ssl_check_sig_hash>
   e4fb2:	2800      	cmp	r0, #0
   e4fb4:	f040 844d 	bne.w	e5852 <mbedtls_ssl_handshake_client_step+0xbb6>
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "Server used SignatureAlgorithm %d", (*p)[1] ) );
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "Server used HashAlgorithm %d", (*p)[0] ) );
    *p += 2;
   e4fb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
                mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                                MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
                return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );
            }

            if( pk_alg != mbedtls_ssl_get_ciphersuite_sig_pk_alg( ciphersuite_info ) )
   e4fba:	4640      	mov	r0, r8
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "Server used SignatureAlgorithm %d", (*p)[1] ) );
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "Server used HashAlgorithm %d", (*p)[0] ) );
    *p += 2;
   e4fbc:	3302      	adds	r3, #2
   e4fbe:	930c      	str	r3, [sp, #48]	; 0x30
                mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                                MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
                return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );
            }

            if( pk_alg != mbedtls_ssl_get_ciphersuite_sig_pk_alg( ciphersuite_info ) )
   e4fc0:	f7ff fae0 	bl	e4584 <mbedtls_ssl_get_ciphersuite_sig_pk_alg>
   e4fc4:	4558      	cmp	r0, fp
   e4fc6:	4680      	mov	r8, r0
   e4fc8:	f040 8443 	bne.w	e5852 <mbedtls_ssl_handshake_client_step+0xbb6>

        /*
         * Read signature
         */

        if( p > end - 2 )
   e4fcc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   e4fce:	1eb2      	subs	r2, r6, #2
   e4fd0:	4293      	cmp	r3, r2
   e4fd2:	f200 8445 	bhi.w	e5860 <mbedtls_ssl_handshake_client_step+0xbc4>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message" ) );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );
        }
        sig_len = ( p[0] << 8 ) | p[1];
   e4fd6:	f893 b000 	ldrb.w	fp, [r3]
   e4fda:	785a      	ldrb	r2, [r3, #1]
   e4fdc:	ea42 2b0b 	orr.w	fp, r2, fp, lsl #8
        p += 2;
   e4fe0:	3302      	adds	r3, #2

        if( p != end - sig_len )
   e4fe2:	ebcb 0606 	rsb	r6, fp, r6
   e4fe6:	42b3      	cmp	r3, r6
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );
        }
        sig_len = ( p[0] << 8 ) | p[1];
        p += 2;
   e4fe8:	930c      	str	r3, [sp, #48]	; 0x30

        if( p != end - sig_len )
   e4fea:	f040 8439 	bne.w	e5860 <mbedtls_ssl_handshake_client_step+0xbc4>
    {
        size_t sig_len, hashlen;
        unsigned char hash[64];
        mbedtls_md_type_t md_alg = MBEDTLS_MD_NONE;
        mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
        unsigned char *params = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );
   e4fee:	f10a 0304 	add.w	r3, sl, #4
          MBEDTLS_SSL_PROTO_TLS1_1 */
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( md_alg != MBEDTLS_MD_NONE )
        {
            ret = mbedtls_ssl_get_key_exchange_md_tls1_2( ssl, hash, &hashlen,
   e4ff2:	1aff      	subs	r7, r7, r3
   e4ff4:	f8cd 9004 	str.w	r9, [sp, #4]
   e4ff8:	9700      	str	r7, [sp, #0]
   e4ffa:	aa0d      	add	r2, sp, #52	; 0x34
   e4ffc:	a90e      	add	r1, sp, #56	; 0x38
   e4ffe:	4620      	mov	r0, r4
   e5000:	f7fb fd42 	bl	e0a88 <mbedtls_ssl_get_key_exchange_md_tls1_2>
                                                          params, params_len,
                                                          md_alg );
            if( ret != 0 )
   e5004:	2800      	cmp	r0, #0
   e5006:	f47f af4e 	bne.w	e4ea6 <mbedtls_ssl_handshake_client_step+0x20a>
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        MBEDTLS_SSL_DEBUG_BUF( 3, "parameters hash", hash, hashlen );

        if( ssl->session_negotiate->peer_cert == NULL )
   e500a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e500c:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
   e500e:	2800      	cmp	r0, #0
   e5010:	f040 8428 	bne.w	e5864 <mbedtls_ssl_handshake_client_step+0xbc8>
        {
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "certificate required" ) );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );
   e5014:	2228      	movs	r2, #40	; 0x28
   e5016:	2102      	movs	r1, #2
   e5018:	4620      	mov	r0, r4
   e501a:	f7fa fd15 	bl	dfa48 <mbedtls_ssl_send_alert_message>
   e501e:	e16b      	b.n	e52f8 <mbedtls_ssl_handshake_client_step+0x65c>
{
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server hello done" ) );

    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   e5020:	2101      	movs	r1, #1
   e5022:	4620      	mov	r0, r4
   e5024:	f7fa fd2c 	bl	dfa80 <mbedtls_ssl_read_record>
   e5028:	2800      	cmp	r0, #0
   e502a:	f47f af3c 	bne.w	e4ea6 <mbedtls_ssl_handshake_client_step+0x20a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
   e502e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   e5030:	2b16      	cmp	r3, #22
   e5032:	f040 8161 	bne.w	e52f8 <mbedtls_ssl_handshake_client_step+0x65c>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello done message" ) );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
    }

    if( ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ||
   e5036:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   e5038:	2b04      	cmp	r3, #4
   e503a:	f040 847d 	bne.w	e5938 <mbedtls_ssl_handshake_client_step+0xc9c>
        ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_HELLO_DONE )
   e503e:	6e63      	ldr	r3, [r4, #100]	; 0x64
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello done message" ) );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
    }

    if( ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ||
   e5040:	781b      	ldrb	r3, [r3, #0]
   e5042:	2b0e      	cmp	r3, #14
   e5044:	f040 8478 	bne.w	e5938 <mbedtls_ssl_handshake_client_step+0xc9c>
        }
    }
#endif /* MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED */

exit:
    ssl->state++;
   e5048:	6863      	ldr	r3, [r4, #4]
   e504a:	3301      	adds	r3, #1
   e504c:	6063      	str	r3, [r4, #4]
   e504e:	f000 bcd5 	b.w	e59fc <mbedtls_ssl_handshake_client_step+0xd60>
    int ret;
    unsigned char *buf;
    size_t n = 0;
    size_t cert_type_len = 0, dn_len = 0;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
   e5052:	6c23      	ldr	r3, [r4, #64]	; 0x40
   e5054:	681b      	ldr	r3, [r3, #0]
   e5056:	7a9b      	ldrb	r3, [r3, #10]
   e5058:	3b01      	subs	r3, #1
   e505a:	b2db      	uxtb	r3, r3
   e505c:	2b09      	cmp	r3, #9
   e505e:	f200 8428 	bhi.w	e58b2 <mbedtls_ssl_handshake_client_step+0xc16>
   e5062:	2601      	movs	r6, #1
   e5064:	fa06 f303 	lsl.w	r3, r6, r3
   e5068:	f240 320f 	movw	r2, #783	; 0x30f
   e506c:	401a      	ands	r2, r3
   e506e:	2a00      	cmp	r2, #0
   e5070:	f000 841f 	beq.w	e58b2 <mbedtls_ssl_handshake_client_step+0xc16>
   e5074:	f000 bc20 	b.w	e58b8 <mbedtls_ssl_handshake_client_step+0xc1c>
        *      ( CertificateVerify  )
        *        ChangeCipherSpec
        *        Finished
        */
       case MBEDTLS_SSL_CLIENT_CERTIFICATE:
           ret = mbedtls_ssl_write_certificate( ssl );
   e5078:	4620      	mov	r0, r4
   e507a:	f7fa fe57 	bl	dfd2c <mbedtls_ssl_write_certificate>
   e507e:	e712      	b.n	e4ea6 <mbedtls_ssl_handshake_client_step+0x20a>
static int ssl_write_client_key_exchange( mbedtls_ssl_context *ssl )
{
    int ret;
    size_t i, n;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
   e5080:	6c23      	ldr	r3, [r4, #64]	; 0x40
   e5082:	681f      	ldr	r7, [r3, #0]
#endif /* MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED */
#if defined(MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED) ||                     \
    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED) ||                   \
    defined(MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED) ||                      \
    defined(MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED)
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_RSA ||
   e5084:	7abb      	ldrb	r3, [r7, #10]
   e5086:	1eda      	subs	r2, r3, #3
   e5088:	2a01      	cmp	r2, #1
   e508a:	d902      	bls.n	e5092 <mbedtls_ssl_handshake_client_step+0x3f6>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA ||
   e508c:	3b09      	subs	r3, #9
   e508e:	2b01      	cmp	r3, #1
   e5090:	d82a      	bhi.n	e50e8 <mbedtls_ssl_handshake_client_step+0x44c>
#endif

        ret = mbedtls_ecdh_make_public( &ssl->handshake->ecdh_ctx,
                                &n,
                                &ssl->out_msg[i], 1000,
                                ssl->conf->f_rng, ssl->conf->p_rng );
   e5092:	6823      	ldr	r3, [r4, #0]

            mbedtls_ecdh_enable_restart( &ssl->handshake->ecdh_ctx );
        }
#endif

        ret = mbedtls_ecdh_make_public( &ssl->handshake->ecdh_ctx,
   e5094:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   e5098:	69d9      	ldr	r1, [r3, #28]
   e509a:	9101      	str	r1, [sp, #4]
   e509c:	6b20      	ldr	r0, [r4, #48]	; 0x30
   e509e:	699b      	ldr	r3, [r3, #24]
   e50a0:	9300      	str	r3, [sp, #0]
   e50a2:	3204      	adds	r2, #4
   e50a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   e50a8:	a90e      	add	r1, sp, #56	; 0x38
   e50aa:	3004      	adds	r0, #4
   e50ac:	f7f0 ffaa 	bl	d6004 <mbedtls_ecdh_make_public>
                                &n,
                                &ssl->out_msg[i], 1000,
                                ssl->conf->f_rng, ssl->conf->p_rng );
        if( ret != 0 )
   e50b0:	4605      	mov	r5, r0
   e50b2:	2800      	cmp	r0, #0
   e50b4:	f040 84a2 	bne.w	e59fc <mbedtls_ssl_handshake_client_step+0xd60>
#endif
        if( ( ret = mbedtls_ecdh_calc_secret( &ssl->handshake->ecdh_ctx,
                                      &ssl->handshake->pmslen,
                                       ssl->handshake->premaster,
                                       MBEDTLS_MPI_MAX_SIZE,
                                       ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
   e50b8:	6823      	ldr	r3, [r4, #0]

ecdh_calc_secret:
        if( ssl->handshake->ecrs_enabled )
            n = ssl->handshake->ecrs_n;
#endif
        if( ( ret = mbedtls_ecdh_calc_secret( &ssl->handshake->ecdh_ctx,
   e50ba:	6b20      	ldr	r0, [r4, #48]	; 0x30
   e50bc:	69da      	ldr	r2, [r3, #28]
   e50be:	9201      	str	r2, [sp, #4]
   e50c0:	699b      	ldr	r3, [r3, #24]
   e50c2:	9300      	str	r3, [sp, #0]
   e50c4:	f500 723d 	add.w	r2, r0, #756	; 0x2f4
   e50c8:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
   e50cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
   e50d0:	3004      	adds	r0, #4
   e50d2:	f7f0 ffbf 	bl	d6054 <mbedtls_ecdh_calc_secret>
   e50d6:	4605      	mov	r5, r0
   e50d8:	2800      	cmp	r0, #0
   e50da:	f040 848f 	bne.w	e59fc <mbedtls_ssl_handshake_client_step+0xd60>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA )
    {
        /*
         * ECDH key exchange -- send client public value
         */
        i = 4;
   e50de:	2604      	movs	r6, #4
   e50e0:	e04f      	b.n	e5182 <mbedtls_ssl_handshake_client_step+0x4e6>
   e50e2:	bf00      	nop
   e50e4:	ffff8f00 	.word	0xffff8f00
#endif /* MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED ||
          MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED ||
          MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED ||
          MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED */
#if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)
    if( mbedtls_ssl_ciphersuite_uses_psk( ciphersuite_info ) )
   e50e8:	4638      	mov	r0, r7
   e50ea:	f7ff fa6f 	bl	e45cc <mbedtls_ssl_ciphersuite_uses_psk>
   e50ee:	4603      	mov	r3, r0
   e50f0:	2800      	cmp	r0, #0
   e50f2:	d03c      	beq.n	e516e <mbedtls_ssl_handshake_client_step+0x4d2>
    {
        /*
         * opaque psk_identity<0..2^16-1>;
         */
        if( ssl->conf->psk == NULL || ssl->conf->psk_identity == NULL )
   e50f4:	6823      	ldr	r3, [r4, #0]
   e50f6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   e50f8:	2a00      	cmp	r2, #0
   e50fa:	f000 80ca 	beq.w	e5292 <mbedtls_ssl_handshake_client_step+0x5f6>
   e50fe:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   e5100:	2a00      	cmp	r2, #0
   e5102:	f000 80c6 	beq.w	e5292 <mbedtls_ssl_handshake_client_step+0x5f6>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no private key for PSK" ) );
            return( MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED );
        }

        i = 4;
        n = ssl->conf->psk_identity_len;
   e5106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   e5108:	930e      	str	r3, [sp, #56]	; 0x38

        if( i + 2 + n > MBEDTLS_SSL_OUT_CONTENT_LEN )
   e510a:	1d9a      	adds	r2, r3, #6
   e510c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   e5110:	d842      	bhi.n	e5198 <mbedtls_ssl_handshake_client_step+0x4fc>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "psk identity too long or "
                                        "SSL buffer too short" ) );
            return( MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL );
        }

        ssl->out_msg[i++] = (unsigned char)( n >> 8 );
   e5112:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   e5116:	0a19      	lsrs	r1, r3, #8
   e5118:	7111      	strb	r1, [r2, #4]
        ssl->out_msg[i++] = (unsigned char)( n      );
   e511a:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   e511e:	7153      	strb	r3, [r2, #5]

        memcpy( ssl->out_msg + i, ssl->conf->psk_identity, ssl->conf->psk_identity_len );
   e5120:	6823      	ldr	r3, [r4, #0]
   e5122:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   e5126:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   e5128:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
   e512a:	3006      	adds	r0, #6
   e512c:	f004 fcc3 	bl	e9ab6 <memcpy>
        i += ssl->conf->psk_identity_len;
   e5130:	6823      	ldr	r3, [r4, #0]
   e5132:	6f1e      	ldr	r6, [r3, #112]	; 0x70

#if defined(MBEDTLS_KEY_EXCHANGE_PSK_ENABLED)
        if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK )
   e5134:	7abb      	ldrb	r3, [r7, #10]
   e5136:	2b05      	cmp	r3, #5

        ssl->out_msg[i++] = (unsigned char)( n >> 8 );
        ssl->out_msg[i++] = (unsigned char)( n      );

        memcpy( ssl->out_msg + i, ssl->conf->psk_identity, ssl->conf->psk_identity_len );
        i += ssl->conf->psk_identity_len;
   e5138:	f106 0606 	add.w	r6, r6, #6

#if defined(MBEDTLS_KEY_EXCHANGE_PSK_ENABLED)
        if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK )
   e513c:	d102      	bne.n	e5144 <mbedtls_ssl_handshake_client_step+0x4a8>
        {
            n = 0;
   e513e:	2300      	movs	r3, #0
   e5140:	930e      	str	r3, [sp, #56]	; 0x38
   e5142:	e00c      	b.n	e515e <mbedtls_ssl_handshake_client_step+0x4c2>
        }
        else
#endif
#if defined(MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED)
        if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK )
   e5144:	2b07      	cmp	r3, #7
   e5146:	f040 83b2 	bne.w	e58ae <mbedtls_ssl_handshake_client_step+0xc12>
        {
            if( ( ret = ssl_write_encrypted_pms( ssl, i, &n, 2 ) ) != 0 )
   e514a:	2302      	movs	r3, #2
   e514c:	aa0e      	add	r2, sp, #56	; 0x38
   e514e:	4631      	mov	r1, r6
   e5150:	4620      	mov	r0, r4
   e5152:	f7ff fd31 	bl	e4bb8 <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj>
   e5156:	4605      	mov	r5, r0
   e5158:	2800      	cmp	r0, #0
   e515a:	f040 844f 	bne.w	e59fc <mbedtls_ssl_handshake_client_step+0xd60>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        if( ( ret = mbedtls_ssl_psk_derive_premaster( ssl,
   e515e:	7ab9      	ldrb	r1, [r7, #10]
   e5160:	4620      	mov	r0, r4
   e5162:	f7fa fa1b 	bl	df59c <mbedtls_ssl_psk_derive_premaster>
   e5166:	4605      	mov	r5, r0
   e5168:	b158      	cbz	r0, e5182 <mbedtls_ssl_handshake_client_step+0x4e6>
   e516a:	f000 bc47 	b.w	e59fc <mbedtls_ssl_handshake_client_step+0xd60>
        }
    }
    else
#endif /* MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED */
#if defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA )
   e516e:	7aba      	ldrb	r2, [r7, #10]
   e5170:	2a01      	cmp	r2, #1
   e5172:	f040 839c 	bne.w	e58ae <mbedtls_ssl_handshake_client_step+0xc12>
    {
        i = 4;
        if( ( ret = ssl_write_encrypted_pms( ssl, i, &n, 0 ) ) != 0 )
   e5176:	aa0e      	add	r2, sp, #56	; 0x38
   e5178:	2104      	movs	r1, #4
   e517a:	4620      	mov	r0, r4
   e517c:	f7ff fd1c 	bl	e4bb8 <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj>
   e5180:	e7a9      	b.n	e50d6 <mbedtls_ssl_handshake_client_step+0x43a>
        ((void) ciphersuite_info);
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    ssl->out_msglen  = i + n;
   e5182:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   e5184:	441e      	add	r6, r3
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
   e5186:	2316      	movs	r3, #22
   e5188:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
        ((void) ciphersuite_info);
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    ssl->out_msglen  = i + n;
   e518c:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_KEY_EXCHANGE;
   e5190:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   e5194:	2210      	movs	r2, #16
   e5196:	e074      	b.n	e5282 <mbedtls_ssl_handshake_client_step+0x5e6>

        if( i + 2 + n > MBEDTLS_SSL_OUT_CONTENT_LEN )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "psk identity too long or "
                                        "SSL buffer too short" ) );
            return( MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL );
   e5198:	4da8      	ldr	r5, [pc, #672]	; (e543c <mbedtls_ssl_handshake_client_step+0x7a0>)
           ret = mbedtls_ssl_write_certificate( ssl );
           break;

       case MBEDTLS_SSL_CLIENT_KEY_EXCHANGE:
           ret = ssl_write_client_key_exchange( ssl );
           break;
   e519a:	f000 bc2f 	b.w	e59fc <mbedtls_ssl_handshake_client_step+0xd60>
#else
static int ssl_write_certificate_verify( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
   e519e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    {
        goto sign;
    }
#endif

    if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
   e51a0:	4620      	mov	r0, r4
#else
static int ssl_write_certificate_verify( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
   e51a2:	681e      	ldr	r6, [r3, #0]
    size_t n = 0, offset = 0;
   e51a4:	2300      	movs	r3, #0
   e51a6:	930d      	str	r3, [sp, #52]	; 0x34
    {
        goto sign;
    }
#endif

    if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
   e51a8:	f7fa f88e 	bl	df2c8 <mbedtls_ssl_derive_keys>
   e51ac:	4605      	mov	r5, r0
   e51ae:	2800      	cmp	r0, #0
   e51b0:	f040 8424 	bne.w	e59fc <mbedtls_ssl_handshake_client_step+0xd60>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_derive_keys", ret );
        return( ret );
    }

    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
   e51b4:	7ab3      	ldrb	r3, [r6, #10]
   e51b6:	1f5a      	subs	r2, r3, #5
   e51b8:	2a03      	cmp	r2, #3
   e51ba:	f67f af45 	bls.w	e5048 <mbedtls_ssl_handshake_client_step+0x3ac>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
   e51be:	2b0b      	cmp	r3, #11
   e51c0:	f43f af42 	beq.w	e5048 <mbedtls_ssl_handshake_client_step+0x3ac>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate verify" ) );
        ssl->state++;
        return( 0 );
    }

    if( ssl->client_auth == 0 || mbedtls_ssl_own_cert( ssl ) == NULL )
   e51c4:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   e51c8:	2b00      	cmp	r3, #0
   e51ca:	f43f af3d 	beq.w	e5048 <mbedtls_ssl_handshake_client_step+0x3ac>

static inline mbedtls_x509_crt *mbedtls_ssl_own_cert( mbedtls_ssl_context *ssl )
{
    mbedtls_ssl_key_cert *key_cert;

    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
   e51ce:	6b22      	ldr	r2, [r4, #48]	; 0x30
   e51d0:	b112      	cbz	r2, e51d8 <mbedtls_ssl_handshake_client_step+0x53c>
   e51d2:	f8d2 3144 	ldr.w	r3, [r2, #324]	; 0x144
   e51d6:	b923      	cbnz	r3, e51e2 <mbedtls_ssl_handshake_client_step+0x546>
        key_cert = ssl->handshake->key_cert;
    else
        key_cert = ssl->conf->key_cert;
   e51d8:	6823      	ldr	r3, [r4, #0]
   e51da:	6d1b      	ldr	r3, [r3, #80]	; 0x50

    return( key_cert == NULL ? NULL : key_cert->cert );
   e51dc:	2b00      	cmp	r3, #0
   e51de:	f43f af33 	beq.w	e5048 <mbedtls_ssl_handshake_client_step+0x3ac>
   e51e2:	681b      	ldr	r3, [r3, #0]
   e51e4:	2b00      	cmp	r3, #0
   e51e6:	f43f af2f 	beq.w	e5048 <mbedtls_ssl_handshake_client_step+0x3ac>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate verify" ) );
        ssl->state++;
        return( 0 );
    }

    if( mbedtls_ssl_own_key( ssl ) == NULL )
   e51ea:	4620      	mov	r0, r4
   e51ec:	f7ff fcd7 	bl	e4b9e <mbedtls_ssl_own_key>
   e51f0:	2800      	cmp	r0, #0
   e51f2:	d04e      	beq.n	e5292 <mbedtls_ssl_handshake_client_step+0x5f6>
        ssl->handshake->ecrs_state = ssl_ecrs_crt_vrfy_sign;

sign:
#endif

    ssl->handshake->calc_verify( ssl, hash );
   e51f4:	f8d2 32a4 	ldr.w	r3, [r2, #676]	; 0x2a4
   e51f8:	a90e      	add	r1, sp, #56	; 0x38
   e51fa:	4620      	mov	r0, r4
   e51fc:	4798      	blx	r3
    }
    else
#endif /* MBEDTLS_SSL_PROTO_SSL3 || MBEDTLS_SSL_PROTO_TLS1 || \
          MBEDTLS_SSL_PROTO_TLS1_1 */
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
   e51fe:	68e3      	ldr	r3, [r4, #12]
   e5200:	2b03      	cmp	r3, #3
   e5202:	f040 8354 	bne.w	e58ae <mbedtls_ssl_handshake_client_step+0xc12>
         * shortcut.
         *
         * Reason: Otherwise we should have running hashes for SHA512 and SHA224
         *         in order to satisfy 'weird' needs from the server side.
         */
        if( ssl->transform_negotiate->ciphersuite_info->mac ==
   e5206:	6c23      	ldr	r3, [r4, #64]	; 0x40
   e5208:	681b      	ldr	r3, [r3, #0]
   e520a:	7a5d      	ldrb	r5, [r3, #9]
   e520c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   e5210:	2d07      	cmp	r5, #7
            MBEDTLS_MD_SHA384 )
        {
            md_alg = MBEDTLS_MD_SHA384;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA384;
   e5212:	bf0b      	itete	eq
   e5214:	2205      	moveq	r2, #5
        }
        else
        {
            md_alg = MBEDTLS_MD_SHA256;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
   e5216:	2204      	movne	r2, #4
         */
        if( ssl->transform_negotiate->ciphersuite_info->mac ==
            MBEDTLS_MD_SHA384 )
        {
            md_alg = MBEDTLS_MD_SHA384;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA384;
   e5218:	711a      	strbeq	r2, [r3, #4]
        }
        else
        {
            md_alg = MBEDTLS_MD_SHA256;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
   e521a:	711a      	strbne	r2, [r3, #4]
        }
        ssl->out_msg[5] = mbedtls_ssl_sig_from_pk( mbedtls_ssl_own_key( ssl ) );
   e521c:	4620      	mov	r0, r4
            md_alg = MBEDTLS_MD_SHA384;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA384;
        }
        else
        {
            md_alg = MBEDTLS_MD_SHA256;
   e521e:	bf18      	it	ne
   e5220:	2506      	movne	r5, #6
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
        }
        ssl->out_msg[5] = mbedtls_ssl_sig_from_pk( mbedtls_ssl_own_key( ssl ) );
   e5222:	f7ff fcbc 	bl	e4b9e <mbedtls_ssl_own_key>
   e5226:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
   e522a:	f7fb fa60 	bl	e06ee <mbedtls_ssl_sig_from_pk>
   e522e:	7170      	strb	r0, [r6, #5]
#if defined(MBEDTLS_SSL__ECP_RESTARTABLE)
    if( ssl->handshake->ecrs_enabled )
        rs_ctx = &ssl->handshake->ecrs_ctx.pk;
#endif

    if( ( ret = mbedtls_pk_sign_restartable( mbedtls_ssl_own_key( ssl ),
   e5230:	4620      	mov	r0, r4
   e5232:	f7ff fcb4 	bl	e4b9e <mbedtls_ssl_own_key>
                         md_alg, hash_start, hashlen,
                         ssl->out_msg + 6 + offset, &n,
                         ssl->conf->f_rng, ssl->conf->p_rng, rs_ctx ) ) != 0 )
   e5236:	6822      	ldr	r2, [r4, #0]
#if defined(MBEDTLS_SSL__ECP_RESTARTABLE)
    if( ssl->handshake->ecrs_enabled )
        rs_ctx = &ssl->handshake->ecrs_ctx.pk;
#endif

    if( ( ret = mbedtls_pk_sign_restartable( mbedtls_ssl_own_key( ssl ),
   e5238:	2300      	movs	r3, #0
   e523a:	9304      	str	r3, [sp, #16]
   e523c:	69d1      	ldr	r1, [r2, #28]
   e523e:	9103      	str	r1, [sp, #12]
   e5240:	6992      	ldr	r2, [r2, #24]
   e5242:	9202      	str	r2, [sp, #8]
   e5244:	aa0d      	add	r2, sp, #52	; 0x34
   e5246:	9201      	str	r2, [sp, #4]
   e5248:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   e524c:	3208      	adds	r2, #8
   e524e:	9200      	str	r2, [sp, #0]
   e5250:	4629      	mov	r1, r5
   e5252:	aa0e      	add	r2, sp, #56	; 0x38
   e5254:	f7f9 fdc6 	bl	dede4 <mbedtls_pk_sign_restartable>
   e5258:	4605      	mov	r5, r0
   e525a:	2800      	cmp	r0, #0
   e525c:	f040 83ce 	bne.w	e59fc <mbedtls_ssl_handshake_client_step+0xd60>
            ret = MBEDTLS_ERR_SSL_CRYPTO_IN_PROGRESS;
#endif
        return( ret );
    }

    ssl->out_msg[4 + offset] = (unsigned char)( n >> 8 );
   e5260:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   e5262:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   e5266:	0a19      	lsrs	r1, r3, #8
   e5268:	7191      	strb	r1, [r2, #6]
    ssl->out_msg[5 + offset] = (unsigned char)( n      );
   e526a:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   e526e:	71d3      	strb	r3, [r2, #7]

    ssl->out_msglen  = 6 + n + offset;
   e5270:	3308      	adds	r3, #8
   e5272:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
   e5276:	2316      	movs	r3, #22
   e5278:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE_VERIFY;
   e527c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   e5280:	220f      	movs	r2, #15
   e5282:	701a      	strb	r2, [r3, #0]

    ssl->state++;
   e5284:	6863      	ldr	r3, [r4, #4]
   e5286:	3301      	adds	r3, #1
   e5288:	6063      	str	r3, [r4, #4]

    if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
   e528a:	4620      	mov	r0, r4
   e528c:	f7fa fb3e 	bl	df90c <mbedtls_ssl_write_handshake_msg>
   e5290:	e609      	b.n	e4ea6 <mbedtls_ssl_handshake_client_step+0x20a>
    }

    if( mbedtls_ssl_own_key( ssl ) == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no private key for certificate" ) );
        return( MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED );
   e5292:	4d6b      	ldr	r5, [pc, #428]	; (e5440 <mbedtls_ssl_handshake_client_step+0x7a4>)
   e5294:	e3b2      	b.n	e59fc <mbedtls_ssl_handshake_client_step+0xd60>
       case MBEDTLS_SSL_CERTIFICATE_VERIFY:
           ret = ssl_write_certificate_verify( ssl );
           break;

       case MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC:
           ret = mbedtls_ssl_write_change_cipher_spec( ssl );
   e5296:	4620      	mov	r0, r4
   e5298:	f7fa fdae 	bl	dfdf8 <mbedtls_ssl_write_change_cipher_spec>
   e529c:	e603      	b.n	e4ea6 <mbedtls_ssl_handshake_client_step+0x20a>
           break;

       case MBEDTLS_SSL_CLIENT_FINISHED:
           ret = mbedtls_ssl_write_finished( ssl );
   e529e:	4620      	mov	r0, r4
   e52a0:	f7fa fdf6 	bl	dfe90 <mbedtls_ssl_write_finished>
   e52a4:	e5ff      	b.n	e4ea6 <mbedtls_ssl_handshake_client_step+0x20a>
    unsigned char *ticket;
    const unsigned char *msg;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse new session ticket" ) );

    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   e52a6:	2101      	movs	r1, #1
   e52a8:	4620      	mov	r0, r4
   e52aa:	f7fa fbe9 	bl	dfa80 <mbedtls_ssl_read_record>
   e52ae:	4681      	mov	r9, r0
   e52b0:	bb20      	cbnz	r0, e52fc <mbedtls_ssl_handshake_client_step+0x660>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
   e52b2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   e52b4:	2b16      	cmp	r3, #22
   e52b6:	f47f ae0d 	bne.w	e4ed4 <mbedtls_ssl_handshake_client_step+0x238>
     *
     * 0  .  3   ticket_lifetime_hint
     * 4  .  5   ticket_len (n)
     * 6  .  5+n ticket content
     */
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_NEW_SESSION_TICKET ||
   e52ba:	6e66      	ldr	r6, [r4, #100]	; 0x64
   e52bc:	7833      	ldrb	r3, [r6, #0]
   e52be:	2b04      	cmp	r3, #4
   e52c0:	d103      	bne.n	e52ca <mbedtls_ssl_handshake_client_step+0x62e>
        ssl->in_hslen < 6 + mbedtls_ssl_hs_hdr_len( ssl ) )
   e52c2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
     *
     * 0  .  3   ticket_lifetime_hint
     * 4  .  5   ticket_len (n)
     * 6  .  5+n ticket content
     */
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_NEW_SESSION_TICKET ||
   e52c4:	2b09      	cmp	r3, #9
   e52c6:	f200 834f 	bhi.w	e5968 <mbedtls_ssl_handshake_client_step+0xccc>

    if( ticket_len + 6 + mbedtls_ssl_hs_hdr_len( ssl ) != ssl->in_hslen )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad new session ticket message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
   e52ca:	2232      	movs	r2, #50	; 0x32
   e52cc:	2102      	movs	r1, #2
   e52ce:	4620      	mov	r0, r4
   e52d0:	f7fa fbba 	bl	dfa48 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_NEW_SESSION_TICKET );
   e52d4:	4d5b      	ldr	r5, [pc, #364]	; (e5444 <mbedtls_ssl_handshake_client_step+0x7a8>)
   e52d6:	e391      	b.n	e59fc <mbedtls_ssl_handshake_client_step+0xd60>
           ret = ssl_parse_new_session_ticket( ssl );
           break;
#endif

       case MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC:
           ret = mbedtls_ssl_parse_change_cipher_spec( ssl );
   e52d8:	4620      	mov	r0, r4
   e52da:	f7fa fd9b 	bl	dfe14 <mbedtls_ssl_parse_change_cipher_spec>
   e52de:	e5e2      	b.n	e4ea6 <mbedtls_ssl_handshake_client_step+0x20a>
           break;

       case MBEDTLS_SSL_SERVER_FINISHED:
           ret = mbedtls_ssl_parse_finished( ssl );
   e52e0:	4620      	mov	r0, r4
   e52e2:	f7fa fe11 	bl	dff08 <mbedtls_ssl_parse_finished>
   e52e6:	e5de      	b.n	e4ea6 <mbedtls_ssl_handshake_client_step+0x20a>
           break;

       case MBEDTLS_SSL_FLUSH_BUFFERS:
           MBEDTLS_SSL_DEBUG_MSG( 2, ( "handshake: done" ) );
           ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
   e52e8:	230f      	movs	r3, #15
   e52ea:	e6af      	b.n	e504c <mbedtls_ssl_handshake_client_step+0x3b0>
           break;

       case MBEDTLS_SSL_HANDSHAKE_WRAPUP:
           mbedtls_ssl_handshake_wrapup( ssl );
   e52ec:	4620      	mov	r0, r4
   e52ee:	f7fb f84d 	bl	e038c <mbedtls_ssl_handshake_wrapup>
           break;
   e52f2:	e383      	b.n	e59fc <mbedtls_ssl_handshake_client_step+0xd60>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write client hello" ) );

    if( ssl->conf->f_rng == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "no RNG provided") );
        return( MBEDTLS_ERR_SSL_NO_RNG );
   e52f4:	4d54      	ldr	r5, [pc, #336]	; (e5448 <mbedtls_ssl_handshake_client_step+0x7ac>)
   e52f6:	e381      	b.n	e59fc <mbedtls_ssl_handshake_client_step+0xd60>
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello done message" ) );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
   e52f8:	4d54      	ldr	r5, [pc, #336]	; (e544c <mbedtls_ssl_handshake_client_step+0x7b0>)
   e52fa:	e37f      	b.n	e59fc <mbedtls_ssl_handshake_client_step+0xd60>
    unsigned char *ticket;
    const unsigned char *msg;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse new session ticket" ) );

    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   e52fc:	4605      	mov	r5, r0
   e52fe:	e37d      	b.n	e59fc <mbedtls_ssl_handshake_client_step+0xd60>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_generate_random", ret );
        return( ret );
    }

    memcpy( p, ssl->handshake->randbytes, 32 );
   e5300:	f852 0b04 	ldr.w	r0, [r2], #4
   e5304:	f841 0b04 	str.w	r0, [r1], #4
   e5308:	429a      	cmp	r2, r3
   e530a:	d1f9      	bne.n	e5300 <mbedtls_ssl_handshake_client_step+0x664>
     *   ..   . ..    compression methods length (1 byte)
     *   ..   . ..    compression methods
     *   ..   . ..    extensions length (2 bytes)
     *   ..   . ..    extensions
     */
    n = ssl->session_negotiate->id_len;
   e530c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   e530e:	688b      	ldr	r3, [r1, #8]

    if( n < 16 || n > 32 ||
   e5310:	f1a3 0210 	sub.w	r2, r3, #16
   e5314:	2a10      	cmp	r2, #16
   e5316:	d806      	bhi.n	e5326 <mbedtls_ssl_handshake_client_step+0x68a>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
#endif
        ssl->handshake->resume == 0 )
   e5318:	6b22      	ldr	r2, [r4, #48]	; 0x30
     *   ..   . ..    extensions length (2 bytes)
     *   ..   . ..    extensions
     */
    n = ssl->session_negotiate->id_len;

    if( n < 16 || n > 32 ||
   e531a:	f8d2 2348 	ldr.w	r2, [r2, #840]	; 0x348
#if defined(MBEDTLS_SSL_RENEGOTIATION)
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
#endif
        ssl->handshake->resume == 0 )
    {
        n = 0;
   e531e:	2a00      	cmp	r2, #0
   e5320:	bf08      	it	eq
   e5322:	2300      	moveq	r3, #0
   e5324:	e000      	b.n	e5328 <mbedtls_ssl_handshake_client_step+0x68c>
   e5326:	2300      	movs	r3, #0
     */
#if defined(MBEDTLS_SSL_RENEGOTIATION)
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
#endif
    {
        if( ssl->session_negotiate->ticket != NULL &&
   e5328:	6e4a      	ldr	r2, [r1, #100]	; 0x64
   e532a:	b172      	cbz	r2, e534a <mbedtls_ssl_handshake_client_step+0x6ae>
   e532c:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   e532e:	b162      	cbz	r2, e534a <mbedtls_ssl_handshake_client_step+0x6ae>
                ssl->session_negotiate->ticket_len != 0 )
        {
            ret = ssl->conf->f_rng( ssl->conf->p_rng, ssl->session_negotiate->id, 32 );
   e5330:	6823      	ldr	r3, [r4, #0]
   e5332:	2220      	movs	r2, #32
   e5334:	699d      	ldr	r5, [r3, #24]
   e5336:	69d8      	ldr	r0, [r3, #28]
   e5338:	310c      	adds	r1, #12
   e533a:	47a8      	blx	r5

            if( ret != 0 )
   e533c:	4605      	mov	r5, r0
   e533e:	2800      	cmp	r0, #0
   e5340:	f040 835c 	bne.w	e59fc <mbedtls_ssl_handshake_client_step+0xd60>
                return( ret );

            ssl->session_negotiate->id_len = n = 32;
   e5344:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   e5346:	2320      	movs	r3, #32
   e5348:	6093      	str	r3, [r2, #8]
        }
    }
#endif /* MBEDTLS_SSL_SESSION_TICKETS */

    *p++ = (unsigned char) n;
   e534a:	f109 0627 	add.w	r6, r9, #39	; 0x27
   e534e:	f889 3026 	strb.w	r3, [r9, #38]	; 0x26

    for( i = 0; i < n; i++ )
   e5352:	2200      	movs	r2, #0
   e5354:	4293      	cmp	r3, r2
   e5356:	d005      	beq.n	e5364 <mbedtls_ssl_handshake_client_step+0x6c8>
        *p++ = ssl->session_negotiate->id[i];
   e5358:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   e535a:	4411      	add	r1, r2
   e535c:	7b09      	ldrb	r1, [r1, #12]
   e535e:	54b1      	strb	r1, [r6, r2]
    }
#endif /* MBEDTLS_SSL_SESSION_TICKETS */

    *p++ = (unsigned char) n;

    for( i = 0; i < n; i++ )
   e5360:	3201      	adds	r2, #1
   e5362:	e7f7      	b.n	e5354 <mbedtls_ssl_handshake_client_step+0x6b8>
   e5364:	441e      	add	r6, r3
#endif

    /*
     * Ciphersuite list
     */
    ciphersuites = ssl->conf->ciphersuite_list[ssl->minor_ver];
   e5366:	68e2      	ldr	r2, [r4, #12]
   e5368:	6823      	ldr	r3, [r4, #0]
   e536a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    unsigned char offer_compress;
    const int *ciphersuites;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info;
#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C) || \
    defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
    int uses_ec = 0;
   e536e:	f04f 0a00 	mov.w	sl, #0
    ciphersuites = ssl->conf->ciphersuite_list[ssl->minor_ver];

    /* Skip writing ciphersuite length for now */
    n = 0;
    q = p;
    p += 2;
   e5372:	1cb5      	adds	r5, r6, #2
   e5374:	f1a3 0804 	sub.w	r8, r3, #4
     * Ciphersuite list
     */
    ciphersuites = ssl->conf->ciphersuite_list[ssl->minor_ver];

    /* Skip writing ciphersuite length for now */
    n = 0;
   e5378:	4657      	mov	r7, sl
    q = p;
    p += 2;

    for( i = 0; ciphersuites[i] != 0; i++ )
   e537a:	f858 3f04 	ldr.w	r3, [r8, #4]!
   e537e:	b1fb      	cbz	r3, e53c0 <mbedtls_ssl_handshake_client_step+0x724>
    {
        ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( ciphersuites[i] );
   e5380:	4618      	mov	r0, r3
   e5382:	f7ff f8cb 	bl	e451c <mbedtls_ssl_ciphersuite_from_id>

        if( ssl_validate_ciphersuite( ciphersuite_info, ssl,
                                      ssl->conf->min_minor_ver,
   e5386:	6821      	ldr	r1, [r4, #0]

    for( i = 0; ciphersuites[i] != 0; i++ )
    {
        ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( ciphersuites[i] );

        if( ssl_validate_ciphersuite( ciphersuite_info, ssl,
   e5388:	f891 e079 	ldrb.w	lr, [r1, #121]	; 0x79
static int ssl_validate_ciphersuite( const mbedtls_ssl_ciphersuite_t * suite_info,
                                     const mbedtls_ssl_context * ssl,
                                     int min_minor_ver, int max_minor_ver )
{
    (void) ssl;
    if( suite_info == NULL )
   e538c:	2800      	cmp	r0, #0
   e538e:	d0f4      	beq.n	e537a <mbedtls_ssl_handshake_client_step+0x6de>
        return( 1 );

    if( suite_info->min_minor_ver > max_minor_ver ||
   e5390:	6903      	ldr	r3, [r0, #16]
   e5392:	459e      	cmp	lr, r3
   e5394:	dbf1      	blt.n	e537a <mbedtls_ssl_handshake_client_step+0x6de>
   e5396:	f891 107b 	ldrb.w	r1, [r1, #123]	; 0x7b
   e539a:	6983      	ldr	r3, [r0, #24]
   e539c:	4299      	cmp	r1, r3
   e539e:	dcec      	bgt.n	e537a <mbedtls_ssl_handshake_client_step+0x6de>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, add ciphersuite: %04x",
                                    ciphersuites[i] ) );

#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C) || \
    defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
        uses_ec |= mbedtls_ssl_ciphersuite_uses_ec( ciphersuite_info );
   e53a0:	f7ff f906 	bl	e45b0 <mbedtls_ssl_ciphersuite_uses_ec>
#endif

        n++;
        *p++ = (unsigned char)( ciphersuites[i] >> 8 );
   e53a4:	f8d8 3000 	ldr.w	r3, [r8]
   e53a8:	462a      	mov	r2, r5
   e53aa:	121b      	asrs	r3, r3, #8
   e53ac:	f802 3b02 	strb.w	r3, [r2], #2
        *p++ = (unsigned char)( ciphersuites[i]      );
   e53b0:	f8d8 3000 	ldr.w	r3, [r8]
   e53b4:	706b      	strb	r3, [r5, #1]
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, add ciphersuite: %04x",
                                    ciphersuites[i] ) );

#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C) || \
    defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
        uses_ec |= mbedtls_ssl_ciphersuite_uses_ec( ciphersuite_info );
   e53b6:	ea4a 0a00 	orr.w	sl, sl, r0
#endif

        n++;
   e53ba:	3701      	adds	r7, #1
        *p++ = (unsigned char)( ciphersuites[i] >> 8 );
        *p++ = (unsigned char)( ciphersuites[i]      );
   e53bc:	4615      	mov	r5, r2
   e53be:	e7dc      	b.n	e537a <mbedtls_ssl_handshake_client_step+0x6de>
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
#endif
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "adding EMPTY_RENEGOTIATION_INFO_SCSV" ) );
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO >> 8 );
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO      );
   e53c0:	22ff      	movs	r2, #255	; 0xff
        n++;
   e53c2:	3701      	adds	r7, #1
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
#endif
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "adding EMPTY_RENEGOTIATION_INFO_SCSV" ) );
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO >> 8 );
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO      );
   e53c4:	706a      	strb	r2, [r5, #1]
        *p++ = (unsigned char)( MBEDTLS_SSL_FALLBACK_SCSV_VALUE      );
        n++;
    }
#endif

    *q++ = (unsigned char)( n >> 7 );
   e53c6:	09fa      	lsrs	r2, r7, #7
#if defined(MBEDTLS_SSL_RENEGOTIATION)
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
#endif
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "adding EMPTY_RENEGOTIATION_INFO_SCSV" ) );
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO >> 8 );
   e53c8:	702b      	strb	r3, [r5, #0]
        n++;
    }
#endif

    *q++ = (unsigned char)( n >> 7 );
    *q++ = (unsigned char)( n << 1 );
   e53ca:	007f      	lsls	r7, r7, #1
        *p++ = (unsigned char)( MBEDTLS_SSL_FALLBACK_SCSV_VALUE      );
        n++;
    }
#endif

    *q++ = (unsigned char)( n >> 7 );
   e53cc:	7032      	strb	r2, [r6, #0]
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress len.: %d", 1 ) );
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress alg.: %d",
                            MBEDTLS_SSL_COMPRESS_NULL ) );

        *p++ = 1;
   e53ce:	2201      	movs	r2, #1
        n++;
    }
#endif

    *q++ = (unsigned char)( n >> 7 );
    *q++ = (unsigned char)( n << 1 );
   e53d0:	7077      	strb	r7, [r6, #1]
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress len.: %d", 1 ) );
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress alg.: %d",
                            MBEDTLS_SSL_COMPRESS_NULL ) );

        *p++ = 1;
   e53d2:	70aa      	strb	r2, [r5, #2]
        *p++ = MBEDTLS_SSL_COMPRESS_NULL;
   e53d4:	70eb      	strb	r3, [r5, #3]
static void ssl_write_hostname_ext( mbedtls_ssl_context *ssl,
                                    unsigned char *buf,
                                    size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
   e53d6:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
    size_t hostname_len;

    *olen = 0;

    if( ssl->hostname == NULL )
   e53da:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress len.: %d", 1 ) );
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress alg.: %d",
                            MBEDTLS_SSL_COMPRESS_NULL ) );

        *p++ = 1;
        *p++ = MBEDTLS_SSL_COMPRESS_NULL;
   e53de:	9307      	str	r3, [sp, #28]
   e53e0:	f105 0804 	add.w	r8, r5, #4
    }

    // First write extensions, then the total length
    //
#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
    ssl_write_hostname_ext( ssl, p + 2 + ext_len, &olen );
   e53e4:	f105 0b06 	add.w	fp, r5, #6
static void ssl_write_hostname_ext( mbedtls_ssl_context *ssl,
                                    unsigned char *buf,
                                    size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
   e53e8:	f506 5600 	add.w	r6, r6, #8192	; 0x2000
    size_t hostname_len;

    *olen = 0;

    if( ssl->hostname == NULL )
   e53ec:	b318      	cbz	r0, e5436 <mbedtls_ssl_handshake_client_step+0x79a>
        return;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding server name extension: %s",
                   ssl->hostname ) );

    hostname_len = strlen( ssl->hostname );
   e53ee:	f004 fbd9 	bl	e9ba4 <strlen>

    if( end < p || (size_t)( end - p ) < hostname_len + 9 )
   e53f2:	45b3      	cmp	fp, r6
        return;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding server name extension: %s",
                   ssl->hostname ) );

    hostname_len = strlen( ssl->hostname );
   e53f4:	4602      	mov	r2, r0

    if( end < p || (size_t)( end - p ) < hostname_len + 9 )
   e53f6:	9b07      	ldr	r3, [sp, #28]
   e53f8:	d82a      	bhi.n	e5450 <mbedtls_ssl_handshake_client_step+0x7b4>
   e53fa:	f100 0709 	add.w	r7, r0, #9
   e53fe:	ebcb 0606 	rsb	r6, fp, r6
   e5402:	42be      	cmp	r6, r7
   e5404:	d324      	bcc.n	e5450 <mbedtls_ssl_handshake_client_step+0x7b4>
     *
     */
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME      ) & 0xFF );

    *p++ = (unsigned char)( ( (hostname_len + 5) >> 8 ) & 0xFF );
   e5406:	1d41      	adds	r1, r0, #5
   e5408:	0a09      	lsrs	r1, r1, #8
   e540a:	7229      	strb	r1, [r5, #8]
    *p++ = (unsigned char)( ( (hostname_len + 5)      ) & 0xFF );
   e540c:	b2c1      	uxtb	r1, r0
   e540e:	1d48      	adds	r0, r1, #5
   e5410:	7268      	strb	r0, [r5, #9]

    *p++ = (unsigned char)( ( (hostname_len + 3) >> 8 ) & 0xFF );
   e5412:	1cd0      	adds	r0, r2, #3
   e5414:	0a00      	lsrs	r0, r0, #8
     * struct {
     *     ServerName server_name_list<1..2^16-1>
     * } ServerNameList;
     *
     */
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME >> 8 ) & 0xFF );
   e5416:	71ab      	strb	r3, [r5, #6]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME      ) & 0xFF );
   e5418:	71eb      	strb	r3, [r5, #7]

    *p++ = (unsigned char)( ( (hostname_len + 5) >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( (hostname_len + 5)      ) & 0xFF );

    *p++ = (unsigned char)( ( (hostname_len + 3) >> 8 ) & 0xFF );
   e541a:	72a8      	strb	r0, [r5, #10]
    *p++ = (unsigned char)( ( (hostname_len + 3)      ) & 0xFF );

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME_HOSTNAME ) & 0xFF );
   e541c:	732b      	strb	r3, [r5, #12]

    *p++ = (unsigned char)( ( (hostname_len + 5) >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( (hostname_len + 5)      ) & 0xFF );

    *p++ = (unsigned char)( ( (hostname_len + 3) >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( (hostname_len + 3)      ) & 0xFF );
   e541e:	1cc8      	adds	r0, r1, #3

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME_HOSTNAME ) & 0xFF );
    *p++ = (unsigned char)( ( hostname_len >> 8 ) & 0xFF );
   e5420:	0a13      	lsrs	r3, r2, #8

    *p++ = (unsigned char)( ( (hostname_len + 5) >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( (hostname_len + 5)      ) & 0xFF );

    *p++ = (unsigned char)( ( (hostname_len + 3) >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( (hostname_len + 3)      ) & 0xFF );
   e5422:	72e8      	strb	r0, [r5, #11]

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME_HOSTNAME ) & 0xFF );
    *p++ = (unsigned char)( ( hostname_len >> 8 ) & 0xFF );
   e5424:	736b      	strb	r3, [r5, #13]
    *p++ = (unsigned char)( ( hostname_len      ) & 0xFF );
   e5426:	73a9      	strb	r1, [r5, #14]

    memcpy( p, ssl->hostname, hostname_len );
   e5428:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   e542c:	f105 000f 	add.w	r0, r5, #15
   e5430:	f004 fb41 	bl	e9ab6 <memcpy>
   e5434:	e00d      	b.n	e5452 <mbedtls_ssl_handshake_client_step+0x7b6>
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
    size_t hostname_len;

    *olen = 0;
   e5436:	4607      	mov	r7, r0
   e5438:	e00b      	b.n	e5452 <mbedtls_ssl_handshake_client_step+0x7b6>
   e543a:	bf00      	nop
   e543c:	ffff9600 	.word	0xffff9600
   e5440:	ffff8a00 	.word	0xffff8a00
   e5444:	ffff9200 	.word	0xffff9200
   e5448:	ffff8c00 	.word	0xffff8c00
   e544c:	ffff8900 	.word	0xffff8900
   e5450:	461f      	mov	r7, r3
    unsigned char *sig_alg_list = buf + 6;
#endif

    *olen = 0;

    if( ssl->conf->max_minor_ver != MBEDTLS_SSL_MINOR_VERSION_3 )
   e5452:	6823      	ldr	r3, [r4, #0]
   e5454:	f893 2079 	ldrb.w	r2, [r3, #121]	; 0x79
   e5458:	2a03      	cmp	r2, #3
   e545a:	d14c      	bne.n	e54f6 <mbedtls_ssl_handshake_client_step+0x85a>
   e545c:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
        return;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding signature_algorithms extension" ) );

    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
   e545e:	460b      	mov	r3, r1
   e5460:	1a5a      	subs	r2, r3, r1
   e5462:	f853 0b04 	ldr.w	r0, [r3], #4
   e5466:	2800      	cmp	r0, #0
   e5468:	d1fa      	bne.n	e5460 <mbedtls_ssl_handshake_client_step+0x7c4>
static void ssl_write_signature_algorithms_ext( mbedtls_ssl_context *ssl,
                                                unsigned char *buf,
                                                size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
   e546a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    ext_len += olen;
#endif

#if defined(MBEDTLS_SSL_PROTO_TLS1_2) && \
    defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
    ssl_write_signature_algorithms_ext( ssl, p + 2 + ext_len, &olen );
   e546e:	1cbe      	adds	r6, r7, #2
   e5470:	4446      	add	r6, r8
static void ssl_write_signature_algorithms_ext( mbedtls_ssl_context *ssl,
                                                unsigned char *buf,
                                                size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
   e5472:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
#if defined(MBEDTLS_RSA_C)
        sig_alg_len += 2;
#endif
    }

    if( end < p || (size_t)( end - p ) < sig_alg_len + 6 )
   e5476:	429e      	cmp	r6, r3
   e5478:	d83e      	bhi.n	e54f8 <mbedtls_ssl_handshake_client_step+0x85c>
   e547a:	1b9b      	subs	r3, r3, r6
   e547c:	3206      	adds	r2, #6
   e547e:	4293      	cmp	r3, r2
   e5480:	d33a      	bcc.n	e54f8 <mbedtls_ssl_handshake_client_step+0x85c>
   e5482:	1db3      	adds	r3, r6, #6
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
    size_t sig_alg_len = 0;
    const int *md;
#if defined(MBEDTLS_RSA_C) || defined(MBEDTLS_ECDSA_C)
    unsigned char *sig_alg_list = buf + 6;
   e5484:	460a      	mov	r2, r1
    /*
     * Prepare signature_algorithms extension (TLS 1.2)
     */
    sig_alg_len = 0;

    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
   e5486:	6810      	ldr	r0, [r2, #0]
   e5488:	910b      	str	r1, [sp, #44]	; 0x2c
   e548a:	3304      	adds	r3, #4
   e548c:	ebc1 0e02 	rsb	lr, r1, r2
   e5490:	9207      	str	r2, [sp, #28]
   e5492:	920a      	str	r2, [sp, #40]	; 0x28
   e5494:	9308      	str	r3, [sp, #32]
   e5496:	9309      	str	r3, [sp, #36]	; 0x24
   e5498:	b1d8      	cbz	r0, e54d2 <mbedtls_ssl_handshake_client_step+0x836>
    {
#if defined(MBEDTLS_ECDSA_C)
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
   e549a:	f7fb f94b 	bl	e0734 <mbedtls_ssl_hash_from_md_alg>
   e549e:	9b08      	ldr	r3, [sp, #32]
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_ECDSA;
   e54a0:	9309      	str	r3, [sp, #36]	; 0x24
   e54a2:	f04f 0203 	mov.w	r2, #3
    sig_alg_len = 0;

    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
    {
#if defined(MBEDTLS_ECDSA_C)
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
   e54a6:	f803 0c04 	strb.w	r0, [r3, #-4]
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_ECDSA;
   e54aa:	f803 2c03 	strb.w	r2, [r3, #-3]
   e54ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
#endif
#if defined(MBEDTLS_RSA_C)
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
   e54b0:	9b07      	ldr	r3, [sp, #28]
   e54b2:	3204      	adds	r2, #4
   e54b4:	6818      	ldr	r0, [r3, #0]
   e54b6:	9208      	str	r2, [sp, #32]
   e54b8:	920a      	str	r2, [sp, #40]	; 0x28
   e54ba:	f7fb f93b 	bl	e0734 <mbedtls_ssl_hash_from_md_alg>
   e54be:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e54c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   e54c2:	f803 0c02 	strb.w	r0, [r3, #-2]
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_RSA;
   e54c6:	f04f 0201 	mov.w	r2, #1
   e54ca:	f803 2c01 	strb.w	r2, [r3, #-1]
   e54ce:	9a08      	ldr	r2, [sp, #32]
   e54d0:	e7d9      	b.n	e5486 <mbedtls_ssl_handshake_client_step+0x7ea>
     *
     * SignatureAndHashAlgorithm
     *   supported_signature_algorithms<2..2^16-2>;
     */
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG      ) & 0xFF );
   e54d2:	230d      	movs	r3, #13
   e54d4:	7073      	strb	r3, [r6, #1]

    *p++ = (unsigned char)( ( ( sig_alg_len + 2 ) >> 8 ) & 0xFF );
   e54d6:	f10e 0302 	add.w	r3, lr, #2
   e54da:	0a1b      	lsrs	r3, r3, #8
   e54dc:	70b3      	strb	r3, [r6, #2]
    *p++ = (unsigned char)( ( ( sig_alg_len + 2 )      ) & 0xFF );
   e54de:	fa5f f38e 	uxtb.w	r3, lr
   e54e2:	1c9a      	adds	r2, r3, #2
   e54e4:	70f2      	strb	r2, [r6, #3]

    *p++ = (unsigned char)( ( sig_alg_len >> 8 ) & 0xFF );
   e54e6:	ea4f 221e 	mov.w	r2, lr, lsr #8
     * } SignatureAndHashAlgorithm;
     *
     * SignatureAndHashAlgorithm
     *   supported_signature_algorithms<2..2^16-2>;
     */
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG >> 8 ) & 0xFF );
   e54ea:	7030      	strb	r0, [r6, #0]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG      ) & 0xFF );

    *p++ = (unsigned char)( ( ( sig_alg_len + 2 ) >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( ( sig_alg_len + 2 )      ) & 0xFF );

    *p++ = (unsigned char)( ( sig_alg_len >> 8 ) & 0xFF );
   e54ec:	7132      	strb	r2, [r6, #4]
    *p++ = (unsigned char)( ( sig_alg_len      ) & 0xFF );
   e54ee:	7173      	strb	r3, [r6, #5]

    *olen = 6 + sig_alg_len;
   e54f0:	f10e 0006 	add.w	r0, lr, #6
   e54f4:	e000      	b.n	e54f8 <mbedtls_ssl_handshake_client_step+0x85c>
    const int *md;
#if defined(MBEDTLS_RSA_C) || defined(MBEDTLS_ECDSA_C)
    unsigned char *sig_alg_list = buf + 6;
#endif

    *olen = 0;
   e54f6:	2000      	movs	r0, #0
#endif

#if defined(MBEDTLS_SSL_PROTO_TLS1_2) && \
    defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
    ssl_write_signature_algorithms_ext( ssl, p + 2 + ext_len, &olen );
    ext_len += olen;
   e54f8:	4407      	add	r7, r0
#endif

#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C) || \
    defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
    if( uses_ec )
   e54fa:	f1ba 0f00 	cmp.w	sl, #0
   e54fe:	d05e      	beq.n	e55be <mbedtls_ssl_handshake_client_step+0x922>
    *olen = 0;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding supported_elliptic_curves extension" ) );

#if defined(MBEDTLS_ECP_C)
    for( grp_id = ssl->conf->curve_list; *grp_id != MBEDTLS_ECP_DP_NONE; grp_id++ )
   e5500:	6823      	ldr	r3, [r4, #0]
static void ssl_write_supported_elliptic_curves_ext( mbedtls_ssl_context *ssl,
                                                     unsigned char *buf,
                                                     size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
   e5502:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   e5506:	6e1e      	ldr	r6, [r3, #96]	; 0x60
    unsigned char *elliptic_curve_list = p + 6;
    size_t elliptic_curve_len = 0;
   e5508:	f04f 0a00 	mov.w	sl, #0
   e550c:	3e01      	subs	r6, #1
    *olen = 0;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding supported_elliptic_curves extension" ) );

#if defined(MBEDTLS_ECP_C)
    for( grp_id = ssl->conf->curve_list; *grp_id != MBEDTLS_ECP_DP_NONE; grp_id++ )
   e550e:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   e5512:	b148      	cbz	r0, e5528 <mbedtls_ssl_handshake_client_step+0x88c>
   e5514:	9207      	str	r2, [sp, #28]
#else
    for( info = mbedtls_ecp_curve_list(); info->grp_id != MBEDTLS_ECP_DP_NONE; info++ )
#endif
    {
#if defined(MBEDTLS_ECP_C)
        info = mbedtls_ecp_curve_info_from_grp_id( *grp_id );
   e5516:	f7f3 fc69 	bl	d8dec <mbedtls_ecp_curve_info_from_grp_id>
#endif
        if( info == NULL )
   e551a:	9a07      	ldr	r2, [sp, #28]
   e551c:	b908      	cbnz	r0, e5522 <mbedtls_ssl_handshake_client_step+0x886>
    const mbedtls_ecp_group_id *grp_id;
#else
    ((void) ssl);
#endif

    *olen = 0;
   e551e:	2300      	movs	r3, #0
   e5520:	e034      	b.n	e558c <mbedtls_ssl_handshake_client_step+0x8f0>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid curve in ssl configuration" ) );
            return;
        }

        elliptic_curve_len += 2;
   e5522:	f10a 0a02 	add.w	sl, sl, #2
   e5526:	e7f2      	b.n	e550e <mbedtls_ssl_handshake_client_step+0x872>

#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C) || \
    defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
    if( uses_ec )
    {
        ssl_write_supported_elliptic_curves_ext( ssl, p + 2 + ext_len, &olen );
   e5528:	1cbe      	adds	r6, r7, #2
   e552a:	4446      	add	r6, r8
static void ssl_write_supported_elliptic_curves_ext( mbedtls_ssl_context *ssl,
                                                     unsigned char *buf,
                                                     size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
   e552c:	f502 5300 	add.w	r3, r2, #8192	; 0x2000
        }

        elliptic_curve_len += 2;
    }

    if( end < p || (size_t)( end - p ) < 6 + elliptic_curve_len )
   e5530:	429e      	cmp	r6, r3
   e5532:	d8f4      	bhi.n	e551e <mbedtls_ssl_handshake_client_step+0x882>
   e5534:	1b9b      	subs	r3, r3, r6
   e5536:	f10a 0206 	add.w	r2, sl, #6
   e553a:	4293      	cmp	r3, r2
   e553c:	d3ef      	bcc.n	e551e <mbedtls_ssl_handshake_client_step+0x882>
    }

    elliptic_curve_len = 0;

#if defined(MBEDTLS_ECP_C)
    for( grp_id = ssl->conf->curve_list; *grp_id != MBEDTLS_ECP_DP_NONE; grp_id++ )
   e553e:	6823      	ldr	r3, [r4, #0]
   e5540:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   e5542:	46b2      	mov	sl, r6
   e5544:	3a01      	subs	r2, #1
   e5546:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   e554a:	9207      	str	r2, [sp, #28]
   e554c:	ebc6 030a 	rsb	r3, r6, sl
   e5550:	9208      	str	r2, [sp, #32]
   e5552:	f10a 0a02 	add.w	sl, sl, #2
   e5556:	b150      	cbz	r0, e556e <mbedtls_ssl_handshake_client_step+0x8d2>
#else
    for( info = mbedtls_ecp_curve_list(); info->grp_id != MBEDTLS_ECP_DP_NONE; info++ )
#endif
    {
#if defined(MBEDTLS_ECP_C)
        info = mbedtls_ecp_curve_info_from_grp_id( *grp_id );
   e5558:	f7f3 fc48 	bl	d8dec <mbedtls_ecp_curve_info_from_grp_id>
#endif
        elliptic_curve_list[elliptic_curve_len++] = info->tls_id >> 8;
   e555c:	8843      	ldrh	r3, [r0, #2]
   e555e:	9a07      	ldr	r2, [sp, #28]
   e5560:	121b      	asrs	r3, r3, #8
   e5562:	f88a 3004 	strb.w	r3, [sl, #4]
        elliptic_curve_list[elliptic_curve_len++] = info->tls_id & 0xFF;
   e5566:	8843      	ldrh	r3, [r0, #2]
   e5568:	f88a 3005 	strb.w	r3, [sl, #5]
   e556c:	e7eb      	b.n	e5546 <mbedtls_ssl_handshake_client_step+0x8aa>
    }

    if( elliptic_curve_len == 0 )
   e556e:	2b00      	cmp	r3, #0
   e5570:	d0d5      	beq.n	e551e <mbedtls_ssl_handshake_client_step+0x882>
        return;

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_ELLIPTIC_CURVES >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_ELLIPTIC_CURVES      ) & 0xFF );
   e5572:	220a      	movs	r2, #10
   e5574:	7072      	strb	r2, [r6, #1]

    *p++ = (unsigned char)( ( ( elliptic_curve_len + 2 ) >> 8 ) & 0xFF );
   e5576:	1c9a      	adds	r2, r3, #2
   e5578:	0a12      	lsrs	r2, r2, #8
   e557a:	70b2      	strb	r2, [r6, #2]
    *p++ = (unsigned char)( ( ( elliptic_curve_len + 2 )      ) & 0xFF );
   e557c:	b2da      	uxtb	r2, r3
   e557e:	1c91      	adds	r1, r2, #2
   e5580:	70f1      	strb	r1, [r6, #3]

    *p++ = (unsigned char)( ( ( elliptic_curve_len     ) >> 8 ) & 0xFF );
   e5582:	0a19      	lsrs	r1, r3, #8
    }

    if( elliptic_curve_len == 0 )
        return;

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_ELLIPTIC_CURVES >> 8 ) & 0xFF );
   e5584:	7030      	strb	r0, [r6, #0]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_ELLIPTIC_CURVES      ) & 0xFF );

    *p++ = (unsigned char)( ( ( elliptic_curve_len + 2 ) >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( ( elliptic_curve_len + 2 )      ) & 0xFF );

    *p++ = (unsigned char)( ( ( elliptic_curve_len     ) >> 8 ) & 0xFF );
   e5586:	7131      	strb	r1, [r6, #4]
    *p++ = (unsigned char)( ( ( elliptic_curve_len     )      ) & 0xFF );
   e5588:	7172      	strb	r2, [r6, #5]

    *olen = 6 + elliptic_curve_len;
   e558a:	3306      	adds	r3, #6
#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C) || \
    defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
    if( uses_ec )
    {
        ssl_write_supported_elliptic_curves_ext( ssl, p + 2 + ext_len, &olen );
        ext_len += olen;
   e558c:	18f8      	adds	r0, r7, r3
static void ssl_write_supported_point_formats_ext( mbedtls_ssl_context *ssl,
                                                   unsigned char *buf,
                                                   size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
   e558e:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
    if( uses_ec )
    {
        ssl_write_supported_elliptic_curves_ext( ssl, p + 2 + ext_len, &olen );
        ext_len += olen;

        ssl_write_supported_point_formats_ext( ssl, p + 2 + ext_len, &olen );
   e5592:	1c83      	adds	r3, r0, #2
   e5594:	4443      	add	r3, r8
static void ssl_write_supported_point_formats_ext( mbedtls_ssl_context *ssl,
                                                   unsigned char *buf,
                                                   size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
   e5596:	f502 5200 	add.w	r2, r2, #8192	; 0x2000

    *olen = 0;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding supported_point_formats extension" ) );

    if( end < p || (size_t)( end - p ) < 6 )
   e559a:	4293      	cmp	r3, r2
   e559c:	f04f 0700 	mov.w	r7, #0
   e55a0:	d80c      	bhi.n	e55bc <mbedtls_ssl_handshake_client_step+0x920>
   e55a2:	1ad2      	subs	r2, r2, r3
   e55a4:	2a05      	cmp	r2, #5
   e55a6:	d909      	bls.n	e55bc <mbedtls_ssl_handshake_client_step+0x920>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
        return;
    }

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS      ) & 0xFF );
   e55a8:	220b      	movs	r2, #11
   e55aa:	705a      	strb	r2, [r3, #1]

    *p++ = 0x00;
    *p++ = 2;
   e55ac:	2202      	movs	r2, #2
   e55ae:	70da      	strb	r2, [r3, #3]

    *p++ = 1;
   e55b0:	2201      	movs	r2, #1
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
        return;
    }

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS >> 8 ) & 0xFF );
   e55b2:	701f      	strb	r7, [r3, #0]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS      ) & 0xFF );

    *p++ = 0x00;
   e55b4:	709f      	strb	r7, [r3, #2]
    *p++ = 2;

    *p++ = 1;
    *p++ = MBEDTLS_ECP_PF_UNCOMPRESSED;
   e55b6:	715f      	strb	r7, [r3, #5]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS      ) & 0xFF );

    *p++ = 0x00;
    *p++ = 2;

    *p++ = 1;
   e55b8:	711a      	strb	r2, [r3, #4]
    *p++ = MBEDTLS_ECP_PF_UNCOMPRESSED;

    *olen = 6;
   e55ba:	2706      	movs	r7, #6
    {
        ssl_write_supported_elliptic_curves_ext( ssl, p + 2 + ext_len, &olen );
        ext_len += olen;

        ssl_write_supported_point_formats_ext( ssl, p + 2 + ext_len, &olen );
        ext_len += olen;
   e55bc:	4407      	add	r7, r0
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;

    *olen = 0;

    if( ssl->conf->mfl_code == MBEDTLS_SSL_MAX_FRAG_LEN_NONE ) {
   e55be:	6823      	ldr	r3, [r4, #0]
   e55c0:	f8b3 007c 	ldrh.w	r0, [r3, #124]	; 0x7c
   e55c4:	f410 70e0 	ands.w	r0, r0, #448	; 0x1c0
   e55c8:	d018      	beq.n	e55fc <mbedtls_ssl_handshake_client_step+0x960>
static void ssl_write_max_fragment_length_ext( mbedtls_ssl_context *ssl,
                                               unsigned char *buf,
                                               size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
   e55ca:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
    ssl_write_ecjpake_kkpp_ext( ssl, p + 2 + ext_len, &olen );
    ext_len += olen;
#endif

#if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)
    ssl_write_max_fragment_length_ext( ssl, p + 2 + ext_len, &olen );
   e55ce:	1cbb      	adds	r3, r7, #2
   e55d0:	4443      	add	r3, r8
static void ssl_write_max_fragment_length_ext( mbedtls_ssl_context *ssl,
                                               unsigned char *buf,
                                               size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
   e55d2:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
        return;
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding max_fragment_length extension" ) );

    if( end < p || (size_t)( end - p ) < 5 )
   e55d6:	4293      	cmp	r3, r2
   e55d8:	f04f 0000 	mov.w	r0, #0
   e55dc:	d80e      	bhi.n	e55fc <mbedtls_ssl_handshake_client_step+0x960>
   e55de:	1ad2      	subs	r2, r2, r3
   e55e0:	2a04      	cmp	r2, #4
   e55e2:	d90b      	bls.n	e55fc <mbedtls_ssl_handshake_client_step+0x960>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
        return;
    }

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH      ) & 0xFF );
   e55e4:	2201      	movs	r2, #1
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
        return;
    }

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH >> 8 ) & 0xFF );
   e55e6:	7018      	strb	r0, [r3, #0]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH      ) & 0xFF );

    *p++ = 0x00;
   e55e8:	7098      	strb	r0, [r3, #2]
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
        return;
    }

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH      ) & 0xFF );
   e55ea:	705a      	strb	r2, [r3, #1]

    *p++ = 0x00;
    *p++ = 1;
   e55ec:	70da      	strb	r2, [r3, #3]

    *p++ = ssl->conf->mfl_code;
   e55ee:	6822      	ldr	r2, [r4, #0]
   e55f0:	f8b2 207c 	ldrh.w	r2, [r2, #124]	; 0x7c
   e55f4:	f3c2 1282 	ubfx	r2, r2, #6, #3
   e55f8:	711a      	strb	r2, [r3, #4]

    *olen = 5;
   e55fa:	2005      	movs	r0, #5
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
    size_t tlen = ssl->session_negotiate->ticket_len;

    *olen = 0;

    if( ssl->conf->session_tickets == MBEDTLS_SSL_SESSION_TICKETS_DISABLED )
   e55fc:	6823      	ldr	r3, [r4, #0]
   e55fe:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
   e5602:	f003 0302 	and.w	r3, r3, #2
    ext_len += olen;
#endif

#if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)
    ssl_write_max_fragment_length_ext( ssl, p + 2 + ext_len, &olen );
    ext_len += olen;
   e5606:	4407      	add	r7, r0
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
    size_t tlen = ssl->session_negotiate->ticket_len;

    *olen = 0;

    if( ssl->conf->session_tickets == MBEDTLS_SSL_SESSION_TICKETS_DISABLED )
   e5608:	f003 06ff 	and.w	r6, r3, #255	; 0xff
   e560c:	b313      	cbz	r3, e5654 <mbedtls_ssl_handshake_client_step+0x9b8>
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
static void ssl_write_session_ticket_ext( mbedtls_ssl_context *ssl,
                                          unsigned char *buf, size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
   e560e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    ssl_write_alpn_ext( ssl, p + 2 + ext_len, &olen );
    ext_len += olen;
#endif

#if defined(MBEDTLS_SSL_SESSION_TICKETS)
    ssl_write_session_ticket_ext( ssl, p + 2 + ext_len, &olen );
   e5612:	1cb8      	adds	r0, r7, #2
   e5614:	4440      	add	r0, r8
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
static void ssl_write_session_ticket_ext( mbedtls_ssl_context *ssl,
                                          unsigned char *buf, size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
   e5616:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
        return;
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding session ticket extension" ) );

    if( end < p || (size_t)( end - p ) < 4 + tlen )
   e561a:	4298      	cmp	r0, r3
   e561c:	d815      	bhi.n	e564a <mbedtls_ssl_handshake_client_step+0x9ae>
static void ssl_write_session_ticket_ext( mbedtls_ssl_context *ssl,
                                          unsigned char *buf, size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
    size_t tlen = ssl->session_negotiate->ticket_len;
   e561e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   e5620:	6e92      	ldr	r2, [r2, #104]	; 0x68
        return;
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding session ticket extension" ) );

    if( end < p || (size_t)( end - p ) < 4 + tlen )
   e5622:	1a1b      	subs	r3, r3, r0
   e5624:	1d16      	adds	r6, r2, #4
   e5626:	42b3      	cmp	r3, r6
   e5628:	f04f 0300 	mov.w	r3, #0
   e562c:	d30f      	bcc.n	e564e <mbedtls_ssl_handshake_client_step+0x9b2>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
        return;
    }

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SESSION_TICKET >> 8 ) & 0xFF );
   e562e:	7003      	strb	r3, [r0, #0]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SESSION_TICKET      ) & 0xFF );
   e5630:	2323      	movs	r3, #35	; 0x23
   e5632:	7043      	strb	r3, [r0, #1]

    *p++ = (unsigned char)( ( tlen >> 8 ) & 0xFF );
   e5634:	0a13      	lsrs	r3, r2, #8
   e5636:	7083      	strb	r3, [r0, #2]
    *p++ = (unsigned char)( ( tlen      ) & 0xFF );
   e5638:	70c2      	strb	r2, [r0, #3]

    *olen = 4;

    if( ssl->session_negotiate->ticket == NULL || tlen == 0 )
   e563a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e563c:	6e59      	ldr	r1, [r3, #100]	; 0x64
   e563e:	b141      	cbz	r1, e5652 <mbedtls_ssl_handshake_client_step+0x9b6>
   e5640:	b13a      	cbz	r2, e5652 <mbedtls_ssl_handshake_client_step+0x9b6>
        return;
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "sending session ticket of length %d", tlen ) );

    memcpy( p, ssl->session_negotiate->ticket, tlen );
   e5642:	3004      	adds	r0, #4
   e5644:	f004 fa37 	bl	e9ab6 <memcpy>
   e5648:	e004      	b.n	e5654 <mbedtls_ssl_handshake_client_step+0x9b8>
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
    size_t tlen = ssl->session_negotiate->ticket_len;

    *olen = 0;
   e564a:	2600      	movs	r6, #0
   e564c:	e002      	b.n	e5654 <mbedtls_ssl_handshake_client_step+0x9b8>
   e564e:	461e      	mov	r6, r3
   e5650:	e000      	b.n	e5654 <mbedtls_ssl_handshake_client_step+0x9b8>
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SESSION_TICKET      ) & 0xFF );

    *p++ = (unsigned char)( ( tlen >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( tlen      ) & 0xFF );

    *olen = 4;
   e5652:	2604      	movs	r6, #4
    ((void) olen);

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, total extension length: %d",
                   ext_len ) );

    if( ext_len > 0 )
   e5654:	19bf      	adds	r7, r7, r6
    {
        *p++ = (unsigned char)( ( ext_len >> 8 ) & 0xFF );
   e5656:	bf1e      	ittt	ne
   e5658:	0a3b      	lsrne	r3, r7, #8
        *p++ = (unsigned char)( ( ext_len      ) & 0xFF );
        p += ext_len;
   e565a:	eb0b 0807 	addne.w	r8, fp, r7
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, total extension length: %d",
                   ext_len ) );

    if( ext_len > 0 )
    {
        *p++ = (unsigned char)( ( ext_len >> 8 ) & 0xFF );
   e565e:	712b      	strbne	r3, [r5, #4]
        *p++ = (unsigned char)( ( ext_len      ) & 0xFF );
        p += ext_len;
    }

    ssl->out_msglen  = p - buf;
   e5660:	ebc9 0308 	rsb	r3, r9, r8
                   ext_len ) );

    if( ext_len > 0 )
    {
        *p++ = (unsigned char)( ( ext_len >> 8 ) & 0xFF );
        *p++ = (unsigned char)( ( ext_len      ) & 0xFF );
   e5664:	bf18      	it	ne
   e5666:	716f      	strbne	r7, [r5, #5]
        p += ext_len;
    }

    ssl->out_msglen  = p - buf;
   e5668:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
   e566c:	2316      	movs	r3, #22
   e566e:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_HELLO;
   e5672:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   e5676:	2201      	movs	r2, #1
   e5678:	701a      	strb	r2, [r3, #0]

    ssl->state++;
   e567a:	6863      	ldr	r3, [r4, #4]
   e567c:	4413      	add	r3, r2
   e567e:	e603      	b.n	e5288 <mbedtls_ssl_handshake_client_step+0x5ec>
                            ssl->conf->min_major_ver, ssl->conf->min_minor_ver,
                            ssl->major_ver, ssl->minor_ver,
                            ssl->conf->max_major_ver, ssl->conf->max_minor_ver ) );

        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                     MBEDTLS_SSL_ALERT_MSG_PROTOCOL_VERSION );
   e5680:	2246      	movs	r2, #70	; 0x46
   e5682:	2102      	movs	r1, #2
   e5684:	4620      	mov	r0, r4
   e5686:	f7fa f9df 	bl	dfa48 <mbedtls_ssl_send_alert_message>

        return( MBEDTLS_ERR_SSL_BAD_HS_PROTOCOL_VERSION );
   e568a:	4daf      	ldr	r5, [pc, #700]	; (e5948 <mbedtls_ssl_handshake_client_step+0xcac>)
   e568c:	e1b6      	b.n	e59fc <mbedtls_ssl_handshake_client_step+0xd60>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }

    if( ssl->in_hslen > mbedtls_ssl_hs_hdr_len( ssl ) + 39 + n )
   e568e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   e5690:	f106 022b 	add.w	r2, r6, #43	; 0x2b
   e5694:	4293      	cmp	r3, r2
   e5696:	d912      	bls.n	e56be <mbedtls_ssl_handshake_client_step+0xa22>
    {
        ext_len = ( ( buf[38 + n] <<  8 )
   e5698:	eb0a 0206 	add.w	r2, sl, r6
                  | ( buf[39 + n]       ) );
   e569c:	f892 7026 	ldrb.w	r7, [r2, #38]	; 0x26
   e56a0:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
   e56a4:	ea42 2707 	orr.w	r7, r2, r7, lsl #8

        if( ( ext_len > 0 && ext_len < 4 ) ||
   e56a8:	1e7a      	subs	r2, r7, #1
   e56aa:	2a02      	cmp	r2, #2
   e56ac:	f67f abc6 	bls.w	e4e3c <mbedtls_ssl_handshake_client_step+0x1a0>
   e56b0:	f106 022c 	add.w	r2, r6, #44	; 0x2c
   e56b4:	443a      	add	r2, r7
   e56b6:	4293      	cmp	r3, r2
   e56b8:	f47f abc0 	bne.w	e4e3c <mbedtls_ssl_handshake_client_step+0x1a0>
   e56bc:	e005      	b.n	e56ca <mbedtls_ssl_handshake_client_step+0xa2e>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }
    }
    else if( ssl->in_hslen == mbedtls_ssl_hs_hdr_len( ssl ) + 38 + n )
   e56be:	f106 022a 	add.w	r2, r6, #42	; 0x2a
   e56c2:	4293      	cmp	r3, r2
   e56c4:	f47f abba 	bne.w	e4e3c <mbedtls_ssl_handshake_client_step+0x1a0>
    {
        ext_len = 0;
   e56c8:	2700      	movs	r7, #0
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }

    /* ciphersuite (used later) */
    i = ( buf[35 + n] << 8 ) | buf[36 + n];
   e56ca:	eb0a 0306 	add.w	r3, sl, r6
   e56ce:	f893 9023 	ldrb.w	r9, [r3, #35]	; 0x23
   e56d2:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
        accept_comp = 1;

    if( comp != MBEDTLS_SSL_COMPRESS_NULL &&
        ( comp != MBEDTLS_SSL_COMPRESS_DEFLATE || accept_comp == 0 ) )
#else /* MBEDTLS_ZLIB_SUPPORT */
    if( comp != MBEDTLS_SSL_COMPRESS_NULL )
   e56d6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }

    /* ciphersuite (used later) */
    i = ( buf[35 + n] << 8 ) | buf[36 + n];
   e56da:	ea42 2909 	orr.w	r9, r2, r9, lsl #8
        accept_comp = 1;

    if( comp != MBEDTLS_SSL_COMPRESS_NULL &&
        ( comp != MBEDTLS_SSL_COMPRESS_DEFLATE || accept_comp == 0 ) )
#else /* MBEDTLS_ZLIB_SUPPORT */
    if( comp != MBEDTLS_SSL_COMPRESS_NULL )
   e56de:	2b00      	cmp	r3, #0
   e56e0:	f43f ab62 	beq.w	e4da8 <mbedtls_ssl_handshake_client_step+0x10c>
#endif/* MBEDTLS_ZLIB_SUPPORT */
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "server hello, bad compression: %d", comp ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
   e56e4:	222f      	movs	r2, #47	; 0x2f
   e56e6:	2102      	movs	r1, #2
   e56e8:	4620      	mov	r0, r4
   e56ea:	f7fa f9ad 	bl	dfa48 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
   e56ee:	4d97      	ldr	r5, [pc, #604]	; (e594c <mbedtls_ssl_handshake_client_step+0xcb0>)
   e56f0:	e184      	b.n	e59fc <mbedtls_ssl_handshake_client_step+0xd60>
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, session id", buf + 35, n );

    /*
     * Check if the session can be resumed
     */
    if( ssl->handshake->resume == 0 || n == 0 ||
   e56f2:	2e00      	cmp	r6, #0
   e56f4:	f43f abb0 	beq.w	e4e58 <mbedtls_ssl_handshake_client_step+0x1bc>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
#endif
        ssl->session_negotiate->ciphersuite != i ||
   e56f8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, session id", buf + 35, n );

    /*
     * Check if the session can be resumed
     */
    if( ssl->handshake->resume == 0 || n == 0 ||
   e56fa:	6803      	ldr	r3, [r0, #0]
   e56fc:	4599      	cmp	r9, r3
   e56fe:	f47f abab 	bne.w	e4e58 <mbedtls_ssl_handshake_client_step+0x1bc>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
#endif
        ssl->session_negotiate->ciphersuite != i ||
   e5702:	6843      	ldr	r3, [r0, #4]
   e5704:	2b00      	cmp	r3, #0
   e5706:	f47f aba7 	bne.w	e4e58 <mbedtls_ssl_handshake_client_step+0x1bc>
        ssl->session_negotiate->compression != comp ||
   e570a:	6883      	ldr	r3, [r0, #8]
   e570c:	429e      	cmp	r6, r3
   e570e:	f47f aba3 	bne.w	e4e58 <mbedtls_ssl_handshake_client_step+0x1bc>
        ssl->session_negotiate->id_len != n ||
        memcmp( ssl->session_negotiate->id, buf + 35, n ) != 0 )
   e5712:	4632      	mov	r2, r6
   e5714:	4641      	mov	r1, r8
   e5716:	300c      	adds	r0, #12
   e5718:	f004 f9be 	bl	e9a98 <memcmp>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
#endif
        ssl->session_negotiate->ciphersuite != i ||
        ssl->session_negotiate->compression != comp ||
        ssl->session_negotiate->id_len != n ||
   e571c:	2800      	cmp	r0, #0
   e571e:	f47f ab9b 	bne.w	e4e58 <mbedtls_ssl_handshake_client_step+0x1bc>
        ssl->session_negotiate->id_len = n;
        memcpy( ssl->session_negotiate->id, buf + 35, n );
    }
    else
    {
        ssl->state = MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC;
   e5722:	230c      	movs	r3, #12
   e5724:	6063      	str	r3, [r4, #4]

        if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
   e5726:	4620      	mov	r0, r4
   e5728:	f7f9 fdce 	bl	df2c8 <mbedtls_ssl_derive_keys>
   e572c:	4680      	mov	r8, r0
   e572e:	2800      	cmp	r0, #0
   e5730:	f43f aba5 	beq.w	e4e7e <mbedtls_ssl_handshake_client_step+0x1e2>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_derive_keys", ret );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
   e5734:	2250      	movs	r2, #80	; 0x50
   e5736:	2102      	movs	r1, #2
   e5738:	4620      	mov	r0, r4
   e573a:	f7fa f985 	bl	dfa48 <mbedtls_ssl_send_alert_message>
   e573e:	4645      	mov	r5, r8
   e5740:	e15c      	b.n	e59fc <mbedtls_ssl_handshake_client_step+0xd60>
                                            MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }

        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i++] ==
            ssl->session_negotiate->ciphersuite )
   e5742:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   e5744:	6812      	ldr	r2, [r2, #0]
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }

        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i++] ==
   e5746:	4290      	cmp	r0, r2
   e5748:	f47f ab9e 	bne.w	e4e88 <mbedtls_ssl_handshake_client_step+0x1ec>
        {
            break;
        }
    }

    suite_info = mbedtls_ssl_ciphersuite_from_id( ssl->session_negotiate->ciphersuite );
   e574c:	f7fe fee6 	bl	e451c <mbedtls_ssl_ciphersuite_from_id>
    if( ssl_validate_ciphersuite( suite_info, ssl, ssl->minor_ver, ssl->minor_ver ) != 0 )
   e5750:	68e3      	ldr	r3, [r4, #12]
static int ssl_validate_ciphersuite( const mbedtls_ssl_ciphersuite_t * suite_info,
                                     const mbedtls_ssl_context * ssl,
                                     int min_minor_ver, int max_minor_ver )
{
    (void) ssl;
    if( suite_info == NULL )
   e5752:	2800      	cmp	r0, #0
   e5754:	f43f ab9d 	beq.w	e4e92 <mbedtls_ssl_handshake_client_step+0x1f6>
        return( 1 );

    if( suite_info->min_minor_ver > max_minor_ver ||
   e5758:	6902      	ldr	r2, [r0, #16]
   e575a:	429a      	cmp	r2, r3
   e575c:	f73f ab99 	bgt.w	e4e92 <mbedtls_ssl_handshake_client_step+0x1f6>
   e5760:	6982      	ldr	r2, [r0, #24]
   e5762:	4293      	cmp	r3, r2
   e5764:	f73f ab95 	bgt.w	e4e92 <mbedtls_ssl_handshake_client_step+0x1f6>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }
    ssl->session_negotiate->compression = comp;
   e5768:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e576a:	2200      	movs	r2, #0
   e576c:	605a      	str	r2, [r3, #4]

    ext = buf + 40 + n;
   e576e:	f106 0228 	add.w	r2, r6, #40	; 0x28
   e5772:	4452      	add	r2, sl
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }

    ((void) buf);

    ssl->handshake->new_session_ticket = 1;
   e5774:	2601      	movs	r6, #1
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }

        switch( ext_id )
   e5776:	f64f 7001 	movw	r0, #65281	; 0xff01

    ext = buf + 40 + n;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "server hello, total extension length: %d", ext_len ) );

    while( ext_len )
   e577a:	2f00      	cmp	r7, #0
   e577c:	d051      	beq.n	e5822 <mbedtls_ssl_handshake_client_step+0xb86>
    {
        unsigned int ext_id   = ( ( ext[0] <<  8 )
                                | ( ext[1]       ) );
   e577e:	7811      	ldrb	r1, [r2, #0]
   e5780:	7853      	ldrb	r3, [r2, #1]
        unsigned int ext_size = ( ( ext[2] <<  8 )
                                | ( ext[3]       ) );
   e5782:	f892 e002 	ldrb.w	lr, [r2, #2]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "server hello, total extension length: %d", ext_len ) );

    while( ext_len )
    {
        unsigned int ext_id   = ( ( ext[0] <<  8 )
                                | ( ext[1]       ) );
   e5786:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
        unsigned int ext_size = ( ( ext[2] <<  8 )
                                | ( ext[3]       ) );
   e578a:	78d1      	ldrb	r1, [r2, #3]
   e578c:	ea41 210e 	orr.w	r1, r1, lr, lsl #8

        if( ext_size + 4 > ext_len )
   e5790:	f101 0e04 	add.w	lr, r1, #4
   e5794:	4577      	cmp	r7, lr
   e5796:	f4ff ab51 	bcc.w	e4e3c <mbedtls_ssl_handshake_client_step+0x1a0>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }

        switch( ext_id )
   e579a:	2b0b      	cmp	r3, #11
   e579c:	d02a      	beq.n	e57f4 <mbedtls_ssl_handshake_client_step+0xb58>
   e579e:	dc02      	bgt.n	e57a6 <mbedtls_ssl_handshake_client_step+0xb0a>
   e57a0:	2b01      	cmp	r3, #1
   e57a2:	d00c      	beq.n	e57be <mbedtls_ssl_handshake_client_step+0xb22>
   e57a4:	e04d      	b.n	e5842 <mbedtls_ssl_handshake_client_step+0xba6>
   e57a6:	2b23      	cmp	r3, #35	; 0x23
   e57a8:	d01a      	beq.n	e57e0 <mbedtls_ssl_handshake_client_step+0xb44>
   e57aa:	4283      	cmp	r3, r0
   e57ac:	d149      	bne.n	e5842 <mbedtls_ssl_handshake_client_step+0xba6>
        }
    }
    else
#endif /* MBEDTLS_SSL_RENEGOTIATION */
    {
        if( len != 1 || buf[0] != 0x00 )
   e57ae:	2901      	cmp	r1, #1
   e57b0:	d144      	bne.n	e583c <mbedtls_ssl_handshake_client_step+0xba0>
   e57b2:	7913      	ldrb	r3, [r2, #4]
   e57b4:	2b00      	cmp	r3, #0
   e57b6:	d141      	bne.n	e583c <mbedtls_ssl_handshake_client_step+0xba0>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }

        ssl->secure_renegotiation = MBEDTLS_SSL_SECURE_RENEGOTIATION;
   e57b8:	f8c4 10b8 	str.w	r1, [r4, #184]	; 0xb8
   e57bc:	e041      	b.n	e5842 <mbedtls_ssl_handshake_client_step+0xba6>
{
    /*
     * server should use the extension only if we did,
     * and if so the server's value should match ours (and len is always 1)
     */
    if( ssl->conf->mfl_code == MBEDTLS_SSL_MAX_FRAG_LEN_NONE ||
   e57be:	6823      	ldr	r3, [r4, #0]
   e57c0:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
   e57c4:	f403 7ce0 	and.w	ip, r3, #448	; 0x1c0
   e57c8:	f1bc 0f00 	cmp.w	ip, #0
   e57cc:	d036      	beq.n	e583c <mbedtls_ssl_handshake_client_step+0xba0>
   e57ce:	2901      	cmp	r1, #1
   e57d0:	d134      	bne.n	e583c <mbedtls_ssl_handshake_client_step+0xba0>
        len != 1 ||
   e57d2:	f892 c004 	ldrb.w	ip, [r2, #4]
   e57d6:	f3c3 1382 	ubfx	r3, r3, #6, #3
   e57da:	459c      	cmp	ip, r3
   e57dc:	d031      	beq.n	e5842 <mbedtls_ssl_handshake_client_step+0xba6>
   e57de:	e02d      	b.n	e583c <mbedtls_ssl_handshake_client_step+0xba0>
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
static int ssl_parse_session_ticket_ext( mbedtls_ssl_context *ssl,
                                         const unsigned char *buf,
                                         size_t len )
{
    if( ssl->conf->session_tickets == MBEDTLS_SSL_SESSION_TICKETS_DISABLED ||
   e57e0:	6823      	ldr	r3, [r4, #0]
   e57e2:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
   e57e6:	079b      	lsls	r3, r3, #30
   e57e8:	d528      	bpl.n	e583c <mbedtls_ssl_handshake_client_step+0xba0>
   e57ea:	bb39      	cbnz	r1, e583c <mbedtls_ssl_handshake_client_step+0xba0>
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }

    ((void) buf);

    ssl->handshake->new_session_ticket = 1;
   e57ec:	6b23      	ldr	r3, [r4, #48]	; 0x30
   e57ee:	f8c3 6358 	str.w	r6, [r3, #856]	; 0x358
   e57f2:	e026      	b.n	e5842 <mbedtls_ssl_handshake_client_step+0xba6>
                                                  size_t len )
{
    size_t list_size;
    const unsigned char *p;

    if( len == 0 || (size_t)( buf[0] + 1 ) != len )
   e57f4:	2900      	cmp	r1, #0
   e57f6:	f43f ab21 	beq.w	e4e3c <mbedtls_ssl_handshake_client_step+0x1a0>
   e57fa:	7913      	ldrb	r3, [r2, #4]
   e57fc:	f103 0c01 	add.w	ip, r3, #1
   e5800:	4561      	cmp	r1, ip
   e5802:	f47f ab1b 	bne.w	e4e3c <mbedtls_ssl_handshake_client_step+0x1a0>
   e5806:	f102 0c04 	add.w	ip, r2, #4
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }
    list_size = buf[0];

    p = buf + 1;
    while( list_size > 0 )
   e580a:	b1bb      	cbz	r3, e583c <mbedtls_ssl_handshake_client_step+0xba0>
    {
        if( p[0] == MBEDTLS_ECP_PF_UNCOMPRESSED ||
   e580c:	f81c 8f01 	ldrb.w	r8, [ip, #1]!
   e5810:	f1b8 0f01 	cmp.w	r8, #1
   e5814:	d803      	bhi.n	e581e <mbedtls_ssl_handshake_client_step+0xb82>
            p[0] == MBEDTLS_ECP_PF_COMPRESSED )
        {
#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C)
            ssl->handshake->ecdh_ctx.point_format = p[0];
   e5816:	6b23      	ldr	r3, [r4, #48]	; 0x30
   e5818:	f8c3 80e0 	str.w	r8, [r3, #224]	; 0xe0
   e581c:	e011      	b.n	e5842 <mbedtls_ssl_handshake_client_step+0xba6>
#endif
            MBEDTLS_SSL_DEBUG_MSG( 4, ( "point format selected: %d", p[0] ) );
            return( 0 );
        }

        list_size--;
   e581e:	3b01      	subs	r3, #1
   e5820:	e7f3      	b.n	e580a <mbedtls_ssl_handshake_client_step+0xb6e>
    }

    /*
     * Renegotiation security checks
     */
    if( ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
   e5822:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   e5826:	2b00      	cmp	r3, #0
   e5828:	f040 80e8 	bne.w	e59fc <mbedtls_ssl_handshake_client_step+0xd60>
        ssl->conf->allow_legacy_renegotiation == MBEDTLS_SSL_LEGACY_BREAK_HANDSHAKE )
   e582c:	6823      	ldr	r3, [r4, #0]
    }

    /*
     * Renegotiation security checks
     */
    if( ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
   e582e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
   e5832:	f003 0330 	and.w	r3, r3, #48	; 0x30
   e5836:	2b20      	cmp	r3, #32
   e5838:	f040 80e0 	bne.w	e59fc <mbedtls_ssl_handshake_client_step+0xd60>
        p++;
    }

    MBEDTLS_SSL_DEBUG_MSG( 1, ( "no point format in common" ) );
    mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                    MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );
   e583c:	2228      	movs	r2, #40	; 0x28
   e583e:	f7ff bb29 	b.w	e4e94 <mbedtls_ssl_handshake_client_step+0x1f8>
        default:
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "unknown extension found: %d (ignoring)",
                           ext_id ) );
        }

        ext_len -= 4 + ext_size;
   e5842:	1a79      	subs	r1, r7, r1
   e5844:	1f0f      	subs	r7, r1, #4
        ext += 4 + ext_size;

        if( ext_len > 0 && ext_len < 4 )
   e5846:	3905      	subs	r1, #5
   e5848:	2902      	cmp	r1, #2
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "unknown extension found: %d (ignoring)",
                           ext_id ) );
        }

        ext_len -= 4 + ext_size;
        ext += 4 + ext_size;
   e584a:	4472      	add	r2, lr

        if( ext_len > 0 && ext_len < 4 )
   e584c:	d895      	bhi.n	e577a <mbedtls_ssl_handshake_client_step+0xade>
    if( ( ticket = (unsigned char *)mbedtls_calloc( 1, ticket_len ) ) == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "ticket alloc failed" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
   e584e:	4d40      	ldr	r5, [pc, #256]	; (e5950 <mbedtls_ssl_handshake_client_step+0xcb4>)
   e5850:	e0d4      	b.n	e59fc <mbedtls_ssl_handshake_client_step+0xd60>
    {
        if( ssl_parse_server_ecdh_params( ssl, &p, end ) != 0 )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message" ) );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
   e5852:	222f      	movs	r2, #47	; 0x2f
   e5854:	2102      	movs	r1, #2
   e5856:	4620      	mov	r0, r4
   e5858:	f7fa f8f6 	bl	dfa48 <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );
   e585c:	4d3d      	ldr	r5, [pc, #244]	; (e5954 <mbedtls_ssl_handshake_client_step+0xcb8>)
   e585e:	e0cd      	b.n	e59fc <mbedtls_ssl_handshake_client_step+0xd60>

        if( p > end - 2 )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message" ) );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
   e5860:	2232      	movs	r2, #50	; 0x32
   e5862:	e7f7      	b.n	e5854 <mbedtls_ssl_handshake_client_step+0xbb8>
        }

        /*
         * Verify signature
         */
        if( ! mbedtls_pk_can_do( &ssl->session_negotiate->peer_cert->pk, pk_alg ) )
   e5864:	4641      	mov	r1, r8
   e5866:	30bc      	adds	r0, #188	; 0xbc
   e5868:	f7f9 fa7c 	bl	ded64 <mbedtls_pk_can_do>
   e586c:	b930      	cbnz	r0, e587c <mbedtls_ssl_handshake_client_step+0xbe0>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message" ) );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );
   e586e:	2228      	movs	r2, #40	; 0x28
   e5870:	2102      	movs	r1, #2
   e5872:	4620      	mov	r0, r4
   e5874:	f7fa f8e8 	bl	dfa48 <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH );
   e5878:	4d37      	ldr	r5, [pc, #220]	; (e5958 <mbedtls_ssl_handshake_client_step+0xcbc>)
   e587a:	e0bf      	b.n	e59fc <mbedtls_ssl_handshake_client_step+0xd60>
        if( ssl->handshake->ecrs_enabled )
            rs_ctx = &ssl->handshake->ecrs_ctx.pk;
#endif

        if( ( ret = mbedtls_pk_verify_restartable(
                        &ssl->session_negotiate->peer_cert->pk,
   e587c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
#if defined(MBEDTLS_SSL__ECP_RESTARTABLE)
        if( ssl->handshake->ecrs_enabled )
            rs_ctx = &ssl->handshake->ecrs_ctx.pk;
#endif

        if( ( ret = mbedtls_pk_verify_restartable(
   e587e:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
   e5880:	f8cd b004 	str.w	fp, [sp, #4]
   e5884:	2300      	movs	r3, #0
   e5886:	9302      	str	r3, [sp, #8]
   e5888:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   e588a:	9300      	str	r3, [sp, #0]
   e588c:	aa0e      	add	r2, sp, #56	; 0x38
   e588e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   e5890:	4649      	mov	r1, r9
   e5892:	30bc      	adds	r0, #188	; 0xbc
   e5894:	f7f9 fa6e 	bl	ded74 <mbedtls_pk_verify_restartable>
   e5898:	4606      	mov	r6, r0
   e589a:	2800      	cmp	r0, #0
   e589c:	f43f abd4 	beq.w	e5048 <mbedtls_ssl_handshake_client_step+0x3ac>
        {
#if defined(MBEDTLS_SSL__ECP_RESTARTABLE)
            if( ret != MBEDTLS_ERR_ECP_IN_PROGRESS )
#endif
                mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                                MBEDTLS_SSL_ALERT_MSG_DECRYPT_ERROR );
   e58a0:	2233      	movs	r2, #51	; 0x33
   e58a2:	2102      	movs	r1, #2
   e58a4:	4620      	mov	r0, r4
   e58a6:	f7fa f8cf 	bl	dfa48 <mbedtls_ssl_send_alert_message>
   e58aa:	4635      	mov	r5, r6
   e58ac:	e0a6      	b.n	e59fc <mbedtls_ssl_handshake_client_step+0xd60>
        }
        else
#endif
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   e58ae:	4d2b      	ldr	r5, [pc, #172]	; (e595c <mbedtls_ssl_handshake_client_step+0xcc0>)
   e58b0:	e0a4      	b.n	e59fc <mbedtls_ssl_handshake_client_step+0xd60>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate request" ) );

    if( ! mbedtls_ssl_ciphersuite_cert_req_allowed( ciphersuite_info ) )
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse certificate request" ) );
        ssl->state++;
   e58b2:	2306      	movs	r3, #6
   e58b4:	f7ff bbca 	b.w	e504c <mbedtls_ssl_handshake_client_step+0x3b0>
        return( 0 );
    }

    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   e58b8:	4631      	mov	r1, r6
   e58ba:	4620      	mov	r0, r4
   e58bc:	f7fa f8e0 	bl	dfa80 <mbedtls_ssl_read_record>
   e58c0:	2800      	cmp	r0, #0
   e58c2:	f47f aaf0 	bne.w	e4ea6 <mbedtls_ssl_handshake_client_step+0x20a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
   e58c6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   e58c8:	2b16      	cmp	r3, #22
   e58ca:	f47f ab03 	bne.w	e4ed4 <mbedtls_ssl_handshake_client_step+0x238>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
    }

    ssl->state++;
   e58ce:	6863      	ldr	r3, [r4, #4]
    ssl->client_auth = ( ssl->in_msg[0] == MBEDTLS_SSL_HS_CERTIFICATE_REQUEST );
   e58d0:	6e62      	ldr	r2, [r4, #100]	; 0x64
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
    }

    ssl->state++;
   e58d2:	3301      	adds	r3, #1
   e58d4:	6063      	str	r3, [r4, #4]
    ssl->client_auth = ( ssl->in_msg[0] == MBEDTLS_SSL_HS_CERTIFICATE_REQUEST );
   e58d6:	7813      	ldrb	r3, [r2, #0]
   e58d8:	2b0d      	cmp	r3, #13
   e58da:	bf0c      	ite	eq
   e58dc:	2301      	moveq	r3, #1
   e58de:	2300      	movne	r3, #0
   e58e0:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "got %s certificate request",
                        ssl->client_auth ? "a" : "no" ) );

    if( ssl->client_auth == 0 )
   e58e4:	d002      	beq.n	e58ec <mbedtls_ssl_handshake_client_step+0xc50>
    {
        /* Current message is probably the ServerHelloDone */
        ssl->keep_current_message = 1;
   e58e6:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
   e58ea:	e087      	b.n	e59fc <mbedtls_ssl_handshake_client_step+0xd60>
     *  superficially sane.
     */
    buf = ssl->in_msg;

    /* certificate_types */
    if( ssl->in_hslen <= mbedtls_ssl_hs_hdr_len( ssl ) )
   e58ec:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   e58ee:	2e04      	cmp	r6, #4
   e58f0:	d806      	bhi.n	e5900 <mbedtls_ssl_handshake_client_step+0xc64>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
   e58f2:	2232      	movs	r2, #50	; 0x32
   e58f4:	2102      	movs	r1, #2
   e58f6:	4620      	mov	r0, r4
   e58f8:	f7fa f8a6 	bl	dfa48 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST );
   e58fc:	4d18      	ldr	r5, [pc, #96]	; (e5960 <mbedtls_ssl_handshake_client_step+0xcc4>)
   e58fe:	e07d      	b.n	e59fc <mbedtls_ssl_handshake_client_step+0xd60>
    }
    cert_type_len = buf[mbedtls_ssl_hs_hdr_len( ssl )];
   e5900:	7913      	ldrb	r3, [r2, #4]
     * Both reach at most the index:
     *    ...hdr_len + 2 + n,
     * therefore the buffer length at this point must be greater than that
     * regardless of the actual code path.
     */
    if( ssl->in_hslen <= mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n )
   e5902:	1d98      	adds	r0, r3, #6
   e5904:	4286      	cmp	r6, r0
   e5906:	d9f4      	bls.n	e58f2 <mbedtls_ssl_handshake_client_step+0xc56>
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST );
    }

    /* supported_signature_algorithms */
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
   e5908:	68e1      	ldr	r1, [r4, #12]
   e590a:	2903      	cmp	r1, #3
   e590c:	d10a      	bne.n	e5924 <mbedtls_ssl_handshake_client_step+0xc88>
    {
        size_t sig_alg_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )
   e590e:	18d1      	adds	r1, r2, r3
                             | ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n]       ) );
   e5910:	794f      	ldrb	r7, [r1, #5]
   e5912:	5c11      	ldrb	r1, [r2, r0]
         *     buf[...hdr_len + 3 + n + sig_alg_len - 1 + 1],
         * which reduces to:
         *     buf[...hdr_len + 3 + n + sig_alg_len],
         * which is one less than we need the buf to be.
         */
        if( ssl->in_hslen <= mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n + sig_alg_len )
   e5914:	1dd8      	adds	r0, r3, #7
    /* supported_signature_algorithms */
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
    {
        size_t sig_alg_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )
                             | ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n]       ) );
   e5916:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
         *     buf[...hdr_len + 3 + n + sig_alg_len - 1 + 1],
         * which reduces to:
         *     buf[...hdr_len + 3 + n + sig_alg_len],
         * which is one less than we need the buf to be.
         */
        if( ssl->in_hslen <= mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n + sig_alg_len )
   e591a:	4408      	add	r0, r1
   e591c:	4286      	cmp	r6, r0
   e591e:	d9e8      	bls.n	e58f2 <mbedtls_ssl_handshake_client_step+0xc56>
   e5920:	3302      	adds	r3, #2
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "Supported Signature Algorithm found: %d"
                                        ",%d", sig_alg[i], sig_alg[i + 1]  ) );
        }
#endif

        n += 2 + sig_alg_len;
   e5922:	440b      	add	r3, r1
    }
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

    /* certificate_authorities */
    dn_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )
   e5924:	441a      	add	r2, r3
             | ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n]       ) );

    n += dn_len;
    if( ssl->in_hslen != mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n )
   e5926:	3307      	adds	r3, #7
   e5928:	7951      	ldrb	r1, [r2, #5]
   e592a:	7992      	ldrb	r2, [r2, #6]
   e592c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   e5930:	4413      	add	r3, r2
   e5932:	429e      	cmp	r6, r3
   e5934:	d062      	beq.n	e59fc <mbedtls_ssl_handshake_client_step+0xd60>
   e5936:	e7dc      	b.n	e58f2 <mbedtls_ssl_handshake_client_step+0xc56>
    if( ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ||
        ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_HELLO_DONE )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello done message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
   e5938:	2232      	movs	r2, #50	; 0x32
   e593a:	2102      	movs	r1, #2
   e593c:	4620      	mov	r0, r4
   e593e:	f7fa f883 	bl	dfa48 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO_DONE );
   e5942:	4d08      	ldr	r5, [pc, #32]	; (e5964 <mbedtls_ssl_handshake_client_step+0xcc8>)
   e5944:	e05a      	b.n	e59fc <mbedtls_ssl_handshake_client_step+0xd60>
   e5946:	bf00      	nop
   e5948:	ffff9180 	.word	0xffff9180
   e594c:	ffff8f80 	.word	0xffff8f80
   e5950:	ffff8680 	.word	0xffff8680
   e5954:	ffff8500 	.word	0xffff8500
   e5958:	ffff9300 	.word	0xffff9300
   e595c:	ffff9400 	.word	0xffff9400
   e5960:	ffff8580 	.word	0xffff8580
   e5964:	ffff8480 	.word	0xffff8480
    }

    msg = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );

    lifetime = ( ((uint32_t) msg[0]) << 24 ) | ( msg[1] << 16 ) |
               ( msg[2] << 8 ) | ( msg[3] );
   e5968:	79f2      	ldrb	r2, [r6, #7]
   e596a:	9207      	str	r2, [sp, #28]

    ticket_len = ( msg[4] << 8 ) | ( msg[5] );
   e596c:	7a37      	ldrb	r7, [r6, #8]
   e596e:	7a72      	ldrb	r2, [r6, #9]
        return( MBEDTLS_ERR_SSL_BAD_HS_NEW_SESSION_TICKET );
    }

    msg = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );

    lifetime = ( ((uint32_t) msg[0]) << 24 ) | ( msg[1] << 16 ) |
   e5970:	f896 8004 	ldrb.w	r8, [r6, #4]
   e5974:	f896 b005 	ldrb.w	fp, [r6, #5]
               ( msg[2] << 8 ) | ( msg[3] );
   e5978:	f896 a006 	ldrb.w	sl, [r6, #6]

    ticket_len = ( msg[4] << 8 ) | ( msg[5] );
   e597c:	ea42 2707 	orr.w	r7, r2, r7, lsl #8

    if( ticket_len + 6 + mbedtls_ssl_hs_hdr_len( ssl ) != ssl->in_hslen )
   e5980:	f107 020a 	add.w	r2, r7, #10
   e5984:	4293      	cmp	r3, r2
   e5986:	f47f aca0 	bne.w	e52ca <mbedtls_ssl_handshake_client_step+0x62e>
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "ticket length: %d", ticket_len ) );

    /* We're not waiting for a NewSessionTicket message any more */
    ssl->handshake->new_session_ticket = 0;
   e598a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   e598c:	f8c3 9358 	str.w	r9, [r3, #856]	; 0x358
    ssl->state = MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC;
   e5990:	230c      	movs	r3, #12
   e5992:	6063      	str	r3, [r4, #4]

    /*
     * Zero-length ticket means the server changed his mind and doesn't want
     * to send a ticket after all, so just forget it
     */
    if( ticket_len == 0 )
   e5994:	2f00      	cmp	r7, #0
   e5996:	d031      	beq.n	e59fc <mbedtls_ssl_handshake_client_step+0xd60>
        return( 0 );

    mbedtls_platform_zeroize( ssl->session_negotiate->ticket,
   e5998:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
                              ssl->session_negotiate->ticket_len );
   e599a:	6e99      	ldr	r1, [r3, #104]	; 0x68
   e599c:	6e58      	ldr	r0, [r3, #100]	; 0x64
   e599e:	f7f5 fc2d 	bl	db1fc <mbedtls_platform_zeroize>
    mbedtls_free( ssl->session_negotiate->ticket );
   e59a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e59a4:	6e58      	ldr	r0, [r3, #100]	; 0x64
   e59a6:	f000 fb8d 	bl	e60c4 <free>
    ssl->session_negotiate->ticket = NULL;
   e59aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e59ac:	f8c3 9064 	str.w	r9, [r3, #100]	; 0x64
    ssl->session_negotiate->ticket_len = 0;
   e59b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

    if( ( ticket = (unsigned char *)mbedtls_calloc( 1, ticket_len ) ) == NULL )
   e59b2:	4639      	mov	r1, r7

    mbedtls_platform_zeroize( ssl->session_negotiate->ticket,
                              ssl->session_negotiate->ticket_len );
    mbedtls_free( ssl->session_negotiate->ticket );
    ssl->session_negotiate->ticket = NULL;
    ssl->session_negotiate->ticket_len = 0;
   e59b4:	f8c3 9068 	str.w	r9, [r3, #104]	; 0x68

    if( ( ticket = (unsigned char *)mbedtls_calloc( 1, ticket_len ) ) == NULL )
   e59b8:	2001      	movs	r0, #1
   e59ba:	f003 ff5b 	bl	e9874 <calloc>
   e59be:	b930      	cbnz	r0, e59ce <mbedtls_ssl_handshake_client_step+0xd32>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "ticket alloc failed" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
   e59c0:	2250      	movs	r2, #80	; 0x50
   e59c2:	2102      	movs	r1, #2
   e59c4:	4620      	mov	r0, r4
   e59c6:	f7fa f83f 	bl	dfa48 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
   e59ca:	4d0e      	ldr	r5, [pc, #56]	; (e5a04 <mbedtls_ssl_handshake_client_step+0xd68>)
   e59cc:	e016      	b.n	e59fc <mbedtls_ssl_handshake_client_step+0xd60>
    }

    memcpy( ticket, msg + 6, ticket_len );
   e59ce:	463a      	mov	r2, r7
   e59d0:	f106 010a 	add.w	r1, r6, #10
   e59d4:	9008      	str	r0, [sp, #32]
   e59d6:	f004 f86e 	bl	e9ab6 <memcpy>

    ssl->session_negotiate->ticket = ticket;
   e59da:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   e59dc:	9b08      	ldr	r3, [sp, #32]
   e59de:	6653      	str	r3, [r2, #100]	; 0x64
    ssl->session_negotiate->ticket_len = ticket_len;
   e59e0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e59e2:	669f      	str	r7, [r3, #104]	; 0x68
    ssl->session_negotiate->ticket_lifetime = lifetime;
   e59e4:	9b07      	ldr	r3, [sp, #28]
   e59e6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   e59e8:	ea43 6808 	orr.w	r8, r3, r8, lsl #24
   e59ec:	ea48 4b0b 	orr.w	fp, r8, fp, lsl #16
   e59f0:	ea4b 230a 	orr.w	r3, fp, sl, lsl #8
   e59f4:	66d3      	str	r3, [r2, #108]	; 0x6c
     * RFC 5077 section 3.4:
     * "If the client receives a session ticket from the server, then it
     * discards any Session ID that was sent in the ServerHello."
     */
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "ticket in use, discarding session id" ) );
    ssl->session_negotiate->id_len = 0;
   e59f6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e59f8:	f8c3 9008 	str.w	r9, [r3, #8]
           MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid state %d", ssl->state ) );
           return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   }

    return( ret );
}
   e59fc:	4628      	mov	r0, r5
   e59fe:	b01f      	add	sp, #124	; 0x7c
   e5a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e5a04:	ffff8100 	.word	0xffff8100

000e5a08 <_GLOBAL__sub_I_myservo>:
   e5a08:	b508      	push	{r3, lr}
   e5a0a:	f000 f89d 	bl	e5b48 <HAL_Pin_Map>
   e5a0e:	4802      	ldr	r0, [pc, #8]	; (e5a18 <_GLOBAL__sub_I_myservo+0x10>)
   e5a10:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   e5a14:	f000 bc25 	b.w	e6262 <_ZN5ServoC1Ev>
   e5a18:	2003e48c 	.word	0x2003e48c

000e5a1c <_ZN17HardwareInterfaceC1Ev>:
#include "HardwareInterface.h"

HardwareInterface::HardwareInterface(/* args */)
   e5a1c:	b510      	push	{r4, lr}
   e5a1e:	4604      	mov	r4, r0
   e5a20:	f000 fc1f 	bl	e6262 <_ZN5ServoC1Ev>
   e5a24:	2302      	movs	r3, #2
   e5a26:	6123      	str	r3, [r4, #16]
   e5a28:	2303      	movs	r3, #3
   e5a2a:	6163      	str	r3, [r4, #20]
   e5a2c:	2304      	movs	r3, #4
   e5a2e:	61a3      	str	r3, [r4, #24]
   e5a30:	2305      	movs	r3, #5
   e5a32:	61e3      	str	r3, [r4, #28]
{
}
   e5a34:	4620      	mov	r0, r4
   e5a36:	bd10      	pop	{r4, pc}

000e5a38 <_ZN17HardwareInterfaceD1Ev>:

HardwareInterface::~HardwareInterface()
{
}
   e5a38:	4770      	bx	lr

000e5a3a <_ZN17HardwareInterface5setupEv>:

void HardwareInterface::setup() {
   e5a3a:	b513      	push	{r0, r1, r4, lr}
  myservo.attach(servopin);
   e5a3c:	2200      	movs	r2, #0

HardwareInterface::~HardwareInterface()
{
}

void HardwareInterface::setup() {
   e5a3e:	4604      	mov	r4, r0
  myservo.attach(servopin);
   e5a40:	23b4      	movs	r3, #180	; 0xb4
   e5a42:	8a01      	ldrh	r1, [r0, #16]
   e5a44:	e88d 000c 	stmia.w	sp, {r2, r3}
   e5a48:	f44f 6316 	mov.w	r3, #2400	; 0x960
   e5a4c:	f44f 7208 	mov.w	r2, #544	; 0x220
   e5a50:	f000 fc1b 	bl	e628a <_ZN5Servo6attachEtttss>
  pinMode(redPin, OUTPUT);
   e5a54:	8aa0      	ldrh	r0, [r4, #20]
   e5a56:	2101      	movs	r1, #1
   e5a58:	f002 fc6a 	bl	e8330 <pinMode>
  pinMode(greenPin, OUTPUT);
   e5a5c:	8b20      	ldrh	r0, [r4, #24]
   e5a5e:	2101      	movs	r1, #1
   e5a60:	f002 fc66 	bl	e8330 <pinMode>
  pinMode(bluePin, OUTPUT);
   e5a64:	8ba0      	ldrh	r0, [r4, #28]
   e5a66:	2101      	movs	r1, #1
}
   e5a68:	b002      	add	sp, #8
   e5a6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void HardwareInterface::setup() {
  myservo.attach(servopin);
  pinMode(redPin, OUTPUT);
  pinMode(greenPin, OUTPUT);
  pinMode(bluePin, OUTPUT);
   e5a6e:	f002 bc5f 	b.w	e8330 <pinMode>
	...

000e5a74 <_ZN17HardwareInterface8openLockEi>:
}

// Consider adding an argument that specifies which motor to run
void HardwareInterface::openLock(int command) {
  if (command == 0)
   e5a74:	2901      	cmp	r1, #1
  pinMode(greenPin, OUTPUT);
  pinMode(bluePin, OUTPUT);
}

// Consider adding an argument that specifies which motor to run
void HardwareInterface::openLock(int command) {
   e5a76:	b510      	push	{r4, lr}
   e5a78:	4604      	mov	r4, r0
  if (command == 0)
   e5a7a:	d006      	beq.n	e5a8a <_ZN17HardwareInterface8openLockEi+0x16>
  {
    //close
    Serial.println("Closing the lock");
   e5a7c:	f001 fc0c 	bl	e7298 <_Z16_fetch_usbserialv>
   e5a80:	4907      	ldr	r1, [pc, #28]	; (e5aa0 <_ZN17HardwareInterface8openLockEi+0x2c>)
   e5a82:	f000 ff0e 	bl	e68a2 <_ZN5Print7printlnEPKc>
    myservo.write(90);
   e5a86:	215a      	movs	r1, #90	; 0x5a
   e5a88:	e005      	b.n	e5a96 <_ZN17HardwareInterface8openLockEi+0x22>
  }
  else if (command == 1)
  {
    //open
    Serial.println("Opening the lock");
   e5a8a:	f001 fc05 	bl	e7298 <_Z16_fetch_usbserialv>
   e5a8e:	4905      	ldr	r1, [pc, #20]	; (e5aa4 <_ZN17HardwareInterface8openLockEi+0x30>)
   e5a90:	f000 ff07 	bl	e68a2 <_ZN5Print7printlnEPKc>
    myservo.write(0);
   e5a94:	2100      	movs	r1, #0
   e5a96:	4620      	mov	r0, r4
  else {
    //close
    Serial.println("Closing the lock");
    myservo.write(90);
  }
}
   e5a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  }
  else if (command == 1)
  {
    //open
    Serial.println("Opening the lock");
    myservo.write(0);
   e5a9c:	f000 bbb6 	b.w	e620c <_ZN5Servo5writeEi>
   e5aa0:	000eef9e 	.word	0x000eef9e
   e5aa4:	000eefaf 	.word	0x000eefaf

000e5aa8 <_ZN17HardwareInterface10rgbControlEi>:

// 0  = All off
// 1 = Red on 
// 2 = Green on 
// 3 = blue pin on
void HardwareInterface::rgbControl(int color) {
   e5aa8:	b538      	push	{r3, r4, r5, lr}
   e5aaa:	4604      	mov	r4, r0
      // Max brightness of LEDs
  int brightness = 128; 

  // All off
  if (color == 0){
   e5aac:	460d      	mov	r5, r1
   e5aae:	b941      	cbnz	r1, e5ac2 <_ZN17HardwareInterface10rgbControlEi+0x1a>
    analogWrite(redPin, 0);
   e5ab0:	8a80      	ldrh	r0, [r0, #20]
   e5ab2:	f002 fc4e 	bl	e8352 <_Z11analogWritetm>
    analogWrite(greenPin, 0);
   e5ab6:	4629      	mov	r1, r5
   e5ab8:	8b20      	ldrh	r0, [r4, #24]
   e5aba:	f002 fc4a 	bl	e8352 <_Z11analogWritetm>
    analogWrite(bluePin, 0);
   e5abe:	4629      	mov	r1, r5
   e5ac0:	e00c      	b.n	e5adc <_ZN17HardwareInterface10rgbControlEi+0x34>
  }
  // Red
  if (color == 1){
   e5ac2:	2901      	cmp	r1, #1
   e5ac4:	d102      	bne.n	e5acc <_ZN17HardwareInterface10rgbControlEi+0x24>
    analogWrite(redPin, brightness);
   e5ac6:	2180      	movs	r1, #128	; 0x80
   e5ac8:	8a80      	ldrh	r0, [r0, #20]
   e5aca:	e008      	b.n	e5ade <_ZN17HardwareInterface10rgbControlEi+0x36>

  }
  // Green
  else if (color == 2){
   e5acc:	2902      	cmp	r1, #2
   e5ace:	d102      	bne.n	e5ad6 <_ZN17HardwareInterface10rgbControlEi+0x2e>
    //Set green part of RGB to light
    analogWrite(greenPin, brightness);
   e5ad0:	2180      	movs	r1, #128	; 0x80
   e5ad2:	8b00      	ldrh	r0, [r0, #24]
   e5ad4:	e003      	b.n	e5ade <_ZN17HardwareInterface10rgbControlEi+0x36>
  }
  // BLue
  else if (color == 3){
   e5ad6:	2903      	cmp	r1, #3
   e5ad8:	d105      	bne.n	e5ae6 <_ZN17HardwareInterface10rgbControlEi+0x3e>
    analogWrite(bluePin, brightness);
   e5ada:	2180      	movs	r1, #128	; 0x80
   e5adc:	8ba0      	ldrh	r0, [r4, #28]

  }
}
   e5ade:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    //Set green part of RGB to light
    analogWrite(greenPin, brightness);
  }
  // BLue
  else if (color == 3){
    analogWrite(bluePin, brightness);
   e5ae2:	f002 bc36 	b.w	e8352 <_Z11analogWritetm>
   e5ae6:	bd38      	pop	{r3, r4, r5, pc}

000e5ae8 <_ZN17HardwareInterface15faceNotRecoggedEv>:

  }
}

void HardwareInterface::faceNotRecogged(){
   e5ae8:	b538      	push	{r3, r4, r5, lr}
   e5aea:	4604      	mov	r4, r0
   e5aec:	2502      	movs	r5, #2
  // Blink red LED a few times
  int blinkytimes = 2;
  for (int i = 0; i < blinkytimes; i++){
    rgbControl(1);
   e5aee:	2101      	movs	r1, #1
   e5af0:	4620      	mov	r0, r4
   e5af2:	f7ff ffd9 	bl	e5aa8 <_ZN17HardwareInterface10rgbControlEi>
    myservo.write(90);
   e5af6:	215a      	movs	r1, #90	; 0x5a
   e5af8:	4620      	mov	r0, r4
   e5afa:	f000 fb87 	bl	e620c <_ZN5Servo5writeEi>
    delay(500);
   e5afe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   e5b02:	f001 f863 	bl	e6bcc <delay>
    rgbControl(0);
   e5b06:	2100      	movs	r1, #0
   e5b08:	4620      	mov	r0, r4
   e5b0a:	f7ff ffcd 	bl	e5aa8 <_ZN17HardwareInterface10rgbControlEi>
    myservo.write(90);
   e5b0e:	215a      	movs	r1, #90	; 0x5a
   e5b10:	4620      	mov	r0, r4
   e5b12:	f000 fb7b 	bl	e620c <_ZN5Servo5writeEi>
    delay(500);
   e5b16:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   e5b1a:	f001 f857 	bl	e6bcc <delay>
}

void HardwareInterface::faceNotRecogged(){
  // Blink red LED a few times
  int blinkytimes = 2;
  for (int i = 0; i < blinkytimes; i++){
   e5b1e:	3d01      	subs	r5, #1
   e5b20:	d1e5      	bne.n	e5aee <_ZN17HardwareInterface15faceNotRecoggedEv+0x6>
    delay(500);
    rgbControl(0);
    myservo.write(90);
    delay(500);
  }
   e5b22:	bd38      	pop	{r3, r4, r5, pc}

000e5b24 <_GLOBAL__sub_I__ZN17HardwareInterfaceC2Ev>:
   e5b24:	f000 b810 	b.w	e5b48 <HAL_Pin_Map>

000e5b28 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   e5b28:	b508      	push	{r3, lr}
   e5b2a:	4b02      	ldr	r3, [pc, #8]	; (e5b34 <netdb_freeaddrinfo+0xc>)
   e5b2c:	681b      	ldr	r3, [r3, #0]
   e5b2e:	689b      	ldr	r3, [r3, #8]
   e5b30:	9301      	str	r3, [sp, #4]
   e5b32:	bd08      	pop	{r3, pc}
   e5b34:	00030268 	.word	0x00030268

000e5b38 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   e5b38:	b508      	push	{r3, lr}
   e5b3a:	4b02      	ldr	r3, [pc, #8]	; (e5b44 <netdb_getaddrinfo+0xc>)
   e5b3c:	681b      	ldr	r3, [r3, #0]
   e5b3e:	68db      	ldr	r3, [r3, #12]
   e5b40:	9301      	str	r3, [sp, #4]
   e5b42:	bd08      	pop	{r3, pc}
   e5b44:	00030268 	.word	0x00030268

000e5b48 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   e5b48:	b508      	push	{r3, lr}
   e5b4a:	4b02      	ldr	r3, [pc, #8]	; (e5b54 <HAL_Pin_Map+0xc>)
   e5b4c:	681b      	ldr	r3, [r3, #0]
   e5b4e:	681b      	ldr	r3, [r3, #0]
   e5b50:	9301      	str	r3, [sp, #4]
   e5b52:	bd08      	pop	{r3, pc}
   e5b54:	0003022c 	.word	0x0003022c

000e5b58 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   e5b58:	b508      	push	{r3, lr}
   e5b5a:	4b02      	ldr	r3, [pc, #8]	; (e5b64 <HAL_Validate_Pin_Function+0xc>)
   e5b5c:	681b      	ldr	r3, [r3, #0]
   e5b5e:	685b      	ldr	r3, [r3, #4]
   e5b60:	9301      	str	r3, [sp, #4]
   e5b62:	bd08      	pop	{r3, pc}
   e5b64:	0003022c 	.word	0x0003022c

000e5b68 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   e5b68:	b508      	push	{r3, lr}
   e5b6a:	4b02      	ldr	r3, [pc, #8]	; (e5b74 <HAL_Pin_Mode+0xc>)
   e5b6c:	681b      	ldr	r3, [r3, #0]
   e5b6e:	689b      	ldr	r3, [r3, #8]
   e5b70:	9301      	str	r3, [sp, #4]
   e5b72:	bd08      	pop	{r3, pc}
   e5b74:	0003022c 	.word	0x0003022c

000e5b78 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   e5b78:	b508      	push	{r3, lr}
   e5b7a:	4b02      	ldr	r3, [pc, #8]	; (e5b84 <HAL_Get_Pin_Mode+0xc>)
   e5b7c:	681b      	ldr	r3, [r3, #0]
   e5b7e:	68db      	ldr	r3, [r3, #12]
   e5b80:	9301      	str	r3, [sp, #4]
   e5b82:	bd08      	pop	{r3, pc}
   e5b84:	0003022c 	.word	0x0003022c

000e5b88 <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
   e5b88:	b508      	push	{r3, lr}
   e5b8a:	4b02      	ldr	r3, [pc, #8]	; (e5b94 <HAL_DAC_Write+0xc>)
   e5b8c:	681b      	ldr	r3, [r3, #0]
   e5b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   e5b90:	9301      	str	r3, [sp, #4]
   e5b92:	bd08      	pop	{r3, pc}
   e5b94:	0003022c 	.word	0x0003022c

000e5b98 <HAL_PWM_Write_Ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, HAL_PWM_Get_Resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, HAL_PWM_Set_Resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, HAL_PWM_Write_Ext, void(uint16_t, uint32_t))
   e5b98:	b508      	push	{r3, lr}
   e5b9a:	4b02      	ldr	r3, [pc, #8]	; (e5ba4 <HAL_PWM_Write_Ext+0xc>)
   e5b9c:	681b      	ldr	r3, [r3, #0]
   e5b9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   e5ba0:	9301      	str	r3, [sp, #4]
   e5ba2:	bd08      	pop	{r3, pc}
   e5ba4:	0003022c 	.word	0x0003022c

000e5ba8 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   e5ba8:	b508      	push	{r3, lr}
   e5baa:	4b02      	ldr	r3, [pc, #8]	; (e5bb4 <HAL_SPI_Init+0xc>)
   e5bac:	681b      	ldr	r3, [r3, #0]
   e5bae:	69db      	ldr	r3, [r3, #28]
   e5bb0:	9301      	str	r3, [sp, #4]
   e5bb2:	bd08      	pop	{r3, pc}
   e5bb4:	00030230 	.word	0x00030230

000e5bb8 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   e5bb8:	b508      	push	{r3, lr}
   e5bba:	4b02      	ldr	r3, [pc, #8]	; (e5bc4 <HAL_SPI_Is_Enabled+0xc>)
   e5bbc:	681b      	ldr	r3, [r3, #0]
   e5bbe:	6a1b      	ldr	r3, [r3, #32]
   e5bc0:	9301      	str	r3, [sp, #4]
   e5bc2:	bd08      	pop	{r3, pc}
   e5bc4:	00030230 	.word	0x00030230

000e5bc8 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   e5bc8:	b508      	push	{r3, lr}
   e5bca:	4b02      	ldr	r3, [pc, #8]	; (e5bd4 <if_index_to_name+0xc>)
   e5bcc:	681b      	ldr	r3, [r3, #0]
   e5bce:	695b      	ldr	r3, [r3, #20]
   e5bd0:	9301      	str	r3, [sp, #4]
   e5bd2:	bd08      	pop	{r3, pc}
   e5bd4:	0003026c 	.word	0x0003026c

000e5bd8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   e5bd8:	b508      	push	{r3, lr}
   e5bda:	4b02      	ldr	r3, [pc, #8]	; (e5be4 <HAL_RNG_GetRandomNumber+0xc>)
   e5bdc:	681b      	ldr	r3, [r3, #0]
   e5bde:	685b      	ldr	r3, [r3, #4]
   e5be0:	9301      	str	r3, [sp, #4]
   e5be2:	bd08      	pop	{r3, pc}
   e5be4:	00030218 	.word	0x00030218

000e5be8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   e5be8:	b508      	push	{r3, lr}
   e5bea:	4b02      	ldr	r3, [pc, #8]	; (e5bf4 <HAL_Delay_Microseconds+0xc>)
   e5bec:	681b      	ldr	r3, [r3, #0]
   e5bee:	68db      	ldr	r3, [r3, #12]
   e5bf0:	9301      	str	r3, [sp, #4]
   e5bf2:	bd08      	pop	{r3, pc}
   e5bf4:	00030218 	.word	0x00030218

000e5bf8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   e5bf8:	b508      	push	{r3, lr}
   e5bfa:	4b02      	ldr	r3, [pc, #8]	; (e5c04 <HAL_Timer_Get_Milli_Seconds+0xc>)
   e5bfc:	681b      	ldr	r3, [r3, #0]
   e5bfe:	695b      	ldr	r3, [r3, #20]
   e5c00:	9301      	str	r3, [sp, #4]
   e5c02:	bd08      	pop	{r3, pc}
   e5c04:	00030218 	.word	0x00030218

000e5c08 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   e5c08:	b508      	push	{r3, lr}
   e5c0a:	4b02      	ldr	r3, [pc, #8]	; (e5c14 <HAL_RTC_Get_UnixTime+0xc>)
   e5c0c:	681b      	ldr	r3, [r3, #0]
   e5c0e:	69db      	ldr	r3, [r3, #28]
   e5c10:	9301      	str	r3, [sp, #4]
   e5c12:	bd08      	pop	{r3, pc}
   e5c14:	00030218 	.word	0x00030218

000e5c18 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   e5c18:	b508      	push	{r3, lr}
   e5c1a:	4b02      	ldr	r3, [pc, #8]	; (e5c24 <HAL_RTC_Time_Is_Valid+0xc>)
   e5c1c:	681b      	ldr	r3, [r3, #0]
   e5c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   e5c20:	9301      	str	r3, [sp, #4]
   e5c22:	bd08      	pop	{r3, pc}
   e5c24:	00030218 	.word	0x00030218

000e5c28 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   e5c28:	b508      	push	{r3, lr}
   e5c2a:	4b02      	ldr	r3, [pc, #8]	; (e5c34 <os_thread_is_current+0xc>)
   e5c2c:	681b      	ldr	r3, [r3, #0]
   e5c2e:	689b      	ldr	r3, [r3, #8]
   e5c30:	9301      	str	r3, [sp, #4]
   e5c32:	bd08      	pop	{r3, pc}
   e5c34:	00030248 	.word	0x00030248

000e5c38 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   e5c38:	b508      	push	{r3, lr}
   e5c3a:	4b02      	ldr	r3, [pc, #8]	; (e5c44 <os_thread_join+0xc>)
   e5c3c:	681b      	ldr	r3, [r3, #0]
   e5c3e:	691b      	ldr	r3, [r3, #16]
   e5c40:	9301      	str	r3, [sp, #4]
   e5c42:	bd08      	pop	{r3, pc}
   e5c44:	00030248 	.word	0x00030248

000e5c48 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   e5c48:	b508      	push	{r3, lr}
   e5c4a:	4b02      	ldr	r3, [pc, #8]	; (e5c54 <os_thread_cleanup+0xc>)
   e5c4c:	681b      	ldr	r3, [r3, #0]
   e5c4e:	695b      	ldr	r3, [r3, #20]
   e5c50:	9301      	str	r3, [sp, #4]
   e5c52:	bd08      	pop	{r3, pc}
   e5c54:	00030248 	.word	0x00030248

000e5c58 <os_thread_scheduling>:
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   e5c58:	b508      	push	{r3, lr}
   e5c5a:	4b02      	ldr	r3, [pc, #8]	; (e5c64 <os_thread_scheduling+0xc>)
   e5c5c:	681b      	ldr	r3, [r3, #0]
   e5c5e:	69db      	ldr	r3, [r3, #28]
   e5c60:	9301      	str	r3, [sp, #4]
   e5c62:	bd08      	pop	{r3, pc}
   e5c64:	00030248 	.word	0x00030248

000e5c68 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   e5c68:	b508      	push	{r3, lr}
   e5c6a:	4b02      	ldr	r3, [pc, #8]	; (e5c74 <os_mutex_recursive_create+0xc>)
   e5c6c:	681b      	ldr	r3, [r3, #0]
   e5c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   e5c70:	9301      	str	r3, [sp, #4]
   e5c72:	bd08      	pop	{r3, pc}
   e5c74:	00030248 	.word	0x00030248

000e5c78 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   e5c78:	b508      	push	{r3, lr}
   e5c7a:	4b02      	ldr	r3, [pc, #8]	; (e5c84 <os_mutex_recursive_destroy+0xc>)
   e5c7c:	681b      	ldr	r3, [r3, #0]
   e5c7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   e5c80:	9301      	str	r3, [sp, #4]
   e5c82:	bd08      	pop	{r3, pc}
   e5c84:	00030248 	.word	0x00030248

000e5c88 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   e5c88:	b508      	push	{r3, lr}
   e5c8a:	4b02      	ldr	r3, [pc, #8]	; (e5c94 <inet_inet_ntop+0xc>)
   e5c8c:	681b      	ldr	r3, [r3, #0]
   e5c8e:	695b      	ldr	r3, [r3, #20]
   e5c90:	9301      	str	r3, [sp, #4]
   e5c92:	bd08      	pop	{r3, pc}
   e5c94:	00030264 	.word	0x00030264

000e5c98 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   e5c98:	b508      	push	{r3, lr}
   e5c9a:	4b02      	ldr	r3, [pc, #8]	; (e5ca4 <inet_htonl+0xc>)
   e5c9c:	681b      	ldr	r3, [r3, #0]
   e5c9e:	6a1b      	ldr	r3, [r3, #32]
   e5ca0:	9301      	str	r3, [sp, #4]
   e5ca2:	bd08      	pop	{r3, pc}
   e5ca4:	00030264 	.word	0x00030264

000e5ca8 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   e5ca8:	b508      	push	{r3, lr}
   e5caa:	4b02      	ldr	r3, [pc, #8]	; (e5cb4 <inet_htons+0xc>)
   e5cac:	681b      	ldr	r3, [r3, #0]
   e5cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   e5cb0:	9301      	str	r3, [sp, #4]
   e5cb2:	bd08      	pop	{r3, pc}
   e5cb4:	00030264 	.word	0x00030264

000e5cb8 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   e5cb8:	b508      	push	{r3, lr}
   e5cba:	4b02      	ldr	r3, [pc, #8]	; (e5cc4 <HAL_USART_Init+0xc>)
   e5cbc:	681b      	ldr	r3, [r3, #0]
   e5cbe:	681b      	ldr	r3, [r3, #0]
   e5cc0:	9301      	str	r3, [sp, #4]
   e5cc2:	bd08      	pop	{r3, pc}
   e5cc4:	0003023c 	.word	0x0003023c

000e5cc8 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   e5cc8:	b508      	push	{r3, lr}
   e5cca:	4b02      	ldr	r3, [pc, #8]	; (e5cd4 <HAL_USART_Write_Data+0xc>)
   e5ccc:	681b      	ldr	r3, [r3, #0]
   e5cce:	68db      	ldr	r3, [r3, #12]
   e5cd0:	9301      	str	r3, [sp, #4]
   e5cd2:	bd08      	pop	{r3, pc}
   e5cd4:	0003023c 	.word	0x0003023c

000e5cd8 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   e5cd8:	b508      	push	{r3, lr}
   e5cda:	4b02      	ldr	r3, [pc, #8]	; (e5ce4 <HAL_USART_Available_Data+0xc>)
   e5cdc:	681b      	ldr	r3, [r3, #0]
   e5cde:	691b      	ldr	r3, [r3, #16]
   e5ce0:	9301      	str	r3, [sp, #4]
   e5ce2:	bd08      	pop	{r3, pc}
   e5ce4:	0003023c 	.word	0x0003023c

000e5ce8 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   e5ce8:	b508      	push	{r3, lr}
   e5cea:	4b02      	ldr	r3, [pc, #8]	; (e5cf4 <HAL_USART_Read_Data+0xc>)
   e5cec:	681b      	ldr	r3, [r3, #0]
   e5cee:	695b      	ldr	r3, [r3, #20]
   e5cf0:	9301      	str	r3, [sp, #4]
   e5cf2:	bd08      	pop	{r3, pc}
   e5cf4:	0003023c 	.word	0x0003023c

000e5cf8 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   e5cf8:	b508      	push	{r3, lr}
   e5cfa:	4b02      	ldr	r3, [pc, #8]	; (e5d04 <HAL_USART_Peek_Data+0xc>)
   e5cfc:	681b      	ldr	r3, [r3, #0]
   e5cfe:	699b      	ldr	r3, [r3, #24]
   e5d00:	9301      	str	r3, [sp, #4]
   e5d02:	bd08      	pop	{r3, pc}
   e5d04:	0003023c 	.word	0x0003023c

000e5d08 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   e5d08:	b508      	push	{r3, lr}
   e5d0a:	4b02      	ldr	r3, [pc, #8]	; (e5d14 <HAL_USART_Flush_Data+0xc>)
   e5d0c:	681b      	ldr	r3, [r3, #0]
   e5d0e:	69db      	ldr	r3, [r3, #28]
   e5d10:	9301      	str	r3, [sp, #4]
   e5d12:	bd08      	pop	{r3, pc}
   e5d14:	0003023c 	.word	0x0003023c

000e5d18 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   e5d18:	b508      	push	{r3, lr}
   e5d1a:	4b02      	ldr	r3, [pc, #8]	; (e5d24 <HAL_USART_Is_Enabled+0xc>)
   e5d1c:	681b      	ldr	r3, [r3, #0]
   e5d1e:	6a1b      	ldr	r3, [r3, #32]
   e5d20:	9301      	str	r3, [sp, #4]
   e5d22:	bd08      	pop	{r3, pc}
   e5d24:	0003023c 	.word	0x0003023c

000e5d28 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   e5d28:	b508      	push	{r3, lr}
   e5d2a:	4b02      	ldr	r3, [pc, #8]	; (e5d34 <HAL_USART_Available_Data_For_Write+0xc>)
   e5d2c:	681b      	ldr	r3, [r3, #0]
   e5d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   e5d30:	9301      	str	r3, [sp, #4]
   e5d32:	bd08      	pop	{r3, pc}
   e5d34:	0003023c 	.word	0x0003023c

000e5d38 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   e5d38:	b508      	push	{r3, lr}
   e5d3a:	4b02      	ldr	r3, [pc, #8]	; (e5d44 <HAL_I2C_Write_Data+0xc>)
   e5d3c:	681b      	ldr	r3, [r3, #0]
   e5d3e:	6a1b      	ldr	r3, [r3, #32]
   e5d40:	9301      	str	r3, [sp, #4]
   e5d42:	bd08      	pop	{r3, pc}
   e5d44:	00030228 	.word	0x00030228

000e5d48 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   e5d48:	b508      	push	{r3, lr}
   e5d4a:	4b02      	ldr	r3, [pc, #8]	; (e5d54 <HAL_I2C_Available_Data+0xc>)
   e5d4c:	681b      	ldr	r3, [r3, #0]
   e5d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   e5d50:	9301      	str	r3, [sp, #4]
   e5d52:	bd08      	pop	{r3, pc}
   e5d54:	00030228 	.word	0x00030228

000e5d58 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   e5d58:	b508      	push	{r3, lr}
   e5d5a:	4b02      	ldr	r3, [pc, #8]	; (e5d64 <HAL_I2C_Read_Data+0xc>)
   e5d5c:	681b      	ldr	r3, [r3, #0]
   e5d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   e5d60:	9301      	str	r3, [sp, #4]
   e5d62:	bd08      	pop	{r3, pc}
   e5d64:	00030228 	.word	0x00030228

000e5d68 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   e5d68:	b508      	push	{r3, lr}
   e5d6a:	4b02      	ldr	r3, [pc, #8]	; (e5d74 <HAL_I2C_Peek_Data+0xc>)
   e5d6c:	681b      	ldr	r3, [r3, #0]
   e5d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   e5d70:	9301      	str	r3, [sp, #4]
   e5d72:	bd08      	pop	{r3, pc}
   e5d74:	00030228 	.word	0x00030228

000e5d78 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   e5d78:	b508      	push	{r3, lr}
   e5d7a:	4b02      	ldr	r3, [pc, #8]	; (e5d84 <HAL_I2C_Flush_Data+0xc>)
   e5d7c:	681b      	ldr	r3, [r3, #0]
   e5d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   e5d80:	9301      	str	r3, [sp, #4]
   e5d82:	bd08      	pop	{r3, pc}
   e5d84:	00030228 	.word	0x00030228

000e5d88 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   e5d88:	b508      	push	{r3, lr}
   e5d8a:	4b02      	ldr	r3, [pc, #8]	; (e5d94 <HAL_I2C_Is_Enabled+0xc>)
   e5d8c:	681b      	ldr	r3, [r3, #0]
   e5d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   e5d90:	9301      	str	r3, [sp, #4]
   e5d92:	bd08      	pop	{r3, pc}
   e5d94:	00030228 	.word	0x00030228

000e5d98 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   e5d98:	b508      	push	{r3, lr}
   e5d9a:	4b02      	ldr	r3, [pc, #8]	; (e5da4 <HAL_I2C_Init+0xc>)
   e5d9c:	681b      	ldr	r3, [r3, #0]
   e5d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   e5da0:	9301      	str	r3, [sp, #4]
   e5da2:	bd08      	pop	{r3, pc}
   e5da4:	00030228 	.word	0x00030228

000e5da8 <sock_accept>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
   e5da8:	b508      	push	{r3, lr}
   e5daa:	4b02      	ldr	r3, [pc, #8]	; (e5db4 <sock_accept+0xc>)
   e5dac:	681b      	ldr	r3, [r3, #0]
   e5dae:	681b      	ldr	r3, [r3, #0]
   e5db0:	9301      	str	r3, [sp, #4]
   e5db2:	bd08      	pop	{r3, pc}
   e5db4:	00030238 	.word	0x00030238

000e5db8 <sock_bind>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   e5db8:	b508      	push	{r3, lr}
   e5dba:	4b02      	ldr	r3, [pc, #8]	; (e5dc4 <sock_bind+0xc>)
   e5dbc:	681b      	ldr	r3, [r3, #0]
   e5dbe:	685b      	ldr	r3, [r3, #4]
   e5dc0:	9301      	str	r3, [sp, #4]
   e5dc2:	bd08      	pop	{r3, pc}
   e5dc4:	00030238 	.word	0x00030238

000e5dc8 <sock_getpeername>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
   e5dc8:	b508      	push	{r3, lr}
   e5dca:	4b02      	ldr	r3, [pc, #8]	; (e5dd4 <sock_getpeername+0xc>)
   e5dcc:	681b      	ldr	r3, [r3, #0]
   e5dce:	68db      	ldr	r3, [r3, #12]
   e5dd0:	9301      	str	r3, [sp, #4]
   e5dd2:	bd08      	pop	{r3, pc}
   e5dd4:	00030238 	.word	0x00030238

000e5dd8 <sock_setsockopt>:
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   e5dd8:	b508      	push	{r3, lr}
   e5dda:	4b02      	ldr	r3, [pc, #8]	; (e5de4 <sock_setsockopt+0xc>)
   e5ddc:	681b      	ldr	r3, [r3, #0]
   e5dde:	699b      	ldr	r3, [r3, #24]
   e5de0:	9301      	str	r3, [sp, #4]
   e5de2:	bd08      	pop	{r3, pc}
   e5de4:	00030238 	.word	0x00030238

000e5de8 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   e5de8:	b508      	push	{r3, lr}
   e5dea:	4b02      	ldr	r3, [pc, #8]	; (e5df4 <sock_close+0xc>)
   e5dec:	681b      	ldr	r3, [r3, #0]
   e5dee:	69db      	ldr	r3, [r3, #28]
   e5df0:	9301      	str	r3, [sp, #4]
   e5df2:	bd08      	pop	{r3, pc}
   e5df4:	00030238 	.word	0x00030238

000e5df8 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   e5df8:	b508      	push	{r3, lr}
   e5dfa:	4b02      	ldr	r3, [pc, #8]	; (e5e04 <sock_connect+0xc>)
   e5dfc:	681b      	ldr	r3, [r3, #0]
   e5dfe:	6a1b      	ldr	r3, [r3, #32]
   e5e00:	9301      	str	r3, [sp, #4]
   e5e02:	bd08      	pop	{r3, pc}
   e5e04:	00030238 	.word	0x00030238

000e5e08 <sock_listen>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
   e5e08:	b508      	push	{r3, lr}
   e5e0a:	4b02      	ldr	r3, [pc, #8]	; (e5e14 <sock_listen+0xc>)
   e5e0c:	681b      	ldr	r3, [r3, #0]
   e5e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   e5e10:	9301      	str	r3, [sp, #4]
   e5e12:	bd08      	pop	{r3, pc}
   e5e14:	00030238 	.word	0x00030238

000e5e18 <sock_recv>:
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   e5e18:	b508      	push	{r3, lr}
   e5e1a:	4b02      	ldr	r3, [pc, #8]	; (e5e24 <sock_recv+0xc>)
   e5e1c:	681b      	ldr	r3, [r3, #0]
   e5e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   e5e20:	9301      	str	r3, [sp, #4]
   e5e22:	bd08      	pop	{r3, pc}
   e5e24:	00030238 	.word	0x00030238

000e5e28 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   e5e28:	b508      	push	{r3, lr}
   e5e2a:	4b02      	ldr	r3, [pc, #8]	; (e5e34 <sock_send+0xc>)
   e5e2c:	681b      	ldr	r3, [r3, #0]
   e5e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   e5e30:	9301      	str	r3, [sp, #4]
   e5e32:	bd08      	pop	{r3, pc}
   e5e34:	00030238 	.word	0x00030238

000e5e38 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   e5e38:	b508      	push	{r3, lr}
   e5e3a:	4b02      	ldr	r3, [pc, #8]	; (e5e44 <sock_socket+0xc>)
   e5e3c:	681b      	ldr	r3, [r3, #0]
   e5e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   e5e40:	9301      	str	r3, [sp, #4]
   e5e42:	bd08      	pop	{r3, pc}
   e5e44:	00030238 	.word	0x00030238

000e5e48 <sock_fcntl>:
DYNALIB_FN(15, hal_socket, sock_fcntl, int(int, int, ...))
   e5e48:	b508      	push	{r3, lr}
   e5e4a:	4b02      	ldr	r3, [pc, #8]	; (e5e54 <sock_fcntl+0xc>)
   e5e4c:	681b      	ldr	r3, [r3, #0]
   e5e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   e5e50:	9301      	str	r3, [sp, #4]
   e5e52:	bd08      	pop	{r3, pc}
   e5e54:	00030238 	.word	0x00030238

000e5e58 <HAL_Servo_Attach>:
DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
DYNALIB_FN(1, hal_peripherals, HAL_Tone_Stop, void(uint8_t))
DYNALIB_FN(2, hal_peripherals, HAL_Tone_Get_Frequency, uint32_t(uint8_t))
DYNALIB_FN(3, hal_peripherals, HAL_Tone_Is_Stopped, bool(uint8_t))

DYNALIB_FN(4, hal_peripherals, HAL_Servo_Attach, void(uint16_t))
   e5e58:	b508      	push	{r3, lr}
   e5e5a:	4b02      	ldr	r3, [pc, #8]	; (e5e64 <HAL_Servo_Attach+0xc>)
   e5e5c:	681b      	ldr	r3, [r3, #0]
   e5e5e:	691b      	ldr	r3, [r3, #16]
   e5e60:	9301      	str	r3, [sp, #4]
   e5e62:	bd08      	pop	{r3, pc}
   e5e64:	00030224 	.word	0x00030224

000e5e68 <HAL_Servo_Detach>:
DYNALIB_FN(5, hal_peripherals, HAL_Servo_Detach, void(uint16_t))
   e5e68:	b508      	push	{r3, lr}
   e5e6a:	4b02      	ldr	r3, [pc, #8]	; (e5e74 <HAL_Servo_Detach+0xc>)
   e5e6c:	681b      	ldr	r3, [r3, #0]
   e5e6e:	695b      	ldr	r3, [r3, #20]
   e5e70:	9301      	str	r3, [sp, #4]
   e5e72:	bd08      	pop	{r3, pc}
   e5e74:	00030224 	.word	0x00030224

000e5e78 <HAL_Servo_Write_Pulse_Width>:
DYNALIB_FN(6, hal_peripherals, HAL_Servo_Write_Pulse_Width, void(uint16_t, uint16_t))
   e5e78:	b508      	push	{r3, lr}
   e5e7a:	4b02      	ldr	r3, [pc, #8]	; (e5e84 <HAL_Servo_Write_Pulse_Width+0xc>)
   e5e7c:	681b      	ldr	r3, [r3, #0]
   e5e7e:	699b      	ldr	r3, [r3, #24]
   e5e80:	9301      	str	r3, [sp, #4]
   e5e82:	bd08      	pop	{r3, pc}
   e5e84:	00030224 	.word	0x00030224

000e5e88 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   e5e88:	b508      	push	{r3, lr}
   e5e8a:	4b02      	ldr	r3, [pc, #8]	; (e5e94 <HAL_USB_USART_Init+0xc>)
   e5e8c:	681b      	ldr	r3, [r3, #0]
   e5e8e:	681b      	ldr	r3, [r3, #0]
   e5e90:	9301      	str	r3, [sp, #4]
   e5e92:	bd08      	pop	{r3, pc}
   e5e94:	0003024c 	.word	0x0003024c

000e5e98 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   e5e98:	b508      	push	{r3, lr}
   e5e9a:	4b02      	ldr	r3, [pc, #8]	; (e5ea4 <HAL_USB_USART_Begin+0xc>)
   e5e9c:	681b      	ldr	r3, [r3, #0]
   e5e9e:	685b      	ldr	r3, [r3, #4]
   e5ea0:	9301      	str	r3, [sp, #4]
   e5ea2:	bd08      	pop	{r3, pc}
   e5ea4:	0003024c 	.word	0x0003024c

000e5ea8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   e5ea8:	b508      	push	{r3, lr}
   e5eaa:	4b02      	ldr	r3, [pc, #8]	; (e5eb4 <HAL_USB_USART_Available_Data+0xc>)
   e5eac:	681b      	ldr	r3, [r3, #0]
   e5eae:	691b      	ldr	r3, [r3, #16]
   e5eb0:	9301      	str	r3, [sp, #4]
   e5eb2:	bd08      	pop	{r3, pc}
   e5eb4:	0003024c 	.word	0x0003024c

000e5eb8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   e5eb8:	b508      	push	{r3, lr}
   e5eba:	4b02      	ldr	r3, [pc, #8]	; (e5ec4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   e5ebc:	681b      	ldr	r3, [r3, #0]
   e5ebe:	695b      	ldr	r3, [r3, #20]
   e5ec0:	9301      	str	r3, [sp, #4]
   e5ec2:	bd08      	pop	{r3, pc}
   e5ec4:	0003024c 	.word	0x0003024c

000e5ec8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   e5ec8:	b508      	push	{r3, lr}
   e5eca:	4b02      	ldr	r3, [pc, #8]	; (e5ed4 <HAL_USB_USART_Receive_Data+0xc>)
   e5ecc:	681b      	ldr	r3, [r3, #0]
   e5ece:	699b      	ldr	r3, [r3, #24]
   e5ed0:	9301      	str	r3, [sp, #4]
   e5ed2:	bd08      	pop	{r3, pc}
   e5ed4:	0003024c 	.word	0x0003024c

000e5ed8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   e5ed8:	b508      	push	{r3, lr}
   e5eda:	4b02      	ldr	r3, [pc, #8]	; (e5ee4 <HAL_USB_USART_Send_Data+0xc>)
   e5edc:	681b      	ldr	r3, [r3, #0]
   e5ede:	69db      	ldr	r3, [r3, #28]
   e5ee0:	9301      	str	r3, [sp, #4]
   e5ee2:	bd08      	pop	{r3, pc}
   e5ee4:	0003024c 	.word	0x0003024c

000e5ee8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   e5ee8:	b508      	push	{r3, lr}
   e5eea:	4b02      	ldr	r3, [pc, #8]	; (e5ef4 <HAL_USB_USART_Flush_Data+0xc>)
   e5eec:	681b      	ldr	r3, [r3, #0]
   e5eee:	6a1b      	ldr	r3, [r3, #32]
   e5ef0:	9301      	str	r3, [sp, #4]
   e5ef2:	bd08      	pop	{r3, pc}
   e5ef4:	0003024c 	.word	0x0003024c

000e5ef8 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   e5ef8:	b508      	push	{r3, lr}
   e5efa:	4b02      	ldr	r3, [pc, #8]	; (e5f04 <panic_+0xc>)
   e5efc:	681b      	ldr	r3, [r3, #0]
   e5efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   e5f00:	9301      	str	r3, [sp, #4]
   e5f02:	bd08      	pop	{r3, pc}
   e5f04:	00030260 	.word	0x00030260

000e5f08 <jsmn_init>:

DYNALIB_FN(14, services, jsmn_init, void(jsmn_parser*, void*))
   e5f08:	b508      	push	{r3, lr}
   e5f0a:	4b02      	ldr	r3, [pc, #8]	; (e5f14 <jsmn_init+0xc>)
   e5f0c:	681b      	ldr	r3, [r3, #0]
   e5f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   e5f10:	9301      	str	r3, [sp, #4]
   e5f12:	bd08      	pop	{r3, pc}
   e5f14:	00030260 	.word	0x00030260

000e5f18 <jsmn_parse>:
DYNALIB_FN(15, services, jsmn_parse, jsmnerr_t(jsmn_parser*, const char*, size_t, jsmntok_t*, unsigned int, void*))
   e5f18:	b508      	push	{r3, lr}
   e5f1a:	4b02      	ldr	r3, [pc, #8]	; (e5f24 <jsmn_parse+0xc>)
   e5f1c:	681b      	ldr	r3, [r3, #0]
   e5f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   e5f20:	9301      	str	r3, [sp, #4]
   e5f22:	bd08      	pop	{r3, pc}
   e5f24:	00030260 	.word	0x00030260

000e5f28 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   e5f28:	b508      	push	{r3, lr}
   e5f2a:	4b02      	ldr	r3, [pc, #8]	; (e5f34 <log_message+0xc>)
   e5f2c:	681b      	ldr	r3, [r3, #0]
   e5f2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   e5f30:	9301      	str	r3, [sp, #4]
   e5f32:	bd08      	pop	{r3, pc}
   e5f34:	00030260 	.word	0x00030260

000e5f38 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   e5f38:	b508      	push	{r3, lr}
   e5f3a:	4b02      	ldr	r3, [pc, #8]	; (e5f44 <system_mode+0xc>)
   e5f3c:	681b      	ldr	r3, [r3, #0]
   e5f3e:	681b      	ldr	r3, [r3, #0]
   e5f40:	9301      	str	r3, [sp, #4]
   e5f42:	bd08      	pop	{r3, pc}
   e5f44:	00030220 	.word	0x00030220

000e5f48 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   e5f48:	b508      	push	{r3, lr}
   e5f4a:	4b02      	ldr	r3, [pc, #8]	; (e5f54 <set_system_mode+0xc>)
   e5f4c:	681b      	ldr	r3, [r3, #0]
   e5f4e:	685b      	ldr	r3, [r3, #4]
   e5f50:	9301      	str	r3, [sp, #4]
   e5f52:	bd08      	pop	{r3, pc}
   e5f54:	00030220 	.word	0x00030220

000e5f58 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   e5f58:	b508      	push	{r3, lr}
   e5f5a:	4b02      	ldr	r3, [pc, #8]	; (e5f64 <system_delay_ms+0xc>)
   e5f5c:	681b      	ldr	r3, [r3, #0]
   e5f5e:	695b      	ldr	r3, [r3, #20]
   e5f60:	9301      	str	r3, [sp, #4]
   e5f62:	bd08      	pop	{r3, pc}
   e5f64:	00030220 	.word	0x00030220

000e5f68 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   e5f68:	b508      	push	{r3, lr}
   e5f6a:	4b02      	ldr	r3, [pc, #8]	; (e5f74 <system_thread_get_state+0xc>)
   e5f6c:	681b      	ldr	r3, [r3, #0]
   e5f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   e5f70:	9301      	str	r3, [sp, #4]
   e5f72:	bd08      	pop	{r3, pc}
   e5f74:	00030220 	.word	0x00030220

000e5f78 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   e5f78:	b508      	push	{r3, lr}
   e5f7a:	4b03      	ldr	r3, [pc, #12]	; (e5f88 <system_ctrl_set_app_request_handler+0x10>)
   e5f7c:	681b      	ldr	r3, [r3, #0]
   e5f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   e5f82:	9301      	str	r3, [sp, #4]
   e5f84:	bd08      	pop	{r3, pc}
   e5f86:	0000      	.short	0x0000
   e5f88:	00030220 	.word	0x00030220

000e5f8c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   e5f8c:	b508      	push	{r3, lr}
   e5f8e:	4b03      	ldr	r3, [pc, #12]	; (e5f9c <system_ctrl_set_result+0x10>)
   e5f90:	681b      	ldr	r3, [r3, #0]
   e5f92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   e5f96:	9301      	str	r3, [sp, #4]
   e5f98:	bd08      	pop	{r3, pc}
   e5f9a:	0000      	.short	0x0000
   e5f9c:	00030220 	.word	0x00030220

000e5fa0 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   e5fa0:	b508      	push	{r3, lr}
   e5fa2:	4b03      	ldr	r3, [pc, #12]	; (e5fb0 <system_sleep_ext+0x10>)
   e5fa4:	681b      	ldr	r3, [r3, #0]
   e5fa6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   e5faa:	9301      	str	r3, [sp, #4]
   e5fac:	bd08      	pop	{r3, pc}
   e5fae:	0000      	.short	0x0000
   e5fb0:	00030220 	.word	0x00030220

000e5fb4 <network_config>:
#include "system_network.h"
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
   e5fb4:	b508      	push	{r3, lr}
   e5fb6:	4b02      	ldr	r3, [pc, #8]	; (e5fc0 <network_config+0xc>)
   e5fb8:	681b      	ldr	r3, [r3, #0]
   e5fba:	681b      	ldr	r3, [r3, #0]
   e5fbc:	9301      	str	r3, [sp, #4]
   e5fbe:	bd08      	pop	{r3, pc}
   e5fc0:	00030240 	.word	0x00030240

000e5fc4 <network_connect>:
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   e5fc4:	b508      	push	{r3, lr}
   e5fc6:	4b02      	ldr	r3, [pc, #8]	; (e5fd0 <network_connect+0xc>)
   e5fc8:	681b      	ldr	r3, [r3, #0]
   e5fca:	685b      	ldr	r3, [r3, #4]
   e5fcc:	9301      	str	r3, [sp, #4]
   e5fce:	bd08      	pop	{r3, pc}
   e5fd0:	00030240 	.word	0x00030240

000e5fd4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   e5fd4:	b508      	push	{r3, lr}
   e5fd6:	4b02      	ldr	r3, [pc, #8]	; (e5fe0 <network_connecting+0xc>)
   e5fd8:	681b      	ldr	r3, [r3, #0]
   e5fda:	689b      	ldr	r3, [r3, #8]
   e5fdc:	9301      	str	r3, [sp, #4]
   e5fde:	bd08      	pop	{r3, pc}
   e5fe0:	00030240 	.word	0x00030240

000e5fe4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   e5fe4:	b508      	push	{r3, lr}
   e5fe6:	4b02      	ldr	r3, [pc, #8]	; (e5ff0 <network_disconnect+0xc>)
   e5fe8:	681b      	ldr	r3, [r3, #0]
   e5fea:	68db      	ldr	r3, [r3, #12]
   e5fec:	9301      	str	r3, [sp, #4]
   e5fee:	bd08      	pop	{r3, pc}
   e5ff0:	00030240 	.word	0x00030240

000e5ff4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   e5ff4:	b508      	push	{r3, lr}
   e5ff6:	4b02      	ldr	r3, [pc, #8]	; (e6000 <network_ready+0xc>)
   e5ff8:	681b      	ldr	r3, [r3, #0]
   e5ffa:	691b      	ldr	r3, [r3, #16]
   e5ffc:	9301      	str	r3, [sp, #4]
   e5ffe:	bd08      	pop	{r3, pc}
   e6000:	00030240 	.word	0x00030240

000e6004 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   e6004:	b508      	push	{r3, lr}
   e6006:	4b02      	ldr	r3, [pc, #8]	; (e6010 <network_on+0xc>)
   e6008:	681b      	ldr	r3, [r3, #0]
   e600a:	695b      	ldr	r3, [r3, #20]
   e600c:	9301      	str	r3, [sp, #4]
   e600e:	bd08      	pop	{r3, pc}
   e6010:	00030240 	.word	0x00030240

000e6014 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   e6014:	b508      	push	{r3, lr}
   e6016:	4b02      	ldr	r3, [pc, #8]	; (e6020 <network_off+0xc>)
   e6018:	681b      	ldr	r3, [r3, #0]
   e601a:	699b      	ldr	r3, [r3, #24]
   e601c:	9301      	str	r3, [sp, #4]
   e601e:	bd08      	pop	{r3, pc}
   e6020:	00030240 	.word	0x00030240

000e6024 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   e6024:	b508      	push	{r3, lr}
   e6026:	4b02      	ldr	r3, [pc, #8]	; (e6030 <network_listen+0xc>)
   e6028:	681b      	ldr	r3, [r3, #0]
   e602a:	69db      	ldr	r3, [r3, #28]
   e602c:	9301      	str	r3, [sp, #4]
   e602e:	bd08      	pop	{r3, pc}
   e6030:	00030240 	.word	0x00030240

000e6034 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   e6034:	b508      	push	{r3, lr}
   e6036:	4b02      	ldr	r3, [pc, #8]	; (e6040 <network_listening+0xc>)
   e6038:	681b      	ldr	r3, [r3, #0]
   e603a:	6a1b      	ldr	r3, [r3, #32]
   e603c:	9301      	str	r3, [sp, #4]
   e603e:	bd08      	pop	{r3, pc}
   e6040:	00030240 	.word	0x00030240

000e6044 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   e6044:	b508      	push	{r3, lr}
   e6046:	4b02      	ldr	r3, [pc, #8]	; (e6050 <network_set_listen_timeout+0xc>)
   e6048:	681b      	ldr	r3, [r3, #0]
   e604a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   e604c:	9301      	str	r3, [sp, #4]
   e604e:	bd08      	pop	{r3, pc}
   e6050:	00030240 	.word	0x00030240

000e6054 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   e6054:	b508      	push	{r3, lr}
   e6056:	4b02      	ldr	r3, [pc, #8]	; (e6060 <network_get_listen_timeout+0xc>)
   e6058:	681b      	ldr	r3, [r3, #0]
   e605a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   e605c:	9301      	str	r3, [sp, #4]
   e605e:	bd08      	pop	{r3, pc}
   e6060:	00030240 	.word	0x00030240

000e6064 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   e6064:	b508      	push	{r3, lr}
   e6066:	4b02      	ldr	r3, [pc, #8]	; (e6070 <spark_process+0xc>)
   e6068:	681b      	ldr	r3, [r3, #0]
   e606a:	689b      	ldr	r3, [r3, #8]
   e606c:	9301      	str	r3, [sp, #4]
   e606e:	bd08      	pop	{r3, pc}
   e6070:	00030244 	.word	0x00030244

000e6074 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   e6074:	b508      	push	{r3, lr}
   e6076:	4b02      	ldr	r3, [pc, #8]	; (e6080 <spark_cloud_flag_connected+0xc>)
   e6078:	681b      	ldr	r3, [r3, #0]
   e607a:	695b      	ldr	r3, [r3, #20]
   e607c:	9301      	str	r3, [sp, #4]
   e607e:	bd08      	pop	{r3, pc}
   e6080:	00030244 	.word	0x00030244

000e6084 <spark_sync_time>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   e6084:	b508      	push	{r3, lr}
   e6086:	4b02      	ldr	r3, [pc, #8]	; (e6090 <spark_sync_time+0xc>)
   e6088:	681b      	ldr	r3, [r3, #0]
   e608a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   e608c:	9301      	str	r3, [sp, #4]
   e608e:	bd08      	pop	{r3, pc}
   e6090:	00030244 	.word	0x00030244

000e6094 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   e6094:	b508      	push	{r3, lr}
   e6096:	4b02      	ldr	r3, [pc, #8]	; (e60a0 <spark_sync_time_pending+0xc>)
   e6098:	681b      	ldr	r3, [r3, #0]
   e609a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   e609c:	9301      	str	r3, [sp, #4]
   e609e:	bd08      	pop	{r3, pc}
   e60a0:	00030244 	.word	0x00030244

000e60a4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   e60a4:	b508      	push	{r3, lr}
   e60a6:	4b02      	ldr	r3, [pc, #8]	; (e60b0 <spark_set_random_seed_from_cloud_handler+0xc>)
   e60a8:	681b      	ldr	r3, [r3, #0]
   e60aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   e60ac:	9301      	str	r3, [sp, #4]
   e60ae:	bd08      	pop	{r3, pc}
   e60b0:	00030244 	.word	0x00030244

000e60b4 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   e60b4:	b508      	push	{r3, lr}
   e60b6:	4b02      	ldr	r3, [pc, #8]	; (e60c0 <malloc+0xc>)
   e60b8:	681b      	ldr	r3, [r3, #0]
   e60ba:	681b      	ldr	r3, [r3, #0]
   e60bc:	9301      	str	r3, [sp, #4]
   e60be:	bd08      	pop	{r3, pc}
   e60c0:	0003021c 	.word	0x0003021c

000e60c4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   e60c4:	b508      	push	{r3, lr}
   e60c6:	4b02      	ldr	r3, [pc, #8]	; (e60d0 <free+0xc>)
   e60c8:	681b      	ldr	r3, [r3, #0]
   e60ca:	685b      	ldr	r3, [r3, #4]
   e60cc:	9301      	str	r3, [sp, #4]
   e60ce:	bd08      	pop	{r3, pc}
   e60d0:	0003021c 	.word	0x0003021c

000e60d4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   e60d4:	b508      	push	{r3, lr}
   e60d6:	4b02      	ldr	r3, [pc, #8]	; (e60e0 <realloc+0xc>)
   e60d8:	681b      	ldr	r3, [r3, #0]
   e60da:	689b      	ldr	r3, [r3, #8]
   e60dc:	9301      	str	r3, [sp, #4]
   e60de:	bd08      	pop	{r3, pc}
   e60e0:	0003021c 	.word	0x0003021c

000e60e4 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   e60e4:	b508      	push	{r3, lr}
   e60e6:	4b02      	ldr	r3, [pc, #8]	; (e60f0 <sprintf+0xc>)
   e60e8:	681b      	ldr	r3, [r3, #0]
   e60ea:	68db      	ldr	r3, [r3, #12]
   e60ec:	9301      	str	r3, [sp, #4]
   e60ee:	bd08      	pop	{r3, pc}
   e60f0:	0003021c 	.word	0x0003021c

000e60f4 <siprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   e60f4:	b508      	push	{r3, lr}
   e60f6:	4b02      	ldr	r3, [pc, #8]	; (e6100 <siprintf+0xc>)
   e60f8:	681b      	ldr	r3, [r3, #0]
   e60fa:	691b      	ldr	r3, [r3, #16]
   e60fc:	9301      	str	r3, [sp, #4]
   e60fe:	bd08      	pop	{r3, pc}
   e6100:	0003021c 	.word	0x0003021c

000e6104 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   e6104:	b508      	push	{r3, lr}
   e6106:	4b02      	ldr	r3, [pc, #8]	; (e6110 <siscanf+0xc>)
   e6108:	681b      	ldr	r3, [r3, #0]
   e610a:	699b      	ldr	r3, [r3, #24]
   e610c:	9301      	str	r3, [sp, #4]
   e610e:	bd08      	pop	{r3, pc}
   e6110:	0003021c 	.word	0x0003021c

000e6114 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   e6114:	b508      	push	{r3, lr}
   e6116:	4b02      	ldr	r3, [pc, #8]	; (e6120 <snprintf+0xc>)
   e6118:	681b      	ldr	r3, [r3, #0]
   e611a:	69db      	ldr	r3, [r3, #28]
   e611c:	9301      	str	r3, [sp, #4]
   e611e:	bd08      	pop	{r3, pc}
   e6120:	0003021c 	.word	0x0003021c

000e6124 <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   e6124:	b508      	push	{r3, lr}
   e6126:	4b02      	ldr	r3, [pc, #8]	; (e6130 <abort+0xc>)
   e6128:	681b      	ldr	r3, [r3, #0]
   e612a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   e612c:	9301      	str	r3, [sp, #4]
   e612e:	bd08      	pop	{r3, pc}
   e6130:	0003021c 	.word	0x0003021c

000e6134 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   e6134:	b508      	push	{r3, lr}
   e6136:	4b02      	ldr	r3, [pc, #8]	; (e6140 <_malloc_r+0xc>)
   e6138:	681b      	ldr	r3, [r3, #0]
   e613a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   e613c:	9301      	str	r3, [sp, #4]
   e613e:	bd08      	pop	{r3, pc}
   e6140:	0003021c 	.word	0x0003021c

000e6144 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   e6144:	b508      	push	{r3, lr}
   e6146:	4b02      	ldr	r3, [pc, #8]	; (e6150 <__errno+0xc>)
   e6148:	681b      	ldr	r3, [r3, #0]
   e614a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   e614c:	9301      	str	r3, [sp, #4]
   e614e:	bd08      	pop	{r3, pc}
   e6150:	0003021c 	.word	0x0003021c

000e6154 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   e6154:	2200      	movs	r2, #0
   e6156:	4611      	mov	r1, r2
   e6158:	6840      	ldr	r0, [r0, #4]
   e615a:	f7ff bf6b 	b.w	e6034 <network_listening>

000e615e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   e615e:	2200      	movs	r2, #0
   e6160:	4611      	mov	r1, r2
   e6162:	6840      	ldr	r0, [r0, #4]
   e6164:	f7ff bf76 	b.w	e6054 <network_get_listen_timeout>

000e6168 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   e6168:	2200      	movs	r2, #0
   e616a:	6840      	ldr	r0, [r0, #4]
   e616c:	f7ff bf6a 	b.w	e6044 <network_set_listen_timeout>

000e6170 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   e6170:	2200      	movs	r2, #0
   e6172:	f081 0101 	eor.w	r1, r1, #1
   e6176:	6840      	ldr	r0, [r0, #4]
   e6178:	f7ff bf54 	b.w	e6024 <network_listen>

000e617c <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   e617c:	2300      	movs	r3, #0
   e617e:	461a      	mov	r2, r3
   e6180:	4619      	mov	r1, r3
   e6182:	6840      	ldr	r0, [r0, #4]
   e6184:	f7ff bf46 	b.w	e6014 <network_off>

000e6188 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   e6188:	2300      	movs	r3, #0
   e618a:	461a      	mov	r2, r3
   e618c:	4619      	mov	r1, r3
   e618e:	6840      	ldr	r0, [r0, #4]
   e6190:	f7ff bf38 	b.w	e6004 <network_on>

000e6194 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   e6194:	2200      	movs	r2, #0
   e6196:	4611      	mov	r1, r2
   e6198:	6840      	ldr	r0, [r0, #4]
   e619a:	f7ff bf2b 	b.w	e5ff4 <network_ready>

000e619e <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   e619e:	2200      	movs	r2, #0
   e61a0:	4611      	mov	r1, r2
   e61a2:	6840      	ldr	r0, [r0, #4]
   e61a4:	f7ff bf16 	b.w	e5fd4 <network_connecting>

000e61a8 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   e61a8:	2200      	movs	r2, #0
   e61aa:	2102      	movs	r1, #2
   e61ac:	6840      	ldr	r0, [r0, #4]
   e61ae:	f7ff bf19 	b.w	e5fe4 <network_disconnect>

000e61b2 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   e61b2:	2300      	movs	r3, #0
   e61b4:	461a      	mov	r2, r3
   e61b6:	6840      	ldr	r0, [r0, #4]
   e61b8:	f7ff bf04 	b.w	e5fc4 <network_connect>

000e61bc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   e61bc:	4b02      	ldr	r3, [pc, #8]	; (e61c8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   e61be:	2203      	movs	r2, #3
   e61c0:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   e61c2:	4a02      	ldr	r2, [pc, #8]	; (e61cc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   e61c4:	601a      	str	r2, [r3, #0]
   e61c6:	4770      	bx	lr
   e61c8:	2003e49c 	.word	0x2003e49c
   e61cc:	000eefc8 	.word	0x000eefc8

000e61d0 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   e61d0:	b510      	push	{r4, lr}
   e61d2:	4604      	mov	r4, r0
{
    _spi = spi;
   e61d4:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   e61d6:	4608      	mov	r0, r1
   e61d8:	f7ff fce6 	bl	e5ba8 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   e61dc:	2300      	movs	r3, #0
   e61de:	6063      	str	r3, [r4, #4]
}
   e61e0:	4620      	mov	r0, r4
   e61e2:	bd10      	pop	{r4, pc}

000e61e4 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   e61e4:	7800      	ldrb	r0, [r0, #0]
   e61e6:	f7ff bce7 	b.w	e5bb8 <HAL_SPI_Is_Enabled>

000e61ea <_ZN5Servo17writeMicrosecondsEt>:
  // write(179).
  return a == this->minAngle || a == this->maxAngle ? a : a + 1;
}

void Servo::writeMicroseconds(uint16_t pulseWidth)
{
   e61ea:	f9b0 2000 	ldrsh.w	r2, [r0]

  if (!this->attached())
   e61ee:	1c53      	adds	r3, r2, #1
   e61f0:	d00b      	beq.n	e620a <_ZN5Servo17writeMicrosecondsEt+0x20>
  {
    return;
  }

  pulseWidth = constrain(pulseWidth, this->minPW, this->maxPW);
   e61f2:	8843      	ldrh	r3, [r0, #2]
   e61f4:	8880      	ldrh	r0, [r0, #4]
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   e61f6:	428b      	cmp	r3, r1
   e61f8:	d803      	bhi.n	e6202 <_ZN5Servo17writeMicrosecondsEt+0x18>
   e61fa:	4288      	cmp	r0, r1
   e61fc:	4603      	mov	r3, r0
   e61fe:	bf28      	it	cs
   e6200:	460b      	movcs	r3, r1

  HAL_Servo_Write_Pulse_Width(this->pin, pulseWidth);
   e6202:	4619      	mov	r1, r3
   e6204:	b290      	uxth	r0, r2
   e6206:	f7ff be37 	b.w	e5e78 <HAL_Servo_Write_Pulse_Width>
   e620a:	4770      	bx	lr

000e620c <_ZN5Servo5writeEi>:

  return true;
}

void Servo::write(int degrees)
{
   e620c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   e620e:	4604      	mov	r4, r0
   e6210:	4608      	mov	r0, r1
   e6212:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
  degrees = constrain(degrees, this->minAngle, this->maxAngle);
   e6216:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
   e621a:	4281      	cmp	r1, r0
   e621c:	dc03      	bgt.n	e6226 <_ZN5Servo5writeEi+0x1a>
   e621e:	4290      	cmp	r0, r2
   e6220:	bfa8      	it	ge
   e6222:	4610      	movge	r0, r2
   e6224:	e000      	b.n	e6228 <_ZN5Servo5writeEi+0x1c>
   e6226:	4608      	mov	r0, r1
  this->writeMicroseconds(ANGLE_TO_US(degrees)+trim);
   e6228:	88a5      	ldrh	r5, [r4, #4]
   e622a:	8863      	ldrh	r3, [r4, #2]
   e622c:	9500      	str	r5, [sp, #0]
   e622e:	f000 fcc1 	bl	e6bb4 <_Z3mapiiiii>
   e6232:	68e1      	ldr	r1, [r4, #12]
   e6234:	4401      	add	r1, r0
   e6236:	b289      	uxth	r1, r1
   e6238:	4620      	mov	r0, r4
}
   e623a:	b003      	add	sp, #12
   e623c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
}

void Servo::write(int degrees)
{
  degrees = constrain(degrees, this->minAngle, this->maxAngle);
  this->writeMicroseconds(ANGLE_TO_US(degrees)+trim);
   e6240:	f7ff bfd3 	b.w	e61ea <_ZN5Servo17writeMicrosecondsEt>

000e6244 <_ZN5Servo11resetFieldsEv>:

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
   e6244:	22b4      	movs	r2, #180	; 0xb4
  return HAL_Servo_Read_Pulse_Width(this->pin);
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
   e6246:	f64f 73ff 	movw	r3, #65535	; 0xffff
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
   e624a:	8102      	strh	r2, [r0, #8]
  this->minPW = SERVO_DEFAULT_MIN_PW;
   e624c:	f44f 7208 	mov.w	r2, #544	; 0x220
  return HAL_Servo_Read_Pulse_Width(this->pin);
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
   e6250:	8003      	strh	r3, [r0, #0]
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
   e6252:	8042      	strh	r2, [r0, #2]
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
   e6254:	2300      	movs	r3, #0
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
  this->maxPW = SERVO_DEFAULT_MAX_PW;
   e6256:	f44f 6216 	mov.w	r2, #2400	; 0x960
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
   e625a:	80c3      	strh	r3, [r0, #6]
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
  this->maxPW = SERVO_DEFAULT_MAX_PW;
   e625c:	8082      	strh	r2, [r0, #4]
  this->trim = 0;
   e625e:	60c3      	str	r3, [r0, #12]
   e6260:	4770      	bx	lr

000e6262 <_ZN5ServoC1Ev>:
#define ANGLE_TO_US(a)    ((uint16_t)(map((a), this->minAngle, this->maxAngle, \
                                        this->minPW, this->maxPW)))
#define US_TO_ANGLE(us)   ((int16_t)(map((us), this->minPW, this->maxPW,  \
                                       this->minAngle, this->maxAngle)))

Servo::Servo()
   e6262:	b508      	push	{r3, lr}
{
  this->resetFields();
   e6264:	f7ff ffee 	bl	e6244 <_ZN5Servo11resetFieldsEv>
}
   e6268:	bd08      	pop	{r3, pc}

000e626a <_ZN5Servo6detachEv>:

  return true;
}

bool Servo::detach()
{
   e626a:	b510      	push	{r4, lr}
   e626c:	4604      	mov	r4, r0
   e626e:	f9b0 0000 	ldrsh.w	r0, [r0]
  if (!this->attached())
   e6272:	1c43      	adds	r3, r0, #1
   e6274:	d007      	beq.n	e6286 <_ZN5Servo6detachEv+0x1c>
  {
    return false;
  }

  HAL_Servo_Detach(this->pin);
   e6276:	b280      	uxth	r0, r0
   e6278:	f7ff fdf6 	bl	e5e68 <HAL_Servo_Detach>

  this->resetFields();
   e627c:	4620      	mov	r0, r4
   e627e:	f7ff ffe1 	bl	e6244 <_ZN5Servo11resetFieldsEv>

  return true;
   e6282:	2001      	movs	r0, #1
   e6284:	bd10      	pop	{r4, pc}

bool Servo::detach()
{
  if (!this->attached())
  {
    return false;
   e6286:	2000      	movs	r0, #0
  HAL_Servo_Detach(this->pin);

  this->resetFields();

  return true;
}
   e6288:	bd10      	pop	{r4, pc}

000e628a <_ZN5Servo6attachEtttss>:
bool Servo::attach(uint16_t pin,
    uint16_t minPW,
    uint16_t maxPW,
    int16_t minAngle,
    int16_t maxAngle)
{
   e628a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e628e:	460d      	mov	r5, r1
   e6290:	4604      	mov	r4, r0

  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
   e6292:	2102      	movs	r1, #2
   e6294:	4628      	mov	r0, r5
bool Servo::attach(uint16_t pin,
    uint16_t minPW,
    uint16_t maxPW,
    int16_t minAngle,
    int16_t maxAngle)
{
   e6296:	4690      	mov	r8, r2
   e6298:	461f      	mov	r7, r3

  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
   e629a:	f7ff fc5d 	bl	e5b58 <HAL_Validate_Pin_Function>
   e629e:	2802      	cmp	r0, #2
   e62a0:	d001      	beq.n	e62a6 <_ZN5Servo6attachEtttss+0x1c>
  {
    return false;
   e62a2:	2600      	movs	r6, #0
   e62a4:	e019      	b.n	e62da <_ZN5Servo6attachEtttss+0x50>
  }

  // Safety check
  if (!pinAvailable(pin))
   e62a6:	4628      	mov	r0, r5
   e62a8:	f002 f80c 	bl	e82c4 <pinAvailable>
   e62ac:	4606      	mov	r6, r0
   e62ae:	2800      	cmp	r0, #0
   e62b0:	d0f7      	beq.n	e62a2 <_ZN5Servo6attachEtttss+0x18>
  {
    return false;
  }

  if (this->attached())
   e62b2:	f9b4 3000 	ldrsh.w	r3, [r4]
   e62b6:	3301      	adds	r3, #1
   e62b8:	d002      	beq.n	e62c0 <_ZN5Servo6attachEtttss+0x36>
  {
    this->detach();
   e62ba:	4620      	mov	r0, r4
   e62bc:	f7ff ffd5 	bl	e626a <_ZN5Servo6detachEv>
  }

  this->pin = pin;
  this->minPW = minPW;
  this->maxPW = maxPW;
  this->minAngle = minAngle;
   e62c0:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
   e62c4:	80e3      	strh	r3, [r4, #6]
  this->maxAngle = maxAngle;
   e62c6:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
  if (this->attached())
  {
    this->detach();
  }

  this->pin = pin;
   e62ca:	8025      	strh	r5, [r4, #0]
  this->minPW = minPW;
   e62cc:	f8a4 8002 	strh.w	r8, [r4, #2]
  this->maxPW = maxPW;
   e62d0:	80a7      	strh	r7, [r4, #4]
  this->minAngle = minAngle;
  this->maxAngle = maxAngle;
   e62d2:	8123      	strh	r3, [r4, #8]

  HAL_Servo_Attach(this->pin);
   e62d4:	4628      	mov	r0, r5
   e62d6:	f7ff fdbf 	bl	e5e58 <HAL_Servo_Attach>

  return true;
}
   e62da:	4630      	mov	r0, r6
   e62dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000e62e0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   e62e0:	b510      	push	{r4, lr}
   e62e2:	4604      	mov	r4, r0
        if (wakeupSource_) {
   e62e4:	6800      	ldr	r0, [r0, #0]
   e62e6:	b118      	cbz	r0, e62f0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   e62e8:	f7ff feec 	bl	e60c4 <free>
            wakeupSource_ = nullptr;
   e62ec:	2300      	movs	r3, #0
   e62ee:	6023      	str	r3, [r4, #0]
   e62f0:	bd10      	pop	{r4, pc}

000e62f2 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   e62f2:	b510      	push	{r4, lr}
   e62f4:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   e62f6:	f7ff fff3 	bl	e62e0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   e62fa:	4620      	mov	r0, r4
   e62fc:	bd10      	pop	{r4, pc}

000e62fe <_ZN17SystemSleepResultaSEOS_>:
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   e62fe:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   e6300:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   e6304:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   e6306:	460b      	mov	r3, r1
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   e6308:	460d      	mov	r5, r1
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   e630a:	f853 2f06 	ldr.w	r2, [r3, #6]!
   e630e:	f8c0 2006 	str.w	r2, [r0, #6]
   e6312:	889b      	ldrh	r3, [r3, #4]
   e6314:	8143      	strh	r3, [r0, #10]
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   e6316:	4604      	mov	r4, r0
        error_ = result.error_;
        compatResult_ = result.compatResult_;
        freeWakeupSourceMemory();
   e6318:	f7ff ffe2 	bl	e62e0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        if (result.wakeupSource_) {
   e631c:	682b      	ldr	r3, [r5, #0]
   e631e:	b113      	cbz	r3, e6326 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   e6320:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   e6322:	2300      	movs	r3, #0
   e6324:	602b      	str	r3, [r5, #0]
        }
        return *this;
    }
   e6326:	4620      	mov	r0, r4
   e6328:	bd38      	pop	{r3, r4, r5, pc}
	...

000e632c <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:
            free(wakeupSource_);
            wakeupSource_ = nullptr;
        }
    }

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   e632c:	b538      	push	{r3, r4, r5, lr}
   e632e:	460c      	mov	r4, r1
   e6330:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   e6332:	f7ff ffd5 	bl	e62e0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        if (source) {
   e6336:	b144      	cbz	r4, e634a <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   e6338:	8820      	ldrh	r0, [r4, #0]
   e633a:	f7ff febb 	bl	e60b4 <malloc>
   e633e:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   e6340:	b128      	cbz	r0, e634e <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   e6342:	8822      	ldrh	r2, [r4, #0]
   e6344:	4621      	mov	r1, r4
   e6346:	f003 fbb6 	bl	e9ab6 <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
   e634a:	2000      	movs	r0, #0
   e634c:	bd38      	pop	{r3, r4, r5, pc}
        if (source) {
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
            if (wakeupSource_) {
                memcpy(wakeupSource_, source, source->size);
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
   e634e:	4801      	ldr	r0, [pc, #4]	; (e6354 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   e6350:	bd38      	pop	{r3, r4, r5, pc}
   e6352:	bf00      	nop
   e6354:	fffffefc 	.word	0xfffffefc

000e6358 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration>:
void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SystemSleepResult SystemClass::sleep(const SystemSleepConfiguration& config) {
   e6358:	b5f0      	push	{r4, r5, r6, r7, lr}
   e635a:	4d30      	ldr	r5, [pc, #192]	; (e641c <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xc4>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   e635c:	7d0b      	ldrb	r3, [r1, #20]
   e635e:	4604      	mov	r4, r0
   e6360:	b08b      	sub	sp, #44	; 0x2c
   e6362:	4608      	mov	r0, r1
   e6364:	1daf      	adds	r7, r5, #6
   e6366:	b313      	cbz	r3, e63ae <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0x56>
    particle::EnumFlags<SystemSleepFlag> sleepFlags() const {
        return particle::EnumFlags<SystemSleepFlag>::fromUnderlying(config_->flags);
    }

    SystemSleepMode sleepMode() const {
        return static_cast<SystemSleepMode>(config_->mode);
   e6368:	680b      	ldr	r3, [r1, #0]
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   e636a:	791b      	ldrb	r3, [r3, #4]
   e636c:	b1fb      	cbz	r3, e63ae <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0x56>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   e636e:	2200      	movs	r2, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   e6370:	f64f 73ff 	movw	r3, #65535	; 0xffff
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   e6374:	a902      	add	r1, sp, #8
   e6376:	3004      	adds	r0, #4

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   e6378:	9202      	str	r2, [sp, #8]
   e637a:	f8ad 200c 	strh.w	r2, [sp, #12]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   e637e:	f88d 200e 	strb.w	r2, [sp, #14]
   e6382:	f8ad 2010 	strh.w	r2, [sp, #16]
   e6386:	f8ad 3012 	strh.w	r3, [sp, #18]
   e638a:	f7ff fe09 	bl	e5fa0 <system_sleep_ext>
        copyWakeupSource(result.wakeupSource_);
    }

    SystemSleepResult& operator=(const SystemSleepResult& result) {
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   e638e:	ab0a      	add	r3, sp, #40	; 0x28
        result.setError(static_cast<system_error_t>(ret));
   e6390:	b200      	sxth	r0, r0
   e6392:	f853 2d1a 	ldr.w	r2, [r3, #-26]!
    ~SystemSleepResult() {
        freeWakeupSourceMemory();
    }

    void setError(system_error_t error, bool clear = false) {
        error_ = error;
   e6396:	f8ad 000c 	strh.w	r0, [sp, #12]
        copyWakeupSource(result.wakeupSource_);
    }

    SystemSleepResult& operator=(const SystemSleepResult& result) {
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   e639a:	889b      	ldrh	r3, [r3, #4]
        compatResult_ = result.compatResult_;
        copyWakeupSource(result.wakeupSource_);
    }

    SystemSleepResult& operator=(const SystemSleepResult& result) {
        error_ = result.error_;
   e639c:	80a8      	strh	r0, [r5, #4]
        compatResult_ = result.compatResult_;
   e639e:	f8c5 2006 	str.w	r2, [r5, #6]
        copyWakeupSource(result.wakeupSource_);
   e63a2:	9902      	ldr	r1, [sp, #8]
        copyWakeupSource(result.wakeupSource_);
    }

    SystemSleepResult& operator=(const SystemSleepResult& result) {
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   e63a4:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   e63a6:	4628      	mov	r0, r5
   e63a8:	f7ff ffc0 	bl	e632c <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
   e63ac:	e01c      	b.n	e63e8 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0x90>
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SystemSleepResult SystemClass::sleep(const SystemSleepConfiguration& config) {
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
   e63ae:	2320      	movs	r3, #32
   e63b0:	2600      	movs	r6, #0
   e63b2:	9302      	str	r3, [sp, #8]
   e63b4:	4b1a      	ldr	r3, [pc, #104]	; (e6420 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xc8>)
   e63b6:	9300      	str	r3, [sp, #0]
   e63b8:	491a      	ldr	r1, [pc, #104]	; (e6424 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xcc>)
   e63ba:	9603      	str	r6, [sp, #12]
   e63bc:	4633      	mov	r3, r6
   e63be:	2032      	movs	r0, #50	; 0x32
   e63c0:	aa02      	add	r2, sp, #8
   e63c2:	f7ff fdb1 	bl	e5f28 <log_message>
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   e63c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   e63ca:	f8ad 3012 	strh.w	r3, [sp, #18]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   e63ce:	a902      	add	r1, sp, #8
        error_ = error;
    }

    SystemSleepResult(system_error_t error)
            : SystemSleepResult() {
        error_ = error;
   e63d0:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   e63d4:	4811      	ldr	r0, [pc, #68]	; (e641c <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xc4>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   e63d6:	9602      	str	r6, [sp, #8]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   e63d8:	f88d 600e 	strb.w	r6, [sp, #14]
   e63dc:	f8ad 6010 	strh.w	r6, [sp, #16]
        error_ = error;
    }

    SystemSleepResult(system_error_t error)
            : SystemSleepResult() {
        error_ = error;
   e63e0:	f8ad 300c 	strh.w	r3, [sp, #12]
   e63e4:	f7ff ff8b 	bl	e62fe <_ZN17SystemSleepResultaSEOS_>
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   e63e8:	a802      	add	r0, sp, #8
   e63ea:	f7ff ff79 	bl	e62e0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   e63ee:	2300      	movs	r3, #0
   e63f0:	6023      	str	r3, [r4, #0]
   e63f2:	80a3      	strh	r3, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   e63f4:	71a3      	strb	r3, [r4, #6]
   e63f6:	8123      	strh	r3, [r4, #8]
   e63f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   e63fc:	8163      	strh	r3, [r4, #10]
    }

    // Copy constructor
    SystemSleepResult(const SystemSleepResult& result)
            : SystemSleepResult() {
        error_ = result.error_;
   e63fe:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   e6402:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   e6404:	683b      	ldr	r3, [r7, #0]
   e6406:	f8c4 3006 	str.w	r3, [r4, #6]
   e640a:	88bb      	ldrh	r3, [r7, #4]
   e640c:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   e640e:	6829      	ldr	r1, [r5, #0]
   e6410:	4620      	mov	r0, r4
   e6412:	f7ff ff8b 	bl	e632c <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
        result.setError(static_cast<system_error_t>(ret));
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   e6416:	4620      	mov	r0, r4
   e6418:	b00b      	add	sp, #44	; 0x2c
   e641a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e641c:	2003e4a4 	.word	0x2003e4a4
   e6420:	000eeffb 	.word	0x000eeffb
   e6424:	000eeff4 	.word	0x000eeff4

000e6428 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   e6428:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   e642a:	4c09      	ldr	r4, [pc, #36]	; (e6450 <_GLOBAL__sub_I_System+0x28>)
   e642c:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   e642e:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   e6432:	6020      	str	r0, [r4, #0]
   e6434:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   e6436:	71a0      	strb	r0, [r4, #6]
   e6438:	8120      	strh	r0, [r4, #8]
   e643a:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   e643c:	f7ff fd84 	bl	e5f48 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   e6440:	4620      	mov	r0, r4
   e6442:	4a04      	ldr	r2, [pc, #16]	; (e6454 <_GLOBAL__sub_I_System+0x2c>)
   e6444:	4904      	ldr	r1, [pc, #16]	; (e6458 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   e6446:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   e644a:	f001 bfe9 	b.w	e8420 <__aeabi_atexit>
   e644e:	bf00      	nop
   e6450:	2003e4a4 	.word	0x2003e4a4
   e6454:	2003aca8 	.word	0x2003aca8
   e6458:	000e62f3 	.word	0x000e62f3

000e645c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   e645c:	b510      	push	{r4, lr}
   e645e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   e6460:	f003 fba0 	bl	e9ba4 <strlen>
   e6464:	3801      	subs	r0, #1
   e6466:	1823      	adds	r3, r4, r0
   e6468:	4620      	mov	r0, r4
	while(i<j){
   e646a:	4298      	cmp	r0, r3
   e646c:	d206      	bcs.n	e647c <_Z11str_reversePc+0x20>
		c = *i;
   e646e:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   e6470:	7819      	ldrb	r1, [r3, #0]
   e6472:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   e6476:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   e647a:	e7f6      	b.n	e646a <_Z11str_reversePc+0xe>
   e647c:	bd10      	pop	{r4, pc}

000e647e <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   e647e:	b570      	push	{r4, r5, r6, lr}
   e6480:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   e6482:	1e91      	subs	r1, r2, #2
   e6484:	2922      	cmp	r1, #34	; 0x22
   e6486:	d820      	bhi.n	e64ca <ultoa+0x4c>
   e6488:	4625      	mov	r5, r4
   e648a:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   e648c:	b910      	cbnz	r0, e6494 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   e648e:	4423      	add	r3, r4
            *ptr++ = '0';
   e6490:	2230      	movs	r2, #48	; 0x30
   e6492:	e00e      	b.n	e64b2 <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   e6494:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   e6498:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   e649c:	b2c1      	uxtb	r1, r0
   e649e:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   e64a2:	2809      	cmp	r0, #9
                *ptr += '0';
   e64a4:	bf94      	ite	ls
   e64a6:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   e64a8:	3157      	addhi	r1, #87	; 0x57
   e64aa:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   e64ae:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   e64b0:	e7eb      	b.n	e648a <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   e64b2:	4299      	cmp	r1, r3
   e64b4:	d202      	bcs.n	e64bc <ultoa+0x3e>
            *ptr++ = '0';
   e64b6:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   e64ba:	e7fa      	b.n	e64b2 <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   e64bc:	2300      	movs	r3, #0
	str_reverse(buffer);
   e64be:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   e64c0:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   e64c2:	f7ff ffcb 	bl	e645c <_Z11str_reversePc>
	return buffer;
   e64c6:	4620      	mov	r0, r4
   e64c8:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   e64ca:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   e64cc:	bd70      	pop	{r4, r5, r6, pc}

000e64ce <utoa>:
		ultoa(a, buffer, radix);
	}
	return buffer;
}

__attribute__((weak)) char* utoa(unsigned a, char* buffer, int radix) {
   e64ce:	b508      	push	{r3, lr}
    return ultoa(a, buffer, radix);
   e64d0:	2301      	movs	r3, #1
   e64d2:	f7ff ffd4 	bl	e647e <ultoa>
}
   e64d6:	bd08      	pop	{r3, pc}

000e64d8 <_ZN21StringPrintableHelperD1Ev>:
{
	if (buffer) return float(atof(buffer));
	return 0;
}

class StringPrintableHelper : public Print
   e64d8:	4770      	bx	lr

000e64da <_ZN21StringPrintableHelperD0Ev>:
   e64da:	b510      	push	{r4, lr}
   e64dc:	210c      	movs	r1, #12
   e64de:	4604      	mov	r4, r0
   e64e0:	f001 ffac 	bl	e843c <_ZdlPvj>
   e64e4:	4620      	mov	r0, r4
   e64e6:	bd10      	pop	{r4, pc}

000e64e8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   e64e8:	b510      	push	{r4, lr}
   e64ea:	4604      	mov	r4, r0
{
	free(buffer);
   e64ec:	6800      	ldr	r0, [r0, #0]
   e64ee:	f7ff fde9 	bl	e60c4 <free>
}
   e64f2:	4620      	mov	r0, r4
   e64f4:	bd10      	pop	{r4, pc}

000e64f6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   e64f6:	b510      	push	{r4, lr}
   e64f8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   e64fa:	6800      	ldr	r0, [r0, #0]
   e64fc:	b108      	cbz	r0, e6502 <_ZN6String10invalidateEv+0xc>
   e64fe:	f7ff fde1 	bl	e60c4 <free>
	buffer = NULL;
   e6502:	2300      	movs	r3, #0
   e6504:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   e6506:	60a3      	str	r3, [r4, #8]
   e6508:	6063      	str	r3, [r4, #4]
   e650a:	bd10      	pop	{r4, pc}

000e650c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   e650c:	b538      	push	{r3, r4, r5, lr}
   e650e:	4604      	mov	r4, r0
   e6510:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   e6512:	6800      	ldr	r0, [r0, #0]
   e6514:	3101      	adds	r1, #1
   e6516:	f7ff fddd 	bl	e60d4 <realloc>
	if (newbuffer) {
   e651a:	b110      	cbz	r0, e6522 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   e651c:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   e6520:	2001      	movs	r0, #1
	}
	return 0;
}
   e6522:	bd38      	pop	{r3, r4, r5, pc}

000e6524 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   e6524:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   e6526:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   e6528:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   e652a:	b113      	cbz	r3, e6532 <_ZN6String7reserveEj+0xe>
   e652c:	6843      	ldr	r3, [r0, #4]
   e652e:	428b      	cmp	r3, r1
   e6530:	d207      	bcs.n	e6542 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   e6532:	4620      	mov	r0, r4
   e6534:	f7ff ffea 	bl	e650c <_ZN6String12changeBufferEj>
   e6538:	b120      	cbz	r0, e6544 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   e653a:	68a3      	ldr	r3, [r4, #8]
   e653c:	b90b      	cbnz	r3, e6542 <_ZN6String7reserveEj+0x1e>
   e653e:	6822      	ldr	r2, [r4, #0]
   e6540:	7013      	strb	r3, [r2, #0]
   e6542:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   e6544:	bd10      	pop	{r4, pc}

000e6546 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   e6546:	b570      	push	{r4, r5, r6, lr}
   e6548:	460e      	mov	r6, r1
	if (!reserve(length)) {
   e654a:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   e654c:	4604      	mov	r4, r0
   e654e:	4615      	mov	r5, r2
	if (!reserve(length)) {
   e6550:	f7ff ffe8 	bl	e6524 <_ZN6String7reserveEj>
   e6554:	b918      	cbnz	r0, e655e <_ZN6String4copyEPKcj+0x18>
		invalidate();
   e6556:	4620      	mov	r0, r4
   e6558:	f7ff ffcd 	bl	e64f6 <_ZN6String10invalidateEv>
		return *this;
   e655c:	e009      	b.n	e6572 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   e655e:	462a      	mov	r2, r5
   e6560:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   e6562:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   e6564:	6820      	ldr	r0, [r4, #0]
   e6566:	f003 faa6 	bl	e9ab6 <memcpy>
	buffer[len] = 0;
   e656a:	6822      	ldr	r2, [r4, #0]
   e656c:	68a3      	ldr	r3, [r4, #8]
   e656e:	2100      	movs	r1, #0
   e6570:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   e6572:	4620      	mov	r0, r4
   e6574:	bd70      	pop	{r4, r5, r6, pc}

000e6576 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   e6576:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   e6578:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   e657a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   e657c:	6003      	str	r3, [r0, #0]
	capacity = 0;
   e657e:	6043      	str	r3, [r0, #4]
	len = 0;
   e6580:	6083      	str	r3, [r0, #8]
	flags = 0;
   e6582:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   e6584:	460d      	mov	r5, r1
   e6586:	b139      	cbz	r1, e6598 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   e6588:	4608      	mov	r0, r1
   e658a:	f003 fb0b 	bl	e9ba4 <strlen>
   e658e:	4629      	mov	r1, r5
   e6590:	4602      	mov	r2, r0
   e6592:	4620      	mov	r0, r4
   e6594:	f7ff ffd7 	bl	e6546 <_ZN6String4copyEPKcj>
}
   e6598:	4620      	mov	r0, r4
   e659a:	bd38      	pop	{r3, r4, r5, pc}

000e659c <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   e659c:	b538      	push	{r3, r4, r5, lr}
   e659e:	4605      	mov	r5, r0
	if (buffer) {
   e65a0:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   e65a2:	460c      	mov	r4, r1
	if (buffer) {
   e65a4:	b160      	cbz	r0, e65c0 <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
   e65a6:	686a      	ldr	r2, [r5, #4]
   e65a8:	688b      	ldr	r3, [r1, #8]
   e65aa:	429a      	cmp	r2, r3
   e65ac:	d306      	bcc.n	e65bc <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
   e65ae:	6809      	ldr	r1, [r1, #0]
   e65b0:	f003 faf0 	bl	e9b94 <strcpy>
			len = rhs.len;
   e65b4:	68a3      	ldr	r3, [r4, #8]
   e65b6:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   e65b8:	2300      	movs	r3, #0
   e65ba:	e00a      	b.n	e65d2 <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
   e65bc:	f7ff fd82 	bl	e60c4 <free>
		}
	}
	buffer = rhs.buffer;
   e65c0:	6823      	ldr	r3, [r4, #0]
   e65c2:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   e65c4:	6863      	ldr	r3, [r4, #4]
   e65c6:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   e65c8:	68a3      	ldr	r3, [r4, #8]
   e65ca:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   e65cc:	2300      	movs	r3, #0
   e65ce:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
   e65d0:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
   e65d2:	60a3      	str	r3, [r4, #8]
   e65d4:	bd38      	pop	{r3, r4, r5, pc}

000e65d6 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   e65d6:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   e65d8:	b510      	push	{r4, lr}
   e65da:	460b      	mov	r3, r1
   e65dc:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   e65de:	d007      	beq.n	e65f0 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   e65e0:	6809      	ldr	r1, [r1, #0]
   e65e2:	b119      	cbz	r1, e65ec <_ZN6StringaSERKS_+0x16>
   e65e4:	689a      	ldr	r2, [r3, #8]
   e65e6:	f7ff ffae 	bl	e6546 <_ZN6String4copyEPKcj>
   e65ea:	e001      	b.n	e65f0 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   e65ec:	f7ff ff83 	bl	e64f6 <_ZN6String10invalidateEv>

	return *this;
}
   e65f0:	4620      	mov	r0, r4
   e65f2:	bd10      	pop	{r4, pc}

000e65f4 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   e65f4:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   e65f6:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   e65f8:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   e65fa:	6003      	str	r3, [r0, #0]
	capacity = 0;
   e65fc:	6043      	str	r3, [r0, #4]
	len = 0;
   e65fe:	6083      	str	r3, [r0, #8]
	flags = 0;
   e6600:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   e6602:	f7ff ffe8 	bl	e65d6 <_ZN6StringaSERKS_>
}
   e6606:	4620      	mov	r0, r4
   e6608:	bd10      	pop	{r4, pc}

000e660a <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   e660a:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
   e660c:	b510      	push	{r4, lr}
   e660e:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   e6610:	d001      	beq.n	e6616 <_ZN6StringaSEOS_+0xc>
   e6612:	f7ff ffc3 	bl	e659c <_ZN6String4moveERS_>
	return *this;
}
   e6616:	4620      	mov	r0, r4
   e6618:	bd10      	pop	{r4, pc}

000e661a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   e661a:	b538      	push	{r3, r4, r5, lr}
   e661c:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   e661e:	460c      	mov	r4, r1
   e6620:	b141      	cbz	r1, e6634 <_ZN6StringaSEPKc+0x1a>
   e6622:	4608      	mov	r0, r1
   e6624:	f003 fabe 	bl	e9ba4 <strlen>
   e6628:	4621      	mov	r1, r4
   e662a:	4602      	mov	r2, r0
   e662c:	4628      	mov	r0, r5
   e662e:	f7ff ff8a 	bl	e6546 <_ZN6String4copyEPKcj>
   e6632:	e001      	b.n	e6638 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   e6634:	f7ff ff5f 	bl	e64f6 <_ZN6String10invalidateEv>

	return *this;
}
   e6638:	4628      	mov	r0, r5
   e663a:	bd38      	pop	{r3, r4, r5, pc}

000e663c <_ZN6StringC1Ejh>:
	char buf[34];
	itoa(value, buf, base);
	*this = buf;
}

String::String(unsigned int value, unsigned char base)
   e663c:	b510      	push	{r4, lr}
   e663e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   e6640:	2300      	movs	r3, #0
	char buf[34];
	itoa(value, buf, base);
	*this = buf;
}

String::String(unsigned int value, unsigned char base)
   e6642:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   e6644:	6023      	str	r3, [r4, #0]
	capacity = 0;
   e6646:	6063      	str	r3, [r4, #4]
	len = 0;
   e6648:	60a3      	str	r3, [r4, #8]
	flags = 0;
   e664a:	7323      	strb	r3, [r4, #12]
	char buf[34];
	itoa(value, buf, base);
	*this = buf;
}

String::String(unsigned int value, unsigned char base)
   e664c:	4608      	mov	r0, r1
{
	init();
	char buf[33];
	utoa(value, buf, base);
   e664e:	a901      	add	r1, sp, #4
   e6650:	f7ff ff3d 	bl	e64ce <utoa>
	*this = buf;
   e6654:	a901      	add	r1, sp, #4
   e6656:	4620      	mov	r0, r4
   e6658:	f7ff ffdf 	bl	e661a <_ZN6StringaSEPKc>
}
   e665c:	4620      	mov	r0, r4
   e665e:	b00a      	add	sp, #40	; 0x28
   e6660:	bd10      	pop	{r4, pc}

000e6662 <_ZN6StringC1Emh>:
	char buf[34];
	ltoa(value, buf, base);
	*this = buf;
}

String::String(unsigned long value, unsigned char base)
   e6662:	b510      	push	{r4, lr}
   e6664:	4604      	mov	r4, r0
   e6666:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   e6668:	2300      	movs	r3, #0
   e666a:	6023      	str	r3, [r4, #0]
	capacity = 0;
   e666c:	6063      	str	r3, [r4, #4]
	len = 0;
   e666e:	60a3      	str	r3, [r4, #8]
	flags = 0;
   e6670:	7323      	strb	r3, [r4, #12]
	char buf[34];
	ltoa(value, buf, base);
	*this = buf;
}

String::String(unsigned long value, unsigned char base)
   e6672:	4608      	mov	r0, r1
{
	init();
	char buf[33];
	ultoa(value, buf, base);
   e6674:	2301      	movs	r3, #1
   e6676:	a901      	add	r1, sp, #4
   e6678:	f7ff ff01 	bl	e647e <ultoa>
	*this = buf;
   e667c:	a901      	add	r1, sp, #4
   e667e:	4620      	mov	r0, r4
   e6680:	f7ff ffcb 	bl	e661a <_ZN6StringaSEPKc>
}
   e6684:	4620      	mov	r0, r4
   e6686:	b00a      	add	sp, #40	; 0x28
   e6688:	bd10      	pop	{r4, pc}

000e668a <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   e668a:	b570      	push	{r4, r5, r6, lr}
   e668c:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   e668e:	460e      	mov	r6, r1
   e6690:	b909      	cbnz	r1, e6696 <_ZN6String6concatEPKcj+0xc>
   e6692:	2000      	movs	r0, #0
   e6694:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   e6696:	b16a      	cbz	r2, e66b4 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   e6698:	6883      	ldr	r3, [r0, #8]
   e669a:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   e669c:	4629      	mov	r1, r5
   e669e:	f7ff ff41 	bl	e6524 <_ZN6String7reserveEj>
   e66a2:	2800      	cmp	r0, #0
   e66a4:	d0f5      	beq.n	e6692 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   e66a6:	6820      	ldr	r0, [r4, #0]
   e66a8:	68a3      	ldr	r3, [r4, #8]
   e66aa:	4631      	mov	r1, r6
   e66ac:	4418      	add	r0, r3
   e66ae:	f003 fa71 	bl	e9b94 <strcpy>
	len = newlen;
   e66b2:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   e66b4:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   e66b6:	bd70      	pop	{r4, r5, r6, pc}

000e66b8 <_ZN6String6concatERKS_>:
/*  concat                                   */
/*********************************************/

unsigned char String::concat(const String &s)
{
	return concat(s.buffer, s.len);
   e66b8:	688a      	ldr	r2, [r1, #8]
   e66ba:	6809      	ldr	r1, [r1, #0]
   e66bc:	f7ff bfe5 	b.w	e668a <_ZN6String6concatEPKcj>

000e66c0 <_ZN21StringPrintableHelper5writeEPKhj>:

    StringPrintableHelper(String& s_) : s(s_) {
        s.reserve(20);
    }

    virtual size_t write(const uint8_t *buffer, size_t size) override
   e66c0:	b538      	push	{r3, r4, r5, lr}
   e66c2:	4604      	mov	r4, r0
    {
        unsigned len = s.length();
   e66c4:	6880      	ldr	r0, [r0, #8]
   e66c6:	6885      	ldr	r5, [r0, #8]
        s.concat((const char*)buffer, size);
   e66c8:	f7ff ffdf 	bl	e668a <_ZN6String6concatEPKcj>
   e66cc:	68a3      	ldr	r3, [r4, #8]
        return s.length()-len;
   e66ce:	6898      	ldr	r0, [r3, #8]
    }
   e66d0:	1b40      	subs	r0, r0, r5
   e66d2:	bd38      	pop	{r3, r4, r5, pc}

000e66d4 <_ZN6String6concatEPKc>:
	len = newlen;
	return 1;
}

unsigned char String::concat(const char *cstr)
{
   e66d4:	b538      	push	{r3, r4, r5, lr}
   e66d6:	4605      	mov	r5, r0
	if (!cstr) return 0;
   e66d8:	460c      	mov	r4, r1
	return concat(cstr, strlen(cstr));
}
   e66da:	4608      	mov	r0, r1
	return 1;
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
   e66dc:	b141      	cbz	r1, e66f0 <_ZN6String6concatEPKc+0x1c>
	return concat(cstr, strlen(cstr));
   e66de:	f003 fa61 	bl	e9ba4 <strlen>
   e66e2:	4621      	mov	r1, r4
   e66e4:	4602      	mov	r2, r0
   e66e6:	4628      	mov	r0, r5
}
   e66e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
   e66ec:	f7ff bfcd 	b.w	e668a <_ZN6String6concatEPKcj>
}
   e66f0:	bd38      	pop	{r3, r4, r5, pc}

000e66f2 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   e66f2:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   e66f4:	2300      	movs	r3, #0
}

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
   e66f6:	f88d 1004 	strb.w	r1, [sp, #4]
	buf[1] = 0;
	return concat(buf, 1);
   e66fa:	2201      	movs	r2, #1
   e66fc:	a901      	add	r1, sp, #4

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   e66fe:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   e6702:	f7ff ffc2 	bl	e668a <_ZN6String6concatEPKcj>
}
   e6706:	b003      	add	sp, #12
   e6708:	f85d fb04 	ldr.w	pc, [sp], #4

000e670c <_ZN21StringPrintableHelper5writeEh>:
        unsigned len = s.length();
        s.concat((const char*)buffer, size);
        return s.length()-len;
    }

    virtual size_t write(uint8_t c) override
   e670c:	b508      	push	{r3, lr}
    {
        return s.concat((char)c);
   e670e:	6880      	ldr	r0, [r0, #8]
   e6710:	f7ff ffef 	bl	e66f2 <_ZN6String6concatEc>
    }
   e6714:	bd08      	pop	{r3, pc}

000e6716 <_ZNK6String9compareToERKS_>:
/*********************************************/
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
   e6716:	4602      	mov	r2, r0
	if (!buffer || !s.buffer) {
   e6718:	6800      	ldr	r0, [r0, #0]
   e671a:	680b      	ldr	r3, [r1, #0]
   e671c:	b108      	cbz	r0, e6722 <_ZNK6String9compareToERKS_+0xc>
   e671e:	b95b      	cbnz	r3, e6738 <_ZNK6String9compareToERKS_+0x22>
   e6720:	e005      	b.n	e672e <_ZNK6String9compareToERKS_+0x18>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   e6722:	b123      	cbz	r3, e672e <_ZNK6String9compareToERKS_+0x18>
   e6724:	6889      	ldr	r1, [r1, #8]
   e6726:	b111      	cbz	r1, e672e <_ZNK6String9compareToERKS_+0x18>
   e6728:	7818      	ldrb	r0, [r3, #0]
   e672a:	4240      	negs	r0, r0
   e672c:	4770      	bx	lr
		if (buffer && len > 0) return *(unsigned char *)buffer;
   e672e:	b138      	cbz	r0, e6740 <_ZNK6String9compareToERKS_+0x2a>
   e6730:	6893      	ldr	r3, [r2, #8]
   e6732:	b123      	cbz	r3, e673e <_ZNK6String9compareToERKS_+0x28>
   e6734:	7800      	ldrb	r0, [r0, #0]
   e6736:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
   e6738:	4619      	mov	r1, r3
   e673a:	f003 ba21 	b.w	e9b80 <strcmp>
int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
		return 0;
   e673e:	4618      	mov	r0, r3
	}
	return strcmp(buffer, s.buffer);
}
   e6740:	4770      	bx	lr

000e6742 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
   e6742:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
   e6744:	6882      	ldr	r2, [r0, #8]
   e6746:	688b      	ldr	r3, [r1, #8]
   e6748:	429a      	cmp	r2, r3
   e674a:	d105      	bne.n	e6758 <_ZNK6String6equalsERKS_+0x16>
   e674c:	f7ff ffe3 	bl	e6716 <_ZNK6String9compareToERKS_>
   e6750:	fab0 f080 	clz	r0, r0
   e6754:	0940      	lsrs	r0, r0, #5
   e6756:	bd08      	pop	{r3, pc}
   e6758:	2000      	movs	r0, #0
}
   e675a:	bd08      	pop	{r3, pc}

000e675c <_ZNK6String6equalsEPKc>:

unsigned char String::equals(const char *cstr) const
{
   e675c:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   e675e:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   e6760:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   e6762:	b912      	cbnz	r2, e676a <_ZNK6String6equalsEPKc+0xe>
   e6764:	b919      	cbnz	r1, e676e <_ZNK6String6equalsEPKc+0x12>
   e6766:	2001      	movs	r0, #1
   e6768:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   e676a:	b911      	cbnz	r1, e6772 <_ZNK6String6equalsEPKc+0x16>
   e676c:	6803      	ldr	r3, [r0, #0]
   e676e:	7818      	ldrb	r0, [r3, #0]
   e6770:	e002      	b.n	e6778 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   e6772:	6800      	ldr	r0, [r0, #0]
   e6774:	f003 fa04 	bl	e9b80 <strcmp>
   e6778:	fab0 f080 	clz	r0, r0
   e677c:	0940      	lsrs	r0, r0, #5
}
   e677e:	bd08      	pop	{r3, pc}

000e6780 <_ZN6StringC1ERK9Printable>:
    {
        return s.concat((char)c);
    }
};

String::String(const Printable& printable)
   e6780:	b530      	push	{r4, r5, lr}
   e6782:	b085      	sub	sp, #20
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   e6784:	2300      	movs	r3, #0
    {
        return s.concat((char)c);
    }
};

String::String(const Printable& printable)
   e6786:	460d      	mov	r5, r1
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   e6788:	9302      	str	r3, [sp, #8]
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   e678a:	6003      	str	r3, [r0, #0]
	capacity = 0;
   e678c:	6043      	str	r3, [r0, #4]
	len = 0;
   e678e:	6083      	str	r3, [r0, #8]
	flags = 0;
   e6790:	7303      	strb	r3, [r0, #12]
    String& s;

public:

    StringPrintableHelper(String& s_) : s(s_) {
        s.reserve(20);
   e6792:	2114      	movs	r1, #20
{
    String& s;

public:

    StringPrintableHelper(String& s_) : s(s_) {
   e6794:	4b06      	ldr	r3, [pc, #24]	; (e67b0 <_ZN6StringC1ERK9Printable+0x30>)
   e6796:	9301      	str	r3, [sp, #4]
    {
        return s.concat((char)c);
    }
};

String::String(const Printable& printable)
   e6798:	4604      	mov	r4, r0
{
    String& s;

public:

    StringPrintableHelper(String& s_) : s(s_) {
   e679a:	9003      	str	r0, [sp, #12]
        s.reserve(20);
   e679c:	f7ff fec2 	bl	e6524 <_ZN6String7reserveEj>

String::String(const Printable& printable)
{
    init();
    StringPrintableHelper help(*this);
    printable.printTo(help);
   e67a0:	682b      	ldr	r3, [r5, #0]
   e67a2:	a901      	add	r1, sp, #4
   e67a4:	681b      	ldr	r3, [r3, #0]
   e67a6:	4628      	mov	r0, r5
   e67a8:	4798      	blx	r3
}
   e67aa:	4620      	mov	r0, r4
   e67ac:	b005      	add	sp, #20
   e67ae:	bd30      	pop	{r4, r5, pc}
   e67b0:	000ef02c 	.word	0x000ef02c

000e67b4 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   e67b4:	b510      	push	{r4, lr}
   e67b6:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   e67b8:	6800      	ldr	r0, [r0, #0]
   e67ba:	b108      	cbz	r0, e67c0 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   e67bc:	f7ff fa5c 	bl	e5c78 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   e67c0:	4620      	mov	r0, r4
   e67c2:	bd10      	pop	{r4, pc}

000e67c4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   e67c4:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   e67c6:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   e67c8:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   e67ca:	689b      	ldr	r3, [r3, #8]
   e67cc:	4798      	blx	r3
          if (--_M_weak_count == 0)
   e67ce:	68a3      	ldr	r3, [r4, #8]
   e67d0:	3b01      	subs	r3, #1
   e67d2:	60a3      	str	r3, [r4, #8]
   e67d4:	b92b      	cbnz	r3, e67e2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   e67d6:	6823      	ldr	r3, [r4, #0]
   e67d8:	4620      	mov	r0, r4
   e67da:	68db      	ldr	r3, [r3, #12]
        }
    }
   e67dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   e67e0:	4718      	bx	r3
   e67e2:	bd10      	pop	{r4, pc}

000e67e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>:
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   e67e4:	b538      	push	{r3, r4, r5, lr}
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   e67e6:	680c      	ldr	r4, [r1, #0]
	if (__tmp != _M_pi)
   e67e8:	6803      	ldr	r3, [r0, #0]
   e67ea:	429c      	cmp	r4, r3
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   e67ec:	4605      	mov	r5, r0
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
   e67ee:	d00c      	beq.n	e680a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x26>
	  {
	    if (__tmp != 0)
   e67f0:	b114      	cbz	r4, e67f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x14>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   e67f2:	6863      	ldr	r3, [r4, #4]
   e67f4:	3301      	adds	r3, #1
   e67f6:	6063      	str	r3, [r4, #4]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
   e67f8:	6828      	ldr	r0, [r5, #0]
   e67fa:	b128      	cbz	r0, e6808 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   e67fc:	6843      	ldr	r3, [r0, #4]
   e67fe:	3b01      	subs	r3, #1
   e6800:	6043      	str	r3, [r0, #4]
   e6802:	b90b      	cbnz	r3, e6808 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>
   e6804:	f7ff ffde 	bl	e67c4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
	      _M_pi->_M_release();
	    _M_pi = __tmp;
   e6808:	602c      	str	r4, [r5, #0]
	  }
	return *this;
      }
   e680a:	4628      	mov	r0, r5
   e680c:	bd38      	pop	{r3, r4, r5, pc}
	...

000e6810 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   e6810:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   e6812:	4c06      	ldr	r4, [pc, #24]	; (e682c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   e6814:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   e6816:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   e6818:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   e681a:	f7ff fa25 	bl	e5c68 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   e681e:	4620      	mov	r0, r4
   e6820:	4a03      	ldr	r2, [pc, #12]	; (e6830 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   e6822:	4904      	ldr	r1, [pc, #16]	; (e6834 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   e6824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   e6828:	f001 bdfa 	b.w	e8420 <__aeabi_atexit>
   e682c:	2003e4b0 	.word	0x2003e4b0
   e6830:	2003aca8 	.word	0x2003aca8
   e6834:	000e67b5 	.word	0x000e67b5

000e6838 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   e6838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e683a:	4606      	mov	r6, r0
   e683c:	460d      	mov	r5, r1
   e683e:	188f      	adds	r7, r1, r2
  size_t n = 0;
   e6840:	2400      	movs	r4, #0
  while (size--) {
   e6842:	42bd      	cmp	r5, r7
   e6844:	d00c      	beq.n	e6860 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   e6846:	6833      	ldr	r3, [r6, #0]
   e6848:	f815 1b01 	ldrb.w	r1, [r5], #1
   e684c:	689b      	ldr	r3, [r3, #8]
   e684e:	4630      	mov	r0, r6
   e6850:	4798      	blx	r3
     if (chunk>=0)
   e6852:	2800      	cmp	r0, #0
   e6854:	db01      	blt.n	e685a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   e6856:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   e6858:	e7f3      	b.n	e6842 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   e685a:	2c00      	cmp	r4, #0
   e685c:	bf08      	it	eq
   e685e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   e6860:	4620      	mov	r0, r4
   e6862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000e6864 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   e6864:	b570      	push	{r4, r5, r6, lr}
   e6866:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   e6868:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   e686a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   e686c:	b149      	cbz	r1, e6882 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   e686e:	f003 f999 	bl	e9ba4 <strlen>
   e6872:	682b      	ldr	r3, [r5, #0]
   e6874:	4602      	mov	r2, r0
   e6876:	4621      	mov	r1, r4
   e6878:	4628      	mov	r0, r5
   e687a:	68db      	ldr	r3, [r3, #12]
    }
   e687c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   e6880:	4718      	bx	r3
    }
   e6882:	bd70      	pop	{r4, r5, r6, pc}

000e6884 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   e6884:	6803      	ldr	r3, [r0, #0]
   e6886:	689b      	ldr	r3, [r3, #8]
   e6888:	4718      	bx	r3

000e688a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   e688a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   e688c:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   e688e:	4605      	mov	r5, r0
  size_t n = print('\r');
   e6890:	f7ff fff8 	bl	e6884 <_ZN5Print5printEc>
  n += print('\n');
   e6894:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   e6896:	4604      	mov	r4, r0
  n += print('\n');
   e6898:	4628      	mov	r0, r5
   e689a:	f7ff fff3 	bl	e6884 <_ZN5Print5printEc>
  return n;
}
   e689e:	4420      	add	r0, r4
   e68a0:	bd38      	pop	{r3, r4, r5, pc}

000e68a2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   e68a2:	b538      	push	{r3, r4, r5, lr}
   e68a4:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   e68a6:	f7ff ffdd 	bl	e6864 <_ZN5Print5writeEPKc>
   e68aa:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   e68ac:	4628      	mov	r0, r5
   e68ae:	f7ff ffec 	bl	e688a <_ZN5Print7printlnEv>
  return n;
}
   e68b2:	4420      	add	r0, r4
   e68b4:	bd38      	pop	{r3, r4, r5, pc}

000e68b6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   e68b6:	b530      	push	{r4, r5, lr}
   e68b8:	b08b      	sub	sp, #44	; 0x2c
   e68ba:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   e68bc:	2100      	movs	r1, #0
   e68be:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   e68c2:	2a01      	cmp	r2, #1
   e68c4:	bf98      	it	ls
   e68c6:	220a      	movls	r2, #10
   e68c8:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   e68cc:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   e68d0:	fb05 3312 	mls	r3, r5, r2, r3
   e68d4:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   e68d8:	2b09      	cmp	r3, #9
   e68da:	bf94      	ite	ls
   e68dc:	3330      	addls	r3, #48	; 0x30
   e68de:	3337      	addhi	r3, #55	; 0x37
   e68e0:	b2db      	uxtb	r3, r3
   e68e2:	4621      	mov	r1, r4
   e68e4:	f804 3901 	strb.w	r3, [r4], #-1
   e68e8:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   e68ea:	2d00      	cmp	r5, #0
   e68ec:	d1ee      	bne.n	e68cc <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   e68ee:	f7ff ffb9 	bl	e6864 <_ZN5Print5writeEPKc>
}
   e68f2:	b00b      	add	sp, #44	; 0x2c
   e68f4:	bd30      	pop	{r4, r5, pc}
	...

000e68f8 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   e68f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e68fc:	ec57 6b10 	vmov	r6, r7, d0
   e6900:	4682      	mov	sl, r0
   e6902:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   e6904:	ee10 2a10 	vmov	r2, s0
   e6908:	463b      	mov	r3, r7
   e690a:	ee10 0a10 	vmov	r0, s0
   e690e:	4639      	mov	r1, r7
   e6910:	f002 fd86 	bl	e9420 <__aeabi_dcmpun>
   e6914:	b108      	cbz	r0, e691a <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   e6916:	494e      	ldr	r1, [pc, #312]	; (e6a50 <_ZN5Print10printFloatEdh+0x158>)
   e6918:	e012      	b.n	e6940 <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   e691a:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   e691e:	f04f 32ff 	mov.w	r2, #4294967295
   e6922:	4b4c      	ldr	r3, [pc, #304]	; (e6a54 <_ZN5Print10printFloatEdh+0x15c>)
   e6924:	4630      	mov	r0, r6
   e6926:	4649      	mov	r1, r9
   e6928:	f002 fd7a 	bl	e9420 <__aeabi_dcmpun>
   e692c:	b968      	cbnz	r0, e694a <_ZN5Print10printFloatEdh+0x52>
   e692e:	f04f 32ff 	mov.w	r2, #4294967295
   e6932:	4b48      	ldr	r3, [pc, #288]	; (e6a54 <_ZN5Print10printFloatEdh+0x15c>)
   e6934:	4630      	mov	r0, r6
   e6936:	4649      	mov	r1, r9
   e6938:	f002 fd54 	bl	e93e4 <__aeabi_dcmple>
   e693c:	b928      	cbnz	r0, e694a <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   e693e:	4946      	ldr	r1, [pc, #280]	; (e6a58 <_ZN5Print10printFloatEdh+0x160>)
   e6940:	4650      	mov	r0, sl
   e6942:	f7ff ff8f 	bl	e6864 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   e6946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   e694a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   e694e:	4b43      	ldr	r3, [pc, #268]	; (e6a5c <_ZN5Print10printFloatEdh+0x164>)
   e6950:	4630      	mov	r0, r6
   e6952:	4639      	mov	r1, r7
   e6954:	f002 fd5a 	bl	e940c <__aeabi_dcmpgt>
   e6958:	b108      	cbz	r0, e695e <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   e695a:	4941      	ldr	r1, [pc, #260]	; (e6a60 <_ZN5Print10printFloatEdh+0x168>)
   e695c:	e7f0      	b.n	e6940 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   e695e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   e6962:	4b40      	ldr	r3, [pc, #256]	; (e6a64 <_ZN5Print10printFloatEdh+0x16c>)
   e6964:	4630      	mov	r0, r6
   e6966:	4639      	mov	r1, r7
   e6968:	f002 fd32 	bl	e93d0 <__aeabi_dcmplt>
   e696c:	2800      	cmp	r0, #0
   e696e:	d1f4      	bne.n	e695a <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   e6970:	2200      	movs	r2, #0
   e6972:	2300      	movs	r3, #0
   e6974:	4630      	mov	r0, r6
   e6976:	4639      	mov	r1, r7
   e6978:	f002 fd2a 	bl	e93d0 <__aeabi_dcmplt>
   e697c:	b140      	cbz	r0, e6990 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   e697e:	212d      	movs	r1, #45	; 0x2d
   e6980:	4650      	mov	r0, sl
   e6982:	f7ff ff7f 	bl	e6884 <_ZN5Print5printEc>
     number = -number;
   e6986:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   e698a:	4604      	mov	r4, r0
     number = -number;
   e698c:	461f      	mov	r7, r3
   e698e:	e000      	b.n	e6992 <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   e6990:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   e6992:	4935      	ldr	r1, [pc, #212]	; (e6a68 <_ZN5Print10printFloatEdh+0x170>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   e6994:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   e6998:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   e699a:	fa5f f388 	uxtb.w	r3, r8
   e699e:	429d      	cmp	r5, r3
   e69a0:	d906      	bls.n	e69b0 <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   e69a2:	2200      	movs	r2, #0
   e69a4:	4b31      	ldr	r3, [pc, #196]	; (e6a6c <_ZN5Print10printFloatEdh+0x174>)
   e69a6:	f002 fbcb 	bl	e9140 <__aeabi_ddiv>
   e69aa:	f108 0801 	add.w	r8, r8, #1
   e69ae:	e7f4      	b.n	e699a <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   e69b0:	4632      	mov	r2, r6
   e69b2:	463b      	mov	r3, r7
   e69b4:	f002 f8e8 	bl	e8b88 <__adddf3>
   e69b8:	460f      	mov	r7, r1
   e69ba:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   e69bc:	f002 fd6e 	bl	e949c <__aeabi_d2uiz>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   e69c0:	220a      	movs	r2, #10
   e69c2:	4601      	mov	r1, r0
   e69c4:	4680      	mov	r8, r0
   e69c6:	4650      	mov	r0, sl
   e69c8:	f7ff ff75 	bl	e68b6 <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
   e69cc:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   e69ce:	b3e5      	cbz	r5, e6a4a <_ZN5Print10printFloatEdh+0x152>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   e69d0:	4640      	mov	r0, r8
   e69d2:	f002 fa15 	bl	e8e00 <__aeabi_ui2d>
   e69d6:	4602      	mov	r2, r0
   e69d8:	460b      	mov	r3, r1
   e69da:	4630      	mov	r0, r6
   e69dc:	4639      	mov	r1, r7
   e69de:	f002 f8d1 	bl	e8b84 <__aeabi_dsub>
   e69e2:	4606      	mov	r6, r0
   e69e4:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   e69e6:	4650      	mov	r0, sl
   e69e8:	4921      	ldr	r1, [pc, #132]	; (e6a70 <_ZN5Print10printFloatEdh+0x178>)
   e69ea:	f7ff ff3b 	bl	e6864 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   e69ee:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   e69f0:	2200      	movs	r2, #0
   e69f2:	4b1e      	ldr	r3, [pc, #120]	; (e6a6c <_ZN5Print10printFloatEdh+0x174>)
   e69f4:	4630      	mov	r0, r6
   e69f6:	4639      	mov	r1, r7
   e69f8:	f002 fa78 	bl	e8eec <__aeabi_dmul>
   e69fc:	4606      	mov	r6, r0
   e69fe:	460f      	mov	r7, r1
    int toPrint = int(remainder);
   e6a00:	f002 fd24 	bl	e944c <__aeabi_d2iz>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   e6a04:	f1b0 0900 	subs.w	r9, r0, #0
   e6a08:	da07      	bge.n	e6a1a <_ZN5Print10printFloatEdh+0x122>
            t = print('-');
   e6a0a:	212d      	movs	r1, #45	; 0x2d
   e6a0c:	4650      	mov	r0, sl
   e6a0e:	f7ff ff39 	bl	e6884 <_ZN5Print5printEc>
            val = -n;
   e6a12:	f1c9 0100 	rsb	r1, r9, #0
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   e6a16:	4680      	mov	r8, r0
   e6a18:	e002      	b.n	e6a20 <_ZN5Print10printFloatEdh+0x128>
            val = -n;
        } else {
            val = n;
   e6a1a:	4649      	mov	r1, r9
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   e6a1c:	f04f 0800 	mov.w	r8, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   e6a20:	220a      	movs	r2, #10
   e6a22:	4650      	mov	r0, sl
   e6a24:	f7ff ff47 	bl	e68b6 <_ZN5Print11printNumberEmh>
    n += print(toPrint);
   e6a28:	4440      	add	r0, r8
   e6a2a:	4404      	add	r4, r0
    remainder -= toPrint;
   e6a2c:	4648      	mov	r0, r9
   e6a2e:	f002 f9f7 	bl	e8e20 <__aeabi_i2d>
   e6a32:	4602      	mov	r2, r0
   e6a34:	460b      	mov	r3, r1
   e6a36:	4630      	mov	r0, r6
   e6a38:	4639      	mov	r1, r7
   e6a3a:	f002 f8a3 	bl	e8b84 <__aeabi_dsub>
   e6a3e:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   e6a40:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   e6a44:	4606      	mov	r6, r0
   e6a46:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   e6a48:	d1d2      	bne.n	e69f0 <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   e6a4a:	4620      	mov	r0, r4
   e6a4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e6a50:	000ef054 	.word	0x000ef054
   e6a54:	7fefffff 	.word	0x7fefffff
   e6a58:	000ef05c 	.word	0x000ef05c
   e6a5c:	41efffff 	.word	0x41efffff
   e6a60:	000ef058 	.word	0x000ef058
   e6a64:	c1efffff 	.word	0xc1efffff
   e6a68:	3fe00000 	.word	0x3fe00000
   e6a6c:	40240000 	.word	0x40240000
   e6a70:	000ed6c4 	.word	0x000ed6c4

000e6a74 <_ZN5Print7printlnEdi>:
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
   e6a74:	b538      	push	{r3, r4, r5, lr}
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   e6a76:	b2c9      	uxtb	r1, r1
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
   e6a78:	4605      	mov	r5, r0
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   e6a7a:	f7ff ff3d 	bl	e68f8 <_ZN5Print10printFloatEdh>
   e6a7e:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
   e6a80:	4628      	mov	r0, r5
   e6a82:	f7ff ff02 	bl	e688a <_ZN5Print7printlnEv>
  return n;
}
   e6a86:	4420      	add	r0, r4
   e6a88:	bd38      	pop	{r3, r4, r5, pc}

000e6a8a <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   e6a8a:	b510      	push	{r4, lr}
   e6a8c:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   e6a8e:	f7ff f8b3 	bl	e5bf8 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   e6a92:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   e6a94:	6823      	ldr	r3, [r4, #0]
   e6a96:	4620      	mov	r0, r4
   e6a98:	695b      	ldr	r3, [r3, #20]
   e6a9a:	4798      	blx	r3
    if (c >= 0) return c;
   e6a9c:	2800      	cmp	r0, #0
   e6a9e:	da08      	bge.n	e6ab2 <_ZN6Stream9timedReadEv+0x28>
   e6aa0:	f7ff f8aa 	bl	e5bf8 <HAL_Timer_Get_Milli_Seconds>
// private method to read stream with timeout
int Stream::timedRead()
{
  int c;
  _startMillis = millis();
  do {
   e6aa4:	68e3      	ldr	r3, [r4, #12]
   e6aa6:	1ac0      	subs	r0, r0, r3
   e6aa8:	68a3      	ldr	r3, [r4, #8]
   e6aaa:	4298      	cmp	r0, r3
   e6aac:	d3f2      	bcc.n	e6a94 <_ZN6Stream9timedReadEv+0xa>
    c = read();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
   e6aae:	f04f 30ff 	mov.w	r0, #4294967295
}
   e6ab2:	bd10      	pop	{r4, pc}

000e6ab4 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   e6ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e6ab8:	4680      	mov	r8, r0
   e6aba:	460d      	mov	r5, r1
   e6abc:	188f      	adds	r7, r1, r2
   e6abe:	460c      	mov	r4, r1
  size_t count = 0;
  while (count < length) {
   e6ac0:	42bc      	cmp	r4, r7
   e6ac2:	eba4 0605 	sub.w	r6, r4, r5
   e6ac6:	d007      	beq.n	e6ad8 <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
   e6ac8:	4640      	mov	r0, r8
   e6aca:	f7ff ffde 	bl	e6a8a <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   e6ace:	2800      	cmp	r0, #0
   e6ad0:	db02      	blt.n	e6ad8 <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
   e6ad2:	f804 0b01 	strb.w	r0, [r4], #1
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
  size_t count = 0;
  while (count < length) {
   e6ad6:	e7f3      	b.n	e6ac0 <_ZN6Stream9readBytesEPcj+0xc>
    if (c < 0) break;
    *buffer++ = (char)c;
    count++;
  }
  return count;
}
   e6ad8:	4630      	mov	r0, r6
   e6ada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000e6ae0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   e6ae0:	4b01      	ldr	r3, [pc, #4]	; (e6ae8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   e6ae2:	4a02      	ldr	r2, [pc, #8]	; (e6aec <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   e6ae4:	601a      	str	r2, [r3, #0]
   e6ae6:	4770      	bx	lr
   e6ae8:	2003e4b4 	.word	0x2003e4b4
   e6aec:	000ef0cb 	.word	0x000ef0cb

000e6af0 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   e6af0:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   e6af2:	2000      	movs	r0, #0
   e6af4:	f7ff face 	bl	e6094 <spark_sync_time_pending>
   e6af8:	b128      	cbz	r0, e6b06 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   e6afa:	f7ff fabb 	bl	e6074 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   e6afe:	f080 0001 	eor.w	r0, r0, #1
   e6b02:	b2c0      	uxtb	r0, r0
   e6b04:	bd08      	pop	{r3, pc}
   e6b06:	2001      	movs	r0, #1
    }
   e6b08:	bd08      	pop	{r3, pc}
	...

000e6b0c <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   e6b0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
   e6b0e:	4b0e      	ldr	r3, [pc, #56]	; (e6b48 <_ZN9TimeClass7timeStrEl+0x3c>)
   e6b10:	681b      	ldr	r3, [r3, #0]
   e6b12:	4419      	add	r1, r3
   e6b14:	4b0d      	ldr	r3, [pc, #52]	; (e6b4c <_ZN9TimeClass7timeStrEl+0x40>)
   e6b16:	681b      	ldr	r3, [r3, #0]
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   e6b18:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
   e6b1a:	a802      	add	r0, sp, #8
   e6b1c:	4419      	add	r1, r3
   e6b1e:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
   e6b22:	f002 febd 	bl	e98a0 <localtime>
        char* ascstr = asctime(calendar_time);
   e6b26:	f002 fe65 	bl	e97f4 <asctime>
   e6b2a:	4605      	mov	r5, r0
        int len = strlen(ascstr);
   e6b2c:	f003 f83a 	bl	e9ba4 <strlen>
        ascstr[len-1] = 0; // remove final newline
   e6b30:	4428      	add	r0, r5
   e6b32:	2300      	movs	r3, #0
   e6b34:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
   e6b38:	4629      	mov	r1, r5
   e6b3a:	4620      	mov	r0, r4
   e6b3c:	f7ff fd1b 	bl	e6576 <_ZN6StringC1EPK19__FlashStringHelper>
}
   e6b40:	4620      	mov	r0, r4
   e6b42:	b003      	add	sp, #12
   e6b44:	bd30      	pop	{r4, r5, pc}
   e6b46:	bf00      	nop
   e6b48:	2003e4c0 	.word	0x2003e4c0
   e6b4c:	2003e4bc 	.word	0x2003e4bc

000e6b50 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   e6b50:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   e6b52:	2000      	movs	r0, #0
   e6b54:	f7ff f860 	bl	e5c18 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   e6b58:	4604      	mov	r4, r0
   e6b5a:	b968      	cbnz	r0, e6b78 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   e6b5c:	f7ff f9ec 	bl	e5f38 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   e6b60:	2801      	cmp	r0, #1
   e6b62:	d10b      	bne.n	e6b7c <_ZN9TimeClass7isValidEv+0x2c>
   e6b64:	4620      	mov	r0, r4
   e6b66:	f7ff f9ff 	bl	e5f68 <system_thread_get_state>
   e6b6a:	b938      	cbnz	r0, e6b7c <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   e6b6c:	f7ff ffc0 	bl	e6af0 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   e6b70:	b930      	cbnz	r0, e6b80 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   e6b72:	f7ff fa77 	bl	e6064 <spark_process>
   e6b76:	e7f9      	b.n	e6b6c <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   e6b78:	2001      	movs	r0, #1
   e6b7a:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   e6b7c:	2000      	movs	r0, #0
   e6b7e:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   e6b80:	f7ff ffb6 	bl	e6af0 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   e6b84:	2000      	movs	r0, #0
   e6b86:	f7ff f847 	bl	e5c18 <HAL_RTC_Time_Is_Valid>
   e6b8a:	3000      	adds	r0, #0
   e6b8c:	bf18      	it	ne
   e6b8e:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   e6b90:	bd10      	pop	{r4, pc}

000e6b92 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   e6b92:	b508      	push	{r3, lr}
    (void)isValid();
   e6b94:	f7ff ffdc 	bl	e6b50 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   e6b98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   e6b9c:	f7ff b834 	b.w	e5c08 <HAL_RTC_Get_UnixTime>

000e6ba0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   e6ba0:	4b02      	ldr	r3, [pc, #8]	; (e6bac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   e6ba2:	681a      	ldr	r2, [r3, #0]
   e6ba4:	4b02      	ldr	r3, [pc, #8]	; (e6bb0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   e6ba6:	601a      	str	r2, [r3, #0]
   e6ba8:	4770      	bx	lr
   e6baa:	bf00      	nop
   e6bac:	2003abb0 	.word	0x2003abb0
   e6bb0:	2003e4b8 	.word	0x2003e4b8

000e6bb4 <_Z3mapiiiii>:
    HAL_ADC_Set_Sample_Time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   e6bb4:	428a      	cmp	r2, r1
{
    HAL_ADC_Set_Sample_Time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
   e6bb6:	b530      	push	{r4, r5, lr}
    if (fromEnd == fromStart) {
   e6bb8:	d007      	beq.n	e6bca <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   e6bba:	9d03      	ldr	r5, [sp, #12]
   e6bbc:	1a44      	subs	r4, r0, r1
   e6bbe:	1aed      	subs	r5, r5, r3
   e6bc0:	436c      	muls	r4, r5
   e6bc2:	1a52      	subs	r2, r2, r1
   e6bc4:	fb94 f4f2 	sdiv	r4, r4, r2
   e6bc8:	18e0      	adds	r0, r4, r3
}
   e6bca:	bd30      	pop	{r4, r5, pc}

000e6bcc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   e6bcc:	2100      	movs	r1, #0
   e6bce:	f7ff b9c3 	b.w	e5f58 <system_delay_ms>

000e6bd2 <_ZN9TCPServer5writeEhm>:
    }

    return _client;
}

size_t TCPServer::write(uint8_t b, system_tick_t timeout) {
   e6bd2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   e6bd4:	ac02      	add	r4, sp, #8
    return write(&b, sizeof(b), timeout);
   e6bd6:	6803      	ldr	r3, [r0, #0]
    }

    return _client;
}

size_t TCPServer::write(uint8_t b, system_tick_t timeout) {
   e6bd8:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, sizeof(b), timeout);
   e6bdc:	699d      	ldr	r5, [r3, #24]
   e6bde:	4621      	mov	r1, r4
   e6be0:	4613      	mov	r3, r2
   e6be2:	2201      	movs	r2, #1
   e6be4:	47a8      	blx	r5
}
   e6be6:	b003      	add	sp, #12
   e6be8:	bd30      	pop	{r4, r5, pc}

000e6bea <_ZN9TCPServer5writeEh>:
    size_t ret = _client.write(buf, size, timeout);
    setWriteError(_client.getWriteError());
    return ret;
}

size_t TCPServer::write(uint8_t b) {
   e6bea:	b513      	push	{r0, r1, r4, lr}
   e6bec:	ab02      	add	r3, sp, #8
    return write(&b, 1);
   e6bee:	6802      	ldr	r2, [r0, #0]
    size_t ret = _client.write(buf, size, timeout);
    setWriteError(_client.getWriteError());
    return ret;
}

size_t TCPServer::write(uint8_t b) {
   e6bf0:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&b, 1);
   e6bf4:	68d4      	ldr	r4, [r2, #12]
   e6bf6:	4619      	mov	r1, r3
   e6bf8:	2201      	movs	r2, #1
   e6bfa:	47a0      	blx	r4
}
   e6bfc:	b002      	add	sp, #8
   e6bfe:	bd10      	pop	{r4, pc}

000e6c00 <_ZN9TCPServer5writeEPKhj>:

size_t TCPServer::write(const uint8_t *buffer, size_t size) {
   e6c00:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   e6c02:	6803      	ldr	r3, [r0, #0]
   e6c04:	699c      	ldr	r4, [r3, #24]
   e6c06:	f04f 33ff 	mov.w	r3, #4294967295
   e6c0a:	46a4      	mov	ip, r4
}
   e6c0c:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPServer::write(uint8_t b) {
    return write(&b, 1);
}

size_t TCPServer::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   e6c10:	4760      	bx	ip

000e6c12 <_ZN9TCPServer5writeEPKhjm>:

size_t TCPServer::write(uint8_t b, system_tick_t timeout) {
    return write(&b, sizeof(b), timeout);
}

size_t TCPServer::write(const uint8_t *buf, size_t size, system_tick_t timeout) {
   e6c12:	b510      	push	{r4, lr}
   e6c14:	4604      	mov	r4, r0

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   e6c16:	2000      	movs	r0, #0
   e6c18:	61a0      	str	r0, [r4, #24]
    _client.clearWriteError();
    size_t ret = _client.write(buf, size, timeout);
   e6c1a:	f104 0014 	add.w	r0, r4, #20
   e6c1e:	f000 fd4d 	bl	e76bc <_ZN9TCPClient5writeEPKhjm>
   e6c22:	69a3      	ldr	r3, [r4, #24]
   e6c24:	6063      	str	r3, [r4, #4]
    setWriteError(_client.getWriteError());
    return ret;
}
   e6c26:	bd10      	pop	{r4, pc}

000e6c28 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.12>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   e6c28:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   e6c2a:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   e6c2c:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   e6c2e:	689b      	ldr	r3, [r3, #8]
   e6c30:	4798      	blx	r3
          if (--_M_weak_count == 0)
   e6c32:	68a3      	ldr	r3, [r4, #8]
   e6c34:	3b01      	subs	r3, #1
   e6c36:	60a3      	str	r3, [r4, #8]
   e6c38:	b92b      	cbnz	r3, e6c46 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.12+0x1e>
            _M_destroy();
   e6c3a:	6823      	ldr	r3, [r4, #0]
   e6c3c:	4620      	mov	r0, r4
   e6c3e:	68db      	ldr	r3, [r3, #12]
        }
    }
   e6c40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   e6c44:	4718      	bx	r3
   e6c46:	bd10      	pop	{r4, pc}

000e6c48 <_ZN15TCPServerClient8remoteIPEv>:
class TCPServerClient : public TCPClient {
public:
    TCPServerClient(sock_handle_t sock) : TCPClient(sock) {
    }

    virtual IPAddress remoteIP() override {
   e6c48:	b570      	push	{r4, r5, r6, lr}
        IPAddress addr;
        struct sockaddr_storage saddr = {};
   e6c4a:	241c      	movs	r4, #28
class TCPServerClient : public TCPClient {
public:
    TCPServerClient(sock_handle_t sock) : TCPClient(sock) {
    }

    virtual IPAddress remoteIP() override {
   e6c4c:	b094      	sub	sp, #80	; 0x50
   e6c4e:	460d      	mov	r5, r1
   e6c50:	4606      	mov	r6, r0
        IPAddress addr;
   e6c52:	f000 fa71 	bl	e7138 <_ZN9IPAddressC1Ev>
        struct sockaddr_storage saddr = {};
   e6c56:	4622      	mov	r2, r4
   e6c58:	2100      	movs	r1, #0
   e6c5a:	a80d      	add	r0, sp, #52	; 0x34
   e6c5c:	f002 ff51 	bl	e9b02 <memset>
        socklen_t len = sizeof(saddr);
   e6c60:	aa14      	add	r2, sp, #80	; 0x50
    friend class TCPServer;

    using Print::write;

protected:
    inline sock_handle_t sock_handle() { return d_->sock; }
   e6c62:	696b      	ldr	r3, [r5, #20]
   e6c64:	f842 4d4c 	str.w	r4, [r2, #-76]!
        if (!sock_getpeername(sock_handle(), (struct sockaddr*)&saddr, &len)) {
   e6c68:	a90d      	add	r1, sp, #52	; 0x34
   e6c6a:	6818      	ldr	r0, [r3, #0]
   e6c6c:	f7ff f8ac 	bl	e5dc8 <sock_getpeername>
   e6c70:	4601      	mov	r1, r0
   e6c72:	bb68      	cbnz	r0, e6cd0 <_ZN15TCPServerClient8remoteIPEv+0x88>
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   e6c74:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
   e6c78:	2b02      	cmp	r3, #2
   e6c7a:	d101      	bne.n	e6c80 <_ZN15TCPServerClient8remoteIPEv+0x38>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   e6c7c:	a90e      	add	r1, sp, #56	; 0x38
   e6c7e:	e024      	b.n	e6cca <_ZN15TCPServerClient8remoteIPEv+0x82>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   e6c80:	2b0a      	cmp	r3, #10
   e6c82:	d125      	bne.n	e6cd0 <_ZN15TCPServerClient8remoteIPEv+0x88>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   e6c84:	ac02      	add	r4, sp, #8
   e6c86:	2211      	movs	r2, #17
   e6c88:	4620      	mov	r0, r4
   e6c8a:	f002 ff3a 	bl	e9b02 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   e6c8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   e6c90:	b943      	cbnz	r3, e6ca4 <_ZN15TCPServerClient8remoteIPEv+0x5c>
   e6c92:	9b10      	ldr	r3, [sp, #64]	; 0x40
   e6c94:	b933      	cbnz	r3, e6ca4 <_ZN15TCPServerClient8remoteIPEv+0x5c>
   e6c96:	f64f 70ff 	movw	r0, #65535	; 0xffff
   e6c9a:	9d11      	ldr	r5, [sp, #68]	; 0x44
   e6c9c:	f7fe fffc 	bl	e5c98 <inet_htonl>
   e6ca0:	4285      	cmp	r5, r0
   e6ca2:	d011      	beq.n	e6cc8 <_ZN15TCPServerClient8remoteIPEv+0x80>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   e6ca4:	ab0f      	add	r3, sp, #60	; 0x3c
   e6ca6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   e6ca8:	ad08      	add	r5, sp, #32
   e6caa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            a.v = 6;
   e6cae:	2306      	movs	r3, #6
            addr = IPAddress(a);
   e6cb0:	4621      	mov	r1, r4
   e6cb2:	a807      	add	r0, sp, #28
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   e6cb4:	f88d 3018 	strb.w	r3, [sp, #24]
            addr = IPAddress(a);
   e6cb8:	f000 fa4c 	bl	e7154 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   e6cbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   e6cbe:	1d34      	adds	r4, r6, #4
   e6cc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   e6cc2:	682b      	ldr	r3, [r5, #0]
   e6cc4:	7023      	strb	r3, [r4, #0]
   e6cc6:	e003      	b.n	e6cd0 <_ZN15TCPServerClient8remoteIPEv+0x88>
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   e6cc8:	a912      	add	r1, sp, #72	; 0x48
   e6cca:	4630      	mov	r0, r6
   e6ccc:	f000 fa77 	bl	e71be <_ZN9IPAddressaSEPKh>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, addr, nullptr);
        }
        return addr;
    }
   e6cd0:	4630      	mov	r0, r6
   e6cd2:	b014      	add	sp, #80	; 0x50
   e6cd4:	bd70      	pop	{r4, r5, r6, pc}
	...

000e6cd8 <_ZN15TCPServerClientD1Ev>:

using namespace spark;

static TCPClient* s_invalid_client = nullptr;

class TCPServerClient : public TCPClient {
   e6cd8:	b510      	push	{r4, lr}
   e6cda:	4b03      	ldr	r3, [pc, #12]	; (e6ce8 <_ZN15TCPServerClientD1Ev+0x10>)
   e6cdc:	6003      	str	r3, [r0, #0]
   e6cde:	4604      	mov	r4, r0
   e6ce0:	f7ed fa1a 	bl	d4118 <_ZN9TCPClientD1Ev>
   e6ce4:	4620      	mov	r0, r4
   e6ce6:	bd10      	pop	{r4, pc}
   e6ce8:	000ef1c0 	.word	0x000ef1c0

000e6cec <_ZN15TCPServerClientD0Ev>:
   e6cec:	b510      	push	{r4, lr}
   e6cee:	4604      	mov	r4, r0
   e6cf0:	f7ff fff2 	bl	e6cd8 <_ZN15TCPServerClientD1Ev>
   e6cf4:	4620      	mov	r0, r4
   e6cf6:	211c      	movs	r1, #28
   e6cf8:	f001 fba0 	bl	e843c <_ZdlPvj>
   e6cfc:	4620      	mov	r0, r4
   e6cfe:	bd10      	pop	{r4, pc}

000e6d00 <_ZN9TCPServerC1Etm>:
        }
        return addr;
    }
};

TCPServer::TCPServer(uint16_t port, network_interface_t nif)
   e6d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   e6d02:	2500      	movs	r5, #0
        : _port(port),
          _nif(nif),
          _sock(-1),
          _client(-1) {
   e6d04:	4b11      	ldr	r3, [pc, #68]	; (e6d4c <_ZN9TCPServerC1Etm+0x4c>)
   e6d06:	6003      	str	r3, [r0, #0]
   e6d08:	f04f 36ff 	mov.w	r6, #4294967295
   e6d0c:	60c2      	str	r2, [r0, #12]
   e6d0e:	6045      	str	r5, [r0, #4]
   e6d10:	8101      	strh	r1, [r0, #8]
   e6d12:	6106      	str	r6, [r0, #16]
   e6d14:	4631      	mov	r1, r6
        }
        return addr;
    }
};

TCPServer::TCPServer(uint16_t port, network_interface_t nif)
   e6d16:	4604      	mov	r4, r0
        : _port(port),
          _nif(nif),
          _sock(-1),
          _client(-1) {
   e6d18:	3014      	adds	r0, #20
   e6d1a:	f000 fef7 	bl	e7b0c <_ZN9TCPClientC1Ei>
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   e6d1e:	4629      	mov	r1, r5
   e6d20:	4628      	mov	r0, r5
   e6d22:	f7fe ff99 	bl	e5c58 <os_thread_scheduling>
    SINGLE_THREADED_BLOCK() {
        if (!s_invalid_client) {
   e6d26:	4b0a      	ldr	r3, [pc, #40]	; (e6d50 <_ZN9TCPServerC1Etm+0x50>)
   e6d28:	681a      	ldr	r2, [r3, #0]
   e6d2a:	461d      	mov	r5, r3
   e6d2c:	b942      	cbnz	r2, e6d40 <_ZN9TCPServerC1Etm+0x40>
            s_invalid_client = new TCPClient(-1);
   e6d2e:	201c      	movs	r0, #28
   e6d30:	f7ed f9b3 	bl	d409a <_Znwj>
   e6d34:	4607      	mov	r7, r0
   e6d36:	b110      	cbz	r0, e6d3e <_ZN9TCPServerC1Etm+0x3e>
   e6d38:	4631      	mov	r1, r6
   e6d3a:	f000 fee7 	bl	e7b0c <_ZN9TCPClientC1Ei>
   e6d3e:	602f      	str	r7, [r5, #0]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   e6d40:	2100      	movs	r1, #0
   e6d42:	2001      	movs	r0, #1
   e6d44:	f7fe ff88 	bl	e5c58 <os_thread_scheduling>
        }
    }
}
   e6d48:	4620      	mov	r0, r4
   e6d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   e6d4c:	000ef20c 	.word	0x000ef20c
   e6d50:	2003e4c4 	.word	0x2003e4c4

000e6d54 <_ZN9TCPServer4stopEv>:
    done.dismiss();

    return true;
}

void TCPServer::stop() {
   e6d54:	b510      	push	{r4, lr}
   e6d56:	4604      	mov	r4, r0
    _client.stop();
   e6d58:	3014      	adds	r0, #20
   e6d5a:	f000 fe55 	bl	e7a08 <_ZN9TCPClient4stopEv>
    sock_close(_sock);
   e6d5e:	6920      	ldr	r0, [r4, #16]
   e6d60:	f7ff f842 	bl	e5de8 <sock_close>
    _sock = -1;
   e6d64:	f04f 33ff 	mov.w	r3, #4294967295
   e6d68:	6123      	str	r3, [r4, #16]
   e6d6a:	bd10      	pop	{r4, pc}

000e6d6c <_ZN9TCPServer5beginEv>:
            s_invalid_client = new TCPClient(-1);
        }
    }
}

bool TCPServer::begin() {
   e6d6c:	b570      	push	{r4, r5, r6, lr}
   e6d6e:	4604      	mov	r4, r0
   e6d70:	b08c      	sub	sp, #48	; 0x30
    stop();
   e6d72:	f7ff ffef 	bl	e6d54 <_ZN9TCPServer4stopEv>

    if (socket_handle_valid(_sock)) {
   e6d76:	6923      	ldr	r3, [r4, #16]
   e6d78:	2b00      	cmp	r3, #0
   e6d7a:	da5a      	bge.n	e6e32 <_ZN9TCPServer5beginEv+0xc6>
    NAMED_SCOPE_GUARD(done, {
        stop();
    });

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   e6d7c:	251c      	movs	r5, #28
   e6d7e:	462a      	mov	r2, r5
   e6d80:	2100      	movs	r1, #0
   e6d82:	a805      	add	r0, sp, #20
   e6d84:	f002 febd 	bl	e9b02 <memset>
    saddr.sin6_len = sizeof(saddr);
   e6d88:	f88d 5014 	strb.w	r5, [sp, #20]
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(_port);
   e6d8c:	8920      	ldrh	r0, [r4, #8]
    });

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
   e6d8e:	250a      	movs	r5, #10
   e6d90:	f88d 5015 	strb.w	r5, [sp, #21]
    saddr.sin6_port = htons(_port);
   e6d94:	f7fe ff88 	bl	e5ca8 <inet_htons>
    saddr.sin_port = htons(_port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_STREAM, IPPROTO_TCP);
   e6d98:	2206      	movs	r2, #6

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(_port);
   e6d9a:	f8ad 0016 	strh.w	r0, [sp, #22]
    saddr.sin_port = htons(_port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_STREAM, IPPROTO_TCP);
   e6d9e:	2101      	movs	r1, #1
   e6da0:	4628      	mov	r0, r5
   e6da2:	f7ff f849 	bl	e5e38 <sock_socket>
    CHECK_TRUE(_sock >= 0, false);
   e6da6:	2800      	cmp	r0, #0
    saddr.sin_port = htons(_port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_STREAM, IPPROTO_TCP);
   e6da8:	6120      	str	r0, [r4, #16]
    CHECK_TRUE(_sock >= 0, false);
   e6daa:	db30      	blt.n	e6e0e <_ZN9TCPServer5beginEv+0xa2>

    const int one = 1;
   e6dac:	ab0c      	add	r3, sp, #48	; 0x30
   e6dae:	2201      	movs	r2, #1
    CHECK_TRUE(sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one)) == 0, false);
   e6db0:	2604      	movs	r6, #4

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_STREAM, IPPROTO_TCP);
    CHECK_TRUE(_sock >= 0, false);

    const int one = 1;
   e6db2:	f843 2d28 	str.w	r2, [r3, #-40]!
    CHECK_TRUE(sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one)) == 0, false);
   e6db6:	f640 71ff 	movw	r1, #4095	; 0xfff
   e6dba:	9600      	str	r6, [sp, #0]
   e6dbc:	4632      	mov	r2, r6
   e6dbe:	f7ff f80b 	bl	e5dd8 <sock_setsockopt>
   e6dc2:	4605      	mov	r5, r0
   e6dc4:	bb18      	cbnz	r0, e6e0e <_ZN9TCPServer5beginEv+0xa2>

    int flags = sock_fcntl(_sock, F_GETFL, 0);
   e6dc6:	4602      	mov	r2, r0
   e6dc8:	2103      	movs	r1, #3
   e6dca:	6920      	ldr	r0, [r4, #16]
   e6dcc:	f7ff f83c 	bl	e5e48 <sock_fcntl>
    CHECK_TRUE(flags >= 0, false);
   e6dd0:	1e02      	subs	r2, r0, #0
   e6dd2:	db1c      	blt.n	e6e0e <_ZN9TCPServer5beginEv+0xa2>
    flags |= O_NONBLOCK;
    CHECK_TRUE(sock_fcntl(_sock, F_SETFL, flags) >= 0, false);
   e6dd4:	f042 0201 	orr.w	r2, r2, #1
   e6dd8:	4631      	mov	r1, r6
   e6dda:	6920      	ldr	r0, [r4, #16]
   e6ddc:	f7ff f834 	bl	e5e48 <sock_fcntl>
   e6de0:	2800      	cmp	r0, #0
   e6de2:	db14      	blt.n	e6e0e <_ZN9TCPServer5beginEv+0xa2>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (_nif != 0) {
   e6de4:	68e0      	ldr	r0, [r4, #12]
   e6de6:	b1b8      	cbz	r0, e6e18 <_ZN9TCPServer5beginEv+0xac>
        struct ifreq ifr = {};
        if (if_index_to_name(_nif, ifr.ifr_name)) {
   e6de8:	a903      	add	r1, sp, #12
   e6dea:	b2c0      	uxtb	r0, r0
    CHECK_TRUE(sock_fcntl(_sock, F_SETFL, flags) >= 0, false);

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (_nif != 0) {
        struct ifreq ifr = {};
   e6dec:	9503      	str	r5, [sp, #12]
   e6dee:	f8ad 5010 	strh.w	r5, [sp, #16]
        if (if_index_to_name(_nif, ifr.ifr_name)) {
   e6df2:	f7fe fee9 	bl	e5bc8 <if_index_to_name>
   e6df6:	b950      	cbnz	r0, e6e0e <_ZN9TCPServer5beginEv+0xa2>
            return false;
        }
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   e6df8:	2306      	movs	r3, #6
   e6dfa:	9300      	str	r3, [sp, #0]
   e6dfc:	f241 020b 	movw	r2, #4107	; 0x100b
   e6e00:	ab03      	add	r3, sp, #12
   e6e02:	f640 71ff 	movw	r1, #4095	; 0xfff
   e6e06:	6920      	ldr	r0, [r4, #16]
   e6e08:	f7fe ffe6 	bl	e5dd8 <sock_setsockopt>
   e6e0c:	b120      	cbz	r0, e6e18 <_ZN9TCPServer5beginEv+0xac>

    if (socket_handle_valid(_sock)) {
        return true;
    }

    NAMED_SCOPE_GUARD(done, {
   e6e0e:	4620      	mov	r0, r4
#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (_nif != 0) {
        struct ifreq ifr = {};
        if (if_index_to_name(_nif, ifr.ifr_name)) {
            return false;
   e6e10:	2500      	movs	r5, #0

    if (socket_handle_valid(_sock)) {
        return true;
    }

    NAMED_SCOPE_GUARD(done, {
   e6e12:	f7ff ff9f 	bl	e6d54 <_ZN9TCPServer4stopEv>
   e6e16:	e00d      	b.n	e6e34 <_ZN9TCPServer5beginEv+0xc8>
            return false;
        }
    }
#endif // HAL_PLATFORM_IFAPI

    int r = sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr));
   e6e18:	221c      	movs	r2, #28
   e6e1a:	a905      	add	r1, sp, #20
   e6e1c:	6920      	ldr	r0, [r4, #16]
   e6e1e:	f7fe ffcb 	bl	e5db8 <sock_bind>
    CHECK_TRUE(!r, false);
   e6e22:	2800      	cmp	r0, #0
   e6e24:	d1f3      	bne.n	e6e0e <_ZN9TCPServer5beginEv+0xa2>

    r = sock_listen(_sock, 5);
   e6e26:	2105      	movs	r1, #5
   e6e28:	6920      	ldr	r0, [r4, #16]
   e6e2a:	f7fe ffed 	bl	e5e08 <sock_listen>
    CHECK_TRUE(!r, false);
   e6e2e:	2800      	cmp	r0, #0
   e6e30:	d1ed      	bne.n	e6e0e <_ZN9TCPServer5beginEv+0xa2>

bool TCPServer::begin() {
    stop();

    if (socket_handle_valid(_sock)) {
        return true;
   e6e32:	2501      	movs	r5, #1
    CHECK_TRUE(!r, false);

    done.dismiss();

    return true;
}
   e6e34:	4628      	mov	r0, r5
   e6e36:	b00c      	add	sp, #48	; 0x30
   e6e38:	bd70      	pop	{r4, r5, r6, pc}

000e6e3a <_ZN9TCPClientaSERKS_>:

#define TCPCLIENT_BUF_MAX_SIZE  128
/* 30 seconds */
#define SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT (30000)

class TCPClient : public Client {
   e6e3a:	b538      	push	{r3, r4, r5, lr}
   e6e3c:	684b      	ldr	r3, [r1, #4]
const unsigned char BIN = 2;

class String;
class __FlashStringHelper;

class Print
   e6e3e:	6043      	str	r3, [r0, #4]
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
   e6e40:	688b      	ldr	r3, [r1, #8]
   e6e42:	6083      	str	r3, [r0, #8]
   e6e44:	68cb      	ldr	r3, [r1, #12]
   e6e46:	60c3      	str	r3, [r0, #12]
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   e6e48:	690b      	ldr	r3, [r1, #16]
   e6e4a:	6103      	str	r3, [r0, #16]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   e6e4c:	694b      	ldr	r3, [r1, #20]
   e6e4e:	6143      	str	r3, [r0, #20]
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   e6e50:	698d      	ldr	r5, [r1, #24]
	if (__tmp != _M_pi)
   e6e52:	6983      	ldr	r3, [r0, #24]
   e6e54:	429d      	cmp	r5, r3
   e6e56:	4604      	mov	r4, r0
   e6e58:	d00c      	beq.n	e6e74 <_ZN9TCPClientaSERKS_+0x3a>
	  {
	    if (__tmp != 0)
   e6e5a:	b115      	cbz	r5, e6e62 <_ZN9TCPClientaSERKS_+0x28>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   e6e5c:	686b      	ldr	r3, [r5, #4]
   e6e5e:	3301      	adds	r3, #1
   e6e60:	606b      	str	r3, [r5, #4]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
   e6e62:	69a0      	ldr	r0, [r4, #24]
   e6e64:	b128      	cbz	r0, e6e72 <_ZN9TCPClientaSERKS_+0x38>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   e6e66:	6843      	ldr	r3, [r0, #4]
   e6e68:	3b01      	subs	r3, #1
   e6e6a:	6043      	str	r3, [r0, #4]
   e6e6c:	b90b      	cbnz	r3, e6e72 <_ZN9TCPClientaSERKS_+0x38>
   e6e6e:	f7ff fedb 	bl	e6c28 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.12>
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
	      _M_pi->_M_release();
	    _M_pi = __tmp;
   e6e72:	61a5      	str	r5, [r4, #24]
   e6e74:	4620      	mov	r0, r4
   e6e76:	bd38      	pop	{r3, r4, r5, pc}

000e6e78 <_ZN9TCPClientC1ERKS_>:
   e6e78:	4b0c      	ldr	r3, [pc, #48]	; (e6eac <_ZN9TCPClientC1ERKS_+0x34>)
   e6e7a:	6003      	str	r3, [r0, #0]
   e6e7c:	684b      	ldr	r3, [r1, #4]
   e6e7e:	6043      	str	r3, [r0, #4]
   e6e80:	4b0b      	ldr	r3, [pc, #44]	; (e6eb0 <_ZN9TCPClientC1ERKS_+0x38>)
   e6e82:	6003      	str	r3, [r0, #0]
   e6e84:	688b      	ldr	r3, [r1, #8]
   e6e86:	6083      	str	r3, [r0, #8]
   e6e88:	68cb      	ldr	r3, [r1, #12]
   e6e8a:	60c3      	str	r3, [r0, #12]
   e6e8c:	4b09      	ldr	r3, [pc, #36]	; (e6eb4 <_ZN9TCPClientC1ERKS_+0x3c>)
   e6e8e:	6003      	str	r3, [r0, #0]
   e6e90:	690b      	ldr	r3, [r1, #16]
   e6e92:	6103      	str	r3, [r0, #16]
   e6e94:	4b08      	ldr	r3, [pc, #32]	; (e6eb8 <_ZN9TCPClientC1ERKS_+0x40>)
   e6e96:	6003      	str	r3, [r0, #0]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   e6e98:	694b      	ldr	r3, [r1, #20]
   e6e9a:	6143      	str	r3, [r0, #20]
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   e6e9c:	698b      	ldr	r3, [r1, #24]
   e6e9e:	6183      	str	r3, [r0, #24]
      {
	if (_M_pi != 0)
   e6ea0:	b113      	cbz	r3, e6ea8 <_ZN9TCPClientC1ERKS_+0x30>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   e6ea2:	685a      	ldr	r2, [r3, #4]
   e6ea4:	3201      	adds	r2, #1
   e6ea6:	605a      	str	r2, [r3, #4]
   e6ea8:	4770      	bx	lr
   e6eaa:	bf00      	nop
   e6eac:	000ef044 	.word	0x000ef044
   e6eb0:	000ef158 	.word	0x000ef158
   e6eb4:	000ef180 	.word	0x000ef180
   e6eb8:	000ef31c 	.word	0x000ef31c

000e6ebc <_ZN9TCPServer9availableEv>:
    _client.stop();
    sock_close(_sock);
    _sock = -1;
}

TCPClient TCPServer::available() {
   e6ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (_sock < 0) {
   e6ec0:	690b      	ldr	r3, [r1, #16]
   e6ec2:	2b00      	cmp	r3, #0
    _client.stop();
    sock_close(_sock);
    _sock = -1;
}

TCPClient TCPServer::available() {
   e6ec4:	b096      	sub	sp, #88	; 0x58
   e6ec6:	4607      	mov	r7, r0
   e6ec8:	460c      	mov	r4, r1
    if (_sock < 0) {
   e6eca:	da03      	bge.n	e6ed4 <_ZN9TCPServer9availableEv+0x18>
        begin();
   e6ecc:	680b      	ldr	r3, [r1, #0]
   e6ece:	4608      	mov	r0, r1
   e6ed0:	691b      	ldr	r3, [r3, #16]
   e6ed2:	4798      	blx	r3
    }

    if (_sock < 0) {
   e6ed4:	6925      	ldr	r5, [r4, #16]
   e6ed6:	2d00      	cmp	r5, #0
   e6ed8:	f104 0614 	add.w	r6, r4, #20
   e6edc:	da05      	bge.n	e6eea <_ZN9TCPServer9availableEv+0x2e>
        _client = *s_invalid_client;
   e6ede:	4b24      	ldr	r3, [pc, #144]	; (e6f70 <_ZN9TCPServer9availableEv+0xb4>)
   e6ee0:	4630      	mov	r0, r6
   e6ee2:	6819      	ldr	r1, [r3, #0]
   e6ee4:	f7ff ffa9 	bl	e6e3a <_ZN9TCPClientaSERKS_>
   e6ee8:	e036      	b.n	e6f58 <_ZN9TCPServer9availableEv+0x9c>
        return _client;
    }

    struct sockaddr_storage saddr = {};
   e6eea:	f04f 081c 	mov.w	r8, #28
   e6eee:	4642      	mov	r2, r8
   e6ef0:	2100      	movs	r1, #0
   e6ef2:	a808      	add	r0, sp, #32
   e6ef4:	f002 fe05 	bl	e9b02 <memset>
    socklen_t slen = sizeof(saddr);
   e6ef8:	aa16      	add	r2, sp, #88	; 0x58
    int s = sock_accept(_sock, (struct sockaddr*)&saddr, &slen);
   e6efa:	a908      	add	r1, sp, #32
        _client = *s_invalid_client;
        return _client;
    }

    struct sockaddr_storage saddr = {};
    socklen_t slen = sizeof(saddr);
   e6efc:	f842 8d54 	str.w	r8, [r2, #-84]!
    int s = sock_accept(_sock, (struct sockaddr*)&saddr, &slen);
   e6f00:	4628      	mov	r0, r5
   e6f02:	f7fe ff51 	bl	e5da8 <sock_accept>
    if (s < 0) {
   e6f06:	1e01      	subs	r1, r0, #0
   e6f08:	da0f      	bge.n	e6f2a <_ZN9TCPServer9availableEv+0x6e>
        _client = *s_invalid_client;
   e6f0a:	4b19      	ldr	r3, [pc, #100]	; (e6f70 <_ZN9TCPServer9availableEv+0xb4>)
   e6f0c:	4630      	mov	r0, r6
   e6f0e:	6819      	ldr	r1, [r3, #0]
   e6f10:	f7ff ff93 	bl	e6e3a <_ZN9TCPClientaSERKS_>
        if (errno != EAGAIN && errno != EWOULDBLOCK) {
   e6f14:	f7ff f916 	bl	e6144 <__errno>
   e6f18:	6803      	ldr	r3, [r0, #0]
   e6f1a:	2b0b      	cmp	r3, #11
   e6f1c:	d01c      	beq.n	e6f58 <_ZN9TCPServer9availableEv+0x9c>
   e6f1e:	f7ff f911 	bl	e6144 <__errno>
   e6f22:	6803      	ldr	r3, [r0, #0]
   e6f24:	2b0b      	cmp	r3, #11
   e6f26:	d11f      	bne.n	e6f68 <_ZN9TCPServer9availableEv+0xac>
   e6f28:	e016      	b.n	e6f58 <_ZN9TCPServer9availableEv+0x9c>

static TCPClient* s_invalid_client = nullptr;

class TCPServerClient : public TCPClient {
public:
    TCPServerClient(sock_handle_t sock) : TCPClient(sock) {
   e6f2a:	a80f      	add	r0, sp, #60	; 0x3c
   e6f2c:	f000 fdee 	bl	e7b0c <_ZN9TCPClientC1Ei>
   e6f30:	ad03      	add	r5, sp, #12
   e6f32:	4b10      	ldr	r3, [pc, #64]	; (e6f74 <_ZN9TCPServer9availableEv+0xb8>)
   e6f34:	930f      	str	r3, [sp, #60]	; 0x3c
        if (errno != EAGAIN && errno != EWOULDBLOCK) {
            stop();
        }
    } else {
        TCPServerClient client = TCPServerClient(s);
        client.d_->remoteIP = client.remoteIP(); // fetch the peer IP ready for the copy operator
   e6f36:	a90f      	add	r1, sp, #60	; 0x3c
   e6f38:	a802      	add	r0, sp, #8
   e6f3a:	9c14      	ldr	r4, [sp, #80]	; 0x50
   e6f3c:	f7ff fe84 	bl	e6c48 <_ZN15TCPServerClient8remoteIPEv>
   e6f40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   e6f42:	348c      	adds	r4, #140	; 0x8c
   e6f44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   e6f46:	682b      	ldr	r3, [r5, #0]
   e6f48:	7023      	strb	r3, [r4, #0]
        _client = client;
   e6f4a:	a90f      	add	r1, sp, #60	; 0x3c
   e6f4c:	4630      	mov	r0, r6
   e6f4e:	f7ff ff74 	bl	e6e3a <_ZN9TCPClientaSERKS_>
        _client = *s_invalid_client;
        if (errno != EAGAIN && errno != EWOULDBLOCK) {
            stop();
        }
    } else {
        TCPServerClient client = TCPServerClient(s);
   e6f52:	a80f      	add	r0, sp, #60	; 0x3c
   e6f54:	f7ff fec0 	bl	e6cd8 <_ZN15TCPServerClientD1Ev>
        client.d_->remoteIP = client.remoteIP(); // fetch the peer IP ready for the copy operator
        _client = client;
    }

    return _client;
   e6f58:	4631      	mov	r1, r6
   e6f5a:	4638      	mov	r0, r7
   e6f5c:	f7ff ff8c 	bl	e6e78 <_ZN9TCPClientC1ERKS_>
}
   e6f60:	4638      	mov	r0, r7
   e6f62:	b016      	add	sp, #88	; 0x58
   e6f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    socklen_t slen = sizeof(saddr);
    int s = sock_accept(_sock, (struct sockaddr*)&saddr, &slen);
    if (s < 0) {
        _client = *s_invalid_client;
        if (errno != EAGAIN && errno != EWOULDBLOCK) {
            stop();
   e6f68:	4620      	mov	r0, r4
   e6f6a:	f7ff fef3 	bl	e6d54 <_ZN9TCPServer4stopEv>
   e6f6e:	e7f3      	b.n	e6f58 <_ZN9TCPServer9availableEv+0x9c>
   e6f70:	2003e4c4 	.word	0x2003e4c4
   e6f74:	000ef1c0 	.word	0x000ef1c0

000e6f78 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   e6f78:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   e6f7a:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   e6f7c:	4604      	mov	r4, r0
    {
      if (_M_manager)
   e6f7e:	b113      	cbz	r3, e6f86 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   e6f80:	2203      	movs	r2, #3
   e6f82:	4601      	mov	r1, r0
   e6f84:	4798      	blx	r3
    }
   e6f86:	4620      	mov	r0, r4
   e6f88:	bd10      	pop	{r4, pc}

000e6f8a <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   e6f8a:	b510      	push	{r4, lr}
   e6f8c:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   e6f8e:	f7ff fff3 	bl	e6f78 <_ZNSt14_Function_baseD1Ev>
   e6f92:	4620      	mov	r0, r4
   e6f94:	bd10      	pop	{r4, pc}
	...

000e6f98 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   e6f98:	4803      	ldr	r0, [pc, #12]	; (e6fa8 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   e6f9a:	4a04      	ldr	r2, [pc, #16]	; (e6fac <_GLOBAL__sub_I_RGB+0x14>)
   e6f9c:	4904      	ldr	r1, [pc, #16]	; (e6fb0 <_GLOBAL__sub_I_RGB+0x18>)
   e6f9e:	2300      	movs	r3, #0
   e6fa0:	6083      	str	r3, [r0, #8]
   e6fa2:	f001 ba3d 	b.w	e8420 <__aeabi_atexit>
   e6fa6:	bf00      	nop
   e6fa8:	2003e4c8 	.word	0x2003e4c8
   e6fac:	2003aca8 	.word	0x2003aca8
   e6fb0:	000e6f8b 	.word	0x000e6f8b

000e6fb4 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   e6fb4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   e6fb6:	4b0c      	ldr	r3, [pc, #48]	; (e6fe8 <serialEventRun+0x34>)
   e6fb8:	b133      	cbz	r3, e6fc8 <serialEventRun+0x14>
   e6fba:	f000 f96d 	bl	e7298 <_Z16_fetch_usbserialv>
   e6fbe:	6803      	ldr	r3, [r0, #0]
   e6fc0:	691b      	ldr	r3, [r3, #16]
   e6fc2:	4798      	blx	r3
   e6fc4:	2800      	cmp	r0, #0
   e6fc6:	dc09      	bgt.n	e6fdc <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   e6fc8:	4b08      	ldr	r3, [pc, #32]	; (e6fec <serialEventRun+0x38>)
   e6fca:	b163      	cbz	r3, e6fe6 <serialEventRun+0x32>
   e6fcc:	f000 f9e6 	bl	e739c <_Z22__fetch_global_Serial1v>
   e6fd0:	6803      	ldr	r3, [r0, #0]
   e6fd2:	691b      	ldr	r3, [r3, #16]
   e6fd4:	4798      	blx	r3
   e6fd6:	2800      	cmp	r0, #0
   e6fd8:	dc03      	bgt.n	e6fe2 <serialEventRun+0x2e>
   e6fda:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   e6fdc:	f3af 8000 	nop.w
   e6fe0:	e7f2      	b.n	e6fc8 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   e6fe2:	f3af 8000 	nop.w
   e6fe6:	bd08      	pop	{r3, pc}
	...

000e6ff0 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   e6ff0:	b508      	push	{r3, lr}
	serialEventRun();
   e6ff2:	f7ff ffdf 	bl	e6fb4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   e6ff6:	f7fe fdff 	bl	e5bf8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   e6ffa:	4b01      	ldr	r3, [pc, #4]	; (e7000 <_post_loop+0x10>)
   e6ffc:	6018      	str	r0, [r3, #0]
   e6ffe:	bd08      	pop	{r3, pc}
   e7000:	2003e708 	.word	0x2003e708

000e7004 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   e7004:	4802      	ldr	r0, [pc, #8]	; (e7010 <_Z33system_initialize_user_backup_ramv+0xc>)
   e7006:	4a03      	ldr	r2, [pc, #12]	; (e7014 <_Z33system_initialize_user_backup_ramv+0x10>)
   e7008:	4903      	ldr	r1, [pc, #12]	; (e7018 <_Z33system_initialize_user_backup_ramv+0x14>)
   e700a:	1a12      	subs	r2, r2, r0
   e700c:	f002 bd53 	b.w	e9ab6 <memcpy>
   e7010:	2003f400 	.word	0x2003f400
   e7014:	2003f404 	.word	0x2003f404
   e7018:	000efaa8 	.word	0x000efaa8

000e701c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   e701c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   e701e:	2300      	movs	r3, #0
   e7020:	9300      	str	r3, [sp, #0]
   e7022:	461a      	mov	r2, r3
   e7024:	f06f 0177 	mvn.w	r1, #119	; 0x77
   e7028:	f7fe ffb0 	bl	e5f8c <system_ctrl_set_result>
}
   e702c:	b003      	add	sp, #12
   e702e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000e7034 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   e7034:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   e7036:	8843      	ldrh	r3, [r0, #2]
   e7038:	2b0a      	cmp	r3, #10
   e703a:	d008      	beq.n	e704e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   e703c:	2b50      	cmp	r3, #80	; 0x50
   e703e:	d109      	bne.n	e7054 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   e7040:	4b09      	ldr	r3, [pc, #36]	; (e7068 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   e7042:	681b      	ldr	r3, [r3, #0]
   e7044:	b13b      	cbz	r3, e7056 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   e7046:	b003      	add	sp, #12
   e7048:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   e704c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   e704e:	f7ff ffe5 	bl	e701c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   e7052:	e006      	b.n	e7062 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   e7054:	2300      	movs	r3, #0
   e7056:	9300      	str	r3, [sp, #0]
   e7058:	461a      	mov	r2, r3
   e705a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   e705e:	f7fe ff95 	bl	e5f8c <system_ctrl_set_result>
        break;
    }
}
   e7062:	b003      	add	sp, #12
   e7064:	f85d fb04 	ldr.w	pc, [sp], #4
   e7068:	2003e4d8 	.word	0x2003e4d8

000e706c <module_user_init_hook>:

void module_user_init_hook()
{
   e706c:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   e706e:	4c10      	ldr	r4, [pc, #64]	; (e70b0 <module_user_init_hook+0x44>)
   e7070:	4d10      	ldr	r5, [pc, #64]	; (e70b4 <module_user_init_hook+0x48>)
   e7072:	6823      	ldr	r3, [r4, #0]
   e7074:	42ab      	cmp	r3, r5
   e7076:	4b10      	ldr	r3, [pc, #64]	; (e70b8 <module_user_init_hook+0x4c>)
   e7078:	bf0c      	ite	eq
   e707a:	2201      	moveq	r2, #1
   e707c:	2200      	movne	r2, #0
   e707e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   e7080:	d002      	beq.n	e7088 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   e7082:	f7ff ffbf 	bl	e7004 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   e7086:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   e7088:	f7fe fda6 	bl	e5bd8 <HAL_RNG_GetRandomNumber>
   e708c:	4604      	mov	r4, r0
    srand(seed);
   e708e:	f002 fd4f 	bl	e9b30 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   e7092:	4b0a      	ldr	r3, [pc, #40]	; (e70bc <module_user_init_hook+0x50>)
   e7094:	b113      	cbz	r3, e709c <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   e7096:	4620      	mov	r0, r4
   e7098:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   e709c:	2100      	movs	r1, #0
   e709e:	4807      	ldr	r0, [pc, #28]	; (e70bc <module_user_init_hook+0x50>)
   e70a0:	f7ff f800 	bl	e60a4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   e70a4:	2100      	movs	r1, #0
   e70a6:	4806      	ldr	r0, [pc, #24]	; (e70c0 <module_user_init_hook+0x54>)
}
   e70a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   e70ac:	f7fe bf64 	b.w	e5f78 <system_ctrl_set_app_request_handler>
   e70b0:	2003f400 	.word	0x2003f400
   e70b4:	9a271c1e 	.word	0x9a271c1e
   e70b8:	2003e4dc 	.word	0x2003e4dc
   e70bc:	00000000 	.word	0x00000000
   e70c0:	000e7035 	.word	0x000e7035

000e70c4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   e70c4:	4770      	bx	lr

000e70c6 <_ZN9IPAddressD0Ev>:
   e70c6:	b510      	push	{r4, lr}
   e70c8:	2118      	movs	r1, #24
   e70ca:	4604      	mov	r4, r0
   e70cc:	f001 f9b6 	bl	e843c <_ZdlPvj>
   e70d0:	4620      	mov	r0, r4
   e70d2:	bd10      	pop	{r4, pc}

000e70d4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   e70d4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   e70d6:	7d03      	ldrb	r3, [r0, #20]
   e70d8:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   e70da:	b08d      	sub	sp, #52	; 0x34
   e70dc:	460e      	mov	r6, r1
   e70de:	f100 0704 	add.w	r7, r0, #4
   e70e2:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   e70e6:	d002      	beq.n	e70ee <_ZNK9IPAddress7printToER5Print+0x1a>
   e70e8:	f100 0508 	add.w	r5, r0, #8
   e70ec:	e018      	b.n	e7120 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   e70ee:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   e70f0:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   e70f2:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   e70f6:	232f      	movs	r3, #47	; 0x2f
   e70f8:	462a      	mov	r2, r5
   e70fa:	200a      	movs	r0, #10
   e70fc:	f7fe fdc4 	bl	e5c88 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   e7100:	4628      	mov	r0, r5
   e7102:	f002 fd4f 	bl	e9ba4 <strlen>
   e7106:	6833      	ldr	r3, [r6, #0]
   e7108:	4602      	mov	r2, r0
   e710a:	68db      	ldr	r3, [r3, #12]
   e710c:	4629      	mov	r1, r5
   e710e:	4630      	mov	r0, r6
   e7110:	4798      	blx	r3
   e7112:	e00f      	b.n	e7134 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   e7114:	b124      	cbz	r4, e7120 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   e7116:	212e      	movs	r1, #46	; 0x2e
   e7118:	4630      	mov	r0, r6
   e711a:	f7ff fbb3 	bl	e6884 <_ZN5Print5printEc>
   e711e:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   e7120:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   e7124:	220a      	movs	r2, #10
   e7126:	4630      	mov	r0, r6
   e7128:	f7ff fbc5 	bl	e68b6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   e712c:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   e712e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   e7130:	d1f0      	bne.n	e7114 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   e7132:	4620      	mov	r0, r4
    }
    return n;
}
   e7134:	b00d      	add	sp, #52	; 0x34
   e7136:	bdf0      	pop	{r4, r5, r6, r7, pc}

000e7138 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   e7138:	b510      	push	{r4, lr}
   e713a:	4b05      	ldr	r3, [pc, #20]	; (e7150 <_ZN9IPAddressC1Ev+0x18>)
   e713c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   e713e:	2211      	movs	r2, #17
   e7140:	f840 3b04 	str.w	r3, [r0], #4
   e7144:	2100      	movs	r1, #0
   e7146:	f002 fcdc 	bl	e9b02 <memset>
{
    clear();
}
   e714a:	4620      	mov	r0, r4
   e714c:	bd10      	pop	{r4, pc}
   e714e:	bf00      	nop
   e7150:	000ef230 	.word	0x000ef230

000e7154 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   e7154:	4603      	mov	r3, r0
   e7156:	4a07      	ldr	r2, [pc, #28]	; (e7174 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   e7158:	b510      	push	{r4, lr}
   e715a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   e715e:	f101 0210 	add.w	r2, r1, #16
   e7162:	f851 4b04 	ldr.w	r4, [r1], #4
   e7166:	f843 4b04 	str.w	r4, [r3], #4
   e716a:	4291      	cmp	r1, r2
   e716c:	d1f9      	bne.n	e7162 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   e716e:	780a      	ldrb	r2, [r1, #0]
   e7170:	701a      	strb	r2, [r3, #0]
}
   e7172:	bd10      	pop	{r4, pc}
   e7174:	000ef230 	.word	0x000ef230

000e7178 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   e7178:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   e717a:	2b04      	cmp	r3, #4
   e717c:	d101      	bne.n	e7182 <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   e717e:	6840      	ldr	r0, [r0, #4]
   e7180:	e008      	b.n	e7194 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   e7182:	2b06      	cmp	r3, #6
   e7184:	d10a      	bne.n	e719c <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   e7186:	6843      	ldr	r3, [r0, #4]
   e7188:	b953      	cbnz	r3, e71a0 <_ZNK9IPAddresscvbEv+0x28>
   e718a:	6883      	ldr	r3, [r0, #8]
   e718c:	b943      	cbnz	r3, e71a0 <_ZNK9IPAddresscvbEv+0x28>
   e718e:	68c3      	ldr	r3, [r0, #12]
   e7190:	b933      	cbnz	r3, e71a0 <_ZNK9IPAddresscvbEv+0x28>
   e7192:	6900      	ldr	r0, [r0, #16]
   e7194:	3000      	adds	r0, #0
   e7196:	bf18      	it	ne
   e7198:	2001      	movne	r0, #1
   e719a:	4770      	bx	lr
    } else {
        return false;
   e719c:	2000      	movs	r0, #0
   e719e:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   e71a0:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   e71a2:	4770      	bx	lr

000e71a4 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   e71a4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   e71a6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   e71aa:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   e71ae:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   e71b2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   e71b6:	2304      	movs	r3, #4
   e71b8:	6041      	str	r1, [r0, #4]
   e71ba:	7503      	strb	r3, [r0, #20]
   e71bc:	bd10      	pop	{r4, pc}

000e71be <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   e71be:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   e71c0:	780d      	ldrb	r5, [r1, #0]
   e71c2:	788b      	ldrb	r3, [r1, #2]
   e71c4:	784a      	ldrb	r2, [r1, #1]
   e71c6:	78c9      	ldrb	r1, [r1, #3]
   e71c8:	9100      	str	r1, [sp, #0]
   e71ca:	4629      	mov	r1, r5
   e71cc:	f7ff ffea 	bl	e71a4 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   e71d0:	b003      	add	sp, #12
   e71d2:	bd30      	pop	{r4, r5, pc}

000e71d4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   e71d4:	7441      	strb	r1, [r0, #17]
   e71d6:	4770      	bx	lr

000e71d8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   e71d8:	4770      	bx	lr

000e71da <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   e71da:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   e71dc:	2100      	movs	r1, #0
   e71de:	7c00      	ldrb	r0, [r0, #16]
   e71e0:	f7fe fe72 	bl	e5ec8 <HAL_USB_USART_Receive_Data>
}
   e71e4:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   e71e8:	bf28      	it	cs
   e71ea:	f04f 30ff 	movcs.w	r0, #4294967295
   e71ee:	bd08      	pop	{r3, pc}

000e71f0 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   e71f0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   e71f2:	2101      	movs	r1, #1
   e71f4:	7c00      	ldrb	r0, [r0, #16]
   e71f6:	f7fe fe67 	bl	e5ec8 <HAL_USB_USART_Receive_Data>
}
   e71fa:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   e71fe:	bf28      	it	cs
   e7200:	f04f 30ff 	movcs.w	r0, #4294967295
   e7204:	bd08      	pop	{r3, pc}

000e7206 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   e7206:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   e7208:	7c00      	ldrb	r0, [r0, #16]
   e720a:	f7fe fe55 	bl	e5eb8 <HAL_USB_USART_Available_Data_For_Write>
}
   e720e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   e7212:	bd08      	pop	{r3, pc}

000e7214 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   e7214:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   e7216:	7c00      	ldrb	r0, [r0, #16]
   e7218:	f7fe fe46 	bl	e5ea8 <HAL_USB_USART_Available_Data>
}
   e721c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   e7220:	bd08      	pop	{r3, pc}

000e7222 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   e7222:	7c00      	ldrb	r0, [r0, #16]
   e7224:	f7fe be60 	b.w	e5ee8 <HAL_USB_USART_Flush_Data>

000e7228 <_ZN9USBSerialD0Ev>:
   e7228:	b510      	push	{r4, lr}
   e722a:	2114      	movs	r1, #20
   e722c:	4604      	mov	r4, r0
   e722e:	f001 f905 	bl	e843c <_ZdlPvj>
   e7232:	4620      	mov	r0, r4
   e7234:	bd10      	pop	{r4, pc}

000e7236 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   e7236:	b538      	push	{r3, r4, r5, lr}
   e7238:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   e723a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   e723c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   e723e:	f7fe fe3b 	bl	e5eb8 <HAL_USB_USART_Available_Data_For_Write>
   e7242:	2800      	cmp	r0, #0
   e7244:	dc01      	bgt.n	e724a <_ZN9USBSerial5writeEh+0x14>
   e7246:	7c60      	ldrb	r0, [r4, #17]
   e7248:	b128      	cbz	r0, e7256 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   e724a:	4629      	mov	r1, r5
   e724c:	7c20      	ldrb	r0, [r4, #16]
   e724e:	f7fe fe43 	bl	e5ed8 <HAL_USB_USART_Send_Data>
   e7252:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   e7256:	bd38      	pop	{r3, r4, r5, pc}

000e7258 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   e7258:	b510      	push	{r4, lr}
   e725a:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   e725c:	2300      	movs	r3, #0
   e725e:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   e7260:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   e7264:	60a3      	str	r3, [r4, #8]
   e7266:	4b05      	ldr	r3, [pc, #20]	; (e727c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   e7268:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   e726a:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   e726c:	4608      	mov	r0, r1
{
  _serial = serial;
   e726e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   e7270:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   e7272:	4611      	mov	r1, r2
   e7274:	f7fe fe08 	bl	e5e88 <HAL_USB_USART_Init>
}
   e7278:	4620      	mov	r0, r4
   e727a:	bd10      	pop	{r4, pc}
   e727c:	000ef244 	.word	0x000ef244

000e7280 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   e7280:	2200      	movs	r2, #0
   e7282:	7c00      	ldrb	r0, [r0, #16]
   e7284:	f7fe be08 	b.w	e5e98 <HAL_USB_USART_Begin>

000e7288 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   e7288:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   e728a:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   e728c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   e728e:	2100      	movs	r1, #0
   e7290:	f002 fc37 	bl	e9b02 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   e7294:	4620      	mov	r0, r4
   e7296:	bd10      	pop	{r4, pc}

000e7298 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   e7298:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   e729a:	4d0e      	ldr	r5, [pc, #56]	; (e72d4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   e729c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   e729e:	a801      	add	r0, sp, #4
   e72a0:	f7ff fff2 	bl	e7288 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   e72a4:	6829      	ldr	r1, [r5, #0]
   e72a6:	f011 0401 	ands.w	r4, r1, #1
   e72aa:	d110      	bne.n	e72ce <_Z16_fetch_usbserialv+0x36>
   e72ac:	4628      	mov	r0, r5
   e72ae:	f7ec ff07 	bl	d40c0 <__cxa_guard_acquire>
   e72b2:	b160      	cbz	r0, e72ce <_Z16_fetch_usbserialv+0x36>
   e72b4:	aa01      	add	r2, sp, #4
   e72b6:	4621      	mov	r1, r4
   e72b8:	4807      	ldr	r0, [pc, #28]	; (e72d8 <_Z16_fetch_usbserialv+0x40>)
   e72ba:	f7ff ffcd 	bl	e7258 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   e72be:	4628      	mov	r0, r5
   e72c0:	f7ec ff03 	bl	d40ca <__cxa_guard_release>
   e72c4:	4a05      	ldr	r2, [pc, #20]	; (e72dc <_Z16_fetch_usbserialv+0x44>)
   e72c6:	4906      	ldr	r1, [pc, #24]	; (e72e0 <_Z16_fetch_usbserialv+0x48>)
   e72c8:	4803      	ldr	r0, [pc, #12]	; (e72d8 <_Z16_fetch_usbserialv+0x40>)
   e72ca:	f001 f8a9 	bl	e8420 <__aeabi_atexit>
	return _usbserial;
}
   e72ce:	4802      	ldr	r0, [pc, #8]	; (e72d8 <_Z16_fetch_usbserialv+0x40>)
   e72d0:	b007      	add	sp, #28
   e72d2:	bd30      	pop	{r4, r5, pc}
   e72d4:	2003e4e0 	.word	0x2003e4e0
   e72d8:	2003e4e4 	.word	0x2003e4e4
   e72dc:	2003aca8 	.word	0x2003aca8
   e72e0:	000e71d9 	.word	0x000e71d9

000e72e4 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   e72e4:	4770      	bx	lr

000e72e6 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   e72e6:	7441      	strb	r1, [r0, #17]
   e72e8:	4770      	bx	lr

000e72ea <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   e72ea:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   e72ec:	7c00      	ldrb	r0, [r0, #16]
   e72ee:	f7fe fd1b 	bl	e5d28 <HAL_USART_Available_Data_For_Write>
}
   e72f2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   e72f6:	bd08      	pop	{r3, pc}

000e72f8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   e72f8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   e72fa:	7c00      	ldrb	r0, [r0, #16]
   e72fc:	f7fe fcec 	bl	e5cd8 <HAL_USART_Available_Data>
}
   e7300:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   e7304:	bd08      	pop	{r3, pc}

000e7306 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   e7306:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   e7308:	7c00      	ldrb	r0, [r0, #16]
   e730a:	f7fe fcf5 	bl	e5cf8 <HAL_USART_Peek_Data>
}
   e730e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   e7312:	bf28      	it	cs
   e7314:	f04f 30ff 	movcs.w	r0, #4294967295
   e7318:	bd08      	pop	{r3, pc}

000e731a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   e731a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   e731c:	7c00      	ldrb	r0, [r0, #16]
   e731e:	f7fe fce3 	bl	e5ce8 <HAL_USART_Read_Data>
}
   e7322:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   e7326:	bf28      	it	cs
   e7328:	f04f 30ff 	movcs.w	r0, #4294967295
   e732c:	bd08      	pop	{r3, pc}

000e732e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   e732e:	7c00      	ldrb	r0, [r0, #16]
   e7330:	f7fe bcea 	b.w	e5d08 <HAL_USART_Flush_Data>

000e7334 <_ZN11USARTSerialD0Ev>:
   e7334:	b510      	push	{r4, lr}
   e7336:	2114      	movs	r1, #20
   e7338:	4604      	mov	r4, r0
   e733a:	f001 f87f 	bl	e843c <_ZdlPvj>
   e733e:	4620      	mov	r0, r4
   e7340:	bd10      	pop	{r4, pc}

000e7342 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   e7342:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   e7344:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   e7346:	4604      	mov	r4, r0
   e7348:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   e734a:	b925      	cbnz	r5, e7356 <_ZN11USARTSerial5writeEh+0x14>
   e734c:	7c00      	ldrb	r0, [r0, #16]
   e734e:	f7fe fceb 	bl	e5d28 <HAL_USART_Available_Data_For_Write>
   e7352:	2800      	cmp	r0, #0
   e7354:	dd05      	ble.n	e7362 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   e7356:	4631      	mov	r1, r6
   e7358:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   e735a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   e735e:	f7fe bcb3 	b.w	e5cc8 <HAL_USART_Write_Data>
  }
  return 0;
}
   e7362:	4628      	mov	r0, r5
   e7364:	bd70      	pop	{r4, r5, r6, pc}
	...

000e7368 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   e7368:	b510      	push	{r4, lr}
   e736a:	4604      	mov	r4, r0
   e736c:	4608      	mov	r0, r1
   e736e:	4611      	mov	r1, r2
   e7370:	2200      	movs	r2, #0
   e7372:	6062      	str	r2, [r4, #4]
   e7374:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   e7378:	60a2      	str	r2, [r4, #8]
   e737a:	4a05      	ldr	r2, [pc, #20]	; (e7390 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   e737c:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   e737e:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   e7380:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   e7382:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   e7384:	461a      	mov	r2, r3
   e7386:	f7fe fc97 	bl	e5cb8 <HAL_USART_Init>
}
   e738a:	4620      	mov	r0, r4
   e738c:	bd10      	pop	{r4, pc}
   e738e:	bf00      	nop
   e7390:	000ef274 	.word	0x000ef274

000e7394 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   e7394:	7c00      	ldrb	r0, [r0, #16]
   e7396:	f7fe bcbf 	b.w	e5d18 <HAL_USART_Is_Enabled>
	...

000e739c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   e739c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
   e739e:	4c19      	ldr	r4, [pc, #100]	; (e7404 <_Z22__fetch_global_Serial1v+0x68>)
   e73a0:	6825      	ldr	r5, [r4, #0]
   e73a2:	b94d      	cbnz	r5, e73b8 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
   e73a4:	2084      	movs	r0, #132	; 0x84
   e73a6:	f7ec fe78 	bl	d409a <_Znwj>
   e73aa:	4606      	mov	r6, r0
   e73ac:	b118      	cbz	r0, e73b6 <_Z22__fetch_global_Serial1v+0x1a>
   e73ae:	2284      	movs	r2, #132	; 0x84
   e73b0:	4629      	mov	r1, r5
   e73b2:	f002 fba6 	bl	e9b02 <memset>
   e73b6:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
   e73b8:	4d13      	ldr	r5, [pc, #76]	; (e7408 <_Z22__fetch_global_Serial1v+0x6c>)
   e73ba:	682e      	ldr	r6, [r5, #0]
   e73bc:	b94e      	cbnz	r6, e73d2 <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
   e73be:	2084      	movs	r0, #132	; 0x84
   e73c0:	f7ec fe6b 	bl	d409a <_Znwj>
   e73c4:	4607      	mov	r7, r0
   e73c6:	b118      	cbz	r0, e73d0 <_Z22__fetch_global_Serial1v+0x34>
   e73c8:	2284      	movs	r2, #132	; 0x84
   e73ca:	4631      	mov	r1, r6
   e73cc:	f002 fb99 	bl	e9b02 <memset>
   e73d0:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   e73d2:	4f0e      	ldr	r7, [pc, #56]	; (e740c <_Z22__fetch_global_Serial1v+0x70>)
   e73d4:	6839      	ldr	r1, [r7, #0]
   e73d6:	f011 0601 	ands.w	r6, r1, #1
   e73da:	d111      	bne.n	e7400 <_Z22__fetch_global_Serial1v+0x64>
   e73dc:	4638      	mov	r0, r7
   e73de:	f7ec fe6f 	bl	d40c0 <__cxa_guard_acquire>
   e73e2:	b168      	cbz	r0, e7400 <_Z22__fetch_global_Serial1v+0x64>
   e73e4:	6822      	ldr	r2, [r4, #0]
   e73e6:	682b      	ldr	r3, [r5, #0]
   e73e8:	4809      	ldr	r0, [pc, #36]	; (e7410 <_Z22__fetch_global_Serial1v+0x74>)
   e73ea:	4631      	mov	r1, r6
   e73ec:	f7ff ffbc 	bl	e7368 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   e73f0:	4638      	mov	r0, r7
   e73f2:	f7ec fe6a 	bl	d40ca <__cxa_guard_release>
   e73f6:	4a07      	ldr	r2, [pc, #28]	; (e7414 <_Z22__fetch_global_Serial1v+0x78>)
   e73f8:	4907      	ldr	r1, [pc, #28]	; (e7418 <_Z22__fetch_global_Serial1v+0x7c>)
   e73fa:	4805      	ldr	r0, [pc, #20]	; (e7410 <_Z22__fetch_global_Serial1v+0x74>)
   e73fc:	f001 f810 	bl	e8420 <__aeabi_atexit>
#endif
	return serial1;
}
   e7400:	4803      	ldr	r0, [pc, #12]	; (e7410 <_Z22__fetch_global_Serial1v+0x74>)
   e7402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   e7404:	2003e514 	.word	0x2003e514
   e7408:	2003e50c 	.word	0x2003e50c
   e740c:	2003e510 	.word	0x2003e510
   e7410:	2003e4f8 	.word	0x2003e4f8
   e7414:	2003aca8 	.word	0x2003aca8
   e7418:	000e72e5 	.word	0x000e72e5

000e741c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   e741c:	4770      	bx	lr

000e741e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   e741e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e7420:	4606      	mov	r6, r0
   e7422:	4615      	mov	r5, r2
   e7424:	460c      	mov	r4, r1
   e7426:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   e7428:	42bc      	cmp	r4, r7
   e742a:	d006      	beq.n	e743a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   e742c:	6833      	ldr	r3, [r6, #0]
   e742e:	f814 1b01 	ldrb.w	r1, [r4], #1
   e7432:	689b      	ldr	r3, [r3, #8]
   e7434:	4630      	mov	r0, r6
   e7436:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   e7438:	e7f6      	b.n	e7428 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   e743a:	4628      	mov	r0, r5
   e743c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000e743e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   e743e:	2200      	movs	r2, #0
   e7440:	7c00      	ldrb	r0, [r0, #16]
   e7442:	f7fe bc79 	b.w	e5d38 <HAL_I2C_Write_Data>

000e7446 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   e7446:	2100      	movs	r1, #0
   e7448:	7c00      	ldrb	r0, [r0, #16]
   e744a:	f7fe bc7d 	b.w	e5d48 <HAL_I2C_Available_Data>

000e744e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   e744e:	2100      	movs	r1, #0
   e7450:	7c00      	ldrb	r0, [r0, #16]
   e7452:	f7fe bc81 	b.w	e5d58 <HAL_I2C_Read_Data>

000e7456 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   e7456:	2100      	movs	r1, #0
   e7458:	7c00      	ldrb	r0, [r0, #16]
   e745a:	f7fe bc85 	b.w	e5d68 <HAL_I2C_Peek_Data>

000e745e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   e745e:	2100      	movs	r1, #0
   e7460:	7c00      	ldrb	r0, [r0, #16]
   e7462:	f7fe bc89 	b.w	e5d78 <HAL_I2C_Flush_Data>

000e7466 <_ZN7TwoWireD0Ev>:
   e7466:	b510      	push	{r4, lr}
   e7468:	2114      	movs	r1, #20
   e746a:	4604      	mov	r4, r0
   e746c:	f000 ffe6 	bl	e843c <_ZdlPvj>
   e7470:	4620      	mov	r0, r4
   e7472:	bd10      	pop	{r4, pc}

000e7474 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   e7474:	b510      	push	{r4, lr}
   e7476:	4604      	mov	r4, r0
   e7478:	2300      	movs	r3, #0
   e747a:	6063      	str	r3, [r4, #4]
   e747c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   e7480:	60a3      	str	r3, [r4, #8]
   e7482:	4b04      	ldr	r3, [pc, #16]	; (e7494 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   e7484:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   e7486:	4608      	mov	r0, r1
   e7488:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   e748a:	4611      	mov	r1, r2
   e748c:	f7fe fc84 	bl	e5d98 <HAL_I2C_Init>
}
   e7490:	4620      	mov	r0, r4
   e7492:	bd10      	pop	{r4, pc}
   e7494:	000ef2a4 	.word	0x000ef2a4

000e7498 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   e7498:	2100      	movs	r1, #0
   e749a:	7c00      	ldrb	r0, [r0, #16]
   e749c:	f7fe bc74 	b.w	e5d88 <HAL_I2C_Is_Enabled>

000e74a0 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   e74a0:	2200      	movs	r2, #0
   e74a2:	4611      	mov	r1, r2
   e74a4:	6840      	ldr	r0, [r0, #4]
   e74a6:	f7fe bdc5 	b.w	e6034 <network_listening>

000e74aa <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   e74aa:	2200      	movs	r2, #0
   e74ac:	4611      	mov	r1, r2
   e74ae:	6840      	ldr	r0, [r0, #4]
   e74b0:	f7fe bdd0 	b.w	e6054 <network_get_listen_timeout>

000e74b4 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   e74b4:	2200      	movs	r2, #0
   e74b6:	6840      	ldr	r0, [r0, #4]
   e74b8:	f7fe bdc4 	b.w	e6044 <network_set_listen_timeout>

000e74bc <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   e74bc:	2200      	movs	r2, #0
   e74be:	f081 0101 	eor.w	r1, r1, #1
   e74c2:	6840      	ldr	r0, [r0, #4]
   e74c4:	f7fe bdae 	b.w	e6024 <network_listen>

000e74c8 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   e74c8:	2300      	movs	r3, #0
   e74ca:	461a      	mov	r2, r3
   e74cc:	2101      	movs	r1, #1
   e74ce:	6840      	ldr	r0, [r0, #4]
   e74d0:	f7fe bda0 	b.w	e6014 <network_off>

000e74d4 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   e74d4:	2300      	movs	r3, #0
   e74d6:	461a      	mov	r2, r3
   e74d8:	4619      	mov	r1, r3
   e74da:	6840      	ldr	r0, [r0, #4]
   e74dc:	f7fe bd92 	b.w	e6004 <network_on>

000e74e0 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   e74e0:	2200      	movs	r2, #0
   e74e2:	4611      	mov	r1, r2
   e74e4:	6840      	ldr	r0, [r0, #4]
   e74e6:	f7fe bd85 	b.w	e5ff4 <network_ready>

000e74ea <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   e74ea:	2200      	movs	r2, #0
   e74ec:	4611      	mov	r1, r2
   e74ee:	6840      	ldr	r0, [r0, #4]
   e74f0:	f7fe bd70 	b.w	e5fd4 <network_connecting>

000e74f4 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   e74f4:	2200      	movs	r2, #0
   e74f6:	2102      	movs	r1, #2
   e74f8:	6840      	ldr	r0, [r0, #4]
   e74fa:	f7fe bd73 	b.w	e5fe4 <network_disconnect>

000e74fe <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   e74fe:	2300      	movs	r3, #0
   e7500:	461a      	mov	r2, r3
   e7502:	6840      	ldr	r0, [r0, #4]
   e7504:	f7fe bd5e 	b.w	e5fc4 <network_connect>

000e7508 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   e7508:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   e750a:	4605      	mov	r5, r0
   e750c:	b188      	cbz	r0, e7532 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   e750e:	6804      	ldr	r4, [r0, #0]
   e7510:	b14c      	cbz	r4, e7526 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   e7512:	68a3      	ldr	r3, [r4, #8]
   e7514:	b11b      	cbz	r3, e751e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   e7516:	2203      	movs	r2, #3
   e7518:	4621      	mov	r1, r4
   e751a:	4620      	mov	r0, r4
   e751c:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   e751e:	2110      	movs	r1, #16
   e7520:	4620      	mov	r0, r4
   e7522:	f000 ff8b 	bl	e843c <_ZdlPvj>
   e7526:	4628      	mov	r0, r5
   e7528:	2114      	movs	r1, #20
      }
   e752a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   e752e:	f000 bf85 	b.w	e843c <_ZdlPvj>
   e7532:	bd38      	pop	{r3, r4, r5, pc}

000e7534 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   e7534:	b110      	cbz	r0, e753c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   e7536:	6803      	ldr	r3, [r0, #0]
   e7538:	685b      	ldr	r3, [r3, #4]
   e753a:	4718      	bx	r3
   e753c:	4770      	bx	lr

000e753e <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   e753e:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   e7540:	6803      	ldr	r3, [r0, #0]
   e7542:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   e7544:	b1bb      	cbz	r3, e7576 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   e7546:	6858      	ldr	r0, [r3, #4]
   e7548:	f7fe fb6e 	bl	e5c28 <os_thread_is_current>
   e754c:	b978      	cbnz	r0, e756e <_ZN6ThreadD1Ev+0x30>
   e754e:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   e7550:	7c5a      	ldrb	r2, [r3, #17]
   e7552:	b912      	cbnz	r2, e755a <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   e7554:	6858      	ldr	r0, [r3, #4]
   e7556:	f7fe fb6f 	bl	e5c38 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   e755a:	6823      	ldr	r3, [r4, #0]
   e755c:	6858      	ldr	r0, [r3, #4]
   e755e:	f7fe fb73 	bl	e5c48 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   e7562:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   e7564:	2300      	movs	r3, #0
   e7566:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   e7568:	b128      	cbz	r0, e7576 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   e756a:	f7ff ffcd 	bl	e7508 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   e756e:	6820      	ldr	r0, [r4, #0]
   e7570:	b108      	cbz	r0, e7576 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   e7572:	f7ff ffc9 	bl	e7508 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   e7576:	4620      	mov	r0, r4
   e7578:	bd10      	pop	{r4, pc}

000e757a <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   e757a:	b538      	push	{r3, r4, r5, lr}
   e757c:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   e757e:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   e7582:	b108      	cbz	r0, e7588 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   e7584:	f7ec fd8f 	bl	d40a6 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   e7588:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   e758c:	b108      	cbz	r0, e7592 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   e758e:	f7fe fb73 	bl	e5c78 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   e7592:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   e7596:	b135      	cbz	r5, e75a6 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   e7598:	4628      	mov	r0, r5
   e759a:	f7ff ffd0 	bl	e753e <_ZN6ThreadD1Ev>
   e759e:	2104      	movs	r1, #4
   e75a0:	4628      	mov	r0, r5
   e75a2:	f000 ff4b 	bl	e843c <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   e75a6:	6820      	ldr	r0, [r4, #0]
   e75a8:	b108      	cbz	r0, e75ae <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   e75aa:	f7ff ffc3 	bl	e7534 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   e75ae:	4620      	mov	r0, r4
   e75b0:	bd38      	pop	{r3, r4, r5, pc}
	...

000e75b4 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   e75b4:	b510      	push	{r4, lr}
   e75b6:	4b04      	ldr	r3, [pc, #16]	; (e75c8 <_ZN5spark9MeshClassD1Ev+0x14>)
   e75b8:	4604      	mov	r4, r0
   e75ba:	f840 3b08 	str.w	r3, [r0], #8
   e75be:	f7ff ffdc 	bl	e757a <_ZN5spark11MeshPublishD1Ev>
   e75c2:	4620      	mov	r0, r4
   e75c4:	bd10      	pop	{r4, pc}
   e75c6:	bf00      	nop
   e75c8:	000ef2cc 	.word	0x000ef2cc

000e75cc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   e75cc:	b538      	push	{r3, r4, r5, lr}
   e75ce:	4c0e      	ldr	r4, [pc, #56]	; (e7608 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   e75d0:	4b0e      	ldr	r3, [pc, #56]	; (e760c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   e75d2:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   e75d4:	2500      	movs	r5, #0
   e75d6:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   e75d8:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   e75dc:	6063      	str	r3, [r4, #4]
   e75de:	60a5      	str	r5, [r4, #8]
   e75e0:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   e75e4:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   e75e8:	f7fe fb3e 	bl	e5c68 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   e75ec:	4b08      	ldr	r3, [pc, #32]	; (e7610 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   e75ee:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   e75f2:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   e75f6:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   e75f8:	4620      	mov	r0, r4
   e75fa:	4a06      	ldr	r2, [pc, #24]	; (e7614 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   e75fc:	4906      	ldr	r1, [pc, #24]	; (e7618 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   e75fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   e7602:	f000 bf0d 	b.w	e8420 <__aeabi_atexit>
   e7606:	bf00      	nop
   e7608:	2003e518 	.word	0x2003e518
   e760c:	000ef3ac 	.word	0x000ef3ac
   e7610:	000ef2cc 	.word	0x000ef2cc
   e7614:	2003aca8 	.word	0x2003aca8
   e7618:	000e75b5 	.word	0x000e75b5

000e761c <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   e761c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   e761e:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   e7620:	6803      	ldr	r3, [r0, #0]
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   e7622:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   e7626:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   e7628:	2201      	movs	r2, #1
   e762a:	f04f 33ff 	mov.w	r3, #4294967295
   e762e:	4621      	mov	r1, r4
   e7630:	47a8      	blx	r5
}
   e7632:	b003      	add	sp, #12
   e7634:	bd30      	pop	{r4, r5, pc}

000e7636 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   e7636:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   e7638:	6803      	ldr	r3, [r0, #0]
   e763a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   e763c:	f04f 33ff 	mov.w	r3, #4294967295
   e7640:	46a4      	mov	ip, r4
}
   e7642:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   e7646:	4760      	bx	ip

000e7648 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   e7648:	b537      	push	{r0, r1, r2, r4, r5, lr}
   e764a:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   e764c:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   e764e:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   e7652:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   e7654:	4621      	mov	r1, r4
   e7656:	4613      	mov	r3, r2
   e7658:	2201      	movs	r2, #1
   e765a:	47a8      	blx	r5
}
   e765c:	b003      	add	sp, #12
   e765e:	bd30      	pop	{r4, r5, pc}

000e7660 <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   e7660:	4770      	bx	lr

000e7662 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   e7662:	b538      	push	{r3, r4, r5, lr}
   e7664:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   e7666:	681a      	ldr	r2, [r3, #0]
   e7668:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   e766a:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   e766c:	da05      	bge.n	e767a <_ZN9TCPClient9connectedEv+0x18>
   e766e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   e7672:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   e7676:	429a      	cmp	r2, r3
   e7678:	d001      	beq.n	e767e <_ZN9TCPClient9connectedEv+0x1c>
   e767a:	2501      	movs	r5, #1
   e767c:	e00b      	b.n	e7696 <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   e767e:	6803      	ldr	r3, [r0, #0]
   e7680:	691b      	ldr	r3, [r3, #16]
   e7682:	4798      	blx	r3
   e7684:	2800      	cmp	r0, #0
   e7686:	bf14      	ite	ne
   e7688:	2501      	movne	r5, #1
   e768a:	2500      	moveq	r5, #0
        if (!rv) {
   e768c:	d103      	bne.n	e7696 <_ZN9TCPClient9connectedEv+0x34>
            stop();
   e768e:	6823      	ldr	r3, [r4, #0]
   e7690:	4620      	mov	r0, r4
   e7692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   e7694:	4798      	blx	r3
        }
    }
    return rv;
}
   e7696:	4628      	mov	r0, r5
   e7698:	bd38      	pop	{r3, r4, r5, pc}

000e769a <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   e769a:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   e769c:	6818      	ldr	r0, [r3, #0]
}
   e769e:	43c0      	mvns	r0, r0
   e76a0:	0fc0      	lsrs	r0, r0, #31
   e76a2:	4770      	bx	lr

000e76a4 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   e76a4:	4770      	bx	lr

000e76a6 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   e76a6:	2000      	movs	r0, #0
   e76a8:	4770      	bx	lr

000e76aa <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   e76aa:	b510      	push	{r4, lr}
   e76ac:	2114      	movs	r1, #20
   e76ae:	4604      	mov	r4, r0
   e76b0:	f000 fec4 	bl	e843c <_ZdlPvj>
   e76b4:	4620      	mov	r0, r4
   e76b6:	bd10      	pop	{r4, pc}

000e76b8 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   e76b8:	f7ec bcf3 	b.w	d40a2 <_ZdlPv>

000e76bc <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   e76bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   e76be:	4616      	mov	r6, r2

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   e76c0:	2200      	movs	r2, #0
   e76c2:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   e76c4:	9202      	str	r2, [sp, #8]
   e76c6:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   e76c8:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   e76ca:	4604      	mov	r4, r0
   e76cc:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   e76ce:	d008      	beq.n	e76e2 <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   e76d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   e76d4:	fbb3 f1f2 	udiv	r1, r3, r2
   e76d8:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   e76da:	fb02 3111 	mls	r1, r2, r1, r3
   e76de:	434a      	muls	r2, r1
   e76e0:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   e76e2:	6960      	ldr	r0, [r4, #20]
   e76e4:	2308      	movs	r3, #8
   e76e6:	9300      	str	r3, [sp, #0]
   e76e8:	f241 0205 	movw	r2, #4101	; 0x1005
   e76ec:	446b      	add	r3, sp
   e76ee:	f640 71ff 	movw	r1, #4095	; 0xfff
   e76f2:	6800      	ldr	r0, [r0, #0]
   e76f4:	f7fe fb70 	bl	e5dd8 <sock_setsockopt>
    if (ret < 0) {
   e76f8:	2800      	cmp	r0, #0
   e76fa:	db08      	blt.n	e770e <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   e76fc:	6960      	ldr	r0, [r4, #20]
   e76fe:	2300      	movs	r3, #0
   e7700:	4632      	mov	r2, r6
   e7702:	4629      	mov	r1, r5
   e7704:	6800      	ldr	r0, [r0, #0]
   e7706:	f7fe fb8f 	bl	e5e28 <sock_send>
    if (ret < 0) {
   e770a:	2800      	cmp	r0, #0
   e770c:	da04      	bge.n	e7718 <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   e770e:	f7fe fd19 	bl	e6144 <__errno>
   e7712:	6803      	ldr	r3, [r0, #0]
   e7714:	6063      	str	r3, [r4, #4]
   e7716:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   e7718:	b004      	add	sp, #16
   e771a:	bd70      	pop	{r4, r5, r6, pc}

000e771c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   e771c:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   e771e:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   e7720:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   e7722:	689b      	ldr	r3, [r3, #8]
   e7724:	4798      	blx	r3
          if (--_M_weak_count == 0)
   e7726:	68a3      	ldr	r3, [r4, #8]
   e7728:	3b01      	subs	r3, #1
   e772a:	60a3      	str	r3, [r4, #8]
   e772c:	b92b      	cbnz	r3, e773a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   e772e:	6823      	ldr	r3, [r4, #0]
   e7730:	4620      	mov	r0, r4
   e7732:	68db      	ldr	r3, [r3, #12]
        }
    }
   e7734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   e7738:	4718      	bx	r3
   e773a:	bd10      	pop	{r4, pc}

000e773c <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   e773c:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   e773e:	4604      	mov	r4, r0
   e7740:	694d      	ldr	r5, [r1, #20]
   e7742:	4b05      	ldr	r3, [pc, #20]	; (e7758 <_ZN9TCPClient8remoteIPEv+0x1c>)
   e7744:	f844 3b04 	str.w	r3, [r4], #4
   e7748:	358c      	adds	r5, #140	; 0x8c
   e774a:	4606      	mov	r6, r0
   e774c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   e774e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   e7750:	682b      	ldr	r3, [r5, #0]
   e7752:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   e7754:	4630      	mov	r0, r6
   e7756:	bd70      	pop	{r4, r5, r6, pc}
   e7758:	000ef230 	.word	0x000ef230

000e775c <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   e775c:	b510      	push	{r4, lr}
   e775e:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   e7760:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   e7764:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   e7768:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   e776a:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   e776c:	d005      	beq.n	e777a <_ZN9TCPClient4peekEv+0x1e>
   e776e:	6962      	ldr	r2, [r4, #20]
   e7770:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   e7774:	4413      	add	r3, r2
   e7776:	7918      	ldrb	r0, [r3, #4]
   e7778:	bd10      	pop	{r4, pc}
   e777a:	6803      	ldr	r3, [r0, #0]
   e777c:	691b      	ldr	r3, [r3, #16]
   e777e:	4798      	blx	r3
   e7780:	2800      	cmp	r0, #0
   e7782:	d1f4      	bne.n	e776e <_ZN9TCPClient4peekEv+0x12>
   e7784:	f04f 30ff 	mov.w	r0, #4294967295
}
   e7788:	bd10      	pop	{r4, pc}

000e778a <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   e778a:	b510      	push	{r4, lr}
   e778c:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   e778e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   e7792:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   e7796:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   e7798:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   e779a:	d008      	beq.n	e77ae <_ZN9TCPClient4readEv+0x24>
   e779c:	6962      	ldr	r2, [r4, #20]
   e779e:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   e77a2:	1c59      	adds	r1, r3, #1
   e77a4:	4413      	add	r3, r2
   e77a6:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   e77aa:	7918      	ldrb	r0, [r3, #4]
   e77ac:	bd10      	pop	{r4, pc}
   e77ae:	6803      	ldr	r3, [r0, #0]
   e77b0:	691b      	ldr	r3, [r3, #16]
   e77b2:	4798      	blx	r3
   e77b4:	2800      	cmp	r0, #0
   e77b6:	d1f1      	bne.n	e779c <_ZN9TCPClient4readEv+0x12>
   e77b8:	f04f 30ff 	mov.w	r0, #4294967295
}
   e77bc:	bd10      	pop	{r4, pc}

000e77be <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   e77be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e77c0:	6943      	ldr	r3, [r0, #20]
   e77c2:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   e77c4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   e77c8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   e77cc:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   e77ce:	4605      	mov	r5, r0
   e77d0:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   e77d2:	d106      	bne.n	e77e2 <_ZN9TCPClient4readEPhj+0x24>
   e77d4:	6803      	ldr	r3, [r0, #0]
   e77d6:	691b      	ldr	r3, [r3, #16]
   e77d8:	4798      	blx	r3
   e77da:	b910      	cbnz	r0, e77e2 <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   e77dc:	f04f 34ff 	mov.w	r4, #4294967295
   e77e0:	e014      	b.n	e780c <_ZN9TCPClient4readEPhj+0x4e>
   e77e2:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   e77e4:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   e77e8:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   e77ec:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   e77ee:	42bc      	cmp	r4, r7
   e77f0:	bf28      	it	cs
   e77f2:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   e77f4:	4419      	add	r1, r3
   e77f6:	4622      	mov	r2, r4
   e77f8:	3104      	adds	r1, #4
   e77fa:	4630      	mov	r0, r6
   e77fc:	f002 f95b 	bl	e9ab6 <memcpy>
   e7800:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   e7802:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   e7806:	4423      	add	r3, r4
   e7808:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   e780c:	4620      	mov	r0, r4
   e780e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000e7810 <_ZN9TCPClient7connectEPKctm>:
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   e7810:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   e7814:	4698      	mov	r8, r3
    stop();
   e7816:	6803      	ldr	r3, [r0, #0]
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   e7818:	b093      	sub	sp, #76	; 0x4c
    stop();
   e781a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   e781c:	460d      	mov	r5, r1
   e781e:	4606      	mov	r6, r0
   e7820:	4617      	mov	r7, r2
    stop();
   e7822:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   e7824:	ab12      	add	r3, sp, #72	; 0x48
   e7826:	2400      	movs	r4, #0
   e7828:	f843 4d48 	str.w	r4, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   e782c:	4622      	mov	r2, r4
   e782e:	4621      	mov	r1, r4
   e7830:	4628      	mov	r0, r5
   e7832:	f7fe f981 	bl	e5b38 <netdb_getaddrinfo>
   e7836:	4681      	mov	r9, r0
   e7838:	2800      	cmp	r0, #0
   e783a:	d13d      	bne.n	e78b8 <_ZN9TCPClient7connectEPKctm+0xa8>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   e783c:	9b00      	ldr	r3, [sp, #0]
   e783e:	2b00      	cmp	r3, #0
   e7840:	d056      	beq.n	e78f0 <_ZN9TCPClient7connectEPKctm+0xe0>
   e7842:	695b      	ldr	r3, [r3, #20]
   e7844:	2b00      	cmp	r3, #0
   e7846:	d053      	beq.n	e78f0 <_ZN9TCPClient7connectEPKctm+0xe0>
        IPAddress addr;
   e7848:	a806      	add	r0, sp, #24
   e784a:	f7ff fc75 	bl	e7138 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   e784e:	9b00      	ldr	r3, [sp, #0]
   e7850:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   e7852:	7863      	ldrb	r3, [r4, #1]
   e7854:	2b02      	cmp	r3, #2
   e7856:	d101      	bne.n	e785c <_ZN9TCPClient7connectEPKctm+0x4c>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   e7858:	1d21      	adds	r1, r4, #4
   e785a:	e013      	b.n	e7884 <_ZN9TCPClient7connectEPKctm+0x74>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   e785c:	2b0a      	cmp	r3, #10
   e785e:	d114      	bne.n	e788a <_ZN9TCPClient7connectEPKctm+0x7a>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   e7860:	2211      	movs	r2, #17
   e7862:	4649      	mov	r1, r9
   e7864:	a801      	add	r0, sp, #4
   e7866:	f002 f94c 	bl	e9b02 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   e786a:	68a3      	ldr	r3, [r4, #8]
   e786c:	bb33      	cbnz	r3, e78bc <_ZN9TCPClient7connectEPKctm+0xac>
   e786e:	68e3      	ldr	r3, [r4, #12]
   e7870:	bb23      	cbnz	r3, e78bc <_ZN9TCPClient7connectEPKctm+0xac>
   e7872:	f64f 70ff 	movw	r0, #65535	; 0xffff
   e7876:	6925      	ldr	r5, [r4, #16]
   e7878:	f7fe fa0e 	bl	e5c98 <inet_htonl>
   e787c:	4285      	cmp	r5, r0
   e787e:	d11d      	bne.n	e78bc <_ZN9TCPClient7connectEPKctm+0xac>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   e7880:	f104 0114 	add.w	r1, r4, #20
   e7884:	a806      	add	r0, sp, #24
   e7886:	f7ff fc9a 	bl	e71be <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   e788a:	a806      	add	r0, sp, #24
   e788c:	f7ff fc74 	bl	e7178 <_ZNK9IPAddresscvbEv>
        if (addr) {
   e7890:	2800      	cmp	r0, #0
   e7892:	d02d      	beq.n	e78f0 <_ZN9TCPClient7connectEPKctm+0xe0>
            return connect(addr, port, nif);
   e7894:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   e7896:	ad07      	add	r5, sp, #28
   e7898:	f8d3 9020 	ldr.w	r9, [r3, #32]
   e789c:	4b18      	ldr	r3, [pc, #96]	; (e7900 <_ZN9TCPClient7connectEPKctm+0xf0>)
   e789e:	930c      	str	r3, [sp, #48]	; 0x30
   e78a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   e78a2:	ac0d      	add	r4, sp, #52	; 0x34
   e78a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   e78a6:	682b      	ldr	r3, [r5, #0]
   e78a8:	7023      	strb	r3, [r4, #0]
   e78aa:	463a      	mov	r2, r7
   e78ac:	4643      	mov	r3, r8
   e78ae:	a90c      	add	r1, sp, #48	; 0x30
   e78b0:	4630      	mov	r0, r6
   e78b2:	47c8      	blx	r9
   e78b4:	4681      	mov	r9, r0
   e78b6:	e01b      	b.n	e78f0 <_ZN9TCPClient7connectEPKctm+0xe0>

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   e78b8:	46a1      	mov	r9, r4
   e78ba:	e019      	b.n	e78f0 <_ZN9TCPClient7connectEPKctm+0xe0>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   e78bc:	f104 0308 	add.w	r3, r4, #8
   e78c0:	ad01      	add	r5, sp, #4
   e78c2:	3418      	adds	r4, #24
   e78c4:	6818      	ldr	r0, [r3, #0]
   e78c6:	6859      	ldr	r1, [r3, #4]
   e78c8:	462a      	mov	r2, r5
   e78ca:	c203      	stmia	r2!, {r0, r1}
   e78cc:	3308      	adds	r3, #8
   e78ce:	42a3      	cmp	r3, r4
   e78d0:	4615      	mov	r5, r2
   e78d2:	d1f7      	bne.n	e78c4 <_ZN9TCPClient7connectEPKctm+0xb4>
            a.v = 6;
   e78d4:	2306      	movs	r3, #6
            addr = IPAddress(a);
   e78d6:	a901      	add	r1, sp, #4
   e78d8:	a80c      	add	r0, sp, #48	; 0x30
   e78da:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   e78dc:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   e78e0:	f7ff fc38 	bl	e7154 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   e78e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   e78e6:	ac07      	add	r4, sp, #28
   e78e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   e78ea:	682b      	ldr	r3, [r5, #0]
   e78ec:	7023      	strb	r3, [r4, #0]
   e78ee:	e7cc      	b.n	e788a <_ZN9TCPClient7connectEPKctm+0x7a>
// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   e78f0:	9800      	ldr	r0, [sp, #0]
   e78f2:	f7fe f919 	bl	e5b28 <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return 0; // error, could not connect
}
   e78f6:	4648      	mov	r0, r9
   e78f8:	b013      	add	sp, #76	; 0x4c
   e78fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   e78fe:	bf00      	nop
   e7900:	000ef230 	.word	0x000ef230

000e7904 <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   e7904:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   e7906:	2300      	movs	r3, #0
   e7908:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   e790c:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   e790e:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   e7912:	4770      	bx	lr

000e7914 <_ZN9TCPClient7connectE9IPAddresstm>:

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   e7914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e7918:	461e      	mov	r6, r3
    stop();
   e791a:	6803      	ldr	r3, [r0, #0]

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   e791c:	460c      	mov	r4, r1
   e791e:	b08a      	sub	sp, #40	; 0x28
    stop();
   e7920:	6adb      	ldr	r3, [r3, #44]	; 0x2c

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   e7922:	4605      	mov	r5, r0
   e7924:	4617      	mov	r7, r2
    stop();
   e7926:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   e7928:	7d23      	ldrb	r3, [r4, #20]
   e792a:	f8d5 8014 	ldr.w	r8, [r5, #20]
   e792e:	2b04      	cmp	r3, #4
   e7930:	bf0c      	ite	eq
   e7932:	2002      	moveq	r0, #2
   e7934:	200a      	movne	r0, #10
   e7936:	2206      	movs	r2, #6
   e7938:	2101      	movs	r1, #1
   e793a:	f7fe fa7d 	bl	e5e38 <sock_socket>
   e793e:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   e7942:	696b      	ldr	r3, [r5, #20]
   e7944:	681b      	ldr	r3, [r3, #0]
   e7946:	2b00      	cmp	r3, #0
   e7948:	db18      	blt.n	e797c <_ZN9TCPClient7connectE9IPAddresstm+0x68>

    flush_buffer();
   e794a:	4628      	mov	r0, r5
   e794c:	f7ff ffda 	bl	e7904 <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   e7950:	b1d6      	cbz	r6, e7988 <_ZN9TCPClient7connectE9IPAddresstm+0x74>
        struct ifreq ifr = {};
   e7952:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   e7954:	a903      	add	r1, sp, #12
   e7956:	b2f0      	uxtb	r0, r6
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   e7958:	9303      	str	r3, [sp, #12]
   e795a:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   e795e:	f7fe f933 	bl	e5bc8 <if_index_to_name>
   e7962:	b958      	cbnz	r0, e797c <_ZN9TCPClient7connectE9IPAddresstm+0x68>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   e7964:	6968      	ldr	r0, [r5, #20]
   e7966:	2306      	movs	r3, #6
   e7968:	9300      	str	r3, [sp, #0]
   e796a:	f241 020b 	movw	r2, #4107	; 0x100b
   e796e:	ab03      	add	r3, sp, #12
   e7970:	f640 71ff 	movw	r1, #4095	; 0xfff
   e7974:	6800      	ldr	r0, [r0, #0]
   e7976:	f7fe fa2f 	bl	e5dd8 <sock_setsockopt>
   e797a:	b128      	cbz	r0, e7988 <_ZN9TCPClient7connectE9IPAddresstm+0x74>

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   e797c:	682b      	ldr	r3, [r5, #0]
   e797e:	4628      	mov	r0, r5
   e7980:	6adb      	ldr	r3, [r3, #44]	; 0x2c

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   e7982:	2400      	movs	r4, #0

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   e7984:	4798      	blx	r3
   e7986:	e03b      	b.n	e7a00 <_ZN9TCPClient7connectE9IPAddresstm+0xec>
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   e7988:	261c      	movs	r6, #28
   e798a:	4632      	mov	r2, r6
   e798c:	2100      	movs	r1, #0
   e798e:	a803      	add	r0, sp, #12
   e7990:	f002 f8b7 	bl	e9b02 <memset>
    if (ip.version() == 4) {
   e7994:	7d23      	ldrb	r3, [r4, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   e7996:	f88d 600c 	strb.w	r6, [sp, #12]
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   e799a:	2b04      	cmp	r3, #4
   e799c:	d10c      	bne.n	e79b8 <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   e799e:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   e79a0:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   e79a2:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   e79a6:	f7fe f97f 	bl	e5ca8 <inet_htons>
   e79aa:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   e79ae:	6860      	ldr	r0, [r4, #4]
   e79b0:	f7fe f972 	bl	e5c98 <inet_htonl>
   e79b4:	9004      	str	r0, [sp, #16]
   e79b6:	e013      	b.n	e79e0 <_ZN9TCPClient7connectE9IPAddresstm+0xcc>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   e79b8:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   e79ba:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   e79bc:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   e79c0:	f7fe f972 	bl	e5ca8 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   e79c4:	ae05      	add	r6, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   e79c6:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   e79ca:	1d23      	adds	r3, r4, #4
   e79cc:	f104 0714 	add.w	r7, r4, #20
   e79d0:	6818      	ldr	r0, [r3, #0]
   e79d2:	6859      	ldr	r1, [r3, #4]
   e79d4:	4632      	mov	r2, r6
   e79d6:	c203      	stmia	r2!, {r0, r1}
   e79d8:	3308      	adds	r3, #8
   e79da:	42bb      	cmp	r3, r7
   e79dc:	4616      	mov	r6, r2
   e79de:	d1f7      	bne.n	e79d0 <_ZN9TCPClient7connectE9IPAddresstm+0xbc>
    }

    // FIXME: timeout?
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   e79e0:	696b      	ldr	r3, [r5, #20]
   e79e2:	221c      	movs	r2, #28
   e79e4:	a903      	add	r1, sp, #12
   e79e6:	6818      	ldr	r0, [r3, #0]
   e79e8:	f7fe fa06 	bl	e5df8 <sock_connect>
   e79ec:	2800      	cmp	r0, #0
   e79ee:	d1c5      	bne.n	e797c <_ZN9TCPClient7connectE9IPAddresstm+0x68>
   e79f0:	3404      	adds	r4, #4
   e79f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   e79f4:	696d      	ldr	r5, [r5, #20]
   e79f6:	358c      	adds	r5, #140	; 0x8c
   e79f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   e79fa:	6823      	ldr	r3, [r4, #0]
   e79fc:	702b      	strb	r3, [r5, #0]

    d_->remoteIP = ip;

    done.dismiss();

    return 1; // success
   e79fe:	2401      	movs	r4, #1
}
   e7a00:	4620      	mov	r0, r4
   e7a02:	b00a      	add	sp, #40	; 0x28
   e7a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000e7a08 <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   e7a08:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   e7a0a:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   e7a0c:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   e7a0e:	6818      	ldr	r0, [r3, #0]
   e7a10:	2800      	cmp	r0, #0
   e7a12:	db01      	blt.n	e7a18 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   e7a14:	f7fe f9e8 	bl	e5de8 <sock_close>
   e7a18:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   e7a1a:	f04f 32ff 	mov.w	r2, #4294967295
   e7a1e:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   e7a20:	6960      	ldr	r0, [r4, #20]
   e7a22:	2211      	movs	r2, #17
   e7a24:	2100      	movs	r1, #0
   e7a26:	308c      	adds	r0, #140	; 0x8c
   e7a28:	f002 f86b 	bl	e9b02 <memset>
    d_->remoteIP.clear();
    flush_buffer();
   e7a2c:	4620      	mov	r0, r4
}
   e7a2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   e7a32:	f7ff bf67 	b.w	e7904 <_ZN9TCPClient12flush_bufferEv>
	...

000e7a38 <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   e7a38:	b530      	push	{r4, r5, lr}
   e7a3a:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   e7a3c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   e7a40:	b08b      	sub	sp, #44	; 0x2c
   e7a42:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   e7a44:	b11b      	cbz	r3, e7a4e <_ZN9TCPClient9availableEv+0x16>
   e7a46:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   e7a4a:	429a      	cmp	r2, r3
   e7a4c:	d040      	beq.n	e7ad0 <_ZN9TCPClient9availableEv+0x98>
   e7a4e:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   e7a50:	6818      	ldr	r0, [r3, #0]
   e7a52:	2800      	cmp	r0, #0
   e7a54:	db3f      	blt.n	e7ad6 <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   e7a56:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   e7a5a:	2d7f      	cmp	r5, #127	; 0x7f
   e7a5c:	d83b      	bhi.n	e7ad6 <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   e7a5e:	1d19      	adds	r1, r3, #4
   e7a60:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   e7a64:	2308      	movs	r3, #8
   e7a66:	4429      	add	r1, r5
   e7a68:	f7fe f9d6 	bl	e5e18 <sock_recv>
            if (ret > 0) {
   e7a6c:	2800      	cmp	r0, #0
   e7a6e:	dd0c      	ble.n	e7a8a <_ZN9TCPClient9availableEv+0x52>
   e7a70:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   e7a72:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   e7a76:	b90a      	cbnz	r2, e7a7c <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   e7a78:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   e7a7c:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   e7a7e:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   e7a82:	4418      	add	r0, r3
   e7a84:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   e7a88:	e025      	b.n	e7ad6 <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   e7a8a:	f7fe fb5b 	bl	e6144 <__errno>
   e7a8e:	6803      	ldr	r3, [r0, #0]
   e7a90:	2b0b      	cmp	r3, #11
   e7a92:	d020      	beq.n	e7ad6 <_ZN9TCPClient9availableEv+0x9e>
   e7a94:	f7fe fb56 	bl	e6144 <__errno>
   e7a98:	6803      	ldr	r3, [r0, #0]
   e7a9a:	2b0b      	cmp	r3, #11
   e7a9c:	d01b      	beq.n	e7ad6 <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   e7a9e:	2320      	movs	r3, #32
   e7aa0:	2500      	movs	r5, #0
   e7aa2:	9302      	str	r3, [sp, #8]
   e7aa4:	9503      	str	r5, [sp, #12]
   e7aa6:	f7fe fb4d 	bl	e6144 <__errno>
   e7aaa:	6803      	ldr	r3, [r0, #0]
   e7aac:	9301      	str	r3, [sp, #4]
   e7aae:	4b0e      	ldr	r3, [pc, #56]	; (e7ae8 <_ZN9TCPClient9availableEv+0xb0>)
   e7ab0:	9300      	str	r3, [sp, #0]
   e7ab2:	aa02      	add	r2, sp, #8
   e7ab4:	462b      	mov	r3, r5
   e7ab6:	490d      	ldr	r1, [pc, #52]	; (e7aec <_ZN9TCPClient9availableEv+0xb4>)
   e7ab8:	2032      	movs	r0, #50	; 0x32
   e7aba:	f7fe fa35 	bl	e5f28 <log_message>
                    sock_close(d_->sock);
   e7abe:	6963      	ldr	r3, [r4, #20]
   e7ac0:	6818      	ldr	r0, [r3, #0]
   e7ac2:	f7fe f991 	bl	e5de8 <sock_close>
   e7ac6:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   e7ac8:	f04f 32ff 	mov.w	r2, #4294967295
   e7acc:	601a      	str	r2, [r3, #0]
   e7ace:	e002      	b.n	e7ad6 <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   e7ad0:	f7ff ff18 	bl	e7904 <_ZN9TCPClient12flush_bufferEv>
   e7ad4:	e7bb      	b.n	e7a4e <_ZN9TCPClient9availableEv+0x16>
   e7ad6:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   e7ad8:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   e7adc:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   e7ae0:	1a18      	subs	r0, r3, r0
}
   e7ae2:	b00b      	add	sp, #44	; 0x2c
   e7ae4:	bd30      	pop	{r4, r5, pc}
   e7ae6:	bf00      	nop
   e7ae8:	000ef360 	.word	0x000ef360
   e7aec:	000eeff4 	.word	0x000eeff4

000e7af0 <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   e7af0:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   e7af2:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   e7af4:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   e7af6:	6001      	str	r1, [r0, #0]
   e7af8:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   e7afc:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   e7b00:	3088      	adds	r0, #136	; 0x88
   e7b02:	f7ff fb19 	bl	e7138 <_ZN9IPAddressC1Ev>
}
   e7b06:	4620      	mov	r0, r4
   e7b08:	bd10      	pop	{r4, pc}
	...

000e7b0c <_ZN9TCPClientC1Ei>:
   e7b0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   e7b10:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   e7b12:	2300      	movs	r3, #0
   e7b14:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   e7b16:	4a14      	ldr	r2, [pc, #80]	; (e7b68 <_ZN9TCPClientC1Ei+0x5c>)
   e7b18:	6043      	str	r3, [r0, #4]
   e7b1a:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   e7b1c:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   e7b1e:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   e7b20:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   e7b22:	20a0      	movs	r0, #160	; 0xa0
   e7b24:	460e      	mov	r6, r1
   e7b26:	f7ec fab8 	bl	d409a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   e7b2a:	4605      	mov	r5, r0
   e7b2c:	b110      	cbz	r0, e7b34 <_ZN9TCPClientC1Ei+0x28>
   e7b2e:	4631      	mov	r1, r6
   e7b30:	f7ff ffde 	bl	e7af0 <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   e7b34:	2014      	movs	r0, #20
   e7b36:	f7ec fab0 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   e7b3a:	4603      	mov	r3, r0
   e7b3c:	b128      	cbz	r0, e7b4a <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   e7b3e:	2201      	movs	r2, #1
   e7b40:	6042      	str	r2, [r0, #4]
   e7b42:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   e7b44:	4a09      	ldr	r2, [pc, #36]	; (e7b6c <_ZN9TCPClientC1Ei+0x60>)
   e7b46:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   e7b48:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   e7b4a:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   e7b4c:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   e7b4e:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   e7b50:	b128      	cbz	r0, e7b5e <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   e7b52:	6843      	ldr	r3, [r0, #4]
   e7b54:	3b01      	subs	r3, #1
   e7b56:	6043      	str	r3, [r0, #4]
   e7b58:	b90b      	cbnz	r3, e7b5e <_ZN9TCPClientC1Ei+0x52>
   e7b5a:	f7ff fddf 	bl	e771c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   e7b5e:	4620      	mov	r0, r4
   e7b60:	f7ff fed0 	bl	e7904 <_ZN9TCPClient12flush_bufferEv>
}
   e7b64:	4620      	mov	r0, r4
   e7b66:	bd70      	pop	{r4, r5, r6, pc}
   e7b68:	000ef31c 	.word	0x000ef31c
   e7b6c:	000ef300 	.word	0x000ef300

000e7b70 <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   e7b70:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   e7b72:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   e7b76:	4604      	mov	r4, r0
        : TCPClient(-1) {
   e7b78:	f7ff ffc8 	bl	e7b0c <_ZN9TCPClientC1Ei>
}
   e7b7c:	4620      	mov	r0, r4
   e7b7e:	bd10      	pop	{r4, pc}

000e7b80 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   e7b80:	b510      	push	{r4, lr}
   e7b82:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   e7b84:	6800      	ldr	r0, [r0, #0]
   e7b86:	2800      	cmp	r0, #0
   e7b88:	db01      	blt.n	e7b8e <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   e7b8a:	f7fe f92d 	bl	e5de8 <sock_close>
    }
}
   e7b8e:	4620      	mov	r0, r4
   e7b90:	bd10      	pop	{r4, pc}

000e7b92 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   e7b92:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   e7b94:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   e7b96:	4620      	mov	r0, r4
   e7b98:	f7ff fff2 	bl	e7b80 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   e7b9c:	b124      	cbz	r4, e7ba8 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   e7b9e:	4620      	mov	r0, r4
   e7ba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   e7ba4:	f7ec ba7d 	b.w	d40a2 <_ZdlPv>
   e7ba8:	bd10      	pop	{r4, pc}

000e7baa <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   e7baa:	2200      	movs	r2, #0
   e7bac:	4611      	mov	r1, r2
   e7bae:	6840      	ldr	r0, [r0, #4]
   e7bb0:	f7fe ba20 	b.w	e5ff4 <network_ready>

000e7bb4 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   e7bb4:	2200      	movs	r2, #0
   e7bb6:	4611      	mov	r1, r2
   e7bb8:	6840      	ldr	r0, [r0, #4]
   e7bba:	f7fe ba3b 	b.w	e6034 <network_listening>

000e7bbe <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   e7bbe:	2200      	movs	r2, #0
   e7bc0:	4611      	mov	r1, r2
   e7bc2:	6840      	ldr	r0, [r0, #4]
   e7bc4:	f7fe ba46 	b.w	e6054 <network_get_listen_timeout>

000e7bc8 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   e7bc8:	2200      	movs	r2, #0
   e7bca:	6840      	ldr	r0, [r0, #4]
   e7bcc:	f7fe ba3a 	b.w	e6044 <network_set_listen_timeout>

000e7bd0 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   e7bd0:	2200      	movs	r2, #0
   e7bd2:	f081 0101 	eor.w	r1, r1, #1
   e7bd6:	6840      	ldr	r0, [r0, #4]
   e7bd8:	f7fe ba24 	b.w	e6024 <network_listen>

000e7bdc <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   e7bdc:	2300      	movs	r3, #0
   e7bde:	461a      	mov	r2, r3
   e7be0:	4619      	mov	r1, r3
   e7be2:	6840      	ldr	r0, [r0, #4]
   e7be4:	f7fe ba16 	b.w	e6014 <network_off>

000e7be8 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   e7be8:	2300      	movs	r3, #0
   e7bea:	461a      	mov	r2, r3
   e7bec:	4619      	mov	r1, r3
   e7bee:	6840      	ldr	r0, [r0, #4]
   e7bf0:	f7fe ba08 	b.w	e6004 <network_on>

000e7bf4 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   e7bf4:	2200      	movs	r2, #0
   e7bf6:	4611      	mov	r1, r2
   e7bf8:	6840      	ldr	r0, [r0, #4]
   e7bfa:	f7fe b9eb 	b.w	e5fd4 <network_connecting>

000e7bfe <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   e7bfe:	2200      	movs	r2, #0
   e7c00:	2102      	movs	r1, #2
   e7c02:	6840      	ldr	r0, [r0, #4]
   e7c04:	f7fe b9ee 	b.w	e5fe4 <network_disconnect>

000e7c08 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   e7c08:	2300      	movs	r3, #0
   e7c0a:	461a      	mov	r2, r3
   e7c0c:	6840      	ldr	r0, [r0, #4]
   e7c0e:	f7fe b9d9 	b.w	e5fc4 <network_connect>
	...

000e7c14 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   e7c14:	4b02      	ldr	r3, [pc, #8]	; (e7c20 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   e7c16:	2204      	movs	r2, #4
   e7c18:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   e7c1a:	4a02      	ldr	r2, [pc, #8]	; (e7c24 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   e7c1c:	601a      	str	r2, [r3, #0]
   e7c1e:	4770      	bx	lr
   e7c20:	2003e6ec 	.word	0x2003e6ec
   e7c24:	000ef378 	.word	0x000ef378

000e7c28 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   e7c28:	2300      	movs	r3, #0
   e7c2a:	461a      	mov	r2, r3
   e7c2c:	6840      	ldr	r0, [r0, #4]
   e7c2e:	f7fe b9c9 	b.w	e5fc4 <network_connect>

000e7c32 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   e7c32:	2200      	movs	r2, #0
   e7c34:	2102      	movs	r1, #2
   e7c36:	6840      	ldr	r0, [r0, #4]
   e7c38:	f7fe b9d4 	b.w	e5fe4 <network_disconnect>

000e7c3c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   e7c3c:	2200      	movs	r2, #0
   e7c3e:	4611      	mov	r1, r2
   e7c40:	6840      	ldr	r0, [r0, #4]
   e7c42:	f7fe b9c7 	b.w	e5fd4 <network_connecting>

000e7c46 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   e7c46:	2200      	movs	r2, #0
   e7c48:	4611      	mov	r1, r2
   e7c4a:	6840      	ldr	r0, [r0, #4]
   e7c4c:	f7fe b9d2 	b.w	e5ff4 <network_ready>

000e7c50 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   e7c50:	2300      	movs	r3, #0
   e7c52:	461a      	mov	r2, r3
   e7c54:	4619      	mov	r1, r3
   e7c56:	6840      	ldr	r0, [r0, #4]
   e7c58:	f7fe b9d4 	b.w	e6004 <network_on>

000e7c5c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   e7c5c:	2300      	movs	r3, #0
   e7c5e:	461a      	mov	r2, r3
   e7c60:	4619      	mov	r1, r3
   e7c62:	6840      	ldr	r0, [r0, #4]
   e7c64:	f7fe b9d6 	b.w	e6014 <network_off>

000e7c68 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   e7c68:	2200      	movs	r2, #0
   e7c6a:	f081 0101 	eor.w	r1, r1, #1
   e7c6e:	6840      	ldr	r0, [r0, #4]
   e7c70:	f7fe b9d8 	b.w	e6024 <network_listen>

000e7c74 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   e7c74:	2200      	movs	r2, #0
   e7c76:	6840      	ldr	r0, [r0, #4]
   e7c78:	f7fe b9e4 	b.w	e6044 <network_set_listen_timeout>

000e7c7c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   e7c7c:	2200      	movs	r2, #0
   e7c7e:	4611      	mov	r1, r2
   e7c80:	6840      	ldr	r0, [r0, #4]
   e7c82:	f7fe b9e7 	b.w	e6054 <network_get_listen_timeout>

000e7c86 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   e7c86:	2200      	movs	r2, #0
   e7c88:	4611      	mov	r1, r2
   e7c8a:	6840      	ldr	r0, [r0, #4]
   e7c8c:	f7fe b9d2 	b.w	e6034 <network_listening>

000e7c90 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   e7c90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   e7c94:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   e7c96:	b095      	sub	sp, #84	; 0x54
   e7c98:	4616      	mov	r6, r2
   e7c9a:	460d      	mov	r5, r1
   e7c9c:	4607      	mov	r7, r0
    IPAddress addr;
   e7c9e:	f7ff fa4b 	bl	e7138 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   e7ca2:	4621      	mov	r1, r4
   e7ca4:	2220      	movs	r2, #32
   e7ca6:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   e7ca8:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   e7caa:	f001 ff2a 	bl	e9b02 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   e7cae:	2340      	movs	r3, #64	; 0x40
   e7cb0:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   e7cb2:	4621      	mov	r1, r4
   e7cb4:	466b      	mov	r3, sp
   e7cb6:	aa0c      	add	r2, sp, #48	; 0x30
   e7cb8:	4630      	mov	r0, r6
   e7cba:	f7fd ff3d 	bl	e5b38 <netdb_getaddrinfo>
    if (!r) {
   e7cbe:	4604      	mov	r4, r0
   e7cc0:	2800      	cmp	r0, #0
   e7cc2:	d144      	bne.n	e7d4e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   e7cc4:	4602      	mov	r2, r0
   e7cc6:	2101      	movs	r1, #1
   e7cc8:	6868      	ldr	r0, [r5, #4]
   e7cca:	f7fe f993 	bl	e5ff4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   e7cce:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   e7cd0:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   e7cd2:	4622      	mov	r2, r4
   e7cd4:	6868      	ldr	r0, [r5, #4]
   e7cd6:	f7fe f98d 	bl	e5ff4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   e7cda:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   e7cdc:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   e7cde:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   e7ce0:	2e00      	cmp	r6, #0
   e7ce2:	d034      	beq.n	e7d4e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   e7ce4:	2900      	cmp	r1, #0
   e7ce6:	d132      	bne.n	e7d4e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   e7ce8:	6873      	ldr	r3, [r6, #4]
   e7cea:	2b02      	cmp	r3, #2
   e7cec:	d002      	beq.n	e7cf4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   e7cee:	2b0a      	cmp	r3, #10
   e7cf0:	d009      	beq.n	e7d06 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   e7cf2:	e02a      	b.n	e7d4a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   e7cf4:	f1b8 0f00 	cmp.w	r8, #0
   e7cf8:	d027      	beq.n	e7d4a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   e7cfa:	6971      	ldr	r1, [r6, #20]
   e7cfc:	4638      	mov	r0, r7
   e7cfe:	3104      	adds	r1, #4
   e7d00:	f7ff fa5d 	bl	e71be <_ZN9IPAddressaSEPKh>
   e7d04:	e020      	b.n	e7d48 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   e7d06:	f1b9 0f00 	cmp.w	r9, #0
   e7d0a:	d01e      	beq.n	e7d4a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   e7d0c:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   e7d0e:	2211      	movs	r2, #17
   e7d10:	a801      	add	r0, sp, #4
   e7d12:	f001 fef6 	bl	e9b02 <memset>
                    a.v = 6;
   e7d16:	2306      	movs	r3, #6
   e7d18:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   e7d1c:	ad01      	add	r5, sp, #4
   e7d1e:	f104 0308 	add.w	r3, r4, #8
   e7d22:	3418      	adds	r4, #24
   e7d24:	6818      	ldr	r0, [r3, #0]
   e7d26:	6859      	ldr	r1, [r3, #4]
   e7d28:	462a      	mov	r2, r5
   e7d2a:	c203      	stmia	r2!, {r0, r1}
   e7d2c:	3308      	adds	r3, #8
   e7d2e:	42a3      	cmp	r3, r4
   e7d30:	4615      	mov	r5, r2
   e7d32:	d1f7      	bne.n	e7d24 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   e7d34:	a901      	add	r1, sp, #4
   e7d36:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   e7d38:	ad07      	add	r5, sp, #28
   e7d3a:	f7ff fa0b 	bl	e7154 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   e7d3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   e7d40:	1d3c      	adds	r4, r7, #4
   e7d42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   e7d44:	682b      	ldr	r3, [r5, #0]
   e7d46:	7023      	strb	r3, [r4, #0]
                    ok = true;
   e7d48:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   e7d4a:	69f6      	ldr	r6, [r6, #28]
   e7d4c:	e7c8      	b.n	e7ce0 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   e7d4e:	9800      	ldr	r0, [sp, #0]
   e7d50:	f7fd feea 	bl	e5b28 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   e7d54:	4638      	mov	r0, r7
   e7d56:	b015      	add	sp, #84	; 0x54
   e7d58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000e7d5c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   e7d5c:	4b02      	ldr	r3, [pc, #8]	; (e7d68 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   e7d5e:	4a03      	ldr	r2, [pc, #12]	; (e7d6c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   e7d60:	601a      	str	r2, [r3, #0]
   e7d62:	2200      	movs	r2, #0
   e7d64:	605a      	str	r2, [r3, #4]
   e7d66:	4770      	bx	lr
   e7d68:	2003e6f4 	.word	0x2003e6f4
   e7d6c:	000ef3ac 	.word	0x000ef3ac

000e7d70 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:
#include <cstdarg>

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
   e7d70:	f100 0210 	add.w	r2, r0, #16
    size_t n = 1;
   e7d74:	2301      	movs	r3, #1
    do {
        if (t->type == JSMN_OBJECT) {
   e7d76:	f812 1c10 	ldrb.w	r1, [r2, #-16]
   e7d7a:	2901      	cmp	r1, #1
   e7d7c:	4610      	mov	r0, r2
   e7d7e:	d104      	bne.n	e7d8a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x1a>
            n += t->size * 2; // Number of name and value tokens
   e7d80:	f852 1c04 	ldr.w	r1, [r2, #-4]
   e7d84:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   e7d88:	e004      	b.n	e7d94 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x24>
        } else if (t->type == JSMN_ARRAY) {
   e7d8a:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   e7d8c:	bf04      	itt	eq
   e7d8e:	f852 1c04 	ldreq.w	r1, [r2, #-4]
   e7d92:	185b      	addeq	r3, r3, r1
namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
    do {
   e7d94:	3b01      	subs	r3, #1
   e7d96:	f102 0210 	add.w	r2, r2, #16
   e7d9a:	d1ec      	bne.n	e7d76 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
        }
        ++t;
        --n;
    } while (n);
    return t;
}
   e7d9c:	4770      	bx	lr

000e7d9e <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   e7d9e:	4770      	bx	lr

000e7da0 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   e7da0:	2000      	movs	r0, #0
   e7da2:	4770      	bx	lr

000e7da4 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   e7da4:	b510      	push	{r4, lr}
   e7da6:	2110      	movs	r1, #16
   e7da8:	4604      	mov	r4, r0
   e7daa:	f000 fb47 	bl	e843c <_ZdlPvj>
   e7dae:	4620      	mov	r0, r4
   e7db0:	bd10      	pop	{r4, pc}

000e7db2 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   e7db2:	b508      	push	{r3, lr}
      { delete this; }
   e7db4:	b108      	cbz	r0, e7dba <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   e7db6:	f7ff fff5 	bl	e7da4 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   e7dba:	bd08      	pop	{r3, pc}

000e7dbc <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   e7dbc:	b510      	push	{r4, lr}
      { delete _M_ptr; }
   e7dbe:	68c4      	ldr	r4, [r0, #12]
   e7dc0:	b17c      	cbz	r4, e7de2 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
            json(nullptr),
            freeJson(false) {
    }

    ~JSONData() {
        delete[] tokens;
   e7dc2:	6820      	ldr	r0, [r4, #0]
   e7dc4:	b108      	cbz	r0, e7dca <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0xe>
   e7dc6:	f7ec f96e 	bl	d40a6 <_ZdaPv>
        if (freeJson) {
   e7dca:	7a23      	ldrb	r3, [r4, #8]
   e7dcc:	b11b      	cbz	r3, e7dd6 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1a>
            delete[] json;
   e7dce:	6860      	ldr	r0, [r4, #4]
   e7dd0:	b108      	cbz	r0, e7dd6 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1a>
   e7dd2:	f7ec f968 	bl	d40a6 <_ZdaPv>
   e7dd6:	4620      	mov	r0, r4
   e7dd8:	210c      	movs	r1, #12
   e7dda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   e7dde:	f000 bb2d 	b.w	e843c <_ZdlPvj>
   e7de2:	bd10      	pop	{r4, pc}

000e7de4 <_ZNK5spark9JSONValue4typeEv>:
        return 0.0;
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
   e7de4:	6883      	ldr	r3, [r0, #8]
   e7de6:	b1fb      	cbz	r3, e7e28 <_ZNK5spark9JSONValue4typeEv+0x44>
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
   e7de8:	781a      	ldrb	r2, [r3, #0]
   e7dea:	2a03      	cmp	r2, #3
   e7dec:	d81a      	bhi.n	e7e24 <_ZNK5spark9JSONValue4typeEv+0x40>
   e7dee:	e8df f002 	tbb	[pc, r2]
   e7df2:	1704      	.short	0x1704
   e7df4:	1d02      	.short	0x1d02
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
   e7df6:	2005      	movs	r0, #5
   e7df8:	4770      	bx	lr
    if (!t_) {
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
   e7dfa:	6802      	ldr	r2, [r0, #0]
   e7dfc:	685b      	ldr	r3, [r3, #4]
   e7dfe:	6852      	ldr	r2, [r2, #4]
   e7e00:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   e7e02:	282d      	cmp	r0, #45	; 0x2d
   e7e04:	d014      	beq.n	e7e30 <_ZNK5spark9JSONValue4typeEv+0x4c>
   e7e06:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   e7e0a:	2b09      	cmp	r3, #9
   e7e0c:	d910      	bls.n	e7e30 <_ZNK5spark9JSONValue4typeEv+0x4c>
            return JSON_TYPE_NUMBER;
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   e7e0e:	2874      	cmp	r0, #116	; 0x74
   e7e10:	d010      	beq.n	e7e34 <_ZNK5spark9JSONValue4typeEv+0x50>
   e7e12:	2866      	cmp	r0, #102	; 0x66
   e7e14:	d00e      	beq.n	e7e34 <_ZNK5spark9JSONValue4typeEv+0x50>
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
   e7e16:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   e7e1a:	4258      	negs	r0, r3
   e7e1c:	4158      	adcs	r0, r3
   e7e1e:	4770      	bx	lr
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
   e7e20:	2006      	movs	r0, #6
   e7e22:	4770      	bx	lr
    default:
        return JSON_TYPE_INVALID;
   e7e24:	2000      	movs	r0, #0
   e7e26:	4770      	bx	lr
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
   e7e28:	4618      	mov	r0, r3
   e7e2a:	4770      	bx	lr
            return JSON_TYPE_NULL;
        }
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
   e7e2c:	2004      	movs	r0, #4
   e7e2e:	4770      	bx	lr
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
        if (c == '-' || (c >= '0' && c <= '9')) {
            return JSON_TYPE_NUMBER;
   e7e30:	2003      	movs	r0, #3
   e7e32:	4770      	bx	lr
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
            return JSON_TYPE_BOOL;
   e7e34:	2002      	movs	r0, #2
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
    default:
        return JSON_TYPE_INVALID;
    }
}
   e7e36:	4770      	bx	lr

000e7e38 <_ZNK5spark9JSONValue6toBoolEv>:
        t_ = t;
        d_ = d;
    }
}

bool spark::JSONValue::toBool() const {
   e7e38:	b510      	push	{r4, lr}
   e7e3a:	4604      	mov	r4, r0
    switch (type()) {
   e7e3c:	f7ff ffd2 	bl	e7de4 <_ZNK5spark9JSONValue4typeEv>
   e7e40:	2803      	cmp	r0, #3
   e7e42:	d00d      	beq.n	e7e60 <_ZNK5spark9JSONValue6toBoolEv+0x28>
   e7e44:	2804      	cmp	r0, #4
   e7e46:	d011      	beq.n	e7e6c <_ZNK5spark9JSONValue6toBoolEv+0x34>
   e7e48:	2802      	cmp	r0, #2
   e7e4a:	d128      	bne.n	e7e9e <_ZNK5spark9JSONValue6toBoolEv+0x66>
    case JSON_TYPE_BOOL: {
        const char* const s = d_->json + t_->start;
   e7e4c:	6822      	ldr	r2, [r4, #0]
   e7e4e:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   e7e50:	6852      	ldr	r2, [r2, #4]
   e7e52:	685b      	ldr	r3, [r3, #4]
   e7e54:	5cd0      	ldrb	r0, [r2, r3]
   e7e56:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   e7e5a:	4258      	negs	r0, r3
   e7e5c:	4158      	adcs	r0, r3
   e7e5e:	bd10      	pop	{r4, pc}
    }
    case JSON_TYPE_NUMBER: {
        const char* const s = d_->json + t_->start;
   e7e60:	68a3      	ldr	r3, [r4, #8]
   e7e62:	6822      	ldr	r2, [r4, #0]
   e7e64:	685b      	ldr	r3, [r3, #4]
   e7e66:	6854      	ldr	r4, [r2, #4]
   e7e68:	441c      	add	r4, r3
   e7e6a:	e00b      	b.n	e7e84 <_ZNK5spark9JSONValue6toBoolEv+0x4c>
        return strcmp(s, "0") != 0 && strcmp(s, "0.0") != 0;
    }
    case JSON_TYPE_STRING: {
        const char* const s = d_->json + t_->start;
   e7e6c:	6822      	ldr	r2, [r4, #0]
   e7e6e:	68a3      	ldr	r3, [r4, #8]
   e7e70:	6852      	ldr	r2, [r2, #4]
   e7e72:	685b      	ldr	r3, [r3, #4]
        if (*s == '\0' || strcmp(s, "false") == 0 || strcmp(s, "0") == 0 || strcmp(s, "0.0") == 0) {
   e7e74:	5cd0      	ldrb	r0, [r2, r3]
    case JSON_TYPE_NUMBER: {
        const char* const s = d_->json + t_->start;
        return strcmp(s, "0") != 0 && strcmp(s, "0.0") != 0;
    }
    case JSON_TYPE_STRING: {
        const char* const s = d_->json + t_->start;
   e7e76:	18d4      	adds	r4, r2, r3
        if (*s == '\0' || strcmp(s, "false") == 0 || strcmp(s, "0") == 0 || strcmp(s, "0.0") == 0) {
   e7e78:	b190      	cbz	r0, e7ea0 <_ZNK5spark9JSONValue6toBoolEv+0x68>
   e7e7a:	490a      	ldr	r1, [pc, #40]	; (e7ea4 <_ZNK5spark9JSONValue6toBoolEv+0x6c>)
   e7e7c:	4620      	mov	r0, r4
   e7e7e:	f001 fe7f 	bl	e9b80 <strcmp>
   e7e82:	b168      	cbz	r0, e7ea0 <_ZNK5spark9JSONValue6toBoolEv+0x68>
   e7e84:	4908      	ldr	r1, [pc, #32]	; (e7ea8 <_ZNK5spark9JSONValue6toBoolEv+0x70>)
   e7e86:	4620      	mov	r0, r4
   e7e88:	f001 fe7a 	bl	e9b80 <strcmp>
   e7e8c:	b140      	cbz	r0, e7ea0 <_ZNK5spark9JSONValue6toBoolEv+0x68>
   e7e8e:	4907      	ldr	r1, [pc, #28]	; (e7eac <_ZNK5spark9JSONValue6toBoolEv+0x74>)
   e7e90:	4620      	mov	r0, r4
   e7e92:	f001 fe75 	bl	e9b80 <strcmp>
   e7e96:	3000      	adds	r0, #0
   e7e98:	bf18      	it	ne
   e7e9a:	2001      	movne	r0, #1
   e7e9c:	bd10      	pop	{r4, pc}
            return false; // Empty string, "false", "0" or "0.0"
        }
        return true; // Any other string
    }
    default:
        return false;
   e7e9e:	2000      	movs	r0, #0
    }
}
   e7ea0:	bd10      	pop	{r4, pc}
   e7ea2:	bf00      	nop
   e7ea4:	000edfb9 	.word	0x000edfb9
   e7ea8:	000ef3f6 	.word	0x000ef3f6
   e7eac:	000ef3f4 	.word	0x000ef3f4

000e7eb0 <_ZNK5spark9JSONValue8toDoubleEv>:
    default:
        return 0;
    }
}

double spark::JSONValue::toDouble() const {
   e7eb0:	b510      	push	{r4, lr}
   e7eb2:	4604      	mov	r4, r0
    switch (type()) {
   e7eb4:	f7ff ff96 	bl	e7de4 <_ZNK5spark9JSONValue4typeEv>
   e7eb8:	2802      	cmp	r0, #2
   e7eba:	d00c      	beq.n	e7ed6 <_ZNK5spark9JSONValue8toDoubleEv+0x26>
   e7ebc:	d312      	bcc.n	e7ee4 <_ZNK5spark9JSONValue8toDoubleEv+0x34>
   e7ebe:	2804      	cmp	r0, #4
   e7ec0:	d810      	bhi.n	e7ee4 <_ZNK5spark9JSONValue8toDoubleEv+0x34>
        const char* const s = d_->json + t_->start;
        return *s == 't';
    }
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        const char* const s = d_->json + t_->start;
   e7ec2:	6822      	ldr	r2, [r4, #0]
   e7ec4:	68a3      	ldr	r3, [r4, #8]
        return strtod(s, nullptr);
   e7ec6:	6850      	ldr	r0, [r2, #4]
   e7ec8:	685b      	ldr	r3, [r3, #4]
   e7eca:	2100      	movs	r1, #0
   e7ecc:	4418      	add	r0, r3
    }
    default:
        return 0.0;
    }
}
   e7ece:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return *s == 't';
    }
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        const char* const s = d_->json + t_->start;
        return strtod(s, nullptr);
   e7ed2:	f002 bcbd 	b.w	ea850 <strtod>
}

double spark::JSONValue::toDouble() const {
    switch (type()) {
    case JSON_TYPE_BOOL: {
        const char* const s = d_->json + t_->start;
   e7ed6:	6822      	ldr	r2, [r4, #0]
   e7ed8:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   e7eda:	6852      	ldr	r2, [r2, #4]
   e7edc:	685b      	ldr	r3, [r3, #4]
   e7ede:	5cd3      	ldrb	r3, [r2, r3]
   e7ee0:	2b74      	cmp	r3, #116	; 0x74
   e7ee2:	d002      	beq.n	e7eea <_ZNK5spark9JSONValue8toDoubleEv+0x3a>
    case JSON_TYPE_STRING: {
        const char* const s = d_->json + t_->start;
        return strtod(s, nullptr);
    }
    default:
        return 0.0;
   e7ee4:	ed9f 0b02 	vldr	d0, [pc, #8]	; e7ef0 <_ZNK5spark9JSONValue8toDoubleEv+0x40>
   e7ee8:	bd10      	pop	{r4, pc}

double spark::JSONValue::toDouble() const {
    switch (type()) {
    case JSON_TYPE_BOOL: {
        const char* const s = d_->json + t_->start;
        return *s == 't';
   e7eea:	ed9f 0b03 	vldr	d0, [pc, #12]	; e7ef8 <_ZNK5spark9JSONValue8toDoubleEv+0x48>
        return strtod(s, nullptr);
    }
    default:
        return 0.0;
    }
}
   e7eee:	bd10      	pop	{r4, pc}
	...
   e7efc:	3ff00000 	.word	0x3ff00000

000e7f00 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj>:
        return JSONValue();
    }
    return JSONValue(d->tokens, d);
}

bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   e7f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e7f04:	b087      	sub	sp, #28
    jsmn_parser parser;
    parser.size = sizeof(jsmn_parser);
   e7f06:	ad06      	add	r5, sp, #24
        return JSONValue();
    }
    return JSONValue(d->tokens, d);
}

bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   e7f08:	4699      	mov	r9, r3
    jsmn_parser parser;
    parser.size = sizeof(jsmn_parser);
   e7f0a:	2310      	movs	r3, #16
   e7f0c:	f845 3d10 	str.w	r3, [r5, #-16]!
    jsmn_init(&parser, nullptr);
    const int n = jsmn_parse(&parser, json, size, nullptr, 0, nullptr); // Get number of tokens
   e7f10:	2400      	movs	r4, #0
        return JSONValue();
    }
    return JSONValue(d->tokens, d);
}

bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   e7f12:	4607      	mov	r7, r0
   e7f14:	4688      	mov	r8, r1
    jsmn_parser parser;
    parser.size = sizeof(jsmn_parser);
    jsmn_init(&parser, nullptr);
   e7f16:	4628      	mov	r0, r5
   e7f18:	2100      	movs	r1, #0
        return JSONValue();
    }
    return JSONValue(d->tokens, d);
}

bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   e7f1a:	4692      	mov	sl, r2
    jsmn_parser parser;
    parser.size = sizeof(jsmn_parser);
    jsmn_init(&parser, nullptr);
   e7f1c:	f7fd fff4 	bl	e5f08 <jsmn_init>
    const int n = jsmn_parse(&parser, json, size, nullptr, 0, nullptr); // Get number of tokens
   e7f20:	9401      	str	r4, [sp, #4]
   e7f22:	9400      	str	r4, [sp, #0]
   e7f24:	4623      	mov	r3, r4
   e7f26:	4642      	mov	r2, r8
   e7f28:	4639      	mov	r1, r7
   e7f2a:	4628      	mov	r0, r5
   e7f2c:	f7fd fff4 	bl	e5f18 <jsmn_parse>
    if (n <= 0) {
   e7f30:	1e06      	subs	r6, r0, #0
   e7f32:	dd25      	ble.n	e7f80 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x80>
        return false; // Parsing error
    }
    std::unique_ptr<jsmntok_t[]> t(new(std::nothrow) jsmntok_t[n]);
   e7f34:	f1b6 6ffe 	cmp.w	r6, #133169152	; 0x7f00000
   e7f38:	bf94      	ite	ls
   e7f3a:	0130      	lslls	r0, r6, #4
   e7f3c:	f04f 30ff 	movhi.w	r0, #4294967295
   e7f40:	4911      	ldr	r1, [pc, #68]	; (e7f88 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x88>)
   e7f42:	f000 fa7d 	bl	e8440 <_ZnajRKSt9nothrow_t>
    if (!t) {
   e7f46:	4604      	mov	r4, r0
   e7f48:	b1d0      	cbz	r0, e7f80 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x80>
        return false;
    }
    jsmn_init(&parser, nullptr); // Reset parser
   e7f4a:	2100      	movs	r1, #0
   e7f4c:	4628      	mov	r0, r5
    if (jsmn_parse(&parser, json, size, t.get(), n, nullptr) <= 0) {
   e7f4e:	f04f 0b00 	mov.w	fp, #0
    }
    std::unique_ptr<jsmntok_t[]> t(new(std::nothrow) jsmntok_t[n]);
    if (!t) {
        return false;
    }
    jsmn_init(&parser, nullptr); // Reset parser
   e7f52:	f7fd ffd9 	bl	e5f08 <jsmn_init>
    if (jsmn_parse(&parser, json, size, t.get(), n, nullptr) <= 0) {
   e7f56:	e88d 0840 	stmia.w	sp, {r6, fp}
   e7f5a:	4623      	mov	r3, r4
   e7f5c:	4642      	mov	r2, r8
   e7f5e:	4639      	mov	r1, r7
   e7f60:	4628      	mov	r0, r5
   e7f62:	f7fd ffd9 	bl	e5f18 <jsmn_parse>
   e7f66:	4558      	cmp	r0, fp
   e7f68:	dd05      	ble.n	e7f76 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x76>
        return false;
    }
    *tokens = t.release();
   e7f6a:	f8ca 4000 	str.w	r4, [sl]
    *count = n;
    return true;
   e7f6e:	2001      	movs	r0, #1
    jsmn_init(&parser, nullptr); // Reset parser
    if (jsmn_parse(&parser, json, size, t.get(), n, nullptr) <= 0) {
        return false;
    }
    *tokens = t.release();
    *count = n;
   e7f70:	f8c9 6000 	str.w	r6, [r9]
    return true;
   e7f74:	e005      	b.n	e7f82 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x82>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   e7f76:	4620      	mov	r0, r4
   e7f78:	f7ec f895 	bl	d40a6 <_ZdaPv>
    if (!t) {
        return false;
    }
    jsmn_init(&parser, nullptr); // Reset parser
    if (jsmn_parse(&parser, json, size, t.get(), n, nullptr) <= 0) {
        return false;
   e7f7c:	4658      	mov	r0, fp
   e7f7e:	e000      	b.n	e7f82 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x82>
    if (n <= 0) {
        return false; // Parsing error
    }
    std::unique_ptr<jsmntok_t[]> t(new(std::nothrow) jsmntok_t[n]);
    if (!t) {
        return false;
   e7f80:	4620      	mov	r0, r4
        return false;
    }
    *tokens = t.release();
    *count = n;
    return true;
}
   e7f82:	b007      	add	sp, #28
   e7f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e7f88:	000ef40f 	.word	0x000ef40f

000e7f8c <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc>:
        ++t;
    }
    return true;
}

bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   e7f8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    char *str = json + t->start; // Destination string
   e7f90:	6843      	ldr	r3, [r0, #4]
    const char* const end = json + t->end; // End of the source string
   e7f92:	6886      	ldr	r6, [r0, #8]
    }
    return true;
}

bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
    char *str = json + t->start; // Destination string
   e7f94:	440b      	add	r3, r1
        ++t;
    }
    return true;
}

bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   e7f96:	4688      	mov	r8, r1
    char *str = json + t->start; // Destination string
    const char* const end = json + t->end; // End of the source string
   e7f98:	440e      	add	r6, r1
        ++t;
    }
    return true;
}

bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   e7f9a:	4607      	mov	r7, r0
    char *str = json + t->start; // Destination string
    const char* const end = json + t->end; // End of the source string
    const char *s1 = str; // Beginning of an unescaped sequence
    const char *s = s1;
   e7f9c:	461c      	mov	r4, r3
}

bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
    char *str = json + t->start; // Destination string
    const char* const end = json + t->end; // End of the source string
    const char *s1 = str; // Beginning of an unescaped sequence
   e7f9e:	4619      	mov	r1, r3
                    break;
                case 't': // Tab
                    *str = 0x09;
                    break;
                case 'n': // Line feed
                    *str = 0x0a;
   e7fa0:	f04f 0a0a 	mov.w	sl, #10
                    break;
                case 'f': // Form feed
                    *str = 0x0c;
                    break;
                case 'r': // Carriage return
                    *str = 0x0d;
   e7fa4:	f04f 0b0d 	mov.w	fp, #13
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
    char *str = json + t->start; // Destination string
    const char* const end = json + t->end; // End of the source string
    const char *s1 = str; // Beginning of an unescaped sequence
    const char *s = s1;
    while (s != end) {
   e7fa8:	42b4      	cmp	r4, r6
   e7faa:	d05d      	beq.n	e8068 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xdc>
        if (*s == '\\') {
   e7fac:	4625      	mov	r5, r4
   e7fae:	f815 2b01 	ldrb.w	r2, [r5], #1
   e7fb2:	2a5c      	cmp	r2, #92	; 0x5c
   e7fb4:	d156      	bne.n	e8064 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd8>
            if (s != s1) {
   e7fb6:	42a1      	cmp	r1, r4
   e7fb8:	d007      	beq.n	e7fca <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x3e>
                const size_t n = s - s1;
   e7fba:	ebc1 0904 	rsb	r9, r1, r4
                memmove(str, s1, n); // Shift preceeding characters
   e7fbe:	4618      	mov	r0, r3
   e7fc0:	464a      	mov	r2, r9
   e7fc2:	f001 fd83 	bl	e9acc <memmove>
   e7fc6:	4603      	mov	r3, r0
                str += n;
   e7fc8:	444b      	add	r3, r9
                s1 = s;
            }
            ++s;
            if (s == end) {
   e7fca:	42ae      	cmp	r6, r5
   e7fcc:	d05b      	beq.n	e8086 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xfa>
                return false; // Unexpected end of string
            }
            if (*s == 'u') { // Arbitrary character, e.g. "\u001f"
   e7fce:	7862      	ldrb	r2, [r4, #1]
   e7fd0:	2a75      	cmp	r2, #117	; 0x75
   e7fd2:	d121      	bne.n	e8018 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x8c>
                ++s;
   e7fd4:	1ca1      	adds	r1, r4, #2
                if (end - s < 4) {
   e7fd6:	1a72      	subs	r2, r6, r1
   e7fd8:	2a03      	cmp	r2, #3
   e7fda:	dd54      	ble.n	e8086 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xfa>
    return t;
}

bool hexToInt(const char *s, size_t size, uint32_t *val) {
    uint32_t v = 0;
    const char* const end = s + size;
   e7fdc:	1da5      	adds	r5, r4, #6
    } while (n);
    return t;
}

bool hexToInt(const char *s, size_t size, uint32_t *val) {
    uint32_t v = 0;
   e7fde:	f04f 0e00 	mov.w	lr, #0
    const char* const end = s + size;
    while (s != end) {
   e7fe2:	42a9      	cmp	r1, r5
   e7fe4:	d052      	beq.n	e808c <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x100>
        uint32_t n = 0;
        const char c = *s;
   e7fe6:	f811 0b01 	ldrb.w	r0, [r1], #1
        if (c >= '0' && c <= '9') {
   e7fea:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
   e7fee:	fa5f fc82 	uxtb.w	ip, r2
   e7ff2:	f1bc 0f09 	cmp.w	ip, #9
   e7ff6:	d90c      	bls.n	e8012 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x86>
            n = c - '0';
        } else if (c >= 'a' && c <= 'f') {
   e7ff8:	f1a0 0261 	sub.w	r2, r0, #97	; 0x61
   e7ffc:	2a05      	cmp	r2, #5
   e7ffe:	d802      	bhi.n	e8006 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x7a>
            n = c - 'a' + 10;
   e8000:	f1a0 0257 	sub.w	r2, r0, #87	; 0x57
   e8004:	e005      	b.n	e8012 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x86>
        } else if (c >= 'A' && c <= 'F') {
   e8006:	f1a0 0241 	sub.w	r2, r0, #65	; 0x41
   e800a:	2a05      	cmp	r2, #5
   e800c:	d83b      	bhi.n	e8086 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xfa>
            n = c - 'A' + 10;
   e800e:	f1a0 0237 	sub.w	r2, r0, #55	; 0x37
        } else {
            return false; // Error
        }
        v = (v << 4) | n;
   e8012:	ea42 1e0e 	orr.w	lr, r2, lr, lsl #4
   e8016:	e7e4      	b.n	e7fe2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x56>
                    ++str;
                    s1 += 6; // Skip escaped sequence
                }
                s += 4;
            } else {
                switch (*s) {
   e8018:	2a62      	cmp	r2, #98	; 0x62
   e801a:	d014      	beq.n	e8046 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xba>
   e801c:	d806      	bhi.n	e802c <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xa0>
   e801e:	2a2f      	cmp	r2, #47	; 0x2f
   e8020:	d013      	beq.n	e804a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xbe>
   e8022:	2a5c      	cmp	r2, #92	; 0x5c
   e8024:	d011      	beq.n	e804a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xbe>
   e8026:	2a22      	cmp	r2, #34	; 0x22
   e8028:	d12d      	bne.n	e8086 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xfa>
   e802a:	e00e      	b.n	e804a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xbe>
   e802c:	2a6e      	cmp	r2, #110	; 0x6e
   e802e:	d00e      	beq.n	e804e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xc2>
   e8030:	d803      	bhi.n	e803a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xae>
   e8032:	2a66      	cmp	r2, #102	; 0x66
   e8034:	d127      	bne.n	e8086 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xfa>
                    break;
                case 'n': // Line feed
                    *str = 0x0a;
                    break;
                case 'f': // Form feed
                    *str = 0x0c;
   e8036:	220c      	movs	r2, #12
   e8038:	e007      	b.n	e804a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xbe>
                    ++str;
                    s1 += 6; // Skip escaped sequence
                }
                s += 4;
            } else {
                switch (*s) {
   e803a:	2a72      	cmp	r2, #114	; 0x72
   e803c:	d00a      	beq.n	e8054 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xc8>
   e803e:	2a74      	cmp	r2, #116	; 0x74
   e8040:	d121      	bne.n	e8086 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xfa>
                    break;
                case 'b': // Backspace
                    *str = 0x08;
                    break;
                case 't': // Tab
                    *str = 0x09;
   e8042:	2209      	movs	r2, #9
   e8044:	e001      	b.n	e804a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xbe>
                case '\\':
                case '/':
                    *str = *s;
                    break;
                case 'b': // Backspace
                    *str = 0x08;
   e8046:	f04f 0208 	mov.w	r2, #8
   e804a:	701a      	strb	r2, [r3, #0]
                    break;
   e804c:	e004      	b.n	e8058 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xcc>
                case 't': // Tab
                    *str = 0x09;
                    break;
                case 'n': // Line feed
                    *str = 0x0a;
   e804e:	f883 a000 	strb.w	sl, [r3]
                    break;
   e8052:	e001      	b.n	e8058 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xcc>
                case 'f': // Form feed
                    *str = 0x0c;
                    break;
                case 'r': // Carriage return
                    *str = 0x0d;
   e8054:	f883 b000 	strb.w	fp, [r3]
                    break;
                default:
                    return false; // Invalid escaped sequence
                }
                ++str;
                ++s;
   e8058:	3402      	adds	r4, #2
                    *str = 0x0d;
                    break;
                default:
                    return false; // Invalid escaped sequence
                }
                ++str;
   e805a:	3301      	adds	r3, #1
                ++s;
                s1 = s; // Skip escaped sequence
   e805c:	4625      	mov	r5, r4
   e805e:	4621      	mov	r1, r4
   e8060:	462c      	mov	r4, r5
   e8062:	e7a1      	b.n	e7fa8 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x1c>
            }
        } else {
            ++s;
   e8064:	460c      	mov	r4, r1
   e8066:	e7fa      	b.n	e805e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
        }
    }
    if (s != s1) {
   e8068:	42a1      	cmp	r1, r4
   e806a:	d006      	beq.n	e807a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xee>
        const size_t n = s - s1;
   e806c:	1a64      	subs	r4, r4, r1
        memmove(str, s1, n); // Shift remaining characters
   e806e:	4618      	mov	r0, r3
   e8070:	4622      	mov	r2, r4
   e8072:	f001 fd2b 	bl	e9acc <memmove>
   e8076:	4603      	mov	r3, r0
        str += n;
   e8078:	4423      	add	r3, r4
    }
    t->end = str - json; // Update string length
   e807a:	ebc8 0303 	rsb	r3, r8, r3
   e807e:	60bb      	str	r3, [r7, #8]
    return true;
   e8080:	2001      	movs	r0, #1
   e8082:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    break;
                case 'r': // Carriage return
                    *str = 0x0d;
                    break;
                default:
                    return false; // Invalid escaped sequence
   e8086:	2000      	movs	r0, #0
   e8088:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                }
                uint32_t u = 0; // Unicode code point or UTF-16 surrogate pair
                if (!hexToInt(s, 4, &u)) {
                    return false; // Invalid escaped sequence
                }
                if (u <= 0x7f) { // Processing only code points within the basic latin block
   e808c:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
   e8090:	d8e5      	bhi.n	e805e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                    *str = u;
   e8092:	f803 eb01 	strb.w	lr, [r3], #1
                    ++str;
                    s1 += 6; // Skip escaped sequence
   e8096:	462c      	mov	r4, r5
   e8098:	e7e1      	b.n	e805e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>

000e809a <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc>:
    *tokens = t.release();
    *count = n;
    return true;
}

bool spark::JSONValue::stringize(jsmntok_t *t, size_t count, char *json) {
   e809a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e809c:	4604      	mov	r4, r0
   e809e:	4615      	mov	r5, r2
    const jsmntok_t* const end = t + count;
   e80a0:	eb00 1601 	add.w	r6, r0, r1, lsl #4
    while (t != end) {
        if (t->type == JSMN_STRING) {
            if (!unescape(t, json)) {
                return false; // Malformed string
            }
            json[t->end] = '\0';
   e80a4:	2700      	movs	r7, #0
    return true;
}

bool spark::JSONValue::stringize(jsmntok_t *t, size_t count, char *json) {
    const jsmntok_t* const end = t + count;
    while (t != end) {
   e80a6:	42b4      	cmp	r4, r6
   e80a8:	d00f      	beq.n	e80ca <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x30>
        if (t->type == JSMN_STRING) {
   e80aa:	7823      	ldrb	r3, [r4, #0]
   e80ac:	2b03      	cmp	r3, #3
   e80ae:	d107      	bne.n	e80c0 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x26>
            if (!unescape(t, json)) {
   e80b0:	4629      	mov	r1, r5
   e80b2:	4620      	mov	r0, r4
   e80b4:	f7ff ff6a 	bl	e7f8c <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc>
   e80b8:	b140      	cbz	r0, e80cc <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x32>
                return false; // Malformed string
            }
            json[t->end] = '\0';
   e80ba:	68a3      	ldr	r3, [r4, #8]
   e80bc:	54ef      	strb	r7, [r5, r3]
   e80be:	e002      	b.n	e80c6 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x2c>
        } else if (t->type == JSMN_PRIMITIVE) {
   e80c0:	b90b      	cbnz	r3, e80c6 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x2c>
            json[t->end] = '\0';
   e80c2:	68a2      	ldr	r2, [r4, #8]
   e80c4:	54ab      	strb	r3, [r5, r2]
        }
        ++t;
   e80c6:	3410      	adds	r4, #16
    return true;
}

bool spark::JSONValue::stringize(jsmntok_t *t, size_t count, char *json) {
    const jsmntok_t* const end = t + count;
    while (t != end) {
   e80c8:	e7ed      	b.n	e80a6 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0xc>
        } else if (t->type == JSMN_PRIMITIVE) {
            json[t->end] = '\0';
        }
        ++t;
    }
    return true;
   e80ca:	2001      	movs	r0, #1
}
   e80cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000e80ce <_ZN5spark18JSONObjectIterator4nextEv>:
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
   e80ce:	b510      	push	{r4, lr}
    if (!n_) {
   e80d0:	6943      	ldr	r3, [r0, #20]
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
   e80d2:	4604      	mov	r4, r0
    if (!n_) {
   e80d4:	b15b      	cbz	r3, e80ee <_ZN5spark18JSONObjectIterator4nextEv+0x20>
        return false;
    }
    k_ = t_; // Name
   e80d6:	6880      	ldr	r0, [r0, #8]
   e80d8:	60e0      	str	r0, [r4, #12]
    ++t_;
    v_ = t_; // Value
    --n_;
   e80da:	3b01      	subs	r3, #1
bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
    }
    k_ = t_; // Name
    ++t_;
   e80dc:	3010      	adds	r0, #16
   e80de:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   e80e0:	6120      	str	r0, [r4, #16]
    --n_;
   e80e2:	6163      	str	r3, [r4, #20]
    if (n_) {
   e80e4:	b12b      	cbz	r3, e80f2 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        t_ = skipToken(t_);
   e80e6:	f7ff fe43 	bl	e7d70 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   e80ea:	60a0      	str	r0, [r4, #8]
   e80ec:	e001      	b.n	e80f2 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
    }
}

bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
   e80ee:	4618      	mov	r0, r3
   e80f0:	bd10      	pop	{r4, pc}
    v_ = t_; // Value
    --n_;
    if (n_) {
        t_ = skipToken(t_);
    }
    return true;
   e80f2:	2001      	movs	r0, #1
}
   e80f4:	bd10      	pop	{r4, pc}

000e80f6 <_ZN5spark17JSONArrayIterator4nextEv>:
        n_ = t->size; // Number of elements
        d_ = d;
    }
}

bool spark::JSONArrayIterator::next() {
   e80f6:	b510      	push	{r4, lr}
    if (!n_) {
   e80f8:	6903      	ldr	r3, [r0, #16]
        n_ = t->size; // Number of elements
        d_ = d;
    }
}

bool spark::JSONArrayIterator::next() {
   e80fa:	4604      	mov	r4, r0
    if (!n_) {
   e80fc:	b143      	cbz	r3, e8110 <_ZN5spark17JSONArrayIterator4nextEv+0x1a>
        return false;
    }
    v_ = t_;
   e80fe:	6880      	ldr	r0, [r0, #8]
   e8100:	60e0      	str	r0, [r4, #12]
    --n_;
   e8102:	3b01      	subs	r3, #1
   e8104:	6123      	str	r3, [r4, #16]
    if (n_) {
   e8106:	b12b      	cbz	r3, e8114 <_ZN5spark17JSONArrayIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   e8108:	f7ff fe32 	bl	e7d70 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   e810c:	60a0      	str	r0, [r4, #8]
   e810e:	e001      	b.n	e8114 <_ZN5spark17JSONArrayIterator4nextEv+0x1e>
    }
}

bool spark::JSONArrayIterator::next() {
    if (!n_) {
        return false;
   e8110:	4618      	mov	r0, r3
   e8112:	bd10      	pop	{r4, pc}
    v_ = t_;
    --n_;
    if (n_) {
        t_ = skipToken(t_);
    }
    return true;
   e8114:	2001      	movs	r0, #1
}
   e8116:	bd10      	pop	{r4, pc}

000e8118 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
    t->end = str - json; // Update string length
    return true;
}

// spark::JSONString
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   e8118:	b510      	push	{r4, lr}

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   e811a:	2300      	movs	r3, #0
   e811c:	4604      	mov	r4, r0
   e811e:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   e8120:	6043      	str	r3, [r0, #4]
}

// spark::JSONString
inline spark::JSONString::JSONString() :
        s_(""),
        n_(0) {
   e8122:	4810      	ldr	r0, [pc, #64]	; (e8164 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x4c>)
   e8124:	60a0      	str	r0, [r4, #8]
   e8126:	60e3      	str	r3, [r4, #12]
        JSONString() {
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   e8128:	b1d1      	cbz	r1, e8160 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
   e812a:	780b      	ldrb	r3, [r1, #0]
   e812c:	2b03      	cmp	r3, #3
   e812e:	d006      	beq.n	e813e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   e8130:	b9b3      	cbnz	r3, e8160 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   e8132:	6813      	ldr	r3, [r2, #0]
   e8134:	6858      	ldr	r0, [r3, #4]
   e8136:	684b      	ldr	r3, [r1, #4]
   e8138:	5cc3      	ldrb	r3, [r0, r3]
   e813a:	2b6e      	cmp	r3, #110	; 0x6e
   e813c:	d008      	beq.n	e8150 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x38>
            s_ = d->json + t->start;
   e813e:	6813      	ldr	r3, [r2, #0]
   e8140:	6858      	ldr	r0, [r3, #4]
   e8142:	684b      	ldr	r3, [r1, #4]
   e8144:	4403      	add	r3, r0
   e8146:	60a3      	str	r3, [r4, #8]
            n_ = t->end - t->start;
   e8148:	688b      	ldr	r3, [r1, #8]
   e814a:	6849      	ldr	r1, [r1, #4]
   e814c:	1a5b      	subs	r3, r3, r1
   e814e:	60e3      	str	r3, [r4, #12]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   e8150:	4611      	mov	r1, r2
   e8152:	4620      	mov	r0, r4
   e8154:	f851 3b04 	ldr.w	r3, [r1], #4
   e8158:	f840 3b04 	str.w	r3, [r0], #4
   e815c:	f7fe fb42 	bl	e67e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        }
        d_ = d;
    }
}
   e8160:	4620      	mov	r0, r4
   e8162:	bd10      	pop	{r4, pc}
   e8164:	000ed091 	.word	0x000ed091

000e8168 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   e8168:	2300      	movs	r3, #0
bool spark::JSONString::operator==(const JSONString &str) const {
    return n_ == str.n_ && strncmp(s_, str.s_, n_) == 0;
}

// spark::JSONObjectIterator
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   e816a:	b510      	push	{r4, lr}
   e816c:	4604      	mov	r4, r0
   e816e:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   e8170:	6043      	str	r3, [r0, #4]
// spark::JSONObjectIterator
inline spark::JSONObjectIterator::JSONObjectIterator() :
        t_(nullptr),
        k_(nullptr),
        v_(nullptr),
        n_(0) {
   e8172:	6083      	str	r3, [r0, #8]
   e8174:	60c3      	str	r3, [r0, #12]
   e8176:	6103      	str	r3, [r0, #16]
   e8178:	6143      	str	r3, [r0, #20]
        JSONObjectIterator() {
    if (t && t->type == JSMN_OBJECT) {
   e817a:	b171      	cbz	r1, e819a <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
   e817c:	780b      	ldrb	r3, [r1, #0]
   e817e:	2b01      	cmp	r3, #1
   e8180:	d10b      	bne.n	e819a <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
        t_ = t + 1; // First property's name
   e8182:	f101 0310 	add.w	r3, r1, #16
   e8186:	6083      	str	r3, [r0, #8]
        n_ = t->size; // Number of properties
   e8188:	68cb      	ldr	r3, [r1, #12]
   e818a:	6143      	str	r3, [r0, #20]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   e818c:	4611      	mov	r1, r2
   e818e:	f851 3b04 	ldr.w	r3, [r1], #4
   e8192:	f840 3b04 	str.w	r3, [r0], #4
   e8196:	f7fe fb25 	bl	e67e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        d_ = d;
    }
}
   e819a:	4620      	mov	r0, r4
   e819c:	bd10      	pop	{r4, pc}

000e819e <_ZN5spark17JSONArrayIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   e819e:	2300      	movs	r3, #0
    }
    return true;
}

// spark::JSONArrayIterator
spark::JSONArrayIterator::JSONArrayIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   e81a0:	b510      	push	{r4, lr}
   e81a2:	4604      	mov	r4, r0
   e81a4:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   e81a6:	6043      	str	r3, [r0, #4]

// spark::JSONArrayIterator
inline spark::JSONArrayIterator::JSONArrayIterator() :
        t_(nullptr),
        v_(nullptr),
        n_(0) {
   e81a8:	6083      	str	r3, [r0, #8]
   e81aa:	60c3      	str	r3, [r0, #12]
   e81ac:	6103      	str	r3, [r0, #16]
        JSONArrayIterator() {
    if (t && t->type == JSMN_ARRAY) {
   e81ae:	b171      	cbz	r1, e81ce <_ZN5spark17JSONArrayIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x30>
   e81b0:	780b      	ldrb	r3, [r1, #0]
   e81b2:	2b02      	cmp	r3, #2
   e81b4:	d10b      	bne.n	e81ce <_ZN5spark17JSONArrayIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x30>
        t_ = t + 1; // First element
   e81b6:	f101 0310 	add.w	r3, r1, #16
   e81ba:	6083      	str	r3, [r0, #8]
        n_ = t->size; // Number of elements
   e81bc:	68cb      	ldr	r3, [r1, #12]
   e81be:	6103      	str	r3, [r0, #16]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   e81c0:	4611      	mov	r1, r2
   e81c2:	f851 3b04 	ldr.w	r3, [r1], #4
   e81c6:	f840 3b04 	str.w	r3, [r0], #4
   e81ca:	f7fe fb0b 	bl	e67e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        d_ = d;
    }
}
   e81ce:	4620      	mov	r0, r4
   e81d0:	bd10      	pop	{r4, pc}

000e81d2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   e81d2:	2300      	movs	r3, #0
        }
    }
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   e81d4:	b510      	push	{r4, lr}
   e81d6:	4604      	mov	r4, r0
   e81d8:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   e81da:	6043      	str	r3, [r0, #4]
        JSONValue() {
    if (t) {
        t_ = t;
   e81dc:	6081      	str	r1, [r0, #8]
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
        JSONValue() {
    if (t) {
   e81de:	b131      	cbz	r1, e81ee <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x1c>
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   e81e0:	4611      	mov	r1, r2
   e81e2:	f851 3b04 	ldr.w	r3, [r1], #4
   e81e6:	f840 3b04 	str.w	r3, [r0], #4
   e81ea:	f7fe fafb 	bl	e67e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        t_ = t;
        d_ = d;
    }
}
   e81ee:	4620      	mov	r0, r4
   e81f0:	bd10      	pop	{r4, pc}
	...

000e81f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   e81f4:	b538      	push	{r3, r4, r5, lr}
   e81f6:	2300      	movs	r3, #0
   e81f8:	4604      	mov	r4, r0
   e81fa:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   e81fc:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   e81fe:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   e8200:	f7eb ff4b 	bl	d409a <_Znwj>
   e8204:	b128      	cbz	r0, e8212 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   e8206:	2301      	movs	r3, #1
   e8208:	6043      	str	r3, [r0, #4]
   e820a:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   e820c:	4b02      	ldr	r3, [pc, #8]	; (e8218 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_+0x24>)
   e820e:	6003      	str	r3, [r0, #0]
   e8210:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   e8212:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   e8214:	4620      	mov	r0, r4
   e8216:	bd38      	pop	{r3, r4, r5, pc}
   e8218:	000ef3e0 	.word	0x000ef3e0

000e821c <_ZN5spark9JSONValue9parseCopyEPKcj>:
        return JSONValue();
    }
    return JSONValue(t, d);
}

spark::JSONValue spark::JSONValue::parseCopy(const char *json, size_t size) {
   e821c:	b5f0      	push	{r4, r5, r6, r7, lr}
   e821e:	4604      	mov	r4, r0
   e8220:	b087      	sub	sp, #28
   e8222:	460e      	mov	r6, r1
    detail::JSONDataPtr d(new(std::nothrow) detail::JSONData);
   e8224:	200c      	movs	r0, #12
   e8226:	4926      	ldr	r1, [pc, #152]	; (e82c0 <_ZN5spark9JSONValue9parseCopyEPKcj+0xa4>)
        return JSONValue();
    }
    return JSONValue(t, d);
}

spark::JSONValue spark::JSONValue::parseCopy(const char *json, size_t size) {
   e8228:	4615      	mov	r5, r2
    detail::JSONDataPtr d(new(std::nothrow) detail::JSONData);
   e822a:	f000 f90b 	bl	e8444 <_ZnwjRKSt9nothrow_t>
   e822e:	4601      	mov	r1, r0
   e8230:	b118      	cbz	r0, e823a <_ZN5spark9JSONValue9parseCopyEPKcj+0x1e>
    bool freeJson;

    JSONData() :
            tokens(nullptr),
            json(nullptr),
            freeJson(false) {
   e8232:	2300      	movs	r3, #0
   e8234:	6003      	str	r3, [r0, #0]
   e8236:	6043      	str	r3, [r0, #4]
   e8238:	7203      	strb	r3, [r0, #8]
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   e823a:	a803      	add	r0, sp, #12
   e823c:	9102      	str	r1, [sp, #8]
   e823e:	f7ff ffd9 	bl	e81f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_>
   e8242:	9a02      	ldr	r2, [sp, #8]
    return JSONValue(t, d);
}

spark::JSONValue spark::JSONValue::parseCopy(const char *json, size_t size) {
    detail::JSONDataPtr d(new(std::nothrow) detail::JSONData);
    if (!d) {
   e8244:	b922      	cbnz	r2, e8250 <_ZN5spark9JSONValue9parseCopyEPKcj+0x34>

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   e8246:	2300      	movs	r3, #0
   e8248:	6023      	str	r3, [r4, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   e824a:	6063      	str	r3, [r4, #4]

} // namespace spark

// spark::JSONValue
inline spark::JSONValue::JSONValue() :
        t_(nullptr) {
   e824c:	60a3      	str	r3, [r4, #8]
   e824e:	e031      	b.n	e82b4 <_ZN5spark9JSONValue9parseCopyEPKcj+0x98>
        return JSONValue();
    }
    size_t tokenCount = 0;
   e8250:	ab06      	add	r3, sp, #24
   e8252:	2100      	movs	r1, #0
   e8254:	f843 1d14 	str.w	r1, [r3, #-20]!
    if (!tokenize(json, size, &d->tokens, &tokenCount)) {
   e8258:	4630      	mov	r0, r6
   e825a:	4629      	mov	r1, r5
   e825c:	f7ff fe50 	bl	e7f00 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj>
   e8260:	2800      	cmp	r0, #0
   e8262:	d0f0      	beq.n	e8246 <_ZN5spark9JSONValue9parseCopyEPKcj+0x2a>
        return JSONValue();
    }
    d->json = new(std::nothrow) char[size + 1];
   e8264:	4916      	ldr	r1, [pc, #88]	; (e82c0 <_ZN5spark9JSONValue9parseCopyEPKcj+0xa4>)
   e8266:	9f02      	ldr	r7, [sp, #8]
   e8268:	1c68      	adds	r0, r5, #1
   e826a:	f000 f8e9 	bl	e8440 <_ZnajRKSt9nothrow_t>
    if (!d->json) {
   e826e:	9b02      	ldr	r3, [sp, #8]
    }
    size_t tokenCount = 0;
    if (!tokenize(json, size, &d->tokens, &tokenCount)) {
        return JSONValue();
    }
    d->json = new(std::nothrow) char[size + 1];
   e8270:	6078      	str	r0, [r7, #4]
    if (!d->json) {
   e8272:	6858      	ldr	r0, [r3, #4]
   e8274:	2800      	cmp	r0, #0
   e8276:	d0e6      	beq.n	e8246 <_ZN5spark9JSONValue9parseCopyEPKcj+0x2a>
        return JSONValue();
    }
    memcpy(d->json, json, size); // TODO: Copy only token data
   e8278:	462a      	mov	r2, r5
   e827a:	4631      	mov	r1, r6
   e827c:	f001 fc1b 	bl	e9ab6 <memcpy>
   e8280:	9b02      	ldr	r3, [sp, #8]
    d->freeJson = true;
    if (!stringize(d->tokens, tokenCount, d->json)) {
   e8282:	9901      	ldr	r1, [sp, #4]
   e8284:	6818      	ldr	r0, [r3, #0]
    d->json = new(std::nothrow) char[size + 1];
    if (!d->json) {
        return JSONValue();
    }
    memcpy(d->json, json, size); // TODO: Copy only token data
    d->freeJson = true;
   e8286:	2201      	movs	r2, #1
   e8288:	721a      	strb	r2, [r3, #8]
    if (!stringize(d->tokens, tokenCount, d->json)) {
   e828a:	685a      	ldr	r2, [r3, #4]
   e828c:	f7ff ff05 	bl	e809a <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc>
   e8290:	2800      	cmp	r0, #0
   e8292:	d0d8      	beq.n	e8246 <_ZN5spark9JSONValue9parseCopyEPKcj+0x2a>
   e8294:	9b02      	ldr	r3, [sp, #8]
        return JSONValue();
    }
    return JSONValue(d->tokens, d);
   e8296:	6819      	ldr	r1, [r3, #0]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   e8298:	9304      	str	r3, [sp, #16]
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   e829a:	9b03      	ldr	r3, [sp, #12]
   e829c:	9305      	str	r3, [sp, #20]
      {
	if (_M_pi != 0)
   e829e:	b113      	cbz	r3, e82a6 <_ZN5spark9JSONValue9parseCopyEPKcj+0x8a>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   e82a0:	685a      	ldr	r2, [r3, #4]
   e82a2:	3201      	adds	r2, #1
   e82a4:	605a      	str	r2, [r3, #4]
   e82a6:	aa04      	add	r2, sp, #16
   e82a8:	4620      	mov	r0, r4
   e82aa:	f7ff ff92 	bl	e81d2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   e82ae:	a805      	add	r0, sp, #20
   e82b0:	f7ec fec6 	bl	d5040 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   e82b4:	a803      	add	r0, sp, #12
   e82b6:	f7ec fec3 	bl	d5040 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   e82ba:	4620      	mov	r0, r4
   e82bc:	b007      	add	sp, #28
   e82be:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e82c0:	000ef40f 	.word	0x000ef40f

000e82c4 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   e82c4:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   e82c6:	4e18      	ldr	r6, [pc, #96]	; (e8328 <pinAvailable+0x64>)
   e82c8:	6831      	ldr	r1, [r6, #0]
   e82ca:	f011 0501 	ands.w	r5, r1, #1
   e82ce:	4604      	mov	r4, r0
   e82d0:	d10a      	bne.n	e82e8 <pinAvailable+0x24>
   e82d2:	4630      	mov	r0, r6
   e82d4:	f7eb fef4 	bl	d40c0 <__cxa_guard_acquire>
   e82d8:	b130      	cbz	r0, e82e8 <pinAvailable+0x24>
   e82da:	4629      	mov	r1, r5
   e82dc:	4813      	ldr	r0, [pc, #76]	; (e832c <pinAvailable+0x68>)
   e82de:	f7fd ff77 	bl	e61d0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   e82e2:	4630      	mov	r0, r6
   e82e4:	f7eb fef1 	bl	d40ca <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   e82e8:	4810      	ldr	r0, [pc, #64]	; (e832c <pinAvailable+0x68>)
   e82ea:	f7fd ff7b 	bl	e61e4 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   e82ee:	b128      	cbz	r0, e82fc <pinAvailable+0x38>
   e82f0:	f1a4 030b 	sub.w	r3, r4, #11
   e82f4:	2b02      	cmp	r3, #2
   e82f6:	d801      	bhi.n	e82fc <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   e82f8:	2000      	movs	r0, #0
   e82fa:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   e82fc:	f000 f86a 	bl	e83d4 <_Z19__fetch_global_Wirev>
   e8300:	f7ff f8ca 	bl	e7498 <_ZN7TwoWire9isEnabledEv>
   e8304:	b108      	cbz	r0, e830a <pinAvailable+0x46>
   e8306:	2c01      	cmp	r4, #1
   e8308:	d9f6      	bls.n	e82f8 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   e830a:	f7ff f847 	bl	e739c <_Z22__fetch_global_Serial1v>
   e830e:	f7ff f841 	bl	e7394 <_ZN11USARTSerial9isEnabledEv>
   e8312:	b118      	cbz	r0, e831c <pinAvailable+0x58>
   e8314:	f1a4 0309 	sub.w	r3, r4, #9
   e8318:	2b01      	cmp	r3, #1
   e831a:	d9ed      	bls.n	e82f8 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   e831c:	2c23      	cmp	r4, #35	; 0x23
   e831e:	bf8c      	ite	hi
   e8320:	2000      	movhi	r0, #0
   e8322:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   e8324:	bd70      	pop	{r4, r5, r6, pc}
   e8326:	bf00      	nop
   e8328:	2003e6fc 	.word	0x2003e6fc
   e832c:	2003e700 	.word	0x2003e700

000e8330 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   e8330:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   e8332:	b538      	push	{r3, r4, r5, lr}
   e8334:	4604      	mov	r4, r0
   e8336:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   e8338:	d80a      	bhi.n	e8350 <pinMode+0x20>
   e833a:	29ff      	cmp	r1, #255	; 0xff
   e833c:	d008      	beq.n	e8350 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   e833e:	f7ff ffc1 	bl	e82c4 <pinAvailable>
   e8342:	b128      	cbz	r0, e8350 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   e8344:	4629      	mov	r1, r5
   e8346:	4620      	mov	r0, r4
}
   e8348:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   e834c:	f7fd bc0c 	b.w	e5b68 <HAL_Pin_Mode>
   e8350:	bd38      	pop	{r3, r4, r5, pc}

000e8352 <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
   e8352:	b538      	push	{r3, r4, r5, lr}
   e8354:	4604      	mov	r4, r0
   e8356:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   e8358:	f7ff ffb4 	bl	e82c4 <pinAvailable>
   e835c:	b1f0      	cbz	r0, e839c <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
   e835e:	2104      	movs	r1, #4
   e8360:	4620      	mov	r0, r4
   e8362:	f7fd fbf9 	bl	e5b58 <HAL_Validate_Pin_Function>
   e8366:	2804      	cmp	r0, #4
   e8368:	d105      	bne.n	e8376 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   e836a:	b2a9      	uxth	r1, r5
   e836c:	4620      	mov	r0, r4
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
    }
}
   e836e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
    {
        HAL_DAC_Write(pin, value);
   e8372:	f7fd bc09 	b.w	e5b88 <HAL_DAC_Write>
    }
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   e8376:	2102      	movs	r1, #2
   e8378:	4620      	mov	r0, r4
   e837a:	f7fd fbed 	bl	e5b58 <HAL_Validate_Pin_Function>
   e837e:	2802      	cmp	r0, #2
   e8380:	d10c      	bne.n	e839c <_Z11analogWritetm+0x4a>
    {
        PinMode mode = HAL_Get_Pin_Mode(pin);
   e8382:	4620      	mov	r0, r4
   e8384:	f7fd fbf8 	bl	e5b78 <HAL_Get_Pin_Mode>

        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   e8388:	2801      	cmp	r0, #1
   e838a:	d001      	beq.n	e8390 <_Z11analogWritetm+0x3e>
   e838c:	2804      	cmp	r0, #4
   e838e:	d105      	bne.n	e839c <_Z11analogWritetm+0x4a>
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
   e8390:	4629      	mov	r1, r5
   e8392:	4620      	mov	r0, r4
    }
}
   e8394:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
   e8398:	f7fd bbfe 	b.w	e5b98 <HAL_PWM_Write_Ext>
   e839c:	bd38      	pop	{r3, r4, r5, pc}
	...

000e83a0 <_Z17acquireWireBufferv>:
   e83a0:	b570      	push	{r4, r5, r6, lr}
   e83a2:	4604      	mov	r4, r0
   e83a4:	2514      	movs	r5, #20
   e83a6:	462a      	mov	r2, r5
   e83a8:	4e09      	ldr	r6, [pc, #36]	; (e83d0 <_Z17acquireWireBufferv+0x30>)
   e83aa:	2100      	movs	r1, #0
   e83ac:	f001 fba9 	bl	e9b02 <memset>
   e83b0:	8025      	strh	r5, [r4, #0]
   e83b2:	2520      	movs	r5, #32
   e83b4:	4631      	mov	r1, r6
   e83b6:	60a5      	str	r5, [r4, #8]
   e83b8:	6125      	str	r5, [r4, #16]
   e83ba:	4628      	mov	r0, r5
   e83bc:	f000 f840 	bl	e8440 <_ZnajRKSt9nothrow_t>
   e83c0:	4631      	mov	r1, r6
   e83c2:	6060      	str	r0, [r4, #4]
   e83c4:	4628      	mov	r0, r5
   e83c6:	f000 f83b 	bl	e8440 <_ZnajRKSt9nothrow_t>
   e83ca:	60e0      	str	r0, [r4, #12]
   e83cc:	4620      	mov	r0, r4
   e83ce:	bd70      	pop	{r4, r5, r6, pc}
   e83d0:	000ef40f 	.word	0x000ef40f

000e83d4 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   e83d4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   e83d6:	4d0e      	ldr	r5, [pc, #56]	; (e8410 <_Z19__fetch_global_Wirev+0x3c>)
   e83d8:	6829      	ldr	r1, [r5, #0]
   e83da:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   e83de:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   e83e0:	d113      	bne.n	e840a <_Z19__fetch_global_Wirev+0x36>
   e83e2:	4628      	mov	r0, r5
   e83e4:	f7eb fe6c 	bl	d40c0 <__cxa_guard_acquire>
   e83e8:	b178      	cbz	r0, e840a <_Z19__fetch_global_Wirev+0x36>
   e83ea:	a801      	add	r0, sp, #4
   e83ec:	f7ff ffd8 	bl	e83a0 <_Z17acquireWireBufferv>
   e83f0:	aa01      	add	r2, sp, #4
   e83f2:	4621      	mov	r1, r4
   e83f4:	4807      	ldr	r0, [pc, #28]	; (e8414 <_Z19__fetch_global_Wirev+0x40>)
   e83f6:	f7ff f83d 	bl	e7474 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   e83fa:	4628      	mov	r0, r5
   e83fc:	f7eb fe65 	bl	d40ca <__cxa_guard_release>
   e8400:	4a05      	ldr	r2, [pc, #20]	; (e8418 <_Z19__fetch_global_Wirev+0x44>)
   e8402:	4906      	ldr	r1, [pc, #24]	; (e841c <_Z19__fetch_global_Wirev+0x48>)
   e8404:	4803      	ldr	r0, [pc, #12]	; (e8414 <_Z19__fetch_global_Wirev+0x40>)
   e8406:	f000 f80b 	bl	e8420 <__aeabi_atexit>
	return wire;
}
   e840a:	4802      	ldr	r0, [pc, #8]	; (e8414 <_Z19__fetch_global_Wirev+0x40>)
   e840c:	b007      	add	sp, #28
   e840e:	bd30      	pop	{r4, r5, pc}
   e8410:	2003e70c 	.word	0x2003e70c
   e8414:	2003e710 	.word	0x2003e710
   e8418:	2003aca8 	.word	0x2003aca8
   e841c:	000e741d 	.word	0x000e741d

000e8420 <__aeabi_atexit>:
   e8420:	460b      	mov	r3, r1
   e8422:	4601      	mov	r1, r0
   e8424:	4618      	mov	r0, r3
   e8426:	f001 ba2d 	b.w	e9884 <__cxa_atexit>
	...

000e842c <_ZSt15get_new_handlerv>:
   e842c:	4b02      	ldr	r3, [pc, #8]	; (e8438 <_ZSt15get_new_handlerv+0xc>)
   e842e:	6818      	ldr	r0, [r3, #0]
   e8430:	f3bf 8f5f 	dmb	sy
   e8434:	4770      	bx	lr
   e8436:	bf00      	nop
   e8438:	2003e724 	.word	0x2003e724

000e843c <_ZdlPvj>:
   e843c:	f7eb be31 	b.w	d40a2 <_ZdlPv>

000e8440 <_ZnajRKSt9nothrow_t>:
   e8440:	f000 b800 	b.w	e8444 <_ZnwjRKSt9nothrow_t>

000e8444 <_ZnwjRKSt9nothrow_t>:
   e8444:	b510      	push	{r4, lr}
   e8446:	2800      	cmp	r0, #0
   e8448:	bf14      	ite	ne
   e844a:	4604      	movne	r4, r0
   e844c:	2401      	moveq	r4, #1
   e844e:	4620      	mov	r0, r4
   e8450:	f7fd fe30 	bl	e60b4 <malloc>
   e8454:	b920      	cbnz	r0, e8460 <_ZnwjRKSt9nothrow_t+0x1c>
   e8456:	f7ff ffe9 	bl	e842c <_ZSt15get_new_handlerv>
   e845a:	b108      	cbz	r0, e8460 <_ZnwjRKSt9nothrow_t+0x1c>
   e845c:	4780      	blx	r0
   e845e:	e7f6      	b.n	e844e <_ZnwjRKSt9nothrow_t+0xa>
   e8460:	bd10      	pop	{r4, pc}

000e8462 <_ZSt19__throw_logic_errorPKc>:
   e8462:	b508      	push	{r3, lr}
   e8464:	f7fd fe5e 	bl	e6124 <abort>

000e8468 <_ZSt20__throw_length_errorPKc>:
   e8468:	b508      	push	{r3, lr}
   e846a:	f7fd fe5b 	bl	e6124 <abort>

000e846e <_ZSt24__throw_out_of_range_fmtPKcz>:
   e846e:	b40f      	push	{r0, r1, r2, r3}
   e8470:	b580      	push	{r7, lr}
   e8472:	b082      	sub	sp, #8
   e8474:	af00      	add	r7, sp, #0
   e8476:	f107 0410 	add.w	r4, r7, #16
   e847a:	f854 5b04 	ldr.w	r5, [r4], #4
   e847e:	4628      	mov	r0, r5
   e8480:	f001 fb90 	bl	e9ba4 <strlen>
   e8484:	f200 230e 	addw	r3, r0, #526	; 0x20e
   e8488:	f023 0307 	bic.w	r3, r3, #7
   e848c:	ebad 0d03 	sub.w	sp, sp, r3
   e8490:	f500 7100 	add.w	r1, r0, #512	; 0x200
   e8494:	4623      	mov	r3, r4
   e8496:	462a      	mov	r2, r5
   e8498:	4668      	mov	r0, sp
   e849a:	607c      	str	r4, [r7, #4]
   e849c:	f000 f994 	bl	e87c8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
   e84a0:	f7fd fe40 	bl	e6124 <abort>

000e84a4 <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
   e84a4:	b10a      	cbz	r2, e84aa <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
   e84a6:	f001 baf7 	b.w	e9a98 <memcmp>
   e84aa:	4610      	mov	r0, r2
   e84ac:	4770      	bx	lr

000e84ae <_ZNSt11char_traitsIcE4copyEPcPKcj>:
   e84ae:	b10a      	cbz	r2, e84b4 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
   e84b0:	f001 bb01 	b.w	e9ab6 <memcpy>
   e84b4:	4770      	bx	lr
	...

000e84b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
   e84b8:	b508      	push	{r3, lr}
   e84ba:	680b      	ldr	r3, [r1, #0]
   e84bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   e84c0:	d302      	bcc.n	e84c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
   e84c2:	480a      	ldr	r0, [pc, #40]	; (e84ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x34>)
   e84c4:	f7ff ffd0 	bl	e8468 <_ZSt20__throw_length_errorPKc>
   e84c8:	4293      	cmp	r3, r2
   e84ca:	d909      	bls.n	e84e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x28>
   e84cc:	0052      	lsls	r2, r2, #1
   e84ce:	4293      	cmp	r3, r2
   e84d0:	d206      	bcs.n	e84e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x28>
   e84d2:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   e84d6:	bf2a      	itet	cs
   e84d8:	f06f 4300 	mvncs.w	r3, #2147483648	; 0x80000000
   e84dc:	600a      	strcc	r2, [r1, #0]
   e84de:	600b      	strcs	r3, [r1, #0]
   e84e0:	6808      	ldr	r0, [r1, #0]
   e84e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   e84e6:	3001      	adds	r0, #1
   e84e8:	f7eb bdd7 	b.w	d409a <_Znwj>
   e84ec:	000ef410 	.word	0x000ef410

000e84f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
   e84f0:	4603      	mov	r3, r0
   e84f2:	f853 0b08 	ldr.w	r0, [r3], #8
   e84f6:	4298      	cmp	r0, r3
   e84f8:	d001      	beq.n	e84fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
   e84fa:	f7eb bdd2 	b.w	d40a2 <_ZdlPv>
   e84fe:	4770      	bx	lr

000e8500 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
   e8500:	6843      	ldr	r3, [r0, #4]
   e8502:	4299      	cmp	r1, r3
   e8504:	b510      	push	{r4, lr}
   e8506:	4614      	mov	r4, r2
   e8508:	d904      	bls.n	e8514 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x14>
   e850a:	460a      	mov	r2, r1
   e850c:	4802      	ldr	r0, [pc, #8]	; (e8518 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
   e850e:	4621      	mov	r1, r4
   e8510:	f7ff ffad 	bl	e846e <_ZSt24__throw_out_of_range_fmtPKcz>
   e8514:	4608      	mov	r0, r1
   e8516:	bd10      	pop	{r4, pc}
   e8518:	000ef428 	.word	0x000ef428

000e851c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
   e851c:	2a01      	cmp	r2, #1
   e851e:	b510      	push	{r4, lr}
   e8520:	d102      	bne.n	e8528 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
   e8522:	780a      	ldrb	r2, [r1, #0]
   e8524:	7002      	strb	r2, [r0, #0]
   e8526:	bd10      	pop	{r4, pc}
   e8528:	f7ff ffc1 	bl	e84ae <_ZNSt11char_traitsIcE4copyEPcPKcj>
   e852c:	bd10      	pop	{r4, pc}

000e852e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
   e852e:	b508      	push	{r3, lr}
   e8530:	1a52      	subs	r2, r2, r1
   e8532:	f7ff fff3 	bl	e851c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   e8536:	bd08      	pop	{r3, pc}

000e8538 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4swapERS4_>:
   e8538:	4288      	cmp	r0, r1
   e853a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   e853e:	4605      	mov	r5, r0
   e8540:	460c      	mov	r4, r1
   e8542:	d062      	beq.n	e860a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4swapERS4_+0xd2>
   e8544:	4606      	mov	r6, r0
   e8546:	f101 0708 	add.w	r7, r1, #8
   e854a:	f856 3b08 	ldr.w	r3, [r6], #8
   e854e:	6809      	ldr	r1, [r1, #0]
   e8550:	429e      	cmp	r6, r3
   e8552:	d126      	bne.n	e85a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4swapERS4_+0x6a>
   e8554:	428f      	cmp	r7, r1
   e8556:	d117      	bne.n	e8588 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4swapERS4_+0x50>
   e8558:	6843      	ldr	r3, [r0, #4]
   e855a:	f8d4 8004 	ldr.w	r8, [r4, #4]
   e855e:	2b00      	cmp	r3, #0
   e8560:	d036      	beq.n	e85d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4swapERS4_+0x98>
   e8562:	f1b8 0f00 	cmp.w	r8, #0
   e8566:	d033      	beq.n	e85d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4swapERS4_+0x98>
   e8568:	4639      	mov	r1, r7
   e856a:	2210      	movs	r2, #16
   e856c:	4668      	mov	r0, sp
   e856e:	f7ff ff9e 	bl	e84ae <_ZNSt11char_traitsIcE4copyEPcPKcj>
   e8572:	4631      	mov	r1, r6
   e8574:	2210      	movs	r2, #16
   e8576:	4638      	mov	r0, r7
   e8578:	f7ff ff99 	bl	e84ae <_ZNSt11char_traitsIcE4copyEPcPKcj>
   e857c:	2210      	movs	r2, #16
   e857e:	4669      	mov	r1, sp
   e8580:	4630      	mov	r0, r6
   e8582:	f7ff ff94 	bl	e84ae <_ZNSt11char_traitsIcE4copyEPcPKcj>
   e8586:	e01e      	b.n	e85c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4swapERS4_+0x8e>
   e8588:	2210      	movs	r2, #16
   e858a:	4631      	mov	r1, r6
   e858c:	4638      	mov	r0, r7
   e858e:	f8d4 8008 	ldr.w	r8, [r4, #8]
   e8592:	f7ff ff8c 	bl	e84ae <_ZNSt11char_traitsIcE4copyEPcPKcj>
   e8596:	6823      	ldr	r3, [r4, #0]
   e8598:	602b      	str	r3, [r5, #0]
   e859a:	6027      	str	r7, [r4, #0]
   e859c:	f8c5 8008 	str.w	r8, [r5, #8]
   e85a0:	e011      	b.n	e85c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4swapERS4_+0x8e>
   e85a2:	42b9      	cmp	r1, r7
   e85a4:	f8d0 8008 	ldr.w	r8, [r0, #8]
   e85a8:	d107      	bne.n	e85ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4swapERS4_+0x82>
   e85aa:	2210      	movs	r2, #16
   e85ac:	4630      	mov	r0, r6
   e85ae:	f7ff ff7e 	bl	e84ae <_ZNSt11char_traitsIcE4copyEPcPKcj>
   e85b2:	682b      	ldr	r3, [r5, #0]
   e85b4:	6023      	str	r3, [r4, #0]
   e85b6:	602e      	str	r6, [r5, #0]
   e85b8:	e003      	b.n	e85c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4swapERS4_+0x8a>
   e85ba:	6001      	str	r1, [r0, #0]
   e85bc:	6023      	str	r3, [r4, #0]
   e85be:	68a3      	ldr	r3, [r4, #8]
   e85c0:	6083      	str	r3, [r0, #8]
   e85c2:	f8c4 8008 	str.w	r8, [r4, #8]
   e85c6:	686b      	ldr	r3, [r5, #4]
   e85c8:	6862      	ldr	r2, [r4, #4]
   e85ca:	606a      	str	r2, [r5, #4]
   e85cc:	6063      	str	r3, [r4, #4]
   e85ce:	e01c      	b.n	e860a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4swapERS4_+0xd2>
   e85d0:	f1b8 0f00 	cmp.w	r8, #0
   e85d4:	d00b      	beq.n	e85ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4swapERS4_+0xb6>
   e85d6:	2210      	movs	r2, #16
   e85d8:	4639      	mov	r1, r7
   e85da:	4630      	mov	r0, r6
   e85dc:	f7ff ff67 	bl	e84ae <_ZNSt11char_traitsIcE4copyEPcPKcj>
   e85e0:	6863      	ldr	r3, [r4, #4]
   e85e2:	6822      	ldr	r2, [r4, #0]
   e85e4:	606b      	str	r3, [r5, #4]
   e85e6:	2300      	movs	r3, #0
   e85e8:	6063      	str	r3, [r4, #4]
   e85ea:	7013      	strb	r3, [r2, #0]
   e85ec:	e00d      	b.n	e860a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4swapERS4_+0xd2>
   e85ee:	2b00      	cmp	r3, #0
   e85f0:	d0e9      	beq.n	e85c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4swapERS4_+0x8e>
   e85f2:	2210      	movs	r2, #16
   e85f4:	4631      	mov	r1, r6
   e85f6:	4638      	mov	r0, r7
   e85f8:	f7ff ff59 	bl	e84ae <_ZNSt11char_traitsIcE4copyEPcPKcj>
   e85fc:	686b      	ldr	r3, [r5, #4]
   e85fe:	6063      	str	r3, [r4, #4]
   e8600:	682b      	ldr	r3, [r5, #0]
   e8602:	f8c5 8004 	str.w	r8, [r5, #4]
   e8606:	f883 8000 	strb.w	r8, [r3]
   e860a:	b004      	add	sp, #16
   e860c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000e8610 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj>:
   e8610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   e8614:	4614      	mov	r4, r2
   e8616:	4688      	mov	r8, r1
   e8618:	6842      	ldr	r2, [r0, #4]
   e861a:	b933      	cbnz	r3, e862a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x1a>
   e861c:	42a2      	cmp	r2, r4
   e861e:	bf2c      	ite	cs
   e8620:	4620      	movcs	r0, r4
   e8622:	f04f 30ff 	movcc.w	r0, #4294967295
   e8626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   e862a:	4293      	cmp	r3, r2
   e862c:	d816      	bhi.n	e865c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x4c>
   e862e:	6806      	ldr	r6, [r0, #0]
   e8630:	1ad7      	subs	r7, r2, r3
   e8632:	4426      	add	r6, r4
   e8634:	1e5d      	subs	r5, r3, #1
   e8636:	f101 0901 	add.w	r9, r1, #1
   e863a:	42a7      	cmp	r7, r4
   e863c:	d30e      	bcc.n	e865c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x4c>
   e863e:	f816 3b01 	ldrb.w	r3, [r6], #1
   e8642:	f898 2000 	ldrb.w	r2, [r8]
   e8646:	429a      	cmp	r2, r3
   e8648:	d10c      	bne.n	e8664 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x54>
   e864a:	462a      	mov	r2, r5
   e864c:	4649      	mov	r1, r9
   e864e:	4630      	mov	r0, r6
   e8650:	f7ff ff28 	bl	e84a4 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
   e8654:	b930      	cbnz	r0, e8664 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x54>
   e8656:	4620      	mov	r0, r4
   e8658:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   e865c:	f04f 30ff 	mov.w	r0, #4294967295
   e8660:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   e8664:	3401      	adds	r4, #1
   e8666:	e7e8      	b.n	e863a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x2a>

000e8668 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>:
   e8668:	b570      	push	{r4, r5, r6, lr}
   e866a:	4605      	mov	r5, r0
   e866c:	4608      	mov	r0, r1
   e866e:	460c      	mov	r4, r1
   e8670:	4616      	mov	r6, r2
   e8672:	f001 fa97 	bl	e9ba4 <strlen>
   e8676:	4632      	mov	r2, r6
   e8678:	4603      	mov	r3, r0
   e867a:	4621      	mov	r1, r4
   e867c:	4628      	mov	r0, r5
   e867e:	f7ff ffc7 	bl	e8610 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj>
   e8682:	bd70      	pop	{r4, r5, r6, pc}

000e8684 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
   e8684:	b573      	push	{r0, r1, r4, r5, r6, lr}
   e8686:	4604      	mov	r4, r0
   e8688:	4616      	mov	r6, r2
   e868a:	460d      	mov	r5, r1
   e868c:	b901      	cbnz	r1, e8690 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0xc>
   e868e:	b9ba      	cbnz	r2, e86c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x3c>
   e8690:	1b73      	subs	r3, r6, r5
   e8692:	2b0f      	cmp	r3, #15
   e8694:	9301      	str	r3, [sp, #4]
   e8696:	d907      	bls.n	e86a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x24>
   e8698:	2200      	movs	r2, #0
   e869a:	a901      	add	r1, sp, #4
   e869c:	4620      	mov	r0, r4
   e869e:	f7ff ff0b 	bl	e84b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
   e86a2:	9b01      	ldr	r3, [sp, #4]
   e86a4:	6020      	str	r0, [r4, #0]
   e86a6:	60a3      	str	r3, [r4, #8]
   e86a8:	4632      	mov	r2, r6
   e86aa:	4629      	mov	r1, r5
   e86ac:	6820      	ldr	r0, [r4, #0]
   e86ae:	f7ff ff3e 	bl	e852e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
   e86b2:	9b01      	ldr	r3, [sp, #4]
   e86b4:	6822      	ldr	r2, [r4, #0]
   e86b6:	6063      	str	r3, [r4, #4]
   e86b8:	2100      	movs	r1, #0
   e86ba:	54d1      	strb	r1, [r2, r3]
   e86bc:	b002      	add	sp, #8
   e86be:	bd70      	pop	{r4, r5, r6, pc}
   e86c0:	4801      	ldr	r0, [pc, #4]	; (e86c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
   e86c2:	f7ff fece 	bl	e8462 <_ZSt19__throw_logic_errorPKc>
   e86c6:	bf00      	nop
   e86c8:	000ec981 	.word	0x000ec981

000e86cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>:
   e86cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e86ce:	460d      	mov	r5, r1
   e86d0:	4616      	mov	r6, r2
   e86d2:	461f      	mov	r7, r3
   e86d4:	f100 0308 	add.w	r3, r0, #8
   e86d8:	4604      	mov	r4, r0
   e86da:	6003      	str	r3, [r0, #0]
   e86dc:	4631      	mov	r1, r6
   e86de:	4a09      	ldr	r2, [pc, #36]	; (e8704 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj+0x38>)
   e86e0:	4628      	mov	r0, r5
   e86e2:	f7ff ff0d 	bl	e8500 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
   e86e6:	6829      	ldr	r1, [r5, #0]
   e86e8:	686a      	ldr	r2, [r5, #4]
   e86ea:	4401      	add	r1, r0
   e86ec:	1b92      	subs	r2, r2, r6
   e86ee:	4620      	mov	r0, r4
   e86f0:	f04f 0300 	mov.w	r3, #0
   e86f4:	42ba      	cmp	r2, r7
   e86f6:	bf94      	ite	ls
   e86f8:	188a      	addls	r2, r1, r2
   e86fa:	19ca      	addhi	r2, r1, r7
   e86fc:	f7ff ffc2 	bl	e8684 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
   e8700:	4620      	mov	r0, r4
   e8702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   e8704:	000ef56b 	.word	0x000ef56b

000e8708 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>:
   e8708:	b570      	push	{r4, r5, r6, lr}
   e870a:	460d      	mov	r5, r1
   e870c:	4604      	mov	r4, r0
   e870e:	4611      	mov	r1, r2
   e8710:	4628      	mov	r0, r5
   e8712:	4a06      	ldr	r2, [pc, #24]	; (e872c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj+0x24>)
   e8714:	461e      	mov	r6, r3
   e8716:	f7ff fef3 	bl	e8500 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
   e871a:	4633      	mov	r3, r6
   e871c:	4602      	mov	r2, r0
   e871e:	4629      	mov	r1, r5
   e8720:	4620      	mov	r0, r4
   e8722:	f7ff ffd3 	bl	e86cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>
   e8726:	4620      	mov	r0, r4
   e8728:	bd70      	pop	{r4, r5, r6, pc}
   e872a:	bf00      	nop
   e872c:	000ef586 	.word	0x000ef586

000e8730 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
   e8730:	b580      	push	{r7, lr}
   e8732:	b09c      	sub	sp, #112	; 0x70
   e8734:	af00      	add	r7, sp, #0
   e8736:	1a0e      	subs	r6, r1, r0
   e8738:	4680      	mov	r8, r0
   e873a:	226c      	movs	r2, #108	; 0x6c
   e873c:	490e      	ldr	r1, [pc, #56]	; (e8778 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
   e873e:	1d38      	adds	r0, r7, #4
   e8740:	f001 f9b9 	bl	e9ab6 <memcpy>
   e8744:	f106 037a 	add.w	r3, r6, #122	; 0x7a
   e8748:	f023 0307 	bic.w	r3, r3, #7
   e874c:	ebad 0d03 	sub.w	sp, sp, r3
   e8750:	226b      	movs	r2, #107	; 0x6b
   e8752:	1d39      	adds	r1, r7, #4
   e8754:	1c75      	adds	r5, r6, #1
   e8756:	4668      	mov	r0, sp
   e8758:	f001 f9ad 	bl	e9ab6 <memcpy>
   e875c:	446d      	add	r5, sp
   e875e:	4632      	mov	r2, r6
   e8760:	4641      	mov	r1, r8
   e8762:	f10d 006b 	add.w	r0, sp, #107	; 0x6b
   e8766:	f001 f9a6 	bl	e9ab6 <memcpy>
   e876a:	2300      	movs	r3, #0
   e876c:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a
   e8770:	4668      	mov	r0, sp
   e8772:	f7ff fe76 	bl	e8462 <_ZSt19__throw_logic_errorPKc>
   e8776:	bf00      	nop
   e8778:	000ef5aa 	.word	0x000ef5aa

000e877c <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
   e877c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e8780:	b084      	sub	sp, #16
   e8782:	af04      	add	r7, sp, #16
   e8784:	b088      	sub	sp, #32
   e8786:	2301      	movs	r3, #1
   e8788:	9302      	str	r3, [sp, #8]
   e878a:	2302      	movs	r3, #2
   e878c:	9301      	str	r3, [sp, #4]
   e878e:	4b0d      	ldr	r3, [pc, #52]	; (e87c4 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x48>)
   e8790:	681b      	ldr	r3, [r3, #0]
   e8792:	9300      	str	r3, [sp, #0]
   e8794:	4606      	mov	r6, r0
   e8796:	2300      	movs	r3, #0
   e8798:	a80a      	add	r0, sp, #40	; 0x28
   e879a:	4688      	mov	r8, r1
   e879c:	f000 f8fa 	bl	e8994 <_ZSt13__int_to_charIcyEiPT_T0_PKS0_St13_Ios_Fmtflagsb>
   e87a0:	4540      	cmp	r0, r8
   e87a2:	ad04      	add	r5, sp, #16
   e87a4:	4604      	mov	r4, r0
   e87a6:	d807      	bhi.n	e87b8 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x3c>
   e87a8:	f1c0 0118 	rsb	r1, r0, #24
   e87ac:	4602      	mov	r2, r0
   e87ae:	4429      	add	r1, r5
   e87b0:	4630      	mov	r0, r6
   e87b2:	f001 f980 	bl	e9ab6 <memcpy>
   e87b6:	e001      	b.n	e87bc <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x40>
   e87b8:	f04f 34ff 	mov.w	r4, #4294967295
   e87bc:	4620      	mov	r0, r4
   e87be:	46bd      	mov	sp, r7
   e87c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   e87c4:	2003abb4 	.word	0x2003abb4

000e87c8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
   e87c8:	3901      	subs	r1, #1
   e87ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e87ce:	4606      	mov	r6, r0
   e87d0:	4615      	mov	r5, r2
   e87d2:	1847      	adds	r7, r0, r1
   e87d4:	4604      	mov	r4, r0
   e87d6:	782a      	ldrb	r2, [r5, #0]
   e87d8:	b39a      	cbz	r2, e8842 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
   e87da:	42bc      	cmp	r4, r7
   e87dc:	d22d      	bcs.n	e883a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x72>
   e87de:	2a25      	cmp	r2, #37	; 0x25
   e87e0:	d123      	bne.n	e882a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x62>
   e87e2:	786a      	ldrb	r2, [r5, #1]
   e87e4:	2a73      	cmp	r2, #115	; 0x73
   e87e6:	d005      	beq.n	e87f4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   e87e8:	2a7a      	cmp	r2, #122	; 0x7a
   e87ea:	d00e      	beq.n	e880a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x42>
   e87ec:	2a25      	cmp	r2, #37	; 0x25
   e87ee:	d11c      	bne.n	e882a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x62>
   e87f0:	3501      	adds	r5, #1
   e87f2:	e01a      	b.n	e882a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x62>
   e87f4:	1d19      	adds	r1, r3, #4
   e87f6:	681b      	ldr	r3, [r3, #0]
   e87f8:	3b01      	subs	r3, #1
   e87fa:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   e87fe:	b1ca      	cbz	r2, e8834 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6c>
   e8800:	42bc      	cmp	r4, r7
   e8802:	d01a      	beq.n	e883a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x72>
   e8804:	f804 2b01 	strb.w	r2, [r4], #1
   e8808:	e7f7      	b.n	e87fa <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x32>
   e880a:	78aa      	ldrb	r2, [r5, #2]
   e880c:	2a75      	cmp	r2, #117	; 0x75
   e880e:	d10c      	bne.n	e882a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x62>
   e8810:	681a      	ldr	r2, [r3, #0]
   e8812:	1b39      	subs	r1, r7, r4
   e8814:	4620      	mov	r0, r4
   e8816:	f103 0804 	add.w	r8, r3, #4
   e881a:	f7ff ffaf 	bl	e877c <_ZN9__gnu_cxx15__concat_size_tEPcjj>
   e881e:	2800      	cmp	r0, #0
   e8820:	dd0b      	ble.n	e883a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x72>
   e8822:	4404      	add	r4, r0
   e8824:	3503      	adds	r5, #3
   e8826:	4643      	mov	r3, r8
   e8828:	e7d5      	b.n	e87d6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
   e882a:	782a      	ldrb	r2, [r5, #0]
   e882c:	7022      	strb	r2, [r4, #0]
   e882e:	3501      	adds	r5, #1
   e8830:	3401      	adds	r4, #1
   e8832:	e7d0      	b.n	e87d6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
   e8834:	3502      	adds	r5, #2
   e8836:	460b      	mov	r3, r1
   e8838:	e7cd      	b.n	e87d6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
   e883a:	4621      	mov	r1, r4
   e883c:	4630      	mov	r0, r6
   e883e:	f7ff ff77 	bl	e8730 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
   e8842:	7022      	strb	r2, [r4, #0]
   e8844:	1ba0      	subs	r0, r4, r6
   e8846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000e884c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   e884c:	4b18      	ldr	r3, [pc, #96]	; (e88b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   e884e:	681a      	ldr	r2, [r3, #0]
   e8850:	07d1      	lsls	r1, r2, #31
   e8852:	bf5c      	itt	pl
   e8854:	2201      	movpl	r2, #1
   e8856:	601a      	strpl	r2, [r3, #0]
   e8858:	4b16      	ldr	r3, [pc, #88]	; (e88b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   e885a:	681a      	ldr	r2, [r3, #0]
   e885c:	07d2      	lsls	r2, r2, #31
   e885e:	bf5c      	itt	pl
   e8860:	2201      	movpl	r2, #1
   e8862:	601a      	strpl	r2, [r3, #0]
   e8864:	4b14      	ldr	r3, [pc, #80]	; (e88b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   e8866:	681a      	ldr	r2, [r3, #0]
   e8868:	07d0      	lsls	r0, r2, #31
   e886a:	bf5c      	itt	pl
   e886c:	2201      	movpl	r2, #1
   e886e:	601a      	strpl	r2, [r3, #0]
   e8870:	4b12      	ldr	r3, [pc, #72]	; (e88bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   e8872:	681a      	ldr	r2, [r3, #0]
   e8874:	07d1      	lsls	r1, r2, #31
   e8876:	bf5c      	itt	pl
   e8878:	2201      	movpl	r2, #1
   e887a:	601a      	strpl	r2, [r3, #0]
   e887c:	4b10      	ldr	r3, [pc, #64]	; (e88c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   e887e:	681a      	ldr	r2, [r3, #0]
   e8880:	07d2      	lsls	r2, r2, #31
   e8882:	bf5c      	itt	pl
   e8884:	2201      	movpl	r2, #1
   e8886:	601a      	strpl	r2, [r3, #0]
   e8888:	4b0e      	ldr	r3, [pc, #56]	; (e88c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   e888a:	681a      	ldr	r2, [r3, #0]
   e888c:	07d0      	lsls	r0, r2, #31
   e888e:	bf5c      	itt	pl
   e8890:	2201      	movpl	r2, #1
   e8892:	601a      	strpl	r2, [r3, #0]
   e8894:	4b0c      	ldr	r3, [pc, #48]	; (e88c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   e8896:	681a      	ldr	r2, [r3, #0]
   e8898:	07d1      	lsls	r1, r2, #31
   e889a:	bf5c      	itt	pl
   e889c:	2201      	movpl	r2, #1
   e889e:	601a      	strpl	r2, [r3, #0]
   e88a0:	4b0a      	ldr	r3, [pc, #40]	; (e88cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   e88a2:	681a      	ldr	r2, [r3, #0]
   e88a4:	07d2      	lsls	r2, r2, #31
   e88a6:	bf5c      	itt	pl
   e88a8:	2201      	movpl	r2, #1
   e88aa:	601a      	strpl	r2, [r3, #0]
   e88ac:	4770      	bx	lr
   e88ae:	bf00      	nop
   e88b0:	2003e744 	.word	0x2003e744
   e88b4:	2003e740 	.word	0x2003e740
   e88b8:	2003e73c 	.word	0x2003e73c
   e88bc:	2003e738 	.word	0x2003e738
   e88c0:	2003e734 	.word	0x2003e734
   e88c4:	2003e730 	.word	0x2003e730
   e88c8:	2003e72c 	.word	0x2003e72c
   e88cc:	2003e728 	.word	0x2003e728

000e88d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   e88d0:	4b24      	ldr	r3, [pc, #144]	; (e8964 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   e88d2:	681a      	ldr	r2, [r3, #0]
   e88d4:	07d0      	lsls	r0, r2, #31
   e88d6:	bf5c      	itt	pl
   e88d8:	2201      	movpl	r2, #1
   e88da:	601a      	strpl	r2, [r3, #0]
   e88dc:	4b22      	ldr	r3, [pc, #136]	; (e8968 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   e88de:	681a      	ldr	r2, [r3, #0]
   e88e0:	07d1      	lsls	r1, r2, #31
   e88e2:	bf5c      	itt	pl
   e88e4:	2201      	movpl	r2, #1
   e88e6:	601a      	strpl	r2, [r3, #0]
   e88e8:	4b20      	ldr	r3, [pc, #128]	; (e896c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   e88ea:	681a      	ldr	r2, [r3, #0]
   e88ec:	07d2      	lsls	r2, r2, #31
   e88ee:	bf5c      	itt	pl
   e88f0:	2201      	movpl	r2, #1
   e88f2:	601a      	strpl	r2, [r3, #0]
   e88f4:	4b1e      	ldr	r3, [pc, #120]	; (e8970 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   e88f6:	681a      	ldr	r2, [r3, #0]
   e88f8:	07d0      	lsls	r0, r2, #31
   e88fa:	bf5c      	itt	pl
   e88fc:	2201      	movpl	r2, #1
   e88fe:	601a      	strpl	r2, [r3, #0]
   e8900:	4b1c      	ldr	r3, [pc, #112]	; (e8974 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   e8902:	681a      	ldr	r2, [r3, #0]
   e8904:	07d1      	lsls	r1, r2, #31
   e8906:	bf5c      	itt	pl
   e8908:	2201      	movpl	r2, #1
   e890a:	601a      	strpl	r2, [r3, #0]
   e890c:	4b1a      	ldr	r3, [pc, #104]	; (e8978 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   e890e:	681a      	ldr	r2, [r3, #0]
   e8910:	07d2      	lsls	r2, r2, #31
   e8912:	bf5c      	itt	pl
   e8914:	2201      	movpl	r2, #1
   e8916:	601a      	strpl	r2, [r3, #0]
   e8918:	4b18      	ldr	r3, [pc, #96]	; (e897c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   e891a:	681a      	ldr	r2, [r3, #0]
   e891c:	07d0      	lsls	r0, r2, #31
   e891e:	bf5c      	itt	pl
   e8920:	2201      	movpl	r2, #1
   e8922:	601a      	strpl	r2, [r3, #0]
   e8924:	4b16      	ldr	r3, [pc, #88]	; (e8980 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   e8926:	681a      	ldr	r2, [r3, #0]
   e8928:	07d1      	lsls	r1, r2, #31
   e892a:	bf5c      	itt	pl
   e892c:	2201      	movpl	r2, #1
   e892e:	601a      	strpl	r2, [r3, #0]
   e8930:	4b14      	ldr	r3, [pc, #80]	; (e8984 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   e8932:	681a      	ldr	r2, [r3, #0]
   e8934:	07d2      	lsls	r2, r2, #31
   e8936:	bf5c      	itt	pl
   e8938:	2201      	movpl	r2, #1
   e893a:	601a      	strpl	r2, [r3, #0]
   e893c:	4b12      	ldr	r3, [pc, #72]	; (e8988 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   e893e:	681a      	ldr	r2, [r3, #0]
   e8940:	07d0      	lsls	r0, r2, #31
   e8942:	bf5c      	itt	pl
   e8944:	2201      	movpl	r2, #1
   e8946:	601a      	strpl	r2, [r3, #0]
   e8948:	4b10      	ldr	r3, [pc, #64]	; (e898c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   e894a:	681a      	ldr	r2, [r3, #0]
   e894c:	07d1      	lsls	r1, r2, #31
   e894e:	bf5c      	itt	pl
   e8950:	2201      	movpl	r2, #1
   e8952:	601a      	strpl	r2, [r3, #0]
   e8954:	4b0e      	ldr	r3, [pc, #56]	; (e8990 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   e8956:	681a      	ldr	r2, [r3, #0]
   e8958:	07d2      	lsls	r2, r2, #31
   e895a:	bf5c      	itt	pl
   e895c:	2201      	movpl	r2, #1
   e895e:	601a      	strpl	r2, [r3, #0]
   e8960:	4770      	bx	lr
   e8962:	bf00      	nop
   e8964:	2003e774 	.word	0x2003e774
   e8968:	2003e770 	.word	0x2003e770
   e896c:	2003e76c 	.word	0x2003e76c
   e8970:	2003e768 	.word	0x2003e768
   e8974:	2003e764 	.word	0x2003e764
   e8978:	2003e760 	.word	0x2003e760
   e897c:	2003e75c 	.word	0x2003e75c
   e8980:	2003e758 	.word	0x2003e758
   e8984:	2003e754 	.word	0x2003e754
   e8988:	2003e750 	.word	0x2003e750
   e898c:	2003e74c 	.word	0x2003e74c
   e8990:	2003e748 	.word	0x2003e748

000e8994 <_ZSt13__int_to_charIcyEiPT_T0_PKS0_St13_Ios_Fmtflagsb>:
   e8994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e8998:	4614      	mov	r4, r2
   e899a:	f89d 2020 	ldrb.w	r2, [sp, #32]
   e899e:	f8dd 8018 	ldr.w	r8, [sp, #24]
   e89a2:	461d      	mov	r5, r3
   e89a4:	4607      	mov	r7, r0
   e89a6:	9b07      	ldr	r3, [sp, #28]
   e89a8:	b1b2      	cbz	r2, e89d8 <_ZSt13__int_to_charIcyEiPT_T0_PKS0_St13_Ios_Fmtflagsb+0x44>
   e89aa:	4606      	mov	r6, r0
   e89ac:	4620      	mov	r0, r4
   e89ae:	4629      	mov	r1, r5
   e89b0:	220a      	movs	r2, #10
   e89b2:	2300      	movs	r3, #0
   e89b4:	f000 fd92 	bl	e94dc <__aeabi_uldivmod>
   e89b8:	4442      	add	r2, r8
   e89ba:	4620      	mov	r0, r4
   e89bc:	7913      	ldrb	r3, [r2, #4]
   e89be:	f806 3d01 	strb.w	r3, [r6, #-1]!
   e89c2:	4629      	mov	r1, r5
   e89c4:	2300      	movs	r3, #0
   e89c6:	220a      	movs	r2, #10
   e89c8:	f000 fd88 	bl	e94dc <__aeabi_uldivmod>
   e89cc:	4604      	mov	r4, r0
   e89ce:	460d      	mov	r5, r1
   e89d0:	ea54 0305 	orrs.w	r3, r4, r5
   e89d4:	d1ea      	bne.n	e89ac <_ZSt13__int_to_charIcyEiPT_T0_PKS0_St13_Ios_Fmtflagsb+0x18>
   e89d6:	e029      	b.n	e8a2c <_ZSt13__int_to_charIcyEiPT_T0_PKS0_St13_Ios_Fmtflagsb+0x98>
   e89d8:	f003 024a 	and.w	r2, r3, #74	; 0x4a
   e89dc:	2a40      	cmp	r2, #64	; 0x40
   e89de:	d110      	bne.n	e8a02 <_ZSt13__int_to_charIcyEiPT_T0_PKS0_St13_Ios_Fmtflagsb+0x6e>
   e89e0:	4606      	mov	r6, r0
   e89e2:	f004 0307 	and.w	r3, r4, #7
   e89e6:	4443      	add	r3, r8
   e89e8:	08ea      	lsrs	r2, r5, #3
   e89ea:	791b      	ldrb	r3, [r3, #4]
   e89ec:	f806 3d01 	strb.w	r3, [r6, #-1]!
   e89f0:	08e3      	lsrs	r3, r4, #3
   e89f2:	ea43 7345 	orr.w	r3, r3, r5, lsl #29
   e89f6:	461c      	mov	r4, r3
   e89f8:	4615      	mov	r5, r2
   e89fa:	ea54 0305 	orrs.w	r3, r4, r5
   e89fe:	d1f0      	bne.n	e89e2 <_ZSt13__int_to_charIcyEiPT_T0_PKS0_St13_Ios_Fmtflagsb+0x4e>
   e8a00:	e014      	b.n	e8a2c <_ZSt13__int_to_charIcyEiPT_T0_PKS0_St13_Ios_Fmtflagsb+0x98>
   e8a02:	f413 4f80 	tst.w	r3, #16384	; 0x4000
   e8a06:	bf14      	ite	ne
   e8a08:	2214      	movne	r2, #20
   e8a0a:	2204      	moveq	r2, #4
   e8a0c:	4606      	mov	r6, r0
   e8a0e:	4442      	add	r2, r8
   e8a10:	f004 030f 	and.w	r3, r4, #15
   e8a14:	0929      	lsrs	r1, r5, #4
   e8a16:	5cd3      	ldrb	r3, [r2, r3]
   e8a18:	f806 3d01 	strb.w	r3, [r6, #-1]!
   e8a1c:	0923      	lsrs	r3, r4, #4
   e8a1e:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   e8a22:	461c      	mov	r4, r3
   e8a24:	460d      	mov	r5, r1
   e8a26:	ea54 0305 	orrs.w	r3, r4, r5
   e8a2a:	d1f1      	bne.n	e8a10 <_ZSt13__int_to_charIcyEiPT_T0_PKS0_St13_Ios_Fmtflagsb+0x7c>
   e8a2c:	1bb8      	subs	r0, r7, r6
   e8a2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000e8a34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   e8a34:	4b24      	ldr	r3, [pc, #144]	; (e8ac8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   e8a36:	681a      	ldr	r2, [r3, #0]
   e8a38:	07d0      	lsls	r0, r2, #31
   e8a3a:	bf5c      	itt	pl
   e8a3c:	2201      	movpl	r2, #1
   e8a3e:	601a      	strpl	r2, [r3, #0]
   e8a40:	4b22      	ldr	r3, [pc, #136]	; (e8acc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   e8a42:	681a      	ldr	r2, [r3, #0]
   e8a44:	07d1      	lsls	r1, r2, #31
   e8a46:	bf5c      	itt	pl
   e8a48:	2201      	movpl	r2, #1
   e8a4a:	601a      	strpl	r2, [r3, #0]
   e8a4c:	4b20      	ldr	r3, [pc, #128]	; (e8ad0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   e8a4e:	681a      	ldr	r2, [r3, #0]
   e8a50:	07d2      	lsls	r2, r2, #31
   e8a52:	bf5c      	itt	pl
   e8a54:	2201      	movpl	r2, #1
   e8a56:	601a      	strpl	r2, [r3, #0]
   e8a58:	4b1e      	ldr	r3, [pc, #120]	; (e8ad4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   e8a5a:	681a      	ldr	r2, [r3, #0]
   e8a5c:	07d0      	lsls	r0, r2, #31
   e8a5e:	bf5c      	itt	pl
   e8a60:	2201      	movpl	r2, #1
   e8a62:	601a      	strpl	r2, [r3, #0]
   e8a64:	4b1c      	ldr	r3, [pc, #112]	; (e8ad8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   e8a66:	681a      	ldr	r2, [r3, #0]
   e8a68:	07d1      	lsls	r1, r2, #31
   e8a6a:	bf5c      	itt	pl
   e8a6c:	2201      	movpl	r2, #1
   e8a6e:	601a      	strpl	r2, [r3, #0]
   e8a70:	4b1a      	ldr	r3, [pc, #104]	; (e8adc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   e8a72:	681a      	ldr	r2, [r3, #0]
   e8a74:	07d2      	lsls	r2, r2, #31
   e8a76:	bf5c      	itt	pl
   e8a78:	2201      	movpl	r2, #1
   e8a7a:	601a      	strpl	r2, [r3, #0]
   e8a7c:	4b18      	ldr	r3, [pc, #96]	; (e8ae0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   e8a7e:	681a      	ldr	r2, [r3, #0]
   e8a80:	07d0      	lsls	r0, r2, #31
   e8a82:	bf5c      	itt	pl
   e8a84:	2201      	movpl	r2, #1
   e8a86:	601a      	strpl	r2, [r3, #0]
   e8a88:	4b16      	ldr	r3, [pc, #88]	; (e8ae4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   e8a8a:	681a      	ldr	r2, [r3, #0]
   e8a8c:	07d1      	lsls	r1, r2, #31
   e8a8e:	bf5c      	itt	pl
   e8a90:	2201      	movpl	r2, #1
   e8a92:	601a      	strpl	r2, [r3, #0]
   e8a94:	4b14      	ldr	r3, [pc, #80]	; (e8ae8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   e8a96:	681a      	ldr	r2, [r3, #0]
   e8a98:	07d2      	lsls	r2, r2, #31
   e8a9a:	bf5c      	itt	pl
   e8a9c:	2201      	movpl	r2, #1
   e8a9e:	601a      	strpl	r2, [r3, #0]
   e8aa0:	4b12      	ldr	r3, [pc, #72]	; (e8aec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   e8aa2:	681a      	ldr	r2, [r3, #0]
   e8aa4:	07d0      	lsls	r0, r2, #31
   e8aa6:	bf5c      	itt	pl
   e8aa8:	2201      	movpl	r2, #1
   e8aaa:	601a      	strpl	r2, [r3, #0]
   e8aac:	4b10      	ldr	r3, [pc, #64]	; (e8af0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   e8aae:	681a      	ldr	r2, [r3, #0]
   e8ab0:	07d1      	lsls	r1, r2, #31
   e8ab2:	bf5c      	itt	pl
   e8ab4:	2201      	movpl	r2, #1
   e8ab6:	601a      	strpl	r2, [r3, #0]
   e8ab8:	4b0e      	ldr	r3, [pc, #56]	; (e8af4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   e8aba:	681a      	ldr	r2, [r3, #0]
   e8abc:	07d2      	lsls	r2, r2, #31
   e8abe:	bf5c      	itt	pl
   e8ac0:	2201      	movpl	r2, #1
   e8ac2:	601a      	strpl	r2, [r3, #0]
   e8ac4:	4770      	bx	lr
   e8ac6:	bf00      	nop
   e8ac8:	2003e7a4 	.word	0x2003e7a4
   e8acc:	2003e7a0 	.word	0x2003e7a0
   e8ad0:	2003e79c 	.word	0x2003e79c
   e8ad4:	2003e798 	.word	0x2003e798
   e8ad8:	2003e794 	.word	0x2003e794
   e8adc:	2003e790 	.word	0x2003e790
   e8ae0:	2003e78c 	.word	0x2003e78c
   e8ae4:	2003e788 	.word	0x2003e788
   e8ae8:	2003e784 	.word	0x2003e784
   e8aec:	2003e780 	.word	0x2003e780
   e8af0:	2003e77c 	.word	0x2003e77c
   e8af4:	2003e778 	.word	0x2003e778

000e8af8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   e8af8:	4b18      	ldr	r3, [pc, #96]	; (e8b5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   e8afa:	681a      	ldr	r2, [r3, #0]
   e8afc:	07d1      	lsls	r1, r2, #31
   e8afe:	bf5c      	itt	pl
   e8b00:	2201      	movpl	r2, #1
   e8b02:	601a      	strpl	r2, [r3, #0]
   e8b04:	4b16      	ldr	r3, [pc, #88]	; (e8b60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   e8b06:	681a      	ldr	r2, [r3, #0]
   e8b08:	07d2      	lsls	r2, r2, #31
   e8b0a:	bf5c      	itt	pl
   e8b0c:	2201      	movpl	r2, #1
   e8b0e:	601a      	strpl	r2, [r3, #0]
   e8b10:	4b14      	ldr	r3, [pc, #80]	; (e8b64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   e8b12:	681a      	ldr	r2, [r3, #0]
   e8b14:	07d0      	lsls	r0, r2, #31
   e8b16:	bf5c      	itt	pl
   e8b18:	2201      	movpl	r2, #1
   e8b1a:	601a      	strpl	r2, [r3, #0]
   e8b1c:	4b12      	ldr	r3, [pc, #72]	; (e8b68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   e8b1e:	681a      	ldr	r2, [r3, #0]
   e8b20:	07d1      	lsls	r1, r2, #31
   e8b22:	bf5c      	itt	pl
   e8b24:	2201      	movpl	r2, #1
   e8b26:	601a      	strpl	r2, [r3, #0]
   e8b28:	4b10      	ldr	r3, [pc, #64]	; (e8b6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   e8b2a:	681a      	ldr	r2, [r3, #0]
   e8b2c:	07d2      	lsls	r2, r2, #31
   e8b2e:	bf5c      	itt	pl
   e8b30:	2201      	movpl	r2, #1
   e8b32:	601a      	strpl	r2, [r3, #0]
   e8b34:	4b0e      	ldr	r3, [pc, #56]	; (e8b70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   e8b36:	681a      	ldr	r2, [r3, #0]
   e8b38:	07d0      	lsls	r0, r2, #31
   e8b3a:	bf5c      	itt	pl
   e8b3c:	2201      	movpl	r2, #1
   e8b3e:	601a      	strpl	r2, [r3, #0]
   e8b40:	4b0c      	ldr	r3, [pc, #48]	; (e8b74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   e8b42:	681a      	ldr	r2, [r3, #0]
   e8b44:	07d1      	lsls	r1, r2, #31
   e8b46:	bf5c      	itt	pl
   e8b48:	2201      	movpl	r2, #1
   e8b4a:	601a      	strpl	r2, [r3, #0]
   e8b4c:	4b0a      	ldr	r3, [pc, #40]	; (e8b78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   e8b4e:	681a      	ldr	r2, [r3, #0]
   e8b50:	07d2      	lsls	r2, r2, #31
   e8b52:	bf5c      	itt	pl
   e8b54:	2201      	movpl	r2, #1
   e8b56:	601a      	strpl	r2, [r3, #0]
   e8b58:	4770      	bx	lr
   e8b5a:	bf00      	nop
   e8b5c:	2003e7c4 	.word	0x2003e7c4
   e8b60:	2003e7c0 	.word	0x2003e7c0
   e8b64:	2003e7bc 	.word	0x2003e7bc
   e8b68:	2003e7b8 	.word	0x2003e7b8
   e8b6c:	2003e7b4 	.word	0x2003e7b4
   e8b70:	2003e7b0 	.word	0x2003e7b0
   e8b74:	2003e7ac 	.word	0x2003e7ac
   e8b78:	2003e7a8 	.word	0x2003e7a8

000e8b7c <__aeabi_drsub>:
   e8b7c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   e8b80:	e002      	b.n	e8b88 <__adddf3>
   e8b82:	bf00      	nop

000e8b84 <__aeabi_dsub>:
   e8b84:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000e8b88 <__adddf3>:
   e8b88:	b530      	push	{r4, r5, lr}
   e8b8a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   e8b8e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   e8b92:	ea94 0f05 	teq	r4, r5
   e8b96:	bf08      	it	eq
   e8b98:	ea90 0f02 	teqeq	r0, r2
   e8b9c:	bf1f      	itttt	ne
   e8b9e:	ea54 0c00 	orrsne.w	ip, r4, r0
   e8ba2:	ea55 0c02 	orrsne.w	ip, r5, r2
   e8ba6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   e8baa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   e8bae:	f000 80e2 	beq.w	e8d76 <__adddf3+0x1ee>
   e8bb2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   e8bb6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   e8bba:	bfb8      	it	lt
   e8bbc:	426d      	neglt	r5, r5
   e8bbe:	dd0c      	ble.n	e8bda <__adddf3+0x52>
   e8bc0:	442c      	add	r4, r5
   e8bc2:	ea80 0202 	eor.w	r2, r0, r2
   e8bc6:	ea81 0303 	eor.w	r3, r1, r3
   e8bca:	ea82 0000 	eor.w	r0, r2, r0
   e8bce:	ea83 0101 	eor.w	r1, r3, r1
   e8bd2:	ea80 0202 	eor.w	r2, r0, r2
   e8bd6:	ea81 0303 	eor.w	r3, r1, r3
   e8bda:	2d36      	cmp	r5, #54	; 0x36
   e8bdc:	bf88      	it	hi
   e8bde:	bd30      	pophi	{r4, r5, pc}
   e8be0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   e8be4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   e8be8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   e8bec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   e8bf0:	d002      	beq.n	e8bf8 <__adddf3+0x70>
   e8bf2:	4240      	negs	r0, r0
   e8bf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   e8bf8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   e8bfc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   e8c00:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   e8c04:	d002      	beq.n	e8c0c <__adddf3+0x84>
   e8c06:	4252      	negs	r2, r2
   e8c08:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   e8c0c:	ea94 0f05 	teq	r4, r5
   e8c10:	f000 80a7 	beq.w	e8d62 <__adddf3+0x1da>
   e8c14:	f1a4 0401 	sub.w	r4, r4, #1
   e8c18:	f1d5 0e20 	rsbs	lr, r5, #32
   e8c1c:	db0d      	blt.n	e8c3a <__adddf3+0xb2>
   e8c1e:	fa02 fc0e 	lsl.w	ip, r2, lr
   e8c22:	fa22 f205 	lsr.w	r2, r2, r5
   e8c26:	1880      	adds	r0, r0, r2
   e8c28:	f141 0100 	adc.w	r1, r1, #0
   e8c2c:	fa03 f20e 	lsl.w	r2, r3, lr
   e8c30:	1880      	adds	r0, r0, r2
   e8c32:	fa43 f305 	asr.w	r3, r3, r5
   e8c36:	4159      	adcs	r1, r3
   e8c38:	e00e      	b.n	e8c58 <__adddf3+0xd0>
   e8c3a:	f1a5 0520 	sub.w	r5, r5, #32
   e8c3e:	f10e 0e20 	add.w	lr, lr, #32
   e8c42:	2a01      	cmp	r2, #1
   e8c44:	fa03 fc0e 	lsl.w	ip, r3, lr
   e8c48:	bf28      	it	cs
   e8c4a:	f04c 0c02 	orrcs.w	ip, ip, #2
   e8c4e:	fa43 f305 	asr.w	r3, r3, r5
   e8c52:	18c0      	adds	r0, r0, r3
   e8c54:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   e8c58:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   e8c5c:	d507      	bpl.n	e8c6e <__adddf3+0xe6>
   e8c5e:	f04f 0e00 	mov.w	lr, #0
   e8c62:	f1dc 0c00 	rsbs	ip, ip, #0
   e8c66:	eb7e 0000 	sbcs.w	r0, lr, r0
   e8c6a:	eb6e 0101 	sbc.w	r1, lr, r1
   e8c6e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   e8c72:	d31b      	bcc.n	e8cac <__adddf3+0x124>
   e8c74:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   e8c78:	d30c      	bcc.n	e8c94 <__adddf3+0x10c>
   e8c7a:	0849      	lsrs	r1, r1, #1
   e8c7c:	ea5f 0030 	movs.w	r0, r0, rrx
   e8c80:	ea4f 0c3c 	mov.w	ip, ip, rrx
   e8c84:	f104 0401 	add.w	r4, r4, #1
   e8c88:	ea4f 5244 	mov.w	r2, r4, lsl #21
   e8c8c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   e8c90:	f080 809a 	bcs.w	e8dc8 <__adddf3+0x240>
   e8c94:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   e8c98:	bf08      	it	eq
   e8c9a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   e8c9e:	f150 0000 	adcs.w	r0, r0, #0
   e8ca2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   e8ca6:	ea41 0105 	orr.w	r1, r1, r5
   e8caa:	bd30      	pop	{r4, r5, pc}
   e8cac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   e8cb0:	4140      	adcs	r0, r0
   e8cb2:	eb41 0101 	adc.w	r1, r1, r1
   e8cb6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   e8cba:	f1a4 0401 	sub.w	r4, r4, #1
   e8cbe:	d1e9      	bne.n	e8c94 <__adddf3+0x10c>
   e8cc0:	f091 0f00 	teq	r1, #0
   e8cc4:	bf04      	itt	eq
   e8cc6:	4601      	moveq	r1, r0
   e8cc8:	2000      	moveq	r0, #0
   e8cca:	fab1 f381 	clz	r3, r1
   e8cce:	bf08      	it	eq
   e8cd0:	3320      	addeq	r3, #32
   e8cd2:	f1a3 030b 	sub.w	r3, r3, #11
   e8cd6:	f1b3 0220 	subs.w	r2, r3, #32
   e8cda:	da0c      	bge.n	e8cf6 <__adddf3+0x16e>
   e8cdc:	320c      	adds	r2, #12
   e8cde:	dd08      	ble.n	e8cf2 <__adddf3+0x16a>
   e8ce0:	f102 0c14 	add.w	ip, r2, #20
   e8ce4:	f1c2 020c 	rsb	r2, r2, #12
   e8ce8:	fa01 f00c 	lsl.w	r0, r1, ip
   e8cec:	fa21 f102 	lsr.w	r1, r1, r2
   e8cf0:	e00c      	b.n	e8d0c <__adddf3+0x184>
   e8cf2:	f102 0214 	add.w	r2, r2, #20
   e8cf6:	bfd8      	it	le
   e8cf8:	f1c2 0c20 	rsble	ip, r2, #32
   e8cfc:	fa01 f102 	lsl.w	r1, r1, r2
   e8d00:	fa20 fc0c 	lsr.w	ip, r0, ip
   e8d04:	bfdc      	itt	le
   e8d06:	ea41 010c 	orrle.w	r1, r1, ip
   e8d0a:	4090      	lslle	r0, r2
   e8d0c:	1ae4      	subs	r4, r4, r3
   e8d0e:	bfa2      	ittt	ge
   e8d10:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   e8d14:	4329      	orrge	r1, r5
   e8d16:	bd30      	popge	{r4, r5, pc}
   e8d18:	ea6f 0404 	mvn.w	r4, r4
   e8d1c:	3c1f      	subs	r4, #31
   e8d1e:	da1c      	bge.n	e8d5a <__adddf3+0x1d2>
   e8d20:	340c      	adds	r4, #12
   e8d22:	dc0e      	bgt.n	e8d42 <__adddf3+0x1ba>
   e8d24:	f104 0414 	add.w	r4, r4, #20
   e8d28:	f1c4 0220 	rsb	r2, r4, #32
   e8d2c:	fa20 f004 	lsr.w	r0, r0, r4
   e8d30:	fa01 f302 	lsl.w	r3, r1, r2
   e8d34:	ea40 0003 	orr.w	r0, r0, r3
   e8d38:	fa21 f304 	lsr.w	r3, r1, r4
   e8d3c:	ea45 0103 	orr.w	r1, r5, r3
   e8d40:	bd30      	pop	{r4, r5, pc}
   e8d42:	f1c4 040c 	rsb	r4, r4, #12
   e8d46:	f1c4 0220 	rsb	r2, r4, #32
   e8d4a:	fa20 f002 	lsr.w	r0, r0, r2
   e8d4e:	fa01 f304 	lsl.w	r3, r1, r4
   e8d52:	ea40 0003 	orr.w	r0, r0, r3
   e8d56:	4629      	mov	r1, r5
   e8d58:	bd30      	pop	{r4, r5, pc}
   e8d5a:	fa21 f004 	lsr.w	r0, r1, r4
   e8d5e:	4629      	mov	r1, r5
   e8d60:	bd30      	pop	{r4, r5, pc}
   e8d62:	f094 0f00 	teq	r4, #0
   e8d66:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   e8d6a:	bf06      	itte	eq
   e8d6c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   e8d70:	3401      	addeq	r4, #1
   e8d72:	3d01      	subne	r5, #1
   e8d74:	e74e      	b.n	e8c14 <__adddf3+0x8c>
   e8d76:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   e8d7a:	bf18      	it	ne
   e8d7c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   e8d80:	d029      	beq.n	e8dd6 <__adddf3+0x24e>
   e8d82:	ea94 0f05 	teq	r4, r5
   e8d86:	bf08      	it	eq
   e8d88:	ea90 0f02 	teqeq	r0, r2
   e8d8c:	d005      	beq.n	e8d9a <__adddf3+0x212>
   e8d8e:	ea54 0c00 	orrs.w	ip, r4, r0
   e8d92:	bf04      	itt	eq
   e8d94:	4619      	moveq	r1, r3
   e8d96:	4610      	moveq	r0, r2
   e8d98:	bd30      	pop	{r4, r5, pc}
   e8d9a:	ea91 0f03 	teq	r1, r3
   e8d9e:	bf1e      	ittt	ne
   e8da0:	2100      	movne	r1, #0
   e8da2:	2000      	movne	r0, #0
   e8da4:	bd30      	popne	{r4, r5, pc}
   e8da6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   e8daa:	d105      	bne.n	e8db8 <__adddf3+0x230>
   e8dac:	0040      	lsls	r0, r0, #1
   e8dae:	4149      	adcs	r1, r1
   e8db0:	bf28      	it	cs
   e8db2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   e8db6:	bd30      	pop	{r4, r5, pc}
   e8db8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   e8dbc:	bf3c      	itt	cc
   e8dbe:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   e8dc2:	bd30      	popcc	{r4, r5, pc}
   e8dc4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   e8dc8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   e8dcc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   e8dd0:	f04f 0000 	mov.w	r0, #0
   e8dd4:	bd30      	pop	{r4, r5, pc}
   e8dd6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   e8dda:	bf1a      	itte	ne
   e8ddc:	4619      	movne	r1, r3
   e8dde:	4610      	movne	r0, r2
   e8de0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   e8de4:	bf1c      	itt	ne
   e8de6:	460b      	movne	r3, r1
   e8de8:	4602      	movne	r2, r0
   e8dea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   e8dee:	bf06      	itte	eq
   e8df0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   e8df4:	ea91 0f03 	teqeq	r1, r3
   e8df8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   e8dfc:	bd30      	pop	{r4, r5, pc}
   e8dfe:	bf00      	nop

000e8e00 <__aeabi_ui2d>:
   e8e00:	f090 0f00 	teq	r0, #0
   e8e04:	bf04      	itt	eq
   e8e06:	2100      	moveq	r1, #0
   e8e08:	4770      	bxeq	lr
   e8e0a:	b530      	push	{r4, r5, lr}
   e8e0c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   e8e10:	f104 0432 	add.w	r4, r4, #50	; 0x32
   e8e14:	f04f 0500 	mov.w	r5, #0
   e8e18:	f04f 0100 	mov.w	r1, #0
   e8e1c:	e750      	b.n	e8cc0 <__adddf3+0x138>
   e8e1e:	bf00      	nop

000e8e20 <__aeabi_i2d>:
   e8e20:	f090 0f00 	teq	r0, #0
   e8e24:	bf04      	itt	eq
   e8e26:	2100      	moveq	r1, #0
   e8e28:	4770      	bxeq	lr
   e8e2a:	b530      	push	{r4, r5, lr}
   e8e2c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   e8e30:	f104 0432 	add.w	r4, r4, #50	; 0x32
   e8e34:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   e8e38:	bf48      	it	mi
   e8e3a:	4240      	negmi	r0, r0
   e8e3c:	f04f 0100 	mov.w	r1, #0
   e8e40:	e73e      	b.n	e8cc0 <__adddf3+0x138>
   e8e42:	bf00      	nop

000e8e44 <__aeabi_f2d>:
   e8e44:	0042      	lsls	r2, r0, #1
   e8e46:	ea4f 01e2 	mov.w	r1, r2, asr #3
   e8e4a:	ea4f 0131 	mov.w	r1, r1, rrx
   e8e4e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   e8e52:	bf1f      	itttt	ne
   e8e54:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   e8e58:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   e8e5c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   e8e60:	4770      	bxne	lr
   e8e62:	f092 0f00 	teq	r2, #0
   e8e66:	bf14      	ite	ne
   e8e68:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   e8e6c:	4770      	bxeq	lr
   e8e6e:	b530      	push	{r4, r5, lr}
   e8e70:	f44f 7460 	mov.w	r4, #896	; 0x380
   e8e74:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   e8e78:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   e8e7c:	e720      	b.n	e8cc0 <__adddf3+0x138>
   e8e7e:	bf00      	nop

000e8e80 <__aeabi_ul2d>:
   e8e80:	ea50 0201 	orrs.w	r2, r0, r1
   e8e84:	bf08      	it	eq
   e8e86:	4770      	bxeq	lr
   e8e88:	b530      	push	{r4, r5, lr}
   e8e8a:	f04f 0500 	mov.w	r5, #0
   e8e8e:	e00a      	b.n	e8ea6 <__aeabi_l2d+0x16>

000e8e90 <__aeabi_l2d>:
   e8e90:	ea50 0201 	orrs.w	r2, r0, r1
   e8e94:	bf08      	it	eq
   e8e96:	4770      	bxeq	lr
   e8e98:	b530      	push	{r4, r5, lr}
   e8e9a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   e8e9e:	d502      	bpl.n	e8ea6 <__aeabi_l2d+0x16>
   e8ea0:	4240      	negs	r0, r0
   e8ea2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   e8ea6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   e8eaa:	f104 0432 	add.w	r4, r4, #50	; 0x32
   e8eae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   e8eb2:	f43f aedc 	beq.w	e8c6e <__adddf3+0xe6>
   e8eb6:	f04f 0203 	mov.w	r2, #3
   e8eba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   e8ebe:	bf18      	it	ne
   e8ec0:	3203      	addne	r2, #3
   e8ec2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   e8ec6:	bf18      	it	ne
   e8ec8:	3203      	addne	r2, #3
   e8eca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   e8ece:	f1c2 0320 	rsb	r3, r2, #32
   e8ed2:	fa00 fc03 	lsl.w	ip, r0, r3
   e8ed6:	fa20 f002 	lsr.w	r0, r0, r2
   e8eda:	fa01 fe03 	lsl.w	lr, r1, r3
   e8ede:	ea40 000e 	orr.w	r0, r0, lr
   e8ee2:	fa21 f102 	lsr.w	r1, r1, r2
   e8ee6:	4414      	add	r4, r2
   e8ee8:	e6c1      	b.n	e8c6e <__adddf3+0xe6>
   e8eea:	bf00      	nop

000e8eec <__aeabi_dmul>:
   e8eec:	b570      	push	{r4, r5, r6, lr}
   e8eee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   e8ef2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   e8ef6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   e8efa:	bf1d      	ittte	ne
   e8efc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   e8f00:	ea94 0f0c 	teqne	r4, ip
   e8f04:	ea95 0f0c 	teqne	r5, ip
   e8f08:	f000 f8de 	bleq	e90c8 <__aeabi_dmul+0x1dc>
   e8f0c:	442c      	add	r4, r5
   e8f0e:	ea81 0603 	eor.w	r6, r1, r3
   e8f12:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   e8f16:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   e8f1a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   e8f1e:	bf18      	it	ne
   e8f20:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   e8f24:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e8f28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   e8f2c:	d038      	beq.n	e8fa0 <__aeabi_dmul+0xb4>
   e8f2e:	fba0 ce02 	umull	ip, lr, r0, r2
   e8f32:	f04f 0500 	mov.w	r5, #0
   e8f36:	fbe1 e502 	umlal	lr, r5, r1, r2
   e8f3a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   e8f3e:	fbe0 e503 	umlal	lr, r5, r0, r3
   e8f42:	f04f 0600 	mov.w	r6, #0
   e8f46:	fbe1 5603 	umlal	r5, r6, r1, r3
   e8f4a:	f09c 0f00 	teq	ip, #0
   e8f4e:	bf18      	it	ne
   e8f50:	f04e 0e01 	orrne.w	lr, lr, #1
   e8f54:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   e8f58:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   e8f5c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   e8f60:	d204      	bcs.n	e8f6c <__aeabi_dmul+0x80>
   e8f62:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   e8f66:	416d      	adcs	r5, r5
   e8f68:	eb46 0606 	adc.w	r6, r6, r6
   e8f6c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   e8f70:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   e8f74:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   e8f78:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   e8f7c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   e8f80:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   e8f84:	bf88      	it	hi
   e8f86:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   e8f8a:	d81e      	bhi.n	e8fca <__aeabi_dmul+0xde>
   e8f8c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   e8f90:	bf08      	it	eq
   e8f92:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   e8f96:	f150 0000 	adcs.w	r0, r0, #0
   e8f9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   e8f9e:	bd70      	pop	{r4, r5, r6, pc}
   e8fa0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   e8fa4:	ea46 0101 	orr.w	r1, r6, r1
   e8fa8:	ea40 0002 	orr.w	r0, r0, r2
   e8fac:	ea81 0103 	eor.w	r1, r1, r3
   e8fb0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   e8fb4:	bfc2      	ittt	gt
   e8fb6:	ebd4 050c 	rsbsgt	r5, r4, ip
   e8fba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   e8fbe:	bd70      	popgt	{r4, r5, r6, pc}
   e8fc0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e8fc4:	f04f 0e00 	mov.w	lr, #0
   e8fc8:	3c01      	subs	r4, #1
   e8fca:	f300 80ab 	bgt.w	e9124 <__aeabi_dmul+0x238>
   e8fce:	f114 0f36 	cmn.w	r4, #54	; 0x36
   e8fd2:	bfde      	ittt	le
   e8fd4:	2000      	movle	r0, #0
   e8fd6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   e8fda:	bd70      	pople	{r4, r5, r6, pc}
   e8fdc:	f1c4 0400 	rsb	r4, r4, #0
   e8fe0:	3c20      	subs	r4, #32
   e8fe2:	da35      	bge.n	e9050 <__aeabi_dmul+0x164>
   e8fe4:	340c      	adds	r4, #12
   e8fe6:	dc1b      	bgt.n	e9020 <__aeabi_dmul+0x134>
   e8fe8:	f104 0414 	add.w	r4, r4, #20
   e8fec:	f1c4 0520 	rsb	r5, r4, #32
   e8ff0:	fa00 f305 	lsl.w	r3, r0, r5
   e8ff4:	fa20 f004 	lsr.w	r0, r0, r4
   e8ff8:	fa01 f205 	lsl.w	r2, r1, r5
   e8ffc:	ea40 0002 	orr.w	r0, r0, r2
   e9000:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   e9004:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   e9008:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   e900c:	fa21 f604 	lsr.w	r6, r1, r4
   e9010:	eb42 0106 	adc.w	r1, r2, r6
   e9014:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   e9018:	bf08      	it	eq
   e901a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   e901e:	bd70      	pop	{r4, r5, r6, pc}
   e9020:	f1c4 040c 	rsb	r4, r4, #12
   e9024:	f1c4 0520 	rsb	r5, r4, #32
   e9028:	fa00 f304 	lsl.w	r3, r0, r4
   e902c:	fa20 f005 	lsr.w	r0, r0, r5
   e9030:	fa01 f204 	lsl.w	r2, r1, r4
   e9034:	ea40 0002 	orr.w	r0, r0, r2
   e9038:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e903c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   e9040:	f141 0100 	adc.w	r1, r1, #0
   e9044:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   e9048:	bf08      	it	eq
   e904a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   e904e:	bd70      	pop	{r4, r5, r6, pc}
   e9050:	f1c4 0520 	rsb	r5, r4, #32
   e9054:	fa00 f205 	lsl.w	r2, r0, r5
   e9058:	ea4e 0e02 	orr.w	lr, lr, r2
   e905c:	fa20 f304 	lsr.w	r3, r0, r4
   e9060:	fa01 f205 	lsl.w	r2, r1, r5
   e9064:	ea43 0302 	orr.w	r3, r3, r2
   e9068:	fa21 f004 	lsr.w	r0, r1, r4
   e906c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e9070:	fa21 f204 	lsr.w	r2, r1, r4
   e9074:	ea20 0002 	bic.w	r0, r0, r2
   e9078:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   e907c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   e9080:	bf08      	it	eq
   e9082:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   e9086:	bd70      	pop	{r4, r5, r6, pc}
   e9088:	f094 0f00 	teq	r4, #0
   e908c:	d10f      	bne.n	e90ae <__aeabi_dmul+0x1c2>
   e908e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   e9092:	0040      	lsls	r0, r0, #1
   e9094:	eb41 0101 	adc.w	r1, r1, r1
   e9098:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   e909c:	bf08      	it	eq
   e909e:	3c01      	subeq	r4, #1
   e90a0:	d0f7      	beq.n	e9092 <__aeabi_dmul+0x1a6>
   e90a2:	ea41 0106 	orr.w	r1, r1, r6
   e90a6:	f095 0f00 	teq	r5, #0
   e90aa:	bf18      	it	ne
   e90ac:	4770      	bxne	lr
   e90ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   e90b2:	0052      	lsls	r2, r2, #1
   e90b4:	eb43 0303 	adc.w	r3, r3, r3
   e90b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   e90bc:	bf08      	it	eq
   e90be:	3d01      	subeq	r5, #1
   e90c0:	d0f7      	beq.n	e90b2 <__aeabi_dmul+0x1c6>
   e90c2:	ea43 0306 	orr.w	r3, r3, r6
   e90c6:	4770      	bx	lr
   e90c8:	ea94 0f0c 	teq	r4, ip
   e90cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   e90d0:	bf18      	it	ne
   e90d2:	ea95 0f0c 	teqne	r5, ip
   e90d6:	d00c      	beq.n	e90f2 <__aeabi_dmul+0x206>
   e90d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   e90dc:	bf18      	it	ne
   e90de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   e90e2:	d1d1      	bne.n	e9088 <__aeabi_dmul+0x19c>
   e90e4:	ea81 0103 	eor.w	r1, r1, r3
   e90e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e90ec:	f04f 0000 	mov.w	r0, #0
   e90f0:	bd70      	pop	{r4, r5, r6, pc}
   e90f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   e90f6:	bf06      	itte	eq
   e90f8:	4610      	moveq	r0, r2
   e90fa:	4619      	moveq	r1, r3
   e90fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   e9100:	d019      	beq.n	e9136 <__aeabi_dmul+0x24a>
   e9102:	ea94 0f0c 	teq	r4, ip
   e9106:	d102      	bne.n	e910e <__aeabi_dmul+0x222>
   e9108:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   e910c:	d113      	bne.n	e9136 <__aeabi_dmul+0x24a>
   e910e:	ea95 0f0c 	teq	r5, ip
   e9112:	d105      	bne.n	e9120 <__aeabi_dmul+0x234>
   e9114:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   e9118:	bf1c      	itt	ne
   e911a:	4610      	movne	r0, r2
   e911c:	4619      	movne	r1, r3
   e911e:	d10a      	bne.n	e9136 <__aeabi_dmul+0x24a>
   e9120:	ea81 0103 	eor.w	r1, r1, r3
   e9124:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e9128:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   e912c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   e9130:	f04f 0000 	mov.w	r0, #0
   e9134:	bd70      	pop	{r4, r5, r6, pc}
   e9136:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   e913a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   e913e:	bd70      	pop	{r4, r5, r6, pc}

000e9140 <__aeabi_ddiv>:
   e9140:	b570      	push	{r4, r5, r6, lr}
   e9142:	f04f 0cff 	mov.w	ip, #255	; 0xff
   e9146:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   e914a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   e914e:	bf1d      	ittte	ne
   e9150:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   e9154:	ea94 0f0c 	teqne	r4, ip
   e9158:	ea95 0f0c 	teqne	r5, ip
   e915c:	f000 f8a7 	bleq	e92ae <__aeabi_ddiv+0x16e>
   e9160:	eba4 0405 	sub.w	r4, r4, r5
   e9164:	ea81 0e03 	eor.w	lr, r1, r3
   e9168:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   e916c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   e9170:	f000 8088 	beq.w	e9284 <__aeabi_ddiv+0x144>
   e9174:	ea4f 3303 	mov.w	r3, r3, lsl #12
   e9178:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   e917c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   e9180:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   e9184:	ea4f 2202 	mov.w	r2, r2, lsl #8
   e9188:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   e918c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   e9190:	ea4f 2600 	mov.w	r6, r0, lsl #8
   e9194:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   e9198:	429d      	cmp	r5, r3
   e919a:	bf08      	it	eq
   e919c:	4296      	cmpeq	r6, r2
   e919e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   e91a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   e91a6:	d202      	bcs.n	e91ae <__aeabi_ddiv+0x6e>
   e91a8:	085b      	lsrs	r3, r3, #1
   e91aa:	ea4f 0232 	mov.w	r2, r2, rrx
   e91ae:	1ab6      	subs	r6, r6, r2
   e91b0:	eb65 0503 	sbc.w	r5, r5, r3
   e91b4:	085b      	lsrs	r3, r3, #1
   e91b6:	ea4f 0232 	mov.w	r2, r2, rrx
   e91ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   e91be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   e91c2:	ebb6 0e02 	subs.w	lr, r6, r2
   e91c6:	eb75 0e03 	sbcs.w	lr, r5, r3
   e91ca:	bf22      	ittt	cs
   e91cc:	1ab6      	subcs	r6, r6, r2
   e91ce:	4675      	movcs	r5, lr
   e91d0:	ea40 000c 	orrcs.w	r0, r0, ip
   e91d4:	085b      	lsrs	r3, r3, #1
   e91d6:	ea4f 0232 	mov.w	r2, r2, rrx
   e91da:	ebb6 0e02 	subs.w	lr, r6, r2
   e91de:	eb75 0e03 	sbcs.w	lr, r5, r3
   e91e2:	bf22      	ittt	cs
   e91e4:	1ab6      	subcs	r6, r6, r2
   e91e6:	4675      	movcs	r5, lr
   e91e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   e91ec:	085b      	lsrs	r3, r3, #1
   e91ee:	ea4f 0232 	mov.w	r2, r2, rrx
   e91f2:	ebb6 0e02 	subs.w	lr, r6, r2
   e91f6:	eb75 0e03 	sbcs.w	lr, r5, r3
   e91fa:	bf22      	ittt	cs
   e91fc:	1ab6      	subcs	r6, r6, r2
   e91fe:	4675      	movcs	r5, lr
   e9200:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   e9204:	085b      	lsrs	r3, r3, #1
   e9206:	ea4f 0232 	mov.w	r2, r2, rrx
   e920a:	ebb6 0e02 	subs.w	lr, r6, r2
   e920e:	eb75 0e03 	sbcs.w	lr, r5, r3
   e9212:	bf22      	ittt	cs
   e9214:	1ab6      	subcs	r6, r6, r2
   e9216:	4675      	movcs	r5, lr
   e9218:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   e921c:	ea55 0e06 	orrs.w	lr, r5, r6
   e9220:	d018      	beq.n	e9254 <__aeabi_ddiv+0x114>
   e9222:	ea4f 1505 	mov.w	r5, r5, lsl #4
   e9226:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   e922a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   e922e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   e9232:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   e9236:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   e923a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   e923e:	d1c0      	bne.n	e91c2 <__aeabi_ddiv+0x82>
   e9240:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   e9244:	d10b      	bne.n	e925e <__aeabi_ddiv+0x11e>
   e9246:	ea41 0100 	orr.w	r1, r1, r0
   e924a:	f04f 0000 	mov.w	r0, #0
   e924e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   e9252:	e7b6      	b.n	e91c2 <__aeabi_ddiv+0x82>
   e9254:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   e9258:	bf04      	itt	eq
   e925a:	4301      	orreq	r1, r0
   e925c:	2000      	moveq	r0, #0
   e925e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   e9262:	bf88      	it	hi
   e9264:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   e9268:	f63f aeaf 	bhi.w	e8fca <__aeabi_dmul+0xde>
   e926c:	ebb5 0c03 	subs.w	ip, r5, r3
   e9270:	bf04      	itt	eq
   e9272:	ebb6 0c02 	subseq.w	ip, r6, r2
   e9276:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   e927a:	f150 0000 	adcs.w	r0, r0, #0
   e927e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   e9282:	bd70      	pop	{r4, r5, r6, pc}
   e9284:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   e9288:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   e928c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   e9290:	bfc2      	ittt	gt
   e9292:	ebd4 050c 	rsbsgt	r5, r4, ip
   e9296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   e929a:	bd70      	popgt	{r4, r5, r6, pc}
   e929c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e92a0:	f04f 0e00 	mov.w	lr, #0
   e92a4:	3c01      	subs	r4, #1
   e92a6:	e690      	b.n	e8fca <__aeabi_dmul+0xde>
   e92a8:	ea45 0e06 	orr.w	lr, r5, r6
   e92ac:	e68d      	b.n	e8fca <__aeabi_dmul+0xde>
   e92ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   e92b2:	ea94 0f0c 	teq	r4, ip
   e92b6:	bf08      	it	eq
   e92b8:	ea95 0f0c 	teqeq	r5, ip
   e92bc:	f43f af3b 	beq.w	e9136 <__aeabi_dmul+0x24a>
   e92c0:	ea94 0f0c 	teq	r4, ip
   e92c4:	d10a      	bne.n	e92dc <__aeabi_ddiv+0x19c>
   e92c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   e92ca:	f47f af34 	bne.w	e9136 <__aeabi_dmul+0x24a>
   e92ce:	ea95 0f0c 	teq	r5, ip
   e92d2:	f47f af25 	bne.w	e9120 <__aeabi_dmul+0x234>
   e92d6:	4610      	mov	r0, r2
   e92d8:	4619      	mov	r1, r3
   e92da:	e72c      	b.n	e9136 <__aeabi_dmul+0x24a>
   e92dc:	ea95 0f0c 	teq	r5, ip
   e92e0:	d106      	bne.n	e92f0 <__aeabi_ddiv+0x1b0>
   e92e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   e92e6:	f43f aefd 	beq.w	e90e4 <__aeabi_dmul+0x1f8>
   e92ea:	4610      	mov	r0, r2
   e92ec:	4619      	mov	r1, r3
   e92ee:	e722      	b.n	e9136 <__aeabi_dmul+0x24a>
   e92f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   e92f4:	bf18      	it	ne
   e92f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   e92fa:	f47f aec5 	bne.w	e9088 <__aeabi_dmul+0x19c>
   e92fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   e9302:	f47f af0d 	bne.w	e9120 <__aeabi_dmul+0x234>
   e9306:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   e930a:	f47f aeeb 	bne.w	e90e4 <__aeabi_dmul+0x1f8>
   e930e:	e712      	b.n	e9136 <__aeabi_dmul+0x24a>

000e9310 <__gedf2>:
   e9310:	f04f 3cff 	mov.w	ip, #4294967295
   e9314:	e006      	b.n	e9324 <__cmpdf2+0x4>
   e9316:	bf00      	nop

000e9318 <__ledf2>:
   e9318:	f04f 0c01 	mov.w	ip, #1
   e931c:	e002      	b.n	e9324 <__cmpdf2+0x4>
   e931e:	bf00      	nop

000e9320 <__cmpdf2>:
   e9320:	f04f 0c01 	mov.w	ip, #1
   e9324:	f84d cd04 	str.w	ip, [sp, #-4]!
   e9328:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   e932c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e9330:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   e9334:	bf18      	it	ne
   e9336:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   e933a:	d01b      	beq.n	e9374 <__cmpdf2+0x54>
   e933c:	b001      	add	sp, #4
   e933e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   e9342:	bf0c      	ite	eq
   e9344:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   e9348:	ea91 0f03 	teqne	r1, r3
   e934c:	bf02      	ittt	eq
   e934e:	ea90 0f02 	teqeq	r0, r2
   e9352:	2000      	moveq	r0, #0
   e9354:	4770      	bxeq	lr
   e9356:	f110 0f00 	cmn.w	r0, #0
   e935a:	ea91 0f03 	teq	r1, r3
   e935e:	bf58      	it	pl
   e9360:	4299      	cmppl	r1, r3
   e9362:	bf08      	it	eq
   e9364:	4290      	cmpeq	r0, r2
   e9366:	bf2c      	ite	cs
   e9368:	17d8      	asrcs	r0, r3, #31
   e936a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   e936e:	f040 0001 	orr.w	r0, r0, #1
   e9372:	4770      	bx	lr
   e9374:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   e9378:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e937c:	d102      	bne.n	e9384 <__cmpdf2+0x64>
   e937e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   e9382:	d107      	bne.n	e9394 <__cmpdf2+0x74>
   e9384:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   e9388:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e938c:	d1d6      	bne.n	e933c <__cmpdf2+0x1c>
   e938e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   e9392:	d0d3      	beq.n	e933c <__cmpdf2+0x1c>
   e9394:	f85d 0b04 	ldr.w	r0, [sp], #4
   e9398:	4770      	bx	lr
   e939a:	bf00      	nop

000e939c <__aeabi_cdrcmple>:
   e939c:	4684      	mov	ip, r0
   e939e:	4610      	mov	r0, r2
   e93a0:	4662      	mov	r2, ip
   e93a2:	468c      	mov	ip, r1
   e93a4:	4619      	mov	r1, r3
   e93a6:	4663      	mov	r3, ip
   e93a8:	e000      	b.n	e93ac <__aeabi_cdcmpeq>
   e93aa:	bf00      	nop

000e93ac <__aeabi_cdcmpeq>:
   e93ac:	b501      	push	{r0, lr}
   e93ae:	f7ff ffb7 	bl	e9320 <__cmpdf2>
   e93b2:	2800      	cmp	r0, #0
   e93b4:	bf48      	it	mi
   e93b6:	f110 0f00 	cmnmi.w	r0, #0
   e93ba:	bd01      	pop	{r0, pc}

000e93bc <__aeabi_dcmpeq>:
   e93bc:	f84d ed08 	str.w	lr, [sp, #-8]!
   e93c0:	f7ff fff4 	bl	e93ac <__aeabi_cdcmpeq>
   e93c4:	bf0c      	ite	eq
   e93c6:	2001      	moveq	r0, #1
   e93c8:	2000      	movne	r0, #0
   e93ca:	f85d fb08 	ldr.w	pc, [sp], #8
   e93ce:	bf00      	nop

000e93d0 <__aeabi_dcmplt>:
   e93d0:	f84d ed08 	str.w	lr, [sp, #-8]!
   e93d4:	f7ff ffea 	bl	e93ac <__aeabi_cdcmpeq>
   e93d8:	bf34      	ite	cc
   e93da:	2001      	movcc	r0, #1
   e93dc:	2000      	movcs	r0, #0
   e93de:	f85d fb08 	ldr.w	pc, [sp], #8
   e93e2:	bf00      	nop

000e93e4 <__aeabi_dcmple>:
   e93e4:	f84d ed08 	str.w	lr, [sp, #-8]!
   e93e8:	f7ff ffe0 	bl	e93ac <__aeabi_cdcmpeq>
   e93ec:	bf94      	ite	ls
   e93ee:	2001      	movls	r0, #1
   e93f0:	2000      	movhi	r0, #0
   e93f2:	f85d fb08 	ldr.w	pc, [sp], #8
   e93f6:	bf00      	nop

000e93f8 <__aeabi_dcmpge>:
   e93f8:	f84d ed08 	str.w	lr, [sp, #-8]!
   e93fc:	f7ff ffce 	bl	e939c <__aeabi_cdrcmple>
   e9400:	bf94      	ite	ls
   e9402:	2001      	movls	r0, #1
   e9404:	2000      	movhi	r0, #0
   e9406:	f85d fb08 	ldr.w	pc, [sp], #8
   e940a:	bf00      	nop

000e940c <__aeabi_dcmpgt>:
   e940c:	f84d ed08 	str.w	lr, [sp, #-8]!
   e9410:	f7ff ffc4 	bl	e939c <__aeabi_cdrcmple>
   e9414:	bf34      	ite	cc
   e9416:	2001      	movcc	r0, #1
   e9418:	2000      	movcs	r0, #0
   e941a:	f85d fb08 	ldr.w	pc, [sp], #8
   e941e:	bf00      	nop

000e9420 <__aeabi_dcmpun>:
   e9420:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   e9424:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e9428:	d102      	bne.n	e9430 <__aeabi_dcmpun+0x10>
   e942a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   e942e:	d10a      	bne.n	e9446 <__aeabi_dcmpun+0x26>
   e9430:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   e9434:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e9438:	d102      	bne.n	e9440 <__aeabi_dcmpun+0x20>
   e943a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   e943e:	d102      	bne.n	e9446 <__aeabi_dcmpun+0x26>
   e9440:	f04f 0000 	mov.w	r0, #0
   e9444:	4770      	bx	lr
   e9446:	f04f 0001 	mov.w	r0, #1
   e944a:	4770      	bx	lr

000e944c <__aeabi_d2iz>:
   e944c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   e9450:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   e9454:	d215      	bcs.n	e9482 <__aeabi_d2iz+0x36>
   e9456:	d511      	bpl.n	e947c <__aeabi_d2iz+0x30>
   e9458:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   e945c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   e9460:	d912      	bls.n	e9488 <__aeabi_d2iz+0x3c>
   e9462:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   e9466:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   e946a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   e946e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   e9472:	fa23 f002 	lsr.w	r0, r3, r2
   e9476:	bf18      	it	ne
   e9478:	4240      	negne	r0, r0
   e947a:	4770      	bx	lr
   e947c:	f04f 0000 	mov.w	r0, #0
   e9480:	4770      	bx	lr
   e9482:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   e9486:	d105      	bne.n	e9494 <__aeabi_d2iz+0x48>
   e9488:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   e948c:	bf08      	it	eq
   e948e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   e9492:	4770      	bx	lr
   e9494:	f04f 0000 	mov.w	r0, #0
   e9498:	4770      	bx	lr
   e949a:	bf00      	nop

000e949c <__aeabi_d2uiz>:
   e949c:	004a      	lsls	r2, r1, #1
   e949e:	d211      	bcs.n	e94c4 <__aeabi_d2uiz+0x28>
   e94a0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   e94a4:	d211      	bcs.n	e94ca <__aeabi_d2uiz+0x2e>
   e94a6:	d50d      	bpl.n	e94c4 <__aeabi_d2uiz+0x28>
   e94a8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   e94ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   e94b0:	d40e      	bmi.n	e94d0 <__aeabi_d2uiz+0x34>
   e94b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   e94b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   e94ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   e94be:	fa23 f002 	lsr.w	r0, r3, r2
   e94c2:	4770      	bx	lr
   e94c4:	f04f 0000 	mov.w	r0, #0
   e94c8:	4770      	bx	lr
   e94ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   e94ce:	d102      	bne.n	e94d6 <__aeabi_d2uiz+0x3a>
   e94d0:	f04f 30ff 	mov.w	r0, #4294967295
   e94d4:	4770      	bx	lr
   e94d6:	f04f 0000 	mov.w	r0, #0
   e94da:	4770      	bx	lr

000e94dc <__aeabi_uldivmod>:
   e94dc:	b953      	cbnz	r3, e94f4 <__aeabi_uldivmod+0x18>
   e94de:	b94a      	cbnz	r2, e94f4 <__aeabi_uldivmod+0x18>
   e94e0:	2900      	cmp	r1, #0
   e94e2:	bf08      	it	eq
   e94e4:	2800      	cmpeq	r0, #0
   e94e6:	bf1c      	itt	ne
   e94e8:	f04f 31ff 	movne.w	r1, #4294967295
   e94ec:	f04f 30ff 	movne.w	r0, #4294967295
   e94f0:	f000 b97e 	b.w	e97f0 <__aeabi_idiv0>
   e94f4:	f1ad 0c08 	sub.w	ip, sp, #8
   e94f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   e94fc:	f000 f806 	bl	e950c <__udivmoddi4>
   e9500:	f8dd e004 	ldr.w	lr, [sp, #4]
   e9504:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   e9508:	b004      	add	sp, #16
   e950a:	4770      	bx	lr

000e950c <__udivmoddi4>:
   e950c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e9510:	468c      	mov	ip, r1
   e9512:	460e      	mov	r6, r1
   e9514:	4604      	mov	r4, r0
   e9516:	9d08      	ldr	r5, [sp, #32]
   e9518:	2b00      	cmp	r3, #0
   e951a:	d150      	bne.n	e95be <__udivmoddi4+0xb2>
   e951c:	428a      	cmp	r2, r1
   e951e:	4617      	mov	r7, r2
   e9520:	d96c      	bls.n	e95fc <__udivmoddi4+0xf0>
   e9522:	fab2 fe82 	clz	lr, r2
   e9526:	f1be 0f00 	cmp.w	lr, #0
   e952a:	d00b      	beq.n	e9544 <__udivmoddi4+0x38>
   e952c:	f1ce 0420 	rsb	r4, lr, #32
   e9530:	fa20 f404 	lsr.w	r4, r0, r4
   e9534:	fa01 f60e 	lsl.w	r6, r1, lr
   e9538:	ea44 0c06 	orr.w	ip, r4, r6
   e953c:	fa02 f70e 	lsl.w	r7, r2, lr
   e9540:	fa00 f40e 	lsl.w	r4, r0, lr
   e9544:	ea4f 4917 	mov.w	r9, r7, lsr #16
   e9548:	0c22      	lsrs	r2, r4, #16
   e954a:	fbbc f0f9 	udiv	r0, ip, r9
   e954e:	fa1f f887 	uxth.w	r8, r7
   e9552:	fb09 c610 	mls	r6, r9, r0, ip
   e9556:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   e955a:	fb00 f308 	mul.w	r3, r0, r8
   e955e:	42b3      	cmp	r3, r6
   e9560:	d909      	bls.n	e9576 <__udivmoddi4+0x6a>
   e9562:	19f6      	adds	r6, r6, r7
   e9564:	f100 32ff 	add.w	r2, r0, #4294967295
   e9568:	f080 8122 	bcs.w	e97b0 <__udivmoddi4+0x2a4>
   e956c:	42b3      	cmp	r3, r6
   e956e:	f240 811f 	bls.w	e97b0 <__udivmoddi4+0x2a4>
   e9572:	3802      	subs	r0, #2
   e9574:	443e      	add	r6, r7
   e9576:	1af6      	subs	r6, r6, r3
   e9578:	b2a2      	uxth	r2, r4
   e957a:	fbb6 f3f9 	udiv	r3, r6, r9
   e957e:	fb09 6613 	mls	r6, r9, r3, r6
   e9582:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   e9586:	fb03 f808 	mul.w	r8, r3, r8
   e958a:	45a0      	cmp	r8, r4
   e958c:	d909      	bls.n	e95a2 <__udivmoddi4+0x96>
   e958e:	19e4      	adds	r4, r4, r7
   e9590:	f103 32ff 	add.w	r2, r3, #4294967295
   e9594:	f080 810a 	bcs.w	e97ac <__udivmoddi4+0x2a0>
   e9598:	45a0      	cmp	r8, r4
   e959a:	f240 8107 	bls.w	e97ac <__udivmoddi4+0x2a0>
   e959e:	3b02      	subs	r3, #2
   e95a0:	443c      	add	r4, r7
   e95a2:	ebc8 0404 	rsb	r4, r8, r4
   e95a6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   e95aa:	2100      	movs	r1, #0
   e95ac:	2d00      	cmp	r5, #0
   e95ae:	d062      	beq.n	e9676 <__udivmoddi4+0x16a>
   e95b0:	fa24 f40e 	lsr.w	r4, r4, lr
   e95b4:	2300      	movs	r3, #0
   e95b6:	602c      	str	r4, [r5, #0]
   e95b8:	606b      	str	r3, [r5, #4]
   e95ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e95be:	428b      	cmp	r3, r1
   e95c0:	d907      	bls.n	e95d2 <__udivmoddi4+0xc6>
   e95c2:	2d00      	cmp	r5, #0
   e95c4:	d055      	beq.n	e9672 <__udivmoddi4+0x166>
   e95c6:	2100      	movs	r1, #0
   e95c8:	e885 0041 	stmia.w	r5, {r0, r6}
   e95cc:	4608      	mov	r0, r1
   e95ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e95d2:	fab3 f183 	clz	r1, r3
   e95d6:	2900      	cmp	r1, #0
   e95d8:	f040 8090 	bne.w	e96fc <__udivmoddi4+0x1f0>
   e95dc:	42b3      	cmp	r3, r6
   e95de:	d302      	bcc.n	e95e6 <__udivmoddi4+0xda>
   e95e0:	4282      	cmp	r2, r0
   e95e2:	f200 80f8 	bhi.w	e97d6 <__udivmoddi4+0x2ca>
   e95e6:	1a84      	subs	r4, r0, r2
   e95e8:	eb66 0603 	sbc.w	r6, r6, r3
   e95ec:	2001      	movs	r0, #1
   e95ee:	46b4      	mov	ip, r6
   e95f0:	2d00      	cmp	r5, #0
   e95f2:	d040      	beq.n	e9676 <__udivmoddi4+0x16a>
   e95f4:	e885 1010 	stmia.w	r5, {r4, ip}
   e95f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e95fc:	b912      	cbnz	r2, e9604 <__udivmoddi4+0xf8>
   e95fe:	2701      	movs	r7, #1
   e9600:	fbb7 f7f2 	udiv	r7, r7, r2
   e9604:	fab7 fe87 	clz	lr, r7
   e9608:	f1be 0f00 	cmp.w	lr, #0
   e960c:	d135      	bne.n	e967a <__udivmoddi4+0x16e>
   e960e:	1bf3      	subs	r3, r6, r7
   e9610:	ea4f 4817 	mov.w	r8, r7, lsr #16
   e9614:	fa1f fc87 	uxth.w	ip, r7
   e9618:	2101      	movs	r1, #1
   e961a:	fbb3 f0f8 	udiv	r0, r3, r8
   e961e:	0c22      	lsrs	r2, r4, #16
   e9620:	fb08 3610 	mls	r6, r8, r0, r3
   e9624:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   e9628:	fb0c f300 	mul.w	r3, ip, r0
   e962c:	42b3      	cmp	r3, r6
   e962e:	d907      	bls.n	e9640 <__udivmoddi4+0x134>
   e9630:	19f6      	adds	r6, r6, r7
   e9632:	f100 32ff 	add.w	r2, r0, #4294967295
   e9636:	d202      	bcs.n	e963e <__udivmoddi4+0x132>
   e9638:	42b3      	cmp	r3, r6
   e963a:	f200 80ce 	bhi.w	e97da <__udivmoddi4+0x2ce>
   e963e:	4610      	mov	r0, r2
   e9640:	1af6      	subs	r6, r6, r3
   e9642:	b2a2      	uxth	r2, r4
   e9644:	fbb6 f3f8 	udiv	r3, r6, r8
   e9648:	fb08 6613 	mls	r6, r8, r3, r6
   e964c:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   e9650:	fb0c fc03 	mul.w	ip, ip, r3
   e9654:	45a4      	cmp	ip, r4
   e9656:	d907      	bls.n	e9668 <__udivmoddi4+0x15c>
   e9658:	19e4      	adds	r4, r4, r7
   e965a:	f103 32ff 	add.w	r2, r3, #4294967295
   e965e:	d202      	bcs.n	e9666 <__udivmoddi4+0x15a>
   e9660:	45a4      	cmp	ip, r4
   e9662:	f200 80b5 	bhi.w	e97d0 <__udivmoddi4+0x2c4>
   e9666:	4613      	mov	r3, r2
   e9668:	ebcc 0404 	rsb	r4, ip, r4
   e966c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   e9670:	e79c      	b.n	e95ac <__udivmoddi4+0xa0>
   e9672:	4629      	mov	r1, r5
   e9674:	4628      	mov	r0, r5
   e9676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e967a:	f1ce 0120 	rsb	r1, lr, #32
   e967e:	fa06 f30e 	lsl.w	r3, r6, lr
   e9682:	fa07 f70e 	lsl.w	r7, r7, lr
   e9686:	fa20 f901 	lsr.w	r9, r0, r1
   e968a:	ea4f 4817 	mov.w	r8, r7, lsr #16
   e968e:	40ce      	lsrs	r6, r1
   e9690:	ea49 0903 	orr.w	r9, r9, r3
   e9694:	fbb6 faf8 	udiv	sl, r6, r8
   e9698:	ea4f 4419 	mov.w	r4, r9, lsr #16
   e969c:	fb08 661a 	mls	r6, r8, sl, r6
   e96a0:	fa1f fc87 	uxth.w	ip, r7
   e96a4:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
   e96a8:	fb0a f20c 	mul.w	r2, sl, ip
   e96ac:	429a      	cmp	r2, r3
   e96ae:	fa00 f40e 	lsl.w	r4, r0, lr
   e96b2:	d90a      	bls.n	e96ca <__udivmoddi4+0x1be>
   e96b4:	19db      	adds	r3, r3, r7
   e96b6:	f10a 31ff 	add.w	r1, sl, #4294967295
   e96ba:	f080 8087 	bcs.w	e97cc <__udivmoddi4+0x2c0>
   e96be:	429a      	cmp	r2, r3
   e96c0:	f240 8084 	bls.w	e97cc <__udivmoddi4+0x2c0>
   e96c4:	f1aa 0a02 	sub.w	sl, sl, #2
   e96c8:	443b      	add	r3, r7
   e96ca:	1a9b      	subs	r3, r3, r2
   e96cc:	fa1f f989 	uxth.w	r9, r9
   e96d0:	fbb3 f1f8 	udiv	r1, r3, r8
   e96d4:	fb08 3311 	mls	r3, r8, r1, r3
   e96d8:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
   e96dc:	fb01 f60c 	mul.w	r6, r1, ip
   e96e0:	429e      	cmp	r6, r3
   e96e2:	d907      	bls.n	e96f4 <__udivmoddi4+0x1e8>
   e96e4:	19db      	adds	r3, r3, r7
   e96e6:	f101 32ff 	add.w	r2, r1, #4294967295
   e96ea:	d26b      	bcs.n	e97c4 <__udivmoddi4+0x2b8>
   e96ec:	429e      	cmp	r6, r3
   e96ee:	d969      	bls.n	e97c4 <__udivmoddi4+0x2b8>
   e96f0:	3902      	subs	r1, #2
   e96f2:	443b      	add	r3, r7
   e96f4:	1b9b      	subs	r3, r3, r6
   e96f6:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   e96fa:	e78e      	b.n	e961a <__udivmoddi4+0x10e>
   e96fc:	f1c1 0e20 	rsb	lr, r1, #32
   e9700:	fa22 f40e 	lsr.w	r4, r2, lr
   e9704:	408b      	lsls	r3, r1
   e9706:	4323      	orrs	r3, r4
   e9708:	fa20 f70e 	lsr.w	r7, r0, lr
   e970c:	fa06 f401 	lsl.w	r4, r6, r1
   e9710:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   e9714:	fa26 f60e 	lsr.w	r6, r6, lr
   e9718:	433c      	orrs	r4, r7
   e971a:	fbb6 f9fc 	udiv	r9, r6, ip
   e971e:	0c27      	lsrs	r7, r4, #16
   e9720:	fb0c 6619 	mls	r6, ip, r9, r6
   e9724:	fa1f f883 	uxth.w	r8, r3
   e9728:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   e972c:	fb09 f708 	mul.w	r7, r9, r8
   e9730:	42b7      	cmp	r7, r6
   e9732:	fa02 f201 	lsl.w	r2, r2, r1
   e9736:	fa00 fa01 	lsl.w	sl, r0, r1
   e973a:	d908      	bls.n	e974e <__udivmoddi4+0x242>
   e973c:	18f6      	adds	r6, r6, r3
   e973e:	f109 30ff 	add.w	r0, r9, #4294967295
   e9742:	d241      	bcs.n	e97c8 <__udivmoddi4+0x2bc>
   e9744:	42b7      	cmp	r7, r6
   e9746:	d93f      	bls.n	e97c8 <__udivmoddi4+0x2bc>
   e9748:	f1a9 0902 	sub.w	r9, r9, #2
   e974c:	441e      	add	r6, r3
   e974e:	1bf6      	subs	r6, r6, r7
   e9750:	b2a0      	uxth	r0, r4
   e9752:	fbb6 f4fc 	udiv	r4, r6, ip
   e9756:	fb0c 6614 	mls	r6, ip, r4, r6
   e975a:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
   e975e:	fb04 f808 	mul.w	r8, r4, r8
   e9762:	45b8      	cmp	r8, r7
   e9764:	d907      	bls.n	e9776 <__udivmoddi4+0x26a>
   e9766:	18ff      	adds	r7, r7, r3
   e9768:	f104 30ff 	add.w	r0, r4, #4294967295
   e976c:	d228      	bcs.n	e97c0 <__udivmoddi4+0x2b4>
   e976e:	45b8      	cmp	r8, r7
   e9770:	d926      	bls.n	e97c0 <__udivmoddi4+0x2b4>
   e9772:	3c02      	subs	r4, #2
   e9774:	441f      	add	r7, r3
   e9776:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
   e977a:	ebc8 0707 	rsb	r7, r8, r7
   e977e:	fba0 8902 	umull	r8, r9, r0, r2
   e9782:	454f      	cmp	r7, r9
   e9784:	4644      	mov	r4, r8
   e9786:	464e      	mov	r6, r9
   e9788:	d314      	bcc.n	e97b4 <__udivmoddi4+0x2a8>
   e978a:	d029      	beq.n	e97e0 <__udivmoddi4+0x2d4>
   e978c:	b365      	cbz	r5, e97e8 <__udivmoddi4+0x2dc>
   e978e:	ebba 0304 	subs.w	r3, sl, r4
   e9792:	eb67 0706 	sbc.w	r7, r7, r6
   e9796:	fa07 fe0e 	lsl.w	lr, r7, lr
   e979a:	40cb      	lsrs	r3, r1
   e979c:	40cf      	lsrs	r7, r1
   e979e:	ea4e 0303 	orr.w	r3, lr, r3
   e97a2:	e885 0088 	stmia.w	r5, {r3, r7}
   e97a6:	2100      	movs	r1, #0
   e97a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e97ac:	4613      	mov	r3, r2
   e97ae:	e6f8      	b.n	e95a2 <__udivmoddi4+0x96>
   e97b0:	4610      	mov	r0, r2
   e97b2:	e6e0      	b.n	e9576 <__udivmoddi4+0x6a>
   e97b4:	ebb8 0402 	subs.w	r4, r8, r2
   e97b8:	eb69 0603 	sbc.w	r6, r9, r3
   e97bc:	3801      	subs	r0, #1
   e97be:	e7e5      	b.n	e978c <__udivmoddi4+0x280>
   e97c0:	4604      	mov	r4, r0
   e97c2:	e7d8      	b.n	e9776 <__udivmoddi4+0x26a>
   e97c4:	4611      	mov	r1, r2
   e97c6:	e795      	b.n	e96f4 <__udivmoddi4+0x1e8>
   e97c8:	4681      	mov	r9, r0
   e97ca:	e7c0      	b.n	e974e <__udivmoddi4+0x242>
   e97cc:	468a      	mov	sl, r1
   e97ce:	e77c      	b.n	e96ca <__udivmoddi4+0x1be>
   e97d0:	3b02      	subs	r3, #2
   e97d2:	443c      	add	r4, r7
   e97d4:	e748      	b.n	e9668 <__udivmoddi4+0x15c>
   e97d6:	4608      	mov	r0, r1
   e97d8:	e70a      	b.n	e95f0 <__udivmoddi4+0xe4>
   e97da:	3802      	subs	r0, #2
   e97dc:	443e      	add	r6, r7
   e97de:	e72f      	b.n	e9640 <__udivmoddi4+0x134>
   e97e0:	45c2      	cmp	sl, r8
   e97e2:	d3e7      	bcc.n	e97b4 <__udivmoddi4+0x2a8>
   e97e4:	463e      	mov	r6, r7
   e97e6:	e7d1      	b.n	e978c <__udivmoddi4+0x280>
   e97e8:	4629      	mov	r1, r5
   e97ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e97ee:	bf00      	nop

000e97f0 <__aeabi_idiv0>:
   e97f0:	4770      	bx	lr
   e97f2:	bf00      	nop

000e97f4 <asctime>:
   e97f4:	4b09      	ldr	r3, [pc, #36]	; (e981c <asctime+0x28>)
   e97f6:	b570      	push	{r4, r5, r6, lr}
   e97f8:	681c      	ldr	r4, [r3, #0]
   e97fa:	6c25      	ldr	r5, [r4, #64]	; 0x40
   e97fc:	4606      	mov	r6, r0
   e97fe:	b93d      	cbnz	r5, e9810 <asctime+0x1c>
   e9800:	201a      	movs	r0, #26
   e9802:	f7fc fc57 	bl	e60b4 <malloc>
   e9806:	221a      	movs	r2, #26
   e9808:	6420      	str	r0, [r4, #64]	; 0x40
   e980a:	4629      	mov	r1, r5
   e980c:	f000 f979 	bl	e9b02 <memset>
   e9810:	6c21      	ldr	r1, [r4, #64]	; 0x40
   e9812:	4630      	mov	r0, r6
   e9814:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   e9818:	f000 b802 	b.w	e9820 <asctime_r>
   e981c:	2003ac1c 	.word	0x2003ac1c

000e9820 <asctime_r>:
   e9820:	b510      	push	{r4, lr}
   e9822:	460c      	mov	r4, r1
   e9824:	6941      	ldr	r1, [r0, #20]
   e9826:	6903      	ldr	r3, [r0, #16]
   e9828:	6982      	ldr	r2, [r0, #24]
   e982a:	b086      	sub	sp, #24
   e982c:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   e9830:	9104      	str	r1, [sp, #16]
   e9832:	6801      	ldr	r1, [r0, #0]
   e9834:	9103      	str	r1, [sp, #12]
   e9836:	6841      	ldr	r1, [r0, #4]
   e9838:	9102      	str	r1, [sp, #8]
   e983a:	6881      	ldr	r1, [r0, #8]
   e983c:	9101      	str	r1, [sp, #4]
   e983e:	68c1      	ldr	r1, [r0, #12]
   e9840:	9100      	str	r1, [sp, #0]
   e9842:	4907      	ldr	r1, [pc, #28]	; (e9860 <asctime_r+0x40>)
   e9844:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   e9848:	440b      	add	r3, r1
   e984a:	4906      	ldr	r1, [pc, #24]	; (e9864 <asctime_r+0x44>)
   e984c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   e9850:	440a      	add	r2, r1
   e9852:	4620      	mov	r0, r4
   e9854:	4904      	ldr	r1, [pc, #16]	; (e9868 <asctime_r+0x48>)
   e9856:	f7fc fc4d 	bl	e60f4 <siprintf>
   e985a:	4620      	mov	r0, r4
   e985c:	b006      	add	sp, #24
   e985e:	bd10      	pop	{r4, pc}
   e9860:	000ef6ac 	.word	0x000ef6ac
   e9864:	000ef697 	.word	0x000ef697
   e9868:	000ef6d0 	.word	0x000ef6d0

000e986c <atoi>:
   e986c:	220a      	movs	r2, #10
   e986e:	2100      	movs	r1, #0
   e9870:	f001 b87c 	b.w	ea96c <strtol>

000e9874 <calloc>:
   e9874:	4b02      	ldr	r3, [pc, #8]	; (e9880 <calloc+0xc>)
   e9876:	460a      	mov	r2, r1
   e9878:	4601      	mov	r1, r0
   e987a:	6818      	ldr	r0, [r3, #0]
   e987c:	f000 b949 	b.w	e9b12 <_calloc_r>
   e9880:	2003ac1c 	.word	0x2003ac1c

000e9884 <__cxa_atexit>:
   e9884:	b510      	push	{r4, lr}
   e9886:	4c05      	ldr	r4, [pc, #20]	; (e989c <__cxa_atexit+0x18>)
   e9888:	4613      	mov	r3, r2
   e988a:	b12c      	cbz	r4, e9898 <__cxa_atexit+0x14>
   e988c:	460a      	mov	r2, r1
   e988e:	4601      	mov	r1, r0
   e9890:	2002      	movs	r0, #2
   e9892:	f3af 8000 	nop.w
   e9896:	bd10      	pop	{r4, pc}
   e9898:	4620      	mov	r0, r4
   e989a:	bd10      	pop	{r4, pc}
   e989c:	00000000 	.word	0x00000000

000e98a0 <localtime>:
   e98a0:	b538      	push	{r3, r4, r5, lr}
   e98a2:	4b07      	ldr	r3, [pc, #28]	; (e98c0 <localtime+0x20>)
   e98a4:	681c      	ldr	r4, [r3, #0]
   e98a6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   e98a8:	4605      	mov	r5, r0
   e98aa:	b91b      	cbnz	r3, e98b4 <localtime+0x14>
   e98ac:	2024      	movs	r0, #36	; 0x24
   e98ae:	f7fc fc01 	bl	e60b4 <malloc>
   e98b2:	63e0      	str	r0, [r4, #60]	; 0x3c
   e98b4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   e98b6:	4628      	mov	r0, r5
   e98b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   e98bc:	f000 b802 	b.w	e98c4 <localtime_r>
   e98c0:	2003ac1c 	.word	0x2003ac1c

000e98c4 <localtime_r>:
   e98c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e98c8:	460c      	mov	r4, r1
   e98ca:	4680      	mov	r8, r0
   e98cc:	f001 fe8c 	bl	eb5e8 <__gettzinfo>
   e98d0:	4621      	mov	r1, r4
   e98d2:	4607      	mov	r7, r0
   e98d4:	4640      	mov	r0, r8
   e98d6:	f001 fe8b 	bl	eb5f0 <gmtime_r>
   e98da:	6946      	ldr	r6, [r0, #20]
   e98dc:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   e98e0:	07b3      	lsls	r3, r6, #30
   e98e2:	4604      	mov	r4, r0
   e98e4:	d105      	bne.n	e98f2 <localtime_r+0x2e>
   e98e6:	2264      	movs	r2, #100	; 0x64
   e98e8:	fb96 f3f2 	sdiv	r3, r6, r2
   e98ec:	fb02 6313 	mls	r3, r2, r3, r6
   e98f0:	b94b      	cbnz	r3, e9906 <localtime_r+0x42>
   e98f2:	f44f 75c8 	mov.w	r5, #400	; 0x190
   e98f6:	fb96 f3f5 	sdiv	r3, r6, r5
   e98fa:	fb05 6513 	mls	r5, r5, r3, r6
   e98fe:	fab5 f385 	clz	r3, r5
   e9902:	095b      	lsrs	r3, r3, #5
   e9904:	e000      	b.n	e9908 <localtime_r+0x44>
   e9906:	2301      	movs	r3, #1
   e9908:	4a5f      	ldr	r2, [pc, #380]	; (e9a88 <localtime_r+0x1c4>)
   e990a:	2530      	movs	r5, #48	; 0x30
   e990c:	fb05 2503 	mla	r5, r5, r3, r2
   e9910:	f001 f96e 	bl	eabf0 <__tz_lock>
   e9914:	f001 f96e 	bl	eabf4 <_tzset_unlocked>
   e9918:	4b5c      	ldr	r3, [pc, #368]	; (e9a8c <localtime_r+0x1c8>)
   e991a:	681b      	ldr	r3, [r3, #0]
   e991c:	b1f3      	cbz	r3, e995c <localtime_r+0x98>
   e991e:	687b      	ldr	r3, [r7, #4]
   e9920:	429e      	cmp	r6, r3
   e9922:	d105      	bne.n	e9930 <localtime_r+0x6c>
   e9924:	6839      	ldr	r1, [r7, #0]
   e9926:	f8d8 3000 	ldr.w	r3, [r8]
   e992a:	69fa      	ldr	r2, [r7, #28]
   e992c:	b941      	cbnz	r1, e9940 <localtime_r+0x7c>
   e992e:	e00a      	b.n	e9946 <localtime_r+0x82>
   e9930:	4630      	mov	r0, r6
   e9932:	f001 f8b5 	bl	eaaa0 <__tzcalc_limits>
   e9936:	2800      	cmp	r0, #0
   e9938:	d1f4      	bne.n	e9924 <localtime_r+0x60>
   e993a:	f04f 33ff 	mov.w	r3, #4294967295
   e993e:	e00d      	b.n	e995c <localtime_r+0x98>
   e9940:	4293      	cmp	r3, r2
   e9942:	db08      	blt.n	e9956 <localtime_r+0x92>
   e9944:	e001      	b.n	e994a <localtime_r+0x86>
   e9946:	4293      	cmp	r3, r2
   e9948:	da07      	bge.n	e995a <localtime_r+0x96>
   e994a:	6bba      	ldr	r2, [r7, #56]	; 0x38
   e994c:	4293      	cmp	r3, r2
   e994e:	bfac      	ite	ge
   e9950:	2300      	movge	r3, #0
   e9952:	2301      	movlt	r3, #1
   e9954:	e002      	b.n	e995c <localtime_r+0x98>
   e9956:	2300      	movs	r3, #0
   e9958:	e000      	b.n	e995c <localtime_r+0x98>
   e995a:	2301      	movs	r3, #1
   e995c:	6223      	str	r3, [r4, #32]
   e995e:	6a23      	ldr	r3, [r4, #32]
   e9960:	2b01      	cmp	r3, #1
   e9962:	bf0c      	ite	eq
   e9964:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   e9966:	6a39      	ldrne	r1, [r7, #32]
   e9968:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   e996c:	203c      	movs	r0, #60	; 0x3c
   e996e:	fb91 f6f3 	sdiv	r6, r1, r3
   e9972:	fb03 1316 	mls	r3, r3, r6, r1
   e9976:	6861      	ldr	r1, [r4, #4]
   e9978:	fb93 f2f0 	sdiv	r2, r3, r0
   e997c:	fb00 3012 	mls	r0, r0, r2, r3
   e9980:	6823      	ldr	r3, [r4, #0]
   e9982:	1a89      	subs	r1, r1, r2
   e9984:	68a2      	ldr	r2, [r4, #8]
   e9986:	6061      	str	r1, [r4, #4]
   e9988:	1a1b      	subs	r3, r3, r0
   e998a:	1b92      	subs	r2, r2, r6
   e998c:	2b3b      	cmp	r3, #59	; 0x3b
   e998e:	6023      	str	r3, [r4, #0]
   e9990:	60a2      	str	r2, [r4, #8]
   e9992:	dd03      	ble.n	e999c <localtime_r+0xd8>
   e9994:	3101      	adds	r1, #1
   e9996:	6061      	str	r1, [r4, #4]
   e9998:	3b3c      	subs	r3, #60	; 0x3c
   e999a:	e004      	b.n	e99a6 <localtime_r+0xe2>
   e999c:	2b00      	cmp	r3, #0
   e999e:	da03      	bge.n	e99a8 <localtime_r+0xe4>
   e99a0:	3901      	subs	r1, #1
   e99a2:	6061      	str	r1, [r4, #4]
   e99a4:	333c      	adds	r3, #60	; 0x3c
   e99a6:	6023      	str	r3, [r4, #0]
   e99a8:	6863      	ldr	r3, [r4, #4]
   e99aa:	2b3b      	cmp	r3, #59	; 0x3b
   e99ac:	dd03      	ble.n	e99b6 <localtime_r+0xf2>
   e99ae:	3201      	adds	r2, #1
   e99b0:	60a2      	str	r2, [r4, #8]
   e99b2:	3b3c      	subs	r3, #60	; 0x3c
   e99b4:	e004      	b.n	e99c0 <localtime_r+0xfc>
   e99b6:	2b00      	cmp	r3, #0
   e99b8:	da03      	bge.n	e99c2 <localtime_r+0xfe>
   e99ba:	3a01      	subs	r2, #1
   e99bc:	60a2      	str	r2, [r4, #8]
   e99be:	333c      	adds	r3, #60	; 0x3c
   e99c0:	6063      	str	r3, [r4, #4]
   e99c2:	68a3      	ldr	r3, [r4, #8]
   e99c4:	2b17      	cmp	r3, #23
   e99c6:	dd22      	ble.n	e9a0e <localtime_r+0x14a>
   e99c8:	69e2      	ldr	r2, [r4, #28]
   e99ca:	3201      	adds	r2, #1
   e99cc:	61e2      	str	r2, [r4, #28]
   e99ce:	69a2      	ldr	r2, [r4, #24]
   e99d0:	3201      	adds	r2, #1
   e99d2:	2a06      	cmp	r2, #6
   e99d4:	bfc8      	it	gt
   e99d6:	2200      	movgt	r2, #0
   e99d8:	61a2      	str	r2, [r4, #24]
   e99da:	68e2      	ldr	r2, [r4, #12]
   e99dc:	3b18      	subs	r3, #24
   e99de:	3201      	adds	r2, #1
   e99e0:	60a3      	str	r3, [r4, #8]
   e99e2:	6923      	ldr	r3, [r4, #16]
   e99e4:	60e2      	str	r2, [r4, #12]
   e99e6:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   e99ea:	428a      	cmp	r2, r1
   e99ec:	dd46      	ble.n	e9a7c <localtime_r+0x1b8>
   e99ee:	3301      	adds	r3, #1
   e99f0:	2b0c      	cmp	r3, #12
   e99f2:	bf0c      	ite	eq
   e99f4:	6963      	ldreq	r3, [r4, #20]
   e99f6:	6123      	strne	r3, [r4, #16]
   e99f8:	eba2 0201 	sub.w	r2, r2, r1
   e99fc:	60e2      	str	r2, [r4, #12]
   e99fe:	bf01      	itttt	eq
   e9a00:	3301      	addeq	r3, #1
   e9a02:	2200      	moveq	r2, #0
   e9a04:	6122      	streq	r2, [r4, #16]
   e9a06:	6163      	streq	r3, [r4, #20]
   e9a08:	bf08      	it	eq
   e9a0a:	61e2      	streq	r2, [r4, #28]
   e9a0c:	e036      	b.n	e9a7c <localtime_r+0x1b8>
   e9a0e:	2b00      	cmp	r3, #0
   e9a10:	da34      	bge.n	e9a7c <localtime_r+0x1b8>
   e9a12:	69e2      	ldr	r2, [r4, #28]
   e9a14:	3a01      	subs	r2, #1
   e9a16:	61e2      	str	r2, [r4, #28]
   e9a18:	69a2      	ldr	r2, [r4, #24]
   e9a1a:	3a01      	subs	r2, #1
   e9a1c:	bf48      	it	mi
   e9a1e:	2206      	movmi	r2, #6
   e9a20:	61a2      	str	r2, [r4, #24]
   e9a22:	68e2      	ldr	r2, [r4, #12]
   e9a24:	3318      	adds	r3, #24
   e9a26:	3a01      	subs	r2, #1
   e9a28:	60e2      	str	r2, [r4, #12]
   e9a2a:	60a3      	str	r3, [r4, #8]
   e9a2c:	bb32      	cbnz	r2, e9a7c <localtime_r+0x1b8>
   e9a2e:	6923      	ldr	r3, [r4, #16]
   e9a30:	3b01      	subs	r3, #1
   e9a32:	d401      	bmi.n	e9a38 <localtime_r+0x174>
   e9a34:	6123      	str	r3, [r4, #16]
   e9a36:	e01d      	b.n	e9a74 <localtime_r+0x1b0>
   e9a38:	230b      	movs	r3, #11
   e9a3a:	6123      	str	r3, [r4, #16]
   e9a3c:	6963      	ldr	r3, [r4, #20]
   e9a3e:	1e5a      	subs	r2, r3, #1
   e9a40:	f012 0f03 	tst.w	r2, #3
   e9a44:	6162      	str	r2, [r4, #20]
   e9a46:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   e9a4a:	d105      	bne.n	e9a58 <localtime_r+0x194>
   e9a4c:	2164      	movs	r1, #100	; 0x64
   e9a4e:	fb93 f2f1 	sdiv	r2, r3, r1
   e9a52:	fb01 3212 	mls	r2, r1, r2, r3
   e9a56:	b94a      	cbnz	r2, e9a6c <localtime_r+0x1a8>
   e9a58:	f44f 71c8 	mov.w	r1, #400	; 0x190
   e9a5c:	fb93 f2f1 	sdiv	r2, r3, r1
   e9a60:	fb01 3312 	mls	r3, r1, r2, r3
   e9a64:	fab3 f383 	clz	r3, r3
   e9a68:	095b      	lsrs	r3, r3, #5
   e9a6a:	e000      	b.n	e9a6e <localtime_r+0x1aa>
   e9a6c:	2301      	movs	r3, #1
   e9a6e:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   e9a72:	61e3      	str	r3, [r4, #28]
   e9a74:	6923      	ldr	r3, [r4, #16]
   e9a76:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   e9a7a:	60e3      	str	r3, [r4, #12]
   e9a7c:	f001 f8b9 	bl	eabf2 <__tz_unlock>
   e9a80:	4620      	mov	r0, r4
   e9a82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   e9a86:	bf00      	nop
   e9a88:	000ef85c 	.word	0x000ef85c
   e9a8c:	2003e7e4 	.word	0x2003e7e4

000e9a90 <_localeconv_r>:
   e9a90:	4800      	ldr	r0, [pc, #0]	; (e9a94 <_localeconv_r+0x4>)
   e9a92:	4770      	bx	lr
   e9a94:	2003ac20 	.word	0x2003ac20

000e9a98 <memcmp>:
   e9a98:	b510      	push	{r4, lr}
   e9a9a:	3901      	subs	r1, #1
   e9a9c:	4402      	add	r2, r0
   e9a9e:	4290      	cmp	r0, r2
   e9aa0:	d007      	beq.n	e9ab2 <memcmp+0x1a>
   e9aa2:	f810 3b01 	ldrb.w	r3, [r0], #1
   e9aa6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   e9aaa:	42a3      	cmp	r3, r4
   e9aac:	d0f7      	beq.n	e9a9e <memcmp+0x6>
   e9aae:	1b18      	subs	r0, r3, r4
   e9ab0:	bd10      	pop	{r4, pc}
   e9ab2:	2000      	movs	r0, #0
   e9ab4:	bd10      	pop	{r4, pc}

000e9ab6 <memcpy>:
   e9ab6:	b510      	push	{r4, lr}
   e9ab8:	1e43      	subs	r3, r0, #1
   e9aba:	440a      	add	r2, r1
   e9abc:	4291      	cmp	r1, r2
   e9abe:	d004      	beq.n	e9aca <memcpy+0x14>
   e9ac0:	f811 4b01 	ldrb.w	r4, [r1], #1
   e9ac4:	f803 4f01 	strb.w	r4, [r3, #1]!
   e9ac8:	e7f8      	b.n	e9abc <memcpy+0x6>
   e9aca:	bd10      	pop	{r4, pc}

000e9acc <memmove>:
   e9acc:	4288      	cmp	r0, r1
   e9ace:	b510      	push	{r4, lr}
   e9ad0:	eb01 0302 	add.w	r3, r1, r2
   e9ad4:	d801      	bhi.n	e9ada <memmove+0xe>
   e9ad6:	1e42      	subs	r2, r0, #1
   e9ad8:	e00b      	b.n	e9af2 <memmove+0x26>
   e9ada:	4298      	cmp	r0, r3
   e9adc:	d2fb      	bcs.n	e9ad6 <memmove+0xa>
   e9ade:	1881      	adds	r1, r0, r2
   e9ae0:	1ad2      	subs	r2, r2, r3
   e9ae2:	42d3      	cmn	r3, r2
   e9ae4:	d004      	beq.n	e9af0 <memmove+0x24>
   e9ae6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   e9aea:	f801 4d01 	strb.w	r4, [r1, #-1]!
   e9aee:	e7f8      	b.n	e9ae2 <memmove+0x16>
   e9af0:	bd10      	pop	{r4, pc}
   e9af2:	4299      	cmp	r1, r3
   e9af4:	d004      	beq.n	e9b00 <memmove+0x34>
   e9af6:	f811 4b01 	ldrb.w	r4, [r1], #1
   e9afa:	f802 4f01 	strb.w	r4, [r2, #1]!
   e9afe:	e7f8      	b.n	e9af2 <memmove+0x26>
   e9b00:	bd10      	pop	{r4, pc}

000e9b02 <memset>:
   e9b02:	4402      	add	r2, r0
   e9b04:	4603      	mov	r3, r0
   e9b06:	4293      	cmp	r3, r2
   e9b08:	d002      	beq.n	e9b10 <memset+0xe>
   e9b0a:	f803 1b01 	strb.w	r1, [r3], #1
   e9b0e:	e7fa      	b.n	e9b06 <memset+0x4>
   e9b10:	4770      	bx	lr

000e9b12 <_calloc_r>:
   e9b12:	b538      	push	{r3, r4, r5, lr}
   e9b14:	fb02 f401 	mul.w	r4, r2, r1
   e9b18:	4621      	mov	r1, r4
   e9b1a:	f7fc fb0b 	bl	e6134 <_malloc_r>
   e9b1e:	4605      	mov	r5, r0
   e9b20:	b118      	cbz	r0, e9b2a <_calloc_r+0x18>
   e9b22:	4622      	mov	r2, r4
   e9b24:	2100      	movs	r1, #0
   e9b26:	f7ff ffec 	bl	e9b02 <memset>
   e9b2a:	4628      	mov	r0, r5
   e9b2c:	bd38      	pop	{r3, r4, r5, pc}
	...

000e9b30 <srand>:
   e9b30:	b538      	push	{r3, r4, r5, lr}
   e9b32:	4b12      	ldr	r3, [pc, #72]	; (e9b7c <srand+0x4c>)
   e9b34:	681c      	ldr	r4, [r3, #0]
   e9b36:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   e9b38:	4605      	mov	r5, r0
   e9b3a:	b9d3      	cbnz	r3, e9b72 <srand+0x42>
   e9b3c:	2018      	movs	r0, #24
   e9b3e:	f7fc fab9 	bl	e60b4 <malloc>
   e9b42:	f243 330e 	movw	r3, #13070	; 0x330e
   e9b46:	63a0      	str	r0, [r4, #56]	; 0x38
   e9b48:	8003      	strh	r3, [r0, #0]
   e9b4a:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   e9b4e:	8043      	strh	r3, [r0, #2]
   e9b50:	f241 2334 	movw	r3, #4660	; 0x1234
   e9b54:	8083      	strh	r3, [r0, #4]
   e9b56:	f24e 636d 	movw	r3, #58989	; 0xe66d
   e9b5a:	80c3      	strh	r3, [r0, #6]
   e9b5c:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   e9b60:	8103      	strh	r3, [r0, #8]
   e9b62:	2305      	movs	r3, #5
   e9b64:	8143      	strh	r3, [r0, #10]
   e9b66:	230b      	movs	r3, #11
   e9b68:	8183      	strh	r3, [r0, #12]
   e9b6a:	2201      	movs	r2, #1
   e9b6c:	2300      	movs	r3, #0
   e9b6e:	e9c0 2304 	strd	r2, r3, [r0, #16]
   e9b72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   e9b74:	2200      	movs	r2, #0
   e9b76:	611d      	str	r5, [r3, #16]
   e9b78:	615a      	str	r2, [r3, #20]
   e9b7a:	bd38      	pop	{r3, r4, r5, pc}
   e9b7c:	2003ac1c 	.word	0x2003ac1c

000e9b80 <strcmp>:
   e9b80:	f810 2b01 	ldrb.w	r2, [r0], #1
   e9b84:	f811 3b01 	ldrb.w	r3, [r1], #1
   e9b88:	2a01      	cmp	r2, #1
   e9b8a:	bf28      	it	cs
   e9b8c:	429a      	cmpcs	r2, r3
   e9b8e:	d0f7      	beq.n	e9b80 <strcmp>
   e9b90:	1ad0      	subs	r0, r2, r3
   e9b92:	4770      	bx	lr

000e9b94 <strcpy>:
   e9b94:	4603      	mov	r3, r0
   e9b96:	f811 2b01 	ldrb.w	r2, [r1], #1
   e9b9a:	f803 2b01 	strb.w	r2, [r3], #1
   e9b9e:	2a00      	cmp	r2, #0
   e9ba0:	d1f9      	bne.n	e9b96 <strcpy+0x2>
   e9ba2:	4770      	bx	lr

000e9ba4 <strlen>:
   e9ba4:	4603      	mov	r3, r0
   e9ba6:	f813 2b01 	ldrb.w	r2, [r3], #1
   e9baa:	2a00      	cmp	r2, #0
   e9bac:	d1fb      	bne.n	e9ba6 <strlen+0x2>
   e9bae:	1a18      	subs	r0, r3, r0
   e9bb0:	3801      	subs	r0, #1
   e9bb2:	4770      	bx	lr

000e9bb4 <strncmp>:
   e9bb4:	b530      	push	{r4, r5, lr}
   e9bb6:	b182      	cbz	r2, e9bda <strncmp+0x26>
   e9bb8:	1e45      	subs	r5, r0, #1
   e9bba:	3901      	subs	r1, #1
   e9bbc:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   e9bc0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   e9bc4:	42a3      	cmp	r3, r4
   e9bc6:	d106      	bne.n	e9bd6 <strncmp+0x22>
   e9bc8:	43ec      	mvns	r4, r5
   e9bca:	4414      	add	r4, r2
   e9bcc:	42e0      	cmn	r0, r4
   e9bce:	d001      	beq.n	e9bd4 <strncmp+0x20>
   e9bd0:	2b00      	cmp	r3, #0
   e9bd2:	d1f3      	bne.n	e9bbc <strncmp+0x8>
   e9bd4:	461c      	mov	r4, r3
   e9bd6:	1b18      	subs	r0, r3, r4
   e9bd8:	bd30      	pop	{r4, r5, pc}
   e9bda:	4610      	mov	r0, r2
   e9bdc:	bd30      	pop	{r4, r5, pc}

000e9bde <strstr>:
   e9bde:	b5f0      	push	{r4, r5, r6, r7, lr}
   e9be0:	7803      	ldrb	r3, [r0, #0]
   e9be2:	b963      	cbnz	r3, e9bfe <strstr+0x20>
   e9be4:	780b      	ldrb	r3, [r1, #0]
   e9be6:	2b00      	cmp	r3, #0
   e9be8:	bf18      	it	ne
   e9bea:	2000      	movne	r0, #0
   e9bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e9bee:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   e9bf2:	b162      	cbz	r2, e9c0e <strstr+0x30>
   e9bf4:	f814 7f01 	ldrb.w	r7, [r4, #1]!
   e9bf8:	4297      	cmp	r7, r2
   e9bfa:	4630      	mov	r0, r6
   e9bfc:	d0f7      	beq.n	e9bee <strstr+0x10>
   e9bfe:	4603      	mov	r3, r0
   e9c00:	1c46      	adds	r6, r0, #1
   e9c02:	7800      	ldrb	r0, [r0, #0]
   e9c04:	b110      	cbz	r0, e9c0c <strstr+0x2e>
   e9c06:	1e4d      	subs	r5, r1, #1
   e9c08:	1e5c      	subs	r4, r3, #1
   e9c0a:	e7f0      	b.n	e9bee <strstr+0x10>
   e9c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e9c0e:	4618      	mov	r0, r3
   e9c10:	bdf0      	pop	{r4, r5, r6, r7, pc}

000e9c12 <sulp>:
   e9c12:	b570      	push	{r4, r5, r6, lr}
   e9c14:	4604      	mov	r4, r0
   e9c16:	460d      	mov	r5, r1
   e9c18:	ec45 4b10 	vmov	d0, r4, r5
   e9c1c:	4616      	mov	r6, r2
   e9c1e:	f002 f845 	bl	ebcac <__ulp>
   e9c22:	ec51 0b10 	vmov	r0, r1, d0
   e9c26:	b17e      	cbz	r6, e9c48 <sulp+0x36>
   e9c28:	f3c5 530a 	ubfx	r3, r5, #20, #11
   e9c2c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   e9c30:	2b00      	cmp	r3, #0
   e9c32:	dd09      	ble.n	e9c48 <sulp+0x36>
   e9c34:	051b      	lsls	r3, r3, #20
   e9c36:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   e9c3a:	2400      	movs	r4, #0
   e9c3c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   e9c40:	4622      	mov	r2, r4
   e9c42:	462b      	mov	r3, r5
   e9c44:	f7ff f952 	bl	e8eec <__aeabi_dmul>
   e9c48:	bd70      	pop	{r4, r5, r6, pc}
   e9c4a:	0000      	movs	r0, r0
   e9c4c:	0000      	movs	r0, r0
	...

000e9c50 <_strtod_r>:
   e9c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e9c54:	b09d      	sub	sp, #116	; 0x74
   e9c56:	2300      	movs	r3, #0
   e9c58:	9002      	str	r0, [sp, #8]
   e9c5a:	460c      	mov	r4, r1
   e9c5c:	9213      	str	r2, [sp, #76]	; 0x4c
   e9c5e:	9318      	str	r3, [sp, #96]	; 0x60
   e9c60:	f04f 0a00 	mov.w	sl, #0
   e9c64:	f04f 0b00 	mov.w	fp, #0
   e9c68:	9117      	str	r1, [sp, #92]	; 0x5c
   e9c6a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e9c6c:	781a      	ldrb	r2, [r3, #0]
   e9c6e:	2a0d      	cmp	r2, #13
   e9c70:	d805      	bhi.n	e9c7e <_strtod_r+0x2e>
   e9c72:	2a09      	cmp	r2, #9
   e9c74:	d213      	bcs.n	e9c9e <_strtod_r+0x4e>
   e9c76:	2a00      	cmp	r2, #0
   e9c78:	f000 81ac 	beq.w	e9fd4 <_strtod_r+0x384>
   e9c7c:	e012      	b.n	e9ca4 <_strtod_r+0x54>
   e9c7e:	2a2b      	cmp	r2, #43	; 0x2b
   e9c80:	d004      	beq.n	e9c8c <_strtod_r+0x3c>
   e9c82:	2a2d      	cmp	r2, #45	; 0x2d
   e9c84:	d004      	beq.n	e9c90 <_strtod_r+0x40>
   e9c86:	2a20      	cmp	r2, #32
   e9c88:	d10c      	bne.n	e9ca4 <_strtod_r+0x54>
   e9c8a:	e008      	b.n	e9c9e <_strtod_r+0x4e>
   e9c8c:	2200      	movs	r2, #0
   e9c8e:	e000      	b.n	e9c92 <_strtod_r+0x42>
   e9c90:	2201      	movs	r2, #1
   e9c92:	920c      	str	r2, [sp, #48]	; 0x30
   e9c94:	1c5a      	adds	r2, r3, #1
   e9c96:	9217      	str	r2, [sp, #92]	; 0x5c
   e9c98:	785b      	ldrb	r3, [r3, #1]
   e9c9a:	b92b      	cbnz	r3, e9ca8 <_strtod_r+0x58>
   e9c9c:	e19a      	b.n	e9fd4 <_strtod_r+0x384>
   e9c9e:	3301      	adds	r3, #1
   e9ca0:	9317      	str	r3, [sp, #92]	; 0x5c
   e9ca2:	e7e2      	b.n	e9c6a <_strtod_r+0x1a>
   e9ca4:	2300      	movs	r3, #0
   e9ca6:	930c      	str	r3, [sp, #48]	; 0x30
   e9ca8:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   e9caa:	782b      	ldrb	r3, [r5, #0]
   e9cac:	2b30      	cmp	r3, #48	; 0x30
   e9cae:	d15c      	bne.n	e9d6a <_strtod_r+0x11a>
   e9cb0:	786b      	ldrb	r3, [r5, #1]
   e9cb2:	2b58      	cmp	r3, #88	; 0x58
   e9cb4:	d001      	beq.n	e9cba <_strtod_r+0x6a>
   e9cb6:	2b78      	cmp	r3, #120	; 0x78
   e9cb8:	d14c      	bne.n	e9d54 <_strtod_r+0x104>
   e9cba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   e9cbc:	9301      	str	r3, [sp, #4]
   e9cbe:	ab18      	add	r3, sp, #96	; 0x60
   e9cc0:	9300      	str	r3, [sp, #0]
   e9cc2:	4aa9      	ldr	r2, [pc, #676]	; (e9f68 <_strtod_r+0x318>)
   e9cc4:	9802      	ldr	r0, [sp, #8]
   e9cc6:	ab19      	add	r3, sp, #100	; 0x64
   e9cc8:	a917      	add	r1, sp, #92	; 0x5c
   e9cca:	f001 f964 	bl	eaf96 <__gethex>
   e9cce:	f010 0607 	ands.w	r6, r0, #7
   e9cd2:	4604      	mov	r4, r0
   e9cd4:	f000 8587 	beq.w	ea7e6 <_strtod_r+0xb96>
   e9cd8:	2e06      	cmp	r6, #6
   e9cda:	d105      	bne.n	e9ce8 <_strtod_r+0x98>
   e9cdc:	3501      	adds	r5, #1
   e9cde:	2300      	movs	r3, #0
   e9ce0:	9517      	str	r5, [sp, #92]	; 0x5c
   e9ce2:	930c      	str	r3, [sp, #48]	; 0x30
   e9ce4:	f000 bd7f 	b.w	ea7e6 <_strtod_r+0xb96>
   e9ce8:	9a18      	ldr	r2, [sp, #96]	; 0x60
   e9cea:	b13a      	cbz	r2, e9cfc <_strtod_r+0xac>
   e9cec:	2135      	movs	r1, #53	; 0x35
   e9cee:	a81a      	add	r0, sp, #104	; 0x68
   e9cf0:	f002 f8c9 	bl	ebe86 <__copybits>
   e9cf4:	9918      	ldr	r1, [sp, #96]	; 0x60
   e9cf6:	9802      	ldr	r0, [sp, #8]
   e9cf8:	f001 fd47 	bl	eb78a <_Bfree>
   e9cfc:	2e06      	cmp	r6, #6
   e9cfe:	d822      	bhi.n	e9d46 <_strtod_r+0xf6>
   e9d00:	e8df f006 	tbb	[pc, r6]
   e9d04:	18080d04 	.word	0x18080d04
   e9d08:	0d1d      	.short	0x0d1d
   e9d0a:	04          	.byte	0x04
   e9d0b:	00          	.byte	0x00
   e9d0c:	f04f 0b00 	mov.w	fp, #0
   e9d10:	46da      	mov	sl, fp
   e9d12:	e018      	b.n	e9d46 <_strtod_r+0xf6>
   e9d14:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   e9d18:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
   e9d1c:	e013      	b.n	e9d46 <_strtod_r+0xf6>
   e9d1e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   e9d20:	9a19      	ldr	r2, [sp, #100]	; 0x64
   e9d22:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   e9d26:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   e9d2a:	f202 4233 	addw	r2, r2, #1075	; 0x433
   e9d2e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   e9d32:	e008      	b.n	e9d46 <_strtod_r+0xf6>
   e9d34:	f8df b234 	ldr.w	fp, [pc, #564]	; e9f6c <_strtod_r+0x31c>
   e9d38:	f04f 0a00 	mov.w	sl, #0
   e9d3c:	e003      	b.n	e9d46 <_strtod_r+0xf6>
   e9d3e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   e9d42:	f04f 3aff 	mov.w	sl, #4294967295
   e9d46:	0721      	lsls	r1, r4, #28
   e9d48:	f140 854d 	bpl.w	ea7e6 <_strtod_r+0xb96>
   e9d4c:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   e9d50:	f000 bd49 	b.w	ea7e6 <_strtod_r+0xb96>
   e9d54:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e9d56:	1c5a      	adds	r2, r3, #1
   e9d58:	9217      	str	r2, [sp, #92]	; 0x5c
   e9d5a:	785b      	ldrb	r3, [r3, #1]
   e9d5c:	2b30      	cmp	r3, #48	; 0x30
   e9d5e:	d0f9      	beq.n	e9d54 <_strtod_r+0x104>
   e9d60:	2b00      	cmp	r3, #0
   e9d62:	f000 8540 	beq.w	ea7e6 <_strtod_r+0xb96>
   e9d66:	2301      	movs	r3, #1
   e9d68:	e000      	b.n	e9d6c <_strtod_r+0x11c>
   e9d6a:	2300      	movs	r3, #0
   e9d6c:	f04f 0800 	mov.w	r8, #0
   e9d70:	9306      	str	r3, [sp, #24]
   e9d72:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e9d74:	9307      	str	r3, [sp, #28]
   e9d76:	f8cd 8014 	str.w	r8, [sp, #20]
   e9d7a:	f8cd 8010 	str.w	r8, [sp, #16]
   e9d7e:	220a      	movs	r2, #10
   e9d80:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   e9d82:	782e      	ldrb	r6, [r5, #0]
   e9d84:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   e9d88:	b2d9      	uxtb	r1, r3
   e9d8a:	2909      	cmp	r1, #9
   e9d8c:	d80e      	bhi.n	e9dac <_strtod_r+0x15c>
   e9d8e:	9904      	ldr	r1, [sp, #16]
   e9d90:	2908      	cmp	r1, #8
   e9d92:	bfdd      	ittte	le
   e9d94:	9905      	ldrle	r1, [sp, #20]
   e9d96:	fb02 3301 	mlale	r3, r2, r1, r3
   e9d9a:	9305      	strle	r3, [sp, #20]
   e9d9c:	fb02 3808 	mlagt	r8, r2, r8, r3
   e9da0:	9b04      	ldr	r3, [sp, #16]
   e9da2:	3501      	adds	r5, #1
   e9da4:	3301      	adds	r3, #1
   e9da6:	9304      	str	r3, [sp, #16]
   e9da8:	9517      	str	r5, [sp, #92]	; 0x5c
   e9daa:	e7e9      	b.n	e9d80 <_strtod_r+0x130>
   e9dac:	9802      	ldr	r0, [sp, #8]
   e9dae:	f7ff fe6f 	bl	e9a90 <_localeconv_r>
   e9db2:	6807      	ldr	r7, [r0, #0]
   e9db4:	9802      	ldr	r0, [sp, #8]
   e9db6:	f7ff fe6b 	bl	e9a90 <_localeconv_r>
   e9dba:	6800      	ldr	r0, [r0, #0]
   e9dbc:	f7ff fef2 	bl	e9ba4 <strlen>
   e9dc0:	4639      	mov	r1, r7
   e9dc2:	4602      	mov	r2, r0
   e9dc4:	4628      	mov	r0, r5
   e9dc6:	f7ff fef5 	bl	e9bb4 <strncmp>
   e9dca:	4607      	mov	r7, r0
   e9dcc:	b128      	cbz	r0, e9dda <_strtod_r+0x18a>
   e9dce:	2000      	movs	r0, #0
   e9dd0:	4633      	mov	r3, r6
   e9dd2:	9d04      	ldr	r5, [sp, #16]
   e9dd4:	4602      	mov	r2, r0
   e9dd6:	4601      	mov	r1, r0
   e9dd8:	e057      	b.n	e9e8a <_strtod_r+0x23a>
   e9dda:	9802      	ldr	r0, [sp, #8]
   e9ddc:	f7ff fe58 	bl	e9a90 <_localeconv_r>
   e9de0:	6800      	ldr	r0, [r0, #0]
   e9de2:	f7ff fedf 	bl	e9ba4 <strlen>
   e9de6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e9de8:	181a      	adds	r2, r3, r0
   e9dea:	9217      	str	r2, [sp, #92]	; 0x5c
   e9dec:	9a04      	ldr	r2, [sp, #16]
   e9dee:	5c1b      	ldrb	r3, [r3, r0]
   e9df0:	2a00      	cmp	r2, #0
   e9df2:	d142      	bne.n	e9e7a <_strtod_r+0x22a>
   e9df4:	4610      	mov	r0, r2
   e9df6:	2b30      	cmp	r3, #48	; 0x30
   e9df8:	d105      	bne.n	e9e06 <_strtod_r+0x1b6>
   e9dfa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e9dfc:	1c5a      	adds	r2, r3, #1
   e9dfe:	9217      	str	r2, [sp, #92]	; 0x5c
   e9e00:	3001      	adds	r0, #1
   e9e02:	785b      	ldrb	r3, [r3, #1]
   e9e04:	e7f7      	b.n	e9df6 <_strtod_r+0x1a6>
   e9e06:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   e9e0a:	2a08      	cmp	r2, #8
   e9e0c:	d843      	bhi.n	e9e96 <_strtod_r+0x246>
   e9e0e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   e9e10:	9207      	str	r2, [sp, #28]
   e9e12:	4602      	mov	r2, r0
   e9e14:	2000      	movs	r0, #0
   e9e16:	4605      	mov	r5, r0
   e9e18:	3b30      	subs	r3, #48	; 0x30
   e9e1a:	f100 0101 	add.w	r1, r0, #1
   e9e1e:	d026      	beq.n	e9e6e <_strtod_r+0x21e>
   e9e20:	440a      	add	r2, r1
   e9e22:	eb05 0c00 	add.w	ip, r5, r0
   e9e26:	4629      	mov	r1, r5
   e9e28:	260a      	movs	r6, #10
   e9e2a:	4561      	cmp	r1, ip
   e9e2c:	d00e      	beq.n	e9e4c <_strtod_r+0x1fc>
   e9e2e:	3101      	adds	r1, #1
   e9e30:	f101 3eff 	add.w	lr, r1, #4294967295
   e9e34:	f1be 0f08 	cmp.w	lr, #8
   e9e38:	dc03      	bgt.n	e9e42 <_strtod_r+0x1f2>
   e9e3a:	9f05      	ldr	r7, [sp, #20]
   e9e3c:	4377      	muls	r7, r6
   e9e3e:	9705      	str	r7, [sp, #20]
   e9e40:	e7f3      	b.n	e9e2a <_strtod_r+0x1da>
   e9e42:	2910      	cmp	r1, #16
   e9e44:	bfd8      	it	le
   e9e46:	fb06 f808 	mulle.w	r8, r6, r8
   e9e4a:	e7ee      	b.n	e9e2a <_strtod_r+0x1da>
   e9e4c:	4428      	add	r0, r5
   e9e4e:	2808      	cmp	r0, #8
   e9e50:	f100 0501 	add.w	r5, r0, #1
   e9e54:	dc05      	bgt.n	e9e62 <_strtod_r+0x212>
   e9e56:	9805      	ldr	r0, [sp, #20]
   e9e58:	210a      	movs	r1, #10
   e9e5a:	fb01 3300 	mla	r3, r1, r0, r3
   e9e5e:	9305      	str	r3, [sp, #20]
   e9e60:	e004      	b.n	e9e6c <_strtod_r+0x21c>
   e9e62:	2d10      	cmp	r5, #16
   e9e64:	bfdc      	itt	le
   e9e66:	210a      	movle	r1, #10
   e9e68:	fb01 3808 	mlale	r8, r1, r8, r3
   e9e6c:	2100      	movs	r1, #0
   e9e6e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e9e70:	1c58      	adds	r0, r3, #1
   e9e72:	9017      	str	r0, [sp, #92]	; 0x5c
   e9e74:	785b      	ldrb	r3, [r3, #1]
   e9e76:	4608      	mov	r0, r1
   e9e78:	e002      	b.n	e9e80 <_strtod_r+0x230>
   e9e7a:	9d04      	ldr	r5, [sp, #16]
   e9e7c:	4638      	mov	r0, r7
   e9e7e:	463a      	mov	r2, r7
   e9e80:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   e9e84:	2909      	cmp	r1, #9
   e9e86:	d9c7      	bls.n	e9e18 <_strtod_r+0x1c8>
   e9e88:	2101      	movs	r1, #1
   e9e8a:	2b65      	cmp	r3, #101	; 0x65
   e9e8c:	d001      	beq.n	e9e92 <_strtod_r+0x242>
   e9e8e:	2b45      	cmp	r3, #69	; 0x45
   e9e90:	d151      	bne.n	e9f36 <_strtod_r+0x2e6>
   e9e92:	b96d      	cbnz	r5, e9eb0 <_strtod_r+0x260>
   e9e94:	e004      	b.n	e9ea0 <_strtod_r+0x250>
   e9e96:	2b65      	cmp	r3, #101	; 0x65
   e9e98:	f040 84b3 	bne.w	ea802 <_strtod_r+0xbb2>
   e9e9c:	2200      	movs	r2, #0
   e9e9e:	2101      	movs	r1, #1
   e9ea0:	b928      	cbnz	r0, e9eae <_strtod_r+0x25e>
   e9ea2:	9b06      	ldr	r3, [sp, #24]
   e9ea4:	2b00      	cmp	r3, #0
   e9ea6:	f000 8095 	beq.w	e9fd4 <_strtod_r+0x384>
   e9eaa:	4605      	mov	r5, r0
   e9eac:	e000      	b.n	e9eb0 <_strtod_r+0x260>
   e9eae:	2500      	movs	r5, #0
   e9eb0:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   e9eb2:	1c63      	adds	r3, r4, #1
   e9eb4:	9317      	str	r3, [sp, #92]	; 0x5c
   e9eb6:	7863      	ldrb	r3, [r4, #1]
   e9eb8:	2b2b      	cmp	r3, #43	; 0x2b
   e9eba:	d006      	beq.n	e9eca <_strtod_r+0x27a>
   e9ebc:	2b2d      	cmp	r3, #45	; 0x2d
   e9ebe:	d002      	beq.n	e9ec6 <_strtod_r+0x276>
   e9ec0:	2600      	movs	r6, #0
   e9ec2:	9603      	str	r6, [sp, #12]
   e9ec4:	e006      	b.n	e9ed4 <_strtod_r+0x284>
   e9ec6:	2301      	movs	r3, #1
   e9ec8:	e000      	b.n	e9ecc <_strtod_r+0x27c>
   e9eca:	2300      	movs	r3, #0
   e9ecc:	9303      	str	r3, [sp, #12]
   e9ece:	1ca3      	adds	r3, r4, #2
   e9ed0:	9317      	str	r3, [sp, #92]	; 0x5c
   e9ed2:	78a3      	ldrb	r3, [r4, #2]
   e9ed4:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   e9ed8:	2e09      	cmp	r6, #9
   e9eda:	d82b      	bhi.n	e9f34 <_strtod_r+0x2e4>
   e9edc:	2b30      	cmp	r3, #48	; 0x30
   e9ede:	d104      	bne.n	e9eea <_strtod_r+0x29a>
   e9ee0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e9ee2:	1c5e      	adds	r6, r3, #1
   e9ee4:	9617      	str	r6, [sp, #92]	; 0x5c
   e9ee6:	785b      	ldrb	r3, [r3, #1]
   e9ee8:	e7f8      	b.n	e9edc <_strtod_r+0x28c>
   e9eea:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
   e9eee:	2e08      	cmp	r6, #8
   e9ef0:	d821      	bhi.n	e9f36 <_strtod_r+0x2e6>
   e9ef2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   e9ef6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e9ef8:	f04f 0c0a 	mov.w	ip, #10
   e9efc:	461f      	mov	r7, r3
   e9efe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e9f00:	1c5e      	adds	r6, r3, #1
   e9f02:	9617      	str	r6, [sp, #92]	; 0x5c
   e9f04:	785b      	ldrb	r3, [r3, #1]
   e9f06:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
   e9f0a:	f1b9 0f09 	cmp.w	r9, #9
   e9f0e:	d804      	bhi.n	e9f1a <_strtod_r+0x2ca>
   e9f10:	fb0c 3e0e 	mla	lr, ip, lr, r3
   e9f14:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   e9f18:	e7f1      	b.n	e9efe <_strtod_r+0x2ae>
   e9f1a:	1bf6      	subs	r6, r6, r7
   e9f1c:	2e08      	cmp	r6, #8
   e9f1e:	f644 691f 	movw	r9, #19999	; 0x4e1f
   e9f22:	dc02      	bgt.n	e9f2a <_strtod_r+0x2da>
   e9f24:	45f1      	cmp	r9, lr
   e9f26:	bfa8      	it	ge
   e9f28:	46f1      	movge	r9, lr
   e9f2a:	9e03      	ldr	r6, [sp, #12]
   e9f2c:	b12e      	cbz	r6, e9f3a <_strtod_r+0x2ea>
   e9f2e:	f1c9 0900 	rsb	r9, r9, #0
   e9f32:	e002      	b.n	e9f3a <_strtod_r+0x2ea>
   e9f34:	9417      	str	r4, [sp, #92]	; 0x5c
   e9f36:	f04f 0900 	mov.w	r9, #0
   e9f3a:	2d00      	cmp	r5, #0
   e9f3c:	d153      	bne.n	e9fe6 <_strtod_r+0x396>
   e9f3e:	2800      	cmp	r0, #0
   e9f40:	f040 8451 	bne.w	ea7e6 <_strtod_r+0xb96>
   e9f44:	9a06      	ldr	r2, [sp, #24]
   e9f46:	2a00      	cmp	r2, #0
   e9f48:	f040 844d 	bne.w	ea7e6 <_strtod_r+0xb96>
   e9f4c:	2900      	cmp	r1, #0
   e9f4e:	d141      	bne.n	e9fd4 <_strtod_r+0x384>
   e9f50:	2b4e      	cmp	r3, #78	; 0x4e
   e9f52:	d020      	beq.n	e9f96 <_strtod_r+0x346>
   e9f54:	dc02      	bgt.n	e9f5c <_strtod_r+0x30c>
   e9f56:	2b49      	cmp	r3, #73	; 0x49
   e9f58:	d00a      	beq.n	e9f70 <_strtod_r+0x320>
   e9f5a:	e03b      	b.n	e9fd4 <_strtod_r+0x384>
   e9f5c:	2b69      	cmp	r3, #105	; 0x69
   e9f5e:	d007      	beq.n	e9f70 <_strtod_r+0x320>
   e9f60:	2b6e      	cmp	r3, #110	; 0x6e
   e9f62:	d018      	beq.n	e9f96 <_strtod_r+0x346>
   e9f64:	e036      	b.n	e9fd4 <_strtod_r+0x384>
   e9f66:	bf00      	nop
   e9f68:	000ef8bc 	.word	0x000ef8bc
   e9f6c:	7ff00000 	.word	0x7ff00000
   e9f70:	49a8      	ldr	r1, [pc, #672]	; (ea214 <_strtod_r+0x5c4>)
   e9f72:	a817      	add	r0, sp, #92	; 0x5c
   e9f74:	f001 fa40 	bl	eb3f8 <__match>
   e9f78:	b360      	cbz	r0, e9fd4 <_strtod_r+0x384>
   e9f7a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e9f7c:	49a6      	ldr	r1, [pc, #664]	; (ea218 <_strtod_r+0x5c8>)
   e9f7e:	3b01      	subs	r3, #1
   e9f80:	a817      	add	r0, sp, #92	; 0x5c
   e9f82:	9317      	str	r3, [sp, #92]	; 0x5c
   e9f84:	f001 fa38 	bl	eb3f8 <__match>
   e9f88:	b910      	cbnz	r0, e9f90 <_strtod_r+0x340>
   e9f8a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e9f8c:	3301      	adds	r3, #1
   e9f8e:	9317      	str	r3, [sp, #92]	; 0x5c
   e9f90:	f8df b2a0 	ldr.w	fp, [pc, #672]	; ea234 <_strtod_r+0x5e4>
   e9f94:	e01a      	b.n	e9fcc <_strtod_r+0x37c>
   e9f96:	49a1      	ldr	r1, [pc, #644]	; (ea21c <_strtod_r+0x5cc>)
   e9f98:	a817      	add	r0, sp, #92	; 0x5c
   e9f9a:	f001 fa2d 	bl	eb3f8 <__match>
   e9f9e:	b1c8      	cbz	r0, e9fd4 <_strtod_r+0x384>
   e9fa0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e9fa2:	781b      	ldrb	r3, [r3, #0]
   e9fa4:	2b28      	cmp	r3, #40	; 0x28
   e9fa6:	d10f      	bne.n	e9fc8 <_strtod_r+0x378>
   e9fa8:	aa1a      	add	r2, sp, #104	; 0x68
   e9faa:	499d      	ldr	r1, [pc, #628]	; (ea220 <_strtod_r+0x5d0>)
   e9fac:	a817      	add	r0, sp, #92	; 0x5c
   e9fae:	f001 fa36 	bl	eb41e <__hexnan>
   e9fb2:	2805      	cmp	r0, #5
   e9fb4:	d108      	bne.n	e9fc8 <_strtod_r+0x378>
   e9fb6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   e9fb8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   e9fbc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   e9fc0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   e9fc4:	f000 bc0f 	b.w	ea7e6 <_strtod_r+0xb96>
   e9fc8:	f8df b26c 	ldr.w	fp, [pc, #620]	; ea238 <_strtod_r+0x5e8>
   e9fcc:	f04f 0a00 	mov.w	sl, #0
   e9fd0:	f000 bc09 	b.w	ea7e6 <_strtod_r+0xb96>
   e9fd4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   e9fd6:	9417      	str	r4, [sp, #92]	; 0x5c
   e9fd8:	2b00      	cmp	r3, #0
   e9fda:	f000 840f 	beq.w	ea7fc <_strtod_r+0xbac>
   e9fde:	2300      	movs	r3, #0
   e9fe0:	930c      	str	r3, [sp, #48]	; 0x30
   e9fe2:	f000 bc02 	b.w	ea7ea <_strtod_r+0xb9a>
   e9fe6:	9b04      	ldr	r3, [sp, #16]
   e9fe8:	9805      	ldr	r0, [sp, #20]
   e9fea:	2b00      	cmp	r3, #0
   e9fec:	bf08      	it	eq
   e9fee:	462b      	moveq	r3, r5
   e9ff0:	2d10      	cmp	r5, #16
   e9ff2:	462c      	mov	r4, r5
   e9ff4:	ebc2 0909 	rsb	r9, r2, r9
   e9ff8:	bfa8      	it	ge
   e9ffa:	2410      	movge	r4, #16
   e9ffc:	9304      	str	r3, [sp, #16]
   e9ffe:	f7fe feff 	bl	e8e00 <__aeabi_ui2d>
   ea002:	2c09      	cmp	r4, #9
   ea004:	4682      	mov	sl, r0
   ea006:	468b      	mov	fp, r1
   ea008:	dd13      	ble.n	ea032 <_strtod_r+0x3e2>
   ea00a:	4b86      	ldr	r3, [pc, #536]	; (ea224 <_strtod_r+0x5d4>)
   ea00c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   ea010:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   ea014:	f7fe ff6a 	bl	e8eec <__aeabi_dmul>
   ea018:	4606      	mov	r6, r0
   ea01a:	4640      	mov	r0, r8
   ea01c:	460f      	mov	r7, r1
   ea01e:	f7fe feef 	bl	e8e00 <__aeabi_ui2d>
   ea022:	4602      	mov	r2, r0
   ea024:	460b      	mov	r3, r1
   ea026:	4630      	mov	r0, r6
   ea028:	4639      	mov	r1, r7
   ea02a:	f7fe fdad 	bl	e8b88 <__adddf3>
   ea02e:	4682      	mov	sl, r0
   ea030:	468b      	mov	fp, r1
   ea032:	2d0f      	cmp	r5, #15
   ea034:	dc36      	bgt.n	ea0a4 <_strtod_r+0x454>
   ea036:	f1b9 0f00 	cmp.w	r9, #0
   ea03a:	f000 83d4 	beq.w	ea7e6 <_strtod_r+0xb96>
   ea03e:	dd24      	ble.n	ea08a <_strtod_r+0x43a>
   ea040:	f1b9 0f16 	cmp.w	r9, #22
   ea044:	dc07      	bgt.n	ea056 <_strtod_r+0x406>
   ea046:	4d77      	ldr	r5, [pc, #476]	; (ea224 <_strtod_r+0x5d4>)
   ea048:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
   ea04c:	4652      	mov	r2, sl
   ea04e:	465b      	mov	r3, fp
   ea050:	e9d9 0100 	ldrd	r0, r1, [r9]
   ea054:	e014      	b.n	ea080 <_strtod_r+0x430>
   ea056:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   ea05a:	4599      	cmp	r9, r3
   ea05c:	dc22      	bgt.n	ea0a4 <_strtod_r+0x454>
   ea05e:	4c71      	ldr	r4, [pc, #452]	; (ea224 <_strtod_r+0x5d4>)
   ea060:	f1c5 050f 	rsb	r5, r5, #15
   ea064:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   ea068:	ebc5 0509 	rsb	r5, r5, r9
   ea06c:	4652      	mov	r2, sl
   ea06e:	465b      	mov	r3, fp
   ea070:	e9d1 0100 	ldrd	r0, r1, [r1]
   ea074:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   ea078:	f7fe ff38 	bl	e8eec <__aeabi_dmul>
   ea07c:	e9d4 2300 	ldrd	r2, r3, [r4]
   ea080:	f7fe ff34 	bl	e8eec <__aeabi_dmul>
   ea084:	4682      	mov	sl, r0
   ea086:	468b      	mov	fp, r1
   ea088:	e3ad      	b.n	ea7e6 <_strtod_r+0xb96>
   ea08a:	f119 0f16 	cmn.w	r9, #22
   ea08e:	db09      	blt.n	ea0a4 <_strtod_r+0x454>
   ea090:	4d64      	ldr	r5, [pc, #400]	; (ea224 <_strtod_r+0x5d4>)
   ea092:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
   ea096:	e9d9 2300 	ldrd	r2, r3, [r9]
   ea09a:	4650      	mov	r0, sl
   ea09c:	4659      	mov	r1, fp
   ea09e:	f7ff f84f 	bl	e9140 <__aeabi_ddiv>
   ea0a2:	e7ef      	b.n	ea084 <_strtod_r+0x434>
   ea0a4:	1b2c      	subs	r4, r5, r4
   ea0a6:	444c      	add	r4, r9
   ea0a8:	2c00      	cmp	r4, #0
   ea0aa:	dd57      	ble.n	ea15c <_strtod_r+0x50c>
   ea0ac:	f014 010f 	ands.w	r1, r4, #15
   ea0b0:	d00a      	beq.n	ea0c8 <_strtod_r+0x478>
   ea0b2:	4b5c      	ldr	r3, [pc, #368]	; (ea224 <_strtod_r+0x5d4>)
   ea0b4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   ea0b8:	4652      	mov	r2, sl
   ea0ba:	465b      	mov	r3, fp
   ea0bc:	e9d1 0100 	ldrd	r0, r1, [r1]
   ea0c0:	f7fe ff14 	bl	e8eec <__aeabi_dmul>
   ea0c4:	4682      	mov	sl, r0
   ea0c6:	468b      	mov	fp, r1
   ea0c8:	f034 040f 	bics.w	r4, r4, #15
   ea0cc:	f000 80b8 	beq.w	ea240 <_strtod_r+0x5f0>
   ea0d0:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
   ea0d4:	dd0b      	ble.n	ea0ee <_strtod_r+0x49e>
   ea0d6:	2400      	movs	r4, #0
   ea0d8:	4625      	mov	r5, r4
   ea0da:	9405      	str	r4, [sp, #20]
   ea0dc:	9404      	str	r4, [sp, #16]
   ea0de:	9a02      	ldr	r2, [sp, #8]
   ea0e0:	f8df b150 	ldr.w	fp, [pc, #336]	; ea234 <_strtod_r+0x5e4>
   ea0e4:	2322      	movs	r3, #34	; 0x22
   ea0e6:	6013      	str	r3, [r2, #0]
   ea0e8:	f04f 0a00 	mov.w	sl, #0
   ea0ec:	e187      	b.n	ea3fe <_strtod_r+0x7ae>
   ea0ee:	4e4e      	ldr	r6, [pc, #312]	; (ea228 <_strtod_r+0x5d8>)
   ea0f0:	2300      	movs	r3, #0
   ea0f2:	1124      	asrs	r4, r4, #4
   ea0f4:	4650      	mov	r0, sl
   ea0f6:	4659      	mov	r1, fp
   ea0f8:	4698      	mov	r8, r3
   ea0fa:	4637      	mov	r7, r6
   ea0fc:	2c01      	cmp	r4, #1
   ea0fe:	dd0b      	ble.n	ea118 <_strtod_r+0x4c8>
   ea100:	07e2      	lsls	r2, r4, #31
   ea102:	d504      	bpl.n	ea10e <_strtod_r+0x4be>
   ea104:	e9d6 2300 	ldrd	r2, r3, [r6]
   ea108:	f7fe fef0 	bl	e8eec <__aeabi_dmul>
   ea10c:	2301      	movs	r3, #1
   ea10e:	f108 0801 	add.w	r8, r8, #1
   ea112:	1064      	asrs	r4, r4, #1
   ea114:	3608      	adds	r6, #8
   ea116:	e7f1      	b.n	ea0fc <_strtod_r+0x4ac>
   ea118:	b10b      	cbz	r3, ea11e <_strtod_r+0x4ce>
   ea11a:	4682      	mov	sl, r0
   ea11c:	468b      	mov	fp, r1
   ea11e:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   ea122:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
   ea126:	4652      	mov	r2, sl
   ea128:	465b      	mov	r3, fp
   ea12a:	e9d7 0100 	ldrd	r0, r1, [r7]
   ea12e:	f7fe fedd 	bl	e8eec <__aeabi_dmul>
   ea132:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   ea136:	468b      	mov	fp, r1
   ea138:	460a      	mov	r2, r1
   ea13a:	0d1b      	lsrs	r3, r3, #20
   ea13c:	493b      	ldr	r1, [pc, #236]	; (ea22c <_strtod_r+0x5dc>)
   ea13e:	051b      	lsls	r3, r3, #20
   ea140:	428b      	cmp	r3, r1
   ea142:	4682      	mov	sl, r0
   ea144:	d8c7      	bhi.n	ea0d6 <_strtod_r+0x486>
   ea146:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   ea14a:	428b      	cmp	r3, r1
   ea14c:	bf86      	itte	hi
   ea14e:	f8df b0ec 	ldrhi.w	fp, [pc, #236]	; ea23c <_strtod_r+0x5ec>
   ea152:	f04f 3aff 	movhi.w	sl, #4294967295
   ea156:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   ea15a:	e071      	b.n	ea240 <_strtod_r+0x5f0>
   ea15c:	d070      	beq.n	ea240 <_strtod_r+0x5f0>
   ea15e:	4264      	negs	r4, r4
   ea160:	f014 020f 	ands.w	r2, r4, #15
   ea164:	d00a      	beq.n	ea17c <_strtod_r+0x52c>
   ea166:	4b2f      	ldr	r3, [pc, #188]	; (ea224 <_strtod_r+0x5d4>)
   ea168:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   ea16c:	4650      	mov	r0, sl
   ea16e:	4659      	mov	r1, fp
   ea170:	e9d3 2300 	ldrd	r2, r3, [r3]
   ea174:	f7fe ffe4 	bl	e9140 <__aeabi_ddiv>
   ea178:	4682      	mov	sl, r0
   ea17a:	468b      	mov	fp, r1
   ea17c:	1124      	asrs	r4, r4, #4
   ea17e:	d05f      	beq.n	ea240 <_strtod_r+0x5f0>
   ea180:	2c1f      	cmp	r4, #31
   ea182:	dd04      	ble.n	ea18e <_strtod_r+0x53e>
   ea184:	2400      	movs	r4, #0
   ea186:	4625      	mov	r5, r4
   ea188:	9405      	str	r4, [sp, #20]
   ea18a:	9404      	str	r4, [sp, #16]
   ea18c:	e130      	b.n	ea3f0 <_strtod_r+0x7a0>
   ea18e:	f014 0f10 	tst.w	r4, #16
   ea192:	bf0c      	ite	eq
   ea194:	2300      	moveq	r3, #0
   ea196:	236a      	movne	r3, #106	; 0x6a
   ea198:	4e25      	ldr	r6, [pc, #148]	; (ea230 <_strtod_r+0x5e0>)
   ea19a:	9303      	str	r3, [sp, #12]
   ea19c:	4650      	mov	r0, sl
   ea19e:	4659      	mov	r1, fp
   ea1a0:	2300      	movs	r3, #0
   ea1a2:	2c00      	cmp	r4, #0
   ea1a4:	dd09      	ble.n	ea1ba <_strtod_r+0x56a>
   ea1a6:	07e2      	lsls	r2, r4, #31
   ea1a8:	d504      	bpl.n	ea1b4 <_strtod_r+0x564>
   ea1aa:	e9d6 2300 	ldrd	r2, r3, [r6]
   ea1ae:	f7fe fe9d 	bl	e8eec <__aeabi_dmul>
   ea1b2:	2301      	movs	r3, #1
   ea1b4:	1064      	asrs	r4, r4, #1
   ea1b6:	3608      	adds	r6, #8
   ea1b8:	e7f3      	b.n	ea1a2 <_strtod_r+0x552>
   ea1ba:	b10b      	cbz	r3, ea1c0 <_strtod_r+0x570>
   ea1bc:	4682      	mov	sl, r0
   ea1be:	468b      	mov	fp, r1
   ea1c0:	9b03      	ldr	r3, [sp, #12]
   ea1c2:	b1eb      	cbz	r3, ea200 <_strtod_r+0x5b0>
   ea1c4:	f3cb 530a 	ubfx	r3, fp, #20, #11
   ea1c8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   ea1cc:	2b00      	cmp	r3, #0
   ea1ce:	4659      	mov	r1, fp
   ea1d0:	dd16      	ble.n	ea200 <_strtod_r+0x5b0>
   ea1d2:	2b1f      	cmp	r3, #31
   ea1d4:	dd0e      	ble.n	ea1f4 <_strtod_r+0x5a4>
   ea1d6:	2b34      	cmp	r3, #52	; 0x34
   ea1d8:	bfde      	ittt	le
   ea1da:	3b20      	suble	r3, #32
   ea1dc:	f04f 32ff 	movle.w	r2, #4294967295
   ea1e0:	fa02 f303 	lslle.w	r3, r2, r3
   ea1e4:	f04f 0a00 	mov.w	sl, #0
   ea1e8:	bfcc      	ite	gt
   ea1ea:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   ea1ee:	ea03 0b01 	andle.w	fp, r3, r1
   ea1f2:	e005      	b.n	ea200 <_strtod_r+0x5b0>
   ea1f4:	f04f 32ff 	mov.w	r2, #4294967295
   ea1f8:	fa02 f303 	lsl.w	r3, r2, r3
   ea1fc:	ea03 0a0a 	and.w	sl, r3, sl
   ea200:	2200      	movs	r2, #0
   ea202:	2300      	movs	r3, #0
   ea204:	4650      	mov	r0, sl
   ea206:	4659      	mov	r1, fp
   ea208:	f7ff f8d8 	bl	e93bc <__aeabi_dcmpeq>
   ea20c:	2800      	cmp	r0, #0
   ea20e:	d1b9      	bne.n	ea184 <_strtod_r+0x534>
   ea210:	e018      	b.n	ea244 <_strtod_r+0x5f4>
   ea212:	bf00      	nop
   ea214:	000ef05d 	.word	0x000ef05d
   ea218:	000ef8e4 	.word	0x000ef8e4
   ea21c:	000ef055 	.word	0x000ef055
   ea220:	000ef8d0 	.word	0x000ef8d0
   ea224:	000ef950 	.word	0x000ef950
   ea228:	000efa18 	.word	0x000efa18
   ea22c:	7ca00000 	.word	0x7ca00000
   ea230:	000ef8f0 	.word	0x000ef8f0
   ea234:	7ff00000 	.word	0x7ff00000
   ea238:	fff80000 	.word	0xfff80000
   ea23c:	7fefffff 	.word	0x7fefffff
   ea240:	2300      	movs	r3, #0
   ea242:	9303      	str	r3, [sp, #12]
   ea244:	9b05      	ldr	r3, [sp, #20]
   ea246:	9300      	str	r3, [sp, #0]
   ea248:	9a04      	ldr	r2, [sp, #16]
   ea24a:	9907      	ldr	r1, [sp, #28]
   ea24c:	9802      	ldr	r0, [sp, #8]
   ea24e:	462b      	mov	r3, r5
   ea250:	f001 faed 	bl	eb82e <__s2b>
   ea254:	9005      	str	r0, [sp, #20]
   ea256:	2800      	cmp	r0, #0
   ea258:	f43f af3d 	beq.w	ea0d6 <_strtod_r+0x486>
   ea25c:	f1b9 0f00 	cmp.w	r9, #0
   ea260:	f1c9 0300 	rsb	r3, r9, #0
   ea264:	bfa8      	it	ge
   ea266:	2300      	movge	r3, #0
   ea268:	930d      	str	r3, [sp, #52]	; 0x34
   ea26a:	2400      	movs	r4, #0
   ea26c:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
   ea270:	9312      	str	r3, [sp, #72]	; 0x48
   ea272:	4625      	mov	r5, r4
   ea274:	9b05      	ldr	r3, [sp, #20]
   ea276:	9802      	ldr	r0, [sp, #8]
   ea278:	6859      	ldr	r1, [r3, #4]
   ea27a:	f001 fa51 	bl	eb720 <_Balloc>
   ea27e:	9004      	str	r0, [sp, #16]
   ea280:	2800      	cmp	r0, #0
   ea282:	f43f af2c 	beq.w	ea0de <_strtod_r+0x48e>
   ea286:	9b05      	ldr	r3, [sp, #20]
   ea288:	691a      	ldr	r2, [r3, #16]
   ea28a:	3202      	adds	r2, #2
   ea28c:	f103 010c 	add.w	r1, r3, #12
   ea290:	0092      	lsls	r2, r2, #2
   ea292:	300c      	adds	r0, #12
   ea294:	f7ff fc0f 	bl	e9ab6 <memcpy>
   ea298:	aa1a      	add	r2, sp, #104	; 0x68
   ea29a:	a919      	add	r1, sp, #100	; 0x64
   ea29c:	ec4b ab10 	vmov	d0, sl, fp
   ea2a0:	9802      	ldr	r0, [sp, #8]
   ea2a2:	e9cd ab08 	strd	sl, fp, [sp, #32]
   ea2a6:	f001 fd76 	bl	ebd96 <__d2b>
   ea2aa:	9018      	str	r0, [sp, #96]	; 0x60
   ea2ac:	2800      	cmp	r0, #0
   ea2ae:	f43f af16 	beq.w	ea0de <_strtod_r+0x48e>
   ea2b2:	2101      	movs	r1, #1
   ea2b4:	9802      	ldr	r0, [sp, #8]
   ea2b6:	f001 fb45 	bl	eb944 <__i2b>
   ea2ba:	4605      	mov	r5, r0
   ea2bc:	2800      	cmp	r0, #0
   ea2be:	f43f af0e 	beq.w	ea0de <_strtod_r+0x48e>
   ea2c2:	9b19      	ldr	r3, [sp, #100]	; 0x64
   ea2c4:	9903      	ldr	r1, [sp, #12]
   ea2c6:	9e1a      	ldr	r6, [sp, #104]	; 0x68
   ea2c8:	2b00      	cmp	r3, #0
   ea2ca:	bfad      	iteet	ge
   ea2cc:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
   ea2ce:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   ea2d0:	f8dd 8034 	ldrlt.w	r8, [sp, #52]	; 0x34
   ea2d4:	eb02 0803 	addge.w	r8, r2, r3
   ea2d8:	bfb8      	it	lt
   ea2da:	1ad2      	sublt	r2, r2, r3
   ea2dc:	eba3 0301 	sub.w	r3, r3, r1
   ea2e0:	4433      	add	r3, r6
   ea2e2:	49b5      	ldr	r1, [pc, #724]	; (ea5b8 <_strtod_r+0x968>)
   ea2e4:	bfa8      	it	ge
   ea2e6:	9a12      	ldrge	r2, [sp, #72]	; 0x48
   ea2e8:	3b01      	subs	r3, #1
   ea2ea:	428b      	cmp	r3, r1
   ea2ec:	f1c6 0636 	rsb	r6, r6, #54	; 0x36
   ea2f0:	f280 808a 	bge.w	ea408 <_strtod_r+0x7b8>
   ea2f4:	1ac9      	subs	r1, r1, r3
   ea2f6:	291f      	cmp	r1, #31
   ea2f8:	bfc8      	it	gt
   ea2fa:	4fb0      	ldrgt	r7, [pc, #704]	; (ea5bc <_strtod_r+0x96c>)
   ea2fc:	f04f 0901 	mov.w	r9, #1
   ea300:	bfd4      	ite	le
   ea302:	fa09 f301 	lslle.w	r3, r9, r1
   ea306:	1aff      	subgt	r7, r7, r3
   ea308:	eba6 0601 	sub.w	r6, r6, r1
   ea30c:	bfd9      	ittee	le
   ea30e:	9306      	strle	r3, [sp, #24]
   ea310:	2700      	movle	r7, #0
   ea312:	fa09 f707 	lslgt.w	r7, r9, r7
   ea316:	f8cd 9018 	strgt.w	r9, [sp, #24]
   ea31a:	eb08 0906 	add.w	r9, r8, r6
   ea31e:	9b03      	ldr	r3, [sp, #12]
   ea320:	45c8      	cmp	r8, r9
   ea322:	4416      	add	r6, r2
   ea324:	441e      	add	r6, r3
   ea326:	4643      	mov	r3, r8
   ea328:	bfa8      	it	ge
   ea32a:	464b      	movge	r3, r9
   ea32c:	42b3      	cmp	r3, r6
   ea32e:	bfa8      	it	ge
   ea330:	4633      	movge	r3, r6
   ea332:	2b00      	cmp	r3, #0
   ea334:	bfc2      	ittt	gt
   ea336:	ebc3 0909 	rsbgt	r9, r3, r9
   ea33a:	1af6      	subgt	r6, r6, r3
   ea33c:	ebc3 0808 	rsbgt	r8, r3, r8
   ea340:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   ea342:	2b00      	cmp	r3, #0
   ea344:	d164      	bne.n	ea410 <_strtod_r+0x7c0>
   ea346:	f1b9 0f00 	cmp.w	r9, #0
   ea34a:	dc7a      	bgt.n	ea442 <_strtod_r+0x7f2>
   ea34c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   ea34e:	2b00      	cmp	r3, #0
   ea350:	f040 8081 	bne.w	ea456 <_strtod_r+0x806>
   ea354:	2e00      	cmp	r6, #0
   ea356:	f300 8088 	bgt.w	ea46a <_strtod_r+0x81a>
   ea35a:	f1b8 0f00 	cmp.w	r8, #0
   ea35e:	f300 808e 	bgt.w	ea47e <_strtod_r+0x82e>
   ea362:	9a04      	ldr	r2, [sp, #16]
   ea364:	9918      	ldr	r1, [sp, #96]	; 0x60
   ea366:	9802      	ldr	r0, [sp, #8]
   ea368:	f001 fc41 	bl	ebbee <__mdiff>
   ea36c:	4604      	mov	r4, r0
   ea36e:	2800      	cmp	r0, #0
   ea370:	f43f aeb5 	beq.w	ea0de <_strtod_r+0x48e>
   ea374:	68c3      	ldr	r3, [r0, #12]
   ea376:	9307      	str	r3, [sp, #28]
   ea378:	2300      	movs	r3, #0
   ea37a:	60c3      	str	r3, [r0, #12]
   ea37c:	4629      	mov	r1, r5
   ea37e:	f001 fc1a 	bl	ebbb6 <__mcmp>
   ea382:	2800      	cmp	r0, #0
   ea384:	f280 8089 	bge.w	ea49a <_strtod_r+0x84a>
   ea388:	9b07      	ldr	r3, [sp, #28]
   ea38a:	2b00      	cmp	r3, #0
   ea38c:	f040 8204 	bne.w	ea798 <_strtod_r+0xb48>
   ea390:	f1ba 0f00 	cmp.w	sl, #0
   ea394:	f040 8200 	bne.w	ea798 <_strtod_r+0xb48>
   ea398:	f3cb 0313 	ubfx	r3, fp, #0, #20
   ea39c:	2b00      	cmp	r3, #0
   ea39e:	f040 81fb 	bne.w	ea798 <_strtod_r+0xb48>
   ea3a2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   ea3a6:	0d1b      	lsrs	r3, r3, #20
   ea3a8:	051b      	lsls	r3, r3, #20
   ea3aa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   ea3ae:	f240 81f3 	bls.w	ea798 <_strtod_r+0xb48>
   ea3b2:	6963      	ldr	r3, [r4, #20]
   ea3b4:	2b00      	cmp	r3, #0
   ea3b6:	d06c      	beq.n	ea492 <_strtod_r+0x842>
   ea3b8:	4621      	mov	r1, r4
   ea3ba:	2201      	movs	r2, #1
   ea3bc:	9802      	ldr	r0, [sp, #8]
   ea3be:	f001 fba9 	bl	ebb14 <__lshift>
   ea3c2:	4629      	mov	r1, r5
   ea3c4:	4604      	mov	r4, r0
   ea3c6:	f001 fbf6 	bl	ebbb6 <__mcmp>
   ea3ca:	2800      	cmp	r0, #0
   ea3cc:	f340 81e4 	ble.w	ea798 <_strtod_r+0xb48>
   ea3d0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   ea3d4:	9a03      	ldr	r2, [sp, #12]
   ea3d6:	0d1b      	lsrs	r3, r3, #20
   ea3d8:	051b      	lsls	r3, r3, #20
   ea3da:	2a00      	cmp	r2, #0
   ea3dc:	f000 808c 	beq.w	ea4f8 <_strtod_r+0x8a8>
   ea3e0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   ea3e4:	f300 8088 	bgt.w	ea4f8 <_strtod_r+0x8a8>
   ea3e8:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
   ea3ec:	f300 81d6 	bgt.w	ea79c <_strtod_r+0xb4c>
   ea3f0:	9a02      	ldr	r2, [sp, #8]
   ea3f2:	2322      	movs	r3, #34	; 0x22
   ea3f4:	f04f 0a00 	mov.w	sl, #0
   ea3f8:	f04f 0b00 	mov.w	fp, #0
   ea3fc:	6013      	str	r3, [r2, #0]
   ea3fe:	9b05      	ldr	r3, [sp, #20]
   ea400:	2b00      	cmp	r3, #0
   ea402:	f040 81dc 	bne.w	ea7be <_strtod_r+0xb6e>
   ea406:	e1ee      	b.n	ea7e6 <_strtod_r+0xb96>
   ea408:	2301      	movs	r3, #1
   ea40a:	2700      	movs	r7, #0
   ea40c:	9306      	str	r3, [sp, #24]
   ea40e:	e784      	b.n	ea31a <_strtod_r+0x6ca>
   ea410:	4629      	mov	r1, r5
   ea412:	461a      	mov	r2, r3
   ea414:	9802      	ldr	r0, [sp, #8]
   ea416:	f001 fb2f 	bl	eba78 <__pow5mult>
   ea41a:	4605      	mov	r5, r0
   ea41c:	2800      	cmp	r0, #0
   ea41e:	f43f ae5e 	beq.w	ea0de <_strtod_r+0x48e>
   ea422:	4601      	mov	r1, r0
   ea424:	9a18      	ldr	r2, [sp, #96]	; 0x60
   ea426:	9802      	ldr	r0, [sp, #8]
   ea428:	f001 fa95 	bl	eb956 <__multiply>
   ea42c:	9007      	str	r0, [sp, #28]
   ea42e:	2800      	cmp	r0, #0
   ea430:	f43f ae55 	beq.w	ea0de <_strtod_r+0x48e>
   ea434:	9918      	ldr	r1, [sp, #96]	; 0x60
   ea436:	9802      	ldr	r0, [sp, #8]
   ea438:	f001 f9a7 	bl	eb78a <_Bfree>
   ea43c:	9b07      	ldr	r3, [sp, #28]
   ea43e:	9318      	str	r3, [sp, #96]	; 0x60
   ea440:	e781      	b.n	ea346 <_strtod_r+0x6f6>
   ea442:	464a      	mov	r2, r9
   ea444:	9918      	ldr	r1, [sp, #96]	; 0x60
   ea446:	9802      	ldr	r0, [sp, #8]
   ea448:	f001 fb64 	bl	ebb14 <__lshift>
   ea44c:	9018      	str	r0, [sp, #96]	; 0x60
   ea44e:	2800      	cmp	r0, #0
   ea450:	f47f af7c 	bne.w	ea34c <_strtod_r+0x6fc>
   ea454:	e643      	b.n	ea0de <_strtod_r+0x48e>
   ea456:	9a12      	ldr	r2, [sp, #72]	; 0x48
   ea458:	9904      	ldr	r1, [sp, #16]
   ea45a:	9802      	ldr	r0, [sp, #8]
   ea45c:	f001 fb0c 	bl	eba78 <__pow5mult>
   ea460:	9004      	str	r0, [sp, #16]
   ea462:	2800      	cmp	r0, #0
   ea464:	f47f af76 	bne.w	ea354 <_strtod_r+0x704>
   ea468:	e639      	b.n	ea0de <_strtod_r+0x48e>
   ea46a:	4632      	mov	r2, r6
   ea46c:	9904      	ldr	r1, [sp, #16]
   ea46e:	9802      	ldr	r0, [sp, #8]
   ea470:	f001 fb50 	bl	ebb14 <__lshift>
   ea474:	9004      	str	r0, [sp, #16]
   ea476:	2800      	cmp	r0, #0
   ea478:	f47f af6f 	bne.w	ea35a <_strtod_r+0x70a>
   ea47c:	e62f      	b.n	ea0de <_strtod_r+0x48e>
   ea47e:	4629      	mov	r1, r5
   ea480:	4642      	mov	r2, r8
   ea482:	9802      	ldr	r0, [sp, #8]
   ea484:	f001 fb46 	bl	ebb14 <__lshift>
   ea488:	4605      	mov	r5, r0
   ea48a:	2800      	cmp	r0, #0
   ea48c:	f47f af69 	bne.w	ea362 <_strtod_r+0x712>
   ea490:	e625      	b.n	ea0de <_strtod_r+0x48e>
   ea492:	6923      	ldr	r3, [r4, #16]
   ea494:	2b01      	cmp	r3, #1
   ea496:	dc8f      	bgt.n	ea3b8 <_strtod_r+0x768>
   ea498:	e17e      	b.n	ea798 <_strtod_r+0xb48>
   ea49a:	d161      	bne.n	ea560 <_strtod_r+0x910>
   ea49c:	9a07      	ldr	r2, [sp, #28]
   ea49e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   ea4a2:	b322      	cbz	r2, ea4ee <_strtod_r+0x89e>
   ea4a4:	4946      	ldr	r1, [pc, #280]	; (ea5c0 <_strtod_r+0x970>)
   ea4a6:	428b      	cmp	r3, r1
   ea4a8:	465a      	mov	r2, fp
   ea4aa:	d12e      	bne.n	ea50a <_strtod_r+0x8ba>
   ea4ac:	9b03      	ldr	r3, [sp, #12]
   ea4ae:	4651      	mov	r1, sl
   ea4b0:	b163      	cbz	r3, ea4cc <_strtod_r+0x87c>
   ea4b2:	4b44      	ldr	r3, [pc, #272]	; (ea5c4 <_strtod_r+0x974>)
   ea4b4:	4013      	ands	r3, r2
   ea4b6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   ea4ba:	d807      	bhi.n	ea4cc <_strtod_r+0x87c>
   ea4bc:	0d1b      	lsrs	r3, r3, #20
   ea4be:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   ea4c2:	f04f 30ff 	mov.w	r0, #4294967295
   ea4c6:	fa00 f303 	lsl.w	r3, r0, r3
   ea4ca:	e001      	b.n	ea4d0 <_strtod_r+0x880>
   ea4cc:	f04f 33ff 	mov.w	r3, #4294967295
   ea4d0:	428b      	cmp	r3, r1
   ea4d2:	d11a      	bne.n	ea50a <_strtod_r+0x8ba>
   ea4d4:	493c      	ldr	r1, [pc, #240]	; (ea5c8 <_strtod_r+0x978>)
   ea4d6:	428a      	cmp	r2, r1
   ea4d8:	d102      	bne.n	ea4e0 <_strtod_r+0x890>
   ea4da:	3301      	adds	r3, #1
   ea4dc:	f43f adff 	beq.w	ea0de <_strtod_r+0x48e>
   ea4e0:	4b38      	ldr	r3, [pc, #224]	; (ea5c4 <_strtod_r+0x974>)
   ea4e2:	4013      	ands	r3, r2
   ea4e4:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   ea4e8:	f04f 0a00 	mov.w	sl, #0
   ea4ec:	e154      	b.n	ea798 <_strtod_r+0xb48>
   ea4ee:	b963      	cbnz	r3, ea50a <_strtod_r+0x8ba>
   ea4f0:	f1ba 0f00 	cmp.w	sl, #0
   ea4f4:	d109      	bne.n	ea50a <_strtod_r+0x8ba>
   ea4f6:	e76b      	b.n	ea3d0 <_strtod_r+0x780>
   ea4f8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   ea4fc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   ea500:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   ea504:	f04f 3aff 	mov.w	sl, #4294967295
   ea508:	e146      	b.n	ea798 <_strtod_r+0xb48>
   ea50a:	b117      	cbz	r7, ea512 <_strtod_r+0x8c2>
   ea50c:	ea17 0f0b 	tst.w	r7, fp
   ea510:	e002      	b.n	ea518 <_strtod_r+0x8c8>
   ea512:	9b06      	ldr	r3, [sp, #24]
   ea514:	ea13 0f0a 	tst.w	r3, sl
   ea518:	f000 813e 	beq.w	ea798 <_strtod_r+0xb48>
   ea51c:	9b07      	ldr	r3, [sp, #28]
   ea51e:	9a03      	ldr	r2, [sp, #12]
   ea520:	4650      	mov	r0, sl
   ea522:	4659      	mov	r1, fp
   ea524:	b153      	cbz	r3, ea53c <_strtod_r+0x8ec>
   ea526:	f7ff fb74 	bl	e9c12 <sulp>
   ea52a:	4602      	mov	r2, r0
   ea52c:	460b      	mov	r3, r1
   ea52e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   ea532:	f7fe fb29 	bl	e8b88 <__adddf3>
   ea536:	4682      	mov	sl, r0
   ea538:	468b      	mov	fp, r1
   ea53a:	e12d      	b.n	ea798 <_strtod_r+0xb48>
   ea53c:	f7ff fb69 	bl	e9c12 <sulp>
   ea540:	4602      	mov	r2, r0
   ea542:	460b      	mov	r3, r1
   ea544:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   ea548:	f7fe fb1c 	bl	e8b84 <__aeabi_dsub>
   ea54c:	2200      	movs	r2, #0
   ea54e:	2300      	movs	r3, #0
   ea550:	4682      	mov	sl, r0
   ea552:	468b      	mov	fp, r1
   ea554:	f7fe ff32 	bl	e93bc <__aeabi_dcmpeq>
   ea558:	2800      	cmp	r0, #0
   ea55a:	f47f af49 	bne.w	ea3f0 <_strtod_r+0x7a0>
   ea55e:	e11b      	b.n	ea798 <_strtod_r+0xb48>
   ea560:	4629      	mov	r1, r5
   ea562:	4620      	mov	r0, r4
   ea564:	f001 fc65 	bl	ebe32 <__ratio>
   ea568:	ec57 6b10 	vmov	r6, r7, d0
   ea56c:	2200      	movs	r2, #0
   ea56e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   ea572:	ee10 0a10 	vmov	r0, s0
   ea576:	4639      	mov	r1, r7
   ea578:	f7fe ff34 	bl	e93e4 <__aeabi_dcmple>
   ea57c:	2800      	cmp	r0, #0
   ea57e:	d042      	beq.n	ea606 <_strtod_r+0x9b6>
   ea580:	9b07      	ldr	r3, [sp, #28]
   ea582:	b123      	cbz	r3, ea58e <_strtod_r+0x93e>
   ea584:	f04f 0800 	mov.w	r8, #0
   ea588:	f8df 9040 	ldr.w	r9, [pc, #64]	; ea5cc <_strtod_r+0x97c>
   ea58c:	e011      	b.n	ea5b2 <_strtod_r+0x962>
   ea58e:	f1ba 0f00 	cmp.w	sl, #0
   ea592:	d103      	bne.n	ea59c <_strtod_r+0x94c>
   ea594:	f3cb 0313 	ubfx	r3, fp, #0, #20
   ea598:	b93b      	cbnz	r3, ea5aa <_strtod_r+0x95a>
   ea59a:	e01b      	b.n	ea5d4 <_strtod_r+0x984>
   ea59c:	f1ba 0f01 	cmp.w	sl, #1
   ea5a0:	d103      	bne.n	ea5aa <_strtod_r+0x95a>
   ea5a2:	f1bb 0f00 	cmp.w	fp, #0
   ea5a6:	f43f af23 	beq.w	ea3f0 <_strtod_r+0x7a0>
   ea5aa:	f8df 9024 	ldr.w	r9, [pc, #36]	; ea5d0 <_strtod_r+0x980>
   ea5ae:	f04f 0800 	mov.w	r8, #0
   ea5b2:	2600      	movs	r6, #0
   ea5b4:	4f05      	ldr	r7, [pc, #20]	; (ea5cc <_strtod_r+0x97c>)
   ea5b6:	e039      	b.n	ea62c <_strtod_r+0x9dc>
   ea5b8:	fffffc02 	.word	0xfffffc02
   ea5bc:	fffffbe2 	.word	0xfffffbe2
   ea5c0:	000fffff 	.word	0x000fffff
   ea5c4:	7ff00000 	.word	0x7ff00000
   ea5c8:	7fefffff 	.word	0x7fefffff
   ea5cc:	3ff00000 	.word	0x3ff00000
   ea5d0:	bff00000 	.word	0xbff00000
   ea5d4:	2200      	movs	r2, #0
   ea5d6:	4b98      	ldr	r3, [pc, #608]	; (ea838 <_strtod_r+0xbe8>)
   ea5d8:	4630      	mov	r0, r6
   ea5da:	4639      	mov	r1, r7
   ea5dc:	f7fe fef8 	bl	e93d0 <__aeabi_dcmplt>
   ea5e0:	b940      	cbnz	r0, ea5f4 <_strtod_r+0x9a4>
   ea5e2:	4630      	mov	r0, r6
   ea5e4:	4639      	mov	r1, r7
   ea5e6:	2200      	movs	r2, #0
   ea5e8:	4b94      	ldr	r3, [pc, #592]	; (ea83c <_strtod_r+0xbec>)
   ea5ea:	f7fe fc7f 	bl	e8eec <__aeabi_dmul>
   ea5ee:	4606      	mov	r6, r0
   ea5f0:	460f      	mov	r7, r1
   ea5f2:	e001      	b.n	ea5f8 <_strtod_r+0x9a8>
   ea5f4:	4f91      	ldr	r7, [pc, #580]	; (ea83c <_strtod_r+0xbec>)
   ea5f6:	2600      	movs	r6, #0
   ea5f8:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   ea5fc:	9614      	str	r6, [sp, #80]	; 0x50
   ea5fe:	9315      	str	r3, [sp, #84]	; 0x54
   ea600:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   ea604:	e012      	b.n	ea62c <_strtod_r+0x9dc>
   ea606:	4b8d      	ldr	r3, [pc, #564]	; (ea83c <_strtod_r+0xbec>)
   ea608:	4630      	mov	r0, r6
   ea60a:	4639      	mov	r1, r7
   ea60c:	2200      	movs	r2, #0
   ea60e:	f7fe fc6d 	bl	e8eec <__aeabi_dmul>
   ea612:	9b07      	ldr	r3, [sp, #28]
   ea614:	4606      	mov	r6, r0
   ea616:	460f      	mov	r7, r1
   ea618:	b923      	cbnz	r3, ea624 <_strtod_r+0x9d4>
   ea61a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   ea61e:	900e      	str	r0, [sp, #56]	; 0x38
   ea620:	930f      	str	r3, [sp, #60]	; 0x3c
   ea622:	e001      	b.n	ea628 <_strtod_r+0x9d8>
   ea624:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
   ea628:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
   ea62c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   ea630:	0d1b      	lsrs	r3, r3, #20
   ea632:	051b      	lsls	r3, r3, #20
   ea634:	9306      	str	r3, [sp, #24]
   ea636:	9a06      	ldr	r2, [sp, #24]
   ea638:	4b81      	ldr	r3, [pc, #516]	; (ea840 <_strtod_r+0xbf0>)
   ea63a:	429a      	cmp	r2, r3
   ea63c:	d12b      	bne.n	ea696 <_strtod_r+0xa46>
   ea63e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   ea642:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   ea646:	ec4b ab10 	vmov	d0, sl, fp
   ea64a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   ea64e:	f001 fb2d 	bl	ebcac <__ulp>
   ea652:	4640      	mov	r0, r8
   ea654:	ec53 2b10 	vmov	r2, r3, d0
   ea658:	4649      	mov	r1, r9
   ea65a:	f7fe fc47 	bl	e8eec <__aeabi_dmul>
   ea65e:	4652      	mov	r2, sl
   ea660:	465b      	mov	r3, fp
   ea662:	f7fe fa91 	bl	e8b88 <__adddf3>
   ea666:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   ea66a:	0d1b      	lsrs	r3, r3, #20
   ea66c:	4a75      	ldr	r2, [pc, #468]	; (ea844 <_strtod_r+0xbf4>)
   ea66e:	051b      	lsls	r3, r3, #20
   ea670:	4293      	cmp	r3, r2
   ea672:	4682      	mov	sl, r0
   ea674:	d90c      	bls.n	ea690 <_strtod_r+0xa40>
   ea676:	4b74      	ldr	r3, [pc, #464]	; (ea848 <_strtod_r+0xbf8>)
   ea678:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   ea67a:	429a      	cmp	r2, r3
   ea67c:	d103      	bne.n	ea686 <_strtod_r+0xa36>
   ea67e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   ea680:	3301      	adds	r3, #1
   ea682:	f43f ad2c 	beq.w	ea0de <_strtod_r+0x48e>
   ea686:	f8df b1c0 	ldr.w	fp, [pc, #448]	; ea848 <_strtod_r+0xbf8>
   ea68a:	f04f 3aff 	mov.w	sl, #4294967295
   ea68e:	e072      	b.n	ea776 <_strtod_r+0xb26>
   ea690:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
   ea694:	e038      	b.n	ea708 <_strtod_r+0xab8>
   ea696:	9b03      	ldr	r3, [sp, #12]
   ea698:	b333      	cbz	r3, ea6e8 <_strtod_r+0xa98>
   ea69a:	9b06      	ldr	r3, [sp, #24]
   ea69c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   ea6a0:	d822      	bhi.n	ea6e8 <_strtod_r+0xa98>
   ea6a2:	a35d      	add	r3, pc, #372	; (adr r3, ea818 <_strtod_r+0xbc8>)
   ea6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   ea6a8:	4630      	mov	r0, r6
   ea6aa:	4639      	mov	r1, r7
   ea6ac:	f7fe fe9a 	bl	e93e4 <__aeabi_dcmple>
   ea6b0:	b1a8      	cbz	r0, ea6de <_strtod_r+0xa8e>
   ea6b2:	4639      	mov	r1, r7
   ea6b4:	4630      	mov	r0, r6
   ea6b6:	f7fe fef1 	bl	e949c <__aeabi_d2uiz>
   ea6ba:	2800      	cmp	r0, #0
   ea6bc:	bf08      	it	eq
   ea6be:	2001      	moveq	r0, #1
   ea6c0:	f7fe fb9e 	bl	e8e00 <__aeabi_ui2d>
   ea6c4:	9b07      	ldr	r3, [sp, #28]
   ea6c6:	4606      	mov	r6, r0
   ea6c8:	460f      	mov	r7, r1
   ea6ca:	b923      	cbnz	r3, ea6d6 <_strtod_r+0xa86>
   ea6cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   ea6d0:	9010      	str	r0, [sp, #64]	; 0x40
   ea6d2:	9311      	str	r3, [sp, #68]	; 0x44
   ea6d4:	e001      	b.n	ea6da <_strtod_r+0xa8a>
   ea6d6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
   ea6da:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   ea6de:	9a06      	ldr	r2, [sp, #24]
   ea6e0:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
   ea6e4:	ebc2 0903 	rsb	r9, r2, r3
   ea6e8:	ed9d 0b08 	vldr	d0, [sp, #32]
   ea6ec:	f001 fade 	bl	ebcac <__ulp>
   ea6f0:	4640      	mov	r0, r8
   ea6f2:	ec53 2b10 	vmov	r2, r3, d0
   ea6f6:	4649      	mov	r1, r9
   ea6f8:	f7fe fbf8 	bl	e8eec <__aeabi_dmul>
   ea6fc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   ea700:	f7fe fa42 	bl	e8b88 <__adddf3>
   ea704:	4682      	mov	sl, r0
   ea706:	468b      	mov	fp, r1
   ea708:	9b03      	ldr	r3, [sp, #12]
   ea70a:	bba3      	cbnz	r3, ea776 <_strtod_r+0xb26>
   ea70c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   ea710:	0d1b      	lsrs	r3, r3, #20
   ea712:	9a06      	ldr	r2, [sp, #24]
   ea714:	051b      	lsls	r3, r3, #20
   ea716:	429a      	cmp	r2, r3
   ea718:	46d8      	mov	r8, fp
   ea71a:	d12c      	bne.n	ea776 <_strtod_r+0xb26>
   ea71c:	4639      	mov	r1, r7
   ea71e:	4630      	mov	r0, r6
   ea720:	f7fe fe94 	bl	e944c <__aeabi_d2iz>
   ea724:	f7fe fb7c 	bl	e8e20 <__aeabi_i2d>
   ea728:	460b      	mov	r3, r1
   ea72a:	4602      	mov	r2, r0
   ea72c:	4639      	mov	r1, r7
   ea72e:	4630      	mov	r0, r6
   ea730:	f7fe fa28 	bl	e8b84 <__aeabi_dsub>
   ea734:	9b07      	ldr	r3, [sp, #28]
   ea736:	4606      	mov	r6, r0
   ea738:	460f      	mov	r7, r1
   ea73a:	b92b      	cbnz	r3, ea748 <_strtod_r+0xaf8>
   ea73c:	f1ba 0f00 	cmp.w	sl, #0
   ea740:	d102      	bne.n	ea748 <_strtod_r+0xaf8>
   ea742:	f3cb 0313 	ubfx	r3, fp, #0, #20
   ea746:	b183      	cbz	r3, ea76a <_strtod_r+0xb1a>
   ea748:	a335      	add	r3, pc, #212	; (adr r3, ea820 <_strtod_r+0xbd0>)
   ea74a:	e9d3 2300 	ldrd	r2, r3, [r3]
   ea74e:	4630      	mov	r0, r6
   ea750:	4639      	mov	r1, r7
   ea752:	f7fe fe3d 	bl	e93d0 <__aeabi_dcmplt>
   ea756:	2800      	cmp	r0, #0
   ea758:	d131      	bne.n	ea7be <_strtod_r+0xb6e>
   ea75a:	a333      	add	r3, pc, #204	; (adr r3, ea828 <_strtod_r+0xbd8>)
   ea75c:	e9d3 2300 	ldrd	r2, r3, [r3]
   ea760:	4630      	mov	r0, r6
   ea762:	4639      	mov	r1, r7
   ea764:	f7fe fe52 	bl	e940c <__aeabi_dcmpgt>
   ea768:	e004      	b.n	ea774 <_strtod_r+0xb24>
   ea76a:	a331      	add	r3, pc, #196	; (adr r3, ea830 <_strtod_r+0xbe0>)
   ea76c:	e9d3 2300 	ldrd	r2, r3, [r3]
   ea770:	f7fe fe2e 	bl	e93d0 <__aeabi_dcmplt>
   ea774:	bb18      	cbnz	r0, ea7be <_strtod_r+0xb6e>
   ea776:	9918      	ldr	r1, [sp, #96]	; 0x60
   ea778:	9802      	ldr	r0, [sp, #8]
   ea77a:	f001 f806 	bl	eb78a <_Bfree>
   ea77e:	9904      	ldr	r1, [sp, #16]
   ea780:	9802      	ldr	r0, [sp, #8]
   ea782:	f001 f802 	bl	eb78a <_Bfree>
   ea786:	4629      	mov	r1, r5
   ea788:	9802      	ldr	r0, [sp, #8]
   ea78a:	f000 fffe 	bl	eb78a <_Bfree>
   ea78e:	4621      	mov	r1, r4
   ea790:	9802      	ldr	r0, [sp, #8]
   ea792:	f000 fffa 	bl	eb78a <_Bfree>
   ea796:	e56d      	b.n	ea274 <_strtod_r+0x624>
   ea798:	9b03      	ldr	r3, [sp, #12]
   ea79a:	b183      	cbz	r3, ea7be <_strtod_r+0xb6e>
   ea79c:	4b2b      	ldr	r3, [pc, #172]	; (ea84c <_strtod_r+0xbfc>)
   ea79e:	930b      	str	r3, [sp, #44]	; 0x2c
   ea7a0:	2300      	movs	r3, #0
   ea7a2:	930a      	str	r3, [sp, #40]	; 0x28
   ea7a4:	4650      	mov	r0, sl
   ea7a6:	4659      	mov	r1, fp
   ea7a8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   ea7ac:	f7fe fb9e 	bl	e8eec <__aeabi_dmul>
   ea7b0:	4682      	mov	sl, r0
   ea7b2:	468b      	mov	fp, r1
   ea7b4:	b919      	cbnz	r1, ea7be <_strtod_r+0xb6e>
   ea7b6:	b910      	cbnz	r0, ea7be <_strtod_r+0xb6e>
   ea7b8:	9a02      	ldr	r2, [sp, #8]
   ea7ba:	2322      	movs	r3, #34	; 0x22
   ea7bc:	6013      	str	r3, [r2, #0]
   ea7be:	9918      	ldr	r1, [sp, #96]	; 0x60
   ea7c0:	9802      	ldr	r0, [sp, #8]
   ea7c2:	f000 ffe2 	bl	eb78a <_Bfree>
   ea7c6:	9904      	ldr	r1, [sp, #16]
   ea7c8:	9802      	ldr	r0, [sp, #8]
   ea7ca:	f000 ffde 	bl	eb78a <_Bfree>
   ea7ce:	4629      	mov	r1, r5
   ea7d0:	9802      	ldr	r0, [sp, #8]
   ea7d2:	f000 ffda 	bl	eb78a <_Bfree>
   ea7d6:	9905      	ldr	r1, [sp, #20]
   ea7d8:	9802      	ldr	r0, [sp, #8]
   ea7da:	f000 ffd6 	bl	eb78a <_Bfree>
   ea7de:	4621      	mov	r1, r4
   ea7e0:	9802      	ldr	r0, [sp, #8]
   ea7e2:	f000 ffd2 	bl	eb78a <_Bfree>
   ea7e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   ea7e8:	b113      	cbz	r3, ea7f0 <_strtod_r+0xba0>
   ea7ea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   ea7ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ea7ee:	6013      	str	r3, [r2, #0]
   ea7f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   ea7f2:	b11b      	cbz	r3, ea7fc <_strtod_r+0xbac>
   ea7f4:	4652      	mov	r2, sl
   ea7f6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   ea7fa:	e007      	b.n	ea80c <_strtod_r+0xbbc>
   ea7fc:	4652      	mov	r2, sl
   ea7fe:	465b      	mov	r3, fp
   ea800:	e004      	b.n	ea80c <_strtod_r+0xbbc>
   ea802:	2500      	movs	r5, #0
   ea804:	462a      	mov	r2, r5
   ea806:	2101      	movs	r1, #1
   ea808:	f7ff bb41 	b.w	e9e8e <_strtod_r+0x23e>
   ea80c:	ec43 2b10 	vmov	d0, r2, r3
   ea810:	b01d      	add	sp, #116	; 0x74
   ea812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ea816:	bf00      	nop
   ea818:	ffc00000 	.word	0xffc00000
   ea81c:	41dfffff 	.word	0x41dfffff
   ea820:	94a03595 	.word	0x94a03595
   ea824:	3fdfffff 	.word	0x3fdfffff
   ea828:	35afe535 	.word	0x35afe535
   ea82c:	3fe00000 	.word	0x3fe00000
   ea830:	94a03595 	.word	0x94a03595
   ea834:	3fcfffff 	.word	0x3fcfffff
   ea838:	3ff00000 	.word	0x3ff00000
   ea83c:	3fe00000 	.word	0x3fe00000
   ea840:	7fe00000 	.word	0x7fe00000
   ea844:	7c9fffff 	.word	0x7c9fffff
   ea848:	7fefffff 	.word	0x7fefffff
   ea84c:	39500000 	.word	0x39500000

000ea850 <strtod>:
   ea850:	4b02      	ldr	r3, [pc, #8]	; (ea85c <strtod+0xc>)
   ea852:	460a      	mov	r2, r1
   ea854:	4601      	mov	r1, r0
   ea856:	6818      	ldr	r0, [r3, #0]
   ea858:	f7ff b9fa 	b.w	e9c50 <_strtod_r>
   ea85c:	2003ac1c 	.word	0x2003ac1c

000ea860 <_strtol_r>:
   ea860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   ea864:	4680      	mov	r8, r0
   ea866:	4840      	ldr	r0, [pc, #256]	; (ea968 <_strtol_r+0x108>)
   ea868:	f8d0 9000 	ldr.w	r9, [r0]
   ea86c:	460f      	mov	r7, r1
   ea86e:	463d      	mov	r5, r7
   ea870:	f815 4b01 	ldrb.w	r4, [r5], #1
   ea874:	eb09 0004 	add.w	r0, r9, r4
   ea878:	7840      	ldrb	r0, [r0, #1]
   ea87a:	f000 0008 	and.w	r0, r0, #8
   ea87e:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   ea882:	b108      	cbz	r0, ea888 <_strtol_r+0x28>
   ea884:	462f      	mov	r7, r5
   ea886:	e7f2      	b.n	ea86e <_strtol_r+0xe>
   ea888:	2c2d      	cmp	r4, #45	; 0x2d
   ea88a:	d103      	bne.n	ea894 <_strtol_r+0x34>
   ea88c:	1cbd      	adds	r5, r7, #2
   ea88e:	787c      	ldrb	r4, [r7, #1]
   ea890:	2601      	movs	r6, #1
   ea892:	e003      	b.n	ea89c <_strtol_r+0x3c>
   ea894:	2c2b      	cmp	r4, #43	; 0x2b
   ea896:	bf04      	itt	eq
   ea898:	787c      	ldrbeq	r4, [r7, #1]
   ea89a:	1cbd      	addeq	r5, r7, #2
   ea89c:	b113      	cbz	r3, ea8a4 <_strtol_r+0x44>
   ea89e:	2b10      	cmp	r3, #16
   ea8a0:	d10a      	bne.n	ea8b8 <_strtol_r+0x58>
   ea8a2:	e05b      	b.n	ea95c <_strtol_r+0xfc>
   ea8a4:	2c30      	cmp	r4, #48	; 0x30
   ea8a6:	d157      	bne.n	ea958 <_strtol_r+0xf8>
   ea8a8:	7828      	ldrb	r0, [r5, #0]
   ea8aa:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   ea8ae:	2858      	cmp	r0, #88	; 0x58
   ea8b0:	d14d      	bne.n	ea94e <_strtol_r+0xee>
   ea8b2:	786c      	ldrb	r4, [r5, #1]
   ea8b4:	2310      	movs	r3, #16
   ea8b6:	3502      	adds	r5, #2
   ea8b8:	2e00      	cmp	r6, #0
   ea8ba:	bf14      	ite	ne
   ea8bc:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   ea8c0:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   ea8c4:	2700      	movs	r7, #0
   ea8c6:	fbbc faf3 	udiv	sl, ip, r3
   ea8ca:	4638      	mov	r0, r7
   ea8cc:	fb03 cc1a 	mls	ip, r3, sl, ip
   ea8d0:	eb09 0e04 	add.w	lr, r9, r4
   ea8d4:	f89e e001 	ldrb.w	lr, [lr, #1]
   ea8d8:	f01e 0f04 	tst.w	lr, #4
   ea8dc:	d001      	beq.n	ea8e2 <_strtol_r+0x82>
   ea8de:	3c30      	subs	r4, #48	; 0x30
   ea8e0:	e00b      	b.n	ea8fa <_strtol_r+0x9a>
   ea8e2:	f01e 0e03 	ands.w	lr, lr, #3
   ea8e6:	d01b      	beq.n	ea920 <_strtol_r+0xc0>
   ea8e8:	f1be 0f01 	cmp.w	lr, #1
   ea8ec:	bf0c      	ite	eq
   ea8ee:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   ea8f2:	f04f 0e57 	movne.w	lr, #87	; 0x57
   ea8f6:	ebce 0404 	rsb	r4, lr, r4
   ea8fa:	42a3      	cmp	r3, r4
   ea8fc:	dd10      	ble.n	ea920 <_strtol_r+0xc0>
   ea8fe:	f1b7 3fff 	cmp.w	r7, #4294967295
   ea902:	d00a      	beq.n	ea91a <_strtol_r+0xba>
   ea904:	4550      	cmp	r0, sl
   ea906:	d806      	bhi.n	ea916 <_strtol_r+0xb6>
   ea908:	d101      	bne.n	ea90e <_strtol_r+0xae>
   ea90a:	4564      	cmp	r4, ip
   ea90c:	dc03      	bgt.n	ea916 <_strtol_r+0xb6>
   ea90e:	fb03 4000 	mla	r0, r3, r0, r4
   ea912:	2701      	movs	r7, #1
   ea914:	e001      	b.n	ea91a <_strtol_r+0xba>
   ea916:	f04f 37ff 	mov.w	r7, #4294967295
   ea91a:	f815 4b01 	ldrb.w	r4, [r5], #1
   ea91e:	e7d7      	b.n	ea8d0 <_strtol_r+0x70>
   ea920:	1c7b      	adds	r3, r7, #1
   ea922:	d10c      	bne.n	ea93e <_strtol_r+0xde>
   ea924:	2e00      	cmp	r6, #0
   ea926:	f04f 0322 	mov.w	r3, #34	; 0x22
   ea92a:	bf14      	ite	ne
   ea92c:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   ea930:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   ea934:	f8c8 3000 	str.w	r3, [r8]
   ea938:	b92a      	cbnz	r2, ea946 <_strtol_r+0xe6>
   ea93a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   ea93e:	b106      	cbz	r6, ea942 <_strtol_r+0xe2>
   ea940:	4240      	negs	r0, r0
   ea942:	b172      	cbz	r2, ea962 <_strtol_r+0x102>
   ea944:	b107      	cbz	r7, ea948 <_strtol_r+0xe8>
   ea946:	1e69      	subs	r1, r5, #1
   ea948:	6011      	str	r1, [r2, #0]
   ea94a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   ea94e:	2430      	movs	r4, #48	; 0x30
   ea950:	2b00      	cmp	r3, #0
   ea952:	d1b1      	bne.n	ea8b8 <_strtol_r+0x58>
   ea954:	2308      	movs	r3, #8
   ea956:	e7af      	b.n	ea8b8 <_strtol_r+0x58>
   ea958:	230a      	movs	r3, #10
   ea95a:	e7ad      	b.n	ea8b8 <_strtol_r+0x58>
   ea95c:	2c30      	cmp	r4, #48	; 0x30
   ea95e:	d0a3      	beq.n	ea8a8 <_strtol_r+0x48>
   ea960:	e7aa      	b.n	ea8b8 <_strtol_r+0x58>
   ea962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   ea966:	bf00      	nop
   ea968:	2003abb8 	.word	0x2003abb8

000ea96c <strtol>:
   ea96c:	4613      	mov	r3, r2
   ea96e:	460a      	mov	r2, r1
   ea970:	4601      	mov	r1, r0
   ea972:	4802      	ldr	r0, [pc, #8]	; (ea97c <strtol+0x10>)
   ea974:	6800      	ldr	r0, [r0, #0]
   ea976:	f7ff bf73 	b.w	ea860 <_strtol_r>
   ea97a:	bf00      	nop
   ea97c:	2003ac1c 	.word	0x2003ac1c

000ea980 <_strtoul_r>:
   ea980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   ea984:	4680      	mov	r8, r0
   ea986:	483c      	ldr	r0, [pc, #240]	; (eaa78 <_strtoul_r+0xf8>)
   ea988:	f8d0 9000 	ldr.w	r9, [r0]
   ea98c:	460e      	mov	r6, r1
   ea98e:	4635      	mov	r5, r6
   ea990:	f815 4b01 	ldrb.w	r4, [r5], #1
   ea994:	eb09 0004 	add.w	r0, r9, r4
   ea998:	7840      	ldrb	r0, [r0, #1]
   ea99a:	f000 0008 	and.w	r0, r0, #8
   ea99e:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   ea9a2:	b108      	cbz	r0, ea9a8 <_strtoul_r+0x28>
   ea9a4:	462e      	mov	r6, r5
   ea9a6:	e7f2      	b.n	ea98e <_strtoul_r+0xe>
   ea9a8:	2c2d      	cmp	r4, #45	; 0x2d
   ea9aa:	d103      	bne.n	ea9b4 <_strtoul_r+0x34>
   ea9ac:	1cb5      	adds	r5, r6, #2
   ea9ae:	7874      	ldrb	r4, [r6, #1]
   ea9b0:	2701      	movs	r7, #1
   ea9b2:	e003      	b.n	ea9bc <_strtoul_r+0x3c>
   ea9b4:	2c2b      	cmp	r4, #43	; 0x2b
   ea9b6:	bf04      	itt	eq
   ea9b8:	7874      	ldrbeq	r4, [r6, #1]
   ea9ba:	1cb5      	addeq	r5, r6, #2
   ea9bc:	b113      	cbz	r3, ea9c4 <_strtoul_r+0x44>
   ea9be:	2b10      	cmp	r3, #16
   ea9c0:	d10a      	bne.n	ea9d8 <_strtoul_r+0x58>
   ea9c2:	e053      	b.n	eaa6c <_strtoul_r+0xec>
   ea9c4:	2c30      	cmp	r4, #48	; 0x30
   ea9c6:	d14f      	bne.n	eaa68 <_strtoul_r+0xe8>
   ea9c8:	7828      	ldrb	r0, [r5, #0]
   ea9ca:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   ea9ce:	2858      	cmp	r0, #88	; 0x58
   ea9d0:	d145      	bne.n	eaa5e <_strtoul_r+0xde>
   ea9d2:	786c      	ldrb	r4, [r5, #1]
   ea9d4:	2310      	movs	r3, #16
   ea9d6:	3502      	adds	r5, #2
   ea9d8:	f04f 3cff 	mov.w	ip, #4294967295
   ea9dc:	2600      	movs	r6, #0
   ea9de:	fbbc fcf3 	udiv	ip, ip, r3
   ea9e2:	fb03 fa0c 	mul.w	sl, r3, ip
   ea9e6:	ea6f 0a0a 	mvn.w	sl, sl
   ea9ea:	4630      	mov	r0, r6
   ea9ec:	eb09 0e04 	add.w	lr, r9, r4
   ea9f0:	f89e e001 	ldrb.w	lr, [lr, #1]
   ea9f4:	f01e 0f04 	tst.w	lr, #4
   ea9f8:	d001      	beq.n	ea9fe <_strtoul_r+0x7e>
   ea9fa:	3c30      	subs	r4, #48	; 0x30
   ea9fc:	e00b      	b.n	eaa16 <_strtoul_r+0x96>
   ea9fe:	f01e 0e03 	ands.w	lr, lr, #3
   eaa02:	d01a      	beq.n	eaa3a <_strtoul_r+0xba>
   eaa04:	f1be 0f01 	cmp.w	lr, #1
   eaa08:	bf0c      	ite	eq
   eaa0a:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   eaa0e:	f04f 0e57 	movne.w	lr, #87	; 0x57
   eaa12:	ebce 0404 	rsb	r4, lr, r4
   eaa16:	42a3      	cmp	r3, r4
   eaa18:	dd0f      	ble.n	eaa3a <_strtoul_r+0xba>
   eaa1a:	2e00      	cmp	r6, #0
   eaa1c:	db08      	blt.n	eaa30 <_strtoul_r+0xb0>
   eaa1e:	4560      	cmp	r0, ip
   eaa20:	d806      	bhi.n	eaa30 <_strtoul_r+0xb0>
   eaa22:	d101      	bne.n	eaa28 <_strtoul_r+0xa8>
   eaa24:	4554      	cmp	r4, sl
   eaa26:	dc03      	bgt.n	eaa30 <_strtoul_r+0xb0>
   eaa28:	fb03 4000 	mla	r0, r3, r0, r4
   eaa2c:	2601      	movs	r6, #1
   eaa2e:	e001      	b.n	eaa34 <_strtoul_r+0xb4>
   eaa30:	f04f 36ff 	mov.w	r6, #4294967295
   eaa34:	f815 4b01 	ldrb.w	r4, [r5], #1
   eaa38:	e7d8      	b.n	ea9ec <_strtoul_r+0x6c>
   eaa3a:	2e00      	cmp	r6, #0
   eaa3c:	da07      	bge.n	eaa4e <_strtoul_r+0xce>
   eaa3e:	2322      	movs	r3, #34	; 0x22
   eaa40:	f8c8 3000 	str.w	r3, [r8]
   eaa44:	f04f 30ff 	mov.w	r0, #4294967295
   eaa48:	b92a      	cbnz	r2, eaa56 <_strtoul_r+0xd6>
   eaa4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   eaa4e:	b107      	cbz	r7, eaa52 <_strtoul_r+0xd2>
   eaa50:	4240      	negs	r0, r0
   eaa52:	b172      	cbz	r2, eaa72 <_strtoul_r+0xf2>
   eaa54:	b106      	cbz	r6, eaa58 <_strtoul_r+0xd8>
   eaa56:	1e69      	subs	r1, r5, #1
   eaa58:	6011      	str	r1, [r2, #0]
   eaa5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   eaa5e:	2430      	movs	r4, #48	; 0x30
   eaa60:	2b00      	cmp	r3, #0
   eaa62:	d1b9      	bne.n	ea9d8 <_strtoul_r+0x58>
   eaa64:	2308      	movs	r3, #8
   eaa66:	e7b7      	b.n	ea9d8 <_strtoul_r+0x58>
   eaa68:	230a      	movs	r3, #10
   eaa6a:	e7b5      	b.n	ea9d8 <_strtoul_r+0x58>
   eaa6c:	2c30      	cmp	r4, #48	; 0x30
   eaa6e:	d0ab      	beq.n	ea9c8 <_strtoul_r+0x48>
   eaa70:	e7b2      	b.n	ea9d8 <_strtoul_r+0x58>
   eaa72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   eaa76:	bf00      	nop
   eaa78:	2003abb8 	.word	0x2003abb8

000eaa7c <strtoul>:
   eaa7c:	4613      	mov	r3, r2
   eaa7e:	460a      	mov	r2, r1
   eaa80:	4601      	mov	r1, r0
   eaa82:	4802      	ldr	r0, [pc, #8]	; (eaa8c <strtoul+0x10>)
   eaa84:	6800      	ldr	r0, [r0, #0]
   eaa86:	f7ff bf7b 	b.w	ea980 <_strtoul_r>
   eaa8a:	bf00      	nop
   eaa8c:	2003ac1c 	.word	0x2003ac1c

000eaa90 <gettimeofday>:
   eaa90:	4b02      	ldr	r3, [pc, #8]	; (eaa9c <gettimeofday+0xc>)
   eaa92:	460a      	mov	r2, r1
   eaa94:	4601      	mov	r1, r0
   eaa96:	6818      	ldr	r0, [r3, #0]
   eaa98:	f000 bd94 	b.w	eb5c4 <_gettimeofday_r>
   eaa9c:	2003ac1c 	.word	0x2003ac1c

000eaaa0 <__tzcalc_limits>:
   eaaa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   eaaa4:	4604      	mov	r4, r0
   eaaa6:	f000 fd9f 	bl	eb5e8 <__gettzinfo>
   eaaaa:	f240 73b1 	movw	r3, #1969	; 0x7b1
   eaaae:	429c      	cmp	r4, r3
   eaab0:	f340 8096 	ble.w	eabe0 <__tzcalc_limits+0x140>
   eaab4:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   eaab8:	18e3      	adds	r3, r4, r3
   eaaba:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   eaabe:	109b      	asrs	r3, r3, #2
   eaac0:	f240 156d 	movw	r5, #365	; 0x16d
   eaac4:	fb05 3502 	mla	r5, r5, r2, r3
   eaac8:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   eaacc:	f06f 0363 	mvn.w	r3, #99	; 0x63
   eaad0:	fb92 f3f3 	sdiv	r3, r2, r3
   eaad4:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   eaad8:	442b      	add	r3, r5
   eaada:	18a5      	adds	r5, r4, r2
   eaadc:	f44f 72c8 	mov.w	r2, #400	; 0x190
   eaae0:	fb95 f5f2 	sdiv	r5, r5, r2
   eaae4:	441d      	add	r5, r3
   eaae6:	2364      	movs	r3, #100	; 0x64
   eaae8:	fb94 f7f2 	sdiv	r7, r4, r2
   eaaec:	fb94 f6f3 	sdiv	r6, r4, r3
   eaaf0:	fb02 4717 	mls	r7, r2, r7, r4
   eaaf4:	fb03 4616 	mls	r6, r3, r6, r4
   eaaf8:	f100 0338 	add.w	r3, r0, #56	; 0x38
   eaafc:	fab7 fe87 	clz	lr, r7
   eab00:	9301      	str	r3, [sp, #4]
   eab02:	f004 0303 	and.w	r3, r4, #3
   eab06:	6044      	str	r4, [r0, #4]
   eab08:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   eab0c:	4601      	mov	r1, r0
   eab0e:	9300      	str	r3, [sp, #0]
   eab10:	f04f 0c07 	mov.w	ip, #7
   eab14:	7a0b      	ldrb	r3, [r1, #8]
   eab16:	2b4a      	cmp	r3, #74	; 0x4a
   eab18:	d10e      	bne.n	eab38 <__tzcalc_limits+0x98>
   eab1a:	694b      	ldr	r3, [r1, #20]
   eab1c:	9a00      	ldr	r2, [sp, #0]
   eab1e:	18ec      	adds	r4, r5, r3
   eab20:	b902      	cbnz	r2, eab24 <__tzcalc_limits+0x84>
   eab22:	b906      	cbnz	r6, eab26 <__tzcalc_limits+0x86>
   eab24:	b927      	cbnz	r7, eab30 <__tzcalc_limits+0x90>
   eab26:	2b3b      	cmp	r3, #59	; 0x3b
   eab28:	bfd4      	ite	le
   eab2a:	2300      	movle	r3, #0
   eab2c:	2301      	movgt	r3, #1
   eab2e:	e000      	b.n	eab32 <__tzcalc_limits+0x92>
   eab30:	2300      	movs	r3, #0
   eab32:	4423      	add	r3, r4
   eab34:	3b01      	subs	r3, #1
   eab36:	e03f      	b.n	eabb8 <__tzcalc_limits+0x118>
   eab38:	2b44      	cmp	r3, #68	; 0x44
   eab3a:	d102      	bne.n	eab42 <__tzcalc_limits+0xa2>
   eab3c:	694b      	ldr	r3, [r1, #20]
   eab3e:	442b      	add	r3, r5
   eab40:	e03a      	b.n	eabb8 <__tzcalc_limits+0x118>
   eab42:	9b00      	ldr	r3, [sp, #0]
   eab44:	b92b      	cbnz	r3, eab52 <__tzcalc_limits+0xb2>
   eab46:	2e00      	cmp	r6, #0
   eab48:	bf0c      	ite	eq
   eab4a:	46f0      	moveq	r8, lr
   eab4c:	f04f 0801 	movne.w	r8, #1
   eab50:	e000      	b.n	eab54 <__tzcalc_limits+0xb4>
   eab52:	46f0      	mov	r8, lr
   eab54:	4b24      	ldr	r3, [pc, #144]	; (eabe8 <__tzcalc_limits+0x148>)
   eab56:	68cc      	ldr	r4, [r1, #12]
   eab58:	2230      	movs	r2, #48	; 0x30
   eab5a:	fb02 3808 	mla	r8, r2, r8, r3
   eab5e:	f1a8 0a04 	sub.w	sl, r8, #4
   eab62:	46a9      	mov	r9, r5
   eab64:	2301      	movs	r3, #1
   eab66:	42a3      	cmp	r3, r4
   eab68:	da04      	bge.n	eab74 <__tzcalc_limits+0xd4>
   eab6a:	f85a bf04 	ldr.w	fp, [sl, #4]!
   eab6e:	3301      	adds	r3, #1
   eab70:	44d9      	add	r9, fp
   eab72:	e7f8      	b.n	eab66 <__tzcalc_limits+0xc6>
   eab74:	f109 0304 	add.w	r3, r9, #4
   eab78:	fb93 fbfc 	sdiv	fp, r3, ip
   eab7c:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   eab80:	2c01      	cmp	r4, #1
   eab82:	ebca 0a03 	rsb	sl, sl, r3
   eab86:	694b      	ldr	r3, [r1, #20]
   eab88:	bfb8      	it	lt
   eab8a:	2401      	movlt	r4, #1
   eab8c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   eab90:	ebb3 0a0a 	subs.w	sl, r3, sl
   eab94:	690b      	ldr	r3, [r1, #16]
   eab96:	f104 34ff 	add.w	r4, r4, #4294967295
   eab9a:	f103 33ff 	add.w	r3, r3, #4294967295
   eab9e:	bf48      	it	mi
   eaba0:	f10a 0a07 	addmi.w	sl, sl, #7
   eaba4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   eaba8:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   eabac:	4453      	add	r3, sl
   eabae:	42a3      	cmp	r3, r4
   eabb0:	db01      	blt.n	eabb6 <__tzcalc_limits+0x116>
   eabb2:	3b07      	subs	r3, #7
   eabb4:	e7fb      	b.n	eabae <__tzcalc_limits+0x10e>
   eabb6:	444b      	add	r3, r9
   eabb8:	698c      	ldr	r4, [r1, #24]
   eabba:	4a0c      	ldr	r2, [pc, #48]	; (eabec <__tzcalc_limits+0x14c>)
   eabbc:	fb02 4303 	mla	r3, r2, r3, r4
   eabc0:	6a0c      	ldr	r4, [r1, #32]
   eabc2:	4423      	add	r3, r4
   eabc4:	f841 3f1c 	str.w	r3, [r1, #28]!
   eabc8:	9b01      	ldr	r3, [sp, #4]
   eabca:	4299      	cmp	r1, r3
   eabcc:	d1a2      	bne.n	eab14 <__tzcalc_limits+0x74>
   eabce:	69c3      	ldr	r3, [r0, #28]
   eabd0:	6b82      	ldr	r2, [r0, #56]	; 0x38
   eabd2:	4293      	cmp	r3, r2
   eabd4:	bfac      	ite	ge
   eabd6:	2300      	movge	r3, #0
   eabd8:	2301      	movlt	r3, #1
   eabda:	6003      	str	r3, [r0, #0]
   eabdc:	2001      	movs	r0, #1
   eabde:	e000      	b.n	eabe2 <__tzcalc_limits+0x142>
   eabe0:	2000      	movs	r0, #0
   eabe2:	b003      	add	sp, #12
   eabe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   eabe8:	000ef85c 	.word	0x000ef85c
   eabec:	00015180 	.word	0x00015180

000eabf0 <__tz_lock>:
   eabf0:	4770      	bx	lr

000eabf2 <__tz_unlock>:
   eabf2:	4770      	bx	lr

000eabf4 <_tzset_unlocked>:
   eabf4:	4b01      	ldr	r3, [pc, #4]	; (eabfc <_tzset_unlocked+0x8>)
   eabf6:	6818      	ldr	r0, [r3, #0]
   eabf8:	f000 b802 	b.w	eac00 <_tzset_unlocked_r>
   eabfc:	2003ac1c 	.word	0x2003ac1c

000eac00 <_tzset_unlocked_r>:
   eac00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   eac04:	b08d      	sub	sp, #52	; 0x34
   eac06:	4607      	mov	r7, r0
   eac08:	f000 fcee 	bl	eb5e8 <__gettzinfo>
   eac0c:	49b0      	ldr	r1, [pc, #704]	; (eaed0 <_tzset_unlocked_r+0x2d0>)
   eac0e:	4eb1      	ldr	r6, [pc, #708]	; (eaed4 <_tzset_unlocked_r+0x2d4>)
   eac10:	4604      	mov	r4, r0
   eac12:	4638      	mov	r0, r7
   eac14:	f000 fcce 	bl	eb5b4 <_getenv_r>
   eac18:	4605      	mov	r5, r0
   eac1a:	b960      	cbnz	r0, eac36 <_tzset_unlocked_r+0x36>
   eac1c:	4bae      	ldr	r3, [pc, #696]	; (eaed8 <_tzset_unlocked_r+0x2d8>)
   eac1e:	4aaf      	ldr	r2, [pc, #700]	; (eaedc <_tzset_unlocked_r+0x2dc>)
   eac20:	6018      	str	r0, [r3, #0]
   eac22:	4baf      	ldr	r3, [pc, #700]	; (eaee0 <_tzset_unlocked_r+0x2e0>)
   eac24:	6018      	str	r0, [r3, #0]
   eac26:	4baf      	ldr	r3, [pc, #700]	; (eaee4 <_tzset_unlocked_r+0x2e4>)
   eac28:	6830      	ldr	r0, [r6, #0]
   eac2a:	601a      	str	r2, [r3, #0]
   eac2c:	605a      	str	r2, [r3, #4]
   eac2e:	f7fb fa49 	bl	e60c4 <free>
   eac32:	6035      	str	r5, [r6, #0]
   eac34:	e148      	b.n	eaec8 <_tzset_unlocked_r+0x2c8>
   eac36:	6831      	ldr	r1, [r6, #0]
   eac38:	b979      	cbnz	r1, eac5a <_tzset_unlocked_r+0x5a>
   eac3a:	6830      	ldr	r0, [r6, #0]
   eac3c:	f7fb fa42 	bl	e60c4 <free>
   eac40:	4628      	mov	r0, r5
   eac42:	f7fe ffaf 	bl	e9ba4 <strlen>
   eac46:	1c41      	adds	r1, r0, #1
   eac48:	4638      	mov	r0, r7
   eac4a:	f7fb fa73 	bl	e6134 <_malloc_r>
   eac4e:	6030      	str	r0, [r6, #0]
   eac50:	b148      	cbz	r0, eac66 <_tzset_unlocked_r+0x66>
   eac52:	4629      	mov	r1, r5
   eac54:	f7fe ff9e 	bl	e9b94 <strcpy>
   eac58:	e005      	b.n	eac66 <_tzset_unlocked_r+0x66>
   eac5a:	f7fe ff91 	bl	e9b80 <strcmp>
   eac5e:	2800      	cmp	r0, #0
   eac60:	f000 8132 	beq.w	eaec8 <_tzset_unlocked_r+0x2c8>
   eac64:	e7e9      	b.n	eac3a <_tzset_unlocked_r+0x3a>
   eac66:	782b      	ldrb	r3, [r5, #0]
   eac68:	4a9f      	ldr	r2, [pc, #636]	; (eaee8 <_tzset_unlocked_r+0x2e8>)
   eac6a:	49a0      	ldr	r1, [pc, #640]	; (eaeec <_tzset_unlocked_r+0x2ec>)
   eac6c:	2b3a      	cmp	r3, #58	; 0x3a
   eac6e:	bf08      	it	eq
   eac70:	3501      	addeq	r5, #1
   eac72:	ae0a      	add	r6, sp, #40	; 0x28
   eac74:	4633      	mov	r3, r6
   eac76:	4628      	mov	r0, r5
   eac78:	f7fb fa44 	bl	e6104 <siscanf>
   eac7c:	2800      	cmp	r0, #0
   eac7e:	f340 8123 	ble.w	eaec8 <_tzset_unlocked_r+0x2c8>
   eac82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   eac84:	18ef      	adds	r7, r5, r3
   eac86:	5ceb      	ldrb	r3, [r5, r3]
   eac88:	2b2d      	cmp	r3, #45	; 0x2d
   eac8a:	d103      	bne.n	eac94 <_tzset_unlocked_r+0x94>
   eac8c:	3701      	adds	r7, #1
   eac8e:	f04f 35ff 	mov.w	r5, #4294967295
   eac92:	e003      	b.n	eac9c <_tzset_unlocked_r+0x9c>
   eac94:	2b2b      	cmp	r3, #43	; 0x2b
   eac96:	bf08      	it	eq
   eac98:	3701      	addeq	r7, #1
   eac9a:	2501      	movs	r5, #1
   eac9c:	f10d 0a20 	add.w	sl, sp, #32
   eaca0:	f10d 0b1e 	add.w	fp, sp, #30
   eaca4:	f04f 0800 	mov.w	r8, #0
   eaca8:	9603      	str	r6, [sp, #12]
   eacaa:	f8cd a008 	str.w	sl, [sp, #8]
   eacae:	9601      	str	r6, [sp, #4]
   eacb0:	f8cd b000 	str.w	fp, [sp]
   eacb4:	4633      	mov	r3, r6
   eacb6:	aa07      	add	r2, sp, #28
   eacb8:	498d      	ldr	r1, [pc, #564]	; (eaef0 <_tzset_unlocked_r+0x2f0>)
   eacba:	f8ad 801e 	strh.w	r8, [sp, #30]
   eacbe:	4638      	mov	r0, r7
   eacc0:	f8ad 8020 	strh.w	r8, [sp, #32]
   eacc4:	f7fb fa1e 	bl	e6104 <siscanf>
   eacc8:	4540      	cmp	r0, r8
   eacca:	f340 80fd 	ble.w	eaec8 <_tzset_unlocked_r+0x2c8>
   eacce:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   eacd2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   eacd6:	f8df 9224 	ldr.w	r9, [pc, #548]	; eaefc <_tzset_unlocked_r+0x2fc>
   eacda:	213c      	movs	r1, #60	; 0x3c
   eacdc:	fb01 3302 	mla	r3, r1, r2, r3
   eace0:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   eace4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   eace8:	fb01 3302 	mla	r3, r1, r2, r3
   eacec:	435d      	muls	r5, r3
   eacee:	6225      	str	r5, [r4, #32]
   eacf0:	4d7c      	ldr	r5, [pc, #496]	; (eaee4 <_tzset_unlocked_r+0x2e4>)
   eacf2:	4b7d      	ldr	r3, [pc, #500]	; (eaee8 <_tzset_unlocked_r+0x2e8>)
   eacf4:	602b      	str	r3, [r5, #0]
   eacf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   eacf8:	497c      	ldr	r1, [pc, #496]	; (eaeec <_tzset_unlocked_r+0x2ec>)
   eacfa:	441f      	add	r7, r3
   eacfc:	464a      	mov	r2, r9
   eacfe:	4633      	mov	r3, r6
   ead00:	4638      	mov	r0, r7
   ead02:	f7fb f9ff 	bl	e6104 <siscanf>
   ead06:	4540      	cmp	r0, r8
   ead08:	dc08      	bgt.n	ead1c <_tzset_unlocked_r+0x11c>
   ead0a:	682b      	ldr	r3, [r5, #0]
   ead0c:	606b      	str	r3, [r5, #4]
   ead0e:	4b72      	ldr	r3, [pc, #456]	; (eaed8 <_tzset_unlocked_r+0x2d8>)
   ead10:	6a22      	ldr	r2, [r4, #32]
   ead12:	601a      	str	r2, [r3, #0]
   ead14:	4b72      	ldr	r3, [pc, #456]	; (eaee0 <_tzset_unlocked_r+0x2e0>)
   ead16:	f8c3 8000 	str.w	r8, [r3]
   ead1a:	e0d5      	b.n	eaec8 <_tzset_unlocked_r+0x2c8>
   ead1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   ead1e:	f8c5 9004 	str.w	r9, [r5, #4]
   ead22:	18fd      	adds	r5, r7, r3
   ead24:	5cfb      	ldrb	r3, [r7, r3]
   ead26:	2b2d      	cmp	r3, #45	; 0x2d
   ead28:	d103      	bne.n	ead32 <_tzset_unlocked_r+0x132>
   ead2a:	3501      	adds	r5, #1
   ead2c:	f04f 37ff 	mov.w	r7, #4294967295
   ead30:	e003      	b.n	ead3a <_tzset_unlocked_r+0x13a>
   ead32:	2b2b      	cmp	r3, #43	; 0x2b
   ead34:	bf08      	it	eq
   ead36:	3501      	addeq	r5, #1
   ead38:	2701      	movs	r7, #1
   ead3a:	2300      	movs	r3, #0
   ead3c:	f8ad 301c 	strh.w	r3, [sp, #28]
   ead40:	f8ad 301e 	strh.w	r3, [sp, #30]
   ead44:	f8ad 3020 	strh.w	r3, [sp, #32]
   ead48:	930a      	str	r3, [sp, #40]	; 0x28
   ead4a:	9603      	str	r6, [sp, #12]
   ead4c:	f8cd a008 	str.w	sl, [sp, #8]
   ead50:	9601      	str	r6, [sp, #4]
   ead52:	f8cd b000 	str.w	fp, [sp]
   ead56:	4633      	mov	r3, r6
   ead58:	aa07      	add	r2, sp, #28
   ead5a:	4965      	ldr	r1, [pc, #404]	; (eaef0 <_tzset_unlocked_r+0x2f0>)
   ead5c:	4628      	mov	r0, r5
   ead5e:	f7fb f9d1 	bl	e6104 <siscanf>
   ead62:	2800      	cmp	r0, #0
   ead64:	dc04      	bgt.n	ead70 <_tzset_unlocked_r+0x170>
   ead66:	6a23      	ldr	r3, [r4, #32]
   ead68:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   ead6c:	63e3      	str	r3, [r4, #60]	; 0x3c
   ead6e:	e00e      	b.n	ead8e <_tzset_unlocked_r+0x18e>
   ead70:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   ead74:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   ead78:	213c      	movs	r1, #60	; 0x3c
   ead7a:	fb01 3302 	mla	r3, r1, r2, r3
   ead7e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   ead82:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   ead86:	fb01 3302 	mla	r3, r1, r2, r3
   ead8a:	435f      	muls	r7, r3
   ead8c:	63e7      	str	r7, [r4, #60]	; 0x3c
   ead8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   ead90:	4627      	mov	r7, r4
   ead92:	441d      	add	r5, r3
   ead94:	f04f 0900 	mov.w	r9, #0
   ead98:	782b      	ldrb	r3, [r5, #0]
   ead9a:	2b2c      	cmp	r3, #44	; 0x2c
   ead9c:	bf08      	it	eq
   ead9e:	3501      	addeq	r5, #1
   eada0:	f895 8000 	ldrb.w	r8, [r5]
   eada4:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   eada8:	d126      	bne.n	eadf8 <_tzset_unlocked_r+0x1f8>
   eadaa:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   eadae:	9302      	str	r3, [sp, #8]
   eadb0:	ab09      	add	r3, sp, #36	; 0x24
   eadb2:	9300      	str	r3, [sp, #0]
   eadb4:	9603      	str	r6, [sp, #12]
   eadb6:	9601      	str	r6, [sp, #4]
   eadb8:	4633      	mov	r3, r6
   eadba:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   eadbe:	494d      	ldr	r1, [pc, #308]	; (eaef4 <_tzset_unlocked_r+0x2f4>)
   eadc0:	4628      	mov	r0, r5
   eadc2:	f7fb f99f 	bl	e6104 <siscanf>
   eadc6:	2803      	cmp	r0, #3
   eadc8:	d17e      	bne.n	eaec8 <_tzset_unlocked_r+0x2c8>
   eadca:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   eadce:	1e4b      	subs	r3, r1, #1
   eadd0:	2b0b      	cmp	r3, #11
   eadd2:	d879      	bhi.n	eaec8 <_tzset_unlocked_r+0x2c8>
   eadd4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   eadd8:	1e53      	subs	r3, r2, #1
   eadda:	2b04      	cmp	r3, #4
   eaddc:	d874      	bhi.n	eaec8 <_tzset_unlocked_r+0x2c8>
   eadde:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   eade2:	2b06      	cmp	r3, #6
   eade4:	d870      	bhi.n	eaec8 <_tzset_unlocked_r+0x2c8>
   eade6:	f887 8008 	strb.w	r8, [r7, #8]
   eadea:	60f9      	str	r1, [r7, #12]
   eadec:	613a      	str	r2, [r7, #16]
   eadee:	617b      	str	r3, [r7, #20]
   eadf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   eadf2:	eb05 0803 	add.w	r8, r5, r3
   eadf6:	e02a      	b.n	eae4e <_tzset_unlocked_r+0x24e>
   eadf8:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   eadfc:	bf06      	itte	eq
   eadfe:	3501      	addeq	r5, #1
   eae00:	4643      	moveq	r3, r8
   eae02:	2344      	movne	r3, #68	; 0x44
   eae04:	220a      	movs	r2, #10
   eae06:	a90b      	add	r1, sp, #44	; 0x2c
   eae08:	4628      	mov	r0, r5
   eae0a:	9305      	str	r3, [sp, #20]
   eae0c:	f7ff fe36 	bl	eaa7c <strtoul>
   eae10:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   eae14:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   eae18:	4545      	cmp	r5, r8
   eae1a:	9b05      	ldr	r3, [sp, #20]
   eae1c:	d114      	bne.n	eae48 <_tzset_unlocked_r+0x248>
   eae1e:	234d      	movs	r3, #77	; 0x4d
   eae20:	f1b9 0f00 	cmp.w	r9, #0
   eae24:	d107      	bne.n	eae36 <_tzset_unlocked_r+0x236>
   eae26:	7223      	strb	r3, [r4, #8]
   eae28:	2303      	movs	r3, #3
   eae2a:	60e3      	str	r3, [r4, #12]
   eae2c:	2302      	movs	r3, #2
   eae2e:	6123      	str	r3, [r4, #16]
   eae30:	f8c4 9014 	str.w	r9, [r4, #20]
   eae34:	e00b      	b.n	eae4e <_tzset_unlocked_r+0x24e>
   eae36:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   eae3a:	230b      	movs	r3, #11
   eae3c:	62a3      	str	r3, [r4, #40]	; 0x28
   eae3e:	2301      	movs	r3, #1
   eae40:	62e3      	str	r3, [r4, #44]	; 0x2c
   eae42:	2300      	movs	r3, #0
   eae44:	6323      	str	r3, [r4, #48]	; 0x30
   eae46:	e002      	b.n	eae4e <_tzset_unlocked_r+0x24e>
   eae48:	b280      	uxth	r0, r0
   eae4a:	723b      	strb	r3, [r7, #8]
   eae4c:	6178      	str	r0, [r7, #20]
   eae4e:	2302      	movs	r3, #2
   eae50:	f8ad 301c 	strh.w	r3, [sp, #28]
   eae54:	2300      	movs	r3, #0
   eae56:	f8ad 301e 	strh.w	r3, [sp, #30]
   eae5a:	f8ad 3020 	strh.w	r3, [sp, #32]
   eae5e:	930a      	str	r3, [sp, #40]	; 0x28
   eae60:	f898 3000 	ldrb.w	r3, [r8]
   eae64:	2b2f      	cmp	r3, #47	; 0x2f
   eae66:	d10b      	bne.n	eae80 <_tzset_unlocked_r+0x280>
   eae68:	9603      	str	r6, [sp, #12]
   eae6a:	f8cd a008 	str.w	sl, [sp, #8]
   eae6e:	9601      	str	r6, [sp, #4]
   eae70:	f8cd b000 	str.w	fp, [sp]
   eae74:	4633      	mov	r3, r6
   eae76:	aa07      	add	r2, sp, #28
   eae78:	491f      	ldr	r1, [pc, #124]	; (eaef8 <_tzset_unlocked_r+0x2f8>)
   eae7a:	4640      	mov	r0, r8
   eae7c:	f7fb f942 	bl	e6104 <siscanf>
   eae80:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   eae84:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   eae88:	213c      	movs	r1, #60	; 0x3c
   eae8a:	fb01 3302 	mla	r3, r1, r2, r3
   eae8e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   eae92:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   eae96:	fb01 3302 	mla	r3, r1, r2, r3
   eae9a:	61bb      	str	r3, [r7, #24]
   eae9c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   eae9e:	f109 0901 	add.w	r9, r9, #1
   eaea2:	f1b9 0f02 	cmp.w	r9, #2
   eaea6:	4445      	add	r5, r8
   eaea8:	f107 071c 	add.w	r7, r7, #28
   eaeac:	f47f af74 	bne.w	ead98 <_tzset_unlocked_r+0x198>
   eaeb0:	6860      	ldr	r0, [r4, #4]
   eaeb2:	f7ff fdf5 	bl	eaaa0 <__tzcalc_limits>
   eaeb6:	4b08      	ldr	r3, [pc, #32]	; (eaed8 <_tzset_unlocked_r+0x2d8>)
   eaeb8:	6a22      	ldr	r2, [r4, #32]
   eaeba:	601a      	str	r2, [r3, #0]
   eaebc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   eaebe:	1a9b      	subs	r3, r3, r2
   eaec0:	4a07      	ldr	r2, [pc, #28]	; (eaee0 <_tzset_unlocked_r+0x2e0>)
   eaec2:	bf18      	it	ne
   eaec4:	2301      	movne	r3, #1
   eaec6:	6013      	str	r3, [r2, #0]
   eaec8:	b00d      	add	sp, #52	; 0x34
   eaeca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   eaece:	bf00      	nop
   eaed0:	000ef918 	.word	0x000ef918
   eaed4:	2003e7e0 	.word	0x2003e7e0
   eaed8:	2003e7e8 	.word	0x2003e7e8
   eaedc:	000ef662 	.word	0x000ef662
   eaee0:	2003e7e4 	.word	0x2003e7e4
   eaee4:	2003ac58 	.word	0x2003ac58
   eaee8:	2003e7d3 	.word	0x2003e7d3
   eaeec:	000ef91b 	.word	0x000ef91b
   eaef0:	000ef93e 	.word	0x000ef93e
   eaef4:	000ef92a 	.word	0x000ef92a
   eaef8:	000ef93d 	.word	0x000ef93d
   eaefc:	2003e7c8 	.word	0x2003e7c8

000eaf00 <rshift>:
   eaf00:	b5f0      	push	{r4, r5, r6, r7, lr}
   eaf02:	6906      	ldr	r6, [r0, #16]
   eaf04:	114b      	asrs	r3, r1, #5
   eaf06:	42b3      	cmp	r3, r6
   eaf08:	f100 0514 	add.w	r5, r0, #20
   eaf0c:	da27      	bge.n	eaf5e <rshift+0x5e>
   eaf0e:	f011 011f 	ands.w	r1, r1, #31
   eaf12:	eb05 0686 	add.w	r6, r5, r6, lsl #2
   eaf16:	eb05 0283 	add.w	r2, r5, r3, lsl #2
   eaf1a:	d101      	bne.n	eaf20 <rshift+0x20>
   eaf1c:	4629      	mov	r1, r5
   eaf1e:	e016      	b.n	eaf4e <rshift+0x4e>
   eaf20:	1d14      	adds	r4, r2, #4
   eaf22:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   eaf26:	f1c1 0e20 	rsb	lr, r1, #32
   eaf2a:	40ca      	lsrs	r2, r1
   eaf2c:	462b      	mov	r3, r5
   eaf2e:	42b4      	cmp	r4, r6
   eaf30:	d209      	bcs.n	eaf46 <rshift+0x46>
   eaf32:	6827      	ldr	r7, [r4, #0]
   eaf34:	fa07 f70e 	lsl.w	r7, r7, lr
   eaf38:	433a      	orrs	r2, r7
   eaf3a:	f843 2b04 	str.w	r2, [r3], #4
   eaf3e:	f854 2b04 	ldr.w	r2, [r4], #4
   eaf42:	40ca      	lsrs	r2, r1
   eaf44:	e7f3      	b.n	eaf2e <rshift+0x2e>
   eaf46:	601a      	str	r2, [r3, #0]
   eaf48:	b152      	cbz	r2, eaf60 <rshift+0x60>
   eaf4a:	3304      	adds	r3, #4
   eaf4c:	e008      	b.n	eaf60 <rshift+0x60>
   eaf4e:	42b2      	cmp	r2, r6
   eaf50:	460b      	mov	r3, r1
   eaf52:	d205      	bcs.n	eaf60 <rshift+0x60>
   eaf54:	f852 3b04 	ldr.w	r3, [r2], #4
   eaf58:	f841 3b04 	str.w	r3, [r1], #4
   eaf5c:	e7f7      	b.n	eaf4e <rshift+0x4e>
   eaf5e:	462b      	mov	r3, r5
   eaf60:	1b5b      	subs	r3, r3, r5
   eaf62:	109b      	asrs	r3, r3, #2
   eaf64:	6103      	str	r3, [r0, #16]
   eaf66:	b903      	cbnz	r3, eaf6a <rshift+0x6a>
   eaf68:	6143      	str	r3, [r0, #20]
   eaf6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000eaf6c <__hexdig_fun>:
   eaf6c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   eaf70:	2b09      	cmp	r3, #9
   eaf72:	d801      	bhi.n	eaf78 <__hexdig_fun+0xc>
   eaf74:	3820      	subs	r0, #32
   eaf76:	e00a      	b.n	eaf8e <__hexdig_fun+0x22>
   eaf78:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   eaf7c:	2b05      	cmp	r3, #5
   eaf7e:	d801      	bhi.n	eaf84 <__hexdig_fun+0x18>
   eaf80:	3847      	subs	r0, #71	; 0x47
   eaf82:	e004      	b.n	eaf8e <__hexdig_fun+0x22>
   eaf84:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   eaf88:	2b05      	cmp	r3, #5
   eaf8a:	d802      	bhi.n	eaf92 <__hexdig_fun+0x26>
   eaf8c:	3827      	subs	r0, #39	; 0x27
   eaf8e:	b2c0      	uxtb	r0, r0
   eaf90:	4770      	bx	lr
   eaf92:	2000      	movs	r0, #0
   eaf94:	4770      	bx	lr

000eaf96 <__gethex>:
   eaf96:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   eaf9a:	b08b      	sub	sp, #44	; 0x2c
   eaf9c:	468a      	mov	sl, r1
   eaf9e:	4690      	mov	r8, r2
   eafa0:	9306      	str	r3, [sp, #24]
   eafa2:	9002      	str	r0, [sp, #8]
   eafa4:	f7fe fd74 	bl	e9a90 <_localeconv_r>
   eafa8:	6803      	ldr	r3, [r0, #0]
   eafaa:	9303      	str	r3, [sp, #12]
   eafac:	4618      	mov	r0, r3
   eafae:	f7fe fdf9 	bl	e9ba4 <strlen>
   eafb2:	9b03      	ldr	r3, [sp, #12]
   eafb4:	9001      	str	r0, [sp, #4]
   eafb6:	4403      	add	r3, r0
   eafb8:	f04f 0b00 	mov.w	fp, #0
   eafbc:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   eafc0:	9307      	str	r3, [sp, #28]
   eafc2:	f8da 3000 	ldr.w	r3, [sl]
   eafc6:	3302      	adds	r3, #2
   eafc8:	461f      	mov	r7, r3
   eafca:	f813 0b01 	ldrb.w	r0, [r3], #1
   eafce:	2830      	cmp	r0, #48	; 0x30
   eafd0:	d102      	bne.n	eafd8 <__gethex+0x42>
   eafd2:	f10b 0b01 	add.w	fp, fp, #1
   eafd6:	e7f7      	b.n	eafc8 <__gethex+0x32>
   eafd8:	f7ff ffc8 	bl	eaf6c <__hexdig_fun>
   eafdc:	4604      	mov	r4, r0
   eafde:	b9e0      	cbnz	r0, eb01a <__gethex+0x84>
   eafe0:	9a01      	ldr	r2, [sp, #4]
   eafe2:	9903      	ldr	r1, [sp, #12]
   eafe4:	4638      	mov	r0, r7
   eafe6:	f7fe fde5 	bl	e9bb4 <strncmp>
   eafea:	2800      	cmp	r0, #0
   eafec:	d134      	bne.n	eb058 <__gethex+0xc2>
   eafee:	9b01      	ldr	r3, [sp, #4]
   eaff0:	5cf8      	ldrb	r0, [r7, r3]
   eaff2:	18fe      	adds	r6, r7, r3
   eaff4:	f7ff ffba 	bl	eaf6c <__hexdig_fun>
   eaff8:	b380      	cbz	r0, eb05c <__gethex+0xc6>
   eaffa:	4633      	mov	r3, r6
   eaffc:	7818      	ldrb	r0, [r3, #0]
   eaffe:	2830      	cmp	r0, #48	; 0x30
   eb000:	461f      	mov	r7, r3
   eb002:	f103 0301 	add.w	r3, r3, #1
   eb006:	d0f9      	beq.n	eaffc <__gethex+0x66>
   eb008:	f7ff ffb0 	bl	eaf6c <__hexdig_fun>
   eb00c:	fab0 f580 	clz	r5, r0
   eb010:	096d      	lsrs	r5, r5, #5
   eb012:	4634      	mov	r4, r6
   eb014:	f04f 0b01 	mov.w	fp, #1
   eb018:	e001      	b.n	eb01e <__gethex+0x88>
   eb01a:	2500      	movs	r5, #0
   eb01c:	462c      	mov	r4, r5
   eb01e:	463a      	mov	r2, r7
   eb020:	4616      	mov	r6, r2
   eb022:	3201      	adds	r2, #1
   eb024:	7830      	ldrb	r0, [r6, #0]
   eb026:	f7ff ffa1 	bl	eaf6c <__hexdig_fun>
   eb02a:	2800      	cmp	r0, #0
   eb02c:	d1f8      	bne.n	eb020 <__gethex+0x8a>
   eb02e:	9a01      	ldr	r2, [sp, #4]
   eb030:	9903      	ldr	r1, [sp, #12]
   eb032:	4630      	mov	r0, r6
   eb034:	f7fe fdbe 	bl	e9bb4 <strncmp>
   eb038:	b950      	cbnz	r0, eb050 <__gethex+0xba>
   eb03a:	b954      	cbnz	r4, eb052 <__gethex+0xbc>
   eb03c:	9b01      	ldr	r3, [sp, #4]
   eb03e:	18f4      	adds	r4, r6, r3
   eb040:	4622      	mov	r2, r4
   eb042:	4616      	mov	r6, r2
   eb044:	3201      	adds	r2, #1
   eb046:	7830      	ldrb	r0, [r6, #0]
   eb048:	f7ff ff90 	bl	eaf6c <__hexdig_fun>
   eb04c:	2800      	cmp	r0, #0
   eb04e:	d1f8      	bne.n	eb042 <__gethex+0xac>
   eb050:	b134      	cbz	r4, eb060 <__gethex+0xca>
   eb052:	1ba4      	subs	r4, r4, r6
   eb054:	00a4      	lsls	r4, r4, #2
   eb056:	e003      	b.n	eb060 <__gethex+0xca>
   eb058:	463e      	mov	r6, r7
   eb05a:	e000      	b.n	eb05e <__gethex+0xc8>
   eb05c:	4604      	mov	r4, r0
   eb05e:	2501      	movs	r5, #1
   eb060:	7833      	ldrb	r3, [r6, #0]
   eb062:	2b50      	cmp	r3, #80	; 0x50
   eb064:	d001      	beq.n	eb06a <__gethex+0xd4>
   eb066:	2b70      	cmp	r3, #112	; 0x70
   eb068:	d12a      	bne.n	eb0c0 <__gethex+0x12a>
   eb06a:	7873      	ldrb	r3, [r6, #1]
   eb06c:	2b2b      	cmp	r3, #43	; 0x2b
   eb06e:	d008      	beq.n	eb082 <__gethex+0xec>
   eb070:	2b2d      	cmp	r3, #45	; 0x2d
   eb072:	d003      	beq.n	eb07c <__gethex+0xe6>
   eb074:	1c71      	adds	r1, r6, #1
   eb076:	f04f 0900 	mov.w	r9, #0
   eb07a:	e005      	b.n	eb088 <__gethex+0xf2>
   eb07c:	f04f 0901 	mov.w	r9, #1
   eb080:	e001      	b.n	eb086 <__gethex+0xf0>
   eb082:	f04f 0900 	mov.w	r9, #0
   eb086:	1cb1      	adds	r1, r6, #2
   eb088:	7808      	ldrb	r0, [r1, #0]
   eb08a:	f7ff ff6f 	bl	eaf6c <__hexdig_fun>
   eb08e:	1e43      	subs	r3, r0, #1
   eb090:	b2db      	uxtb	r3, r3
   eb092:	2b18      	cmp	r3, #24
   eb094:	d814      	bhi.n	eb0c0 <__gethex+0x12a>
   eb096:	f1a0 0210 	sub.w	r2, r0, #16
   eb09a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   eb09e:	f7ff ff65 	bl	eaf6c <__hexdig_fun>
   eb0a2:	1e43      	subs	r3, r0, #1
   eb0a4:	b2db      	uxtb	r3, r3
   eb0a6:	2b18      	cmp	r3, #24
   eb0a8:	d804      	bhi.n	eb0b4 <__gethex+0x11e>
   eb0aa:	230a      	movs	r3, #10
   eb0ac:	fb03 0202 	mla	r2, r3, r2, r0
   eb0b0:	3a10      	subs	r2, #16
   eb0b2:	e7f2      	b.n	eb09a <__gethex+0x104>
   eb0b4:	f1b9 0f00 	cmp.w	r9, #0
   eb0b8:	d000      	beq.n	eb0bc <__gethex+0x126>
   eb0ba:	4252      	negs	r2, r2
   eb0bc:	4414      	add	r4, r2
   eb0be:	e000      	b.n	eb0c2 <__gethex+0x12c>
   eb0c0:	4631      	mov	r1, r6
   eb0c2:	f8ca 1000 	str.w	r1, [sl]
   eb0c6:	b12d      	cbz	r5, eb0d4 <__gethex+0x13e>
   eb0c8:	f1bb 0f00 	cmp.w	fp, #0
   eb0cc:	bf14      	ite	ne
   eb0ce:	2000      	movne	r0, #0
   eb0d0:	2006      	moveq	r0, #6
   eb0d2:	e17c      	b.n	eb3ce <__gethex+0x438>
   eb0d4:	1bf3      	subs	r3, r6, r7
   eb0d6:	3b01      	subs	r3, #1
   eb0d8:	4629      	mov	r1, r5
   eb0da:	2b07      	cmp	r3, #7
   eb0dc:	dd02      	ble.n	eb0e4 <__gethex+0x14e>
   eb0de:	3101      	adds	r1, #1
   eb0e0:	105b      	asrs	r3, r3, #1
   eb0e2:	e7fa      	b.n	eb0da <__gethex+0x144>
   eb0e4:	9802      	ldr	r0, [sp, #8]
   eb0e6:	f000 fb1b 	bl	eb720 <_Balloc>
   eb0ea:	9b01      	ldr	r3, [sp, #4]
   eb0ec:	f100 0a14 	add.w	sl, r0, #20
   eb0f0:	f04f 0900 	mov.w	r9, #0
   eb0f4:	f1c3 0301 	rsb	r3, r3, #1
   eb0f8:	4605      	mov	r5, r0
   eb0fa:	f8cd a010 	str.w	sl, [sp, #16]
   eb0fe:	46cb      	mov	fp, r9
   eb100:	9308      	str	r3, [sp, #32]
   eb102:	42b7      	cmp	r7, r6
   eb104:	d22f      	bcs.n	eb166 <__gethex+0x1d0>
   eb106:	1e73      	subs	r3, r6, #1
   eb108:	9305      	str	r3, [sp, #20]
   eb10a:	9a07      	ldr	r2, [sp, #28]
   eb10c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   eb110:	4293      	cmp	r3, r2
   eb112:	d00b      	beq.n	eb12c <__gethex+0x196>
   eb114:	f1bb 0f20 	cmp.w	fp, #32
   eb118:	d116      	bne.n	eb148 <__gethex+0x1b2>
   eb11a:	9b04      	ldr	r3, [sp, #16]
   eb11c:	f8c3 9000 	str.w	r9, [r3]
   eb120:	3304      	adds	r3, #4
   eb122:	f04f 0900 	mov.w	r9, #0
   eb126:	9304      	str	r3, [sp, #16]
   eb128:	46cb      	mov	fp, r9
   eb12a:	e00d      	b.n	eb148 <__gethex+0x1b2>
   eb12c:	9b05      	ldr	r3, [sp, #20]
   eb12e:	9a08      	ldr	r2, [sp, #32]
   eb130:	4413      	add	r3, r2
   eb132:	429f      	cmp	r7, r3
   eb134:	d8ee      	bhi.n	eb114 <__gethex+0x17e>
   eb136:	4618      	mov	r0, r3
   eb138:	9a01      	ldr	r2, [sp, #4]
   eb13a:	9903      	ldr	r1, [sp, #12]
   eb13c:	9309      	str	r3, [sp, #36]	; 0x24
   eb13e:	f7fe fd39 	bl	e9bb4 <strncmp>
   eb142:	9b09      	ldr	r3, [sp, #36]	; 0x24
   eb144:	b168      	cbz	r0, eb162 <__gethex+0x1cc>
   eb146:	e7e5      	b.n	eb114 <__gethex+0x17e>
   eb148:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   eb14c:	f7ff ff0e 	bl	eaf6c <__hexdig_fun>
   eb150:	f000 000f 	and.w	r0, r0, #15
   eb154:	fa00 f00b 	lsl.w	r0, r0, fp
   eb158:	9b05      	ldr	r3, [sp, #20]
   eb15a:	ea49 0900 	orr.w	r9, r9, r0
   eb15e:	f10b 0b04 	add.w	fp, fp, #4
   eb162:	461e      	mov	r6, r3
   eb164:	e7cd      	b.n	eb102 <__gethex+0x16c>
   eb166:	9804      	ldr	r0, [sp, #16]
   eb168:	f840 9b04 	str.w	r9, [r0], #4
   eb16c:	ebca 0000 	rsb	r0, sl, r0
   eb170:	1080      	asrs	r0, r0, #2
   eb172:	6128      	str	r0, [r5, #16]
   eb174:	0147      	lsls	r7, r0, #5
   eb176:	4648      	mov	r0, r9
   eb178:	f000 fb97 	bl	eb8aa <__hi0bits>
   eb17c:	f8d8 6000 	ldr.w	r6, [r8]
   eb180:	1a38      	subs	r0, r7, r0
   eb182:	42b0      	cmp	r0, r6
   eb184:	dd26      	ble.n	eb1d4 <__gethex+0x23e>
   eb186:	1b87      	subs	r7, r0, r6
   eb188:	4639      	mov	r1, r7
   eb18a:	4628      	mov	r0, r5
   eb18c:	f000 fe95 	bl	ebeba <__any_on>
   eb190:	b1c8      	cbz	r0, eb1c6 <__gethex+0x230>
   eb192:	1e7b      	subs	r3, r7, #1
   eb194:	1159      	asrs	r1, r3, #5
   eb196:	f003 021f 	and.w	r2, r3, #31
   eb19a:	f04f 0901 	mov.w	r9, #1
   eb19e:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
   eb1a2:	fa09 f202 	lsl.w	r2, r9, r2
   eb1a6:	420a      	tst	r2, r1
   eb1a8:	d00e      	beq.n	eb1c8 <__gethex+0x232>
   eb1aa:	454b      	cmp	r3, r9
   eb1ac:	dc02      	bgt.n	eb1b4 <__gethex+0x21e>
   eb1ae:	f04f 0902 	mov.w	r9, #2
   eb1b2:	e009      	b.n	eb1c8 <__gethex+0x232>
   eb1b4:	1eb9      	subs	r1, r7, #2
   eb1b6:	4628      	mov	r0, r5
   eb1b8:	f000 fe7f 	bl	ebeba <__any_on>
   eb1bc:	2800      	cmp	r0, #0
   eb1be:	d0f6      	beq.n	eb1ae <__gethex+0x218>
   eb1c0:	f04f 0903 	mov.w	r9, #3
   eb1c4:	e000      	b.n	eb1c8 <__gethex+0x232>
   eb1c6:	4681      	mov	r9, r0
   eb1c8:	4639      	mov	r1, r7
   eb1ca:	4628      	mov	r0, r5
   eb1cc:	f7ff fe98 	bl	eaf00 <rshift>
   eb1d0:	443c      	add	r4, r7
   eb1d2:	e00c      	b.n	eb1ee <__gethex+0x258>
   eb1d4:	da09      	bge.n	eb1ea <__gethex+0x254>
   eb1d6:	1a37      	subs	r7, r6, r0
   eb1d8:	4629      	mov	r1, r5
   eb1da:	463a      	mov	r2, r7
   eb1dc:	9802      	ldr	r0, [sp, #8]
   eb1de:	f000 fc99 	bl	ebb14 <__lshift>
   eb1e2:	1be4      	subs	r4, r4, r7
   eb1e4:	4605      	mov	r5, r0
   eb1e6:	f100 0a14 	add.w	sl, r0, #20
   eb1ea:	f04f 0900 	mov.w	r9, #0
   eb1ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
   eb1f2:	429c      	cmp	r4, r3
   eb1f4:	dd08      	ble.n	eb208 <__gethex+0x272>
   eb1f6:	9802      	ldr	r0, [sp, #8]
   eb1f8:	4629      	mov	r1, r5
   eb1fa:	f000 fac6 	bl	eb78a <_Bfree>
   eb1fe:	9a14      	ldr	r2, [sp, #80]	; 0x50
   eb200:	2300      	movs	r3, #0
   eb202:	6013      	str	r3, [r2, #0]
   eb204:	20a3      	movs	r0, #163	; 0xa3
   eb206:	e0e2      	b.n	eb3ce <__gethex+0x438>
   eb208:	f8d8 0004 	ldr.w	r0, [r8, #4]
   eb20c:	4284      	cmp	r4, r0
   eb20e:	da53      	bge.n	eb2b8 <__gethex+0x322>
   eb210:	1b04      	subs	r4, r0, r4
   eb212:	42a6      	cmp	r6, r4
   eb214:	dc2e      	bgt.n	eb274 <__gethex+0x2de>
   eb216:	f8d8 300c 	ldr.w	r3, [r8, #12]
   eb21a:	2b02      	cmp	r3, #2
   eb21c:	d01a      	beq.n	eb254 <__gethex+0x2be>
   eb21e:	2b03      	cmp	r3, #3
   eb220:	d01c      	beq.n	eb25c <__gethex+0x2c6>
   eb222:	2b01      	cmp	r3, #1
   eb224:	d11d      	bne.n	eb262 <__gethex+0x2cc>
   eb226:	42a6      	cmp	r6, r4
   eb228:	d11b      	bne.n	eb262 <__gethex+0x2cc>
   eb22a:	2e01      	cmp	r6, #1
   eb22c:	dc0b      	bgt.n	eb246 <__gethex+0x2b0>
   eb22e:	9a06      	ldr	r2, [sp, #24]
   eb230:	f8d8 3004 	ldr.w	r3, [r8, #4]
   eb234:	6013      	str	r3, [r2, #0]
   eb236:	2301      	movs	r3, #1
   eb238:	612b      	str	r3, [r5, #16]
   eb23a:	f8ca 3000 	str.w	r3, [sl]
   eb23e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   eb240:	2062      	movs	r0, #98	; 0x62
   eb242:	601d      	str	r5, [r3, #0]
   eb244:	e0c3      	b.n	eb3ce <__gethex+0x438>
   eb246:	1e71      	subs	r1, r6, #1
   eb248:	4628      	mov	r0, r5
   eb24a:	f000 fe36 	bl	ebeba <__any_on>
   eb24e:	2800      	cmp	r0, #0
   eb250:	d1ed      	bne.n	eb22e <__gethex+0x298>
   eb252:	e006      	b.n	eb262 <__gethex+0x2cc>
   eb254:	9b15      	ldr	r3, [sp, #84]	; 0x54
   eb256:	2b00      	cmp	r3, #0
   eb258:	d0e9      	beq.n	eb22e <__gethex+0x298>
   eb25a:	e002      	b.n	eb262 <__gethex+0x2cc>
   eb25c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   eb25e:	2b00      	cmp	r3, #0
   eb260:	d1e5      	bne.n	eb22e <__gethex+0x298>
   eb262:	9802      	ldr	r0, [sp, #8]
   eb264:	4629      	mov	r1, r5
   eb266:	f000 fa90 	bl	eb78a <_Bfree>
   eb26a:	9a14      	ldr	r2, [sp, #80]	; 0x50
   eb26c:	2300      	movs	r3, #0
   eb26e:	6013      	str	r3, [r2, #0]
   eb270:	2050      	movs	r0, #80	; 0x50
   eb272:	e0ac      	b.n	eb3ce <__gethex+0x438>
   eb274:	1e67      	subs	r7, r4, #1
   eb276:	f1b9 0f00 	cmp.w	r9, #0
   eb27a:	d106      	bne.n	eb28a <__gethex+0x2f4>
   eb27c:	b13f      	cbz	r7, eb28e <__gethex+0x2f8>
   eb27e:	4639      	mov	r1, r7
   eb280:	4628      	mov	r0, r5
   eb282:	f000 fe1a 	bl	ebeba <__any_on>
   eb286:	4681      	mov	r9, r0
   eb288:	e001      	b.n	eb28e <__gethex+0x2f8>
   eb28a:	f04f 0901 	mov.w	r9, #1
   eb28e:	117a      	asrs	r2, r7, #5
   eb290:	2301      	movs	r3, #1
   eb292:	f007 071f 	and.w	r7, r7, #31
   eb296:	fa03 f707 	lsl.w	r7, r3, r7
   eb29a:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
   eb29e:	4621      	mov	r1, r4
   eb2a0:	421f      	tst	r7, r3
   eb2a2:	4628      	mov	r0, r5
   eb2a4:	bf18      	it	ne
   eb2a6:	f049 0902 	orrne.w	r9, r9, #2
   eb2aa:	1b36      	subs	r6, r6, r4
   eb2ac:	f7ff fe28 	bl	eaf00 <rshift>
   eb2b0:	2702      	movs	r7, #2
   eb2b2:	f8d8 4004 	ldr.w	r4, [r8, #4]
   eb2b6:	e000      	b.n	eb2ba <__gethex+0x324>
   eb2b8:	2701      	movs	r7, #1
   eb2ba:	f1b9 0f00 	cmp.w	r9, #0
   eb2be:	f000 8081 	beq.w	eb3c4 <__gethex+0x42e>
   eb2c2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   eb2c6:	2b02      	cmp	r3, #2
   eb2c8:	d00e      	beq.n	eb2e8 <__gethex+0x352>
   eb2ca:	2b03      	cmp	r3, #3
   eb2cc:	d010      	beq.n	eb2f0 <__gethex+0x35a>
   eb2ce:	2b01      	cmp	r3, #1
   eb2d0:	d176      	bne.n	eb3c0 <__gethex+0x42a>
   eb2d2:	f019 0f02 	tst.w	r9, #2
   eb2d6:	d073      	beq.n	eb3c0 <__gethex+0x42a>
   eb2d8:	f8da 0000 	ldr.w	r0, [sl]
   eb2dc:	ea49 0900 	orr.w	r9, r9, r0
   eb2e0:	f019 0f01 	tst.w	r9, #1
   eb2e4:	d107      	bne.n	eb2f6 <__gethex+0x360>
   eb2e6:	e06b      	b.n	eb3c0 <__gethex+0x42a>
   eb2e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   eb2ea:	f1c3 0301 	rsb	r3, r3, #1
   eb2ee:	9315      	str	r3, [sp, #84]	; 0x54
   eb2f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   eb2f2:	2b00      	cmp	r3, #0
   eb2f4:	d064      	beq.n	eb3c0 <__gethex+0x42a>
   eb2f6:	f8d5 a010 	ldr.w	sl, [r5, #16]
   eb2fa:	f105 0314 	add.w	r3, r5, #20
   eb2fe:	ea4f 098a 	mov.w	r9, sl, lsl #2
   eb302:	eb03 0109 	add.w	r1, r3, r9
   eb306:	2000      	movs	r0, #0
   eb308:	681a      	ldr	r2, [r3, #0]
   eb30a:	f1b2 3fff 	cmp.w	r2, #4294967295
   eb30e:	d002      	beq.n	eb316 <__gethex+0x380>
   eb310:	3201      	adds	r2, #1
   eb312:	601a      	str	r2, [r3, #0]
   eb314:	e020      	b.n	eb358 <__gethex+0x3c2>
   eb316:	f843 0b04 	str.w	r0, [r3], #4
   eb31a:	4299      	cmp	r1, r3
   eb31c:	d8f4      	bhi.n	eb308 <__gethex+0x372>
   eb31e:	68ab      	ldr	r3, [r5, #8]
   eb320:	459a      	cmp	sl, r3
   eb322:	db12      	blt.n	eb34a <__gethex+0x3b4>
   eb324:	6869      	ldr	r1, [r5, #4]
   eb326:	9802      	ldr	r0, [sp, #8]
   eb328:	3101      	adds	r1, #1
   eb32a:	f000 f9f9 	bl	eb720 <_Balloc>
   eb32e:	692a      	ldr	r2, [r5, #16]
   eb330:	3202      	adds	r2, #2
   eb332:	f105 010c 	add.w	r1, r5, #12
   eb336:	4683      	mov	fp, r0
   eb338:	0092      	lsls	r2, r2, #2
   eb33a:	300c      	adds	r0, #12
   eb33c:	f7fe fbbb 	bl	e9ab6 <memcpy>
   eb340:	4629      	mov	r1, r5
   eb342:	9802      	ldr	r0, [sp, #8]
   eb344:	f000 fa21 	bl	eb78a <_Bfree>
   eb348:	465d      	mov	r5, fp
   eb34a:	692b      	ldr	r3, [r5, #16]
   eb34c:	1c5a      	adds	r2, r3, #1
   eb34e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   eb352:	612a      	str	r2, [r5, #16]
   eb354:	2201      	movs	r2, #1
   eb356:	615a      	str	r2, [r3, #20]
   eb358:	2f02      	cmp	r7, #2
   eb35a:	f105 0214 	add.w	r2, r5, #20
   eb35e:	d111      	bne.n	eb384 <__gethex+0x3ee>
   eb360:	f8d8 3000 	ldr.w	r3, [r8]
   eb364:	3b01      	subs	r3, #1
   eb366:	429e      	cmp	r6, r3
   eb368:	d127      	bne.n	eb3ba <__gethex+0x424>
   eb36a:	1171      	asrs	r1, r6, #5
   eb36c:	2301      	movs	r3, #1
   eb36e:	f006 061f 	and.w	r6, r6, #31
   eb372:	fa03 f606 	lsl.w	r6, r3, r6
   eb376:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   eb37a:	421e      	tst	r6, r3
   eb37c:	bf0c      	ite	eq
   eb37e:	2702      	moveq	r7, #2
   eb380:	2701      	movne	r7, #1
   eb382:	e01a      	b.n	eb3ba <__gethex+0x424>
   eb384:	692b      	ldr	r3, [r5, #16]
   eb386:	459a      	cmp	sl, r3
   eb388:	da0a      	bge.n	eb3a0 <__gethex+0x40a>
   eb38a:	2101      	movs	r1, #1
   eb38c:	4628      	mov	r0, r5
   eb38e:	f7ff fdb7 	bl	eaf00 <rshift>
   eb392:	f8d8 3008 	ldr.w	r3, [r8, #8]
   eb396:	3401      	adds	r4, #1
   eb398:	429c      	cmp	r4, r3
   eb39a:	f73f af2c 	bgt.w	eb1f6 <__gethex+0x260>
   eb39e:	e00b      	b.n	eb3b8 <__gethex+0x422>
   eb3a0:	f016 061f 	ands.w	r6, r6, #31
   eb3a4:	d008      	beq.n	eb3b8 <__gethex+0x422>
   eb3a6:	4491      	add	r9, r2
   eb3a8:	f1c6 0620 	rsb	r6, r6, #32
   eb3ac:	f859 0c04 	ldr.w	r0, [r9, #-4]
   eb3b0:	f000 fa7b 	bl	eb8aa <__hi0bits>
   eb3b4:	42b0      	cmp	r0, r6
   eb3b6:	dbe8      	blt.n	eb38a <__gethex+0x3f4>
   eb3b8:	2701      	movs	r7, #1
   eb3ba:	f047 0720 	orr.w	r7, r7, #32
   eb3be:	e001      	b.n	eb3c4 <__gethex+0x42e>
   eb3c0:	f047 0710 	orr.w	r7, r7, #16
   eb3c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   eb3c6:	601d      	str	r5, [r3, #0]
   eb3c8:	9b06      	ldr	r3, [sp, #24]
   eb3ca:	4638      	mov	r0, r7
   eb3cc:	601c      	str	r4, [r3, #0]
   eb3ce:	b00b      	add	sp, #44	; 0x2c
   eb3d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000eb3d4 <L_shift>:
   eb3d4:	f1c2 0208 	rsb	r2, r2, #8
   eb3d8:	0092      	lsls	r2, r2, #2
   eb3da:	b570      	push	{r4, r5, r6, lr}
   eb3dc:	f1c2 0620 	rsb	r6, r2, #32
   eb3e0:	6843      	ldr	r3, [r0, #4]
   eb3e2:	6805      	ldr	r5, [r0, #0]
   eb3e4:	fa03 f406 	lsl.w	r4, r3, r6
   eb3e8:	432c      	orrs	r4, r5
   eb3ea:	40d3      	lsrs	r3, r2
   eb3ec:	6004      	str	r4, [r0, #0]
   eb3ee:	f840 3f04 	str.w	r3, [r0, #4]!
   eb3f2:	4288      	cmp	r0, r1
   eb3f4:	d3f4      	bcc.n	eb3e0 <L_shift+0xc>
   eb3f6:	bd70      	pop	{r4, r5, r6, pc}

000eb3f8 <__match>:
   eb3f8:	b530      	push	{r4, r5, lr}
   eb3fa:	6803      	ldr	r3, [r0, #0]
   eb3fc:	f811 4b01 	ldrb.w	r4, [r1], #1
   eb400:	3301      	adds	r3, #1
   eb402:	b14c      	cbz	r4, eb418 <__match+0x20>
   eb404:	781a      	ldrb	r2, [r3, #0]
   eb406:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   eb40a:	2d19      	cmp	r5, #25
   eb40c:	bf98      	it	ls
   eb40e:	3220      	addls	r2, #32
   eb410:	42a2      	cmp	r2, r4
   eb412:	d0f3      	beq.n	eb3fc <__match+0x4>
   eb414:	2000      	movs	r0, #0
   eb416:	bd30      	pop	{r4, r5, pc}
   eb418:	6003      	str	r3, [r0, #0]
   eb41a:	2001      	movs	r0, #1
   eb41c:	bd30      	pop	{r4, r5, pc}

000eb41e <__hexnan>:
   eb41e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   eb422:	680b      	ldr	r3, [r1, #0]
   eb424:	f8d0 b000 	ldr.w	fp, [r0]
   eb428:	115e      	asrs	r6, r3, #5
   eb42a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   eb42e:	f013 031f 	ands.w	r3, r3, #31
   eb432:	b085      	sub	sp, #20
   eb434:	bf18      	it	ne
   eb436:	3604      	addne	r6, #4
   eb438:	1f35      	subs	r5, r6, #4
   eb43a:	4617      	mov	r7, r2
   eb43c:	2200      	movs	r2, #0
   eb43e:	4682      	mov	sl, r0
   eb440:	9301      	str	r3, [sp, #4]
   eb442:	f846 2c04 	str.w	r2, [r6, #-4]
   eb446:	46a8      	mov	r8, r5
   eb448:	462c      	mov	r4, r5
   eb44a:	9200      	str	r2, [sp, #0]
   eb44c:	4691      	mov	r9, r2
   eb44e:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
   eb452:	2900      	cmp	r1, #0
   eb454:	d03c      	beq.n	eb4d0 <__hexnan+0xb2>
   eb456:	4608      	mov	r0, r1
   eb458:	9203      	str	r2, [sp, #12]
   eb45a:	9102      	str	r1, [sp, #8]
   eb45c:	f7ff fd86 	bl	eaf6c <__hexdig_fun>
   eb460:	9a03      	ldr	r2, [sp, #12]
   eb462:	bb00      	cbnz	r0, eb4a6 <__hexnan+0x88>
   eb464:	9902      	ldr	r1, [sp, #8]
   eb466:	2920      	cmp	r1, #32
   eb468:	d816      	bhi.n	eb498 <__hexnan+0x7a>
   eb46a:	9b00      	ldr	r3, [sp, #0]
   eb46c:	4599      	cmp	r9, r3
   eb46e:	ddee      	ble.n	eb44e <__hexnan+0x30>
   eb470:	4544      	cmp	r4, r8
   eb472:	d205      	bcs.n	eb480 <__hexnan+0x62>
   eb474:	2a07      	cmp	r2, #7
   eb476:	dc03      	bgt.n	eb480 <__hexnan+0x62>
   eb478:	4641      	mov	r1, r8
   eb47a:	4620      	mov	r0, r4
   eb47c:	f7ff ffaa 	bl	eb3d4 <L_shift>
   eb480:	42bc      	cmp	r4, r7
   eb482:	d923      	bls.n	eb4cc <__hexnan+0xae>
   eb484:	2300      	movs	r3, #0
   eb486:	f1a4 0804 	sub.w	r8, r4, #4
   eb48a:	f844 3c04 	str.w	r3, [r4, #-4]
   eb48e:	f8cd 9000 	str.w	r9, [sp]
   eb492:	4644      	mov	r4, r8
   eb494:	461a      	mov	r2, r3
   eb496:	e7da      	b.n	eb44e <__hexnan+0x30>
   eb498:	2929      	cmp	r1, #41	; 0x29
   eb49a:	d148      	bne.n	eb52e <__hexnan+0x110>
   eb49c:	f10b 0301 	add.w	r3, fp, #1
   eb4a0:	f8ca 3000 	str.w	r3, [sl]
   eb4a4:	e014      	b.n	eb4d0 <__hexnan+0xb2>
   eb4a6:	3201      	adds	r2, #1
   eb4a8:	2a08      	cmp	r2, #8
   eb4aa:	f109 0901 	add.w	r9, r9, #1
   eb4ae:	dd06      	ble.n	eb4be <__hexnan+0xa0>
   eb4b0:	42bc      	cmp	r4, r7
   eb4b2:	d9cc      	bls.n	eb44e <__hexnan+0x30>
   eb4b4:	2300      	movs	r3, #0
   eb4b6:	f844 3c04 	str.w	r3, [r4, #-4]
   eb4ba:	2201      	movs	r2, #1
   eb4bc:	3c04      	subs	r4, #4
   eb4be:	6821      	ldr	r1, [r4, #0]
   eb4c0:	f000 000f 	and.w	r0, r0, #15
   eb4c4:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
   eb4c8:	6020      	str	r0, [r4, #0]
   eb4ca:	e7c0      	b.n	eb44e <__hexnan+0x30>
   eb4cc:	2208      	movs	r2, #8
   eb4ce:	e7be      	b.n	eb44e <__hexnan+0x30>
   eb4d0:	f1b9 0f00 	cmp.w	r9, #0
   eb4d4:	d02b      	beq.n	eb52e <__hexnan+0x110>
   eb4d6:	4544      	cmp	r4, r8
   eb4d8:	d205      	bcs.n	eb4e6 <__hexnan+0xc8>
   eb4da:	2a07      	cmp	r2, #7
   eb4dc:	dc03      	bgt.n	eb4e6 <__hexnan+0xc8>
   eb4de:	4641      	mov	r1, r8
   eb4e0:	4620      	mov	r0, r4
   eb4e2:	f7ff ff77 	bl	eb3d4 <L_shift>
   eb4e6:	42bc      	cmp	r4, r7
   eb4e8:	d90c      	bls.n	eb504 <__hexnan+0xe6>
   eb4ea:	463b      	mov	r3, r7
   eb4ec:	f854 2b04 	ldr.w	r2, [r4], #4
   eb4f0:	f843 2b04 	str.w	r2, [r3], #4
   eb4f4:	42a5      	cmp	r5, r4
   eb4f6:	d2f9      	bcs.n	eb4ec <__hexnan+0xce>
   eb4f8:	2200      	movs	r2, #0
   eb4fa:	f843 2b04 	str.w	r2, [r3], #4
   eb4fe:	429d      	cmp	r5, r3
   eb500:	d2fb      	bcs.n	eb4fa <__hexnan+0xdc>
   eb502:	e00b      	b.n	eb51c <__hexnan+0xfe>
   eb504:	9b01      	ldr	r3, [sp, #4]
   eb506:	b14b      	cbz	r3, eb51c <__hexnan+0xfe>
   eb508:	f1c3 0220 	rsb	r2, r3, #32
   eb50c:	f04f 33ff 	mov.w	r3, #4294967295
   eb510:	40d3      	lsrs	r3, r2
   eb512:	f856 2c04 	ldr.w	r2, [r6, #-4]
   eb516:	4013      	ands	r3, r2
   eb518:	f846 3c04 	str.w	r3, [r6, #-4]
   eb51c:	682b      	ldr	r3, [r5, #0]
   eb51e:	b943      	cbnz	r3, eb532 <__hexnan+0x114>
   eb520:	42bd      	cmp	r5, r7
   eb522:	d102      	bne.n	eb52a <__hexnan+0x10c>
   eb524:	2301      	movs	r3, #1
   eb526:	602b      	str	r3, [r5, #0]
   eb528:	e003      	b.n	eb532 <__hexnan+0x114>
   eb52a:	3d04      	subs	r5, #4
   eb52c:	e7f6      	b.n	eb51c <__hexnan+0xfe>
   eb52e:	2004      	movs	r0, #4
   eb530:	e000      	b.n	eb534 <__hexnan+0x116>
   eb532:	2005      	movs	r0, #5
   eb534:	b005      	add	sp, #20
   eb536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000eb53c <_findenv_r>:
   eb53c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   eb540:	4607      	mov	r7, r0
   eb542:	468b      	mov	fp, r1
   eb544:	4690      	mov	r8, r2
   eb546:	f000 fcda 	bl	ebefe <__env_lock>
   eb54a:	4b19      	ldr	r3, [pc, #100]	; (eb5b0 <_findenv_r+0x74>)
   eb54c:	681d      	ldr	r5, [r3, #0]
   eb54e:	469a      	mov	sl, r3
   eb550:	b13d      	cbz	r5, eb562 <_findenv_r+0x26>
   eb552:	465c      	mov	r4, fp
   eb554:	4623      	mov	r3, r4
   eb556:	f813 2b01 	ldrb.w	r2, [r3], #1
   eb55a:	b142      	cbz	r2, eb56e <_findenv_r+0x32>
   eb55c:	2a3d      	cmp	r2, #61	; 0x3d
   eb55e:	461c      	mov	r4, r3
   eb560:	d1f8      	bne.n	eb554 <_findenv_r+0x18>
   eb562:	4638      	mov	r0, r7
   eb564:	f000 fccc 	bl	ebf00 <__env_unlock>
   eb568:	2000      	movs	r0, #0
   eb56a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   eb56e:	ebcb 0404 	rsb	r4, fp, r4
   eb572:	46a9      	mov	r9, r5
   eb574:	f859 0b04 	ldr.w	r0, [r9], #4
   eb578:	2800      	cmp	r0, #0
   eb57a:	d0f2      	beq.n	eb562 <_findenv_r+0x26>
   eb57c:	4622      	mov	r2, r4
   eb57e:	4659      	mov	r1, fp
   eb580:	f7fe fb18 	bl	e9bb4 <strncmp>
   eb584:	b988      	cbnz	r0, eb5aa <_findenv_r+0x6e>
   eb586:	f859 3c04 	ldr.w	r3, [r9, #-4]
   eb58a:	191e      	adds	r6, r3, r4
   eb58c:	5d1b      	ldrb	r3, [r3, r4]
   eb58e:	2b3d      	cmp	r3, #61	; 0x3d
   eb590:	d10b      	bne.n	eb5aa <_findenv_r+0x6e>
   eb592:	f8da 3000 	ldr.w	r3, [sl]
   eb596:	1aed      	subs	r5, r5, r3
   eb598:	10ad      	asrs	r5, r5, #2
   eb59a:	4638      	mov	r0, r7
   eb59c:	f8c8 5000 	str.w	r5, [r8]
   eb5a0:	f000 fcae 	bl	ebf00 <__env_unlock>
   eb5a4:	1c70      	adds	r0, r6, #1
   eb5a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   eb5aa:	464d      	mov	r5, r9
   eb5ac:	e7e1      	b.n	eb572 <_findenv_r+0x36>
   eb5ae:	bf00      	nop
   eb5b0:	2003aca0 	.word	0x2003aca0

000eb5b4 <_getenv_r>:
   eb5b4:	b507      	push	{r0, r1, r2, lr}
   eb5b6:	aa01      	add	r2, sp, #4
   eb5b8:	f7ff ffc0 	bl	eb53c <_findenv_r>
   eb5bc:	b003      	add	sp, #12
   eb5be:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000eb5c4 <_gettimeofday_r>:
   eb5c4:	b538      	push	{r3, r4, r5, lr}
   eb5c6:	4c07      	ldr	r4, [pc, #28]	; (eb5e4 <_gettimeofday_r+0x20>)
   eb5c8:	2300      	movs	r3, #0
   eb5ca:	4605      	mov	r5, r0
   eb5cc:	4608      	mov	r0, r1
   eb5ce:	4611      	mov	r1, r2
   eb5d0:	6023      	str	r3, [r4, #0]
   eb5d2:	f7ef fe31 	bl	db238 <_gettimeofday>
   eb5d6:	1c43      	adds	r3, r0, #1
   eb5d8:	d102      	bne.n	eb5e0 <_gettimeofday_r+0x1c>
   eb5da:	6823      	ldr	r3, [r4, #0]
   eb5dc:	b103      	cbz	r3, eb5e0 <_gettimeofday_r+0x1c>
   eb5de:	602b      	str	r3, [r5, #0]
   eb5e0:	bd38      	pop	{r3, r4, r5, pc}
   eb5e2:	bf00      	nop
   eb5e4:	2003e7f0 	.word	0x2003e7f0

000eb5e8 <__gettzinfo>:
   eb5e8:	4800      	ldr	r0, [pc, #0]	; (eb5ec <__gettzinfo+0x4>)
   eb5ea:	4770      	bx	lr
   eb5ec:	2003ac60 	.word	0x2003ac60

000eb5f0 <gmtime_r>:
   eb5f0:	6802      	ldr	r2, [r0, #0]
   eb5f2:	4b47      	ldr	r3, [pc, #284]	; (eb710 <gmtime_r+0x120>)
   eb5f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   eb5f6:	fb92 f4f3 	sdiv	r4, r2, r3
   eb5fa:	fb03 2214 	mls	r2, r3, r4, r2
   eb5fe:	2a00      	cmp	r2, #0
   eb600:	bfbc      	itt	lt
   eb602:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   eb606:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   eb60a:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   eb60e:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   eb612:	fb92 f3f0 	sdiv	r3, r2, r0
   eb616:	fb00 2213 	mls	r2, r0, r3, r2
   eb61a:	f04f 003c 	mov.w	r0, #60	; 0x3c
   eb61e:	bfac      	ite	ge
   eb620:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   eb624:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   eb628:	608b      	str	r3, [r1, #8]
   eb62a:	fb92 f3f0 	sdiv	r3, r2, r0
   eb62e:	fb00 2213 	mls	r2, r0, r3, r2
   eb632:	604b      	str	r3, [r1, #4]
   eb634:	600a      	str	r2, [r1, #0]
   eb636:	2307      	movs	r3, #7
   eb638:	1ce2      	adds	r2, r4, #3
   eb63a:	fb92 f3f3 	sdiv	r3, r2, r3
   eb63e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   eb642:	1ad3      	subs	r3, r2, r3
   eb644:	618b      	str	r3, [r1, #24]
   eb646:	4b33      	ldr	r3, [pc, #204]	; (eb714 <gmtime_r+0x124>)
   eb648:	4d33      	ldr	r5, [pc, #204]	; (eb718 <gmtime_r+0x128>)
   eb64a:	fb94 f5f5 	sdiv	r5, r4, r5
   eb64e:	fb03 4405 	mla	r4, r3, r5, r4
   eb652:	f648 62ac 	movw	r2, #36524	; 0x8eac
   eb656:	fbb4 f2f2 	udiv	r2, r4, r2
   eb65a:	4422      	add	r2, r4
   eb65c:	f240 57b4 	movw	r7, #1460	; 0x5b4
   eb660:	fbb4 f3f7 	udiv	r3, r4, r7
   eb664:	1ad2      	subs	r2, r2, r3
   eb666:	482d      	ldr	r0, [pc, #180]	; (eb71c <gmtime_r+0x12c>)
   eb668:	fbb4 f0f0 	udiv	r0, r4, r0
   eb66c:	f648 6694 	movw	r6, #36500	; 0x8e94
   eb670:	1a13      	subs	r3, r2, r0
   eb672:	fbb3 f6f6 	udiv	r6, r3, r6
   eb676:	4434      	add	r4, r6
   eb678:	f240 126d 	movw	r2, #365	; 0x16d
   eb67c:	fbb3 f0f2 	udiv	r0, r3, r2
   eb680:	fbb3 f3f7 	udiv	r3, r3, r7
   eb684:	1ae3      	subs	r3, r4, r3
   eb686:	fb02 3310 	mls	r3, r2, r0, r3
   eb68a:	2499      	movs	r4, #153	; 0x99
   eb68c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   eb690:	3202      	adds	r2, #2
   eb692:	fbb2 f2f4 	udiv	r2, r2, r4
   eb696:	2a0a      	cmp	r2, #10
   eb698:	fb04 f402 	mul.w	r4, r4, r2
   eb69c:	f104 0602 	add.w	r6, r4, #2
   eb6a0:	f04f 0405 	mov.w	r4, #5
   eb6a4:	fbb6 f4f4 	udiv	r4, r6, r4
   eb6a8:	bf34      	ite	cc
   eb6aa:	2602      	movcc	r6, #2
   eb6ac:	f06f 0609 	mvncs.w	r6, #9
   eb6b0:	4416      	add	r6, r2
   eb6b2:	f44f 72c8 	mov.w	r2, #400	; 0x190
   eb6b6:	fb02 0505 	mla	r5, r2, r5, r0
   eb6ba:	1c5f      	adds	r7, r3, #1
   eb6bc:	2e01      	cmp	r6, #1
   eb6be:	bf98      	it	ls
   eb6c0:	3501      	addls	r5, #1
   eb6c2:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   eb6c6:	eba7 0704 	sub.w	r7, r7, r4
   eb6ca:	d302      	bcc.n	eb6d2 <gmtime_r+0xe2>
   eb6cc:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   eb6d0:	e014      	b.n	eb6fc <gmtime_r+0x10c>
   eb6d2:	0782      	lsls	r2, r0, #30
   eb6d4:	d105      	bne.n	eb6e2 <gmtime_r+0xf2>
   eb6d6:	2464      	movs	r4, #100	; 0x64
   eb6d8:	fbb0 f2f4 	udiv	r2, r0, r4
   eb6dc:	fb04 0212 	mls	r2, r4, r2, r0
   eb6e0:	b94a      	cbnz	r2, eb6f6 <gmtime_r+0x106>
   eb6e2:	f44f 72c8 	mov.w	r2, #400	; 0x190
   eb6e6:	fbb0 f4f2 	udiv	r4, r0, r2
   eb6ea:	fb02 0014 	mls	r0, r2, r4, r0
   eb6ee:	fab0 f280 	clz	r2, r0
   eb6f2:	0952      	lsrs	r2, r2, #5
   eb6f4:	e000      	b.n	eb6f8 <gmtime_r+0x108>
   eb6f6:	2201      	movs	r2, #1
   eb6f8:	333b      	adds	r3, #59	; 0x3b
   eb6fa:	441a      	add	r2, r3
   eb6fc:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   eb700:	2300      	movs	r3, #0
   eb702:	61ca      	str	r2, [r1, #28]
   eb704:	614d      	str	r5, [r1, #20]
   eb706:	610e      	str	r6, [r1, #16]
   eb708:	60cf      	str	r7, [r1, #12]
   eb70a:	620b      	str	r3, [r1, #32]
   eb70c:	4608      	mov	r0, r1
   eb70e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   eb710:	00015180 	.word	0x00015180
   eb714:	fffdc54f 	.word	0xfffdc54f
   eb718:	00023ab1 	.word	0x00023ab1
   eb71c:	00023ab0 	.word	0x00023ab0

000eb720 <_Balloc>:
   eb720:	b570      	push	{r4, r5, r6, lr}
   eb722:	6a45      	ldr	r5, [r0, #36]	; 0x24
   eb724:	4604      	mov	r4, r0
   eb726:	460e      	mov	r6, r1
   eb728:	b93d      	cbnz	r5, eb73a <_Balloc+0x1a>
   eb72a:	2010      	movs	r0, #16
   eb72c:	f7fa fcc2 	bl	e60b4 <malloc>
   eb730:	6260      	str	r0, [r4, #36]	; 0x24
   eb732:	6045      	str	r5, [r0, #4]
   eb734:	6085      	str	r5, [r0, #8]
   eb736:	6005      	str	r5, [r0, #0]
   eb738:	60c5      	str	r5, [r0, #12]
   eb73a:	6a65      	ldr	r5, [r4, #36]	; 0x24
   eb73c:	68eb      	ldr	r3, [r5, #12]
   eb73e:	b143      	cbz	r3, eb752 <_Balloc+0x32>
   eb740:	6a63      	ldr	r3, [r4, #36]	; 0x24
   eb742:	68db      	ldr	r3, [r3, #12]
   eb744:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   eb748:	b178      	cbz	r0, eb76a <_Balloc+0x4a>
   eb74a:	6802      	ldr	r2, [r0, #0]
   eb74c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
   eb750:	e017      	b.n	eb782 <_Balloc+0x62>
   eb752:	2221      	movs	r2, #33	; 0x21
   eb754:	2104      	movs	r1, #4
   eb756:	4620      	mov	r0, r4
   eb758:	f7fe f9db 	bl	e9b12 <_calloc_r>
   eb75c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   eb75e:	60e8      	str	r0, [r5, #12]
   eb760:	68db      	ldr	r3, [r3, #12]
   eb762:	2b00      	cmp	r3, #0
   eb764:	d1ec      	bne.n	eb740 <_Balloc+0x20>
   eb766:	2000      	movs	r0, #0
   eb768:	bd70      	pop	{r4, r5, r6, pc}
   eb76a:	2101      	movs	r1, #1
   eb76c:	fa01 f506 	lsl.w	r5, r1, r6
   eb770:	1d6a      	adds	r2, r5, #5
   eb772:	0092      	lsls	r2, r2, #2
   eb774:	4620      	mov	r0, r4
   eb776:	f7fe f9cc 	bl	e9b12 <_calloc_r>
   eb77a:	2800      	cmp	r0, #0
   eb77c:	d0f3      	beq.n	eb766 <_Balloc+0x46>
   eb77e:	6046      	str	r6, [r0, #4]
   eb780:	6085      	str	r5, [r0, #8]
   eb782:	2300      	movs	r3, #0
   eb784:	6103      	str	r3, [r0, #16]
   eb786:	60c3      	str	r3, [r0, #12]
   eb788:	bd70      	pop	{r4, r5, r6, pc}

000eb78a <_Bfree>:
   eb78a:	b570      	push	{r4, r5, r6, lr}
   eb78c:	6a44      	ldr	r4, [r0, #36]	; 0x24
   eb78e:	4606      	mov	r6, r0
   eb790:	460d      	mov	r5, r1
   eb792:	b93c      	cbnz	r4, eb7a4 <_Bfree+0x1a>
   eb794:	2010      	movs	r0, #16
   eb796:	f7fa fc8d 	bl	e60b4 <malloc>
   eb79a:	6270      	str	r0, [r6, #36]	; 0x24
   eb79c:	6044      	str	r4, [r0, #4]
   eb79e:	6084      	str	r4, [r0, #8]
   eb7a0:	6004      	str	r4, [r0, #0]
   eb7a2:	60c4      	str	r4, [r0, #12]
   eb7a4:	b13d      	cbz	r5, eb7b6 <_Bfree+0x2c>
   eb7a6:	6a73      	ldr	r3, [r6, #36]	; 0x24
   eb7a8:	686a      	ldr	r2, [r5, #4]
   eb7aa:	68db      	ldr	r3, [r3, #12]
   eb7ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   eb7b0:	6029      	str	r1, [r5, #0]
   eb7b2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   eb7b6:	bd70      	pop	{r4, r5, r6, pc}

000eb7b8 <__multadd>:
   eb7b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   eb7bc:	690d      	ldr	r5, [r1, #16]
   eb7be:	461f      	mov	r7, r3
   eb7c0:	4606      	mov	r6, r0
   eb7c2:	460c      	mov	r4, r1
   eb7c4:	f101 0e14 	add.w	lr, r1, #20
   eb7c8:	2300      	movs	r3, #0
   eb7ca:	f8de 0000 	ldr.w	r0, [lr]
   eb7ce:	b281      	uxth	r1, r0
   eb7d0:	fb02 7101 	mla	r1, r2, r1, r7
   eb7d4:	0c0f      	lsrs	r7, r1, #16
   eb7d6:	0c00      	lsrs	r0, r0, #16
   eb7d8:	fb02 7000 	mla	r0, r2, r0, r7
   eb7dc:	b289      	uxth	r1, r1
   eb7de:	3301      	adds	r3, #1
   eb7e0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
   eb7e4:	429d      	cmp	r5, r3
   eb7e6:	ea4f 4710 	mov.w	r7, r0, lsr #16
   eb7ea:	f84e 1b04 	str.w	r1, [lr], #4
   eb7ee:	dcec      	bgt.n	eb7ca <__multadd+0x12>
   eb7f0:	b1d7      	cbz	r7, eb828 <__multadd+0x70>
   eb7f2:	68a3      	ldr	r3, [r4, #8]
   eb7f4:	429d      	cmp	r5, r3
   eb7f6:	db12      	blt.n	eb81e <__multadd+0x66>
   eb7f8:	6861      	ldr	r1, [r4, #4]
   eb7fa:	4630      	mov	r0, r6
   eb7fc:	3101      	adds	r1, #1
   eb7fe:	f7ff ff8f 	bl	eb720 <_Balloc>
   eb802:	6922      	ldr	r2, [r4, #16]
   eb804:	3202      	adds	r2, #2
   eb806:	f104 010c 	add.w	r1, r4, #12
   eb80a:	4680      	mov	r8, r0
   eb80c:	0092      	lsls	r2, r2, #2
   eb80e:	300c      	adds	r0, #12
   eb810:	f7fe f951 	bl	e9ab6 <memcpy>
   eb814:	4621      	mov	r1, r4
   eb816:	4630      	mov	r0, r6
   eb818:	f7ff ffb7 	bl	eb78a <_Bfree>
   eb81c:	4644      	mov	r4, r8
   eb81e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   eb822:	3501      	adds	r5, #1
   eb824:	615f      	str	r7, [r3, #20]
   eb826:	6125      	str	r5, [r4, #16]
   eb828:	4620      	mov	r0, r4
   eb82a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000eb82e <__s2b>:
   eb82e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   eb832:	460c      	mov	r4, r1
   eb834:	4615      	mov	r5, r2
   eb836:	461f      	mov	r7, r3
   eb838:	2209      	movs	r2, #9
   eb83a:	3308      	adds	r3, #8
   eb83c:	4606      	mov	r6, r0
   eb83e:	fb93 f3f2 	sdiv	r3, r3, r2
   eb842:	2100      	movs	r1, #0
   eb844:	2201      	movs	r2, #1
   eb846:	429a      	cmp	r2, r3
   eb848:	da02      	bge.n	eb850 <__s2b+0x22>
   eb84a:	0052      	lsls	r2, r2, #1
   eb84c:	3101      	adds	r1, #1
   eb84e:	e7fa      	b.n	eb846 <__s2b+0x18>
   eb850:	4630      	mov	r0, r6
   eb852:	f7ff ff65 	bl	eb720 <_Balloc>
   eb856:	9b08      	ldr	r3, [sp, #32]
   eb858:	6143      	str	r3, [r0, #20]
   eb85a:	2d09      	cmp	r5, #9
   eb85c:	f04f 0301 	mov.w	r3, #1
   eb860:	6103      	str	r3, [r0, #16]
   eb862:	dd11      	ble.n	eb888 <__s2b+0x5a>
   eb864:	f104 0809 	add.w	r8, r4, #9
   eb868:	46c1      	mov	r9, r8
   eb86a:	442c      	add	r4, r5
   eb86c:	f819 3b01 	ldrb.w	r3, [r9], #1
   eb870:	4601      	mov	r1, r0
   eb872:	3b30      	subs	r3, #48	; 0x30
   eb874:	220a      	movs	r2, #10
   eb876:	4630      	mov	r0, r6
   eb878:	f7ff ff9e 	bl	eb7b8 <__multadd>
   eb87c:	45a1      	cmp	r9, r4
   eb87e:	d1f5      	bne.n	eb86c <__s2b+0x3e>
   eb880:	eb08 0405 	add.w	r4, r8, r5
   eb884:	3c08      	subs	r4, #8
   eb886:	e001      	b.n	eb88c <__s2b+0x5e>
   eb888:	340a      	adds	r4, #10
   eb88a:	2509      	movs	r5, #9
   eb88c:	1b2d      	subs	r5, r5, r4
   eb88e:	1963      	adds	r3, r4, r5
   eb890:	429f      	cmp	r7, r3
   eb892:	dd08      	ble.n	eb8a6 <__s2b+0x78>
   eb894:	f814 3b01 	ldrb.w	r3, [r4], #1
   eb898:	4601      	mov	r1, r0
   eb89a:	3b30      	subs	r3, #48	; 0x30
   eb89c:	220a      	movs	r2, #10
   eb89e:	4630      	mov	r0, r6
   eb8a0:	f7ff ff8a 	bl	eb7b8 <__multadd>
   eb8a4:	e7f3      	b.n	eb88e <__s2b+0x60>
   eb8a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000eb8aa <__hi0bits>:
   eb8aa:	0c03      	lsrs	r3, r0, #16
   eb8ac:	041b      	lsls	r3, r3, #16
   eb8ae:	b913      	cbnz	r3, eb8b6 <__hi0bits+0xc>
   eb8b0:	0400      	lsls	r0, r0, #16
   eb8b2:	2310      	movs	r3, #16
   eb8b4:	e000      	b.n	eb8b8 <__hi0bits+0xe>
   eb8b6:	2300      	movs	r3, #0
   eb8b8:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   eb8bc:	bf04      	itt	eq
   eb8be:	0200      	lsleq	r0, r0, #8
   eb8c0:	3308      	addeq	r3, #8
   eb8c2:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   eb8c6:	bf04      	itt	eq
   eb8c8:	0100      	lsleq	r0, r0, #4
   eb8ca:	3304      	addeq	r3, #4
   eb8cc:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   eb8d0:	bf04      	itt	eq
   eb8d2:	0080      	lsleq	r0, r0, #2
   eb8d4:	3302      	addeq	r3, #2
   eb8d6:	2800      	cmp	r0, #0
   eb8d8:	db03      	blt.n	eb8e2 <__hi0bits+0x38>
   eb8da:	0042      	lsls	r2, r0, #1
   eb8dc:	d503      	bpl.n	eb8e6 <__hi0bits+0x3c>
   eb8de:	1c58      	adds	r0, r3, #1
   eb8e0:	4770      	bx	lr
   eb8e2:	4618      	mov	r0, r3
   eb8e4:	4770      	bx	lr
   eb8e6:	2020      	movs	r0, #32
   eb8e8:	4770      	bx	lr

000eb8ea <__lo0bits>:
   eb8ea:	6803      	ldr	r3, [r0, #0]
   eb8ec:	f013 0207 	ands.w	r2, r3, #7
   eb8f0:	d00b      	beq.n	eb90a <__lo0bits+0x20>
   eb8f2:	07d9      	lsls	r1, r3, #31
   eb8f4:	d422      	bmi.n	eb93c <__lo0bits+0x52>
   eb8f6:	079a      	lsls	r2, r3, #30
   eb8f8:	bf4b      	itete	mi
   eb8fa:	085b      	lsrmi	r3, r3, #1
   eb8fc:	089b      	lsrpl	r3, r3, #2
   eb8fe:	6003      	strmi	r3, [r0, #0]
   eb900:	6003      	strpl	r3, [r0, #0]
   eb902:	bf4c      	ite	mi
   eb904:	2001      	movmi	r0, #1
   eb906:	2002      	movpl	r0, #2
   eb908:	4770      	bx	lr
   eb90a:	b299      	uxth	r1, r3
   eb90c:	b909      	cbnz	r1, eb912 <__lo0bits+0x28>
   eb90e:	0c1b      	lsrs	r3, r3, #16
   eb910:	2210      	movs	r2, #16
   eb912:	f013 0fff 	tst.w	r3, #255	; 0xff
   eb916:	bf04      	itt	eq
   eb918:	0a1b      	lsreq	r3, r3, #8
   eb91a:	3208      	addeq	r2, #8
   eb91c:	0719      	lsls	r1, r3, #28
   eb91e:	bf04      	itt	eq
   eb920:	091b      	lsreq	r3, r3, #4
   eb922:	3204      	addeq	r2, #4
   eb924:	0799      	lsls	r1, r3, #30
   eb926:	bf04      	itt	eq
   eb928:	089b      	lsreq	r3, r3, #2
   eb92a:	3202      	addeq	r2, #2
   eb92c:	07d9      	lsls	r1, r3, #31
   eb92e:	d402      	bmi.n	eb936 <__lo0bits+0x4c>
   eb930:	085b      	lsrs	r3, r3, #1
   eb932:	d005      	beq.n	eb940 <__lo0bits+0x56>
   eb934:	3201      	adds	r2, #1
   eb936:	6003      	str	r3, [r0, #0]
   eb938:	4610      	mov	r0, r2
   eb93a:	4770      	bx	lr
   eb93c:	2000      	movs	r0, #0
   eb93e:	4770      	bx	lr
   eb940:	2020      	movs	r0, #32
   eb942:	4770      	bx	lr

000eb944 <__i2b>:
   eb944:	b510      	push	{r4, lr}
   eb946:	460c      	mov	r4, r1
   eb948:	2101      	movs	r1, #1
   eb94a:	f7ff fee9 	bl	eb720 <_Balloc>
   eb94e:	2201      	movs	r2, #1
   eb950:	6144      	str	r4, [r0, #20]
   eb952:	6102      	str	r2, [r0, #16]
   eb954:	bd10      	pop	{r4, pc}

000eb956 <__multiply>:
   eb956:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   eb95a:	4614      	mov	r4, r2
   eb95c:	690a      	ldr	r2, [r1, #16]
   eb95e:	6923      	ldr	r3, [r4, #16]
   eb960:	429a      	cmp	r2, r3
   eb962:	bfb8      	it	lt
   eb964:	460b      	movlt	r3, r1
   eb966:	4688      	mov	r8, r1
   eb968:	bfbc      	itt	lt
   eb96a:	46a0      	movlt	r8, r4
   eb96c:	461c      	movlt	r4, r3
   eb96e:	f8d8 7010 	ldr.w	r7, [r8, #16]
   eb972:	f8d4 9010 	ldr.w	r9, [r4, #16]
   eb976:	f8d8 3008 	ldr.w	r3, [r8, #8]
   eb97a:	f8d8 1004 	ldr.w	r1, [r8, #4]
   eb97e:	eb07 0609 	add.w	r6, r7, r9
   eb982:	429e      	cmp	r6, r3
   eb984:	bfc8      	it	gt
   eb986:	3101      	addgt	r1, #1
   eb988:	f7ff feca 	bl	eb720 <_Balloc>
   eb98c:	f100 0514 	add.w	r5, r0, #20
   eb990:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
   eb994:	462b      	mov	r3, r5
   eb996:	2200      	movs	r2, #0
   eb998:	4563      	cmp	r3, ip
   eb99a:	d202      	bcs.n	eb9a2 <__multiply+0x4c>
   eb99c:	f843 2b04 	str.w	r2, [r3], #4
   eb9a0:	e7fa      	b.n	eb998 <__multiply+0x42>
   eb9a2:	f104 0214 	add.w	r2, r4, #20
   eb9a6:	f108 0114 	add.w	r1, r8, #20
   eb9aa:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   eb9ae:	eb01 0787 	add.w	r7, r1, r7, lsl #2
   eb9b2:	9300      	str	r3, [sp, #0]
   eb9b4:	9b00      	ldr	r3, [sp, #0]
   eb9b6:	9201      	str	r2, [sp, #4]
   eb9b8:	4293      	cmp	r3, r2
   eb9ba:	d957      	bls.n	eba6c <__multiply+0x116>
   eb9bc:	f8b2 b000 	ldrh.w	fp, [r2]
   eb9c0:	f1bb 0f00 	cmp.w	fp, #0
   eb9c4:	d023      	beq.n	eba0e <__multiply+0xb8>
   eb9c6:	4689      	mov	r9, r1
   eb9c8:	46ae      	mov	lr, r5
   eb9ca:	f04f 0800 	mov.w	r8, #0
   eb9ce:	f859 4b04 	ldr.w	r4, [r9], #4
   eb9d2:	f8be a000 	ldrh.w	sl, [lr]
   eb9d6:	b2a3      	uxth	r3, r4
   eb9d8:	fb0b a303 	mla	r3, fp, r3, sl
   eb9dc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
   eb9e0:	f8de 4000 	ldr.w	r4, [lr]
   eb9e4:	4443      	add	r3, r8
   eb9e6:	ea4f 4814 	mov.w	r8, r4, lsr #16
   eb9ea:	fb0b 840a 	mla	r4, fp, sl, r8
   eb9ee:	eb04 4413 	add.w	r4, r4, r3, lsr #16
   eb9f2:	46f2      	mov	sl, lr
   eb9f4:	b29b      	uxth	r3, r3
   eb9f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   eb9fa:	454f      	cmp	r7, r9
   eb9fc:	ea4f 4814 	mov.w	r8, r4, lsr #16
   eba00:	f84a 3b04 	str.w	r3, [sl], #4
   eba04:	d901      	bls.n	eba0a <__multiply+0xb4>
   eba06:	46d6      	mov	lr, sl
   eba08:	e7e1      	b.n	eb9ce <__multiply+0x78>
   eba0a:	f8ce 8004 	str.w	r8, [lr, #4]
   eba0e:	9b01      	ldr	r3, [sp, #4]
   eba10:	f8b3 a002 	ldrh.w	sl, [r3, #2]
   eba14:	3204      	adds	r2, #4
   eba16:	f1ba 0f00 	cmp.w	sl, #0
   eba1a:	d021      	beq.n	eba60 <__multiply+0x10a>
   eba1c:	682b      	ldr	r3, [r5, #0]
   eba1e:	462c      	mov	r4, r5
   eba20:	4689      	mov	r9, r1
   eba22:	f04f 0800 	mov.w	r8, #0
   eba26:	f8b9 e000 	ldrh.w	lr, [r9]
   eba2a:	f8b4 b002 	ldrh.w	fp, [r4, #2]
   eba2e:	fb0a be0e 	mla	lr, sl, lr, fp
   eba32:	44f0      	add	r8, lr
   eba34:	46a3      	mov	fp, r4
   eba36:	b29b      	uxth	r3, r3
   eba38:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   eba3c:	f84b 3b04 	str.w	r3, [fp], #4
   eba40:	f859 3b04 	ldr.w	r3, [r9], #4
   eba44:	f8b4 e004 	ldrh.w	lr, [r4, #4]
   eba48:	0c1b      	lsrs	r3, r3, #16
   eba4a:	fb0a e303 	mla	r3, sl, r3, lr
   eba4e:	eb03 4318 	add.w	r3, r3, r8, lsr #16
   eba52:	454f      	cmp	r7, r9
   eba54:	ea4f 4813 	mov.w	r8, r3, lsr #16
   eba58:	d901      	bls.n	eba5e <__multiply+0x108>
   eba5a:	465c      	mov	r4, fp
   eba5c:	e7e3      	b.n	eba26 <__multiply+0xd0>
   eba5e:	6063      	str	r3, [r4, #4]
   eba60:	3504      	adds	r5, #4
   eba62:	e7a7      	b.n	eb9b4 <__multiply+0x5e>
   eba64:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
   eba68:	b913      	cbnz	r3, eba70 <__multiply+0x11a>
   eba6a:	3e01      	subs	r6, #1
   eba6c:	2e00      	cmp	r6, #0
   eba6e:	dcf9      	bgt.n	eba64 <__multiply+0x10e>
   eba70:	6106      	str	r6, [r0, #16]
   eba72:	b003      	add	sp, #12
   eba74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000eba78 <__pow5mult>:
   eba78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   eba7c:	4615      	mov	r5, r2
   eba7e:	f012 0203 	ands.w	r2, r2, #3
   eba82:	4606      	mov	r6, r0
   eba84:	460f      	mov	r7, r1
   eba86:	d007      	beq.n	eba98 <__pow5mult+0x20>
   eba88:	3a01      	subs	r2, #1
   eba8a:	4c21      	ldr	r4, [pc, #132]	; (ebb10 <__pow5mult+0x98>)
   eba8c:	2300      	movs	r3, #0
   eba8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   eba92:	f7ff fe91 	bl	eb7b8 <__multadd>
   eba96:	4607      	mov	r7, r0
   eba98:	10ad      	asrs	r5, r5, #2
   eba9a:	d036      	beq.n	ebb0a <__pow5mult+0x92>
   eba9c:	6a74      	ldr	r4, [r6, #36]	; 0x24
   eba9e:	b93c      	cbnz	r4, ebab0 <__pow5mult+0x38>
   ebaa0:	2010      	movs	r0, #16
   ebaa2:	f7fa fb07 	bl	e60b4 <malloc>
   ebaa6:	6270      	str	r0, [r6, #36]	; 0x24
   ebaa8:	6044      	str	r4, [r0, #4]
   ebaaa:	6084      	str	r4, [r0, #8]
   ebaac:	6004      	str	r4, [r0, #0]
   ebaae:	60c4      	str	r4, [r0, #12]
   ebab0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   ebab4:	f8d8 4008 	ldr.w	r4, [r8, #8]
   ebab8:	b94c      	cbnz	r4, ebace <__pow5mult+0x56>
   ebaba:	f240 2171 	movw	r1, #625	; 0x271
   ebabe:	4630      	mov	r0, r6
   ebac0:	f7ff ff40 	bl	eb944 <__i2b>
   ebac4:	2300      	movs	r3, #0
   ebac6:	f8c8 0008 	str.w	r0, [r8, #8]
   ebaca:	4604      	mov	r4, r0
   ebacc:	6003      	str	r3, [r0, #0]
   ebace:	f04f 0800 	mov.w	r8, #0
   ebad2:	07eb      	lsls	r3, r5, #31
   ebad4:	d50a      	bpl.n	ebaec <__pow5mult+0x74>
   ebad6:	4639      	mov	r1, r7
   ebad8:	4622      	mov	r2, r4
   ebada:	4630      	mov	r0, r6
   ebadc:	f7ff ff3b 	bl	eb956 <__multiply>
   ebae0:	4639      	mov	r1, r7
   ebae2:	4681      	mov	r9, r0
   ebae4:	4630      	mov	r0, r6
   ebae6:	f7ff fe50 	bl	eb78a <_Bfree>
   ebaea:	464f      	mov	r7, r9
   ebaec:	106d      	asrs	r5, r5, #1
   ebaee:	d00c      	beq.n	ebb0a <__pow5mult+0x92>
   ebaf0:	6820      	ldr	r0, [r4, #0]
   ebaf2:	b108      	cbz	r0, ebaf8 <__pow5mult+0x80>
   ebaf4:	4604      	mov	r4, r0
   ebaf6:	e7ec      	b.n	ebad2 <__pow5mult+0x5a>
   ebaf8:	4622      	mov	r2, r4
   ebafa:	4621      	mov	r1, r4
   ebafc:	4630      	mov	r0, r6
   ebafe:	f7ff ff2a 	bl	eb956 <__multiply>
   ebb02:	6020      	str	r0, [r4, #0]
   ebb04:	f8c0 8000 	str.w	r8, [r0]
   ebb08:	e7f4      	b.n	ebaf4 <__pow5mult+0x7c>
   ebb0a:	4638      	mov	r0, r7
   ebb0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   ebb10:	000efa40 	.word	0x000efa40

000ebb14 <__lshift>:
   ebb14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   ebb18:	460c      	mov	r4, r1
   ebb1a:	ea4f 1a62 	mov.w	sl, r2, asr #5
   ebb1e:	6926      	ldr	r6, [r4, #16]
   ebb20:	6849      	ldr	r1, [r1, #4]
   ebb22:	68a3      	ldr	r3, [r4, #8]
   ebb24:	4456      	add	r6, sl
   ebb26:	4607      	mov	r7, r0
   ebb28:	4691      	mov	r9, r2
   ebb2a:	1c75      	adds	r5, r6, #1
   ebb2c:	42ab      	cmp	r3, r5
   ebb2e:	da02      	bge.n	ebb36 <__lshift+0x22>
   ebb30:	3101      	adds	r1, #1
   ebb32:	005b      	lsls	r3, r3, #1
   ebb34:	e7fa      	b.n	ebb2c <__lshift+0x18>
   ebb36:	4638      	mov	r0, r7
   ebb38:	f7ff fdf2 	bl	eb720 <_Balloc>
   ebb3c:	2300      	movs	r3, #0
   ebb3e:	4680      	mov	r8, r0
   ebb40:	f100 0114 	add.w	r1, r0, #20
   ebb44:	461a      	mov	r2, r3
   ebb46:	4553      	cmp	r3, sl
   ebb48:	da03      	bge.n	ebb52 <__lshift+0x3e>
   ebb4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   ebb4e:	3301      	adds	r3, #1
   ebb50:	e7f9      	b.n	ebb46 <__lshift+0x32>
   ebb52:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
   ebb56:	6920      	ldr	r0, [r4, #16]
   ebb58:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   ebb5c:	f019 091f 	ands.w	r9, r9, #31
   ebb60:	f104 0114 	add.w	r1, r4, #20
   ebb64:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
   ebb68:	d014      	beq.n	ebb94 <__lshift+0x80>
   ebb6a:	f1c9 0c20 	rsb	ip, r9, #32
   ebb6e:	2200      	movs	r2, #0
   ebb70:	6808      	ldr	r0, [r1, #0]
   ebb72:	fa00 f009 	lsl.w	r0, r0, r9
   ebb76:	4302      	orrs	r2, r0
   ebb78:	469a      	mov	sl, r3
   ebb7a:	f843 2b04 	str.w	r2, [r3], #4
   ebb7e:	f851 2b04 	ldr.w	r2, [r1], #4
   ebb82:	458e      	cmp	lr, r1
   ebb84:	fa22 f20c 	lsr.w	r2, r2, ip
   ebb88:	d8f2      	bhi.n	ebb70 <__lshift+0x5c>
   ebb8a:	f8ca 2004 	str.w	r2, [sl, #4]
   ebb8e:	b142      	cbz	r2, ebba2 <__lshift+0x8e>
   ebb90:	1cb5      	adds	r5, r6, #2
   ebb92:	e006      	b.n	ebba2 <__lshift+0x8e>
   ebb94:	3b04      	subs	r3, #4
   ebb96:	f851 2b04 	ldr.w	r2, [r1], #4
   ebb9a:	f843 2f04 	str.w	r2, [r3, #4]!
   ebb9e:	458e      	cmp	lr, r1
   ebba0:	d8f9      	bhi.n	ebb96 <__lshift+0x82>
   ebba2:	3d01      	subs	r5, #1
   ebba4:	4638      	mov	r0, r7
   ebba6:	f8c8 5010 	str.w	r5, [r8, #16]
   ebbaa:	4621      	mov	r1, r4
   ebbac:	f7ff fded 	bl	eb78a <_Bfree>
   ebbb0:	4640      	mov	r0, r8
   ebbb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000ebbb6 <__mcmp>:
   ebbb6:	6903      	ldr	r3, [r0, #16]
   ebbb8:	690a      	ldr	r2, [r1, #16]
   ebbba:	1a9b      	subs	r3, r3, r2
   ebbbc:	b510      	push	{r4, lr}
   ebbbe:	d111      	bne.n	ebbe4 <__mcmp+0x2e>
   ebbc0:	0092      	lsls	r2, r2, #2
   ebbc2:	3014      	adds	r0, #20
   ebbc4:	3114      	adds	r1, #20
   ebbc6:	1883      	adds	r3, r0, r2
   ebbc8:	440a      	add	r2, r1
   ebbca:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   ebbce:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   ebbd2:	428c      	cmp	r4, r1
   ebbd4:	d002      	beq.n	ebbdc <__mcmp+0x26>
   ebbd6:	d307      	bcc.n	ebbe8 <__mcmp+0x32>
   ebbd8:	2001      	movs	r0, #1
   ebbda:	bd10      	pop	{r4, pc}
   ebbdc:	4298      	cmp	r0, r3
   ebbde:	d3f4      	bcc.n	ebbca <__mcmp+0x14>
   ebbe0:	2000      	movs	r0, #0
   ebbe2:	bd10      	pop	{r4, pc}
   ebbe4:	4618      	mov	r0, r3
   ebbe6:	bd10      	pop	{r4, pc}
   ebbe8:	f04f 30ff 	mov.w	r0, #4294967295
   ebbec:	bd10      	pop	{r4, pc}

000ebbee <__mdiff>:
   ebbee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   ebbf2:	460c      	mov	r4, r1
   ebbf4:	4607      	mov	r7, r0
   ebbf6:	4611      	mov	r1, r2
   ebbf8:	4620      	mov	r0, r4
   ebbfa:	4615      	mov	r5, r2
   ebbfc:	f7ff ffdb 	bl	ebbb6 <__mcmp>
   ebc00:	1e06      	subs	r6, r0, #0
   ebc02:	d108      	bne.n	ebc16 <__mdiff+0x28>
   ebc04:	4631      	mov	r1, r6
   ebc06:	4638      	mov	r0, r7
   ebc08:	f7ff fd8a 	bl	eb720 <_Balloc>
   ebc0c:	2301      	movs	r3, #1
   ebc0e:	6103      	str	r3, [r0, #16]
   ebc10:	6146      	str	r6, [r0, #20]
   ebc12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   ebc16:	bfbc      	itt	lt
   ebc18:	4623      	movlt	r3, r4
   ebc1a:	462c      	movlt	r4, r5
   ebc1c:	4638      	mov	r0, r7
   ebc1e:	6861      	ldr	r1, [r4, #4]
   ebc20:	bfba      	itte	lt
   ebc22:	461d      	movlt	r5, r3
   ebc24:	2601      	movlt	r6, #1
   ebc26:	2600      	movge	r6, #0
   ebc28:	f7ff fd7a 	bl	eb720 <_Balloc>
   ebc2c:	692b      	ldr	r3, [r5, #16]
   ebc2e:	60c6      	str	r6, [r0, #12]
   ebc30:	6926      	ldr	r6, [r4, #16]
   ebc32:	f105 0914 	add.w	r9, r5, #20
   ebc36:	3414      	adds	r4, #20
   ebc38:	eb04 0786 	add.w	r7, r4, r6, lsl #2
   ebc3c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
   ebc40:	f100 0514 	add.w	r5, r0, #20
   ebc44:	f04f 0c00 	mov.w	ip, #0
   ebc48:	f854 3b04 	ldr.w	r3, [r4], #4
   ebc4c:	f859 2b04 	ldr.w	r2, [r9], #4
   ebc50:	fa1c f183 	uxtah	r1, ip, r3
   ebc54:	fa1f fe82 	uxth.w	lr, r2
   ebc58:	0c12      	lsrs	r2, r2, #16
   ebc5a:	ebce 0101 	rsb	r1, lr, r1
   ebc5e:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
   ebc62:	eb03 4321 	add.w	r3, r3, r1, asr #16
   ebc66:	b289      	uxth	r1, r1
   ebc68:	ea4f 4c23 	mov.w	ip, r3, asr #16
   ebc6c:	45c8      	cmp	r8, r9
   ebc6e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   ebc72:	46a6      	mov	lr, r4
   ebc74:	f845 3b04 	str.w	r3, [r5], #4
   ebc78:	d8e6      	bhi.n	ebc48 <__mdiff+0x5a>
   ebc7a:	45be      	cmp	lr, r7
   ebc7c:	d20e      	bcs.n	ebc9c <__mdiff+0xae>
   ebc7e:	f85e 1b04 	ldr.w	r1, [lr], #4
   ebc82:	fa1c f281 	uxtah	r2, ip, r1
   ebc86:	1413      	asrs	r3, r2, #16
   ebc88:	eb03 4311 	add.w	r3, r3, r1, lsr #16
   ebc8c:	b292      	uxth	r2, r2
   ebc8e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   ebc92:	ea4f 4c23 	mov.w	ip, r3, asr #16
   ebc96:	f845 2b04 	str.w	r2, [r5], #4
   ebc9a:	e7ee      	b.n	ebc7a <__mdiff+0x8c>
   ebc9c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   ebca0:	b90b      	cbnz	r3, ebca6 <__mdiff+0xb8>
   ebca2:	3e01      	subs	r6, #1
   ebca4:	e7fa      	b.n	ebc9c <__mdiff+0xae>
   ebca6:	6106      	str	r6, [r0, #16]
   ebca8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000ebcac <__ulp>:
   ebcac:	4b12      	ldr	r3, [pc, #72]	; (ebcf8 <__ulp+0x4c>)
   ebcae:	ee10 2a90 	vmov	r2, s1
   ebcb2:	401a      	ands	r2, r3
   ebcb4:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
   ebcb8:	2b00      	cmp	r3, #0
   ebcba:	dd02      	ble.n	ebcc2 <__ulp+0x16>
   ebcbc:	2000      	movs	r0, #0
   ebcbe:	4619      	mov	r1, r3
   ebcc0:	e017      	b.n	ebcf2 <__ulp+0x46>
   ebcc2:	425b      	negs	r3, r3
   ebcc4:	151b      	asrs	r3, r3, #20
   ebcc6:	2b13      	cmp	r3, #19
   ebcc8:	f04f 0000 	mov.w	r0, #0
   ebccc:	f04f 0100 	mov.w	r1, #0
   ebcd0:	dc04      	bgt.n	ebcdc <__ulp+0x30>
   ebcd2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   ebcd6:	fa42 f103 	asr.w	r1, r2, r3
   ebcda:	e00a      	b.n	ebcf2 <__ulp+0x46>
   ebcdc:	3b14      	subs	r3, #20
   ebcde:	2b1e      	cmp	r3, #30
   ebce0:	f04f 0201 	mov.w	r2, #1
   ebce4:	bfda      	itte	le
   ebce6:	f1c3 031f 	rsble	r3, r3, #31
   ebcea:	fa02 f303 	lslle.w	r3, r2, r3
   ebcee:	4613      	movgt	r3, r2
   ebcf0:	4618      	mov	r0, r3
   ebcf2:	ec41 0b10 	vmov	d0, r0, r1
   ebcf6:	4770      	bx	lr
   ebcf8:	7ff00000 	.word	0x7ff00000

000ebcfc <__b2d>:
   ebcfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ebcfe:	6905      	ldr	r5, [r0, #16]
   ebd00:	f100 0614 	add.w	r6, r0, #20
   ebd04:	eb06 0585 	add.w	r5, r6, r5, lsl #2
   ebd08:	1f2f      	subs	r7, r5, #4
   ebd0a:	f855 4c04 	ldr.w	r4, [r5, #-4]
   ebd0e:	4620      	mov	r0, r4
   ebd10:	f7ff fdcb 	bl	eb8aa <__hi0bits>
   ebd14:	f1c0 0320 	rsb	r3, r0, #32
   ebd18:	280a      	cmp	r0, #10
   ebd1a:	600b      	str	r3, [r1, #0]
   ebd1c:	dc14      	bgt.n	ebd48 <__b2d+0x4c>
   ebd1e:	f1c0 0e0b 	rsb	lr, r0, #11
   ebd22:	fa24 f10e 	lsr.w	r1, r4, lr
   ebd26:	42be      	cmp	r6, r7
   ebd28:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   ebd2c:	bf34      	ite	cc
   ebd2e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   ebd32:	2100      	movcs	r1, #0
   ebd34:	3015      	adds	r0, #21
   ebd36:	fa04 f000 	lsl.w	r0, r4, r0
   ebd3a:	fa21 f10e 	lsr.w	r1, r1, lr
   ebd3e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   ebd42:	ea40 0201 	orr.w	r2, r0, r1
   ebd46:	e023      	b.n	ebd90 <__b2d+0x94>
   ebd48:	42be      	cmp	r6, r7
   ebd4a:	bf3a      	itte	cc
   ebd4c:	f1a5 0708 	subcc.w	r7, r5, #8
   ebd50:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   ebd54:	2100      	movcs	r1, #0
   ebd56:	380b      	subs	r0, #11
   ebd58:	d015      	beq.n	ebd86 <__b2d+0x8a>
   ebd5a:	4084      	lsls	r4, r0
   ebd5c:	f1c0 0520 	rsb	r5, r0, #32
   ebd60:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
   ebd64:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   ebd68:	42b7      	cmp	r7, r6
   ebd6a:	fa21 fe05 	lsr.w	lr, r1, r5
   ebd6e:	ea44 030e 	orr.w	r3, r4, lr
   ebd72:	bf8c      	ite	hi
   ebd74:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
   ebd78:	2400      	movls	r4, #0
   ebd7a:	fa01 f000 	lsl.w	r0, r1, r0
   ebd7e:	40ec      	lsrs	r4, r5
   ebd80:	ea40 0204 	orr.w	r2, r0, r4
   ebd84:	e004      	b.n	ebd90 <__b2d+0x94>
   ebd86:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
   ebd8a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   ebd8e:	460a      	mov	r2, r1
   ebd90:	ec43 2b10 	vmov	d0, r2, r3
   ebd94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ebd96 <__d2b>:
   ebd96:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   ebd9a:	460e      	mov	r6, r1
   ebd9c:	2101      	movs	r1, #1
   ebd9e:	ec59 8b10 	vmov	r8, r9, d0
   ebda2:	4615      	mov	r5, r2
   ebda4:	f7ff fcbc 	bl	eb720 <_Balloc>
   ebda8:	f3c9 540a 	ubfx	r4, r9, #20, #11
   ebdac:	4607      	mov	r7, r0
   ebdae:	f3c9 0313 	ubfx	r3, r9, #0, #20
   ebdb2:	b10c      	cbz	r4, ebdb8 <__d2b+0x22>
   ebdb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   ebdb8:	9301      	str	r3, [sp, #4]
   ebdba:	f1b8 0f00 	cmp.w	r8, #0
   ebdbe:	d019      	beq.n	ebdf4 <__d2b+0x5e>
   ebdc0:	a802      	add	r0, sp, #8
   ebdc2:	f840 8d08 	str.w	r8, [r0, #-8]!
   ebdc6:	f7ff fd90 	bl	eb8ea <__lo0bits>
   ebdca:	9b00      	ldr	r3, [sp, #0]
   ebdcc:	b148      	cbz	r0, ebde2 <__d2b+0x4c>
   ebdce:	9a01      	ldr	r2, [sp, #4]
   ebdd0:	f1c0 0120 	rsb	r1, r0, #32
   ebdd4:	fa02 f101 	lsl.w	r1, r2, r1
   ebdd8:	430b      	orrs	r3, r1
   ebdda:	40c2      	lsrs	r2, r0
   ebddc:	617b      	str	r3, [r7, #20]
   ebdde:	9201      	str	r2, [sp, #4]
   ebde0:	e000      	b.n	ebde4 <__d2b+0x4e>
   ebde2:	617b      	str	r3, [r7, #20]
   ebde4:	9b01      	ldr	r3, [sp, #4]
   ebde6:	61bb      	str	r3, [r7, #24]
   ebde8:	2b00      	cmp	r3, #0
   ebdea:	bf14      	ite	ne
   ebdec:	2102      	movne	r1, #2
   ebdee:	2101      	moveq	r1, #1
   ebdf0:	6139      	str	r1, [r7, #16]
   ebdf2:	e007      	b.n	ebe04 <__d2b+0x6e>
   ebdf4:	a801      	add	r0, sp, #4
   ebdf6:	f7ff fd78 	bl	eb8ea <__lo0bits>
   ebdfa:	9b01      	ldr	r3, [sp, #4]
   ebdfc:	617b      	str	r3, [r7, #20]
   ebdfe:	2101      	movs	r1, #1
   ebe00:	6139      	str	r1, [r7, #16]
   ebe02:	3020      	adds	r0, #32
   ebe04:	b134      	cbz	r4, ebe14 <__d2b+0x7e>
   ebe06:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   ebe0a:	4404      	add	r4, r0
   ebe0c:	6034      	str	r4, [r6, #0]
   ebe0e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   ebe12:	e009      	b.n	ebe28 <__d2b+0x92>
   ebe14:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   ebe18:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   ebe1c:	6030      	str	r0, [r6, #0]
   ebe1e:	6918      	ldr	r0, [r3, #16]
   ebe20:	f7ff fd43 	bl	eb8aa <__hi0bits>
   ebe24:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   ebe28:	6028      	str	r0, [r5, #0]
   ebe2a:	4638      	mov	r0, r7
   ebe2c:	b003      	add	sp, #12
   ebe2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000ebe32 <__ratio>:
   ebe32:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   ebe36:	4688      	mov	r8, r1
   ebe38:	4669      	mov	r1, sp
   ebe3a:	4681      	mov	r9, r0
   ebe3c:	f7ff ff5e 	bl	ebcfc <__b2d>
   ebe40:	a901      	add	r1, sp, #4
   ebe42:	4640      	mov	r0, r8
   ebe44:	ec55 4b10 	vmov	r4, r5, d0
   ebe48:	f7ff ff58 	bl	ebcfc <__b2d>
   ebe4c:	f8d9 3010 	ldr.w	r3, [r9, #16]
   ebe50:	f8d8 2010 	ldr.w	r2, [r8, #16]
   ebe54:	1a9a      	subs	r2, r3, r2
   ebe56:	e89d 000a 	ldmia.w	sp, {r1, r3}
   ebe5a:	1ac9      	subs	r1, r1, r3
   ebe5c:	ec57 6b10 	vmov	r6, r7, d0
   ebe60:	eb01 1342 	add.w	r3, r1, r2, lsl #5
   ebe64:	2b00      	cmp	r3, #0
   ebe66:	bfcc      	ite	gt
   ebe68:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
   ebe6c:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
   ebe70:	4632      	mov	r2, r6
   ebe72:	463b      	mov	r3, r7
   ebe74:	4620      	mov	r0, r4
   ebe76:	4629      	mov	r1, r5
   ebe78:	f7fd f962 	bl	e9140 <__aeabi_ddiv>
   ebe7c:	ec41 0b10 	vmov	d0, r0, r1
   ebe80:	b003      	add	sp, #12
   ebe82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000ebe86 <__copybits>:
   ebe86:	3901      	subs	r1, #1
   ebe88:	b510      	push	{r4, lr}
   ebe8a:	1149      	asrs	r1, r1, #5
   ebe8c:	6914      	ldr	r4, [r2, #16]
   ebe8e:	3101      	adds	r1, #1
   ebe90:	f102 0314 	add.w	r3, r2, #20
   ebe94:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   ebe98:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   ebe9c:	42a3      	cmp	r3, r4
   ebe9e:	4602      	mov	r2, r0
   ebea0:	d204      	bcs.n	ebeac <__copybits+0x26>
   ebea2:	f853 2b04 	ldr.w	r2, [r3], #4
   ebea6:	f840 2b04 	str.w	r2, [r0], #4
   ebeaa:	e7f7      	b.n	ebe9c <__copybits+0x16>
   ebeac:	2300      	movs	r3, #0
   ebeae:	428a      	cmp	r2, r1
   ebeb0:	d202      	bcs.n	ebeb8 <__copybits+0x32>
   ebeb2:	f842 3b04 	str.w	r3, [r2], #4
   ebeb6:	e7fa      	b.n	ebeae <__copybits+0x28>
   ebeb8:	bd10      	pop	{r4, pc}

000ebeba <__any_on>:
   ebeba:	f100 0214 	add.w	r2, r0, #20
   ebebe:	6900      	ldr	r0, [r0, #16]
   ebec0:	114b      	asrs	r3, r1, #5
   ebec2:	4298      	cmp	r0, r3
   ebec4:	b510      	push	{r4, lr}
   ebec6:	db0c      	blt.n	ebee2 <__any_on+0x28>
   ebec8:	dd0c      	ble.n	ebee4 <__any_on+0x2a>
   ebeca:	f011 011f 	ands.w	r1, r1, #31
   ebece:	d009      	beq.n	ebee4 <__any_on+0x2a>
   ebed0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   ebed4:	fa24 f001 	lsr.w	r0, r4, r1
   ebed8:	fa00 f101 	lsl.w	r1, r0, r1
   ebedc:	428c      	cmp	r4, r1
   ebede:	d10c      	bne.n	ebefa <__any_on+0x40>
   ebee0:	e000      	b.n	ebee4 <__any_on+0x2a>
   ebee2:	4603      	mov	r3, r0
   ebee4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   ebee8:	4293      	cmp	r3, r2
   ebeea:	d904      	bls.n	ebef6 <__any_on+0x3c>
   ebeec:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   ebef0:	2900      	cmp	r1, #0
   ebef2:	d0f9      	beq.n	ebee8 <__any_on+0x2e>
   ebef4:	e001      	b.n	ebefa <__any_on+0x40>
   ebef6:	2000      	movs	r0, #0
   ebef8:	bd10      	pop	{r4, pc}
   ebefa:	2001      	movs	r0, #1
   ebefc:	bd10      	pop	{r4, pc}

000ebefe <__env_lock>:
   ebefe:	4770      	bx	lr

000ebf00 <__env_unlock>:
   ebf00:	4770      	bx	lr

000ebf02 <link_code_end>:
	...

000ebf04 <dynalib_user>:
   ebf04:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   ebf14:	0000 0000 6576 7463 726f 3a3a 4d5f 725f     ....vector::_M_r
   ebf24:	6e61 6567 695f 736e 7265 0074 6c63 6569     ange_insert.clie
   ebf34:	746e 6320 6e6f 656e 7463 6465 0021 6c63     nt connected!.cl
   ebf44:	6569 746e 6420 7465 6365 6574 2164 6400     ient detected!.d
   ebf54:	206f 6577 7320 656c 7065 6820 7265 3f61     o we sleep hera?
   ebf64:	3300 3637 6262 6563 2d63 3633 3937 342d     .376bbcec-3679-4
   ebf74:	6630 2d63 6439 3532 352d 3730 6432 6538     0fc-9d25-5072d8e
   ebf84:	3932 3334 0033 6262 3535 3864 6437 392d     29433.bb55d87d-9
   ebf94:	3938 2d38 3334 6638 622d 6234 2d62 3232     898-438f-b4bb-22
   ebfa4:	3935 6366 3033 3663 6562 2d00 2d2d 2d2d     59fc30c6be.-----
   ebfb4:	4542 4947 204e 4543 5452 4649 4349 5441     BEGIN CERTIFICAT
   ebfc4:	2d45 2d2d 2d2d 0d20 4d0a 4949 6a46 4354     E----- ..MIIFjTC
   ebfd4:	4143 5733 4167 4977 4142 4967 4152 4f4e     CA3WgAwIBAgIRANO
   ebfe4:	6378 5969 4930 4c7a 3963 5541 556f 7253     xciY0IzLc9AUoUSr
   ebff4:	6e73 6f47 4477 5951 4b4a 5a6f 6849 6376     snGowDQYJKoZIhvc
   ec004:	414e 4551 424c 4151 0d77 540a 457a 4d4c     NAQELBQAw..TzELM
   ec014:	6b41 4147 5531 4245 4d68 5643 4d56 4b78     AkGA1UEBhMCVVMxK
   ec024:	4154 426e 4e67 4256 6f41 4954 6c45 6475     TAnBgNVBAoTIElud
   ec034:	5647 6279 566d 4930 4e46 596c 5633 6179     GVybmV0IFNlY3Vya
   ec044:	5258 4935 4a46 636c 5632 0d68 630a 4e6d     XR5IFJlc2Vh..cmN
   ec054:	496f 6445 6279 5633 4d77 5552 4577 5977     oIEdyb3VwMRUwEwY
   ec064:	5644 5151 4544 7877 554a 4a31 4948 4a46     DVQQDEwxJU1JHIFJ
   ec074:	6276 5133 5767 4544 4877 6368 4d4e 5954     vb3QgWDEwHhcNMTY
   ec084:	4d78 4144 4d32 5554 4d30 557a 0d31 570a     xMDA2MTU0MzU1..W
   ec094:	6368 4d4e 456a 4d78 4144 4d32 5554 4d30     hcNMjExMDA2MTU0M
   ec0a4:	557a 5731 426a 4d4b 7351 4377 5951 5644     zU1WjBKMQswCQYDV
   ec0b4:	5151 4547 4a77 5556 457a 4d57 5142 4147     QQGEwJVUzEWMBQGA
   ec0c4:	5531 4345 4d68 544e 5647 4a30 4d33 0d67     1UEChMNTGV0J3Mg.
   ec0d4:	520a 3557 636a 6c6e 6477 4544 4d6a 4543     .RW5jcnlwdDEjMCE
   ec0e4:	4147 5531 4145 4d78 5461 5647 4a30 4d33     GA1UEAxMaTGV0J3M
   ec0f4:	5267 3557 636a 6c6e 6477 4243 6442 5258     gRW5jcnlwdCBBdXR
   ec104:	626f 4a33 6470 6b48 5767 4d44 6777 4567     ob3JpdHkgWDMwggE
   ec114:	0d69 4d0a 3041 4347 7153 5347 6249 4433     i..MA0GCSqGSIb3D
   ec124:	4551 4142 5551 4141 4934 4442 4177 6777     QEBAQUAA4IBDwAwg
   ec134:	4567 414b 496f 4142 4351 3063 7a77 5777     gEKAoIBAQCc0wzwW
   ec144:	5575 5275 6437 5879 6554 7344 6832 4d6a     uUuR7dyXTeDs2hjM
   ec154:	724f 0d58 4e0a 5953 4a5a 4765 7639 586a     OrX..NSYZJeG9vjX
   ec164:	6378 494a 7476 6837 514c 5751 7172 345a     xcJIvt7hLQQWrqZ4
   ec174:	4331 6a46 7373 7253 6145 6349 6f4c 4e2b     1CFjssSrEaIcLo+N
   ec184:	3531 624f 707a 4a32 7578 6d6e 5942 2f42     15Obzp2JxunmBYB/
   ec194:	6b58 715a 0d66 380a 4239 5a34 4833 6149     XkZqf..89B4Z3HIa
   ec1a4:	3651 6b56 2f63 352b 6e70 5970 7844 7a49     Q6Vkc/+5pnpYDxIz
   ec1b4:	3748 544b 6358 4a53 314a 4748 7231 7572     H7KTXcSJJ1HG1rru
   ec1c4:	7765 4e65 4177 6e63 784b 7037 5877 7a71     eweNwAcnKx7pwXqz
   ec1d4:	726b 7672 4855 0d6c 4e0a 6970 7935 312f     krrvUHl..Npi5y/1
   ec1e4:	5074 5a4a 336f 4d79 5171 4170 684d 526e     tPJZo3yMqQpAMhnR
   ec1f4:	796e 2b48 6d6c 6872 5953 5152 5054 5832     nyH+lmrhSYRQTP2X
   ec204:	6770 666f 324c 6f2f 564f 6176 6947 4f66     pgofL2/oOVvaGifO
   ec214:	5046 6535 7247 4437 0d63 470a 3975 4472     FP5eGr7Dc..Gu9rD
   ec224:	555a 6657 5163 6f72 5747 6d79 5151 6432     ZUWfcQroGWymQQ2d
   ec234:	4259 7272 7245 477a 4235 654a 2b43 6c69     YBrrErzG5BJeC+il
   ec244:	386b 4971 5543 4270 5a4d 7730 414e 7a78     k8qICUpBMZ0wNAxz
   ec254:	3859 4f78 554a 7557 6771 0d7a 750a 5045     Y8xOJUWuqgz..uEP
   ec264:	7378 2f52 4d44 2b48 6569 4554 5054 3053     xsR/DMH+ieTETPS0
   ec274:	2b32 504f 3838 4e6a 7571 6b54 7878 2f61     2+OP88jNquTkxxa/
   ec284:	6a45 3051 5a64 5942 717a 7176 4b45 6262     EjQ0dZBYzqvqEKbb
   ec294:	4355 4438 6659 4f63 4154 4d67 0d42 410a     UC8DYfcOTAgMB..A
   ec2a4:	4741 676a 4667 4d6e 4949 5942 417a 424f     AGjggFnMIIBYzAOB
   ec2b4:	4e67 4856 3851 4142 3866 4245 4d41 4143     gNVHQ8BAf8EBAMCA
   ec2c4:	5959 4577 5967 5644 3052 4154 4851 422f     YYwEgYDVR0TAQH/B
   ec2d4:	6741 4277 4567 2f42 4977 4142 4244 0d55     AgwBgEB/wIBADBU.
   ec2e4:	420a 4e67 4856 4153 5445 4254 4d4c 6741     .BgNVHSAETTBLMAg
   ec2f4:	4247 656d 4442 4541 4143 4154 422f 7367     GBmeBDAECATA/Bgs
   ec304:	4272 4567 4145 4c59 4566 4577 4142 4154     rBgEEAYLfEwEBATA
   ec314:	4d77 3443 4347 7343 4147 5551 4246 4977     wMC4GCCsGAQUFBwI
   ec324:	0d42 460a 4a69 646f 5248 4f77 3869 5976     B..FiJodHRwOi8vY
   ec334:	4233 4c7a 4a6e 6276 5133 6574 4544 6275     3BzLnJvb3QteDEub
   ec344:	5647 6330 5632 5975 4a33 6335 5148 6275     GV0c2VuY3J5cHQub
   ec354:	4a33 4d6e 3042 4147 5531 4464 5167 4257     3JnMB0GA1UdDgQWB
   ec364:	5342 0d6f 530a 706d 426a 3348 7564 6275     BSo..SmpjBH3duub
   ec374:	4f52 6562 526d 5857 3876 6a36 6f73 4154     RObemRWXv86jsoTA
   ec384:	427a 4e67 4856 3852 4c45 4144 4d71 6943     zBgNVHR8ELDAqMCi
   ec394:	4a67 4171 686b 4a69 646f 5248 4f77 3869     gJqAkhiJodHRwOi8
   ec3a4:	5976 4a33 0d73 4c0a 4a6e 6276 5133 6574     vY3Js..LnJvb3Qte
   ec3b4:	4544 6275 5647 6330 5632 5975 4a33 6335     DEubGV0c2VuY3J5c
   ec3c4:	5148 6275 4a33 4d6e 4948 4347 7343 4147     HQub3JnMHIGCCsGA
   ec3d4:	5551 4246 4577 4242 5947 5a77 4144 4277     QUFBwEBBGYwZDAwB
   ec3e4:	6767 4272 4567 0d46 420a 6351 4177 5959     ggrBgEF..BQcwAYY
   ec3f4:	616b 5248 6330 6f44 4c76 3932 636a 4133     kaHR0cDovL29jc3A
   ec404:	6375 396d 6476 3143 4d34 3553 5a73 5258     ucm9vdC14MS5sZXR
   ec414:	5a7a 3557 636a 6c6e 6477 3543 6376 636d     zZW5jcnlwdC5vcmc
   ec424:	4d76 4144 4347 7343 0d47 410a 5551 4246     vMDAGCCsG..AQUFB
   ec434:	417a 6843 5269 646f 5248 4f77 3869 5976     zAChiRodHRwOi8vY
   ec444:	5632 6479 3543 6279 3932 4c30 6758 4c78     2VydC5yb290LXgxL
   ec454:	786d 646c 4e48 626c 4e6d 6579 4258 4c30     mxldHNlbmNyeXB0L
   ec464:	396d 5a79 3879 4877 5977 0d44 560a 3052     m9yZy8wHwYD..VR0
   ec474:	426a 6742 4677 416f 6555 5262 355a 756e     jBBgwFoAUebRZ5nu
   ec484:	3532 5165 6342 4134 6949 674d 5761 6250     25eQBc4AIiMgaWPb
   ec494:	6d70 3432 4477 5951 4b4a 5a6f 6849 6376     pm24wDQYJKoZIhvc
   ec4a4:	414e 4551 424c 4151 6744 4967 0d42 410a     NAQELBQADggIB..A
   ec4b4:	6e42 6450 4153 4c30 7154 526d 2f66 3151     BnPdSA0LTqmRf/Q1
   ec4c4:	6165 324d 4c6a 6e6f 3447 5162 4564 716e     eaM2jLonG4bQdEnq
   ec4d4:	4a4f 3851 436e 7871 654f 5254 5472 456f     OJQ8nCqxOeTRrToE
   ec4e4:	744b 5477 2b2b 3633 5467 6c53 4742 0d78     KtwT++36gTSlBGx.
   ec4f4:	410a 352f 7564 3874 6a32 514a 6a32 4e78     .A/5dut82jJQ2jxN
   ec504:	5238 3849 394c 4651 7258 6957 7834 6e58     8RI8L9QFXrWi4xXn
   ec514:	3241 7145 3141 7930 486a 5269 4836 6339     A2EqA10yjHiR6H9c
   ec524:	366a 464d 4f69 626e 4935 316e 5765 5273     j6MFiOnb5In1eWsR
   ec534:	0d4d 550a 324d 3376 3965 4e74 4373 6741     M..UM2v3e9tNsCAg
   ec544:	7542 506b 4148 3167 516c 3068 7237 4676     BukPHAg1lQh07rvF
   ec554:	6d4b 422f 397a 4342 616a 6f78 4172 494c     Km/Bz9BCjaxorALI
   ec564:	554e 5a66 4439 3644 6a34 6932 4c67 7849     NUfZ9DD64j2igLIx
   ec574:	656c 0d32 440a 7850 3857 4964 462f 6c32     le2..DPxW8dI/F2l
   ec584:	486f 6a4d 5a58 716a 3847 6b52 5a71 6455     oHMjXZjqG8RkqZUd
   ec594:	786f 4974 3544 392b 4630 7367 4947 6b66     oxtID5+90FgsGIfk
   ec5a4:	704d 6771 5352 3530 3466 507a 4362 4845     MpqgRS05f4zPbCEH
   ec5b4:	4371 6c58 0d31 650a 354f 7948 4c45 6754     qCXl1..eO5HyELTg
   ec5c4:	5663 4c6c 5858 4451 4167 6e57 7a52 7475     cVlLXXQDgAWnRzut
   ec5d4:	6831 4a46 6365 597a 7431 516a 6e51 366f     1hFJeczY1tjQQno6
   ec5e4:	3666 2b73 4d6e 6479 4e4c 3632 7557 3455     f6s+nMydLN26WuU4
   ec5f4:	3373 5955 4f76 0d75 4f0a 5573 5278 4a6c     s3UYvOu..OsUxRlJ
   ec604:	3775 5354 4852 4471 3343 536c 3545 6758     u7TSRHqDC3lSE5Xg
   ec614:	5667 7a6b 6164 6b50 4b75 5147 4762 6e70     gVkzdaPkuKGQbGpn
   ec624:	2b79 3130 342f 6837 5866 4e58 3742 6e48     y+01/47hfXXNB7Hn
   ec634:	5774 5a4e 4e36 5632 0d77 700a 4737 4f36     tWNZ6N2Vw..p7G6O
   ec644:	5966 592b 7251 775a 6149 6d51 7268 7149     fY+YQrZwIaQmhrIq
   ec654:	5a4a 6975 7367 6272 3365 2b57 6467 356e     JZuigsrbe3W+gdn5
   ec664:	6b79 3945 4b2b 3079 6756 5556 6673 6f78     ykE9+Ky0VgVUsfxo
   ec674:	3235 776d 5946 3173 4b4a 0d59 320a 4750     52mwFYs1JKY..2PG
   ec684:	7544 7857 4d38 4436 536c 7136 6b51 4876     DuWx8M6DlS6qQkvH
   ec694:	5261 6f55 4630 644d 5438 5373 626c 3046     aRUo0FMd8TsSlbF0
   ec6a4:	762f 3639 7135 4647 684b 4453 5165 4d6f     /v965qGFKhSDeQoM
   ec6b4:	5970 776e 6d63 6951 526c 2f68 0d30 610a     pYnwcmQilRh/0..a
   ec6c4:	4c79 6854 486c 4e4c 3138 5367 4a6b 566a     yLThlHLN81gSkJjV
   ec6d4:	5072 3049 3859 4378 5056 3442 7774 3162     rPI0Y8xCVPB4twb1
   ec6e4:	4650 6455 6632 4d50 7333 3141 4a74 3338     PFUd2fPM3sA1tJ83
   ec6f4:	5a73 7635 7638 4667 3276 6f79 4b66 0d52     sZ5v8vgFv2yofKR.
   ec704:	500a 3042 3674 7a4a 4155 3138 536d 4d71     .PB0t6JzUA81mSqM
   ec714:	6b33 6c78 6535 492b 775a 5968 7941 304f     3kxl5e+IZwhYAyO0
   ec724:	544f 3367 662f 3873 7148 5447 4b4e 3964     OTg3/fs8HqGTNKd9
   ec734:	7142 556f 5377 4252 707a 3630 4d4a 3567     BqoUwSRBzp06JMg5
   ec744:	0d62 720a 4355 7747 4362 4455 3049 786d     b..rUCGwbCUDI0mx
   ec754:	6461 334a 7a42 5734 5278 6636 4e79 4270     adJ3Bz4WxR6fyNpB
   ec764:	324b 4179 6e69 4557 6973 786b 4571 0d74     K2yAinWEsikxqEt.
   ec774:	2d0a 2d2d 2d2d 4e45 2044 4543 5452 4649     .-----END CERTIF
   ec784:	4349 5441 2d45 2d2d 2d2d 0020 6f69 2d74     ICATE----- .iot-
   ec794:	6166 6963 6c61 632d 6d6f 6170 6572 742d     facial-compare-t
   ec7a4:	7365 2e74 6f63 6e67 7469 7669 7365 7265     est.cognitiveser
   ec7b4:	6976 6563 2e73 7a61 7275 2e65 6f63 006d     vices.azure.com.
   ec7c4:	662f 6361 2f65 3176 302e 762f 7265 6669     /face/v1.0/verif
   ec7d4:	0079 3362 3132 3434 6261 6661 3766 3034     y.b32144abaff740
   ec7e4:	6363 3061 6331 3266 3530 3438 6265 3038     cca01cf20584eb80
   ec7f4:	6430 2f00 6166 6563 762f 2e31 2f30 6564     0d./face/v1.0/de
   ec804:	6574 7463 723f 7465 7275 466e 6361 4965     tect?returnFaceI
   ec814:	3d64 7274 6575 7226 7465 7275 466e 6361     d=true&returnFac
   ec824:	4c65 6e61 6d64 7261 736b 663d 6c61 6573     eLandmarks=false
   ec834:	7226 6365 676f 696e 6974 6e6f 6f4d 6564     &recognitionMode
   ec844:	3d6c 6572 6f63 6e67 7469 6f69 5f6e 3330     l=recognition_03
   ec854:	7226 7465 7275 526e 6365 676f 696e 6974     &returnRecogniti
   ec864:	6e6f 6f4d 6564 3d6c 6166 736c 2665 6564     onModel=false&de
   ec874:	6574 7463 6f69 4d6e 646f 6c65 643d 7465     tectionModel=det
   ec884:	6365 6974 6e6f 305f 0032 2020 2021 2500     ection_02.  ! .%
   ec894:	2e64 6425 252e 2e64 6425 4700 5445 5000     d.%d.%d.%d.GET.P
   ec8a4:	534f 0054 5550 0054 4544 454c 4554 5000     OST.PUT.DELETE.P
   ec8b4:	5441 4843 6100 7070 696c 6163 6974 6e6f     ATCH.application
   ec8c4:	6a2f 6f73 006e 7061 6c70 6369 7461 6f69     /json.applicatio
   ec8d4:	2f6e 636f 6574 2d74 7473 6572 6d61 7b00     n/octet-stream.{
   ec8e4:	2200 6166 6563 6449 3a22 0022 2c22 7022     ."faceId":".","p
   ec8f4:	7265 6f73 496e 2264 223a 2200 222c 6550     ersonId":".","Pe
   ec904:	7372 6e6f 7247 756f 4970 2264 223a 2200     rsonGroupId":"."
   ec914:	0d7d 0d0a 000a 4820 5454 2f50 2e31 0030     }..... HTTP/1.0.
   ec924:	634f 2d70 7041 6d69 532d 6275 6373 6972     Ocp-Apim-Subscri
   ec934:	7470 6f69 2d6e 654b 3a79 4300 6e6f 6574     ption-Key:.Conte
   ec944:	746e 542d 7079 3a65 4800 736f 3a74 4300     nt-Type:.Host:.C
   ec954:	6e6f 6574 746e 4c2d 6e65 7467 3a68 6600     ontent-Length:.f
   ec964:	6361 4965 0064 7369 6449 6e65 6974 6163     aceId.isIdentica
   ec974:	006c 6f63 666e 6469 6e65 6563 6200 7361     l.confidence.bas
   ec984:	6369 735f 7274 6e69 3a67 5f3a 5f4d 6f63     ic_string::_M_co
   ec994:	736e 7274 6375 2074 756e 6c6c 6e20 746f     nstruct null not
   ec9a4:	7620 6c61 6469 0000                          valid..

000ec9ac <_ZL1K>:
   ec9ac:	2f98 428a 4491 7137 fbcf b5c0 dba5 e9b5     ./.B.D7q........
   ec9bc:	c25b 3956 11f1 59f1 82a4 923f 5ed5 ab1c     [.V9...Y..?..^..
   ec9cc:	aa98 d807 5b01 1283 85be 2431 7dc3 550c     .....[....1$.}.U
   ec9dc:	5d74 72be b1fe 80de 06a7 9bdc f174 c19b     t].r........t...
   ec9ec:	69c1 e49b 4786 efbe 9dc6 0fc1 a1cc 240c     .i...G.........$
   ec9fc:	2c6f 2de9 84aa 4a74 a9dc 5cb0 88da 76f9     o,.-..tJ...\...v
   eca0c:	5152 983e c66d a831 27c8 b003 7fc7 bf59     RQ>.m.1..'....Y.
   eca1c:	0bf3 c6e0 9147 d5a7 6351 06ca 2967 1429     ....G...Qc..g)).
   eca2c:	0a85 27b7 2138 2e1b 6dfc 4d2c 0d13 5338     ...'8!...m,M..8S
   eca3c:	7354 650a 0abb 766a c92e 81c2 2c85 9272     Ts.e..jv.....,r.
   eca4c:	e8a1 a2bf 664b a81a 8b70 c24b 51a3 c76c     ....Kf..p.K..Ql.
   eca5c:	e819 d192 0624 d699 3585 f40e a070 106a     ....$....5..p.j.
   eca6c:	c116 19a4 6c08 1e37 774c 2748 bcb5 34b0     .....l7.LwH'...4
   eca7c:	0cb3 391c aa4a 4ed8 ca4f 5b9c 6ff3 682e     ...9J..NO..[.o.h
   eca8c:	82ee 748f 636f 78a5 7814 84c8 0208 8cc7     ...toc.x.x......
   eca9c:	fffa 90be 6ceb a450 a3f7 bef9 78f2 c671     .....lP......xq.
   ecaac:	862a 8648 0df7 0101 0008 2b20 0020 202c     *.H....... + ., 
   ecabc:	2500 3d73 3f00 3d3f 2500 3230 2558 0073     .%s=.??=.%02X%s.
   ecacc:	2e2e 2e2e 3f00 3f3f 2000 2528 2c73 4d20     .....???. (%s, M
   ecadc:	4647 2d31 7325 202c 7830 3025 5832 0029     GF1-%s, 0x%02X).
   ecaec:	7325 6b20 7965 7320 7a69 0065               %s key size.

000ecaf8 <mbedtls_sha1_info>:
   ecaf8:	0004 0000 d20c 000e 0014 0000 0040 0000     ............@...
   ecb08:	6f8d 000d 6f89 000d 6f85 000d b1bd 000d     .o...o...o......
   ecb18:	6f6f 000d 6f5d 000d 6f59 000d 6f55 000d     oo..]o..Yo..Uo..

000ecb28 <mbedtls_sha224_info>:
   ecb28:	0005 0000 d237 000e 001c 0000 0040 0000     ....7.......@...
   ecb38:	6fd5 000d 6fd1 000d 6fcd 000d 6fc1 000d     .o...o...o...o..
   ecb48:	6fab 000d 6f99 000d 6f95 000d 6f91 000d     .o...o...o...o..

000ecb58 <mbedtls_sha384_info>:
   ecb58:	0007 0000 d291 000e 0030 0000 0080 0000     ........0.......
   ecb68:	7025 000d 7021 000d 701d 000d 7011 000d     %p..!p...p...p..
   ecb78:	6ffb 000d 6fe9 000d 6fe5 000d 6fe1 000d     .o...o...o...o..

000ecb88 <mbedtls_sha512_info>:
   ecb88:	0008 0000 d2be 000e 0040 0000 0080 0000     ........@.......
   ecb98:	702b 000d 7021 000d 701d 000d 7017 000d     +p..!p...p...p..
   ecba8:	6ffb 000d 6fe9 000d 6fe5 000d 6fe1 000d     .o...o...o...o..

000ecbb8 <mbedtls_sha256_info>:
   ecbb8:	0006 0000 d264 000e 0020 0000 0040 0000     ....d... ...@...
   ecbc8:	6fdb 000d 6fd1 000d 6fcd 000d 6fc7 000d     .o...o...o...o..
   ecbd8:	6fab 000d 6f99 000d 6f95 000d 6f91 000d     .o...o...o...o..
   ecbe8:	6573 7063 3532 7236 0031 0000               secp256r1...

000ecbf4 <_ZL20ecp_supported_curves>:
   ecbf4:	0003 0017 0100 0000 cbe8 000e 0000 0000     ................
	...

000ecc0c <_ZL18oid_x520_attr_type>:
   ecc0c:	d4c1 000e 0003 0000 d4c5 000e d4d6 000e     ................
   ecc1c:	e362 000e d4e2 000e 0003 0000 d4e6 000e     b...............
   ecc2c:	d4f8 000e d07d 000e d500 000e 0003 0000     ....}...........
   ecc3c:	d504 000e d513 000e d51c 000e d51e 000e     ................
   ecc4c:	0003 0000 d522 000e d52e 000e f680 000e     ...."...........
   ecc5c:	d534 000e 0003 0000 d538 000e d54f 000e     4.......8...O...
   ecc6c:	d55c 000e d55e 000e 0003 0000 d562 000e     \...^.......b...
   ecc7c:	d57f 000e d588 000e d58b 000e 0009 0000     ................
   ecc8c:	d595 000e d5a2 000e d595 000e d5b1 000e     ................
   ecc9c:	0003 0000 d5b5 000e d5c8 000e d5bb 000e     ................
   eccac:	d5d6 000e 0003 0000 d5da 000e d5ee 000e     ................
   eccbc:	d5e0 000e d5fd 000e 0003 0000 d601 000e     ................
   ecccc:	d612 000e d607 000e d61e 000e 0003 0000     ................
   eccdc:	d622 000e d630 000e d638 000e d63b 000e     "...0...8...;...
   eccec:	0003 0000 d63f 000e d64f 000e d65a 000e     ....?...O...Z...
   eccfc:	d65d 000e 0003 0000 d661 000e d670 000e     ].......a...p...
   ecd0c:	d667 000e d679 000e 0003 0000 d67d 000e     g...y.......}...
   ecd1c:	d697 000e d683 000e d6ac 000e 0003 0000     ................
   ecd2c:	d6b0 000e d6bc 000e d6b6 000e d6c2 000e     ................
   ecd3c:	0003 0000 d6c6 000e d6d8 000e d6cc 000e     ................
   ecd4c:	d6f5 000e 0003 0000 d6f9 000e d709 000e     ................
   ecd5c:	d6ff 000e d713 000e 000a 0000 d71e 000e     ................
   ecd6c:	d731 000e d742 000e d745 000e 0003 0000     1...B...E.......
   ecd7c:	d749 000e d760 000e d74f 000e 0000 0000     I...`...O.......
	...

000ecd9c <_ZL17oid_ext_key_usage>:
   ecd9c:	d2da 000e 0008 0000 d2e3 000e d2f4 000e     ................
   ecdac:	d312 000e 0008 0000 d31b 000e d32c 000e     ............,...
   ecdbc:	d34a 000e 0008 0000 d353 000e d365 000e     J.......S...e...
   ecdcc:	d372 000e 0008 0000 d37b 000e d391 000e     r.......{.......
   ecddc:	d3a3 000e 0008 0000 d3ac 000e d3bf 000e     ................
   ecdec:	d3cd 000e 0008 0000 d3d6 000e d3e8 000e     ................
	...

000ece0c <_ZL10oid_pk_alg>:
   ece0c:	d088 000e 0009 0000 d092 000e d0a0 000e     ................
   ece1c:	0001 0000 d0a4 000e 0007 0000 d0ac 000e     ................
   ece2c:	d0bb 000e 0002 0000 d0ca 000e 0005 0000     ................
   ece3c:	d0d0 000e d0d8 000e 0003 0000 0000 0000     ................
	...

000ece5c <_ZL14oid_cipher_alg>:
   ece5c:	d04f 000e 0005 0000 d055 000e cf2b 000e     O.......U...+...
   ece6c:	0021 0000 d05c 000e 0008 0000 d065 000e     !...\.......e...
   ece7c:	d072 000e 0025 0000 0000 0000 0000 0000     r...%...........
	...

000ece98 <_ZL11oid_ecp_grp>:
   ece98:	d07f 000e 0008 0000 cbe8 000e cbe8 000e     ................
   ecea8:	0003 0000 0000 0000 0000 0000 0000 0000     ................
	...
   ecec0:	862a 8648 0df7 0c01 0301 7000 6562 6957     *.H........pbeWi
   eced0:	6874 4853 4141 646e 2d33 654b 5479 6972     thSHAAnd3-KeyTri
   ecee0:	6c70 4465 5345 432d 4342 5000 4542 7720     pleDES-CBC.PBE w
   ecef0:	7469 2068 4853 3141 6120 646e 3320 4b2d     ith SHA1 and 3-K
   ecf00:	7965 3320 4544 0053 862a 8648 0df7 0c01     ey 3DES.*.H.....
   ecf10:	0401 7000 6562 6957 6874 4853 4141 646e     ...pbeWithSHAAnd
   ecf20:	2d32 654b 5479 6972 6c70 4465 5345 432d     2-KeyTripleDES-C
   ecf30:	4342 5000 4542 7720 7469 2068 4853 3141     BC.PBE with SHA1
   ecf40:	6120 646e 3220 4b2d 7965 3320 4544 0053      and 2-Key 3DES.
   ecf50:	862a 8648 0df7 0702 6800 616d 5363 4148     *.H......hmacSHA
   ecf60:	0031 4d48 4341 532d 4148 312d 2a00 4886     1.HMAC-SHA-1.*.H
   ecf70:	f786 020d 0008 6d68 6361 4853 3241 3432     ......hmacSHA224
   ecf80:	4800 414d 2d43 4853 2d41 3232 0034 862a     .HMAC-SHA-224.*.
   ecf90:	8648 0df7 0902 6800 616d 5363 4148 3532     H......hmacSHA25
   ecfa0:	0036 4d48 4341 532d 4148 322d 3635 2a00     6.HMAC-SHA-256.*
   ecfb0:	4886 f786 020d 000a 6d68 6361 4853 3341     .H......hmacSHA3
   ecfc0:	3438 4800 414d 2d43 4853 2d41 3833 0034     84.HMAC-SHA-384.
   ecfd0:	862a 8648 0df7 0b02 6800 616d 5363 4148     *.H......hmacSHA
   ecfe0:	3135 0032 4d48 4341 532d 4148 352d 3231     512.HMAC-SHA-512
   ecff0:	2b00 030e 1a02 6900 2d64 6873 3161 6000     .+.....id-sha1.`
   ed000:	4886 6501 0403 0402 6900 2d64 6873 3261     .H.e.....id-sha2
   ed010:	3432 6000 4886 6501 0403 0102 6900 2d64     24.`.H.e.....id-
   ed020:	6873 3261 3635 6000 4886 6501 0403 0202     sha256.`.H.e....
   ed030:	6900 2d64 6873 3361 3438 6000 4886 6501     .id-sha384.`.H.e
   ed040:	0403 0302 6900 2d64 6873 3561 3231 2b00     .....id-sha512.+
   ed050:	030e 0702 6400 7365 4243 0043 862a 8648     .....desCBC.*.H.
   ed060:	0df7 0703 6400 7365 652d 6564 2d33 6263     .....des-ede3-cb
   ed070:	0063 4544 2d53 4445 3345 432d 4342 2a00     c.DES-EDE3-CBC.*
   ed080:	4886 3dce 0103 0007 862a 8648 0df7 0101     .H.=....*.H.....
   ed090:	0001 7372 4561 636e 7972 7470 6f69 006e     ..rsaEncryption.
   ed0a0:	5352 0041 862a ce48 023d 0001 6469 652d     RSA.*.H.=...id-e
   ed0b0:	5063 6275 696c 4b63 7965 4700 6e65 7265     cPublicKey.Gener
   ed0c0:	6369 4520 2043 656b 0079 812b 0104 000c     ic EC key.+.....
   ed0d0:	6469 652d 4463 0048 4345 6b20 7965 6620     id-ecDH.EC key f
   ed0e0:	726f 4520 4443 0048 862a 8648 0df7 0101     or ECDH.*.H.....
   ed0f0:	0005 6873 2d61 5731 7469 5268 4153 6e45     ..sha-1WithRSAEn
   ed100:	7263 7079 6974 6e6f 5200 4153 7720 7469     cryption.RSA wit
   ed110:	2068 4853 3141 2a00 4886 f786 010d 0e01     h SHA1.*.H......
   ed120:	7300 6168 3232 5734 7469 5268 4153 6e45     .sha224WithRSAEn
   ed130:	7263 7079 6974 6e6f 5200 4153 7720 7469     cryption.RSA wit
   ed140:	2068 4853 2d41 3232 0034 862a 8648 0df7     h SHA-224.*.H...
   ed150:	0101 000b 6873 3261 3635 6957 6874 5352     ....sha256WithRS
   ed160:	4541 636e 7972 7470 6f69 006e 5352 2041     AEncryption.RSA 
   ed170:	6977 6874 5320 4148 322d 3635 2a00 4886     with SHA-256.*.H
   ed180:	f786 010d 0c01 7300 6168 3833 5734 7469     .......sha384Wit
   ed190:	5268 4153 6e45 7263 7079 6974 6e6f 5200     hRSAEncryption.R
   ed1a0:	4153 7720 7469 2068 4853 2d41 3833 0034     SA with SHA-384.
   ed1b0:	862a 8648 0df7 0101 000d 6873 3561 3231     *.H.......sha512
   ed1c0:	6957 6874 5352 4541 636e 7972 7470 6f69     WithRSAEncryptio
   ed1d0:	006e 5352 2041 6977 6874 5320 4148 352d     n.RSA with SHA-5
   ed1e0:	3231 2b00 030e 1d02 2a00 4886 3dce 0104     12.+.....*.H.=..
   ed1f0:	6500 6463 6173 772d 7469 2d68 4853 3141     .ecdsa-with-SHA1
   ed200:	4500 4443 4153 7720 7469 2068 4853 3141     .ECDSA with SHA1
   ed210:	2a00 4886 3dce 0304 0001 6365 7364 2d61     .*.H.=....ecdsa-
   ed220:	6977 6874 532d 4148 3232 0034 4345 5344     with-SHA224.ECDS
   ed230:	2041 6977 6874 5320 4148 3232 0034 862a     A with SHA224.*.
   ed240:	ce48 043d 0203 6500 6463 6173 772d 7469     H.=....ecdsa-wit
   ed250:	2d68 4853 3241 3635 4500 4443 4153 7720     h-SHA256.ECDSA w
   ed260:	7469 2068 4853 3241 3635 2a00 4886 3dce     ith SHA256.*.H.=
   ed270:	0304 0003 6365 7364 2d61 6977 6874 532d     ....ecdsa-with-S
   ed280:	4148 3833 0034 4345 5344 2041 6977 6874     HA384.ECDSA with
   ed290:	5320 4148 3833 0034 862a ce48 043d 0403      SHA384.*.H.=...
   ed2a0:	6500 6463 6173 772d 7469 2d68 4853 3541     .ecdsa-with-SHA5
   ed2b0:	3231 4500 4443 4153 7720 7469 2068 4853     12.ECDSA with SH
   ed2c0:	3541 3231 2a00 4886 f786 010d 0a01 5200     A512.*.H.......R
   ed2d0:	4153 5353 2d41 5350 0053 062b 0501 0705     SASSA-PSS.+.....
   ed2e0:	0103 6900 2d64 706b 732d 7265 6576 4172     ...id-kp-serverA
   ed2f0:	7475 0068 4c54 2053 6557 2062 6553 7672     uth.TLS Web Serv
   ed300:	7265 4120 7475 6568 746e 6369 7461 6f69     er Authenticatio
   ed310:	006e 062b 0501 0705 0203 6900 2d64 706b     n.+........id-kp
   ed320:	632d 696c 6e65 4174 7475 0068 4c54 2053     -clientAuth.TLS 
   ed330:	6557 2062 6c43 6569 746e 4120 7475 6568     Web Client Authe
   ed340:	746e 6369 7461 6f69 006e 062b 0501 0705     ntication.+.....
   ed350:	0303 6900 2d64 706b 632d 646f 5365 6769     ...id-kp-codeSig
   ed360:	696e 676e 4300 646f 2065 6953 6e67 6e69     ning.Code Signin
   ed370:	0067 062b 0501 0705 0403 6900 2d64 706b     g.+........id-kp
   ed380:	652d 616d 6c69 7250 746f 6365 6974 6e6f     -emailProtection
   ed390:	4500 6d2d 6961 206c 7250 746f 6365 6974     .E-mail Protecti
   ed3a0:	6e6f 2b00 0106 0505 0307 0008 6469 6b2d     on.+........id-k
   ed3b0:	2d70 6974 656d 7453 6d61 6970 676e 5400     p-timeStamping.T
   ed3c0:	6d69 2065 7453 6d61 6970 676e 2b00 0106     ime Stamping.+..
   ed3d0:	0505 0307 0009 6469 6b2d 2d70 434f 5053     ......id-kp-OCSP
   ed3e0:	6953 6e67 6e69 0067 434f 5053 5320 6769     Signing.OCSP Sig
   ed3f0:	696e 676e 5500 131d 6900 2d64 6563 622d     ning.U...id-ce-b
   ed400:	7361 6369 6f43 736e 7274 6961 746e 0073     asicConstraints.
   ed410:	6142 6973 2063 6f43 736e 7274 6961 746e     Basic Constraint
   ed420:	0073 1d55 000f 6469 632d 2d65 656b 5579     s.U...id-ce-keyU
   ed430:	6173 6567 5500 251d 6900 2d64 6563 652d     sage.U.%.id-ce-e
   ed440:	7478 654b 5579 6173 6567 4500 7478 6e65     xtKeyUsage.Exten
   ed450:	6564 2064 654b 2079 7355 6761 0065 1d55     ded Key Usage.U.
   ed460:	0011 6469 632d 2d65 7573 6a62 6365 4174     ..id-ce-subjectA
   ed470:	746c 614e 656d 5300 6275 656a 7463 4120     ltName.Subject A
   ed480:	746c 4e20 6d61 0065 8660 0148 f886 0142     lt Name.`.H...B.
   ed490:	0001 6469 6e2d 7465 6373 7061 2d65 6563     ..id-netscape-ce
   ed4a0:	7472 7974 6570 4e00 7465 6373 7061 2065     rttype.Netscape 
   ed4b0:	6543 7472 6669 6369 7461 2065 7954 6570     Certificate Type
   ed4c0:	5500 0304 6900 2d64 7461 632d 6d6f 6f6d     .U...id-at-commo
   ed4d0:	4e6e 6d61 0065 6f43 6d6d 6e6f 4e20 6d61     nName.Common Nam
   ed4e0:	0065 0455 0006 6469 612d 2d74 6f63 6e75     e.U...id-at-coun
   ed4f0:	7274 4e79 6d61 0065 6f43 6e75 7274 0079     tryName.Country.
   ed500:	0455 0007 6469 612d 2d74 6f6c 6163 696c     U...id-at-locali
   ed510:	7974 4c00 636f 6c61 7469 0079 004c 0455     ty.Locality.L.U.
   ed520:	0008 6469 612d 2d74 7473 7461 0065 7453     ..id-at-state.St
   ed530:	7461 0065 0455 000a 6469 612d 2d74 726f     ate.U...id-at-or
   ed540:	6167 696e 617a 6974 6e6f 614e 656d 4f00     ganizationName.O
   ed550:	6772 6e61 7a69 7461 6f69 006e 004f 0455     rganization.O.U.
   ed560:	000b 6469 612d 2d74 726f 6167 696e 617a     ..id-at-organiza
   ed570:	6974 6e6f 6c61 6e55 7469 614e 656d 4f00     tionalUnitName.O
   ed580:	6772 5520 696e 0074 554f 2a00 4886 f786     rg Unit.OU.*.H..
   ed590:	010d 0109 6500 616d 6c69 6441 7264 7365     .....emailAddres
   ed5a0:	0073 2d45 616d 6c69 6120 6464 6572 7373     s.E-mail address
   ed5b0:	5500 0504 6900 2d64 7461 732d 7265 6169     .U...id-at-seria
   ed5c0:	4e6c 6d75 6562 0072 6553 6972 6c61 6e20     lNumber.Serial n
   ed5d0:	6d75 6562 0072 0455 0010 6469 612d 2d74     umber.U...id-at-
   ed5e0:	6f70 7473 6c61 6441 7264 7365 0073 6f50     postalAddress.Po
   ed5f0:	7473 6c61 6120 6464 6572 7373 5500 1104     stal address.U..
   ed600:	6900 2d64 7461 702d 736f 6174 436c 646f     .id-at-postalCod
   ed610:	0065 6f50 7473 6c61 6320 646f 0065 0455     e.Postal code.U.
   ed620:	0004 6469 612d 2d74 7573 4e72 6d61 0065     ..id-at-surName.
   ed630:	7553 6e72 6d61 0065 4e53 5500 2a04 6900     Surname.SN.U.*.i
   ed640:	2d64 7461 672d 7669 6e65 614e 656d 4700     d-at-givenName.G
   ed650:	7669 6e65 6e20 6d61 0065 4e47 5500 2b04     iven name.GN.U.+
   ed660:	6900 2d64 7461 692d 696e 6974 6c61 0073     .id-at-initials.
   ed670:	6e49 7469 6169 736c 5500 2c04 6900 2d64     Initials.U.,.id-
   ed680:	7461 672d 6e65 7265 7461 6f69 516e 6175     at-generationQua
   ed690:	696c 6966 7265 4700 6e65 7265 7461 6f69     lifier.Generatio
   ed6a0:	206e 7571 6c61 6669 6569 0072 0455 000c     n qualifier.U...
   ed6b0:	6469 612d 2d74 6974 6c74 0065 6954 6c74     id-at-title.Titl
   ed6c0:	0065 0455 002e 6469 612d 2d74 6e64 7551     e.U...id-at-dnQu
   ed6d0:	6c61 6669 6569 0072 6944 7473 6e69 7567     alifier.Distingu
   ed6e0:	7369 6568 2064 614e 656d 7120 6175 696c     ished Name quali
   ed6f0:	6966 7265 5500 4104 6900 2d64 7461 702d     fier.U.A.id-at-p
   ed700:	6573 6475 6e6f 6d79 5000 6573 6475 6e6f     seudonym.Pseudon
   ed710:	6d79 0900 2692 9389 2cf2 0164 0019 6469     ym...&...,d...id
   ed720:	642d 6d6f 6961 436e 6d6f 6f70 656e 746e     -domainComponent
   ed730:	4400 6d6f 6961 206e 6f63 706d 6e6f 6e65     .Domain componen
   ed740:	0074 4344 5500 2d04 6900 2d64 7461 752d     t.DC.U.-.id-at-u
   ed750:	696e 7571 4965 6564 746e 6669 6569 0072     niqueIdentifier.
   ed760:	6e55 7169 6575 4920 6564 746e 6669 6569     Unique Identifie
   ed770:	0072 0000                                   r...

000ed774 <_ZL18oid_pkcs12_pbe_alg>:
   ed774:	cec0 000e 000a 0000 cecb 000e ceeb 000e     ................
   ed784:	2504 0000 cf08 000e 000a 0000 cf13 000e     .%..............
   ed794:	cf33 000e 2304 0000 0000 0000 0000 0000     3....#..........
	...

000ed7b0 <_ZL10oid_md_alg>:
   ed7b0:	cff1 000e 0005 0000 cff7 000e cf67 000e     ............g...
   ed7c0:	0004 0000 cfff 000e 0009 0000 d009 000e     ................
   ed7d0:	d142 000e 0005 0000 d013 000e 0009 0000     B...............
   ed7e0:	d01d 000e d175 000e 0006 0000 d027 000e     ....u.......'...
   ed7f0:	0009 0000 d031 000e d1a8 000e 0007 0000     ....1...........
   ed800:	d03b 000e 0009 0000 d045 000e d1db 000e     ;.......E.......
   ed810:	0008 0000 0000 0000 0000 0000 0000 0000     ................
	...

000ed828 <_ZL11oid_sig_alg>:
   ed828:	d0e8 000e 0009 0000 d0f2 000e d109 000e     ................
   ed838:	0104 0000 d117 000e 0009 0000 d121 000e     ............!...
   ed848:	d139 000e 0105 0000 d14a 000e 0009 0000     9.......J.......
   ed858:	d154 000e d16c 000e 0106 0000 d17d 000e     T...l.......}...
   ed868:	0009 0000 d187 000e d19f 000e 0107 0000     ................
   ed878:	d1b0 000e 0009 0000 d1ba 000e d1d2 000e     ................
   ed888:	0108 0000 d1e3 000e 0005 0000 d0f2 000e     ................
   ed898:	d109 000e 0104 0000 d1e9 000e 0007 0000     ................
   ed8a8:	d1f1 000e d201 000e 0404 0000 d211 000e     ................
   ed8b8:	0008 0000 d21a 000e d22c 000e 0405 0000     ........,.......
   ed8c8:	d23e 000e 0008 0000 d247 000e d259 000e     >.......G...Y...
   ed8d8:	0406 0000 d26b 000e 0008 0000 d274 000e     ....k.......t...
   ed8e8:	d286 000e 0407 0000 d298 000e 0008 0000     ................
   ed8f8:	d2a1 000e d2b3 000e 0408 0000 d2c5 000e     ................
   ed908:	0009 0000 d2cf 000e d2cf 000e 0600 0000     ................
	...

000ed92c <_ZL11oid_md_hmac>:
   ed92c:	cf50 000e 0008 0000 cf59 000e cf62 000e     P.......Y...b...
   ed93c:	0004 0000 cf6d 000e 0008 0000 cf76 000e     ....m.......v...
   ed94c:	cf81 000e 0005 0000 cf8e 000e 0008 0000     ................
   ed95c:	cf97 000e cfa2 000e 0006 0000 cfaf 000e     ................
   ed96c:	0008 0000 cfb8 000e cfc3 000e 0007 0000     ................
   ed97c:	cfd0 000e 0008 0000 cfd9 000e cfe4 000e     ................
   ed98c:	0008 0000 0000 0000 0000 0000 0000 0000     ................
	...

000ed9a4 <_ZL12oid_x509_ext>:
   ed9a4:	d3f5 000e 0003 0000 d3f9 000e d410 000e     ................
   ed9b4:	0100 0000 d422 000e 0003 0000 d426 000e     ....".......&...
   ed9c4:	d454 000e 0004 0000 d435 000e 0003 0000     T.......5.......
   ed9d4:	d439 000e d44b 000e 0800 0000 d45e 000e     9...K.......^...
   ed9e4:	0003 0000 d462 000e d477 000e 0020 0000     ....b...w... ...
   ed9f4:	d488 000e 0009 0000 d492 000e d4a7 000e     ................
   eda04:	0000 0001 0000 0000 0000 0000 0000 0000     ................
	...
   eda1c:	862a 8648 0df7 0501 000c 0000               *.H.........

000eda28 <_ZL16aes_256_ecb_info>:
   eda28:	0104 0000 0100 0000 db08 000e 0000 0000     ................
   eda38:	0000 0000 0010 0000 dacc 000e               ............

000eda44 <_ZL16aes_128_ecb_info>:
   eda44:	0102 0000 0080 0000 db20 000e 0000 0000     ........ .......
   eda54:	0000 0000 0010 0000 dacc 000e               ............

000eda60 <_ZL12gcm_aes_info>:
   eda60:	0002 0000 0000 0000 b58b 000d b58b 000d     ................
   eda70:	b573 000d b561 000d                         s...a...

000eda78 <mbedtls_cipher_definitions>:
   eda78:	0002 0000 da44 000e 0003 0000 db2c 000e     ....D.......,...
   eda88:	0004 0000 da28 000e 000e 0000 db48 000e     ....(.......H...
   eda98:	000f 0000 dab0 000e 0010 0000 db64 000e     ............d...
	...

000edab0 <_ZL16aes_192_gcm_info>:
   edab0:	060f 0000 00c0 0000 daf0 000e 000c 0000     ................
   edac0:	0001 0000 0010 0000 da60 000e               ........`...

000edacc <_ZL8aes_info>:
   edacc:	0002 0000 b5c7 000d b5c3 000d b5bf 000d     ................
   edadc:	b5a7 000d b595 000d 4541 2d53 3532 2d36     ........AES-256-
   edaec:	4347 004d 4541 2d53 3931 2d32 4347 004d     GCM.AES-192-GCM.
   edafc:	4541 2d53 3231 2d38 4347 004d 4541 2d53     AES-128-GCM.AES-
   edb0c:	3532 2d36 4345 0042 4541 2d53 3931 2d32     256-ECB.AES-192-
   edb1c:	4345 0042 4541 2d53 3231 2d38 4345 0042     ECB.AES-128-ECB.

000edb2c <_ZL16aes_192_ecb_info>:
   edb2c:	0103 0000 00c0 0000 db14 000e 0000 0000     ................
   edb3c:	0000 0000 0010 0000 dacc 000e               ............

000edb48 <_ZL16aes_128_gcm_info>:
   edb48:	060e 0000 0080 0000 dafc 000e 000c 0000     ................
   edb58:	0001 0000 0010 0000 da60 000e               ........`...

000edb64 <_ZL16aes_256_gcm_info>:
   edb64:	0610 0000 0100 0000 dae4 000e 000c 0000     ................
   edb74:	0001 0000 0010 0000 da60 000e 7372 2e61     ........`...rsa.
   edb84:	004e 7372 2e61 0045 6365 656b 2e79 0051     N.rsa.E.eckey.Q.
   edb94:	4345 5344 0041 4345 445f 0048 4345 0000     ECDSA.EC_DH.EC..

000edba4 <mbedtls_ecdsa_info>:
   edba4:	0004 0000 db94 000e b609 000d b62d 000d     ............-...
   edbb4:	b83d 000d b7e9 000d 0000 0000 0000 0000     =...............
   edbc4:	b7bd 000d b7c1 000d b7d7 000d b60d 000d     ................

000edbd4 <mbedtls_eckeydh_info>:
   edbd4:	0003 0000 db9a 000e b609 000d b621 000d     ............!...
	...
   edbf4:	b7bd 000d b7a7 000d b795 000d b60d 000d     ................

000edc04 <mbedtls_rsa_info>:
   edc04:	0001 0000 d0a0 000e b665 000d b5cb 000d     ........e.......
   edc14:	b749 000d b709 000d b6bd 000d b671 000d     I...........q...
   edc24:	b661 000d b647 000d b635 000d b5d9 000d     a...G...5.......

000edc34 <mbedtls_eckey_info>:
   edc34:	0002 0000 dba0 000e b609 000d b5fd 000d     ................
   edc44:	b861 000d b7f3 000d 0000 0000 0000 0000     a...............
   edc54:	b7bd 000d b7a7 000d b795 000d b60d 000d     ................
   edc64:	862a 8648 0df7 0c01 0101 2a00 4886 f786     *.H........*.H..
   edc74:	010d 0d05 2d00 2d2d 2d2d 4e45 2044 5352     .....-----END RS
   edc84:	2041 5250 5649 5441 2045 454b 2d59 2d2d     A PRIVATE KEY---
   edc94:	2d2d 2d00 2d2d 2d2d 4542 4947 204e 5352     --.-----BEGIN RS
   edca4:	2041 5250 5649 5441 2045 454b 2d59 2d2d     A PRIVATE KEY---
   edcb4:	2d2d 2d00 2d2d 2d2d 4e45 2044 4345 5020     --.-----END EC P
   edcc4:	4952 4156 4554 4b20 5945 2d2d 2d2d 002d     RIVATE KEY-----.
   edcd4:	2d2d 2d2d 422d 4745 4e49 4520 2043 5250     -----BEGIN EC PR
   edce4:	5649 5441 2045 454b 2d59 2d2d 2d2d 2d00     IVATE KEY-----.-
   edcf4:	2d2d 2d2d 4e45 2044 5250 5649 5441 2045     ----END PRIVATE 
   edd04:	454b 2d59 2d2d 2d2d 2d00 2d2d 2d2d 4542     KEY-----.-----BE
   edd14:	4947 204e 5250 5649 5441 2045 454b 2d59     GIN PRIVATE KEY-
   edd24:	2d2d 2d2d 2d00 2d2d 2d2d 4e45 2044 4e45     ----.-----END EN
   edd34:	5243 5059 4554 2044 5250 5649 5441 2045     CRYPTED PRIVATE 
   edd44:	454b 2d59 2d2d 2d2d 2d00 2d2d 2d2d 4542     KEY-----.-----BE
   edd54:	4947 204e 4e45 5243 5059 4554 2044 5250     GIN ENCRYPTED PR
   edd64:	5649 5441 2045 454b 2d59 2d2d 2d2d 2d00     IVATE KEY-----.-
   edd74:	2d2d 2d2d 4e45 2044 5352 2041 5550 4c42     ----END RSA PUBL
   edd84:	4349 4b20 5945 2d2d 2d2d 002d 2d2d 2d2d     IC KEY-----.----
   edd94:	422d 4745 4e49 5220 4153 5020 4255 494c     -BEGIN RSA PUBLI
   edda4:	2043 454b 2d59 2d2d 2d2d 2d00 2d2d 2d2d     C KEY-----.-----
   eddb4:	4e45 2044 5550 4c42 4349 4b20 5945 2d2d     END PUBLIC KEY--
   eddc4:	2d2d 002d 2d2d 2d2d 422d 4745 4e49 5020     ---.-----BEGIN P
   eddd4:	4255 494c 2043 454b 2d59 2d2d 2d2d 0000     UBLIC KEY-----..
   edde4:	0000 0000                                   ....

000edde8 <_ZL5last4>:
	...
   eddf0:	1c20 0000 0000 0000 3840 0000 0000 0000      .......@8......
   ede00:	2460 0000 0000 0000 7080 0000 0000 0000     `$.......p......
   ede10:	6ca0 0000 0000 0000 48c0 0000 0000 0000     .l.......H......
   ede20:	54e0 0000 0000 0000 e100 0000 0000 0000     .T..............
   ede30:	fd20 0000 0000 0000 d940 0000 0000 0000      .......@.......
   ede40:	c560 0000 0000 0000 9180 0000 0000 0000     `...............
   ede50:	8da0 0000 0000 0000 a9c0 0000 0000 0000     ................
   ede60:	b5e0 0000 0000 0000                         ........

000ede68 <_ZL14base64_dec_map>:
   ede68:	7f7f 7f7f 7f7f 7f7f 7f7f 7f7f 7f7f 7f7f     ................
   ede78:	7f7f 7f7f 7f7f 7f7f 7f7f 7f7f 7f7f 7f7f     ................
   ede88:	7f7f 7f7f 7f7f 7f7f 7f7f 3e7f 7f7f 3f7f     ...........>...?
   ede98:	3534 3736 3938 3b3a 3d3c 7f7f 407f 7f7f     456789:;<=...@..
   edea8:	007f 0201 0403 0605 0807 0a09 0c0b 0e0d     ................
   edeb8:	100f 1211 1413 1615 1817 7f19 7f7f 7f7f     ................
   edec8:	1a7f 1c1b 1e1d 201f 2221 2423 2625 2827     ....... !"#$%&'(
   eded8:	2a29 2c2b 2e2d 302f 3231 7f33 7f7f 7f7f     )*+,-./0123.....

000edee8 <CSWTCH.35>:
   edee8:	caf8 000e cb28 000e cbb8 000e cb58 000e     ....(.......X...
   edef8:	cb88 000e                                   ....

000edefc <_ZL11secp256r1_b>:
   edefc:	604b 27d2 3c3e 3bce b0f6 cc53 06b0 651d     K`.'><.;..S....e
   edf0c:	86bc 7698 bd55 b3eb 93e7 aa3a 35d8 5ac6     ...vU.....:..5.Z

000edf1c <_ZL11secp256r1_n>:
   edf1c:	2551 fc63 cac2 f3b9 9e84 a717 faad bce6     Q%c.............
   edf2c:	ffff ffff ffff ffff 0000 0000 ffff ffff     ................

000edf3c <_ZL11secp256r1_p>:
   edf3c:	ffff ffff ffff ffff ffff ffff 0000 0000     ................
	...
   edf54:	0001 0000 ffff ffff                         ........

000edf5c <_ZL12secp256r1_gx>:
   edf5c:	c296 d898 3945 f4a1 33a0 2deb 7d81 7703     ....E9...3.-.}.w
   edf6c:	40f2 63a4 e6e5 f8bc 4247 e12c d1f2 6b17     .@.c....GB,....k

000edf7c <_ZL12secp256r1_gy>:
   edf7c:	51f5 37bf 4068 cbb6 5ece 6b31 3357 2bce     .Q.7h@...^1kW3.+
   edf8c:	9e16 7c0f eb4a 8ee7 7f9b fe1a 42e2 4fe3     ...|J........B.O
   edf9c:	1d55 0025 0000 0000                         U.%.....

000edfa4 <mbedtls_x509_crt_profile_default>:
   edfa4:	00f0 0000 ffff 0fff ffff 0fff 0800 0000     ................
   edfb4:	7274 6575 6600 6c61 6573 0a00 6543 7472     true.false..Cert
   edfc4:	6669 6369 7461 2065 7369 7520 696e 696e     ificate is unini
   edfd4:	6974 6c61 7369 6465 0a21 2500 6373 7265     tialised!..%scer
   edfe4:	2e74 7620 7265 6973 6e6f 2020 2020 3a20     t. version     :
   edff4:	2520 0a64 2500 7373 7265 6169 206c 756e      %d..%sserial nu
   ee004:	626d 7265 2020 2020 3a20 0020 250a 6973     mber     : ..%si
   ee014:	7373 6575 2072 616e 656d 2020 2020 2020     ssuer name      
   ee024:	3a20 0020 250a 7373 6275 656a 7463 6e20      : ..%ssubject n
   ee034:	6d61 2065 2020 2020 3a20 0020 250a 6973     ame      : ..%si
   ee044:	7373 6575 2064 6f20 206e 2020 2020 2020     ssued  on       
   ee054:	3a20 2520 3430 2d64 3025 6432 252d 3230      : %04d-%02d-%02
   ee064:	2064 3025 6432 253a 3230 3a64 3025 6432     d %02d:%02d:%02d
   ee074:	0a00 7325 7865 6970 6572 2073 6e6f 2020     ..%sexpires on  
   ee084:	2020 2020 2020 203a 3025 6434 252d 3230           : %04d-%02
   ee094:	2d64 3025 6432 2520 3230 3a64 3025 6432     d-%02d %02d:%02d
   ee0a4:	253a 3230 0064 250a 7373 6769 656e 2064     :%02d..%ssigned 
   ee0b4:	7375 6e69 2067 2020 2020 3a20 0020 250a     using      : ..%
   ee0c4:	2573 312d 7338 203a 6425 6220 7469 0073     s%-18s: %d bits.
   ee0d4:	250a 6273 7361 6369 6320 6e6f 7473 6172     .%sbasic constra
   ee0e4:	6e69 7374 3a20 4320 3d41 7325 2c00 6d20     ints : CA=%s., m
   ee0f4:	7861 705f 7461 6c68 6e65 253d 0064 250a     ax_pathlen=%d..%
   ee104:	7373 6275 656a 7463 6120 746c 6e20 6d61     ssubject alt nam
   ee114:	2065 3a20 0020 250a 6373 7265 2e74 7420     e  : ..%scert. t
   ee124:	7079 2065 2020 2020 2020 3a20 0020 7325     ype        : .%s
   ee134:	5353 204c 6c43 6569 746e 2500 5373 4c53     SSL Client.%sSSL
   ee144:	5320 7265 6576 0072 7325 6d45 6961 006c      Server.%sEmail.
   ee154:	7325 624f 656a 7463 5320 6769 696e 676e     %sObject Signing
   ee164:	2500 5273 7365 7265 6576 0064 7325 5353     .%sReserved.%sSS
   ee174:	204c 4143 2500 4573 616d 6c69 4320 0041     L CA.%sEmail CA.
   ee184:	7325 624f 656a 7463 5320 6769 696e 676e     %sObject Signing
   ee194:	4320 0041 250a 6b73 7965 7520 6173 6567      CA..%skey usage
   ee1a4:	2020 2020 2020 2020 3a20 0020 7325 6944              : .%sDi
   ee1b4:	6967 6174 206c 6953 6e67 7461 7275 0065     gital Signature.
   ee1c4:	7325 6f4e 206e 6552 7570 6964 7461 6f69     %sNon Repudiatio
   ee1d4:	006e 7325 654b 2079 6e45 6963 6870 7265     n.%sKey Encipher
   ee1e4:	656d 746e 2500 4473 7461 2061 6e45 6963     ment.%sData Enci
   ee1f4:	6870 7265 656d 746e 2500 4b73 7965 4120     pherment.%sKey A
   ee204:	7267 6565 656d 746e 2500 4b73 7965 4320     greement.%sKey C
   ee214:	7265 2074 6953 6e67 2500 4373 4c52 5320     ert Sign.%sCRL S
   ee224:	6769 006e 7325 6e45 6963 6870 7265 4f20     ign.%sEncipher O
   ee234:	6c6e 0079 7325 6544 6963 6870 7265 4f20     nly.%sDecipher O
   ee244:	6c6e 0079 250a 6573 7478 6b20 7965 7520     nly..%sext key u
   ee254:	6173 6567 2020 2020 3a20 0020 7325 7325     sage     : .%s%s
   ee264:	2500 2573 0a73 2500 5573 6b6e 6f6e 6e77     .%s%s..%sUnknown
   ee274:	7220 6165 6f73 206e 7428 6968 2073 6873      reason (this sh
   ee284:	756f 646c 6e20 746f 6820 7061 6570 296e     ould not happen)
   ee294:	000a 2d2d 2d2d 422d 4745 4e49 4320 5245     ..-----BEGIN CER
   ee2a4:	4954 4946 4143 4554 2d2d 2d2d 002d 2d2d     TIFICATE-----.--
   ee2b4:	2d2d 452d 444e 4320 5245 4954 4946 4143     ---END CERTIFICA
   ee2c4:	4554 2d2d 2d2d 002d 6854 2065 6563 7472     TE-----.The cert
   ee2d4:	6669 6369 7461 2065 6176 696c 6964 7974     ificate validity
   ee2e4:	6820 7361 6520 7078 7269 6465 5400 6568      has expired.The
   ee2f4:	6320 7265 6974 6966 6163 6574 6820 7361      certificate has
   ee304:	6220 6565 206e 6572 6f76 656b 2064 6928      been revoked (i
   ee314:	2073 6e6f 6120 4320 4c52 0029 6854 2065     s on a CRL).The 
   ee324:	6563 7472 6669 6369 7461 2065 6f43 6d6d     certificate Comm
   ee334:	6e6f 4e20 6d61 2065 4328 294e 6420 656f     on Name (CN) doe
   ee344:	2073 6f6e 2074 616d 6374 2068 6977 6874     s not match with
   ee354:	7420 6568 6520 7078 6365 6574 2064 4e43      the expected CN
   ee364:	5400 6568 6320 7265 6974 6966 6163 6574     .The certificate
   ee374:	6920 2073 6f6e 2074 6f63 7272 6365 6c74      is not correctl
   ee384:	2079 6973 6e67 6465 6220 2079 6874 2065     y signed by the 
   ee394:	7274 7375 6574 2064 4143 5400 6568 4320     trusted CA.The C
   ee3a4:	4c52 6920 2073 6f6e 2074 6f63 7272 6365     RL is not correc
   ee3b4:	6c74 2079 6973 6e67 6465 6220 2079 6874     tly signed by th
   ee3c4:	2065 7274 7375 6574 2064 4143 5400 6568     e trusted CA.The
   ee3d4:	4320 4c52 6920 2073 7865 6970 6572 0064      CRL is expired.
   ee3e4:	6543 7472 6669 6369 7461 2065 6177 2073     Certificate was 
   ee3f4:	696d 7373 6e69 0067 6543 7472 6669 6369     missing.Certific
   ee404:	7461 2065 6576 6972 6966 6163 6974 6e6f     ate verification
   ee414:	7720 7361 7320 696b 7070 6465 4f00 6874      was skipped.Oth
   ee424:	7265 7220 6165 6f73 206e 6328 6e61 6220     er reason (can b
   ee434:	2065 7375 6465 6220 2079 6576 6972 7966     e used by verify
   ee444:	6320 6c61 626c 6361 296b 5400 6568 6320      callback).The c
   ee454:	7265 6974 6966 6163 6574 7620 6c61 6469     ertificate valid
   ee464:	7469 2079 7473 7261 7374 6920 206e 6874     ity starts in th
   ee474:	2065 7566 7574 6572 5400 6568 4320 4c52     e future.The CRL
   ee484:	6920 2073 7266 6d6f 7420 6568 6620 7475      is from the fut
   ee494:	7275 0065 7355 6761 2065 6f64 7365 6e20     ure.Usage does n
   ee4a4:	746f 6d20 7461 6863 7420 6568 6b20 7965     ot match the key
   ee4b4:	7355 6761 2065 7865 6574 736e 6f69 006e     Usage extension.
   ee4c4:	7355 6761 2065 6f64 7365 6e20 746f 6d20     Usage does not m
   ee4d4:	7461 6863 7420 6568 6520 7478 6e65 6564     atch the extende
   ee4e4:	4b64 7965 7355 6761 2065 7865 6574 736e     dKeyUsage extens
   ee4f4:	6f69 006e 7355 6761 2065 6f64 7365 6e20     ion.Usage does n
   ee504:	746f 6d20 7461 6863 7420 6568 6e20 4373     ot match the nsC
   ee514:	7265 5474 7079 2065 7865 6574 736e 6f69     ertType extensio
   ee524:	006e 6854 2065 6563 7472 6669 6369 7461     n.The certificat
   ee534:	2065 7369 7320 6769 656e 2064 6977 6874     e is signed with
   ee544:	6120 206e 6e75 6361 6563 7470 6261 656c      an unacceptable
   ee554:	6820 7361 2e68 5400 6568 6320 7265 6974      hash..The certi
   ee564:	6966 6163 6574 6920 2073 6973 6e67 6465     ficate is signed
   ee574:	7720 7469 2068 6e61 7520 616e 6363 7065      with an unaccep
   ee584:	6174 6c62 2065 4b50 6120 676c 2820 6765     table PK alg (eg
   ee594:	5220 4153 7620 2073 4345 5344 2941 002e      RSA vs ECDSA)..
   ee5a4:	6854 2065 6563 7472 6669 6369 7461 2065     The certificate 
   ee5b4:	7369 7320 6769 656e 2064 6977 6874 6120     is signed with a
   ee5c4:	206e 6e75 6361 6563 7470 6261 656c 6b20     n unacceptable k
   ee5d4:	7965 2820 6765 6220 6461 6320 7275 6576     ey (eg bad curve
   ee5e4:	202c 5352 2041 6f74 206f 6873 726f 2974     , RSA too short)
   ee5f4:	002e 6854 2065 5243 204c 7369 7320 6769     ..The CRL is sig
   ee604:	656e 2064 6977 6874 6120 206e 6e75 6361     ned with an unac
   ee614:	6563 7470 6261 656c 6820 7361 2e68 5400     ceptable hash..T
   ee624:	6568 4320 4c52 6920 2073 6973 6e67 6465     he CRL is signed
   ee634:	7720 7469 2068 6e61 7520 616e 6363 7065      with an unaccep
   ee644:	6174 6c62 2065 4b50 6120 676c 2820 6765     table PK alg (eg
   ee654:	5220 4153 7620 2073 4345 5344 2941 002e      RSA vs ECDSA)..
   ee664:	6854 2065 5243 204c 7369 7320 6769 656e     The CRL is signe
   ee674:	2064 6977 6874 6120 206e 6e75 6361 6563     d with an unacce
   ee684:	7470 6261 656c 6b20 7965 2820 6765 6220     ptable key (eg b
   ee694:	6461 6320 7275 6576 202c 5352 2041 6f74     ad curve, RSA to
   ee6a4:	206f 6873 726f 2974 002e 0000               o short)....

000ee6b0 <mbedtls_x509_crt_profile_suiteb>:
   ee6b0:	0060 0000 000a 0000 000c 0000 0000 0000     `...............
   ee6c0:	6e69 6176 696c 2064 4b50 0000               invalid PK..

000ee6cc <CSWTCH.19>:
   ee6cc:	dc04 000e dc34 000e dbd4 000e dba4 000e     ....4...........

000ee6dc <CSWTCH.336>:
   ee6dc:	0504 0706 6308 696c 6e65 2074 6966 696e     .....client fini
   ee6ec:	6873 6465 7300 7265 6576 2072 6966 696e     shed.server fini
   ee6fc:	6873 6465 6d00 7361 6574 2072 6573 7263     shed.master secr
   ee70c:	7465 6b00 7965 6520 7078 6e61 6973 6e6f     et.key expansion
   ee71c:	7500 6b6e 6f6e 6e77 5300 4c53 3376 302e     .unknown.SSLv3.0
   ee72c:	5400 534c 3176 302e 5400 534c 3176 312e     .TLSv1.0.TLSv1.1
   ee73c:	5400 534c 3176 322e 0000                    .TLSv1.2..

000ee746 <CSWTCH.236>:
   ee746:	0200 0400 0800 1000                         ........

000ee74e <CSWTCH.338>:
   ee74e:	0302 0504 0006 0000 0000                    ..........

000ee758 <_ZL1K>:
   ee758:	ae22 d728 2f98 428a 65cd 23ef 4491 7137     ".(../.B.e.#.D7q
   ee768:	3b2f ec4d fbcf b5c0 dbbc 8189 dba5 e9b5     /;M.............
   ee778:	b538 f348 c25b 3956 d019 b605 11f1 59f1     8.H.[.V9.......Y
   ee788:	4f9b af19 82a4 923f 8118 da6d 5ed5 ab1c     .O....?...m..^..
   ee798:	0242 a303 aa98 d807 6fbe 4570 5b01 1283     B........opE.[..
   ee7a8:	b28c 4ee4 85be 2431 b4e2 d5ff 7dc3 550c     ...N..1$.....}.U
   ee7b8:	896f f27b 5d74 72be 96b1 3b16 b1fe 80de     o.{.t].r...;....
   ee7c8:	1235 25c7 06a7 9bdc 2694 cf69 f174 c19b     5..%.....&i.t...
   ee7d8:	4ad2 9ef1 69c1 e49b 25e3 384f 4786 efbe     .J...i...%O8.G..
   ee7e8:	d5b5 8b8c 9dc6 0fc1 9c65 77ac a1cc 240c     ........e..w...$
   ee7f8:	0275 592b 2c6f 2de9 e483 6ea6 84aa 4a74     u.+Yo,.-...n..tJ
   ee808:	fbd4 bd41 a9dc 5cb0 53b5 8311 88da 76f9     ..A....\.S.....v
   ee818:	dfab ee66 5152 983e 3210 2db4 c66d a831     ..f.RQ>..2.-m.1.
   ee828:	213f 98fb 27c8 b003 0ee4 beef 7fc7 bf59     ?!...'........Y.
   ee838:	8fc2 3da8 0bf3 c6e0 a725 930a 9147 d5a7     ...=....%...G...
   ee848:	826f e003 6351 06ca 6e70 0a0e 2967 1429     o...Qc..pn..g)).
   ee858:	2ffc 46d2 0a85 27b7 c926 5c26 2138 2e1b     ./.F...'&.&\8!..
   ee868:	2aed 5ac4 6dfc 4d2c b3df 9d95 0d13 5338     .*.Z.m,M......8S
   ee878:	63de 8baf 7354 650a b2a8 3c77 0abb 766a     .c..Ts.e..w<..jv
   ee888:	aee6 47ed c92e 81c2 353b 1482 2c85 9272     ...G....;5...,r.
   ee898:	0364 4cf1 e8a1 a2bf 3001 bc42 664b a81a     d..L.....0B.Kf..
   ee8a8:	9791 d0f8 8b70 c24b be30 0654 51a3 c76c     ....p.K.0.T..Ql.
   ee8b8:	5218 d6ef e819 d192 a910 5565 0624 d699     .R........eU$...
   ee8c8:	202a 5771 3585 f40e d1b8 32bb a070 106a     * qW.5.....2p.j.
   ee8d8:	d0c8 b8d2 c116 19a4 ab53 5141 6c08 1e37     ........S.AQ.l7.
   ee8e8:	eb99 df8e 774c 2748 48a8 e19b bcb5 34b0     ....LwH'.H.....4
   ee8f8:	5a63 c5c9 0cb3 391c 8acb e341 aa4a 4ed8     cZ.....9..A.J..N
   ee908:	e373 7763 ca4f 5b9c b8a3 d6b2 6ff3 682e     s.cwO..[.....o.h
   ee918:	b2fc 5def 82ee 748f 2f60 4317 636f 78a5     ...]...t`/.Coc.x
   ee928:	ab72 a1f0 7814 84c8 39ec 1a64 0208 8cc7     r....x...9d.....
   ee938:	1e28 2363 fffa 90be bde9 de82 6ceb a450     (.c#.........lP.
   ee948:	7915 b2c6 a3f7 bef9 532b e372 78f2 c671     .y......+Sr..xq.
   ee958:	619c ea26 3ece ca27 c207 21c0 b8c7 d186     .a&..>'....!....
   ee968:	eb1e cde0 7dd6 eada d178 ee6e 4f7f f57d     .....}..x.n..O}.
   ee978:	6fba 7217 67aa 06f0 98a6 a2c8 7dc5 0a63     .o.r.g.......}c.
   ee988:	0dae bef9 9804 113f 471b 131c 0b35 1b71     ......?..G..5.q.
   ee998:	7d84 2304 77f5 28db 2493 40c7 ab7b 32ca     .}.#.w.(.$.@{..2
   ee9a8:	bebc 15c9 be0a 3c9e 0d4c 9c10 67c4 431d     .......<L....g.C
   ee9b8:	42b6 cb3e d4be 4cc5 7e2a fc65 299c 597f     .B>....L*~e..).Y
   ee9c8:	faec 3ad6 6fab 5fcb 5817 4a47 198c 6c44     ...:.o._.XGJ..Dl
   ee9d8:	7250 636f 542d 7079 3a65 3420 452c 434e     Proc-Type: 4,ENC
   ee9e8:	5952 5450 4445 5400 534c 452d 4443 4548     RYPTED.TLS-ECDHE
   ee9f8:	452d 4443 4153 572d 5449 2d48 4541 2d53     -ECDSA-WITH-AES-
   eea08:	3231 2d38 4347 2d4d 4853 3241 3635 5400     128-GCM-SHA256.T
   eea18:	534c 452d 4443 4548 452d 4443 4153 572d     LS-ECDHE-ECDSA-W
   eea28:	5449 2d48 4541 2d53 3532 2d36 4347 2d4d     ITH-AES-256-GCM-
   eea38:	4853 3341 3438 5400 534c 522d 4153 572d     SHA384.TLS-RSA-W
   eea48:	5449 2d48 4541 2d53 3532 2d36 4347 2d4d     ITH-AES-256-GCM-
   eea58:	4853 3341 3438 5400 534c 522d 4153 572d     SHA384.TLS-RSA-W
   eea68:	5449 2d48 4541 2d53 3231 2d38 4347 2d4d     ITH-AES-128-GCM-
   eea78:	4853 3241 3635 5400 534c 502d 4b53 572d     SHA256.TLS-PSK-W
   eea88:	5449 2d48 4541 2d53 3231 2d38 4347 2d4d     ITH-AES-128-GCM-
   eea98:	4853 3241 3635 5400 534c 502d 4b53 572d     SHA256.TLS-PSK-W
   eeaa8:	5449 2d48 4541 2d53 3532 2d36 4347 2d4d     ITH-AES-256-GCM-
   eeab8:	4853 3341 3438 5400 534c 522d 4153 502d     SHA384.TLS-RSA-P
   eeac8:	4b53 572d 5449 2d48 4541 2d53 3231 2d38     SK-WITH-AES-128-
   eead8:	4347 2d4d 4853 3241 3635 5400 534c 522d     GCM-SHA256.TLS-R
   eeae8:	4153 502d 4b53 572d 5449 2d48 4541 2d53     SA-PSK-WITH-AES-
   eeaf8:	3532 2d36 4347 2d4d 4853 3341 3438 0000     256-GCM-SHA384..

000eeb08 <_ZL23ciphersuite_definitions>:
   eeb08:	c02b 0000 e9ef 000e 060e 0004 0003 0000     +...............
   eeb18:	0003 0000 0003 0000 0003 0000 0000 0000     ................
   eeb28:	c02c 0000 ea17 000e 0710 0004 0003 0000     ,...............
   eeb38:	0003 0000 0003 0000 0003 0000 0000 0000     ................
   eeb48:	009d 0000 ea3f 000e 0710 0001 0003 0000     ....?...........
   eeb58:	0003 0000 0003 0000 0003 0000 0000 0000     ................
   eeb68:	009c 0000 ea5f 000e 060e 0001 0003 0000     ...._...........
   eeb78:	0003 0000 0003 0000 0003 0000 0000 0000     ................
   eeb88:	00a8 0000 ea7f 000e 060e 0005 0003 0000     ................
   eeb98:	0003 0000 0003 0000 0003 0000 0000 0000     ................
   eeba8:	00a9 0000 ea9f 000e 0710 0005 0003 0000     ................
   eebb8:	0003 0000 0003 0000 0003 0000 0000 0000     ................
   eebc8:	00ac 0000 eabf 000e 060e 0007 0003 0000     ................
   eebd8:	0003 0000 0003 0000 0003 0000 0000 0000     ................
   eebe8:	00ad 0000 eae3 000e 0710 0007 0003 0000     ................
   eebf8:	0003 0000 0003 0000 0003 0000 0000 0000     ................
   eec08:	0000 0000 d091 000e 0000 0000 0000 0000     ................
	...

000eec28 <_ZL22ciphersuite_preference>:
   eec28:	cca8 0000 cca9 0000 ccaa 0000 c02c 0000     ............,...
   eec38:	c030 0000 009f 0000 c0ad 0000 c09f 0000     0...............
   eec48:	c024 0000 c028 0000 006b 0000 c00a 0000     $...(...k.......
   eec58:	c014 0000 0039 0000 c0af 0000 c0a3 0000     ....9...........
   eec68:	c087 0000 c08b 0000 c07d 0000 c073 0000     ........}...s...
   eec78:	c077 0000 00c4 0000 0088 0000 c05d 0000     w...........]...
   eec88:	c061 0000 c053 0000 c049 0000 c04d 0000     a...S...I...M...
   eec98:	c045 0000 c02b 0000 c02f 0000 009e 0000     E...+.../.......
   eeca8:	c0ac 0000 c09e 0000 c023 0000 c027 0000     ........#...'...
   eecb8:	0067 0000 c009 0000 c013 0000 0033 0000     g...........3...
   eecc8:	c0ae 0000 c0a2 0000 c086 0000 c08a 0000     ................
   eecd8:	c07c 0000 c072 0000 c076 0000 00be 0000     |...r...v.......
   eece8:	0045 0000 c05c 0000 c060 0000 c052 0000     E...\...`...R...
   eecf8:	c048 0000 c04c 0000 c044 0000 ccac 0000     H...L...D.......
   eed08:	ccad 0000 00ab 0000 c0a7 0000 c038 0000     ............8...
   eed18:	00b3 0000 c036 0000 0091 0000 c091 0000     ....6...........
   eed28:	c09b 0000 c097 0000 c0ab 0000 c06d 0000     ............m...
   eed38:	c071 0000 c067 0000 00aa 0000 c0a6 0000     q...g...........
   eed48:	c037 0000 00b2 0000 c035 0000 0090 0000     7.......5.......
   eed58:	c090 0000 c096 0000 c09a 0000 c0aa 0000     ................
   eed68:	c06c 0000 c070 0000 c066 0000 c0ff 0000     l...p...f.......
   eed78:	009d 0000 c09d 0000 003d 0000 0035 0000     ........=...5...
   eed88:	c032 0000 c02a 0000 c00f 0000 c02e 0000     2...*...........
   eed98:	c026 0000 c005 0000 c0a1 0000 c07b 0000     &...........{...
   eeda8:	00c0 0000 0084 0000 c08d 0000 c079 0000     ............y...
   eedb8:	c089 0000 c075 0000 c05f 0000 c063 0000     ....u..._...c...
   eedc8:	c051 0000 c04b 0000 c04f 0000 c03d 0000     Q...K...O...=...
   eedd8:	009c 0000 c09c 0000 003c 0000 002f 0000     ........<.../...
   eede8:	c031 0000 c029 0000 c00e 0000 c02d 0000     1...).......-...
   eedf8:	c025 0000 c004 0000 c0a0 0000 c07a 0000     %...........z...
   eee08:	00ba 0000 0041 0000 c08c 0000 c078 0000     ....A.......x...
   eee18:	c088 0000 c074 0000 c05e 0000 c062 0000     ....t...^...b...
   eee28:	c050 0000 c04a 0000 c04e 0000 c03c 0000     P...J...N...<...
   eee38:	ccae 0000 00ad 0000 00b7 0000 0095 0000     ................
   eee48:	c093 0000 c099 0000 c06f 0000 c069 0000     ........o...i...
   eee58:	00ac 0000 00b6 0000 0094 0000 c092 0000     ................
   eee68:	c098 0000 c06e 0000 c068 0000 ccab 0000     ....n...h.......
   eee78:	00a9 0000 c0a5 0000 00af 0000 008d 0000     ................
   eee88:	c08f 0000 c095 0000 c0a9 0000 c06b 0000     ............k...
   eee98:	c065 0000 00a8 0000 c0a4 0000 00ae 0000     e...............
   eeea8:	008c 0000 c08e 0000 c094 0000 c0a8 0000     ................
   eeeb8:	c06a 0000 c064 0000 c008 0000 c012 0000     j...d...........
   eeec8:	0016 0000 c034 0000 008f 0000 000a 0000     ....4...........
   eeed8:	c00d 0000 c003 0000 0093 0000 008b 0000     ................
   eeee8:	c007 0000 c011 0000 c033 0000 008e 0000     ........3.......
   eeef8:	0005 0000 0004 0000 c00c 0000 c002 0000     ................
   eef08:	0092 0000 008a 0000 0015 0000 0009 0000     ................
   eef18:	c006 0000 c010 0000 c03b 0000 c03a 0000     ........;...:...
   eef28:	c039 0000 00b5 0000 00b4 0000 002d 0000     9...........-...
   eef38:	003b 0000 0002 0000 0001 0000 c00b 0000     ;...............
   eef48:	c001 0000 00b9 0000 00b8 0000 002e 0000     ................
   eef58:	00b1 0000 00b0 0000 002c 0000 0000 0000     ........,.......
   eef68:	0302 0705 0d0b 1311 1d17 251f 2b29 352f     ...........%)+/5
   eef78:	3d3b 4743 4f49 5953 6561 6b67 716d 837f     ;=CGIOSYaegkmq..
   eef88:	8b89 9795 a39d ada7 b5b3 c1bf c7c5 dfd3     ................
   eef98:	e5e3 efe9 fbf1 6c43 736f 6e69 2067 6874     ......Closing th
   eefa8:	2065 6f6c 6b63 4f00 6570 696e 676e 7420     e lock.Opening t
   eefb8:	6568 6c20 636f 006b                         he lock.

000eefc0 <_ZTVN5spark13EthernetClassE>:
	...
   eefc8:	61b3 000e 61a9 000e 619f 000e 6195 000e     .a...a...a...a..
   eefd8:	6189 000e 617d 000e 6171 000e 6169 000e     .a..}a..qa..ia..
   eefe8:	615f 000e 6155 000e 7c91 000e 6977 6972     _a..Ua...|..wiri
   eeff8:	676e 5300 7379 6574 206d 6c73 6565 2070     ng.System sleep 
   ef008:	6f63 666e 6769 7275 7461 6f69 206e 7369     configuration is
   ef018:	6920 766e 6c61 6469 002e 0000                invalid....

000ef024 <_ZTV21StringPrintableHelper>:
	...
   ef02c:	64d9 000e 64db 000e 670d 000e 66c1 000e     .d...d...g...f..

000ef03c <_ZTV5Print>:
	...
   ef04c:	40ad 000d 6839 000e 616e 006e 766f 0066     .@..9h..nan.ovf.
   ef05c:	6e69 0066 6162 6475 5300 7265 6169 006c     inf.baud.Serial.
   ef06c:	6553 6972 6c61 0031 6170 6172 006d 6d63     Serial1.param.cm
   ef07c:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   ef08c:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   ef09c:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   ef0ac:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   ef0bc:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   ef0cc:	7070 2500 3130 7530 0020 205d 2800 3a29     pp.%010u .] .():
   ef0dc:	0020 5b20 6300 646f 2065 203d 2500 0069      . [.code = .%i.
   ef0ec:	6564 6174 6c69 2073 203d 6c00 006e 6e66     details = .ln.fn
   ef0fc:	6400 7465 6961 006c 6f6e 656e 7400 6172     .detail.none.tra
   ef10c:	6563 6900 666e 006f 6177 6e72 6500 7272     ce.info.warn.err
   ef11c:	726f 7000 6e61 6369 6100 6c6c 2500 302b     or.panic.all.%+0
   ef12c:	6433 253a 3230 0075 5925 252d 2d6d 6425     3d:%02u.%Y-%m-%d
   ef13c:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   ef14c:	6d69 0065                                   ime.

000ef150 <_ZTV6Stream>:
	...
   ef160:	40ad 000d 6839 000e 40ad 000d 40ad 000d     .@..9h...@...@..
   ef170:	40ad 000d 40ad 000d                         .@...@..

000ef178 <_ZTV6Client>:
	...
   ef188:	40ad 000d 40ad 000d 40ad 000d 40ad 000d     .@...@...@...@..
   ef198:	40ad 000d 40ad 000d 40ad 000d 40ad 000d     .@...@...@...@..
   ef1a8:	40ad 000d 40ad 000d 40ad 000d 40ad 000d     .@...@...@...@..

000ef1b8 <_ZTV15TCPServerClient>:
	...
   ef1c0:	6cd9 000e 6ced 000e 761d 000e 7637 000e     .l...l...v..7v..
   ef1d0:	7a39 000e 778b 000e 775d 000e 7661 000e     9z...w..]w..av..
   ef1e0:	7915 000e 7811 000e 77bf 000e 7a09 000e     .y...x...w...z..
   ef1f0:	7663 000e 769b 000e 7649 000e 76bd 000e     cv...v..Iv...v..
   ef200:	6c49 000e                                   Il..

000ef204 <_ZTV9TCPServer>:
	...
   ef20c:	4139 000d 417f 000d 6beb 000e 6c01 000e     9A...A...k...l..
   ef21c:	6d6d 000e 6bd3 000e 6c13 000e               mm...k...l..

000ef228 <_ZTV9IPAddress>:
	...
   ef230:	70d5 000e 70c5 000e 70c7 000e               .p...p...p..

000ef23c <_ZTV9USBSerial>:
	...
   ef244:	71d9 000e 7229 000e 7237 000e 6839 000e     .q..)r..7r..9h..
   ef254:	7215 000e 71db 000e 71f1 000e 7223 000e     .r...q...q..#r..
   ef264:	7207 000e 71d5 000e                         .r...q..

000ef26c <_ZTV11USARTSerial>:
	...
   ef274:	72e5 000e 7335 000e 7343 000e 6839 000e     .r..5s..Cs..9h..
   ef284:	72f9 000e 731b 000e 7307 000e 732f 000e     .r...s...s../s..
   ef294:	72e7 000e 72eb 000e                         .r...r..

000ef29c <_ZTV7TwoWire>:
	...
   ef2a4:	741d 000e 7467 000e 743f 000e 741f 000e     .t..gt..?t...t..
   ef2b4:	7447 000e 744f 000e 7457 000e 745f 000e     Gt..Ot..Wt.._t..

000ef2c4 <_ZTVN5spark9MeshClassE>:
	...
   ef2cc:	74ff 000e 74f5 000e 74eb 000e 74e1 000e     .t...t...t...t..
   ef2dc:	74d5 000e 74c9 000e 74bd 000e 74b5 000e     .t...t...t...t..
   ef2ec:	74ab 000e 74a1 000e 7c91 000e               .t...t...|..

000ef2f8 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   ef300:	76a5 000e 76ab 000e 7b93 000e 76b9 000e     .v...v...{...v..
   ef310:	76a7 000e                                   .v..

000ef314 <_ZTV9TCPClient>:
	...
   ef31c:	4119 000d 416b 000d 761d 000e 7637 000e     .A..kA...v..7v..
   ef32c:	7a39 000e 778b 000e 775d 000e 7661 000e     9z...w..]w..av..
   ef33c:	7915 000e 7811 000e 77bf 000e 7a09 000e     .y...x...w...z..
   ef34c:	7663 000e 769b 000e 7649 000e 76bd 000e     cv...v..Iv...v..
   ef35c:	773d 000e 6572 7663 6520 7272 726f 3d20     =w..recv error =
   ef36c:	2520 0064                                    %d.

000ef370 <_ZTVN5spark9WiFiClassE>:
	...
   ef378:	7c09 000e 7bff 000e 7bf5 000e 7bab 000e     .|...{...{...{..
   ef388:	7be9 000e 7bdd 000e 7bd1 000e 7bc9 000e     .{...{...{...{..
   ef398:	7bbf 000e 7bb5 000e 7c91 000e               .{...{...|..

000ef3a4 <_ZTVN5spark12NetworkClassE>:
	...
   ef3ac:	7c29 000e 7c33 000e 7c3d 000e 7c47 000e     )|..3|..=|..G|..
   ef3bc:	7c51 000e 7c5d 000e 7c69 000e 7c75 000e     Q|..]|..i|..u|..
   ef3cc:	7c7d 000e 7c87 000e 7c91 000e               }|...|...|..

000ef3d8 <_ZTVSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   ef3e0:	7d9f 000e 7da5 000e 7dbd 000e 7db3 000e     .}...}...}...}..
   ef3f0:	7da1 000e 2e30 0030 7525 2500 2a2e 666c     .}..0.0.%u.%.*lf
   ef400:	2500 0067 756e 6c6c 7500 3025 7834 0000          .%g.null.u%04x.

000ef40f <_ZSt7nothrow>:
   ef40f:	6200 7361 6369 735f 7274 6e69 3a67 5f3a     .basic_string::_
   ef41f:	5f4d 7263 6165 6574 2500 3a73 5f20 705f     M_create.%s: __p
   ef42f:	736f 2820 6877 6369 2068 7369 2520 757a     os (which is %zu
   ef43f:	2029 203e 6874 7369 3e2d 6973 657a 2928     ) > this->size()
   ef44f:	2820 6877 6369 2068 7369 2520 757a 0029      (which is %zu).
   ef45f:	6162 6973 5f63 7473 6972 676e 3a3a 7461     basic_string::at
   ef46f:	203a 5f5f 206e 7728 6968 6863 6920 2073     : __n (which is 
   ef47f:	7a25 2975 3e20 203d 6874 7369 3e2d 6973     %zu) >= this->si
   ef48f:	657a 2928 2820 6877 6369 2068 7369 2520     ze() (which is %
   ef49f:	757a 0029 6162 6973 5f63 7473 6972 676e     zu).basic_string
   ef4af:	3a3a 7265 7361 0065 6162 6973 5f63 7473     ::erase.basic_st
   ef4bf:	6972 676e 3a3a 4d5f 725f 7065 616c 6563     ring::_M_replace
   ef4cf:	615f 7875 6200 7361 6369 735f 7274 6e69     _aux.basic_strin
   ef4df:	3a67 693a 736e 7265 0074 6162 6973 5f63     g::insert.basic_
   ef4ef:	7473 6972 676e 3a3a 6572 6c70 6361 0065     string::replace.
   ef4ff:	6162 6973 5f63 7473 6972 676e 3a3a 4d5f     basic_string::_M
   ef50f:	725f 7065 616c 6563 6200 7361 6369 735f     _replace.basic_s
   ef51f:	7274 6e69 3a67 613a 7373 6769 006e 6162     tring::assign.ba
   ef52f:	6973 5f63 7473 6972 676e 3a3a 7061 6570     sic_string::appe
   ef53f:	646e 6200 7361 6369 735f 7274 6e69 3a67     nd.basic_string:
   ef54f:	633a 706f 0079 6162 6973 5f63 7473 6972     :copy.basic_stri
   ef55f:	676e 3a3a 6f63 706d 7261 0065 6162 6973     ng::compare.basi
   ef56f:	5f63 7473 6972 676e 3a3a 6162 6973 5f63     c_string::basic_
   ef57f:	7473 6972 676e 6200 7361 6369 735f 7274     string.basic_str
   ef58f:	6e69 3a67 733a 6275 7473 0072 7473 6972     ing::substr.stri
   ef59f:	676e 3a3a 7473 6972 676e 6e00 746f 6520     ng::string.not e
   ef5af:	6f6e 6775 2068 7073 6361 2065 6f66 2072     nough space for 
   ef5bf:	6f66 6d72 7461 6520 7078 6e61 6973 6e6f     format expansion
   ef5cf:	2820 6c50 6165 6573 7320 6275 696d 2074      (Please submit 
   ef5df:	7566 6c6c 6220 6775 7220 7065 726f 2074     full bug report 
   ef5ef:	7461 6820 7474 3a70 2f2f 6367 2e63 6e67     at http://gcc.gn
   ef5ff:	2e75 726f 2f67 7562 7367 682e 6d74 296c     u.org/bugs.html)
   ef60f:	0a3a 2020 2020 2d00 782b 3058 3231 3433     :.    .-+xX01234
   ef61f:	3635 3837 6139 6362 6564 3066 3231 3433     56789abcdef01234
   ef62f:	3635 3837 4139 4342 4544 0046 2b2d 5878     56789ABCDEF.-+xX
   ef63f:	3130 3332 3534 3736 3938 6261 6463 6665     0123456789abcdef
   ef64f:	4241 4443 4645 2d00 3130 3332 3534 3736     ABCDEF.-01234567
   ef65f:	3938 4700 544d 4800 5453 4100 534b 0054     89.GMT.HST.AKST.
   ef66f:	5350 0054 534d 0054 5343 0054 5345 0054     PST.MST.CST.EST.
   ef67f:	5341 0054 534e 0054 4543 0054 5349 0054     AST.NST.CET.IST.
   ef68f:	4545 0054 534a 0054                         EET.JST.

000ef697 <day_name.4725>:
   ef697:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   ef6a7:	6972 6153 4a74                                   riSat

000ef6ac <mon_name.4726>:
   ef6ac:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   ef6bc:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   ef6cc:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
   ef6dc:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
   ef6ec:	6425 000a                                   %d..

000ef6f0 <_ctype_>:
   ef6f0:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   ef700:	2020 2020 2020 2020 2020 2020 2020 2020                     
   ef710:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   ef720:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   ef730:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   ef740:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   ef750:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   ef760:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   ef770:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000ef7f4 <__sf_fake_stdin>:
	...

000ef814 <__sf_fake_stdout>:
	...

000ef834 <__sf_fake_stderr>:
	...
   ef854:	4f50 4953 0058 0000                         POSIX...

000ef85c <__month_lengths>:
   ef85c:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   ef86c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   ef87c:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   ef88c:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   ef89c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   ef8ac:	001e 0000 001f 0000 001e 0000 001f 0000     ................

000ef8bc <fpi.5344>:
   ef8bc:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   ef8cc:	0000 0000                                   ....

000ef8d0 <fpinan.5380>:
   ef8d0:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   ef8e0:	0000 0000 6e69 7469 0079 0000 0000 0000     ....inity.......

000ef8f0 <tinytens>:
   ef8f0:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   ef900:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   ef910:	6f43 64ac 0628 1168 5a54 2500 3031 5e5b     Co.d(.h.TZ.%10[^
   ef920:	2d30 2c39 2d2b 255d 006e 254d 7568 6e25     0-9,+-]%n.M%hu%n
   ef930:	252e 7568 6e25 252e 7568 6e25 2f00 6825     .%hu%n.%hu%n./%h
   ef940:	2575 3a6e 6825 2575 3a6e 6825 2575 006e     u%n:%hu%n:%hu%n.

000ef950 <__mprec_tens>:
   ef950:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   ef960:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   ef970:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   ef980:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   ef990:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   ef9a0:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   ef9b0:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   ef9c0:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   ef9d0:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   ef9e0:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   ef9f0:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   efa00:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   efa10:	9db4 79d9 7843 44ea                         ...yCx.D

000efa18 <__mprec_bigtens>:
   efa18:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   efa28:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   efa38:	bf3c 7f73 4fdd 7515                         <.s..O.u

000efa40 <p05.5387>:
   efa40:	0005 0000 0019 0000 007d 0000               ........}...

000efa4c <link_const_variable_data_end>:
   efa4c:	000d4559 	.word	0x000d4559
   efa50:	000d49e9 	.word	0x000d49e9
   efa54:	000d4c1d 	.word	0x000d4c1d
   efa58:	000d53cd 	.word	0x000d53cd
   efa5c:	000e5a09 	.word	0x000e5a09
   efa60:	000e5b25 	.word	0x000e5b25
   efa64:	000e61bd 	.word	0x000e61bd
   efa68:	000e6429 	.word	0x000e6429
   efa6c:	000e6811 	.word	0x000e6811
   efa70:	000e6ae1 	.word	0x000e6ae1
   efa74:	000e6ba1 	.word	0x000e6ba1
   efa78:	000e6f99 	.word	0x000e6f99
   efa7c:	000e75cd 	.word	0x000e75cd
   efa80:	000e7c15 	.word	0x000e7c15
   efa84:	000e7d5d 	.word	0x000e7d5d
   efa88:	000e884d 	.word	0x000e884d
   efa8c:	000e88d1 	.word	0x000e88d1
   efa90:	000e8a35 	.word	0x000e8a35
   efa94:	000e8af9 	.word	0x000e8af9

000efa98 <link_constructors_end>:
	...
