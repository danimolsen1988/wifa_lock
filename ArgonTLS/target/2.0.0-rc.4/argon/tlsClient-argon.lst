
c:/Users/Keld/Documents/engineer/IoT/tlsClient-argon/target/2.0.0-rc.4/argon/tlsClient-argon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00019aa0  000d4020  000d4020  00004020  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000edac0  000edac0  0001dac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000edac8  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000214  2003ac50  000edacc  0002ac50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000398c  2003ae68  2003ae68  0003ae68  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000edce0  000edce0  0002dce0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000edd08  000edd08  0002dd08  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00218ced  00000000  00000000  0002dd0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00025d54  00000000  00000000  002469f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00065a19  00000000  00000000  0026c74d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000042c8  00000000  00000000  002d2166  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 0000ac58  00000000  00000000  002d642e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000476e5  00000000  00000000  002e1086  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00067ae2  00000000  00000000  0032876b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    001282c0  00000000  00000000  0039024d  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000df24  00000000  00000000  004b8510  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f014 fc4b 	bl	e88cc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f014 fc6d 	bl	e891c <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003ac50 	.word	0x2003ac50
   d404c:	000edacc 	.word	0x000edacc
   d4050:	2003ae64 	.word	0x2003ae64
   d4054:	2003ae68 	.word	0x2003ae68
   d4058:	2003e7f4 	.word	0x2003e7f4

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f012 f9db 	bl	e641c <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000eda94 	.word	0x000eda94
   d4080:	000edab8 	.word	0x000edab8

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b88e 	b.w	d41a4 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fa13 	bl	d44b4 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f012 b985 	b.w	e63a0 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f011 bb8b 	b.w	e57b0 <malloc>

000d409a <_Znaj>:
   d409a:	f011 bb89 	b.w	e57b0 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f011 bb8f 	b.w	e57c0 <free>

000d40a2 <_ZdaPv>:
   d40a2:	f011 bb8d 	b.w	e57c0 <free>
	...

000d40a8 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40aa:	4a03      	ldr	r2, [pc, #12]	; (d40b8 <__cxa_pure_virtual+0x10>)
   d40ac:	2100      	movs	r1, #0
   d40ae:	200c      	movs	r0, #12
   d40b0:	f011 fac8 	bl	e5644 <panic_>
  while (1);
   d40b4:	e7fe      	b.n	d40b4 <__cxa_pure_virtual+0xc>
   d40b6:	bf00      	nop
   d40b8:	000e5365 	.word	0x000e5365

000d40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40bc:	7800      	ldrb	r0, [r0, #0]
   d40be:	fab0 f080 	clz	r0, r0
   d40c2:	0940      	lsrs	r0, r0, #5
   d40c4:	4770      	bx	lr

000d40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c6:	2301      	movs	r3, #1
   d40c8:	7003      	strb	r3, [r0, #0]
   d40ca:	4770      	bx	lr

000d40cc <_ZN8particle24SystemSleepConfigurationD1Ev>:
        config.config_.wakeup_sources = nullptr;
        return *this;
    }

    // Destructor
    ~SystemSleepConfiguration() {
   d40cc:	b538      	push	{r3, r4, r5, lr}
   d40ce:	4604      	mov	r4, r0
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
   d40d0:	6900      	ldr	r0, [r0, #16]
        while (wakeupSource) {
   d40d2:	b128      	cbz	r0, d40e0 <_ZN8particle24SystemSleepConfigurationD1Ev+0x14>
            auto next = wakeupSource->next;
   d40d4:	6885      	ldr	r5, [r0, #8]
            delete wakeupSource;
   d40d6:	210c      	movs	r1, #12
   d40d8:	f013 fa81 	bl	e75de <_ZdlPvj>
            wakeupSource = next;
   d40dc:	4628      	mov	r0, r5
        while (wakeupSource) {
   d40de:	e7f8      	b.n	d40d2 <_ZN8particle24SystemSleepConfigurationD1Ev+0x6>
        }
    }
   d40e0:	4620      	mov	r0, r4
   d40e2:	bd38      	pop	{r3, r4, r5, pc}

000d40e4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d40e4:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d40e6:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d40e8:	4604      	mov	r4, r0
          _M_dispose();
   d40ea:	689b      	ldr	r3, [r3, #8]
   d40ec:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d40ee:	68a3      	ldr	r3, [r4, #8]
   d40f0:	3b01      	subs	r3, #1
   d40f2:	60a3      	str	r3, [r4, #8]
   d40f4:	b92b      	cbnz	r3, d4102 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d40f6:	6823      	ldr	r3, [r4, #0]
   d40f8:	4620      	mov	r0, r4
   d40fa:	68db      	ldr	r3, [r3, #12]
        }
    }
   d40fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d4100:	4718      	bx	r3
    }
   d4102:	bd10      	pop	{r4, pc}

000d4104 <_ZNSt6vectorIhSaIhEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
   d4104:	b510      	push	{r4, lr}
   d4106:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   d4108:	6800      	ldr	r0, [r0, #0]
	if (__p)
   d410a:	b108      	cbz	r0, d4110 <_ZNSt6vectorIhSaIhEED1Ev+0xc>
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d410c:	f7ff ffc7 	bl	d409e <_ZdlPv>
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator());
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
   d4110:	4620      	mov	r0, r4
   d4112:	bd10      	pop	{r4, pc}

000d4114 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4114:	b510      	push	{r4, lr}
   d4116:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4118:	6800      	ldr	r0, [r0, #0]
   d411a:	b108      	cbz	r0, d4120 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d411c:	f011 fb50 	bl	e57c0 <free>
class SystemClass {
   d4120:	4620      	mov	r0, r4
   d4122:	bd10      	pop	{r4, pc}

000d4124 <_ZSt22__uninitialized_copy_aIPhS0_hET0_T_S2_S1_RSaIT1_E.isra.0>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
   d4124:	b510      	push	{r4, lr}
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
   d4126:	1a0c      	subs	r4, r1, r0
   d4128:	4613      	mov	r3, r2
   d412a:	d005      	beq.n	d4138 <_ZSt22__uninitialized_copy_aIPhS0_hET0_T_S2_S1_RSaIT1_E.isra.0+0x14>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d412c:	4601      	mov	r1, r0
   d412e:	4622      	mov	r2, r4
   d4130:	4618      	mov	r0, r3
   d4132:	f014 fbd9 	bl	e88e8 <memmove>
   d4136:	4603      	mov	r3, r0
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
   d4138:	1918      	adds	r0, r3, r4
   d413a:	bd10      	pop	{r4, pc}

000d413c <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d413c:	b510      	push	{r4, lr}
   d413e:	4b06      	ldr	r3, [pc, #24]	; (d4158 <_ZN9TCPClientD1Ev+0x1c>)
   d4140:	6003      	str	r3, [r0, #0]
   d4142:	4604      	mov	r4, r0
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4144:	6980      	ldr	r0, [r0, #24]
   d4146:	b128      	cbz	r0, d4154 <_ZN9TCPClientD1Ev+0x18>
      if (--_M_use_count == 0)
   d4148:	6843      	ldr	r3, [r0, #4]
   d414a:	3b01      	subs	r3, #1
   d414c:	6043      	str	r3, [r0, #4]
   d414e:	b90b      	cbnz	r3, d4154 <_ZN9TCPClientD1Ev+0x18>
   d4150:	f7ff ffc8 	bl	d40e4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
   d4154:	4620      	mov	r0, r4
   d4156:	bd10      	pop	{r4, pc}
   d4158:	000ed50c 	.word	0x000ed50c

000d415c <_ZN9TCPServerD1Ev>:
    sock_handle_t _sock;
    TCPClient _client;

public:
    TCPServer(uint16_t, network_interface_t nif=0);
    ~TCPServer() { stop(); }
   d415c:	b538      	push	{r3, r4, r5, lr}
   d415e:	4605      	mov	r5, r0
   d4160:	4b05      	ldr	r3, [pc, #20]	; (d4178 <_ZN9TCPServerD1Ev+0x1c>)
   d4162:	f845 3b14 	str.w	r3, [r5], #20
   d4166:	4604      	mov	r4, r0
   d4168:	f011 ffba 	bl	e60e0 <_ZN9TCPServer4stopEv>
   d416c:	4628      	mov	r0, r5
   d416e:	f7ff ffe5 	bl	d413c <_ZN9TCPClientD1Ev>
   d4172:	4620      	mov	r0, r4
   d4174:	bd38      	pop	{r3, r4, r5, pc}
   d4176:	bf00      	nop
   d4178:	000ed420 	.word	0x000ed420

000d417c <_ZN9TCPClientD0Ev>:
   d417c:	b510      	push	{r4, lr}
   d417e:	4604      	mov	r4, r0
   d4180:	f7ff ffdc 	bl	d413c <_ZN9TCPClientD1Ev>
   d4184:	4620      	mov	r0, r4
   d4186:	211c      	movs	r1, #28
   d4188:	f013 fa29 	bl	e75de <_ZdlPvj>
   d418c:	4620      	mov	r0, r4
   d418e:	bd10      	pop	{r4, pc}

000d4190 <_ZN9TCPServerD0Ev>:
   d4190:	b510      	push	{r4, lr}
   d4192:	4604      	mov	r4, r0
   d4194:	f7ff ffe2 	bl	d415c <_ZN9TCPServerD1Ev>
   d4198:	4620      	mov	r0, r4
   d419a:	2130      	movs	r1, #48	; 0x30
   d419c:	f013 fa1f 	bl	e75de <_ZdlPvj>
   d41a0:	4620      	mov	r0, r4
   d41a2:	bd10      	pop	{r4, pc}

000d41a4 <setup>:
std::vector<uint8_t> imgVector;
SystemSleepConfiguration sleepcfg;

bool camLoop();

void setup() {
   d41a4:	b538      	push	{r3, r4, r5, lr}
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d41a6:	4c3b      	ldr	r4, [pc, #236]	; (d4294 <setup+0xf0>)
   d41a8:	2300      	movs	r3, #0
   d41aa:	461a      	mov	r2, r3
   d41ac:	4619      	mov	r1, r3
   d41ae:	6860      	ldr	r0, [r4, #4]
   d41b0:	f011 fab6 	bl	e5720 <network_on>
        network_connect(*this, flags, 0, NULL);
   d41b4:	2300      	movs	r3, #0
   d41b6:	6860      	ldr	r0, [r4, #4]
   d41b8:	461a      	mov	r2, r3
   d41ba:	4619      	mov	r1, r3
   d41bc:	f011 fa90 	bl	e56e0 <network_connect>
        return network_connecting(*this, 0, NULL);
   d41c0:	2200      	movs	r2, #0
   d41c2:	6860      	ldr	r0, [r4, #4]
   d41c4:	4611      	mov	r1, r2
   d41c6:	f011 fa93 	bl	e56f0 <network_connecting>
    WiFi.on();
    WiFi.connect();
    while(WiFi.connecting());
   d41ca:	2800      	cmp	r0, #0
   d41cc:	d1f8      	bne.n	d41c0 <setup+0x1c>
        return true;
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
   d41ce:	4c32      	ldr	r4, [pc, #200]	; (d4298 <setup+0xf4>)
    delay(2000);    // was here--------------------------------
   d41d0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d41d4:	f011 fed4 	bl	e5f80 <delay>
   d41d8:	7d23      	ldrb	r3, [r4, #20]
   d41da:	b1eb      	cbz	r3, d4218 <setup+0x74>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d41dc:	2302      	movs	r3, #2
   d41de:	7223      	strb	r3, [r4, #8]
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d41e0:	6823      	ldr	r3, [r4, #0]
   d41e2:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d41e4:	b123      	cbz	r3, d41f0 <setup+0x4c>
            if (start->type == type) {
   d41e6:	889a      	ldrh	r2, [r3, #4]
   d41e8:	2a04      	cmp	r2, #4
   d41ea:	d050      	beq.n	d428e <setup+0xea>
            start = start->next;
   d41ec:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d41ee:	e7f9      	b.n	d41e4 <setup+0x40>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d41f0:	492a      	ldr	r1, [pc, #168]	; (d429c <setup+0xf8>)
   d41f2:	2010      	movs	r0, #16
   d41f4:	f013 f9f5 	bl	e75e2 <_ZnwjRKSt9nothrow_t>
   d41f8:	4605      	mov	r5, r0
   d41fa:	2800      	cmp	r0, #0
   d41fc:	d045      	beq.n	d428a <setup+0xe6>
   d41fe:	2210      	movs	r2, #16
   d4200:	2100      	movs	r1, #0
   d4202:	f014 fb8b 	bl	e891c <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d4206:	4b26      	ldr	r3, [pc, #152]	; (d42a0 <setup+0xfc>)
   d4208:	602b      	str	r3, [r5, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d420a:	2304      	movs	r3, #4
   d420c:	80ab      	strh	r3, [r5, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d420e:	6923      	ldr	r3, [r4, #16]
   d4210:	60ab      	str	r3, [r5, #8]
            wakeupSource->ms = ms;
   d4212:	4b24      	ldr	r3, [pc, #144]	; (d42a4 <setup+0x100>)
   d4214:	60eb      	str	r3, [r5, #12]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d4216:	6125      	str	r5, [r4, #16]
        }
        return *this;
    }

    SystemSleepConfiguration& network(network_interface_t netif, EnumFlags<SystemSleepNetworkFlag> flags = SystemSleepNetworkFlag::NONE) {
        if (valid_) {
   d4218:	7d23      	ldrb	r3, [r4, #20]
   d421a:	b32b      	cbz	r3, d4268 <setup+0xc4>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d421c:	6823      	ldr	r3, [r4, #0]
   d421e:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d4220:	b16b      	cbz	r3, d423e <setup+0x9a>
            if (start->type == type) {
   d4222:	889a      	ldrh	r2, [r3, #4]
   d4224:	2a0e      	cmp	r2, #14
   d4226:	d001      	beq.n	d422c <setup+0x88>
            start = start->next;
   d4228:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d422a:	e7f9      	b.n	d4220 <setup+0x7c>
            auto wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_NETWORK);
            while (wakeup) {
                auto networkWakeup = reinterpret_cast<hal_wakeup_source_network_t*>(wakeup);
                if (networkWakeup->index == netif) {
   d422c:	7b1a      	ldrb	r2, [r3, #12]
   d422e:	2a04      	cmp	r2, #4
   d4230:	d01a      	beq.n	d4268 <setup+0xc4>
                    if (networkWakeup->flags != flags.value()) {
                        networkWakeup->flags |= flags.value();
                    }
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_NETWORK, wakeup->next);
   d4232:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   d4234:	b11b      	cbz	r3, d423e <setup+0x9a>
            if (start->type == type) {
   d4236:	889a      	ldrh	r2, [r3, #4]
   d4238:	2a0e      	cmp	r2, #14
   d423a:	d1fa      	bne.n	d4232 <setup+0x8e>
   d423c:	e7f6      	b.n	d422c <setup+0x88>
            }
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_network_t();
   d423e:	4917      	ldr	r1, [pc, #92]	; (d429c <setup+0xf8>)
   d4240:	2014      	movs	r0, #20
   d4242:	f013 f9ce 	bl	e75e2 <_ZnwjRKSt9nothrow_t>
   d4246:	4605      	mov	r5, r0
   d4248:	b1e8      	cbz	r0, d4286 <setup+0xe2>
   d424a:	2214      	movs	r2, #20
   d424c:	2100      	movs	r1, #0
   d424e:	f014 fb65 	bl	e891c <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   d4252:	4b13      	ldr	r3, [pc, #76]	; (d42a0 <setup+0xfc>)
   d4254:	602b      	str	r3, [r5, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_NETWORK;
   d4256:	230e      	movs	r3, #14
   d4258:	80ab      	strh	r3, [r5, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d425a:	6923      	ldr	r3, [r4, #16]
   d425c:	60ab      	str	r3, [r5, #8]
            wakeupSource->index = static_cast<network_interface_index>(netif);
   d425e:	2304      	movs	r3, #4
   d4260:	732b      	strb	r3, [r5, #12]
            wakeupSource->flags = flags.value();
   d4262:	2300      	movs	r3, #0
   d4264:	81eb      	strh	r3, [r5, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d4266:	6125      	str	r5, [r4, #16]
#if DEBUG_AZURE == 1
    Serial.begin(115200);    
    Serial.println(Time.timeStr());
    Serial.println(WiFi.localIP().toString());
#endif
    hw.setup();
   d4268:	480f      	ldr	r0, [pc, #60]	; (d42a8 <setup+0x104>)
   d426a:	f000 fb99 	bl	d49a0 <_ZN17HardwareInterface5setupEv>
    client.setup();
   d426e:	480f      	ldr	r0, [pc, #60]	; (d42ac <setup+0x108>)
   d4270:	f000 fa38 	bl	d46e4 <_ZN16TlsClientHandler5setupEv>
    server.begin();
   d4274:	480e      	ldr	r0, [pc, #56]	; (d42b0 <setup+0x10c>)
   d4276:	f011 ff3f 	bl	e60f8 <_ZN9TCPServer5beginEv>
    hw.openLock(0);
}
   d427a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    hw.openLock(0);
   d427e:	480a      	ldr	r0, [pc, #40]	; (d42a8 <setup+0x104>)
   d4280:	2100      	movs	r1, #0
   d4282:	f000 bb9c 	b.w	d49be <_ZN17HardwareInterface8openLockEi>
                valid_ = false;
   d4286:	7520      	strb	r0, [r4, #20]
                return *this;
   d4288:	e7ee      	b.n	d4268 <setup+0xc4>
                valid_ = false;
   d428a:	7520      	strb	r0, [r4, #20]
                return *this;
   d428c:	e7c4      	b.n	d4218 <setup+0x74>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   d428e:	4a05      	ldr	r2, [pc, #20]	; (d42a4 <setup+0x100>)
   d4290:	60da      	str	r2, [r3, #12]
                return *this;
   d4292:	e7c1      	b.n	d4218 <setup+0x74>
   d4294:	2003e7b8 	.word	0x2003e7b8
   d4298:	2003c3ac 	.word	0x2003c3ac
   d429c:	000ed5d8 	.word	0x000ed5d8
   d42a0:	00030010 	.word	0x00030010
   d42a4:	000927c0 	.word	0x000927c0
   d42a8:	2003c358 	.word	0x2003c358
   d42ac:	2003ae80 	.word	0x2003ae80
   d42b0:	2003c37c 	.word	0x2003c37c

000d42b4 <_ZNSt6vectorIhSaIhEE15_M_range_insertIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag>:
      void
      vector<_Tp, _Alloc>::
      _M_range_insert(iterator __position, _ForwardIterator __first,
		      _ForwardIterator __last, std::forward_iterator_tag)
      {
	if (__first != __last)
   d42b4:	429a      	cmp	r2, r3
      vector<_Tp, _Alloc>::
   d42b6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d42ba:	460e      	mov	r6, r1
   d42bc:	4605      	mov	r5, r0
   d42be:	4690      	mov	r8, r2
   d42c0:	4619      	mov	r1, r3
	if (__first != __last)
   d42c2:	d073      	beq.n	d43ac <_ZNSt6vectorIhSaIhEE15_M_range_insertIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0xf8>
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d42c4:	1a9f      	subs	r7, r3, r2
	  {
	    const size_type __n = std::distance(__first, __last);
	    if (size_type(this->_M_impl._M_end_of_storage
			  - this->_M_impl._M_finish) >= __n)
   d42c6:	e9d0 4201 	ldrd	r4, r2, [r0, #4]
   d42ca:	1b12      	subs	r2, r2, r4
	    if (size_type(this->_M_impl._M_end_of_storage
   d42cc:	42ba      	cmp	r2, r7
   d42ce:	d331      	bcc.n	d4334 <_ZNSt6vectorIhSaIhEE15_M_range_insertIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0x80>
  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   d42d0:	eba4 0906 	sub.w	r9, r4, r6
	      {
		const size_type __elems_after = end() - __position;
		pointer __old_finish(this->_M_impl._M_finish);
		if (__elems_after > __n)
   d42d4:	454f      	cmp	r7, r9
   d42d6:	d217      	bcs.n	d4308 <_ZNSt6vectorIhSaIhEE15_M_range_insertIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0x54>
		  {
		    _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
		    std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
   d42d8:	eba4 0907 	sub.w	r9, r4, r7
   d42dc:	4622      	mov	r2, r4
   d42de:	4621      	mov	r1, r4
   d42e0:	4648      	mov	r0, r9
   d42e2:	f7ff ff1f 	bl	d4124 <_ZSt22__uninitialized_copy_aIPhS0_hET0_T_S2_S1_RSaIT1_E.isra.0>
						this->_M_impl._M_finish,
						this->_M_impl._M_finish,
						_M_get_Tp_allocator());
		    this->_M_impl._M_finish += __n;
   d42e6:	686b      	ldr	r3, [r5, #4]
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
   d42e8:	ebb9 0206 	subs.w	r2, r9, r6
   d42ec:	443b      	add	r3, r7
   d42ee:	606b      	str	r3, [r5, #4]
   d42f0:	d003      	beq.n	d42fa <_ZNSt6vectorIhSaIhEE15_M_range_insertIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0x46>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   d42f2:	4631      	mov	r1, r6
   d42f4:	1aa0      	subs	r0, r4, r2
   d42f6:	f014 faf7 	bl	e88e8 <memmove>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d42fa:	463a      	mov	r2, r7
   d42fc:	4641      	mov	r1, r8
   d42fe:	4630      	mov	r0, r6
		this->_M_impl._M_start = __new_start;
		this->_M_impl._M_finish = __new_finish;
		this->_M_impl._M_end_of_storage = __new_start + __len;
	      }
	  }
      }
   d4300:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4304:	f014 baf0 	b.w	e88e8 <memmove>
		    std::__uninitialized_copy_a(__mid, __last,
   d4308:	4622      	mov	r2, r4
   d430a:	eb08 0009 	add.w	r0, r8, r9
   d430e:	f7ff ff09 	bl	d4124 <_ZSt22__uninitialized_copy_aIPhS0_hET0_T_S2_S1_RSaIT1_E.isra.0>
		    this->_M_impl._M_finish += __n - __elems_after;
   d4312:	686a      	ldr	r2, [r5, #4]
   d4314:	eba7 0709 	sub.w	r7, r7, r9
   d4318:	443a      	add	r2, r7
   d431a:	606a      	str	r2, [r5, #4]
		    std::__uninitialized_move_a(__position.base(),
   d431c:	4621      	mov	r1, r4
   d431e:	4630      	mov	r0, r6
   d4320:	f7ff ff00 	bl	d4124 <_ZSt22__uninitialized_copy_aIPhS0_hET0_T_S2_S1_RSaIT1_E.isra.0>
		    this->_M_impl._M_finish += __elems_after;
   d4324:	686b      	ldr	r3, [r5, #4]
   d4326:	444b      	add	r3, r9
   d4328:	606b      	str	r3, [r5, #4]
	  if (_Num)
   d432a:	f1b9 0f00 	cmp.w	r9, #0
   d432e:	d03d      	beq.n	d43ac <_ZNSt6vectorIhSaIhEE15_M_range_insertIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0xf8>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d4330:	464a      	mov	r2, r9
   d4332:	e7e3      	b.n	d42fc <_ZNSt6vectorIhSaIhEE15_M_range_insertIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0x48>

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d4334:	6803      	ldr	r3, [r0, #0]
   d4336:	1ae4      	subs	r4, r4, r3

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
   d4338:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   d433c:	1b1a      	subs	r2, r3, r4
   d433e:	4297      	cmp	r7, r2
   d4340:	d902      	bls.n	d4348 <_ZNSt6vectorIhSaIhEE15_M_range_insertIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0x94>
	  __throw_length_error(__N(__s));
   d4342:	481d      	ldr	r0, [pc, #116]	; (d43b8 <_ZNSt6vectorIhSaIhEE15_M_range_insertIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0x104>)
   d4344:	f013 f957 	bl	e75f6 <_ZSt20__throw_length_errorPKc>
   d4348:	42a7      	cmp	r7, r4
   d434a:	463a      	mov	r2, r7
   d434c:	bf38      	it	cc
   d434e:	4622      	movcc	r2, r4
   d4350:	18a4      	adds	r4, r4, r2

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d4352:	d22d      	bcs.n	d43b0 <_ZNSt6vectorIhSaIhEE15_M_range_insertIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0xfc>
   d4354:	2c00      	cmp	r4, #0
   d4356:	db2b      	blt.n	d43b0 <_ZNSt6vectorIhSaIhEE15_M_range_insertIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0xfc>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d4358:	d02c      	beq.n	d43b4 <_ZNSt6vectorIhSaIhEE15_M_range_insertIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0x100>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d435a:	4620      	mov	r0, r4
   d435c:	f7ff fe9b 	bl	d4096 <_Znwj>
   d4360:	4681      	mov	r9, r0
		      (this->_M_impl._M_start, __position.base(),
   d4362:	f8d5 a000 	ldr.w	sl, [r5]
	  if (_Num)
   d4366:	ebb6 0b0a 	subs.w	fp, r6, sl
   d436a:	d004      	beq.n	d4376 <_ZNSt6vectorIhSaIhEE15_M_range_insertIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0xc2>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d436c:	465a      	mov	r2, fp
   d436e:	4651      	mov	r1, sl
   d4370:	4648      	mov	r0, r9
   d4372:	f014 fab9 	bl	e88e8 <memmove>
	  return __result + _Num;
   d4376:	44cb      	add	fp, r9
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d4378:	463a      	mov	r2, r7
   d437a:	4641      	mov	r1, r8
   d437c:	4658      	mov	r0, fp
   d437e:	f014 faa5 	bl	e88cc <memcpy>
	  const ptrdiff_t _Num = __last - __first;
   d4382:	686a      	ldr	r2, [r5, #4]
	  if (_Num)
   d4384:	ebb2 0806 	subs.w	r8, r2, r6
	  return __result + _Num;
   d4388:	445f      	add	r7, fp
	  if (_Num)
   d438a:	d004      	beq.n	d4396 <_ZNSt6vectorIhSaIhEE15_M_range_insertIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0xe2>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d438c:	4642      	mov	r2, r8
   d438e:	4631      	mov	r1, r6
   d4390:	4638      	mov	r0, r7
   d4392:	f014 fa9b 	bl	e88cc <memcpy>
	  return __result + _Num;
   d4396:	4447      	add	r7, r8
	if (__p)
   d4398:	f1ba 0f00 	cmp.w	sl, #0
   d439c:	d002      	beq.n	d43a4 <_ZNSt6vectorIhSaIhEE15_M_range_insertIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0xf0>
	::operator delete(__p);
   d439e:	4650      	mov	r0, sl
   d43a0:	f7ff fe7d 	bl	d409e <_ZdlPv>
		this->_M_impl._M_finish = __new_finish;
   d43a4:	e9c5 9700 	strd	r9, r7, [r5]
		this->_M_impl._M_end_of_storage = __new_start + __len;
   d43a8:	444c      	add	r4, r9
   d43aa:	60ac      	str	r4, [r5, #8]
      }
   d43ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d43b0:	461c      	mov	r4, r3
   d43b2:	e7d2      	b.n	d435a <_ZNSt6vectorIhSaIhEE15_M_range_insertIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0xa6>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d43b4:	46a1      	mov	r9, r4
   d43b6:	e7d4      	b.n	d4362 <_ZNSt6vectorIhSaIhEE15_M_range_insertIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0xae>
   d43b8:	000ea790 	.word	0x000ea790

000d43bc <_Z7camLoopv>:
#if DEBUG_AZURE == 0
    SystemSleepResult result = System.sleep(sleepcfg);
#endif
}

bool camLoop() {
   d43bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	  _M_start = __x._M_start;
   d43c0:	4f36      	ldr	r7, [pc, #216]	; (d449c <_Z7camLoopv+0xe0>)
    buffersize = 0; 
    totalSize = 0;
   d43c2:	4937      	ldr	r1, [pc, #220]	; (d44a0 <_Z7camLoopv+0xe4>)
    buffersize = 0; 
   d43c4:	4d37      	ldr	r5, [pc, #220]	; (d44a4 <_Z7camLoopv+0xe8>)
   d43c6:	6838      	ldr	r0, [r7, #0]
   d43c8:	2200      	movs	r2, #0
	  _M_finish = __x._M_finish;
   d43ca:	e9c7 2200 	strd	r2, r2, [r7]
bool camLoop() {
   d43ce:	b08a      	sub	sp, #40	; 0x28
    buffersize = 0; 
   d43d0:	602a      	str	r2, [r5, #0]
    totalSize = 0;
   d43d2:	600a      	str	r2, [r1, #0]
	  _M_end_of_storage = __x._M_end_of_storage;
   d43d4:	60ba      	str	r2, [r7, #8]
      _M_deallocate(pointer __p, size_t __n)
   d43d6:	4688      	mov	r8, r1
	if (__p)
   d43d8:	b108      	cbz	r0, d43de <_Z7camLoopv+0x22>
   d43da:	f7ff fe60 	bl	d409e <_ZdlPv>
const unsigned char BIN = 2;

class String;
class __FlashStringHelper;

class Print
   d43de:	4c32      	ldr	r4, [pc, #200]	; (d44a8 <_Z7camLoopv+0xec>)
    std::vector<uint8_t>().swap(imgVector);
    tcpClient = server.available();
   d43e0:	4932      	ldr	r1, [pc, #200]	; (d44ac <_Z7camLoopv+0xf0>)
   d43e2:	a803      	add	r0, sp, #12
   d43e4:	f011 ff3e 	bl	e6264 <_ZN9TCPServer9availableEv>
   d43e8:	9a04      	ldr	r2, [sp, #16]
   d43ea:	6062      	str	r2, [r4, #4]
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
   d43ec:	9a05      	ldr	r2, [sp, #20]
   d43ee:	60a2      	str	r2, [r4, #8]
   d43f0:	9a06      	ldr	r2, [sp, #24]
   d43f2:	60e2      	str	r2, [r4, #12]
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   d43f4:	9a07      	ldr	r2, [sp, #28]
   d43f6:	6122      	str	r2, [r4, #16]
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
    };

  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d43f8:	9a08      	ldr	r2, [sp, #32]
   d43fa:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d43fc:	6162      	str	r2, [r4, #20]
	if (__tmp != _M_pi)
   d43fe:	69a2      	ldr	r2, [r4, #24]
   d4400:	4296      	cmp	r6, r2
   d4402:	d00c      	beq.n	d441e <_Z7camLoopv+0x62>
	    if (__tmp != 0)
   d4404:	b116      	cbz	r6, d440c <_Z7camLoopv+0x50>
    { ++_M_use_count; }
   d4406:	6873      	ldr	r3, [r6, #4]
   d4408:	3301      	adds	r3, #1
   d440a:	6073      	str	r3, [r6, #4]
	    if (_M_pi != 0)
   d440c:	69a0      	ldr	r0, [r4, #24]
   d440e:	b128      	cbz	r0, d441c <_Z7camLoopv+0x60>
      if (--_M_use_count == 0)
   d4410:	6843      	ldr	r3, [r0, #4]
   d4412:	3b01      	subs	r3, #1
   d4414:	6043      	str	r3, [r0, #4]
   d4416:	b90b      	cbnz	r3, d441c <_Z7camLoopv+0x60>
   d4418:	f7ff fe64 	bl	d40e4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   d441c:	61a6      	str	r6, [r4, #24]
   d441e:	a803      	add	r0, sp, #12
   d4420:	f7ff fe8c 	bl	d413c <_ZN9TCPClientD1Ev>
    if(tcpClient) {
   d4424:	4820      	ldr	r0, [pc, #128]	; (d44a8 <_Z7camLoopv+0xec>)
   d4426:	f012 fa2d 	bl	e6884 <_ZN9TCPClientcvbEv>
   d442a:	4604      	mov	r4, r0
   d442c:	b388      	cbz	r0, d4492 <_Z7camLoopv+0xd6>
#if DEBUG_AZURE == 1
       Serial.println("client connected!");
#endif
       while(tcpClient.connected()) {
   d442e:	4e1e      	ldr	r6, [pc, #120]	; (d44a8 <_Z7camLoopv+0xec>)
           if((buffersize = tcpClient.available())) {
                img = new uint8_t[buffersize];
   d4430:	f8df 907c 	ldr.w	r9, [pc, #124]	; d44b0 <_Z7camLoopv+0xf4>
	  _M_range_insert(__pos, __first, __last,
   d4434:	f8df a064 	ldr.w	sl, [pc, #100]	; d449c <_Z7camLoopv+0xe0>
       while(tcpClient.connected()) {
   d4438:	4630      	mov	r0, r6
   d443a:	f012 fa0a 	bl	e6852 <_ZN9TCPClient9connectedEv>
   d443e:	b340      	cbz	r0, d4492 <_Z7camLoopv+0xd6>
           if((buffersize = tcpClient.available())) {
   d4440:	4630      	mov	r0, r6
   d4442:	f012 fbe9 	bl	e6c18 <_ZN9TCPClient9availableEv>
   d4446:	6028      	str	r0, [r5, #0]
   d4448:	2800      	cmp	r0, #0
   d444a:	d0f5      	beq.n	d4438 <_Z7camLoopv+0x7c>
                img = new uint8_t[buffersize];
   d444c:	f7ff fe25 	bl	d409a <_Znaj>
                tcpClient.readBytes((char*)img,buffersize);
   d4450:	682a      	ldr	r2, [r5, #0]
                img = new uint8_t[buffersize];
   d4452:	f8c9 0000 	str.w	r0, [r9]
   d4456:	4601      	mov	r1, r0
                tcpClient.readBytes((char*)img,buffersize);
   d4458:	4630      	mov	r0, r6
   d445a:	f011 fd61 	bl	e5f20 <_ZN6Stream9readBytesEPcj>
                imgVector.insert(imgVector.end(), img, img + buffersize);    
   d445e:	f8d9 2000 	ldr.w	r2, [r9]
   d4462:	682b      	ldr	r3, [r5, #0]
   d4464:	f04f 0100 	mov.w	r1, #0
   d4468:	4413      	add	r3, r2
   d446a:	f88d 1000 	strb.w	r1, [sp]
   d446e:	4650      	mov	r0, sl
   d4470:	6879      	ldr	r1, [r7, #4]
   d4472:	f7ff ff1f 	bl	d42b4 <_ZNSt6vectorIhSaIhEE15_M_range_insertIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag>
                totalSize += buffersize;
   d4476:	f8d8 3000 	ldr.w	r3, [r8]
   d447a:	682a      	ldr	r2, [r5, #0]
                delete(img); 
   d447c:	f8d9 0000 	ldr.w	r0, [r9]
                totalSize += buffersize;
   d4480:	4413      	add	r3, r2
   d4482:	f8c8 3000 	str.w	r3, [r8]
                delete(img); 
   d4486:	2800      	cmp	r0, #0
   d4488:	d0d6      	beq.n	d4438 <_Z7camLoopv+0x7c>
   d448a:	2101      	movs	r1, #1
   d448c:	f013 f8a7 	bl	e75de <_ZdlPvj>
   d4490:	e7d0      	b.n	d4434 <_Z7camLoopv+0x78>
           }
       }
        return true;
   }
   return false;
   d4492:	4620      	mov	r0, r4
   d4494:	b00a      	add	sp, #40	; 0x28
   d4496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d449a:	bf00      	nop
   d449c:	2003c370 	.word	0x2003c370
   d44a0:	2003c3e0 	.word	0x2003c3e0
   d44a4:	2003ae78 	.word	0x2003ae78
   d44a8:	2003c3c4 	.word	0x2003c3c4
   d44ac:	2003c37c 	.word	0x2003c37c
   d44b0:	2003c36c 	.word	0x2003c36c

000d44b4 <loop>:
void loop() {
   d44b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if(camLoop()){
   d44b6:	f7ff ff81 	bl	d43bc <_Z7camLoopv>
   d44ba:	b1b8      	cbz	r0, d44ec <loop+0x38>
        if(client.detect(&imgVector[0],imgVector.size())) {
   d44bc:	4b13      	ldr	r3, [pc, #76]	; (d450c <loop+0x58>)
   d44be:	4814      	ldr	r0, [pc, #80]	; (d4510 <loop+0x5c>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d44c0:	e9d3 1200 	ldrd	r1, r2, [r3]
   d44c4:	1a52      	subs	r2, r2, r1
   d44c6:	f000 f9c5 	bl	d4854 <_ZN16TlsClientHandler6detectEPhm>
   d44ca:	b1d0      	cbz	r0, d4502 <loop+0x4e>
            hw.openLock(true);
   d44cc:	2101      	movs	r1, #1
   d44ce:	4811      	ldr	r0, [pc, #68]	; (d4514 <loop+0x60>)
   d44d0:	f000 fa75 	bl	d49be <_ZN17HardwareInterface8openLockEi>
            delay(8000);
   d44d4:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
   d44d8:	f011 fd52 	bl	e5f80 <delay>
            hw.openLock(false);
   d44dc:	480d      	ldr	r0, [pc, #52]	; (d4514 <loop+0x60>)
   d44de:	2100      	movs	r1, #0
   d44e0:	f000 fa6d 	bl	d49be <_ZN17HardwareInterface8openLockEi>
            delay(2000);
   d44e4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d44e8:	f011 fd4a 	bl	e5f80 <delay>
    SystemSleepResult result = System.sleep(sleepcfg);
   d44ec:	a801      	add	r0, sp, #4
   d44ee:	490a      	ldr	r1, [pc, #40]	; (d4518 <loop+0x64>)
   d44f0:	f011 faa2 	bl	e5a38 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
        if (wakeupSource_) {
   d44f4:	9801      	ldr	r0, [sp, #4]
   d44f6:	b108      	cbz	r0, d44fc <loop+0x48>
            free(wakeupSource_);
   d44f8:	f011 f962 	bl	e57c0 <free>
}
   d44fc:	b005      	add	sp, #20
   d44fe:	f85d fb04 	ldr.w	pc, [sp], #4
            hw.faceNotRecogged();
   d4502:	4804      	ldr	r0, [pc, #16]	; (d4514 <loop+0x60>)
   d4504:	f000 fa63 	bl	d49ce <_ZN17HardwareInterface15faceNotRecoggedEv>
   d4508:	e7ec      	b.n	d44e4 <loop+0x30>
   d450a:	bf00      	nop
   d450c:	2003c370 	.word	0x2003c370
   d4510:	2003ae80 	.word	0x2003ae80
   d4514:	2003c358 	.word	0x2003c358
   d4518:	2003c3ac 	.word	0x2003c3ac

000d451c <_GLOBAL__sub_I_SystemMode>:
   d451c:	b570      	push	{r4, r5, r6, lr}
              error_(SYSTEM_ERROR_NONE) {
   d451e:	4e2a      	ldr	r6, [pc, #168]	; (d45c8 <_GLOBAL__sub_I_SystemMode+0xac>)
    SleepResult() {}
   d4520:	4b2a      	ldr	r3, [pc, #168]	; (d45cc <_GLOBAL__sub_I_SystemMode+0xb0>)
   d4522:	60b3      	str	r3, [r6, #8]
              error_(SYSTEM_ERROR_NONE) {
   d4524:	2400      	movs	r4, #0
SYSTEM_MODE(MANUAL);
   d4526:	4d2a      	ldr	r5, [pc, #168]	; (d45d0 <_GLOBAL__sub_I_SystemMode+0xb4>)
   d4528:	6034      	str	r4, [r6, #0]
   d452a:	80b4      	strh	r4, [r6, #4]
    SleepResult() {}
   d452c:	71b4      	strb	r4, [r6, #6]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d452e:	2003      	movs	r0, #3
   d4530:	f011 f8a8 	bl	e5684 <set_system_mode>
   d4534:	4630      	mov	r0, r6
TlsClientHandler client;
   d4536:	4e27      	ldr	r6, [pc, #156]	; (d45d4 <_GLOBAL__sub_I_SystemMode+0xb8>)
SYSTEM_MODE(MANUAL);
   d4538:	4927      	ldr	r1, [pc, #156]	; (d45d8 <_GLOBAL__sub_I_SystemMode+0xbc>)
   d453a:	462a      	mov	r2, r5
   d453c:	f013 f84a 	bl	e75d4 <__aeabi_atexit>
TlsClientHandler client;
   d4540:	4630      	mov	r0, r6
   d4542:	f000 f863 	bl	d460c <_ZN16TlsClientHandlerC1Ev>
   d4546:	4630      	mov	r0, r6
TCPServer server = TCPServer(2555);
   d4548:	4e24      	ldr	r6, [pc, #144]	; (d45dc <_GLOBAL__sub_I_SystemMode+0xc0>)
TlsClientHandler client;
   d454a:	4925      	ldr	r1, [pc, #148]	; (d45e0 <_GLOBAL__sub_I_SystemMode+0xc4>)
   d454c:	462a      	mov	r2, r5
   d454e:	f013 f841 	bl	e75d4 <__aeabi_atexit>
TCPServer server = TCPServer(2555);
   d4552:	4622      	mov	r2, r4
   d4554:	f640 11fb 	movw	r1, #2555	; 0x9fb
   d4558:	4630      	mov	r0, r6
   d455a:	f011 fd97 	bl	e608c <_ZN9TCPServerC1Etm>
   d455e:	4630      	mov	r0, r6
TCPClient tcpClient;
   d4560:	4e20      	ldr	r6, [pc, #128]	; (d45e4 <_GLOBAL__sub_I_SystemMode+0xc8>)
TCPServer server = TCPServer(2555);
   d4562:	4921      	ldr	r1, [pc, #132]	; (d45e8 <_GLOBAL__sub_I_SystemMode+0xcc>)
   d4564:	462a      	mov	r2, r5
   d4566:	f013 f835 	bl	e75d4 <__aeabi_atexit>
TCPClient tcpClient;
   d456a:	4630      	mov	r0, r6
   d456c:	f012 fbf8 	bl	e6d60 <_ZN9TCPClientC1Ev>
   d4570:	4630      	mov	r0, r6
HardwareInterface hw;
   d4572:	4e1e      	ldr	r6, [pc, #120]	; (d45ec <_GLOBAL__sub_I_SystemMode+0xd0>)
TCPClient tcpClient;
   d4574:	491e      	ldr	r1, [pc, #120]	; (d45f0 <_GLOBAL__sub_I_SystemMode+0xd4>)
   d4576:	462a      	mov	r2, r5
   d4578:	f013 f82c 	bl	e75d4 <__aeabi_atexit>
HardwareInterface hw;
   d457c:	4630      	mov	r0, r6
   d457e:	f000 fa01 	bl	d4984 <_ZN17HardwareInterfaceC1Ev>
   d4582:	462a      	mov	r2, r5
   d4584:	491b      	ldr	r1, [pc, #108]	; (d45f4 <_GLOBAL__sub_I_SystemMode+0xd8>)
   d4586:	4630      	mov	r0, r6
   d4588:	f013 f824 	bl	e75d4 <__aeabi_atexit>
	: _M_start(), _M_finish(), _M_end_of_storage()
   d458c:	481a      	ldr	r0, [pc, #104]	; (d45f8 <_GLOBAL__sub_I_SystemMode+0xdc>)
std::vector<uint8_t> imgVector;
   d458e:	491b      	ldr	r1, [pc, #108]	; (d45fc <_GLOBAL__sub_I_SystemMode+0xe0>)
   d4590:	6084      	str	r4, [r0, #8]
   d4592:	462a      	mov	r2, r5
   d4594:	e9c0 4400 	strd	r4, r4, [r0]
   d4598:	f013 f81c 	bl	e75d4 <__aeabi_atexit>
        : config_(config) {
   d459c:	4818      	ldr	r0, [pc, #96]	; (d4600 <_GLOBAL__sub_I_SystemMode+0xe4>)
SystemSleepConfiguration sleepcfg;
   d459e:	4919      	ldr	r1, [pc, #100]	; (d4604 <_GLOBAL__sub_I_SystemMode+0xe8>)
              valid_(true) {
   d45a0:	f8a0 4009 	strh.w	r4, [r0, #9]
        : config_(config) {
   d45a4:	4603      	mov	r3, r0
   d45a6:	1d02      	adds	r2, r0, #4
   d45a8:	f843 2b09 	str.w	r2, [r3], #9
              valid_(true) {
   d45ac:	709c      	strb	r4, [r3, #2]
   d45ae:	2301      	movs	r3, #1
        config_.wakeup_sources = nullptr;
   d45b0:	e9c0 4403 	strd	r4, r4, [r0, #12]
              valid_(true) {
   d45b4:	7503      	strb	r3, [r0, #20]
        config_.size = sizeof(hal_sleep_config_t);
   d45b6:	4b14      	ldr	r3, [pc, #80]	; (d4608 <_GLOBAL__sub_I_SystemMode+0xec>)
   d45b8:	6043      	str	r3, [r0, #4]
        config_.mode = HAL_SLEEP_MODE_NONE;
   d45ba:	7204      	strb	r4, [r0, #8]
   d45bc:	462a      	mov	r2, r5
   d45be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
SystemSleepConfiguration sleepcfg;
   d45c2:	f013 b807 	b.w	e75d4 <__aeabi_atexit>
   d45c6:	bf00      	nop
   d45c8:	2003ae6c 	.word	0x2003ae6c
   d45cc:	ffff0000 	.word	0xffff0000
   d45d0:	2003ae68 	.word	0x2003ae68
   d45d4:	2003ae80 	.word	0x2003ae80
   d45d8:	000d4115 	.word	0x000d4115
   d45dc:	2003c37c 	.word	0x2003c37c
   d45e0:	000d4681 	.word	0x000d4681
   d45e4:	2003c3c4 	.word	0x2003c3c4
   d45e8:	000d415d 	.word	0x000d415d
   d45ec:	2003c358 	.word	0x2003c358
   d45f0:	000d413d 	.word	0x000d413d
   d45f4:	000d4995 	.word	0x000d4995
   d45f8:	2003c370 	.word	0x2003c370
   d45fc:	000d4105 	.word	0x000d4105
   d4600:	2003c3ac 	.word	0x2003c3ac
   d4604:	000d40cd 	.word	0x000d40cd
   d4608:	00030010 	.word	0x00030010

000d460c <_ZN16TlsClientHandlerC1Ev>:
#include "TlsClientHandler.h"


TlsClientHandler::TlsClientHandler(/* args */)
   d460c:	b510      	push	{r4, lr}
   d460e:	4917      	ldr	r1, [pc, #92]	; (d466c <_ZN16TlsClientHandlerC1Ev+0x60>)
   d4610:	f240 72e1 	movw	r2, #2017	; 0x7e1
   d4614:	4604      	mov	r4, r0
   d4616:	f014 f959 	bl	e88cc <memcpy>
   d461a:	4b15      	ldr	r3, [pc, #84]	; (d4670 <_ZN16TlsClientHandlerC1Ev+0x64>)
   d461c:	f204 72e1 	addw	r2, r4, #2017	; 0x7e1
   d4620:	f103 0134 	add.w	r1, r3, #52	; 0x34
   d4624:	f853 0b04 	ldr.w	r0, [r3], #4
   d4628:	f842 0b04 	str.w	r0, [r2], #4
   d462c:	428b      	cmp	r3, r1
   d462e:	d1f9      	bne.n	d4624 <_ZN16TlsClientHandlerC1Ev+0x18>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4630:	f010 fea0 	bl	e5374 <HAL_Timer_Get_Milli_Seconds>
   d4634:	490f      	ldr	r1, [pc, #60]	; (d4674 <_ZN16TlsClientHandlerC1Ev+0x68>)
   d4636:	f8c4 0818 	str.w	r0, [r4, #2072]	; 0x818
   d463a:	f604 401c 	addw	r0, r4, #3100	; 0xc1c
   d463e:	f011 fb09 	bl	e5c54 <_ZN6StringC1EPKc>
   d4642:	490d      	ldr	r1, [pc, #52]	; (d4678 <_ZN16TlsClientHandlerC1Ev+0x6c>)
   d4644:	f604 402c 	addw	r0, r4, #3116	; 0xc2c
   d4648:	f011 fb04 	bl	e5c54 <_ZN6StringC1EPKc>
   d464c:	490b      	ldr	r1, [pc, #44]	; (d467c <_ZN16TlsClientHandlerC1Ev+0x70>)
   d464e:	f604 403c 	addw	r0, r4, #3132	; 0xc3c
   d4652:	f011 faff 	bl	e5c54 <_ZN6StringC1EPKc>
   d4656:	f504 6045 	add.w	r0, r4, #3152	; 0xc50
   d465a:	f000 f9eb 	bl	d4a34 <_ZN12TlsTcpClientC1Ev>
   d465e:	f504 50a0 	add.w	r0, r4, #5120	; 0x1400
   d4662:	f000 fb69 	bl	d4d38 <_ZN10HttpHelperC1Ev>
{
}
   d4666:	4620      	mov	r0, r4
   d4668:	bd10      	pop	{r4, pc}
   d466a:	bf00      	nop
   d466c:	000ea7f2 	.word	0x000ea7f2
   d4670:	000eafd3 	.word	0x000eafd3
   d4674:	000ea7a8 	.word	0x000ea7a8
   d4678:	000ea7cd 	.word	0x000ea7cd
   d467c:	000eb4eb 	.word	0x000eb4eb

000d4680 <_ZN16TlsClientHandlerD1Ev>:

TlsClientHandler::~TlsClientHandler()
   d4680:	b538      	push	{r3, r4, r5, lr}
   d4682:	4604      	mov	r4, r0
   d4684:	f500 50a0 	add.w	r0, r0, #5120	; 0x1400
   d4688:	f000 fbaa 	bl	d4de0 <_ZN10HttpHelperD1Ev>
    static int veryfyCert_Tls(void *data, mbedtls_x509_crt *crt, int depth, uint32_t *flags);
    int handShake();

public:
    TlsTcpClient();
    ~TlsTcpClient(){ close(); };
   d468c:	f504 6045 	add.w	r0, r4, #3152	; 0xc50
   d4690:	f000 fb02 	bl	d4c98 <_ZN12TlsTcpClient5closeEv>
   d4694:	f241 33dc 	movw	r3, #5084	; 0x13dc
   d4698:	4a11      	ldr	r2, [pc, #68]	; (d46e0 <_ZN16TlsClientHandlerD1Ev+0x60>)
   d469a:	50e2      	str	r2, [r4, r3]
	if (_M_pi != nullptr)
   d469c:	f241 33f4 	movw	r3, #5108	; 0x13f4
   d46a0:	58e5      	ldr	r5, [r4, r3]
   d46a2:	b17d      	cbz	r5, d46c4 <_ZN16TlsClientHandlerD1Ev+0x44>
      if (--_M_use_count == 0)
   d46a4:	686b      	ldr	r3, [r5, #4]
   d46a6:	3b01      	subs	r3, #1
   d46a8:	606b      	str	r3, [r5, #4]
   d46aa:	b95b      	cbnz	r3, d46c4 <_ZN16TlsClientHandlerD1Ev+0x44>
          _M_dispose();
   d46ac:	682b      	ldr	r3, [r5, #0]
   d46ae:	4628      	mov	r0, r5
   d46b0:	689b      	ldr	r3, [r3, #8]
   d46b2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d46b4:	68ab      	ldr	r3, [r5, #8]
   d46b6:	3b01      	subs	r3, #1
   d46b8:	60ab      	str	r3, [r5, #8]
   d46ba:	b91b      	cbnz	r3, d46c4 <_ZN16TlsClientHandlerD1Ev+0x44>
            _M_destroy();
   d46bc:	682b      	ldr	r3, [r5, #0]
   d46be:	4628      	mov	r0, r5
   d46c0:	68db      	ldr	r3, [r3, #12]
   d46c2:	4798      	blx	r3
   d46c4:	f604 403c 	addw	r0, r4, #3132	; 0xc3c
   d46c8:	f011 fa79 	bl	e5bbe <_ZN6StringD1Ev>
   d46cc:	f604 402c 	addw	r0, r4, #3116	; 0xc2c
   d46d0:	f011 fa75 	bl	e5bbe <_ZN6StringD1Ev>
   d46d4:	f604 401c 	addw	r0, r4, #3100	; 0xc1c
   d46d8:	f011 fa71 	bl	e5bbe <_ZN6StringD1Ev>
{
}
   d46dc:	4620      	mov	r0, r4
   d46de:	bd38      	pop	{r3, r4, r5, pc}
   d46e0:	000ed50c 	.word	0x000ed50c

000d46e4 <_ZN16TlsClientHandler5setupEv>:
void TlsClientHandler::setup() {
   d46e4:	b510      	push	{r4, lr}
   d46e6:	4604      	mov	r4, r0
   d46e8:	f010 fe44 	bl	e5374 <HAL_Timer_Get_Milli_Seconds>
        // need a Particle time sync for X509 certificates verify.
    if (millis() - lastSync > ONE_DAY_MILLIS) {
   d46ec:	f8d4 3818 	ldr.w	r3, [r4, #2072]	; 0x818
   d46f0:	1ac0      	subs	r0, r0, r3
   d46f2:	4b07      	ldr	r3, [pc, #28]	; (d4710 <_ZN16TlsClientHandler5setupEv+0x2c>)
   d46f4:	4298      	cmp	r0, r3
   d46f6:	d909      	bls.n	d470c <_ZN16TlsClientHandler5setupEv+0x28>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d46f8:	f011 f842 	bl	e5780 <spark_cloud_flag_connected>
        if (!connected()) {
   d46fc:	b110      	cbz	r0, d4704 <_ZN16TlsClientHandler5setupEv+0x20>
        return spark_sync_time(NULL);
   d46fe:	2000      	movs	r0, #0
   d4700:	f011 f846 	bl	e5790 <spark_sync_time>
   d4704:	f010 fe36 	bl	e5374 <HAL_Timer_Get_Milli_Seconds>
        Particle.syncTime();
        lastSync = millis();
   d4708:	f8c4 0818 	str.w	r0, [r4, #2072]	; 0x818
    }
}
   d470c:	bd10      	pop	{r4, pc}
   d470e:	bf00      	nop
   d4710:	05265c00 	.word	0x05265c00

000d4714 <_ZN16TlsClientHandler6verifyE6String>:
        return status;
    }
    return this->verify(http.getFaceId());
}

int TlsClientHandler::verify(String id) {
   d4714:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4716:	460e      	mov	r6, r1
   d4718:	b08d      	sub	sp, #52	; 0x34
    if(id.equals("")) {
   d471a:	494a      	ldr	r1, [pc, #296]	; (d4844 <_ZN16TlsClientHandler6verifyE6String+0x130>)
int TlsClientHandler::verify(String id) {
   d471c:	4604      	mov	r4, r0
    if(id.equals("")) {
   d471e:	4630      	mov	r0, r6
   d4720:	f011 fb72 	bl	e5e08 <_ZNK6String6equalsEPKc>
   d4724:	4607      	mov	r7, r0
   d4726:	2800      	cmp	r0, #0
   d4728:	f040 8089 	bne.w	d483e <_ZN16TlsClientHandler6verifyE6String+0x12a>
        return false;
    }
    http.setPath(VERIFY_PATH);
   d472c:	f504 55a0 	add.w	r5, r4, #5120	; 0x1400
   d4730:	4945      	ldr	r1, [pc, #276]	; (d4848 <_ZN16TlsClientHandler6verifyE6String+0x134>)
   d4732:	a808      	add	r0, sp, #32
   d4734:	f011 fa8e 	bl	e5c54 <_ZN6StringC1EPKc>
   d4738:	a908      	add	r1, sp, #32
   d473a:	4628      	mov	r0, r5
   d473c:	f000 fb7c 	bl	d4e38 <_ZN10HttpHelper7setPathE6String>
   d4740:	a808      	add	r0, sp, #32
   d4742:	f011 fa3c 	bl	e5bbe <_ZN6StringD1Ev>
    http.setHost(HOST);
   d4746:	4941      	ldr	r1, [pc, #260]	; (d484c <_ZN16TlsClientHandler6verifyE6String+0x138>)
   d4748:	a808      	add	r0, sp, #32
   d474a:	f011 fa83 	bl	e5c54 <_ZN6StringC1EPKc>
   d474e:	a908      	add	r1, sp, #32
   d4750:	4628      	mov	r0, r5
   d4752:	f000 fb74 	bl	d4e3e <_ZN10HttpHelper7setHostE6String>
   d4756:	a808      	add	r0, sp, #32
   d4758:	f011 fa31 	bl	e5bbe <_ZN6StringD1Ev>
    http.setKey(KEY);
   d475c:	493c      	ldr	r1, [pc, #240]	; (d4850 <_ZN16TlsClientHandler6verifyE6String+0x13c>)
   d475e:	a808      	add	r0, sp, #32
   d4760:	f011 fa78 	bl	e5c54 <_ZN6StringC1EPKc>
   d4764:	a908      	add	r1, sp, #32
   d4766:	4628      	mov	r0, r5
   d4768:	f000 fbb9 	bl	d4ede <_ZN10HttpHelper6setKeyE6String>
   d476c:	a808      	add	r0, sp, #32
   d476e:	f011 fa26 	bl	e5bbe <_ZN6StringD1Ev>
    http.setContent(http.HTTP_JSON);
   d4772:	f504 51a5 	add.w	r1, r4, #5280	; 0x14a0
   d4776:	3118      	adds	r1, #24
   d4778:	a808      	add	r0, sp, #32
   d477a:	f011 faab 	bl	e5cd4 <_ZN6StringC1ERKS_>
   d477e:	a908      	add	r1, sp, #32
   d4780:	4628      	mov	r0, r5
   d4782:	f000 fba9 	bl	d4ed8 <_ZN10HttpHelper10setContentE6String>
   d4786:	a808      	add	r0, sp, #32
   d4788:	f011 fa19 	bl	e5bbe <_ZN6StringD1Ev>
    http.setBody(id,this->NIKOLAJ,this->PERSONGROUP);
   d478c:	4631      	mov	r1, r6
   d478e:	4668      	mov	r0, sp
   d4790:	f011 faa0 	bl	e5cd4 <_ZN6StringC1ERKS_>
   d4794:	f604 411c 	addw	r1, r4, #3100	; 0xc1c
   d4798:	a804      	add	r0, sp, #16
   d479a:	f011 fa9b 	bl	e5cd4 <_ZN6StringC1ERKS_>
   d479e:	f604 413c 	addw	r1, r4, #3132	; 0xc3c
   d47a2:	a808      	add	r0, sp, #32
   d47a4:	f011 fa96 	bl	e5cd4 <_ZN6StringC1ERKS_>
   d47a8:	ab08      	add	r3, sp, #32
   d47aa:	aa04      	add	r2, sp, #16
   d47ac:	4669      	mov	r1, sp
   d47ae:	4628      	mov	r0, r5
   d47b0:	f000 fb48 	bl	d4e44 <_ZN10HttpHelper7setBodyE6StringS0_S0_>
   d47b4:	a808      	add	r0, sp, #32
   d47b6:	f011 fa02 	bl	e5bbe <_ZN6StringD1Ev>
   d47ba:	a804      	add	r0, sp, #16
   d47bc:	f011 f9ff 	bl	e5bbe <_ZN6StringD1Ev>
            // setup Root CA pem. have to be done before every connect! 
    client.init(letencryptCaPem, sizeof(letencryptCaPem));
   d47c0:	f504 6645 	add.w	r6, r4, #3152	; 0xc50
    http.setBody(id,this->NIKOLAJ,this->PERSONGROUP);
   d47c4:	4668      	mov	r0, sp
   d47c6:	f011 f9fa 	bl	e5bbe <_ZN6StringD1Ev>
    client.init(letencryptCaPem, sizeof(letencryptCaPem));
   d47ca:	4621      	mov	r1, r4
   d47cc:	f240 72e1 	movw	r2, #2017	; 0x7e1
   d47d0:	4630      	mov	r0, r6
   d47d2:	f000 f9e3 	bl	d4b9c <_ZN12TlsTcpClient4initEPKcj>
    //connect to client on dis, port
#if DEBUG_AZURE == 1
    Serial.println(http.getHost());
    Serial.println(http.makeVerify());
#endif
    client.connect(this->URL, 443);
   d47d6:	f240 12bb 	movw	r2, #443	; 0x1bb
   d47da:	f204 71e1 	addw	r1, r4, #2017	; 0x7e1
   d47de:	4630      	mov	r0, r6
   d47e0:	f000 fa92 	bl	d4d08 <_ZN12TlsTcpClient7connectEPct>

    // Send header to azure.
    int len = sprintf((char *)buff, http.makeVerify());
   d47e4:	4628      	mov	r0, r5
   d47e6:	f000 fc0b 	bl	d5000 <_ZN10HttpHelper10makeVerifyEv>
   d47ea:	f604 041c 	addw	r4, r4, #2076	; 0x81c
   d47ee:	4601      	mov	r1, r0
   d47f0:	4620      	mov	r0, r4
   d47f2:	f010 fff5 	bl	e57e0 <sprintf>
    client.write(buff, len );
   d47f6:	4621      	mov	r1, r4
    int len = sprintf((char *)buff, http.makeVerify());
   d47f8:	4602      	mov	r2, r0
    client.write(buff, len );
   d47fa:	4630      	mov	r0, r6
   d47fc:	f000 fa03 	bl	d4c06 <_ZN12TlsTcpClient5writeEPhi>
    //make loop that 

    // GET HTTPS response.
    memset(buff, 0, sizeof(buff));
   d4800:	f44f 6280 	mov.w	r2, #1024	; 0x400
   d4804:	4639      	mov	r1, r7
   d4806:	4620      	mov	r0, r4
   d4808:	f014 f888 	bl	e891c <memset>
    while(1) {
        // mabye check length and set buffer after this.
        int ret = client.read(buff, sizeof(buff) - 1);
   d480c:	f240 32ff 	movw	r2, #1023	; 0x3ff
   d4810:	4621      	mov	r1, r4
   d4812:	4630      	mov	r0, r6
   d4814:	f000 fa5f 	bl	d4cd6 <_ZN12TlsTcpClient4readEPhi>
        if (ret == MBEDTLS_ERR_SSL_WANT_READ) {
   d4818:	f510 4fd2 	cmn.w	r0, #26880	; 0x6900
   d481c:	d103      	bne.n	d4826 <_ZN16TlsClientHandler6verifyE6String+0x112>
            delay(100);
   d481e:	2064      	movs	r0, #100	; 0x64
   d4820:	f011 fbae 	bl	e5f80 <delay>
   d4824:	e7f2      	b.n	d480c <_ZN16TlsClientHandler6verifyE6String+0xf8>
        } else if (ret <= 0) {
   d4826:	2800      	cmp	r0, #0
   d4828:	dcf0      	bgt.n	d480c <_ZN16TlsClientHandler6verifyE6String+0xf8>
#if DEBUG_AZURE == 1
            Serial.println((char *)buff);
#endif
        }
    }
    http.setResponse((char*) buff,false);
   d482a:	4628      	mov	r0, r5
   d482c:	2200      	movs	r2, #0
   d482e:	4621      	mov	r1, r4
   d4830:	f000 fc6c 	bl	d510c <_ZN10HttpHelper11setResponseEPcb>

   if(http.getIsIdentical()) {
   d4834:	4628      	mov	r0, r5
   d4836:	f000 fb5f 	bl	d4ef8 <_ZN10HttpHelper14getIsIdenticalEv>
       return true;
   }
   return false;
   d483a:	b00d      	add	sp, #52	; 0x34
   d483c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return false;
   d483e:	2000      	movs	r0, #0
   d4840:	e7fb      	b.n	d483a <_ZN16TlsClientHandler6verifyE6String+0x126>
   d4842:	bf00      	nop
   d4844:	000eb611 	.word	0x000eb611
   d4848:	000eb007 	.word	0x000eb007
   d484c:	000eafd3 	.word	0x000eafd3
   d4850:	000eb019 	.word	0x000eb019

000d4854 <_ZN16TlsClientHandler6detectEPhm>:
int TlsClientHandler::detect(uint8_t * img, uint32_t length) {
   d4854:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    memset(buff, 0, sizeof(buff));
   d4858:	f600 061c 	addw	r6, r0, #2076	; 0x81c
int TlsClientHandler::detect(uint8_t * img, uint32_t length) {
   d485c:	b085      	sub	sp, #20
   d485e:	4604      	mov	r4, r0
   d4860:	4690      	mov	r8, r2
   d4862:	4689      	mov	r9, r1
    memset(buff, 0, sizeof(buff));
   d4864:	f44f 6280 	mov.w	r2, #1024	; 0x400
   d4868:	2100      	movs	r1, #0
   d486a:	4630      	mov	r0, r6
   d486c:	f014 f856 	bl	e891c <memset>
    http.setPath(DETECT_PATH);
   d4870:	f504 55a0 	add.w	r5, r4, #5120	; 0x1400
   d4874:	4940      	ldr	r1, [pc, #256]	; (d4978 <_ZN16TlsClientHandler6detectEPhm+0x124>)
   d4876:	4668      	mov	r0, sp
   d4878:	f011 f9ec 	bl	e5c54 <_ZN6StringC1EPKc>
   d487c:	4669      	mov	r1, sp
   d487e:	4628      	mov	r0, r5
   d4880:	f000 fada 	bl	d4e38 <_ZN10HttpHelper7setPathE6String>
   d4884:	4668      	mov	r0, sp
   d4886:	f011 f99a 	bl	e5bbe <_ZN6StringD1Ev>
    http.setHost(HOST);
   d488a:	493c      	ldr	r1, [pc, #240]	; (d497c <_ZN16TlsClientHandler6detectEPhm+0x128>)
   d488c:	4668      	mov	r0, sp
   d488e:	f011 f9e1 	bl	e5c54 <_ZN6StringC1EPKc>
   d4892:	4669      	mov	r1, sp
   d4894:	4628      	mov	r0, r5
   d4896:	f000 fad2 	bl	d4e3e <_ZN10HttpHelper7setHostE6String>
   d489a:	4668      	mov	r0, sp
   d489c:	f011 f98f 	bl	e5bbe <_ZN6StringD1Ev>
    http.setKey(KEY);
   d48a0:	4937      	ldr	r1, [pc, #220]	; (d4980 <_ZN16TlsClientHandler6detectEPhm+0x12c>)
   d48a2:	4668      	mov	r0, sp
   d48a4:	f011 f9d6 	bl	e5c54 <_ZN6StringC1EPKc>
   d48a8:	4669      	mov	r1, sp
   d48aa:	4628      	mov	r0, r5
   d48ac:	f000 fb17 	bl	d4ede <_ZN10HttpHelper6setKeyE6String>
   d48b0:	4668      	mov	r0, sp
   d48b2:	f011 f984 	bl	e5bbe <_ZN6StringD1Ev>
    http.setContent(http.HTTP_OCTET);
   d48b6:	f504 51a6 	add.w	r1, r4, #5312	; 0x14c0
   d48ba:	3108      	adds	r1, #8
   d48bc:	4668      	mov	r0, sp
   d48be:	f011 fa09 	bl	e5cd4 <_ZN6StringC1ERKS_>
   d48c2:	4669      	mov	r1, sp
   d48c4:	4628      	mov	r0, r5
   d48c6:	f000 fb07 	bl	d4ed8 <_ZN10HttpHelper10setContentE6String>
   d48ca:	4668      	mov	r0, sp
   d48cc:	f011 f977 	bl	e5bbe <_ZN6StringD1Ev>
    client.init(letencryptCaPem, sizeof(letencryptCaPem));
   d48d0:	f504 6745 	add.w	r7, r4, #3152	; 0xc50
    http.setContentLength(length); //set to the right size
   d48d4:	4641      	mov	r1, r8
   d48d6:	4628      	mov	r0, r5
   d48d8:	f000 faee 	bl	d4eb8 <_ZN10HttpHelper16setContentLengthEm>
    client.init(letencryptCaPem, sizeof(letencryptCaPem));
   d48dc:	f240 72e1 	movw	r2, #2017	; 0x7e1
   d48e0:	4621      	mov	r1, r4
   d48e2:	4638      	mov	r0, r7
   d48e4:	f000 f95a 	bl	d4b9c <_ZN12TlsTcpClient4initEPKcj>
    client.connect(this->URL, 443);
   d48e8:	f240 12bb 	movw	r2, #443	; 0x1bb
   d48ec:	f204 71e1 	addw	r1, r4, #2017	; 0x7e1
   d48f0:	4638      	mov	r0, r7
   d48f2:	f000 fa09 	bl	d4d08 <_ZN12TlsTcpClient7connectEPct>
    int len = sprintf((char *)buff, http.makeDetect());
   d48f6:	4628      	mov	r0, r5
   d48f8:	f000 fb76 	bl	d4fe8 <_ZN10HttpHelper10makeDetectEv>
   d48fc:	4601      	mov	r1, r0
   d48fe:	4630      	mov	r0, r6
   d4900:	f010 ff6e 	bl	e57e0 <sprintf>
    client.write(buff, len );
   d4904:	4631      	mov	r1, r6
    int len = sprintf((char *)buff, http.makeDetect());
   d4906:	4602      	mov	r2, r0
    client.write(buff, len );
   d4908:	4638      	mov	r0, r7
   d490a:	f000 f97c 	bl	d4c06 <_ZN12TlsTcpClient5writeEPhi>
    client.write(img,length);;
   d490e:	4642      	mov	r2, r8
   d4910:	4649      	mov	r1, r9
   d4912:	4638      	mov	r0, r7
   d4914:	f000 f977 	bl	d4c06 <_ZN12TlsTcpClient5writeEPhi>
    memset(buff, 0, sizeof(buff));
   d4918:	f44f 6280 	mov.w	r2, #1024	; 0x400
   d491c:	2100      	movs	r1, #0
   d491e:	4630      	mov	r0, r6
   d4920:	f013 fffc 	bl	e891c <memset>
        int ret = client.read(buff, sizeof(buff) - 1);
   d4924:	f240 32ff 	movw	r2, #1023	; 0x3ff
   d4928:	4631      	mov	r1, r6
   d492a:	4638      	mov	r0, r7
   d492c:	f000 f9d3 	bl	d4cd6 <_ZN12TlsTcpClient4readEPhi>
        if (ret == MBEDTLS_ERR_SSL_WANT_READ) {
   d4930:	f510 4fd2 	cmn.w	r0, #26880	; 0x6900
   d4934:	d103      	bne.n	d493e <_ZN16TlsClientHandler6detectEPhm+0xea>
            delay(100);
   d4936:	2064      	movs	r0, #100	; 0x64
   d4938:	f011 fb22 	bl	e5f80 <delay>
   d493c:	e7f2      	b.n	d4924 <_ZN16TlsClientHandler6detectEPhm+0xd0>
        } else if (ret <= 0) {
   d493e:	2800      	cmp	r0, #0
   d4940:	dcf0      	bgt.n	d4924 <_ZN16TlsClientHandler6detectEPhm+0xd0>
    http.setResponse((char*) buff,true);
   d4942:	4631      	mov	r1, r6
   d4944:	2201      	movs	r2, #1
   d4946:	4628      	mov	r0, r5
   d4948:	f000 fbe0 	bl	d510c <_ZN10HttpHelper11setResponseEPcb>
    if((status = http.getStatus()) != 200) {
   d494c:	4628      	mov	r0, r5
   d494e:	f000 fac9 	bl	d4ee4 <_ZN10HttpHelper9getStatusEv>
   d4952:	28c8      	cmp	r0, #200	; 0xc8
   d4954:	4606      	mov	r6, r0
   d4956:	d10b      	bne.n	d4970 <_ZN16TlsClientHandler6detectEPhm+0x11c>
    return this->verify(http.getFaceId());
   d4958:	4629      	mov	r1, r5
   d495a:	4668      	mov	r0, sp
   d495c:	f000 fac5 	bl	d4eea <_ZN10HttpHelper9getFaceIdEv>
   d4960:	4669      	mov	r1, sp
   d4962:	4620      	mov	r0, r4
   d4964:	f7ff fed6 	bl	d4714 <_ZN16TlsClientHandler6verifyE6String>
   d4968:	4606      	mov	r6, r0
   d496a:	4668      	mov	r0, sp
   d496c:	f011 f927 	bl	e5bbe <_ZN6StringD1Ev>
}
   d4970:	4630      	mov	r0, r6
   d4972:	b005      	add	sp, #20
   d4974:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4978:	000eb03a 	.word	0x000eb03a
   d497c:	000eafd3 	.word	0x000eafd3
   d4980:	000eb019 	.word	0x000eb019

000d4984 <_ZN17HardwareInterfaceC1Ev>:
#include "HardwareInterface.h"

HardwareInterface::HardwareInterface(/* args */)
   d4984:	b510      	push	{r4, lr}
   d4986:	4604      	mov	r4, r0
   d4988:	f010 ffdc 	bl	e5944 <_ZN5ServoC1Ev>
   d498c:	2302      	movs	r3, #2
   d498e:	6123      	str	r3, [r4, #16]
{
}
   d4990:	4620      	mov	r0, r4
   d4992:	bd10      	pop	{r4, pc}

000d4994 <_ZN17HardwareInterfaceD1Ev>:

HardwareInterface::~HardwareInterface()
   d4994:	b510      	push	{r4, lr}
   d4996:	4604      	mov	r4, r0
   d4998:	f010 ffe8 	bl	e596c <_ZN5ServoD1Ev>
{
}
   d499c:	4620      	mov	r0, r4
   d499e:	bd10      	pop	{r4, pc}

000d49a0 <_ZN17HardwareInterface5setupEv>:

void HardwareInterface::setup() {
   d49a0:	b507      	push	{r0, r1, r2, lr}
  myServo.attach(servopin);
   d49a2:	2300      	movs	r3, #0
   d49a4:	22b4      	movs	r2, #180	; 0xb4
   d49a6:	8a01      	ldrh	r1, [r0, #16]
   d49a8:	e9cd 3200 	strd	r3, r2, [sp]
   d49ac:	f44f 6316 	mov.w	r3, #2400	; 0x960
   d49b0:	f44f 7208 	mov.w	r2, #544	; 0x220
   d49b4:	f010 ffe0 	bl	e5978 <_ZN5Servo6attachEtttss>
}
   d49b8:	b003      	add	sp, #12
   d49ba:	f85d fb04 	ldr.w	pc, [sp], #4

000d49be <_ZN17HardwareInterface8openLockEi>:

// Consider adding an argument that specifies which motor to run
void HardwareInterface::openLock(int command) {
  if (command == 0)
   d49be:	b909      	cbnz	r1, d49c4 <_ZN17HardwareInterface8openLockEi+0x6>
    //open
    myServo.write(0);
  }
  else {
    //close
    myServo.write(90);
   d49c0:	215a      	movs	r1, #90	; 0x5a
   d49c2:	e002      	b.n	d49ca <_ZN17HardwareInterface8openLockEi+0xc>
  else if (command == 1)
   d49c4:	2901      	cmp	r1, #1
   d49c6:	d1fb      	bne.n	d49c0 <_ZN17HardwareInterface8openLockEi+0x2>
    myServo.write(0);
   d49c8:	2100      	movs	r1, #0
    myServo.write(90);
   d49ca:	f010 bf92 	b.w	e58f2 <_ZN5Servo5writeEi>

000d49ce <_ZN17HardwareInterface15faceNotRecoggedEv>:
  }
}


void HardwareInterface::faceNotRecogged(){
    myServo.write(90);
   d49ce:	215a      	movs	r1, #90	; 0x5a
   d49d0:	f010 bf8f 	b.w	e58f2 <_ZN5Servo5writeEi>

000d49d4 <_ZN12TlsTcpClient9debug_TlsEPviPKciS2_>:
void TlsTcpClient::debug_Tls( void *ctx, int level,
                      const char *file, int line,
                      const char *str ) {
    ((void) level);
    debug_tls("%s:%04d: %s", file, line, str);
}
   d49d4:	4770      	bx	lr

000d49d6 <_ZN12TlsTcpClient7rng_TlsEPvPhj>:
int TlsTcpClient::rng_Tls(void* handle, uint8_t* data, const size_t len_) {
   d49d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d49d8:	f022 0703 	bic.w	r7, r2, #3
   d49dc:	460c      	mov	r4, r1
   d49de:	4615      	mov	r5, r2
   d49e0:	0896      	lsrs	r6, r2, #2
   d49e2:	440f      	add	r7, r1
  while (len>=4) {
   d49e4:	42bc      	cmp	r4, r7
   d49e6:	d10b      	bne.n	d4a00 <_ZN12TlsTcpClient7rng_TlsEPvPhj+0x2a>
   d49e8:	f06f 0203 	mvn.w	r2, #3
   d49ec:	fb02 5506 	mla	r5, r2, r6, r5
   d49f0:	4425      	add	r5, r4
  while (len-->0) {
   d49f2:	42ac      	cmp	r4, r5
   d49f4:	d009      	beq.n	d4a0a <_ZN12TlsTcpClient7rng_TlsEPvPhj+0x34>
    *data++ = HAL_RNG_GetRandomNumber();
   d49f6:	f010 fcad 	bl	e5354 <HAL_RNG_GetRandomNumber>
   d49fa:	f804 0b01 	strb.w	r0, [r4], #1
  while (len-->0) {
   d49fe:	e7f8      	b.n	d49f2 <_ZN12TlsTcpClient7rng_TlsEPvPhj+0x1c>
    *((uint32_t*)data) = HAL_RNG_GetRandomNumber();
   d4a00:	f010 fca8 	bl	e5354 <HAL_RNG_GetRandomNumber>
   d4a04:	f844 0b04 	str.w	r0, [r4], #4
  while (len>=4) {
   d4a08:	e7ec      	b.n	d49e4 <_ZN12TlsTcpClient7rng_TlsEPvPhj+0xe>
}
   d4a0a:	2000      	movs	r0, #0
   d4a0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d4a10 <_ZN12TlsTcpClient14veryfyCert_TlsEPvP16mbedtls_x509_crtiPm>:

  *ttime = nowt;
  return nowt;
}

int TlsTcpClient::veryfyCert_Tls(void *data, mbedtls_x509_crt *crt, int depth, uint32_t *flags) {
   d4a10:	b500      	push	{lr}
   d4a12:	f2ad 4d04 	subw	sp, sp, #1028	; 0x404
   d4a16:	460b      	mov	r3, r1
  char buf[1024];
  ((void) data);

  debug_tls("Verify requested for (Depth %d):\n", depth);
  mbedtls_x509_crt_info(buf, sizeof(buf) - 1, "", crt);
   d4a18:	4a05      	ldr	r2, [pc, #20]	; (d4a30 <_ZN12TlsTcpClient14veryfyCert_TlsEPvP16mbedtls_x509_crtiPm+0x20>)
   d4a1a:	f240 31ff 	movw	r1, #1023	; 0x3ff
   d4a1e:	4668      	mov	r0, sp
   d4a20:	f008 fe3c 	bl	dd69c <mbedtls_x509_crt_info>
  } else {
    debug_tls(buf, sizeof(buf), "  ! ", *flags);
    debug_tls("%s\n", buf);
  }
  return 0;
}
   d4a24:	2000      	movs	r0, #0
   d4a26:	f20d 4d04 	addw	sp, sp, #1028	; 0x404
   d4a2a:	f85d fb04 	ldr.w	pc, [sp], #4
   d4a2e:	bf00      	nop
   d4a30:	000eb611 	.word	0x000eb611

000d4a34 <_ZN12TlsTcpClientC1Ev>:
TlsTcpClient::TlsTcpClient() {
   d4a34:	b510      	push	{r4, lr}
   d4a36:	4604      	mov	r4, r0
   d4a38:	f200 708c 	addw	r0, r0, #1932	; 0x78c
   d4a3c:	f012 f990 	bl	e6d60 <_ZN9TCPClientC1Ev>
  connected = false;
   d4a40:	2300      	movs	r3, #0
   d4a42:	f884 37a8 	strb.w	r3, [r4, #1960]	; 0x7a8
}
   d4a46:	4620      	mov	r0, r4
   d4a48:	bd10      	pop	{r4, pc}
	...

000d4a4c <_ZN12TlsTcpClient4initEPKcjS1_jS1_j>:
  return this->init(rootCaPem, rootCaPemSize, NULL, 0, NULL, 0);
}

int TlsTcpClient::init(const char *rootCaPem, const size_t rootCaPemSize,
         const char *clientCertPem, const size_t clientCertPemSize,
         const char *clientKeyPem, const size_t clientKeyPemSize) {
   d4a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4a50:	ed2d 8b02 	vpush	{d8}
   d4a54:	4604      	mov	r4, r0
   d4a56:	ee08 2a10 	vmov	s16, r2

  int ret;
  connected = false;
  mbedtls_ssl_config_init(&conf);
   d4a5a:	f200 4574 	addw	r5, r0, #1140	; 0x474
  connected = false;
   d4a5e:	2200      	movs	r2, #0
         const char *clientKeyPem, const size_t clientKeyPemSize) {
   d4a60:	b083      	sub	sp, #12
  connected = false;
   d4a62:	f880 27a8 	strb.w	r2, [r0, #1960]	; 0x7a8
  mbedtls_ssl_init(&ssl);
   d4a66:	f504 766e 	add.w	r6, r4, #952	; 0x3b8
  mbedtls_ssl_config_init(&conf);
   d4a6a:	4628      	mov	r0, r5
         const char *clientKeyPem, const size_t clientKeyPemSize) {
   d4a6c:	468a      	mov	sl, r1
   d4a6e:	469b      	mov	fp, r3
  mbedtls_x509_crt_init(&cacert);
   d4a70:	f204 49f4 	addw	r9, r4, #1268	; 0x4f4
  mbedtls_ssl_config_init(&conf);
   d4a74:	f00b fc33 	bl	e02de <mbedtls_ssl_config_init>
  mbedtls_ssl_init(&ssl);
   d4a78:	4630      	mov	r0, r6
   d4a7a:	f00b f921 	bl	dfcc0 <mbedtls_ssl_init>
  mbedtls_x509_crt_init(&clicert);
   d4a7e:	f504 67c5 	add.w	r7, r4, #1576	; 0x628
  mbedtls_x509_crt_init(&cacert);
   d4a82:	4648      	mov	r0, r9
   d4a84:	f009 fbe0 	bl	de248 <mbedtls_x509_crt_init>
  mbedtls_pk_init(&pkey);
   d4a88:	f204 785c 	addw	r8, r4, #1884	; 0x75c
  mbedtls_x509_crt_init(&clicert);
   d4a8c:	4638      	mov	r0, r7
   d4a8e:	f009 fbdb 	bl	de248 <mbedtls_x509_crt_init>
  mbedtls_pk_init(&pkey);
   d4a92:	4640      	mov	r0, r8
   d4a94:	f009 ffd0 	bl	dea38 <mbedtls_pk_init>

  mbedtls_ssl_conf_dbg(&conf, &TlsTcpClient::debug_Tls, nullptr);
   d4a98:	4939      	ldr	r1, [pc, #228]	; (d4b80 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x134>)
   d4a9a:	2200      	movs	r2, #0
   d4a9c:	4628      	mov	r0, r5
   d4a9e:	f00b f920 	bl	dfce2 <mbedtls_ssl_conf_dbg>
  #if defined(MBEDTLS_DEBUG_C)
    mbedtls_debug_set_threshold(DEBUG_TLS_CORE_LEVEL);
  #endif

  if ((ret = mbedtls_x509_crt_parse(&cacert, (const unsigned char *)rootCaPem, rootCaPemSize)) < 0) {
   d4aa2:	4651      	mov	r1, sl
   d4aa4:	ee18 2a10 	vmov	r2, s16
   d4aa8:	4648      	mov	r0, r9
   d4aaa:	f009 ff57 	bl	de95c <mbedtls_x509_crt_parse>
   d4aae:	f1b0 0a00 	subs.w	sl, r0, #0
   d4ab2:	db51      	blt.n	d4b58 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x10c>
    debug_tls(" enableTls mbedtls_x509_crt_parse error : %d\n", ret);
    return ret;
  }

  if (clientCertPem != NULL && clientCertPemSize > 0) {
   d4ab4:	f1bb 0f00 	cmp.w	fp, #0
   d4ab8:	d143      	bne.n	d4b42 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0xf6>
      debug_tls(" tlsClientKey mbedtls_x509_crt_parse error : %d\n", ret);
      return ret;
    }
  }

  if (clientKeyPem != NULL && clientKeyPemSize > 0) {
   d4aba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d4abc:	2b00      	cmp	r3, #0
   d4abe:	d151      	bne.n	d4b64 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x118>
      debug_tls(" tlsClientKey mbedtls_pk_parse_key error : %d\n", ret);
      return ret;
    }
  }

  if ((ret = mbedtls_ssl_config_defaults(&conf, MBEDTLS_SSL_IS_CLIENT,
   d4ac0:	2300      	movs	r3, #0
   d4ac2:	461a      	mov	r2, r3
   d4ac4:	4619      	mov	r1, r3
   d4ac6:	4628      	mov	r0, r5
   d4ac8:	f00b fc0e 	bl	e02e8 <mbedtls_ssl_config_defaults>
   d4acc:	4682      	mov	sl, r0
   d4ace:	2800      	cmp	r0, #0
   d4ad0:	d142      	bne.n	d4b58 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x10c>
                 MBEDTLS_SSL_TRANSPORT_STREAM, MBEDTLS_SSL_PRESET_DEFAULT)) != 0) {
    return ret;
  }
  mbedtls_ssl_conf_min_version(&conf, MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3);
   d4ad2:	2203      	movs	r2, #3
   d4ad4:	4611      	mov	r1, r2
   d4ad6:	4628      	mov	r0, r5
   d4ad8:	f00b f952 	bl	dfd80 <mbedtls_ssl_conf_min_version>
  mbedtls_ssl_conf_verify(&conf, &TlsTcpClient::veryfyCert_Tls, NULL);
   d4adc:	4652      	mov	r2, sl
   d4ade:	4929      	ldr	r1, [pc, #164]	; (d4b84 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x138>)
   d4ae0:	4628      	mov	r0, r5
   d4ae2:	f00b f8f8 	bl	dfcd6 <mbedtls_ssl_conf_verify>

  // if server certificates is not valid, connection will success. check certificates on verify() function.
  mbedtls_ssl_conf_authmode(&conf, MBEDTLS_SSL_VERIFY_OPTIONAL);
   d4ae6:	2101      	movs	r1, #1
   d4ae8:	4628      	mov	r0, r5
   d4aea:	f00b f8ed 	bl	dfcc8 <mbedtls_ssl_conf_authmode>
  mbedtls_ssl_conf_rng(&conf, &TlsTcpClient::rng_Tls, nullptr);
   d4aee:	4926      	ldr	r1, [pc, #152]	; (d4b88 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x13c>)
   d4af0:	4652      	mov	r2, sl
   d4af2:	4628      	mov	r0, r5
   d4af4:	f00b f8f2 	bl	dfcdc <mbedtls_ssl_conf_rng>
  mbedtls_ssl_conf_ca_chain(&conf, &cacert, nullptr);
   d4af8:	4652      	mov	r2, sl
   d4afa:	4649      	mov	r1, r9
   d4afc:	4628      	mov	r0, r5
   d4afe:	f00b f905 	bl	dfd0c <mbedtls_ssl_conf_ca_chain>

  if (clientCertPem != NULL && clientKeyPem != NULL) {
   d4b02:	f1bb 0f00 	cmp.w	fp, #0
   d4b06:	d006      	beq.n	d4b16 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0xca>
   d4b08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d4b0a:	b123      	cbz	r3, d4b16 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0xca>
    mbedtls_ssl_conf_own_cert(&conf, &clicert, &pkey);
   d4b0c:	4642      	mov	r2, r8
   d4b0e:	4639      	mov	r1, r7
   d4b10:	4628      	mov	r0, r5
   d4b12:	f00b f8f8 	bl	dfd06 <mbedtls_ssl_conf_own_cert>
  }

  if((ret = mbedtls_ssl_setup(&ssl, &conf)) != 0) {
   d4b16:	4629      	mov	r1, r5
   d4b18:	4630      	mov	r0, r6
   d4b1a:	f00b fb55 	bl	e01c8 <mbedtls_ssl_setup>
   d4b1e:	4682      	mov	sl, r0
   d4b20:	b9d0      	cbnz	r0, d4b58 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x10c>
    return ret;
  }

  mbedtls_ssl_set_timer_cb(&ssl, &timer, mbedtls_timing_set_delay, mbedtls_timing_get_delay);
   d4b22:	f204 7164 	addw	r1, r4, #1892	; 0x764
   d4b26:	4630      	mov	r0, r6
   d4b28:	4b18      	ldr	r3, [pc, #96]	; (d4b8c <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x140>)
   d4b2a:	4a19      	ldr	r2, [pc, #100]	; (d4b90 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x144>)
   d4b2c:	f00b f8e2 	bl	dfcf4 <mbedtls_ssl_set_timer_cb>
  mbedtls_ssl_set_bio(&ssl, this, &TlsTcpClient::send_Tls,  &TlsTcpClient::recv_Tls, nullptr);
   d4b30:	4b18      	ldr	r3, [pc, #96]	; (d4b94 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x148>)
   d4b32:	4a19      	ldr	r2, [pc, #100]	; (d4b98 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x14c>)
   d4b34:	f8cd a000 	str.w	sl, [sp]
   d4b38:	4621      	mov	r1, r4
   d4b3a:	4630      	mov	r0, r6
   d4b3c:	f00b f8d4 	bl	dfce8 <mbedtls_ssl_set_bio>
  return 0;
   d4b40:	e00a      	b.n	d4b58 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x10c>
  if (clientCertPem != NULL && clientCertPemSize > 0) {
   d4b42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d4b44:	2b00      	cmp	r3, #0
   d4b46:	d0b8      	beq.n	d4aba <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x6e>
    if ((ret = mbedtls_x509_crt_parse(&clicert, (const unsigned char *)clientCertPem, clientCertPemSize)) < 0) {
   d4b48:	461a      	mov	r2, r3
   d4b4a:	4659      	mov	r1, fp
   d4b4c:	4638      	mov	r0, r7
   d4b4e:	f009 ff05 	bl	de95c <mbedtls_x509_crt_parse>
   d4b52:	f1b0 0a00 	subs.w	sl, r0, #0
   d4b56:	dab0      	bge.n	d4aba <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x6e>
}
   d4b58:	4650      	mov	r0, sl
   d4b5a:	b003      	add	sp, #12
   d4b5c:	ecbd 8b02 	vpop	{d8}
   d4b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (clientKeyPem != NULL && clientKeyPemSize > 0) {
   d4b64:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d4b66:	2b00      	cmp	r3, #0
   d4b68:	d0aa      	beq.n	d4ac0 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x74>
    if ((ret = mbedtls_pk_parse_key(&pkey, (const unsigned char *)clientKeyPem, clientKeyPemSize, NULL, 0)) != 0) {
   d4b6a:	2300      	movs	r3, #0
   d4b6c:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   d4b70:	9300      	str	r3, [sp, #0]
   d4b72:	4640      	mov	r0, r8
   d4b74:	f007 fbe4 	bl	dc340 <mbedtls_pk_parse_key>
   d4b78:	4682      	mov	sl, r0
   d4b7a:	2800      	cmp	r0, #0
   d4b7c:	d0a0      	beq.n	d4ac0 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x74>
   d4b7e:	e7eb      	b.n	d4b58 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x10c>
   d4b80:	000d49d5 	.word	0x000d49d5
   d4b84:	000d4a11 	.word	0x000d4a11
   d4b88:	000d49d7 	.word	0x000d49d7
   d4b8c:	000db04f 	.word	0x000db04f
   d4b90:	000db041 	.word	0x000db041
   d4b94:	000d4c59 	.word	0x000d4c59
   d4b98:	000d4c1d 	.word	0x000d4c1d

000d4b9c <_ZN12TlsTcpClient4initEPKcj>:
int TlsTcpClient::init(const char *rootCaPem, const size_t rootCaPemSize) {
   d4b9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return this->init(rootCaPem, rootCaPemSize, NULL, 0, NULL, 0);
   d4b9e:	2300      	movs	r3, #0
   d4ba0:	e9cd 3301 	strd	r3, r3, [sp, #4]
   d4ba4:	9300      	str	r3, [sp, #0]
   d4ba6:	f7ff ff51 	bl	d4a4c <_ZN12TlsTcpClient4initEPKcjS1_jS1_j>
}
   d4baa:	b005      	add	sp, #20
   d4bac:	f85d fb04 	ldr.w	pc, [sp], #4

000d4bb0 <_ZN12TlsTcpClient9handShakeEv>:
  }

  return this->handShake();
}

int TlsTcpClient::handShake() {
   d4bb0:	b570      	push	{r4, r5, r6, lr}
   d4bb2:	4604      	mov	r4, r0
   d4bb4:	2500      	movs	r5, #0
  int ret;
  do {
      while (ssl.state != MBEDTLS_SSL_HANDSHAKE_OVER) {
          ret = mbedtls_ssl_handshake_client_step(&ssl);
   d4bb6:	f500 766e 	add.w	r6, r0, #952	; 0x3b8
      while (ssl.state != MBEDTLS_SSL_HANDSHAKE_OVER) {
   d4bba:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
   d4bbe:	2b10      	cmp	r3, #16
   d4bc0:	d005      	beq.n	d4bce <_ZN12TlsTcpClient9handShakeEv+0x1e>
          ret = mbedtls_ssl_handshake_client_step(&ssl);
   d4bc2:	4630      	mov	r0, r6
   d4bc4:	f00f fd08 	bl	e45d8 <mbedtls_ssl_handshake_client_step>
          if (ret != 0)
   d4bc8:	4605      	mov	r5, r0
   d4bca:	2800      	cmp	r0, #0
   d4bcc:	d0f5      	beq.n	d4bba <_ZN12TlsTcpClient9handShakeEv+0xa>
              break;
      }
  } while(ret == MBEDTLS_ERR_SSL_WANT_READ || ret == MBEDTLS_ERR_SSL_WANT_WRITE);
   d4bce:	f515 4fd2 	cmn.w	r5, #26880	; 0x6900
   d4bd2:	d0f2      	beq.n	d4bba <_ZN12TlsTcpClient9handShakeEv+0xa>
   d4bd4:	f515 4fd1 	cmn.w	r5, #26752	; 0x6880
   d4bd8:	d0ef      	beq.n	d4bba <_ZN12TlsTcpClient9handShakeEv+0xa>

  // clean ca cert/crt/pkey
  mbedtls_x509_crt_free(&cacert);
   d4bda:	f204 40f4 	addw	r0, r4, #1268	; 0x4f4
   d4bde:	f009 fb38 	bl	de252 <mbedtls_x509_crt_free>
  mbedtls_x509_crt_free(&clicert);
   d4be2:	f504 60c5 	add.w	r0, r4, #1576	; 0x628
   d4be6:	f009 fb34 	bl	de252 <mbedtls_x509_crt_free>
  mbedtls_pk_free(&pkey);
   d4bea:	f204 705c 	addw	r0, r4, #1884	; 0x75c
   d4bee:	f009 ff27 	bl	dea40 <mbedtls_pk_free>

  if (ssl.state == MBEDTLS_SSL_HANDSHAKE_OVER) {
   d4bf2:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
   d4bf6:	2b10      	cmp	r3, #16
    connected = true;
   d4bf8:	bf02      	ittt	eq
   d4bfa:	2301      	moveq	r3, #1
    return 0;
   d4bfc:	2500      	moveq	r5, #0
    connected = true;
   d4bfe:	f884 37a8 	strbeq.w	r3, [r4, #1960]	; 0x7a8
  }
  return ret;
}
   d4c02:	4628      	mov	r0, r5
   d4c04:	bd70      	pop	{r4, r5, r6, pc}

000d4c06 <_ZN12TlsTcpClient5writeEPhi>:

int TlsTcpClient::write(unsigned char *buff, int length) {
  if (connected) {
   d4c06:	f890 37a8 	ldrb.w	r3, [r0, #1960]	; 0x7a8
   d4c0a:	b11b      	cbz	r3, d4c14 <_ZN12TlsTcpClient5writeEPhi+0xe>
      int ret = mbedtls_ssl_write( &ssl, buff, length );
   d4c0c:	f500 706e 	add.w	r0, r0, #952	; 0x3b8
   d4c10:	f00b b99c 	b.w	dff4c <mbedtls_ssl_write>
      return ret;
  } else
    return -1;
}
   d4c14:	f04f 30ff 	mov.w	r0, #4294967295
   d4c18:	4770      	bx	lr
	...

000d4c1c <_ZN12TlsTcpClient8send_TlsEPvPKhj>:
int TlsTcpClient::send_Tls(void *ctx, const unsigned char *buf, size_t len) {
   d4c1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (!sock->client.connected()) {
   d4c1e:	f200 758c 	addw	r5, r0, #1932	; 0x78c
   d4c22:	4628      	mov	r0, r5
int TlsTcpClient::send_Tls(void *ctx, const unsigned char *buf, size_t len) {
   d4c24:	e9cd 2100 	strd	r2, r1, [sp]
  if (!sock->client.connected()) {
   d4c28:	f011 fe13 	bl	e6852 <_ZN9TCPClient9connectedEv>
   d4c2c:	b160      	cbz	r0, d4c48 <_ZN12TlsTcpClient8send_TlsEPvPKhj+0x2c>
  int ret = sock->client.write(buf, len);
   d4c2e:	e9dd 2100 	ldrd	r2, r1, [sp]
   d4c32:	4628      	mov	r0, r5
   d4c34:	f011 fdf7 	bl	e6826 <_ZN9TCPClient5writeEPKhj>
  if (ret == 0) {
   d4c38:	4604      	mov	r4, r0
   d4c3a:	b140      	cbz	r0, d4c4e <_ZN12TlsTcpClient8send_TlsEPvPKhj+0x32>
  sock->client.flush();
   d4c3c:	4628      	mov	r0, r5
   d4c3e:	f011 fe07 	bl	e6850 <_ZN9TCPClient5flushEv>
}
   d4c42:	4620      	mov	r0, r4
   d4c44:	b003      	add	sp, #12
   d4c46:	bd30      	pop	{r4, r5, pc}
    return -1;
   d4c48:	f04f 34ff 	mov.w	r4, #4294967295
   d4c4c:	e7f9      	b.n	d4c42 <_ZN12TlsTcpClient8send_TlsEPvPKhj+0x26>
      return MBEDTLS_ERR_SSL_WANT_WRITE;
   d4c4e:	4c01      	ldr	r4, [pc, #4]	; (d4c54 <_ZN12TlsTcpClient8send_TlsEPvPKhj+0x38>)
   d4c50:	e7f7      	b.n	d4c42 <_ZN12TlsTcpClient8send_TlsEPvPKhj+0x26>
   d4c52:	bf00      	nop
   d4c54:	ffff9780 	.word	0xffff9780

000d4c58 <_ZN12TlsTcpClient8recv_TlsEPvPhj>:
int TlsTcpClient::recv_Tls(void *ctx, unsigned char *buf, size_t len) {
   d4c58:	b570      	push	{r4, r5, r6, lr}
   d4c5a:	4604      	mov	r4, r0
  if (!sock->client.connected()) {
   d4c5c:	f204 748c 	addw	r4, r4, #1932	; 0x78c
  delay(10);
   d4c60:	200a      	movs	r0, #10
int TlsTcpClient::recv_Tls(void *ctx, unsigned char *buf, size_t len) {
   d4c62:	460d      	mov	r5, r1
   d4c64:	4616      	mov	r6, r2
  delay(10);
   d4c66:	f011 f98b 	bl	e5f80 <delay>
  if (!sock->client.connected()) {
   d4c6a:	4620      	mov	r0, r4
   d4c6c:	f011 fdf1 	bl	e6852 <_ZN9TCPClient9connectedEv>
   d4c70:	b168      	cbz	r0, d4c8e <_ZN12TlsTcpClient8recv_TlsEPvPhj+0x36>
  if (sock->client.available() == 0) {
   d4c72:	4620      	mov	r0, r4
   d4c74:	f011 ffd0 	bl	e6c18 <_ZN9TCPClient9availableEv>
   d4c78:	b908      	cbnz	r0, d4c7e <_ZN12TlsTcpClient8recv_TlsEPvPhj+0x26>
    return MBEDTLS_ERR_SSL_WANT_READ;
   d4c7a:	4806      	ldr	r0, [pc, #24]	; (d4c94 <_ZN12TlsTcpClient8recv_TlsEPvPhj+0x3c>)
}
   d4c7c:	bd70      	pop	{r4, r5, r6, pc}
  int ret = sock->client.read(buf, len);
   d4c7e:	4632      	mov	r2, r6
   d4c80:	4629      	mov	r1, r5
   d4c82:	4620      	mov	r0, r4
   d4c84:	f011 fe9b 	bl	e69be <_ZN9TCPClient4readEPhj>
  if (ret == 0) {
   d4c88:	2800      	cmp	r0, #0
   d4c8a:	d1f7      	bne.n	d4c7c <_ZN12TlsTcpClient8recv_TlsEPvPhj+0x24>
   d4c8c:	e7f5      	b.n	d4c7a <_ZN12TlsTcpClient8recv_TlsEPvPhj+0x22>
    return -1;
   d4c8e:	f04f 30ff 	mov.w	r0, #4294967295
   d4c92:	e7f3      	b.n	d4c7c <_ZN12TlsTcpClient8recv_TlsEPvPhj+0x24>
   d4c94:	ffff9700 	.word	0xffff9700

000d4c98 <_ZN12TlsTcpClient5closeEv>:
  connected = false;
   d4c98:	2300      	movs	r3, #0
void TlsTcpClient::close() {
   d4c9a:	b510      	push	{r4, lr}
   d4c9c:	4604      	mov	r4, r0
  connected = false;
   d4c9e:	f880 37a8 	strb.w	r3, [r0, #1960]	; 0x7a8
  mbedtls_x509_crt_free(&cacert);
   d4ca2:	f200 40f4 	addw	r0, r0, #1268	; 0x4f4
   d4ca6:	f009 fad4 	bl	de252 <mbedtls_x509_crt_free>
  mbedtls_x509_crt_free(&clicert);
   d4caa:	f504 60c5 	add.w	r0, r4, #1576	; 0x628
   d4cae:	f009 fad0 	bl	de252 <mbedtls_x509_crt_free>
  mbedtls_pk_free(&pkey);
   d4cb2:	f204 705c 	addw	r0, r4, #1884	; 0x75c
   d4cb6:	f009 fec3 	bl	dea40 <mbedtls_pk_free>
  mbedtls_ssl_config_free (&conf);
   d4cba:	f204 4074 	addw	r0, r4, #1140	; 0x474
   d4cbe:	f00b fb57 	bl	e0370 <mbedtls_ssl_config_free>
  mbedtls_ssl_free (&ssl);
   d4cc2:	f504 706e 	add.w	r0, r4, #952	; 0x3b8
   d4cc6:	f00b fabb 	bl	e0240 <mbedtls_ssl_free>
  client.stop();
   d4cca:	f204 708c 	addw	r0, r4, #1932	; 0x78c
};
   d4cce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  client.stop();
   d4cd2:	f011 bffb 	b.w	e6ccc <_ZN9TCPClient4stopEv>

000d4cd6 <_ZN12TlsTcpClient4readEPhi>:
  int ret = read(buff, 1);
  if (ret == 1) return buff[0];
  else    return ret;
}

int TlsTcpClient::read(unsigned char *buff, int length) {
   d4cd6:	b510      	push	{r4, lr}
  if (connected) {
   d4cd8:	f890 37a8 	ldrb.w	r3, [r0, #1960]	; 0x7a8
int TlsTcpClient::read(unsigned char *buff, int length) {
   d4cdc:	4604      	mov	r4, r0
  if (connected) {
   d4cde:	b173      	cbz	r3, d4cfe <_ZN12TlsTcpClient4readEPhi+0x28>
      int ret = mbedtls_ssl_read(&ssl, buff, length);
   d4ce0:	f500 706e 	add.w	r0, r0, #952	; 0x3b8
   d4ce4:	f00b f8b2 	bl	dfe4c <mbedtls_ssl_read>
      if (ret < 0) {
   d4ce8:	2800      	cmp	r0, #0
   d4cea:	da0a      	bge.n	d4d02 <_ZN12TlsTcpClient4readEPhi+0x2c>
            switch (ret) {
   d4cec:	f510 4fee 	cmn.w	r0, #30464	; 0x7700
   d4cf0:	d008      	beq.n	d4d04 <_ZN12TlsTcpClient4readEPhi+0x2e>
   d4cf2:	f510 4fd2 	cmn.w	r0, #26880	; 0x6900
   d4cf6:	d004      	beq.n	d4d02 <_ZN12TlsTcpClient4readEPhi+0x2c>
            case MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE:
                ret = 0;
                break;
            case MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY:
            default:
                close();
   d4cf8:	4620      	mov	r0, r4
   d4cfa:	f7ff ffcd 	bl	d4c98 <_ZN12TlsTcpClient5closeEv>
                return -1;
          }
      }
      return ret;
  } else
    return -1;
   d4cfe:	f04f 30ff 	mov.w	r0, #4294967295
}
   d4d02:	bd10      	pop	{r4, pc}
                ret = 0;
   d4d04:	2000      	movs	r0, #0
   d4d06:	e7fc      	b.n	d4d02 <_ZN12TlsTcpClient4readEPhi+0x2c>

000d4d08 <_ZN12TlsTcpClient7connectEPct>:
int TlsTcpClient::connect(char* domain, uint16_t port) {
   d4d08:	b538      	push	{r3, r4, r5, lr}
   d4d0a:	4604      	mov	r4, r0
  if (!client.connect(domain, port)) {
   d4d0c:	2300      	movs	r3, #0
   d4d0e:	f200 708c 	addw	r0, r0, #1932	; 0x78c
int TlsTcpClient::connect(char* domain, uint16_t port) {
   d4d12:	460d      	mov	r5, r1
  if (!client.connect(domain, port)) {
   d4d14:	f011 fe7e 	bl	e6a14 <_ZN9TCPClient7connectEPKctm>
   d4d18:	b150      	cbz	r0, d4d30 <_ZN12TlsTcpClient7connectEPct+0x28>
  if((ret = mbedtls_ssl_set_hostname(&ssl, domain)) != 0) {
   d4d1a:	4629      	mov	r1, r5
   d4d1c:	f504 706e 	add.w	r0, r4, #952	; 0x3b8
   d4d20:	f00a fff8 	bl	dfd14 <mbedtls_ssl_set_hostname>
   d4d24:	b930      	cbnz	r0, d4d34 <_ZN12TlsTcpClient7connectEPct+0x2c>
  return this->handShake();
   d4d26:	4620      	mov	r0, r4
}
   d4d28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return this->handShake();
   d4d2c:	f7ff bf40 	b.w	d4bb0 <_ZN12TlsTcpClient9handShakeEv>
      return -1;
   d4d30:	f04f 30ff 	mov.w	r0, #4294967295
}
   d4d34:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4d38 <_ZN10HttpHelperC1Ev>:
#include "HttpHelper.h"
HttpHelper::HttpHelper(/* args */)
   d4d38:	b538      	push	{r3, r4, r5, lr}
   d4d3a:	4b21      	ldr	r3, [pc, #132]	; (d4dc0 <_ZN10HttpHelperC1Ev+0x88>)
   d4d3c:	6003      	str	r3, [r0, #0]
   d4d3e:	4b21      	ldr	r3, [pc, #132]	; (d4dc4 <_ZN10HttpHelperC1Ev+0x8c>)
   d4d40:	6043      	str	r3, [r0, #4]
   d4d42:	4b21      	ldr	r3, [pc, #132]	; (d4dc8 <_ZN10HttpHelperC1Ev+0x90>)
   d4d44:	6083      	str	r3, [r0, #8]
   d4d46:	4b21      	ldr	r3, [pc, #132]	; (d4dcc <_ZN10HttpHelperC1Ev+0x94>)
   d4d48:	60c3      	str	r3, [r0, #12]
   d4d4a:	4b21      	ldr	r3, [pc, #132]	; (d4dd0 <_ZN10HttpHelperC1Ev+0x98>)
   d4d4c:	6103      	str	r3, [r0, #16]
   d4d4e:	2500      	movs	r5, #0
   d4d50:	2309      	movs	r3, #9
   d4d52:	4604      	mov	r4, r0
   d4d54:	e9c0 3505 	strd	r3, r5, [r0, #20]
  String body;
  uint8_t * octetBody;
  String content;
  String key;
  String length;
} http_request_t;
   d4d58:	491e      	ldr	r1, [pc, #120]	; (d4dd4 <_ZN10HttpHelperC1Ev+0x9c>)
   d4d5a:	301c      	adds	r0, #28
   d4d5c:	f010 ff7a 	bl	e5c54 <_ZN6StringC1EPKc>
   d4d60:	491c      	ldr	r1, [pc, #112]	; (d4dd4 <_ZN10HttpHelperC1Ev+0x9c>)
   d4d62:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d4d66:	f010 ff75 	bl	e5c54 <_ZN6StringC1EPKc>
   d4d6a:	491a      	ldr	r1, [pc, #104]	; (d4dd4 <_ZN10HttpHelperC1Ev+0x9c>)
   d4d6c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d4d70:	f010 ff70 	bl	e5c54 <_ZN6StringC1EPKc>
   d4d74:	4917      	ldr	r1, [pc, #92]	; (d4dd4 <_ZN10HttpHelperC1Ev+0x9c>)
   d4d76:	f104 0050 	add.w	r0, r4, #80	; 0x50
   d4d7a:	f010 ff6b 	bl	e5c54 <_ZN6StringC1EPKc>
   d4d7e:	4915      	ldr	r1, [pc, #84]	; (d4dd4 <_ZN10HttpHelperC1Ev+0x9c>)
   d4d80:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d4d84:	f010 ff66 	bl	e5c54 <_ZN6StringC1EPKc>
   d4d88:	4912      	ldr	r1, [pc, #72]	; (d4dd4 <_ZN10HttpHelperC1Ev+0x9c>)
   d4d8a:	f104 0070 	add.w	r0, r4, #112	; 0x70
   d4d8e:	f010 ff61 	bl	e5c54 <_ZN6StringC1EPKc>

      pointer
      _M_local_data()
      {
#if __cplusplus >= 201103L
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   d4d92:	f104 038c 	add.w	r3, r4, #140	; 0x8c
      { _M_string_length = __length; }
   d4d96:	e9c4 3521 	strd	r3, r5, [r4, #132]	; 0x84
  int status;
  std::string body;
  String faceId;
  bool isIdentical;
  double confidence;
} http_response_t;
   d4d9a:	490e      	ldr	r1, [pc, #56]	; (d4dd4 <_ZN10HttpHelperC1Ev+0x9c>)
      typedef streamoff         off_type;
      typedef mbstate_t         state_type;

      static _GLIBCXX17_CONSTEXPR void
      assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
      { __c1 = __c2; }
   d4d9c:	f884 508c 	strb.w	r5, [r4, #140]	; 0x8c
   d4da0:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   d4da4:	f010 ff56 	bl	e5c54 <_ZN6StringC1EPKc>
   d4da8:	490b      	ldr	r1, [pc, #44]	; (d4dd8 <_ZN10HttpHelperC1Ev+0xa0>)
   d4daa:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   d4dae:	f010 ff51 	bl	e5c54 <_ZN6StringC1EPKc>
   d4db2:	490a      	ldr	r1, [pc, #40]	; (d4ddc <_ZN10HttpHelperC1Ev+0xa4>)
   d4db4:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
   d4db8:	f010 ff4c 	bl	e5c54 <_ZN6StringC1EPKc>
{
}
   d4dbc:	4620      	mov	r0, r4
   d4dbe:	bd38      	pop	{r3, r4, r5, pc}
   d4dc0:	000eb0d1 	.word	0x000eb0d1
   d4dc4:	000eb0d5 	.word	0x000eb0d5
   d4dc8:	000eb0da 	.word	0x000eb0da
   d4dcc:	000eb0de 	.word	0x000eb0de
   d4dd0:	000eb0e5 	.word	0x000eb0e5
   d4dd4:	000eb611 	.word	0x000eb611
   d4dd8:	000eb0eb 	.word	0x000eb0eb
   d4ddc:	000eb0fc 	.word	0x000eb0fc

000d4de0 <_ZN10HttpHelperD1Ev>:

HttpHelper::~HttpHelper()
   d4de0:	b538      	push	{r3, r4, r5, lr}
   d4de2:	4604      	mov	r4, r0
   d4de4:	30c8      	adds	r0, #200	; 0xc8
   d4de6:	f010 feea 	bl	e5bbe <_ZN6StringD1Ev>
   d4dea:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   d4dee:	f010 fee6 	bl	e5bbe <_ZN6StringD1Ev>
   d4df2:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   d4df6:	f010 fee2 	bl	e5bbe <_ZN6StringD1Ev>

      /**
       *  @brief  Destroy the string instance.
       */
      ~basic_string()
      { _M_dispose(); }
   d4dfa:	f104 0084 	add.w	r0, r4, #132	; 0x84
   d4dfe:	f012 fce5 	bl	e77cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
} http_request_t;
   d4e02:	f104 0070 	add.w	r0, r4, #112	; 0x70
   d4e06:	f010 feda 	bl	e5bbe <_ZN6StringD1Ev>
   d4e0a:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d4e0e:	f010 fed6 	bl	e5bbe <_ZN6StringD1Ev>
   d4e12:	f104 0050 	add.w	r0, r4, #80	; 0x50
   d4e16:	f010 fed2 	bl	e5bbe <_ZN6StringD1Ev>
   d4e1a:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d4e1e:	f010 fece 	bl	e5bbe <_ZN6StringD1Ev>
   d4e22:	f104 051c 	add.w	r5, r4, #28
   d4e26:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d4e2a:	f010 fec8 	bl	e5bbe <_ZN6StringD1Ev>
   d4e2e:	4628      	mov	r0, r5
   d4e30:	f010 fec5 	bl	e5bbe <_ZN6StringD1Ev>
{
}
   d4e34:	4620      	mov	r0, r4
   d4e36:	bd38      	pop	{r3, r4, r5, pc}

000d4e38 <_ZN10HttpHelper7setPathE6String>:

void HttpHelper::setPath(String path) {
    httpRequest.path = path;
   d4e38:	301c      	adds	r0, #28
   d4e3a:	f010 bf3c 	b.w	e5cb6 <_ZN6StringaSERKS_>

000d4e3e <_ZN10HttpHelper7setHostE6String>:
}
void HttpHelper::setHost(String host) {
    httpRequest.host = host;
   d4e3e:	302c      	adds	r0, #44	; 0x2c
   d4e40:	f010 bf39 	b.w	e5cb6 <_ZN6StringaSERKS_>

000d4e44 <_ZN10HttpHelper7setBodyE6StringS0_S0_>:
}
void HttpHelper::setBody(String faceId, String personId, String personGroupId) {
   d4e44:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4e46:	b085      	sub	sp, #20
   d4e48:	4604      	mov	r4, r0
   d4e4a:	460f      	mov	r7, r1
    String tmp = "{";
   d4e4c:	4668      	mov	r0, sp
   d4e4e:	4915      	ldr	r1, [pc, #84]	; (d4ea4 <_ZN10HttpHelper7setBodyE6StringS0_S0_+0x60>)
void HttpHelper::setBody(String faceId, String personId, String personGroupId) {
   d4e50:	4616      	mov	r6, r2
   d4e52:	461d      	mov	r5, r3
    String tmp = "{";
   d4e54:	f010 fefe 	bl	e5c54 <_ZN6StringC1EPKc>
    tmp.concat("\"faceId\":\"");
   d4e58:	4913      	ldr	r1, [pc, #76]	; (d4ea8 <_ZN10HttpHelper7setBodyE6StringS0_S0_+0x64>)
   d4e5a:	4668      	mov	r0, sp
   d4e5c:	f010 ffa1 	bl	e5da2 <_ZN6String6concatEPKc>
    tmp.concat(faceId);
   d4e60:	4639      	mov	r1, r7
   d4e62:	4668      	mov	r0, sp
   d4e64:	f010 ff99 	bl	e5d9a <_ZN6String6concatERKS_>
    tmp.concat("\",\"personId\":\"");
   d4e68:	4910      	ldr	r1, [pc, #64]	; (d4eac <_ZN10HttpHelper7setBodyE6StringS0_S0_+0x68>)
   d4e6a:	4668      	mov	r0, sp
   d4e6c:	f010 ff99 	bl	e5da2 <_ZN6String6concatEPKc>
    tmp.concat(personId);
   d4e70:	4631      	mov	r1, r6
   d4e72:	4668      	mov	r0, sp
   d4e74:	f010 ff91 	bl	e5d9a <_ZN6String6concatERKS_>
    tmp.concat("\",\"PersonGroupId\":\"");
   d4e78:	490d      	ldr	r1, [pc, #52]	; (d4eb0 <_ZN10HttpHelper7setBodyE6StringS0_S0_+0x6c>)
   d4e7a:	4668      	mov	r0, sp
   d4e7c:	f010 ff91 	bl	e5da2 <_ZN6String6concatEPKc>
    tmp.concat(personGroupId);
   d4e80:	4629      	mov	r1, r5
   d4e82:	4668      	mov	r0, sp
   d4e84:	f010 ff89 	bl	e5d9a <_ZN6String6concatERKS_>
    tmp.concat("\"}\r\n\r\n");
   d4e88:	490a      	ldr	r1, [pc, #40]	; (d4eb4 <_ZN10HttpHelper7setBodyE6StringS0_S0_+0x70>)
   d4e8a:	4668      	mov	r0, sp
   d4e8c:	f010 ff89 	bl	e5da2 <_ZN6String6concatEPKc>
    httpRequest.body = tmp;
   d4e90:	4669      	mov	r1, sp
   d4e92:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d4e96:	f010 ff0e 	bl	e5cb6 <_ZN6StringaSERKS_>
    String tmp = "{";
   d4e9a:	4668      	mov	r0, sp
   d4e9c:	f010 fe8f 	bl	e5bbe <_ZN6StringD1Ev>

}
   d4ea0:	b005      	add	sp, #20
   d4ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4ea4:	000eb115 	.word	0x000eb115
   d4ea8:	000eb117 	.word	0x000eb117
   d4eac:	000eb122 	.word	0x000eb122
   d4eb0:	000eb131 	.word	0x000eb131
   d4eb4:	000eb145 	.word	0x000eb145

000d4eb8 <_ZN10HttpHelper16setContentLengthEm>:
void HttpHelper::setBody(uint8_t * body) {
   httpRequest.octetBody = body;
}


void HttpHelper::setContentLength(uint32_t length) {
   d4eb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    httpRequest.length = String(length);
   d4eba:	220a      	movs	r2, #10
void HttpHelper::setContentLength(uint32_t length) {
   d4ebc:	4604      	mov	r4, r0
    httpRequest.length = String(length);
   d4ebe:	4668      	mov	r0, sp
   d4ec0:	f010 ff40 	bl	e5d44 <_ZN6StringC1Emh>
   d4ec4:	4669      	mov	r1, sp
   d4ec6:	f104 0070 	add.w	r0, r4, #112	; 0x70
   d4eca:	f010 ff0e 	bl	e5cea <_ZN6StringaSEOS_>
   d4ece:	4668      	mov	r0, sp
   d4ed0:	f010 fe75 	bl	e5bbe <_ZN6StringD1Ev>
}
   d4ed4:	b004      	add	sp, #16
   d4ed6:	bd10      	pop	{r4, pc}

000d4ed8 <_ZN10HttpHelper10setContentE6String>:


void HttpHelper::setContent(String content) {
    httpRequest.content = content;
   d4ed8:	3050      	adds	r0, #80	; 0x50
   d4eda:	f010 beec 	b.w	e5cb6 <_ZN6StringaSERKS_>

000d4ede <_ZN10HttpHelper6setKeyE6String>:
}

void HttpHelper::setKey(String key) {
    httpRequest.key = key;
   d4ede:	3060      	adds	r0, #96	; 0x60
   d4ee0:	f010 bee9 	b.w	e5cb6 <_ZN6StringaSERKS_>

000d4ee4 <_ZN10HttpHelper9getStatusEv>:
   
    return  this->makeHeader().c_str();
}
int HttpHelper::getStatus() {
    return httpResponse.status;
}
   d4ee4:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
   d4ee8:	4770      	bx	lr

000d4eea <_ZN10HttpHelper9getFaceIdEv>:

String HttpHelper::getBodyLength() {
    return String(httpRequest.body.length());  
}

String HttpHelper::getFaceId(){
   d4eea:	b510      	push	{r4, lr}
    return httpResponse.faceId;
   d4eec:	319c      	adds	r1, #156	; 0x9c
String HttpHelper::getFaceId(){
   d4eee:	4604      	mov	r4, r0
    return httpResponse.faceId;
   d4ef0:	f010 fef0 	bl	e5cd4 <_ZN6StringC1ERKS_>
}
   d4ef4:	4620      	mov	r0, r4
   d4ef6:	bd10      	pop	{r4, pc}

000d4ef8 <_ZN10HttpHelper14getIsIdenticalEv>:

bool HttpHelper::getIsIdentical(){
    return httpResponse.isIdentical;
}
   d4ef8:	f890 00ac 	ldrb.w	r0, [r0, #172]	; 0xac
   d4efc:	4770      	bx	lr
	...

000d4f00 <_ZN10HttpHelper10makeHeaderEv>:

double HttpHelper::getConfidence(){
    return httpResponse.confidence;
}

String HttpHelper::makeHeader() {
   d4f00:	b570      	push	{r4, r5, r6, lr}
   d4f02:	460d      	mov	r5, r1
   d4f04:	4604      	mov	r4, r0
    String tmp;
   d4f06:	492f      	ldr	r1, [pc, #188]	; (d4fc4 <_ZN10HttpHelper10makeHeaderEv+0xc4>)
   d4f08:	f010 fea4 	bl	e5c54 <_ZN6StringC1EPKc>
    tmp.concat(HTTP_METHOD_POST);
   d4f0c:	6869      	ldr	r1, [r5, #4]
   d4f0e:	4620      	mov	r0, r4
   d4f10:	f010 ff47 	bl	e5da2 <_ZN6String6concatEPKc>
    tmp.concat(" ");
   d4f14:	492c      	ldr	r1, [pc, #176]	; (d4fc8 <_ZN10HttpHelper10makeHeaderEv+0xc8>)
   d4f16:	4620      	mov	r0, r4
   d4f18:	f010 ff43 	bl	e5da2 <_ZN6String6concatEPKc>
    tmp.concat(httpRequest.path);
   d4f1c:	f105 011c 	add.w	r1, r5, #28
   d4f20:	4620      	mov	r0, r4
   d4f22:	f010 ff3a 	bl	e5d9a <_ZN6String6concatERKS_>
    tmp.concat(" HTTP/1.0");
   d4f26:	4929      	ldr	r1, [pc, #164]	; (d4fcc <_ZN10HttpHelper10makeHeaderEv+0xcc>)
   d4f28:	4620      	mov	r0, r4
   d4f2a:	f010 ff3a 	bl	e5da2 <_ZN6String6concatEPKc>
    tmp.concat("\r\n");
   d4f2e:	4928      	ldr	r1, [pc, #160]	; (d4fd0 <_ZN10HttpHelper10makeHeaderEv+0xd0>)
   d4f30:	4620      	mov	r0, r4
   d4f32:	f010 ff36 	bl	e5da2 <_ZN6String6concatEPKc>
    tmp.concat("Ocp-Apim-Subscription-Key:");
   d4f36:	4927      	ldr	r1, [pc, #156]	; (d4fd4 <_ZN10HttpHelper10makeHeaderEv+0xd4>)
   d4f38:	4620      	mov	r0, r4
   d4f3a:	f010 ff32 	bl	e5da2 <_ZN6String6concatEPKc>
    tmp.concat(httpRequest.key);
   d4f3e:	f105 0160 	add.w	r1, r5, #96	; 0x60
   d4f42:	4620      	mov	r0, r4
   d4f44:	f010 ff29 	bl	e5d9a <_ZN6String6concatERKS_>
    tmp.concat("\r\n");
   d4f48:	4921      	ldr	r1, [pc, #132]	; (d4fd0 <_ZN10HttpHelper10makeHeaderEv+0xd0>)
   d4f4a:	4620      	mov	r0, r4
   d4f4c:	f010 ff29 	bl	e5da2 <_ZN6String6concatEPKc>
    tmp.concat("Content-Type:");
    tmp.concat(httpRequest.content);
   d4f50:	f105 0650 	add.w	r6, r5, #80	; 0x50
    tmp.concat("Content-Type:");
   d4f54:	4920      	ldr	r1, [pc, #128]	; (d4fd8 <_ZN10HttpHelper10makeHeaderEv+0xd8>)
   d4f56:	4620      	mov	r0, r4
   d4f58:	f010 ff23 	bl	e5da2 <_ZN6String6concatEPKc>
    tmp.concat(httpRequest.content);
   d4f5c:	4631      	mov	r1, r6
   d4f5e:	4620      	mov	r0, r4
   d4f60:	f010 ff1b 	bl	e5d9a <_ZN6String6concatERKS_>
    tmp.concat("\r\n");
   d4f64:	491a      	ldr	r1, [pc, #104]	; (d4fd0 <_ZN10HttpHelper10makeHeaderEv+0xd0>)
   d4f66:	4620      	mov	r0, r4
   d4f68:	f010 ff1b 	bl	e5da2 <_ZN6String6concatEPKc>
    tmp.concat("Host:");
   d4f6c:	491b      	ldr	r1, [pc, #108]	; (d4fdc <_ZN10HttpHelper10makeHeaderEv+0xdc>)
   d4f6e:	4620      	mov	r0, r4
   d4f70:	f010 ff17 	bl	e5da2 <_ZN6String6concatEPKc>
    tmp.concat(httpRequest.host);
   d4f74:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   d4f78:	4620      	mov	r0, r4
   d4f7a:	f010 ff0e 	bl	e5d9a <_ZN6String6concatERKS_>
    tmp.concat("\r\n");
   d4f7e:	4914      	ldr	r1, [pc, #80]	; (d4fd0 <_ZN10HttpHelper10makeHeaderEv+0xd0>)
   d4f80:	4620      	mov	r0, r4
   d4f82:	f010 ff0e 	bl	e5da2 <_ZN6String6concatEPKc>
    tmp.concat("Content-Length:");
   d4f86:	4916      	ldr	r1, [pc, #88]	; (d4fe0 <_ZN10HttpHelper10makeHeaderEv+0xe0>)
   d4f88:	4620      	mov	r0, r4
   d4f8a:	f010 ff0a 	bl	e5da2 <_ZN6String6concatEPKc>
    tmp.concat(httpRequest.length);
   d4f8e:	f105 0170 	add.w	r1, r5, #112	; 0x70
   d4f92:	4620      	mov	r0, r4
   d4f94:	f010 ff01 	bl	e5d9a <_ZN6String6concatERKS_>
    tmp.concat("\r\n\r\n");
   d4f98:	4912      	ldr	r1, [pc, #72]	; (d4fe4 <_ZN10HttpHelper10makeHeaderEv+0xe4>)
   d4f9a:	4620      	mov	r0, r4
   d4f9c:	f010 ff01 	bl	e5da2 <_ZN6String6concatEPKc>
	// comparison (only works w/ Strings and "strings")
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   d4fa0:	f105 01b8 	add.w	r1, r5, #184	; 0xb8
   d4fa4:	4630      	mov	r0, r6
   d4fa6:	f010 ff22 	bl	e5dee <_ZNK6String6equalsERKS_>
    if(httpRequest.content == HTTP_JSON) {
   d4faa:	b140      	cbz	r0, d4fbe <_ZN10HttpHelper10makeHeaderEv+0xbe>
        tmp.concat(httpRequest.body);
   d4fac:	f105 013c 	add.w	r1, r5, #60	; 0x3c
   d4fb0:	4620      	mov	r0, r4
   d4fb2:	f010 fef2 	bl	e5d9a <_ZN6String6concatERKS_>
        tmp.concat("\r\n\r\n");
   d4fb6:	490b      	ldr	r1, [pc, #44]	; (d4fe4 <_ZN10HttpHelper10makeHeaderEv+0xe4>)
   d4fb8:	4620      	mov	r0, r4
   d4fba:	f010 fef2 	bl	e5da2 <_ZN6String6concatEPKc>
    }
    return tmp;
}
   d4fbe:	4620      	mov	r0, r4
   d4fc0:	bd70      	pop	{r4, r5, r6, pc}
   d4fc2:	bf00      	nop
   d4fc4:	000eb611 	.word	0x000eb611
   d4fc8:	000ed663 	.word	0x000ed663
   d4fcc:	000eb14c 	.word	0x000eb14c
   d4fd0:	000eb149 	.word	0x000eb149
   d4fd4:	000eb156 	.word	0x000eb156
   d4fd8:	000eb171 	.word	0x000eb171
   d4fdc:	000eb17f 	.word	0x000eb17f
   d4fe0:	000eb185 	.word	0x000eb185
   d4fe4:	000eb147 	.word	0x000eb147

000d4fe8 <_ZN10HttpHelper10makeDetectEv>:
const char * HttpHelper::makeDetect() {
   d4fe8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d4fea:	4601      	mov	r1, r0
    return  this->makeHeader().c_str();
   d4fec:	4668      	mov	r0, sp
   d4fee:	f7ff ff87 	bl	d4f00 <_ZN10HttpHelper10makeHeaderEv>
   d4ff2:	4668      	mov	r0, sp
   d4ff4:	9c00      	ldr	r4, [sp, #0]
   d4ff6:	f010 fde2 	bl	e5bbe <_ZN6StringD1Ev>
}
   d4ffa:	4620      	mov	r0, r4
   d4ffc:	b004      	add	sp, #16
   d4ffe:	bd10      	pop	{r4, pc}

000d5000 <_ZN10HttpHelper10makeVerifyEv>:
const char * HttpHelper::makeVerify() {
   d5000:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return String(httpRequest.body.length());  
   d5002:	220a      	movs	r2, #10
const char * HttpHelper::makeVerify() {
   d5004:	4604      	mov	r4, r0
    return String(httpRequest.body.length());  
   d5006:	6c41      	ldr	r1, [r0, #68]	; 0x44
   d5008:	4668      	mov	r0, sp
   d500a:	f010 fe88 	bl	e5d1e <_ZN6StringC1Ejh>
    httpRequest.length = this->getBodyLength();
   d500e:	4669      	mov	r1, sp
   d5010:	f104 0070 	add.w	r0, r4, #112	; 0x70
   d5014:	f010 fe69 	bl	e5cea <_ZN6StringaSEOS_>
   d5018:	4668      	mov	r0, sp
   d501a:	f010 fdd0 	bl	e5bbe <_ZN6StringD1Ev>
    return  this->makeHeader().c_str();
   d501e:	4621      	mov	r1, r4
   d5020:	4668      	mov	r0, sp
   d5022:	f7ff ff6d 	bl	d4f00 <_ZN10HttpHelper10makeHeaderEv>
   d5026:	4668      	mov	r0, sp
   d5028:	9c00      	ldr	r4, [sp, #0]
   d502a:	f010 fdc8 	bl	e5bbe <_ZN6StringD1Ev>
}
   d502e:	4620      	mov	r0, r4
   d5030:	b004      	add	sp, #16
   d5032:	bd10      	pop	{r4, pc}

000d5034 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d5034:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   d5036:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d5038:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d503a:	b17c      	cbz	r4, d505c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d503c:	6863      	ldr	r3, [r4, #4]
   d503e:	3b01      	subs	r3, #1
   d5040:	6063      	str	r3, [r4, #4]
   d5042:	b95b      	cbnz	r3, d505c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d5044:	6823      	ldr	r3, [r4, #0]
   d5046:	4620      	mov	r0, r4
   d5048:	689b      	ldr	r3, [r3, #8]
   d504a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d504c:	68a3      	ldr	r3, [r4, #8]
   d504e:	3b01      	subs	r3, #1
   d5050:	60a3      	str	r3, [r4, #8]
   d5052:	b91b      	cbnz	r3, d505c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d5054:	6823      	ldr	r3, [r4, #0]
   d5056:	4620      	mov	r0, r4
   d5058:	68db      	ldr	r3, [r3, #12]
   d505a:	4798      	blx	r3
      }
   d505c:	4628      	mov	r0, r5
   d505e:	bd38      	pop	{r3, r4, r5, pc}

000d5060 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d5060:	680b      	ldr	r3, [r1, #0]
   d5062:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d5064:	b113      	cbz	r3, d506c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d5066:	685a      	ldr	r2, [r3, #4]
   d5068:	3201      	adds	r2, #1
   d506a:	605a      	str	r2, [r3, #4]
      }
   d506c:	4770      	bx	lr

000d506e <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d506e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   d5070:	690d      	ldr	r5, [r1, #16]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5072:	f851 3b04 	ldr.w	r3, [r1], #4
   d5076:	9300      	str	r3, [sp, #0]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d5078:	4604      	mov	r4, r0
   d507a:	a801      	add	r0, sp, #4
   d507c:	f7ff fff0 	bl	d5060 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d5080:	466a      	mov	r2, sp
   d5082:	4629      	mov	r1, r5
   d5084:	4620      	mov	r0, r4
   d5086:	f011 ffc5 	bl	e7014 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d508a:	a801      	add	r0, sp, #4
   d508c:	f7ff ffd2 	bl	d5034 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5090:	4620      	mov	r0, r4
   d5092:	b003      	add	sp, #12
   d5094:	bd30      	pop	{r4, r5, pc}

000d5096 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d5096:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   d5098:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d509a:	f851 3b04 	ldr.w	r3, [r1], #4
   d509e:	9300      	str	r3, [sp, #0]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d50a0:	4604      	mov	r4, r0
   d50a2:	a801      	add	r0, sp, #4
   d50a4:	f7ff ffdc 	bl	d5060 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d50a8:	466a      	mov	r2, sp
   d50aa:	4629      	mov	r1, r5
   d50ac:	4620      	mov	r0, r4
   d50ae:	f012 f957 	bl	e7360 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d50b2:	a801      	add	r0, sp, #4
   d50b4:	f7ff ffbe 	bl	d5034 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d50b8:	4620      	mov	r0, r4
   d50ba:	b003      	add	sp, #12
   d50bc:	bd30      	pop	{r4, r5, pc}

000d50be <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d50be:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   d50c0:	68cd      	ldr	r5, [r1, #12]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d50c2:	f851 3b04 	ldr.w	r3, [r1], #4
   d50c6:	9300      	str	r3, [sp, #0]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d50c8:	4604      	mov	r4, r0
   d50ca:	a801      	add	r0, sp, #4
   d50cc:	f7ff ffc8 	bl	d5060 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d50d0:	466a      	mov	r2, sp
   d50d2:	4629      	mov	r1, r5
   d50d4:	4620      	mov	r0, r4
   d50d6:	f012 f91f 	bl	e7318 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d50da:	a801      	add	r0, sp, #4
   d50dc:	f7ff ffaa 	bl	d5034 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d50e0:	4620      	mov	r0, r4
   d50e2:	b003      	add	sp, #12
   d50e4:	bd30      	pop	{r4, r5, pc}

000d50e6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSEOS5_>:
	}
#pragma GCC diagnostic pop
#endif

      __shared_ptr&
      operator=(__shared_ptr&& __r) noexcept
   d50e6:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   d50e8:	2300      	movs	r3, #0
      operator=(__shared_ptr&& __r) noexcept
   d50ea:	4604      	mov	r4, r0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d50ec:	e9d1 0200 	ldrd	r0, r2, [r1]
	__r._M_ptr = 0;
   d50f0:	e9c1 3300 	strd	r3, r3, [r1]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d50f4:	6823      	ldr	r3, [r4, #0]
   d50f6:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d50f8:	6020      	str	r0, [r4, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d50fa:	6863      	ldr	r3, [r4, #4]
	__r._M_pi = _M_pi;
   d50fc:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
   d50fe:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   d5100:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   d5102:	f7ff ff97 	bl	d5034 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      {
	__shared_ptr(std::move(__r)).swap(*this);
	return *this;
      }
   d5106:	4620      	mov	r0, r4
   d5108:	b002      	add	sp, #8
   d510a:	bd10      	pop	{r4, pc}

000d510c <_ZN10HttpHelper11setResponseEPcb>:

void HttpHelper::setResponse(char * respone, bool detect) { 
   d510c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    httpResponse.confidence = 0;
   d5110:	2300      	movs	r3, #0
void HttpHelper::setResponse(char * respone, bool detect) { 
   d5112:	4617      	mov	r7, r2
    httpResponse.faceId = "";
   d5114:	f100 069c 	add.w	r6, r0, #156	; 0x9c
    httpResponse.confidence = 0;
   d5118:	2200      	movs	r2, #0
   d511a:	e9c0 232c 	strd	r2, r3, [r0, #176]	; 0xb0
void HttpHelper::setResponse(char * respone, bool detect) { 
   d511e:	b0a3      	sub	sp, #140	; 0x8c
   d5120:	4605      	mov	r5, r0
   d5122:	460c      	mov	r4, r1
    httpResponse.faceId = "";
   d5124:	4630      	mov	r0, r6
   d5126:	4995      	ldr	r1, [pc, #596]	; (d537c <_ZN10HttpHelper11setResponseEPcb+0x270>)
   d5128:	f010 fde7 	bl	e5cfa <_ZN6StringaSEPKc>
    httpResponse.isIdentical = false;
   d512c:	f04f 0800 	mov.w	r8, #0
	: allocator_type(__a), _M_p(__dat) { }
   d5130:	ab12      	add	r3, sp, #72	; 0x48
   d5132:	f885 80ac 	strb.w	r8, [r5, #172]	; 0xac
   d5136:	9310      	str	r3, [sp, #64]	; 0x40
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
   d5138:	2c00      	cmp	r4, #0
   d513a:	f000 811c 	beq.w	d5376 <_ZN10HttpHelper11setResponseEPcb+0x26a>
      {
#if __cplusplus >= 201703L
	if (__constant_string_p(__s))
	  return __gnu_cxx::char_traits<char_type>::length(__s);
#endif
	return __builtin_strlen(__s);
   d513e:	4620      	mov	r0, r4
   d5140:	f013 fc3a 	bl	e89b8 <strlen>
	  std::__throw_logic_error(__N("basic_string::"
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));

	if (__dnew > size_type(_S_local_capacity))
   d5144:	280f      	cmp	r0, #15
   d5146:	eb04 0900 	add.w	r9, r4, r0
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   d514a:	901c      	str	r0, [sp, #112]	; 0x70
	if (__dnew > size_type(_S_local_capacity))
   d514c:	d907      	bls.n	d515e <_ZN10HttpHelper11setResponseEPcb+0x52>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
   d514e:	4642      	mov	r2, r8
   d5150:	a91c      	add	r1, sp, #112	; 0x70
   d5152:	a810      	add	r0, sp, #64	; 0x40
   d5154:	f012 fb18 	bl	e7788 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
   d5158:	9b1c      	ldr	r3, [sp, #112]	; 0x70
      { _M_dataplus._M_p = __p; }
   d515a:	9010      	str	r0, [sp, #64]	; 0x40
      { _M_allocated_capacity = __capacity; }
   d515c:	9312      	str	r3, [sp, #72]	; 0x48
	    _M_capacity(__dnew);
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
   d515e:	4621      	mov	r1, r4
   d5160:	9810      	ldr	r0, [sp, #64]	; 0x40
   d5162:	464a      	mov	r2, r9
   d5164:	f012 fb51 	bl	e780a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
   d5168:	9b1c      	ldr	r3, [sp, #112]	; 0x70
      { __c1 = __c2; }
   d516a:	9a10      	ldr	r2, [sp, #64]	; 0x40
      { _M_string_length = __length; }
   d516c:	9311      	str	r3, [sp, #68]	; 0x44
   d516e:	2400      	movs	r4, #0
   d5170:	54d4      	strb	r4, [r2, r3]
    
    std::string responeString(respone);

    //get http status as int
    httpResponse.status = atoi(responeString.substr(HTTP_PLACEMENT,HTTP_PLACEMENT+3).c_str()); 
   d5172:	696a      	ldr	r2, [r5, #20]
   d5174:	a910      	add	r1, sp, #64	; 0x40
   d5176:	1cd3      	adds	r3, r2, #3
   d5178:	a81c      	add	r0, sp, #112	; 0x70
   d517a:	f012 fbf9 	bl	e7970 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
   d517e:	981c      	ldr	r0, [sp, #112]	; 0x70
   d5180:	f013 fb26 	bl	e87d0 <atoi>
   d5184:	f8c5 0080 	str.w	r0, [r5, #128]	; 0x80
      { _M_dispose(); }
   d5188:	a81c      	add	r0, sp, #112	; 0x70
   d518a:	f012 fb1f 	bl	e77cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
    //get body
    httpResponse.body = responeString.substr((responeString.find("\r\n\r\n")+4));
   d518e:	497c      	ldr	r1, [pc, #496]	; (d5380 <_ZN10HttpHelper11setResponseEPcb+0x274>)
   d5190:	4622      	mov	r2, r4
   d5192:	a810      	add	r0, sp, #64	; 0x40
   d5194:	f012 fb97 	bl	e78c6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
   d5198:	f04f 33ff 	mov.w	r3, #4294967295
   d519c:	1d02      	adds	r2, r0, #4
   d519e:	a910      	add	r1, sp, #64	; 0x40
   d51a0:	a81c      	add	r0, sp, #112	; 0x70
   d51a2:	f012 fbe5 	bl	e7970 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
   d51a6:	a91c      	add	r1, sp, #112	; 0x70
   d51a8:	f105 0084 	add.w	r0, r5, #132	; 0x84
   d51ac:	f012 fb32 	bl	e7814 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
   d51b0:	a81c      	add	r0, sp, #112	; 0x70
   d51b2:	f012 fb0b 	bl	e77cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
       *  This is a handle to internal data.  Do not modify or dire things may
       *  happen.
      */
      const _CharT*
      c_str() const _GLIBCXX_NOEXCEPT
      { return _M_data(); }
   d51b6:	f8d5 1084 	ldr.w	r1, [r5, #132]	; 0x84
    return parseCopy(json, strlen(json));
   d51ba:	9101      	str	r1, [sp, #4]
   d51bc:	4608      	mov	r0, r1
   d51be:	f013 fbfb 	bl	e89b8 <strlen>
   d51c2:	9901      	ldr	r1, [sp, #4]
   d51c4:	4602      	mov	r2, r0
   d51c6:	a805      	add	r0, sp, #20
   d51c8:	f012 f930 	bl	e742c <_ZN5spark9JSONValue9parseCopyEPKcj>
      constexpr __shared_count() noexcept : _M_pi(0)
   d51cc:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
        n_(0) {
   d51d0:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
   d51d4:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
        n_(0) {
   d51d8:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
   d51dc:	e9cd 441a 	strd	r4, r4, [sp, #104]	; 0x68
        n_(0) {
   d51e0:	940f      	str	r4, [sp, #60]	; 0x3c

    JSONValue outerObj = JSONValue::parseCopy(httpResponse.body.c_str());
    JSONArrayIterator iter;
    JSONObjectIterator iterObj;
    if(detect) {
   d51e2:	2f00      	cmp	r7, #0
   d51e4:	d079      	beq.n	d52da <_ZN10HttpHelper11setResponseEPcb+0x1ce>
        JSONArrayIterator(value.t_, value.d_) {
   d51e6:	9c07      	ldr	r4, [sp, #28]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d51e8:	9b05      	ldr	r3, [sp, #20]
   d51ea:	9308      	str	r3, [sp, #32]
   d51ec:	a906      	add	r1, sp, #24
   d51ee:	a809      	add	r0, sp, #36	; 0x24
   d51f0:	f7ff ff36 	bl	d5060 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d51f4:	aa08      	add	r2, sp, #32
   d51f6:	4621      	mov	r1, r4
   d51f8:	a81c      	add	r0, sp, #112	; 0x70
   d51fa:	f012 f8dc 	bl	e73b6 <_ZN5spark17JSONArrayIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d51fe:	a809      	add	r0, sp, #36	; 0x24
   d5200:	f7ff ff18 	bl	d5034 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   d5204:	a91c      	add	r1, sp, #112	; 0x70
   d5206:	a80b      	add	r0, sp, #44	; 0x2c
   d5208:	f7ff ff6d 	bl	d50e6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSEOS5_>
class JSONArrayIterator {
   d520c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   d520e:	930d      	str	r3, [sp, #52]	; 0x34
   d5210:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   d5212:	930e      	str	r3, [sp, #56]	; 0x38
   d5214:	a81d      	add	r0, sp, #116	; 0x74
   d5216:	9b20      	ldr	r3, [sp, #128]	; 0x80
   d5218:	930f      	str	r3, [sp, #60]	; 0x3c
   d521a:	f7ff ff0b 	bl	d5034 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        iter = JSONArrayIterator(outerObj);
        iter.next();    // unpack array
   d521e:	a80b      	add	r0, sp, #44	; 0x2c
   d5220:	f012 f8e0 	bl	e73e4 <_ZN5spark17JSONArrayIterator4nextEv>
    return JSONValue(v_, d_);
   d5224:	9c0e      	ldr	r4, [sp, #56]	; 0x38
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5226:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d5228:	931c      	str	r3, [sp, #112]	; 0x70
   d522a:	a90c      	add	r1, sp, #48	; 0x30
   d522c:	a81d      	add	r0, sp, #116	; 0x74
   d522e:	f7ff ff17 	bl	d5060 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d5232:	aa1c      	add	r2, sp, #112	; 0x70
   d5234:	4621      	mov	r1, r4
   d5236:	a808      	add	r0, sp, #32
   d5238:	f011 feec 	bl	e7014 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d523c:	a81d      	add	r0, sp, #116	; 0x74
   d523e:	f7ff fef9 	bl	d5034 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        iterObj = JSONObjectIterator(iter.value());
   d5242:	a908      	add	r1, sp, #32
   d5244:	a81c      	add	r0, sp, #112	; 0x70
   d5246:	f7ff ff26 	bl	d5096 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
   d524a:	a91c      	add	r1, sp, #112	; 0x70
   d524c:	a816      	add	r0, sp, #88	; 0x58
   d524e:	f7ff ff4a 	bl	d50e6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSEOS5_>
class JSONObjectIterator {
   d5252:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   d5254:	9318      	str	r3, [sp, #96]	; 0x60
   d5256:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   d5258:	9319      	str	r3, [sp, #100]	; 0x64
   d525a:	9b20      	ldr	r3, [sp, #128]	; 0x80
   d525c:	931a      	str	r3, [sp, #104]	; 0x68
   d525e:	a81d      	add	r0, sp, #116	; 0x74
   d5260:	9b21      	ldr	r3, [sp, #132]	; 0x84
   d5262:	931b      	str	r3, [sp, #108]	; 0x6c
   d5264:	f7ff fee6 	bl	d5034 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5268:	a809      	add	r0, sp, #36	; 0x24
   d526a:	f7ff fee3 	bl	d5034 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return strcmp(s_, str) == 0;
   d526e:	4f45      	ldr	r7, [pc, #276]	; (d5384 <_ZN10HttpHelper11setResponseEPcb+0x278>)
   d5270:	f8df 8118 	ldr.w	r8, [pc, #280]	; d538c <_ZN10HttpHelper11setResponseEPcb+0x280>
   d5274:	f8df 9118 	ldr.w	r9, [pc, #280]	; d5390 <_ZN10HttpHelper11setResponseEPcb+0x284>
    } else {
         iterObj  = JSONObjectIterator(outerObj);
    }
    while(iterObj.next()) {   // unpack objects
   d5278:	a816      	add	r0, sp, #88	; 0x58
   d527a:	f012 f889 	bl	e7390 <_ZN5spark18JSONObjectIterator4nextEv>
   d527e:	2800      	cmp	r0, #0
   d5280:	d06a      	beq.n	d5358 <_ZN10HttpHelper11setResponseEPcb+0x24c>
        if(iterObj.name() == "faceId") {
   d5282:	a916      	add	r1, sp, #88	; 0x58
   d5284:	a81c      	add	r0, sp, #112	; 0x70
   d5286:	f7ff ff1a 	bl	d50be <_ZNK5spark18JSONObjectIterator4nameEv>
   d528a:	4639      	mov	r1, r7
   d528c:	981e      	ldr	r0, [sp, #120]	; 0x78
   d528e:	f013 fb81 	bl	e8994 <strcmp>
   d5292:	4604      	mov	r4, r0
   d5294:	a81d      	add	r0, sp, #116	; 0x74
   d5296:	f7ff fecd 	bl	d5034 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            //blabla
            httpResponse.faceId = iterObj.value().toString().data();
   d529a:	a916      	add	r1, sp, #88	; 0x58
        if(iterObj.name() == "faceId") {
   d529c:	2c00      	cmp	r4, #0
   d529e:	d12e      	bne.n	d52fe <_ZN10HttpHelper11setResponseEPcb+0x1f2>
            httpResponse.faceId = iterObj.value().toString().data();
   d52a0:	a808      	add	r0, sp, #32
   d52a2:	f7ff fee4 	bl	d506e <_ZNK5spark18JSONObjectIterator5valueEv>
    return JSONString(t_, d_);
   d52a6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d52a8:	9b08      	ldr	r3, [sp, #32]
   d52aa:	9303      	str	r3, [sp, #12]
   d52ac:	a909      	add	r1, sp, #36	; 0x24
   d52ae:	a804      	add	r0, sp, #16
   d52b0:	f7ff fed6 	bl	d5060 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d52b4:	aa03      	add	r2, sp, #12
   d52b6:	4621      	mov	r1, r4
   d52b8:	a81c      	add	r0, sp, #112	; 0x70
   d52ba:	f012 f82d 	bl	e7318 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d52be:	a804      	add	r0, sp, #16
   d52c0:	f7ff feb8 	bl	d5034 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d52c4:	991e      	ldr	r1, [sp, #120]	; 0x78
   d52c6:	4630      	mov	r0, r6
   d52c8:	f010 fd17 	bl	e5cfa <_ZN6StringaSEPKc>
   d52cc:	a81d      	add	r0, sp, #116	; 0x74
   d52ce:	f7ff feb1 	bl	d5034 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d52d2:	a809      	add	r0, sp, #36	; 0x24
   d52d4:	f7ff feae 	bl	d5034 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d52d8:	e7ce      	b.n	d5278 <_ZN10HttpHelper11setResponseEPcb+0x16c>
         iterObj  = JSONObjectIterator(outerObj);
   d52da:	a905      	add	r1, sp, #20
   d52dc:	a81c      	add	r0, sp, #112	; 0x70
   d52de:	f7ff feda 	bl	d5096 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
   d52e2:	a91c      	add	r1, sp, #112	; 0x70
   d52e4:	a816      	add	r0, sp, #88	; 0x58
   d52e6:	f7ff fefe 	bl	d50e6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSEOS5_>
class JSONObjectIterator {
   d52ea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   d52ec:	9318      	str	r3, [sp, #96]	; 0x60
   d52ee:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   d52f0:	9319      	str	r3, [sp, #100]	; 0x64
   d52f2:	9b20      	ldr	r3, [sp, #128]	; 0x80
   d52f4:	931a      	str	r3, [sp, #104]	; 0x68
   d52f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
   d52f8:	931b      	str	r3, [sp, #108]	; 0x6c
   d52fa:	a81d      	add	r0, sp, #116	; 0x74
   d52fc:	e7b5      	b.n	d526a <_ZN10HttpHelper11setResponseEPcb+0x15e>
            
        } else if (iterObj.name() == "isIdentical") {
   d52fe:	a81c      	add	r0, sp, #112	; 0x70
   d5300:	f7ff fedd 	bl	d50be <_ZNK5spark18JSONObjectIterator4nameEv>
    return strcmp(s_, str) == 0;
   d5304:	4641      	mov	r1, r8
   d5306:	981e      	ldr	r0, [sp, #120]	; 0x78
   d5308:	f013 fb44 	bl	e8994 <strcmp>
   d530c:	4604      	mov	r4, r0
   d530e:	a81d      	add	r0, sp, #116	; 0x74
   d5310:	f7ff fe90 	bl	d5034 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            httpResponse.isIdentical = iterObj.value().toBool();
   d5314:	a916      	add	r1, sp, #88	; 0x58
   d5316:	a81c      	add	r0, sp, #112	; 0x70
        } else if (iterObj.name() == "isIdentical") {
   d5318:	b944      	cbnz	r4, d532c <_ZN10HttpHelper11setResponseEPcb+0x220>
            httpResponse.isIdentical = iterObj.value().toBool();
   d531a:	f7ff fea8 	bl	d506e <_ZNK5spark18JSONObjectIterator5valueEv>
   d531e:	a81c      	add	r0, sp, #112	; 0x70
   d5320:	f011 feae 	bl	e7080 <_ZNK5spark9JSONValue6toBoolEv>
   d5324:	f885 00ac 	strb.w	r0, [r5, #172]	; 0xac
   d5328:	a81d      	add	r0, sp, #116	; 0x74
   d532a:	e7d3      	b.n	d52d4 <_ZN10HttpHelper11setResponseEPcb+0x1c8>

        } else if (iterObj.name() == "confidence"){
   d532c:	f7ff fec7 	bl	d50be <_ZNK5spark18JSONObjectIterator4nameEv>
   d5330:	981e      	ldr	r0, [sp, #120]	; 0x78
   d5332:	4649      	mov	r1, r9
   d5334:	f013 fb2e 	bl	e8994 <strcmp>
   d5338:	4604      	mov	r4, r0
   d533a:	a81d      	add	r0, sp, #116	; 0x74
   d533c:	f7ff fe7a 	bl	d5034 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5340:	2c00      	cmp	r4, #0
   d5342:	d199      	bne.n	d5278 <_ZN10HttpHelper11setResponseEPcb+0x16c>
            httpResponse.confidence = iterObj.value().toDouble();
   d5344:	a916      	add	r1, sp, #88	; 0x58
   d5346:	a81c      	add	r0, sp, #112	; 0x70
   d5348:	f7ff fe91 	bl	d506e <_ZNK5spark18JSONObjectIterator5valueEv>
   d534c:	a81c      	add	r0, sp, #112	; 0x70
   d534e:	f011 fed7 	bl	e7100 <_ZNK5spark9JSONValue8toDoubleEv>
   d5352:	ed85 0b2c 	vstr	d0, [r5, #176]	; 0xb0
   d5356:	e7e7      	b.n	d5328 <_ZN10HttpHelper11setResponseEPcb+0x21c>
   d5358:	a817      	add	r0, sp, #92	; 0x5c
   d535a:	f7ff fe6b 	bl	d5034 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d535e:	a80c      	add	r0, sp, #48	; 0x30
   d5360:	f7ff fe68 	bl	d5034 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5364:	a806      	add	r0, sp, #24
   d5366:	f7ff fe65 	bl	d5034 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      { _M_dispose(); }
   d536a:	a810      	add	r0, sp, #64	; 0x40
   d536c:	f012 fa2e 	bl	e77cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
#if DEBUG_AZURE == 1
    Serial.println(httpResponse.faceId);
    Serial.println(httpResponse.isIdentical);
    Serial.println(httpResponse.confidence);
#endif
}
   d5370:	b023      	add	sp, #140	; 0x8c
   d5372:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	  std::__throw_logic_error(__N("basic_string::"
   d5376:	4804      	ldr	r0, [pc, #16]	; (d5388 <_ZN10HttpHelper11setResponseEPcb+0x27c>)
   d5378:	f012 f93a 	bl	e75f0 <_ZSt19__throw_logic_errorPKc>
   d537c:	000eb611 	.word	0x000eb611
   d5380:	000eb147 	.word	0x000eb147
   d5384:	000eb195 	.word	0x000eb195
   d5388:	000eb1b3 	.word	0x000eb1b3
   d538c:	000eb19c 	.word	0x000eb19c
   d5390:	000eb1a8 	.word	0x000eb1a8

000d5394 <mbedtls_sha256_init>:

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
    SHA256_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
   d5394:	226c      	movs	r2, #108	; 0x6c
   d5396:	2100      	movs	r1, #0
   d5398:	f013 bac0 	b.w	e891c <memset>

000d539c <mbedtls_sha256_free>:
}

void mbedtls_sha256_free( mbedtls_sha256_context *ctx )
{
    if( ctx == NULL )
   d539c:	b110      	cbz	r0, d53a4 <mbedtls_sha256_free+0x8>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_sha256_context ) );
   d539e:	216c      	movs	r1, #108	; 0x6c
   d53a0:	f005 be1c 	b.w	dafdc <mbedtls_platform_zeroize>
}
   d53a4:	4770      	bx	lr

000d53a6 <mbedtls_sha256_clone>:

void mbedtls_sha256_clone( mbedtls_sha256_context *dst,
                           const mbedtls_sha256_context *src )
{
   d53a6:	b508      	push	{r3, lr}
    SHA256_VALIDATE( dst != NULL );
    SHA256_VALIDATE( src != NULL );

    *dst = *src;
   d53a8:	226c      	movs	r2, #108	; 0x6c
   d53aa:	f013 fa8f 	bl	e88cc <memcpy>
}
   d53ae:	bd08      	pop	{r3, pc}

000d53b0 <mbedtls_sha256_starts_ret>:
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );

    ctx->total[0] = 0;
   d53b0:	2300      	movs	r3, #0
    ctx->total[1] = 0;
   d53b2:	e9c0 3300 	strd	r3, r3, [r0]

    if( is224 == 0 )
   d53b6:	b9c1      	cbnz	r1, d53ea <mbedtls_sha256_starts_ret+0x3a>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
        ctx->state[1] = 0xBB67AE85;
   d53b8:	4a19      	ldr	r2, [pc, #100]	; (d5420 <mbedtls_sha256_starts_ret+0x70>)
   d53ba:	4b1a      	ldr	r3, [pc, #104]	; (d5424 <mbedtls_sha256_starts_ret+0x74>)
        ctx->state[2] = 0x3C6EF372;
        ctx->state[3] = 0xA54FF53A;
   d53bc:	f8df c08c 	ldr.w	ip, [pc, #140]	; d544c <mbedtls_sha256_starts_ret+0x9c>
        ctx->state[1] = 0xBB67AE85;
   d53c0:	e9c0 2302 	strd	r2, r3, [r0, #8]
        ctx->state[3] = 0xA54FF53A;
   d53c4:	4b18      	ldr	r3, [pc, #96]	; (d5428 <mbedtls_sha256_starts_ret+0x78>)
        ctx->state[4] = 0x510E527F;
        ctx->state[5] = 0x9B05688C;
   d53c6:	4a19      	ldr	r2, [pc, #100]	; (d542c <mbedtls_sha256_starts_ret+0x7c>)
        ctx->state[3] = 0xA54FF53A;
   d53c8:	e9c0 c304 	strd	ip, r3, [r0, #16]
        ctx->state[5] = 0x9B05688C;
   d53cc:	4b18      	ldr	r3, [pc, #96]	; (d5430 <mbedtls_sha256_starts_ret+0x80>)
   d53ce:	e9c0 2306 	strd	r2, r3, [r0, #24]
        ctx->state[6] = 0x1F83D9AB;
   d53d2:	4b18      	ldr	r3, [pc, #96]	; (d5434 <mbedtls_sha256_starts_ret+0x84>)
   d53d4:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0x5BE0CD19;
   d53d6:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
   d53da:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
   d53de:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
        ctx->state[2] = 0x3070DD17;
        ctx->state[3] = 0xF70E5939;
        ctx->state[4] = 0xFFC00B31;
        ctx->state[5] = 0x68581511;
        ctx->state[6] = 0x64F98FA7;
        ctx->state[7] = 0xBEFA4FA4;
   d53e2:	6243      	str	r3, [r0, #36]	; 0x24
    }

    ctx->is224 = is224;
   d53e4:	6681      	str	r1, [r0, #104]	; 0x68

    return( 0 );
}
   d53e6:	2000      	movs	r0, #0
   d53e8:	4770      	bx	lr
        ctx->state[1] = 0x367CD507;
   d53ea:	4b13      	ldr	r3, [pc, #76]	; (d5438 <mbedtls_sha256_starts_ret+0x88>)
   d53ec:	4a13      	ldr	r2, [pc, #76]	; (d543c <mbedtls_sha256_starts_ret+0x8c>)
        ctx->state[4] = 0xFFC00B31;
   d53ee:	f8df c060 	ldr.w	ip, [pc, #96]	; d5450 <mbedtls_sha256_starts_ret+0xa0>
        ctx->state[1] = 0x367CD507;
   d53f2:	e9c0 2302 	strd	r2, r3, [r0, #8]
        ctx->state[2] = 0x3070DD17;
   d53f6:	f103 4379 	add.w	r3, r3, #4177526784	; 0xf9000000
   d53fa:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
   d53fe:	f503 6301 	add.w	r3, r3, #2064	; 0x810
   d5402:	6103      	str	r3, [r0, #16]
        ctx->state[4] = 0xFFC00B31;
   d5404:	4b0e      	ldr	r3, [pc, #56]	; (d5440 <mbedtls_sha256_starts_ret+0x90>)
   d5406:	e9c0 c305 	strd	ip, r3, [r0, #20]
        ctx->state[5] = 0x68581511;
   d540a:	f103 43d1 	add.w	r3, r3, #1753219072	; 0x68800000
   d540e:	f503 13c0 	add.w	r3, r3, #1572864	; 0x180000
   d5412:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
   d5416:	61c3      	str	r3, [r0, #28]
        ctx->state[6] = 0x64F98FA7;
   d5418:	4b0a      	ldr	r3, [pc, #40]	; (d5444 <mbedtls_sha256_starts_ret+0x94>)
   d541a:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0xBEFA4FA4;
   d541c:	4b0a      	ldr	r3, [pc, #40]	; (d5448 <mbedtls_sha256_starts_ret+0x98>)
   d541e:	e7e0      	b.n	d53e2 <mbedtls_sha256_starts_ret+0x32>
   d5420:	6a09e667 	.word	0x6a09e667
   d5424:	bb67ae85 	.word	0xbb67ae85
   d5428:	a54ff53a 	.word	0xa54ff53a
   d542c:	510e527f 	.word	0x510e527f
   d5430:	9b05688c 	.word	0x9b05688c
   d5434:	1f83d9ab 	.word	0x1f83d9ab
   d5438:	367cd507 	.word	0x367cd507
   d543c:	c1059ed8 	.word	0xc1059ed8
   d5440:	ffc00b31 	.word	0xffc00b31
   d5444:	64f98fa7 	.word	0x64f98fa7
   d5448:	befa4fa4 	.word	0xbefa4fa4
   d544c:	3c6ef372 	.word	0x3c6ef372
   d5450:	f70e5939 	.word	0xf70e5939

000d5454 <mbedtls_internal_sha256_process>:
        (d) += temp1; (h) = temp1 + temp2;              \
    } while( 0 )

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
   d5454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5458:	b0d1      	sub	sp, #324	; 0x144
   d545a:	f100 0308 	add.w	r3, r0, #8
   d545e:	9305      	str	r3, [sp, #20]
   d5460:	ab08      	add	r3, sp, #32
   d5462:	9300      	str	r3, [sp, #0]
   d5464:	f100 0328 	add.w	r3, r0, #40	; 0x28
   d5468:	9306      	str	r3, [sp, #24]
   d546a:	9a00      	ldr	r2, [sp, #0]
   d546c:	9b05      	ldr	r3, [sp, #20]

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( (const unsigned char *)data != NULL );

    for( i = 0; i < 8; i++ )
        A[i] = ctx->state[i];
   d546e:	f853 0b04 	ldr.w	r0, [r3], #4
   d5472:	f842 0b04 	str.w	r0, [r2], #4
    for( i = 0; i < 8; i++ )
   d5476:	9806      	ldr	r0, [sp, #24]
   d5478:	4298      	cmp	r0, r3
   d547a:	d1f8      	bne.n	d546e <mbedtls_internal_sha256_process+0x1a>
   d547c:	f10d 0940 	add.w	r9, sp, #64	; 0x40
   d5480:	f101 0040 	add.w	r0, r1, #64	; 0x40
   d5484:	464a      	mov	r2, r9
        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );
   d5486:	784b      	ldrb	r3, [r1, #1]
   d5488:	780c      	ldrb	r4, [r1, #0]
   d548a:	041b      	lsls	r3, r3, #16
   d548c:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
   d5490:	78cc      	ldrb	r4, [r1, #3]
   d5492:	4323      	orrs	r3, r4
   d5494:	788c      	ldrb	r4, [r1, #2]
   d5496:	3104      	adds	r1, #4
   d5498:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    for( i = 0; i < 16; i++ )
   d549c:	4288      	cmp	r0, r1
        GET_UINT32_BE( W[i], data, 4 * i );
   d549e:	f842 3b04 	str.w	r3, [r2], #4
    for( i = 0; i < 16; i++ )
   d54a2:	d1f0      	bne.n	d5486 <mbedtls_internal_sha256_process+0x32>
   d54a4:	9b00      	ldr	r3, [sp, #0]
   d54a6:	9900      	ldr	r1, [sp, #0]
   d54a8:	489b      	ldr	r0, [pc, #620]	; (d5718 <mbedtls_internal_sha256_process+0x2c4>)
   d54aa:	f8d3 c01c 	ldr.w	ip, [r3, #28]
   d54ae:	f8d3 8010 	ldr.w	r8, [r3, #16]
   d54b2:	68c9      	ldr	r1, [r1, #12]
   d54b4:	9001      	str	r0, [sp, #4]
   d54b6:	e9d3 6b05 	ldrd	r6, fp, [r3, #20]
   d54ba:	e9d3 7200 	ldrd	r7, r2, [r3]
   d54be:	689b      	ldr	r3, [r3, #8]
   d54c0:	46ca      	mov	sl, r9
   d54c2:	4686      	mov	lr, r0

    for( i = 0; i < 16; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
   d54c4:	f8de 0000 	ldr.w	r0, [lr]
   d54c8:	f8da 4000 	ldr.w	r4, [sl]
   d54cc:	ea4f 25f8 	mov.w	r5, r8, ror #11
   d54d0:	ea85 15b8 	eor.w	r5, r5, r8, ror #6
   d54d4:	4420      	add	r0, r4
   d54d6:	ea85 6578 	eor.w	r5, r5, r8, ror #25
   d54da:	4405      	add	r5, r0
   d54dc:	ea8b 0006 	eor.w	r0, fp, r6
   d54e0:	ea00 0008 	and.w	r0, r0, r8
   d54e4:	ea80 000b 	eor.w	r0, r0, fp
   d54e8:	4405      	add	r5, r0
   d54ea:	ea47 0402 	orr.w	r4, r7, r2
   d54ee:	ea4f 3077 	mov.w	r0, r7, ror #13
   d54f2:	44ac      	add	ip, r5
   d54f4:	ea80 00b7 	eor.w	r0, r0, r7, ror #2
   d54f8:	ea07 0502 	and.w	r5, r7, r2
   d54fc:	401c      	ands	r4, r3
   d54fe:	ea80 50b7 	eor.w	r0, r0, r7, ror #22
   d5502:	432c      	orrs	r4, r5
   d5504:	4404      	add	r4, r0
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
   d5506:	f8de 5004 	ldr.w	r5, [lr, #4]
   d550a:	f8da 0004 	ldr.w	r0, [sl, #4]
   d550e:	4405      	add	r5, r0
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
   d5510:	4461      	add	r1, ip
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
   d5512:	44ab      	add	fp, r5
   d5514:	ea88 0506 	eor.w	r5, r8, r6
   d5518:	400d      	ands	r5, r1
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
   d551a:	44a4      	add	ip, r4
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
   d551c:	ea85 0406 	eor.w	r4, r5, r6
   d5520:	eb0b 0504 	add.w	r5, fp, r4
   d5524:	ea4f 2bf1 	mov.w	fp, r1, ror #11
   d5528:	ea8b 1bb1 	eor.w	fp, fp, r1, ror #6
   d552c:	ea8b 6b71 	eor.w	fp, fp, r1, ror #25
   d5530:	44ab      	add	fp, r5
   d5532:	ea4c 0007 	orr.w	r0, ip, r7
   d5536:	ea4f 357c 	mov.w	r5, ip, ror #13
   d553a:	ea0c 0407 	and.w	r4, ip, r7
   d553e:	ea85 05bc 	eor.w	r5, r5, ip, ror #2
   d5542:	4010      	ands	r0, r2
   d5544:	4320      	orrs	r0, r4
   d5546:	ea85 55bc 	eor.w	r5, r5, ip, ror #22
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
   d554a:	f8de 4008 	ldr.w	r4, [lr, #8]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
   d554e:	4405      	add	r5, r0
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
   d5550:	f8da 0008 	ldr.w	r0, [sl, #8]
   d5554:	4404      	add	r4, r0
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
   d5556:	445b      	add	r3, fp
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
   d5558:	4426      	add	r6, r4
   d555a:	ea81 0408 	eor.w	r4, r1, r8
   d555e:	401c      	ands	r4, r3
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
   d5560:	445d      	add	r5, fp
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
   d5562:	ea84 0b08 	eor.w	fp, r4, r8
   d5566:	eb06 040b 	add.w	r4, r6, fp
   d556a:	ea4f 26f3 	mov.w	r6, r3, ror #11
   d556e:	ea86 16b3 	eor.w	r6, r6, r3, ror #6
   d5572:	ea86 6673 	eor.w	r6, r6, r3, ror #25
   d5576:	4426      	add	r6, r4
   d5578:	ea4c 0005 	orr.w	r0, ip, r5
   d557c:	ea4f 3475 	mov.w	r4, r5, ror #13
   d5580:	ea0c 0b05 	and.w	fp, ip, r5
   d5584:	ea84 04b5 	eor.w	r4, r4, r5, ror #2
   d5588:	4038      	ands	r0, r7
   d558a:	ea40 000b 	orr.w	r0, r0, fp
   d558e:	ea84 54b5 	eor.w	r4, r4, r5, ror #22
   d5592:	4404      	add	r4, r0
   d5594:	4434      	add	r4, r6
   d5596:	4432      	add	r2, r6
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
   d5598:	f8de 000c 	ldr.w	r0, [lr, #12]
   d559c:	f8da 600c 	ldr.w	r6, [sl, #12]
   d55a0:	ea81 0b03 	eor.w	fp, r1, r3
   d55a4:	4430      	add	r0, r6
   d55a6:	ea0b 0b02 	and.w	fp, fp, r2
   d55aa:	ea4f 26f2 	mov.w	r6, r2, ror #11
   d55ae:	ea8b 0b01 	eor.w	fp, fp, r1
   d55b2:	4440      	add	r0, r8
   d55b4:	ea86 16b2 	eor.w	r6, r6, r2, ror #6
   d55b8:	4458      	add	r0, fp
   d55ba:	ea86 6672 	eor.w	r6, r6, r2, ror #25
   d55be:	4406      	add	r6, r0
   d55c0:	eb07 0806 	add.w	r8, r7, r6
   d55c4:	ea4f 3074 	mov.w	r0, r4, ror #13
   d55c8:	ea45 0704 	orr.w	r7, r5, r4
   d55cc:	ea05 0b04 	and.w	fp, r5, r4
   d55d0:	ea80 00b4 	eor.w	r0, r0, r4, ror #2
   d55d4:	ea07 070c 	and.w	r7, r7, ip
   d55d8:	ea47 070b 	orr.w	r7, r7, fp
   d55dc:	ea80 50b4 	eor.w	r0, r0, r4, ror #22
   d55e0:	4438      	add	r0, r7
   d55e2:	4430      	add	r0, r6
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
   d55e4:	f8da 7010 	ldr.w	r7, [sl, #16]
   d55e8:	f8de 6010 	ldr.w	r6, [lr, #16]
   d55ec:	ea83 0b02 	eor.w	fp, r3, r2
   d55f0:	443e      	add	r6, r7
   d55f2:	4431      	add	r1, r6
   d55f4:	ea0b 0b08 	and.w	fp, fp, r8
   d55f8:	ea4f 26f8 	mov.w	r6, r8, ror #11
   d55fc:	ea8b 0b03 	eor.w	fp, fp, r3
   d5600:	ea86 16b8 	eor.w	r6, r6, r8, ror #6
   d5604:	4459      	add	r1, fp
   d5606:	ea86 6678 	eor.w	r6, r6, r8, ror #25
   d560a:	440e      	add	r6, r1
   d560c:	ea44 0700 	orr.w	r7, r4, r0
   d5610:	ea4f 3170 	mov.w	r1, r0, ror #13
   d5614:	ea04 0b00 	and.w	fp, r4, r0
   d5618:	ea81 01b0 	eor.w	r1, r1, r0, ror #2
   d561c:	402f      	ands	r7, r5
   d561e:	ea47 070b 	orr.w	r7, r7, fp
   d5622:	ea81 51b0 	eor.w	r1, r1, r0, ror #22
   d5626:	4439      	add	r1, r7
   d5628:	4431      	add	r1, r6
   d562a:	44b4      	add	ip, r6
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
   d562c:	f8da 7014 	ldr.w	r7, [sl, #20]
   d5630:	f8de 6014 	ldr.w	r6, [lr, #20]
   d5634:	ea82 0b08 	eor.w	fp, r2, r8
   d5638:	443e      	add	r6, r7
   d563a:	4433      	add	r3, r6
   d563c:	ea0b 0b0c 	and.w	fp, fp, ip
   d5640:	ea4f 26fc 	mov.w	r6, ip, ror #11
   d5644:	ea8b 0b02 	eor.w	fp, fp, r2
   d5648:	ea86 16bc 	eor.w	r6, r6, ip, ror #6
   d564c:	445b      	add	r3, fp
   d564e:	ea86 667c 	eor.w	r6, r6, ip, ror #25
   d5652:	441e      	add	r6, r3
   d5654:	eb05 0b06 	add.w	fp, r5, r6
   d5658:	ea4f 3371 	mov.w	r3, r1, ror #13
   d565c:	ea40 0501 	orr.w	r5, r0, r1
   d5660:	ea00 0701 	and.w	r7, r0, r1
   d5664:	4025      	ands	r5, r4
   d5666:	ea83 03b1 	eor.w	r3, r3, r1, ror #2
   d566a:	433d      	orrs	r5, r7
   d566c:	ea83 53b1 	eor.w	r3, r3, r1, ror #22
   d5670:	442b      	add	r3, r5
   d5672:	4433      	add	r3, r6
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
   d5674:	f8de 5018 	ldr.w	r5, [lr, #24]
   d5678:	f8da 6018 	ldr.w	r6, [sl, #24]
   d567c:	4435      	add	r5, r6
   d567e:	4415      	add	r5, r2
   d5680:	ea88 020c 	eor.w	r2, r8, ip
   d5684:	ea02 020b 	and.w	r2, r2, fp
   d5688:	ea82 0708 	eor.w	r7, r2, r8
   d568c:	19ea      	adds	r2, r5, r7
   d568e:	ea4f 25fb 	mov.w	r5, fp, ror #11
   d5692:	ea85 15bb 	eor.w	r5, r5, fp, ror #6
   d5696:	ea85 657b 	eor.w	r5, r5, fp, ror #25
   d569a:	4415      	add	r5, r2
   d569c:	1966      	adds	r6, r4, r5
   d569e:	ea4f 3273 	mov.w	r2, r3, ror #13
   d56a2:	ea41 0403 	orr.w	r4, r1, r3
   d56a6:	4004      	ands	r4, r0
   d56a8:	ea01 0703 	and.w	r7, r1, r3
   d56ac:	ea82 02b3 	eor.w	r2, r2, r3, ror #2
   d56b0:	433c      	orrs	r4, r7
   d56b2:	ea82 52b3 	eor.w	r2, r2, r3, ror #22
   d56b6:	4422      	add	r2, r4
   d56b8:	442a      	add	r2, r5
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
   d56ba:	f8de 401c 	ldr.w	r4, [lr, #28]
   d56be:	f8da 501c 	ldr.w	r5, [sl, #28]
   d56c2:	1967      	adds	r7, r4, r5
   d56c4:	44b8      	add	r8, r7
   d56c6:	ea8c 070b 	eor.w	r7, ip, fp
   d56ca:	4037      	ands	r7, r6
   d56cc:	ea87 070c 	eor.w	r7, r7, ip
   d56d0:	4447      	add	r7, r8
   d56d2:	ea4f 28f6 	mov.w	r8, r6, ror #11
   d56d6:	ea88 18b6 	eor.w	r8, r8, r6, ror #6
   d56da:	ea88 6876 	eor.w	r8, r8, r6, ror #25
   d56de:	4447      	add	r7, r8
   d56e0:	eb00 0807 	add.w	r8, r0, r7
   d56e4:	ea43 0402 	orr.w	r4, r3, r2
   d56e8:	ea4f 3072 	mov.w	r0, r2, ror #13
   d56ec:	ea80 00b2 	eor.w	r0, r0, r2, ror #2
   d56f0:	400c      	ands	r4, r1
   d56f2:	ea03 0502 	and.w	r5, r3, r2
   d56f6:	ea80 50b2 	eor.w	r0, r0, r2, ror #22
   d56fa:	432c      	orrs	r4, r5
   d56fc:	4404      	add	r4, r0
    for( i = 0; i < 16; i += 8 )
   d56fe:	4807      	ldr	r0, [pc, #28]	; (d571c <mbedtls_internal_sha256_process+0x2c8>)
   d5700:	f10e 0e20 	add.w	lr, lr, #32
   d5704:	4570      	cmp	r0, lr
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
   d5706:	4427      	add	r7, r4
    for( i = 0; i < 16; i += 8 )
   d5708:	f10a 0a20 	add.w	sl, sl, #32
   d570c:	f47f aeda 	bne.w	d54c4 <mbedtls_internal_sha256_process+0x70>
   d5710:	f109 00c0 	add.w	r0, r9, #192	; 0xc0
   d5714:	9007      	str	r0, [sp, #28]
   d5716:	e003      	b.n	d5720 <mbedtls_internal_sha256_process+0x2cc>
   d5718:	000eb1e0 	.word	0x000eb1e0
   d571c:	000eb220 	.word	0x000eb220
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
   d5720:	f8d9 0038 	ldr.w	r0, [r9, #56]	; 0x38
   d5724:	f8d9 5004 	ldr.w	r5, [r9, #4]
   d5728:	f8d9 4000 	ldr.w	r4, [r9]
   d572c:	ea4f 4ef0 	mov.w	lr, r0, ror #19
   d5730:	ea8e 4e70 	eor.w	lr, lr, r0, ror #17
   d5734:	ea8e 2e90 	eor.w	lr, lr, r0, lsr #10
   d5738:	f8d9 0024 	ldr.w	r0, [r9, #36]	; 0x24
   d573c:	ea4f 4ab5 	mov.w	sl, r5, ror #18
   d5740:	4420      	add	r0, r4
   d5742:	ea8a 1af5 	eor.w	sl, sl, r5, ror #7
   d5746:	ea8a 0ad5 	eor.w	sl, sl, r5, lsr #3
   d574a:	4486      	add	lr, r0
   d574c:	ea4f 24f8 	mov.w	r4, r8, ror #11
   d5750:	eb0e 000a 	add.w	r0, lr, sl
   d5754:	ea84 14b8 	eor.w	r4, r4, r8, ror #6
   d5758:	9004      	str	r0, [sp, #16]
   d575a:	ea84 6078 	eor.w	r0, r4, r8, ror #25
   d575e:	ea8b 0406 	eor.w	r4, fp, r6
   d5762:	ea04 0408 	and.w	r4, r4, r8
   d5766:	ea84 040b 	eor.w	r4, r4, fp
   d576a:	4404      	add	r4, r0
   d576c:	9801      	ldr	r0, [sp, #4]
   d576e:	6c00      	ldr	r0, [r0, #64]	; 0x40
   d5770:	4420      	add	r0, r4
   d5772:	9c04      	ldr	r4, [sp, #16]
   d5774:	f8c9 4040 	str.w	r4, [r9, #64]	; 0x40
   d5778:	4420      	add	r0, r4
   d577a:	4484      	add	ip, r0
   d577c:	4461      	add	r1, ip
   d577e:	9102      	str	r1, [sp, #8]
   d5780:	ea47 0002 	orr.w	r0, r7, r2
   d5784:	ea4f 3177 	mov.w	r1, r7, ror #13
   d5788:	ea07 0402 	and.w	r4, r7, r2
   d578c:	ea81 01b7 	eor.w	r1, r1, r7, ror #2
   d5790:	4018      	ands	r0, r3
   d5792:	ea81 51b7 	eor.w	r1, r1, r7, ror #22
   d5796:	4320      	orrs	r0, r4
   d5798:	4408      	add	r0, r1
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
   d579a:	f8d9 103c 	ldr.w	r1, [r9, #60]	; 0x3c
   d579e:	f8d9 4008 	ldr.w	r4, [r9, #8]
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
   d57a2:	4484      	add	ip, r0
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
   d57a4:	ea4f 40f1 	mov.w	r0, r1, ror #19
   d57a8:	ea80 4071 	eor.w	r0, r0, r1, ror #17
   d57ac:	ea80 2091 	eor.w	r0, r0, r1, lsr #10
   d57b0:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
   d57b4:	4429      	add	r1, r5
   d57b6:	4401      	add	r1, r0
   d57b8:	9802      	ldr	r0, [sp, #8]
   d57ba:	ea88 0e06 	eor.w	lr, r8, r6
   d57be:	ea0e 0e00 	and.w	lr, lr, r0
   d57c2:	9801      	ldr	r0, [sp, #4]
   d57c4:	ea4f 45b4 	mov.w	r5, r4, ror #18
   d57c8:	6c40      	ldr	r0, [r0, #68]	; 0x44
   d57ca:	ea85 15f4 	eor.w	r5, r5, r4, ror #7
   d57ce:	ea85 05d4 	eor.w	r5, r5, r4, lsr #3
   d57d2:	4429      	add	r1, r5
   d57d4:	4458      	add	r0, fp
   d57d6:	4408      	add	r0, r1
   d57d8:	ea8e 0e06 	eor.w	lr, lr, r6
   d57dc:	4486      	add	lr, r0
   d57de:	9802      	ldr	r0, [sp, #8]
   d57e0:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
   d57e4:	ea4f 25f0 	mov.w	r5, r0, ror #11
   d57e8:	ea85 15b0 	eor.w	r5, r5, r0, ror #6
   d57ec:	ea85 6570 	eor.w	r5, r5, r0, ror #25
   d57f0:	eb05 000e 	add.w	r0, r5, lr
   d57f4:	eb03 0b00 	add.w	fp, r3, r0
   d57f8:	ea4f 357c 	mov.w	r5, ip, ror #13
   d57fc:	ea47 030c 	orr.w	r3, r7, ip
   d5800:	ea07 0e0c 	and.w	lr, r7, ip
   d5804:	ea85 05bc 	eor.w	r5, r5, ip, ror #2
   d5808:	4013      	ands	r3, r2
   d580a:	ea43 030e 	orr.w	r3, r3, lr
   d580e:	ea85 55bc 	eor.w	r5, r5, ip, ror #22
   d5812:	441d      	add	r5, r3
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
   d5814:	9b04      	ldr	r3, [sp, #16]
   d5816:	f8d9 e00c 	ldr.w	lr, [r9, #12]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
   d581a:	4405      	add	r5, r0
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
   d581c:	ea4f 40f3 	mov.w	r0, r3, ror #19
   d5820:	ea80 4073 	eor.w	r0, r0, r3, ror #17
   d5824:	ea80 2093 	eor.w	r0, r0, r3, lsr #10
   d5828:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
   d582c:	4423      	add	r3, r4
   d582e:	4403      	add	r3, r0
   d5830:	9802      	ldr	r0, [sp, #8]
   d5832:	ea88 0a00 	eor.w	sl, r8, r0
   d5836:	9801      	ldr	r0, [sp, #4]
   d5838:	ea4f 44be 	mov.w	r4, lr, ror #18
   d583c:	6c80      	ldr	r0, [r0, #72]	; 0x48
   d583e:	ea84 14fe 	eor.w	r4, r4, lr, ror #7
   d5842:	ea84 04de 	eor.w	r4, r4, lr, lsr #3
   d5846:	4423      	add	r3, r4
   d5848:	ea0a 0a0b 	and.w	sl, sl, fp
   d584c:	4430      	add	r0, r6
   d584e:	ea4f 24fb 	mov.w	r4, fp, ror #11
   d5852:	4418      	add	r0, r3
   d5854:	ea8a 0a08 	eor.w	sl, sl, r8
   d5858:	ea84 14bb 	eor.w	r4, r4, fp, ror #6
   d585c:	ea84 647b 	eor.w	r4, r4, fp, ror #25
   d5860:	4482      	add	sl, r0
   d5862:	eb04 000a 	add.w	r0, r4, sl
   d5866:	4402      	add	r2, r0
   d5868:	ea4c 0405 	orr.w	r4, ip, r5
   d586c:	ea4f 3675 	mov.w	r6, r5, ror #13
   d5870:	9203      	str	r2, [sp, #12]
   d5872:	ea86 06b5 	eor.w	r6, r6, r5, ror #2
   d5876:	ea0c 0205 	and.w	r2, ip, r5
   d587a:	403c      	ands	r4, r7
   d587c:	ea86 56b5 	eor.w	r6, r6, r5, ror #22
   d5880:	4314      	orrs	r4, r2
   d5882:	4434      	add	r4, r6
   d5884:	4404      	add	r4, r0
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
   d5886:	ea4f 40f1 	mov.w	r0, r1, ror #19
   d588a:	ea80 4071 	eor.w	r0, r0, r1, ror #17
   d588e:	ea80 2191 	eor.w	r1, r0, r1, lsr #10
   d5892:	f8d9 0030 	ldr.w	r0, [r9, #48]	; 0x30
   d5896:	f8d9 2010 	ldr.w	r2, [r9, #16]
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
   d589a:	f8c9 3048 	str.w	r3, [r9, #72]	; 0x48
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
   d589e:	4486      	add	lr, r0
   d58a0:	4471      	add	r1, lr
   d58a2:	ea4f 4eb2 	mov.w	lr, r2, ror #18
   d58a6:	ea8e 1ef2 	eor.w	lr, lr, r2, ror #7
   d58aa:	ea8e 0ed2 	eor.w	lr, lr, r2, lsr #3
   d58ae:	448e      	add	lr, r1
   d58b0:	9902      	ldr	r1, [sp, #8]
   d58b2:	9803      	ldr	r0, [sp, #12]
   d58b4:	ea81 010b 	eor.w	r1, r1, fp
   d58b8:	4001      	ands	r1, r0
   d58ba:	9802      	ldr	r0, [sp, #8]
   d58bc:	4041      	eors	r1, r0
   d58be:	9801      	ldr	r0, [sp, #4]
   d58c0:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
   d58c2:	9803      	ldr	r0, [sp, #12]
   d58c4:	f8c9 e04c 	str.w	lr, [r9, #76]	; 0x4c
   d58c8:	4446      	add	r6, r8
   d58ca:	4476      	add	r6, lr
   d58cc:	4431      	add	r1, r6
   d58ce:	9e03      	ldr	r6, [sp, #12]
   d58d0:	ea4f 20f0 	mov.w	r0, r0, ror #11
   d58d4:	ea80 10b6 	eor.w	r0, r0, r6, ror #6
   d58d8:	ea80 6076 	eor.w	r0, r0, r6, ror #25
   d58dc:	1846      	adds	r6, r0, r1
   d58de:	ea45 0004 	orr.w	r0, r5, r4
   d58e2:	ea05 0104 	and.w	r1, r5, r4
   d58e6:	ea4f 3874 	mov.w	r8, r4, ror #13
   d58ea:	ea00 000c 	and.w	r0, r0, ip
   d58ee:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
   d58f2:	4308      	orrs	r0, r1
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
   d58f4:	ea4f 41f3 	mov.w	r1, r3, ror #19
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
   d58f8:	ea88 58b4 	eor.w	r8, r8, r4, ror #22
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
   d58fc:	ea81 4173 	eor.w	r1, r1, r3, ror #17
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
   d5900:	4440      	add	r0, r8
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
   d5902:	ea81 2393 	eor.w	r3, r1, r3, lsr #10
   d5906:	f8d9 1034 	ldr.w	r1, [r9, #52]	; 0x34
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
   d590a:	4430      	add	r0, r6
   d590c:	eb07 0a06 	add.w	sl, r7, r6
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
   d5910:	f8d9 6014 	ldr.w	r6, [r9, #20]
   d5914:	440a      	add	r2, r1
   d5916:	4413      	add	r3, r2
   d5918:	ea4f 42b6 	mov.w	r2, r6, ror #18
   d591c:	ea82 12f6 	eor.w	r2, r2, r6, ror #7
   d5920:	ea82 02d6 	eor.w	r2, r2, r6, lsr #3
   d5924:	441a      	add	r2, r3
   d5926:	9b03      	ldr	r3, [sp, #12]
   d5928:	9902      	ldr	r1, [sp, #8]
   d592a:	f8c9 2050 	str.w	r2, [r9, #80]	; 0x50
   d592e:	ea8b 0703 	eor.w	r7, fp, r3
   d5932:	9b01      	ldr	r3, [sp, #4]
   d5934:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5936:	4413      	add	r3, r2
   d5938:	440b      	add	r3, r1
   d593a:	ea07 070a 	and.w	r7, r7, sl
   d593e:	ea4f 21fa 	mov.w	r1, sl, ror #11
   d5942:	ea87 070b 	eor.w	r7, r7, fp
   d5946:	ea81 11ba 	eor.w	r1, r1, sl, ror #6
   d594a:	441f      	add	r7, r3
   d594c:	ea81 617a 	eor.w	r1, r1, sl, ror #25
   d5950:	19cb      	adds	r3, r1, r7
   d5952:	ea44 0700 	orr.w	r7, r4, r0
   d5956:	ea4f 3170 	mov.w	r1, r0, ror #13
   d595a:	ea04 0800 	and.w	r8, r4, r0
   d595e:	ea81 01b0 	eor.w	r1, r1, r0, ror #2
   d5962:	402f      	ands	r7, r5
   d5964:	ea47 0708 	orr.w	r7, r7, r8
   d5968:	ea81 51b0 	eor.w	r1, r1, r0, ror #22
   d596c:	4439      	add	r1, r7
   d596e:	4419      	add	r1, r3
   d5970:	449c      	add	ip, r3
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
   d5972:	f8d9 8018 	ldr.w	r8, [r9, #24]
   d5976:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
   d597a:	ea4f 47fe 	mov.w	r7, lr, ror #19
   d597e:	ea87 477e 	eor.w	r7, r7, lr, ror #17
   d5982:	ea87 2e9e 	eor.w	lr, r7, lr, lsr #10
   d5986:	199f      	adds	r7, r3, r6
   d5988:	ea4f 43b8 	mov.w	r3, r8, ror #18
   d598c:	ea83 13f8 	eor.w	r3, r3, r8, ror #7
   d5990:	ea83 03d8 	eor.w	r3, r3, r8, lsr #3
   d5994:	4477      	add	r7, lr
   d5996:	441f      	add	r7, r3
   d5998:	9b03      	ldr	r3, [sp, #12]
   d599a:	f8c9 7054 	str.w	r7, [r9, #84]	; 0x54
   d599e:	ea83 0e0a 	eor.w	lr, r3, sl
   d59a2:	ea0e 0e0c 	and.w	lr, lr, ip
   d59a6:	ea8e 0e03 	eor.w	lr, lr, r3
   d59aa:	9b01      	ldr	r3, [sp, #4]
   d59ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d59ae:	443b      	add	r3, r7
   d59b0:	445b      	add	r3, fp
   d59b2:	449e      	add	lr, r3
   d59b4:	ea4f 23fc 	mov.w	r3, ip, ror #11
   d59b8:	ea83 13bc 	eor.w	r3, r3, ip, ror #6
   d59bc:	ea83 637c 	eor.w	r3, r3, ip, ror #25
   d59c0:	eb03 060e 	add.w	r6, r3, lr
   d59c4:	eb05 0b06 	add.w	fp, r5, r6
   d59c8:	ea4f 3371 	mov.w	r3, r1, ror #13
   d59cc:	ea40 0501 	orr.w	r5, r0, r1
   d59d0:	ea00 0e01 	and.w	lr, r0, r1
   d59d4:	4025      	ands	r5, r4
   d59d6:	ea83 03b1 	eor.w	r3, r3, r1, ror #2
   d59da:	ea45 050e 	orr.w	r5, r5, lr
   d59de:	ea83 53b1 	eor.w	r3, r3, r1, ror #22
   d59e2:	442b      	add	r3, r5
   d59e4:	4433      	add	r3, r6
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
   d59e6:	f8d9 503c 	ldr.w	r5, [r9, #60]	; 0x3c
   d59ea:	f8d9 e01c 	ldr.w	lr, [r9, #28]
   d59ee:	ea4f 46f2 	mov.w	r6, r2, ror #19
   d59f2:	ea86 4672 	eor.w	r6, r6, r2, ror #17
   d59f6:	ea86 2292 	eor.w	r2, r6, r2, lsr #10
   d59fa:	eb05 0608 	add.w	r6, r5, r8
   d59fe:	4416      	add	r6, r2
   d5a00:	ea4f 42be 	mov.w	r2, lr, ror #18
   d5a04:	ea82 12fe 	eor.w	r2, r2, lr, ror #7
   d5a08:	ea82 02de 	eor.w	r2, r2, lr, lsr #3
   d5a0c:	4416      	add	r6, r2
   d5a0e:	9a01      	ldr	r2, [sp, #4]
   d5a10:	f8c9 6058 	str.w	r6, [r9, #88]	; 0x58
   d5a14:	6d95      	ldr	r5, [r2, #88]	; 0x58
   d5a16:	9a03      	ldr	r2, [sp, #12]
   d5a18:	4435      	add	r5, r6
   d5a1a:	ea8a 080c 	eor.w	r8, sl, ip
   d5a1e:	4415      	add	r5, r2
   d5a20:	ea08 080b 	and.w	r8, r8, fp
   d5a24:	ea4f 22fb 	mov.w	r2, fp, ror #11
   d5a28:	ea88 080a 	eor.w	r8, r8, sl
   d5a2c:	ea82 12bb 	eor.w	r2, r2, fp, ror #6
   d5a30:	4445      	add	r5, r8
   d5a32:	ea82 627b 	eor.w	r2, r2, fp, ror #25
   d5a36:	4415      	add	r5, r2
   d5a38:	1966      	adds	r6, r4, r5
   d5a3a:	ea4f 3273 	mov.w	r2, r3, ror #13
   d5a3e:	ea41 0403 	orr.w	r4, r1, r3
   d5a42:	4004      	ands	r4, r0
   d5a44:	ea01 0803 	and.w	r8, r1, r3
   d5a48:	ea82 02b3 	eor.w	r2, r2, r3, ror #2
   d5a4c:	ea44 0408 	orr.w	r4, r4, r8
   d5a50:	ea82 52b3 	eor.w	r2, r2, r3, ror #22
   d5a54:	4422      	add	r2, r4
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
   d5a56:	ea4f 44f7 	mov.w	r4, r7, ror #19
   d5a5a:	ea84 4477 	eor.w	r4, r4, r7, ror #17
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
   d5a5e:	442a      	add	r2, r5
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
   d5a60:	ea84 2797 	eor.w	r7, r4, r7, lsr #10
   d5a64:	f8d9 5020 	ldr.w	r5, [r9, #32]
   d5a68:	9c04      	ldr	r4, [sp, #16]
   d5a6a:	44a6      	add	lr, r4
   d5a6c:	ea4f 44b5 	mov.w	r4, r5, ror #18
   d5a70:	ea84 14f5 	eor.w	r4, r4, r5, ror #7
   d5a74:	ea84 05d5 	eor.w	r5, r4, r5, lsr #3
   d5a78:	9c01      	ldr	r4, [sp, #4]
   d5a7a:	4477      	add	r7, lr
   d5a7c:	6de4      	ldr	r4, [r4, #92]	; 0x5c
   d5a7e:	443d      	add	r5, r7
   d5a80:	ea8c 0e0b 	eor.w	lr, ip, fp
   d5a84:	442c      	add	r4, r5
   d5a86:	ea0e 0e06 	and.w	lr, lr, r6
   d5a8a:	ea4f 27f6 	mov.w	r7, r6, ror #11
   d5a8e:	ea8e 0e0c 	eor.w	lr, lr, ip
   d5a92:	4454      	add	r4, sl
   d5a94:	ea87 17b6 	eor.w	r7, r7, r6, ror #6
   d5a98:	4474      	add	r4, lr
   d5a9a:	ea87 6776 	eor.w	r7, r7, r6, ror #25
   d5a9e:	4427      	add	r7, r4
   d5aa0:	eb00 0807 	add.w	r8, r0, r7
   d5aa4:	ea43 0402 	orr.w	r4, r3, r2
   d5aa8:	ea4f 3072 	mov.w	r0, r2, ror #13
   d5aac:	f8c9 505c 	str.w	r5, [r9, #92]	; 0x5c
   d5ab0:	ea80 00b2 	eor.w	r0, r0, r2, ror #2
   d5ab4:	400c      	ands	r4, r1
   d5ab6:	ea03 0502 	and.w	r5, r3, r2
   d5aba:	ea80 50b2 	eor.w	r0, r0, r2, ror #22
   d5abe:	432c      	orrs	r4, r5
   d5ac0:	4404      	add	r4, r0
   d5ac2:	9801      	ldr	r0, [sp, #4]
   d5ac4:	3020      	adds	r0, #32
   d5ac6:	9001      	str	r0, [sp, #4]
    for( i = 16; i < 64; i += 8 )
   d5ac8:	9807      	ldr	r0, [sp, #28]
   d5aca:	f109 0920 	add.w	r9, r9, #32
   d5ace:	4548      	cmp	r0, r9
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
   d5ad0:	4427      	add	r7, r4
    for( i = 16; i < 64; i += 8 )
   d5ad2:	f47f ae25 	bne.w	d5720 <mbedtls_internal_sha256_process+0x2cc>
   d5ad6:	e9cd 6b0d 	strd	r6, fp, [sp, #52]	; 0x34
   d5ada:	e9cd 7208 	strd	r7, r2, [sp, #32]
   d5ade:	e9cd 310a 	strd	r3, r1, [sp, #40]	; 0x28
   d5ae2:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
   d5ae6:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
        ctx->state[i] += A[i];
   d5aea:	9b05      	ldr	r3, [sp, #20]
   d5aec:	9900      	ldr	r1, [sp, #0]
   d5aee:	681b      	ldr	r3, [r3, #0]
   d5af0:	f851 2b04 	ldr.w	r2, [r1], #4
   d5af4:	9100      	str	r1, [sp, #0]
   d5af6:	4413      	add	r3, r2
   d5af8:	9a05      	ldr	r2, [sp, #20]
   d5afa:	f842 3b04 	str.w	r3, [r2], #4
    for( i = 0; i < 8; i++ )
   d5afe:	9b06      	ldr	r3, [sp, #24]
        ctx->state[i] += A[i];
   d5b00:	9205      	str	r2, [sp, #20]
    for( i = 0; i < 8; i++ )
   d5b02:	4293      	cmp	r3, r2
   d5b04:	d1f1      	bne.n	d5aea <mbedtls_internal_sha256_process+0x696>

    return( 0 );
}
   d5b06:	2000      	movs	r0, #0
   d5b08:	b051      	add	sp, #324	; 0x144
   d5b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5b0e:	bf00      	nop

000d5b10 <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
   d5b10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5b14:	4605      	mov	r5, r0
   d5b16:	460e      	mov	r6, r1
    uint32_t left;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
   d5b18:	4614      	mov	r4, r2
   d5b1a:	b912      	cbnz	r2, d5b22 <mbedtls_sha256_update_ret+0x12>
    }

    if( ilen > 0 )
        memcpy( (void *) (ctx->buffer + left), input, ilen );

    return( 0 );
   d5b1c:	2000      	movs	r0, #0
}
   d5b1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    left = ctx->total[0] & 0x3F;
   d5b22:	6803      	ldr	r3, [r0, #0]
   d5b24:	f003 073f 	and.w	r7, r3, #63	; 0x3f
    ctx->total[0] += (uint32_t) ilen;
   d5b28:	18d3      	adds	r3, r2, r3
   d5b2a:	6003      	str	r3, [r0, #0]
        ctx->total[1]++;
   d5b2c:	bf22      	ittt	cs
   d5b2e:	6843      	ldrcs	r3, [r0, #4]
   d5b30:	3301      	addcs	r3, #1
   d5b32:	6043      	strcs	r3, [r0, #4]
    if( left && ilen >= fill )
   d5b34:	b1a7      	cbz	r7, d5b60 <mbedtls_sha256_update_ret+0x50>
    fill = 64 - left;
   d5b36:	f1c7 0940 	rsb	r9, r7, #64	; 0x40
    if( left && ilen >= fill )
   d5b3a:	454a      	cmp	r2, r9
   d5b3c:	d310      	bcc.n	d5b60 <mbedtls_sha256_update_ret+0x50>
        memcpy( (void *) (ctx->buffer + left), input, fill );
   d5b3e:	f100 0828 	add.w	r8, r0, #40	; 0x28
   d5b42:	464a      	mov	r2, r9
   d5b44:	eb08 0007 	add.w	r0, r8, r7
   d5b48:	f012 fec0 	bl	e88cc <memcpy>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
   d5b4c:	4641      	mov	r1, r8
   d5b4e:	4628      	mov	r0, r5
   d5b50:	f7ff fc80 	bl	d5454 <mbedtls_internal_sha256_process>
   d5b54:	2800      	cmp	r0, #0
   d5b56:	d1e2      	bne.n	d5b1e <mbedtls_sha256_update_ret+0xe>
        ilen  -= fill;
   d5b58:	443c      	add	r4, r7
        input += fill;
   d5b5a:	444e      	add	r6, r9
        ilen  -= fill;
   d5b5c:	3c40      	subs	r4, #64	; 0x40
        left = 0;
   d5b5e:	4607      	mov	r7, r0
   d5b60:	4426      	add	r6, r4
    while( ilen >= 64 )
   d5b62:	2c3f      	cmp	r4, #63	; 0x3f
   d5b64:	eba6 0104 	sub.w	r1, r6, r4
   d5b68:	d906      	bls.n	d5b78 <mbedtls_sha256_update_ret+0x68>
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
   d5b6a:	4628      	mov	r0, r5
   d5b6c:	f7ff fc72 	bl	d5454 <mbedtls_internal_sha256_process>
   d5b70:	2800      	cmp	r0, #0
   d5b72:	d1d4      	bne.n	d5b1e <mbedtls_sha256_update_ret+0xe>
        ilen  -= 64;
   d5b74:	3c40      	subs	r4, #64	; 0x40
    while( ilen >= 64 )
   d5b76:	e7f4      	b.n	d5b62 <mbedtls_sha256_update_ret+0x52>
    if( ilen > 0 )
   d5b78:	2c00      	cmp	r4, #0
   d5b7a:	d0cf      	beq.n	d5b1c <mbedtls_sha256_update_ret+0xc>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
   d5b7c:	f105 0028 	add.w	r0, r5, #40	; 0x28
   d5b80:	4622      	mov	r2, r4
   d5b82:	4438      	add	r0, r7
   d5b84:	f012 fea2 	bl	e88cc <memcpy>
   d5b88:	e7c8      	b.n	d5b1c <mbedtls_sha256_update_ret+0xc>

000d5b8a <mbedtls_sha256_finish_ret>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
   d5b8a:	b570      	push	{r4, r5, r6, lr}
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
   d5b8c:	6803      	ldr	r3, [r0, #0]
   d5b8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    ctx->buffer[used++] = 0x80;
   d5b92:	1c5a      	adds	r2, r3, #1
   d5b94:	4403      	add	r3, r0
{
   d5b96:	460d      	mov	r5, r1
   d5b98:	f100 0628 	add.w	r6, r0, #40	; 0x28
    ctx->buffer[used++] = 0x80;
   d5b9c:	2180      	movs	r1, #128	; 0x80

    if( used <= 56 )
   d5b9e:	2a38      	cmp	r2, #56	; 0x38
{
   d5ba0:	4604      	mov	r4, r0
    ctx->buffer[used++] = 0x80;
   d5ba2:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
    if( used <= 56 )
   d5ba6:	eb06 0002 	add.w	r0, r6, r2
   d5baa:	d861      	bhi.n	d5c70 <mbedtls_sha256_finish_ret+0xe6>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
   d5bac:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
   d5bb0:	2100      	movs	r1, #0
        memset( ctx->buffer + used, 0, 64 - used );

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
            return( ret );

        memset( ctx->buffer, 0, 56 );
   d5bb2:	f012 feb3 	bl	e891c <memset>

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
   d5bb6:	e9d4 3100 	ldrd	r3, r1, [r4]
    high = ( ctx->total[0] >> 29 )
   d5bba:	0f5a      	lsrs	r2, r3, #29
   d5bbc:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );
   d5bc0:	00db      	lsls	r3, r3, #3
   d5bc2:	ba12      	rev	r2, r2
   d5bc4:	ba1b      	rev	r3, r3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
   d5bc6:	6622      	str	r2, [r4, #96]	; 0x60
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
   d5bc8:	6663      	str	r3, [r4, #100]	; 0x64

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
   d5bca:	4631      	mov	r1, r6
   d5bcc:	4620      	mov	r0, r4
   d5bce:	f7ff fc41 	bl	d5454 <mbedtls_internal_sha256_process>
   d5bd2:	2800      	cmp	r0, #0
   d5bd4:	d14b      	bne.n	d5c6e <mbedtls_sha256_finish_ret+0xe4>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
   d5bd6:	7ae3      	ldrb	r3, [r4, #11]
   d5bd8:	702b      	strb	r3, [r5, #0]
   d5bda:	8963      	ldrh	r3, [r4, #10]
   d5bdc:	706b      	strb	r3, [r5, #1]
   d5bde:	68a3      	ldr	r3, [r4, #8]
   d5be0:	0a1b      	lsrs	r3, r3, #8
   d5be2:	70ab      	strb	r3, [r5, #2]
   d5be4:	68a3      	ldr	r3, [r4, #8]
   d5be6:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
   d5be8:	7be3      	ldrb	r3, [r4, #15]
   d5bea:	712b      	strb	r3, [r5, #4]
   d5bec:	89e3      	ldrh	r3, [r4, #14]
   d5bee:	716b      	strb	r3, [r5, #5]
   d5bf0:	68e3      	ldr	r3, [r4, #12]
   d5bf2:	0a1b      	lsrs	r3, r3, #8
   d5bf4:	71ab      	strb	r3, [r5, #6]
   d5bf6:	68e3      	ldr	r3, [r4, #12]
   d5bf8:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
   d5bfa:	7ce3      	ldrb	r3, [r4, #19]
   d5bfc:	722b      	strb	r3, [r5, #8]
   d5bfe:	8a63      	ldrh	r3, [r4, #18]
   d5c00:	726b      	strb	r3, [r5, #9]
   d5c02:	6923      	ldr	r3, [r4, #16]
   d5c04:	0a1b      	lsrs	r3, r3, #8
   d5c06:	72ab      	strb	r3, [r5, #10]
   d5c08:	6923      	ldr	r3, [r4, #16]
   d5c0a:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
   d5c0c:	7de3      	ldrb	r3, [r4, #23]
   d5c0e:	732b      	strb	r3, [r5, #12]
   d5c10:	8ae3      	ldrh	r3, [r4, #22]
   d5c12:	736b      	strb	r3, [r5, #13]
   d5c14:	6963      	ldr	r3, [r4, #20]
   d5c16:	0a1b      	lsrs	r3, r3, #8
   d5c18:	73ab      	strb	r3, [r5, #14]
   d5c1a:	6963      	ldr	r3, [r4, #20]
   d5c1c:	73eb      	strb	r3, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
   d5c1e:	7ee3      	ldrb	r3, [r4, #27]
   d5c20:	742b      	strb	r3, [r5, #16]
   d5c22:	8b63      	ldrh	r3, [r4, #26]
   d5c24:	746b      	strb	r3, [r5, #17]
   d5c26:	69a3      	ldr	r3, [r4, #24]
   d5c28:	0a1b      	lsrs	r3, r3, #8
   d5c2a:	74ab      	strb	r3, [r5, #18]
   d5c2c:	69a3      	ldr	r3, [r4, #24]
   d5c2e:	74eb      	strb	r3, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
   d5c30:	7fe3      	ldrb	r3, [r4, #31]
   d5c32:	752b      	strb	r3, [r5, #20]
   d5c34:	8be3      	ldrh	r3, [r4, #30]
   d5c36:	756b      	strb	r3, [r5, #21]
   d5c38:	69e3      	ldr	r3, [r4, #28]
   d5c3a:	0a1b      	lsrs	r3, r3, #8
   d5c3c:	75ab      	strb	r3, [r5, #22]
   d5c3e:	69e3      	ldr	r3, [r4, #28]
   d5c40:	75eb      	strb	r3, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
   d5c42:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   d5c46:	762b      	strb	r3, [r5, #24]
   d5c48:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d5c4a:	766b      	strb	r3, [r5, #25]
   d5c4c:	6a23      	ldr	r3, [r4, #32]
   d5c4e:	0a1b      	lsrs	r3, r3, #8
   d5c50:	76ab      	strb	r3, [r5, #26]
   d5c52:	6a23      	ldr	r3, [r4, #32]
   d5c54:	76eb      	strb	r3, [r5, #27]

    if( ctx->is224 == 0 )
   d5c56:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   d5c58:	b94b      	cbnz	r3, d5c6e <mbedtls_sha256_finish_ret+0xe4>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
   d5c5a:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   d5c5e:	772b      	strb	r3, [r5, #28]
   d5c60:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   d5c62:	776b      	strb	r3, [r5, #29]
   d5c64:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d5c66:	0a1b      	lsrs	r3, r3, #8
   d5c68:	77ab      	strb	r3, [r5, #30]
   d5c6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d5c6c:	77eb      	strb	r3, [r5, #31]

    return( 0 );
}
   d5c6e:	bd70      	pop	{r4, r5, r6, pc}
        memset( ctx->buffer + used, 0, 64 - used );
   d5c70:	2100      	movs	r1, #0
   d5c72:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
   d5c76:	f012 fe51 	bl	e891c <memset>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
   d5c7a:	4631      	mov	r1, r6
   d5c7c:	4620      	mov	r0, r4
   d5c7e:	f7ff fbe9 	bl	d5454 <mbedtls_internal_sha256_process>
   d5c82:	2800      	cmp	r0, #0
   d5c84:	d1f3      	bne.n	d5c6e <mbedtls_sha256_finish_ret+0xe4>
        memset( ctx->buffer, 0, 56 );
   d5c86:	4601      	mov	r1, r0
   d5c88:	2238      	movs	r2, #56	; 0x38
   d5c8a:	4630      	mov	r0, r6
   d5c8c:	e791      	b.n	d5bb2 <mbedtls_sha256_finish_ret+0x28>

000d5c8e <mbedtls_sha256_ret>:
 */
int mbedtls_sha256_ret( const unsigned char *input,
                        size_t ilen,
                        unsigned char output[32],
                        int is224 )
{
   d5c8e:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5c90:	b09f      	sub	sp, #124	; 0x7c
   d5c92:	4606      	mov	r6, r0

    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    mbedtls_sha256_init( &ctx );
   d5c94:	a803      	add	r0, sp, #12
{
   d5c96:	460f      	mov	r7, r1
   d5c98:	4615      	mov	r5, r2
   d5c9a:	9301      	str	r3, [sp, #4]
    mbedtls_sha256_init( &ctx );
   d5c9c:	f7ff fb7a 	bl	d5394 <mbedtls_sha256_init>

    if( ( ret = mbedtls_sha256_starts_ret( &ctx, is224 ) ) != 0 )
   d5ca0:	9901      	ldr	r1, [sp, #4]
   d5ca2:	a803      	add	r0, sp, #12
   d5ca4:	f7ff fb84 	bl	d53b0 <mbedtls_sha256_starts_ret>
   d5ca8:	4604      	mov	r4, r0
   d5caa:	b958      	cbnz	r0, d5cc4 <mbedtls_sha256_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha256_update_ret( &ctx, input, ilen ) ) != 0 )
   d5cac:	463a      	mov	r2, r7
   d5cae:	4631      	mov	r1, r6
   d5cb0:	a803      	add	r0, sp, #12
   d5cb2:	f7ff ff2d 	bl	d5b10 <mbedtls_sha256_update_ret>
   d5cb6:	4604      	mov	r4, r0
   d5cb8:	b920      	cbnz	r0, d5cc4 <mbedtls_sha256_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha256_finish_ret( &ctx, output ) ) != 0 )
   d5cba:	4629      	mov	r1, r5
   d5cbc:	a803      	add	r0, sp, #12
   d5cbe:	f7ff ff64 	bl	d5b8a <mbedtls_sha256_finish_ret>
   d5cc2:	4604      	mov	r4, r0
        goto exit;

exit:
    mbedtls_sha256_free( &ctx );
   d5cc4:	a803      	add	r0, sp, #12
   d5cc6:	f7ff fb69 	bl	d539c <mbedtls_sha256_free>

    return( ret );
}
   d5cca:	4620      	mov	r0, r4
   d5ccc:	b01f      	add	sp, #124	; 0x7c
   d5cce:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5cd0 <mbedtls_asn1_write_len>:
#define mbedtls_free       free
#endif

int mbedtls_asn1_write_len( unsigned char **p, unsigned char *start, size_t len )
{
    if( len < 0x80 )
   d5cd0:	6803      	ldr	r3, [r0, #0]
   d5cd2:	2a7f      	cmp	r2, #127	; 0x7f
   d5cd4:	eba3 0101 	sub.w	r1, r3, r1
   d5cd8:	d807      	bhi.n	d5cea <mbedtls_asn1_write_len+0x1a>
    {
        if( *p - start < 1 )
   d5cda:	2900      	cmp	r1, #0
   d5cdc:	dd69      	ble.n	d5db2 <mbedtls_asn1_write_len+0xe2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = (unsigned char) len;
   d5cde:	1e59      	subs	r1, r3, #1
   d5ce0:	6001      	str	r1, [r0, #0]
   d5ce2:	f803 2c01 	strb.w	r2, [r3, #-1]
        return( 1 );
   d5ce6:	2001      	movs	r0, #1
   d5ce8:	4770      	bx	lr
    }

    if( len <= 0xFF )
   d5cea:	2aff      	cmp	r2, #255	; 0xff
   d5cec:	d80d      	bhi.n	d5d0a <mbedtls_asn1_write_len+0x3a>
    {
        if( *p - start < 2 )
   d5cee:	2901      	cmp	r1, #1
   d5cf0:	dd5f      	ble.n	d5db2 <mbedtls_asn1_write_len+0xe2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = (unsigned char) len;
   d5cf2:	1e59      	subs	r1, r3, #1
   d5cf4:	6001      	str	r1, [r0, #0]
   d5cf6:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = 0x81;
   d5cfa:	6803      	ldr	r3, [r0, #0]
   d5cfc:	1e5a      	subs	r2, r3, #1
   d5cfe:	6002      	str	r2, [r0, #0]
   d5d00:	2281      	movs	r2, #129	; 0x81
   d5d02:	f803 2c01 	strb.w	r2, [r3, #-1]
        return( 2 );
   d5d06:	2002      	movs	r0, #2
   d5d08:	4770      	bx	lr
    }

    if( len <= 0xFFFF )
   d5d0a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   d5d0e:	d213      	bcs.n	d5d38 <mbedtls_asn1_write_len+0x68>
    {
        if( *p - start < 3 )
   d5d10:	2902      	cmp	r1, #2
   d5d12:	dd4e      	ble.n	d5db2 <mbedtls_asn1_write_len+0xe2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = ( len       ) & 0xFF;
   d5d14:	1e59      	subs	r1, r3, #1
   d5d16:	6001      	str	r1, [r0, #0]
   d5d18:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = ( len >>  8 ) & 0xFF;
   d5d1c:	6803      	ldr	r3, [r0, #0]
   d5d1e:	0a12      	lsrs	r2, r2, #8
   d5d20:	1e59      	subs	r1, r3, #1
   d5d22:	6001      	str	r1, [r0, #0]
   d5d24:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = 0x82;
   d5d28:	6803      	ldr	r3, [r0, #0]
   d5d2a:	1e5a      	subs	r2, r3, #1
   d5d2c:	6002      	str	r2, [r0, #0]
   d5d2e:	2282      	movs	r2, #130	; 0x82
   d5d30:	f803 2c01 	strb.w	r2, [r3, #-1]
        return( 3 );
   d5d34:	2003      	movs	r0, #3
   d5d36:	4770      	bx	lr
    }

    if( len <= 0xFFFFFF )
   d5d38:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
   d5d3c:	d219      	bcs.n	d5d72 <mbedtls_asn1_write_len+0xa2>
    {
        if( *p - start < 4 )
   d5d3e:	2903      	cmp	r1, #3
   d5d40:	dd37      	ble.n	d5db2 <mbedtls_asn1_write_len+0xe2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = ( len       ) & 0xFF;
   d5d42:	1e59      	subs	r1, r3, #1
   d5d44:	6001      	str	r1, [r0, #0]
   d5d46:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = ( len >>  8 ) & 0xFF;
   d5d4a:	6803      	ldr	r3, [r0, #0]
   d5d4c:	1e59      	subs	r1, r3, #1
   d5d4e:	6001      	str	r1, [r0, #0]
   d5d50:	0a11      	lsrs	r1, r2, #8
   d5d52:	f803 1c01 	strb.w	r1, [r3, #-1]
        *--(*p) = ( len >> 16 ) & 0xFF;
   d5d56:	6803      	ldr	r3, [r0, #0]
   d5d58:	0c12      	lsrs	r2, r2, #16
   d5d5a:	1e59      	subs	r1, r3, #1
   d5d5c:	6001      	str	r1, [r0, #0]
   d5d5e:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = 0x83;
   d5d62:	6803      	ldr	r3, [r0, #0]
   d5d64:	1e5a      	subs	r2, r3, #1
   d5d66:	6002      	str	r2, [r0, #0]
   d5d68:	2283      	movs	r2, #131	; 0x83
   d5d6a:	f803 2c01 	strb.w	r2, [r3, #-1]
        return( 4 );
   d5d6e:	2004      	movs	r0, #4
   d5d70:	4770      	bx	lr

#if SIZE_MAX > 0xFFFFFFFF
    if( len <= 0xFFFFFFFF )
#endif
    {
        if( *p - start < 5 )
   d5d72:	2904      	cmp	r1, #4
   d5d74:	dd1d      	ble.n	d5db2 <mbedtls_asn1_write_len+0xe2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = ( len       ) & 0xFF;
   d5d76:	1e59      	subs	r1, r3, #1
   d5d78:	6001      	str	r1, [r0, #0]
   d5d7a:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = ( len >>  8 ) & 0xFF;
   d5d7e:	6803      	ldr	r3, [r0, #0]
   d5d80:	1e59      	subs	r1, r3, #1
   d5d82:	6001      	str	r1, [r0, #0]
   d5d84:	0a11      	lsrs	r1, r2, #8
   d5d86:	f803 1c01 	strb.w	r1, [r3, #-1]
        *--(*p) = ( len >> 16 ) & 0xFF;
   d5d8a:	6803      	ldr	r3, [r0, #0]
   d5d8c:	1e59      	subs	r1, r3, #1
   d5d8e:	6001      	str	r1, [r0, #0]
   d5d90:	0c11      	lsrs	r1, r2, #16
   d5d92:	f803 1c01 	strb.w	r1, [r3, #-1]
        *--(*p) = ( len >> 24 ) & 0xFF;
   d5d96:	6803      	ldr	r3, [r0, #0]
   d5d98:	0e12      	lsrs	r2, r2, #24
   d5d9a:	1e59      	subs	r1, r3, #1
   d5d9c:	6001      	str	r1, [r0, #0]
   d5d9e:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = 0x84;
   d5da2:	6803      	ldr	r3, [r0, #0]
   d5da4:	1e5a      	subs	r2, r3, #1
   d5da6:	6002      	str	r2, [r0, #0]
   d5da8:	2284      	movs	r2, #132	; 0x84
   d5daa:	f803 2c01 	strb.w	r2, [r3, #-1]
        return( 5 );
   d5dae:	2005      	movs	r0, #5
   d5db0:	4770      	bx	lr
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
   d5db2:	f06f 006b 	mvn.w	r0, #107	; 0x6b
    }

#if SIZE_MAX > 0xFFFFFFFF
    return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
#endif
}
   d5db6:	4770      	bx	lr

000d5db8 <mbedtls_asn1_write_tag>:

int mbedtls_asn1_write_tag( unsigned char **p, unsigned char *start, unsigned char tag )
{
    if( *p - start < 1 )
   d5db8:	6803      	ldr	r3, [r0, #0]
   d5dba:	1a59      	subs	r1, r3, r1
   d5dbc:	2900      	cmp	r1, #0
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

    *--(*p) = tag;
   d5dbe:	bfc1      	itttt	gt
   d5dc0:	f103 31ff 	addgt.w	r1, r3, #4294967295
   d5dc4:	6001      	strgt	r1, [r0, #0]

    return( 1 );
   d5dc6:	2001      	movgt	r0, #1
    *--(*p) = tag;
   d5dc8:	f803 2c01 	strbgt.w	r2, [r3, #-1]
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
   d5dcc:	bfd8      	it	le
   d5dce:	f06f 006b 	mvnle.w	r0, #107	; 0x6b
}
   d5dd2:	4770      	bx	lr

000d5dd4 <mbedtls_asn1_write_mpi>:
    return( (int) len );
}

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_write_mpi( unsigned char **p, unsigned char *start, const mbedtls_mpi *X )
{
   d5dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5dd8:	4607      	mov	r7, r0
    int ret;
    size_t len = 0;

    // Write the MPI
    //
    len = mbedtls_mpi_size( X );
   d5dda:	4610      	mov	r0, r2
{
   d5ddc:	4688      	mov	r8, r1
   d5dde:	4615      	mov	r5, r2
    len = mbedtls_mpi_size( X );
   d5de0:	f00a ff2d 	bl	e0c3e <mbedtls_mpi_size>

    if( *p < start || (size_t)( *p - start ) < len )
   d5de4:	6839      	ldr	r1, [r7, #0]
   d5de6:	4541      	cmp	r1, r8
    len = mbedtls_mpi_size( X );
   d5de8:	4606      	mov	r6, r0
    if( *p < start || (size_t)( *p - start ) < len )
   d5dea:	d204      	bcs.n	d5df6 <mbedtls_asn1_write_mpi+0x22>
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
   d5dec:	f06f 046b 	mvn.w	r4, #107	; 0x6b

    ret = (int) len;

cleanup:
    return( ret );
}
   d5df0:	4620      	mov	r0, r4
   d5df2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( *p < start || (size_t)( *p - start ) < len )
   d5df6:	eba1 0208 	sub.w	r2, r1, r8
   d5dfa:	4290      	cmp	r0, r2
   d5dfc:	d8f6      	bhi.n	d5dec <mbedtls_asn1_write_mpi+0x18>
    (*p) -= len;
   d5dfe:	1a09      	subs	r1, r1, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( X, *p, len ) );
   d5e00:	4602      	mov	r2, r0
    (*p) -= len;
   d5e02:	6039      	str	r1, [r7, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( X, *p, len ) );
   d5e04:	4628      	mov	r0, r5
   d5e06:	f00a ff58 	bl	e0cba <mbedtls_mpi_write_binary>
   d5e0a:	4604      	mov	r4, r0
   d5e0c:	2800      	cmp	r0, #0
   d5e0e:	d1ef      	bne.n	d5df0 <mbedtls_asn1_write_mpi+0x1c>
    if( X->s ==1 && **p & 0x80 )
   d5e10:	682b      	ldr	r3, [r5, #0]
   d5e12:	2b01      	cmp	r3, #1
   d5e14:	d10d      	bne.n	d5e32 <mbedtls_asn1_write_mpi+0x5e>
   d5e16:	683b      	ldr	r3, [r7, #0]
   d5e18:	f993 2000 	ldrsb.w	r2, [r3]
   d5e1c:	2a00      	cmp	r2, #0
   d5e1e:	da08      	bge.n	d5e32 <mbedtls_asn1_write_mpi+0x5e>
        if( *p - start < 1 )
   d5e20:	eba3 0208 	sub.w	r2, r3, r8
   d5e24:	2a00      	cmp	r2, #0
   d5e26:	dde1      	ble.n	d5dec <mbedtls_asn1_write_mpi+0x18>
        *--(*p) = 0x00;
   d5e28:	1e5a      	subs	r2, r3, #1
   d5e2a:	603a      	str	r2, [r7, #0]
        len += 1;
   d5e2c:	3601      	adds	r6, #1
        *--(*p) = 0x00;
   d5e2e:	f803 0c01 	strb.w	r0, [r3, #-1]
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
   d5e32:	4632      	mov	r2, r6
   d5e34:	4641      	mov	r1, r8
   d5e36:	4638      	mov	r0, r7
   d5e38:	f7ff ff4a 	bl	d5cd0 <mbedtls_asn1_write_len>
   d5e3c:	1e04      	subs	r4, r0, #0
   d5e3e:	dbd7      	blt.n	d5df0 <mbedtls_asn1_write_mpi+0x1c>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_INTEGER ) );
   d5e40:	2202      	movs	r2, #2
   d5e42:	4641      	mov	r1, r8
   d5e44:	4638      	mov	r0, r7
   d5e46:	f7ff ffb7 	bl	d5db8 <mbedtls_asn1_write_tag>
   d5e4a:	1e03      	subs	r3, r0, #0
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
   d5e4c:	bfa6      	itte	ge
   d5e4e:	19a0      	addge	r0, r4, r6
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_INTEGER ) );
   d5e50:	18c4      	addge	r4, r0, r3
    ret = (int) len;
   d5e52:	461c      	movlt	r4, r3
   d5e54:	e7cc      	b.n	d5df0 <mbedtls_asn1_write_mpi+0x1c>

000d5e56 <mbedtls_ecdh_gen_public>:
 * Generate public key
 */
int mbedtls_ecdh_gen_public( mbedtls_ecp_group *grp, mbedtls_mpi *d, mbedtls_ecp_point *Q,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
   d5e56:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d5e5a:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   d5e5e:	461d      	mov	r5, r3
   d5e60:	4616      	mov	r6, r2
        MBEDTLS_MPI_CHK( mbedtls_ecp_gen_privkey( grp, d, f_rng, p_rng ) );
   d5e62:	4643      	mov	r3, r8
   d5e64:	462a      	mov	r2, r5
{
   d5e66:	4604      	mov	r4, r0
   d5e68:	460f      	mov	r7, r1
        MBEDTLS_MPI_CHK( mbedtls_ecp_gen_privkey( grp, d, f_rng, p_rng ) );
   d5e6a:	f003 ff09 	bl	d9c80 <mbedtls_ecp_gen_privkey>
   d5e6e:	b948      	cbnz	r0, d5e84 <mbedtls_ecdh_gen_public+0x2e>
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul_restartable( grp, Q, d, &grp->G,
   d5e70:	e9cd 8001 	strd	r8, r0, [sp, #4]
   d5e74:	9500      	str	r5, [sp, #0]
   d5e76:	f104 0328 	add.w	r3, r4, #40	; 0x28
   d5e7a:	463a      	mov	r2, r7
   d5e7c:	4631      	mov	r1, r6
   d5e7e:	4620      	mov	r0, r4
   d5e80:	f003 fd3e 	bl	d9900 <mbedtls_ecp_mul_restartable>
    ECDH_VALIDATE_RET( grp != NULL );
    ECDH_VALIDATE_RET( d != NULL );
    ECDH_VALIDATE_RET( Q != NULL );
    ECDH_VALIDATE_RET( f_rng != NULL );
    return( ecdh_gen_public_restartable( grp, d, Q, f_rng, p_rng, NULL ) );
}
   d5e84:	b004      	add	sp, #16
   d5e86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d5e8c <mbedtls_ecdh_compute_shared>:
 */
int mbedtls_ecdh_compute_shared( mbedtls_ecp_group *grp, mbedtls_mpi *z,
                         const mbedtls_ecp_point *Q, const mbedtls_mpi *d,
                         int (*f_rng)(void *, unsigned char *, size_t),
                         void *p_rng )
{
   d5e8c:	b570      	push	{r4, r5, r6, lr}
   d5e8e:	b090      	sub	sp, #64	; 0x40
   d5e90:	4604      	mov	r4, r0
    mbedtls_ecp_point_init( &P );
   d5e92:	a807      	add	r0, sp, #28
{
   d5e94:	4616      	mov	r6, r2
   d5e96:	460d      	mov	r5, r1
   d5e98:	9305      	str	r3, [sp, #20]
    mbedtls_ecp_point_init( &P );
   d5e9a:	f002 ff63 	bl	d8d64 <mbedtls_ecp_point_init>
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul_restartable( grp, &P, d, Q,
   d5e9e:	2300      	movs	r3, #0
   d5ea0:	9302      	str	r3, [sp, #8]
   d5ea2:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d5ea4:	9301      	str	r3, [sp, #4]
   d5ea6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d5ea8:	9300      	str	r3, [sp, #0]
   d5eaa:	4620      	mov	r0, r4
   d5eac:	9a05      	ldr	r2, [sp, #20]
   d5eae:	4633      	mov	r3, r6
   d5eb0:	a907      	add	r1, sp, #28
   d5eb2:	f003 fd25 	bl	d9900 <mbedtls_ecp_mul_restartable>
   d5eb6:	4604      	mov	r4, r0
   d5eb8:	b940      	cbnz	r0, d5ecc <mbedtls_ecdh_compute_shared+0x40>
    if( mbedtls_ecp_is_zero( &P ) )
   d5eba:	a807      	add	r0, sp, #28
   d5ebc:	f003 fb6a 	bl	d9594 <mbedtls_ecp_is_zero>
   d5ec0:	b950      	cbnz	r0, d5ed8 <mbedtls_ecdh_compute_shared+0x4c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( z, &P.X ) );
   d5ec2:	a907      	add	r1, sp, #28
   d5ec4:	4628      	mov	r0, r5
   d5ec6:	f00a fdf9 	bl	e0abc <mbedtls_mpi_copy>
   d5eca:	4604      	mov	r4, r0
    mbedtls_ecp_point_free( &P );
   d5ecc:	a807      	add	r0, sp, #28
   d5ece:	f002 ff86 	bl	d8dde <mbedtls_ecp_point_free>
    ECDH_VALIDATE_RET( Q != NULL );
    ECDH_VALIDATE_RET( d != NULL );
    ECDH_VALIDATE_RET( z != NULL );
    return( ecdh_compute_shared_restartable( grp, z, Q, d,
                                             f_rng, p_rng, NULL ) );
}
   d5ed2:	4620      	mov	r0, r4
   d5ed4:	b010      	add	sp, #64	; 0x40
   d5ed6:	bd70      	pop	{r4, r5, r6, pc}
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
   d5ed8:	4c00      	ldr	r4, [pc, #0]	; (d5edc <mbedtls_ecdh_compute_shared+0x50>)
   d5eda:	e7f7      	b.n	d5ecc <mbedtls_ecdh_compute_shared+0x40>
   d5edc:	ffffb080 	.word	0xffffb080

000d5ee0 <mbedtls_ecdh_init>:

/*
 * Initialize context
 */
void mbedtls_ecdh_init( mbedtls_ecdh_context *ctx )
{
   d5ee0:	b510      	push	{r4, lr}
   d5ee2:	4604      	mov	r4, r0
    mbedtls_ecp_group_init( &ctx->grp );
   d5ee4:	f002 ff4c 	bl	d8d80 <mbedtls_ecp_group_init>
    mbedtls_mpi_init( &ctx->d  );
   d5ee8:	f104 007c 	add.w	r0, r4, #124	; 0x7c
   d5eec:	f00a fd69 	bl	e09c2 <mbedtls_mpi_init>
    mbedtls_ecp_point_init( &ctx->Q   );
   d5ef0:	f104 0088 	add.w	r0, r4, #136	; 0x88
   d5ef4:	f002 ff36 	bl	d8d64 <mbedtls_ecp_point_init>
    mbedtls_ecp_point_init( &ctx->Qp  );
   d5ef8:	f104 00ac 	add.w	r0, r4, #172	; 0xac
   d5efc:	f002 ff32 	bl	d8d64 <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &ctx->z  );
   d5f00:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
   d5f04:	f00a fd5d 	bl	e09c2 <mbedtls_mpi_init>
    ECDH_VALIDATE( ctx != NULL );

#if defined(MBEDTLS_ECDH_LEGACY_CONTEXT)
    ecdh_init_internal( ctx );
    mbedtls_ecp_point_init( &ctx->Vi  );
   d5f08:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
   d5f0c:	f002 ff2a 	bl	d8d64 <mbedtls_ecp_point_init>
    mbedtls_ecp_point_init( &ctx->Vf  );
   d5f10:	f504 7082 	add.w	r0, r4, #260	; 0x104
   d5f14:	f002 ff26 	bl	d8d64 <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &ctx->_d );
   d5f18:	f504 7094 	add.w	r0, r4, #296	; 0x128
   d5f1c:	f00a fd51 	bl	e09c2 <mbedtls_mpi_init>
#else
    memset( ctx, 0, sizeof( mbedtls_ecdh_context ) );

    ctx->var = MBEDTLS_ECDH_VARIANT_NONE;
#endif
    ctx->point_format = MBEDTLS_ECP_PF_UNCOMPRESSED;
   d5f20:	2300      	movs	r3, #0
   d5f22:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
#if defined(MBEDTLS_ECP_RESTARTABLE)
    ctx->restart_enabled = 0;
#endif
}
   d5f26:	bd10      	pop	{r4, pc}

000d5f28 <mbedtls_ecdh_free>:

/*
 * Free context
 */
void mbedtls_ecdh_free( mbedtls_ecdh_context *ctx )
{
   d5f28:	b510      	push	{r4, lr}
    if( ctx == NULL )
   d5f2a:	4604      	mov	r4, r0
   d5f2c:	b1f8      	cbz	r0, d5f6e <mbedtls_ecdh_free+0x46>
        return;

#if defined(MBEDTLS_ECDH_LEGACY_CONTEXT)
    mbedtls_ecp_point_free( &ctx->Vi );
   d5f2e:	30e0      	adds	r0, #224	; 0xe0
   d5f30:	f002 ff55 	bl	d8dde <mbedtls_ecp_point_free>
    mbedtls_ecp_point_free( &ctx->Vf );
   d5f34:	f504 7082 	add.w	r0, r4, #260	; 0x104
   d5f38:	f002 ff51 	bl	d8dde <mbedtls_ecp_point_free>
    mbedtls_mpi_free( &ctx->_d );
   d5f3c:	f504 7094 	add.w	r0, r4, #296	; 0x128
   d5f40:	f00a fd45 	bl	e09ce <mbedtls_mpi_free>
    mbedtls_ecp_group_free( &ctx->grp );
   d5f44:	4620      	mov	r0, r4
   d5f46:	f002 ff4e 	bl	d8de6 <mbedtls_ecp_group_free>
    mbedtls_mpi_free( &ctx->d  );
   d5f4a:	f104 007c 	add.w	r0, r4, #124	; 0x7c
   d5f4e:	f00a fd3e 	bl	e09ce <mbedtls_mpi_free>
    mbedtls_ecp_point_free( &ctx->Q   );
   d5f52:	f104 0088 	add.w	r0, r4, #136	; 0x88
   d5f56:	f002 ff42 	bl	d8dde <mbedtls_ecp_point_free>
    mbedtls_ecp_point_free( &ctx->Qp  );
   d5f5a:	f104 00ac 	add.w	r0, r4, #172	; 0xac
   d5f5e:	f002 ff3e 	bl	d8dde <mbedtls_ecp_point_free>
    mbedtls_mpi_free( &ctx->z  );
   d5f62:	f104 00d0 	add.w	r0, r4, #208	; 0xd0

    ctx->point_format = MBEDTLS_ECP_PF_UNCOMPRESSED;
    ctx->var = MBEDTLS_ECDH_VARIANT_NONE;
    ctx->grp_id = MBEDTLS_ECP_DP_NONE;
#endif
}
   d5f66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_mpi_free( &ctx->z  );
   d5f6a:	f00a bd30 	b.w	e09ce <mbedtls_mpi_free>
}
   d5f6e:	bd10      	pop	{r4, pc}

000d5f70 <mbedtls_ecdh_read_params>:
 *      } ServerECDHParams;
 */
int mbedtls_ecdh_read_params( mbedtls_ecdh_context *ctx,
                              const unsigned char **buf,
                              const unsigned char *end )
{
   d5f70:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5f72:	4616      	mov	r6, r2
    ECDH_VALIDATE_RET( ctx != NULL );
    ECDH_VALIDATE_RET( buf != NULL );
    ECDH_VALIDATE_RET( *buf != NULL );
    ECDH_VALIDATE_RET( end != NULL );

    if( ( ret = mbedtls_ecp_tls_read_group_id( &grp_id, buf, end - *buf ) )
   d5f74:	680a      	ldr	r2, [r1, #0]
{
   d5f76:	4604      	mov	r4, r0
    if( ( ret = mbedtls_ecp_tls_read_group_id( &grp_id, buf, end - *buf ) )
   d5f78:	1ab2      	subs	r2, r6, r2
   d5f7a:	f10d 0007 	add.w	r0, sp, #7
{
   d5f7e:	460d      	mov	r5, r1
    if( ( ret = mbedtls_ecp_tls_read_group_id( &grp_id, buf, end - *buf ) )
   d5f80:	f003 fbc8 	bl	d9714 <mbedtls_ecp_tls_read_group_id>
   d5f84:	b968      	cbnz	r0, d5fa2 <mbedtls_ecdh_read_params+0x32>
    ret = mbedtls_ecp_group_load( &ctx->grp, grp_id );
   d5f86:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d5f8a:	4620      	mov	r0, r4
   d5f8c:	f007 fa60 	bl	dd450 <mbedtls_ecp_group_load>
    if( ret != 0 )
   d5f90:	b948      	cbnz	r0, d5fa6 <mbedtls_ecdh_read_params+0x36>
                                        end - *buf ) );
   d5f92:	682b      	ldr	r3, [r5, #0]
    return( mbedtls_ecp_tls_read_point( &ctx->grp, &ctx->Qp, buf,
   d5f94:	462a      	mov	r2, r5
   d5f96:	1af3      	subs	r3, r6, r3
   d5f98:	f104 01ac 	add.w	r1, r4, #172	; 0xac
   d5f9c:	4620      	mov	r0, r4
   d5f9e:	f003 fb89 	bl	d96b4 <mbedtls_ecp_tls_read_point>
                                               buf, end ) );
        default:
            return MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
    }
#endif
}
   d5fa2:	b002      	add	sp, #8
   d5fa4:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
   d5fa6:	4801      	ldr	r0, [pc, #4]	; (d5fac <mbedtls_ecdh_read_params+0x3c>)
   d5fa8:	e7fb      	b.n	d5fa2 <mbedtls_ecdh_read_params+0x32>
   d5faa:	bf00      	nop
   d5fac:	ffffb180 	.word	0xffffb180

000d5fb0 <mbedtls_ecdh_make_public>:
 */
int mbedtls_ecdh_make_public( mbedtls_ecdh_context *ctx, size_t *olen,
                              unsigned char *buf, size_t blen,
                              int (*f_rng)(void *, unsigned char *, size_t),
                              void *p_rng )
{
   d5fb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d5fb4:	460d      	mov	r5, r1
    if( ctx->grp.pbits == 0 )
   d5fb6:	6d81      	ldr	r1, [r0, #88]	; 0x58
#if defined(MBEDTLS_ECP_RESTARTABLE)
    restart_enabled = ctx->restart_enabled;
#endif

#if defined(MBEDTLS_ECDH_LEGACY_CONTEXT)
    return( ecdh_make_public_internal( ctx, olen, ctx->point_format, buf, blen,
   d5fb8:	f8d0 90dc 	ldr.w	r9, [r0, #220]	; 0xdc
{
   d5fbc:	4616      	mov	r6, r2
   d5fbe:	461f      	mov	r7, r3
   d5fc0:	4604      	mov	r4, r0
   d5fc2:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
    if( ctx->grp.pbits == 0 )
   d5fc6:	b199      	cbz	r1, d5ff0 <mbedtls_ecdh_make_public+0x40>
    if( ( ret = mbedtls_ecdh_gen_public( &ctx->grp, &ctx->d, &ctx->Q,
   d5fc8:	f100 0888 	add.w	r8, r0, #136	; 0x88
   d5fcc:	9200      	str	r2, [sp, #0]
   d5fce:	f100 017c 	add.w	r1, r0, #124	; 0x7c
   d5fd2:	4642      	mov	r2, r8
   d5fd4:	f7ff ff3f 	bl	d5e56 <mbedtls_ecdh_gen_public>
   d5fd8:	b958      	cbnz	r0, d5ff2 <mbedtls_ecdh_make_public+0x42>
    return mbedtls_ecp_tls_write_point( &ctx->grp, &ctx->Q, point_format, olen,
   d5fda:	462b      	mov	r3, r5
   d5fdc:	464a      	mov	r2, r9
   d5fde:	4641      	mov	r1, r8
   d5fe0:	4620      	mov	r0, r4
   d5fe2:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
                                               restart_enabled ) );
        default:
            return MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
    }
#endif
}
   d5fe6:	b003      	add	sp, #12
   d5fe8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    return mbedtls_ecp_tls_write_point( &ctx->grp, &ctx->Q, point_format, olen,
   d5fec:	f003 bb7a 	b.w	d96e4 <mbedtls_ecp_tls_write_point>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   d5ff0:	4801      	ldr	r0, [pc, #4]	; (d5ff8 <mbedtls_ecdh_make_public+0x48>)
}
   d5ff2:	b003      	add	sp, #12
   d5ff4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d5ff8:	ffffb080 	.word	0xffffb080

000d5ffc <mbedtls_ecdh_calc_secret>:
 */
int mbedtls_ecdh_calc_secret( mbedtls_ecdh_context *ctx, size_t *olen,
                              unsigned char *buf, size_t blen,
                              int (*f_rng)(void *, unsigned char *, size_t),
                              void *p_rng )
{
   d5ffc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d6000:	4616      	mov	r6, r2
   d6002:	4698      	mov	r8, r3
   d6004:	460f      	mov	r7, r1
   d6006:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
    if( ctx == NULL || ctx->grp.pbits == 0 )
   d600a:	4604      	mov	r4, r0
   d600c:	b918      	cbnz	r0, d6016 <mbedtls_ecdh_calc_secret+0x1a>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   d600e:	4814      	ldr	r0, [pc, #80]	; (d6060 <mbedtls_ecdh_calc_secret+0x64>)
                                               restart_enabled ) );
        default:
            return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
    }
#endif
}
   d6010:	b002      	add	sp, #8
   d6012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( ctx == NULL || ctx->grp.pbits == 0 )
   d6016:	6d81      	ldr	r1, [r0, #88]	; 0x58
   d6018:	2900      	cmp	r1, #0
   d601a:	d0f8      	beq.n	d600e <mbedtls_ecdh_calc_secret+0x12>
    if( ( ret = mbedtls_ecdh_compute_shared( &ctx->grp, &ctx->z, &ctx->Qp,
   d601c:	f100 05d0 	add.w	r5, r0, #208	; 0xd0
   d6020:	e9cd 3200 	strd	r3, r2, [sp]
   d6024:	4629      	mov	r1, r5
   d6026:	f100 037c 	add.w	r3, r0, #124	; 0x7c
   d602a:	f100 02ac 	add.w	r2, r0, #172	; 0xac
   d602e:	f7ff ff2d 	bl	d5e8c <mbedtls_ecdh_compute_shared>
   d6032:	2800      	cmp	r0, #0
   d6034:	d1ec      	bne.n	d6010 <mbedtls_ecdh_calc_secret+0x14>
    if( mbedtls_mpi_size( &ctx->z ) > blen )
   d6036:	4628      	mov	r0, r5
   d6038:	f00a fe01 	bl	e0c3e <mbedtls_mpi_size>
   d603c:	4580      	cmp	r8, r0
   d603e:	d3e6      	bcc.n	d600e <mbedtls_ecdh_calc_secret+0x12>
    *olen = ctx->grp.pbits / 8 + ( ( ctx->grp.pbits % 8 ) != 0 );
   d6040:	6da2      	ldr	r2, [r4, #88]	; 0x58
   d6042:	f012 0307 	ands.w	r3, r2, #7
   d6046:	bf18      	it	ne
   d6048:	2301      	movne	r3, #1
   d604a:	eb03 02d2 	add.w	r2, r3, r2, lsr #3
    return mbedtls_mpi_write_binary( &ctx->z, buf, *olen );
   d604e:	4631      	mov	r1, r6
   d6050:	4628      	mov	r0, r5
    *olen = ctx->grp.pbits / 8 + ( ( ctx->grp.pbits % 8 ) != 0 );
   d6052:	603a      	str	r2, [r7, #0]
}
   d6054:	b002      	add	sp, #8
   d6056:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return mbedtls_mpi_write_binary( &ctx->z, buf, *olen );
   d605a:	f00a be2e 	b.w	e0cba <mbedtls_mpi_write_binary>
   d605e:	bf00      	nop
   d6060:	ffffb080 	.word	0xffffb080

000d6064 <mbedtls_cipher_info_from_type>:

const mbedtls_cipher_info_t *mbedtls_cipher_info_from_type( const mbedtls_cipher_type_t cipher_type )
{
    const mbedtls_cipher_definition_t *def;

    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
   d6064:	4b04      	ldr	r3, [pc, #16]	; (d6078 <mbedtls_cipher_info_from_type+0x14>)
   d6066:	685a      	ldr	r2, [r3, #4]
   d6068:	b122      	cbz	r2, d6074 <mbedtls_cipher_info_from_type+0x10>
        if( def->type == cipher_type )
   d606a:	7819      	ldrb	r1, [r3, #0]
   d606c:	4281      	cmp	r1, r0
   d606e:	d001      	beq.n	d6074 <mbedtls_cipher_info_from_type+0x10>
    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
   d6070:	3308      	adds	r3, #8
   d6072:	e7f8      	b.n	d6066 <mbedtls_cipher_info_from_type+0x2>
            return( def->info );

    return( NULL );
}
   d6074:	4610      	mov	r0, r2
   d6076:	4770      	bx	lr
   d6078:	000ec380 	.word	0x000ec380

000d607c <mbedtls_cipher_info_from_values>:
                                              int key_bitlen,
                                              const mbedtls_cipher_mode_t mode )
{
    const mbedtls_cipher_definition_t *def;

    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
   d607c:	4b08      	ldr	r3, [pc, #32]	; (d60a0 <mbedtls_cipher_info_from_values+0x24>)
{
   d607e:	b530      	push	{r4, r5, lr}
   d6080:	4604      	mov	r4, r0
    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
   d6082:	6858      	ldr	r0, [r3, #4]
   d6084:	b158      	cbz	r0, d609e <mbedtls_cipher_info_from_values+0x22>
        if( def->info->base->cipher == cipher_id &&
   d6086:	6985      	ldr	r5, [r0, #24]
   d6088:	782d      	ldrb	r5, [r5, #0]
   d608a:	42a5      	cmp	r5, r4
   d608c:	d105      	bne.n	d609a <mbedtls_cipher_info_from_values+0x1e>
   d608e:	6845      	ldr	r5, [r0, #4]
   d6090:	428d      	cmp	r5, r1
   d6092:	d102      	bne.n	d609a <mbedtls_cipher_info_from_values+0x1e>
            def->info->key_bitlen == (unsigned) key_bitlen &&
   d6094:	7845      	ldrb	r5, [r0, #1]
   d6096:	4295      	cmp	r5, r2
   d6098:	d001      	beq.n	d609e <mbedtls_cipher_info_from_values+0x22>
    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
   d609a:	3308      	adds	r3, #8
   d609c:	e7f1      	b.n	d6082 <mbedtls_cipher_info_from_values+0x6>
            def->info->mode == mode )
            return( def->info );

    return( NULL );
}
   d609e:	bd30      	pop	{r4, r5, pc}
   d60a0:	000ec380 	.word	0x000ec380

000d60a4 <mbedtls_cipher_init>:

void mbedtls_cipher_init( mbedtls_cipher_context_t *ctx )
{
    CIPHER_VALIDATE( ctx != NULL );
    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
   d60a4:	2238      	movs	r2, #56	; 0x38
   d60a6:	2100      	movs	r1, #0
   d60a8:	f012 bc38 	b.w	e891c <memset>

000d60ac <mbedtls_cipher_free>:
}

void mbedtls_cipher_free( mbedtls_cipher_context_t *ctx )
{
   d60ac:	b510      	push	{r4, lr}
    if( ctx == NULL )
   d60ae:	4604      	mov	r4, r0
   d60b0:	b158      	cbz	r0, d60ca <mbedtls_cipher_free+0x1e>
                                 sizeof( mbedtls_cmac_context_t ) );
       mbedtls_free( ctx->cmac_ctx );
    }
#endif

    if( ctx->cipher_ctx )
   d60b2:	6b40      	ldr	r0, [r0, #52]	; 0x34
   d60b4:	b118      	cbz	r0, d60be <mbedtls_cipher_free+0x12>
        ctx->cipher_info->base->ctx_free_func( ctx->cipher_ctx );
   d60b6:	6823      	ldr	r3, [r4, #0]
   d60b8:	699b      	ldr	r3, [r3, #24]
   d60ba:	695b      	ldr	r3, [r3, #20]
   d60bc:	4798      	blx	r3

    mbedtls_platform_zeroize( ctx, sizeof(mbedtls_cipher_context_t) );
   d60be:	4620      	mov	r0, r4
   d60c0:	2138      	movs	r1, #56	; 0x38
}
   d60c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_platform_zeroize( ctx, sizeof(mbedtls_cipher_context_t) );
   d60c6:	f004 bf89 	b.w	dafdc <mbedtls_platform_zeroize>
}
   d60ca:	bd10      	pop	{r4, pc}

000d60cc <mbedtls_cipher_setup>:

int mbedtls_cipher_setup( mbedtls_cipher_context_t *ctx, const mbedtls_cipher_info_t *cipher_info )
{
   d60cc:	b538      	push	{r3, r4, r5, lr}
   d60ce:	4605      	mov	r5, r0
    CIPHER_VALIDATE_RET( ctx != NULL );
    if( cipher_info == NULL )
   d60d0:	460c      	mov	r4, r1
   d60d2:	b159      	cbz	r1, d60ec <mbedtls_cipher_setup+0x20>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
   d60d4:	2238      	movs	r2, #56	; 0x38
   d60d6:	2100      	movs	r1, #0
   d60d8:	f012 fc20 	bl	e891c <memset>

    if( NULL == ( ctx->cipher_ctx = cipher_info->base->ctx_alloc_func() ) )
   d60dc:	69a3      	ldr	r3, [r4, #24]
   d60de:	691b      	ldr	r3, [r3, #16]
   d60e0:	4798      	blx	r3
   d60e2:	6368      	str	r0, [r5, #52]	; 0x34
   d60e4:	b120      	cbz	r0, d60f0 <mbedtls_cipher_setup+0x24>
        return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );

    ctx->cipher_info = cipher_info;
   d60e6:	602c      	str	r4, [r5, #0]
#else
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_NONE );
#endif
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

    return( 0 );
   d60e8:	2000      	movs	r0, #0
}
   d60ea:	bd38      	pop	{r3, r4, r5, pc}
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
   d60ec:	4801      	ldr	r0, [pc, #4]	; (d60f4 <mbedtls_cipher_setup+0x28>)
   d60ee:	e7fc      	b.n	d60ea <mbedtls_cipher_setup+0x1e>
        return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );
   d60f0:	4801      	ldr	r0, [pc, #4]	; (d60f8 <mbedtls_cipher_setup+0x2c>)
   d60f2:	e7fa      	b.n	d60ea <mbedtls_cipher_setup+0x1e>
   d60f4:	ffff9f00 	.word	0xffff9f00
   d60f8:	ffff9e80 	.word	0xffff9e80

000d60fc <mbedtls_cipher_setkey>:

int mbedtls_cipher_setkey( mbedtls_cipher_context_t *ctx,
                           const unsigned char *key,
                           int key_bitlen,
                           const mbedtls_operation_t operation )
{
   d60fc:	b430      	push	{r4, r5}
    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( key != NULL );
    CIPHER_VALIDATE_RET( operation == MBEDTLS_ENCRYPT ||
                         operation == MBEDTLS_DECRYPT );
    if( ctx->cipher_info == NULL )
   d60fe:	6804      	ldr	r4, [r0, #0]
   d6100:	b1b4      	cbz	r4, d6130 <mbedtls_cipher_setkey+0x34>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_KEY_LEN ) == 0 &&
   d6102:	6925      	ldr	r5, [r4, #16]
   d6104:	07ad      	lsls	r5, r5, #30
   d6106:	d402      	bmi.n	d610e <mbedtls_cipher_setkey+0x12>
   d6108:	6865      	ldr	r5, [r4, #4]
   d610a:	4295      	cmp	r5, r2
   d610c:	d110      	bne.n	d6130 <mbedtls_cipher_setkey+0x34>
    ctx->operation = operation;

    /*
     * For OFB, CFB and CTR mode always use the encryption key schedule
     */
    if( MBEDTLS_ENCRYPT == operation ||
   d610e:	2b01      	cmp	r3, #1
    ctx->key_bitlen = key_bitlen;
   d6110:	6042      	str	r2, [r0, #4]
    ctx->operation = operation;
   d6112:	7203      	strb	r3, [r0, #8]
    if( MBEDTLS_ENCRYPT == operation ||
   d6114:	d003      	beq.n	d611e <mbedtls_cipher_setkey+0x22>
   d6116:	7865      	ldrb	r5, [r4, #1]
   d6118:	3d03      	subs	r5, #3
   d611a:	2d02      	cmp	r5, #2
   d611c:	d804      	bhi.n	d6128 <mbedtls_cipher_setkey+0x2c>
        MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
        MBEDTLS_MODE_OFB == ctx->cipher_info->mode ||
        MBEDTLS_MODE_CTR == ctx->cipher_info->mode )
    {
        return( ctx->cipher_info->base->setkey_enc_func( ctx->cipher_ctx, key,
   d611e:	69a3      	ldr	r3, [r4, #24]
   d6120:	689b      	ldr	r3, [r3, #8]
                                                         ctx->key_bitlen ) );
    }

    if( MBEDTLS_DECRYPT == operation )
        return( ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
   d6122:	6b40      	ldr	r0, [r0, #52]	; 0x34
                                                         ctx->key_bitlen ) );

    return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
}
   d6124:	bc30      	pop	{r4, r5}
        return( ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
   d6126:	4718      	bx	r3
    if( MBEDTLS_DECRYPT == operation )
   d6128:	b913      	cbnz	r3, d6130 <mbedtls_cipher_setkey+0x34>
        return( ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
   d612a:	69a3      	ldr	r3, [r4, #24]
   d612c:	68db      	ldr	r3, [r3, #12]
   d612e:	e7f8      	b.n	d6122 <mbedtls_cipher_setkey+0x26>
}
   d6130:	4801      	ldr	r0, [pc, #4]	; (d6138 <mbedtls_cipher_setkey+0x3c>)
   d6132:	bc30      	pop	{r4, r5}
   d6134:	4770      	bx	lr
   d6136:	bf00      	nop
   d6138:	ffff9f00 	.word	0xffff9f00

000d613c <mbedtls_cipher_set_iv>:

int mbedtls_cipher_set_iv( mbedtls_cipher_context_t *ctx,
                           const unsigned char *iv,
                           size_t iv_len )
{
   d613c:	b538      	push	{r3, r4, r5, lr}
    size_t actual_iv_size;

    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( iv_len == 0 || iv != NULL );
    if( ctx->cipher_info == NULL )
   d613e:	6803      	ldr	r3, [r0, #0]
{
   d6140:	4605      	mov	r5, r0
   d6142:	4614      	mov	r4, r2
    if( ctx->cipher_info == NULL )
   d6144:	b19b      	cbz	r3, d616e <mbedtls_cipher_set_iv+0x32>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    /* avoid buffer overflow in ctx->iv */
    if( iv_len > MBEDTLS_MAX_IV_LENGTH )
   d6146:	2a10      	cmp	r2, #16
   d6148:	d80f      	bhi.n	d616a <mbedtls_cipher_set_iv+0x2e>
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );

    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_IV_LEN ) != 0 )
   d614a:	691a      	ldr	r2, [r3, #16]
   d614c:	07d2      	lsls	r2, r2, #31
   d614e:	d403      	bmi.n	d6158 <mbedtls_cipher_set_iv+0x1c>
        actual_iv_size = iv_len;
    else
    {
        actual_iv_size = ctx->cipher_info->iv_size;
   d6150:	68db      	ldr	r3, [r3, #12]

        /* avoid reading past the end of input buffer */
        if( actual_iv_size > iv_len )
   d6152:	429c      	cmp	r4, r3
   d6154:	d30b      	bcc.n	d616e <mbedtls_cipher_set_iv+0x32>
   d6156:	461c      	mov	r4, r3
            return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
        }
    }
#endif

    if ( actual_iv_size != 0 )
   d6158:	b15c      	cbz	r4, d6172 <mbedtls_cipher_set_iv+0x36>
    {
        memcpy( ctx->iv, iv, actual_iv_size );
   d615a:	4622      	mov	r2, r4
   d615c:	f105 0020 	add.w	r0, r5, #32
   d6160:	f012 fbb4 	bl	e88cc <memcpy>
        ctx->iv_size = actual_iv_size;
   d6164:	632c      	str	r4, [r5, #48]	; 0x30
    }

    return( 0 );
   d6166:	2000      	movs	r0, #0
}
   d6168:	bd38      	pop	{r3, r4, r5, pc}
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
   d616a:	4803      	ldr	r0, [pc, #12]	; (d6178 <mbedtls_cipher_set_iv+0x3c>)
   d616c:	e7fc      	b.n	d6168 <mbedtls_cipher_set_iv+0x2c>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
   d616e:	4803      	ldr	r0, [pc, #12]	; (d617c <mbedtls_cipher_set_iv+0x40>)
   d6170:	e7fa      	b.n	d6168 <mbedtls_cipher_set_iv+0x2c>
    return( 0 );
   d6172:	4620      	mov	r0, r4
   d6174:	e7f8      	b.n	d6168 <mbedtls_cipher_set_iv+0x2c>
   d6176:	bf00      	nop
   d6178:	ffff9f80 	.word	0xffff9f80
   d617c:	ffff9f00 	.word	0xffff9f00

000d6180 <mbedtls_cipher_reset>:

int mbedtls_cipher_reset( mbedtls_cipher_context_t *ctx )
{
    CIPHER_VALIDATE_RET( ctx != NULL );
    if( ctx->cipher_info == NULL )
   d6180:	6803      	ldr	r3, [r0, #0]
   d6182:	b11b      	cbz	r3, d618c <mbedtls_cipher_reset+0xc>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    ctx->unprocessed_len = 0;
   d6184:	2300      	movs	r3, #0
   d6186:	61c3      	str	r3, [r0, #28]

    return( 0 );
   d6188:	4618      	mov	r0, r3
   d618a:	4770      	bx	lr
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
   d618c:	4800      	ldr	r0, [pc, #0]	; (d6190 <mbedtls_cipher_reset+0x10>)
}
   d618e:	4770      	bx	lr
   d6190:	ffff9f00 	.word	0xffff9f00

000d6194 <mbedtls_cipher_update>:
}
#endif /* MBEDTLS_GCM_C || MBEDTLS_CHACHAPOLY_C */

int mbedtls_cipher_update( mbedtls_cipher_context_t *ctx, const unsigned char *input,
                   size_t ilen, unsigned char *output, size_t *olen )
{
   d6194:	b470      	push	{r4, r5, r6}
   d6196:	4614      	mov	r4, r2

    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( ilen == 0 || input != NULL );
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    if( ctx->cipher_info == NULL )
   d6198:	6802      	ldr	r2, [r0, #0]
{
   d619a:	9e03      	ldr	r6, [sp, #12]
    if( ctx->cipher_info == NULL )
   d619c:	b34a      	cbz	r2, d61f2 <mbedtls_cipher_update+0x5e>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    *olen = 0;
   d619e:	2200      	movs	r2, #0
   d61a0:	6032      	str	r2, [r6, #0]
    block_size = mbedtls_cipher_get_block_size( ctx );
   d61a2:	6805      	ldr	r5, [r0, #0]
 */
static inline unsigned int mbedtls_cipher_get_block_size(
    const mbedtls_cipher_context_t *ctx )
{
    MBEDTLS_INTERNAL_VALIDATE_RET( ctx != NULL, 0 );
    if( ctx->cipher_info == NULL )
   d61a4:	b185      	cbz	r5, d61c8 <mbedtls_cipher_update+0x34>
        return 0;

    return ctx->cipher_info->block_size;
   d61a6:	696a      	ldr	r2, [r5, #20]

    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
   d61a8:	786d      	ldrb	r5, [r5, #1]
   d61aa:	2d01      	cmp	r5, #1
   d61ac:	d10e      	bne.n	d61cc <mbedtls_cipher_update+0x38>
    {
        if( ilen != block_size )
   d61ae:	4294      	cmp	r4, r2
   d61b0:	d122      	bne.n	d61f8 <mbedtls_cipher_update+0x64>
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );

        *olen = ilen;
   d61b2:	6034      	str	r4, [r6, #0]

        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
   d61b4:	6802      	ldr	r2, [r0, #0]
   d61b6:	6992      	ldr	r2, [r2, #24]
   d61b8:	6854      	ldr	r4, [r2, #4]
   d61ba:	460a      	mov	r2, r1
   d61bc:	46a4      	mov	ip, r4
   d61be:	f990 1008 	ldrsb.w	r1, [r0, #8]
   d61c2:	6b40      	ldr	r0, [r0, #52]	; 0x34
        return( 0 );
    }
#endif /* MBEDTLS_CIPHER_MODE_STREAM */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
   d61c4:	bc70      	pop	{r4, r5, r6}
        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
   d61c6:	4760      	bx	ip
        return 0;
   d61c8:	462a      	mov	r2, r5
   d61ca:	e7ed      	b.n	d61a8 <mbedtls_cipher_update+0x14>
    if( ctx->cipher_info->mode == MBEDTLS_MODE_GCM )
   d61cc:	2d06      	cmp	r5, #6
   d61ce:	d106      	bne.n	d61de <mbedtls_cipher_update+0x4a>
        *olen = ilen;
   d61d0:	6034      	str	r4, [r6, #0]
        return( mbedtls_gcm_update( (mbedtls_gcm_context *) ctx->cipher_ctx, ilen, input,
   d61d2:	460a      	mov	r2, r1
   d61d4:	6b40      	ldr	r0, [r0, #52]	; 0x34
   d61d6:	4621      	mov	r1, r4
}
   d61d8:	bc70      	pop	{r4, r5, r6}
        return( mbedtls_gcm_update( (mbedtls_gcm_context *) ctx->cipher_ctx, ilen, input,
   d61da:	f006 bba3 	b.w	dc924 <mbedtls_gcm_update>
    if ( 0 == block_size )
   d61de:	b16a      	cbz	r2, d61fc <mbedtls_cipher_update+0x68>
    if( input == output &&
   d61e0:	4299      	cmp	r1, r3
   d61e2:	d10d      	bne.n	d6200 <mbedtls_cipher_update+0x6c>
   d61e4:	69c3      	ldr	r3, [r0, #28]
   d61e6:	b923      	cbnz	r3, d61f2 <mbedtls_cipher_update+0x5e>
       ( ctx->unprocessed_len != 0 || ilen % block_size ) )
   d61e8:	fbb4 f1f2 	udiv	r1, r4, r2
   d61ec:	fb02 4211 	mls	r2, r2, r1, r4
   d61f0:	b132      	cbz	r2, d6200 <mbedtls_cipher_update+0x6c>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
   d61f2:	4804      	ldr	r0, [pc, #16]	; (d6204 <mbedtls_cipher_update+0x70>)
}
   d61f4:	bc70      	pop	{r4, r5, r6}
   d61f6:	4770      	bx	lr
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
   d61f8:	4803      	ldr	r0, [pc, #12]	; (d6208 <mbedtls_cipher_update+0x74>)
   d61fa:	e7fb      	b.n	d61f4 <mbedtls_cipher_update+0x60>
        return( MBEDTLS_ERR_CIPHER_INVALID_CONTEXT );
   d61fc:	4803      	ldr	r0, [pc, #12]	; (d620c <mbedtls_cipher_update+0x78>)
   d61fe:	e7f9      	b.n	d61f4 <mbedtls_cipher_update+0x60>
    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
   d6200:	4803      	ldr	r0, [pc, #12]	; (d6210 <mbedtls_cipher_update+0x7c>)
   d6202:	e7f7      	b.n	d61f4 <mbedtls_cipher_update+0x60>
   d6204:	ffff9f00 	.word	0xffff9f00
   d6208:	ffff9d80 	.word	0xffff9d80
   d620c:	ffff9c80 	.word	0xffff9c80
   d6210:	ffff9f80 	.word	0xffff9f80

000d6214 <mbedtls_cipher_finish>:
}
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

int mbedtls_cipher_finish( mbedtls_cipher_context_t *ctx,
                   unsigned char *output, size_t *olen )
{
   d6214:	b510      	push	{r4, lr}
    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    if( ctx->cipher_info == NULL )
   d6216:	6801      	ldr	r1, [r0, #0]
{
   d6218:	4603      	mov	r3, r0
    if( ctx->cipher_info == NULL )
   d621a:	b1a9      	cbz	r1, d6248 <mbedtls_cipher_finish+0x34>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    *olen = 0;
   d621c:	2000      	movs	r0, #0
   d621e:	6010      	str	r0, [r2, #0]

    if( MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
   d6220:	6819      	ldr	r1, [r3, #0]
   d6222:	784a      	ldrb	r2, [r1, #1]
   d6224:	1ed4      	subs	r4, r2, #3
   d6226:	2c04      	cmp	r4, #4
   d6228:	d90d      	bls.n	d6246 <mbedtls_cipher_finish+0x32>
        MBEDTLS_MODE_OFB == ctx->cipher_info->mode ||
        MBEDTLS_MODE_CTR == ctx->cipher_info->mode ||
        MBEDTLS_MODE_GCM == ctx->cipher_info->mode ||
   d622a:	2a09      	cmp	r2, #9
   d622c:	d00b      	beq.n	d6246 <mbedtls_cipher_finish+0x32>
        MBEDTLS_MODE_STREAM == ctx->cipher_info->mode )
    {
        return( 0 );
    }

    if ( ( MBEDTLS_CIPHER_CHACHA20          == ctx->cipher_info->type ) ||
   d622e:	7809      	ldrb	r1, [r1, #0]
   d6230:	3948      	subs	r1, #72	; 0x48
   d6232:	2901      	cmp	r1, #1
   d6234:	d907      	bls.n	d6246 <mbedtls_cipher_finish+0x32>
         ( MBEDTLS_CIPHER_CHACHA20_POLY1305 == ctx->cipher_info->type ) )
    {
        return( 0 );
    }

    if( MBEDTLS_MODE_ECB == ctx->cipher_info->mode )
   d6236:	2a01      	cmp	r2, #1
   d6238:	d108      	bne.n	d624c <mbedtls_cipher_finish+0x38>
    {
        if( ctx->unprocessed_len != 0 )
   d623a:	69db      	ldr	r3, [r3, #28]
   d623c:	4283      	cmp	r3, r0
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
   d623e:	f5a0 40c5 	sub.w	r0, r0, #25216	; 0x6280
   d6242:	bf08      	it	eq
   d6244:	2000      	moveq	r0, #0
#else
    ((void) output);
#endif /* MBEDTLS_CIPHER_MODE_CBC */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
   d6246:	bd10      	pop	{r4, pc}
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
   d6248:	4801      	ldr	r0, [pc, #4]	; (d6250 <mbedtls_cipher_finish+0x3c>)
   d624a:	e7fc      	b.n	d6246 <mbedtls_cipher_finish+0x32>
    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
   d624c:	4801      	ldr	r0, [pc, #4]	; (d6254 <mbedtls_cipher_finish+0x40>)
   d624e:	e7fa      	b.n	d6246 <mbedtls_cipher_finish+0x32>
   d6250:	ffff9f00 	.word	0xffff9f00
   d6254:	ffff9f80 	.word	0xffff9f80

000d6258 <mbedtls_cipher_crypt>:
 */
int mbedtls_cipher_crypt( mbedtls_cipher_context_t *ctx,
                  const unsigned char *iv, size_t iv_len,
                  const unsigned char *input, size_t ilen,
                  unsigned char *output, size_t *olen )
{
   d6258:	b5f0      	push	{r4, r5, r6, r7, lr}
   d625a:	b085      	sub	sp, #20
   d625c:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
   d6260:	4604      	mov	r4, r0
   d6262:	461e      	mov	r6, r3
    CIPHER_VALIDATE_RET( iv_len == 0 || iv != NULL );
    CIPHER_VALIDATE_RET( ilen == 0 || input != NULL );
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );

    if( ( ret = mbedtls_cipher_set_iv( ctx, iv, iv_len ) ) != 0 )
   d6264:	f7ff ff6a 	bl	d613c <mbedtls_cipher_set_iv>
   d6268:	b9a8      	cbnz	r0, d6296 <mbedtls_cipher_crypt+0x3e>
    if( ctx->cipher_info == NULL )
   d626a:	6823      	ldr	r3, [r4, #0]
   d626c:	b1ab      	cbz	r3, d629a <mbedtls_cipher_crypt+0x42>
    ctx->unprocessed_len = 0;
   d626e:	61e0      	str	r0, [r4, #28]
        return( ret );

    if( ( ret = mbedtls_cipher_reset( ctx ) ) != 0 )
        return( ret );

    if( ( ret = mbedtls_cipher_update( ctx, input, ilen, output, olen ) ) != 0 )
   d6270:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d6272:	9500      	str	r5, [sp, #0]
   d6274:	463b      	mov	r3, r7
   d6276:	4631      	mov	r1, r6
   d6278:	4620      	mov	r0, r4
   d627a:	f7ff ff8b 	bl	d6194 <mbedtls_cipher_update>
   d627e:	b950      	cbnz	r0, d6296 <mbedtls_cipher_crypt+0x3e>
        return( ret );

    if( ( ret = mbedtls_cipher_finish( ctx, output + *olen, &finish_olen ) ) != 0 )
   d6280:	6829      	ldr	r1, [r5, #0]
   d6282:	aa03      	add	r2, sp, #12
   d6284:	4439      	add	r1, r7
   d6286:	4620      	mov	r0, r4
   d6288:	f7ff ffc4 	bl	d6214 <mbedtls_cipher_finish>
   d628c:	b918      	cbnz	r0, d6296 <mbedtls_cipher_crypt+0x3e>
        return( ret );

    *olen += finish_olen;
   d628e:	682b      	ldr	r3, [r5, #0]
   d6290:	9a03      	ldr	r2, [sp, #12]
   d6292:	4413      	add	r3, r2
   d6294:	602b      	str	r3, [r5, #0]

    return( 0 );
}
   d6296:	b005      	add	sp, #20
   d6298:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
   d629a:	4801      	ldr	r0, [pc, #4]	; (d62a0 <mbedtls_cipher_crypt+0x48>)
   d629c:	e7fb      	b.n	d6296 <mbedtls_cipher_crypt+0x3e>
   d629e:	bf00      	nop
   d62a0:	ffff9f00 	.word	0xffff9f00

000d62a4 <mbedtls_cipher_auth_encrypt>:
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         unsigned char *tag, size_t tag_len )
{
   d62a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    CIPHER_VALIDATE_RET( tag_len == 0 || tag != NULL );

#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
   d62a8:	6807      	ldr	r7, [r0, #0]
{
   d62aa:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
   d62ae:	787f      	ldrb	r7, [r7, #1]
   d62b0:	2f06      	cmp	r7, #6
{
   d62b2:	e9dd 5607 	ldrd	r5, r6, [sp, #28]
   d62b6:	e9dd 4c09 	ldrd	r4, ip, [sp, #36]	; 0x24
   d62ba:	e9dd 980b 	ldrd	r9, r8, [sp, #44]	; 0x2c
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
   d62be:	d110      	bne.n	d62e2 <mbedtls_cipher_auth_encrypt+0x3e>
    {
        *olen = ilen;
   d62c0:	f8c9 4000 	str.w	r4, [r9]
        return( mbedtls_gcm_crypt_and_tag( (mbedtls_gcm_context *)ctx->cipher_ctx, MBEDTLS_GCM_ENCRYPT, ilen,
   d62c4:	e9cd 3508 	strd	r3, r5, [sp, #32]
   d62c8:	e9cd e80c 	strd	lr, r8, [sp, #48]	; 0x30
   d62cc:	e9cd 6c0a 	strd	r6, ip, [sp, #40]	; 0x28
   d62d0:	9207      	str	r2, [sp, #28]
   d62d2:	460b      	mov	r3, r1
   d62d4:	4622      	mov	r2, r4
   d62d6:	6b40      	ldr	r0, [r0, #52]	; 0x34
                                ilen, iv, ad, ad_len, input, output, tag ) );
    }
#endif /* MBEDTLS_CHACHAPOLY_C */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
   d62d8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return( mbedtls_gcm_crypt_and_tag( (mbedtls_gcm_context *)ctx->cipher_ctx, MBEDTLS_GCM_ENCRYPT, ilen,
   d62dc:	2101      	movs	r1, #1
   d62de:	f006 bbfe 	b.w	dcade <mbedtls_gcm_crypt_and_tag>
}
   d62e2:	4801      	ldr	r0, [pc, #4]	; (d62e8 <mbedtls_cipher_auth_encrypt+0x44>)
   d62e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d62e8:	ffff9f80 	.word	0xffff9f80

000d62ec <mbedtls_cipher_auth_decrypt>:
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         const unsigned char *tag, size_t tag_len )
{
   d62ec:	b530      	push	{r4, r5, lr}
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    CIPHER_VALIDATE_RET( tag_len == 0 || tag != NULL );

#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
   d62ee:	6805      	ldr	r5, [r0, #0]
   d62f0:	786d      	ldrb	r5, [r5, #1]
{
   d62f2:	b087      	sub	sp, #28
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
   d62f4:	2d06      	cmp	r5, #6
{
   d62f6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
   d62f8:	d119      	bne.n	d632e <mbedtls_cipher_auth_decrypt+0x42>
    {
        int ret;

        *olen = ilen;
   d62fa:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   d62fc:	602c      	str	r4, [r5, #0]
        ret = mbedtls_gcm_auth_decrypt( (mbedtls_gcm_context *)ctx->cipher_ctx, ilen,
   d62fe:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   d6300:	9505      	str	r5, [sp, #20]
   d6302:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   d6304:	9504      	str	r5, [sp, #16]
   d6306:	9d10      	ldr	r5, [sp, #64]	; 0x40
   d6308:	9503      	str	r5, [sp, #12]
   d630a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   d630c:	9502      	str	r5, [sp, #8]
   d630e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d6310:	e9cd 3500 	strd	r3, r5, [sp]
   d6314:	4613      	mov	r3, r2
   d6316:	6b40      	ldr	r0, [r0, #52]	; 0x34
   d6318:	460a      	mov	r2, r1
   d631a:	4621      	mov	r1, r4
   d631c:	f006 fc02 	bl	dcb24 <mbedtls_gcm_auth_decrypt>
                                iv, iv_len, ad, ad_len,
                                tag, tag_len, input, output );

        if( ret == MBEDTLS_ERR_GCM_AUTH_FAILED )
            ret = MBEDTLS_ERR_CIPHER_AUTH_FAILED;
   d6320:	4b04      	ldr	r3, [pc, #16]	; (d6334 <mbedtls_cipher_auth_decrypt+0x48>)
   d6322:	f110 0f12 	cmn.w	r0, #18
   d6326:	bf08      	it	eq
   d6328:	4618      	moveq	r0, r3
        return( ret );
    }
#endif /* MBEDTLS_CHACHAPOLY_C */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
   d632a:	b007      	add	sp, #28
   d632c:	bd30      	pop	{r4, r5, pc}
    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
   d632e:	4802      	ldr	r0, [pc, #8]	; (d6338 <mbedtls_cipher_auth_decrypt+0x4c>)
   d6330:	e7fb      	b.n	d632a <mbedtls_cipher_auth_decrypt+0x3e>
   d6332:	bf00      	nop
   d6334:	ffff9d00 	.word	0xffff9d00
   d6338:	ffff9f80 	.word	0xffff9f80

000d633c <mbedtls_asn1_get_len>:
 * ASN.1 DER decoding routines
 */
int mbedtls_asn1_get_len( unsigned char **p,
                  const unsigned char *end,
                  size_t *len )
{
   d633c:	b570      	push	{r4, r5, r6, lr}
    if( ( end - *p ) < 1 )
   d633e:	6803      	ldr	r3, [r0, #0]
   d6340:	1acd      	subs	r5, r1, r3
   d6342:	2d00      	cmp	r5, #0
   d6344:	dd0d      	ble.n	d6362 <mbedtls_asn1_get_len+0x26>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( ( **p & 0x80 ) == 0 )
   d6346:	f993 6000 	ldrsb.w	r6, [r3]
   d634a:	781c      	ldrb	r4, [r3, #0]
   d634c:	2e00      	cmp	r6, #0
   d634e:	db0b      	blt.n	d6368 <mbedtls_asn1_get_len+0x2c>
        *len = *(*p)++;
   d6350:	1c5c      	adds	r4, r3, #1
   d6352:	6004      	str	r4, [r0, #0]
   d6354:	781b      	ldrb	r3, [r3, #0]
   d6356:	6013      	str	r3, [r2, #0]
        default:
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
        }
    }

    if( *len > (size_t) ( end - *p ) )
   d6358:	6803      	ldr	r3, [r0, #0]
   d635a:	1ac9      	subs	r1, r1, r3
   d635c:	6813      	ldr	r3, [r2, #0]
   d635e:	428b      	cmp	r3, r1
   d6360:	d936      	bls.n	d63d0 <mbedtls_asn1_get_len+0x94>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   d6362:	f06f 005f 	mvn.w	r0, #95	; 0x5f

    return( 0 );
}
   d6366:	bd70      	pop	{r4, r5, r6, pc}
        switch( **p & 0x7F )
   d6368:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d636c:	3c01      	subs	r4, #1
   d636e:	2c03      	cmp	r4, #3
   d6370:	d82b      	bhi.n	d63ca <mbedtls_asn1_get_len+0x8e>
   d6372:	e8df f004 	tbb	[pc, r4]
   d6376:	0a02      	.short	0x0a02
   d6378:	2114      	.short	0x2114
            if( ( end - *p ) < 2 )
   d637a:	2d01      	cmp	r5, #1
   d637c:	d0f1      	beq.n	d6362 <mbedtls_asn1_get_len+0x26>
            *len = (*p)[1];
   d637e:	785b      	ldrb	r3, [r3, #1]
   d6380:	6013      	str	r3, [r2, #0]
            (*p) += 2;
   d6382:	6803      	ldr	r3, [r0, #0]
   d6384:	3302      	adds	r3, #2
            (*p) += 5;
   d6386:	6003      	str	r3, [r0, #0]
            break;
   d6388:	e7e6      	b.n	d6358 <mbedtls_asn1_get_len+0x1c>
            if( ( end - *p ) < 3 )
   d638a:	2d02      	cmp	r5, #2
   d638c:	dde9      	ble.n	d6362 <mbedtls_asn1_get_len+0x26>
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
   d638e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
   d6392:	ba5b      	rev16	r3, r3
   d6394:	b29b      	uxth	r3, r3
   d6396:	6013      	str	r3, [r2, #0]
            (*p) += 3;
   d6398:	6803      	ldr	r3, [r0, #0]
   d639a:	3303      	adds	r3, #3
   d639c:	e7f3      	b.n	d6386 <mbedtls_asn1_get_len+0x4a>
            if( ( end - *p ) < 4 )
   d639e:	2d03      	cmp	r5, #3
   d63a0:	dddf      	ble.n	d6362 <mbedtls_asn1_get_len+0x26>
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
   d63a2:	789c      	ldrb	r4, [r3, #2]
            *len = ( (size_t)(*p)[1] << 16 ) |
   d63a4:	785d      	ldrb	r5, [r3, #1]
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
   d63a6:	78db      	ldrb	r3, [r3, #3]
   d63a8:	0224      	lsls	r4, r4, #8
            *len = ( (size_t)(*p)[1] << 16 ) |
   d63aa:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
   d63ae:	4323      	orrs	r3, r4
            *len = ( (size_t)(*p)[1] << 16 ) |
   d63b0:	6013      	str	r3, [r2, #0]
            (*p) += 4;
   d63b2:	6803      	ldr	r3, [r0, #0]
   d63b4:	3304      	adds	r3, #4
   d63b6:	e7e6      	b.n	d6386 <mbedtls_asn1_get_len+0x4a>
            if( ( end - *p ) < 5 )
   d63b8:	2d04      	cmp	r5, #4
   d63ba:	ddd2      	ble.n	d6362 <mbedtls_asn1_get_len+0x26>
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
   d63bc:	f8d3 3001 	ldr.w	r3, [r3, #1]
   d63c0:	ba1b      	rev	r3, r3
   d63c2:	6013      	str	r3, [r2, #0]
            (*p) += 5;
   d63c4:	6803      	ldr	r3, [r0, #0]
   d63c6:	3305      	adds	r3, #5
   d63c8:	e7dd      	b.n	d6386 <mbedtls_asn1_get_len+0x4a>
    if( ( **p & 0x80 ) == 0 )
   d63ca:	f06f 0063 	mvn.w	r0, #99	; 0x63
   d63ce:	e7ca      	b.n	d6366 <mbedtls_asn1_get_len+0x2a>
    return( 0 );
   d63d0:	2000      	movs	r0, #0
   d63d2:	e7c8      	b.n	d6366 <mbedtls_asn1_get_len+0x2a>

000d63d4 <mbedtls_asn1_get_tag>:

int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
   d63d4:	b470      	push	{r4, r5, r6}
    if( ( end - *p ) < 1 )
   d63d6:	6804      	ldr	r4, [r0, #0]
   d63d8:	1b0e      	subs	r6, r1, r4
   d63da:	2e00      	cmp	r6, #0
   d63dc:	dd07      	ble.n	d63ee <mbedtls_asn1_get_tag+0x1a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != tag )
   d63de:	7826      	ldrb	r6, [r4, #0]
   d63e0:	429e      	cmp	r6, r3
   d63e2:	d108      	bne.n	d63f6 <mbedtls_asn1_get_tag+0x22>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
   d63e4:	3401      	adds	r4, #1
   d63e6:	6004      	str	r4, [r0, #0]

    return( mbedtls_asn1_get_len( p, end, len ) );
}
   d63e8:	bc70      	pop	{r4, r5, r6}
    return( mbedtls_asn1_get_len( p, end, len ) );
   d63ea:	f7ff bfa7 	b.w	d633c <mbedtls_asn1_get_len>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   d63ee:	f06f 005f 	mvn.w	r0, #95	; 0x5f
}
   d63f2:	bc70      	pop	{r4, r5, r6}
   d63f4:	4770      	bx	lr
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
   d63f6:	f06f 0061 	mvn.w	r0, #97	; 0x61
   d63fa:	e7fa      	b.n	d63f2 <mbedtls_asn1_get_tag+0x1e>

000d63fc <mbedtls_asn1_get_bool>:

int mbedtls_asn1_get_bool( unsigned char **p,
                   const unsigned char *end,
                   int *val )
{
   d63fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
   d63fe:	2301      	movs	r3, #1
{
   d6400:	4615      	mov	r5, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
   d6402:	aa01      	add	r2, sp, #4
{
   d6404:	4604      	mov	r4, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
   d6406:	f7ff ffe5 	bl	d63d4 <mbedtls_asn1_get_tag>
   d640a:	b958      	cbnz	r0, d6424 <mbedtls_asn1_get_bool+0x28>
        return( ret );

    if( len != 1 )
   d640c:	9b01      	ldr	r3, [sp, #4]
   d640e:	2b01      	cmp	r3, #1
   d6410:	d10a      	bne.n	d6428 <mbedtls_asn1_get_bool+0x2c>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    *val = ( **p != 0 ) ? 1 : 0;
   d6412:	6823      	ldr	r3, [r4, #0]
   d6414:	781b      	ldrb	r3, [r3, #0]
   d6416:	3b00      	subs	r3, #0
   d6418:	bf18      	it	ne
   d641a:	2301      	movne	r3, #1
   d641c:	602b      	str	r3, [r5, #0]
    (*p)++;
   d641e:	6823      	ldr	r3, [r4, #0]
   d6420:	3301      	adds	r3, #1
   d6422:	6023      	str	r3, [r4, #0]

    return( 0 );
}
   d6424:	b003      	add	sp, #12
   d6426:	bd30      	pop	{r4, r5, pc}
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
   d6428:	f06f 0063 	mvn.w	r0, #99	; 0x63
   d642c:	e7fa      	b.n	d6424 <mbedtls_asn1_get_bool+0x28>

000d642e <mbedtls_asn1_get_int>:

int mbedtls_asn1_get_int( unsigned char **p,
                  const unsigned char *end,
                  int *val )
{
   d642e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
   d6430:	2302      	movs	r3, #2
{
   d6432:	4615      	mov	r5, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
   d6434:	aa01      	add	r2, sp, #4
{
   d6436:	4604      	mov	r4, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
   d6438:	f7ff ffcc 	bl	d63d4 <mbedtls_asn1_get_tag>
   d643c:	b9c8      	cbnz	r0, d6472 <mbedtls_asn1_get_int+0x44>
        return( ret );

    if( len == 0 || len > sizeof( int ) || ( **p & 0x80 ) != 0 )
   d643e:	9b01      	ldr	r3, [sp, #4]
   d6440:	3b01      	subs	r3, #1
   d6442:	2b03      	cmp	r3, #3
   d6444:	d813      	bhi.n	d646e <mbedtls_asn1_get_int+0x40>
   d6446:	6823      	ldr	r3, [r4, #0]
   d6448:	f993 3000 	ldrsb.w	r3, [r3]
   d644c:	2b00      	cmp	r3, #0
   d644e:	db0e      	blt.n	d646e <mbedtls_asn1_get_int+0x40>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    *val = 0;
   d6450:	6028      	str	r0, [r5, #0]

    while( len-- > 0 )
   d6452:	9b01      	ldr	r3, [sp, #4]
   d6454:	1e5a      	subs	r2, r3, #1
   d6456:	9201      	str	r2, [sp, #4]
   d6458:	b15b      	cbz	r3, d6472 <mbedtls_asn1_get_int+0x44>
    {
        *val = ( *val << 8 ) | **p;
   d645a:	6823      	ldr	r3, [r4, #0]
   d645c:	682a      	ldr	r2, [r5, #0]
   d645e:	781b      	ldrb	r3, [r3, #0]
   d6460:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d6464:	602b      	str	r3, [r5, #0]
        (*p)++;
   d6466:	6823      	ldr	r3, [r4, #0]
   d6468:	3301      	adds	r3, #1
   d646a:	6023      	str	r3, [r4, #0]
    while( len-- > 0 )
   d646c:	e7f1      	b.n	d6452 <mbedtls_asn1_get_int+0x24>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
   d646e:	f06f 0063 	mvn.w	r0, #99	; 0x63
    }

    return( 0 );
}
   d6472:	b003      	add	sp, #12
   d6474:	bd30      	pop	{r4, r5, pc}

000d6476 <mbedtls_asn1_get_mpi>:

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
   d6476:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
   d6478:	2302      	movs	r3, #2
{
   d647a:	4615      	mov	r5, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
   d647c:	aa01      	add	r2, sp, #4
{
   d647e:	4604      	mov	r4, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
   d6480:	f7ff ffa8 	bl	d63d4 <mbedtls_asn1_get_tag>
   d6484:	b940      	cbnz	r0, d6498 <mbedtls_asn1_get_mpi+0x22>
        return( ret );

    ret = mbedtls_mpi_read_binary( X, *p, len );
   d6486:	9a01      	ldr	r2, [sp, #4]
   d6488:	6821      	ldr	r1, [r4, #0]
   d648a:	4628      	mov	r0, r5
   d648c:	f00a fbdd 	bl	e0c4a <mbedtls_mpi_read_binary>

    *p += len;
   d6490:	6823      	ldr	r3, [r4, #0]
   d6492:	9a01      	ldr	r2, [sp, #4]
   d6494:	4413      	add	r3, r2
   d6496:	6023      	str	r3, [r4, #0]

    return( ret );
}
   d6498:	b003      	add	sp, #12
   d649a:	bd30      	pop	{r4, r5, pc}

000d649c <mbedtls_asn1_get_bitstring>:
#endif /* MBEDTLS_BIGNUM_C */

int mbedtls_asn1_get_bitstring( unsigned char **p, const unsigned char *end,
                        mbedtls_asn1_bitstring *bs)
{
   d649c:	b570      	push	{r4, r5, r6, lr}
    int ret;

    /* Certificate type is a single byte bitstring */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &bs->len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
   d649e:	2303      	movs	r3, #3
{
   d64a0:	4605      	mov	r5, r0
   d64a2:	460e      	mov	r6, r1
    if( ( ret = mbedtls_asn1_get_tag( p, end, &bs->len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
   d64a4:	f7ff ff96 	bl	d63d4 <mbedtls_asn1_get_tag>
   d64a8:	b998      	cbnz	r0, d64d2 <mbedtls_asn1_get_bitstring+0x36>
        return( ret );

    /* Check length, subtract one for actual bit string length */
    if( bs->len < 1 )
   d64aa:	6813      	ldr	r3, [r2, #0]
   d64ac:	b193      	cbz	r3, d64d4 <mbedtls_asn1_get_bitstring+0x38>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    bs->len -= 1;
   d64ae:	3b01      	subs	r3, #1
   d64b0:	6013      	str	r3, [r2, #0]

    /* Get number of unused bits, ensure unused bits <= 7 */
    bs->unused_bits = **p;
   d64b2:	682b      	ldr	r3, [r5, #0]
   d64b4:	781b      	ldrb	r3, [r3, #0]
   d64b6:	7113      	strb	r3, [r2, #4]
    if( bs->unused_bits > 7 )
   d64b8:	2b07      	cmp	r3, #7
   d64ba:	d80e      	bhi.n	d64da <mbedtls_asn1_get_bitstring+0x3e>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
    (*p)++;
   d64bc:	682b      	ldr	r3, [r5, #0]
   d64be:	3301      	adds	r3, #1
   d64c0:	602b      	str	r3, [r5, #0]

    /* Get actual bitstring */
    bs->p = *p;
   d64c2:	6093      	str	r3, [r2, #8]
    *p += bs->len;
   d64c4:	6812      	ldr	r2, [r2, #0]
   d64c6:	4413      	add	r3, r2

    if( *p != end )
   d64c8:	42b3      	cmp	r3, r6
    *p += bs->len;
   d64ca:	602b      	str	r3, [r5, #0]
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   d64cc:	bf18      	it	ne
   d64ce:	f06f 0065 	mvnne.w	r0, #101	; 0x65

    return( 0 );
}
   d64d2:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   d64d4:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   d64d8:	e7fb      	b.n	d64d2 <mbedtls_asn1_get_bitstring+0x36>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
   d64da:	f06f 0063 	mvn.w	r0, #99	; 0x63
   d64de:	e7f8      	b.n	d64d2 <mbedtls_asn1_get_bitstring+0x36>

000d64e0 <mbedtls_asn1_get_bitstring_null>:
/*
 * Get a bit string without unused bits
 */
int mbedtls_asn1_get_bitstring_null( unsigned char **p, const unsigned char *end,
                             size_t *len )
{
   d64e0:	b538      	push	{r3, r4, r5, lr}
    int ret;

    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
   d64e2:	2303      	movs	r3, #3
{
   d64e4:	4604      	mov	r4, r0
   d64e6:	4615      	mov	r5, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
   d64e8:	f7ff ff74 	bl	d63d4 <mbedtls_asn1_get_tag>
   d64ec:	b958      	cbnz	r0, d6506 <mbedtls_asn1_get_bitstring_null+0x26>
        return( ret );

    if( (*len)-- < 2 || *(*p)++ != 0 )
   d64ee:	6813      	ldr	r3, [r2, #0]
   d64f0:	1e5a      	subs	r2, r3, #1
   d64f2:	2b01      	cmp	r3, #1
   d64f4:	602a      	str	r2, [r5, #0]
   d64f6:	d904      	bls.n	d6502 <mbedtls_asn1_get_bitstring_null+0x22>
   d64f8:	6823      	ldr	r3, [r4, #0]
   d64fa:	1c5a      	adds	r2, r3, #1
   d64fc:	6022      	str	r2, [r4, #0]
   d64fe:	781b      	ldrb	r3, [r3, #0]
   d6500:	b10b      	cbz	r3, d6506 <mbedtls_asn1_get_bitstring_null+0x26>
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
   d6502:	f06f 0067 	mvn.w	r0, #103	; 0x67

    return( 0 );
}
   d6506:	bd38      	pop	{r3, r4, r5, pc}

000d6508 <mbedtls_asn1_get_sequence_of>:
 */
int mbedtls_asn1_get_sequence_of( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_asn1_sequence *cur,
                          int tag)
{
   d6508:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d650c:	4614      	mov	r4, r2
   d650e:	4698      	mov	r8, r3
    int ret;
    size_t len;
    mbedtls_asn1_buf *buf;

    /* Get main sequence tag */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   d6510:	aa01      	add	r2, sp, #4
   d6512:	2330      	movs	r3, #48	; 0x30
{
   d6514:	4605      	mov	r5, r0
   d6516:	460f      	mov	r7, r1
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   d6518:	f7ff ff5c 	bl	d63d4 <mbedtls_asn1_get_tag>
   d651c:	4606      	mov	r6, r0
   d651e:	bb30      	cbnz	r0, d656e <mbedtls_asn1_get_sequence_of+0x66>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( *p + len != end )
   d6520:	682b      	ldr	r3, [r5, #0]
   d6522:	9a01      	ldr	r2, [sp, #4]
   d6524:	4413      	add	r3, r2
   d6526:	429f      	cmp	r7, r3
   d6528:	d11f      	bne.n	d656a <mbedtls_asn1_get_sequence_of+0x62>
    while( *p < end )
    {
        buf = &(cur->buf);
        buf->tag = **p;

        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
   d652a:	1d22      	adds	r2, r4, #4
    while( *p < end )
   d652c:	682b      	ldr	r3, [r5, #0]
   d652e:	42bb      	cmp	r3, r7
   d6530:	d216      	bcs.n	d6560 <mbedtls_asn1_get_sequence_of+0x58>
        buf->tag = **p;
   d6532:	781b      	ldrb	r3, [r3, #0]
   d6534:	6023      	str	r3, [r4, #0]
        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
   d6536:	4639      	mov	r1, r7
   d6538:	4643      	mov	r3, r8
   d653a:	4628      	mov	r0, r5
   d653c:	f7ff ff4a 	bl	d63d4 <mbedtls_asn1_get_tag>
   d6540:	b9c8      	cbnz	r0, d6576 <mbedtls_asn1_get_sequence_of+0x6e>
            return( ret );

        buf->p = *p;
   d6542:	6829      	ldr	r1, [r5, #0]
        *p += buf->len;
   d6544:	6863      	ldr	r3, [r4, #4]
        buf->p = *p;
   d6546:	60a1      	str	r1, [r4, #8]
        *p += buf->len;
   d6548:	4419      	add	r1, r3

        /* Allocate and assign next pointer */
        if( *p < end )
   d654a:	42b9      	cmp	r1, r7
        *p += buf->len;
   d654c:	6029      	str	r1, [r5, #0]
        if( *p < end )
   d654e:	d2ed      	bcs.n	d652c <mbedtls_asn1_get_sequence_of+0x24>
        {
            cur->next = (mbedtls_asn1_sequence*)mbedtls_calloc( 1,
   d6550:	2110      	movs	r1, #16
   d6552:	2001      	movs	r0, #1
   d6554:	f012 f940 	bl	e87d8 <calloc>
   d6558:	60e0      	str	r0, [r4, #12]
                                            sizeof( mbedtls_asn1_sequence ) );

            if( cur->next == NULL )
   d655a:	b170      	cbz	r0, d657a <mbedtls_asn1_get_sequence_of+0x72>
   d655c:	4604      	mov	r4, r0
   d655e:	e7e4      	b.n	d652a <mbedtls_asn1_get_sequence_of+0x22>
            cur = cur->next;
        }
    }

    /* Set final sequence entry's next pointer to NULL */
    cur->next = NULL;
   d6560:	2300      	movs	r3, #0
   d6562:	60e3      	str	r3, [r4, #12]

    if( *p != end )
   d6564:	682b      	ldr	r3, [r5, #0]
   d6566:	42bb      	cmp	r3, r7
   d6568:	d001      	beq.n	d656e <mbedtls_asn1_get_sequence_of+0x66>
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   d656a:	f06f 0665 	mvn.w	r6, #101	; 0x65

    return( 0 );
}
   d656e:	4630      	mov	r0, r6
   d6570:	b002      	add	sp, #8
   d6572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
   d6576:	4606      	mov	r6, r0
   d6578:	e7f9      	b.n	d656e <mbedtls_asn1_get_sequence_of+0x66>
                return( MBEDTLS_ERR_ASN1_ALLOC_FAILED );
   d657a:	f06f 0669 	mvn.w	r6, #105	; 0x69
   d657e:	e7f6      	b.n	d656e <mbedtls_asn1_get_sequence_of+0x66>

000d6580 <mbedtls_asn1_get_alg>:

int mbedtls_asn1_get_alg( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_asn1_buf *alg, mbedtls_asn1_buf *params )
{
   d6580:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d6584:	4690      	mov	r8, r2
   d6586:	461f      	mov	r7, r3
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   d6588:	aa01      	add	r2, sp, #4
   d658a:	2330      	movs	r3, #48	; 0x30
{
   d658c:	4605      	mov	r5, r0
   d658e:	460e      	mov	r6, r1
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   d6590:	f7ff ff20 	bl	d63d4 <mbedtls_asn1_get_tag>
   d6594:	4604      	mov	r4, r0
   d6596:	b9f0      	cbnz	r0, d65d6 <mbedtls_asn1_get_alg+0x56>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( ( end - *p ) < 1 )
   d6598:	682b      	ldr	r3, [r5, #0]
   d659a:	1af6      	subs	r6, r6, r3
   d659c:	2e00      	cmp	r6, #0
   d659e:	dd37      	ble.n	d6610 <mbedtls_asn1_get_alg+0x90>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    alg->tag = **p;
   d65a0:	4642      	mov	r2, r8
   d65a2:	781b      	ldrb	r3, [r3, #0]
   d65a4:	f842 3b04 	str.w	r3, [r2], #4
    end = *p + len;
   d65a8:	9901      	ldr	r1, [sp, #4]
   d65aa:	682e      	ldr	r6, [r5, #0]
   d65ac:	440e      	add	r6, r1

    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
   d65ae:	2306      	movs	r3, #6
   d65b0:	4631      	mov	r1, r6
   d65b2:	4628      	mov	r0, r5
   d65b4:	f7ff ff0e 	bl	d63d4 <mbedtls_asn1_get_tag>
   d65b8:	4604      	mov	r4, r0
   d65ba:	b960      	cbnz	r0, d65d6 <mbedtls_asn1_get_alg+0x56>
        return( ret );

    alg->p = *p;
   d65bc:	682b      	ldr	r3, [r5, #0]
    *p += alg->len;
   d65be:	f8d8 2004 	ldr.w	r2, [r8, #4]
    alg->p = *p;
   d65c2:	f8c8 3008 	str.w	r3, [r8, #8]
    *p += alg->len;
   d65c6:	1899      	adds	r1, r3, r2

    if( *p == end )
   d65c8:	42b1      	cmp	r1, r6
    *p += alg->len;
   d65ca:	6029      	str	r1, [r5, #0]
    if( *p == end )
   d65cc:	d107      	bne.n	d65de <mbedtls_asn1_get_alg+0x5e>
    {
        mbedtls_platform_zeroize( params, sizeof(mbedtls_asn1_buf) );
   d65ce:	210c      	movs	r1, #12
   d65d0:	4638      	mov	r0, r7
   d65d2:	f004 fd03 	bl	dafdc <mbedtls_platform_zeroize>

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
   d65d6:	4620      	mov	r0, r4
   d65d8:	b002      	add	sp, #8
   d65da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    params->tag = **p;
   d65de:	5c9b      	ldrb	r3, [r3, r2]
   d65e0:	463a      	mov	r2, r7
    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
   d65e2:	4631      	mov	r1, r6
    params->tag = **p;
   d65e4:	f842 3b04 	str.w	r3, [r2], #4
    (*p)++;
   d65e8:	682b      	ldr	r3, [r5, #0]
   d65ea:	3301      	adds	r3, #1
   d65ec:	602b      	str	r3, [r5, #0]
    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
   d65ee:	4628      	mov	r0, r5
   d65f0:	f7ff fea4 	bl	d633c <mbedtls_asn1_get_len>
   d65f4:	4604      	mov	r4, r0
   d65f6:	2800      	cmp	r0, #0
   d65f8:	d1ed      	bne.n	d65d6 <mbedtls_asn1_get_alg+0x56>
    params->p = *p;
   d65fa:	682b      	ldr	r3, [r5, #0]
    *p += params->len;
   d65fc:	687a      	ldr	r2, [r7, #4]
    params->p = *p;
   d65fe:	60bb      	str	r3, [r7, #8]
    *p += params->len;
   d6600:	4413      	add	r3, r2
    if( *p != end )
   d6602:	42b3      	cmp	r3, r6
    *p += params->len;
   d6604:	602b      	str	r3, [r5, #0]
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   d6606:	bf0c      	ite	eq
   d6608:	4604      	moveq	r4, r0
   d660a:	f06f 0465 	mvnne.w	r4, #101	; 0x65
   d660e:	e7e2      	b.n	d65d6 <mbedtls_asn1_get_alg+0x56>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   d6610:	f06f 045f 	mvn.w	r4, #95	; 0x5f
   d6614:	e7df      	b.n	d65d6 <mbedtls_asn1_get_alg+0x56>

000d6616 <mbedtls_asn1_get_alg_null>:

int mbedtls_asn1_get_alg_null( unsigned char **p,
                       const unsigned char *end,
                       mbedtls_asn1_buf *alg )
{
   d6616:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    int ret;
    mbedtls_asn1_buf params;

    memset( &params, 0, sizeof(mbedtls_asn1_buf) );
   d6618:	2300      	movs	r3, #0
   d661a:	e9cd 3301 	strd	r3, r3, [sp, #4]
   d661e:	9303      	str	r3, [sp, #12]

    if( ( ret = mbedtls_asn1_get_alg( p, end, alg, &params ) ) != 0 )
   d6620:	ab01      	add	r3, sp, #4
   d6622:	f7ff ffad 	bl	d6580 <mbedtls_asn1_get_alg>
   d6626:	b940      	cbnz	r0, d663a <mbedtls_asn1_get_alg_null+0x24>
        return( ret );

    if( ( params.tag != MBEDTLS_ASN1_NULL && params.tag != 0 ) || params.len != 0 )
   d6628:	9b01      	ldr	r3, [sp, #4]
   d662a:	2b05      	cmp	r3, #5
   d662c:	d000      	beq.n	d6630 <mbedtls_asn1_get_alg_null+0x1a>
   d662e:	b93b      	cbnz	r3, d6640 <mbedtls_asn1_get_alg_null+0x2a>
   d6630:	9b02      	ldr	r3, [sp, #8]
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
   d6632:	2b00      	cmp	r3, #0
   d6634:	bf18      	it	ne
   d6636:	f06f 0067 	mvnne.w	r0, #103	; 0x67

    return( 0 );
}
   d663a:	b005      	add	sp, #20
   d663c:	f85d fb04 	ldr.w	pc, [sp], #4
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
   d6640:	f06f 0067 	mvn.w	r0, #103	; 0x67
   d6644:	e7f9      	b.n	d663a <mbedtls_asn1_get_alg_null+0x24>
	...

000d6648 <_ZL14x509_parse_intPPhjPi>:
    }
}

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
    *res = 0;
   d6648:	2300      	movs	r3, #0
{
   d664a:	b530      	push	{r4, r5, lr}
    *res = 0;
   d664c:	6013      	str	r3, [r2, #0]
    for( ; n > 0; --n )
    {
        if( ( **p < '0') || ( **p > '9' ) )
            return ( MBEDTLS_ERR_X509_INVALID_DATE );

        *res *= 10;
   d664e:	250a      	movs	r5, #10
        if( ( **p < '0') || ( **p > '9' ) )
   d6650:	6803      	ldr	r3, [r0, #0]
   d6652:	781b      	ldrb	r3, [r3, #0]
   d6654:	3b30      	subs	r3, #48	; 0x30
   d6656:	2b09      	cmp	r3, #9
   d6658:	d80f      	bhi.n	d667a <_ZL14x509_parse_intPPhjPi+0x32>
        *res *= 10;
   d665a:	6813      	ldr	r3, [r2, #0]
   d665c:	436b      	muls	r3, r5
   d665e:	6013      	str	r3, [r2, #0]
        *res += ( *(*p)++ - '0' );
   d6660:	6803      	ldr	r3, [r0, #0]
   d6662:	1c5c      	adds	r4, r3, #1
   d6664:	6004      	str	r4, [r0, #0]
   d6666:	781b      	ldrb	r3, [r3, #0]
   d6668:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
   d666c:	6813      	ldr	r3, [r2, #0]
    for( ; n > 0; --n )
   d666e:	3901      	subs	r1, #1
        *res += ( *(*p)++ - '0' );
   d6670:	4423      	add	r3, r4
   d6672:	6013      	str	r3, [r2, #0]
    for( ; n > 0; --n )
   d6674:	d1ec      	bne.n	d6650 <_ZL14x509_parse_intPPhjPi+0x8>
    }

    return( 0 );
   d6676:	4608      	mov	r0, r1
}
   d6678:	bd30      	pop	{r4, r5, pc}
            return ( MBEDTLS_ERR_X509_INVALID_DATE );
   d667a:	4801      	ldr	r0, [pc, #4]	; (d6680 <_ZL14x509_parse_intPPhjPi+0x38>)
   d667c:	e7fc      	b.n	d6678 <_ZL14x509_parse_intPPhjPi+0x30>
   d667e:	bf00      	nop
   d6680:	ffffdc00 	.word	0xffffdc00

000d6684 <mbedtls_x509_get_serial>:
{
   d6684:	b538      	push	{r3, r4, r5, lr}
    if( ( end - *p ) < 1 )
   d6686:	6803      	ldr	r3, [r0, #0]
{
   d6688:	4615      	mov	r5, r2
    if( ( end - *p ) < 1 )
   d668a:	1aca      	subs	r2, r1, r3
   d668c:	2a00      	cmp	r2, #0
{
   d668e:	4604      	mov	r4, r0
    if( ( end - *p ) < 1 )
   d6690:	dd16      	ble.n	d66c0 <mbedtls_x509_get_serial+0x3c>
    if( **p != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_PRIMITIVE | 2 ) &&
   d6692:	781a      	ldrb	r2, [r3, #0]
   d6694:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   d6698:	2a02      	cmp	r2, #2
   d669a:	d113      	bne.n	d66c4 <mbedtls_x509_get_serial+0x40>
    serial->tag = *(*p)++;
   d669c:	1c5a      	adds	r2, r3, #1
   d669e:	6002      	str	r2, [r0, #0]
   d66a0:	462a      	mov	r2, r5
   d66a2:	781b      	ldrb	r3, [r3, #0]
   d66a4:	f842 3b04 	str.w	r3, [r2], #4
    if( ( ret = mbedtls_asn1_get_len( p, end, &serial->len ) ) != 0 )
   d66a8:	f7ff fe48 	bl	d633c <mbedtls_asn1_get_len>
   d66ac:	b110      	cbz	r0, d66b4 <mbedtls_x509_get_serial+0x30>
        return( MBEDTLS_ERR_X509_INVALID_SERIAL + ret );
   d66ae:	f5a0 500a 	sub.w	r0, r0, #8832	; 0x2280
}
   d66b2:	bd38      	pop	{r3, r4, r5, pc}
    serial->p = *p;
   d66b4:	6823      	ldr	r3, [r4, #0]
    *p += serial->len;
   d66b6:	686a      	ldr	r2, [r5, #4]
    serial->p = *p;
   d66b8:	60ab      	str	r3, [r5, #8]
    *p += serial->len;
   d66ba:	4413      	add	r3, r2
   d66bc:	6023      	str	r3, [r4, #0]
    return( 0 );
   d66be:	e7f8      	b.n	d66b2 <mbedtls_x509_get_serial+0x2e>
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   d66c0:	4801      	ldr	r0, [pc, #4]	; (d66c8 <mbedtls_x509_get_serial+0x44>)
   d66c2:	e7f6      	b.n	d66b2 <mbedtls_x509_get_serial+0x2e>
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
   d66c4:	4801      	ldr	r0, [pc, #4]	; (d66cc <mbedtls_x509_get_serial+0x48>)
   d66c6:	e7f4      	b.n	d66b2 <mbedtls_x509_get_serial+0x2e>
   d66c8:	ffffdd20 	.word	0xffffdd20
   d66cc:	ffffdd1e 	.word	0xffffdd1e

000d66d0 <mbedtls_x509_get_alg_null>:
{
   d66d0:	b508      	push	{r3, lr}
    if( ( ret = mbedtls_asn1_get_alg_null( p, end, alg ) ) != 0 )
   d66d2:	f7ff ffa0 	bl	d6616 <mbedtls_asn1_get_alg_null>
   d66d6:	b108      	cbz	r0, d66dc <mbedtls_x509_get_alg_null+0xc>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );
   d66d8:	f5a0 500c 	sub.w	r0, r0, #8960	; 0x2300
}
   d66dc:	bd08      	pop	{r3, pc}

000d66de <mbedtls_x509_get_alg>:
{
   d66de:	b508      	push	{r3, lr}
    if( ( ret = mbedtls_asn1_get_alg( p, end, alg, params ) ) != 0 )
   d66e0:	f7ff ff4e 	bl	d6580 <mbedtls_asn1_get_alg>
   d66e4:	b108      	cbz	r0, d66ea <mbedtls_x509_get_alg+0xc>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );
   d66e6:	f5a0 500c 	sub.w	r0, r0, #8960	; 0x2300
}
   d66ea:	bd08      	pop	{r3, pc}

000d66ec <mbedtls_x509_get_rsassa_pss_params>:
{
   d66ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d66f0:	461d      	mov	r5, r3
    *md_alg = MBEDTLS_MD_SHA1;
   d66f2:	2304      	movs	r3, #4
   d66f4:	700b      	strb	r3, [r1, #0]
    *mgf_md = MBEDTLS_MD_SHA1;
   d66f6:	7013      	strb	r3, [r2, #0]
    *salt_len = 20;
   d66f8:	2314      	movs	r3, #20
   d66fa:	602b      	str	r3, [r5, #0]
    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
   d66fc:	6803      	ldr	r3, [r0, #0]
   d66fe:	2b30      	cmp	r3, #48	; 0x30
{
   d6700:	b08e      	sub	sp, #56	; 0x38
   d6702:	4688      	mov	r8, r1
   d6704:	4616      	mov	r6, r2
    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
   d6706:	d14e      	bne.n	d67a6 <mbedtls_x509_get_rsassa_pss_params+0xba>
    p = (unsigned char *) params->p;
   d6708:	6883      	ldr	r3, [r0, #8]
    end = p + params->len;
   d670a:	6844      	ldr	r4, [r0, #4]
    p = (unsigned char *) params->p;
   d670c:	9301      	str	r3, [sp, #4]
    end = p + params->len;
   d670e:	441c      	add	r4, r3
    if( p == end )
   d6710:	42a3      	cmp	r3, r4
   d6712:	d103      	bne.n	d671c <mbedtls_x509_get_rsassa_pss_params+0x30>
        return( 0 );
   d6714:	2000      	movs	r0, #0
}
   d6716:	b00e      	add	sp, #56	; 0x38
   d6718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   d671c:	23a0      	movs	r3, #160	; 0xa0
   d671e:	aa02      	add	r2, sp, #8
   d6720:	4621      	mov	r1, r4
   d6722:	a801      	add	r0, sp, #4
   d6724:	f7ff fe56 	bl	d63d4 <mbedtls_asn1_get_tag>
   d6728:	b9b0      	cbnz	r0, d6758 <mbedtls_x509_get_rsassa_pss_params+0x6c>
        end2 = p + len;
   d672a:	e9dd 7301 	ldrd	r7, r3, [sp, #4]
   d672e:	441f      	add	r7, r3
        if( ( ret = mbedtls_x509_get_alg_null( &p, end2, &alg_id ) ) != 0 )
   d6730:	aa05      	add	r2, sp, #20
   d6732:	4639      	mov	r1, r7
   d6734:	a801      	add	r0, sp, #4
   d6736:	f7ff ffcb 	bl	d66d0 <mbedtls_x509_get_alg_null>
   d673a:	2800      	cmp	r0, #0
   d673c:	d1eb      	bne.n	d6716 <mbedtls_x509_get_rsassa_pss_params+0x2a>
        if( ( ret = mbedtls_oid_get_md_alg( &alg_id, md_alg ) ) != 0 )
   d673e:	4641      	mov	r1, r8
   d6740:	a805      	add	r0, sp, #20
   d6742:	f003 fc05 	bl	d9f50 <mbedtls_oid_get_md_alg>
   d6746:	b110      	cbz	r0, d674e <mbedtls_x509_get_rsassa_pss_params+0x62>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );
   d6748:	f5a0 500c 	sub.w	r0, r0, #8960	; 0x2300
   d674c:	e7e3      	b.n	d6716 <mbedtls_x509_get_rsassa_pss_params+0x2a>
        if( p != end2 )
   d674e:	9b01      	ldr	r3, [sp, #4]
   d6750:	42bb      	cmp	r3, r7
   d6752:	d004      	beq.n	d675e <mbedtls_x509_get_rsassa_pss_params+0x72>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   d6754:	4853      	ldr	r0, [pc, #332]	; (d68a4 <mbedtls_x509_get_rsassa_pss_params+0x1b8>)
   d6756:	e7de      	b.n	d6716 <mbedtls_x509_get_rsassa_pss_params+0x2a>
    else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   d6758:	f110 0f62 	cmn.w	r0, #98	; 0x62
   d675c:	d1f4      	bne.n	d6748 <mbedtls_x509_get_rsassa_pss_params+0x5c>
    if( p == end )
   d675e:	9b01      	ldr	r3, [sp, #4]
   d6760:	42a3      	cmp	r3, r4
   d6762:	d0d7      	beq.n	d6714 <mbedtls_x509_get_rsassa_pss_params+0x28>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   d6764:	23a1      	movs	r3, #161	; 0xa1
   d6766:	aa02      	add	r2, sp, #8
   d6768:	4621      	mov	r1, r4
   d676a:	a801      	add	r0, sp, #4
   d676c:	f7ff fe32 	bl	d63d4 <mbedtls_asn1_get_tag>
   d6770:	2800      	cmp	r0, #0
   d6772:	f040 8087 	bne.w	d6884 <mbedtls_x509_get_rsassa_pss_params+0x198>
        end2 = p + len;
   d6776:	e9dd 7301 	ldrd	r7, r3, [sp, #4]
   d677a:	441f      	add	r7, r3
        if( ( ret = mbedtls_x509_get_alg( &p, end2, &alg_id, &alg_params ) ) != 0 )
   d677c:	aa05      	add	r2, sp, #20
   d677e:	ab08      	add	r3, sp, #32
   d6780:	4639      	mov	r1, r7
   d6782:	a801      	add	r0, sp, #4
   d6784:	f7ff ffab 	bl	d66de <mbedtls_x509_get_alg>
   d6788:	2800      	cmp	r0, #0
   d678a:	d1c4      	bne.n	d6716 <mbedtls_x509_get_rsassa_pss_params+0x2a>
        if( MBEDTLS_OID_CMP( MBEDTLS_OID_MGF1, &alg_id ) != 0 )
   d678c:	9a06      	ldr	r2, [sp, #24]
   d678e:	2a09      	cmp	r2, #9
   d6790:	f040 8086 	bne.w	d68a0 <mbedtls_x509_get_rsassa_pss_params+0x1b4>
   d6794:	9907      	ldr	r1, [sp, #28]
   d6796:	4844      	ldr	r0, [pc, #272]	; (d68a8 <mbedtls_x509_get_rsassa_pss_params+0x1bc>)
   d6798:	f012 f88a 	bl	e88b0 <memcmp>
   d679c:	2800      	cmp	r0, #0
   d679e:	d17f      	bne.n	d68a0 <mbedtls_x509_get_rsassa_pss_params+0x1b4>
    if( alg->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
   d67a0:	9b08      	ldr	r3, [sp, #32]
   d67a2:	2b30      	cmp	r3, #48	; 0x30
   d67a4:	d001      	beq.n	d67aa <mbedtls_x509_get_rsassa_pss_params+0xbe>
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
   d67a6:	4841      	ldr	r0, [pc, #260]	; (d68ac <mbedtls_x509_get_rsassa_pss_params+0x1c0>)
   d67a8:	e7b5      	b.n	d6716 <mbedtls_x509_get_rsassa_pss_params+0x2a>
    p = (unsigned char *) alg->p;
   d67aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    end = p + alg->len;
   d67ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
    p = (unsigned char *) alg->p;
   d67ae:	9303      	str	r3, [sp, #12]
    end = p + alg->len;
   d67b0:	eb03 0802 	add.w	r8, r3, r2
    if( p >= end )
   d67b4:	4543      	cmp	r3, r8
   d67b6:	d263      	bcs.n	d6880 <mbedtls_x509_get_rsassa_pss_params+0x194>
    md_oid.tag = *p;
   d67b8:	781b      	ldrb	r3, [r3, #0]
   d67ba:	930b      	str	r3, [sp, #44]	; 0x2c
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &md_oid.len, MBEDTLS_ASN1_OID ) ) != 0 )
   d67bc:	aa0c      	add	r2, sp, #48	; 0x30
   d67be:	2306      	movs	r3, #6
   d67c0:	4641      	mov	r1, r8
   d67c2:	a803      	add	r0, sp, #12
   d67c4:	f7ff fe06 	bl	d63d4 <mbedtls_asn1_get_tag>
   d67c8:	b118      	cbz	r0, d67d2 <mbedtls_x509_get_rsassa_pss_params+0xe6>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );
   d67ca:	f5a0 500c 	sub.w	r0, r0, #8960	; 0x2300
        if( ( ret = x509_get_hash_alg( &alg_params, mgf_md ) ) != 0 )
   d67ce:	b1d0      	cbz	r0, d6806 <mbedtls_x509_get_rsassa_pss_params+0x11a>
   d67d0:	e7a1      	b.n	d6716 <mbedtls_x509_get_rsassa_pss_params+0x2a>
    md_oid.p = p;
   d67d2:	9b03      	ldr	r3, [sp, #12]
    p += md_oid.len;
   d67d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    md_oid.p = p;
   d67d6:	930d      	str	r3, [sp, #52]	; 0x34
    if( ( ret = mbedtls_oid_get_md_alg( &md_oid, md_alg ) ) != 0 )
   d67d8:	4631      	mov	r1, r6
    p += md_oid.len;
   d67da:	4413      	add	r3, r2
    if( ( ret = mbedtls_oid_get_md_alg( &md_oid, md_alg ) ) != 0 )
   d67dc:	a80b      	add	r0, sp, #44	; 0x2c
    p += md_oid.len;
   d67de:	9303      	str	r3, [sp, #12]
    if( ( ret = mbedtls_oid_get_md_alg( &md_oid, md_alg ) ) != 0 )
   d67e0:	f003 fbb6 	bl	d9f50 <mbedtls_oid_get_md_alg>
   d67e4:	2800      	cmp	r0, #0
   d67e6:	d1f0      	bne.n	d67ca <mbedtls_x509_get_rsassa_pss_params+0xde>
    if( p == end )
   d67e8:	9b03      	ldr	r3, [sp, #12]
   d67ea:	4598      	cmp	r8, r3
   d67ec:	d00b      	beq.n	d6806 <mbedtls_x509_get_rsassa_pss_params+0x11a>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_NULL ) ) != 0 || len != 0 )
   d67ee:	2305      	movs	r3, #5
   d67f0:	aa04      	add	r2, sp, #16
   d67f2:	4641      	mov	r1, r8
   d67f4:	a803      	add	r0, sp, #12
   d67f6:	f7ff fded 	bl	d63d4 <mbedtls_asn1_get_tag>
   d67fa:	9b04      	ldr	r3, [sp, #16]
   d67fc:	4303      	orrs	r3, r0
   d67fe:	d1e4      	bne.n	d67ca <mbedtls_x509_get_rsassa_pss_params+0xde>
    if( p != end )
   d6800:	9b03      	ldr	r3, [sp, #12]
   d6802:	4598      	cmp	r8, r3
   d6804:	d1a6      	bne.n	d6754 <mbedtls_x509_get_rsassa_pss_params+0x68>
        if( p != end2 )
   d6806:	9b01      	ldr	r3, [sp, #4]
   d6808:	42bb      	cmp	r3, r7
   d680a:	d1a3      	bne.n	d6754 <mbedtls_x509_get_rsassa_pss_params+0x68>
    if( p == end )
   d680c:	9b01      	ldr	r3, [sp, #4]
   d680e:	42a3      	cmp	r3, r4
   d6810:	d080      	beq.n	d6714 <mbedtls_x509_get_rsassa_pss_params+0x28>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   d6812:	23a2      	movs	r3, #162	; 0xa2
   d6814:	aa02      	add	r2, sp, #8
   d6816:	4621      	mov	r1, r4
   d6818:	a801      	add	r0, sp, #4
   d681a:	f7ff fddb 	bl	d63d4 <mbedtls_asn1_get_tag>
   d681e:	2800      	cmp	r0, #0
   d6820:	d134      	bne.n	d688c <mbedtls_x509_get_rsassa_pss_params+0x1a0>
        end2 = p + len;
   d6822:	e9dd 6101 	ldrd	r6, r1, [sp, #4]
   d6826:	440e      	add	r6, r1
        if( ( ret = mbedtls_asn1_get_int( &p, end2, salt_len ) ) != 0 )
   d6828:	462a      	mov	r2, r5
   d682a:	4631      	mov	r1, r6
   d682c:	a801      	add	r0, sp, #4
   d682e:	f7ff fdfe 	bl	d642e <mbedtls_asn1_get_int>
   d6832:	2800      	cmp	r0, #0
   d6834:	d188      	bne.n	d6748 <mbedtls_x509_get_rsassa_pss_params+0x5c>
        if( p != end2 )
   d6836:	9b01      	ldr	r3, [sp, #4]
   d6838:	42b3      	cmp	r3, r6
   d683a:	d18b      	bne.n	d6754 <mbedtls_x509_get_rsassa_pss_params+0x68>
    if( p == end )
   d683c:	9b01      	ldr	r3, [sp, #4]
   d683e:	42a3      	cmp	r3, r4
   d6840:	f43f af68 	beq.w	d6714 <mbedtls_x509_get_rsassa_pss_params+0x28>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   d6844:	23a3      	movs	r3, #163	; 0xa3
   d6846:	aa02      	add	r2, sp, #8
   d6848:	4621      	mov	r1, r4
   d684a:	a801      	add	r0, sp, #4
   d684c:	f7ff fdc2 	bl	d63d4 <mbedtls_asn1_get_tag>
   d6850:	bb10      	cbnz	r0, d6898 <mbedtls_x509_get_rsassa_pss_params+0x1ac>
        end2 = p + len;
   d6852:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
   d6856:	440d      	add	r5, r1
        if( ( ret = mbedtls_asn1_get_int( &p, end2, &trailer_field ) ) != 0 )
   d6858:	aa0b      	add	r2, sp, #44	; 0x2c
   d685a:	4629      	mov	r1, r5
   d685c:	a801      	add	r0, sp, #4
   d685e:	f7ff fde6 	bl	d642e <mbedtls_asn1_get_int>
   d6862:	2800      	cmp	r0, #0
   d6864:	f47f af70 	bne.w	d6748 <mbedtls_x509_get_rsassa_pss_params+0x5c>
        if( p != end2 )
   d6868:	9b01      	ldr	r3, [sp, #4]
   d686a:	42ab      	cmp	r3, r5
   d686c:	f47f af72 	bne.w	d6754 <mbedtls_x509_get_rsassa_pss_params+0x68>
        if( trailer_field != 1 )
   d6870:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d6872:	2b01      	cmp	r3, #1
   d6874:	d10e      	bne.n	d6894 <mbedtls_x509_get_rsassa_pss_params+0x1a8>
    if( p != end )
   d6876:	9b01      	ldr	r3, [sp, #4]
   d6878:	42a3      	cmp	r3, r4
   d687a:	f43f af4b 	beq.w	d6714 <mbedtls_x509_get_rsassa_pss_params+0x28>
   d687e:	e769      	b.n	d6754 <mbedtls_x509_get_rsassa_pss_params+0x68>
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   d6880:	480b      	ldr	r0, [pc, #44]	; (d68b0 <mbedtls_x509_get_rsassa_pss_params+0x1c4>)
   d6882:	e748      	b.n	d6716 <mbedtls_x509_get_rsassa_pss_params+0x2a>
    else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   d6884:	f110 0f62 	cmn.w	r0, #98	; 0x62
   d6888:	d0c0      	beq.n	d680c <mbedtls_x509_get_rsassa_pss_params+0x120>
   d688a:	e75d      	b.n	d6748 <mbedtls_x509_get_rsassa_pss_params+0x5c>
    else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   d688c:	f110 0f62 	cmn.w	r0, #98	; 0x62
   d6890:	d0d4      	beq.n	d683c <mbedtls_x509_get_rsassa_pss_params+0x150>
   d6892:	e759      	b.n	d6748 <mbedtls_x509_get_rsassa_pss_params+0x5c>
            return( MBEDTLS_ERR_X509_INVALID_ALG );
   d6894:	4807      	ldr	r0, [pc, #28]	; (d68b4 <mbedtls_x509_get_rsassa_pss_params+0x1c8>)
   d6896:	e73e      	b.n	d6716 <mbedtls_x509_get_rsassa_pss_params+0x2a>
    else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   d6898:	f110 0f62 	cmn.w	r0, #98	; 0x62
   d689c:	d0eb      	beq.n	d6876 <mbedtls_x509_get_rsassa_pss_params+0x18a>
   d689e:	e753      	b.n	d6748 <mbedtls_x509_get_rsassa_pss_params+0x5c>
                    MBEDTLS_ERR_OID_NOT_FOUND );
   d68a0:	4805      	ldr	r0, [pc, #20]	; (d68b8 <mbedtls_x509_get_rsassa_pss_params+0x1cc>)
   d68a2:	e738      	b.n	d6716 <mbedtls_x509_get_rsassa_pss_params+0x2a>
   d68a4:	ffffdc9a 	.word	0xffffdc9a
   d68a8:	000eb2e0 	.word	0x000eb2e0
   d68ac:	ffffdc9e 	.word	0xffffdc9e
   d68b0:	ffffdca0 	.word	0xffffdca0
   d68b4:	ffffdd00 	.word	0xffffdd00
   d68b8:	ffffdf52 	.word	0xffffdf52

000d68bc <mbedtls_x509_get_name>:
{
   d68bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
   d68c0:	f8df 80fc 	ldr.w	r8, [pc, #252]	; d69c0 <mbedtls_x509_get_name+0x104>
{
   d68c4:	4604      	mov	r4, r0
   d68c6:	460f      	mov	r7, r1
   d68c8:	4691      	mov	r9, r2
        if( ( ret = mbedtls_asn1_get_tag( p, end, &set_len,
   d68ca:	2331      	movs	r3, #49	; 0x31
   d68cc:	466a      	mov	r2, sp
   d68ce:	4639      	mov	r1, r7
   d68d0:	4620      	mov	r0, r4
   d68d2:	f7ff fd7f 	bl	d63d4 <mbedtls_asn1_get_tag>
   d68d6:	b120      	cbz	r0, d68e2 <mbedtls_x509_get_name+0x26>
            return( MBEDTLS_ERR_X509_INVALID_NAME + ret );
   d68d8:	f5a0 500e 	sub.w	r0, r0, #9088	; 0x2380
}
   d68dc:	b003      	add	sp, #12
   d68de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        end_set  = *p + set_len;
   d68e2:	6826      	ldr	r6, [r4, #0]
   d68e4:	9b00      	ldr	r3, [sp, #0]
   d68e6:	464d      	mov	r5, r9
   d68e8:	441e      	add	r6, r3
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   d68ea:	2330      	movs	r3, #48	; 0x30
   d68ec:	aa01      	add	r2, sp, #4
   d68ee:	4631      	mov	r1, r6
   d68f0:	4620      	mov	r0, r4
   d68f2:	f7ff fd6f 	bl	d63d4 <mbedtls_asn1_get_tag>
   d68f6:	b188      	cbz	r0, d691c <mbedtls_x509_get_name+0x60>
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );
   d68f8:	f5a0 500e 	sub.w	r0, r0, #9088	; 0x2380
            if( ( ret = x509_get_attr_type_value( p, end_set, cur ) ) != 0 )
   d68fc:	2800      	cmp	r0, #0
   d68fe:	d1ed      	bne.n	d68dc <mbedtls_x509_get_name+0x20>
            if( *p == end_set )
   d6900:	6823      	ldr	r3, [r4, #0]
   d6902:	42b3      	cmp	r3, r6
   d6904:	d046      	beq.n	d6994 <mbedtls_x509_get_name+0xd8>
            cur->next_merged = 1;
   d6906:	2001      	movs	r0, #1
   d6908:	7728      	strb	r0, [r5, #28]
            cur->next = (mbedtls_asn1_named_data *)mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );
   d690a:	2120      	movs	r1, #32
   d690c:	f011 ff64 	bl	e87d8 <calloc>
   d6910:	61a8      	str	r0, [r5, #24]
            if( cur->next == NULL )
   d6912:	b908      	cbnz	r0, d6918 <mbedtls_x509_get_name+0x5c>
                return( MBEDTLS_ERR_X509_ALLOC_FAILED );
   d6914:	4826      	ldr	r0, [pc, #152]	; (d69b0 <mbedtls_x509_get_name+0xf4>)
   d6916:	e7e1      	b.n	d68dc <mbedtls_x509_get_name+0x20>
   d6918:	4605      	mov	r5, r0
   d691a:	e7e6      	b.n	d68ea <mbedtls_x509_get_name+0x2e>
    end = *p + len;
   d691c:	9a01      	ldr	r2, [sp, #4]
   d691e:	6823      	ldr	r3, [r4, #0]
    if( ( end - *p ) < 1 )
   d6920:	2a00      	cmp	r2, #0
    end = *p + len;
   d6922:	eb03 0902 	add.w	r9, r3, r2
    if( ( end - *p ) < 1 )
   d6926:	dc01      	bgt.n	d692c <mbedtls_x509_get_name+0x70>
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   d6928:	4822      	ldr	r0, [pc, #136]	; (d69b4 <mbedtls_x509_get_name+0xf8>)
   d692a:	e7d7      	b.n	d68dc <mbedtls_x509_get_name+0x20>
    oid->tag = **p;
   d692c:	462a      	mov	r2, r5
   d692e:	781b      	ldrb	r3, [r3, #0]
   d6930:	f842 3b04 	str.w	r3, [r2], #4
    if( ( ret = mbedtls_asn1_get_tag( p, end, &oid->len, MBEDTLS_ASN1_OID ) ) != 0 )
   d6934:	4649      	mov	r1, r9
   d6936:	2306      	movs	r3, #6
   d6938:	4620      	mov	r0, r4
   d693a:	f7ff fd4b 	bl	d63d4 <mbedtls_asn1_get_tag>
   d693e:	2800      	cmp	r0, #0
   d6940:	d1da      	bne.n	d68f8 <mbedtls_x509_get_name+0x3c>
    oid->p = *p;
   d6942:	6822      	ldr	r2, [r4, #0]
    *p += oid->len;
   d6944:	6868      	ldr	r0, [r5, #4]
    oid->p = *p;
   d6946:	60aa      	str	r2, [r5, #8]
    *p += oid->len;
   d6948:	1813      	adds	r3, r2, r0
    if( ( end - *p ) < 1 )
   d694a:	eba9 0103 	sub.w	r1, r9, r3
   d694e:	2900      	cmp	r1, #0
    *p += oid->len;
   d6950:	6023      	str	r3, [r4, #0]
    if( ( end - *p ) < 1 )
   d6952:	dde9      	ble.n	d6928 <mbedtls_x509_get_name+0x6c>
    if( **p != MBEDTLS_ASN1_BMP_STRING && **p != MBEDTLS_ASN1_UTF8_STRING      &&
   d6954:	5c11      	ldrb	r1, [r2, r0]
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
   d6956:	291e      	cmp	r1, #30
   d6958:	d81a      	bhi.n	d6990 <mbedtls_x509_get_name+0xd4>
   d695a:	fa28 f101 	lsr.w	r1, r8, r1
   d695e:	07c9      	lsls	r1, r1, #31
   d6960:	d516      	bpl.n	d6990 <mbedtls_x509_get_name+0xd4>
    val->tag = *(*p)++;
   d6962:	3301      	adds	r3, #1
   d6964:	6023      	str	r3, [r4, #0]
   d6966:	5c13      	ldrb	r3, [r2, r0]
   d6968:	60eb      	str	r3, [r5, #12]
    if( ( ret = mbedtls_asn1_get_len( p, end, &val->len ) ) != 0 )
   d696a:	f105 0210 	add.w	r2, r5, #16
   d696e:	4649      	mov	r1, r9
   d6970:	4620      	mov	r0, r4
   d6972:	f7ff fce3 	bl	d633c <mbedtls_asn1_get_len>
   d6976:	2800      	cmp	r0, #0
   d6978:	d1be      	bne.n	d68f8 <mbedtls_x509_get_name+0x3c>
    val->p = *p;
   d697a:	6823      	ldr	r3, [r4, #0]
    *p += val->len;
   d697c:	692a      	ldr	r2, [r5, #16]
    val->p = *p;
   d697e:	616b      	str	r3, [r5, #20]
    *p += val->len;
   d6980:	4413      	add	r3, r2
    if( *p != end )
   d6982:	4599      	cmp	r9, r3
    *p += val->len;
   d6984:	6023      	str	r3, [r4, #0]
    if( *p != end )
   d6986:	d101      	bne.n	d698c <mbedtls_x509_get_name+0xd0>
    cur->next = NULL;
   d6988:	61a8      	str	r0, [r5, #24]
    return( 0 );
   d698a:	e7b9      	b.n	d6900 <mbedtls_x509_get_name+0x44>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   d698c:	480a      	ldr	r0, [pc, #40]	; (d69b8 <mbedtls_x509_get_name+0xfc>)
   d698e:	e7a5      	b.n	d68dc <mbedtls_x509_get_name+0x20>
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
   d6990:	480a      	ldr	r0, [pc, #40]	; (d69bc <mbedtls_x509_get_name+0x100>)
   d6992:	e7a3      	b.n	d68dc <mbedtls_x509_get_name+0x20>
        if( *p == end )
   d6994:	42b7      	cmp	r7, r6
   d6996:	d008      	beq.n	d69aa <mbedtls_x509_get_name+0xee>
        cur->next = (mbedtls_asn1_named_data *)mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );
   d6998:	2120      	movs	r1, #32
   d699a:	2001      	movs	r0, #1
   d699c:	f011 ff1c 	bl	e87d8 <calloc>
   d69a0:	4681      	mov	r9, r0
   d69a2:	61a8      	str	r0, [r5, #24]
        if( cur->next == NULL )
   d69a4:	2800      	cmp	r0, #0
   d69a6:	d190      	bne.n	d68ca <mbedtls_x509_get_name+0xe>
   d69a8:	e7b4      	b.n	d6914 <mbedtls_x509_get_name+0x58>
            return( 0 );
   d69aa:	2000      	movs	r0, #0
   d69ac:	e796      	b.n	d68dc <mbedtls_x509_get_name+0x20>
   d69ae:	bf00      	nop
   d69b0:	ffffd780 	.word	0xffffd780
   d69b4:	ffffdc20 	.word	0xffffdc20
   d69b8:	ffffdc1a 	.word	0xffffdc1a
   d69bc:	ffffdc1e 	.word	0xffffdc1e
   d69c0:	50581008 	.word	0x50581008

000d69c4 <mbedtls_x509_get_time>:
 *       utcTime        UTCTime,
 *       generalTime    GeneralizedTime }
 */
int mbedtls_x509_get_time( unsigned char **p, const unsigned char *end,
                           mbedtls_x509_time *tm )
{
   d69c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    int ret;
    size_t len, year_len;
    unsigned char tag;

    if( ( end - *p ) < 1 )
   d69c6:	6803      	ldr	r3, [r0, #0]
{
   d69c8:	4614      	mov	r4, r2
    if( ( end - *p ) < 1 )
   d69ca:	1aca      	subs	r2, r1, r3
   d69cc:	2a00      	cmp	r2, #0
{
   d69ce:	4605      	mov	r5, r0
    if( ( end - *p ) < 1 )
   d69d0:	f340 80a0 	ble.w	d6b14 <mbedtls_x509_get_time+0x150>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag = **p;
   d69d4:	781a      	ldrb	r2, [r3, #0]

    if( tag == MBEDTLS_ASN1_UTC_TIME )
   d69d6:	2a17      	cmp	r2, #23
   d69d8:	d00e      	beq.n	d69f8 <mbedtls_x509_get_time+0x34>
        year_len = 2;
    else if( tag == MBEDTLS_ASN1_GENERALIZED_TIME )
   d69da:	2a18      	cmp	r2, #24
   d69dc:	f040 809c 	bne.w	d6b18 <mbedtls_x509_get_time+0x154>
        year_len = 4;
   d69e0:	2704      	movs	r7, #4
    else
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
   d69e2:	3301      	adds	r3, #1
   d69e4:	602b      	str	r3, [r5, #0]
    ret = mbedtls_asn1_get_len( p, end, &len );
   d69e6:	aa01      	add	r2, sp, #4
   d69e8:	4628      	mov	r0, r5
   d69ea:	f7ff fca7 	bl	d633c <mbedtls_asn1_get_len>

    if( ret != 0 )
   d69ee:	b128      	cbz	r0, d69fc <mbedtls_x509_get_time+0x38>
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );
   d69f0:	f5a0 5010 	sub.w	r0, r0, #9216	; 0x2400

    return x509_parse_time( p, len, year_len, tm );
}
   d69f4:	b003      	add	sp, #12
   d69f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        year_len = 2;
   d69f8:	2702      	movs	r7, #2
   d69fa:	e7f2      	b.n	d69e2 <mbedtls_x509_get_time+0x1e>
    return x509_parse_time( p, len, year_len, tm );
   d69fc:	9e01      	ldr	r6, [sp, #4]
    if ( len < yearlen + 8 )
   d69fe:	f107 0308 	add.w	r3, r7, #8
   d6a02:	429e      	cmp	r6, r3
   d6a04:	d201      	bcs.n	d6a0a <mbedtls_x509_get_time+0x46>
   d6a06:	4845      	ldr	r0, [pc, #276]	; (d6b1c <mbedtls_x509_get_time+0x158>)
   d6a08:	e7f4      	b.n	d69f4 <mbedtls_x509_get_time+0x30>
    CHECK( x509_parse_int( p, yearlen, &tm->year ) );
   d6a0a:	4622      	mov	r2, r4
   d6a0c:	4639      	mov	r1, r7
   d6a0e:	4628      	mov	r0, r5
   d6a10:	f7ff fe1a 	bl	d6648 <_ZL14x509_parse_intPPhjPi>
   d6a14:	2800      	cmp	r0, #0
   d6a16:	d1ed      	bne.n	d69f4 <mbedtls_x509_get_time+0x30>
    if ( 2 == yearlen )
   d6a18:	2f02      	cmp	r7, #2
   d6a1a:	d108      	bne.n	d6a2e <mbedtls_x509_get_time+0x6a>
        if ( tm->year < 50 )
   d6a1c:	6823      	ldr	r3, [r4, #0]
   d6a1e:	2b31      	cmp	r3, #49	; 0x31
            tm->year += 100;
   d6a20:	bfdc      	itt	le
   d6a22:	3364      	addle	r3, #100	; 0x64
   d6a24:	6023      	strle	r3, [r4, #0]
        tm->year += 1900;
   d6a26:	6823      	ldr	r3, [r4, #0]
   d6a28:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d6a2c:	6023      	str	r3, [r4, #0]
    CHECK( x509_parse_int( p, 2, &tm->mon ) );
   d6a2e:	1d22      	adds	r2, r4, #4
   d6a30:	2102      	movs	r1, #2
   d6a32:	4628      	mov	r0, r5
   d6a34:	f7ff fe08 	bl	d6648 <_ZL14x509_parse_intPPhjPi>
   d6a38:	2800      	cmp	r0, #0
   d6a3a:	d1db      	bne.n	d69f4 <mbedtls_x509_get_time+0x30>
    CHECK( x509_parse_int( p, 2, &tm->day ) );
   d6a3c:	f104 0208 	add.w	r2, r4, #8
   d6a40:	2102      	movs	r1, #2
   d6a42:	4628      	mov	r0, r5
   d6a44:	f7ff fe00 	bl	d6648 <_ZL14x509_parse_intPPhjPi>
   d6a48:	2800      	cmp	r0, #0
   d6a4a:	d1d3      	bne.n	d69f4 <mbedtls_x509_get_time+0x30>
    CHECK( x509_parse_int( p, 2, &tm->hour ) );
   d6a4c:	f104 020c 	add.w	r2, r4, #12
   d6a50:	2102      	movs	r1, #2
   d6a52:	4628      	mov	r0, r5
   d6a54:	f7ff fdf8 	bl	d6648 <_ZL14x509_parse_intPPhjPi>
   d6a58:	2800      	cmp	r0, #0
   d6a5a:	d1cb      	bne.n	d69f4 <mbedtls_x509_get_time+0x30>
    CHECK( x509_parse_int( p, 2, &tm->min ) );
   d6a5c:	f104 0210 	add.w	r2, r4, #16
   d6a60:	2102      	movs	r1, #2
   d6a62:	4628      	mov	r0, r5
   d6a64:	f7ff fdf0 	bl	d6648 <_ZL14x509_parse_intPPhjPi>
   d6a68:	2800      	cmp	r0, #0
   d6a6a:	d1c3      	bne.n	d69f4 <mbedtls_x509_get_time+0x30>
    len -= yearlen + 8;
   d6a6c:	1bf6      	subs	r6, r6, r7
   d6a6e:	f1a6 0308 	sub.w	r3, r6, #8
    if ( len >= 2 )
   d6a72:	2b01      	cmp	r3, #1
   d6a74:	d9c7      	bls.n	d6a06 <mbedtls_x509_get_time+0x42>
        CHECK( x509_parse_int( p, 2, &tm->sec ) );
   d6a76:	f104 0214 	add.w	r2, r4, #20
   d6a7a:	2102      	movs	r1, #2
   d6a7c:	4628      	mov	r0, r5
   d6a7e:	f7ff fde3 	bl	d6648 <_ZL14x509_parse_intPPhjPi>
   d6a82:	2800      	cmp	r0, #0
   d6a84:	d1b6      	bne.n	d69f4 <mbedtls_x509_get_time+0x30>
    if ( 1 == len && 'Z' == **p )
   d6a86:	2e0b      	cmp	r6, #11
        len -= 2;
   d6a88:	f1a6 030a 	sub.w	r3, r6, #10
    if ( 1 == len && 'Z' == **p )
   d6a8c:	d11f      	bne.n	d6ace <mbedtls_x509_get_time+0x10a>
   d6a8e:	682b      	ldr	r3, [r5, #0]
   d6a90:	781a      	ldrb	r2, [r3, #0]
   d6a92:	2a5a      	cmp	r2, #90	; 0x5a
   d6a94:	d1b7      	bne.n	d6a06 <mbedtls_x509_get_time+0x42>
        (*p)++;
   d6a96:	3301      	adds	r3, #1
   d6a98:	602b      	str	r3, [r5, #0]
    CHECK_RANGE( 0, 9999, t->year );
   d6a9a:	6823      	ldr	r3, [r4, #0]
   d6a9c:	f242 720f 	movw	r2, #9999	; 0x270f
   d6aa0:	4293      	cmp	r3, r2
   d6aa2:	d8b0      	bhi.n	d6a06 <mbedtls_x509_get_time+0x42>
    CHECK_RANGE( 0, 23,   t->hour );
   d6aa4:	68e2      	ldr	r2, [r4, #12]
   d6aa6:	2a17      	cmp	r2, #23
   d6aa8:	d8ad      	bhi.n	d6a06 <mbedtls_x509_get_time+0x42>
    CHECK_RANGE( 0, 59,   t->min  );
   d6aaa:	6922      	ldr	r2, [r4, #16]
   d6aac:	2a3b      	cmp	r2, #59	; 0x3b
   d6aae:	d8aa      	bhi.n	d6a06 <mbedtls_x509_get_time+0x42>
    CHECK_RANGE( 0, 59,   t->sec  );
   d6ab0:	6962      	ldr	r2, [r4, #20]
   d6ab2:	2a3b      	cmp	r2, #59	; 0x3b
   d6ab4:	d8a7      	bhi.n	d6a06 <mbedtls_x509_get_time+0x42>
    switch( t->mon )
   d6ab6:	6862      	ldr	r2, [r4, #4]
   d6ab8:	3a01      	subs	r2, #1
   d6aba:	2a0b      	cmp	r2, #11
   d6abc:	d8a3      	bhi.n	d6a06 <mbedtls_x509_get_time+0x42>
   d6abe:	e8df f002 	tbb	[pc, r2]
   d6ac2:	1225      	.short	0x1225
   d6ac4:	09250925 	.word	0x09250925
   d6ac8:	25092525 	.word	0x25092525
   d6acc:	2509      	.short	0x2509
    if ( 0 != len )
   d6ace:	2b00      	cmp	r3, #0
   d6ad0:	d0e3      	beq.n	d6a9a <mbedtls_x509_get_time+0xd6>
   d6ad2:	e798      	b.n	d6a06 <mbedtls_x509_get_time+0x42>
    switch( t->mon )
   d6ad4:	231e      	movs	r3, #30
    CHECK_RANGE( 1, month_len, t->day );
   d6ad6:	68a2      	ldr	r2, [r4, #8]
   d6ad8:	2a00      	cmp	r2, #0
   d6ada:	dd94      	ble.n	d6a06 <mbedtls_x509_get_time+0x42>
   d6adc:	490f      	ldr	r1, [pc, #60]	; (d6b1c <mbedtls_x509_get_time+0x158>)
   d6ade:	429a      	cmp	r2, r3
   d6ae0:	bfc8      	it	gt
   d6ae2:	4608      	movgt	r0, r1
   d6ae4:	e786      	b.n	d69f4 <mbedtls_x509_get_time+0x30>
            if( ( !( t->year % 4 ) && t->year % 100 ) ||
   d6ae6:	079a      	lsls	r2, r3, #30
   d6ae8:	d105      	bne.n	d6af6 <mbedtls_x509_get_time+0x132>
   d6aea:	2164      	movs	r1, #100	; 0x64
   d6aec:	fb93 f2f1 	sdiv	r2, r3, r1
   d6af0:	fb01 3212 	mls	r2, r1, r2, r3
   d6af4:	b962      	cbnz	r2, d6b10 <mbedtls_x509_get_time+0x14c>
   d6af6:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d6afa:	fb93 f2f1 	sdiv	r2, r3, r1
   d6afe:	fb01 3312 	mls	r3, r1, r2, r3
                month_len = 28;
   d6b02:	2b00      	cmp	r3, #0
   d6b04:	bf0c      	ite	eq
   d6b06:	231d      	moveq	r3, #29
   d6b08:	231c      	movne	r3, #28
   d6b0a:	e7e4      	b.n	d6ad6 <mbedtls_x509_get_time+0x112>
            month_len = 31;
   d6b0c:	231f      	movs	r3, #31
   d6b0e:	e7e2      	b.n	d6ad6 <mbedtls_x509_get_time+0x112>
                month_len = 29;
   d6b10:	231d      	movs	r3, #29
   d6b12:	e7e0      	b.n	d6ad6 <mbedtls_x509_get_time+0x112>
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   d6b14:	4802      	ldr	r0, [pc, #8]	; (d6b20 <mbedtls_x509_get_time+0x15c>)
   d6b16:	e76d      	b.n	d69f4 <mbedtls_x509_get_time+0x30>
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
   d6b18:	4802      	ldr	r0, [pc, #8]	; (d6b24 <mbedtls_x509_get_time+0x160>)
   d6b1a:	e76b      	b.n	d69f4 <mbedtls_x509_get_time+0x30>
   d6b1c:	ffffdc00 	.word	0xffffdc00
   d6b20:	ffffdba0 	.word	0xffffdba0
   d6b24:	ffffdb9e 	.word	0xffffdb9e

000d6b28 <mbedtls_x509_get_sig>:

int mbedtls_x509_get_sig( unsigned char **p, const unsigned char *end, mbedtls_x509_buf *sig )
{
   d6b28:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6b2a:	4615      	mov	r5, r2
    int ret;
    size_t len;
    int tag_type;

    if( ( end - *p ) < 1 )
   d6b2c:	6802      	ldr	r2, [r0, #0]
   d6b2e:	1a8b      	subs	r3, r1, r2
   d6b30:	2b00      	cmp	r3, #0
{
   d6b32:	4604      	mov	r4, r0
    if( ( end - *p ) < 1 )
   d6b34:	dd10      	ble.n	d6b58 <mbedtls_x509_get_sig+0x30>
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag_type = **p;
   d6b36:	7816      	ldrb	r6, [r2, #0]

    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
   d6b38:	aa01      	add	r2, sp, #4
   d6b3a:	f7ff fcd1 	bl	d64e0 <mbedtls_asn1_get_bitstring_null>
   d6b3e:	b118      	cbz	r0, d6b48 <mbedtls_x509_get_sig+0x20>
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE + ret );
   d6b40:	f5a0 5012 	sub.w	r0, r0, #9344	; 0x2480
    sig->p = *p;

    *p += len;

    return( 0 );
}
   d6b44:	b002      	add	sp, #8
   d6b46:	bd70      	pop	{r4, r5, r6, pc}
    sig->len = len;
   d6b48:	9a01      	ldr	r2, [sp, #4]
    tag_type = **p;
   d6b4a:	602e      	str	r6, [r5, #0]
    sig->len = len;
   d6b4c:	606a      	str	r2, [r5, #4]
    sig->p = *p;
   d6b4e:	6823      	ldr	r3, [r4, #0]
   d6b50:	60ab      	str	r3, [r5, #8]
    *p += len;
   d6b52:	4413      	add	r3, r2
   d6b54:	6023      	str	r3, [r4, #0]
    return( 0 );
   d6b56:	e7f5      	b.n	d6b44 <mbedtls_x509_get_sig+0x1c>
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   d6b58:	4800      	ldr	r0, [pc, #0]	; (d6b5c <mbedtls_x509_get_sig+0x34>)
   d6b5a:	e7f3      	b.n	d6b44 <mbedtls_x509_get_sig+0x1c>
   d6b5c:	ffffdb20 	.word	0xffffdb20

000d6b60 <mbedtls_x509_get_sig_alg>:
 * Get signature algorithm from alg OID and optional parameters
 */
int mbedtls_x509_get_sig_alg( const mbedtls_x509_buf *sig_oid, const mbedtls_x509_buf *sig_params,
                      mbedtls_md_type_t *md_alg, mbedtls_pk_type_t *pk_alg,
                      void **sig_opts )
{
   d6b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6b64:	f8dd 8018 	ldr.w	r8, [sp, #24]
   d6b68:	461d      	mov	r5, r3
    int ret;

    if( *sig_opts != NULL )
   d6b6a:	f8d8 3000 	ldr.w	r3, [r8]
{
   d6b6e:	460e      	mov	r6, r1
   d6b70:	4617      	mov	r7, r2
    if( *sig_opts != NULL )
   d6b72:	bb63      	cbnz	r3, d6bce <mbedtls_x509_get_sig_alg+0x6e>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    if( ( ret = mbedtls_oid_get_sig_alg( sig_oid, md_alg, pk_alg ) ) != 0 )
   d6b74:	462a      	mov	r2, r5
   d6b76:	4639      	mov	r1, r7
   d6b78:	f003 f98b 	bl	d9e92 <mbedtls_oid_get_sig_alg>
   d6b7c:	4604      	mov	r4, r0
   d6b7e:	b120      	cbz	r0, d6b8a <mbedtls_x509_get_sig_alg+0x2a>
        return( MBEDTLS_ERR_X509_UNKNOWN_SIG_ALG + ret );
   d6b80:	f5a0 5418 	sub.w	r4, r0, #9728	; 0x2600
              sig_params->len != 0 )
        return( MBEDTLS_ERR_X509_INVALID_ALG );
    }

    return( 0 );
}
   d6b84:	4620      	mov	r0, r4
   d6b86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( *pk_alg == MBEDTLS_PK_RSASSA_PSS )
   d6b8a:	782b      	ldrb	r3, [r5, #0]
   d6b8c:	2b06      	cmp	r3, #6
   d6b8e:	d114      	bne.n	d6bba <mbedtls_x509_get_sig_alg+0x5a>
        pss_opts = (mbedtls_pk_rsassa_pss_options *)mbedtls_calloc( 1, sizeof( mbedtls_pk_rsassa_pss_options ) );
   d6b90:	2108      	movs	r1, #8
   d6b92:	2001      	movs	r0, #1
   d6b94:	f011 fe20 	bl	e87d8 <calloc>
        if( pss_opts == NULL )
   d6b98:	4605      	mov	r5, r0
   d6b9a:	b1d0      	cbz	r0, d6bd2 <mbedtls_x509_get_sig_alg+0x72>
        ret = mbedtls_x509_get_rsassa_pss_params( sig_params,
   d6b9c:	1d03      	adds	r3, r0, #4
   d6b9e:	4602      	mov	r2, r0
   d6ba0:	4639      	mov	r1, r7
   d6ba2:	4630      	mov	r0, r6
   d6ba4:	f7ff fda2 	bl	d66ec <mbedtls_x509_get_rsassa_pss_params>
        if( ret != 0 )
   d6ba8:	4604      	mov	r4, r0
   d6baa:	b118      	cbz	r0, d6bb4 <mbedtls_x509_get_sig_alg+0x54>
            mbedtls_free( pss_opts );
   d6bac:	4628      	mov	r0, r5
   d6bae:	f00e fe07 	bl	e57c0 <free>
            return( ret );
   d6bb2:	e7e7      	b.n	d6b84 <mbedtls_x509_get_sig_alg+0x24>
        *sig_opts = (void *) pss_opts;
   d6bb4:	f8c8 5000 	str.w	r5, [r8]
   d6bb8:	e7e4      	b.n	d6b84 <mbedtls_x509_get_sig_alg+0x24>
        if( ( sig_params->tag != MBEDTLS_ASN1_NULL && sig_params->tag != 0 ) ||
   d6bba:	6833      	ldr	r3, [r6, #0]
   d6bbc:	2b05      	cmp	r3, #5
   d6bbe:	d000      	beq.n	d6bc2 <mbedtls_x509_get_sig_alg+0x62>
   d6bc0:	b94b      	cbnz	r3, d6bd6 <mbedtls_x509_get_sig_alg+0x76>
   d6bc2:	6872      	ldr	r2, [r6, #4]
        return( MBEDTLS_ERR_X509_INVALID_ALG );
   d6bc4:	4b05      	ldr	r3, [pc, #20]	; (d6bdc <mbedtls_x509_get_sig_alg+0x7c>)
   d6bc6:	2a00      	cmp	r2, #0
   d6bc8:	bf18      	it	ne
   d6bca:	461c      	movne	r4, r3
   d6bcc:	e7da      	b.n	d6b84 <mbedtls_x509_get_sig_alg+0x24>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
   d6bce:	4c04      	ldr	r4, [pc, #16]	; (d6be0 <mbedtls_x509_get_sig_alg+0x80>)
   d6bd0:	e7d8      	b.n	d6b84 <mbedtls_x509_get_sig_alg+0x24>
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );
   d6bd2:	4c04      	ldr	r4, [pc, #16]	; (d6be4 <mbedtls_x509_get_sig_alg+0x84>)
   d6bd4:	e7d6      	b.n	d6b84 <mbedtls_x509_get_sig_alg+0x24>
        return( MBEDTLS_ERR_X509_INVALID_ALG );
   d6bd6:	4c01      	ldr	r4, [pc, #4]	; (d6bdc <mbedtls_x509_get_sig_alg+0x7c>)
   d6bd8:	e7d4      	b.n	d6b84 <mbedtls_x509_get_sig_alg+0x24>
   d6bda:	bf00      	nop
   d6bdc:	ffffdd00 	.word	0xffffdd00
   d6be0:	ffffd800 	.word	0xffffd800
   d6be4:	ffffd780 	.word	0xffffd780

000d6be8 <mbedtls_x509_get_ext>:
 * X.509 Extensions (No parsing of extensions, pointer should
 * be either manually updated or extensions should be parsed!)
 */
int mbedtls_x509_get_ext( unsigned char **p, const unsigned char *end,
                          mbedtls_x509_buf *ext, int tag )
{
   d6be8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    size_t len;

    /* Extension structure use EXPLICIT tagging. That is, the actual
     * `Extensions` structure is wrapped by a tag-length pair using
     * the respective context-specific tag. */
    ret = mbedtls_asn1_get_tag( p, end, &ext->len,
   d6bea:	f043 06a0 	orr.w	r6, r3, #160	; 0xa0
{
   d6bee:	4614      	mov	r4, r2
    ret = mbedtls_asn1_get_tag( p, end, &ext->len,
   d6bf0:	4633      	mov	r3, r6
   d6bf2:	3204      	adds	r2, #4
{
   d6bf4:	4605      	mov	r5, r0
    ret = mbedtls_asn1_get_tag( p, end, &ext->len,
   d6bf6:	f7ff fbed 	bl	d63d4 <mbedtls_asn1_get_tag>
              MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | tag );
    if( ret != 0 )
   d6bfa:	b118      	cbz	r0, d6c04 <mbedtls_x509_get_ext+0x1c>
    /*
     * Extensions  ::=  SEQUENCE SIZE (1..MAX) OF Extension
     */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
   d6bfc:	f5a0 5014 	sub.w	r0, r0, #9472	; 0x2500
    if( end != *p + len )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
   d6c00:	b002      	add	sp, #8
   d6c02:	bd70      	pop	{r4, r5, r6, pc}
    ext->tag = MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | tag;
   d6c04:	6026      	str	r6, [r4, #0]
    ext->p   = *p;
   d6c06:	6829      	ldr	r1, [r5, #0]
   d6c08:	60a1      	str	r1, [r4, #8]
    end      = *p + ext->len;
   d6c0a:	6864      	ldr	r4, [r4, #4]
   d6c0c:	440c      	add	r4, r1
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   d6c0e:	2330      	movs	r3, #48	; 0x30
   d6c10:	aa01      	add	r2, sp, #4
   d6c12:	4621      	mov	r1, r4
   d6c14:	4628      	mov	r0, r5
   d6c16:	f7ff fbdd 	bl	d63d4 <mbedtls_asn1_get_tag>
   d6c1a:	2800      	cmp	r0, #0
   d6c1c:	d1ee      	bne.n	d6bfc <mbedtls_x509_get_ext+0x14>
    if( end != *p + len )
   d6c1e:	9a01      	ldr	r2, [sp, #4]
   d6c20:	682b      	ldr	r3, [r5, #0]
   d6c22:	4413      	add	r3, r2
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   d6c24:	4a02      	ldr	r2, [pc, #8]	; (d6c30 <mbedtls_x509_get_ext+0x48>)
   d6c26:	429c      	cmp	r4, r3
   d6c28:	bf18      	it	ne
   d6c2a:	4610      	movne	r0, r2
   d6c2c:	e7e8      	b.n	d6c00 <mbedtls_x509_get_ext+0x18>
   d6c2e:	bf00      	nop
   d6c30:	ffffda9a 	.word	0xffffda9a

000d6c34 <mbedtls_x509_dn_gets>:
/*
 * Store the name in printable form into buf; no more
 * than size characters will be written
 */
int mbedtls_x509_dn_gets( char *buf, size_t size, const mbedtls_x509_name *dn )
{
   d6c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6c38:	b0c3      	sub	sp, #268	; 0x10c
    int ret;
    size_t i, n;
    unsigned char c, merge = 0;
    const mbedtls_x509_name *name;
    const char *short_name = NULL;
   d6c3a:	f04f 0a00 	mov.w	sl, #0
    char s[MBEDTLS_X509_MAX_DN_NAME_SIZE], *p;

    memset( s, 0, sizeof( s ) );
   d6c3e:	f10d 0908 	add.w	r9, sp, #8
{
   d6c42:	460f      	mov	r7, r1
   d6c44:	4690      	mov	r8, r2
    memset( s, 0, sizeof( s ) );
   d6c46:	4651      	mov	r1, sl
{
   d6c48:	4604      	mov	r4, r0
    memset( s, 0, sizeof( s ) );
   d6c4a:	f44f 7280 	mov.w	r2, #256	; 0x100
   d6c4e:	4648      	mov	r0, r9
    const char *short_name = NULL;
   d6c50:	f8cd a004 	str.w	sl, [sp, #4]
        }

        ret = mbedtls_oid_get_attr_short_name( &name->oid, &short_name );

        if( ret == 0 )
            ret = mbedtls_snprintf( p, n, "%s=", short_name );
   d6c54:	f8df b0dc 	ldr.w	fp, [pc, #220]	; d6d34 <mbedtls_x509_dn_gets+0x100>
    memset( s, 0, sizeof( s ) );
   d6c58:	f011 fe60 	bl	e891c <memset>
    unsigned char c, merge = 0;
   d6c5c:	4651      	mov	r1, sl
        else
            ret = mbedtls_snprintf( p, n, "\?\?=" );
   d6c5e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; d6d38 <mbedtls_x509_dn_gets+0x104>
    name = dn;
   d6c62:	4646      	mov	r6, r8
    n = size;
   d6c64:	463d      	mov	r5, r7
    while( name != NULL )
   d6c66:	2e00      	cmp	r6, #0
   d6c68:	d059      	beq.n	d6d1e <mbedtls_x509_dn_gets+0xea>
        if( !name->oid.p )
   d6c6a:	68b3      	ldr	r3, [r6, #8]
   d6c6c:	b90b      	cbnz	r3, d6c72 <mbedtls_x509_dn_gets+0x3e>
        s[i] = '\0';
        ret = mbedtls_snprintf( p, n, "%s", s );
        MBEDTLS_X509_SAFE_SNPRINTF;

        merge = name->next_merged;
        name = name->next;
   d6c6e:	69b6      	ldr	r6, [r6, #24]
   d6c70:	e7f9      	b.n	d6c66 <mbedtls_x509_dn_gets+0x32>
        if( name != dn )
   d6c72:	4546      	cmp	r6, r8
   d6c74:	d012      	beq.n	d6c9c <mbedtls_x509_dn_gets+0x68>
            ret = mbedtls_snprintf( p, n, merge ? " + " : ", " );
   d6c76:	4b2b      	ldr	r3, [pc, #172]	; (d6d24 <mbedtls_x509_dn_gets+0xf0>)
   d6c78:	4a2b      	ldr	r2, [pc, #172]	; (d6d28 <mbedtls_x509_dn_gets+0xf4>)
   d6c7a:	4620      	mov	r0, r4
   d6c7c:	2900      	cmp	r1, #0
   d6c7e:	bf08      	it	eq
   d6c80:	461a      	moveq	r2, r3
   d6c82:	4629      	mov	r1, r5
   d6c84:	f00e fdb4 	bl	e57f0 <snprintf>
            MBEDTLS_X509_SAFE_SNPRINTF;
   d6c88:	2800      	cmp	r0, #0
   d6c8a:	da03      	bge.n	d6c94 <mbedtls_x509_dn_gets+0x60>
   d6c8c:	4827      	ldr	r0, [pc, #156]	; (d6d2c <mbedtls_x509_dn_gets+0xf8>)
    }

    return( (int) ( size - n ) );
}
   d6c8e:	b043      	add	sp, #268	; 0x10c
   d6c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            MBEDTLS_X509_SAFE_SNPRINTF;
   d6c94:	42a8      	cmp	r0, r5
   d6c96:	d2f9      	bcs.n	d6c8c <mbedtls_x509_dn_gets+0x58>
   d6c98:	1a2d      	subs	r5, r5, r0
   d6c9a:	4404      	add	r4, r0
        ret = mbedtls_oid_get_attr_short_name( &name->oid, &short_name );
   d6c9c:	a901      	add	r1, sp, #4
   d6c9e:	4630      	mov	r0, r6
   d6ca0:	f003 f89c 	bl	d9ddc <mbedtls_oid_get_attr_short_name>
        if( ret == 0 )
   d6ca4:	bb10      	cbnz	r0, d6cec <mbedtls_x509_dn_gets+0xb8>
            ret = mbedtls_snprintf( p, n, "%s=", short_name );
   d6ca6:	9b01      	ldr	r3, [sp, #4]
   d6ca8:	465a      	mov	r2, fp
   d6caa:	4629      	mov	r1, r5
   d6cac:	4620      	mov	r0, r4
   d6cae:	f00e fd9f 	bl	e57f0 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   d6cb2:	2800      	cmp	r0, #0
   d6cb4:	dbea      	blt.n	d6c8c <mbedtls_x509_dn_gets+0x58>
   d6cb6:	42a8      	cmp	r0, r5
   d6cb8:	d2e8      	bcs.n	d6c8c <mbedtls_x509_dn_gets+0x58>
   d6cba:	1a2d      	subs	r5, r5, r0
   d6cbc:	4404      	add	r4, r0
        for( i = 0; i < name->val.len; i++ )
   d6cbe:	2200      	movs	r2, #0
   d6cc0:	4648      	mov	r0, r9
   d6cc2:	6933      	ldr	r3, [r6, #16]
   d6cc4:	4293      	cmp	r3, r2
   d6cc6:	d919      	bls.n	d6cfc <mbedtls_x509_dn_gets+0xc8>
            if( i >= sizeof( s ) - 1 )
   d6cc8:	2aff      	cmp	r2, #255	; 0xff
   d6cca:	d017      	beq.n	d6cfc <mbedtls_x509_dn_gets+0xc8>
            c = name->val.p[i];
   d6ccc:	6973      	ldr	r3, [r6, #20]
   d6cce:	5c9b      	ldrb	r3, [r3, r2]
            if( c < 32 || c == 127 || ( c > 128 && c < 160 ) )
   d6cd0:	2b1f      	cmp	r3, #31
   d6cd2:	d911      	bls.n	d6cf8 <mbedtls_x509_dn_gets+0xc4>
   d6cd4:	2b7f      	cmp	r3, #127	; 0x7f
   d6cd6:	d00f      	beq.n	d6cf8 <mbedtls_x509_dn_gets+0xc4>
   d6cd8:	f103 017f 	add.w	r1, r3, #127	; 0x7f
   d6cdc:	b2c9      	uxtb	r1, r1
                 s[i] = '?';
   d6cde:	291e      	cmp	r1, #30
   d6ce0:	bf98      	it	ls
   d6ce2:	233f      	movls	r3, #63	; 0x3f
   d6ce4:	f800 3b01 	strb.w	r3, [r0], #1
        for( i = 0; i < name->val.len; i++ )
   d6ce8:	3201      	adds	r2, #1
   d6cea:	e7ea      	b.n	d6cc2 <mbedtls_x509_dn_gets+0x8e>
            ret = mbedtls_snprintf( p, n, "\?\?=" );
   d6cec:	4652      	mov	r2, sl
   d6cee:	4629      	mov	r1, r5
   d6cf0:	4620      	mov	r0, r4
   d6cf2:	f00e fd7d 	bl	e57f0 <snprintf>
   d6cf6:	e7dc      	b.n	d6cb2 <mbedtls_x509_dn_gets+0x7e>
                 s[i] = '?';
   d6cf8:	233f      	movs	r3, #63	; 0x3f
   d6cfa:	e7f3      	b.n	d6ce4 <mbedtls_x509_dn_gets+0xb0>
        s[i] = '\0';
   d6cfc:	2300      	movs	r3, #0
   d6cfe:	f809 3002 	strb.w	r3, [r9, r2]
        ret = mbedtls_snprintf( p, n, "%s", s );
   d6d02:	4629      	mov	r1, r5
   d6d04:	4a0a      	ldr	r2, [pc, #40]	; (d6d30 <mbedtls_x509_dn_gets+0xfc>)
   d6d06:	464b      	mov	r3, r9
   d6d08:	4620      	mov	r0, r4
   d6d0a:	f00e fd71 	bl	e57f0 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   d6d0e:	2800      	cmp	r0, #0
   d6d10:	dbbc      	blt.n	d6c8c <mbedtls_x509_dn_gets+0x58>
   d6d12:	42a8      	cmp	r0, r5
   d6d14:	d2ba      	bcs.n	d6c8c <mbedtls_x509_dn_gets+0x58>
        merge = name->next_merged;
   d6d16:	7f31      	ldrb	r1, [r6, #28]
        MBEDTLS_X509_SAFE_SNPRINTF;
   d6d18:	1a2d      	subs	r5, r5, r0
   d6d1a:	4404      	add	r4, r0
        merge = name->next_merged;
   d6d1c:	e7a7      	b.n	d6c6e <mbedtls_x509_dn_gets+0x3a>
    return( (int) ( size - n ) );
   d6d1e:	1b78      	subs	r0, r7, r5
   d6d20:	e7b5      	b.n	d6c8e <mbedtls_x509_dn_gets+0x5a>
   d6d22:	bf00      	nop
   d6d24:	000eb2ee 	.word	0x000eb2ee
   d6d28:	000eb2ea 	.word	0x000eb2ea
   d6d2c:	ffffd680 	.word	0xffffd680
   d6d30:	000ec89e 	.word	0x000ec89e
   d6d34:	000eb2f1 	.word	0x000eb2f1
   d6d38:	000eb2f5 	.word	0x000eb2f5

000d6d3c <mbedtls_x509_serial_gets>:
/*
 * Store the serial in printable form into buf; no more
 * than size characters will be written
 */
int mbedtls_x509_serial_gets( char *buf, size_t size, const mbedtls_x509_buf *serial )
{
   d6d3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    char *p;

    p = buf;
    n = size;

    nr = ( serial->len <= 32 )
   d6d40:	f8d2 8004 	ldr.w	r8, [r2, #4]
    for( i = 0; i < nr; i++ )
    {
        if( i == 0 && nr > 1 && serial->p[i] == 0x0 )
            continue;

        ret = mbedtls_snprintf( p, n, "%02X%s",
   d6d44:	f8df a088 	ldr.w	sl, [pc, #136]	; d6dd0 <mbedtls_x509_serial_gets+0x94>
   d6d48:	f8df b088 	ldr.w	fp, [pc, #136]	; d6dd4 <mbedtls_x509_serial_gets+0x98>
{
   d6d4c:	4691      	mov	r9, r2
        ? serial->len  : 28;
   d6d4e:	f1b8 0f21 	cmp.w	r8, #33	; 0x21
        ret = mbedtls_snprintf( p, n, "%02X%s",
   d6d52:	4a1c      	ldr	r2, [pc, #112]	; (d6dc4 <mbedtls_x509_serial_gets+0x88>)
{
   d6d54:	4607      	mov	r7, r0
   d6d56:	460d      	mov	r5, r1
        ? serial->len  : 28;
   d6d58:	bf28      	it	cs
   d6d5a:	f04f 081c 	movcs.w	r8, #28
    n = size;
   d6d5e:	460c      	mov	r4, r1
    for( i = 0; i < nr; i++ )
   d6d60:	2600      	movs	r6, #0
   d6d62:	4546      	cmp	r6, r8
   d6d64:	d020      	beq.n	d6da8 <mbedtls_x509_serial_gets+0x6c>
        if( i == 0 && nr > 1 && serial->p[i] == 0x0 )
   d6d66:	f8d9 3008 	ldr.w	r3, [r9, #8]
   d6d6a:	b926      	cbnz	r6, d6d76 <mbedtls_x509_serial_gets+0x3a>
   d6d6c:	f1b8 0f01 	cmp.w	r8, #1
   d6d70:	d001      	beq.n	d6d76 <mbedtls_x509_serial_gets+0x3a>
   d6d72:	7819      	ldrb	r1, [r3, #0]
   d6d74:	b1b1      	cbz	r1, d6da4 <mbedtls_x509_serial_gets+0x68>
                serial->p[i], ( i < nr - 1 ) ? ":" : "" );
   d6d76:	f108 31ff 	add.w	r1, r8, #4294967295
        ret = mbedtls_snprintf( p, n, "%02X%s",
   d6d7a:	42b1      	cmp	r1, r6
   d6d7c:	bf8c      	ite	hi
   d6d7e:	4651      	movhi	r1, sl
   d6d80:	4659      	movls	r1, fp
   d6d82:	5d9b      	ldrb	r3, [r3, r6]
   d6d84:	9100      	str	r1, [sp, #0]
   d6d86:	4638      	mov	r0, r7
   d6d88:	4621      	mov	r1, r4
   d6d8a:	f00e fd31 	bl	e57f0 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   d6d8e:	2800      	cmp	r0, #0
   d6d90:	4a0c      	ldr	r2, [pc, #48]	; (d6dc4 <mbedtls_x509_serial_gets+0x88>)
   d6d92:	da03      	bge.n	d6d9c <mbedtls_x509_serial_gets+0x60>
   d6d94:	480c      	ldr	r0, [pc, #48]	; (d6dc8 <mbedtls_x509_serial_gets+0x8c>)
        ret = mbedtls_snprintf( p, n, "...." );
        MBEDTLS_X509_SAFE_SNPRINTF;
    }

    return( (int) ( size - n ) );
}
   d6d96:	b003      	add	sp, #12
   d6d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MBEDTLS_X509_SAFE_SNPRINTF;
   d6d9c:	42a0      	cmp	r0, r4
   d6d9e:	d2f9      	bcs.n	d6d94 <mbedtls_x509_serial_gets+0x58>
   d6da0:	1a24      	subs	r4, r4, r0
   d6da2:	4407      	add	r7, r0
    for( i = 0; i < nr; i++ )
   d6da4:	3601      	adds	r6, #1
   d6da6:	e7dc      	b.n	d6d62 <mbedtls_x509_serial_gets+0x26>
    if( nr != serial->len )
   d6da8:	f8d9 3004 	ldr.w	r3, [r9, #4]
   d6dac:	42b3      	cmp	r3, r6
   d6dae:	d007      	beq.n	d6dc0 <mbedtls_x509_serial_gets+0x84>
        ret = mbedtls_snprintf( p, n, "...." );
   d6db0:	4a06      	ldr	r2, [pc, #24]	; (d6dcc <mbedtls_x509_serial_gets+0x90>)
   d6db2:	4621      	mov	r1, r4
   d6db4:	4638      	mov	r0, r7
   d6db6:	f00e fd1b 	bl	e57f0 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   d6dba:	2c04      	cmp	r4, #4
   d6dbc:	d9ea      	bls.n	d6d94 <mbedtls_x509_serial_gets+0x58>
   d6dbe:	3c04      	subs	r4, #4
    return( (int) ( size - n ) );
   d6dc0:	1b28      	subs	r0, r5, r4
   d6dc2:	e7e8      	b.n	d6d96 <mbedtls_x509_serial_gets+0x5a>
   d6dc4:	000eb2f9 	.word	0x000eb2f9
   d6dc8:	ffffd680 	.word	0xffffd680
   d6dcc:	000eb300 	.word	0x000eb300
   d6dd0:	000eb17d 	.word	0x000eb17d
   d6dd4:	000eb611 	.word	0x000eb611

000d6dd8 <mbedtls_x509_sig_alg_gets>:
 * Helper for writing signature algorithms
 */
int mbedtls_x509_sig_alg_gets( char *buf, size_t size, const mbedtls_x509_buf *sig_oid,
                       mbedtls_pk_type_t pk_alg, mbedtls_md_type_t md_alg,
                       const void *sig_opts )
{
   d6dd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   d6ddc:	4607      	mov	r7, r0
   d6dde:	460c      	mov	r4, r1
   d6de0:	4698      	mov	r8, r3
    int ret;
    char *p = buf;
    size_t n = size;
    const char *desc = NULL;

    ret = mbedtls_oid_get_sig_alg_desc( sig_oid, &desc );
   d6de2:	a903      	add	r1, sp, #12
    const char *desc = NULL;
   d6de4:	2300      	movs	r3, #0
    ret = mbedtls_oid_get_sig_alg_desc( sig_oid, &desc );
   d6de6:	4610      	mov	r0, r2
{
   d6de8:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    const char *desc = NULL;
   d6dec:	9303      	str	r3, [sp, #12]
    ret = mbedtls_oid_get_sig_alg_desc( sig_oid, &desc );
   d6dee:	f003 f843 	bl	d9e78 <mbedtls_oid_get_sig_alg_desc>
    if( ret != 0 )
   d6df2:	b158      	cbz	r0, d6e0c <mbedtls_x509_sig_alg_gets+0x34>
        ret = mbedtls_snprintf( p, n, "???"  );
   d6df4:	4a23      	ldr	r2, [pc, #140]	; (d6e84 <mbedtls_x509_sig_alg_gets+0xac>)
   d6df6:	4621      	mov	r1, r4
   d6df8:	4638      	mov	r0, r7
   d6dfa:	f00e fcf9 	bl	e57f0 <snprintf>
    else
        ret = mbedtls_snprintf( p, n, "%s", desc );
    MBEDTLS_X509_SAFE_SNPRINTF;
   d6dfe:	2800      	cmp	r0, #0
        ret = mbedtls_snprintf( p, n, "%s", desc );
   d6e00:	4605      	mov	r5, r0
    MBEDTLS_X509_SAFE_SNPRINTF;
   d6e02:	da0a      	bge.n	d6e1a <mbedtls_x509_sig_alg_gets+0x42>
   d6e04:	4820      	ldr	r0, [pc, #128]	; (d6e88 <mbedtls_x509_sig_alg_gets+0xb0>)
    ((void) md_alg);
    ((void) sig_opts);
#endif /* MBEDTLS_X509_RSASSA_PSS_SUPPORT */

    return( (int)( size - n ) );
}
   d6e06:	b004      	add	sp, #16
   d6e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ret = mbedtls_snprintf( p, n, "%s", desc );
   d6e0c:	9b03      	ldr	r3, [sp, #12]
   d6e0e:	4a1f      	ldr	r2, [pc, #124]	; (d6e8c <mbedtls_x509_sig_alg_gets+0xb4>)
   d6e10:	4621      	mov	r1, r4
   d6e12:	4638      	mov	r0, r7
   d6e14:	f00e fcec 	bl	e57f0 <snprintf>
   d6e18:	e7f1      	b.n	d6dfe <mbedtls_x509_sig_alg_gets+0x26>
    MBEDTLS_X509_SAFE_SNPRINTF;
   d6e1a:	42a0      	cmp	r0, r4
   d6e1c:	d2f2      	bcs.n	d6e04 <mbedtls_x509_sig_alg_gets+0x2c>
    if( pk_alg == MBEDTLS_PK_RSASSA_PSS )
   d6e1e:	f1b8 0f06 	cmp.w	r8, #6
    MBEDTLS_X509_SAFE_SNPRINTF;
   d6e22:	eba4 0600 	sub.w	r6, r4, r0
    if( pk_alg == MBEDTLS_PK_RSASSA_PSS )
   d6e26:	d125      	bne.n	d6e74 <mbedtls_x509_sig_alg_gets+0x9c>
        md_info = mbedtls_md_info_from_type( md_alg );
   d6e28:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   d6e2c:	f005 ff4e 	bl	dcccc <mbedtls_md_info_from_type>
   d6e30:	4680      	mov	r8, r0
        mgf_md_info = mbedtls_md_info_from_type( pss_opts->mgf1_hash_id );
   d6e32:	f899 0000 	ldrb.w	r0, [r9]
   d6e36:	f005 ff49 	bl	dcccc <mbedtls_md_info_from_type>
   d6e3a:	4682      	mov	sl, r0
        ret = mbedtls_snprintf( p, n, " (%s, MGF1-%s, 0x%02X)",
   d6e3c:	f1b8 0f00 	cmp.w	r8, #0
   d6e40:	d01a      	beq.n	d6e78 <mbedtls_x509_sig_alg_gets+0xa0>
                              md_info ? mbedtls_md_get_name( md_info ) : "???",
   d6e42:	4640      	mov	r0, r8
   d6e44:	f006 f87f 	bl	dcf46 <mbedtls_md_get_name>
   d6e48:	4680      	mov	r8, r0
        ret = mbedtls_snprintf( p, n, " (%s, MGF1-%s, 0x%02X)",
   d6e4a:	f1ba 0f00 	cmp.w	sl, #0
   d6e4e:	d016      	beq.n	d6e7e <mbedtls_x509_sig_alg_gets+0xa6>
                              mgf_md_info ? mbedtls_md_get_name( mgf_md_info ) : "???",
   d6e50:	4650      	mov	r0, sl
   d6e52:	f006 f878 	bl	dcf46 <mbedtls_md_get_name>
        ret = mbedtls_snprintf( p, n, " (%s, MGF1-%s, 0x%02X)",
   d6e56:	f8d9 3004 	ldr.w	r3, [r9, #4]
   d6e5a:	4a0d      	ldr	r2, [pc, #52]	; (d6e90 <mbedtls_x509_sig_alg_gets+0xb8>)
   d6e5c:	e9cd 0300 	strd	r0, r3, [sp]
   d6e60:	4631      	mov	r1, r6
   d6e62:	4643      	mov	r3, r8
   d6e64:	1978      	adds	r0, r7, r5
   d6e66:	f00e fcc3 	bl	e57f0 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   d6e6a:	2800      	cmp	r0, #0
   d6e6c:	dbca      	blt.n	d6e04 <mbedtls_x509_sig_alg_gets+0x2c>
   d6e6e:	42b0      	cmp	r0, r6
   d6e70:	d2c8      	bcs.n	d6e04 <mbedtls_x509_sig_alg_gets+0x2c>
   d6e72:	1a36      	subs	r6, r6, r0
    return( (int)( size - n ) );
   d6e74:	1ba0      	subs	r0, r4, r6
   d6e76:	e7c6      	b.n	d6e06 <mbedtls_x509_sig_alg_gets+0x2e>
        ret = mbedtls_snprintf( p, n, " (%s, MGF1-%s, 0x%02X)",
   d6e78:	f8df 8008 	ldr.w	r8, [pc, #8]	; d6e84 <mbedtls_x509_sig_alg_gets+0xac>
   d6e7c:	e7e5      	b.n	d6e4a <mbedtls_x509_sig_alg_gets+0x72>
   d6e7e:	4801      	ldr	r0, [pc, #4]	; (d6e84 <mbedtls_x509_sig_alg_gets+0xac>)
   d6e80:	e7e9      	b.n	d6e56 <mbedtls_x509_sig_alg_gets+0x7e>
   d6e82:	bf00      	nop
   d6e84:	000eb305 	.word	0x000eb305
   d6e88:	ffffd680 	.word	0xffffd680
   d6e8c:	000ec89e 	.word	0x000ec89e
   d6e90:	000eb309 	.word	0x000eb309

000d6e94 <mbedtls_x509_key_size_helper>:

/*
 * Helper for writing "RSA key size", "EC key size", etc
 */
int mbedtls_x509_key_size_helper( char *buf, size_t buf_size, const char *name )
{
   d6e94:	b510      	push	{r4, lr}
   d6e96:	4613      	mov	r3, r2
    char *p = buf;
    size_t n = buf_size;
    int ret;

    ret = mbedtls_snprintf( p, n, "%s key size", name );
   d6e98:	4a06      	ldr	r2, [pc, #24]	; (d6eb4 <mbedtls_x509_key_size_helper+0x20>)
{
   d6e9a:	460c      	mov	r4, r1
    ret = mbedtls_snprintf( p, n, "%s key size", name );
   d6e9c:	f00e fca8 	bl	e57f0 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
   d6ea0:	2800      	cmp	r0, #0
   d6ea2:	db05      	blt.n	d6eb0 <mbedtls_x509_key_size_helper+0x1c>

    return( 0 );
   d6ea4:	4b04      	ldr	r3, [pc, #16]	; (d6eb8 <mbedtls_x509_key_size_helper+0x24>)
   d6ea6:	42a0      	cmp	r0, r4
   d6ea8:	bf2c      	ite	cs
   d6eaa:	4618      	movcs	r0, r3
   d6eac:	2000      	movcc	r0, #0
}
   d6eae:	bd10      	pop	{r4, pc}
    MBEDTLS_X509_SAFE_SNPRINTF;
   d6eb0:	4801      	ldr	r0, [pc, #4]	; (d6eb8 <mbedtls_x509_key_size_helper+0x24>)
   d6eb2:	e7fc      	b.n	d6eae <mbedtls_x509_key_size_helper+0x1a>
   d6eb4:	000eb320 	.word	0x000eb320
   d6eb8:	ffffd680 	.word	0xffffd680

000d6ebc <mbedtls_x509_time_is_past>:

int mbedtls_x509_time_is_past( const mbedtls_x509_time *to )
{
    ((void) to);
    return( 0 );
}
   d6ebc:	2000      	movs	r0, #0
   d6ebe:	4770      	bx	lr

000d6ec0 <mbedtls_x509_time_is_future>:
   d6ec0:	2000      	movs	r0, #0
   d6ec2:	4770      	bx	lr

000d6ec4 <_ZL17sha1_process_wrapPvPKh>:
    mbedtls_free( ctx );
}

static int sha1_process_wrap( void *ctx, const unsigned char *data )
{
    return( mbedtls_internal_sha1_process( (mbedtls_sha1_context *) ctx,
   d6ec4:	f003 b8d0 	b.w	da068 <mbedtls_internal_sha1_process>

000d6ec8 <_ZL15sha1_clone_wrapPvPKv>:
    mbedtls_sha1_clone( (mbedtls_sha1_context *) dst,
   d6ec8:	f003 b8af 	b.w	da02a <mbedtls_sha1_clone>

000d6ecc <_ZL13sha1_ctx_freePv>:
{
   d6ecc:	b510      	push	{r4, lr}
   d6ece:	4604      	mov	r4, r0
    mbedtls_sha1_free( (mbedtls_sha1_context *) ctx );
   d6ed0:	f003 f8a6 	bl	da020 <mbedtls_sha1_free>
    mbedtls_free( ctx );
   d6ed4:	4620      	mov	r0, r4
}
   d6ed6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
   d6eda:	f00e bc71 	b.w	e57c0 <free>

000d6ede <_ZL14sha1_ctx_allocv>:
{
   d6ede:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha1_context ) );
   d6ee0:	215c      	movs	r1, #92	; 0x5c
   d6ee2:	2001      	movs	r0, #1
   d6ee4:	f011 fc78 	bl	e87d8 <calloc>
    if( ctx != NULL )
   d6ee8:	4604      	mov	r4, r0
   d6eea:	b108      	cbz	r0, d6ef0 <_ZL14sha1_ctx_allocv+0x12>
        mbedtls_sha1_init( (mbedtls_sha1_context *) ctx );
   d6eec:	f003 f894 	bl	da018 <mbedtls_sha1_init>
}
   d6ef0:	4620      	mov	r0, r4
   d6ef2:	bd10      	pop	{r4, pc}

000d6ef4 <_ZL16sha1_finish_wrapPvPh>:
    return( mbedtls_sha1_finish_ret( (mbedtls_sha1_context *) ctx, output ) );
   d6ef4:	f003 bff1 	b.w	daeda <mbedtls_sha1_finish_ret>

000d6ef8 <_ZL16sha1_update_wrapPvPKhj>:
    return( mbedtls_sha1_update_ret( (mbedtls_sha1_context *) ctx,
   d6ef8:	f003 bfb2 	b.w	dae60 <mbedtls_sha1_update_ret>

000d6efc <_ZL16sha1_starts_wrapPv>:
    return( mbedtls_sha1_starts_ret( (mbedtls_sha1_context *) ctx ) );
   d6efc:	f003 b89a 	b.w	da034 <mbedtls_sha1_starts_ret>

000d6f00 <_ZL19sha224_process_wrapPvPKh>:
                    (const mbedtls_sha256_context *) src );
}

static int sha224_process_wrap( void *ctx, const unsigned char *data )
{
    return( mbedtls_internal_sha256_process( (mbedtls_sha256_context *) ctx,
   d6f00:	f7fe baa8 	b.w	d5454 <mbedtls_internal_sha256_process>

000d6f04 <_ZL17sha224_clone_wrapPvPKv>:
    mbedtls_sha256_clone( (mbedtls_sha256_context *) dst,
   d6f04:	f7fe ba4f 	b.w	d53a6 <mbedtls_sha256_clone>

000d6f08 <_ZL15sha224_ctx_freePv>:
{
   d6f08:	b510      	push	{r4, lr}
   d6f0a:	4604      	mov	r4, r0
    mbedtls_sha256_free( (mbedtls_sha256_context *) ctx );
   d6f0c:	f7fe fa46 	bl	d539c <mbedtls_sha256_free>
    mbedtls_free( ctx );
   d6f10:	4620      	mov	r0, r4
}
   d6f12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
   d6f16:	f00e bc53 	b.w	e57c0 <free>

000d6f1a <_ZL16sha224_ctx_allocv>:
{
   d6f1a:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha256_context ) );
   d6f1c:	216c      	movs	r1, #108	; 0x6c
   d6f1e:	2001      	movs	r0, #1
   d6f20:	f011 fc5a 	bl	e87d8 <calloc>
    if( ctx != NULL )
   d6f24:	4604      	mov	r4, r0
   d6f26:	b108      	cbz	r0, d6f2c <_ZL16sha224_ctx_allocv+0x12>
        mbedtls_sha256_init( (mbedtls_sha256_context *) ctx );
   d6f28:	f7fe fa34 	bl	d5394 <mbedtls_sha256_init>
}
   d6f2c:	4620      	mov	r0, r4
   d6f2e:	bd10      	pop	{r4, pc}

000d6f30 <_ZL11sha224_wrapPKhjPh>:
    return( mbedtls_sha256_ret( input, ilen, output, 1 ) );
   d6f30:	2301      	movs	r3, #1
   d6f32:	f7fe beac 	b.w	d5c8e <mbedtls_sha256_ret>

000d6f36 <_ZL11sha256_wrapPKhjPh>:
}

static int sha256_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha256_ret( input, ilen, output, 0 ) );
   d6f36:	2300      	movs	r3, #0
   d6f38:	f7fe bea9 	b.w	d5c8e <mbedtls_sha256_ret>

000d6f3c <_ZL18sha224_finish_wrapPvPh>:
    return( mbedtls_sha256_finish_ret( (mbedtls_sha256_context *) ctx,
   d6f3c:	f7fe be25 	b.w	d5b8a <mbedtls_sha256_finish_ret>

000d6f40 <_ZL18sha224_update_wrapPvPKhj>:
    return( mbedtls_sha256_update_ret( (mbedtls_sha256_context *) ctx,
   d6f40:	f7fe bde6 	b.w	d5b10 <mbedtls_sha256_update_ret>

000d6f44 <_ZL18sha224_starts_wrapPv>:
    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 1 ) );
   d6f44:	2101      	movs	r1, #1
   d6f46:	f7fe ba33 	b.w	d53b0 <mbedtls_sha256_starts_ret>

000d6f4a <_ZL18sha256_starts_wrapPv>:
    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 0 ) );
   d6f4a:	2100      	movs	r1, #0
   d6f4c:	f7fe ba30 	b.w	d53b0 <mbedtls_sha256_starts_ret>

000d6f50 <_ZL19sha384_process_wrapPvPKh>:
                    (const mbedtls_sha512_context *) src );
}

static int sha384_process_wrap( void *ctx, const unsigned char *data )
{
    return( mbedtls_internal_sha512_process( (mbedtls_sha512_context *) ctx,
   d6f50:	f00b bff6 	b.w	e2f40 <mbedtls_internal_sha512_process>

000d6f54 <_ZL17sha384_clone_wrapPvPKv>:
    mbedtls_sha512_clone( (mbedtls_sha512_context *) dst,
   d6f54:	f00b bf51 	b.w	e2dfa <mbedtls_sha512_clone>

000d6f58 <_ZL15sha384_ctx_freePv>:
{
   d6f58:	b510      	push	{r4, lr}
   d6f5a:	4604      	mov	r4, r0
    mbedtls_sha512_free( (mbedtls_sha512_context *) ctx );
   d6f5c:	f00b ff48 	bl	e2df0 <mbedtls_sha512_free>
    mbedtls_free( ctx );
   d6f60:	4620      	mov	r0, r4
}
   d6f62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
   d6f66:	f00e bc2b 	b.w	e57c0 <free>

000d6f6a <_ZL16sha384_ctx_allocv>:
{
   d6f6a:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha512_context ) );
   d6f6c:	21d8      	movs	r1, #216	; 0xd8
   d6f6e:	2001      	movs	r0, #1
   d6f70:	f011 fc32 	bl	e87d8 <calloc>
    if( ctx != NULL )
   d6f74:	4604      	mov	r4, r0
   d6f76:	b108      	cbz	r0, d6f7c <_ZL16sha384_ctx_allocv+0x12>
        mbedtls_sha512_init( (mbedtls_sha512_context *) ctx );
   d6f78:	f00b ff36 	bl	e2de8 <mbedtls_sha512_init>
}
   d6f7c:	4620      	mov	r0, r4
   d6f7e:	bd10      	pop	{r4, pc}

000d6f80 <_ZL11sha384_wrapPKhjPh>:
    return( mbedtls_sha512_ret( input, ilen, output, 1 ) );
   d6f80:	2301      	movs	r3, #1
   d6f82:	f00c beb2 	b.w	e3cea <mbedtls_sha512_ret>

000d6f86 <_ZL11sha512_wrapPKhjPh>:
}

static int sha512_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha512_ret( input, ilen, output, 0 ) );
   d6f86:	2300      	movs	r3, #0
   d6f88:	f00c beaf 	b.w	e3cea <mbedtls_sha512_ret>

000d6f8c <_ZL18sha384_finish_wrapPvPh>:
    return( mbedtls_sha512_finish_ret( (mbedtls_sha512_context *) ctx,
   d6f8c:	f00c bd91 	b.w	e3ab2 <mbedtls_sha512_finish_ret>

000d6f90 <_ZL18sha384_update_wrapPvPKhj>:
    return( mbedtls_sha512_update_ret( (mbedtls_sha512_context *) ctx,
   d6f90:	f00c bd3c 	b.w	e3a0c <mbedtls_sha512_update_ret>

000d6f94 <_ZL18sha384_starts_wrapPv>:
    return( mbedtls_sha512_starts_ret( (mbedtls_sha512_context *) ctx, 1 ) );
   d6f94:	2101      	movs	r1, #1
   d6f96:	f00b bf37 	b.w	e2e08 <mbedtls_sha512_starts_ret>

000d6f9a <_ZL18sha512_starts_wrapPv>:
    return( mbedtls_sha512_starts_ret( (mbedtls_sha512_context *) ctx, 0 ) );
   d6f9a:	2100      	movs	r1, #0
   d6f9c:	f00b bf34 	b.w	e2e08 <mbedtls_sha512_starts_ret>

000d6fa0 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>:
 * \param slen      length of the source buffer
 * \param md_ctx    message digest context to use
 */
static int mgf_mask( unsigned char *dst, size_t dlen, unsigned char *src,
                      size_t slen, mbedtls_md_context_t *md_ctx )
{
   d6fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6fa4:	b093      	sub	sp, #76	; 0x4c
   d6fa6:	4606      	mov	r6, r0
   d6fa8:	9f1c      	ldr	r7, [sp, #112]	; 0x70
   d6faa:	460d      	mov	r5, r1
   d6fac:	4690      	mov	r8, r2
    unsigned char *p;
    unsigned int hlen;
    size_t i, use_len;
    int ret = 0;

    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
   d6fae:	2100      	movs	r1, #0
   d6fb0:	2240      	movs	r2, #64	; 0x40
   d6fb2:	a802      	add	r0, sp, #8
{
   d6fb4:	4699      	mov	r9, r3
    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
   d6fb6:	f011 fcb1 	bl	e891c <memset>
    memset( counter, 0, 4 );
   d6fba:	2300      	movs	r3, #0

    hlen = mbedtls_md_get_size( md_ctx->md_info );
   d6fbc:	6838      	ldr	r0, [r7, #0]
    memset( counter, 0, 4 );
   d6fbe:	9301      	str	r3, [sp, #4]
    hlen = mbedtls_md_get_size( md_ctx->md_info );
   d6fc0:	f005 ffbe 	bl	dcf40 <mbedtls_md_get_size>
   d6fc4:	4682      	mov	sl, r0

    /* Generate and apply dbMask */
    p = dst;

    while( dlen > 0 )
   d6fc6:	b395      	cbz	r5, d702e <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x8e>
    {
        use_len = hlen;
        if( dlen < hlen )
   d6fc8:	4555      	cmp	r5, sl
            use_len = dlen;

        if( ( ret = mbedtls_md_starts( md_ctx ) ) != 0 )
   d6fca:	4638      	mov	r0, r7
   d6fcc:	46ab      	mov	fp, r5
   d6fce:	bf28      	it	cs
   d6fd0:	46d3      	movcs	fp, sl
   d6fd2:	f005 fec7 	bl	dcd64 <mbedtls_md_starts>
   d6fd6:	4604      	mov	r4, r0
   d6fd8:	bb50      	cbnz	r0, d7030 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x90>
            goto exit;
        if( ( ret = mbedtls_md_update( md_ctx, src, slen ) ) != 0 )
   d6fda:	464a      	mov	r2, r9
   d6fdc:	4641      	mov	r1, r8
   d6fde:	4638      	mov	r0, r7
   d6fe0:	f005 feca 	bl	dcd78 <mbedtls_md_update>
   d6fe4:	4604      	mov	r4, r0
   d6fe6:	bb18      	cbnz	r0, d7030 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x90>
            goto exit;
        if( ( ret = mbedtls_md_update( md_ctx, counter, 4 ) ) != 0 )
   d6fe8:	2204      	movs	r2, #4
   d6fea:	eb0d 0102 	add.w	r1, sp, r2
   d6fee:	4638      	mov	r0, r7
   d6ff0:	f005 fec2 	bl	dcd78 <mbedtls_md_update>
   d6ff4:	4604      	mov	r4, r0
   d6ff6:	b9d8      	cbnz	r0, d7030 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x90>
            goto exit;
        if( ( ret = mbedtls_md_finish( md_ctx, mask ) ) != 0 )
   d6ff8:	a902      	add	r1, sp, #8
   d6ffa:	4638      	mov	r0, r7
   d6ffc:	f005 fec6 	bl	dcd8c <mbedtls_md_finish>
   d7000:	4604      	mov	r4, r0
   d7002:	b9a8      	cbnz	r0, d7030 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x90>
   d7004:	aa02      	add	r2, sp, #8
   d7006:	eb06 000b 	add.w	r0, r6, fp
            goto exit;

        for( i = 0; i < use_len; ++i )
   d700a:	4286      	cmp	r6, r0
   d700c:	d007      	beq.n	d701e <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x7e>
            *p++ ^= mask[i];
   d700e:	f816 1b01 	ldrb.w	r1, [r6], #1
   d7012:	f812 3b01 	ldrb.w	r3, [r2], #1
   d7016:	404b      	eors	r3, r1
   d7018:	f806 3c01 	strb.w	r3, [r6, #-1]
        for( i = 0; i < use_len; ++i )
   d701c:	e7f5      	b.n	d700a <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x6a>

        counter[3]++;
   d701e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d7022:	3301      	adds	r3, #1
   d7024:	f88d 3007 	strb.w	r3, [sp, #7]

        dlen -= use_len;
   d7028:	eba5 050b 	sub.w	r5, r5, fp
    while( dlen > 0 )
   d702c:	e7cb      	b.n	d6fc6 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x26>
    }

exit:
   d702e:	462c      	mov	r4, r5
    mbedtls_platform_zeroize( mask, sizeof( mask ) );
   d7030:	a802      	add	r0, sp, #8
   d7032:	2140      	movs	r1, #64	; 0x40
   d7034:	f003 ffd2 	bl	dafdc <mbedtls_platform_zeroize>

    return( ret );
}
   d7038:	4620      	mov	r0, r4
   d703a:	b013      	add	sp, #76	; 0x4c
   d703c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d7040 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh>:
static int rsa_rsassa_pkcs1_v15_encode( mbedtls_md_type_t md_alg,
                                        unsigned int hashlen,
                                        const unsigned char *hash,
                                        size_t dst_len,
                                        unsigned char *dst )
{
   d7040:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d7044:	461f      	mov	r7, r3
    size_t oid_size  = 0;
   d7046:	2300      	movs	r3, #0
    size_t nb_pad    = dst_len;
    unsigned char *p = dst;
    const char *oid  = NULL;
   d7048:	e9cd 3300 	strd	r3, r3, [sp]
{
   d704c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   d7050:	460c      	mov	r4, r1
   d7052:	4692      	mov	sl, r2

    /* Are we signing hashed or raw data? */
    if( md_alg != MBEDTLS_MD_NONE )
   d7054:	4680      	mov	r8, r0
   d7056:	2800      	cmp	r0, #0
   d7058:	d03f      	beq.n	d70da <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x9a>
    {
        const mbedtls_md_info_t *md_info = mbedtls_md_info_from_type( md_alg );
   d705a:	f005 fe37 	bl	dcccc <mbedtls_md_info_from_type>
        if( md_info == NULL )
   d705e:	4604      	mov	r4, r0
   d7060:	b908      	cbnz	r0, d7066 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x26>
    /* Just a sanity-check, should be automatic
     * after the initial bounds check. */
    if( p != dst + dst_len )
    {
        mbedtls_platform_zeroize( dst, dst_len );
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   d7062:	4838      	ldr	r0, [pc, #224]	; (d7144 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x104>)
   d7064:	e036      	b.n	d70d4 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x94>
        if( mbedtls_oid_get_oid_by_md( md_alg, &oid, &oid_size ) != 0 )
   d7066:	466a      	mov	r2, sp
   d7068:	a901      	add	r1, sp, #4
   d706a:	4640      	mov	r0, r8
   d706c:	f002 ff8a 	bl	d9f84 <mbedtls_oid_get_oid_by_md>
   d7070:	2800      	cmp	r0, #0
   d7072:	d1f6      	bne.n	d7062 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x22>
        hashlen = mbedtls_md_get_size( md_info );
   d7074:	4620      	mov	r0, r4
   d7076:	f005 ff63 	bl	dcf40 <mbedtls_md_get_size>
        if( 8 + hashlen + oid_size  >= 0x80         ||
   d707a:	9e00      	ldr	r6, [sp, #0]
   d707c:	1982      	adds	r2, r0, r6
   d707e:	f102 0308 	add.w	r3, r2, #8
   d7082:	2b7f      	cmp	r3, #127	; 0x7f
        hashlen = mbedtls_md_get_size( md_info );
   d7084:	4604      	mov	r4, r0
        if( 8 + hashlen + oid_size  >= 0x80         ||
   d7086:	d8ec      	bhi.n	d7062 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x22>
            10 + hashlen + oid_size <  10 + hashlen )
   d7088:	f102 030a 	add.w	r3, r2, #10
   d708c:	f100 010a 	add.w	r1, r0, #10
            10 + hashlen            <  hashlen      ||
   d7090:	428b      	cmp	r3, r1
   d7092:	d3e6      	bcc.n	d7062 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x22>
        if( nb_pad < 10 + hashlen + oid_size )
   d7094:	42bb      	cmp	r3, r7
   d7096:	d8e4      	bhi.n	d7062 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x22>
        nb_pad -= 10 + hashlen + oid_size;
   d7098:	f1a7 060a 	sub.w	r6, r7, #10
   d709c:	1ab6      	subs	r6, r6, r2
    if( nb_pad < 3 + 8 )
   d709e:	2e0a      	cmp	r6, #10
   d70a0:	d9df      	bls.n	d7062 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x22>
    *p++ = 0;
   d70a2:	464b      	mov	r3, r9
   d70a4:	2500      	movs	r5, #0
   d70a6:	f803 5b02 	strb.w	r5, [r3], #2
    nb_pad -= 3;
   d70aa:	3e03      	subs	r6, #3
    *p++ = MBEDTLS_RSA_SIGN;
   d70ac:	2201      	movs	r2, #1
   d70ae:	f889 2001 	strb.w	r2, [r9, #1]
    memset( p, 0xFF, nb_pad );
   d70b2:	4618      	mov	r0, r3
   d70b4:	4632      	mov	r2, r6
   d70b6:	21ff      	movs	r1, #255	; 0xff
   d70b8:	f011 fc30 	bl	e891c <memset>
   d70bc:	4603      	mov	r3, r0
    p += nb_pad;
   d70be:	4430      	add	r0, r6
    *p++ = 0;
   d70c0:	559d      	strb	r5, [r3, r6]
    if( md_alg == MBEDTLS_MD_NONE )
   d70c2:	f1b8 0f00 	cmp.w	r8, #0
   d70c6:	d10c      	bne.n	d70e2 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xa2>
        memcpy( p, hash, hashlen );
   d70c8:	4622      	mov	r2, r4
   d70ca:	4651      	mov	r1, sl
   d70cc:	3001      	adds	r0, #1
   d70ce:	f011 fbfd 	bl	e88cc <memcpy>
        return( 0 );
   d70d2:	4640      	mov	r0, r8
    }

    return( 0 );
}
   d70d4:	b002      	add	sp, #8
   d70d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if( nb_pad < hashlen )
   d70da:	428f      	cmp	r7, r1
   d70dc:	d3c1      	bcc.n	d7062 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x22>
        nb_pad -= hashlen;
   d70de:	1a7e      	subs	r6, r7, r1
   d70e0:	e7dd      	b.n	d709e <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x5e>
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
   d70e2:	2230      	movs	r2, #48	; 0x30
   d70e4:	7042      	strb	r2, [r0, #1]
    *p++ = (unsigned char)( 0x08 + oid_size + hashlen );
   d70e6:	9e00      	ldr	r6, [sp, #0]
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
   d70e8:	70c2      	strb	r2, [r0, #3]
    *p++ = (unsigned char)( 0x08 + oid_size + hashlen );
   d70ea:	f106 0308 	add.w	r3, r6, #8
   d70ee:	fa53 f384 	uxtab	r3, r3, r4
    *p++ = (unsigned char)( 0x04 + oid_size );
   d70f2:	b2f2      	uxtb	r2, r6
    *p++ = (unsigned char)( 0x08 + oid_size + hashlen );
   d70f4:	7083      	strb	r3, [r0, #2]
    *p++ = (unsigned char)( 0x04 + oid_size );
   d70f6:	1d13      	adds	r3, r2, #4
   d70f8:	7103      	strb	r3, [r0, #4]
    *p++ = MBEDTLS_ASN1_OID;
   d70fa:	2306      	movs	r3, #6
   d70fc:	7143      	strb	r3, [r0, #5]
    *p++ = (unsigned char) oid_size;
   d70fe:	1dc3      	adds	r3, r0, #7
   d7100:	7182      	strb	r2, [r0, #6]
    memcpy( p, oid, oid_size );
   d7102:	9901      	ldr	r1, [sp, #4]
   d7104:	4632      	mov	r2, r6
   d7106:	4618      	mov	r0, r3
   d7108:	f011 fbe0 	bl	e88cc <memcpy>
    p += oid_size;
   d710c:	1982      	adds	r2, r0, r6
    *p++ = MBEDTLS_ASN1_NULL;
   d710e:	2105      	movs	r1, #5
    *p++ = MBEDTLS_ASN1_OCTET_STRING;
   d7110:	2304      	movs	r3, #4
    *p++ = MBEDTLS_ASN1_NULL;
   d7112:	5581      	strb	r1, [r0, r6]
    *p++ = (unsigned char)( 0x08 + oid_size + hashlen );
   d7114:	fa5f f884 	uxtb.w	r8, r4
    *p++ = MBEDTLS_ASN1_OCTET_STRING;
   d7118:	7093      	strb	r3, [r2, #2]
    *p++ = (unsigned char) hashlen;
   d711a:	18d3      	adds	r3, r2, r3
    *p++ = 0x00;
   d711c:	7055      	strb	r5, [r2, #1]
    *p++ = (unsigned char) hashlen;
   d711e:	f882 8003 	strb.w	r8, [r2, #3]
    memcpy( p, hash, hashlen );
   d7122:	4651      	mov	r1, sl
   d7124:	4622      	mov	r2, r4
   d7126:	4618      	mov	r0, r3
   d7128:	f011 fbd0 	bl	e88cc <memcpy>
    if( p != dst + dst_len )
   d712c:	eb09 0207 	add.w	r2, r9, r7
    p += hashlen;
   d7130:	4404      	add	r4, r0
    if( p != dst + dst_len )
   d7132:	42a2      	cmp	r2, r4
   d7134:	d004      	beq.n	d7140 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x100>
        mbedtls_platform_zeroize( dst, dst_len );
   d7136:	4639      	mov	r1, r7
   d7138:	4648      	mov	r0, r9
   d713a:	f003 ff4f 	bl	dafdc <mbedtls_platform_zeroize>
   d713e:	e790      	b.n	d7062 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x22>
    return( 0 );
   d7140:	4628      	mov	r0, r5
   d7142:	e7c7      	b.n	d70d4 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x94>
   d7144:	ffffbf80 	.word	0xffffbf80

000d7148 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>:
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
   d7148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
   d714a:	f100 0608 	add.w	r6, r0, #8
   d714e:	6847      	ldr	r7, [r0, #4]
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
   d7150:	4604      	mov	r4, r0
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
   d7152:	4630      	mov	r0, r6
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
   d7154:	460d      	mov	r5, r1
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
   d7156:	f009 fd72 	bl	e0c3e <mbedtls_mpi_size>
   d715a:	4287      	cmp	r7, r0
   d715c:	d116      	bne.n	d718c <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x44>
   d715e:	6863      	ldr	r3, [r4, #4]
   d7160:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   d7164:	d812      	bhi.n	d718c <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x44>
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
   d7166:	2100      	movs	r1, #0
   d7168:	4630      	mov	r0, r6
   d716a:	f009 ff4a 	bl	e1002 <mbedtls_mpi_cmp_int>
   d716e:	2800      	cmp	r0, #0
   d7170:	dd0c      	ble.n	d718c <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x44>
        mbedtls_mpi_get_bit( &ctx->N, 0 ) == 0  )
   d7172:	2100      	movs	r1, #0
   d7174:	4630      	mov	r0, r6
   d7176:	f009 fd1b 	bl	e0bb0 <mbedtls_mpi_get_bit>
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
   d717a:	b138      	cbz	r0, d718c <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x44>
    if( is_priv &&
   d717c:	b945      	cbnz	r5, d7190 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x48>
    if( mbedtls_mpi_cmp_int( &ctx->E, 0 ) <= 0 )
   d717e:	2100      	movs	r1, #0
   d7180:	f104 0014 	add.w	r0, r4, #20
   d7184:	f009 ff3d 	bl	e1002 <mbedtls_mpi_cmp_int>
   d7188:	2800      	cmp	r0, #0
   d718a:	dc1e      	bgt.n	d71ca <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x82>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   d718c:	481b      	ldr	r0, [pc, #108]	; (d71fc <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0xb4>)
   d718e:	e01e      	b.n	d71ce <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x86>
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
   d7190:	f104 062c 	add.w	r6, r4, #44	; 0x2c
   d7194:	2100      	movs	r1, #0
   d7196:	4630      	mov	r0, r6
   d7198:	f009 ff33 	bl	e1002 <mbedtls_mpi_cmp_int>
    if( is_priv &&
   d719c:	2800      	cmp	r0, #0
   d719e:	ddf5      	ble.n	d718c <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x44>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
   d71a0:	2100      	movs	r1, #0
   d71a2:	4630      	mov	r0, r6
   d71a4:	f009 fd04 	bl	e0bb0 <mbedtls_mpi_get_bit>
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
   d71a8:	2800      	cmp	r0, #0
   d71aa:	d0ef      	beq.n	d718c <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x44>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
   d71ac:	f104 0638 	add.w	r6, r4, #56	; 0x38
   d71b0:	2100      	movs	r1, #0
   d71b2:	4630      	mov	r0, r6
   d71b4:	f009 ff25 	bl	e1002 <mbedtls_mpi_cmp_int>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
   d71b8:	2800      	cmp	r0, #0
   d71ba:	dde7      	ble.n	d718c <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x44>
          mbedtls_mpi_get_bit( &ctx->Q, 0 ) == 0  ) )
   d71bc:	2100      	movs	r1, #0
   d71be:	4630      	mov	r0, r6
   d71c0:	f009 fcf6 	bl	e0bb0 <mbedtls_mpi_get_bit>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
   d71c4:	2800      	cmp	r0, #0
   d71c6:	d1da      	bne.n	d717e <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x36>
   d71c8:	e7e0      	b.n	d718c <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x44>
    if( is_priv &&
   d71ca:	b90d      	cbnz	r5, d71d0 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x88>
    return( 0 );
   d71cc:	2000      	movs	r0, #0
}
   d71ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
   d71d0:	2100      	movs	r1, #0
   d71d2:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d71d6:	f009 ff14 	bl	e1002 <mbedtls_mpi_cmp_int>
    if( is_priv &&
   d71da:	2800      	cmp	r0, #0
   d71dc:	ddd6      	ble.n	d718c <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x44>
          mbedtls_mpi_cmp_int( &ctx->DQ, 0 ) <= 0  ) )
   d71de:	2100      	movs	r1, #0
   d71e0:	f104 0050 	add.w	r0, r4, #80	; 0x50
   d71e4:	f009 ff0d 	bl	e1002 <mbedtls_mpi_cmp_int>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
   d71e8:	2800      	cmp	r0, #0
   d71ea:	ddcf      	ble.n	d718c <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x44>
        mbedtls_mpi_cmp_int( &ctx->QP, 0 ) <= 0 )
   d71ec:	2100      	movs	r1, #0
   d71ee:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   d71f2:	f009 ff06 	bl	e1002 <mbedtls_mpi_cmp_int>
    if( is_priv &&
   d71f6:	2800      	cmp	r0, #0
   d71f8:	dce8      	bgt.n	d71cc <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x84>
   d71fa:	e7c7      	b.n	d718c <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x44>
   d71fc:	ffffbf80 	.word	0xffffbf80

000d7200 <mbedtls_rsa_import_raw>:
{
   d7200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d7204:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
   d7208:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   d720a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   d720c:	4604      	mov	r4, r0
   d720e:	461d      	mov	r5, r3
    if( N != NULL )
   d7210:	b149      	cbz	r1, d7226 <mbedtls_rsa_import_raw+0x26>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->N, N, N_len ) );
   d7212:	f100 0908 	add.w	r9, r0, #8
   d7216:	4648      	mov	r0, r9
   d7218:	f009 fd17 	bl	e0c4a <mbedtls_mpi_read_binary>
   d721c:	b9a0      	cbnz	r0, d7248 <mbedtls_rsa_import_raw+0x48>
        ctx->len = mbedtls_mpi_size( &ctx->N );
   d721e:	4648      	mov	r0, r9
   d7220:	f009 fd0d 	bl	e0c3e <mbedtls_mpi_size>
   d7224:	6060      	str	r0, [r4, #4]
    if( P != NULL )
   d7226:	b93d      	cbnz	r5, d7238 <mbedtls_rsa_import_raw+0x38>
    if( Q != NULL )
   d7228:	f1b8 0f00 	cmp.w	r8, #0
   d722c:	d10f      	bne.n	d724e <mbedtls_rsa_import_raw+0x4e>
    if( D != NULL )
   d722e:	b9bf      	cbnz	r7, d7260 <mbedtls_rsa_import_raw+0x60>
    if( E != NULL )
   d7230:	b9fe      	cbnz	r6, d7272 <mbedtls_rsa_import_raw+0x72>
    return( 0 );
   d7232:	2000      	movs	r0, #0
}
   d7234:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->P, P, P_len ) );
   d7238:	9a08      	ldr	r2, [sp, #32]
   d723a:	4629      	mov	r1, r5
   d723c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d7240:	f009 fd03 	bl	e0c4a <mbedtls_mpi_read_binary>
   d7244:	2800      	cmp	r0, #0
   d7246:	d0ef      	beq.n	d7228 <mbedtls_rsa_import_raw+0x28>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
   d7248:	f5a0 4081 	sub.w	r0, r0, #16512	; 0x4080
   d724c:	e7f2      	b.n	d7234 <mbedtls_rsa_import_raw+0x34>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->Q, Q, Q_len ) );
   d724e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d7250:	4641      	mov	r1, r8
   d7252:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d7256:	f009 fcf8 	bl	e0c4a <mbedtls_mpi_read_binary>
   d725a:	2800      	cmp	r0, #0
   d725c:	d0e7      	beq.n	d722e <mbedtls_rsa_import_raw+0x2e>
   d725e:	e7f3      	b.n	d7248 <mbedtls_rsa_import_raw+0x48>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->D, D, D_len ) );
   d7260:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   d7262:	4639      	mov	r1, r7
   d7264:	f104 0020 	add.w	r0, r4, #32
   d7268:	f009 fcef 	bl	e0c4a <mbedtls_mpi_read_binary>
   d726c:	2800      	cmp	r0, #0
   d726e:	d0df      	beq.n	d7230 <mbedtls_rsa_import_raw+0x30>
   d7270:	e7ea      	b.n	d7248 <mbedtls_rsa_import_raw+0x48>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->E, E, E_len ) );
   d7272:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   d7274:	4631      	mov	r1, r6
   d7276:	f104 0014 	add.w	r0, r4, #20
   d727a:	f009 fce6 	bl	e0c4a <mbedtls_mpi_read_binary>
    if( ret != 0 )
   d727e:	2800      	cmp	r0, #0
   d7280:	d0d7      	beq.n	d7232 <mbedtls_rsa_import_raw+0x32>
   d7282:	e7e1      	b.n	d7248 <mbedtls_rsa_import_raw+0x48>

000d7284 <mbedtls_rsa_complete>:
{
   d7284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
   d7288:	f100 0908 	add.w	r9, r0, #8
{
   d728c:	b085      	sub	sp, #20
   d728e:	4604      	mov	r4, r0
    have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
   d7290:	2100      	movs	r1, #0
   d7292:	4648      	mov	r0, r9
   d7294:	f009 feb5 	bl	e1002 <mbedtls_mpi_cmp_int>
    have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
   d7298:	f104 052c 	add.w	r5, r4, #44	; 0x2c
   d729c:	2100      	movs	r1, #0
    have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
   d729e:	4680      	mov	r8, r0
    have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
   d72a0:	4628      	mov	r0, r5
   d72a2:	f009 feae 	bl	e1002 <mbedtls_mpi_cmp_int>
    have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
   d72a6:	f104 0638 	add.w	r6, r4, #56	; 0x38
    have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
   d72aa:	9003      	str	r0, [sp, #12]
    have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
   d72ac:	2100      	movs	r1, #0
   d72ae:	4630      	mov	r0, r6
   d72b0:	f009 fea7 	bl	e1002 <mbedtls_mpi_cmp_int>
    have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );
   d72b4:	f104 0720 	add.w	r7, r4, #32
    have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
   d72b8:	9002      	str	r0, [sp, #8]
    have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );
   d72ba:	2100      	movs	r1, #0
   d72bc:	4638      	mov	r0, r7
   d72be:	f009 fea0 	bl	e1002 <mbedtls_mpi_cmp_int>
    have_E = ( mbedtls_mpi_cmp_int( &ctx->E, 0 ) != 0 );
   d72c2:	f104 0a14 	add.w	sl, r4, #20
    have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );
   d72c6:	4683      	mov	fp, r0
    have_E = ( mbedtls_mpi_cmp_int( &ctx->E, 0 ) != 0 );
   d72c8:	2100      	movs	r1, #0
   d72ca:	4650      	mov	r0, sl
   d72cc:	f009 fe99 	bl	e1002 <mbedtls_mpi_cmp_int>
    n_missing  =              have_P &&  have_Q &&  have_D && have_E;
   d72d0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   d72d4:	2a00      	cmp	r2, #0
   d72d6:	d04d      	beq.n	d7374 <mbedtls_rsa_complete+0xf0>
   d72d8:	b11b      	cbz	r3, d72e2 <mbedtls_rsa_complete+0x5e>
   d72da:	f1bb 0f00 	cmp.w	fp, #0
   d72de:	d000      	beq.n	d72e2 <mbedtls_rsa_complete+0x5e>
   d72e0:	b958      	cbnz	r0, d72fa <mbedtls_rsa_complete+0x76>
    pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
   d72e2:	f1b8 0f00 	cmp.w	r8, #0
   d72e6:	d100      	bne.n	d72ea <mbedtls_rsa_complete+0x66>
    d_missing  =              have_P &&  have_Q && !have_D && have_E;
   d72e8:	b12a      	cbz	r2, d72f6 <mbedtls_rsa_complete+0x72>
   d72ea:	b123      	cbz	r3, d72f6 <mbedtls_rsa_complete+0x72>
   d72ec:	f1bb 0f00 	cmp.w	fp, #0
   d72f0:	d101      	bne.n	d72f6 <mbedtls_rsa_complete+0x72>
   d72f2:	2800      	cmp	r0, #0
   d72f4:	d138      	bne.n	d7368 <mbedtls_rsa_complete+0xe4>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   d72f6:	482a      	ldr	r0, [pc, #168]	; (d73a0 <mbedtls_rsa_complete+0x11c>)
   d72f8:	e00a      	b.n	d7310 <mbedtls_rsa_complete+0x8c>
    is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;
   d72fa:	f1b8 0f00 	cmp.w	r8, #0
   d72fe:	d111      	bne.n	d7324 <mbedtls_rsa_complete+0xa0>
        if( ( ret = mbedtls_mpi_mul_mpi( &ctx->N, &ctx->P,
   d7300:	4632      	mov	r2, r6
   d7302:	4629      	mov	r1, r5
   d7304:	4648      	mov	r0, r9
   d7306:	f009 ff98 	bl	e123a <mbedtls_mpi_mul_mpi>
   d730a:	b120      	cbz	r0, d7316 <mbedtls_rsa_complete+0x92>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
   d730c:	f5a0 4081 	sub.w	r0, r0, #16512	; 0x4080
}
   d7310:	b005      	add	sp, #20
   d7312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ctx->len = mbedtls_mpi_size( &ctx->N );
   d7316:	4648      	mov	r0, r9
   d7318:	f009 fc91 	bl	e0c3e <mbedtls_mpi_size>
   d731c:	6060      	str	r0, [r4, #4]
    else if( d_missing )
   d731e:	f1b8 0f00 	cmp.w	r8, #0
   d7322:	d11a      	bne.n	d735a <mbedtls_rsa_complete+0xd6>
        ret = mbedtls_rsa_deduce_crt( &ctx->P,  &ctx->Q,  &ctx->D,
   d7324:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   d7328:	9301      	str	r3, [sp, #4]
   d732a:	f104 0350 	add.w	r3, r4, #80	; 0x50
   d732e:	9300      	str	r3, [sp, #0]
   d7330:	463a      	mov	r2, r7
   d7332:	f104 0344 	add.w	r3, r4, #68	; 0x44
   d7336:	4631      	mov	r1, r6
   d7338:	4628      	mov	r0, r5
   d733a:	f04f 0801 	mov.w	r8, #1
   d733e:	f00d f88b 	bl	e4458 <mbedtls_rsa_deduce_crt>
        if( ret != 0 )
   d7342:	b328      	cbz	r0, d7390 <mbedtls_rsa_complete+0x10c>
   d7344:	e7e2      	b.n	d730c <mbedtls_rsa_complete+0x88>
        ret = mbedtls_rsa_deduce_primes( &ctx->N, &ctx->E, &ctx->D,
   d7346:	9600      	str	r6, [sp, #0]
   d7348:	462b      	mov	r3, r5
   d734a:	463a      	mov	r2, r7
   d734c:	4651      	mov	r1, sl
   d734e:	4648      	mov	r0, r9
   d7350:	f00c fde6 	bl	e3f20 <mbedtls_rsa_deduce_primes>
        if( ( ret = mbedtls_rsa_deduce_private_exponent( &ctx->P,
   d7354:	2800      	cmp	r0, #0
   d7356:	d0e5      	beq.n	d7324 <mbedtls_rsa_complete+0xa0>
   d7358:	e7d8      	b.n	d730c <mbedtls_rsa_complete+0x88>
   d735a:	463b      	mov	r3, r7
   d735c:	4652      	mov	r2, sl
   d735e:	4631      	mov	r1, r6
   d7360:	4628      	mov	r0, r5
   d7362:	f00c fecd 	bl	e4100 <mbedtls_rsa_deduce_private_exponent>
   d7366:	e7f5      	b.n	d7354 <mbedtls_rsa_complete+0xd0>
    if( !have_N && have_P && have_Q )
   d7368:	f1b8 0f00 	cmp.w	r8, #0
   d736c:	d1f5      	bne.n	d735a <mbedtls_rsa_complete+0xd6>
   d736e:	f04f 0801 	mov.w	r8, #1
   d7372:	e7c5      	b.n	d7300 <mbedtls_rsa_complete+0x7c>
    pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
   d7374:	f1b8 0f00 	cmp.w	r8, #0
   d7378:	d0bd      	beq.n	d72f6 <mbedtls_rsa_complete+0x72>
   d737a:	b923      	cbnz	r3, d7386 <mbedtls_rsa_complete+0x102>
   d737c:	f1bb 0f00 	cmp.w	fp, #0
   d7380:	d001      	beq.n	d7386 <mbedtls_rsa_complete+0x102>
   d7382:	2800      	cmp	r0, #0
   d7384:	d1df      	bne.n	d7346 <mbedtls_rsa_complete+0xc2>
    is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;
   d7386:	ea53 080b 	orrs.w	r8, r3, fp
   d738a:	d1b4      	bne.n	d72f6 <mbedtls_rsa_complete+0x72>
   d738c:	2800      	cmp	r0, #0
   d738e:	d0b2      	beq.n	d72f6 <mbedtls_rsa_complete+0x72>
    return( rsa_check_context( ctx, is_priv, 1 ) );
   d7390:	4641      	mov	r1, r8
   d7392:	4620      	mov	r0, r4
}
   d7394:	b005      	add	sp, #20
   d7396:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return( rsa_check_context( ctx, is_priv, 1 ) );
   d739a:	f7ff bed5 	b.w	d7148 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
   d739e:	bf00      	nop
   d73a0:	ffffbf80 	.word	0xffffbf80

000d73a4 <mbedtls_rsa_init>:
{
   d73a4:	b570      	push	{r4, r5, r6, lr}
   d73a6:	4604      	mov	r4, r0
   d73a8:	460e      	mov	r6, r1
   d73aa:	4615      	mov	r5, r2
    memset( ctx, 0, sizeof( mbedtls_rsa_context ) );
   d73ac:	2100      	movs	r1, #0
   d73ae:	22ac      	movs	r2, #172	; 0xac
   d73b0:	f011 fab4 	bl	e891c <memset>
    ctx->hash_id = hash_id;
   d73b4:	e9c4 6529 	strd	r6, r5, [r4, #164]	; 0xa4
}
   d73b8:	bd70      	pop	{r4, r5, r6, pc}

000d73ba <mbedtls_rsa_get_len>:
}
   d73ba:	6840      	ldr	r0, [r0, #4]
   d73bc:	4770      	bx	lr
	...

000d73c0 <mbedtls_rsa_check_pubkey>:
{
   d73c0:	b570      	push	{r4, r5, r6, lr}
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
   d73c2:	2100      	movs	r1, #0
{
   d73c4:	4604      	mov	r4, r0
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
   d73c6:	f7ff febf 	bl	d7148 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
   d73ca:	4605      	mov	r5, r0
   d73cc:	b9b8      	cbnz	r0, d73fe <mbedtls_rsa_check_pubkey+0x3e>
    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 )
   d73ce:	f104 0608 	add.w	r6, r4, #8
   d73d2:	4630      	mov	r0, r6
   d73d4:	f009 fc18 	bl	e0c08 <mbedtls_mpi_bitlen>
   d73d8:	287f      	cmp	r0, #127	; 0x7f
   d73da:	d910      	bls.n	d73fe <mbedtls_rsa_check_pubkey+0x3e>
    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
   d73dc:	3414      	adds	r4, #20
   d73de:	4629      	mov	r1, r5
   d73e0:	4620      	mov	r0, r4
   d73e2:	f009 fbe5 	bl	e0bb0 <mbedtls_mpi_get_bit>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
   d73e6:	b150      	cbz	r0, d73fe <mbedtls_rsa_check_pubkey+0x3e>
   d73e8:	4620      	mov	r0, r4
   d73ea:	f009 fc0d 	bl	e0c08 <mbedtls_mpi_bitlen>
    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
   d73ee:	2801      	cmp	r0, #1
   d73f0:	d905      	bls.n	d73fe <mbedtls_rsa_check_pubkey+0x3e>
        mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )
   d73f2:	4631      	mov	r1, r6
   d73f4:	4620      	mov	r0, r4
   d73f6:	f009 fdc3 	bl	e0f80 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
   d73fa:	2800      	cmp	r0, #0
   d73fc:	db00      	blt.n	d7400 <mbedtls_rsa_check_pubkey+0x40>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
   d73fe:	4d01      	ldr	r5, [pc, #4]	; (d7404 <mbedtls_rsa_check_pubkey+0x44>)
}
   d7400:	4628      	mov	r0, r5
   d7402:	bd70      	pop	{r4, r5, r6, pc}
   d7404:	ffffbe00 	.word	0xffffbe00

000d7408 <mbedtls_rsa_check_privkey>:
{
   d7408:	b5f0      	push	{r4, r5, r6, r7, lr}
   d740a:	b085      	sub	sp, #20
   d740c:	4604      	mov	r4, r0
    if( mbedtls_rsa_check_pubkey( ctx ) != 0 ||
   d740e:	f7ff ffd7 	bl	d73c0 <mbedtls_rsa_check_pubkey>
   d7412:	bb28      	cbnz	r0, d7460 <mbedtls_rsa_check_privkey+0x58>
        rsa_check_context( ctx, 1 /* private */, 1 /* blinding */ ) != 0 )
   d7414:	2101      	movs	r1, #1
   d7416:	4620      	mov	r0, r4
   d7418:	f7ff fe96 	bl	d7148 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
    if( mbedtls_rsa_check_pubkey( ctx ) != 0 ||
   d741c:	bb00      	cbnz	r0, d7460 <mbedtls_rsa_check_privkey+0x58>
    if( mbedtls_rsa_validate_params( &ctx->N, &ctx->P, &ctx->Q,
   d741e:	f104 0314 	add.w	r3, r4, #20
   d7422:	f104 052c 	add.w	r5, r4, #44	; 0x2c
   d7426:	f104 0638 	add.w	r6, r4, #56	; 0x38
   d742a:	f104 0720 	add.w	r7, r4, #32
   d742e:	e9cd 0001 	strd	r0, r0, [sp, #4]
   d7432:	9300      	str	r3, [sp, #0]
   d7434:	4632      	mov	r2, r6
   d7436:	463b      	mov	r3, r7
   d7438:	4629      	mov	r1, r5
   d743a:	f104 0008 	add.w	r0, r4, #8
   d743e:	f00c ff45 	bl	e42cc <mbedtls_rsa_validate_params>
   d7442:	b968      	cbnz	r0, d7460 <mbedtls_rsa_check_privkey+0x58>
    else if( mbedtls_rsa_validate_crt( &ctx->P, &ctx->Q, &ctx->D,
   d7444:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   d7448:	9301      	str	r3, [sp, #4]
   d744a:	f104 0350 	add.w	r3, r4, #80	; 0x50
   d744e:	9300      	str	r3, [sp, #0]
   d7450:	463a      	mov	r2, r7
   d7452:	f104 0344 	add.w	r3, r4, #68	; 0x44
   d7456:	4631      	mov	r1, r6
   d7458:	4628      	mov	r0, r5
   d745a:	f00c feaf 	bl	e41bc <mbedtls_rsa_validate_crt>
   d745e:	b100      	cbz	r0, d7462 <mbedtls_rsa_check_privkey+0x5a>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
   d7460:	4801      	ldr	r0, [pc, #4]	; (d7468 <mbedtls_rsa_check_privkey+0x60>)
}
   d7462:	b005      	add	sp, #20
   d7464:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7466:	bf00      	nop
   d7468:	ffffbe00 	.word	0xffffbe00

000d746c <mbedtls_rsa_check_pub_priv>:
{
   d746c:	b538      	push	{r3, r4, r5, lr}
   d746e:	4605      	mov	r5, r0
   d7470:	460c      	mov	r4, r1
    if( mbedtls_rsa_check_pubkey( pub )  != 0 ||
   d7472:	f7ff ffa5 	bl	d73c0 <mbedtls_rsa_check_pubkey>
   d7476:	b988      	cbnz	r0, d749c <mbedtls_rsa_check_pub_priv+0x30>
        mbedtls_rsa_check_privkey( prv ) != 0 )
   d7478:	4620      	mov	r0, r4
   d747a:	f7ff ffc5 	bl	d7408 <mbedtls_rsa_check_privkey>
    if( mbedtls_rsa_check_pubkey( pub )  != 0 ||
   d747e:	b968      	cbnz	r0, d749c <mbedtls_rsa_check_pub_priv+0x30>
    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
   d7480:	f104 0108 	add.w	r1, r4, #8
   d7484:	f105 0008 	add.w	r0, r5, #8
   d7488:	f009 fd7a 	bl	e0f80 <mbedtls_mpi_cmp_mpi>
   d748c:	b930      	cbnz	r0, d749c <mbedtls_rsa_check_pub_priv+0x30>
        mbedtls_mpi_cmp_mpi( &pub->E, &prv->E ) != 0 )
   d748e:	f104 0114 	add.w	r1, r4, #20
   d7492:	f105 0014 	add.w	r0, r5, #20
   d7496:	f009 fd73 	bl	e0f80 <mbedtls_mpi_cmp_mpi>
    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
   d749a:	b100      	cbz	r0, d749e <mbedtls_rsa_check_pub_priv+0x32>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
   d749c:	4800      	ldr	r0, [pc, #0]	; (d74a0 <mbedtls_rsa_check_pub_priv+0x34>)
}
   d749e:	bd38      	pop	{r3, r4, r5, pc}
   d74a0:	ffffbe00 	.word	0xffffbe00

000d74a4 <mbedtls_rsa_public>:
{
   d74a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d74a6:	460c      	mov	r4, r1
   d74a8:	b089      	sub	sp, #36	; 0x24
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
   d74aa:	2100      	movs	r1, #0
{
   d74ac:	4605      	mov	r5, r0
   d74ae:	4616      	mov	r6, r2
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
   d74b0:	f7ff fe4a 	bl	d7148 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
   d74b4:	bb88      	cbnz	r0, d751a <mbedtls_rsa_public+0x76>
    mbedtls_mpi_init( &T );
   d74b6:	a805      	add	r0, sp, #20
   d74b8:	f009 fa83 	bl	e09c2 <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
   d74bc:	4621      	mov	r1, r4
   d74be:	686a      	ldr	r2, [r5, #4]
   d74c0:	a805      	add	r0, sp, #20
   d74c2:	f009 fbc2 	bl	e0c4a <mbedtls_mpi_read_binary>
   d74c6:	4604      	mov	r4, r0
   d74c8:	b9d8      	cbnz	r0, d7502 <mbedtls_rsa_public+0x5e>
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
   d74ca:	f105 0308 	add.w	r3, r5, #8
   d74ce:	4619      	mov	r1, r3
   d74d0:	a805      	add	r0, sp, #20
   d74d2:	9303      	str	r3, [sp, #12]
   d74d4:	f009 fd54 	bl	e0f80 <mbedtls_mpi_cmp_mpi>
   d74d8:	2800      	cmp	r0, #0
   d74da:	9b03      	ldr	r3, [sp, #12]
   d74dc:	da1a      	bge.n	d7514 <mbedtls_rsa_public+0x70>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
   d74de:	f105 0268 	add.w	r2, r5, #104	; 0x68
   d74e2:	a905      	add	r1, sp, #20
   d74e4:	9200      	str	r2, [sp, #0]
   d74e6:	4608      	mov	r0, r1
   d74e8:	f105 0214 	add.w	r2, r5, #20
    olen = ctx->len;
   d74ec:	686f      	ldr	r7, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
   d74ee:	f00a f90f 	bl	e1710 <mbedtls_mpi_exp_mod>
   d74f2:	4604      	mov	r4, r0
   d74f4:	b928      	cbnz	r0, d7502 <mbedtls_rsa_public+0x5e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
   d74f6:	463a      	mov	r2, r7
   d74f8:	4631      	mov	r1, r6
   d74fa:	a805      	add	r0, sp, #20
   d74fc:	f009 fbdd 	bl	e0cba <mbedtls_mpi_write_binary>
   d7500:	4604      	mov	r4, r0
    mbedtls_mpi_free( &T );
   d7502:	a805      	add	r0, sp, #20
   d7504:	f009 fa63 	bl	e09ce <mbedtls_mpi_free>
    if( ret != 0 )
   d7508:	b10c      	cbz	r4, d750e <mbedtls_rsa_public+0x6a>
        return( MBEDTLS_ERR_RSA_PUBLIC_FAILED + ret );
   d750a:	f5a4 4485 	sub.w	r4, r4, #17024	; 0x4280
}
   d750e:	4620      	mov	r0, r4
   d7510:	b009      	add	sp, #36	; 0x24
   d7512:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
   d7514:	f06f 0403 	mvn.w	r4, #3
   d7518:	e7f3      	b.n	d7502 <mbedtls_rsa_public+0x5e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   d751a:	4c01      	ldr	r4, [pc, #4]	; (d7520 <mbedtls_rsa_public+0x7c>)
   d751c:	e7f7      	b.n	d750e <mbedtls_rsa_public+0x6a>
   d751e:	bf00      	nop
   d7520:	ffffbf80 	.word	0xffffbf80

000d7524 <mbedtls_rsa_private>:
{
   d7524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7528:	460d      	mov	r5, r1
   d752a:	b0a3      	sub	sp, #140	; 0x8c
    if( rsa_check_context( ctx, 1             /* private key checks */,
   d752c:	2101      	movs	r1, #1
{
   d752e:	4604      	mov	r4, r0
   d7530:	4617      	mov	r7, r2
   d7532:	461e      	mov	r6, r3
    if( rsa_check_context( ctx, 1             /* private key checks */,
   d7534:	f7ff fe08 	bl	d7148 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
   d7538:	2800      	cmp	r0, #0
   d753a:	f040 81a7 	bne.w	d788c <mbedtls_rsa_private+0x368>
    mbedtls_mpi_init( &T );
   d753e:	a804      	add	r0, sp, #16
   d7540:	f009 fa3f 	bl	e09c2 <mbedtls_mpi_init>
    mbedtls_mpi_init( &P1 );
   d7544:	a807      	add	r0, sp, #28
   d7546:	f009 fa3c 	bl	e09c2 <mbedtls_mpi_init>
    mbedtls_mpi_init( &Q1 );
   d754a:	a80a      	add	r0, sp, #40	; 0x28
   d754c:	f009 fa39 	bl	e09c2 <mbedtls_mpi_init>
    mbedtls_mpi_init( &R );
   d7550:	a80d      	add	r0, sp, #52	; 0x34
   d7552:	f009 fa36 	bl	e09c2 <mbedtls_mpi_init>
    if( f_rng != NULL )
   d7556:	b12d      	cbz	r5, d7564 <mbedtls_rsa_private+0x40>
        mbedtls_mpi_init( &DP_blind );
   d7558:	a816      	add	r0, sp, #88	; 0x58
   d755a:	f009 fa32 	bl	e09c2 <mbedtls_mpi_init>
        mbedtls_mpi_init( &DQ_blind );
   d755e:	a819      	add	r0, sp, #100	; 0x64
   d7560:	f009 fa2f 	bl	e09c2 <mbedtls_mpi_init>
    mbedtls_mpi_init( &TP ); mbedtls_mpi_init( &TQ );
   d7564:	a810      	add	r0, sp, #64	; 0x40
   d7566:	f009 fa2c 	bl	e09c2 <mbedtls_mpi_init>
   d756a:	a813      	add	r0, sp, #76	; 0x4c
   d756c:	f009 fa29 	bl	e09c2 <mbedtls_mpi_init>
    mbedtls_mpi_init( &I );
   d7570:	a81c      	add	r0, sp, #112	; 0x70
   d7572:	f009 fa26 	bl	e09c2 <mbedtls_mpi_init>
    mbedtls_mpi_init( &C );
   d7576:	a81f      	add	r0, sp, #124	; 0x7c
   d7578:	f009 fa23 	bl	e09c2 <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
   d757c:	6862      	ldr	r2, [r4, #4]
   d757e:	4631      	mov	r1, r6
   d7580:	a804      	add	r0, sp, #16
   d7582:	f009 fb62 	bl	e0c4a <mbedtls_mpi_read_binary>
   d7586:	4603      	mov	r3, r0
   d7588:	2800      	cmp	r0, #0
   d758a:	f040 814d 	bne.w	d7828 <mbedtls_rsa_private+0x304>
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
   d758e:	f104 0608 	add.w	r6, r4, #8
   d7592:	4631      	mov	r1, r6
   d7594:	a804      	add	r0, sp, #16
   d7596:	f009 fcf3 	bl	e0f80 <mbedtls_mpi_cmp_mpi>
   d759a:	2800      	cmp	r0, #0
   d759c:	f280 816f 	bge.w	d787e <mbedtls_rsa_private+0x35a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &I, &T ) );
   d75a0:	a904      	add	r1, sp, #16
   d75a2:	a81c      	add	r0, sp, #112	; 0x70
   d75a4:	f009 fa8a 	bl	e0abc <mbedtls_mpi_copy>
   d75a8:	4603      	mov	r3, r0
   d75aa:	2800      	cmp	r0, #0
   d75ac:	f040 813c 	bne.w	d7828 <mbedtls_rsa_private+0x304>
    mbedtls_mpi *DP = &ctx->DP;
   d75b0:	f104 0a44 	add.w	sl, r4, #68	; 0x44
    mbedtls_mpi *DQ = &ctx->DQ;
   d75b4:	f104 0950 	add.w	r9, r4, #80	; 0x50
    if( f_rng != NULL )
   d75b8:	2d00      	cmp	r5, #0
   d75ba:	f000 8090 	beq.w	d76de <mbedtls_rsa_private+0x1ba>
    if( ctx->Vf.p != NULL )
   d75be:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   d75c2:	2b00      	cmp	r3, #0
   d75c4:	f000 80ee 	beq.w	d77a4 <mbedtls_rsa_private+0x280>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vi, &ctx->Vi, &ctx->Vi ) );
   d75c8:	f104 018c 	add.w	r1, r4, #140	; 0x8c
   d75cc:	460a      	mov	r2, r1
   d75ce:	4608      	mov	r0, r1
   d75d0:	9103      	str	r1, [sp, #12]
   d75d2:	f009 fe32 	bl	e123a <mbedtls_mpi_mul_mpi>
   d75d6:	4603      	mov	r3, r0
   d75d8:	2800      	cmp	r0, #0
   d75da:	f040 8125 	bne.w	d7828 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vi, &ctx->Vi, &ctx->N ) );
   d75de:	9903      	ldr	r1, [sp, #12]
   d75e0:	4632      	mov	r2, r6
   d75e2:	4608      	mov	r0, r1
   d75e4:	f00a f861 	bl	e16aa <mbedtls_mpi_mod_mpi>
   d75e8:	4603      	mov	r3, r0
   d75ea:	2800      	cmp	r0, #0
   d75ec:	f040 811c 	bne.w	d7828 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vf, &ctx->Vf, &ctx->Vf ) );
   d75f0:	f104 0198 	add.w	r1, r4, #152	; 0x98
   d75f4:	460a      	mov	r2, r1
   d75f6:	4608      	mov	r0, r1
   d75f8:	9103      	str	r1, [sp, #12]
   d75fa:	f009 fe1e 	bl	e123a <mbedtls_mpi_mul_mpi>
   d75fe:	4603      	mov	r3, r0
   d7600:	2800      	cmp	r0, #0
   d7602:	f040 8111 	bne.w	d7828 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vf, &ctx->Vf, &ctx->N ) );
   d7606:	9903      	ldr	r1, [sp, #12]
   d7608:	4632      	mov	r2, r6
   d760a:	4608      	mov	r0, r1
   d760c:	f00a f84d 	bl	e16aa <mbedtls_mpi_mod_mpi>
   d7610:	4603      	mov	r3, r0
   d7612:	2800      	cmp	r0, #0
   d7614:	f040 8108 	bne.w	d7828 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vi ) );
   d7618:	a904      	add	r1, sp, #16
   d761a:	f104 028c 	add.w	r2, r4, #140	; 0x8c
   d761e:	4608      	mov	r0, r1
   d7620:	f009 fe0b 	bl	e123a <mbedtls_mpi_mul_mpi>
   d7624:	4603      	mov	r3, r0
   d7626:	2800      	cmp	r0, #0
   d7628:	f040 80fe 	bne.w	d7828 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
   d762c:	a904      	add	r1, sp, #16
   d762e:	4632      	mov	r2, r6
   d7630:	4608      	mov	r0, r1
   d7632:	f00a f83a 	bl	e16aa <mbedtls_mpi_mod_mpi>
   d7636:	4603      	mov	r3, r0
   d7638:	2800      	cmp	r0, #0
   d763a:	f040 80f5 	bne.w	d7828 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &P1, &ctx->P, 1 ) );
   d763e:	2201      	movs	r2, #1
   d7640:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   d7644:	a807      	add	r0, sp, #28
   d7646:	f009 fde2 	bl	e120e <mbedtls_mpi_sub_int>
   d764a:	4603      	mov	r3, r0
   d764c:	2800      	cmp	r0, #0
   d764e:	f040 80eb 	bne.w	d7828 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &Q1, &ctx->Q, 1 ) );
   d7652:	2201      	movs	r2, #1
   d7654:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d7658:	a80a      	add	r0, sp, #40	; 0x28
   d765a:	f009 fdd8 	bl	e120e <mbedtls_mpi_sub_int>
   d765e:	4603      	mov	r3, r0
   d7660:	2800      	cmp	r0, #0
   d7662:	f040 80e1 	bne.w	d7828 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,
   d7666:	463b      	mov	r3, r7
   d7668:	462a      	mov	r2, r5
   d766a:	211c      	movs	r1, #28
   d766c:	a80d      	add	r0, sp, #52	; 0x34
   d766e:	f00a fafb 	bl	e1c68 <mbedtls_mpi_fill_random>
   d7672:	4603      	mov	r3, r0
   d7674:	2800      	cmp	r0, #0
   d7676:	f040 80d7 	bne.w	d7828 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DP_blind, &P1, &R ) );
   d767a:	aa0d      	add	r2, sp, #52	; 0x34
   d767c:	a907      	add	r1, sp, #28
   d767e:	a816      	add	r0, sp, #88	; 0x58
   d7680:	f009 fddb 	bl	e123a <mbedtls_mpi_mul_mpi>
   d7684:	4603      	mov	r3, r0
   d7686:	2800      	cmp	r0, #0
   d7688:	f040 80ce 	bne.w	d7828 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DP_blind, &DP_blind,
   d768c:	a916      	add	r1, sp, #88	; 0x58
   d768e:	4652      	mov	r2, sl
   d7690:	4608      	mov	r0, r1
   d7692:	f009 fd61 	bl	e1158 <mbedtls_mpi_add_mpi>
   d7696:	4603      	mov	r3, r0
   d7698:	2800      	cmp	r0, #0
   d769a:	f040 80c5 	bne.w	d7828 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,
   d769e:	463b      	mov	r3, r7
   d76a0:	462a      	mov	r2, r5
   d76a2:	211c      	movs	r1, #28
   d76a4:	a80d      	add	r0, sp, #52	; 0x34
   d76a6:	f00a fadf 	bl	e1c68 <mbedtls_mpi_fill_random>
   d76aa:	4603      	mov	r3, r0
   d76ac:	2800      	cmp	r0, #0
   d76ae:	f040 80bb 	bne.w	d7828 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DQ_blind, &Q1, &R ) );
   d76b2:	aa0d      	add	r2, sp, #52	; 0x34
   d76b4:	a90a      	add	r1, sp, #40	; 0x28
   d76b6:	a819      	add	r0, sp, #100	; 0x64
   d76b8:	f009 fdbf 	bl	e123a <mbedtls_mpi_mul_mpi>
   d76bc:	4603      	mov	r3, r0
   d76be:	2800      	cmp	r0, #0
   d76c0:	f040 80b2 	bne.w	d7828 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DQ_blind, &DQ_blind,
   d76c4:	a919      	add	r1, sp, #100	; 0x64
   d76c6:	464a      	mov	r2, r9
   d76c8:	4608      	mov	r0, r1
   d76ca:	f009 fd45 	bl	e1158 <mbedtls_mpi_add_mpi>
   d76ce:	4603      	mov	r3, r0
   d76d0:	2800      	cmp	r0, #0
   d76d2:	f040 80a9 	bne.w	d7828 <mbedtls_rsa_private+0x304>
        DQ = &DQ_blind;
   d76d6:	f10d 0964 	add.w	r9, sp, #100	; 0x64
        DP = &DP_blind;
   d76da:	f10d 0a58 	add.w	sl, sp, #88	; 0x58
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &TP, &T, DP, &ctx->P, &ctx->RP ) );
   d76de:	f104 0374 	add.w	r3, r4, #116	; 0x74
   d76e2:	f104 082c 	add.w	r8, r4, #44	; 0x2c
   d76e6:	9300      	str	r3, [sp, #0]
   d76e8:	4652      	mov	r2, sl
   d76ea:	4643      	mov	r3, r8
   d76ec:	a904      	add	r1, sp, #16
   d76ee:	a810      	add	r0, sp, #64	; 0x40
   d76f0:	f00a f80e 	bl	e1710 <mbedtls_mpi_exp_mod>
   d76f4:	4603      	mov	r3, r0
   d76f6:	2800      	cmp	r0, #0
   d76f8:	f040 8096 	bne.w	d7828 <mbedtls_rsa_private+0x304>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &TQ, &T, DQ, &ctx->Q, &ctx->RQ ) );
   d76fc:	f104 0380 	add.w	r3, r4, #128	; 0x80
   d7700:	f104 0738 	add.w	r7, r4, #56	; 0x38
   d7704:	9300      	str	r3, [sp, #0]
   d7706:	464a      	mov	r2, r9
   d7708:	463b      	mov	r3, r7
   d770a:	a904      	add	r1, sp, #16
   d770c:	a813      	add	r0, sp, #76	; 0x4c
   d770e:	f009 ffff 	bl	e1710 <mbedtls_mpi_exp_mod>
   d7712:	4603      	mov	r3, r0
   d7714:	2800      	cmp	r0, #0
   d7716:	f040 8087 	bne.w	d7828 <mbedtls_rsa_private+0x304>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T, &TP, &TQ ) );
   d771a:	aa13      	add	r2, sp, #76	; 0x4c
   d771c:	a910      	add	r1, sp, #64	; 0x40
   d771e:	a804      	add	r0, sp, #16
   d7720:	f009 fd3c 	bl	e119c <mbedtls_mpi_sub_mpi>
   d7724:	4603      	mov	r3, r0
   d7726:	2800      	cmp	r0, #0
   d7728:	d17e      	bne.n	d7828 <mbedtls_rsa_private+0x304>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &TP, &T, &ctx->QP ) );
   d772a:	f104 025c 	add.w	r2, r4, #92	; 0x5c
   d772e:	a904      	add	r1, sp, #16
   d7730:	a810      	add	r0, sp, #64	; 0x40
   d7732:	f009 fd82 	bl	e123a <mbedtls_mpi_mul_mpi>
   d7736:	4603      	mov	r3, r0
   d7738:	2800      	cmp	r0, #0
   d773a:	d175      	bne.n	d7828 <mbedtls_rsa_private+0x304>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &TP, &ctx->P ) );
   d773c:	4642      	mov	r2, r8
   d773e:	a910      	add	r1, sp, #64	; 0x40
   d7740:	a804      	add	r0, sp, #16
   d7742:	f009 ffb2 	bl	e16aa <mbedtls_mpi_mod_mpi>
   d7746:	4603      	mov	r3, r0
   d7748:	2800      	cmp	r0, #0
   d774a:	d16d      	bne.n	d7828 <mbedtls_rsa_private+0x304>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &TP, &T, &ctx->Q ) );
   d774c:	463a      	mov	r2, r7
   d774e:	a904      	add	r1, sp, #16
   d7750:	a810      	add	r0, sp, #64	; 0x40
   d7752:	f009 fd72 	bl	e123a <mbedtls_mpi_mul_mpi>
   d7756:	4603      	mov	r3, r0
   d7758:	2800      	cmp	r0, #0
   d775a:	d165      	bne.n	d7828 <mbedtls_rsa_private+0x304>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T, &TQ, &TP ) );
   d775c:	aa10      	add	r2, sp, #64	; 0x40
   d775e:	a913      	add	r1, sp, #76	; 0x4c
   d7760:	a804      	add	r0, sp, #16
   d7762:	f009 fcf9 	bl	e1158 <mbedtls_mpi_add_mpi>
   d7766:	4603      	mov	r3, r0
   d7768:	2800      	cmp	r0, #0
   d776a:	d15d      	bne.n	d7828 <mbedtls_rsa_private+0x304>
    if( f_rng != NULL )
   d776c:	2d00      	cmp	r5, #0
   d776e:	d14b      	bne.n	d7808 <mbedtls_rsa_private+0x2e4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &C, &T, &ctx->E,
   d7770:	f104 0368 	add.w	r3, r4, #104	; 0x68
   d7774:	9300      	str	r3, [sp, #0]
   d7776:	f104 0214 	add.w	r2, r4, #20
   d777a:	4633      	mov	r3, r6
   d777c:	a904      	add	r1, sp, #16
   d777e:	a81f      	add	r0, sp, #124	; 0x7c
   d7780:	f009 ffc6 	bl	e1710 <mbedtls_mpi_exp_mod>
   d7784:	4603      	mov	r3, r0
   d7786:	2800      	cmp	r0, #0
   d7788:	d14e      	bne.n	d7828 <mbedtls_rsa_private+0x304>
    if( mbedtls_mpi_cmp_mpi( &C, &I ) != 0 )
   d778a:	a91c      	add	r1, sp, #112	; 0x70
   d778c:	a81f      	add	r0, sp, #124	; 0x7c
   d778e:	f009 fbf7 	bl	e0f80 <mbedtls_mpi_cmp_mpi>
   d7792:	2800      	cmp	r0, #0
   d7794:	d178      	bne.n	d7888 <mbedtls_rsa_private+0x364>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
   d7796:	6862      	ldr	r2, [r4, #4]
   d7798:	992c      	ldr	r1, [sp, #176]	; 0xb0
   d779a:	a804      	add	r0, sp, #16
   d779c:	f009 fa8d 	bl	e0cba <mbedtls_mpi_write_binary>
   d77a0:	4603      	mov	r3, r0
cleanup:
   d77a2:	e041      	b.n	d7828 <mbedtls_rsa_private+0x304>
   d77a4:	230c      	movs	r3, #12
   d77a6:	9303      	str	r3, [sp, #12]
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
   d77a8:	f104 0b98 	add.w	fp, r4, #152	; 0x98
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );
   d77ac:	f104 088c 	add.w	r8, r4, #140	; 0x8c
        if( count++ > 10 )
   d77b0:	9b03      	ldr	r3, [sp, #12]
   d77b2:	3b01      	subs	r3, #1
   d77b4:	9303      	str	r3, [sp, #12]
   d77b6:	d065      	beq.n	d7884 <mbedtls_rsa_private+0x360>
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
   d77b8:	6861      	ldr	r1, [r4, #4]
   d77ba:	463b      	mov	r3, r7
   d77bc:	462a      	mov	r2, r5
   d77be:	3901      	subs	r1, #1
   d77c0:	4658      	mov	r0, fp
   d77c2:	f00a fa51 	bl	e1c68 <mbedtls_mpi_fill_random>
   d77c6:	4603      	mov	r3, r0
   d77c8:	bb70      	cbnz	r0, d7828 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );
   d77ca:	4632      	mov	r2, r6
   d77cc:	4659      	mov	r1, fp
   d77ce:	4640      	mov	r0, r8
   d77d0:	f00a f9c5 	bl	e1b5e <mbedtls_mpi_gcd>
   d77d4:	4603      	mov	r3, r0
   d77d6:	bb38      	cbnz	r0, d7828 <mbedtls_rsa_private+0x304>
    } while( mbedtls_mpi_cmp_int( &ctx->Vi, 1 ) != 0 );
   d77d8:	2101      	movs	r1, #1
   d77da:	4640      	mov	r0, r8
   d77dc:	f009 fc11 	bl	e1002 <mbedtls_mpi_cmp_int>
   d77e0:	2800      	cmp	r0, #0
   d77e2:	d1e5      	bne.n	d77b0 <mbedtls_rsa_private+0x28c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &ctx->Vi, &ctx->Vf, &ctx->N ) );
   d77e4:	4632      	mov	r2, r6
   d77e6:	4659      	mov	r1, fp
   d77e8:	4640      	mov	r0, r8
   d77ea:	f00a fa72 	bl	e1cd2 <mbedtls_mpi_inv_mod>
   d77ee:	4603      	mov	r3, r0
   d77f0:	b9d0      	cbnz	r0, d7828 <mbedtls_rsa_private+0x304>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &ctx->Vi, &ctx->Vi, &ctx->E, &ctx->N, &ctx->RN ) );
   d77f2:	f104 0368 	add.w	r3, r4, #104	; 0x68
   d77f6:	9300      	str	r3, [sp, #0]
   d77f8:	f104 0214 	add.w	r2, r4, #20
   d77fc:	4633      	mov	r3, r6
   d77fe:	4641      	mov	r1, r8
   d7800:	4640      	mov	r0, r8
   d7802:	f009 ff85 	bl	e1710 <mbedtls_mpi_exp_mod>
   d7806:	e703      	b.n	d7610 <mbedtls_rsa_private+0xec>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vf ) );
   d7808:	a904      	add	r1, sp, #16
   d780a:	f104 0298 	add.w	r2, r4, #152	; 0x98
   d780e:	4608      	mov	r0, r1
   d7810:	f009 fd13 	bl	e123a <mbedtls_mpi_mul_mpi>
   d7814:	4603      	mov	r3, r0
   d7816:	b938      	cbnz	r0, d7828 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
   d7818:	a904      	add	r1, sp, #16
   d781a:	4632      	mov	r2, r6
   d781c:	4608      	mov	r0, r1
   d781e:	f009 ff44 	bl	e16aa <mbedtls_mpi_mod_mpi>
   d7822:	4603      	mov	r3, r0
   d7824:	2800      	cmp	r0, #0
   d7826:	d0a3      	beq.n	d7770 <mbedtls_rsa_private+0x24c>
    mbedtls_mpi_free( &P1 );
   d7828:	a807      	add	r0, sp, #28
   d782a:	9303      	str	r3, [sp, #12]
   d782c:	f009 f8cf 	bl	e09ce <mbedtls_mpi_free>
    mbedtls_mpi_free( &Q1 );
   d7830:	a80a      	add	r0, sp, #40	; 0x28
   d7832:	f009 f8cc 	bl	e09ce <mbedtls_mpi_free>
    mbedtls_mpi_free( &R );
   d7836:	a80d      	add	r0, sp, #52	; 0x34
   d7838:	f009 f8c9 	bl	e09ce <mbedtls_mpi_free>
    if( f_rng != NULL )
   d783c:	9b03      	ldr	r3, [sp, #12]
   d783e:	b135      	cbz	r5, d784e <mbedtls_rsa_private+0x32a>
        mbedtls_mpi_free( &DP_blind );
   d7840:	a816      	add	r0, sp, #88	; 0x58
   d7842:	f009 f8c4 	bl	e09ce <mbedtls_mpi_free>
        mbedtls_mpi_free( &DQ_blind );
   d7846:	a819      	add	r0, sp, #100	; 0x64
   d7848:	f009 f8c1 	bl	e09ce <mbedtls_mpi_free>
   d784c:	9b03      	ldr	r3, [sp, #12]
   d784e:	9303      	str	r3, [sp, #12]
    mbedtls_mpi_free( &T );
   d7850:	a804      	add	r0, sp, #16
   d7852:	f009 f8bc 	bl	e09ce <mbedtls_mpi_free>
    mbedtls_mpi_free( &TP ); mbedtls_mpi_free( &TQ );
   d7856:	a810      	add	r0, sp, #64	; 0x40
   d7858:	f009 f8b9 	bl	e09ce <mbedtls_mpi_free>
   d785c:	a813      	add	r0, sp, #76	; 0x4c
   d785e:	f009 f8b6 	bl	e09ce <mbedtls_mpi_free>
    mbedtls_mpi_free( &C );
   d7862:	a81f      	add	r0, sp, #124	; 0x7c
   d7864:	f009 f8b3 	bl	e09ce <mbedtls_mpi_free>
    mbedtls_mpi_free( &I );
   d7868:	a81c      	add	r0, sp, #112	; 0x70
   d786a:	f009 f8b0 	bl	e09ce <mbedtls_mpi_free>
    if( ret != 0 )
   d786e:	9b03      	ldr	r3, [sp, #12]
   d7870:	b10b      	cbz	r3, d7876 <mbedtls_rsa_private+0x352>
        return( MBEDTLS_ERR_RSA_PRIVATE_FAILED + ret );
   d7872:	f5a3 4386 	sub.w	r3, r3, #17152	; 0x4300
}
   d7876:	4618      	mov	r0, r3
   d7878:	b023      	add	sp, #140	; 0x8c
   d787a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
   d787e:	f06f 0303 	mvn.w	r3, #3
   d7882:	e7d1      	b.n	d7828 <mbedtls_rsa_private+0x304>
            return( MBEDTLS_ERR_RSA_RNG_FAILED );
   d7884:	4b02      	ldr	r3, [pc, #8]	; (d7890 <mbedtls_rsa_private+0x36c>)
   d7886:	e7cf      	b.n	d7828 <mbedtls_rsa_private+0x304>
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
   d7888:	4b02      	ldr	r3, [pc, #8]	; (d7894 <mbedtls_rsa_private+0x370>)
   d788a:	e7cd      	b.n	d7828 <mbedtls_rsa_private+0x304>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   d788c:	4b02      	ldr	r3, [pc, #8]	; (d7898 <mbedtls_rsa_private+0x374>)
   d788e:	e7f2      	b.n	d7876 <mbedtls_rsa_private+0x352>
   d7890:	ffffbb80 	.word	0xffffbb80
   d7894:	ffffbc80 	.word	0xffffbc80
   d7898:	ffffbf80 	.word	0xffffbf80

000d789c <mbedtls_rsa_rsaes_oaep_encrypt>:
{
   d789c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d78a0:	b08b      	sub	sp, #44	; 0x2c
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
   d78a2:	2b01      	cmp	r3, #1
{
   d78a4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
   d78a8:	9102      	str	r1, [sp, #8]
   d78aa:	4607      	mov	r7, r0
   d78ac:	4693      	mov	fp, r2
   d78ae:	9303      	str	r3, [sp, #12]
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
   d78b0:	d108      	bne.n	d78c4 <mbedtls_rsa_rsaes_oaep_encrypt+0x28>
   d78b2:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   d78b6:	2b01      	cmp	r3, #1
   d78b8:	d004      	beq.n	d78c4 <mbedtls_rsa_rsaes_oaep_encrypt+0x28>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   d78ba:	4c42      	ldr	r4, [pc, #264]	; (d79c4 <mbedtls_rsa_rsaes_oaep_encrypt+0x128>)
}
   d78bc:	4620      	mov	r0, r4
   d78be:	b00b      	add	sp, #44	; 0x2c
   d78c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( f_rng == NULL )
   d78c4:	9b02      	ldr	r3, [sp, #8]
   d78c6:	2b00      	cmp	r3, #0
   d78c8:	d0f7      	beq.n	d78ba <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
   d78ca:	f897 00a8 	ldrb.w	r0, [r7, #168]	; 0xa8
   d78ce:	f005 f9fd 	bl	dcccc <mbedtls_md_info_from_type>
    if( md_info == NULL )
   d78d2:	4682      	mov	sl, r0
   d78d4:	2800      	cmp	r0, #0
   d78d6:	d0f0      	beq.n	d78ba <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
    olen = ctx->len;
   d78d8:	687e      	ldr	r6, [r7, #4]
    hlen = mbedtls_md_get_size( md_info );
   d78da:	f005 fb31 	bl	dcf40 <mbedtls_md_get_size>
    if( ilen + 2 * hlen + 2 < ilen || olen < ilen + 2 * hlen + 2 )
   d78de:	b202      	sxth	r2, r0
   d78e0:	0053      	lsls	r3, r2, #1
   d78e2:	9304      	str	r3, [sp, #16]
   d78e4:	9b16      	ldr	r3, [sp, #88]	; 0x58
   d78e6:	3302      	adds	r3, #2
   d78e8:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   d78ec:	9a16      	ldr	r2, [sp, #88]	; 0x58
   d78ee:	4293      	cmp	r3, r2
    hlen = mbedtls_md_get_size( md_info );
   d78f0:	4605      	mov	r5, r0
    if( ilen + 2 * hlen + 2 < ilen || olen < ilen + 2 * hlen + 2 )
   d78f2:	d3e2      	bcc.n	d78ba <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
   d78f4:	42b3      	cmp	r3, r6
   d78f6:	d8e0      	bhi.n	d78ba <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
    memset( output, 0, olen );
   d78f8:	4632      	mov	r2, r6
   d78fa:	2100      	movs	r1, #0
    *p++ = 0;
   d78fc:	46c1      	mov	r9, r8
    memset( output, 0, olen );
   d78fe:	4640      	mov	r0, r8
   d7900:	f011 f80c 	bl	e891c <memset>
    *p++ = 0;
   d7904:	2300      	movs	r3, #0
   d7906:	f809 3b01 	strb.w	r3, [r9], #1
    if( ( ret = f_rng( p_rng, p, hlen ) ) != 0 )
   d790a:	462a      	mov	r2, r5
   d790c:	9b02      	ldr	r3, [sp, #8]
   d790e:	4649      	mov	r1, r9
   d7910:	4658      	mov	r0, fp
   d7912:	4798      	blx	r3
   d7914:	b110      	cbz	r0, d791c <mbedtls_rsa_rsaes_oaep_encrypt+0x80>
        return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
   d7916:	f5a0 4489 	sub.w	r4, r0, #17536	; 0x4480
   d791a:	e7cf      	b.n	d78bc <mbedtls_rsa_rsaes_oaep_encrypt+0x20>
    p += hlen;
   d791c:	eb09 0305 	add.w	r3, r9, r5
    if( ( ret = mbedtls_md( md_info, label, label_len, p ) ) != 0 )
   d7920:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   d7924:	4650      	mov	r0, sl
   d7926:	9305      	str	r3, [sp, #20]
   d7928:	f005 fa3a 	bl	dcda0 <mbedtls_md>
   d792c:	4604      	mov	r4, r0
   d792e:	2800      	cmp	r0, #0
   d7930:	d1c4      	bne.n	d78bc <mbedtls_rsa_rsaes_oaep_encrypt+0x20>
    p += olen - 2 * hlen - 2 - ilen;
   d7932:	9b16      	ldr	r3, [sp, #88]	; 0x58
   d7934:	1af2      	subs	r2, r6, r3
   d7936:	3a02      	subs	r2, #2
   d7938:	9b04      	ldr	r3, [sp, #16]
   d793a:	442a      	add	r2, r5
   d793c:	1ad2      	subs	r2, r2, r3
   d793e:	9b05      	ldr	r3, [sp, #20]
    *p++ = 1;
   d7940:	2101      	movs	r1, #1
    p += olen - 2 * hlen - 2 - ilen;
   d7942:	1898      	adds	r0, r3, r2
    *p++ = 1;
   d7944:	5499      	strb	r1, [r3, r2]
    memcpy( p, input, ilen );
   d7946:	3001      	adds	r0, #1
   d7948:	e9dd 2116 	ldrd	r2, r1, [sp, #88]	; 0x58
   d794c:	f010 ffbe 	bl	e88cc <memcpy>
    mbedtls_md_init( &md_ctx );
   d7950:	a807      	add	r0, sp, #28
   d7952:	f005 f9c7 	bl	dcce4 <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
   d7956:	4622      	mov	r2, r4
   d7958:	4651      	mov	r1, sl
   d795a:	a807      	add	r0, sp, #28
   d795c:	f005 f9e2 	bl	dcd24 <mbedtls_md_setup>
   d7960:	4604      	mov	r4, r0
   d7962:	b9b8      	cbnz	r0, d7994 <mbedtls_rsa_rsaes_oaep_encrypt+0xf8>
    if( ( ret = mgf_mask( output + hlen + 1, olen - hlen - 1, output + 1, hlen,
   d7964:	f105 0a01 	add.w	sl, r5, #1
   d7968:	3e01      	subs	r6, #1
   d796a:	ab07      	add	r3, sp, #28
   d796c:	44c2      	add	sl, r8
   d796e:	1b76      	subs	r6, r6, r5
   d7970:	9300      	str	r3, [sp, #0]
   d7972:	464a      	mov	r2, r9
   d7974:	462b      	mov	r3, r5
   d7976:	4631      	mov	r1, r6
   d7978:	4650      	mov	r0, sl
   d797a:	f7ff fb11 	bl	d6fa0 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
   d797e:	4604      	mov	r4, r0
   d7980:	b940      	cbnz	r0, d7994 <mbedtls_rsa_rsaes_oaep_encrypt+0xf8>
    if( ( ret = mgf_mask( output + 1, hlen, output + hlen + 1, olen - hlen - 1,
   d7982:	ab07      	add	r3, sp, #28
   d7984:	9300      	str	r3, [sp, #0]
   d7986:	4652      	mov	r2, sl
   d7988:	4633      	mov	r3, r6
   d798a:	4629      	mov	r1, r5
   d798c:	4648      	mov	r0, r9
   d798e:	f7ff fb07 	bl	d6fa0 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
   d7992:	4604      	mov	r4, r0
    mbedtls_md_free( &md_ctx );
   d7994:	a807      	add	r0, sp, #28
   d7996:	f005 f9aa 	bl	dccee <mbedtls_md_free>
    if( ret != 0 )
   d799a:	2c00      	cmp	r4, #0
   d799c:	d18e      	bne.n	d78bc <mbedtls_rsa_rsaes_oaep_encrypt+0x20>
            ? mbedtls_rsa_public(  ctx, output, output )
   d799e:	9b03      	ldr	r3, [sp, #12]
   d79a0:	b933      	cbnz	r3, d79b0 <mbedtls_rsa_rsaes_oaep_encrypt+0x114>
   d79a2:	4642      	mov	r2, r8
   d79a4:	4641      	mov	r1, r8
   d79a6:	4638      	mov	r0, r7
   d79a8:	f7ff fd7c 	bl	d74a4 <mbedtls_rsa_public>
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
   d79ac:	4604      	mov	r4, r0
   d79ae:	e785      	b.n	d78bc <mbedtls_rsa_rsaes_oaep_encrypt+0x20>
   d79b0:	9902      	ldr	r1, [sp, #8]
   d79b2:	f8cd 8000 	str.w	r8, [sp]
   d79b6:	4643      	mov	r3, r8
   d79b8:	465a      	mov	r2, fp
   d79ba:	4638      	mov	r0, r7
   d79bc:	f7ff fdb2 	bl	d7524 <mbedtls_rsa_private>
   d79c0:	e7f4      	b.n	d79ac <mbedtls_rsa_rsaes_oaep_encrypt+0x110>
   d79c2:	bf00      	nop
   d79c4:	ffffbf80 	.word	0xffffbf80

000d79c8 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt>:
{
   d79c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d79cc:	4698      	mov	r8, r3
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
   d79ce:	f1b8 0f01 	cmp.w	r8, #1
{
   d79d2:	e9dd a30c 	ldrd	sl, r3, [sp, #48]	; 0x30
   d79d6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   d79d8:	4606      	mov	r6, r0
   d79da:	460f      	mov	r7, r1
   d79dc:	4691      	mov	r9, r2
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
   d79de:	d106      	bne.n	d79ee <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x26>
   d79e0:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
   d79e4:	b11a      	cbz	r2, d79ee <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x26>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   d79e6:	4830      	ldr	r0, [pc, #192]	; (d7aa8 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xe0>)
}
   d79e8:	b003      	add	sp, #12
   d79ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( ilen + 11 < ilen || olen < ilen + 11 )
   d79ee:	f11a 0f0c 	cmn.w	sl, #12
    olen = ctx->len;
   d79f2:	6875      	ldr	r5, [r6, #4]
    if( ilen + 11 < ilen || olen < ilen + 11 )
   d79f4:	d8f7      	bhi.n	d79e6 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x1e>
   d79f6:	f10a 020b 	add.w	r2, sl, #11
   d79fa:	42aa      	cmp	r2, r5
   d79fc:	d8f3      	bhi.n	d79e6 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x1e>
    nb_pad = olen - 3 - ilen;
   d79fe:	eba5 050a 	sub.w	r5, r5, sl
    *p++ = 0;
   d7a02:	2200      	movs	r2, #0
    nb_pad = olen - 3 - ilen;
   d7a04:	3d03      	subs	r5, #3
    *p++ = 0;
   d7a06:	7022      	strb	r2, [r4, #0]
    if( mode == MBEDTLS_RSA_PUBLIC )
   d7a08:	f1b8 0f00 	cmp.w	r8, #0
   d7a0c:	d11b      	bne.n	d7a46 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x7e>
        if( f_rng == NULL )
   d7a0e:	2f00      	cmp	r7, #0
   d7a10:	d0e9      	beq.n	d79e6 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x1e>
        *p++ = MBEDTLS_RSA_CRYPT;
   d7a12:	2202      	movs	r2, #2
   d7a14:	4415      	add	r5, r2
   d7a16:	1ca1      	adds	r1, r4, #2
   d7a18:	7062      	strb	r2, [r4, #1]
   d7a1a:	4425      	add	r5, r4
        while( nb_pad-- > 0 )
   d7a1c:	42a9      	cmp	r1, r5
   d7a1e:	d01e      	beq.n	d7a5e <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x96>
   d7a20:	f04f 0b64 	mov.w	fp, #100	; 0x64
                ret = f_rng( p_rng, p, 1 );
   d7a24:	2201      	movs	r2, #1
   d7a26:	4648      	mov	r0, r9
   d7a28:	9301      	str	r3, [sp, #4]
   d7a2a:	9100      	str	r1, [sp, #0]
   d7a2c:	47b8      	blx	r7
            } while( *p == 0 && --rng_dl && ret == 0 );
   d7a2e:	9900      	ldr	r1, [sp, #0]
   d7a30:	9b01      	ldr	r3, [sp, #4]
   d7a32:	780a      	ldrb	r2, [r1, #0]
   d7a34:	bb9a      	cbnz	r2, d7a9e <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xd6>
   d7a36:	f1bb 0b01 	subs.w	fp, fp, #1
   d7a3a:	d001      	beq.n	d7a40 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x78>
   d7a3c:	2800      	cmp	r0, #0
   d7a3e:	d0f1      	beq.n	d7a24 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x5c>
                return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
   d7a40:	f5a0 4089 	sub.w	r0, r0, #17536	; 0x4480
   d7a44:	e7d0      	b.n	d79e8 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x20>
        *p++ = MBEDTLS_RSA_SIGN;
   d7a46:	4622      	mov	r2, r4
   d7a48:	2101      	movs	r1, #1
   d7a4a:	f802 1f01 	strb.w	r1, [r2, #1]!
   d7a4e:	1869      	adds	r1, r5, r1
   d7a50:	1ca0      	adds	r0, r4, #2
   d7a52:	4421      	add	r1, r4
            *p++ = 0xFF;
   d7a54:	f04f 0cff 	mov.w	ip, #255	; 0xff
        while( nb_pad-- > 0 )
   d7a58:	4291      	cmp	r1, r2
   d7a5a:	d113      	bne.n	d7a84 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xbc>
   d7a5c:	4405      	add	r5, r0
    *p++ = 0;
   d7a5e:	4628      	mov	r0, r5
   d7a60:	2200      	movs	r2, #0
   d7a62:	f800 2b01 	strb.w	r2, [r0], #1
    memcpy( p, input, ilen );
   d7a66:	4619      	mov	r1, r3
   d7a68:	4652      	mov	r2, sl
   d7a6a:	f010 ff2f 	bl	e88cc <memcpy>
            ? mbedtls_rsa_public(  ctx, output, output )
   d7a6e:	f1b8 0f00 	cmp.w	r8, #0
   d7a72:	d10a      	bne.n	d7a8a <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xc2>
   d7a74:	4622      	mov	r2, r4
   d7a76:	4621      	mov	r1, r4
   d7a78:	4630      	mov	r0, r6
}
   d7a7a:	b003      	add	sp, #12
   d7a7c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            ? mbedtls_rsa_public(  ctx, output, output )
   d7a80:	f7ff bd10 	b.w	d74a4 <mbedtls_rsa_public>
            *p++ = 0xFF;
   d7a84:	f802 cf01 	strb.w	ip, [r2, #1]!
        while( nb_pad-- > 0 )
   d7a88:	e7e6      	b.n	d7a58 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x90>
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
   d7a8a:	4623      	mov	r3, r4
   d7a8c:	464a      	mov	r2, r9
   d7a8e:	4639      	mov	r1, r7
   d7a90:	4630      	mov	r0, r6
   d7a92:	940c      	str	r4, [sp, #48]	; 0x30
}
   d7a94:	b003      	add	sp, #12
   d7a96:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
   d7a9a:	f7ff bd43 	b.w	d7524 <mbedtls_rsa_private>
            if( rng_dl == 0 || ret != 0 )
   d7a9e:	2800      	cmp	r0, #0
   d7aa0:	d1ce      	bne.n	d7a40 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x78>
            p++;
   d7aa2:	3101      	adds	r1, #1
        while( nb_pad-- > 0 )
   d7aa4:	e7ba      	b.n	d7a1c <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x54>
   d7aa6:	bf00      	nop
   d7aa8:	ffffbf80 	.word	0xffffbf80

000d7aac <mbedtls_rsa_pkcs1_encrypt>:
{
   d7aac:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7aae:	b087      	sub	sp, #28
    switch( ctx->padding )
   d7ab0:	f8d0 40a4 	ldr.w	r4, [r0, #164]	; 0xa4
{
   d7ab4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   d7ab6:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	; 0x30
    switch( ctx->padding )
   d7aba:	b124      	cbz	r4, d7ac6 <mbedtls_rsa_pkcs1_encrypt+0x1a>
   d7abc:	2c01      	cmp	r4, #1
   d7abe:	d007      	beq.n	d7ad0 <mbedtls_rsa_pkcs1_encrypt+0x24>
   d7ac0:	4808      	ldr	r0, [pc, #32]	; (d7ae4 <mbedtls_rsa_pkcs1_encrypt+0x38>)
}
   d7ac2:	b007      	add	sp, #28
   d7ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7ac6:	b007      	add	sp, #28
   d7ac8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return mbedtls_rsa_rsaes_pkcs1_v15_encrypt( ctx, f_rng, p_rng, mode, ilen,
   d7acc:	f7ff bf7c 	b.w	d79c8 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt>
            return mbedtls_rsa_rsaes_oaep_encrypt( ctx, f_rng, p_rng, mode, NULL, 0,
   d7ad0:	2400      	movs	r4, #0
   d7ad2:	e9cd 6703 	strd	r6, r7, [sp, #12]
   d7ad6:	e9cd 4400 	strd	r4, r4, [sp]
   d7ada:	9502      	str	r5, [sp, #8]
   d7adc:	f7ff fede 	bl	d789c <mbedtls_rsa_rsaes_oaep_encrypt>
                                           ilen, input, output );
   d7ae0:	e7ef      	b.n	d7ac2 <mbedtls_rsa_pkcs1_encrypt+0x16>
   d7ae2:	bf00      	nop
   d7ae4:	ffffbf00 	.word	0xffffbf00

000d7ae8 <mbedtls_rsa_rsaes_oaep_decrypt>:
{
   d7ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
   d7aec:	2b01      	cmp	r3, #1
{
   d7aee:	f2ad 4d64 	subw	sp, sp, #1124	; 0x464
   d7af2:	4606      	mov	r6, r0
   d7af4:	468b      	mov	fp, r1
   d7af6:	469a      	mov	sl, r3
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
   d7af8:	d109      	bne.n	d7b0e <mbedtls_rsa_rsaes_oaep_decrypt+0x26>
   d7afa:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   d7afe:	2b01      	cmp	r3, #1
   d7b00:	d005      	beq.n	d7b0e <mbedtls_rsa_rsaes_oaep_decrypt+0x26>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   d7b02:	4e5d      	ldr	r6, [pc, #372]	; (d7c78 <mbedtls_rsa_rsaes_oaep_decrypt+0x190>)
}
   d7b04:	4630      	mov	r0, r6
   d7b06:	f20d 4d64 	addw	sp, sp, #1124	; 0x464
   d7b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ilen = ctx->len;
   d7b0e:	6874      	ldr	r4, [r6, #4]
   d7b10:	9203      	str	r2, [sp, #12]
    if( ilen < 16 || ilen > sizeof( buf ) )
   d7b12:	f1a4 0310 	sub.w	r3, r4, #16
   d7b16:	f5b3 7f7c 	cmp.w	r3, #1008	; 0x3f0
   d7b1a:	d8f2      	bhi.n	d7b02 <mbedtls_rsa_rsaes_oaep_decrypt+0x1a>
    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
   d7b1c:	f896 00a8 	ldrb.w	r0, [r6, #168]	; 0xa8
   d7b20:	f005 f8d4 	bl	dcccc <mbedtls_md_info_from_type>
    if( md_info == NULL )
   d7b24:	4680      	mov	r8, r0
   d7b26:	2800      	cmp	r0, #0
   d7b28:	d0eb      	beq.n	d7b02 <mbedtls_rsa_rsaes_oaep_decrypt+0x1a>
    hlen = mbedtls_md_get_size( md_info );
   d7b2a:	f005 fa09 	bl	dcf40 <mbedtls_md_get_size>
    if( 2 * hlen + 2 > ilen )
   d7b2e:	1c47      	adds	r7, r0, #1
   d7b30:	007b      	lsls	r3, r7, #1
   d7b32:	ebb4 0f47 	cmp.w	r4, r7, lsl #1
    hlen = mbedtls_md_get_size( md_info );
   d7b36:	4605      	mov	r5, r0
    if( 2 * hlen + 2 > ilen )
   d7b38:	9302      	str	r3, [sp, #8]
   d7b3a:	d3e2      	bcc.n	d7b02 <mbedtls_rsa_rsaes_oaep_decrypt+0x1a>
          ? mbedtls_rsa_public(  ctx, input, buf )
   d7b3c:	9a03      	ldr	r2, [sp, #12]
   d7b3e:	f10d 0960 	add.w	r9, sp, #96	; 0x60
   d7b42:	f1ba 0f00 	cmp.w	sl, #0
   d7b46:	d11e      	bne.n	d7b86 <mbedtls_rsa_rsaes_oaep_decrypt+0x9e>
   d7b48:	f8dd 1494 	ldr.w	r1, [sp, #1172]	; 0x494
   d7b4c:	464a      	mov	r2, r9
   d7b4e:	4630      	mov	r0, r6
   d7b50:	f7ff fca8 	bl	d74a4 <mbedtls_rsa_public>
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
   d7b54:	4606      	mov	r6, r0
    if( ret != 0 )
   d7b56:	b960      	cbnz	r0, d7b72 <mbedtls_rsa_rsaes_oaep_decrypt+0x8a>
    mbedtls_md_init( &md_ctx );
   d7b58:	a805      	add	r0, sp, #20
   d7b5a:	f005 f8c3 	bl	dcce4 <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
   d7b5e:	4632      	mov	r2, r6
   d7b60:	4641      	mov	r1, r8
   d7b62:	a805      	add	r0, sp, #20
   d7b64:	f005 f8de 	bl	dcd24 <mbedtls_md_setup>
   d7b68:	4606      	mov	r6, r0
   d7b6a:	b1a8      	cbz	r0, d7b98 <mbedtls_rsa_rsaes_oaep_decrypt+0xb0>
        mbedtls_md_free( &md_ctx );
   d7b6c:	a805      	add	r0, sp, #20
   d7b6e:	f005 f8be 	bl	dccee <mbedtls_md_free>
    mbedtls_platform_zeroize( buf, sizeof( buf ) );
   d7b72:	a818      	add	r0, sp, #96	; 0x60
   d7b74:	f44f 6180 	mov.w	r1, #1024	; 0x400
   d7b78:	f003 fa30 	bl	dafdc <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( lhash, sizeof( lhash ) );
   d7b7c:	2140      	movs	r1, #64	; 0x40
   d7b7e:	a808      	add	r0, sp, #32
   d7b80:	f003 fa2c 	bl	dafdc <mbedtls_platform_zeroize>
    return( ret );
   d7b84:	e7be      	b.n	d7b04 <mbedtls_rsa_rsaes_oaep_decrypt+0x1c>
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
   d7b86:	f8dd 3494 	ldr.w	r3, [sp, #1172]	; 0x494
   d7b8a:	f8cd 9000 	str.w	r9, [sp]
   d7b8e:	4659      	mov	r1, fp
   d7b90:	4630      	mov	r0, r6
   d7b92:	f7ff fcc7 	bl	d7524 <mbedtls_rsa_private>
   d7b96:	e7dd      	b.n	d7b54 <mbedtls_rsa_rsaes_oaep_decrypt+0x6c>
    if( ( ret = mgf_mask( buf + 1, hlen, buf + hlen + 1, ilen - hlen - 1,
   d7b98:	f104 3aff 	add.w	sl, r4, #4294967295
   d7b9c:	ab05      	add	r3, sp, #20
   d7b9e:	444f      	add	r7, r9
   d7ba0:	ebaa 0a05 	sub.w	sl, sl, r5
   d7ba4:	9300      	str	r3, [sp, #0]
   d7ba6:	463a      	mov	r2, r7
   d7ba8:	4653      	mov	r3, sl
   d7baa:	4629      	mov	r1, r5
   d7bac:	f10d 0061 	add.w	r0, sp, #97	; 0x61
   d7bb0:	f7ff f9f6 	bl	d6fa0 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
                          &md_ctx ) ) != 0 ||
   d7bb4:	4606      	mov	r6, r0
   d7bb6:	2800      	cmp	r0, #0
   d7bb8:	d1d8      	bne.n	d7b6c <mbedtls_rsa_rsaes_oaep_decrypt+0x84>
        ( ret = mgf_mask( buf + hlen + 1, ilen - hlen - 1, buf + 1, hlen,
   d7bba:	ab05      	add	r3, sp, #20
   d7bbc:	9300      	str	r3, [sp, #0]
   d7bbe:	f10d 0261 	add.w	r2, sp, #97	; 0x61
   d7bc2:	462b      	mov	r3, r5
   d7bc4:	4651      	mov	r1, sl
   d7bc6:	4638      	mov	r0, r7
   d7bc8:	f7ff f9ea 	bl	d6fa0 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
                          &md_ctx ) ) != 0 ||
   d7bcc:	4606      	mov	r6, r0
   d7bce:	2800      	cmp	r0, #0
   d7bd0:	d1cc      	bne.n	d7b6c <mbedtls_rsa_rsaes_oaep_decrypt+0x84>
    mbedtls_md_free( &md_ctx );
   d7bd2:	a805      	add	r0, sp, #20
    if( ( ret = mbedtls_md( md_info, label, label_len, lhash ) ) != 0 )
   d7bd4:	af08      	add	r7, sp, #32
    mbedtls_md_free( &md_ctx );
   d7bd6:	f005 f88a 	bl	dccee <mbedtls_md_free>
    if( ( ret = mbedtls_md( md_info, label, label_len, lhash ) ) != 0 )
   d7bda:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
   d7bde:	f8dd 1488 	ldr.w	r1, [sp, #1160]	; 0x488
   d7be2:	463b      	mov	r3, r7
   d7be4:	4640      	mov	r0, r8
   d7be6:	f005 f8db 	bl	dcda0 <mbedtls_md>
   d7bea:	4606      	mov	r6, r0
   d7bec:	2800      	cmp	r0, #0
   d7bee:	d1c0      	bne.n	d7b72 <mbedtls_rsa_rsaes_oaep_decrypt+0x8a>
    p += hlen; /* Skip seed */
   d7bf0:	f10d 0361 	add.w	r3, sp, #97	; 0x61
    bad |= *p++; /* First byte must be 0 */
   d7bf4:	f899 2000 	ldrb.w	r2, [r9]
    p += hlen; /* Skip seed */
   d7bf8:	1959      	adds	r1, r3, r5
    for( i = 0; i < hlen; i++ )
   d7bfa:	4603      	mov	r3, r0
   d7bfc:	42ab      	cmp	r3, r5
   d7bfe:	fa4f fc82 	sxtb.w	ip, r2
   d7c02:	d313      	bcc.n	d7c2c <mbedtls_rsa_rsaes_oaep_decrypt+0x144>
    for( i = 0; i < ilen - 2 * hlen - 2; i++ )
   d7c04:	9b02      	ldr	r3, [sp, #8]
   d7c06:	440d      	add	r5, r1
   d7c08:	1ae7      	subs	r7, r4, r3
    pad_done = 0;
   d7c0a:	2200      	movs	r2, #0
   d7c0c:	4628      	mov	r0, r5
   d7c0e:	442f      	add	r7, r5
    pad_len = 0;
   d7c10:	4611      	mov	r1, r2
    for( i = 0; i < ilen - 2 * hlen - 2; i++ )
   d7c12:	4287      	cmp	r7, r0
   d7c14:	d012      	beq.n	d7c3c <mbedtls_rsa_rsaes_oaep_decrypt+0x154>
        pad_done |= p[i];
   d7c16:	f810 3b01 	ldrb.w	r3, [r0], #1
   d7c1a:	431a      	orrs	r2, r3
        pad_len += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
   d7c1c:	4253      	negs	r3, r2
   d7c1e:	4313      	orrs	r3, r2
   d7c20:	f3c3 13c0 	ubfx	r3, r3, #7, #1
   d7c24:	f083 0301 	eor.w	r3, r3, #1
   d7c28:	4419      	add	r1, r3
    for( i = 0; i < ilen - 2 * hlen - 2; i++ )
   d7c2a:	e7f2      	b.n	d7c12 <mbedtls_rsa_rsaes_oaep_decrypt+0x12a>
        bad |= lhash[i] ^ *p++;
   d7c2c:	5cfa      	ldrb	r2, [r7, r3]
   d7c2e:	5cc8      	ldrb	r0, [r1, r3]
   d7c30:	4042      	eors	r2, r0
   d7c32:	ea4c 0202 	orr.w	r2, ip, r2
   d7c36:	b2d2      	uxtb	r2, r2
    for( i = 0; i < hlen; i++ )
   d7c38:	3301      	adds	r3, #1
   d7c3a:	e7df      	b.n	d7bfc <mbedtls_rsa_rsaes_oaep_decrypt+0x114>
    bad |= *p++ ^ 0x01;
   d7c3c:	5c6a      	ldrb	r2, [r5, r1]
   d7c3e:	f082 0201 	eor.w	r2, r2, #1
   d7c42:	ea4c 0202 	orr.w	r2, ip, r2
    if( bad != 0 )
   d7c46:	f012 0fff 	tst.w	r2, #255	; 0xff
   d7c4a:	d110      	bne.n	d7c6e <mbedtls_rsa_rsaes_oaep_decrypt+0x186>
    bad |= *p++ ^ 0x01;
   d7c4c:	3101      	adds	r1, #1
   d7c4e:	4429      	add	r1, r5
    if( ilen - ( p - buf ) > output_max_len )
   d7c50:	aa18      	add	r2, sp, #96	; 0x60
   d7c52:	f8dd 349c 	ldr.w	r3, [sp, #1180]	; 0x49c
   d7c56:	1a8a      	subs	r2, r1, r2
   d7c58:	1aa2      	subs	r2, r4, r2
   d7c5a:	429a      	cmp	r2, r3
   d7c5c:	d809      	bhi.n	d7c72 <mbedtls_rsa_rsaes_oaep_decrypt+0x18a>
    *olen = ilen - (p - buf);
   d7c5e:	f8dd 3490 	ldr.w	r3, [sp, #1168]	; 0x490
    memcpy( output, p, *olen );
   d7c62:	f8dd 0498 	ldr.w	r0, [sp, #1176]	; 0x498
    *olen = ilen - (p - buf);
   d7c66:	601a      	str	r2, [r3, #0]
    memcpy( output, p, *olen );
   d7c68:	f010 fe30 	bl	e88cc <memcpy>
    ret = 0;
   d7c6c:	e781      	b.n	d7b72 <mbedtls_rsa_rsaes_oaep_decrypt+0x8a>
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
   d7c6e:	4e03      	ldr	r6, [pc, #12]	; (d7c7c <mbedtls_rsa_rsaes_oaep_decrypt+0x194>)
   d7c70:	e77f      	b.n	d7b72 <mbedtls_rsa_rsaes_oaep_decrypt+0x8a>
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
   d7c72:	4e03      	ldr	r6, [pc, #12]	; (d7c80 <mbedtls_rsa_rsaes_oaep_decrypt+0x198>)
   d7c74:	e77d      	b.n	d7b72 <mbedtls_rsa_rsaes_oaep_decrypt+0x8a>
   d7c76:	bf00      	nop
   d7c78:	ffffbf80 	.word	0xffffbf80
   d7c7c:	ffffbf00 	.word	0xffffbf00
   d7c80:	ffffbc00 	.word	0xffffbc00

000d7c84 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt>:
{
   d7c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7c88:	461f      	mov	r7, r3
   d7c8a:	f2ad 4d0c 	subw	sp, sp, #1036	; 0x40c
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
   d7c8e:	2f01      	cmp	r7, #1
{
   d7c90:	f8dd 3434 	ldr.w	r3, [sp, #1076]	; 0x434
    ilen = ctx->len;
   d7c94:	6846      	ldr	r6, [r0, #4]
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
   d7c96:	d104      	bne.n	d7ca2 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x1e>
   d7c98:	f8d0 40a4 	ldr.w	r4, [r0, #164]	; 0xa4
   d7c9c:	2c00      	cmp	r4, #0
   d7c9e:	f040 80bb 	bne.w	d7e18 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x194>
    if( ilen < 16 || ilen > sizeof( buf ) )
   d7ca2:	f1a6 0410 	sub.w	r4, r6, #16
   d7ca6:	f5b4 7f7c 	cmp.w	r4, #1008	; 0x3f0
   d7caa:	f200 80b5 	bhi.w	d7e18 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x194>
    ret = ( mode == MBEDTLS_RSA_PUBLIC )
   d7cae:	ad02      	add	r5, sp, #8
          ? mbedtls_rsa_public(  ctx, input, buf )
   d7cb0:	2f00      	cmp	r7, #0
   d7cb2:	d171      	bne.n	d7d98 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x114>
   d7cb4:	462a      	mov	r2, r5
   d7cb6:	4619      	mov	r1, r3
   d7cb8:	f7ff fbf4 	bl	d74a4 <mbedtls_rsa_public>
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
   d7cbc:	4604      	mov	r4, r0
    if( ret != 0 )
   d7cbe:	2800      	cmp	r0, #0
   d7cc0:	d160      	bne.n	d7d84 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x100>
    if( mode == MBEDTLS_RSA_PRIVATE )
   d7cc2:	2f01      	cmp	r7, #1
    bad |= buf[0];
   d7cc4:	782b      	ldrb	r3, [r5, #0]
    if( mode == MBEDTLS_RSA_PRIVATE )
   d7cc6:	786a      	ldrb	r2, [r5, #1]
   d7cc8:	d16a      	bne.n	d7da0 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x11c>
        bad |= buf[1] ^ MBEDTLS_RSA_CRYPT;
   d7cca:	f082 0202 	eor.w	r2, r2, #2
   d7cce:	4313      	orrs	r3, r2
    size_t pad_count = 0;
   d7cd0:	4601      	mov	r1, r0
        for( i = 2; i < ilen; i++ )
   d7cd2:	2402      	movs	r4, #2
            pad_done  |= ((buf[i] | (unsigned char)-buf[i]) >> 7) ^ 1;
   d7cd4:	5d2a      	ldrb	r2, [r5, r4]
   d7cd6:	4257      	negs	r7, r2
   d7cd8:	433a      	orrs	r2, r7
   d7cda:	f3c2 12c0 	ubfx	r2, r2, #7, #1
   d7cde:	f082 0201 	eor.w	r2, r2, #1
   d7ce2:	4310      	orrs	r0, r2
            pad_count += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
   d7ce4:	4242      	negs	r2, r0
   d7ce6:	4302      	orrs	r2, r0
   d7ce8:	f3c2 12c0 	ubfx	r2, r2, #7, #1
        for( i = 2; i < ilen; i++ )
   d7cec:	3401      	adds	r4, #1
            pad_count += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
   d7cee:	f082 0201 	eor.w	r2, r2, #1
        for( i = 2; i < ilen; i++ )
   d7cf2:	42a6      	cmp	r6, r4
            pad_count += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
   d7cf4:	4411      	add	r1, r2
        for( i = 2; i < ilen; i++ )
   d7cf6:	d1ed      	bne.n	d7cd4 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x50>
    plaintext_max_size = ( output_max_len > ilen - 11 ?
   d7cf8:	f8dd 443c 	ldr.w	r4, [sp, #1084]	; 0x43c
   d7cfc:	f1a6 020b 	sub.w	r2, r6, #11
   d7d00:	42a2      	cmp	r2, r4
   d7d02:	bf28      	it	cs
   d7d04:	4622      	movcs	r2, r4
    return( ( max - size ) >> ( sizeof( size_t ) * 8 - 1 ) );
   d7d06:	f1a1 0408 	sub.w	r4, r1, #8
   d7d0a:	ea43 73d4 	orr.w	r3, r3, r4, lsr #31
    bad |= size_greater_than( 8, pad_count );
   d7d0e:	2800      	cmp	r0, #0
   d7d10:	bf08      	it	eq
   d7d12:	f043 0301 	orreq.w	r3, r3, #1
                             (unsigned) ( ilen - pad_count - 3 ) );
   d7d16:	1ef0      	subs	r0, r6, #3
   d7d18:	1a41      	subs	r1, r0, r1
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
   d7d1a:	4258      	negs	r0, r3
   d7d1c:	ea40 0403 	orr.w	r4, r0, r3
    return( ( mask & if1 ) | (~mask & if0 ) );
   d7d20:	ea81 0002 	eor.w	r0, r1, r2
   d7d24:	ea00 70e4 	and.w	r0, r0, r4, asr #31
   d7d28:	4041      	eors	r1, r0
    return( ( max - size ) >> ( sizeof( size_t ) * 8 - 1 ) );
   d7d2a:	eba2 0c01 	sub.w	ip, r2, r1
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
   d7d2e:	ea4f 77ec 	mov.w	r7, ip, asr #31
    return( ( mask & if1 ) | (~mask & if0 ) );
   d7d32:	f407 4e88 	and.w	lr, r7, #17408	; 0x4400
   d7d36:	f48e 4082 	eor.w	r0, lr, #16640	; 0x4100
   d7d3a:	ea00 70e4 	and.w	r0, r0, r4, asr #31
   d7d3e:	ea80 000e 	eor.w	r0, r0, lr
    ret = - (int) if_int( bad, - MBEDTLS_ERR_RSA_INVALID_PADDING,
   d7d42:	4244      	negs	r4, r0
    bad = all_or_nothing_int( bad | output_too_large );
   d7d44:	ea43 70dc 	orr.w	r0, r3, ip, lsr #31
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
   d7d48:	4243      	negs	r3, r0
   d7d4a:	4303      	orrs	r3, r0
   d7d4c:	17db      	asrs	r3, r3, #31
    for( i = 11; i < ilen; i++ )
   d7d4e:	f10d 0c13 	add.w	ip, sp, #19
   d7d52:	200b      	movs	r0, #11
        buf[i] &= ~bad;
   d7d54:	43db      	mvns	r3, r3
   d7d56:	f89c e000 	ldrb.w	lr, [ip]
    for( i = 11; i < ilen; i++ )
   d7d5a:	3001      	adds	r0, #1
        buf[i] &= ~bad;
   d7d5c:	ea0e 0e03 	and.w	lr, lr, r3
    for( i = 11; i < ilen; i++ )
   d7d60:	4286      	cmp	r6, r0
        buf[i] &= ~bad;
   d7d62:	f80c eb01 	strb.w	lr, [ip], #1
    for( i = 11; i < ilen; i++ )
   d7d66:	d1f6      	bne.n	d7d56 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xd2>
    return( ( mask & if1 ) | (~mask & if0 ) );
   d7d68:	2f00      	cmp	r7, #0
   d7d6a:	bf14      	ite	ne
   d7d6c:	4617      	movne	r7, r2
   d7d6e:	460f      	moveq	r7, r1
    mem_move_to_left( buf + ilen - plaintext_max_size,
   d7d70:	1ab1      	subs	r1, r6, r2
   d7d72:	4429      	add	r1, r5
    if( total == 0 )
   d7d74:	bb6a      	cbnz	r2, d7dd2 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x14e>
    memcpy( output, buf + ilen - plaintext_max_size, plaintext_max_size );
   d7d76:	f8dd 0438 	ldr.w	r0, [sp, #1080]	; 0x438
   d7d7a:	f010 fda7 	bl	e88cc <memcpy>
    *olen = plaintext_size;
   d7d7e:	f8dd 3430 	ldr.w	r3, [sp, #1072]	; 0x430
   d7d82:	601f      	str	r7, [r3, #0]
    mbedtls_platform_zeroize( buf, sizeof( buf ) );
   d7d84:	f44f 6180 	mov.w	r1, #1024	; 0x400
   d7d88:	4628      	mov	r0, r5
   d7d8a:	f003 f927 	bl	dafdc <mbedtls_platform_zeroize>
}
   d7d8e:	4620      	mov	r0, r4
   d7d90:	f20d 4d0c 	addw	sp, sp, #1036	; 0x40c
   d7d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
   d7d98:	9500      	str	r5, [sp, #0]
   d7d9a:	f7ff fbc3 	bl	d7524 <mbedtls_rsa_private>
   d7d9e:	e78d      	b.n	d7cbc <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x38>
        bad |= buf[1] ^ MBEDTLS_RSA_SIGN;
   d7da0:	f082 0201 	eor.w	r2, r2, #1
   d7da4:	4313      	orrs	r3, r2
    size_t pad_count = 0;
   d7da6:	4601      	mov	r1, r0
        for( i = 2; i < ilen; i++ )
   d7da8:	2402      	movs	r4, #2
            pad_done |= if_int( buf[i], 0, 1 );
   d7daa:	5d2a      	ldrb	r2, [r5, r4]
   d7dac:	2a00      	cmp	r2, #0
   d7dae:	bf08      	it	eq
   d7db0:	f040 0001 	orreq.w	r0, r0, #1
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
   d7db4:	4247      	negs	r7, r0
            bad |= if_int( pad_done, 0, buf[i] ^ 0xFF );
   d7db6:	43d2      	mvns	r2, r2
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
   d7db8:	4307      	orrs	r7, r0
            bad |= if_int( pad_done, 0, buf[i] ^ 0xFF );
   d7dba:	b2d2      	uxtb	r2, r2
        for( i = 2; i < ilen; i++ )
   d7dbc:	3401      	adds	r4, #1
    return( ( mask & if1 ) | (~mask & if0 ) );
   d7dbe:	ea22 72e7 	bic.w	r2, r2, r7, asr #31
            pad_count += if_int( pad_done, 0, 1 );
   d7dc2:	2f00      	cmp	r7, #0
   d7dc4:	bfa8      	it	ge
   d7dc6:	3101      	addge	r1, #1
        for( i = 2; i < ilen; i++ )
   d7dc8:	42a6      	cmp	r6, r4
            bad |= if_int( pad_done, 0, buf[i] ^ 0xFF );
   d7dca:	ea43 0302 	orr.w	r3, r3, r2
        for( i = 2; i < ilen; i++ )
   d7dce:	d1ec      	bne.n	d7daa <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x126>
   d7dd0:	e792      	b.n	d7cf8 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x74>
        for( n = 0; n < total - 1; n++ )
   d7dd2:	f102 3eff 	add.w	lr, r2, #4294967295
   d7dd6:	4278      	negs	r0, r7
   d7dd8:	eba2 0807 	sub.w	r8, r2, r7
        buf[total-1] = if_int( no_op, buf[total-1], 0 );
   d7ddc:	eb01 0c0e 	add.w	ip, r1, lr
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
   d7de0:	ea4f 79e0 	mov.w	r9, r0, asr #31
        for( n = 0; n < total - 1; n++ )
   d7de4:	2300      	movs	r3, #0
   d7de6:	459e      	cmp	lr, r3
   d7de8:	d90c      	bls.n	d7e04 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x180>
            unsigned char current = buf[n];
   d7dea:	5c5e      	ldrb	r6, [r3, r1]
            unsigned char next = buf[n+1];
   d7dec:	eb03 0a01 	add.w	sl, r3, r1
   d7df0:	3301      	adds	r3, #1
   d7df2:	f813 b001 	ldrb.w	fp, [r3, r1]
            buf[n] = if_int( no_op, current, next );
   d7df6:	f1b9 0f00 	cmp.w	r9, #0
   d7dfa:	bf08      	it	eq
   d7dfc:	465e      	moveq	r6, fp
   d7dfe:	f88a 6000 	strb.w	r6, [sl]
        for( n = 0; n < total - 1; n++ )
   d7e02:	e7f0      	b.n	d7de6 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x162>
        buf[total-1] = if_int( no_op, buf[total-1], 0 );
   d7e04:	f89c 3000 	ldrb.w	r3, [ip]
    return( ( mask & if1 ) | (~mask & if0 ) );
   d7e08:	3001      	adds	r0, #1
        buf[total-1] = if_int( no_op, buf[total-1], 0 );
   d7e0a:	ea03 0309 	and.w	r3, r3, r9
    for( i = 0; i < total; i++ )
   d7e0e:	4580      	cmp	r8, r0
        buf[total-1] = if_int( no_op, buf[total-1], 0 );
   d7e10:	f88c 3000 	strb.w	r3, [ip]
    for( i = 0; i < total; i++ )
   d7e14:	d1e4      	bne.n	d7de0 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x15c>
   d7e16:	e7ae      	b.n	d7d76 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xf2>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   d7e18:	4c00      	ldr	r4, [pc, #0]	; (d7e1c <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x198>)
   d7e1a:	e7b8      	b.n	d7d8e <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x10a>
   d7e1c:	ffffbf80 	.word	0xffffbf80

000d7e20 <mbedtls_rsa_pkcs1_decrypt>:
{
   d7e20:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch( ctx->padding )
   d7e22:	f8d0 40a4 	ldr.w	r4, [r0, #164]	; 0xa4
{
   d7e26:	b087      	sub	sp, #28
   d7e28:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	; 0x30
   d7e2c:	e9dd 7c0e 	ldrd	r7, ip, [sp, #56]	; 0x38
    switch( ctx->padding )
   d7e30:	b124      	cbz	r4, d7e3c <mbedtls_rsa_pkcs1_decrypt+0x1c>
   d7e32:	2c01      	cmp	r4, #1
   d7e34:	d007      	beq.n	d7e46 <mbedtls_rsa_pkcs1_decrypt+0x26>
   d7e36:	4809      	ldr	r0, [pc, #36]	; (d7e5c <mbedtls_rsa_pkcs1_decrypt+0x3c>)
}
   d7e38:	b007      	add	sp, #28
   d7e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7e3c:	b007      	add	sp, #28
   d7e3e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return mbedtls_rsa_rsaes_pkcs1_v15_decrypt( ctx, f_rng, p_rng, mode, olen,
   d7e42:	f7ff bf1f 	b.w	d7c84 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt>
            return mbedtls_rsa_rsaes_oaep_decrypt( ctx, f_rng, p_rng, mode, NULL, 0,
   d7e46:	2400      	movs	r4, #0
   d7e48:	e9cd 7c04 	strd	r7, ip, [sp, #16]
   d7e4c:	e9cd 5602 	strd	r5, r6, [sp, #8]
   d7e50:	e9cd 4400 	strd	r4, r4, [sp]
   d7e54:	f7ff fe48 	bl	d7ae8 <mbedtls_rsa_rsaes_oaep_decrypt>
                                           output_max_len );
   d7e58:	e7ee      	b.n	d7e38 <mbedtls_rsa_pkcs1_decrypt+0x18>
   d7e5a:	bf00      	nop
   d7e5c:	ffffbf00 	.word	0xffffbf00

000d7e60 <mbedtls_rsa_rsassa_pss_sign>:
{
   d7e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7e64:	ed2d 8b02 	vpush	{d8}
   d7e68:	b09d      	sub	sp, #116	; 0x74
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
   d7e6a:	2b01      	cmp	r3, #1
{
   d7e6c:	4606      	mov	r6, r0
   d7e6e:	ee08 2a90 	vmov	s17, r2
   d7e72:	f89d 00a0 	ldrb.w	r0, [sp, #160]	; 0xa0
   d7e76:	9d2b      	ldr	r5, [sp, #172]	; 0xac
   d7e78:	9103      	str	r1, [sp, #12]
   d7e7a:	9306      	str	r3, [sp, #24]
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
   d7e7c:	d10a      	bne.n	d7e94 <mbedtls_rsa_rsassa_pss_sign+0x34>
   d7e7e:	f8d6 30a4 	ldr.w	r3, [r6, #164]	; 0xa4
   d7e82:	2b01      	cmp	r3, #1
   d7e84:	d006      	beq.n	d7e94 <mbedtls_rsa_rsassa_pss_sign+0x34>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   d7e86:	4c63      	ldr	r4, [pc, #396]	; (d8014 <mbedtls_rsa_rsassa_pss_sign+0x1b4>)
}
   d7e88:	4620      	mov	r0, r4
   d7e8a:	b01d      	add	sp, #116	; 0x74
   d7e8c:	ecbd 8b02 	vpop	{d8}
   d7e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( f_rng == NULL )
   d7e94:	9b03      	ldr	r3, [sp, #12]
   d7e96:	2b00      	cmp	r3, #0
   d7e98:	d0f5      	beq.n	d7e86 <mbedtls_rsa_rsassa_pss_sign+0x26>
    olen = ctx->len;
   d7e9a:	f8d6 9004 	ldr.w	r9, [r6, #4]
    if( md_alg != MBEDTLS_MD_NONE )
   d7e9e:	b130      	cbz	r0, d7eae <mbedtls_rsa_rsassa_pss_sign+0x4e>
        md_info = mbedtls_md_info_from_type( md_alg );
   d7ea0:	f004 ff14 	bl	dcccc <mbedtls_md_info_from_type>
        if( md_info == NULL )
   d7ea4:	2800      	cmp	r0, #0
   d7ea6:	d0ee      	beq.n	d7e86 <mbedtls_rsa_rsassa_pss_sign+0x26>
        hashlen = mbedtls_md_get_size( md_info );
   d7ea8:	f005 f84a 	bl	dcf40 <mbedtls_md_get_size>
   d7eac:	9029      	str	r0, [sp, #164]	; 0xa4
    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
   d7eae:	f896 00a8 	ldrb.w	r0, [r6, #168]	; 0xa8
   d7eb2:	f004 ff0b 	bl	dcccc <mbedtls_md_info_from_type>
    if( md_info == NULL )
   d7eb6:	9005      	str	r0, [sp, #20]
   d7eb8:	2800      	cmp	r0, #0
   d7eba:	d0e4      	beq.n	d7e86 <mbedtls_rsa_rsassa_pss_sign+0x26>
    hlen = mbedtls_md_get_size( md_info );
   d7ebc:	f005 f840 	bl	dcf40 <mbedtls_md_get_size>
   d7ec0:	b202      	sxth	r2, r0
    if( olen < hlen + min_slen + 2 )
   d7ec2:	ebb9 0f42 	cmp.w	r9, r2, lsl #1
    hlen = mbedtls_md_get_size( md_info );
   d7ec6:	4607      	mov	r7, r0
    if( olen < hlen + min_slen + 2 )
   d7ec8:	ea4f 0342 	mov.w	r3, r2, lsl #1
   d7ecc:	d3db      	bcc.n	d7e86 <mbedtls_rsa_rsassa_pss_sign+0x26>
    else if( olen >= hlen + hlen + 2 )
   d7ece:	3302      	adds	r3, #2
   d7ed0:	454b      	cmp	r3, r9
        slen = olen - hlen - 2;
   d7ed2:	bf86      	itte	hi
   d7ed4:	f1a9 0802 	subhi.w	r8, r9, #2
   d7ed8:	eba8 0800 	subhi.w	r8, r8, r0
        slen = hlen;
   d7edc:	4680      	movls	r8, r0
    memset( sig, 0, olen );
   d7ede:	464a      	mov	r2, r9
   d7ee0:	2100      	movs	r1, #0
   d7ee2:	4628      	mov	r0, r5
   d7ee4:	f010 fd1a 	bl	e891c <memset>
    if( ( ret = f_rng( p_rng, salt, slen ) ) != 0 )
   d7ee8:	ee18 0a90 	vmov	r0, s17
   d7eec:	9b03      	ldr	r3, [sp, #12]
   d7eee:	4642      	mov	r2, r8
   d7ef0:	a90c      	add	r1, sp, #48	; 0x30
   d7ef2:	4798      	blx	r3
   d7ef4:	4604      	mov	r4, r0
   d7ef6:	b110      	cbz	r0, d7efe <mbedtls_rsa_rsassa_pss_sign+0x9e>
        return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
   d7ef8:	f5a0 4489 	sub.w	r4, r0, #17536	; 0x4480
   d7efc:	e7c4      	b.n	d7e88 <mbedtls_rsa_rsassa_pss_sign+0x28>
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
   d7efe:	f106 0308 	add.w	r3, r6, #8
   d7f02:	4618      	mov	r0, r3
   d7f04:	ee08 3a10 	vmov	s16, r3
   d7f08:	f008 fe7e 	bl	e0c08 <mbedtls_mpi_bitlen>
    p += olen - hlen - slen - 2;
   d7f0c:	eba9 0307 	sub.w	r3, r9, r7
   d7f10:	9304      	str	r3, [sp, #16]
   d7f12:	3b02      	subs	r3, #2
   d7f14:	eba3 0308 	sub.w	r3, r3, r8
   d7f18:	18ea      	adds	r2, r5, r3
    *p++ = 0x01;
   d7f1a:	f102 0a01 	add.w	sl, r2, #1
   d7f1e:	2201      	movs	r2, #1
   d7f20:	54ea      	strb	r2, [r5, r3]
    memcpy( p, salt, slen );
   d7f22:	a90c      	add	r1, sp, #48	; 0x30
   d7f24:	4642      	mov	r2, r8
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
   d7f26:	9007      	str	r0, [sp, #28]
    mbedtls_md_init( &md_ctx );
   d7f28:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
    memcpy( p, salt, slen );
   d7f2c:	4650      	mov	r0, sl
   d7f2e:	f010 fccd 	bl	e88cc <memcpy>
    mbedtls_md_init( &md_ctx );
   d7f32:	4658      	mov	r0, fp
   d7f34:	f004 fed6 	bl	dcce4 <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
   d7f38:	4622      	mov	r2, r4
   d7f3a:	9905      	ldr	r1, [sp, #20]
   d7f3c:	4658      	mov	r0, fp
   d7f3e:	f004 fef1 	bl	dcd24 <mbedtls_md_setup>
   d7f42:	4604      	mov	r4, r0
   d7f44:	2800      	cmp	r0, #0
   d7f46:	d14c      	bne.n	d7fe2 <mbedtls_rsa_rsassa_pss_sign+0x182>
    if( ( ret = mbedtls_md_starts( &md_ctx ) ) != 0 )
   d7f48:	4658      	mov	r0, fp
   d7f4a:	f004 ff0b 	bl	dcd64 <mbedtls_md_starts>
   d7f4e:	4604      	mov	r4, r0
   d7f50:	2800      	cmp	r0, #0
   d7f52:	d146      	bne.n	d7fe2 <mbedtls_rsa_rsassa_pss_sign+0x182>
    p += slen;
   d7f54:	44c2      	add	sl, r8
    if( ( ret = mbedtls_md_update( &md_ctx, p, 8 ) ) != 0 )
   d7f56:	2208      	movs	r2, #8
   d7f58:	4651      	mov	r1, sl
   d7f5a:	4658      	mov	r0, fp
   d7f5c:	f004 ff0c 	bl	dcd78 <mbedtls_md_update>
   d7f60:	4604      	mov	r4, r0
   d7f62:	2800      	cmp	r0, #0
   d7f64:	d13d      	bne.n	d7fe2 <mbedtls_rsa_rsassa_pss_sign+0x182>
    if( ( ret = mbedtls_md_update( &md_ctx, hash, hashlen ) ) != 0 )
   d7f66:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
   d7f6a:	4658      	mov	r0, fp
   d7f6c:	f004 ff04 	bl	dcd78 <mbedtls_md_update>
   d7f70:	4604      	mov	r4, r0
   d7f72:	bbb0      	cbnz	r0, d7fe2 <mbedtls_rsa_rsassa_pss_sign+0x182>
    if( ( ret = mbedtls_md_update( &md_ctx, salt, slen ) ) != 0 )
   d7f74:	4642      	mov	r2, r8
   d7f76:	a90c      	add	r1, sp, #48	; 0x30
   d7f78:	4658      	mov	r0, fp
   d7f7a:	f004 fefd 	bl	dcd78 <mbedtls_md_update>
   d7f7e:	4604      	mov	r4, r0
   d7f80:	bb78      	cbnz	r0, d7fe2 <mbedtls_rsa_rsassa_pss_sign+0x182>
    if( ( ret = mbedtls_md_finish( &md_ctx, p ) ) != 0 )
   d7f82:	4651      	mov	r1, sl
   d7f84:	4658      	mov	r0, fp
   d7f86:	f004 ff01 	bl	dcd8c <mbedtls_md_finish>
   d7f8a:	4604      	mov	r4, r0
   d7f8c:	bb48      	cbnz	r0, d7fe2 <mbedtls_rsa_rsassa_pss_sign+0x182>
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
   d7f8e:	9b07      	ldr	r3, [sp, #28]
    if( ( ret = mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen,
   d7f90:	f8cd b000 	str.w	fp, [sp]
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
   d7f94:	1e58      	subs	r0, r3, #1
    if( ( ret = mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen,
   d7f96:	9b04      	ldr	r3, [sp, #16]
    if( msb % 8 == 0 )
   d7f98:	f010 0f07 	tst.w	r0, #7
   d7f9c:	bf0c      	ite	eq
   d7f9e:	2001      	moveq	r0, #1
   d7fa0:	2000      	movne	r0, #0
    if( ( ret = mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen,
   d7fa2:	1e59      	subs	r1, r3, #1
   d7fa4:	1a09      	subs	r1, r1, r0
   d7fa6:	463b      	mov	r3, r7
   d7fa8:	4652      	mov	r2, sl
   d7faa:	4428      	add	r0, r5
   d7fac:	f7fe fff8 	bl	d6fa0 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
   d7fb0:	4604      	mov	r4, r0
   d7fb2:	b9b0      	cbnz	r0, d7fe2 <mbedtls_rsa_rsassa_pss_sign+0x182>
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
   d7fb4:	ee18 0a10 	vmov	r0, s16
   d7fb8:	f008 fe26 	bl	e0c08 <mbedtls_mpi_bitlen>
    sig[0] &= 0xFF >> ( olen * 8 - msb );
   d7fbc:	ebc0 00c9 	rsb	r0, r0, r9, lsl #3
   d7fc0:	782b      	ldrb	r3, [r5, #0]
   d7fc2:	3001      	adds	r0, #1
   d7fc4:	f04f 09ff 	mov.w	r9, #255	; 0xff
   d7fc8:	fa49 f900 	asr.w	r9, r9, r0
   d7fcc:	ea09 0903 	and.w	r9, r9, r3
    *p++ = 0xBC;
   d7fd0:	23bc      	movs	r3, #188	; 0xbc
    sig[0] &= 0xFF >> ( olen * 8 - msb );
   d7fd2:	f885 9000 	strb.w	r9, [r5]
    mbedtls_platform_zeroize( salt, sizeof( salt ) );
   d7fd6:	2140      	movs	r1, #64	; 0x40
    *p++ = 0xBC;
   d7fd8:	f80a 3007 	strb.w	r3, [sl, r7]
    mbedtls_platform_zeroize( salt, sizeof( salt ) );
   d7fdc:	a80c      	add	r0, sp, #48	; 0x30
   d7fde:	f002 fffd 	bl	dafdc <mbedtls_platform_zeroize>
    mbedtls_md_free( &md_ctx );
   d7fe2:	a809      	add	r0, sp, #36	; 0x24
   d7fe4:	f004 fe83 	bl	dccee <mbedtls_md_free>
    if( ret != 0 )
   d7fe8:	2c00      	cmp	r4, #0
   d7fea:	f47f af4d 	bne.w	d7e88 <mbedtls_rsa_rsassa_pss_sign+0x28>
            ? mbedtls_rsa_public(  ctx, sig, sig )
   d7fee:	9b06      	ldr	r3, [sp, #24]
   d7ff0:	b933      	cbnz	r3, d8000 <mbedtls_rsa_rsassa_pss_sign+0x1a0>
   d7ff2:	462a      	mov	r2, r5
   d7ff4:	4629      	mov	r1, r5
   d7ff6:	4630      	mov	r0, r6
   d7ff8:	f7ff fa54 	bl	d74a4 <mbedtls_rsa_public>
            : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig ) );
   d7ffc:	4604      	mov	r4, r0
   d7ffe:	e743      	b.n	d7e88 <mbedtls_rsa_rsassa_pss_sign+0x28>
   d8000:	ee18 2a90 	vmov	r2, s17
   d8004:	9903      	ldr	r1, [sp, #12]
   d8006:	9500      	str	r5, [sp, #0]
   d8008:	462b      	mov	r3, r5
   d800a:	4630      	mov	r0, r6
   d800c:	f7ff fa8a 	bl	d7524 <mbedtls_rsa_private>
   d8010:	e7f4      	b.n	d7ffc <mbedtls_rsa_rsassa_pss_sign+0x19c>
   d8012:	bf00      	nop
   d8014:	ffffbf80 	.word	0xffffbf80

000d8018 <mbedtls_rsa_rsassa_pkcs1_v15_sign>:
                               int mode,
                               mbedtls_md_type_t md_alg,
                               unsigned int hashlen,
                               const unsigned char *hash,
                               unsigned char *sig )
{
   d8018:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );
    RSA_VALIDATE_RET( sig != NULL );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
   d801c:	2b01      	cmp	r3, #1
{
   d801e:	4605      	mov	r5, r0
   d8020:	4689      	mov	r9, r1
   d8022:	4692      	mov	sl, r2
   d8024:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   d8028:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   d802c:	e9dd 120d 	ldrd	r1, r2, [sp, #52]	; 0x34
   d8030:	461e      	mov	r6, r3
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
   d8032:	d103      	bne.n	d803c <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x24>
   d8034:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   d8038:	2b00      	cmp	r3, #0
   d803a:	d150      	bne.n	d80de <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xc6>

    /*
     * Prepare PKCS1-v1.5 encoding (padding and hash identifier)
     */

    if( ( ret = rsa_rsassa_pkcs1_v15_encode( md_alg, hashlen, hash,
   d803c:	f8cd 8000 	str.w	r8, [sp]
   d8040:	686b      	ldr	r3, [r5, #4]
   d8042:	f7fe fffd 	bl	d7040 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh>
   d8046:	4604      	mov	r4, r0
   d8048:	2800      	cmp	r0, #0
   d804a:	d142      	bne.n	d80d2 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xba>

    /*
     * Call respective RSA primitive
     */

    if( mode == MBEDTLS_RSA_PUBLIC )
   d804c:	b93e      	cbnz	r6, d805e <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x46>
    {
        /* Skip verification on a public key operation */
        return( mbedtls_rsa_public( ctx, sig, sig ) );
   d804e:	4642      	mov	r2, r8
   d8050:	4641      	mov	r1, r8
   d8052:	4628      	mov	r0, r5
cleanup:
    mbedtls_free( sig_try );
    mbedtls_free( verif );

    return( ret );
}
   d8054:	b004      	add	sp, #16
   d8056:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        return( mbedtls_rsa_public( ctx, sig, sig ) );
   d805a:	f7ff ba23 	b.w	d74a4 <mbedtls_rsa_public>
    sig_try = (unsigned char *)mbedtls_calloc( 1, ctx->len );
   d805e:	6869      	ldr	r1, [r5, #4]
   d8060:	9103      	str	r1, [sp, #12]
   d8062:	2001      	movs	r0, #1
   d8064:	f010 fbb8 	bl	e87d8 <calloc>
    if( sig_try == NULL )
   d8068:	4606      	mov	r6, r0
   d806a:	b140      	cbz	r0, d807e <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x66>
    verif = (unsigned char *)mbedtls_calloc( 1, ctx->len );
   d806c:	9903      	ldr	r1, [sp, #12]
   d806e:	2001      	movs	r0, #1
   d8070:	f010 fbb2 	bl	e87d8 <calloc>
    if( verif == NULL )
   d8074:	4607      	mov	r7, r0
   d8076:	b928      	cbnz	r0, d8084 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x6c>
        mbedtls_free( sig_try );
   d8078:	4630      	mov	r0, r6
   d807a:	f00d fba1 	bl	e57c0 <free>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
   d807e:	f06f 040f 	mvn.w	r4, #15
   d8082:	e026      	b.n	d80d2 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xba>
    MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );
   d8084:	9600      	str	r6, [sp, #0]
   d8086:	4643      	mov	r3, r8
   d8088:	4652      	mov	r2, sl
   d808a:	4649      	mov	r1, r9
   d808c:	4628      	mov	r0, r5
   d808e:	f7ff fa49 	bl	d7524 <mbedtls_rsa_private>
   d8092:	4604      	mov	r4, r0
   d8094:	b9b8      	cbnz	r0, d80c6 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xae>
    MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );
   d8096:	463a      	mov	r2, r7
   d8098:	4631      	mov	r1, r6
   d809a:	4628      	mov	r0, r5
   d809c:	f7ff fa02 	bl	d74a4 <mbedtls_rsa_public>
   d80a0:	4604      	mov	r4, r0
   d80a2:	b980      	cbnz	r0, d80c6 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xae>
    if( mbedtls_safer_memcmp( verif, sig, ctx->len ) != 0 )
   d80a4:	686a      	ldr	r2, [r5, #4]
    unsigned char diff = 0;
   d80a6:	4601      	mov	r1, r0
    for( i = 0; i < n; i++ )
   d80a8:	4603      	mov	r3, r0
   d80aa:	429a      	cmp	r2, r3
   d80ac:	d006      	beq.n	d80bc <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa4>
        diff |= A[i] ^ B[i];
   d80ae:	5cf8      	ldrb	r0, [r7, r3]
   d80b0:	f818 5003 	ldrb.w	r5, [r8, r3]
   d80b4:	4068      	eors	r0, r5
   d80b6:	4301      	orrs	r1, r0
    for( i = 0; i < n; i++ )
   d80b8:	3301      	adds	r3, #1
   d80ba:	e7f6      	b.n	d80aa <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x92>
    if( mbedtls_safer_memcmp( verif, sig, ctx->len ) != 0 )
   d80bc:	b969      	cbnz	r1, d80da <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xc2>
    memcpy( sig, sig_try, ctx->len );
   d80be:	4631      	mov	r1, r6
   d80c0:	4640      	mov	r0, r8
   d80c2:	f010 fc03 	bl	e88cc <memcpy>
    mbedtls_free( sig_try );
   d80c6:	4630      	mov	r0, r6
   d80c8:	f00d fb7a 	bl	e57c0 <free>
    mbedtls_free( verif );
   d80cc:	4638      	mov	r0, r7
   d80ce:	f00d fb77 	bl	e57c0 <free>
}
   d80d2:	4620      	mov	r0, r4
   d80d4:	b004      	add	sp, #16
   d80d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ret = MBEDTLS_ERR_RSA_PRIVATE_FAILED;
   d80da:	4c02      	ldr	r4, [pc, #8]	; (d80e4 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xcc>)
   d80dc:	e7f3      	b.n	d80c6 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xae>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   d80de:	4c02      	ldr	r4, [pc, #8]	; (d80e8 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xd0>)
   d80e0:	e7f7      	b.n	d80d2 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xba>
   d80e2:	bf00      	nop
   d80e4:	ffffbd00 	.word	0xffffbd00
   d80e8:	ffffbf80 	.word	0xffffbf80

000d80ec <mbedtls_rsa_pkcs1_sign>:
                    int mode,
                    mbedtls_md_type_t md_alg,
                    unsigned int hashlen,
                    const unsigned char *hash,
                    unsigned char *sig )
{
   d80ec:	b430      	push	{r4, r5}
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );
    RSA_VALIDATE_RET( sig != NULL );

    switch( ctx->padding )
   d80ee:	f8d0 50a4 	ldr.w	r5, [r0, #164]	; 0xa4
{
   d80f2:	f89d 4008 	ldrb.w	r4, [sp, #8]
    switch( ctx->padding )
   d80f6:	b125      	cbz	r5, d8102 <mbedtls_rsa_pkcs1_sign+0x16>
   d80f8:	2d01      	cmp	r5, #1
   d80fa:	d006      	beq.n	d810a <mbedtls_rsa_pkcs1_sign+0x1e>
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
   d80fc:	4805      	ldr	r0, [pc, #20]	; (d8114 <mbedtls_rsa_pkcs1_sign+0x28>)
   d80fe:	bc30      	pop	{r4, r5}
   d8100:	4770      	bx	lr
            return mbedtls_rsa_rsassa_pkcs1_v15_sign( ctx, f_rng, p_rng, mode, md_alg,
   d8102:	9402      	str	r4, [sp, #8]
}
   d8104:	bc30      	pop	{r4, r5}
            return mbedtls_rsa_rsassa_pkcs1_v15_sign( ctx, f_rng, p_rng, mode, md_alg,
   d8106:	f7ff bf87 	b.w	d8018 <mbedtls_rsa_rsassa_pkcs1_v15_sign>
            return mbedtls_rsa_rsassa_pss_sign( ctx, f_rng, p_rng, mode, md_alg,
   d810a:	9402      	str	r4, [sp, #8]
}
   d810c:	bc30      	pop	{r4, r5}
            return mbedtls_rsa_rsassa_pss_sign( ctx, f_rng, p_rng, mode, md_alg,
   d810e:	f7ff bea7 	b.w	d7e60 <mbedtls_rsa_rsassa_pss_sign>
   d8112:	bf00      	nop
   d8114:	ffffbf00 	.word	0xffffbf00

000d8118 <mbedtls_rsa_rsassa_pss_verify_ext>:
                               unsigned int hashlen,
                               const unsigned char *hash,
                               mbedtls_md_type_t mgf1_hash_id,
                               int expected_salt_len,
                               const unsigned char *sig )
{
   d8118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d811c:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
    RSA_VALIDATE_RET( sig != NULL );
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
   d8120:	2b01      	cmp	r3, #1
{
   d8122:	4604      	mov	r4, r0
   d8124:	f89d 5490 	ldrb.w	r5, [sp, #1168]	; 0x490
   d8128:	f8dd 04a4 	ldr.w	r0, [sp, #1188]	; 0x4a4
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
   d812c:	d109      	bne.n	d8142 <mbedtls_rsa_rsassa_pss_verify_ext+0x2a>
   d812e:	f8d4 60a4 	ldr.w	r6, [r4, #164]	; 0xa4
   d8132:	2e01      	cmp	r6, #1
   d8134:	d005      	beq.n	d8142 <mbedtls_rsa_rsassa_pss_verify_ext+0x2a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   d8136:	4b60      	ldr	r3, [pc, #384]	; (d82b8 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a0>)

exit:
    mbedtls_md_free( &md_ctx );

    return( ret );
}
   d8138:	4618      	mov	r0, r3
   d813a:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   d813e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    siglen = ctx->len;
   d8142:	f8d4 8004 	ldr.w	r8, [r4, #4]
    if( siglen < 16 || siglen > sizeof( buf ) )
   d8146:	f1a8 0610 	sub.w	r6, r8, #16
   d814a:	f5b6 7f7c 	cmp.w	r6, #1008	; 0x3f0
   d814e:	d8f2      	bhi.n	d8136 <mbedtls_rsa_rsassa_pss_verify_ext+0x1e>
    ret = ( mode == MBEDTLS_RSA_PUBLIC )
   d8150:	ae1a      	add	r6, sp, #104	; 0x68
          ? mbedtls_rsa_public(  ctx, sig, buf )
   d8152:	2b00      	cmp	r3, #0
   d8154:	f040 80a6 	bne.w	d82a4 <mbedtls_rsa_rsassa_pss_verify_ext+0x18c>
   d8158:	4601      	mov	r1, r0
   d815a:	4632      	mov	r2, r6
   d815c:	4620      	mov	r0, r4
   d815e:	f7ff f9a1 	bl	d74a4 <mbedtls_rsa_public>
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, buf );
   d8162:	4603      	mov	r3, r0
    if( ret != 0 )
   d8164:	2800      	cmp	r0, #0
   d8166:	d1e7      	bne.n	d8138 <mbedtls_rsa_rsassa_pss_verify_ext+0x20>
    if( buf[siglen - 1] != 0xBC )
   d8168:	f108 3aff 	add.w	sl, r8, #4294967295
   d816c:	f816 300a 	ldrb.w	r3, [r6, sl]
   d8170:	2bbc      	cmp	r3, #188	; 0xbc
   d8172:	f040 809f 	bne.w	d82b4 <mbedtls_rsa_rsassa_pss_verify_ext+0x19c>
    if( md_alg != MBEDTLS_MD_NONE )
   d8176:	b145      	cbz	r5, d818a <mbedtls_rsa_rsassa_pss_verify_ext+0x72>
        md_info = mbedtls_md_info_from_type( md_alg );
   d8178:	4628      	mov	r0, r5
   d817a:	f004 fda7 	bl	dcccc <mbedtls_md_info_from_type>
        if( md_info == NULL )
   d817e:	2800      	cmp	r0, #0
   d8180:	d0d9      	beq.n	d8136 <mbedtls_rsa_rsassa_pss_verify_ext+0x1e>
        hashlen = mbedtls_md_get_size( md_info );
   d8182:	f004 fedd 	bl	dcf40 <mbedtls_md_get_size>
   d8186:	f8cd 0494 	str.w	r0, [sp, #1172]	; 0x494
    md_info = mbedtls_md_info_from_type( mgf1_hash_id );
   d818a:	f89d 049c 	ldrb.w	r0, [sp, #1180]	; 0x49c
   d818e:	f004 fd9d 	bl	dcccc <mbedtls_md_info_from_type>
    if( md_info == NULL )
   d8192:	4683      	mov	fp, r0
   d8194:	2800      	cmp	r0, #0
   d8196:	d0ce      	beq.n	d8136 <mbedtls_rsa_rsassa_pss_verify_ext+0x1e>
    hlen = mbedtls_md_get_size( md_info );
   d8198:	f004 fed2 	bl	dcf40 <mbedtls_md_get_size>
    memset( zeros, 0, 8 );
   d819c:	2300      	movs	r3, #0
    hlen = mbedtls_md_get_size( md_info );
   d819e:	4681      	mov	r9, r0
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
   d81a0:	f104 0008 	add.w	r0, r4, #8
    memset( zeros, 0, 8 );
   d81a4:	e9cd 3305 	strd	r3, r3, [sp, #20]
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
   d81a8:	f008 fd2e 	bl	e0c08 <mbedtls_mpi_bitlen>
    if( buf[0] >> ( 8 - siglen * 8 + msb ) )
   d81ac:	7832      	ldrb	r2, [r6, #0]
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
   d81ae:	1e47      	subs	r7, r0, #1
    if( buf[0] >> ( 8 - siglen * 8 + msb ) )
   d81b0:	f1c8 0301 	rsb	r3, r8, #1
   d81b4:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
   d81b8:	fa52 f303 	asrs.w	r3, r2, r3
   d81bc:	d1bb      	bne.n	d8136 <mbedtls_rsa_rsassa_pss_verify_ext+0x1e>
    if( msb % 8 == 0 )
   d81be:	0779      	lsls	r1, r7, #29
        siglen -= 1;
   d81c0:	bf08      	it	eq
   d81c2:	46d0      	moveq	r8, sl
    if( siglen < hlen + 2 )
   d81c4:	f109 0302 	add.w	r3, r9, #2
        p++;
   d81c8:	bf0c      	ite	eq
   d81ca:	f10d 0569 	addeq.w	r5, sp, #105	; 0x69
    p = buf;
   d81ce:	4635      	movne	r5, r6
    if( siglen < hlen + 2 )
   d81d0:	4543      	cmp	r3, r8
   d81d2:	d8b0      	bhi.n	d8136 <mbedtls_rsa_rsassa_pss_verify_ext+0x1e>
    mbedtls_md_init( &md_ctx );
   d81d4:	ac07      	add	r4, sp, #28
   d81d6:	4620      	mov	r0, r4
   d81d8:	f004 fd84 	bl	dcce4 <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
   d81dc:	2200      	movs	r2, #0
   d81de:	4659      	mov	r1, fp
   d81e0:	4620      	mov	r0, r4
   d81e2:	f004 fd9f 	bl	dcd24 <mbedtls_md_setup>
   d81e6:	4603      	mov	r3, r0
   d81e8:	2800      	cmp	r0, #0
   d81ea:	d155      	bne.n	d8298 <mbedtls_rsa_rsassa_pss_verify_ext+0x180>
    hash_start = p + siglen - hlen - 1;
   d81ec:	ea6f 0109 	mvn.w	r1, r9
   d81f0:	4441      	add	r1, r8
   d81f2:	eb05 0a01 	add.w	sl, r5, r1
    ret = mgf_mask( p, siglen - hlen - 1, hash_start, hlen, &md_ctx );
   d81f6:	464b      	mov	r3, r9
   d81f8:	9400      	str	r4, [sp, #0]
   d81fa:	4652      	mov	r2, sl
   d81fc:	4628      	mov	r0, r5
   d81fe:	f7fe fecf 	bl	d6fa0 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
    if( ret != 0 )
   d8202:	4603      	mov	r3, r0
   d8204:	2800      	cmp	r0, #0
   d8206:	d147      	bne.n	d8298 <mbedtls_rsa_rsassa_pss_verify_ext+0x180>
    buf[0] &= 0xFF >> ( siglen * 8 - msb );
   d8208:	ebc7 08c8 	rsb	r8, r7, r8, lsl #3
   d820c:	27ff      	movs	r7, #255	; 0xff
   d820e:	fa47 f708 	asr.w	r7, r7, r8
   d8212:	f896 8000 	ldrb.w	r8, [r6]
   d8216:	ea07 0708 	and.w	r7, r7, r8
   d821a:	7037      	strb	r7, [r6, #0]
    while( p < hash_start - 1 && *p == 0 )
   d821c:	f10a 32ff 	add.w	r2, sl, #4294967295
   d8220:	f815 3b01 	ldrb.w	r3, [r5], #1
   d8224:	1e69      	subs	r1, r5, #1
   d8226:	428a      	cmp	r2, r1
   d8228:	d901      	bls.n	d822e <mbedtls_rsa_rsassa_pss_verify_ext+0x116>
   d822a:	2b00      	cmp	r3, #0
   d822c:	d0f8      	beq.n	d8220 <mbedtls_rsa_rsassa_pss_verify_ext+0x108>
    if( *p++ != 0x01 )
   d822e:	2b01      	cmp	r3, #1
   d8230:	d13e      	bne.n	d82b0 <mbedtls_rsa_rsassa_pss_verify_ext+0x198>
    if( expected_salt_len != MBEDTLS_RSA_SALT_LEN_ANY &&
   d8232:	f8dd 34a0 	ldr.w	r3, [sp, #1184]	; 0x4a0
   d8236:	1c5a      	adds	r2, r3, #1
    observed_salt_len = hash_start - p;
   d8238:	ebaa 0605 	sub.w	r6, sl, r5
    if( expected_salt_len != MBEDTLS_RSA_SALT_LEN_ANY &&
   d823c:	d001      	beq.n	d8242 <mbedtls_rsa_rsassa_pss_verify_ext+0x12a>
   d823e:	429e      	cmp	r6, r3
   d8240:	d136      	bne.n	d82b0 <mbedtls_rsa_rsassa_pss_verify_ext+0x198>
    ret = mbedtls_md_starts( &md_ctx );
   d8242:	4620      	mov	r0, r4
   d8244:	f004 fd8e 	bl	dcd64 <mbedtls_md_starts>
    if ( ret != 0 )
   d8248:	4603      	mov	r3, r0
   d824a:	bb28      	cbnz	r0, d8298 <mbedtls_rsa_rsassa_pss_verify_ext+0x180>
    ret = mbedtls_md_update( &md_ctx, zeros, 8 );
   d824c:	2208      	movs	r2, #8
   d824e:	a905      	add	r1, sp, #20
   d8250:	4620      	mov	r0, r4
   d8252:	f004 fd91 	bl	dcd78 <mbedtls_md_update>
    if ( ret != 0 )
   d8256:	4603      	mov	r3, r0
   d8258:	b9f0      	cbnz	r0, d8298 <mbedtls_rsa_rsassa_pss_verify_ext+0x180>
    ret = mbedtls_md_update( &md_ctx, hash, hashlen );
   d825a:	f8dd 2494 	ldr.w	r2, [sp, #1172]	; 0x494
   d825e:	f8dd 1498 	ldr.w	r1, [sp, #1176]	; 0x498
   d8262:	4620      	mov	r0, r4
   d8264:	f004 fd88 	bl	dcd78 <mbedtls_md_update>
    if ( ret != 0 )
   d8268:	4603      	mov	r3, r0
   d826a:	b9a8      	cbnz	r0, d8298 <mbedtls_rsa_rsassa_pss_verify_ext+0x180>
    ret = mbedtls_md_update( &md_ctx, p, observed_salt_len );
   d826c:	4632      	mov	r2, r6
   d826e:	4629      	mov	r1, r5
   d8270:	4620      	mov	r0, r4
   d8272:	f004 fd81 	bl	dcd78 <mbedtls_md_update>
    if ( ret != 0 )
   d8276:	4603      	mov	r3, r0
   d8278:	b970      	cbnz	r0, d8298 <mbedtls_rsa_rsassa_pss_verify_ext+0x180>
    ret = mbedtls_md_finish( &md_ctx, result );
   d827a:	a90a      	add	r1, sp, #40	; 0x28
   d827c:	4620      	mov	r0, r4
   d827e:	f004 fd85 	bl	dcd8c <mbedtls_md_finish>
    if ( ret != 0 )
   d8282:	4603      	mov	r3, r0
   d8284:	b940      	cbnz	r0, d8298 <mbedtls_rsa_rsassa_pss_verify_ext+0x180>
    if( memcmp( hash_start, result, hlen ) != 0 )
   d8286:	464a      	mov	r2, r9
   d8288:	a90a      	add	r1, sp, #40	; 0x28
   d828a:	4650      	mov	r0, sl
   d828c:	f010 fb10 	bl	e88b0 <memcmp>
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
   d8290:	4a0a      	ldr	r2, [pc, #40]	; (d82bc <mbedtls_rsa_rsassa_pss_verify_ext+0x1a4>)
   d8292:	1e03      	subs	r3, r0, #0
   d8294:	bf18      	it	ne
   d8296:	4613      	movne	r3, r2
    mbedtls_md_free( &md_ctx );
   d8298:	4620      	mov	r0, r4
   d829a:	9303      	str	r3, [sp, #12]
   d829c:	f004 fd27 	bl	dccee <mbedtls_md_free>
    return( ret );
   d82a0:	9b03      	ldr	r3, [sp, #12]
   d82a2:	e749      	b.n	d8138 <mbedtls_rsa_rsassa_pss_verify_ext+0x20>
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, buf );
   d82a4:	4603      	mov	r3, r0
   d82a6:	9600      	str	r6, [sp, #0]
   d82a8:	4620      	mov	r0, r4
   d82aa:	f7ff f93b 	bl	d7524 <mbedtls_rsa_private>
   d82ae:	e758      	b.n	d8162 <mbedtls_rsa_rsassa_pss_verify_ext+0x4a>
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
   d82b0:	4b03      	ldr	r3, [pc, #12]	; (d82c0 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a8>)
   d82b2:	e7f1      	b.n	d8298 <mbedtls_rsa_rsassa_pss_verify_ext+0x180>
        return( MBEDTLS_ERR_RSA_INVALID_PADDING );
   d82b4:	4b02      	ldr	r3, [pc, #8]	; (d82c0 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a8>)
   d82b6:	e73f      	b.n	d8138 <mbedtls_rsa_rsassa_pss_verify_ext+0x20>
   d82b8:	ffffbf80 	.word	0xffffbf80
   d82bc:	ffffbc80 	.word	0xffffbc80
   d82c0:	ffffbf00 	.word	0xffffbf00

000d82c4 <mbedtls_rsa_rsassa_pss_verify>:
                           int mode,
                           mbedtls_md_type_t md_alg,
                           unsigned int hashlen,
                           const unsigned char *hash,
                           const unsigned char *sig )
{
   d82c4:	b570      	push	{r4, r5, r6, lr}
   d82c6:	b086      	sub	sp, #24
    RSA_VALIDATE_RET( sig != NULL );
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );

    mgf1_hash_id = ( ctx->hash_id != MBEDTLS_MD_NONE )
   d82c8:	f8d0 40a8 	ldr.w	r4, [r0, #168]	; 0xa8
{
   d82cc:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
                             ? (mbedtls_md_type_t) ctx->hash_id
   d82d0:	b17c      	cbz	r4, d82f2 <mbedtls_rsa_rsassa_pss_verify+0x2e>
   d82d2:	b2e4      	uxtb	r4, r4
                             : md_alg;

    return( mbedtls_rsa_rsassa_pss_verify_ext( ctx, f_rng, p_rng, mode,
   d82d4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   d82d6:	9605      	str	r6, [sp, #20]
   d82d8:	f04f 36ff 	mov.w	r6, #4294967295
   d82dc:	e9cd 4603 	strd	r4, r6, [sp, #12]
   d82e0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   d82e2:	9402      	str	r4, [sp, #8]
   d82e4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   d82e6:	e9cd 5400 	strd	r5, r4, [sp]
   d82ea:	f7ff ff15 	bl	d8118 <mbedtls_rsa_rsassa_pss_verify_ext>
                                       md_alg, hashlen, hash,
                                       mgf1_hash_id, MBEDTLS_RSA_SALT_LEN_ANY,
                                       sig ) );

}
   d82ee:	b006      	add	sp, #24
   d82f0:	bd70      	pop	{r4, r5, r6, pc}
                             ? (mbedtls_md_type_t) ctx->hash_id
   d82f2:	462c      	mov	r4, r5
   d82f4:	e7ee      	b.n	d82d4 <mbedtls_rsa_rsassa_pss_verify+0x10>
	...

000d82f8 <mbedtls_rsa_rsassa_pkcs1_v15_verify>:
                                 int mode,
                                 mbedtls_md_type_t md_alg,
                                 unsigned int hashlen,
                                 const unsigned char *hash,
                                 const unsigned char *sig )
{
   d82f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
                        hashlen == 0 ) ||
                      hash != NULL );

    sig_len = ctx->len;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
   d82fc:	2b01      	cmp	r3, #1
    sig_len = ctx->len;
   d82fe:	6846      	ldr	r6, [r0, #4]
{
   d8300:	4607      	mov	r7, r0
   d8302:	4689      	mov	r9, r1
   d8304:	4692      	mov	sl, r2
   d8306:	4698      	mov	r8, r3
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
   d8308:	d103      	bne.n	d8312 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x1a>
   d830a:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   d830e:	2b00      	cmp	r3, #0
   d8310:	d14a      	bne.n	d83a8 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xb0>

    /*
     * Prepare expected PKCS1 v1.5 encoding of hash.
     */

    if( ( encoded          = (unsigned char *)mbedtls_calloc( 1, sig_len ) ) == NULL ||
   d8312:	4631      	mov	r1, r6
   d8314:	2001      	movs	r0, #1
   d8316:	f010 fa5f 	bl	e87d8 <calloc>
   d831a:	4605      	mov	r5, r0
   d831c:	2800      	cmp	r0, #0
   d831e:	d046      	beq.n	d83ae <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xb6>
        ( encoded_expected = (unsigned char *)mbedtls_calloc( 1, sig_len ) ) == NULL )
   d8320:	4631      	mov	r1, r6
   d8322:	2001      	movs	r0, #1
   d8324:	f010 fa58 	bl	e87d8 <calloc>
    if( ( encoded          = (unsigned char *)mbedtls_calloc( 1, sig_len ) ) == NULL ||
   d8328:	4604      	mov	r4, r0
   d832a:	2800      	cmp	r0, #0
   d832c:	d042      	beq.n	d83b4 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xbc>
    {
        ret = MBEDTLS_ERR_MPI_ALLOC_FAILED;
        goto cleanup;
    }

    if( ( ret = rsa_rsassa_pkcs1_v15_encode( md_alg, hashlen, hash, sig_len,
   d832e:	9000      	str	r0, [sp, #0]
   d8330:	e9dd 120d 	ldrd	r1, r2, [sp, #52]	; 0x34
   d8334:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   d8338:	4633      	mov	r3, r6
   d833a:	f7fe fe81 	bl	d7040 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh>
   d833e:	4683      	mov	fp, r0
   d8340:	b9f8      	cbnz	r0, d8382 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x8a>
    /*
     * Apply RSA primitive to get what should be PKCS1 encoded hash.
     */

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, sig, encoded )
   d8342:	f1b8 0f00 	cmp.w	r8, #0
   d8346:	d110      	bne.n	d836a <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x72>
   d8348:	990f      	ldr	r1, [sp, #60]	; 0x3c
   d834a:	462a      	mov	r2, r5
   d834c:	4638      	mov	r0, r7
   d834e:	f7ff f8a9 	bl	d74a4 <mbedtls_rsa_public>
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, encoded );
   d8352:	4683      	mov	fp, r0
    if( ret != 0 )
   d8354:	b9a8      	cbnz	r0, d8382 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x8a>
    unsigned char diff = 0;
   d8356:	4601      	mov	r1, r0
    for( i = 0; i < n; i++ )
   d8358:	4602      	mov	r2, r0
   d835a:	4296      	cmp	r6, r2
   d835c:	d00d      	beq.n	d837a <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x82>
        diff |= A[i] ^ B[i];
   d835e:	5ca8      	ldrb	r0, [r5, r2]
   d8360:	5ca7      	ldrb	r7, [r4, r2]
   d8362:	4078      	eors	r0, r7
   d8364:	4301      	orrs	r1, r0
    for( i = 0; i < n; i++ )
   d8366:	3201      	adds	r2, #1
   d8368:	e7f7      	b.n	d835a <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x62>
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, encoded );
   d836a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d836c:	9500      	str	r5, [sp, #0]
   d836e:	4652      	mov	r2, sl
   d8370:	4649      	mov	r1, r9
   d8372:	4638      	mov	r0, r7
   d8374:	f7ff f8d6 	bl	d7524 <mbedtls_rsa_private>
   d8378:	e7eb      	b.n	d8352 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x5a>
     */

    if( ( ret = mbedtls_safer_memcmp( encoded, encoded_expected,
                                      sig_len ) ) != 0 )
    {
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
   d837a:	4a10      	ldr	r2, [pc, #64]	; (d83bc <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xc4>)
   d837c:	2900      	cmp	r1, #0
   d837e:	bf18      	it	ne
   d8380:	4693      	movne	fp, r2

cleanup:

    if( encoded != NULL )
    {
        mbedtls_platform_zeroize( encoded, sig_len );
   d8382:	4628      	mov	r0, r5
   d8384:	4631      	mov	r1, r6
   d8386:	f002 fe29 	bl	dafdc <mbedtls_platform_zeroize>
        mbedtls_free( encoded );
   d838a:	4628      	mov	r0, r5
   d838c:	f00d fa18 	bl	e57c0 <free>
    }

    if( encoded_expected != NULL )
   d8390:	b134      	cbz	r4, d83a0 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xa8>
    {
        mbedtls_platform_zeroize( encoded_expected, sig_len );
   d8392:	4620      	mov	r0, r4
   d8394:	4631      	mov	r1, r6
   d8396:	f002 fe21 	bl	dafdc <mbedtls_platform_zeroize>
        mbedtls_free( encoded_expected );
   d839a:	4620      	mov	r0, r4
   d839c:	f00d fa10 	bl	e57c0 <free>
    }

    return( ret );
}
   d83a0:	4658      	mov	r0, fp
   d83a2:	b003      	add	sp, #12
   d83a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   d83a8:	f8df b014 	ldr.w	fp, [pc, #20]	; d83c0 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xc8>
   d83ac:	e7f8      	b.n	d83a0 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xa8>
        ret = MBEDTLS_ERR_MPI_ALLOC_FAILED;
   d83ae:	f06f 0b0f 	mvn.w	fp, #15
   d83b2:	e7f5      	b.n	d83a0 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xa8>
   d83b4:	f06f 0b0f 	mvn.w	fp, #15
   d83b8:	e7e3      	b.n	d8382 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x8a>
   d83ba:	bf00      	nop
   d83bc:	ffffbc80 	.word	0xffffbc80
   d83c0:	ffffbf80 	.word	0xffffbf80

000d83c4 <mbedtls_rsa_pkcs1_verify>:
                      int mode,
                      mbedtls_md_type_t md_alg,
                      unsigned int hashlen,
                      const unsigned char *hash,
                      const unsigned char *sig )
{
   d83c4:	b430      	push	{r4, r5}
    RSA_VALIDATE_RET( sig != NULL );
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );

    switch( ctx->padding )
   d83c6:	f8d0 50a4 	ldr.w	r5, [r0, #164]	; 0xa4
{
   d83ca:	f89d 4008 	ldrb.w	r4, [sp, #8]
    switch( ctx->padding )
   d83ce:	b125      	cbz	r5, d83da <mbedtls_rsa_pkcs1_verify+0x16>
   d83d0:	2d01      	cmp	r5, #1
   d83d2:	d006      	beq.n	d83e2 <mbedtls_rsa_pkcs1_verify+0x1e>
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
   d83d4:	4805      	ldr	r0, [pc, #20]	; (d83ec <mbedtls_rsa_pkcs1_verify+0x28>)
   d83d6:	bc30      	pop	{r4, r5}
   d83d8:	4770      	bx	lr
            return mbedtls_rsa_rsassa_pkcs1_v15_verify( ctx, f_rng, p_rng, mode, md_alg,
   d83da:	9402      	str	r4, [sp, #8]
}
   d83dc:	bc30      	pop	{r4, r5}
            return mbedtls_rsa_rsassa_pkcs1_v15_verify( ctx, f_rng, p_rng, mode, md_alg,
   d83de:	f7ff bf8b 	b.w	d82f8 <mbedtls_rsa_rsassa_pkcs1_v15_verify>
            return mbedtls_rsa_rsassa_pss_verify( ctx, f_rng, p_rng, mode, md_alg,
   d83e2:	9402      	str	r4, [sp, #8]
}
   d83e4:	bc30      	pop	{r4, r5}
            return mbedtls_rsa_rsassa_pss_verify( ctx, f_rng, p_rng, mode, md_alg,
   d83e6:	f7ff bf6d 	b.w	d82c4 <mbedtls_rsa_rsassa_pss_verify>
   d83ea:	bf00      	nop
   d83ec:	ffffbf00 	.word	0xffffbf00

000d83f0 <mbedtls_rsa_free>:

/*
 * Free the components of an RSA key
 */
void mbedtls_rsa_free( mbedtls_rsa_context *ctx )
{
   d83f0:	b510      	push	{r4, lr}
    if( ctx == NULL )
   d83f2:	4604      	mov	r4, r0
   d83f4:	b3a0      	cbz	r0, d8460 <mbedtls_rsa_free+0x70>
        return;

    mbedtls_mpi_free( &ctx->Vi );
   d83f6:	308c      	adds	r0, #140	; 0x8c
   d83f8:	f008 fae9 	bl	e09ce <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Vf );
   d83fc:	f104 0098 	add.w	r0, r4, #152	; 0x98
   d8400:	f008 fae5 	bl	e09ce <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RN );
   d8404:	f104 0068 	add.w	r0, r4, #104	; 0x68
   d8408:	f008 fae1 	bl	e09ce <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->D  );
   d840c:	f104 0020 	add.w	r0, r4, #32
   d8410:	f008 fadd 	bl	e09ce <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Q  );
   d8414:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d8418:	f008 fad9 	bl	e09ce <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->P  );
   d841c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d8420:	f008 fad5 	bl	e09ce <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->E  );
   d8424:	f104 0014 	add.w	r0, r4, #20
   d8428:	f008 fad1 	bl	e09ce <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->N  );
   d842c:	f104 0008 	add.w	r0, r4, #8
   d8430:	f008 facd 	bl	e09ce <mbedtls_mpi_free>

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &ctx->RQ );
   d8434:	f104 0080 	add.w	r0, r4, #128	; 0x80
   d8438:	f008 fac9 	bl	e09ce <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RP );
   d843c:	f104 0074 	add.w	r0, r4, #116	; 0x74
   d8440:	f008 fac5 	bl	e09ce <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->QP );
   d8444:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   d8448:	f008 fac1 	bl	e09ce <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DQ );
   d844c:	f104 0050 	add.w	r0, r4, #80	; 0x50
   d8450:	f008 fabd 	bl	e09ce <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DP );
   d8454:	f104 0044 	add.w	r0, r4, #68	; 0x44
#endif /* MBEDTLS_RSA_NO_CRT */

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_free( &ctx->mutex );
#endif
}
   d8458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_mpi_free( &ctx->DP );
   d845c:	f008 bab7 	b.w	e09ce <mbedtls_mpi_free>
}
   d8460:	bd10      	pop	{r4, pc}

000d8462 <_ZL12ecp_get_typePK17mbedtls_ecp_group>:
/*
 * Get the type of a curve
 */
static inline ecp_curve_type ecp_get_type( const mbedtls_ecp_group *grp )
{
    if( grp->G.X.p == NULL )
   d8462:	6b03      	ldr	r3, [r0, #48]	; 0x30
   d8464:	b12b      	cbz	r3, d8472 <_ZL12ecp_get_typePK17mbedtls_ecp_group+0x10>
        return( ECP_TYPE_NONE );

    if( grp->G.Y.p == NULL )
   d8466:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   d8468:	2b00      	cmp	r3, #0
        return( ECP_TYPE_MONTGOMERY );
    else
        return( ECP_TYPE_SHORT_WEIERSTRASS );
   d846a:	bf0c      	ite	eq
   d846c:	2002      	moveq	r0, #2
   d846e:	2001      	movne	r0, #1
   d8470:	4770      	bx	lr
        return( ECP_TYPE_NONE );
   d8472:	4618      	mov	r0, r3
}
   d8474:	4770      	bx	lr

000d8476 <_ZL19ecp_safe_invert_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointh>:
 * "inv" must be 0 (don't invert) or 1 (invert) or the result will be invalid
 */
static int ecp_safe_invert_jac( const mbedtls_ecp_group *grp,
                            mbedtls_ecp_point *Q,
                            unsigned char inv )
{
   d8476:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d8478:	460d      	mov	r5, r1
   d847a:	4604      	mov	r4, r0
    mbedtls_mpi mQY;

    mbedtls_mpi_init( &mQY );

    /* Use the fact that -Q.Y mod P = P - Q.Y unless Q.Y == 0 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mQY, &grp->P, &Q->Y ) );
   d847c:	350c      	adds	r5, #12
    mbedtls_mpi_init( &mQY );
   d847e:	a801      	add	r0, sp, #4
{
   d8480:	4616      	mov	r6, r2
    mbedtls_mpi_init( &mQY );
   d8482:	f008 fa9e 	bl	e09c2 <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mQY, &grp->P, &Q->Y ) );
   d8486:	1d21      	adds	r1, r4, #4
   d8488:	462a      	mov	r2, r5
   d848a:	a801      	add	r0, sp, #4
   d848c:	f008 fe86 	bl	e119c <mbedtls_mpi_sub_mpi>
   d8490:	4604      	mov	r4, r0
   d8492:	b968      	cbnz	r0, d84b0 <_ZL19ecp_safe_invert_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointh+0x3a>
    nonzero = mbedtls_mpi_cmp_int( &Q->Y, 0 ) != 0;
   d8494:	4601      	mov	r1, r0
   d8496:	4628      	mov	r0, r5
   d8498:	f008 fdb3 	bl	e1002 <mbedtls_mpi_cmp_int>
    MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &Q->Y, &mQY, inv & nonzero ) );
   d849c:	a901      	add	r1, sp, #4
   d849e:	2800      	cmp	r0, #0
   d84a0:	bf0c      	ite	eq
   d84a2:	2200      	moveq	r2, #0
   d84a4:	f006 0201 	andne.w	r2, r6, #1
   d84a8:	4628      	mov	r0, r5
   d84aa:	f008 fb33 	bl	e0b14 <mbedtls_mpi_safe_cond_assign>
   d84ae:	4604      	mov	r4, r0

cleanup:
    mbedtls_mpi_free( &mQY );
   d84b0:	a801      	add	r0, sp, #4
   d84b2:	f008 fa8c 	bl	e09ce <mbedtls_mpi_free>

    return( ret );
}
   d84b6:	4620      	mov	r0, r4
   d84b8:	b004      	add	sp, #16
   d84ba:	bd70      	pop	{r4, r5, r6, pc}

000d84bc <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>:
{
   d84bc:	b570      	push	{r4, r5, r6, lr}
    if( grp->modp == NULL )
   d84be:	6e4b      	ldr	r3, [r1, #100]	; 0x64
{
   d84c0:	4604      	mov	r4, r0
   d84c2:	460d      	mov	r5, r1
    if( grp->modp == NULL )
   d84c4:	b92b      	cbnz	r3, d84d2 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x16>
        return( mbedtls_mpi_mod_mpi( N, N, &grp->P ) );
   d84c6:	1d0a      	adds	r2, r1, #4
}
   d84c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return( mbedtls_mpi_mod_mpi( N, N, &grp->P ) );
   d84cc:	4601      	mov	r1, r0
   d84ce:	f009 b8ec 	b.w	e16aa <mbedtls_mpi_mod_mpi>
    if( ( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 ) ||
   d84d2:	6803      	ldr	r3, [r0, #0]
   d84d4:	2b00      	cmp	r3, #0
   d84d6:	db09      	blt.n	d84ec <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x30>
        mbedtls_mpi_bitlen( N ) > 2 * grp->pbits )
   d84d8:	4620      	mov	r0, r4
   d84da:	f008 fb95 	bl	e0c08 <mbedtls_mpi_bitlen>
   d84de:	6dab      	ldr	r3, [r5, #88]	; 0x58
    if( ( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 ) ||
   d84e0:	ebb0 0f43 	cmp.w	r0, r3, lsl #1
   d84e4:	d908      	bls.n	d84f8 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x3c>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   d84e6:	4e17      	ldr	r6, [pc, #92]	; (d8544 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x88>)
}
   d84e8:	4630      	mov	r0, r6
   d84ea:	bd70      	pop	{r4, r5, r6, pc}
    if( ( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 ) ||
   d84ec:	2100      	movs	r1, #0
   d84ee:	f008 fd88 	bl	e1002 <mbedtls_mpi_cmp_int>
   d84f2:	2800      	cmp	r0, #0
   d84f4:	d0f0      	beq.n	d84d8 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x1c>
   d84f6:	e7f6      	b.n	d84e6 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x2a>
    MBEDTLS_MPI_CHK( grp->modp( N ) );
   d84f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   d84fa:	4620      	mov	r0, r4
   d84fc:	4798      	blx	r3
   d84fe:	4606      	mov	r6, r0
   d8500:	2800      	cmp	r0, #0
   d8502:	d1f1      	bne.n	d84e8 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x2c>
   d8504:	3504      	adds	r5, #4
    while( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 )
   d8506:	6823      	ldr	r3, [r4, #0]
   d8508:	2b00      	cmp	r3, #0
   d850a:	da0d      	bge.n	d8528 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x6c>
   d850c:	2100      	movs	r1, #0
   d850e:	4620      	mov	r0, r4
   d8510:	f008 fd77 	bl	e1002 <mbedtls_mpi_cmp_int>
   d8514:	b140      	cbz	r0, d8528 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x6c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &grp->P ) );
   d8516:	462a      	mov	r2, r5
   d8518:	4621      	mov	r1, r4
   d851a:	4620      	mov	r0, r4
   d851c:	f008 fe1c 	bl	e1158 <mbedtls_mpi_add_mpi>
   d8520:	2800      	cmp	r0, #0
   d8522:	d0f0      	beq.n	d8506 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x4a>
   d8524:	4606      	mov	r6, r0
   d8526:	e7df      	b.n	d84e8 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x2c>
    while( mbedtls_mpi_cmp_mpi( N, &grp->P ) >= 0 )
   d8528:	4629      	mov	r1, r5
   d852a:	4620      	mov	r0, r4
   d852c:	f008 fd28 	bl	e0f80 <mbedtls_mpi_cmp_mpi>
   d8530:	2800      	cmp	r0, #0
   d8532:	dbd9      	blt.n	d84e8 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x2c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, N, &grp->P ) );
   d8534:	462a      	mov	r2, r5
   d8536:	4621      	mov	r1, r4
   d8538:	4620      	mov	r0, r4
   d853a:	f008 fdd1 	bl	e10e0 <mbedtls_mpi_sub_abs>
   d853e:	2800      	cmp	r0, #0
   d8540:	d0f2      	beq.n	d8528 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x6c>
   d8542:	e7ef      	b.n	d8524 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x68>
   d8544:	ffffb080 	.word	0xffffb080

000d8548 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_>:
 *             4M + 4S          (A == -3)
 *             3M + 6S + 1a     otherwise
 */
static int ecp_double_jac( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                           const mbedtls_ecp_point *P )
{
   d8548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d854c:	b08d      	sub	sp, #52	; 0x34
   d854e:	4680      	mov	r8, r0
#if defined(MBEDTLS_ECP_DOUBLE_JAC_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_double_jac( grp, R, P ) );
#endif /* MBEDTLS_ECP_DOUBLE_JAC_ALT */

    mbedtls_mpi_init( &M ); mbedtls_mpi_init( &S ); mbedtls_mpi_init( &T ); mbedtls_mpi_init( &U );
   d8550:	ad03      	add	r5, sp, #12
   d8552:	4668      	mov	r0, sp
{
   d8554:	460e      	mov	r6, r1
   d8556:	4691      	mov	r9, r2
    mbedtls_mpi_init( &M ); mbedtls_mpi_init( &S ); mbedtls_mpi_init( &T ); mbedtls_mpi_init( &U );
   d8558:	f008 fa33 	bl	e09c2 <mbedtls_mpi_init>
   d855c:	4628      	mov	r0, r5
   d855e:	f008 fa30 	bl	e09c2 <mbedtls_mpi_init>
   d8562:	a806      	add	r0, sp, #24
   d8564:	f008 fa2d 	bl	e09c2 <mbedtls_mpi_init>
   d8568:	a809      	add	r0, sp, #36	; 0x24
   d856a:	f008 fa2a 	bl	e09c2 <mbedtls_mpi_init>

    /* Special case for A = -3 */
    if( grp->A.p == NULL )
   d856e:	f8d8 3018 	ldr.w	r3, [r8, #24]
   d8572:	2b00      	cmp	r3, #0
   d8574:	d16d      	bne.n	d8652 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x10a>
    {
        /* M = 3(X + Z^2)(X - Z^2) */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
   d8576:	f109 0218 	add.w	r2, r9, #24
   d857a:	4611      	mov	r1, r2
   d857c:	4628      	mov	r0, r5
   d857e:	f008 fe5c 	bl	e123a <mbedtls_mpi_mul_mpi>
   d8582:	4604      	mov	r4, r0
   d8584:	b9e0      	cbnz	r0, d85c0 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
   d8586:	4641      	mov	r1, r8
   d8588:	4628      	mov	r0, r5
   d858a:	f7ff ff97 	bl	d84bc <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d858e:	4604      	mov	r4, r0
   d8590:	b9b0      	cbnz	r0, d85c0 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T,  &P->X,  &S      ) ); MOD_ADD( T );
   d8592:	462a      	mov	r2, r5
   d8594:	4649      	mov	r1, r9
   d8596:	a806      	add	r0, sp, #24
   d8598:	f008 fdde 	bl	e1158 <mbedtls_mpi_add_mpi>
   d859c:	4604      	mov	r4, r0
   d859e:	b978      	cbnz	r0, d85c0 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
   d85a0:	f108 0704 	add.w	r7, r8, #4
   d85a4:	4639      	mov	r1, r7
   d85a6:	a806      	add	r0, sp, #24
   d85a8:	f008 fcea 	bl	e0f80 <mbedtls_mpi_cmp_mpi>
   d85ac:	2800      	cmp	r0, #0
   d85ae:	db17      	blt.n	d85e0 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x98>
   d85b0:	a906      	add	r1, sp, #24
   d85b2:	463a      	mov	r2, r7
   d85b4:	4608      	mov	r0, r1
   d85b6:	f008 fd93 	bl	e10e0 <mbedtls_mpi_sub_abs>
   d85ba:	4604      	mov	r4, r0
   d85bc:	2800      	cmp	r0, #0
   d85be:	d0f1      	beq.n	d85a4 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x5c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->X, &T ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Y, &S ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &U ) );

cleanup:
    mbedtls_mpi_free( &M ); mbedtls_mpi_free( &S ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &U );
   d85c0:	4668      	mov	r0, sp
   d85c2:	f008 fa04 	bl	e09ce <mbedtls_mpi_free>
   d85c6:	4628      	mov	r0, r5
   d85c8:	f008 fa01 	bl	e09ce <mbedtls_mpi_free>
   d85cc:	a806      	add	r0, sp, #24
   d85ce:	f008 f9fe 	bl	e09ce <mbedtls_mpi_free>
   d85d2:	a809      	add	r0, sp, #36	; 0x24
   d85d4:	f008 f9fb 	bl	e09ce <mbedtls_mpi_free>

    return( ret );
}
   d85d8:	4620      	mov	r0, r4
   d85da:	b00d      	add	sp, #52	; 0x34
   d85dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U,  &P->X,  &S      ) ); MOD_SUB( U );
   d85e0:	462a      	mov	r2, r5
   d85e2:	4649      	mov	r1, r9
   d85e4:	a809      	add	r0, sp, #36	; 0x24
   d85e6:	f008 fdd9 	bl	e119c <mbedtls_mpi_sub_mpi>
   d85ea:	4604      	mov	r4, r0
   d85ec:	2800      	cmp	r0, #0
   d85ee:	d1e7      	bne.n	d85c0 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
   d85f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d85f2:	2b00      	cmp	r3, #0
   d85f4:	da0a      	bge.n	d860c <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0xc4>
   d85f6:	2100      	movs	r1, #0
   d85f8:	a809      	add	r0, sp, #36	; 0x24
   d85fa:	f008 fd02 	bl	e1002 <mbedtls_mpi_cmp_int>
   d85fe:	b128      	cbz	r0, d860c <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0xc4>
   d8600:	a909      	add	r1, sp, #36	; 0x24
   d8602:	463a      	mov	r2, r7
   d8604:	4608      	mov	r0, r1
   d8606:	f008 fda7 	bl	e1158 <mbedtls_mpi_add_mpi>
   d860a:	e7ee      	b.n	d85ea <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0xa2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &U      ) ); MOD_MUL( S );
   d860c:	aa09      	add	r2, sp, #36	; 0x24
   d860e:	a906      	add	r1, sp, #24
   d8610:	4628      	mov	r0, r5
   d8612:	f008 fe12 	bl	e123a <mbedtls_mpi_mul_mpi>
   d8616:	4604      	mov	r4, r0
   d8618:	2800      	cmp	r0, #0
   d861a:	d1d1      	bne.n	d85c0 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
   d861c:	4641      	mov	r1, r8
   d861e:	4628      	mov	r0, r5
   d8620:	f7ff ff4c 	bl	d84bc <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8624:	4604      	mov	r4, r0
   d8626:	2800      	cmp	r0, #0
   d8628:	d1ca      	bne.n	d85c0 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
   d862a:	2203      	movs	r2, #3
   d862c:	4629      	mov	r1, r5
   d862e:	4668      	mov	r0, sp
   d8630:	f008 fe67 	bl	e1302 <mbedtls_mpi_mul_int>
   d8634:	4604      	mov	r4, r0
   d8636:	2800      	cmp	r0, #0
   d8638:	d1c2      	bne.n	d85c0 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
   d863a:	4639      	mov	r1, r7
   d863c:	4668      	mov	r0, sp
   d863e:	f008 fc9f 	bl	e0f80 <mbedtls_mpi_cmp_mpi>
   d8642:	2800      	cmp	r0, #0
   d8644:	db7e      	blt.n	d8744 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x1fc>
   d8646:	463a      	mov	r2, r7
   d8648:	4669      	mov	r1, sp
   d864a:	4668      	mov	r0, sp
   d864c:	f008 fd48 	bl	e10e0 <mbedtls_mpi_sub_abs>
   d8650:	e7f0      	b.n	d8634 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0xec>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &P->X   ) ); MOD_MUL( S );
   d8652:	464a      	mov	r2, r9
   d8654:	4649      	mov	r1, r9
   d8656:	4628      	mov	r0, r5
   d8658:	f008 fdef 	bl	e123a <mbedtls_mpi_mul_mpi>
   d865c:	4604      	mov	r4, r0
   d865e:	2800      	cmp	r0, #0
   d8660:	d1ae      	bne.n	d85c0 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
   d8662:	4641      	mov	r1, r8
   d8664:	4628      	mov	r0, r5
   d8666:	f7ff ff29 	bl	d84bc <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d866a:	4604      	mov	r4, r0
   d866c:	2800      	cmp	r0, #0
   d866e:	d1a7      	bne.n	d85c0 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
   d8670:	2203      	movs	r2, #3
   d8672:	4629      	mov	r1, r5
   d8674:	4668      	mov	r0, sp
   d8676:	f008 fe44 	bl	e1302 <mbedtls_mpi_mul_int>
   d867a:	4604      	mov	r4, r0
   d867c:	2800      	cmp	r0, #0
   d867e:	d19f      	bne.n	d85c0 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
   d8680:	f108 0704 	add.w	r7, r8, #4
   d8684:	4639      	mov	r1, r7
   d8686:	4668      	mov	r0, sp
   d8688:	f008 fc7a 	bl	e0f80 <mbedtls_mpi_cmp_mpi>
   d868c:	2800      	cmp	r0, #0
   d868e:	db08      	blt.n	d86a2 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x15a>
   d8690:	463a      	mov	r2, r7
   d8692:	4669      	mov	r1, sp
   d8694:	4668      	mov	r0, sp
   d8696:	f008 fd23 	bl	e10e0 <mbedtls_mpi_sub_abs>
   d869a:	4604      	mov	r4, r0
   d869c:	2800      	cmp	r0, #0
   d869e:	d0f1      	beq.n	d8684 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x13c>
   d86a0:	e78e      	b.n	d85c0 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
        if( mbedtls_mpi_cmp_int( &grp->A, 0 ) != 0 )
   d86a2:	f108 0a10 	add.w	sl, r8, #16
   d86a6:	2100      	movs	r1, #0
   d86a8:	4650      	mov	r0, sl
   d86aa:	f008 fcaa 	bl	e1002 <mbedtls_mpi_cmp_int>
   d86ae:	2800      	cmp	r0, #0
   d86b0:	d048      	beq.n	d8744 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x1fc>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
   d86b2:	f109 0218 	add.w	r2, r9, #24
   d86b6:	4611      	mov	r1, r2
   d86b8:	4628      	mov	r0, r5
   d86ba:	f008 fdbe 	bl	e123a <mbedtls_mpi_mul_mpi>
   d86be:	4604      	mov	r4, r0
   d86c0:	2800      	cmp	r0, #0
   d86c2:	f47f af7d 	bne.w	d85c0 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
   d86c6:	4641      	mov	r1, r8
   d86c8:	4628      	mov	r0, r5
   d86ca:	f7ff fef7 	bl	d84bc <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d86ce:	4604      	mov	r4, r0
   d86d0:	2800      	cmp	r0, #0
   d86d2:	f47f af75 	bne.w	d85c0 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &S,     &S      ) ); MOD_MUL( T );
   d86d6:	462a      	mov	r2, r5
   d86d8:	4629      	mov	r1, r5
   d86da:	a806      	add	r0, sp, #24
   d86dc:	f008 fdad 	bl	e123a <mbedtls_mpi_mul_mpi>
   d86e0:	4604      	mov	r4, r0
   d86e2:	2800      	cmp	r0, #0
   d86e4:	f47f af6c 	bne.w	d85c0 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
   d86e8:	4641      	mov	r1, r8
   d86ea:	a806      	add	r0, sp, #24
   d86ec:	f7ff fee6 	bl	d84bc <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d86f0:	4604      	mov	r4, r0
   d86f2:	2800      	cmp	r0, #0
   d86f4:	f47f af64 	bne.w	d85c0 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &grp->A ) ); MOD_MUL( S );
   d86f8:	4652      	mov	r2, sl
   d86fa:	a906      	add	r1, sp, #24
   d86fc:	4628      	mov	r0, r5
   d86fe:	f008 fd9c 	bl	e123a <mbedtls_mpi_mul_mpi>
   d8702:	4604      	mov	r4, r0
   d8704:	2800      	cmp	r0, #0
   d8706:	f47f af5b 	bne.w	d85c0 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
   d870a:	4641      	mov	r1, r8
   d870c:	4628      	mov	r0, r5
   d870e:	f7ff fed5 	bl	d84bc <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8712:	4604      	mov	r4, r0
   d8714:	2800      	cmp	r0, #0
   d8716:	f47f af53 	bne.w	d85c0 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &M,  &M,     &S      ) ); MOD_ADD( M );
   d871a:	462a      	mov	r2, r5
   d871c:	4669      	mov	r1, sp
   d871e:	4668      	mov	r0, sp
   d8720:	f008 fd1a 	bl	e1158 <mbedtls_mpi_add_mpi>
   d8724:	4604      	mov	r4, r0
   d8726:	2800      	cmp	r0, #0
   d8728:	f47f af4a 	bne.w	d85c0 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
   d872c:	4639      	mov	r1, r7
   d872e:	4668      	mov	r0, sp
   d8730:	f008 fc26 	bl	e0f80 <mbedtls_mpi_cmp_mpi>
   d8734:	2800      	cmp	r0, #0
   d8736:	db05      	blt.n	d8744 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x1fc>
   d8738:	463a      	mov	r2, r7
   d873a:	4669      	mov	r1, sp
   d873c:	4668      	mov	r0, sp
   d873e:	f008 fccf 	bl	e10e0 <mbedtls_mpi_sub_abs>
   d8742:	e7ef      	b.n	d8724 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x1dc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &P->Y,  &P->Y   ) ); MOD_MUL( T );
   d8744:	f109 0a0c 	add.w	sl, r9, #12
   d8748:	4652      	mov	r2, sl
   d874a:	4651      	mov	r1, sl
   d874c:	a806      	add	r0, sp, #24
   d874e:	f008 fd74 	bl	e123a <mbedtls_mpi_mul_mpi>
   d8752:	4604      	mov	r4, r0
   d8754:	2800      	cmp	r0, #0
   d8756:	f47f af33 	bne.w	d85c0 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
   d875a:	4641      	mov	r1, r8
   d875c:	a806      	add	r0, sp, #24
   d875e:	f7ff fead 	bl	d84bc <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8762:	4604      	mov	r4, r0
   d8764:	2800      	cmp	r0, #0
   d8766:	f47f af2b 	bne.w	d85c0 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T,  1               ) ); MOD_ADD( T );
   d876a:	2101      	movs	r1, #1
   d876c:	a806      	add	r0, sp, #24
   d876e:	f008 fada 	bl	e0d26 <mbedtls_mpi_shift_l>
   d8772:	4604      	mov	r4, r0
   d8774:	2800      	cmp	r0, #0
   d8776:	f47f af23 	bne.w	d85c0 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
   d877a:	f108 0704 	add.w	r7, r8, #4
   d877e:	4639      	mov	r1, r7
   d8780:	a806      	add	r0, sp, #24
   d8782:	f008 fbfd 	bl	e0f80 <mbedtls_mpi_cmp_mpi>
   d8786:	2800      	cmp	r0, #0
   d8788:	db08      	blt.n	d879c <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x254>
   d878a:	a906      	add	r1, sp, #24
   d878c:	463a      	mov	r2, r7
   d878e:	4608      	mov	r0, r1
   d8790:	f008 fca6 	bl	e10e0 <mbedtls_mpi_sub_abs>
   d8794:	4604      	mov	r4, r0
   d8796:	2800      	cmp	r0, #0
   d8798:	d0f1      	beq.n	d877e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x236>
   d879a:	e711      	b.n	d85c0 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &T      ) ); MOD_MUL( S );
   d879c:	aa06      	add	r2, sp, #24
   d879e:	4649      	mov	r1, r9
   d87a0:	4628      	mov	r0, r5
   d87a2:	f008 fd4a 	bl	e123a <mbedtls_mpi_mul_mpi>
   d87a6:	4604      	mov	r4, r0
   d87a8:	2800      	cmp	r0, #0
   d87aa:	f47f af09 	bne.w	d85c0 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
   d87ae:	4641      	mov	r1, r8
   d87b0:	4628      	mov	r0, r5
   d87b2:	f7ff fe83 	bl	d84bc <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d87b6:	4604      	mov	r4, r0
   d87b8:	2800      	cmp	r0, #0
   d87ba:	f47f af01 	bne.w	d85c0 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &S,  1               ) ); MOD_ADD( S );
   d87be:	2101      	movs	r1, #1
   d87c0:	4628      	mov	r0, r5
   d87c2:	f008 fab0 	bl	e0d26 <mbedtls_mpi_shift_l>
   d87c6:	4604      	mov	r4, r0
   d87c8:	2800      	cmp	r0, #0
   d87ca:	f47f aef9 	bne.w	d85c0 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
   d87ce:	4639      	mov	r1, r7
   d87d0:	4628      	mov	r0, r5
   d87d2:	f008 fbd5 	bl	e0f80 <mbedtls_mpi_cmp_mpi>
   d87d6:	2800      	cmp	r0, #0
   d87d8:	db05      	blt.n	d87e6 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x29e>
   d87da:	463a      	mov	r2, r7
   d87dc:	4629      	mov	r1, r5
   d87de:	4628      	mov	r0, r5
   d87e0:	f008 fc7e 	bl	e10e0 <mbedtls_mpi_sub_abs>
   d87e4:	e7ef      	b.n	d87c6 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x27e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &T,     &T      ) ); MOD_MUL( U );
   d87e6:	aa06      	add	r2, sp, #24
   d87e8:	4611      	mov	r1, r2
   d87ea:	a809      	add	r0, sp, #36	; 0x24
   d87ec:	f008 fd25 	bl	e123a <mbedtls_mpi_mul_mpi>
   d87f0:	4604      	mov	r4, r0
   d87f2:	2800      	cmp	r0, #0
   d87f4:	f47f aee4 	bne.w	d85c0 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
   d87f8:	4641      	mov	r1, r8
   d87fa:	a809      	add	r0, sp, #36	; 0x24
   d87fc:	f7ff fe5e 	bl	d84bc <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8800:	4604      	mov	r4, r0
   d8802:	2800      	cmp	r0, #0
   d8804:	f47f aedc 	bne.w	d85c0 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
   d8808:	2101      	movs	r1, #1
   d880a:	a809      	add	r0, sp, #36	; 0x24
   d880c:	f008 fa8b 	bl	e0d26 <mbedtls_mpi_shift_l>
   d8810:	4604      	mov	r4, r0
   d8812:	2800      	cmp	r0, #0
   d8814:	f47f aed4 	bne.w	d85c0 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
   d8818:	4639      	mov	r1, r7
   d881a:	a809      	add	r0, sp, #36	; 0x24
   d881c:	f008 fbb0 	bl	e0f80 <mbedtls_mpi_cmp_mpi>
   d8820:	2800      	cmp	r0, #0
   d8822:	db05      	blt.n	d8830 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x2e8>
   d8824:	a909      	add	r1, sp, #36	; 0x24
   d8826:	463a      	mov	r2, r7
   d8828:	4608      	mov	r0, r1
   d882a:	f008 fc59 	bl	e10e0 <mbedtls_mpi_sub_abs>
   d882e:	e7ef      	b.n	d8810 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x2c8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &M,     &M      ) ); MOD_MUL( T );
   d8830:	466a      	mov	r2, sp
   d8832:	4669      	mov	r1, sp
   d8834:	a806      	add	r0, sp, #24
   d8836:	f008 fd00 	bl	e123a <mbedtls_mpi_mul_mpi>
   d883a:	4604      	mov	r4, r0
   d883c:	2800      	cmp	r0, #0
   d883e:	f47f aebf 	bne.w	d85c0 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
   d8842:	4641      	mov	r1, r8
   d8844:	a806      	add	r0, sp, #24
   d8846:	f7ff fe39 	bl	d84bc <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d884a:	4604      	mov	r4, r0
   d884c:	2800      	cmp	r0, #0
   d884e:	f47f aeb7 	bne.w	d85c0 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
   d8852:	a906      	add	r1, sp, #24
   d8854:	462a      	mov	r2, r5
   d8856:	4608      	mov	r0, r1
   d8858:	f008 fca0 	bl	e119c <mbedtls_mpi_sub_mpi>
   d885c:	4604      	mov	r4, r0
   d885e:	2800      	cmp	r0, #0
   d8860:	f47f aeae 	bne.w	d85c0 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
   d8864:	9b06      	ldr	r3, [sp, #24]
   d8866:	2b00      	cmp	r3, #0
   d8868:	db5b      	blt.n	d8922 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x3da>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
   d886a:	a906      	add	r1, sp, #24
   d886c:	462a      	mov	r2, r5
   d886e:	4608      	mov	r0, r1
   d8870:	f008 fc94 	bl	e119c <mbedtls_mpi_sub_mpi>
   d8874:	4604      	mov	r4, r0
   d8876:	2800      	cmp	r0, #0
   d8878:	f47f aea2 	bne.w	d85c0 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
   d887c:	9b06      	ldr	r3, [sp, #24]
   d887e:	2b00      	cmp	r3, #0
   d8880:	db5b      	blt.n	d893a <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x3f2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &T      ) ); MOD_SUB( S );
   d8882:	aa06      	add	r2, sp, #24
   d8884:	4629      	mov	r1, r5
   d8886:	4628      	mov	r0, r5
   d8888:	f008 fc88 	bl	e119c <mbedtls_mpi_sub_mpi>
   d888c:	4604      	mov	r4, r0
   d888e:	2800      	cmp	r0, #0
   d8890:	f47f ae96 	bne.w	d85c0 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
   d8894:	9b03      	ldr	r3, [sp, #12]
   d8896:	2b00      	cmp	r3, #0
   d8898:	db5b      	blt.n	d8952 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x40a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &S,     &M      ) ); MOD_MUL( S );
   d889a:	466a      	mov	r2, sp
   d889c:	4629      	mov	r1, r5
   d889e:	4628      	mov	r0, r5
   d88a0:	f008 fccb 	bl	e123a <mbedtls_mpi_mul_mpi>
   d88a4:	4604      	mov	r4, r0
   d88a6:	2800      	cmp	r0, #0
   d88a8:	f47f ae8a 	bne.w	d85c0 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
   d88ac:	4641      	mov	r1, r8
   d88ae:	4628      	mov	r0, r5
   d88b0:	f7ff fe04 	bl	d84bc <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d88b4:	4604      	mov	r4, r0
   d88b6:	2800      	cmp	r0, #0
   d88b8:	f47f ae82 	bne.w	d85c0 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &U      ) ); MOD_SUB( S );
   d88bc:	aa09      	add	r2, sp, #36	; 0x24
   d88be:	4629      	mov	r1, r5
   d88c0:	4628      	mov	r0, r5
   d88c2:	f008 fc6b 	bl	e119c <mbedtls_mpi_sub_mpi>
   d88c6:	4604      	mov	r4, r0
   d88c8:	2800      	cmp	r0, #0
   d88ca:	f47f ae79 	bne.w	d85c0 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
   d88ce:	46ab      	mov	fp, r5
   d88d0:	9b03      	ldr	r3, [sp, #12]
   d88d2:	2b00      	cmp	r3, #0
   d88d4:	db49      	blt.n	d896a <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x422>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &P->Y,  &P->Z   ) ); MOD_MUL( U );
   d88d6:	f109 0218 	add.w	r2, r9, #24
   d88da:	4651      	mov	r1, sl
   d88dc:	a809      	add	r0, sp, #36	; 0x24
   d88de:	f008 fcac 	bl	e123a <mbedtls_mpi_mul_mpi>
   d88e2:	4604      	mov	r4, r0
   d88e4:	2800      	cmp	r0, #0
   d88e6:	f47f ae6b 	bne.w	d85c0 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
   d88ea:	4641      	mov	r1, r8
   d88ec:	a809      	add	r0, sp, #36	; 0x24
   d88ee:	f7ff fde5 	bl	d84bc <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d88f2:	4604      	mov	r4, r0
   d88f4:	2800      	cmp	r0, #0
   d88f6:	f47f ae63 	bne.w	d85c0 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
   d88fa:	2101      	movs	r1, #1
   d88fc:	a809      	add	r0, sp, #36	; 0x24
   d88fe:	f008 fa12 	bl	e0d26 <mbedtls_mpi_shift_l>
   d8902:	4604      	mov	r4, r0
   d8904:	2800      	cmp	r0, #0
   d8906:	f47f ae5b 	bne.w	d85c0 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
   d890a:	4639      	mov	r1, r7
   d890c:	a809      	add	r0, sp, #36	; 0x24
   d890e:	f008 fb37 	bl	e0f80 <mbedtls_mpi_cmp_mpi>
   d8912:	2800      	cmp	r0, #0
   d8914:	db38      	blt.n	d8988 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x440>
   d8916:	a909      	add	r1, sp, #36	; 0x24
   d8918:	463a      	mov	r2, r7
   d891a:	4608      	mov	r0, r1
   d891c:	f008 fbe0 	bl	e10e0 <mbedtls_mpi_sub_abs>
   d8920:	e7ef      	b.n	d8902 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x3ba>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
   d8922:	2100      	movs	r1, #0
   d8924:	a806      	add	r0, sp, #24
   d8926:	f008 fb6c 	bl	e1002 <mbedtls_mpi_cmp_int>
   d892a:	2800      	cmp	r0, #0
   d892c:	d09d      	beq.n	d886a <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x322>
   d892e:	a906      	add	r1, sp, #24
   d8930:	463a      	mov	r2, r7
   d8932:	4608      	mov	r0, r1
   d8934:	f008 fc10 	bl	e1158 <mbedtls_mpi_add_mpi>
   d8938:	e790      	b.n	d885c <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x314>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
   d893a:	2100      	movs	r1, #0
   d893c:	a806      	add	r0, sp, #24
   d893e:	f008 fb60 	bl	e1002 <mbedtls_mpi_cmp_int>
   d8942:	2800      	cmp	r0, #0
   d8944:	d09d      	beq.n	d8882 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x33a>
   d8946:	a906      	add	r1, sp, #24
   d8948:	463a      	mov	r2, r7
   d894a:	4608      	mov	r0, r1
   d894c:	f008 fc04 	bl	e1158 <mbedtls_mpi_add_mpi>
   d8950:	e790      	b.n	d8874 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x32c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &T      ) ); MOD_SUB( S );
   d8952:	2100      	movs	r1, #0
   d8954:	4628      	mov	r0, r5
   d8956:	f008 fb54 	bl	e1002 <mbedtls_mpi_cmp_int>
   d895a:	2800      	cmp	r0, #0
   d895c:	d09d      	beq.n	d889a <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x352>
   d895e:	463a      	mov	r2, r7
   d8960:	4629      	mov	r1, r5
   d8962:	4628      	mov	r0, r5
   d8964:	f008 fbf8 	bl	e1158 <mbedtls_mpi_add_mpi>
   d8968:	e790      	b.n	d888c <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x344>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &U      ) ); MOD_SUB( S );
   d896a:	2100      	movs	r1, #0
   d896c:	4658      	mov	r0, fp
   d896e:	f008 fb48 	bl	e1002 <mbedtls_mpi_cmp_int>
   d8972:	2800      	cmp	r0, #0
   d8974:	d0af      	beq.n	d88d6 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x38e>
   d8976:	463a      	mov	r2, r7
   d8978:	4659      	mov	r1, fp
   d897a:	4658      	mov	r0, fp
   d897c:	f008 fbec 	bl	e1158 <mbedtls_mpi_add_mpi>
   d8980:	4604      	mov	r4, r0
   d8982:	2800      	cmp	r0, #0
   d8984:	d0a4      	beq.n	d88d0 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x388>
   d8986:	e61b      	b.n	d85c0 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->X, &T ) );
   d8988:	a906      	add	r1, sp, #24
   d898a:	4630      	mov	r0, r6
   d898c:	f008 f896 	bl	e0abc <mbedtls_mpi_copy>
   d8990:	4604      	mov	r4, r0
   d8992:	2800      	cmp	r0, #0
   d8994:	f47f ae14 	bne.w	d85c0 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Y, &S ) );
   d8998:	a903      	add	r1, sp, #12
   d899a:	f106 000c 	add.w	r0, r6, #12
   d899e:	f008 f88d 	bl	e0abc <mbedtls_mpi_copy>
   d89a2:	4604      	mov	r4, r0
   d89a4:	2800      	cmp	r0, #0
   d89a6:	f47f ae0b 	bne.w	d85c0 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &U ) );
   d89aa:	a909      	add	r1, sp, #36	; 0x24
   d89ac:	f106 0018 	add.w	r0, r6, #24
   d89b0:	f008 f884 	bl	e0abc <mbedtls_mpi_copy>
   d89b4:	4604      	mov	r4, r0
cleanup:
   d89b6:	e603      	b.n	d85c0 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>

000d89b8 <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point>:
{
   d89b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( mbedtls_mpi_cmp_int( &pt->Z, 0 ) == 0 )
   d89ba:	f101 0518 	add.w	r5, r1, #24
{
   d89be:	b087      	sub	sp, #28
   d89c0:	4606      	mov	r6, r0
   d89c2:	460f      	mov	r7, r1
    if( mbedtls_mpi_cmp_int( &pt->Z, 0 ) == 0 )
   d89c4:	4628      	mov	r0, r5
   d89c6:	2100      	movs	r1, #0
   d89c8:	f008 fb1b 	bl	e1002 <mbedtls_mpi_cmp_int>
   d89cc:	4604      	mov	r4, r0
   d89ce:	2800      	cmp	r0, #0
   d89d0:	d04c      	beq.n	d8a6c <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point+0xb4>
    mbedtls_mpi_init( &Zi ); mbedtls_mpi_init( &ZZi );
   d89d2:	4668      	mov	r0, sp
   d89d4:	f007 fff5 	bl	e09c2 <mbedtls_mpi_init>
   d89d8:	a803      	add	r0, sp, #12
   d89da:	f007 fff2 	bl	e09c2 <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &Zi,      &pt->Z,     &grp->P ) );
   d89de:	1d32      	adds	r2, r6, #4
   d89e0:	4629      	mov	r1, r5
   d89e2:	4668      	mov	r0, sp
   d89e4:	f009 f975 	bl	e1cd2 <mbedtls_mpi_inv_mod>
   d89e8:	4604      	mov	r4, r0
   d89ea:	bbc8      	cbnz	r0, d8a60 <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point+0xa8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,        &Zi     ) ); MOD_MUL( ZZi );
   d89ec:	466a      	mov	r2, sp
   d89ee:	4669      	mov	r1, sp
   d89f0:	a803      	add	r0, sp, #12
   d89f2:	f008 fc22 	bl	e123a <mbedtls_mpi_mul_mpi>
   d89f6:	4604      	mov	r4, r0
   d89f8:	bb90      	cbnz	r0, d8a60 <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point+0xa8>
   d89fa:	4631      	mov	r1, r6
   d89fc:	a803      	add	r0, sp, #12
   d89fe:	f7ff fd5d 	bl	d84bc <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8a02:	4604      	mov	r4, r0
   d8a04:	bb60      	cbnz	r0, d8a60 <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point+0xa8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ZZi    ) ); MOD_MUL( pt->X );
   d8a06:	aa03      	add	r2, sp, #12
   d8a08:	4639      	mov	r1, r7
   d8a0a:	4638      	mov	r0, r7
   d8a0c:	f008 fc15 	bl	e123a <mbedtls_mpi_mul_mpi>
   d8a10:	4604      	mov	r4, r0
   d8a12:	bb28      	cbnz	r0, d8a60 <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point+0xa8>
   d8a14:	4631      	mov	r1, r6
   d8a16:	4638      	mov	r0, r7
   d8a18:	f7ff fd50 	bl	d84bc <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8a1c:	4604      	mov	r4, r0
   d8a1e:	b9f8      	cbnz	r0, d8a60 <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point+0xa8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ZZi    ) ); MOD_MUL( pt->Y );
   d8a20:	370c      	adds	r7, #12
   d8a22:	aa03      	add	r2, sp, #12
   d8a24:	4639      	mov	r1, r7
   d8a26:	4638      	mov	r0, r7
   d8a28:	f008 fc07 	bl	e123a <mbedtls_mpi_mul_mpi>
   d8a2c:	4604      	mov	r4, r0
   d8a2e:	b9b8      	cbnz	r0, d8a60 <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point+0xa8>
   d8a30:	4631      	mov	r1, r6
   d8a32:	4638      	mov	r0, r7
   d8a34:	f7ff fd42 	bl	d84bc <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8a38:	4604      	mov	r4, r0
   d8a3a:	b988      	cbnz	r0, d8a60 <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point+0xa8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &Zi     ) ); MOD_MUL( pt->Y );
   d8a3c:	466a      	mov	r2, sp
   d8a3e:	4639      	mov	r1, r7
   d8a40:	4638      	mov	r0, r7
   d8a42:	f008 fbfa 	bl	e123a <mbedtls_mpi_mul_mpi>
   d8a46:	4604      	mov	r4, r0
   d8a48:	b950      	cbnz	r0, d8a60 <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point+0xa8>
   d8a4a:	4631      	mov	r1, r6
   d8a4c:	4638      	mov	r0, r7
   d8a4e:	f7ff fd35 	bl	d84bc <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8a52:	4604      	mov	r4, r0
   d8a54:	b920      	cbnz	r0, d8a60 <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point+0xa8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );
   d8a56:	2101      	movs	r1, #1
   d8a58:	4628      	mov	r0, r5
   d8a5a:	f008 f88d 	bl	e0b78 <mbedtls_mpi_lset>
   d8a5e:	4604      	mov	r4, r0
    mbedtls_mpi_free( &Zi ); mbedtls_mpi_free( &ZZi );
   d8a60:	4668      	mov	r0, sp
   d8a62:	f007 ffb4 	bl	e09ce <mbedtls_mpi_free>
   d8a66:	a803      	add	r0, sp, #12
   d8a68:	f007 ffb1 	bl	e09ce <mbedtls_mpi_free>
}
   d8a6c:	4620      	mov	r0, r4
   d8a6e:	b007      	add	sp, #28
   d8a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d8a74 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj.part.0>:
static int ecp_normalize_jac_many( const mbedtls_ecp_group *grp,
   d8a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8a78:	4605      	mov	r5, r0
   d8a7a:	b08d      	sub	sp, #52	; 0x34
   d8a7c:	468a      	mov	sl, r1
    if( ( c = (mbedtls_mpi *)mbedtls_calloc( T_size, sizeof( mbedtls_mpi ) ) ) == NULL )
   d8a7e:	4610      	mov	r0, r2
   d8a80:	210c      	movs	r1, #12
static int ecp_normalize_jac_many( const mbedtls_ecp_group *grp,
   d8a82:	4614      	mov	r4, r2
    if( ( c = (mbedtls_mpi *)mbedtls_calloc( T_size, sizeof( mbedtls_mpi ) ) ) == NULL )
   d8a84:	f00f fea8 	bl	e87d8 <calloc>
   d8a88:	4606      	mov	r6, r0
   d8a8a:	2800      	cmp	r0, #0
   d8a8c:	f000 80f3 	beq.w	d8c76 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj.part.0+0x202>
   d8a90:	270c      	movs	r7, #12
   d8a92:	fb07 f304 	mul.w	r3, r7, r4
   d8a96:	4681      	mov	r9, r0
   d8a98:	9301      	str	r3, [sp, #4]
   d8a9a:	eb03 0b00 	add.w	fp, r3, r0
   d8a9e:	4680      	mov	r8, r0
    for( i = 0; i < T_size; i++ )
   d8aa0:	45c3      	cmp	fp, r8
   d8aa2:	d005      	beq.n	d8ab0 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj.part.0+0x3c>
        mbedtls_mpi_init( &c[i] );
   d8aa4:	4640      	mov	r0, r8
   d8aa6:	f007 ff8c 	bl	e09c2 <mbedtls_mpi_init>
    for( i = 0; i < T_size; i++ )
   d8aaa:	f108 080c 	add.w	r8, r8, #12
   d8aae:	e7f7      	b.n	d8aa0 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj.part.0+0x2c>
    mbedtls_mpi_init( &u ); mbedtls_mpi_init( &Zi ); mbedtls_mpi_init( &ZZi );
   d8ab0:	a803      	add	r0, sp, #12
   d8ab2:	f007 ff86 	bl	e09c2 <mbedtls_mpi_init>
   d8ab6:	a806      	add	r0, sp, #24
   d8ab8:	f007 ff83 	bl	e09c2 <mbedtls_mpi_init>
   d8abc:	a809      	add	r0, sp, #36	; 0x24
   d8abe:	f007 ff80 	bl	e09c2 <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &c[0], &T[0]->Z ) );
   d8ac2:	f8da 1000 	ldr.w	r1, [sl]
   d8ac6:	4630      	mov	r0, r6
   d8ac8:	3118      	adds	r1, #24
   d8aca:	f007 fff7 	bl	e0abc <mbedtls_mpi_copy>
   d8ace:	4602      	mov	r2, r0
   d8ad0:	2800      	cmp	r0, #0
   d8ad2:	d138      	bne.n	d8b46 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj.part.0+0xd2>
   d8ad4:	f106 0b0c 	add.w	fp, r6, #12
    for( i = 1; i < T_size; i++ )
   d8ad8:	2701      	movs	r7, #1
   d8ada:	42bc      	cmp	r4, r7
   d8adc:	d913      	bls.n	d8b06 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj.part.0+0x92>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &c[i], &c[i-1], &T[i]->Z ) );
   d8ade:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
   d8ae2:	f1ab 010c 	sub.w	r1, fp, #12
   d8ae6:	3218      	adds	r2, #24
   d8ae8:	4658      	mov	r0, fp
   d8aea:	f008 fba6 	bl	e123a <mbedtls_mpi_mul_mpi>
   d8aee:	4602      	mov	r2, r0
   d8af0:	bb48      	cbnz	r0, d8b46 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj.part.0+0xd2>
        MOD_MUL( c[i] );
   d8af2:	4658      	mov	r0, fp
   d8af4:	4629      	mov	r1, r5
   d8af6:	f7ff fce1 	bl	d84bc <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8afa:	f10b 0b0c 	add.w	fp, fp, #12
   d8afe:	4602      	mov	r2, r0
   d8b00:	bb08      	cbnz	r0, d8b46 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj.part.0+0xd2>
    for( i = 1; i < T_size; i++ )
   d8b02:	3701      	adds	r7, #1
   d8b04:	e7e9      	b.n	d8ada <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj.part.0+0x66>
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &u, &c[T_size-1], &grp->P ) );
   d8b06:	9b01      	ldr	r3, [sp, #4]
   d8b08:	f1a3 010c 	sub.w	r1, r3, #12
   d8b0c:	1d2a      	adds	r2, r5, #4
   d8b0e:	4431      	add	r1, r6
   d8b10:	a803      	add	r0, sp, #12
   d8b12:	f009 f8de 	bl	e1cd2 <mbedtls_mpi_inv_mod>
   d8b16:	4602      	mov	r2, r0
   d8b18:	b9a8      	cbnz	r0, d8b46 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj.part.0+0xd2>
    for( i = T_size - 1; ; i-- )
   d8b1a:	1e67      	subs	r7, r4, #1
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Zi, &u, &c[i-1]  ) ); MOD_MUL( Zi );
   d8b1c:	f04f 0b0c 	mov.w	fp, #12
   d8b20:	eb0a 0484 	add.w	r4, sl, r4, lsl #2
   d8b24:	f1a6 0a0c 	sub.w	sl, r6, #12
        if( i == 0 ) {
   d8b28:	bb17      	cbnz	r7, d8b70 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj.part.0+0xfc>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Zi, &u ) );
   d8b2a:	a903      	add	r1, sp, #12
   d8b2c:	a806      	add	r0, sp, #24
   d8b2e:	f007 ffc5 	bl	e0abc <mbedtls_mpi_copy>
   d8b32:	4602      	mov	r2, r0
   d8b34:	b938      	cbnz	r0, d8b46 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj.part.0+0xd2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,      &Zi  ) ); MOD_MUL( ZZi );
   d8b36:	aa06      	add	r2, sp, #24
   d8b38:	4611      	mov	r1, r2
   d8b3a:	a809      	add	r0, sp, #36	; 0x24
   d8b3c:	f008 fb7d 	bl	e123a <mbedtls_mpi_mul_mpi>
   d8b40:	4602      	mov	r2, r0
   d8b42:	2800      	cmp	r0, #0
   d8b44:	d033      	beq.n	d8bae <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj.part.0+0x13a>
    mbedtls_mpi_free( &u ); mbedtls_mpi_free( &Zi ); mbedtls_mpi_free( &ZZi );
   d8b46:	a803      	add	r0, sp, #12
   d8b48:	9201      	str	r2, [sp, #4]
   d8b4a:	f007 ff40 	bl	e09ce <mbedtls_mpi_free>
   d8b4e:	a806      	add	r0, sp, #24
   d8b50:	f007 ff3d 	bl	e09ce <mbedtls_mpi_free>
   d8b54:	a809      	add	r0, sp, #36	; 0x24
   d8b56:	f007 ff3a 	bl	e09ce <mbedtls_mpi_free>
   d8b5a:	9a01      	ldr	r2, [sp, #4]
    for( i = 0; i < T_size; i++ )
   d8b5c:	9201      	str	r2, [sp, #4]
   d8b5e:	45c1      	cmp	r9, r8
   d8b60:	f000 8081 	beq.w	d8c66 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj.part.0+0x1f2>
        mbedtls_mpi_free( &c[i] );
   d8b64:	4648      	mov	r0, r9
   d8b66:	f007 ff32 	bl	e09ce <mbedtls_mpi_free>
    for( i = 0; i < T_size; i++ )
   d8b6a:	f109 090c 	add.w	r9, r9, #12
   d8b6e:	e7f4      	b.n	d8b5a <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj.part.0+0xe6>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Zi, &u, &c[i-1]  ) ); MOD_MUL( Zi );
   d8b70:	fb0b a207 	mla	r2, fp, r7, sl
   d8b74:	a903      	add	r1, sp, #12
   d8b76:	a806      	add	r0, sp, #24
   d8b78:	f008 fb5f 	bl	e123a <mbedtls_mpi_mul_mpi>
   d8b7c:	4602      	mov	r2, r0
   d8b7e:	2800      	cmp	r0, #0
   d8b80:	d1e1      	bne.n	d8b46 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj.part.0+0xd2>
   d8b82:	4629      	mov	r1, r5
   d8b84:	a806      	add	r0, sp, #24
   d8b86:	f7ff fc99 	bl	d84bc <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8b8a:	4602      	mov	r2, r0
   d8b8c:	2800      	cmp	r0, #0
   d8b8e:	d1da      	bne.n	d8b46 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj.part.0+0xd2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &u,  &u, &T[i]->Z ) ); MOD_MUL( u );
   d8b90:	f854 2c04 	ldr.w	r2, [r4, #-4]
   d8b94:	a903      	add	r1, sp, #12
   d8b96:	3218      	adds	r2, #24
   d8b98:	4608      	mov	r0, r1
   d8b9a:	f008 fb4e 	bl	e123a <mbedtls_mpi_mul_mpi>
   d8b9e:	4602      	mov	r2, r0
   d8ba0:	2800      	cmp	r0, #0
   d8ba2:	d1d0      	bne.n	d8b46 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj.part.0+0xd2>
   d8ba4:	4629      	mov	r1, r5
   d8ba6:	a803      	add	r0, sp, #12
   d8ba8:	f7ff fc88 	bl	d84bc <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8bac:	e7c1      	b.n	d8b32 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj.part.0+0xbe>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,      &Zi  ) ); MOD_MUL( ZZi );
   d8bae:	4629      	mov	r1, r5
   d8bb0:	a809      	add	r0, sp, #36	; 0x24
   d8bb2:	f7ff fc83 	bl	d84bc <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8bb6:	4602      	mov	r2, r0
   d8bb8:	2800      	cmp	r0, #0
   d8bba:	d1c4      	bne.n	d8b46 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj.part.0+0xd2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->X, &T[i]->X, &ZZi ) ); MOD_MUL( T[i]->X );
   d8bbc:	f854 1c04 	ldr.w	r1, [r4, #-4]
   d8bc0:	aa09      	add	r2, sp, #36	; 0x24
   d8bc2:	4608      	mov	r0, r1
   d8bc4:	f008 fb39 	bl	e123a <mbedtls_mpi_mul_mpi>
   d8bc8:	4602      	mov	r2, r0
   d8bca:	2800      	cmp	r0, #0
   d8bcc:	d1bb      	bne.n	d8b46 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj.part.0+0xd2>
   d8bce:	f854 0c04 	ldr.w	r0, [r4, #-4]
   d8bd2:	4629      	mov	r1, r5
   d8bd4:	f7ff fc72 	bl	d84bc <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8bd8:	4602      	mov	r2, r0
   d8bda:	2800      	cmp	r0, #0
   d8bdc:	d1b3      	bne.n	d8b46 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj.part.0+0xd2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &ZZi ) ); MOD_MUL( T[i]->Y );
   d8bde:	f854 1c04 	ldr.w	r1, [r4, #-4]
   d8be2:	310c      	adds	r1, #12
   d8be4:	aa09      	add	r2, sp, #36	; 0x24
   d8be6:	4608      	mov	r0, r1
   d8be8:	f008 fb27 	bl	e123a <mbedtls_mpi_mul_mpi>
   d8bec:	4602      	mov	r2, r0
   d8bee:	2800      	cmp	r0, #0
   d8bf0:	d1a9      	bne.n	d8b46 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj.part.0+0xd2>
   d8bf2:	f854 0c04 	ldr.w	r0, [r4, #-4]
   d8bf6:	4629      	mov	r1, r5
   d8bf8:	300c      	adds	r0, #12
   d8bfa:	f7ff fc5f 	bl	d84bc <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8bfe:	4602      	mov	r2, r0
   d8c00:	2800      	cmp	r0, #0
   d8c02:	d1a0      	bne.n	d8b46 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj.part.0+0xd2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &Zi  ) ); MOD_MUL( T[i]->Y );
   d8c04:	f854 1c04 	ldr.w	r1, [r4, #-4]
   d8c08:	310c      	adds	r1, #12
   d8c0a:	aa06      	add	r2, sp, #24
   d8c0c:	4608      	mov	r0, r1
   d8c0e:	f008 fb14 	bl	e123a <mbedtls_mpi_mul_mpi>
   d8c12:	4602      	mov	r2, r0
   d8c14:	2800      	cmp	r0, #0
   d8c16:	d196      	bne.n	d8b46 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj.part.0+0xd2>
   d8c18:	f854 0c04 	ldr.w	r0, [r4, #-4]
   d8c1c:	4629      	mov	r1, r5
   d8c1e:	300c      	adds	r0, #12
   d8c20:	f7ff fc4c 	bl	d84bc <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8c24:	4602      	mov	r2, r0
   d8c26:	2800      	cmp	r0, #0
   d8c28:	d18d      	bne.n	d8b46 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj.part.0+0xd2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shrink( &T[i]->X, grp->P.n ) );
   d8c2a:	68a9      	ldr	r1, [r5, #8]
   d8c2c:	f854 0c04 	ldr.w	r0, [r4, #-4]
   d8c30:	f007 ff0a 	bl	e0a48 <mbedtls_mpi_shrink>
   d8c34:	4602      	mov	r2, r0
   d8c36:	2800      	cmp	r0, #0
   d8c38:	d185      	bne.n	d8b46 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj.part.0+0xd2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shrink( &T[i]->Y, grp->P.n ) );
   d8c3a:	f854 0c04 	ldr.w	r0, [r4, #-4]
   d8c3e:	68a9      	ldr	r1, [r5, #8]
   d8c40:	300c      	adds	r0, #12
   d8c42:	f007 ff01 	bl	e0a48 <mbedtls_mpi_shrink>
   d8c46:	4602      	mov	r2, r0
   d8c48:	2800      	cmp	r0, #0
   d8c4a:	f47f af7c 	bne.w	d8b46 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj.part.0+0xd2>
   d8c4e:	9001      	str	r0, [sp, #4]
        mbedtls_mpi_free( &T[i]->Z );
   d8c50:	f854 0d04 	ldr.w	r0, [r4, #-4]!
   d8c54:	3018      	adds	r0, #24
   d8c56:	f007 feba 	bl	e09ce <mbedtls_mpi_free>
        if( i == 0 )
   d8c5a:	9a01      	ldr	r2, [sp, #4]
   d8c5c:	2f00      	cmp	r7, #0
   d8c5e:	f43f af72 	beq.w	d8b46 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj.part.0+0xd2>
    for( i = T_size - 1; ; i-- )
   d8c62:	3f01      	subs	r7, #1
        if( i == 0 ) {
   d8c64:	e760      	b.n	d8b28 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj.part.0+0xb4>
    mbedtls_free( c );
   d8c66:	4630      	mov	r0, r6
   d8c68:	f00c fdaa 	bl	e57c0 <free>
    return( ret );
   d8c6c:	9a01      	ldr	r2, [sp, #4]
}
   d8c6e:	4610      	mov	r0, r2
   d8c70:	b00d      	add	sp, #52	; 0x34
   d8c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return( MBEDTLS_ERR_ECP_ALLOC_FAILED );
   d8c76:	4a01      	ldr	r2, [pc, #4]	; (d8c7c <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj.part.0+0x208>)
   d8c78:	e7f9      	b.n	d8c6e <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj.part.0+0x1fa>
   d8c7a:	bf00      	nop
   d8c7c:	ffffb280 	.word	0xffffb280

000d8c80 <_ZL15ecp_select_combPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_hh>:
 * See ecp_comb_recode_core() for background
 */
static int ecp_select_comb( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                            const mbedtls_ecp_point T[], unsigned char T_size,
                            unsigned char i )
{
   d8c80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8c84:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
   d8c88:	4606      	mov	r6, r0
   d8c8a:	460d      	mov	r5, r1
   d8c8c:	461f      	mov	r7, r3
    int ret;
    unsigned char ii, j;

    /* Ignore the "sign" bit and scale down */
    ii =  ( i & 0x7Fu ) >> 1;
   d8c8e:	f3c8 0a45 	ubfx	sl, r8, #1, #6

    /* Read the whole table to thwart cache-based timing attacks */
    for( j = 0; j < T_size; j++ )
   d8c92:	f102 040c 	add.w	r4, r2, #12
    ii =  ( i & 0x7Fu ) >> 1;
   d8c96:	f04f 0b00 	mov.w	fp, #0
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->X, &T[j].X, j == ii ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->Y, &T[j].Y, j == ii ) );
   d8c9a:	f101 090c 	add.w	r9, r1, #12
    for( j = 0; j < T_size; j++ )
   d8c9e:	45bb      	cmp	fp, r7
   d8ca0:	d019      	beq.n	d8cd6 <_ZL15ecp_select_combPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_hh+0x56>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->X, &T[j].X, j == ii ) );
   d8ca2:	fa5f f28b 	uxtb.w	r2, fp
   d8ca6:	eba2 030a 	sub.w	r3, r2, sl
   d8caa:	425a      	negs	r2, r3
   d8cac:	415a      	adcs	r2, r3
   d8cae:	f1a4 010c 	sub.w	r1, r4, #12
   d8cb2:	4628      	mov	r0, r5
   d8cb4:	9201      	str	r2, [sp, #4]
   d8cb6:	f007 ff2d 	bl	e0b14 <mbedtls_mpi_safe_cond_assign>
   d8cba:	b948      	cbnz	r0, d8cd0 <_ZL15ecp_select_combPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_hh+0x50>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->Y, &T[j].Y, j == ii ) );
   d8cbc:	4621      	mov	r1, r4
   d8cbe:	9a01      	ldr	r2, [sp, #4]
   d8cc0:	4648      	mov	r0, r9
   d8cc2:	f007 ff27 	bl	e0b14 <mbedtls_mpi_safe_cond_assign>
   d8cc6:	f10b 0b01 	add.w	fp, fp, #1
   d8cca:	3424      	adds	r4, #36	; 0x24
   d8ccc:	2800      	cmp	r0, #0
   d8cce:	d0e6      	beq.n	d8c9e <_ZL15ecp_select_combPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_hh+0x1e>
    /* Safely invert result if i is "negative" */
    MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, R, i >> 7 ) );

cleanup:
    return( ret );
}
   d8cd0:	b003      	add	sp, #12
   d8cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, R, i >> 7 ) );
   d8cd6:	ea4f 12d8 	mov.w	r2, r8, lsr #7
   d8cda:	4629      	mov	r1, r5
   d8cdc:	4630      	mov	r0, r6
}
   d8cde:	b003      	add	sp, #12
   d8ce0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, R, i >> 7 ) );
   d8ce4:	f7ff bbc7 	b.w	d8476 <_ZL19ecp_safe_invert_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointh>

000d8ce8 <mbedtls_ecp_point_free.part.0>:
void mbedtls_ecp_point_free( mbedtls_ecp_point *pt )
   d8ce8:	b510      	push	{r4, lr}
   d8cea:	4604      	mov	r4, r0
    mbedtls_mpi_free( &( pt->X ) );
   d8cec:	f007 fe6f 	bl	e09ce <mbedtls_mpi_free>
    mbedtls_mpi_free( &( pt->Y ) );
   d8cf0:	f104 000c 	add.w	r0, r4, #12
   d8cf4:	f007 fe6b 	bl	e09ce <mbedtls_mpi_free>
    mbedtls_mpi_free( &( pt->Z ) );
   d8cf8:	f104 0018 	add.w	r0, r4, #24
}
   d8cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_mpi_free( &( pt->Z ) );
   d8d00:	f007 be65 	b.w	e09ce <mbedtls_mpi_free>

000d8d04 <mbedtls_ecp_grp_id_list>:
{
   d8d04:	b570      	push	{r4, r5, r6, lr}
    if( ! init_done )
   d8d06:	4a0a      	ldr	r2, [pc, #40]	; (d8d30 <mbedtls_ecp_grp_id_list+0x2c>)
   d8d08:	6813      	ldr	r3, [r2, #0]
   d8d0a:	b973      	cbnz	r3, d8d2a <mbedtls_ecp_grp_id_list+0x26>
   d8d0c:	4809      	ldr	r0, [pc, #36]	; (d8d34 <mbedtls_ecp_grp_id_list+0x30>)
             curve_info->grp_id != MBEDTLS_ECP_DP_NONE;
   d8d0e:	4d0a      	ldr	r5, [pc, #40]	; (d8d38 <mbedtls_ecp_grp_id_list+0x34>)
   d8d10:	4604      	mov	r4, r0
   d8d12:	260c      	movs	r6, #12
   d8d14:	fb06 f103 	mul.w	r1, r6, r3
   d8d18:	5d49      	ldrb	r1, [r1, r5]
   d8d1a:	b119      	cbz	r1, d8d24 <mbedtls_ecp_grp_id_list+0x20>
            ecp_supported_grp_id[i++] = curve_info->grp_id;
   d8d1c:	f800 1b01 	strb.w	r1, [r0], #1
   d8d20:	3301      	adds	r3, #1
        for( curve_info = mbedtls_ecp_curve_list();
   d8d22:	e7f7      	b.n	d8d14 <mbedtls_ecp_grp_id_list+0x10>
        ecp_supported_grp_id[i] = MBEDTLS_ECP_DP_NONE;
   d8d24:	54e1      	strb	r1, [r4, r3]
        init_done = 1;
   d8d26:	2301      	movs	r3, #1
   d8d28:	6013      	str	r3, [r2, #0]
}
   d8d2a:	4802      	ldr	r0, [pc, #8]	; (d8d34 <mbedtls_ecp_grp_id_list+0x30>)
   d8d2c:	bd70      	pop	{r4, r5, r6, pc}
   d8d2e:	bf00      	nop
   d8d30:	2003c3e8 	.word	0x2003c3e8
   d8d34:	2003c3e4 	.word	0x2003c3e4
   d8d38:	000eb428 	.word	0x000eb428

000d8d3c <mbedtls_ecp_curve_info_from_grp_id>:
{
   d8d3c:	4602      	mov	r2, r0
    for( curve_info = mbedtls_ecp_curve_list();
   d8d3e:	4804      	ldr	r0, [pc, #16]	; (d8d50 <mbedtls_ecp_curve_info_from_grp_id+0x14>)
         curve_info->grp_id != MBEDTLS_ECP_DP_NONE;
   d8d40:	7803      	ldrb	r3, [r0, #0]
   d8d42:	b11b      	cbz	r3, d8d4c <mbedtls_ecp_curve_info_from_grp_id+0x10>
        if( curve_info->grp_id == grp_id )
   d8d44:	4293      	cmp	r3, r2
   d8d46:	d002      	beq.n	d8d4e <mbedtls_ecp_curve_info_from_grp_id+0x12>
    for( curve_info = mbedtls_ecp_curve_list();
   d8d48:	300c      	adds	r0, #12
   d8d4a:	e7f9      	b.n	d8d40 <mbedtls_ecp_curve_info_from_grp_id+0x4>
    return( NULL );
   d8d4c:	4618      	mov	r0, r3
}
   d8d4e:	4770      	bx	lr
   d8d50:	000eb428 	.word	0x000eb428

000d8d54 <mbedtls_ecp_curve_info_from_tls_id>:
        if( curve_info->tls_id == tls_id )
   d8d54:	2817      	cmp	r0, #23
}
   d8d56:	4802      	ldr	r0, [pc, #8]	; (d8d60 <mbedtls_ecp_curve_info_from_tls_id+0xc>)
   d8d58:	bf18      	it	ne
   d8d5a:	2000      	movne	r0, #0
   d8d5c:	4770      	bx	lr
   d8d5e:	bf00      	nop
   d8d60:	000eb428 	.word	0x000eb428

000d8d64 <mbedtls_ecp_point_init>:
{
   d8d64:	b510      	push	{r4, lr}
   d8d66:	4604      	mov	r4, r0
    mbedtls_mpi_init( &pt->X );
   d8d68:	f007 fe2b 	bl	e09c2 <mbedtls_mpi_init>
    mbedtls_mpi_init( &pt->Y );
   d8d6c:	f104 000c 	add.w	r0, r4, #12
   d8d70:	f007 fe27 	bl	e09c2 <mbedtls_mpi_init>
    mbedtls_mpi_init( &pt->Z );
   d8d74:	f104 0018 	add.w	r0, r4, #24
}
   d8d78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_mpi_init( &pt->Z );
   d8d7c:	f007 be21 	b.w	e09c2 <mbedtls_mpi_init>

000d8d80 <mbedtls_ecp_group_init>:
{
   d8d80:	b538      	push	{r3, r4, r5, lr}
    grp->id = MBEDTLS_ECP_DP_NONE;
   d8d82:	2500      	movs	r5, #0
{
   d8d84:	4604      	mov	r4, r0
    grp->id = MBEDTLS_ECP_DP_NONE;
   d8d86:	f800 5b04 	strb.w	r5, [r0], #4
    mbedtls_mpi_init( &grp->P );
   d8d8a:	f007 fe1a 	bl	e09c2 <mbedtls_mpi_init>
    mbedtls_mpi_init( &grp->A );
   d8d8e:	f104 0010 	add.w	r0, r4, #16
   d8d92:	f007 fe16 	bl	e09c2 <mbedtls_mpi_init>
    mbedtls_mpi_init( &grp->B );
   d8d96:	f104 001c 	add.w	r0, r4, #28
   d8d9a:	f007 fe12 	bl	e09c2 <mbedtls_mpi_init>
    mbedtls_ecp_point_init( &grp->G );
   d8d9e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d8da2:	f7ff ffdf 	bl	d8d64 <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &grp->N );
   d8da6:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   d8daa:	f007 fe0a 	bl	e09c2 <mbedtls_mpi_init>
    grp->nbits = 0;
   d8dae:	e9c4 5516 	strd	r5, r5, [r4, #88]	; 0x58
    grp->modp = NULL;
   d8db2:	e9c4 5518 	strd	r5, r5, [r4, #96]	; 0x60
    grp->t_post = NULL;
   d8db6:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
    grp->T = NULL;
   d8dba:	e9c4 551c 	strd	r5, r5, [r4, #112]	; 0x70
    grp->T_size = 0;
   d8dbe:	67a5      	str	r5, [r4, #120]	; 0x78
}
   d8dc0:	bd38      	pop	{r3, r4, r5, pc}

000d8dc2 <mbedtls_ecp_keypair_init>:
{
   d8dc2:	b510      	push	{r4, lr}
   d8dc4:	4604      	mov	r4, r0
    mbedtls_ecp_group_init( &key->grp );
   d8dc6:	f7ff ffdb 	bl	d8d80 <mbedtls_ecp_group_init>
    mbedtls_mpi_init( &key->d );
   d8dca:	f104 007c 	add.w	r0, r4, #124	; 0x7c
   d8dce:	f007 fdf8 	bl	e09c2 <mbedtls_mpi_init>
    mbedtls_ecp_point_init( &key->Q );
   d8dd2:	f104 0088 	add.w	r0, r4, #136	; 0x88
}
   d8dd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_ecp_point_init( &key->Q );
   d8dda:	f7ff bfc3 	b.w	d8d64 <mbedtls_ecp_point_init>

000d8dde <mbedtls_ecp_point_free>:
    if( pt == NULL )
   d8dde:	b108      	cbz	r0, d8de4 <mbedtls_ecp_point_free+0x6>
   d8de0:	f7ff bf82 	b.w	d8ce8 <mbedtls_ecp_point_free.part.0>
}
   d8de4:	4770      	bx	lr

000d8de6 <mbedtls_ecp_group_free>:
{
   d8de6:	b570      	push	{r4, r5, r6, lr}
    if( grp == NULL )
   d8de8:	4604      	mov	r4, r0
   d8dea:	b358      	cbz	r0, d8e44 <mbedtls_ecp_group_free+0x5e>
    if( grp->h != 1 )
   d8dec:	6e03      	ldr	r3, [r0, #96]	; 0x60
   d8dee:	2b01      	cmp	r3, #1
   d8df0:	d012      	beq.n	d8e18 <mbedtls_ecp_group_free+0x32>
        mbedtls_mpi_free( &grp->P );
   d8df2:	3004      	adds	r0, #4
   d8df4:	f007 fdeb 	bl	e09ce <mbedtls_mpi_free>
        mbedtls_mpi_free( &grp->A );
   d8df8:	f104 0010 	add.w	r0, r4, #16
   d8dfc:	f007 fde7 	bl	e09ce <mbedtls_mpi_free>
        mbedtls_mpi_free( &grp->B );
   d8e00:	f104 001c 	add.w	r0, r4, #28
   d8e04:	f007 fde3 	bl	e09ce <mbedtls_mpi_free>
        mbedtls_ecp_point_free( &grp->G );
   d8e08:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d8e0c:	f7ff ffe7 	bl	d8dde <mbedtls_ecp_point_free>
        mbedtls_mpi_free( &grp->N );
   d8e10:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   d8e14:	f007 fddb 	bl	e09ce <mbedtls_mpi_free>
    if( grp->T != NULL )
   d8e18:	6f63      	ldr	r3, [r4, #116]	; 0x74
   d8e1a:	b16b      	cbz	r3, d8e38 <mbedtls_ecp_group_free+0x52>
        for( i = 0; i < grp->T_size; i++ )
   d8e1c:	2500      	movs	r5, #0
            mbedtls_ecp_point_free( &grp->T[i] );
   d8e1e:	2624      	movs	r6, #36	; 0x24
        for( i = 0; i < grp->T_size; i++ )
   d8e20:	e9d4 031d 	ldrd	r0, r3, [r4, #116]	; 0x74
   d8e24:	42ab      	cmp	r3, r5
   d8e26:	d905      	bls.n	d8e34 <mbedtls_ecp_group_free+0x4e>
            mbedtls_ecp_point_free( &grp->T[i] );
   d8e28:	fb06 0005 	mla	r0, r6, r5, r0
   d8e2c:	f7ff ffd7 	bl	d8dde <mbedtls_ecp_point_free>
        for( i = 0; i < grp->T_size; i++ )
   d8e30:	3501      	adds	r5, #1
   d8e32:	e7f5      	b.n	d8e20 <mbedtls_ecp_group_free+0x3a>
        mbedtls_free( grp->T );
   d8e34:	f00c fcc4 	bl	e57c0 <free>
    mbedtls_platform_zeroize( grp, sizeof( mbedtls_ecp_group ) );
   d8e38:	4620      	mov	r0, r4
   d8e3a:	217c      	movs	r1, #124	; 0x7c
}
   d8e3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    mbedtls_platform_zeroize( grp, sizeof( mbedtls_ecp_group ) );
   d8e40:	f002 b8cc 	b.w	dafdc <mbedtls_platform_zeroize>
}
   d8e44:	bd70      	pop	{r4, r5, r6, pc}

000d8e46 <mbedtls_ecp_keypair_free>:
{
   d8e46:	b510      	push	{r4, lr}
    if( key == NULL )
   d8e48:	4604      	mov	r4, r0
   d8e4a:	b158      	cbz	r0, d8e64 <mbedtls_ecp_keypair_free+0x1e>
    mbedtls_ecp_group_free( &key->grp );
   d8e4c:	f7ff ffcb 	bl	d8de6 <mbedtls_ecp_group_free>
    mbedtls_mpi_free( &key->d );
   d8e50:	f104 007c 	add.w	r0, r4, #124	; 0x7c
   d8e54:	f007 fdbb 	bl	e09ce <mbedtls_mpi_free>
    mbedtls_ecp_point_free( &key->Q );
   d8e58:	f104 0088 	add.w	r0, r4, #136	; 0x88
}
   d8e5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_ecp_point_free( &key->Q );
   d8e60:	f7ff bfbd 	b.w	d8dde <mbedtls_ecp_point_free>
}
   d8e64:	bd10      	pop	{r4, pc}

000d8e66 <mbedtls_ecp_copy>:
{
   d8e66:	b538      	push	{r3, r4, r5, lr}
   d8e68:	4604      	mov	r4, r0
   d8e6a:	460d      	mov	r5, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->X, &Q->X ) );
   d8e6c:	f007 fe26 	bl	e0abc <mbedtls_mpi_copy>
   d8e70:	b970      	cbnz	r0, d8e90 <mbedtls_ecp_copy+0x2a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Y, &Q->Y ) );
   d8e72:	f105 010c 	add.w	r1, r5, #12
   d8e76:	f104 000c 	add.w	r0, r4, #12
   d8e7a:	f007 fe1f 	bl	e0abc <mbedtls_mpi_copy>
   d8e7e:	b938      	cbnz	r0, d8e90 <mbedtls_ecp_copy+0x2a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Z, &Q->Z ) );
   d8e80:	f105 0118 	add.w	r1, r5, #24
   d8e84:	f104 0018 	add.w	r0, r4, #24
}
   d8e88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Z, &Q->Z ) );
   d8e8c:	f007 be16 	b.w	e0abc <mbedtls_mpi_copy>
}
   d8e90:	bd38      	pop	{r3, r4, r5, pc}

000d8e92 <mbedtls_ecp_group_copy>:
    return( mbedtls_ecp_group_load( dst, src->id ) );
   d8e92:	7809      	ldrb	r1, [r1, #0]
   d8e94:	f004 badc 	b.w	dd450 <mbedtls_ecp_group_load>

000d8e98 <mbedtls_ecp_set_zero>:
{
   d8e98:	b510      	push	{r4, lr}
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->X , 1 ) );
   d8e9a:	2101      	movs	r1, #1
{
   d8e9c:	4604      	mov	r4, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->X , 1 ) );
   d8e9e:	f007 fe6b 	bl	e0b78 <mbedtls_mpi_lset>
   d8ea2:	b960      	cbnz	r0, d8ebe <mbedtls_ecp_set_zero+0x26>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Y , 1 ) );
   d8ea4:	2101      	movs	r1, #1
   d8ea6:	f104 000c 	add.w	r0, r4, #12
   d8eaa:	f007 fe65 	bl	e0b78 <mbedtls_mpi_lset>
   d8eae:	b930      	cbnz	r0, d8ebe <mbedtls_ecp_set_zero+0x26>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z , 0 ) );
   d8eb0:	4601      	mov	r1, r0
   d8eb2:	f104 0018 	add.w	r0, r4, #24
}
   d8eb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z , 0 ) );
   d8eba:	f007 be5d 	b.w	e0b78 <mbedtls_mpi_lset>
}
   d8ebe:	bd10      	pop	{r4, pc}

000d8ec0 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_>:
{
   d8ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
   d8ec4:	f102 0918 	add.w	r9, r2, #24
{
   d8ec8:	b096      	sub	sp, #88	; 0x58
   d8eca:	4607      	mov	r7, r0
   d8ecc:	460d      	mov	r5, r1
    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
   d8ece:	4648      	mov	r0, r9
   d8ed0:	2100      	movs	r1, #0
{
   d8ed2:	4616      	mov	r6, r2
   d8ed4:	4698      	mov	r8, r3
    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
   d8ed6:	f008 f894 	bl	e1002 <mbedtls_mpi_cmp_int>
   d8eda:	b940      	cbnz	r0, d8eee <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x2e>
        return( mbedtls_ecp_copy( R, Q ) );
   d8edc:	4641      	mov	r1, r8
        return( mbedtls_ecp_copy( R, P ) );
   d8ede:	4628      	mov	r0, r5
   d8ee0:	f7ff ffc1 	bl	d8e66 <mbedtls_ecp_copy>
   d8ee4:	4604      	mov	r4, r0
}
   d8ee6:	4620      	mov	r0, r4
   d8ee8:	b016      	add	sp, #88	; 0x58
   d8eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if( Q->Z.p != NULL && mbedtls_mpi_cmp_int( &Q->Z, 0 ) == 0 )
   d8eee:	f8d8 3020 	ldr.w	r3, [r8, #32]
   d8ef2:	2b00      	cmp	r3, #0
   d8ef4:	f040 80d6 	bne.w	d90a4 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x1e4>
    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 ); mbedtls_mpi_init( &T3 ); mbedtls_mpi_init( &T4 );
   d8ef8:	a801      	add	r0, sp, #4
   d8efa:	f007 fd62 	bl	e09c2 <mbedtls_mpi_init>
   d8efe:	a804      	add	r0, sp, #16
   d8f00:	f007 fd5f 	bl	e09c2 <mbedtls_mpi_init>
   d8f04:	a807      	add	r0, sp, #28
   d8f06:	f007 fd5c 	bl	e09c2 <mbedtls_mpi_init>
   d8f0a:	a80a      	add	r0, sp, #40	; 0x28
   d8f0c:	f007 fd59 	bl	e09c2 <mbedtls_mpi_init>
    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
   d8f10:	a80d      	add	r0, sp, #52	; 0x34
   d8f12:	f007 fd56 	bl	e09c2 <mbedtls_mpi_init>
   d8f16:	a810      	add	r0, sp, #64	; 0x40
   d8f18:	f007 fd53 	bl	e09c2 <mbedtls_mpi_init>
   d8f1c:	a813      	add	r0, sp, #76	; 0x4c
   d8f1e:	f007 fd50 	bl	e09c2 <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &P->Z,  &P->Z ) );  MOD_MUL( T1 );
   d8f22:	464a      	mov	r2, r9
   d8f24:	4649      	mov	r1, r9
   d8f26:	a801      	add	r0, sp, #4
   d8f28:	f008 f987 	bl	e123a <mbedtls_mpi_mul_mpi>
   d8f2c:	4604      	mov	r4, r0
   d8f2e:	2800      	cmp	r0, #0
   d8f30:	f040 80df 	bne.w	d90f2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x232>
   d8f34:	4639      	mov	r1, r7
   d8f36:	a801      	add	r0, sp, #4
   d8f38:	f7ff fac0 	bl	d84bc <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8f3c:	4604      	mov	r4, r0
   d8f3e:	2800      	cmp	r0, #0
   d8f40:	f040 80d7 	bne.w	d90f2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x232>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T1,    &P->Z ) );  MOD_MUL( T2 );
   d8f44:	464a      	mov	r2, r9
   d8f46:	a901      	add	r1, sp, #4
   d8f48:	a804      	add	r0, sp, #16
   d8f4a:	f008 f976 	bl	e123a <mbedtls_mpi_mul_mpi>
   d8f4e:	4604      	mov	r4, r0
   d8f50:	2800      	cmp	r0, #0
   d8f52:	f040 80ce 	bne.w	d90f2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x232>
   d8f56:	4639      	mov	r1, r7
   d8f58:	a804      	add	r0, sp, #16
   d8f5a:	f7ff faaf 	bl	d84bc <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8f5e:	4604      	mov	r4, r0
   d8f60:	2800      	cmp	r0, #0
   d8f62:	f040 80c6 	bne.w	d90f2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x232>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &T1,    &Q->X ) );  MOD_MUL( T1 );
   d8f66:	a901      	add	r1, sp, #4
   d8f68:	4642      	mov	r2, r8
   d8f6a:	4608      	mov	r0, r1
   d8f6c:	f008 f965 	bl	e123a <mbedtls_mpi_mul_mpi>
   d8f70:	4604      	mov	r4, r0
   d8f72:	2800      	cmp	r0, #0
   d8f74:	f040 80bd 	bne.w	d90f2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x232>
   d8f78:	4639      	mov	r1, r7
   d8f7a:	a801      	add	r0, sp, #4
   d8f7c:	f7ff fa9e 	bl	d84bc <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8f80:	4604      	mov	r4, r0
   d8f82:	2800      	cmp	r0, #0
   d8f84:	f040 80b5 	bne.w	d90f2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x232>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T2,    &Q->Y ) );  MOD_MUL( T2 );
   d8f88:	a904      	add	r1, sp, #16
   d8f8a:	f108 020c 	add.w	r2, r8, #12
   d8f8e:	4608      	mov	r0, r1
   d8f90:	f008 f953 	bl	e123a <mbedtls_mpi_mul_mpi>
   d8f94:	4604      	mov	r4, r0
   d8f96:	2800      	cmp	r0, #0
   d8f98:	f040 80ab 	bne.w	d90f2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x232>
   d8f9c:	4639      	mov	r1, r7
   d8f9e:	a804      	add	r0, sp, #16
   d8fa0:	f7ff fa8c 	bl	d84bc <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8fa4:	4604      	mov	r4, r0
   d8fa6:	2800      	cmp	r0, #0
   d8fa8:	f040 80a3 	bne.w	d90f2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x232>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T1,  &T1,    &P->X ) );  MOD_SUB( T1 );
   d8fac:	a901      	add	r1, sp, #4
   d8fae:	4632      	mov	r2, r6
   d8fb0:	4608      	mov	r0, r1
   d8fb2:	f008 f8f3 	bl	e119c <mbedtls_mpi_sub_mpi>
   d8fb6:	4604      	mov	r4, r0
   d8fb8:	2800      	cmp	r0, #0
   d8fba:	f040 809a 	bne.w	d90f2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x232>
   d8fbe:	f107 0804 	add.w	r8, r7, #4
   d8fc2:	9b01      	ldr	r3, [sp, #4]
   d8fc4:	2b00      	cmp	r3, #0
   d8fc6:	f2c0 8084 	blt.w	d90d2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x212>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T2,  &T2,    &P->Y ) );  MOD_SUB( T2 );
   d8fca:	a904      	add	r1, sp, #16
   d8fcc:	f106 080c 	add.w	r8, r6, #12
   d8fd0:	4642      	mov	r2, r8
   d8fd2:	4608      	mov	r0, r1
   d8fd4:	f008 f8e2 	bl	e119c <mbedtls_mpi_sub_mpi>
   d8fd8:	4604      	mov	r4, r0
   d8fda:	2800      	cmp	r0, #0
   d8fdc:	f040 8089 	bne.w	d90f2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x232>
   d8fe0:	f107 0a04 	add.w	sl, r7, #4
   d8fe4:	9b04      	ldr	r3, [sp, #16]
   d8fe6:	2b00      	cmp	r3, #0
   d8fe8:	f2c0 8099 	blt.w	d911e <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x25e>
    if( mbedtls_mpi_cmp_int( &T1, 0 ) == 0 )
   d8fec:	2100      	movs	r1, #0
   d8fee:	a801      	add	r0, sp, #4
   d8ff0:	f008 f807 	bl	e1002 <mbedtls_mpi_cmp_int>
   d8ff4:	4601      	mov	r1, r0
   d8ff6:	2800      	cmp	r0, #0
   d8ff8:	f000 80a2 	beq.w	d9140 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x280>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Z,   &P->Z,  &T1   ) );  MOD_MUL( Z  );
   d8ffc:	aa01      	add	r2, sp, #4
   d8ffe:	4649      	mov	r1, r9
   d9000:	a813      	add	r0, sp, #76	; 0x4c
   d9002:	f008 f91a 	bl	e123a <mbedtls_mpi_mul_mpi>
   d9006:	4604      	mov	r4, r0
   d9008:	2800      	cmp	r0, #0
   d900a:	d172      	bne.n	d90f2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x232>
   d900c:	4639      	mov	r1, r7
   d900e:	a813      	add	r0, sp, #76	; 0x4c
   d9010:	f7ff fa54 	bl	d84bc <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d9014:	4604      	mov	r4, r0
   d9016:	2800      	cmp	r0, #0
   d9018:	d16b      	bne.n	d90f2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x232>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T1,    &T1   ) );  MOD_MUL( T3 );
   d901a:	aa01      	add	r2, sp, #4
   d901c:	4611      	mov	r1, r2
   d901e:	a807      	add	r0, sp, #28
   d9020:	f008 f90b 	bl	e123a <mbedtls_mpi_mul_mpi>
   d9024:	4604      	mov	r4, r0
   d9026:	2800      	cmp	r0, #0
   d9028:	d163      	bne.n	d90f2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x232>
   d902a:	4639      	mov	r1, r7
   d902c:	a807      	add	r0, sp, #28
   d902e:	f7ff fa45 	bl	d84bc <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d9032:	4604      	mov	r4, r0
   d9034:	2800      	cmp	r0, #0
   d9036:	d15c      	bne.n	d90f2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x232>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T3,    &T1   ) );  MOD_MUL( T4 );
   d9038:	aa01      	add	r2, sp, #4
   d903a:	a907      	add	r1, sp, #28
   d903c:	a80a      	add	r0, sp, #40	; 0x28
   d903e:	f008 f8fc 	bl	e123a <mbedtls_mpi_mul_mpi>
   d9042:	4604      	mov	r4, r0
   d9044:	2800      	cmp	r0, #0
   d9046:	d154      	bne.n	d90f2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x232>
   d9048:	4639      	mov	r1, r7
   d904a:	a80a      	add	r0, sp, #40	; 0x28
   d904c:	f7ff fa36 	bl	d84bc <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d9050:	4604      	mov	r4, r0
   d9052:	2800      	cmp	r0, #0
   d9054:	d14d      	bne.n	d90f2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x232>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &P->X ) );  MOD_MUL( T3 );
   d9056:	a907      	add	r1, sp, #28
   d9058:	4632      	mov	r2, r6
   d905a:	4608      	mov	r0, r1
   d905c:	f008 f8ed 	bl	e123a <mbedtls_mpi_mul_mpi>
   d9060:	4604      	mov	r4, r0
   d9062:	2800      	cmp	r0, #0
   d9064:	d145      	bne.n	d90f2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x232>
   d9066:	4639      	mov	r1, r7
   d9068:	a807      	add	r0, sp, #28
   d906a:	f7ff fa27 	bl	d84bc <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d906e:	4604      	mov	r4, r0
   d9070:	2800      	cmp	r0, #0
   d9072:	d13e      	bne.n	d90f2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x232>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1,  &T3,    2     ) );  MOD_ADD( T1 );
   d9074:	2202      	movs	r2, #2
   d9076:	a907      	add	r1, sp, #28
   d9078:	a801      	add	r0, sp, #4
   d907a:	f008 f942 	bl	e1302 <mbedtls_mpi_mul_int>
   d907e:	4604      	mov	r4, r0
   d9080:	2800      	cmp	r0, #0
   d9082:	d136      	bne.n	d90f2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x232>
   d9084:	1d3e      	adds	r6, r7, #4
   d9086:	4631      	mov	r1, r6
   d9088:	a801      	add	r0, sp, #4
   d908a:	f007 ff79 	bl	e0f80 <mbedtls_mpi_cmp_mpi>
   d908e:	2800      	cmp	r0, #0
   d9090:	db65      	blt.n	d915e <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x29e>
   d9092:	a901      	add	r1, sp, #4
   d9094:	4632      	mov	r2, r6
   d9096:	4608      	mov	r0, r1
   d9098:	f008 f822 	bl	e10e0 <mbedtls_mpi_sub_abs>
   d909c:	4604      	mov	r4, r0
   d909e:	2800      	cmp	r0, #0
   d90a0:	d0f1      	beq.n	d9086 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x1c6>
   d90a2:	e026      	b.n	d90f2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x232>
    if( Q->Z.p != NULL && mbedtls_mpi_cmp_int( &Q->Z, 0 ) == 0 )
   d90a4:	f108 0418 	add.w	r4, r8, #24
   d90a8:	2100      	movs	r1, #0
   d90aa:	4620      	mov	r0, r4
   d90ac:	f007 ffa9 	bl	e1002 <mbedtls_mpi_cmp_int>
   d90b0:	b908      	cbnz	r0, d90b6 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x1f6>
        return( mbedtls_ecp_copy( R, P ) );
   d90b2:	4631      	mov	r1, r6
   d90b4:	e713      	b.n	d8ede <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x1e>
    if( Q->Z.p != NULL && mbedtls_mpi_cmp_int( &Q->Z, 1 ) != 0 )
   d90b6:	f8d8 3020 	ldr.w	r3, [r8, #32]
   d90ba:	2b00      	cmp	r3, #0
   d90bc:	f43f af1c 	beq.w	d8ef8 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x38>
   d90c0:	2101      	movs	r1, #1
   d90c2:	4620      	mov	r0, r4
   d90c4:	f007 ff9d 	bl	e1002 <mbedtls_mpi_cmp_int>
   d90c8:	2800      	cmp	r0, #0
   d90ca:	f43f af15 	beq.w	d8ef8 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x38>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   d90ce:	4c75      	ldr	r4, [pc, #468]	; (d92a4 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x3e4>)
   d90d0:	e709      	b.n	d8ee6 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x26>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T1,  &T1,    &P->X ) );  MOD_SUB( T1 );
   d90d2:	2100      	movs	r1, #0
   d90d4:	a801      	add	r0, sp, #4
   d90d6:	f007 ff94 	bl	e1002 <mbedtls_mpi_cmp_int>
   d90da:	2800      	cmp	r0, #0
   d90dc:	f43f af75 	beq.w	d8fca <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x10a>
   d90e0:	a901      	add	r1, sp, #4
   d90e2:	4642      	mov	r2, r8
   d90e4:	4608      	mov	r0, r1
   d90e6:	f008 f837 	bl	e1158 <mbedtls_mpi_add_mpi>
   d90ea:	4604      	mov	r4, r0
   d90ec:	2800      	cmp	r0, #0
   d90ee:	f43f af68 	beq.w	d8fc2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x102>
    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 ); mbedtls_mpi_free( &T3 ); mbedtls_mpi_free( &T4 );
   d90f2:	a801      	add	r0, sp, #4
   d90f4:	f007 fc6b 	bl	e09ce <mbedtls_mpi_free>
   d90f8:	a804      	add	r0, sp, #16
   d90fa:	f007 fc68 	bl	e09ce <mbedtls_mpi_free>
   d90fe:	a807      	add	r0, sp, #28
   d9100:	f007 fc65 	bl	e09ce <mbedtls_mpi_free>
   d9104:	a80a      	add	r0, sp, #40	; 0x28
   d9106:	f007 fc62 	bl	e09ce <mbedtls_mpi_free>
    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
   d910a:	a80d      	add	r0, sp, #52	; 0x34
   d910c:	f007 fc5f 	bl	e09ce <mbedtls_mpi_free>
   d9110:	a810      	add	r0, sp, #64	; 0x40
   d9112:	f007 fc5c 	bl	e09ce <mbedtls_mpi_free>
   d9116:	a813      	add	r0, sp, #76	; 0x4c
   d9118:	f007 fc59 	bl	e09ce <mbedtls_mpi_free>
    return( ret );
   d911c:	e6e3      	b.n	d8ee6 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x26>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T2,  &T2,    &P->Y ) );  MOD_SUB( T2 );
   d911e:	2100      	movs	r1, #0
   d9120:	a804      	add	r0, sp, #16
   d9122:	f007 ff6e 	bl	e1002 <mbedtls_mpi_cmp_int>
   d9126:	2800      	cmp	r0, #0
   d9128:	f43f af60 	beq.w	d8fec <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x12c>
   d912c:	a904      	add	r1, sp, #16
   d912e:	4652      	mov	r2, sl
   d9130:	4608      	mov	r0, r1
   d9132:	f008 f811 	bl	e1158 <mbedtls_mpi_add_mpi>
   d9136:	4604      	mov	r4, r0
   d9138:	2800      	cmp	r0, #0
   d913a:	f43f af53 	beq.w	d8fe4 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x124>
   d913e:	e7d8      	b.n	d90f2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x232>
        if( mbedtls_mpi_cmp_int( &T2, 0 ) == 0 )
   d9140:	a804      	add	r0, sp, #16
   d9142:	f007 ff5e 	bl	e1002 <mbedtls_mpi_cmp_int>
   d9146:	b930      	cbnz	r0, d9156 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x296>
            ret = ecp_double_jac( grp, R, P );
   d9148:	4632      	mov	r2, r6
   d914a:	4629      	mov	r1, r5
   d914c:	4638      	mov	r0, r7
   d914e:	f7ff f9fb 	bl	d8548 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &Z ) );
   d9152:	4604      	mov	r4, r0
cleanup:
   d9154:	e7cd      	b.n	d90f2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x232>
            ret = mbedtls_ecp_set_zero( R );
   d9156:	4628      	mov	r0, r5
   d9158:	f7ff fe9e 	bl	d8e98 <mbedtls_ecp_set_zero>
   d915c:	e7f9      	b.n	d9152 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x292>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &X,   &T2,    &T2   ) );  MOD_MUL( X  );
   d915e:	aa04      	add	r2, sp, #16
   d9160:	4611      	mov	r1, r2
   d9162:	a80d      	add	r0, sp, #52	; 0x34
   d9164:	f008 f869 	bl	e123a <mbedtls_mpi_mul_mpi>
   d9168:	4604      	mov	r4, r0
   d916a:	2800      	cmp	r0, #0
   d916c:	d1c1      	bne.n	d90f2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x232>
   d916e:	4639      	mov	r1, r7
   d9170:	a80d      	add	r0, sp, #52	; 0x34
   d9172:	f7ff f9a3 	bl	d84bc <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d9176:	4604      	mov	r4, r0
   d9178:	2800      	cmp	r0, #0
   d917a:	d1ba      	bne.n	d90f2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x232>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T1   ) );  MOD_SUB( X  );
   d917c:	a90d      	add	r1, sp, #52	; 0x34
   d917e:	aa01      	add	r2, sp, #4
   d9180:	4608      	mov	r0, r1
   d9182:	f008 f80b 	bl	e119c <mbedtls_mpi_sub_mpi>
   d9186:	4604      	mov	r4, r0
   d9188:	2800      	cmp	r0, #0
   d918a:	d1b2      	bne.n	d90f2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x232>
   d918c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d918e:	2b00      	cmp	r3, #0
   d9190:	db57      	blt.n	d9242 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x382>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T4   ) );  MOD_SUB( X  );
   d9192:	a90d      	add	r1, sp, #52	; 0x34
   d9194:	aa0a      	add	r2, sp, #40	; 0x28
   d9196:	4608      	mov	r0, r1
   d9198:	f008 f800 	bl	e119c <mbedtls_mpi_sub_mpi>
   d919c:	4604      	mov	r4, r0
   d919e:	2800      	cmp	r0, #0
   d91a0:	d1a7      	bne.n	d90f2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x232>
   d91a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d91a4:	2b00      	cmp	r3, #0
   d91a6:	db58      	blt.n	d925a <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x39a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T3,  &T3,    &X    ) );  MOD_SUB( T3 );
   d91a8:	a907      	add	r1, sp, #28
   d91aa:	aa0d      	add	r2, sp, #52	; 0x34
   d91ac:	4608      	mov	r0, r1
   d91ae:	f007 fff5 	bl	e119c <mbedtls_mpi_sub_mpi>
   d91b2:	4604      	mov	r4, r0
   d91b4:	2800      	cmp	r0, #0
   d91b6:	d19c      	bne.n	d90f2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x232>
   d91b8:	9b07      	ldr	r3, [sp, #28]
   d91ba:	2b00      	cmp	r3, #0
   d91bc:	db59      	blt.n	d9272 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x3b2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &T2   ) );  MOD_MUL( T3 );
   d91be:	a907      	add	r1, sp, #28
   d91c0:	aa04      	add	r2, sp, #16
   d91c2:	4608      	mov	r0, r1
   d91c4:	f008 f839 	bl	e123a <mbedtls_mpi_mul_mpi>
   d91c8:	4604      	mov	r4, r0
   d91ca:	2800      	cmp	r0, #0
   d91cc:	d191      	bne.n	d90f2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x232>
   d91ce:	4639      	mov	r1, r7
   d91d0:	a807      	add	r0, sp, #28
   d91d2:	f7ff f973 	bl	d84bc <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d91d6:	4604      	mov	r4, r0
   d91d8:	2800      	cmp	r0, #0
   d91da:	d18a      	bne.n	d90f2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x232>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T4,    &P->Y ) );  MOD_MUL( T4 );
   d91dc:	a90a      	add	r1, sp, #40	; 0x28
   d91de:	4642      	mov	r2, r8
   d91e0:	4608      	mov	r0, r1
   d91e2:	f008 f82a 	bl	e123a <mbedtls_mpi_mul_mpi>
   d91e6:	4604      	mov	r4, r0
   d91e8:	2800      	cmp	r0, #0
   d91ea:	d182      	bne.n	d90f2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x232>
   d91ec:	4639      	mov	r1, r7
   d91ee:	a80a      	add	r0, sp, #40	; 0x28
   d91f0:	f7ff f964 	bl	d84bc <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d91f4:	4604      	mov	r4, r0
   d91f6:	2800      	cmp	r0, #0
   d91f8:	f47f af7b 	bne.w	d90f2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x232>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &Y,   &T3,    &T4   ) );  MOD_SUB( Y  );
   d91fc:	aa0a      	add	r2, sp, #40	; 0x28
   d91fe:	a907      	add	r1, sp, #28
   d9200:	a810      	add	r0, sp, #64	; 0x40
   d9202:	f007 ffcb 	bl	e119c <mbedtls_mpi_sub_mpi>
   d9206:	4604      	mov	r4, r0
   d9208:	2800      	cmp	r0, #0
   d920a:	f47f af72 	bne.w	d90f2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x232>
   d920e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d9210:	2b00      	cmp	r3, #0
   d9212:	db3a      	blt.n	d928a <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x3ca>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->X, &X ) );
   d9214:	a90d      	add	r1, sp, #52	; 0x34
   d9216:	4628      	mov	r0, r5
   d9218:	f007 fc50 	bl	e0abc <mbedtls_mpi_copy>
   d921c:	4604      	mov	r4, r0
   d921e:	2800      	cmp	r0, #0
   d9220:	f47f af67 	bne.w	d90f2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x232>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Y, &Y ) );
   d9224:	a910      	add	r1, sp, #64	; 0x40
   d9226:	f105 000c 	add.w	r0, r5, #12
   d922a:	f007 fc47 	bl	e0abc <mbedtls_mpi_copy>
   d922e:	4604      	mov	r4, r0
   d9230:	2800      	cmp	r0, #0
   d9232:	f47f af5e 	bne.w	d90f2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x232>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &Z ) );
   d9236:	a913      	add	r1, sp, #76	; 0x4c
   d9238:	f105 0018 	add.w	r0, r5, #24
   d923c:	f007 fc3e 	bl	e0abc <mbedtls_mpi_copy>
   d9240:	e787      	b.n	d9152 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x292>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T1   ) );  MOD_SUB( X  );
   d9242:	2100      	movs	r1, #0
   d9244:	a80d      	add	r0, sp, #52	; 0x34
   d9246:	f007 fedc 	bl	e1002 <mbedtls_mpi_cmp_int>
   d924a:	2800      	cmp	r0, #0
   d924c:	d0a1      	beq.n	d9192 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x2d2>
   d924e:	a90d      	add	r1, sp, #52	; 0x34
   d9250:	4632      	mov	r2, r6
   d9252:	4608      	mov	r0, r1
   d9254:	f007 ff80 	bl	e1158 <mbedtls_mpi_add_mpi>
   d9258:	e795      	b.n	d9186 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x2c6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T4   ) );  MOD_SUB( X  );
   d925a:	2100      	movs	r1, #0
   d925c:	a80d      	add	r0, sp, #52	; 0x34
   d925e:	f007 fed0 	bl	e1002 <mbedtls_mpi_cmp_int>
   d9262:	2800      	cmp	r0, #0
   d9264:	d0a0      	beq.n	d91a8 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x2e8>
   d9266:	a90d      	add	r1, sp, #52	; 0x34
   d9268:	4632      	mov	r2, r6
   d926a:	4608      	mov	r0, r1
   d926c:	f007 ff74 	bl	e1158 <mbedtls_mpi_add_mpi>
   d9270:	e794      	b.n	d919c <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x2dc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T3,  &T3,    &X    ) );  MOD_SUB( T3 );
   d9272:	2100      	movs	r1, #0
   d9274:	a807      	add	r0, sp, #28
   d9276:	f007 fec4 	bl	e1002 <mbedtls_mpi_cmp_int>
   d927a:	2800      	cmp	r0, #0
   d927c:	d09f      	beq.n	d91be <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x2fe>
   d927e:	a907      	add	r1, sp, #28
   d9280:	4632      	mov	r2, r6
   d9282:	4608      	mov	r0, r1
   d9284:	f007 ff68 	bl	e1158 <mbedtls_mpi_add_mpi>
   d9288:	e793      	b.n	d91b2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x2f2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &Y,   &T3,    &T4   ) );  MOD_SUB( Y  );
   d928a:	2100      	movs	r1, #0
   d928c:	a810      	add	r0, sp, #64	; 0x40
   d928e:	f007 feb8 	bl	e1002 <mbedtls_mpi_cmp_int>
   d9292:	2800      	cmp	r0, #0
   d9294:	d0be      	beq.n	d9214 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x354>
   d9296:	a910      	add	r1, sp, #64	; 0x40
   d9298:	4632      	mov	r2, r6
   d929a:	4608      	mov	r0, r1
   d929c:	f007 ff5c 	bl	e1158 <mbedtls_mpi_add_mpi>
   d92a0:	e7b1      	b.n	d9206 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x346>
   d92a2:	bf00      	nop
   d92a4:	ffffb080 	.word	0xffffb080

000d92a8 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0>:
 * once the auxiliary table has been pre-computed.
 *
 * Scalar recoding may use a parity trick that makes us compute -m * P,
 * if that is the case we'll need to recover m * P at the end.
 */
static int ecp_mul_comb_after_precomp( const mbedtls_ecp_group *grp,
   d92a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d92ac:	ed2d 8b02 	vpush	{d8}
   d92b0:	b0d9      	sub	sp, #356	; 0x164
   d92b2:	ee08 3a10 	vmov	s16, r3
   d92b6:	f89d 3190 	ldrb.w	r3, [sp, #400]	; 0x190
    mbedtls_mpi_init( &M );
   d92ba:	f10d 0828 	add.w	r8, sp, #40	; 0x28
static int ecp_mul_comb_after_precomp( const mbedtls_ecp_group *grp,
   d92be:	4605      	mov	r5, r0
   d92c0:	ee08 3a90 	vmov	s17, r3
    mbedtls_mpi_init( &M );
   d92c4:	4640      	mov	r0, r8
static int ecp_mul_comb_after_precomp( const mbedtls_ecp_group *grp,
   d92c6:	f89d 3194 	ldrb.w	r3, [sp, #404]	; 0x194
   d92ca:	9304      	str	r3, [sp, #16]
   d92cc:	460e      	mov	r6, r1
   d92ce:	4691      	mov	r9, r2
    if( mbedtls_mpi_get_bit( &grp->N, 0 ) != 1 )
   d92d0:	f105 074c 	add.w	r7, r5, #76	; 0x4c
    mbedtls_mpi_init( &M );
   d92d4:	f007 fb75 	bl	e09c2 <mbedtls_mpi_init>
    mbedtls_mpi_init( &mm );
   d92d8:	a80d      	add	r0, sp, #52	; 0x34
   d92da:	f007 fb72 	bl	e09c2 <mbedtls_mpi_init>
    if( mbedtls_mpi_get_bit( &grp->N, 0 ) != 1 )
   d92de:	2100      	movs	r1, #0
   d92e0:	4638      	mov	r0, r7
   d92e2:	f007 fc65 	bl	e0bb0 <mbedtls_mpi_get_bit>
   d92e6:	2801      	cmp	r0, #1
   d92e8:	d006      	beq.n	d92f8 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0x50>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   d92ea:	4ca8      	ldr	r4, [pc, #672]	; (d958c <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0x2e4>)
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, RR ) );
#endif

cleanup:
    return( ret );
}
   d92ec:	4620      	mov	r0, r4
   d92ee:	b059      	add	sp, #356	; 0x164
   d92f0:	ecbd 8b02 	vpop	{d8}
   d92f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    *parity_trick = ( mbedtls_mpi_get_bit( m, 0 ) == 0 );
   d92f8:	2100      	movs	r1, #0
   d92fa:	4648      	mov	r0, r9
   d92fc:	f007 fc58 	bl	e0bb0 <mbedtls_mpi_get_bit>
   d9300:	fab0 f380 	clz	r3, r0
   d9304:	095b      	lsrs	r3, r3, #5
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &M, m ) );
   d9306:	4649      	mov	r1, r9
   d9308:	4640      	mov	r0, r8
    *parity_trick = ( mbedtls_mpi_get_bit( m, 0 ) == 0 );
   d930a:	9303      	str	r3, [sp, #12]
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &M, m ) );
   d930c:	f007 fbd6 	bl	e0abc <mbedtls_mpi_copy>
   d9310:	4604      	mov	r4, r0
   d9312:	2800      	cmp	r0, #0
   d9314:	d15d      	bne.n	d93d2 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0x12a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mm, &grp->N, m ) );
   d9316:	464a      	mov	r2, r9
   d9318:	4639      	mov	r1, r7
   d931a:	a80d      	add	r0, sp, #52	; 0x34
   d931c:	f007 ff3e 	bl	e119c <mbedtls_mpi_sub_mpi>
   d9320:	4604      	mov	r4, r0
   d9322:	2800      	cmp	r0, #0
   d9324:	d155      	bne.n	d93d2 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0x12a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &M, &mm, *parity_trick ) );
   d9326:	9a03      	ldr	r2, [sp, #12]
   d9328:	a90d      	add	r1, sp, #52	; 0x34
   d932a:	4640      	mov	r0, r8
   d932c:	f007 fbf2 	bl	e0b14 <mbedtls_mpi_safe_cond_assign>
   d9330:	4604      	mov	r4, r0
   d9332:	2800      	cmp	r0, #0
   d9334:	d14d      	bne.n	d93d2 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0x12a>
    memset( x, 0, d+1 );
   d9336:	9b66      	ldr	r3, [sp, #408]	; 0x198
   d9338:	4601      	mov	r1, r0
   d933a:	1c5a      	adds	r2, r3, #1
   d933c:	a816      	add	r0, sp, #88	; 0x58
   d933e:	f00f faed 	bl	e891c <memset>
    for( i = 0; i < d; i++ )
   d9342:	af16      	add	r7, sp, #88	; 0x58
    memset( x, 0, d+1 );
   d9344:	46b9      	mov	r9, r7
    for( i = 0; i < d; i++ )
   d9346:	46a2      	mov	sl, r4
   d9348:	9b66      	ldr	r3, [sp, #408]	; 0x198
   d934a:	4553      	cmp	r3, sl
   d934c:	d01b      	beq.n	d9386 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0xde>
   d934e:	4651      	mov	r1, sl
        for( j = 0; j < w; j++ )
   d9350:	f04f 0b00 	mov.w	fp, #0
   d9354:	9b04      	ldr	r3, [sp, #16]
   d9356:	455b      	cmp	r3, fp
   d9358:	d910      	bls.n	d937c <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0xd4>
            x[i] |= mbedtls_mpi_get_bit( m, i + d * j ) << j;
   d935a:	4640      	mov	r0, r8
   d935c:	9105      	str	r1, [sp, #20]
   d935e:	f007 fc27 	bl	e0bb0 <mbedtls_mpi_get_bit>
   d9362:	f899 3000 	ldrb.w	r3, [r9]
   d9366:	9905      	ldr	r1, [sp, #20]
   d9368:	fa00 f00b 	lsl.w	r0, r0, fp
   d936c:	4318      	orrs	r0, r3
   d936e:	9b66      	ldr	r3, [sp, #408]	; 0x198
   d9370:	f889 0000 	strb.w	r0, [r9]
        for( j = 0; j < w; j++ )
   d9374:	f10b 0b01 	add.w	fp, fp, #1
   d9378:	4419      	add	r1, r3
   d937a:	e7eb      	b.n	d9354 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0xac>
    for( i = 0; i < d; i++ )
   d937c:	f10a 0a01 	add.w	sl, sl, #1
   d9380:	f109 0901 	add.w	r9, r9, #1
   d9384:	e7e0      	b.n	d9348 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0xa0>
    c = 0;
   d9386:	f04f 0e00 	mov.w	lr, #0
    for( i = 1; i <= d; i++ )
   d938a:	f04f 0c01 	mov.w	ip, #1
   d938e:	9b66      	ldr	r3, [sp, #408]	; 0x198
   d9390:	4563      	cmp	r3, ip
   d9392:	d31e      	bcc.n	d93d2 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0x12a>
        cc   = x[i] & c;
   d9394:	7878      	ldrb	r0, [r7, #1]
        c   |= x[i] & ( x[i-1] * adjust );
   d9396:	783a      	ldrb	r2, [r7, #0]
        x[i] = x[i] ^ c;
   d9398:	ea80 030e 	eor.w	r3, r0, lr
        adjust = 1 - ( x[i] & 0x01 );
   d939c:	43d9      	mvns	r1, r3
   d939e:	f001 0101 	and.w	r1, r1, #1
        c   |= x[i] & ( x[i-1] * adjust );
   d93a2:	fb12 f201 	smulbb	r2, r2, r1
   d93a6:	b25b      	sxtb	r3, r3
   d93a8:	b252      	sxtb	r2, r2
   d93aa:	ea03 0802 	and.w	r8, r3, r2
        x[i] = x[i] ^ ( x[i-1] * adjust );
   d93ae:	4053      	eors	r3, r2
   d93b0:	f807 3f01 	strb.w	r3, [r7, #1]!
        x[i-1] |= adjust << 7;
   d93b4:	f817 3c01 	ldrb.w	r3, [r7, #-1]
        cc   = x[i] & c;
   d93b8:	ea00 000e 	and.w	r0, r0, lr
        c   |= x[i] & ( x[i-1] * adjust );
   d93bc:	ea48 0e00 	orr.w	lr, r8, r0
        x[i-1] |= adjust << 7;
   d93c0:	ea43 11c1 	orr.w	r1, r3, r1, lsl #7
        c   |= x[i] & ( x[i-1] * adjust );
   d93c4:	fa5f fe8e 	uxtb.w	lr, lr
        x[i-1] |= adjust << 7;
   d93c8:	f807 1c01 	strb.w	r1, [r7, #-1]
    for( i = 1; i <= d; i++ )
   d93cc:	f10c 0c01 	add.w	ip, ip, #1
   d93d0:	e7dd      	b.n	d938e <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0xe6>
    mbedtls_mpi_free( &mm );
   d93d2:	a80d      	add	r0, sp, #52	; 0x34
   d93d4:	f007 fafb 	bl	e09ce <mbedtls_mpi_free>
    mbedtls_mpi_free( &M );
   d93d8:	a80a      	add	r0, sp, #40	; 0x28
   d93da:	f007 faf8 	bl	e09ce <mbedtls_mpi_free>
    MBEDTLS_MPI_CHK( ecp_comb_recode_scalar( grp, m, k, d, w,
   d93de:	2c00      	cmp	r4, #0
   d93e0:	d184      	bne.n	d92ec <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0x44>
    mbedtls_ecp_point_init( &Txi );
   d93e2:	a80d      	add	r0, sp, #52	; 0x34
   d93e4:	f7ff fcbe 	bl	d8d64 <mbedtls_ecp_point_init>
        MBEDTLS_MPI_CHK( ecp_select_comb( grp, R, T, T_size, x[i] ) );
   d93e8:	9a66      	ldr	r2, [sp, #408]	; 0x198
   d93ea:	ab16      	add	r3, sp, #88	; 0x58
   d93ec:	4631      	mov	r1, r6
   d93ee:	5c9b      	ldrb	r3, [r3, r2]
   d93f0:	9300      	str	r3, [sp, #0]
   d93f2:	ee18 2a10 	vmov	r2, s16
   d93f6:	ee18 3a90 	vmov	r3, s17
   d93fa:	4628      	mov	r0, r5
   d93fc:	f7ff fc40 	bl	d8c80 <_ZL15ecp_select_combPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_hh>
   d9400:	4604      	mov	r4, r0
   d9402:	2800      	cmp	r0, #0
   d9404:	f040 80aa 	bne.w	d955c <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0x2b4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->Z, 1 ) );
   d9408:	f106 0918 	add.w	r9, r6, #24
   d940c:	2101      	movs	r1, #1
   d940e:	4648      	mov	r0, r9
   d9410:	f007 fbb2 	bl	e0b78 <mbedtls_mpi_lset>
   d9414:	4604      	mov	r4, r0
   d9416:	2800      	cmp	r0, #0
   d9418:	f040 80a0 	bne.w	d955c <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0x2b4>
        if( f_rng != 0 )
   d941c:	9b67      	ldr	r3, [sp, #412]	; 0x19c
   d941e:	bb13      	cbnz	r3, d9466 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0x1be>
        MBEDTLS_MPI_CHK( ecp_select_comb( grp, &Txi, T, T_size, x[i] ) );
   d9420:	af16      	add	r7, sp, #88	; 0x58
    while( i != 0 )
   d9422:	9b66      	ldr	r3, [sp, #408]	; 0x198
   d9424:	2b00      	cmp	r3, #0
   d9426:	f000 8099 	beq.w	d955c <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0x2b4>
        --i;
   d942a:	3b01      	subs	r3, #1
        MBEDTLS_MPI_CHK( ecp_double_jac( grp, R, R ) );
   d942c:	4632      	mov	r2, r6
   d942e:	4631      	mov	r1, r6
   d9430:	4628      	mov	r0, r5
        --i;
   d9432:	9366      	str	r3, [sp, #408]	; 0x198
        MBEDTLS_MPI_CHK( ecp_double_jac( grp, R, R ) );
   d9434:	f7ff f888 	bl	d8548 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_>
   d9438:	b998      	cbnz	r0, d9462 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0x1ba>
        MBEDTLS_MPI_CHK( ecp_select_comb( grp, &Txi, T, T_size, x[i] ) );
   d943a:	9b66      	ldr	r3, [sp, #408]	; 0x198
   d943c:	5ddb      	ldrb	r3, [r3, r7]
   d943e:	9300      	str	r3, [sp, #0]
   d9440:	ee18 2a10 	vmov	r2, s16
   d9444:	ee18 3a90 	vmov	r3, s17
   d9448:	a90d      	add	r1, sp, #52	; 0x34
   d944a:	4628      	mov	r0, r5
   d944c:	f7ff fc18 	bl	d8c80 <_ZL15ecp_select_combPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_hh>
   d9450:	b938      	cbnz	r0, d9462 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0x1ba>
        MBEDTLS_MPI_CHK( ecp_add_mixed( grp, R, R, &Txi ) );
   d9452:	ab0d      	add	r3, sp, #52	; 0x34
   d9454:	4632      	mov	r2, r6
   d9456:	4631      	mov	r1, r6
   d9458:	4628      	mov	r0, r5
   d945a:	f7ff fd31 	bl	d8ec0 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_>
   d945e:	2800      	cmp	r0, #0
   d9460:	d0df      	beq.n	d9422 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0x17a>
   d9462:	4604      	mov	r4, r0
   d9464:	e07a      	b.n	d955c <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0x2b4>
    p_size = ( grp->pbits + 7 ) / 8;
   d9466:	6dab      	ldr	r3, [r5, #88]	; 0x58
    mbedtls_mpi_init( &l ); mbedtls_mpi_init( &ll );
   d9468:	af07      	add	r7, sp, #28
    p_size = ( grp->pbits + 7 ) / 8;
   d946a:	3307      	adds	r3, #7
    mbedtls_mpi_init( &l ); mbedtls_mpi_init( &ll );
   d946c:	4638      	mov	r0, r7
    p_size = ( grp->pbits + 7 ) / 8;
   d946e:	ea4f 08d3 	mov.w	r8, r3, lsr #3
    mbedtls_mpi_init( &l ); mbedtls_mpi_init( &ll );
   d9472:	f007 faa6 	bl	e09c2 <mbedtls_mpi_init>
   d9476:	a80a      	add	r0, sp, #40	; 0x28
   d9478:	f007 faa3 	bl	e09c2 <mbedtls_mpi_init>
   d947c:	f04f 0a0c 	mov.w	sl, #12
        while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )
   d9480:	f105 0b04 	add.w	fp, r5, #4
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &l, p_size, f_rng, p_rng ) );
   d9484:	e9dd 2367 	ldrd	r2, r3, [sp, #412]	; 0x19c
   d9488:	4641      	mov	r1, r8
   d948a:	4638      	mov	r0, r7
   d948c:	f008 fbec 	bl	e1c68 <mbedtls_mpi_fill_random>
   d9490:	4603      	mov	r3, r0
   d9492:	2800      	cmp	r0, #0
   d9494:	d156      	bne.n	d9544 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0x29c>
        while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )
   d9496:	4659      	mov	r1, fp
   d9498:	4638      	mov	r0, r7
   d949a:	f007 fd71 	bl	e0f80 <mbedtls_mpi_cmp_mpi>
   d949e:	2800      	cmp	r0, #0
   d94a0:	db04      	blt.n	d94ac <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0x204>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &l, 1 ) );
   d94a2:	2101      	movs	r1, #1
   d94a4:	4638      	mov	r0, r7
   d94a6:	f007 fc91 	bl	e0dcc <mbedtls_mpi_shift_r>
   d94aa:	e7f1      	b.n	d9490 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0x1e8>
        if( count++ > 10 )
   d94ac:	f1ba 0a01 	subs.w	sl, sl, #1
   d94b0:	d069      	beq.n	d9586 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0x2de>
    while( mbedtls_mpi_cmp_int( &l, 1 ) <= 0 );
   d94b2:	2101      	movs	r1, #1
   d94b4:	4638      	mov	r0, r7
   d94b6:	f007 fda4 	bl	e1002 <mbedtls_mpi_cmp_int>
   d94ba:	2800      	cmp	r0, #0
   d94bc:	dde2      	ble.n	d9484 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0x1dc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Z,   &pt->Z,     &l  ) ); MOD_MUL( pt->Z );
   d94be:	463a      	mov	r2, r7
   d94c0:	4649      	mov	r1, r9
   d94c2:	4648      	mov	r0, r9
   d94c4:	f007 feb9 	bl	e123a <mbedtls_mpi_mul_mpi>
   d94c8:	4603      	mov	r3, r0
   d94ca:	2800      	cmp	r0, #0
   d94cc:	d13a      	bne.n	d9544 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0x29c>
   d94ce:	4629      	mov	r1, r5
   d94d0:	4648      	mov	r0, r9
   d94d2:	f7fe fff3 	bl	d84bc <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d94d6:	4603      	mov	r3, r0
   d94d8:	bba0      	cbnz	r0, d9544 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0x29c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &l,         &l  ) ); MOD_MUL( ll );
   d94da:	463a      	mov	r2, r7
   d94dc:	4639      	mov	r1, r7
   d94de:	a80a      	add	r0, sp, #40	; 0x28
   d94e0:	f007 feab 	bl	e123a <mbedtls_mpi_mul_mpi>
   d94e4:	4603      	mov	r3, r0
   d94e6:	bb68      	cbnz	r0, d9544 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0x29c>
   d94e8:	4629      	mov	r1, r5
   d94ea:	a80a      	add	r0, sp, #40	; 0x28
   d94ec:	f7fe ffe6 	bl	d84bc <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d94f0:	4603      	mov	r3, r0
   d94f2:	bb38      	cbnz	r0, d9544 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0x29c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ll ) ); MOD_MUL( pt->X );
   d94f4:	aa0a      	add	r2, sp, #40	; 0x28
   d94f6:	4631      	mov	r1, r6
   d94f8:	4630      	mov	r0, r6
   d94fa:	f007 fe9e 	bl	e123a <mbedtls_mpi_mul_mpi>
   d94fe:	4603      	mov	r3, r0
   d9500:	bb00      	cbnz	r0, d9544 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0x29c>
   d9502:	4629      	mov	r1, r5
   d9504:	4630      	mov	r0, r6
   d9506:	f7fe ffd9 	bl	d84bc <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d950a:	4603      	mov	r3, r0
   d950c:	b9d0      	cbnz	r0, d9544 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0x29c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &ll,        &l  ) ); MOD_MUL( ll );
   d950e:	a90a      	add	r1, sp, #40	; 0x28
   d9510:	463a      	mov	r2, r7
   d9512:	4608      	mov	r0, r1
   d9514:	f007 fe91 	bl	e123a <mbedtls_mpi_mul_mpi>
   d9518:	4603      	mov	r3, r0
   d951a:	b998      	cbnz	r0, d9544 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0x29c>
   d951c:	4629      	mov	r1, r5
   d951e:	a80a      	add	r0, sp, #40	; 0x28
   d9520:	f7fe ffcc 	bl	d84bc <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d9524:	4603      	mov	r3, r0
   d9526:	b968      	cbnz	r0, d9544 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0x29c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ll ) ); MOD_MUL( pt->Y );
   d9528:	f106 070c 	add.w	r7, r6, #12
   d952c:	aa0a      	add	r2, sp, #40	; 0x28
   d952e:	4639      	mov	r1, r7
   d9530:	4638      	mov	r0, r7
   d9532:	f007 fe82 	bl	e123a <mbedtls_mpi_mul_mpi>
   d9536:	4603      	mov	r3, r0
   d9538:	b920      	cbnz	r0, d9544 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0x29c>
   d953a:	4629      	mov	r1, r5
   d953c:	4638      	mov	r0, r7
   d953e:	f7fe ffbd 	bl	d84bc <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d9542:	4603      	mov	r3, r0
    mbedtls_mpi_free( &l ); mbedtls_mpi_free( &ll );
   d9544:	a807      	add	r0, sp, #28
   d9546:	9304      	str	r3, [sp, #16]
   d9548:	f007 fa41 	bl	e09ce <mbedtls_mpi_free>
   d954c:	a80a      	add	r0, sp, #40	; 0x28
   d954e:	f007 fa3e 	bl	e09ce <mbedtls_mpi_free>
            MBEDTLS_MPI_CHK( ecp_randomize_jac( grp, R, f_rng, p_rng ) );
   d9552:	9b04      	ldr	r3, [sp, #16]
   d9554:	2b00      	cmp	r3, #0
   d9556:	f43f af63 	beq.w	d9420 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0x178>
   d955a:	461c      	mov	r4, r3
    if( pt == NULL )
   d955c:	a80d      	add	r0, sp, #52	; 0x34
   d955e:	f7ff fbc3 	bl	d8ce8 <mbedtls_ecp_point_free.part.0>
    MBEDTLS_MPI_CHK( ecp_mul_comb_core( grp, RR, T, T_size, k, d,
   d9562:	2c00      	cmp	r4, #0
   d9564:	f47f aec2 	bne.w	d92ec <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0x44>
    MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, RR, parity_trick ) );
   d9568:	9a03      	ldr	r2, [sp, #12]
   d956a:	4631      	mov	r1, r6
   d956c:	4628      	mov	r0, r5
   d956e:	f7fe ff82 	bl	d8476 <_ZL19ecp_safe_invert_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointh>
   d9572:	4604      	mov	r4, r0
   d9574:	2800      	cmp	r0, #0
   d9576:	f47f aeb9 	bne.w	d92ec <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0x44>
    MBEDTLS_MPI_CHK( ecp_normalize_jac( grp, RR ) );
   d957a:	4631      	mov	r1, r6
   d957c:	4628      	mov	r0, r5
   d957e:	f7ff fa1b 	bl	d89b8 <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point>
   d9582:	4604      	mov	r4, r0
    return( ret );
   d9584:	e6b2      	b.n	d92ec <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0x44>
            return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
   d9586:	4c02      	ldr	r4, [pc, #8]	; (d9590 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0x2e8>)
   d9588:	e7e8      	b.n	d955c <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0x2b4>
   d958a:	bf00      	nop
   d958c:	ffffb080 	.word	0xffffb080
   d9590:	ffffb300 	.word	0xffffb300

000d9594 <mbedtls_ecp_is_zero>:
{
   d9594:	b508      	push	{r3, lr}
    return( mbedtls_mpi_cmp_int( &pt->Z, 0 ) == 0 );
   d9596:	2100      	movs	r1, #0
   d9598:	3018      	adds	r0, #24
   d959a:	f007 fd32 	bl	e1002 <mbedtls_mpi_cmp_int>
}
   d959e:	fab0 f080 	clz	r0, r0
   d95a2:	0940      	lsrs	r0, r0, #5
   d95a4:	bd08      	pop	{r3, pc}
	...

000d95a8 <mbedtls_ecp_point_write_binary>:
{
   d95a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d95ac:	460e      	mov	r6, r1
   d95ae:	4605      	mov	r5, r0
    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
   d95b0:	2100      	movs	r1, #0
   d95b2:	f106 0018 	add.w	r0, r6, #24
{
   d95b6:	e9dd 4908 	ldrd	r4, r9, [sp, #32]
   d95ba:	4690      	mov	r8, r2
   d95bc:	461f      	mov	r7, r3
    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
   d95be:	f007 fd20 	bl	e1002 <mbedtls_mpi_cmp_int>
   d95c2:	b948      	cbnz	r0, d95d8 <mbedtls_ecp_point_write_binary+0x30>
        if( buflen < 1 )
   d95c4:	f1b9 0f00 	cmp.w	r9, #0
   d95c8:	d102      	bne.n	d95d0 <mbedtls_ecp_point_write_binary+0x28>
            return( MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL );
   d95ca:	481d      	ldr	r0, [pc, #116]	; (d9640 <mbedtls_ecp_point_write_binary+0x98>)
}
   d95cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        *olen = 1;
   d95d0:	2301      	movs	r3, #1
        buf[0] = 0x00;
   d95d2:	7020      	strb	r0, [r4, #0]
        *olen = 1;
   d95d4:	603b      	str	r3, [r7, #0]
        return( 0 );
   d95d6:	e7f9      	b.n	d95cc <mbedtls_ecp_point_write_binary+0x24>
    plen = mbedtls_mpi_size( &grp->P );
   d95d8:	1d28      	adds	r0, r5, #4
   d95da:	f007 fb30 	bl	e0c3e <mbedtls_mpi_size>
   d95de:	4605      	mov	r5, r0
    if( format == MBEDTLS_ECP_PF_UNCOMPRESSED )
   d95e0:	f1b8 0f00 	cmp.w	r8, #0
   d95e4:	d117      	bne.n	d9616 <mbedtls_ecp_point_write_binary+0x6e>
        *olen = 2 * plen + 1;
   d95e6:	0043      	lsls	r3, r0, #1
   d95e8:	3301      	adds	r3, #1
        if( buflen < *olen )
   d95ea:	4599      	cmp	r9, r3
        *olen = 2 * plen + 1;
   d95ec:	603b      	str	r3, [r7, #0]
        if( buflen < *olen )
   d95ee:	d3ec      	bcc.n	d95ca <mbedtls_ecp_point_write_binary+0x22>
        buf[0] = 0x04;
   d95f0:	4621      	mov	r1, r4
   d95f2:	2304      	movs	r3, #4
        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );
   d95f4:	4602      	mov	r2, r0
        buf[0] = 0x04;
   d95f6:	f801 3b01 	strb.w	r3, [r1], #1
        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );
   d95fa:	4630      	mov	r0, r6
   d95fc:	f007 fb5d 	bl	e0cba <mbedtls_mpi_write_binary>
   d9600:	2800      	cmp	r0, #0
   d9602:	d1e3      	bne.n	d95cc <mbedtls_ecp_point_write_binary+0x24>
        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->Y, buf + 1 + plen, plen ) );
   d9604:	1c69      	adds	r1, r5, #1
   d9606:	462a      	mov	r2, r5
   d9608:	4421      	add	r1, r4
   d960a:	f106 000c 	add.w	r0, r6, #12
}
   d960e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );
   d9612:	f007 bb52 	b.w	e0cba <mbedtls_mpi_write_binary>
    else if( format == MBEDTLS_ECP_PF_COMPRESSED )
   d9616:	f1b8 0f01 	cmp.w	r8, #1
   d961a:	d10f      	bne.n	d963c <mbedtls_ecp_point_write_binary+0x94>
        *olen = plen + 1;
   d961c:	1c43      	adds	r3, r0, #1
        if( buflen < *olen )
   d961e:	4599      	cmp	r9, r3
        *olen = plen + 1;
   d9620:	603b      	str	r3, [r7, #0]
        if( buflen < *olen )
   d9622:	d3d2      	bcc.n	d95ca <mbedtls_ecp_point_write_binary+0x22>
        buf[0] = 0x02 + mbedtls_mpi_get_bit( &P->Y, 0 );
   d9624:	2100      	movs	r1, #0
   d9626:	f106 000c 	add.w	r0, r6, #12
   d962a:	f007 fac1 	bl	e0bb0 <mbedtls_mpi_get_bit>
   d962e:	4621      	mov	r1, r4
   d9630:	3002      	adds	r0, #2
   d9632:	f801 0b01 	strb.w	r0, [r1], #1
        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );
   d9636:	462a      	mov	r2, r5
   d9638:	4630      	mov	r0, r6
   d963a:	e7e8      	b.n	d960e <mbedtls_ecp_point_write_binary+0x66>
    int ret = 0;
   d963c:	2000      	movs	r0, #0
   d963e:	e7c5      	b.n	d95cc <mbedtls_ecp_point_write_binary+0x24>
   d9640:	ffffb100 	.word	0xffffb100

000d9644 <mbedtls_ecp_point_read_binary>:
{
   d9644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9646:	460c      	mov	r4, r1
   d9648:	4615      	mov	r5, r2
    if( ilen < 1 )
   d964a:	461f      	mov	r7, r3
   d964c:	b90b      	cbnz	r3, d9652 <mbedtls_ecp_point_read_binary+0xe>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   d964e:	4817      	ldr	r0, [pc, #92]	; (d96ac <mbedtls_ecp_point_read_binary+0x68>)
}
   d9650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if( buf[0] == 0x00 )
   d9652:	7813      	ldrb	r3, [r2, #0]
   d9654:	b933      	cbnz	r3, d9664 <mbedtls_ecp_point_read_binary+0x20>
        if( ilen == 1 )
   d9656:	2f01      	cmp	r7, #1
   d9658:	d1f9      	bne.n	d964e <mbedtls_ecp_point_read_binary+0xa>
}
   d965a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            return( mbedtls_ecp_set_zero( pt ) );
   d965e:	4608      	mov	r0, r1
   d9660:	f7ff bc1a 	b.w	d8e98 <mbedtls_ecp_set_zero>
    plen = mbedtls_mpi_size( &grp->P );
   d9664:	3004      	adds	r0, #4
   d9666:	f007 faea 	bl	e0c3e <mbedtls_mpi_size>
    if( buf[0] != 0x04 )
   d966a:	782b      	ldrb	r3, [r5, #0]
   d966c:	2b04      	cmp	r3, #4
    plen = mbedtls_mpi_size( &grp->P );
   d966e:	4606      	mov	r6, r0
    if( buf[0] != 0x04 )
   d9670:	d11a      	bne.n	d96a8 <mbedtls_ecp_point_read_binary+0x64>
    if( ilen != 2 * plen + 1 )
   d9672:	0043      	lsls	r3, r0, #1
   d9674:	3301      	adds	r3, #1
   d9676:	429f      	cmp	r7, r3
   d9678:	d1e9      	bne.n	d964e <mbedtls_ecp_point_read_binary+0xa>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &pt->X, buf + 1, plen ) );
   d967a:	4602      	mov	r2, r0
   d967c:	1c69      	adds	r1, r5, #1
   d967e:	4620      	mov	r0, r4
   d9680:	f007 fae3 	bl	e0c4a <mbedtls_mpi_read_binary>
   d9684:	2800      	cmp	r0, #0
   d9686:	d1e3      	bne.n	d9650 <mbedtls_ecp_point_read_binary+0xc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &pt->Y, buf + 1 + plen, plen ) );
   d9688:	1c71      	adds	r1, r6, #1
   d968a:	4632      	mov	r2, r6
   d968c:	4429      	add	r1, r5
   d968e:	f104 000c 	add.w	r0, r4, #12
   d9692:	f007 fada 	bl	e0c4a <mbedtls_mpi_read_binary>
   d9696:	2800      	cmp	r0, #0
   d9698:	d1da      	bne.n	d9650 <mbedtls_ecp_point_read_binary+0xc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );
   d969a:	f104 0018 	add.w	r0, r4, #24
   d969e:	2101      	movs	r1, #1
}
   d96a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );
   d96a4:	f007 ba68 	b.w	e0b78 <mbedtls_mpi_lset>
        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
   d96a8:	4801      	ldr	r0, [pc, #4]	; (d96b0 <mbedtls_ecp_point_read_binary+0x6c>)
   d96aa:	e7d1      	b.n	d9650 <mbedtls_ecp_point_read_binary+0xc>
   d96ac:	ffffb080 	.word	0xffffb080
   d96b0:	ffffb180 	.word	0xffffb180

000d96b4 <mbedtls_ecp_tls_read_point>:
    if( buf_len < 2 )
   d96b4:	2b01      	cmp	r3, #1
{
   d96b6:	b470      	push	{r4, r5, r6}
    if( buf_len < 2 )
   d96b8:	d90e      	bls.n	d96d8 <mbedtls_ecp_tls_read_point+0x24>
    data_len = *(*buf)++;
   d96ba:	6814      	ldr	r4, [r2, #0]
   d96bc:	1c66      	adds	r6, r4, #1
   d96be:	6016      	str	r6, [r2, #0]
   d96c0:	7825      	ldrb	r5, [r4, #0]
    if( data_len < 1 || data_len > buf_len - 1 )
   d96c2:	b14d      	cbz	r5, d96d8 <mbedtls_ecp_tls_read_point+0x24>
   d96c4:	1e5c      	subs	r4, r3, #1
   d96c6:	42a5      	cmp	r5, r4
   d96c8:	d806      	bhi.n	d96d8 <mbedtls_ecp_tls_read_point+0x24>
    *buf += data_len;
   d96ca:	1973      	adds	r3, r6, r5
   d96cc:	6013      	str	r3, [r2, #0]
    return( mbedtls_ecp_point_read_binary( grp, pt, buf_start, data_len ) );
   d96ce:	462b      	mov	r3, r5
   d96d0:	4632      	mov	r2, r6
}
   d96d2:	bc70      	pop	{r4, r5, r6}
    return( mbedtls_ecp_point_read_binary( grp, pt, buf_start, data_len ) );
   d96d4:	f7ff bfb6 	b.w	d9644 <mbedtls_ecp_point_read_binary>
}
   d96d8:	4801      	ldr	r0, [pc, #4]	; (d96e0 <mbedtls_ecp_tls_read_point+0x2c>)
   d96da:	bc70      	pop	{r4, r5, r6}
   d96dc:	4770      	bx	lr
   d96de:	bf00      	nop
   d96e0:	ffffb080 	.word	0xffffb080

000d96e4 <mbedtls_ecp_tls_write_point>:
{
   d96e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d96e6:	e9dd 6506 	ldrd	r6, r5, [sp, #24]
   d96ea:	461c      	mov	r4, r3
    if( blen < 1 )
   d96ec:	b16d      	cbz	r5, d970a <mbedtls_ecp_tls_write_point+0x26>
    if( ( ret = mbedtls_ecp_point_write_binary( grp, pt, format,
   d96ee:	3d01      	subs	r5, #1
   d96f0:	9501      	str	r5, [sp, #4]
   d96f2:	1c75      	adds	r5, r6, #1
   d96f4:	9500      	str	r5, [sp, #0]
   d96f6:	f7ff ff57 	bl	d95a8 <mbedtls_ecp_point_write_binary>
   d96fa:	b920      	cbnz	r0, d9706 <mbedtls_ecp_tls_write_point+0x22>
    buf[0] = (unsigned char) *olen;
   d96fc:	6823      	ldr	r3, [r4, #0]
   d96fe:	7033      	strb	r3, [r6, #0]
    ++*olen;
   d9700:	6823      	ldr	r3, [r4, #0]
   d9702:	3301      	adds	r3, #1
   d9704:	6023      	str	r3, [r4, #0]
}
   d9706:	b002      	add	sp, #8
   d9708:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   d970a:	4801      	ldr	r0, [pc, #4]	; (d9710 <mbedtls_ecp_tls_write_point+0x2c>)
   d970c:	e7fb      	b.n	d9706 <mbedtls_ecp_tls_write_point+0x22>
   d970e:	bf00      	nop
   d9710:	ffffb080 	.word	0xffffb080

000d9714 <mbedtls_ecp_tls_read_group_id>:
    if( len < 3 )
   d9714:	2a02      	cmp	r2, #2
{
   d9716:	b510      	push	{r4, lr}
   d9718:	4604      	mov	r4, r0
    if( len < 3 )
   d971a:	d801      	bhi.n	d9720 <mbedtls_ecp_tls_read_group_id+0xc>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   d971c:	480c      	ldr	r0, [pc, #48]	; (d9750 <mbedtls_ecp_tls_read_group_id+0x3c>)
}
   d971e:	bd10      	pop	{r4, pc}
    if( *(*buf)++ != MBEDTLS_ECP_TLS_NAMED_CURVE )
   d9720:	680b      	ldr	r3, [r1, #0]
   d9722:	1c5a      	adds	r2, r3, #1
   d9724:	600a      	str	r2, [r1, #0]
   d9726:	781a      	ldrb	r2, [r3, #0]
   d9728:	2a03      	cmp	r2, #3
   d972a:	d1f7      	bne.n	d971c <mbedtls_ecp_tls_read_group_id+0x8>
    tls_id = *(*buf)++;
   d972c:	1c9a      	adds	r2, r3, #2
   d972e:	600a      	str	r2, [r1, #0]
    tls_id |= *(*buf)++;
   d9730:	1cda      	adds	r2, r3, #3
    tls_id = *(*buf)++;
   d9732:	7858      	ldrb	r0, [r3, #1]
    tls_id |= *(*buf)++;
   d9734:	600a      	str	r2, [r1, #0]
   d9736:	789b      	ldrb	r3, [r3, #2]
    if( ( curve_info = mbedtls_ecp_curve_info_from_tls_id( tls_id ) ) == NULL )
   d9738:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   d973c:	f7ff fb0a 	bl	d8d54 <mbedtls_ecp_curve_info_from_tls_id>
   d9740:	b118      	cbz	r0, d974a <mbedtls_ecp_tls_read_group_id+0x36>
    *grp = curve_info->grp_id;
   d9742:	7803      	ldrb	r3, [r0, #0]
   d9744:	7023      	strb	r3, [r4, #0]
    return( 0 );
   d9746:	2000      	movs	r0, #0
   d9748:	e7e9      	b.n	d971e <mbedtls_ecp_tls_read_group_id+0xa>
        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
   d974a:	4802      	ldr	r0, [pc, #8]	; (d9754 <mbedtls_ecp_tls_read_group_id+0x40>)
   d974c:	e7e7      	b.n	d971e <mbedtls_ecp_tls_read_group_id+0xa>
   d974e:	bf00      	nop
   d9750:	ffffb080 	.word	0xffffb080
   d9754:	ffffb180 	.word	0xffffb180

000d9758 <mbedtls_ecp_check_pubkey>:
/*
 * Check that a point is valid as a public key
 */
int mbedtls_ecp_check_pubkey( const mbedtls_ecp_group *grp,
                              const mbedtls_ecp_point *pt )
{
   d9758:	b5f0      	push	{r4, r5, r6, r7, lr}
   d975a:	460f      	mov	r7, r1
   d975c:	b089      	sub	sp, #36	; 0x24
   d975e:	4606      	mov	r6, r0
    ECP_VALIDATE_RET( grp != NULL );
    ECP_VALIDATE_RET( pt  != NULL );

    /* Must use affine coordinates */
    if( mbedtls_mpi_cmp_int( &pt->Z, 1 ) != 0 )
   d9760:	2101      	movs	r1, #1
   d9762:	f107 0018 	add.w	r0, r7, #24
   d9766:	f007 fc4c 	bl	e1002 <mbedtls_mpi_cmp_int>
   d976a:	9001      	str	r0, [sp, #4]
   d976c:	b960      	cbnz	r0, d9788 <mbedtls_ecp_check_pubkey+0x30>
#if defined(ECP_MONTGOMERY)
    if( ecp_get_type( grp ) == ECP_TYPE_MONTGOMERY )
        return( ecp_check_pubkey_mx( grp, pt ) );
#endif
#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
   d976e:	4630      	mov	r0, r6
   d9770:	f7fe fe77 	bl	d8462 <_ZL12ecp_get_typePK17mbedtls_ecp_group>
   d9774:	2801      	cmp	r0, #1
   d9776:	f040 809f 	bne.w	d98b8 <mbedtls_ecp_check_pubkey+0x160>
    if( mbedtls_mpi_cmp_int( &pt->X, 0 ) < 0 ||
   d977a:	9901      	ldr	r1, [sp, #4]
   d977c:	4638      	mov	r0, r7
   d977e:	f007 fc40 	bl	e1002 <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_mpi( &pt->X, &grp->P ) >= 0 ||
   d9782:	2800      	cmp	r0, #0
   d9784:	9901      	ldr	r1, [sp, #4]
   d9786:	da01      	bge.n	d978c <mbedtls_ecp_check_pubkey+0x34>
        return( MBEDTLS_ERR_ECP_INVALID_KEY );
   d9788:	4c4c      	ldr	r4, [pc, #304]	; (d98bc <mbedtls_ecp_check_pubkey+0x164>)
   d978a:	e092      	b.n	d98b2 <mbedtls_ecp_check_pubkey+0x15a>
        mbedtls_mpi_cmp_int( &pt->Y, 0 ) < 0 ||
   d978c:	f107 040c 	add.w	r4, r7, #12
   d9790:	4620      	mov	r0, r4
   d9792:	f007 fc36 	bl	e1002 <mbedtls_mpi_cmp_int>
    if( mbedtls_mpi_cmp_int( &pt->X, 0 ) < 0 ||
   d9796:	2800      	cmp	r0, #0
   d9798:	dbf6      	blt.n	d9788 <mbedtls_ecp_check_pubkey+0x30>
        mbedtls_mpi_cmp_mpi( &pt->X, &grp->P ) >= 0 ||
   d979a:	1d35      	adds	r5, r6, #4
   d979c:	4629      	mov	r1, r5
   d979e:	4638      	mov	r0, r7
   d97a0:	f007 fbee 	bl	e0f80 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_int( &pt->Y, 0 ) < 0 ||
   d97a4:	2800      	cmp	r0, #0
   d97a6:	daef      	bge.n	d9788 <mbedtls_ecp_check_pubkey+0x30>
        mbedtls_mpi_cmp_mpi( &pt->Y, &grp->P ) >= 0 )
   d97a8:	4629      	mov	r1, r5
   d97aa:	4620      	mov	r0, r4
   d97ac:	f007 fbe8 	bl	e0f80 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_mpi( &pt->X, &grp->P ) >= 0 ||
   d97b0:	2800      	cmp	r0, #0
   d97b2:	dae9      	bge.n	d9788 <mbedtls_ecp_check_pubkey+0x30>
    mbedtls_mpi_init( &YY ); mbedtls_mpi_init( &RHS );
   d97b4:	a802      	add	r0, sp, #8
   d97b6:	f007 f904 	bl	e09c2 <mbedtls_mpi_init>
   d97ba:	a805      	add	r0, sp, #20
   d97bc:	f007 f901 	bl	e09c2 <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &YY,  &pt->Y,   &pt->Y  ) );  MOD_MUL( YY  );
   d97c0:	4622      	mov	r2, r4
   d97c2:	4621      	mov	r1, r4
   d97c4:	a802      	add	r0, sp, #8
   d97c6:	f007 fd38 	bl	e123a <mbedtls_mpi_mul_mpi>
   d97ca:	4604      	mov	r4, r0
   d97cc:	2800      	cmp	r0, #0
   d97ce:	d16a      	bne.n	d98a6 <mbedtls_ecp_check_pubkey+0x14e>
   d97d0:	4631      	mov	r1, r6
   d97d2:	a802      	add	r0, sp, #8
   d97d4:	f7fe fe72 	bl	d84bc <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d97d8:	4604      	mov	r4, r0
   d97da:	2800      	cmp	r0, #0
   d97dc:	d163      	bne.n	d98a6 <mbedtls_ecp_check_pubkey+0x14e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &pt->X,   &pt->X  ) );  MOD_MUL( RHS );
   d97de:	463a      	mov	r2, r7
   d97e0:	4639      	mov	r1, r7
   d97e2:	a805      	add	r0, sp, #20
   d97e4:	f007 fd29 	bl	e123a <mbedtls_mpi_mul_mpi>
   d97e8:	4604      	mov	r4, r0
   d97ea:	2800      	cmp	r0, #0
   d97ec:	d15b      	bne.n	d98a6 <mbedtls_ecp_check_pubkey+0x14e>
   d97ee:	4631      	mov	r1, r6
   d97f0:	a805      	add	r0, sp, #20
   d97f2:	f7fe fe63 	bl	d84bc <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d97f6:	4604      	mov	r4, r0
   d97f8:	2800      	cmp	r0, #0
   d97fa:	d154      	bne.n	d98a6 <mbedtls_ecp_check_pubkey+0x14e>
    if( grp->A.p == NULL )
   d97fc:	69b3      	ldr	r3, [r6, #24]
   d97fe:	b9ab      	cbnz	r3, d982c <mbedtls_ecp_check_pubkey+0xd4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &RHS, &RHS, 3       ) );  MOD_SUB( RHS );
   d9800:	a905      	add	r1, sp, #20
   d9802:	2203      	movs	r2, #3
   d9804:	4608      	mov	r0, r1
   d9806:	f007 fd02 	bl	e120e <mbedtls_mpi_sub_int>
   d980a:	4604      	mov	r4, r0
   d980c:	2800      	cmp	r0, #0
   d980e:	d14a      	bne.n	d98a6 <mbedtls_ecp_check_pubkey+0x14e>
   d9810:	9b05      	ldr	r3, [sp, #20]
   d9812:	2b00      	cmp	r3, #0
   d9814:	da1e      	bge.n	d9854 <mbedtls_ecp_check_pubkey+0xfc>
   d9816:	2100      	movs	r1, #0
   d9818:	a805      	add	r0, sp, #20
   d981a:	f007 fbf2 	bl	e1002 <mbedtls_mpi_cmp_int>
   d981e:	b1c8      	cbz	r0, d9854 <mbedtls_ecp_check_pubkey+0xfc>
   d9820:	a905      	add	r1, sp, #20
   d9822:	462a      	mov	r2, r5
   d9824:	4608      	mov	r0, r1
   d9826:	f007 fc97 	bl	e1158 <mbedtls_mpi_add_mpi>
   d982a:	e7ee      	b.n	d980a <mbedtls_ecp_check_pubkey+0xb2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS, &grp->A ) );  MOD_ADD( RHS );
   d982c:	a905      	add	r1, sp, #20
   d982e:	f106 0210 	add.w	r2, r6, #16
   d9832:	4608      	mov	r0, r1
   d9834:	f007 fc90 	bl	e1158 <mbedtls_mpi_add_mpi>
   d9838:	4604      	mov	r4, r0
   d983a:	bba0      	cbnz	r0, d98a6 <mbedtls_ecp_check_pubkey+0x14e>
   d983c:	4629      	mov	r1, r5
   d983e:	a805      	add	r0, sp, #20
   d9840:	f007 fb9e 	bl	e0f80 <mbedtls_mpi_cmp_mpi>
   d9844:	2800      	cmp	r0, #0
   d9846:	db05      	blt.n	d9854 <mbedtls_ecp_check_pubkey+0xfc>
   d9848:	a905      	add	r1, sp, #20
   d984a:	462a      	mov	r2, r5
   d984c:	4608      	mov	r0, r1
   d984e:	f007 fc47 	bl	e10e0 <mbedtls_mpi_sub_abs>
   d9852:	e7f1      	b.n	d9838 <mbedtls_ecp_check_pubkey+0xe0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &RHS,     &pt->X  ) );  MOD_MUL( RHS );
   d9854:	a905      	add	r1, sp, #20
   d9856:	463a      	mov	r2, r7
   d9858:	4608      	mov	r0, r1
   d985a:	f007 fcee 	bl	e123a <mbedtls_mpi_mul_mpi>
   d985e:	4604      	mov	r4, r0
   d9860:	bb08      	cbnz	r0, d98a6 <mbedtls_ecp_check_pubkey+0x14e>
   d9862:	4631      	mov	r1, r6
   d9864:	a805      	add	r0, sp, #20
   d9866:	f7fe fe29 	bl	d84bc <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d986a:	4604      	mov	r4, r0
   d986c:	b9d8      	cbnz	r0, d98a6 <mbedtls_ecp_check_pubkey+0x14e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS,     &grp->B ) );  MOD_ADD( RHS );
   d986e:	a905      	add	r1, sp, #20
   d9870:	f106 021c 	add.w	r2, r6, #28
   d9874:	4608      	mov	r0, r1
   d9876:	f007 fc6f 	bl	e1158 <mbedtls_mpi_add_mpi>
   d987a:	4604      	mov	r4, r0
   d987c:	b998      	cbnz	r0, d98a6 <mbedtls_ecp_check_pubkey+0x14e>
   d987e:	4629      	mov	r1, r5
   d9880:	a805      	add	r0, sp, #20
   d9882:	f007 fb7d 	bl	e0f80 <mbedtls_mpi_cmp_mpi>
   d9886:	2800      	cmp	r0, #0
   d9888:	db05      	blt.n	d9896 <mbedtls_ecp_check_pubkey+0x13e>
   d988a:	a905      	add	r1, sp, #20
   d988c:	462a      	mov	r2, r5
   d988e:	4608      	mov	r0, r1
   d9890:	f007 fc26 	bl	e10e0 <mbedtls_mpi_sub_abs>
   d9894:	e7f1      	b.n	d987a <mbedtls_ecp_check_pubkey+0x122>
    if( mbedtls_mpi_cmp_mpi( &YY, &RHS ) != 0 )
   d9896:	a905      	add	r1, sp, #20
   d9898:	a802      	add	r0, sp, #8
   d989a:	f007 fb71 	bl	e0f80 <mbedtls_mpi_cmp_mpi>
        ret = MBEDTLS_ERR_ECP_INVALID_KEY;
   d989e:	4b07      	ldr	r3, [pc, #28]	; (d98bc <mbedtls_ecp_check_pubkey+0x164>)
   d98a0:	1e04      	subs	r4, r0, #0
   d98a2:	bf18      	it	ne
   d98a4:	461c      	movne	r4, r3
    mbedtls_mpi_free( &YY ); mbedtls_mpi_free( &RHS );
   d98a6:	a802      	add	r0, sp, #8
   d98a8:	f007 f891 	bl	e09ce <mbedtls_mpi_free>
   d98ac:	a805      	add	r0, sp, #20
   d98ae:	f007 f88e 	bl	e09ce <mbedtls_mpi_free>
        return( ecp_check_pubkey_sw( grp, pt ) );
#endif
    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
}
   d98b2:	4620      	mov	r0, r4
   d98b4:	b009      	add	sp, #36	; 0x24
   d98b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   d98b8:	4c01      	ldr	r4, [pc, #4]	; (d98c0 <mbedtls_ecp_check_pubkey+0x168>)
   d98ba:	e7fa      	b.n	d98b2 <mbedtls_ecp_check_pubkey+0x15a>
   d98bc:	ffffb380 	.word	0xffffb380
   d98c0:	ffffb080 	.word	0xffffb080

000d98c4 <mbedtls_ecp_check_privkey>:
/*
 * Check that an mbedtls_mpi is valid as a private key
 */
int mbedtls_ecp_check_privkey( const mbedtls_ecp_group *grp,
                               const mbedtls_mpi *d )
{
   d98c4:	b538      	push	{r3, r4, r5, lr}
   d98c6:	460c      	mov	r4, r1
   d98c8:	4605      	mov	r5, r0

        return( 0 );
    }
#endif /* ECP_MONTGOMERY */
#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
   d98ca:	f7fe fdca 	bl	d8462 <_ZL12ecp_get_typePK17mbedtls_ecp_group>
   d98ce:	2801      	cmp	r0, #1
   d98d0:	4601      	mov	r1, r0
   d98d2:	d10d      	bne.n	d98f0 <mbedtls_ecp_check_privkey+0x2c>
    {
        /* see SEC1 3.2 */
        if( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
   d98d4:	4620      	mov	r0, r4
   d98d6:	f007 fb94 	bl	e1002 <mbedtls_mpi_cmp_int>
   d98da:	2800      	cmp	r0, #0
   d98dc:	db06      	blt.n	d98ec <mbedtls_ecp_check_privkey+0x28>
            mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 )
   d98de:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   d98e2:	4620      	mov	r0, r4
   d98e4:	f007 fb4c 	bl	e0f80 <mbedtls_mpi_cmp_mpi>
        if( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
   d98e8:	2800      	cmp	r0, #0
   d98ea:	db03      	blt.n	d98f4 <mbedtls_ecp_check_privkey+0x30>
            return( MBEDTLS_ERR_ECP_INVALID_KEY );
   d98ec:	4802      	ldr	r0, [pc, #8]	; (d98f8 <mbedtls_ecp_check_privkey+0x34>)
            return( 0 );
    }
#endif /* ECP_SHORTWEIERSTRASS */

    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
}
   d98ee:	bd38      	pop	{r3, r4, r5, pc}
    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   d98f0:	4802      	ldr	r0, [pc, #8]	; (d98fc <mbedtls_ecp_check_privkey+0x38>)
   d98f2:	e7fc      	b.n	d98ee <mbedtls_ecp_check_privkey+0x2a>
            return( 0 );
   d98f4:	2000      	movs	r0, #0
   d98f6:	e7fa      	b.n	d98ee <mbedtls_ecp_check_privkey+0x2a>
   d98f8:	ffffb380 	.word	0xffffb380
   d98fc:	ffffb080 	.word	0xffffb080

000d9900 <mbedtls_ecp_mul_restartable>:
{
   d9900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9904:	ed2d 8b02 	vpush	{d8}
   d9908:	ee08 1a10 	vmov	s16, r1
   d990c:	b0ad      	sub	sp, #180	; 0xb4
        MBEDTLS_MPI_CHK( mbedtls_ecp_check_privkey( grp, m ) );
   d990e:	4611      	mov	r1, r2
{
   d9910:	ee08 2a90 	vmov	s17, r2
   d9914:	4605      	mov	r5, r0
   d9916:	4698      	mov	r8, r3
        MBEDTLS_MPI_CHK( mbedtls_ecp_check_privkey( grp, m ) );
   d9918:	f7ff ffd4 	bl	d98c4 <mbedtls_ecp_check_privkey>
   d991c:	4681      	mov	r9, r0
   d991e:	2800      	cmp	r0, #0
   d9920:	f040 8093 	bne.w	d9a4a <mbedtls_ecp_mul_restartable+0x14a>
        MBEDTLS_MPI_CHK( mbedtls_ecp_check_pubkey( grp, P ) );
   d9924:	4641      	mov	r1, r8
   d9926:	4628      	mov	r0, r5
   d9928:	f7ff ff16 	bl	d9758 <mbedtls_ecp_check_pubkey>
   d992c:	4681      	mov	r9, r0
   d992e:	2800      	cmp	r0, #0
   d9930:	f040 808b 	bne.w	d9a4a <mbedtls_ecp_mul_restartable+0x14a>
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
   d9934:	4628      	mov	r0, r5
   d9936:	f7fe fd94 	bl	d8462 <_ZL12ecp_get_typePK17mbedtls_ecp_group>
   d993a:	2801      	cmp	r0, #1
   d993c:	4682      	mov	sl, r0
   d993e:	f040 8112 	bne.w	d9b66 <mbedtls_ecp_mul_restartable+0x266>
    p_eq_g = ( mbedtls_mpi_cmp_mpi( &P->Y, &grp->G.Y ) == 0 &&
   d9942:	f105 0134 	add.w	r1, r5, #52	; 0x34
   d9946:	f108 000c 	add.w	r0, r8, #12
   d994a:	f007 fb19 	bl	e0f80 <mbedtls_mpi_cmp_mpi>
   d994e:	2800      	cmp	r0, #0
   d9950:	f040 8081 	bne.w	d9a56 <mbedtls_ecp_mul_restartable+0x156>
               mbedtls_mpi_cmp_mpi( &P->X, &grp->G.X ) == 0 );
   d9954:	f105 0128 	add.w	r1, r5, #40	; 0x28
   d9958:	4640      	mov	r0, r8
   d995a:	f007 fb11 	bl	e0f80 <mbedtls_mpi_cmp_mpi>
    p_eq_g = ( mbedtls_mpi_cmp_mpi( &P->Y, &grp->G.Y ) == 0 &&
   d995e:	fab0 f380 	clz	r3, r0
   d9962:	095b      	lsrs	r3, r3, #5
   d9964:	9307      	str	r3, [sp, #28]
    w = ecp_pick_window_size( grp, p_eq_g );
   d9966:	6deb      	ldr	r3, [r5, #92]	; 0x5c
    if( p_eq_g )
   d9968:	9a07      	ldr	r2, [sp, #28]
    w = grp->nbits >= 384 ? 5 : 4;
   d996a:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
   d996e:	bf2c      	ite	cs
   d9970:	2605      	movcs	r6, #5
   d9972:	2604      	movcc	r6, #4
    if( p_eq_g )
   d9974:	b102      	cbz	r2, d9978 <mbedtls_ecp_mul_restartable+0x78>
        w++;
   d9976:	3601      	adds	r6, #1
        w = 2;
   d9978:	42b3      	cmp	r3, r6
   d997a:	bf98      	it	ls
   d997c:	2602      	movls	r6, #2
    T_size = 1U << ( w - 1 );
   d997e:	f106 3bff 	add.w	fp, r6, #4294967295
   d9982:	2701      	movs	r7, #1
    d = ( grp->nbits + w - 1 ) / w;
   d9984:	3b01      	subs	r3, #1
    T_size = 1U << ( w - 1 );
   d9986:	fa07 f70b 	lsl.w	r7, r7, fp
    d = ( grp->nbits + w - 1 ) / w;
   d998a:	4433      	add	r3, r6
   d998c:	fbb3 f3f6 	udiv	r3, r3, r6
   d9990:	9309      	str	r3, [sp, #36]	; 0x24
    if( p_eq_g && grp->T != NULL )
   d9992:	9b07      	ldr	r3, [sp, #28]
    T_size = 1U << ( w - 1 );
   d9994:	b2fa      	uxtb	r2, r7
   d9996:	9208      	str	r2, [sp, #32]
    if( p_eq_g && grp->T != NULL )
   d9998:	b11b      	cbz	r3, d99a2 <mbedtls_ecp_mul_restartable+0xa2>
   d999a:	6f6c      	ldr	r4, [r5, #116]	; 0x74
   d999c:	2c00      	cmp	r4, #0
   d999e:	f040 80c7 	bne.w	d9b30 <mbedtls_ecp_mul_restartable+0x230>
        T = (mbedtls_ecp_point *)mbedtls_calloc( T_size, sizeof( mbedtls_ecp_point ) );
   d99a2:	2124      	movs	r1, #36	; 0x24
   d99a4:	4638      	mov	r0, r7
   d99a6:	f00e ff17 	bl	e87d8 <calloc>
        if( T == NULL )
   d99aa:	4604      	mov	r4, r0
   d99ac:	2800      	cmp	r0, #0
   d99ae:	f000 80d7 	beq.w	d9b60 <mbedtls_ecp_mul_restartable+0x260>
   d99b2:	f04f 0900 	mov.w	r9, #0
            mbedtls_ecp_point_init( &T[i] );
   d99b6:	2124      	movs	r1, #36	; 0x24
   d99b8:	fb01 4009 	mla	r0, r1, r9, r4
   d99bc:	f7ff f9d2 	bl	d8d64 <mbedtls_ecp_point_init>
        for( i = 0; i < T_size; i++ )
   d99c0:	f109 0901 	add.w	r9, r9, #1
   d99c4:	9b08      	ldr	r3, [sp, #32]
   d99c6:	fa5f f289 	uxtb.w	r2, r9
   d99ca:	4293      	cmp	r3, r2
   d99cc:	f04f 0124 	mov.w	r1, #36	; 0x24
   d99d0:	d8f2      	bhi.n	d99b8 <mbedtls_ecp_mul_restartable+0xb8>
    MBEDTLS_MPI_CHK( mbedtls_ecp_copy( &T[0], P ) );
   d99d2:	4641      	mov	r1, r8
   d99d4:	4620      	mov	r0, r4
   d99d6:	f7ff fa46 	bl	d8e66 <mbedtls_ecp_copy>
   d99da:	4681      	mov	r9, r0
   d99dc:	b9e0      	cbnz	r0, d9a18 <mbedtls_ecp_mul_restartable+0x118>
    for( ; j < d * ( w - 1 ); j++ )
   d99de:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d99e0:	fb03 f30b 	mul.w	r3, r3, fp
   d99e4:	930a      	str	r3, [sp, #40]	; 0x28
        j = 0;
   d99e6:	4680      	mov	r8, r0
    for( ; j < d * ( w - 1 ); j++ )
   d99e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d99ea:	4543      	cmp	r3, r8
   d99ec:	d047      	beq.n	d9a7e <mbedtls_ecp_mul_restartable+0x17e>
        i = 1U << ( j / d );
   d99ee:	2201      	movs	r2, #1
        if( j % d == 0 )
   d99f0:	9809      	ldr	r0, [sp, #36]	; 0x24
        i = 1U << ( j / d );
   d99f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d99f4:	fbb8 f3f3 	udiv	r3, r8, r3
   d99f8:	fa02 f103 	lsl.w	r1, r2, r3
        cur = T + i;
   d99fc:	fa5f fb81 	uxtb.w	fp, r1
   d9a00:	2224      	movs	r2, #36	; 0x24
        if( j % d == 0 )
   d9a02:	fb00 8313 	mls	r3, r0, r3, r8
        cur = T + i;
   d9a06:	fb02 420b 	mla	r2, r2, fp, r4
        if( j % d == 0 )
   d9a0a:	b33b      	cbz	r3, d9a5c <mbedtls_ecp_mul_restartable+0x15c>
        MBEDTLS_MPI_CHK( ecp_double_jac( grp, cur, cur ) );
   d9a0c:	4611      	mov	r1, r2
   d9a0e:	4628      	mov	r0, r5
   d9a10:	f7fe fd9a 	bl	d8548 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_>
   d9a14:	4681      	mov	r9, r0
   d9a16:	b378      	cbz	r0, d9a78 <mbedtls_ecp_mul_restartable+0x178>
    if( T == grp->T )
   d9a18:	6f6b      	ldr	r3, [r5, #116]	; 0x74
   d9a1a:	42a3      	cmp	r3, r4
   d9a1c:	d00e      	beq.n	d9a3c <mbedtls_ecp_mul_restartable+0x13c>
    if( T != NULL )
   d9a1e:	b16c      	cbz	r4, d9a3c <mbedtls_ecp_mul_restartable+0x13c>
   d9a20:	2500      	movs	r5, #0
            mbedtls_ecp_point_free( &T[i] );
   d9a22:	2624      	movs	r6, #36	; 0x24
   d9a24:	fb06 4005 	mla	r0, r6, r5, r4
   d9a28:	f7ff f9d9 	bl	d8dde <mbedtls_ecp_point_free>
        for( i = 0; i < T_size; i++ )
   d9a2c:	3501      	adds	r5, #1
   d9a2e:	9a08      	ldr	r2, [sp, #32]
   d9a30:	b2eb      	uxtb	r3, r5
   d9a32:	429a      	cmp	r2, r3
   d9a34:	d8f6      	bhi.n	d9a24 <mbedtls_ecp_mul_restartable+0x124>
        mbedtls_free( T );
   d9a36:	4620      	mov	r0, r4
   d9a38:	f00b fec2 	bl	e57c0 <free>
    if( ret != 0 )
   d9a3c:	f1b9 0f00 	cmp.w	r9, #0
   d9a40:	d003      	beq.n	d9a4a <mbedtls_ecp_mul_restartable+0x14a>
        mbedtls_ecp_point_free( R );
   d9a42:	ee18 0a10 	vmov	r0, s16
   d9a46:	f7ff f9ca 	bl	d8dde <mbedtls_ecp_point_free>
}
   d9a4a:	4648      	mov	r0, r9
   d9a4c:	b02d      	add	sp, #180	; 0xb4
   d9a4e:	ecbd 8b02 	vpop	{d8}
   d9a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    p_eq_g = ( mbedtls_mpi_cmp_mpi( &P->Y, &grp->G.Y ) == 0 &&
   d9a56:	f8cd 901c 	str.w	r9, [sp, #28]
   d9a5a:	e784      	b.n	d9966 <mbedtls_ecp_mul_restartable+0x66>
            MBEDTLS_MPI_CHK( mbedtls_ecp_copy( cur, T + ( i >> 1 ) ) );
   d9a5c:	2324      	movs	r3, #36	; 0x24
   d9a5e:	f3c1 0146 	ubfx	r1, r1, #1, #7
   d9a62:	4610      	mov	r0, r2
   d9a64:	fb03 4101 	mla	r1, r3, r1, r4
   d9a68:	920b      	str	r2, [sp, #44]	; 0x2c
   d9a6a:	f7ff f9fc 	bl	d8e66 <mbedtls_ecp_copy>
   d9a6e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d9a70:	4681      	mov	r9, r0
   d9a72:	2800      	cmp	r0, #0
   d9a74:	d0ca      	beq.n	d9a0c <mbedtls_ecp_mul_restartable+0x10c>
   d9a76:	e7cf      	b.n	d9a18 <mbedtls_ecp_mul_restartable+0x118>
    for( ; j < d * ( w - 1 ); j++ )
   d9a78:	f108 0801 	add.w	r8, r8, #1
   d9a7c:	e7b4      	b.n	d99e8 <mbedtls_ecp_mul_restartable+0xe8>
   d9a7e:	f10d 0b34 	add.w	fp, sp, #52	; 0x34
   d9a82:	4658      	mov	r0, fp
    for( i = 1; i < T_size; i <<= 1 )
   d9a84:	2301      	movs	r3, #1
    j = 0;
   d9a86:	2200      	movs	r2, #0
        TT[j++] = T + i;
   d9a88:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
   d9a8c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   d9a90:	f840 1b04 	str.w	r1, [r0], #4
    for( i = 1; i < T_size; i <<= 1 )
   d9a94:	005b      	lsls	r3, r3, #1
   d9a96:	9908      	ldr	r1, [sp, #32]
   d9a98:	b2db      	uxtb	r3, r3
   d9a9a:	4299      	cmp	r1, r3
        TT[j++] = T + i;
   d9a9c:	f102 0201 	add.w	r2, r2, #1
    for( i = 1; i < T_size; i <<= 1 )
   d9aa0:	d8f2      	bhi.n	d9a88 <mbedtls_ecp_mul_restartable+0x188>
    if( T_size < 2 )
   d9aa2:	2a01      	cmp	r2, #1
   d9aa4:	d11f      	bne.n	d9ae6 <mbedtls_ecp_mul_restartable+0x1e6>
        return( ecp_normalize_jac( grp, *T ) );
   d9aa6:	990d      	ldr	r1, [sp, #52]	; 0x34
   d9aa8:	4628      	mov	r0, r5
   d9aaa:	f7fe ff85 	bl	d89b8 <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point>
   d9aae:	4681      	mov	r9, r0
    MBEDTLS_MPI_CHK( ecp_normalize_jac_many( grp, TT, j ) );
   d9ab0:	2800      	cmp	r0, #0
   d9ab2:	d1b1      	bne.n	d9a18 <mbedtls_ecp_mul_restartable+0x118>
            MBEDTLS_MPI_CHK( ecp_add_mixed( grp, &T[i + j], &T[j], &T[i] ) );
   d9ab4:	fa0f f38a 	sxth.w	r3, sl
   d9ab8:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
        j = i;
   d9abc:	46d0      	mov	r8, sl
            MBEDTLS_MPI_CHK( ecp_add_mixed( grp, &T[i + j], &T[j], &T[i] ) );
   d9abe:	eb04 0383 	add.w	r3, r4, r3, lsl #2
        while( j-- )
   d9ac2:	4642      	mov	r2, r8
   d9ac4:	f108 38ff 	add.w	r8, r8, #4294967295
   d9ac8:	b192      	cbz	r2, d9af0 <mbedtls_ecp_mul_restartable+0x1f0>
            MBEDTLS_MPI_CHK( ecp_add_mixed( grp, &T[i + j], &T[j], &T[i] ) );
   d9aca:	2224      	movs	r2, #36	; 0x24
   d9acc:	fb02 f108 	mul.w	r1, r2, r8
   d9ad0:	1862      	adds	r2, r4, r1
   d9ad2:	4628      	mov	r0, r5
   d9ad4:	4419      	add	r1, r3
   d9ad6:	930a      	str	r3, [sp, #40]	; 0x28
   d9ad8:	f7ff f9f2 	bl	d8ec0 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_>
   d9adc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9ade:	4681      	mov	r9, r0
   d9ae0:	2800      	cmp	r0, #0
   d9ae2:	d0ee      	beq.n	d9ac2 <mbedtls_ecp_mul_restartable+0x1c2>
   d9ae4:	e798      	b.n	d9a18 <mbedtls_ecp_mul_restartable+0x118>
   d9ae6:	a90d      	add	r1, sp, #52	; 0x34
   d9ae8:	4628      	mov	r0, r5
   d9aea:	f7fe ffc3 	bl	d8a74 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj.part.0>
   d9aee:	e7de      	b.n	d9aae <mbedtls_ecp_mul_restartable+0x1ae>
    for( i = 1; i < T_size; i <<= 1 )
   d9af0:	9b08      	ldr	r3, [sp, #32]
   d9af2:	ea4f 004a 	mov.w	r0, sl, lsl #1
   d9af6:	fa5f fa80 	uxtb.w	sl, r0
   d9afa:	4553      	cmp	r3, sl
   d9afc:	d8da      	bhi.n	d9ab4 <mbedtls_ecp_mul_restartable+0x1b4>
        TT[j] = T + j + 1;
   d9afe:	2124      	movs	r1, #36	; 0x24
    for( j = 0; j + 1 < T_size; j++ )
   d9b00:	3201      	adds	r2, #1
   d9b02:	4297      	cmp	r7, r2
   d9b04:	d004      	beq.n	d9b10 <mbedtls_ecp_mul_restartable+0x210>
        TT[j] = T + j + 1;
   d9b06:	fb01 4302 	mla	r3, r1, r2, r4
   d9b0a:	f84b 3b04 	str.w	r3, [fp], #4
    for( j = 0; j + 1 < T_size; j++ )
   d9b0e:	e7f7      	b.n	d9b00 <mbedtls_ecp_mul_restartable+0x200>
    if( T_size < 2 )
   d9b10:	2f02      	cmp	r7, #2
   d9b12:	f107 32ff 	add.w	r2, r7, #4294967295
   d9b16:	d11e      	bne.n	d9b56 <mbedtls_ecp_mul_restartable+0x256>
        return( ecp_normalize_jac( grp, *T ) );
   d9b18:	990d      	ldr	r1, [sp, #52]	; 0x34
   d9b1a:	4628      	mov	r0, r5
   d9b1c:	f7fe ff4c 	bl	d89b8 <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point>
    return( ret );
   d9b20:	4681      	mov	r9, r0
        MBEDTLS_MPI_CHK( ecp_precompute_comb( grp, T, P, w, d, rs_ctx ) );
   d9b22:	2800      	cmp	r0, #0
   d9b24:	f47f af78 	bne.w	d9a18 <mbedtls_ecp_mul_restartable+0x118>
        if( p_eq_g )
   d9b28:	9b07      	ldr	r3, [sp, #28]
   d9b2a:	b10b      	cbz	r3, d9b30 <mbedtls_ecp_mul_restartable+0x230>
            grp->T_size = T_size;
   d9b2c:	e9c5 471d 	strd	r4, r7, [r5, #116]	; 0x74
    MBEDTLS_MPI_CHK( ecp_mul_comb_after_precomp( grp, R, m,
   d9b30:	9b39      	ldr	r3, [sp, #228]	; 0xe4
   d9b32:	9304      	str	r3, [sp, #16]
   d9b34:	9b38      	ldr	r3, [sp, #224]	; 0xe0
   d9b36:	9303      	str	r3, [sp, #12]
   d9b38:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d9b3a:	e9cd 6301 	strd	r6, r3, [sp, #4]
   d9b3e:	9b08      	ldr	r3, [sp, #32]
   d9b40:	9300      	str	r3, [sp, #0]
   d9b42:	ee18 2a90 	vmov	r2, s17
   d9b46:	ee18 1a10 	vmov	r1, s16
   d9b4a:	4623      	mov	r3, r4
   d9b4c:	4628      	mov	r0, r5
   d9b4e:	f7ff fbab 	bl	d92a8 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0>
   d9b52:	4681      	mov	r9, r0
cleanup:
   d9b54:	e760      	b.n	d9a18 <mbedtls_ecp_mul_restartable+0x118>
   d9b56:	a90d      	add	r1, sp, #52	; 0x34
   d9b58:	4628      	mov	r0, r5
   d9b5a:	f7fe ff8b 	bl	d8a74 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj.part.0>
   d9b5e:	e7df      	b.n	d9b20 <mbedtls_ecp_mul_restartable+0x220>
            ret = MBEDTLS_ERR_ECP_ALLOC_FAILED;
   d9b60:	f8df 9008 	ldr.w	r9, [pc, #8]	; d9b6c <mbedtls_ecp_mul_restartable+0x26c>
   d9b64:	e758      	b.n	d9a18 <mbedtls_ecp_mul_restartable+0x118>
    ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
   d9b66:	f8df 9008 	ldr.w	r9, [pc, #8]	; d9b70 <mbedtls_ecp_mul_restartable+0x270>
    return( ret );
   d9b6a:	e76e      	b.n	d9a4a <mbedtls_ecp_mul_restartable+0x14a>
   d9b6c:	ffffb280 	.word	0xffffb280
   d9b70:	ffffb080 	.word	0xffffb080

000d9b74 <mbedtls_ecp_mul>:
{
   d9b74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return( mbedtls_ecp_mul_restartable( grp, R, m, P, f_rng, p_rng, NULL ) );
   d9b76:	2400      	movs	r4, #0
   d9b78:	9402      	str	r4, [sp, #8]
   d9b7a:	9c07      	ldr	r4, [sp, #28]
   d9b7c:	9401      	str	r4, [sp, #4]
   d9b7e:	9c06      	ldr	r4, [sp, #24]
   d9b80:	9400      	str	r4, [sp, #0]
   d9b82:	f7ff febd 	bl	d9900 <mbedtls_ecp_mul_restartable>
}
   d9b86:	b004      	add	sp, #16
   d9b88:	bd10      	pop	{r4, pc}

000d9b8a <_ZL25mbedtls_ecp_mul_shortcutsP17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS1_Pv>:
{
   d9b8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9b8e:	b086      	sub	sp, #24
   d9b90:	4607      	mov	r7, r0
   d9b92:	460c      	mov	r4, r1
    if( mbedtls_mpi_cmp_int( m, 1 ) == 0 )
   d9b94:	4610      	mov	r0, r2
   d9b96:	2101      	movs	r1, #1
{
   d9b98:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d9b9c:	4615      	mov	r5, r2
   d9b9e:	461e      	mov	r6, r3
    if( mbedtls_mpi_cmp_int( m, 1 ) == 0 )
   d9ba0:	f007 fa2f 	bl	e1002 <mbedtls_mpi_cmp_int>
   d9ba4:	b930      	cbnz	r0, d9bb4 <_ZL25mbedtls_ecp_mul_shortcutsP17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS1_Pv+0x2a>
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, P ) );
   d9ba6:	4631      	mov	r1, r6
   d9ba8:	4620      	mov	r0, r4
}
   d9baa:	b006      	add	sp, #24
   d9bac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, P ) );
   d9bb0:	f7ff b959 	b.w	d8e66 <mbedtls_ecp_copy>
    else if( mbedtls_mpi_cmp_int( m, -1 ) == 0 )
   d9bb4:	f04f 31ff 	mov.w	r1, #4294967295
   d9bb8:	4628      	mov	r0, r5
   d9bba:	f007 fa22 	bl	e1002 <mbedtls_mpi_cmp_int>
   d9bbe:	b9a0      	cbnz	r0, d9bea <_ZL25mbedtls_ecp_mul_shortcutsP17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS1_Pv+0x60>
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, P ) );
   d9bc0:	4631      	mov	r1, r6
   d9bc2:	4620      	mov	r0, r4
   d9bc4:	f7ff f94f 	bl	d8e66 <mbedtls_ecp_copy>
   d9bc8:	b9d0      	cbnz	r0, d9c00 <_ZL25mbedtls_ecp_mul_shortcutsP17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS1_Pv+0x76>
        if( mbedtls_mpi_cmp_int( &R->Y, 0 ) != 0 )
   d9bca:	f104 020c 	add.w	r2, r4, #12
   d9bce:	4601      	mov	r1, r0
   d9bd0:	4610      	mov	r0, r2
   d9bd2:	9205      	str	r2, [sp, #20]
   d9bd4:	f007 fa15 	bl	e1002 <mbedtls_mpi_cmp_int>
   d9bd8:	9a05      	ldr	r2, [sp, #20]
   d9bda:	b188      	cbz	r0, d9c00 <_ZL25mbedtls_ecp_mul_shortcutsP17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS1_Pv+0x76>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &R->Y, &grp->P, &R->Y ) );
   d9bdc:	1d39      	adds	r1, r7, #4
   d9bde:	4610      	mov	r0, r2
}
   d9be0:	b006      	add	sp, #24
   d9be2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &R->Y, &grp->P, &R->Y ) );
   d9be6:	f007 bad9 	b.w	e119c <mbedtls_mpi_sub_mpi>
        MBEDTLS_MPI_CHK( mbedtls_ecp_mul_restartable( grp, R, m, P,
   d9bea:	2300      	movs	r3, #0
   d9bec:	e9cd 3300 	strd	r3, r3, [sp]
   d9bf0:	f8cd 8008 	str.w	r8, [sp, #8]
   d9bf4:	4633      	mov	r3, r6
   d9bf6:	462a      	mov	r2, r5
   d9bf8:	4621      	mov	r1, r4
   d9bfa:	4638      	mov	r0, r7
   d9bfc:	f7ff fe80 	bl	d9900 <mbedtls_ecp_mul_restartable>
}
   d9c00:	b006      	add	sp, #24
   d9c02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d9c08 <mbedtls_ecp_muladd_restartable>:
{
   d9c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9c0c:	b08c      	sub	sp, #48	; 0x30
   d9c0e:	4605      	mov	r5, r0
   d9c10:	460e      	mov	r6, r1
   d9c12:	4614      	mov	r4, r2
   d9c14:	461f      	mov	r7, r3
    if( ecp_get_type( grp ) != ECP_TYPE_SHORT_WEIERSTRASS )
   d9c16:	f7fe fc24 	bl	d8462 <_ZL12ecp_get_typePK17mbedtls_ecp_group>
   d9c1a:	2801      	cmp	r0, #1
{
   d9c1c:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
    if( ecp_get_type( grp ) != ECP_TYPE_SHORT_WEIERSTRASS )
   d9c20:	d12a      	bne.n	d9c78 <mbedtls_ecp_muladd_restartable+0x70>
    mbedtls_ecp_point_init( &mP );
   d9c22:	a803      	add	r0, sp, #12
   d9c24:	f7ff f89e 	bl	d8d64 <mbedtls_ecp_point_init>
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul_shortcuts( grp, pmP, m, P, rs_ctx ) );
   d9c28:	4622      	mov	r2, r4
   d9c2a:	f8cd 8000 	str.w	r8, [sp]
   d9c2e:	463b      	mov	r3, r7
   d9c30:	a903      	add	r1, sp, #12
   d9c32:	4628      	mov	r0, r5
   d9c34:	f7ff ffa9 	bl	d9b8a <_ZL25mbedtls_ecp_mul_shortcutsP17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS1_Pv>
   d9c38:	4604      	mov	r4, r0
   d9c3a:	b9b0      	cbnz	r0, d9c6a <mbedtls_ecp_muladd_restartable+0x62>
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul_shortcuts( grp, pR,  n, Q, rs_ctx ) );
   d9c3c:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   d9c40:	f8cd 8000 	str.w	r8, [sp]
   d9c44:	4631      	mov	r1, r6
   d9c46:	4628      	mov	r0, r5
   d9c48:	f7ff ff9f 	bl	d9b8a <_ZL25mbedtls_ecp_mul_shortcutsP17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS1_Pv>
   d9c4c:	4604      	mov	r4, r0
   d9c4e:	b960      	cbnz	r0, d9c6a <mbedtls_ecp_muladd_restartable+0x62>
    MBEDTLS_MPI_CHK( ecp_add_mixed( grp, pR, pmP, pR ) );
   d9c50:	4633      	mov	r3, r6
   d9c52:	aa03      	add	r2, sp, #12
   d9c54:	4631      	mov	r1, r6
   d9c56:	4628      	mov	r0, r5
   d9c58:	f7ff f932 	bl	d8ec0 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_>
   d9c5c:	4604      	mov	r4, r0
   d9c5e:	b920      	cbnz	r0, d9c6a <mbedtls_ecp_muladd_restartable+0x62>
    MBEDTLS_MPI_CHK( ecp_normalize_jac( grp, pR ) );
   d9c60:	4631      	mov	r1, r6
   d9c62:	4628      	mov	r0, r5
   d9c64:	f7fe fea8 	bl	d89b8 <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point>
   d9c68:	4604      	mov	r4, r0
    if( pt == NULL )
   d9c6a:	a803      	add	r0, sp, #12
   d9c6c:	f7ff f83c 	bl	d8ce8 <mbedtls_ecp_point_free.part.0>
}
   d9c70:	4620      	mov	r0, r4
   d9c72:	b00c      	add	sp, #48	; 0x30
   d9c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
   d9c78:	4c00      	ldr	r4, [pc, #0]	; (d9c7c <mbedtls_ecp_muladd_restartable+0x74>)
   d9c7a:	e7f9      	b.n	d9c70 <mbedtls_ecp_muladd_restartable+0x68>
   d9c7c:	ffffb180 	.word	0xffffb180

000d9c80 <mbedtls_ecp_gen_privkey>:
 */
int mbedtls_ecp_gen_privkey( const mbedtls_ecp_group *grp,
                     mbedtls_mpi *d,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
   d9c80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9c84:	4606      	mov	r6, r0

    ECP_VALIDATE_RET( grp   != NULL );
    ECP_VALIDATE_RET( d     != NULL );
    ECP_VALIDATE_RET( f_rng != NULL );

    n_size = ( grp->nbits + 7 ) / 8;
   d9c86:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
{
   d9c88:	460c      	mov	r4, r1
   d9c8a:	4690      	mov	r8, r2
   d9c8c:	4699      	mov	r9, r3
        }
    }
#endif /* ECP_MONTGOMERY */

#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
   d9c8e:	f7fe fbe8 	bl	d8462 <_ZL12ecp_get_typePK17mbedtls_ecp_group>
    n_size = ( grp->nbits + 7 ) / 8;
   d9c92:	3507      	adds	r5, #7
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
   d9c94:	2801      	cmp	r0, #1
    n_size = ( grp->nbits + 7 ) / 8;
   d9c96:	ea4f 0bd5 	mov.w	fp, r5, lsr #3
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
   d9c9a:	d004      	beq.n	d9ca6 <mbedtls_ecp_gen_privkey+0x26>
    int ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
   d9c9c:	4d16      	ldr	r5, [pc, #88]	; (d9cf8 <mbedtls_ecp_gen_privkey+0x78>)
    }
#endif /* ECP_SHORTWEIERSTRASS */

cleanup:
    return( ret );
}
   d9c9e:	4628      	mov	r0, r5
   d9ca0:	b003      	add	sp, #12
   d9ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( d, 8 * n_size - grp->nbits ) );
   d9ca6:	f025 0307 	bic.w	r3, r5, #7
   d9caa:	271f      	movs	r7, #31
   d9cac:	9301      	str	r3, [sp, #4]
               mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 );
   d9cae:	f106 0a4c 	add.w	sl, r6, #76	; 0x4c
            MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( d, n_size, f_rng, p_rng ) );
   d9cb2:	464b      	mov	r3, r9
   d9cb4:	4642      	mov	r2, r8
   d9cb6:	4659      	mov	r1, fp
   d9cb8:	4620      	mov	r0, r4
   d9cba:	f007 ffd5 	bl	e1c68 <mbedtls_mpi_fill_random>
   d9cbe:	4605      	mov	r5, r0
   d9cc0:	2800      	cmp	r0, #0
   d9cc2:	d1ec      	bne.n	d9c9e <mbedtls_ecp_gen_privkey+0x1e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( d, 8 * n_size - grp->nbits ) );
   d9cc4:	6df1      	ldr	r1, [r6, #92]	; 0x5c
   d9cc6:	9b01      	ldr	r3, [sp, #4]
   d9cc8:	4620      	mov	r0, r4
   d9cca:	1a59      	subs	r1, r3, r1
   d9ccc:	f007 f87e 	bl	e0dcc <mbedtls_mpi_shift_r>
   d9cd0:	4605      	mov	r5, r0
   d9cd2:	2800      	cmp	r0, #0
   d9cd4:	d1e3      	bne.n	d9c9e <mbedtls_ecp_gen_privkey+0x1e>
            if( ++count > 30 )
   d9cd6:	3f01      	subs	r7, #1
   d9cd8:	d00c      	beq.n	d9cf4 <mbedtls_ecp_gen_privkey+0x74>
        while( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
   d9cda:	2101      	movs	r1, #1
   d9cdc:	4620      	mov	r0, r4
   d9cde:	f007 f990 	bl	e1002 <mbedtls_mpi_cmp_int>
   d9ce2:	2800      	cmp	r0, #0
   d9ce4:	dbe5      	blt.n	d9cb2 <mbedtls_ecp_gen_privkey+0x32>
               mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 );
   d9ce6:	4651      	mov	r1, sl
   d9ce8:	4620      	mov	r0, r4
   d9cea:	f007 f949 	bl	e0f80 <mbedtls_mpi_cmp_mpi>
        while( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
   d9cee:	2800      	cmp	r0, #0
   d9cf0:	dadf      	bge.n	d9cb2 <mbedtls_ecp_gen_privkey+0x32>
   d9cf2:	e7d4      	b.n	d9c9e <mbedtls_ecp_gen_privkey+0x1e>
                return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
   d9cf4:	4d01      	ldr	r5, [pc, #4]	; (d9cfc <mbedtls_ecp_gen_privkey+0x7c>)
   d9cf6:	e7d2      	b.n	d9c9e <mbedtls_ecp_gen_privkey+0x1e>
   d9cf8:	ffffb080 	.word	0xffffb080
   d9cfc:	ffffb300 	.word	0xffffb300

000d9d00 <mbedtls_ecp_check_pub_priv>:

/*
 * Check a public-private key pair
 */
int mbedtls_ecp_check_pub_priv( const mbedtls_ecp_keypair *pub, const mbedtls_ecp_keypair *prv )
{
   d9d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    mbedtls_ecp_point Q;
    mbedtls_ecp_group grp;
    ECP_VALIDATE_RET( pub != NULL );
    ECP_VALIDATE_RET( prv != NULL );

    if( pub->grp.id == MBEDTLS_ECP_DP_NONE ||
   d9d04:	7803      	ldrb	r3, [r0, #0]
{
   d9d06:	b0aa      	sub	sp, #168	; 0xa8
   d9d08:	4605      	mov	r5, r0
   d9d0a:	460c      	mov	r4, r1
        pub->grp.id != prv->grp.id ||
        mbedtls_mpi_cmp_mpi( &pub->Q.X, &prv->Q.X ) ||
        mbedtls_mpi_cmp_mpi( &pub->Q.Y, &prv->Q.Y ) ||
   d9d0c:	b923      	cbnz	r3, d9d18 <mbedtls_ecp_check_pub_priv+0x18>
        mbedtls_mpi_cmp_mpi( &pub->Q.Z, &prv->Q.Z ) )
    {
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   d9d0e:	4c28      	ldr	r4, [pc, #160]	; (d9db0 <mbedtls_ecp_check_pub_priv+0xb0>)
cleanup:
    mbedtls_ecp_point_free( &Q );
    mbedtls_ecp_group_free( &grp );

    return( ret );
}
   d9d10:	4620      	mov	r0, r4
   d9d12:	b02a      	add	sp, #168	; 0xa8
   d9d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( pub->grp.id == MBEDTLS_ECP_DP_NONE ||
   d9d18:	780a      	ldrb	r2, [r1, #0]
   d9d1a:	429a      	cmp	r2, r3
   d9d1c:	d1f7      	bne.n	d9d0e <mbedtls_ecp_check_pub_priv+0xe>
        mbedtls_mpi_cmp_mpi( &pub->Q.X, &prv->Q.X ) ||
   d9d1e:	f101 0888 	add.w	r8, r1, #136	; 0x88
   d9d22:	4641      	mov	r1, r8
   d9d24:	3088      	adds	r0, #136	; 0x88
   d9d26:	f007 f92b 	bl	e0f80 <mbedtls_mpi_cmp_mpi>
        pub->grp.id != prv->grp.id ||
   d9d2a:	2800      	cmp	r0, #0
   d9d2c:	d1ef      	bne.n	d9d0e <mbedtls_ecp_check_pub_priv+0xe>
        mbedtls_mpi_cmp_mpi( &pub->Q.Y, &prv->Q.Y ) ||
   d9d2e:	f104 0794 	add.w	r7, r4, #148	; 0x94
   d9d32:	4639      	mov	r1, r7
   d9d34:	f105 0094 	add.w	r0, r5, #148	; 0x94
   d9d38:	f007 f922 	bl	e0f80 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_mpi( &pub->Q.X, &prv->Q.X ) ||
   d9d3c:	2800      	cmp	r0, #0
   d9d3e:	d1e6      	bne.n	d9d0e <mbedtls_ecp_check_pub_priv+0xe>
        mbedtls_mpi_cmp_mpi( &pub->Q.Z, &prv->Q.Z ) )
   d9d40:	f104 06a0 	add.w	r6, r4, #160	; 0xa0
   d9d44:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
   d9d48:	4631      	mov	r1, r6
   d9d4a:	f007 f919 	bl	e0f80 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_mpi( &pub->Q.Y, &prv->Q.Y ) ||
   d9d4e:	4605      	mov	r5, r0
   d9d50:	2800      	cmp	r0, #0
   d9d52:	d1dc      	bne.n	d9d0e <mbedtls_ecp_check_pub_priv+0xe>
    mbedtls_ecp_point_init( &Q );
   d9d54:	a802      	add	r0, sp, #8
   d9d56:	f7ff f805 	bl	d8d64 <mbedtls_ecp_point_init>
    mbedtls_ecp_group_init( &grp );
   d9d5a:	a80b      	add	r0, sp, #44	; 0x2c
   d9d5c:	f7ff f810 	bl	d8d80 <mbedtls_ecp_group_init>
    mbedtls_ecp_group_copy( &grp, &prv->grp );
   d9d60:	4621      	mov	r1, r4
   d9d62:	a80b      	add	r0, sp, #44	; 0x2c
   d9d64:	f7ff f895 	bl	d8e92 <mbedtls_ecp_group_copy>
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul( &grp, &Q, &prv->d, &prv->grp.G, NULL, NULL ) );
   d9d68:	f104 0328 	add.w	r3, r4, #40	; 0x28
   d9d6c:	f104 027c 	add.w	r2, r4, #124	; 0x7c
   d9d70:	e9cd 5500 	strd	r5, r5, [sp]
   d9d74:	a902      	add	r1, sp, #8
   d9d76:	a80b      	add	r0, sp, #44	; 0x2c
   d9d78:	f7ff fefc 	bl	d9b74 <mbedtls_ecp_mul>
   d9d7c:	4604      	mov	r4, r0
   d9d7e:	b980      	cbnz	r0, d9da2 <mbedtls_ecp_check_pub_priv+0xa2>
    if( mbedtls_mpi_cmp_mpi( &Q.X, &prv->Q.X ) ||
   d9d80:	4641      	mov	r1, r8
   d9d82:	a802      	add	r0, sp, #8
   d9d84:	f007 f8fc 	bl	e0f80 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_mpi( &Q.Y, &prv->Q.Y ) ||
   d9d88:	b950      	cbnz	r0, d9da0 <mbedtls_ecp_check_pub_priv+0xa0>
   d9d8a:	4639      	mov	r1, r7
   d9d8c:	a805      	add	r0, sp, #20
   d9d8e:	f007 f8f7 	bl	e0f80 <mbedtls_mpi_cmp_mpi>
    if( mbedtls_mpi_cmp_mpi( &Q.X, &prv->Q.X ) ||
   d9d92:	b928      	cbnz	r0, d9da0 <mbedtls_ecp_check_pub_priv+0xa0>
        mbedtls_mpi_cmp_mpi( &Q.Z, &prv->Q.Z ) )
   d9d94:	4631      	mov	r1, r6
   d9d96:	a808      	add	r0, sp, #32
   d9d98:	f007 f8f2 	bl	e0f80 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_mpi( &Q.Y, &prv->Q.Y ) ||
   d9d9c:	4604      	mov	r4, r0
   d9d9e:	b100      	cbz	r0, d9da2 <mbedtls_ecp_check_pub_priv+0xa2>
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
   d9da0:	4c03      	ldr	r4, [pc, #12]	; (d9db0 <mbedtls_ecp_check_pub_priv+0xb0>)
    if( pt == NULL )
   d9da2:	a802      	add	r0, sp, #8
   d9da4:	f7fe ffa0 	bl	d8ce8 <mbedtls_ecp_point_free.part.0>
    mbedtls_ecp_group_free( &grp );
   d9da8:	a80b      	add	r0, sp, #44	; 0x2c
   d9daa:	f7ff f81c 	bl	d8de6 <mbedtls_ecp_group_free>
    return( ret );
   d9dae:	e7af      	b.n	d9d10 <mbedtls_ecp_check_pub_priv+0x10>
   d9db0:	ffffb080 	.word	0xffffb080

000d9db4 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf.part.0>:
        { NULL, 0, NULL, NULL },
        MBEDTLS_MD_NONE, MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_sig_alg_t, sig_alg, oid_sig_alg)
   d9db4:	b538      	push	{r3, r4, r5, lr}
   d9db6:	4c08      	ldr	r4, [pc, #32]	; (d9dd8 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf.part.0+0x24>)
   d9db8:	4605      	mov	r5, r0
   d9dba:	6820      	ldr	r0, [r4, #0]
   d9dbc:	b150      	cbz	r0, d9dd4 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf.part.0+0x20>
   d9dbe:	686b      	ldr	r3, [r5, #4]
   d9dc0:	6862      	ldr	r2, [r4, #4]
   d9dc2:	429a      	cmp	r2, r3
   d9dc4:	d103      	bne.n	d9dce <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf.part.0+0x1a>
   d9dc6:	68a9      	ldr	r1, [r5, #8]
   d9dc8:	f00e fd72 	bl	e88b0 <memcmp>
   d9dcc:	b108      	cbz	r0, d9dd2 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf.part.0+0x1e>
   d9dce:	3414      	adds	r4, #20
   d9dd0:	e7f3      	b.n	d9dba <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf.part.0+0x6>
   d9dd2:	4620      	mov	r0, r4
   d9dd4:	bd38      	pop	{r3, r4, r5, pc}
   d9dd6:	bf00      	nop
   d9dd8:	000ebe60 	.word	0x000ebe60

000d9ddc <mbedtls_oid_get_attr_short_name>:
FN_OID_GET_ATTR1(mbedtls_oid_get_attr_short_name, oid_x520_attr_t, x520_attr, const char *, short_name)
   d9ddc:	b570      	push	{r4, r5, r6, lr}
   d9dde:	460e      	mov	r6, r1
FN_OID_TYPED_FROM_ASN1(oid_x520_attr_t, x520_attr, oid_x520_attr_type)
   d9de0:	4605      	mov	r5, r0
   d9de2:	b160      	cbz	r0, d9dfe <mbedtls_oid_get_attr_short_name+0x22>
   d9de4:	4c09      	ldr	r4, [pc, #36]	; (d9e0c <mbedtls_oid_get_attr_short_name+0x30>)
   d9de6:	6820      	ldr	r0, [r4, #0]
   d9de8:	b148      	cbz	r0, d9dfe <mbedtls_oid_get_attr_short_name+0x22>
   d9dea:	686b      	ldr	r3, [r5, #4]
   d9dec:	6862      	ldr	r2, [r4, #4]
   d9dee:	429a      	cmp	r2, r3
   d9df0:	d103      	bne.n	d9dfa <mbedtls_oid_get_attr_short_name+0x1e>
   d9df2:	68a9      	ldr	r1, [r5, #8]
   d9df4:	f00e fd5c 	bl	e88b0 <memcmp>
   d9df8:	b120      	cbz	r0, d9e04 <mbedtls_oid_get_attr_short_name+0x28>
   d9dfa:	3414      	adds	r4, #20
   d9dfc:	e7f3      	b.n	d9de6 <mbedtls_oid_get_attr_short_name+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_attr_short_name, oid_x520_attr_t, x520_attr, const char *, short_name)
   d9dfe:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   d9e02:	bd70      	pop	{r4, r5, r6, pc}
   d9e04:	6923      	ldr	r3, [r4, #16]
   d9e06:	6033      	str	r3, [r6, #0]
   d9e08:	e7fb      	b.n	d9e02 <mbedtls_oid_get_attr_short_name+0x26>
   d9e0a:	bf00      	nop
   d9e0c:	000ec0c4 	.word	0x000ec0c4

000d9e10 <mbedtls_oid_get_x509_ext_type>:
FN_OID_GET_ATTR1(mbedtls_oid_get_x509_ext_type, oid_x509_ext_t, x509_ext, int, ext_type)
   d9e10:	b570      	push	{r4, r5, r6, lr}
   d9e12:	460e      	mov	r6, r1
FN_OID_TYPED_FROM_ASN1(oid_x509_ext_t, x509_ext, oid_x509_ext)
   d9e14:	4605      	mov	r5, r0
   d9e16:	b160      	cbz	r0, d9e32 <mbedtls_oid_get_x509_ext_type+0x22>
   d9e18:	4c09      	ldr	r4, [pc, #36]	; (d9e40 <mbedtls_oid_get_x509_ext_type+0x30>)
   d9e1a:	6820      	ldr	r0, [r4, #0]
   d9e1c:	b148      	cbz	r0, d9e32 <mbedtls_oid_get_x509_ext_type+0x22>
   d9e1e:	686b      	ldr	r3, [r5, #4]
   d9e20:	6862      	ldr	r2, [r4, #4]
   d9e22:	429a      	cmp	r2, r3
   d9e24:	d103      	bne.n	d9e2e <mbedtls_oid_get_x509_ext_type+0x1e>
   d9e26:	68a9      	ldr	r1, [r5, #8]
   d9e28:	f00e fd42 	bl	e88b0 <memcmp>
   d9e2c:	b120      	cbz	r0, d9e38 <mbedtls_oid_get_x509_ext_type+0x28>
   d9e2e:	3414      	adds	r4, #20
   d9e30:	e7f3      	b.n	d9e1a <mbedtls_oid_get_x509_ext_type+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_x509_ext_type, oid_x509_ext_t, x509_ext, int, ext_type)
   d9e32:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   d9e36:	bd70      	pop	{r4, r5, r6, pc}
   d9e38:	6923      	ldr	r3, [r4, #16]
   d9e3a:	6033      	str	r3, [r6, #0]
   d9e3c:	e7fb      	b.n	d9e36 <mbedtls_oid_get_x509_ext_type+0x26>
   d9e3e:	bf00      	nop
   d9e40:	000ebf64 	.word	0x000ebf64

000d9e44 <mbedtls_oid_get_extended_key_usage>:
FN_OID_GET_ATTR1(mbedtls_oid_get_extended_key_usage, mbedtls_oid_descriptor_t, ext_key_usage, const char *, description)
   d9e44:	b570      	push	{r4, r5, r6, lr}
   d9e46:	460e      	mov	r6, r1
FN_OID_TYPED_FROM_ASN1(mbedtls_oid_descriptor_t, ext_key_usage, oid_ext_key_usage)
   d9e48:	4605      	mov	r5, r0
   d9e4a:	b160      	cbz	r0, d9e66 <mbedtls_oid_get_extended_key_usage+0x22>
   d9e4c:	4c09      	ldr	r4, [pc, #36]	; (d9e74 <mbedtls_oid_get_extended_key_usage+0x30>)
   d9e4e:	6820      	ldr	r0, [r4, #0]
   d9e50:	b148      	cbz	r0, d9e66 <mbedtls_oid_get_extended_key_usage+0x22>
   d9e52:	686b      	ldr	r3, [r5, #4]
   d9e54:	6862      	ldr	r2, [r4, #4]
   d9e56:	429a      	cmp	r2, r3
   d9e58:	d103      	bne.n	d9e62 <mbedtls_oid_get_extended_key_usage+0x1e>
   d9e5a:	68a9      	ldr	r1, [r5, #8]
   d9e5c:	f00e fd28 	bl	e88b0 <memcmp>
   d9e60:	b120      	cbz	r0, d9e6c <mbedtls_oid_get_extended_key_usage+0x28>
   d9e62:	3410      	adds	r4, #16
   d9e64:	e7f3      	b.n	d9e4e <mbedtls_oid_get_extended_key_usage+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_extended_key_usage, mbedtls_oid_descriptor_t, ext_key_usage, const char *, description)
   d9e66:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   d9e6a:	bd70      	pop	{r4, r5, r6, pc}
   d9e6c:	68e3      	ldr	r3, [r4, #12]
   d9e6e:	6033      	str	r3, [r6, #0]
   d9e70:	e7fb      	b.n	d9e6a <mbedtls_oid_get_extended_key_usage+0x26>
   d9e72:	bf00      	nop
   d9e74:	000ec018 	.word	0x000ec018

000d9e78 <mbedtls_oid_get_sig_alg_desc>:
FN_OID_GET_DESCRIPTOR_ATTR1(mbedtls_oid_get_sig_alg_desc, oid_sig_alg_t, sig_alg, const char *, description)
   d9e78:	b510      	push	{r4, lr}
   d9e7a:	460c      	mov	r4, r1
FN_OID_TYPED_FROM_ASN1(oid_sig_alg_t, sig_alg, oid_sig_alg)
   d9e7c:	b130      	cbz	r0, d9e8c <mbedtls_oid_get_sig_alg_desc+0x14>
   d9e7e:	f7ff ff99 	bl	d9db4 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf.part.0>
FN_OID_GET_DESCRIPTOR_ATTR1(mbedtls_oid_get_sig_alg_desc, oid_sig_alg_t, sig_alg, const char *, description)
   d9e82:	b118      	cbz	r0, d9e8c <mbedtls_oid_get_sig_alg_desc+0x14>
   d9e84:	68c3      	ldr	r3, [r0, #12]
   d9e86:	6023      	str	r3, [r4, #0]
   d9e88:	2000      	movs	r0, #0
   d9e8a:	bd10      	pop	{r4, pc}
   d9e8c:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   d9e90:	e7fb      	b.n	d9e8a <mbedtls_oid_get_sig_alg_desc+0x12>

000d9e92 <mbedtls_oid_get_sig_alg>:
FN_OID_GET_ATTR2(mbedtls_oid_get_sig_alg, oid_sig_alg_t, sig_alg, mbedtls_md_type_t, md_alg, mbedtls_pk_type_t, pk_alg)
   d9e92:	b538      	push	{r3, r4, r5, lr}
   d9e94:	460d      	mov	r5, r1
   d9e96:	4614      	mov	r4, r2
FN_OID_TYPED_FROM_ASN1(oid_sig_alg_t, sig_alg, oid_sig_alg)
   d9e98:	b140      	cbz	r0, d9eac <mbedtls_oid_get_sig_alg+0x1a>
   d9e9a:	f7ff ff8b 	bl	d9db4 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf.part.0>
FN_OID_GET_ATTR2(mbedtls_oid_get_sig_alg, oid_sig_alg_t, sig_alg, mbedtls_md_type_t, md_alg, mbedtls_pk_type_t, pk_alg)
   d9e9e:	b128      	cbz	r0, d9eac <mbedtls_oid_get_sig_alg+0x1a>
   d9ea0:	7c03      	ldrb	r3, [r0, #16]
   d9ea2:	702b      	strb	r3, [r5, #0]
   d9ea4:	7c43      	ldrb	r3, [r0, #17]
   d9ea6:	7023      	strb	r3, [r4, #0]
   d9ea8:	2000      	movs	r0, #0
   d9eaa:	bd38      	pop	{r3, r4, r5, pc}
   d9eac:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   d9eb0:	e7fb      	b.n	d9eaa <mbedtls_oid_get_sig_alg+0x18>
	...

000d9eb4 <mbedtls_oid_get_pk_alg>:
        MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
   d9eb4:	b570      	push	{r4, r5, r6, lr}
   d9eb6:	460e      	mov	r6, r1
FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
   d9eb8:	4605      	mov	r5, r0
   d9eba:	b160      	cbz	r0, d9ed6 <mbedtls_oid_get_pk_alg+0x22>
   d9ebc:	4c09      	ldr	r4, [pc, #36]	; (d9ee4 <mbedtls_oid_get_pk_alg+0x30>)
   d9ebe:	6820      	ldr	r0, [r4, #0]
   d9ec0:	b148      	cbz	r0, d9ed6 <mbedtls_oid_get_pk_alg+0x22>
   d9ec2:	686b      	ldr	r3, [r5, #4]
   d9ec4:	6862      	ldr	r2, [r4, #4]
   d9ec6:	429a      	cmp	r2, r3
   d9ec8:	d103      	bne.n	d9ed2 <mbedtls_oid_get_pk_alg+0x1e>
   d9eca:	68a9      	ldr	r1, [r5, #8]
   d9ecc:	f00e fcf0 	bl	e88b0 <memcmp>
   d9ed0:	b120      	cbz	r0, d9edc <mbedtls_oid_get_pk_alg+0x28>
   d9ed2:	3414      	adds	r4, #20
   d9ed4:	e7f3      	b.n	d9ebe <mbedtls_oid_get_pk_alg+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
   d9ed6:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   d9eda:	bd70      	pop	{r4, r5, r6, pc}
   d9edc:	7c23      	ldrb	r3, [r4, #16]
   d9ede:	7033      	strb	r3, [r6, #0]
   d9ee0:	e7fb      	b.n	d9eda <mbedtls_oid_get_pk_alg+0x26>
   d9ee2:	bf00      	nop
   d9ee4:	000ebd70 	.word	0x000ebd70

000d9ee8 <mbedtls_oid_get_ec_grp>:
        MBEDTLS_ECP_DP_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_ecp_grp_t, grp_id, oid_ecp_grp)
FN_OID_GET_ATTR1(mbedtls_oid_get_ec_grp, oid_ecp_grp_t, grp_id, mbedtls_ecp_group_id, grp_id)
   d9ee8:	b570      	push	{r4, r5, r6, lr}
   d9eea:	460e      	mov	r6, r1
FN_OID_TYPED_FROM_ASN1(oid_ecp_grp_t, grp_id, oid_ecp_grp)
   d9eec:	4605      	mov	r5, r0
   d9eee:	b160      	cbz	r0, d9f0a <mbedtls_oid_get_ec_grp+0x22>
   d9ef0:	4c09      	ldr	r4, [pc, #36]	; (d9f18 <mbedtls_oid_get_ec_grp+0x30>)
   d9ef2:	6820      	ldr	r0, [r4, #0]
   d9ef4:	b148      	cbz	r0, d9f0a <mbedtls_oid_get_ec_grp+0x22>
   d9ef6:	686b      	ldr	r3, [r5, #4]
   d9ef8:	6862      	ldr	r2, [r4, #4]
   d9efa:	429a      	cmp	r2, r3
   d9efc:	d103      	bne.n	d9f06 <mbedtls_oid_get_ec_grp+0x1e>
   d9efe:	68a9      	ldr	r1, [r5, #8]
   d9f00:	f00e fcd6 	bl	e88b0 <memcmp>
   d9f04:	b120      	cbz	r0, d9f10 <mbedtls_oid_get_ec_grp+0x28>
   d9f06:	3414      	adds	r4, #20
   d9f08:	e7f3      	b.n	d9ef2 <mbedtls_oid_get_ec_grp+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_ec_grp, oid_ecp_grp_t, grp_id, mbedtls_ecp_group_id, grp_id)
   d9f0a:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   d9f0e:	bd70      	pop	{r4, r5, r6, pc}
   d9f10:	7c23      	ldrb	r3, [r4, #16]
   d9f12:	7033      	strb	r3, [r6, #0]
   d9f14:	e7fb      	b.n	d9f0e <mbedtls_oid_get_ec_grp+0x26>
   d9f16:	bf00      	nop
   d9f18:	000ebdc0 	.word	0x000ebdc0

000d9f1c <mbedtls_oid_get_cipher_alg>:
        MBEDTLS_CIPHER_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_cipher_alg_t, cipher_alg, oid_cipher_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_cipher_alg, oid_cipher_alg_t, cipher_alg, mbedtls_cipher_type_t, cipher_alg)
   d9f1c:	b570      	push	{r4, r5, r6, lr}
   d9f1e:	460e      	mov	r6, r1
FN_OID_TYPED_FROM_ASN1(oid_cipher_alg_t, cipher_alg, oid_cipher_alg)
   d9f20:	4605      	mov	r5, r0
   d9f22:	b160      	cbz	r0, d9f3e <mbedtls_oid_get_cipher_alg+0x22>
   d9f24:	4c09      	ldr	r4, [pc, #36]	; (d9f4c <mbedtls_oid_get_cipher_alg+0x30>)
   d9f26:	6820      	ldr	r0, [r4, #0]
   d9f28:	b148      	cbz	r0, d9f3e <mbedtls_oid_get_cipher_alg+0x22>
   d9f2a:	686b      	ldr	r3, [r5, #4]
   d9f2c:	6862      	ldr	r2, [r4, #4]
   d9f2e:	429a      	cmp	r2, r3
   d9f30:	d103      	bne.n	d9f3a <mbedtls_oid_get_cipher_alg+0x1e>
   d9f32:	68a9      	ldr	r1, [r5, #8]
   d9f34:	f00e fcbc 	bl	e88b0 <memcmp>
   d9f38:	b120      	cbz	r0, d9f44 <mbedtls_oid_get_cipher_alg+0x28>
   d9f3a:	3414      	adds	r4, #20
   d9f3c:	e7f3      	b.n	d9f26 <mbedtls_oid_get_cipher_alg+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_cipher_alg, oid_cipher_alg_t, cipher_alg, mbedtls_cipher_type_t, cipher_alg)
   d9f3e:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   d9f42:	bd70      	pop	{r4, r5, r6, pc}
   d9f44:	7c23      	ldrb	r3, [r4, #16]
   d9f46:	7033      	strb	r3, [r6, #0]
   d9f48:	e7fb      	b.n	d9f42 <mbedtls_oid_get_cipher_alg+0x26>
   d9f4a:	bf00      	nop
   d9f4c:	000ebfdc 	.word	0x000ebfdc

000d9f50 <mbedtls_oid_get_md_alg>:
        MBEDTLS_MD_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_md_alg_t, md_alg, oid_md_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_md_alg, oid_md_alg_t, md_alg, mbedtls_md_type_t, md_alg)
   d9f50:	b570      	push	{r4, r5, r6, lr}
   d9f52:	460e      	mov	r6, r1
FN_OID_TYPED_FROM_ASN1(oid_md_alg_t, md_alg, oid_md_alg)
   d9f54:	4605      	mov	r5, r0
   d9f56:	b160      	cbz	r0, d9f72 <mbedtls_oid_get_md_alg+0x22>
   d9f58:	4c09      	ldr	r4, [pc, #36]	; (d9f80 <mbedtls_oid_get_md_alg+0x30>)
   d9f5a:	6820      	ldr	r0, [r4, #0]
   d9f5c:	b148      	cbz	r0, d9f72 <mbedtls_oid_get_md_alg+0x22>
   d9f5e:	686b      	ldr	r3, [r5, #4]
   d9f60:	6862      	ldr	r2, [r4, #4]
   d9f62:	429a      	cmp	r2, r3
   d9f64:	d103      	bne.n	d9f6e <mbedtls_oid_get_md_alg+0x1e>
   d9f66:	68a9      	ldr	r1, [r5, #8]
   d9f68:	f00e fca2 	bl	e88b0 <memcmp>
   d9f6c:	b120      	cbz	r0, d9f78 <mbedtls_oid_get_md_alg+0x28>
   d9f6e:	3414      	adds	r4, #20
   d9f70:	e7f3      	b.n	d9f5a <mbedtls_oid_get_md_alg+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_md_alg, oid_md_alg_t, md_alg, mbedtls_md_type_t, md_alg)
   d9f72:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   d9f76:	bd70      	pop	{r4, r5, r6, pc}
   d9f78:	7c23      	ldrb	r3, [r4, #16]
   d9f7a:	7033      	strb	r3, [r6, #0]
   d9f7c:	e7fb      	b.n	d9f76 <mbedtls_oid_get_md_alg+0x26>
   d9f7e:	bf00      	nop
   d9f80:	000ebcf8 	.word	0x000ebcf8

000d9f84 <mbedtls_oid_get_oid_by_md>:
FN_OID_GET_OID_BY_ATTR1(mbedtls_oid_get_oid_by_md, oid_md_alg_t, oid_md_alg, mbedtls_md_type_t, md_alg)
   d9f84:	b530      	push	{r4, r5, lr}
   d9f86:	4b08      	ldr	r3, [pc, #32]	; (d9fa8 <mbedtls_oid_get_oid_by_md+0x24>)
   d9f88:	681c      	ldr	r4, [r3, #0]
   d9f8a:	b14c      	cbz	r4, d9fa0 <mbedtls_oid_get_oid_by_md+0x1c>
   d9f8c:	7c1d      	ldrb	r5, [r3, #16]
   d9f8e:	4285      	cmp	r5, r0
   d9f90:	d104      	bne.n	d9f9c <mbedtls_oid_get_oid_by_md+0x18>
   d9f92:	600c      	str	r4, [r1, #0]
   d9f94:	685b      	ldr	r3, [r3, #4]
   d9f96:	6013      	str	r3, [r2, #0]
   d9f98:	2000      	movs	r0, #0
   d9f9a:	bd30      	pop	{r4, r5, pc}
   d9f9c:	3314      	adds	r3, #20
   d9f9e:	e7f3      	b.n	d9f88 <mbedtls_oid_get_oid_by_md+0x4>
   d9fa0:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   d9fa4:	e7f9      	b.n	d9f9a <mbedtls_oid_get_oid_by_md+0x16>
   d9fa6:	bf00      	nop
   d9fa8:	000ebcf8 	.word	0x000ebcf8

000d9fac <mbedtls_oid_get_md_hmac>:
        MBEDTLS_MD_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_md_hmac_t, md_hmac, oid_md_hmac)
FN_OID_GET_ATTR1(mbedtls_oid_get_md_hmac, oid_md_hmac_t, md_hmac, mbedtls_md_type_t, md_hmac)
   d9fac:	b570      	push	{r4, r5, r6, lr}
   d9fae:	460e      	mov	r6, r1
FN_OID_TYPED_FROM_ASN1(oid_md_hmac_t, md_hmac, oid_md_hmac)
   d9fb0:	4605      	mov	r5, r0
   d9fb2:	b160      	cbz	r0, d9fce <mbedtls_oid_get_md_hmac+0x22>
   d9fb4:	4c09      	ldr	r4, [pc, #36]	; (d9fdc <mbedtls_oid_get_md_hmac+0x30>)
   d9fb6:	6820      	ldr	r0, [r4, #0]
   d9fb8:	b148      	cbz	r0, d9fce <mbedtls_oid_get_md_hmac+0x22>
   d9fba:	686b      	ldr	r3, [r5, #4]
   d9fbc:	6862      	ldr	r2, [r4, #4]
   d9fbe:	429a      	cmp	r2, r3
   d9fc0:	d103      	bne.n	d9fca <mbedtls_oid_get_md_hmac+0x1e>
   d9fc2:	68a9      	ldr	r1, [r5, #8]
   d9fc4:	f00e fc74 	bl	e88b0 <memcmp>
   d9fc8:	b120      	cbz	r0, d9fd4 <mbedtls_oid_get_md_hmac+0x28>
   d9fca:	3414      	adds	r4, #20
   d9fcc:	e7f3      	b.n	d9fb6 <mbedtls_oid_get_md_hmac+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_md_hmac, oid_md_hmac_t, md_hmac, mbedtls_md_type_t, md_hmac)
   d9fce:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   d9fd2:	bd70      	pop	{r4, r5, r6, pc}
   d9fd4:	7c23      	ldrb	r3, [r4, #16]
   d9fd6:	7033      	strb	r3, [r6, #0]
   d9fd8:	e7fb      	b.n	d9fd2 <mbedtls_oid_get_md_hmac+0x26>
   d9fda:	bf00      	nop
   d9fdc:	000ebde8 	.word	0x000ebde8

000d9fe0 <mbedtls_oid_get_pkcs12_pbe_alg>:
        MBEDTLS_MD_NONE, MBEDTLS_CIPHER_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, oid_pkcs12_pbe_alg)
FN_OID_GET_ATTR2(mbedtls_oid_get_pkcs12_pbe_alg, oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, mbedtls_md_type_t, md_alg, mbedtls_cipher_type_t, cipher_alg)
   d9fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9fe2:	460f      	mov	r7, r1
   d9fe4:	4616      	mov	r6, r2
FN_OID_TYPED_FROM_ASN1(oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, oid_pkcs12_pbe_alg)
   d9fe6:	4605      	mov	r5, r0
   d9fe8:	b160      	cbz	r0, da004 <mbedtls_oid_get_pkcs12_pbe_alg+0x24>
   d9fea:	4c0a      	ldr	r4, [pc, #40]	; (da014 <mbedtls_oid_get_pkcs12_pbe_alg+0x34>)
   d9fec:	6820      	ldr	r0, [r4, #0]
   d9fee:	b148      	cbz	r0, da004 <mbedtls_oid_get_pkcs12_pbe_alg+0x24>
   d9ff0:	686b      	ldr	r3, [r5, #4]
   d9ff2:	6862      	ldr	r2, [r4, #4]
   d9ff4:	429a      	cmp	r2, r3
   d9ff6:	d103      	bne.n	da000 <mbedtls_oid_get_pkcs12_pbe_alg+0x20>
   d9ff8:	68a9      	ldr	r1, [r5, #8]
   d9ffa:	f00e fc59 	bl	e88b0 <memcmp>
   d9ffe:	b120      	cbz	r0, da00a <mbedtls_oid_get_pkcs12_pbe_alg+0x2a>
   da000:	3414      	adds	r4, #20
   da002:	e7f3      	b.n	d9fec <mbedtls_oid_get_pkcs12_pbe_alg+0xc>
FN_OID_GET_ATTR2(mbedtls_oid_get_pkcs12_pbe_alg, oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, mbedtls_md_type_t, md_alg, mbedtls_cipher_type_t, cipher_alg)
   da004:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   da008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   da00a:	7c23      	ldrb	r3, [r4, #16]
   da00c:	703b      	strb	r3, [r7, #0]
   da00e:	7c63      	ldrb	r3, [r4, #17]
   da010:	7033      	strb	r3, [r6, #0]
   da012:	e7f9      	b.n	da008 <mbedtls_oid_get_pkcs12_pbe_alg+0x28>
   da014:	000ec088 	.word	0x000ec088

000da018 <mbedtls_sha1_init>:

void mbedtls_sha1_init( mbedtls_sha1_context *ctx )
{
    SHA1_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_sha1_context ) );
   da018:	225c      	movs	r2, #92	; 0x5c
   da01a:	2100      	movs	r1, #0
   da01c:	f00e bc7e 	b.w	e891c <memset>

000da020 <mbedtls_sha1_free>:
}

void mbedtls_sha1_free( mbedtls_sha1_context *ctx )
{
    if( ctx == NULL )
   da020:	b110      	cbz	r0, da028 <mbedtls_sha1_free+0x8>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_sha1_context ) );
   da022:	215c      	movs	r1, #92	; 0x5c
   da024:	f000 bfda 	b.w	dafdc <mbedtls_platform_zeroize>
}
   da028:	4770      	bx	lr

000da02a <mbedtls_sha1_clone>:

void mbedtls_sha1_clone( mbedtls_sha1_context *dst,
                         const mbedtls_sha1_context *src )
{
   da02a:	b508      	push	{r3, lr}
    SHA1_VALIDATE( dst != NULL );
    SHA1_VALIDATE( src != NULL );

    *dst = *src;
   da02c:	225c      	movs	r2, #92	; 0x5c
   da02e:	f00e fc4d 	bl	e88cc <memcpy>
}
   da032:	bd08      	pop	{r3, pc}

000da034 <mbedtls_sha1_starts_ret>:
    SHA1_VALIDATE_RET( ctx != NULL );

    ctx->total[0] = 0;
    ctx->total[1] = 0;

    ctx->state[0] = 0x67452301;
   da034:	4a0a      	ldr	r2, [pc, #40]	; (da060 <mbedtls_sha1_starts_ret+0x2c>)
   da036:	6082      	str	r2, [r0, #8]
    ctx->state[1] = 0xEFCDAB89;
   da038:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
   da03c:	60c2      	str	r2, [r0, #12]
    ctx->state[2] = 0x98BADCFE;
   da03e:	f102 4229 	add.w	r2, r2, #2835349504	; 0xa9000000
   da042:	f5a2 1296 	sub.w	r2, r2, #1228800	; 0x12c000
   da046:	f6a2 628b 	subw	r2, r2, #3723	; 0xe8b
   da04a:	6102      	str	r2, [r0, #16]
    ctx->state[3] = 0x10325476;
   da04c:	f1a2 3288 	sub.w	r2, r2, #2290649224	; 0x88888888
    ctx->total[0] = 0;
   da050:	2300      	movs	r3, #0
    ctx->state[3] = 0x10325476;
   da052:	6142      	str	r2, [r0, #20]
    ctx->state[4] = 0xC3D2E1F0;
   da054:	4a03      	ldr	r2, [pc, #12]	; (da064 <mbedtls_sha1_starts_ret+0x30>)
   da056:	6182      	str	r2, [r0, #24]
    ctx->total[1] = 0;
   da058:	e9c0 3300 	strd	r3, r3, [r0]

    return( 0 );
}
   da05c:	4618      	mov	r0, r3
   da05e:	4770      	bx	lr
   da060:	67452301 	.word	0x67452301
   da064:	c3d2e1f0 	.word	0xc3d2e1f0

000da068 <mbedtls_internal_sha1_process>:
#endif

#if !defined(MBEDTLS_SHA1_PROCESS_ALT)
int mbedtls_internal_sha1_process( mbedtls_sha1_context *ctx,
                                   const unsigned char data[64] )
{
   da068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da06c:	680d      	ldr	r5, [r1, #0]
   da06e:	684a      	ldr	r2, [r1, #4]
   da070:	698f      	ldr	r7, [r1, #24]
   da072:	6acc      	ldr	r4, [r1, #44]	; 0x2c
   da074:	f8d1 e034 	ldr.w	lr, [r1, #52]	; 0x34
   da078:	f8d1 a008 	ldr.w	sl, [r1, #8]
   da07c:	68ce      	ldr	r6, [r1, #12]
   da07e:	f8d1 8010 	ldr.w	r8, [r1, #16]
   da082:	b099      	sub	sp, #100	; 0x64
   da084:	ba2b      	rev	r3, r5
   da086:	9306      	str	r3, [sp, #24]
   da088:	ba13      	rev	r3, r2
   da08a:	9307      	str	r3, [sp, #28]
   da08c:	694b      	ldr	r3, [r1, #20]
   da08e:	9000      	str	r0, [sp, #0]
    SHA1_VALIDATE_RET( ctx != NULL );
    SHA1_VALIDATE_RET( (const unsigned char *)data != NULL );

    GET_UINT32_BE( W[ 0], data,  0 );
    GET_UINT32_BE( W[ 1], data,  4 );
    GET_UINT32_BE( W[ 2], data,  8 );
   da090:	ba1b      	rev	r3, r3
   da092:	9309      	str	r3, [sp, #36]	; 0x24
   da094:	ba3b      	rev	r3, r7
   da096:	9310      	str	r3, [sp, #64]	; 0x40
   da098:	69cb      	ldr	r3, [r1, #28]
   da09a:	6a48      	ldr	r0, [r1, #36]	; 0x24
   da09c:	6a0a      	ldr	r2, [r1, #32]
   da09e:	ba1b      	rev	r3, r3
   da0a0:	9311      	str	r3, [sp, #68]	; 0x44
   da0a2:	ba03      	rev	r3, r0
   da0a4:	930a      	str	r3, [sp, #40]	; 0x28
   da0a6:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   da0a8:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
   da0aa:	ba1b      	rev	r3, r3
   da0ac:	930b      	str	r3, [sp, #44]	; 0x2c
   da0ae:	ba23      	rev	r3, r4
   da0b0:	930c      	str	r3, [sp, #48]	; 0x30
   da0b2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   da0b4:	ba1b      	rev	r3, r3
   da0b6:	930d      	str	r3, [sp, #52]	; 0x34
   da0b8:	fa9e f38e 	rev.w	r3, lr
   da0bc:	f8d1 e038 	ldr.w	lr, [r1, #56]	; 0x38
   da0c0:	9302      	str	r3, [sp, #8]
   da0c2:	fa9e f38e 	rev.w	r3, lr
   da0c6:	9303      	str	r3, [sp, #12]
   da0c8:	ba03      	rev	r3, r0
   da0ca:	9304      	str	r3, [sp, #16]
    {                                                           \
        (e) += S((a),5) + F((b),(c),(d)) + K + (x);             \
        (b) = S((b),30);                                        \
    } while( 0 )

    A = ctx->state[0];
   da0cc:	9b00      	ldr	r3, [sp, #0]
   da0ce:	689b      	ldr	r3, [r3, #8]
   da0d0:	930e      	str	r3, [sp, #56]	; 0x38
    B = ctx->state[1];
   da0d2:	9b00      	ldr	r3, [sp, #0]
    E = ctx->state[4];

#define F(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
#define K 0x5A827999

    P( A, B, C, D, E, W[0]  );
   da0d4:	990e      	ldr	r1, [sp, #56]	; 0x38
    B = ctx->state[1];
   da0d6:	68db      	ldr	r3, [r3, #12]
   da0d8:	9301      	str	r3, [sp, #4]
    C = ctx->state[2];
   da0da:	9b00      	ldr	r3, [sp, #0]
    P( E, A, B, C, D, W[1]  );
    P( D, E, A, B, C, W[2]  );
   da0dc:	9801      	ldr	r0, [sp, #4]
    C = ctx->state[2];
   da0de:	691b      	ldr	r3, [r3, #16]
   da0e0:	9305      	str	r3, [sp, #20]
    D = ctx->state[3];
   da0e2:	9b00      	ldr	r3, [sp, #0]
    P( C, D, E, A, B, W[3]  );
   da0e4:	9f01      	ldr	r7, [sp, #4]
    D = ctx->state[3];
   da0e6:	695b      	ldr	r3, [r3, #20]
   da0e8:	930f      	str	r3, [sp, #60]	; 0x3c
    E = ctx->state[4];
   da0ea:	9b00      	ldr	r3, [sp, #0]
    P( B, C, D, E, A, W[4]  );
    P( A, B, C, D, E, W[5]  );
   da0ec:	9d09      	ldr	r5, [sp, #36]	; 0x24
    E = ctx->state[4];
   da0ee:	699b      	ldr	r3, [r3, #24]
   da0f0:	9312      	str	r3, [sp, #72]	; 0x48
   da0f2:	fa92 f982 	rev.w	r9, r2
    P( A, B, C, D, E, W[0]  );
   da0f6:	9b05      	ldr	r3, [sp, #20]
   da0f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   da0fa:	ea83 0c02 	eor.w	ip, r3, r2
   da0fe:	9b01      	ldr	r3, [sp, #4]
   da100:	ea0c 0c03 	and.w	ip, ip, r3
   da104:	ea8c 0c02 	eor.w	ip, ip, r2
   da108:	4bde      	ldr	r3, [pc, #888]	; (da484 <mbedtls_internal_sha1_process+0x41c>)
   da10a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   da10c:	441a      	add	r2, r3
   da10e:	eb02 62f1 	add.w	r2, r2, r1, ror #27
   da112:	4494      	add	ip, r2
   da114:	9a06      	ldr	r2, [sp, #24]
    P( E, A, B, C, D, W[1]  );
   da116:	9901      	ldr	r1, [sp, #4]
    P( A, B, C, D, E, W[0]  );
   da118:	4494      	add	ip, r2
    P( E, A, B, C, D, W[1]  );
   da11a:	9a05      	ldr	r2, [sp, #20]
   da11c:	ea82 02b1 	eor.w	r2, r2, r1, ror #2
   da120:	990e      	ldr	r1, [sp, #56]	; 0x38
   da122:	400a      	ands	r2, r1
   da124:	9905      	ldr	r1, [sp, #20]
   da126:	404a      	eors	r2, r1
   da128:	990f      	ldr	r1, [sp, #60]	; 0x3c
   da12a:	4419      	add	r1, r3
   da12c:	440a      	add	r2, r1
   da12e:	9907      	ldr	r1, [sp, #28]
   da130:	440a      	add	r2, r1
   da132:	990e      	ldr	r1, [sp, #56]	; 0x38
   da134:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( D, E, A, B, C, W[2]  );
   da138:	ea81 04b0 	eor.w	r4, r1, r0, ror #2
   da13c:	ea04 040c 	and.w	r4, r4, ip
   da140:	ea84 04b0 	eor.w	r4, r4, r0, ror #2
   da144:	9805      	ldr	r0, [sp, #20]
   da146:	fa9a fa8a 	rev.w	sl, sl
   da14a:	4418      	add	r0, r3
   da14c:	4450      	add	r0, sl
    P( E, A, B, C, D, W[1]  );
   da14e:	eb02 62fc 	add.w	r2, r2, ip, ror #27
    P( D, E, A, B, C, W[2]  );
   da152:	4404      	add	r4, r0
    P( C, D, E, A, B, W[3]  );
   da154:	ea81 00bc 	eor.w	r0, r1, ip, ror #2
   da158:	ba36      	rev	r6, r6
   da15a:	4010      	ands	r0, r2
   da15c:	eb03 07b7 	add.w	r7, r3, r7, ror #2
    P( D, E, A, B, C, W[2]  );
   da160:	eb04 64f2 	add.w	r4, r4, r2, ror #27
    P( C, D, E, A, B, W[3]  );
   da164:	4437      	add	r7, r6
   da166:	ea4f 02b2 	mov.w	r2, r2, ror #2
   da16a:	4048      	eors	r0, r1
   da16c:	4438      	add	r0, r7
    P( B, C, D, E, A, W[4]  );
   da16e:	ea82 07bc 	eor.w	r7, r2, ip, ror #2
   da172:	fa98 f888 	rev.w	r8, r8
   da176:	4027      	ands	r7, r4
   da178:	4419      	add	r1, r3
   da17a:	4441      	add	r1, r8
   da17c:	ea87 07bc 	eor.w	r7, r7, ip, ror #2
    P( C, D, E, A, B, W[3]  );
   da180:	eb00 60f4 	add.w	r0, r0, r4, ror #27
    P( B, C, D, E, A, W[4]  );
   da184:	440f      	add	r7, r1
    P( A, B, C, D, E, W[5]  );
   da186:	ea82 01b4 	eor.w	r1, r2, r4, ror #2
   da18a:	eb05 0e03 	add.w	lr, r5, r3
   da18e:	4001      	ands	r1, r0
    P( B, C, D, E, A, W[4]  );
   da190:	eb07 67f0 	add.w	r7, r7, r0, ror #27
    P( E, A, B, C, D, W[6]  );
   da194:	9d10      	ldr	r5, [sp, #64]	; 0x40
    P( A, B, C, D, E, W[5]  );
   da196:	ea4f 00b0 	mov.w	r0, r0, ror #2
   da19a:	eb0e 0cbc 	add.w	ip, lr, ip, ror #2
   da19e:	4051      	eors	r1, r2
   da1a0:	4461      	add	r1, ip
    P( E, A, B, C, D, W[6]  );
   da1a2:	ea80 0cb4 	eor.w	ip, r0, r4, ror #2
   da1a6:	eb05 0e03 	add.w	lr, r5, r3
   da1aa:	ea0c 0c07 	and.w	ip, ip, r7
   da1ae:	4472      	add	r2, lr
   da1b0:	ea8c 0cb4 	eor.w	ip, ip, r4, ror #2
   da1b4:	4494      	add	ip, r2
    P( D, E, A, B, C, W[7]  );
   da1b6:	9a11      	ldr	r2, [sp, #68]	; 0x44
    P( A, B, C, D, E, W[5]  );
   da1b8:	eb01 61f7 	add.w	r1, r1, r7, ror #27
    P( D, E, A, B, C, W[7]  );
   da1bc:	ea80 0eb7 	eor.w	lr, r0, r7, ror #2
    P( E, A, B, C, D, W[6]  );
   da1c0:	eb0c 6cf1 	add.w	ip, ip, r1, ror #27
    P( D, E, A, B, C, W[7]  );
   da1c4:	441a      	add	r2, r3
   da1c6:	ea0e 0e01 	and.w	lr, lr, r1
   da1ca:	ea4f 01b1 	mov.w	r1, r1, ror #2
   da1ce:	eb02 04b4 	add.w	r4, r2, r4, ror #2
   da1d2:	ea8e 0e00 	eor.w	lr, lr, r0
    P( C, D, E, A, B, W[8]  );
   da1d6:	ea81 02b7 	eor.w	r2, r1, r7, ror #2
    P( D, E, A, B, C, W[7]  );
   da1da:	44a6      	add	lr, r4
    P( C, D, E, A, B, W[8]  );
   da1dc:	ea02 020c 	and.w	r2, r2, ip
   da1e0:	eb09 0403 	add.w	r4, r9, r3
   da1e4:	4420      	add	r0, r4
   da1e6:	ea82 02b7 	eor.w	r2, r2, r7, ror #2
    P( B, C, D, E, A, W[9]  );
   da1ea:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    P( D, E, A, B, C, W[7]  );
   da1ec:	eb0e 6efc 	add.w	lr, lr, ip, ror #27
    P( C, D, E, A, B, W[8]  );
   da1f0:	4402      	add	r2, r0
    P( B, C, D, E, A, W[9]  );
   da1f2:	ea81 00bc 	eor.w	r0, r1, ip, ror #2
   da1f6:	441c      	add	r4, r3
   da1f8:	ea00 000e 	and.w	r0, r0, lr
    P( C, D, E, A, B, W[8]  );
   da1fc:	eb02 62fe 	add.w	r2, r2, lr, ror #27
    P( B, C, D, E, A, W[9]  );
   da200:	eb04 07b7 	add.w	r7, r4, r7, ror #2
   da204:	ea4f 0ebe 	mov.w	lr, lr, ror #2
    P( A, B, C, D, E, W[10] );
   da208:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    P( B, C, D, E, A, W[9]  );
   da20a:	4048      	eors	r0, r1
   da20c:	4438      	add	r0, r7
    P( A, B, C, D, E, W[10] );
   da20e:	ea8e 07bc 	eor.w	r7, lr, ip, ror #2
   da212:	441c      	add	r4, r3
   da214:	4017      	ands	r7, r2
   da216:	4421      	add	r1, r4
   da218:	ea87 07bc 	eor.w	r7, r7, ip, ror #2
    P( E, A, B, C, D, W[11] );
   da21c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    P( B, C, D, E, A, W[9]  );
   da21e:	eb00 60f2 	add.w	r0, r0, r2, ror #27
    P( A, B, C, D, E, W[10] );
   da222:	440f      	add	r7, r1
    P( E, A, B, C, D, W[11] );
   da224:	ea8e 01b2 	eor.w	r1, lr, r2, ror #2
   da228:	441c      	add	r4, r3
   da22a:	4001      	ands	r1, r0
   da22c:	ea81 010e 	eor.w	r1, r1, lr
   da230:	eb04 0cbc 	add.w	ip, r4, ip, ror #2
    P( A, B, C, D, E, W[10] );
   da234:	eb07 67f0 	add.w	r7, r7, r0, ror #27
    P( E, A, B, C, D, W[11] );
   da238:	448c      	add	ip, r1
   da23a:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( D, E, A, B, C, W[12] );
   da23e:	990d      	ldr	r1, [sp, #52]	; 0x34
   da240:	ea80 04b2 	eor.w	r4, r0, r2, ror #2
   da244:	4419      	add	r1, r3
   da246:	403c      	ands	r4, r7
   da248:	448e      	add	lr, r1
   da24a:	ea84 04b2 	eor.w	r4, r4, r2, ror #2
    P( C, D, E, A, B, W[13] );
   da24e:	9902      	ldr	r1, [sp, #8]
    P( E, A, B, C, D, W[11] );
   da250:	eb0c 6cf7 	add.w	ip, ip, r7, ror #27
    P( D, E, A, B, C, W[12] );
   da254:	4474      	add	r4, lr
    P( C, D, E, A, B, W[13] );
   da256:	ea80 0eb7 	eor.w	lr, r0, r7, ror #2
   da25a:	4419      	add	r1, r3
   da25c:	ea0e 0e0c 	and.w	lr, lr, ip
   da260:	eb01 02b2 	add.w	r2, r1, r2, ror #2
   da264:	ea8e 0e00 	eor.w	lr, lr, r0
   da268:	4496      	add	lr, r2
    P( B, C, D, E, A, W[14] );
   da26a:	9a03      	ldr	r2, [sp, #12]
   da26c:	441a      	add	r2, r3
    P( D, E, A, B, C, W[12] );
   da26e:	eb04 64fc 	add.w	r4, r4, ip, ror #27
    P( B, C, D, E, A, W[14] );
   da272:	4410      	add	r0, r2
    P( C, D, E, A, B, W[13] );
   da274:	ea4f 0cbc 	mov.w	ip, ip, ror #2
    P( A, B, C, D, E, W[15] );
   da278:	9a04      	ldr	r2, [sp, #16]
    P( B, C, D, E, A, W[14] );
   da27a:	ea8c 0bb7 	eor.w	fp, ip, r7, ror #2
    P( A, B, C, D, E, W[15] );
   da27e:	441a      	add	r2, r3
    P( B, C, D, E, A, W[14] );
   da280:	ea0b 0b04 	and.w	fp, fp, r4
   da284:	ea8b 0bb7 	eor.w	fp, fp, r7, ror #2
    P( A, B, C, D, E, W[15] );
   da288:	eb02 07b7 	add.w	r7, r2, r7, ror #2
    P( E, A, B, C, D, R(16) );
   da28c:	9a06      	ldr	r2, [sp, #24]
   da28e:	ea82 050a 	eor.w	r5, r2, sl
   da292:	9a02      	ldr	r2, [sp, #8]
   da294:	ea85 0509 	eor.w	r5, r5, r9
    P( C, D, E, A, B, W[13] );
   da298:	eb0e 6ef4 	add.w	lr, lr, r4, ror #27
    P( A, B, C, D, E, W[15] );
   da29c:	ea8c 01b4 	eor.w	r1, ip, r4, ror #2
    P( E, A, B, C, D, R(16) );
   da2a0:	406a      	eors	r2, r5
   da2a2:	9206      	str	r2, [sp, #24]
    P( A, B, C, D, E, W[15] );
   da2a4:	ea01 010e 	and.w	r1, r1, lr
    P( E, A, B, C, D, R(16) );
   da2a8:	eb03 72f2 	add.w	r2, r3, r2, ror #31
    P( A, B, C, D, E, W[15] );
   da2ac:	ea81 010c 	eor.w	r1, r1, ip
    P( E, A, B, C, D, R(16) );
   da2b0:	4494      	add	ip, r2
    P( D, E, A, B, C, R(17) );
   da2b2:	9a07      	ldr	r2, [sp, #28]
    P( B, C, D, E, A, W[14] );
   da2b4:	4483      	add	fp, r0
    P( D, E, A, B, C, R(17) );
   da2b6:	980a      	ldr	r0, [sp, #40]	; 0x28
   da2b8:	4072      	eors	r2, r6
   da2ba:	4042      	eors	r2, r0
   da2bc:	9803      	ldr	r0, [sp, #12]
    P( B, C, D, E, A, W[14] );
   da2be:	eb0b 6bfe 	add.w	fp, fp, lr, ror #27
    P( A, B, C, D, E, W[15] );
   da2c2:	ea4f 0ebe 	mov.w	lr, lr, ror #2
    P( D, E, A, B, C, R(17) );
   da2c6:	4042      	eors	r2, r0
    P( A, B, C, D, E, W[15] );
   da2c8:	4439      	add	r1, r7
    P( E, A, B, C, D, R(16) );
   da2ca:	ea8e 07b4 	eor.w	r7, lr, r4, ror #2
    P( D, E, A, B, C, R(17) );
   da2ce:	9207      	str	r2, [sp, #28]
    P( E, A, B, C, D, R(16) );
   da2d0:	ea07 070b 	and.w	r7, r7, fp
    P( D, E, A, B, C, R(17) );
   da2d4:	eb03 72f2 	add.w	r2, r3, r2, ror #31
    P( E, A, B, C, D, R(16) );
   da2d8:	ea87 07b4 	eor.w	r7, r7, r4, ror #2
    P( D, E, A, B, C, R(17) );
   da2dc:	eb02 04b4 	add.w	r4, r2, r4, ror #2
    P( C, D, E, A, B, R(18) );
   da2e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   da2e2:	ea8a 0a08 	eor.w	sl, sl, r8
   da2e6:	ea8a 0a02 	eor.w	sl, sl, r2
   da2ea:	9a04      	ldr	r2, [sp, #16]
    P( A, B, C, D, E, W[15] );
   da2ec:	eb01 61fb 	add.w	r1, r1, fp, ror #27
    P( C, D, E, A, B, R(18) );
   da2f0:	ea8a 0a02 	eor.w	sl, sl, r2
    P( E, A, B, C, D, R(16) );
   da2f4:	4467      	add	r7, ip
    P( D, E, A, B, C, R(17) );
   da2f6:	ea8e 0cbb 	eor.w	ip, lr, fp, ror #2
    P( C, D, E, A, B, R(18) );
   da2fa:	eb03 70fa 	add.w	r0, r3, sl, ror #31
    P( D, E, A, B, C, R(17) );
   da2fe:	ea0c 0c01 	and.w	ip, ip, r1
   da302:	ea8c 0c0e 	eor.w	ip, ip, lr
    P( C, D, E, A, B, R(18) );
   da306:	4486      	add	lr, r0
    P( B, C, D, E, A, R(19) );
   da308:	9809      	ldr	r0, [sp, #36]	; 0x24
    P( D, E, A, B, C, R(17) );
   da30a:	44a4      	add	ip, r4
    P( B, C, D, E, A, R(19) );
   da30c:	ea86 0400 	eor.w	r4, r6, r0
   da310:	980c      	ldr	r0, [sp, #48]	; 0x30
   da312:	4044      	eors	r4, r0
   da314:	9806      	ldr	r0, [sp, #24]
   da316:	ea84 74f0 	eor.w	r4, r4, r0, ror #31
    P( E, A, B, C, D, R(16) );
   da31a:	eb07 67f1 	add.w	r7, r7, r1, ror #27
    P( B, C, D, E, A, R(19) );
   da31e:	ea4f 70f4 	mov.w	r0, r4, ror #31
    P( D, E, A, B, C, R(17) );
   da322:	ea4f 01b1 	mov.w	r1, r1, ror #2
   da326:	eb0c 6cf7 	add.w	ip, ip, r7, ror #27
    P( B, C, D, E, A, R(19) );
   da32a:	9014      	str	r0, [sp, #80]	; 0x50
   da32c:	ea81 00b7 	eor.w	r0, r1, r7, ror #2
   da330:	ea00 000c 	and.w	r0, r0, ip
   da334:	eb03 73f4 	add.w	r3, r3, r4, ror #31
   da338:	eb03 03bb 	add.w	r3, r3, fp, ror #2
   da33c:	4048      	eors	r0, r1
   da33e:	4418      	add	r0, r3
#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
   da340:	9b10      	ldr	r3, [sp, #64]	; 0x40
   da342:	ea88 0803 	eor.w	r8, r8, r3
   da346:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    P( C, D, E, A, B, R(18) );
   da348:	ea4f 72fa 	mov.w	r2, sl, ror #31
    P( A, B, C, D, E, R(20) );
   da34c:	ea88 0803 	eor.w	r8, r8, r3
   da350:	9b07      	ldr	r3, [sp, #28]
    P( C, D, E, A, B, R(18) );
   da352:	9213      	str	r2, [sp, #76]	; 0x4c
   da354:	ea81 02bb 	eor.w	r2, r1, fp, ror #2
    P( A, B, C, D, E, R(20) );
   da358:	ea88 73f3 	eor.w	r3, r8, r3, ror #31
    P( C, D, E, A, B, R(18) );
   da35c:	403a      	ands	r2, r7
    P( A, B, C, D, E, R(20) );
   da35e:	9308      	str	r3, [sp, #32]
    P( C, D, E, A, B, R(18) );
   da360:	ea82 02bb 	eor.w	r2, r2, fp, ror #2
    P( A, B, C, D, E, R(20) );
   da364:	4b48      	ldr	r3, [pc, #288]	; (da488 <mbedtls_internal_sha1_process+0x420>)
   da366:	9e08      	ldr	r6, [sp, #32]
    P( C, D, E, A, B, R(18) );
   da368:	4472      	add	r2, lr
   da36a:	eb02 62fc 	add.w	r2, r2, ip, ror #27
    P( B, C, D, E, A, R(19) );
   da36e:	ea4f 0cbc 	mov.w	ip, ip, ror #2
    P( A, B, C, D, E, R(20) );
   da372:	ea8c 05b7 	eor.w	r5, ip, r7, ror #2
   da376:	eb03 76f6 	add.w	r6, r3, r6, ror #31
   da37a:	4431      	add	r1, r6
   da37c:	4055      	eors	r5, r2
    P( E, A, B, C, D, R(21) );
   da37e:	9e11      	ldr	r6, [sp, #68]	; 0x44
    P( A, B, C, D, E, R(20) );
   da380:	440d      	add	r5, r1
    P( E, A, B, C, D, R(21) );
   da382:	9909      	ldr	r1, [sp, #36]	; 0x24
   da384:	4071      	eors	r1, r6
   da386:	9e02      	ldr	r6, [sp, #8]
   da388:	4071      	eors	r1, r6
   da38a:	ea81 71fa 	eor.w	r1, r1, sl, ror #31
    P( B, C, D, E, A, R(19) );
   da38e:	eb00 60f2 	add.w	r0, r0, r2, ror #27
    P( E, A, B, C, D, R(21) );
   da392:	eb03 7ef1 	add.w	lr, r3, r1, ror #31
   da396:	ea8c 06b2 	eor.w	r6, ip, r2, ror #2
   da39a:	eb0e 07b7 	add.w	r7, lr, r7, ror #2
   da39e:	4046      	eors	r6, r0
   da3a0:	443e      	add	r6, r7
    P( D, E, A, B, C, R(22) );
   da3a2:	9f10      	ldr	r7, [sp, #64]	; 0x40
    P( E, A, B, C, D, R(21) );
   da3a4:	9109      	str	r1, [sp, #36]	; 0x24
    P( D, E, A, B, C, R(22) );
   da3a6:	9903      	ldr	r1, [sp, #12]
   da3a8:	ea87 0709 	eor.w	r7, r7, r9
   da3ac:	404f      	eors	r7, r1
   da3ae:	ea87 77f4 	eor.w	r7, r7, r4, ror #31
    P( A, B, C, D, E, R(20) );
   da3b2:	eb05 65f0 	add.w	r5, r5, r0, ror #27
    P( D, E, A, B, C, R(22) );
   da3b6:	ea4f 71f7 	mov.w	r1, r7, ror #31
    P( E, A, B, C, D, R(21) );
   da3ba:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( D, E, A, B, C, R(22) );
   da3be:	eb03 7ef7 	add.w	lr, r3, r7, ror #31
   da3c2:	ea80 0bb2 	eor.w	fp, r0, r2, ror #2
   da3c6:	9110      	str	r1, [sp, #64]	; 0x40
    P( C, D, E, A, B, R(23) );
   da3c8:	9911      	ldr	r1, [sp, #68]	; 0x44
    P( D, E, A, B, C, R(22) );
   da3ca:	44f4      	add	ip, lr
   da3cc:	ea8b 0b05 	eor.w	fp, fp, r5
   da3d0:	44e3      	add	fp, ip
    P( C, D, E, A, B, R(23) );
   da3d2:	468c      	mov	ip, r1
   da3d4:	990a      	ldr	r1, [sp, #40]	; 0x28
   da3d6:	ea8c 0801 	eor.w	r8, ip, r1
   da3da:	9904      	ldr	r1, [sp, #16]
   da3dc:	ea88 0801 	eor.w	r8, r8, r1
   da3e0:	9908      	ldr	r1, [sp, #32]
   da3e2:	ea88 78f1 	eor.w	r8, r8, r1, ror #31
    P( E, A, B, C, D, R(21) );
   da3e6:	eb06 66f5 	add.w	r6, r6, r5, ror #27
    P( C, D, E, A, B, R(23) );
   da3ea:	eb03 7cf8 	add.w	ip, r3, r8, ror #31
   da3ee:	ea80 0eb5 	eor.w	lr, r0, r5, ror #2
   da3f2:	eb0c 02b2 	add.w	r2, ip, r2, ror #2
   da3f6:	ea8e 0e06 	eor.w	lr, lr, r6
   da3fa:	ea4f 71f8 	mov.w	r1, r8, ror #31
   da3fe:	4496      	add	lr, r2
    P( B, C, D, E, A, R(24) );
   da400:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    P( C, D, E, A, B, R(23) );
   da402:	9111      	str	r1, [sp, #68]	; 0x44
    P( B, C, D, E, A, R(24) );
   da404:	9906      	ldr	r1, [sp, #24]
   da406:	ea89 0202 	eor.w	r2, r9, r2
   da40a:	ea82 72f1 	eor.w	r2, r2, r1, ror #31
   da40e:	9909      	ldr	r1, [sp, #36]	; 0x24
    P( D, E, A, B, C, R(22) );
   da410:	eb0b 6bf6 	add.w	fp, fp, r6, ror #27
    P( B, C, D, E, A, R(24) );
   da414:	ea82 72f1 	eor.w	r2, r2, r1, ror #31
    P( C, D, E, A, B, R(23) );
   da418:	ea4f 06b6 	mov.w	r6, r6, ror #2
    P( B, C, D, E, A, R(24) );
   da41c:	eb03 79f2 	add.w	r9, r3, r2, ror #31
   da420:	ea86 0cb5 	eor.w	ip, r6, r5, ror #2
   da424:	4448      	add	r0, r9
   da426:	ea8c 0c0b 	eor.w	ip, ip, fp
    P( A, B, C, D, E, R(25) );
   da42a:	990a      	ldr	r1, [sp, #40]	; 0x28
    P( B, C, D, E, A, R(24) );
   da42c:	4484      	add	ip, r0
    P( A, B, C, D, E, R(25) );
   da42e:	980c      	ldr	r0, [sp, #48]	; 0x30
   da430:	4048      	eors	r0, r1
   da432:	9907      	ldr	r1, [sp, #28]
   da434:	ea80 70f1 	eor.w	r0, r0, r1, ror #31
   da438:	ea80 71f7 	eor.w	r1, r0, r7, ror #31
    P( C, D, E, A, B, R(23) );
   da43c:	eb0e 6efb 	add.w	lr, lr, fp, ror #27
    P( A, B, C, D, E, R(25) );
   da440:	eb03 79f1 	add.w	r9, r3, r1, ror #31
   da444:	ea86 00bb 	eor.w	r0, r6, fp, ror #2
   da448:	eb09 05b5 	add.w	r5, r9, r5, ror #2
   da44c:	ea80 000e 	eor.w	r0, r0, lr
   da450:	910a      	str	r1, [sp, #40]	; 0x28
   da452:	4428      	add	r0, r5
    P( E, A, B, C, D, R(26) );
   da454:	990b      	ldr	r1, [sp, #44]	; 0x2c
   da456:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   da458:	404d      	eors	r5, r1
   da45a:	ea85 7afa 	eor.w	sl, r5, sl, ror #31
    P( B, C, D, E, A, R(24) );
   da45e:	eb0c 6cfe 	add.w	ip, ip, lr, ror #27
    P( E, A, B, C, D, R(26) );
   da462:	ea8a 7af8 	eor.w	sl, sl, r8, ror #31
    P( A, B, C, D, E, R(25) );
   da466:	ea4f 0ebe 	mov.w	lr, lr, ror #2
    P( E, A, B, C, D, R(26) );
   da46a:	eb03 79fa 	add.w	r9, r3, sl, ror #31
   da46e:	ea8e 05bb 	eor.w	r5, lr, fp, ror #2
   da472:	ea4f 71fa 	mov.w	r1, sl, ror #31
   da476:	444e      	add	r6, r9
   da478:	ea85 050c 	eor.w	r5, r5, ip
   da47c:	9115      	str	r1, [sp, #84]	; 0x54
   da47e:	4435      	add	r5, r6
    P( D, E, A, B, C, R(27) );
   da480:	990c      	ldr	r1, [sp, #48]	; 0x30
   da482:	e003      	b.n	da48c <mbedtls_internal_sha1_process+0x424>
   da484:	5a827999 	.word	0x5a827999
   da488:	6ed9eba1 	.word	0x6ed9eba1
   da48c:	9e02      	ldr	r6, [sp, #8]
   da48e:	ea81 0906 	eor.w	r9, r1, r6
   da492:	ea89 74f4 	eor.w	r4, r9, r4, ror #31
   da496:	ea84 74f2 	eor.w	r4, r4, r2, ror #31
    P( A, B, C, D, E, R(25) );
   da49a:	eb00 60fc 	add.w	r0, r0, ip, ror #27
    P( D, E, A, B, C, R(27) );
   da49e:	eb03 79f4 	add.w	r9, r3, r4, ror #31
   da4a2:	ea8e 06bc 	eor.w	r6, lr, ip, ror #2
   da4a6:	ea4f 71f4 	mov.w	r1, r4, ror #31
   da4aa:	4046      	eors	r6, r0
   da4ac:	eb09 0bbb 	add.w	fp, r9, fp, ror #2
   da4b0:	9116      	str	r1, [sp, #88]	; 0x58
   da4b2:	44b3      	add	fp, r6
    P( C, D, E, A, B, R(28) );
   da4b4:	990d      	ldr	r1, [sp, #52]	; 0x34
   da4b6:	9e03      	ldr	r6, [sp, #12]
   da4b8:	404e      	eors	r6, r1
   da4ba:	9908      	ldr	r1, [sp, #32]
   da4bc:	ea86 76f1 	eor.w	r6, r6, r1, ror #31
   da4c0:	990a      	ldr	r1, [sp, #40]	; 0x28
    P( E, A, B, C, D, R(26) );
   da4c2:	eb05 65f0 	add.w	r5, r5, r0, ror #27
    P( C, D, E, A, B, R(28) );
   da4c6:	ea86 71f1 	eor.w	r1, r6, r1, ror #31
    P( D, E, A, B, C, R(27) );
   da4ca:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( C, D, E, A, B, R(28) );
   da4ce:	eb03 79f1 	add.w	r9, r3, r1, ror #31
   da4d2:	910b      	str	r1, [sp, #44]	; 0x2c
   da4d4:	ea80 06bc 	eor.w	r6, r0, ip, ror #2
    P( B, C, D, E, A, R(29) );
   da4d8:	9902      	ldr	r1, [sp, #8]
    P( C, D, E, A, B, R(28) );
   da4da:	44ce      	add	lr, r9
   da4dc:	406e      	eors	r6, r5
   da4de:	4476      	add	r6, lr
    P( B, C, D, E, A, R(29) );
   da4e0:	468e      	mov	lr, r1
   da4e2:	9904      	ldr	r1, [sp, #16]
   da4e4:	ea8e 0e01 	eor.w	lr, lr, r1
   da4e8:	9909      	ldr	r1, [sp, #36]	; 0x24
   da4ea:	ea8e 7ef1 	eor.w	lr, lr, r1, ror #31
   da4ee:	ea8e 71fa 	eor.w	r1, lr, sl, ror #31
    P( D, E, A, B, C, R(27) );
   da4f2:	eb0b 6bf5 	add.w	fp, fp, r5, ror #27
    P( B, C, D, E, A, R(29) );
   da4f6:	eb03 7ef1 	add.w	lr, r3, r1, ror #31
   da4fa:	9102      	str	r1, [sp, #8]
   da4fc:	ea80 09b5 	eor.w	r9, r0, r5, ror #2
    P( A, B, C, D, E, R(30) );
   da500:	9903      	ldr	r1, [sp, #12]
    P( B, C, D, E, A, R(29) );
   da502:	eb0e 0cbc 	add.w	ip, lr, ip, ror #2
   da506:	ea89 090b 	eor.w	r9, r9, fp
   da50a:	44e1      	add	r9, ip
    P( A, B, C, D, E, R(30) );
   da50c:	468c      	mov	ip, r1
   da50e:	9906      	ldr	r1, [sp, #24]
   da510:	ea8c 7ef1 	eor.w	lr, ip, r1, ror #31
   da514:	ea8e 77f7 	eor.w	r7, lr, r7, ror #31
    P( C, D, E, A, B, R(28) );
   da518:	eb06 66fb 	add.w	r6, r6, fp, ror #27
    P( A, B, C, D, E, R(30) );
   da51c:	ea87 77f4 	eor.w	r7, r7, r4, ror #31
    P( B, C, D, E, A, R(29) );
   da520:	ea4f 0bbb 	mov.w	fp, fp, ror #2
    P( A, B, C, D, E, R(30) );
   da524:	eb03 7ef7 	add.w	lr, r3, r7, ror #31
   da528:	ea8b 0cb5 	eor.w	ip, fp, r5, ror #2
   da52c:	ea4f 71f7 	mov.w	r1, r7, ror #31
   da530:	4470      	add	r0, lr
   da532:	ea8c 0c06 	eor.w	ip, ip, r6
   da536:	910d      	str	r1, [sp, #52]	; 0x34
   da538:	4484      	add	ip, r0
    P( E, A, B, C, D, R(31) );
   da53a:	9904      	ldr	r1, [sp, #16]
   da53c:	9807      	ldr	r0, [sp, #28]
   da53e:	ea81 70f0 	eor.w	r0, r1, r0, ror #31
   da542:	990b      	ldr	r1, [sp, #44]	; 0x2c
   da544:	ea80 70f8 	eor.w	r0, r0, r8, ror #31
   da548:	ea80 71f1 	eor.w	r1, r0, r1, ror #31
   da54c:	910c      	str	r1, [sp, #48]	; 0x30
   da54e:	ea4f 71f1 	mov.w	r1, r1, ror #31
   da552:	9117      	str	r1, [sp, #92]	; 0x5c
   da554:	990c      	ldr	r1, [sp, #48]	; 0x30
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
   da556:	9809      	ldr	r0, [sp, #36]	; 0x24
    P( B, C, D, E, A, R(29) );
   da558:	eb09 69f6 	add.w	r9, r9, r6, ror #27
    P( E, A, B, C, D, R(31) );
   da55c:	eb03 78f1 	add.w	r8, r3, r1, ror #31
   da560:	ea8b 0eb6 	eor.w	lr, fp, r6, ror #2
   da564:	eb08 05b5 	add.w	r5, r8, r5, ror #2
   da568:	ea8e 0e09 	eor.w	lr, lr, r9
    P( D, E, A, B, C, R(32) );
   da56c:	9913      	ldr	r1, [sp, #76]	; 0x4c
    P( E, A, B, C, D, R(31) );
   da56e:	44ae      	add	lr, r5
    P( D, E, A, B, C, R(32) );
   da570:	9d06      	ldr	r5, [sp, #24]
   da572:	ea81 75f5 	eor.w	r5, r1, r5, ror #31
   da576:	9902      	ldr	r1, [sp, #8]
   da578:	ea85 75f2 	eor.w	r5, r5, r2, ror #31
   da57c:	ea85 71f1 	eor.w	r1, r5, r1, ror #31
   da580:	9103      	str	r1, [sp, #12]
   da582:	eb03 78f1 	add.w	r8, r3, r1, ror #31
    P( C, D, E, A, B, R(33) );
   da586:	9914      	ldr	r1, [sp, #80]	; 0x50
    P( D, E, A, B, C, R(32) );
   da588:	44c3      	add	fp, r8
    P( C, D, E, A, B, R(33) );
   da58a:	4688      	mov	r8, r1
   da58c:	9907      	ldr	r1, [sp, #28]
   da58e:	ea88 78f1 	eor.w	r8, r8, r1, ror #31
   da592:	990a      	ldr	r1, [sp, #40]	; 0x28
    P( A, B, C, D, E, R(30) );
   da594:	eb0c 6cf9 	add.w	ip, ip, r9, ror #27
    P( E, A, B, C, D, R(31) );
   da598:	ea4f 09b9 	mov.w	r9, r9, ror #2
    P( D, E, A, B, C, R(32) );
   da59c:	ea89 05b6 	eor.w	r5, r9, r6, ror #2
    P( C, D, E, A, B, R(33) );
   da5a0:	ea88 78f1 	eor.w	r8, r8, r1, ror #31
   da5a4:	ea88 71f7 	eor.w	r1, r8, r7, ror #31
    P( D, E, A, B, C, R(32) );
   da5a8:	ea85 050c 	eor.w	r5, r5, ip
    P( E, A, B, C, D, R(31) );
   da5ac:	eb0e 6efc 	add.w	lr, lr, ip, ror #27
    P( C, D, E, A, B, R(33) );
   da5b0:	ea89 08bc 	eor.w	r8, r9, ip, ror #2
    P( D, E, A, B, C, R(32) );
   da5b4:	445d      	add	r5, fp
    P( C, D, E, A, B, R(33) );
   da5b6:	eb03 7bf1 	add.w	fp, r3, r1, ror #31
   da5ba:	eb0b 06b6 	add.w	r6, fp, r6, ror #2
   da5be:	ea88 080e 	eor.w	r8, r8, lr
   da5c2:	9104      	str	r1, [sp, #16]
   da5c4:	44b0      	add	r8, r6
    P( B, C, D, E, A, R(34) );
   da5c6:	9913      	ldr	r1, [sp, #76]	; 0x4c
   da5c8:	9e08      	ldr	r6, [sp, #32]
   da5ca:	ea81 76f6 	eor.w	r6, r1, r6, ror #31
   da5ce:	990c      	ldr	r1, [sp, #48]	; 0x30
   da5d0:	ea86 7afa 	eor.w	sl, r6, sl, ror #31
   da5d4:	ea8a 7af1 	eor.w	sl, sl, r1, ror #31
    P( D, E, A, B, C, R(32) );
   da5d8:	eb05 65fe 	add.w	r5, r5, lr, ror #27
    P( B, C, D, E, A, R(34) );
   da5dc:	ea4f 71fa 	mov.w	r1, sl, ror #31
    P( C, D, E, A, B, R(33) );
   da5e0:	ea4f 0ebe 	mov.w	lr, lr, ror #2
    P( B, C, D, E, A, R(34) );
   da5e4:	eb03 7bfa 	add.w	fp, r3, sl, ror #31
   da5e8:	9113      	str	r1, [sp, #76]	; 0x4c
   da5ea:	ea8e 06bc 	eor.w	r6, lr, ip, ror #2
    P( A, B, C, D, E, R(35) );
   da5ee:	9914      	ldr	r1, [sp, #80]	; 0x50
    P( B, C, D, E, A, R(34) );
   da5f0:	44d9      	add	r9, fp
   da5f2:	406e      	eors	r6, r5
   da5f4:	444e      	add	r6, r9
    P( A, B, C, D, E, R(35) );
   da5f6:	ea81 79f0 	eor.w	r9, r1, r0, ror #31
   da5fa:	9903      	ldr	r1, [sp, #12]
   da5fc:	ea89 79f4 	eor.w	r9, r9, r4, ror #31
   da600:	ea89 79f1 	eor.w	r9, r9, r1, ror #31
   da604:	ea4f 71f9 	mov.w	r1, r9, ror #31
    P( C, D, E, A, B, R(33) );
   da608:	eb08 68f5 	add.w	r8, r8, r5, ror #27
    P( A, B, C, D, E, R(35) );
   da60c:	eb03 7bf9 	add.w	fp, r3, r9, ror #31
   da610:	9114      	str	r1, [sp, #80]	; 0x50
   da612:	ea8e 04b5 	eor.w	r4, lr, r5, ror #2
    P( E, A, B, C, D, R(36) );
   da616:	9910      	ldr	r1, [sp, #64]	; 0x40
    P( A, B, C, D, E, R(35) );
   da618:	eb0b 0cbc 	add.w	ip, fp, ip, ror #2
   da61c:	ea84 0408 	eor.w	r4, r4, r8
   da620:	4464      	add	r4, ip
    P( E, A, B, C, D, R(36) );
   da622:	468c      	mov	ip, r1
   da624:	9908      	ldr	r1, [sp, #32]
   da626:	ea8c 7cf1 	eor.w	ip, ip, r1, ror #31
   da62a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   da62c:	ea8c 7cf1 	eor.w	ip, ip, r1, ror #31
   da630:	9904      	ldr	r1, [sp, #16]
    P( B, C, D, E, A, R(34) );
   da632:	eb06 66f8 	add.w	r6, r6, r8, ror #27
    P( E, A, B, C, D, R(36) );
   da636:	ea8c 71f1 	eor.w	r1, ip, r1, ror #31
    P( A, B, C, D, E, R(35) );
   da63a:	ea4f 08b8 	mov.w	r8, r8, ror #2
    P( E, A, B, C, D, R(36) );
   da63e:	eb03 7bf1 	add.w	fp, r3, r1, ror #31
   da642:	9106      	str	r1, [sp, #24]
   da644:	ea88 0cb5 	eor.w	ip, r8, r5, ror #2
    P( D, E, A, B, C, R(37) );
   da648:	9911      	ldr	r1, [sp, #68]	; 0x44
    P( E, A, B, C, D, R(36) );
   da64a:	44de      	add	lr, fp
   da64c:	ea8c 0c06 	eor.w	ip, ip, r6
   da650:	44f4      	add	ip, lr
    P( D, E, A, B, C, R(37) );
   da652:	ea81 7ef0 	eor.w	lr, r1, r0, ror #31
   da656:	9902      	ldr	r1, [sp, #8]
   da658:	ea8e 71f1 	eor.w	r1, lr, r1, ror #31
   da65c:	ea81 71fa 	eor.w	r1, r1, sl, ror #31
   da660:	9107      	str	r1, [sp, #28]
   da662:	eb03 71f1 	add.w	r1, r3, r1, ror #31
   da666:	eb01 05b5 	add.w	r5, r1, r5, ror #2
    P( C, D, E, A, B, R(38) );
   da66a:	9910      	ldr	r1, [sp, #64]	; 0x40
   da66c:	ea81 7ef2 	eor.w	lr, r1, r2, ror #31
   da670:	ea8e 7ef7 	eor.w	lr, lr, r7, ror #31
   da674:	ea8e 7ef9 	eor.w	lr, lr, r9, ror #31
   da678:	ea4f 71fe 	mov.w	r1, lr, ror #31
   da67c:	9110      	str	r1, [sp, #64]	; 0x40
   da67e:	eb03 71fe 	add.w	r1, r3, lr, ror #31
    P( B, C, D, E, A, R(39) );
   da682:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    P( D, E, A, B, C, R(37) );
   da684:	ea88 0bb6 	eor.w	fp, r8, r6, ror #2
    P( C, D, E, A, B, R(38) );
   da688:	4488      	add	r8, r1
    P( B, C, D, E, A, R(39) );
   da68a:	9911      	ldr	r1, [sp, #68]	; 0x44
   da68c:	ea81 77f7 	eor.w	r7, r1, r7, ror #31
   da690:	990c      	ldr	r1, [sp, #48]	; 0x30
   da692:	ea87 70f1 	eor.w	r0, r7, r1, ror #31
   da696:	9906      	ldr	r1, [sp, #24]
    P( A, B, C, D, E, R(35) );
   da698:	eb04 64f6 	add.w	r4, r4, r6, ror #27
    P( B, C, D, E, A, R(39) );
   da69c:	ea80 70f1 	eor.w	r0, r0, r1, ror #31
    P( D, E, A, B, C, R(37) );
   da6a0:	ea8b 0b04 	eor.w	fp, fp, r4
    P( E, A, B, C, D, R(36) );
   da6a4:	eb0c 6cf4 	add.w	ip, ip, r4, ror #27
    P( B, C, D, E, A, R(39) );
   da6a8:	ea4f 71f0 	mov.w	r1, r0, ror #31
    P( D, E, A, B, C, R(37) );
   da6ac:	ea4f 04b4 	mov.w	r4, r4, ror #2
   da6b0:	44ab      	add	fp, r5
   da6b2:	eb0b 6bfc 	add.w	fp, fp, ip, ror #27
    P( B, C, D, E, A, R(39) );
   da6b6:	910c      	str	r1, [sp, #48]	; 0x30
   da6b8:	eb03 73f0 	add.w	r3, r3, r0, ror #31
   da6bc:	ea84 01bc 	eor.w	r1, r4, ip, ror #2
   da6c0:	eb03 03b6 	add.w	r3, r3, r6, ror #2
   da6c4:	ea81 010b 	eor.w	r1, r1, fp
   da6c8:	4419      	add	r1, r3
#undef F

#define F(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
   da6ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
   da6cc:	ea83 72f2 	eor.w	r2, r3, r2, ror #31
   da6d0:	9b03      	ldr	r3, [sp, #12]
   da6d2:	ea82 72f3 	eor.w	r2, r2, r3, ror #31
   da6d6:	9b07      	ldr	r3, [sp, #28]
    P( C, D, E, A, B, R(38) );
   da6d8:	ea84 05b6 	eor.w	r5, r4, r6, ror #2
    P( A, B, C, D, E, R(40) );
   da6dc:	ea82 73f3 	eor.w	r3, r2, r3, ror #31
   da6e0:	9308      	str	r3, [sp, #32]
    P( C, D, E, A, B, R(38) );
   da6e2:	ea85 050c 	eor.w	r5, r5, ip
    P( A, B, C, D, E, R(40) );
   da6e6:	4bda      	ldr	r3, [pc, #872]	; (daa50 <mbedtls_internal_sha1_process+0x9e8>)
   da6e8:	9a08      	ldr	r2, [sp, #32]
    P( C, D, E, A, B, R(38) );
   da6ea:	4445      	add	r5, r8
   da6ec:	eb05 65fb 	add.w	r5, r5, fp, ror #27
    P( A, B, C, D, E, R(40) );
   da6f0:	eb03 76f2 	add.w	r6, r3, r2, ror #31
   da6f4:	ea45 07bb 	orr.w	r7, r5, fp, ror #2
    P( B, C, D, E, A, R(39) );
   da6f8:	eb01 61f5 	add.w	r1, r1, r5, ror #27
    P( A, B, C, D, E, R(40) );
   da6fc:	ea07 07bc 	and.w	r7, r7, ip, ror #2
   da700:	4434      	add	r4, r6
   da702:	ea05 06bb 	and.w	r6, r5, fp, ror #2
   da706:	eb04 64f1 	add.w	r4, r4, r1, ror #27
   da70a:	433e      	orrs	r6, r7
   da70c:	4426      	add	r6, r4
    P( E, A, B, C, D, R(41) );
   da70e:	9a16      	ldr	r2, [sp, #88]	; 0x58
   da710:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    P( D, E, A, B, C, R(42) );
   da712:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    P( E, A, B, C, D, R(41) );
   da714:	ea82 72f4 	eor.w	r2, r2, r4, ror #31
   da718:	9c04      	ldr	r4, [sp, #16]
   da71a:	ea82 72f4 	eor.w	r2, r2, r4, ror #31
   da71e:	ea82 72fe 	eor.w	r2, r2, lr, ror #31
   da722:	ea41 04b5 	orr.w	r4, r1, r5, ror #2
   da726:	9209      	str	r2, [sp, #36]	; 0x24
   da728:	ea04 02bb 	and.w	r2, r4, fp, ror #2
   da72c:	ea01 04b5 	and.w	r4, r1, r5, ror #2
   da730:	4314      	orrs	r4, r2
   da732:	9a09      	ldr	r2, [sp, #36]	; 0x24
   da734:	eb03 72f2 	add.w	r2, r3, r2, ror #31
   da738:	eb02 0cbc 	add.w	ip, r2, ip, ror #2
    P( D, E, A, B, C, R(42) );
   da73c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   da73e:	ea82 72f7 	eor.w	r2, r2, r7, ror #31
   da742:	ea82 7afa 	eor.w	sl, r2, sl, ror #31
   da746:	ea8a 7af0 	eor.w	sl, sl, r0, ror #31
   da74a:	ea4f 72fa 	mov.w	r2, sl, ror #31
   da74e:	9211      	str	r2, [sp, #68]	; 0x44
   da750:	eb03 72fa 	add.w	r2, r3, sl, ror #31
    P( E, A, B, C, D, R(41) );
   da754:	4464      	add	r4, ip
    P( D, E, A, B, C, R(42) );
   da756:	eb02 0bbb 	add.w	fp, r2, fp, ror #2
   da75a:	ea46 02b1 	orr.w	r2, r6, r1, ror #2
    P( E, A, B, C, D, R(41) );
   da75e:	eb04 64f6 	add.w	r4, r4, r6, ror #27
    P( D, E, A, B, C, R(42) );
   da762:	ea06 07b1 	and.w	r7, r6, r1, ror #2
   da766:	ea02 02b5 	and.w	r2, r2, r5, ror #2
   da76a:	433a      	orrs	r2, r7
   da76c:	eb0b 6bf4 	add.w	fp, fp, r4, ror #27
   da770:	4493      	add	fp, r2
    P( C, D, E, A, B, R(43) );
   da772:	9f02      	ldr	r7, [sp, #8]
   da774:	9a16      	ldr	r2, [sp, #88]	; 0x58
   da776:	ea82 72f7 	eor.w	r2, r2, r7, ror #31
   da77a:	ea82 79f9 	eor.w	r9, r2, r9, ror #31
   da77e:	9a08      	ldr	r2, [sp, #32]
   da780:	ea89 79f2 	eor.w	r9, r9, r2, ror #31
   da784:	ea44 08b6 	orr.w	r8, r4, r6, ror #2
   da788:	ea4f 72f9 	mov.w	r2, r9, ror #31
   da78c:	9215      	str	r2, [sp, #84]	; 0x54
   da78e:	ea08 02b1 	and.w	r2, r8, r1, ror #2
   da792:	ea04 08b6 	and.w	r8, r4, r6, ror #2
   da796:	ea42 0808 	orr.w	r8, r2, r8
   da79a:	eb03 72f9 	add.w	r2, r3, r9, ror #31
   da79e:	eb02 05b5 	add.w	r5, r2, r5, ror #2
   da7a2:	44a8      	add	r8, r5
    P( B, C, D, E, A, R(44) );
   da7a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   da7a6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   da7a8:	ea82 75f5 	eor.w	r5, r2, r5, ror #31
   da7ac:	9a06      	ldr	r2, [sp, #24]
   da7ae:	ea85 75f2 	eor.w	r5, r5, r2, ror #31
   da7b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   da7b4:	ea85 72f2 	eor.w	r2, r5, r2, ror #31
   da7b8:	eb03 7cf2 	add.w	ip, r3, r2, ror #31
   da7bc:	920a      	str	r2, [sp, #40]	; 0x28
   da7be:	ea4b 02b4 	orr.w	r2, fp, r4, ror #2
    P( C, D, E, A, B, R(43) );
   da7c2:	eb08 68fb 	add.w	r8, r8, fp, ror #27
    P( B, C, D, E, A, R(44) );
   da7c6:	ea02 02b6 	and.w	r2, r2, r6, ror #2
   da7ca:	eb0c 01b1 	add.w	r1, ip, r1, ror #2
   da7ce:	ea0b 0cb4 	and.w	ip, fp, r4, ror #2
   da7d2:	eb01 61f8 	add.w	r1, r1, r8, ror #27
   da7d6:	ea42 0c0c 	orr.w	ip, r2, ip
    P( A, B, C, D, E, R(45) );
   da7da:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    P( E, A, B, C, D, R(46) );
   da7dc:	9d03      	ldr	r5, [sp, #12]
    P( B, C, D, E, A, R(44) );
   da7de:	448c      	add	ip, r1
    P( A, B, C, D, E, R(45) );
   da7e0:	9907      	ldr	r1, [sp, #28]
   da7e2:	ea82 72f7 	eor.w	r2, r2, r7, ror #31
   da7e6:	ea82 72f1 	eor.w	r2, r2, r1, ror #31
   da7ea:	ea82 72fa 	eor.w	r2, r2, sl, ror #31
   da7ee:	9202      	str	r2, [sp, #8]
   da7f0:	ea48 02bb 	orr.w	r2, r8, fp, ror #2
   da7f4:	ea02 01b4 	and.w	r1, r2, r4, ror #2
   da7f8:	ea08 02bb 	and.w	r2, r8, fp, ror #2
   da7fc:	430a      	orrs	r2, r1
   da7fe:	9902      	ldr	r1, [sp, #8]
   da800:	eb03 71f1 	add.w	r1, r3, r1, ror #31
   da804:	eb01 06b6 	add.w	r6, r1, r6, ror #2
    P( E, A, B, C, D, R(46) );
   da808:	990d      	ldr	r1, [sp, #52]	; 0x34
   da80a:	ea81 71f5 	eor.w	r1, r1, r5, ror #31
   da80e:	ea81 7efe 	eor.w	lr, r1, lr, ror #31
   da812:	ea8e 7ef9 	eor.w	lr, lr, r9, ror #31
   da816:	ea4f 71fe 	mov.w	r1, lr, ror #31
   da81a:	910b      	str	r1, [sp, #44]	; 0x2c
   da81c:	eb03 71fe 	add.w	r1, r3, lr, ror #31
    P( A, B, C, D, E, R(45) );
   da820:	4432      	add	r2, r6
    P( E, A, B, C, D, R(46) );
   da822:	eb01 04b4 	add.w	r4, r1, r4, ror #2
   da826:	ea4c 01b8 	orr.w	r1, ip, r8, ror #2
    P( A, B, C, D, E, R(45) );
   da82a:	eb02 62fc 	add.w	r2, r2, ip, ror #27
    P( E, A, B, C, D, R(46) );
   da82e:	ea0c 06b8 	and.w	r6, ip, r8, ror #2
   da832:	ea01 01bb 	and.w	r1, r1, fp, ror #2
   da836:	4331      	orrs	r1, r6
   da838:	eb04 64f2 	add.w	r4, r4, r2, ror #27
   da83c:	440c      	add	r4, r1
    P( D, E, A, B, C, R(47) );
   da83e:	9917      	ldr	r1, [sp, #92]	; 0x5c
   da840:	9d04      	ldr	r5, [sp, #16]
   da842:	ea81 77f5 	eor.w	r7, r1, r5, ror #31
   da846:	990a      	ldr	r1, [sp, #40]	; 0x28
    P( C, D, E, A, B, R(48) );
   da848:	9d03      	ldr	r5, [sp, #12]
    P( D, E, A, B, C, R(47) );
   da84a:	ea87 77f0 	eor.w	r7, r7, r0, ror #31
   da84e:	ea87 77f1 	eor.w	r7, r7, r1, ror #31
   da852:	ea42 00bc 	orr.w	r0, r2, ip, ror #2
   da856:	ea4f 71f7 	mov.w	r1, r7, ror #31
   da85a:	910d      	str	r1, [sp, #52]	; 0x34
   da85c:	ea00 01b8 	and.w	r1, r0, r8, ror #2
   da860:	ea02 00bc 	and.w	r0, r2, ip, ror #2
   da864:	4308      	orrs	r0, r1
   da866:	eb03 71f7 	add.w	r1, r3, r7, ror #31
   da86a:	eb01 0bbb 	add.w	fp, r1, fp, ror #2
    P( C, D, E, A, B, R(48) );
   da86e:	9913      	ldr	r1, [sp, #76]	; 0x4c
   da870:	ea81 75f5 	eor.w	r5, r1, r5, ror #31
   da874:	9908      	ldr	r1, [sp, #32]
   da876:	ea85 75f1 	eor.w	r5, r5, r1, ror #31
   da87a:	9902      	ldr	r1, [sp, #8]
   da87c:	ea85 71f1 	eor.w	r1, r5, r1, ror #31
   da880:	9103      	str	r1, [sp, #12]
    P( D, E, A, B, C, R(47) );
   da882:	4458      	add	r0, fp
    P( C, D, E, A, B, R(48) );
   da884:	eb03 7bf1 	add.w	fp, r3, r1, ror #31
   da888:	ea44 01b2 	orr.w	r1, r4, r2, ror #2
   da88c:	ea01 01bc 	and.w	r1, r1, ip, ror #2
   da890:	eb0b 08b8 	add.w	r8, fp, r8, ror #2
   da894:	ea04 0bb2 	and.w	fp, r4, r2, ror #2
    P( B, C, D, E, A, R(49) );
   da898:	9d04      	ldr	r5, [sp, #16]
    P( C, D, E, A, B, R(48) );
   da89a:	ea41 0b0b 	orr.w	fp, r1, fp
    P( B, C, D, E, A, R(49) );
   da89e:	9914      	ldr	r1, [sp, #80]	; 0x50
   da8a0:	ea81 76f5 	eor.w	r6, r1, r5, ror #31
   da8a4:	9909      	ldr	r1, [sp, #36]	; 0x24
    P( D, E, A, B, C, R(47) );
   da8a6:	eb00 60f4 	add.w	r0, r0, r4, ror #27
    P( B, C, D, E, A, R(49) );
   da8aa:	ea86 76f1 	eor.w	r6, r6, r1, ror #31
   da8ae:	ea86 71fe 	eor.w	r1, r6, lr, ror #31
   da8b2:	ea40 05b4 	orr.w	r5, r0, r4, ror #2
   da8b6:	9104      	str	r1, [sp, #16]
   da8b8:	ea05 01b2 	and.w	r1, r5, r2, ror #2
   da8bc:	ea00 05b4 	and.w	r5, r0, r4, ror #2
   da8c0:	430d      	orrs	r5, r1
   da8c2:	9904      	ldr	r1, [sp, #16]
    P( A, B, C, D, E, R(50) );
   da8c4:	9e06      	ldr	r6, [sp, #24]
    P( B, C, D, E, A, R(49) );
   da8c6:	eb03 71f1 	add.w	r1, r3, r1, ror #31
   da8ca:	eb01 0cbc 	add.w	ip, r1, ip, ror #2
    P( A, B, C, D, E, R(50) );
   da8ce:	9913      	ldr	r1, [sp, #76]	; 0x4c
   da8d0:	ea81 71f6 	eor.w	r1, r1, r6, ror #31
   da8d4:	ea81 7afa 	eor.w	sl, r1, sl, ror #31
   da8d8:	ea8a 7af7 	eor.w	sl, sl, r7, ror #31
    P( C, D, E, A, B, R(48) );
   da8dc:	eb08 68f0 	add.w	r8, r8, r0, ror #27
    P( A, B, C, D, E, R(50) );
   da8e0:	ea4f 71fa 	mov.w	r1, sl, ror #31
    P( C, D, E, A, B, R(48) );
   da8e4:	44c3      	add	fp, r8
    P( A, B, C, D, E, R(50) );
   da8e6:	9113      	str	r1, [sp, #76]	; 0x4c
   da8e8:	eb03 71fa 	add.w	r1, r3, sl, ror #31
    P( B, C, D, E, A, R(49) );
   da8ec:	4465      	add	r5, ip
    P( A, B, C, D, E, R(50) );
   da8ee:	eb01 02b2 	add.w	r2, r1, r2, ror #2
   da8f2:	ea4b 01b0 	orr.w	r1, fp, r0, ror #2
    P( B, C, D, E, A, R(49) );
   da8f6:	eb05 65fb 	add.w	r5, r5, fp, ror #27
    P( A, B, C, D, E, R(50) );
   da8fa:	ea0b 0cb0 	and.w	ip, fp, r0, ror #2
   da8fe:	ea01 01b4 	and.w	r1, r1, r4, ror #2
   da902:	ea41 010c 	orr.w	r1, r1, ip
   da906:	eb02 62f5 	add.w	r2, r2, r5, ror #27
   da90a:	440a      	add	r2, r1
    P( E, A, B, C, D, R(51) );
   da90c:	9e07      	ldr	r6, [sp, #28]
   da90e:	9914      	ldr	r1, [sp, #80]	; 0x50
   da910:	ea81 71f6 	eor.w	r1, r1, r6, ror #31
   da914:	ea81 79f9 	eor.w	r9, r1, r9, ror #31
   da918:	9903      	ldr	r1, [sp, #12]
   da91a:	ea89 79f1 	eor.w	r9, r9, r1, ror #31
   da91e:	ea45 06bb 	orr.w	r6, r5, fp, ror #2
   da922:	ea4f 71f9 	mov.w	r1, r9, ror #31
   da926:	9114      	str	r1, [sp, #80]	; 0x50
   da928:	ea06 01b0 	and.w	r1, r6, r0, ror #2
   da92c:	ea05 06bb 	and.w	r6, r5, fp, ror #2
   da930:	430e      	orrs	r6, r1
   da932:	eb03 71f9 	add.w	r1, r3, r9, ror #31
   da936:	eb01 04b4 	add.w	r4, r1, r4, ror #2
   da93a:	4426      	add	r6, r4
    P( D, E, A, B, C, R(52) );
   da93c:	9910      	ldr	r1, [sp, #64]	; 0x40
   da93e:	9c06      	ldr	r4, [sp, #24]
   da940:	ea81 74f4 	eor.w	r4, r1, r4, ror #31
   da944:	990a      	ldr	r1, [sp, #40]	; 0x28
   da946:	ea84 74f1 	eor.w	r4, r4, r1, ror #31
   da94a:	9904      	ldr	r1, [sp, #16]
   da94c:	ea84 71f1 	eor.w	r1, r4, r1, ror #31
   da950:	9106      	str	r1, [sp, #24]
   da952:	eb03 71f1 	add.w	r1, r3, r1, ror #31
   da956:	eb01 00b0 	add.w	r0, r1, r0, ror #2
   da95a:	ea42 01b5 	orr.w	r1, r2, r5, ror #2
    P( E, A, B, C, D, R(51) );
   da95e:	eb06 66f2 	add.w	r6, r6, r2, ror #27
    P( D, E, A, B, C, R(52) );
   da962:	ea02 04b5 	and.w	r4, r2, r5, ror #2
   da966:	ea01 01bb 	and.w	r1, r1, fp, ror #2
   da96a:	4321      	orrs	r1, r4
   da96c:	eb00 60f6 	add.w	r0, r0, r6, ror #27
   da970:	4408      	add	r0, r1
    P( C, D, E, A, B, R(53) );
   da972:	9c07      	ldr	r4, [sp, #28]
   da974:	990c      	ldr	r1, [sp, #48]	; 0x30
   da976:	ea81 71f4 	eor.w	r1, r1, r4, ror #31
   da97a:	9c02      	ldr	r4, [sp, #8]
   da97c:	ea81 71f4 	eor.w	r1, r1, r4, ror #31
   da980:	ea46 08b2 	orr.w	r8, r6, r2, ror #2
   da984:	ea81 71fa 	eor.w	r1, r1, sl, ror #31
   da988:	9107      	str	r1, [sp, #28]
   da98a:	ea08 01b5 	and.w	r1, r8, r5, ror #2
   da98e:	ea06 08b2 	and.w	r8, r6, r2, ror #2
   da992:	ea41 0808 	orr.w	r8, r1, r8
   da996:	9907      	ldr	r1, [sp, #28]
   da998:	eb03 71f1 	add.w	r1, r3, r1, ror #31
   da99c:	eb01 0bbb 	add.w	fp, r1, fp, ror #2
    P( B, C, D, E, A, R(54) );
   da9a0:	9910      	ldr	r1, [sp, #64]	; 0x40
   da9a2:	9c08      	ldr	r4, [sp, #32]
   da9a4:	ea81 71f4 	eor.w	r1, r1, r4, ror #31
   da9a8:	ea81 7efe 	eor.w	lr, r1, lr, ror #31
   da9ac:	ea8e 7ef9 	eor.w	lr, lr, r9, ror #31
   da9b0:	ea4f 71fe 	mov.w	r1, lr, ror #31
   da9b4:	9110      	str	r1, [sp, #64]	; 0x40
   da9b6:	eb03 71fe 	add.w	r1, r3, lr, ror #31
    P( C, D, E, A, B, R(53) );
   da9ba:	44d8      	add	r8, fp
    P( B, C, D, E, A, R(54) );
   da9bc:	eb01 05b5 	add.w	r5, r1, r5, ror #2
   da9c0:	ea40 01b6 	orr.w	r1, r0, r6, ror #2
    P( C, D, E, A, B, R(53) );
   da9c4:	eb08 68f0 	add.w	r8, r8, r0, ror #27
    P( B, C, D, E, A, R(54) );
   da9c8:	ea00 04b6 	and.w	r4, r0, r6, ror #2
   da9cc:	ea01 01b2 	and.w	r1, r1, r2, ror #2
   da9d0:	4321      	orrs	r1, r4
   da9d2:	eb05 65f8 	add.w	r5, r5, r8, ror #27
   da9d6:	440d      	add	r5, r1
    P( A, B, C, D, E, R(55) );
   da9d8:	9c09      	ldr	r4, [sp, #36]	; 0x24
   da9da:	990c      	ldr	r1, [sp, #48]	; 0x30
   da9dc:	ea81 71f4 	eor.w	r1, r1, r4, ror #31
   da9e0:	9c06      	ldr	r4, [sp, #24]
   da9e2:	ea81 71f7 	eor.w	r1, r1, r7, ror #31
   da9e6:	ea81 71f4 	eor.w	r1, r1, r4, ror #31
   da9ea:	ea48 0cb0 	orr.w	ip, r8, r0, ror #2
   da9ee:	ea4f 74f1 	mov.w	r4, r1, ror #31
   da9f2:	940c      	str	r4, [sp, #48]	; 0x30
   da9f4:	ea0c 04b6 	and.w	r4, ip, r6, ror #2
   da9f8:	ea08 0cb0 	and.w	ip, r8, r0, ror #2
   da9fc:	ea44 0c0c 	orr.w	ip, r4, ip
   daa00:	eb03 74f1 	add.w	r4, r3, r1, ror #31
   daa04:	eb04 02b2 	add.w	r2, r4, r2, ror #2
   daa08:	4494      	add	ip, r2
    P( E, A, B, C, D, R(56) );
   daa0a:	9c08      	ldr	r4, [sp, #32]
   daa0c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   daa0e:	ea82 77f4 	eor.w	r7, r2, r4, ror #31
   daa12:	9a03      	ldr	r2, [sp, #12]
    P( D, E, A, B, C, R(57) );
   daa14:	9c09      	ldr	r4, [sp, #36]	; 0x24
    P( E, A, B, C, D, R(56) );
   daa16:	ea87 77f2 	eor.w	r7, r7, r2, ror #31
   daa1a:	9a07      	ldr	r2, [sp, #28]
   daa1c:	ea87 72f2 	eor.w	r2, r7, r2, ror #31
   daa20:	9208      	str	r2, [sp, #32]
   daa22:	eb03 77f2 	add.w	r7, r3, r2, ror #31
   daa26:	ea45 02b8 	orr.w	r2, r5, r8, ror #2
   daa2a:	ea02 02b0 	and.w	r2, r2, r0, ror #2
   daa2e:	eb07 06b6 	add.w	r6, r7, r6, ror #2
   daa32:	ea05 07b8 	and.w	r7, r5, r8, ror #2
    P( A, B, C, D, E, R(55) );
   daa36:	eb0c 6cf5 	add.w	ip, ip, r5, ror #27
    P( E, A, B, C, D, R(56) );
   daa3a:	4317      	orrs	r7, r2
    P( D, E, A, B, C, R(57) );
   daa3c:	9a15      	ldr	r2, [sp, #84]	; 0x54
    P( E, A, B, C, D, R(56) );
   daa3e:	eb06 66fc 	add.w	r6, r6, ip, ror #27
   daa42:	4437      	add	r7, r6
    P( D, E, A, B, C, R(57) );
   daa44:	ea82 76f4 	eor.w	r6, r2, r4, ror #31
   daa48:	9a04      	ldr	r2, [sp, #16]
   daa4a:	ea86 76f2 	eor.w	r6, r6, r2, ror #31
   daa4e:	e001      	b.n	daa54 <mbedtls_internal_sha1_process+0x9ec>
   daa50:	8f1bbcdc 	.word	0x8f1bbcdc
   daa54:	ea86 72fe 	eor.w	r2, r6, lr, ror #31
   daa58:	9209      	str	r2, [sp, #36]	; 0x24
   daa5a:	ea4c 02b5 	orr.w	r2, ip, r5, ror #2
   daa5e:	ea02 04b8 	and.w	r4, r2, r8, ror #2
   daa62:	ea0c 02b5 	and.w	r2, ip, r5, ror #2
   daa66:	4322      	orrs	r2, r4
   daa68:	9c09      	ldr	r4, [sp, #36]	; 0x24
   daa6a:	eb03 74f4 	add.w	r4, r3, r4, ror #31
   daa6e:	eb04 00b0 	add.w	r0, r4, r0, ror #2
   daa72:	4402      	add	r2, r0
    P( C, D, E, A, B, R(58) );
   daa74:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   daa76:	9811      	ldr	r0, [sp, #68]	; 0x44
   daa78:	ea80 70f4 	eor.w	r0, r0, r4, ror #31
   daa7c:	ea80 7afa 	eor.w	sl, r0, sl, ror #31
   daa80:	ea8a 7af1 	eor.w	sl, sl, r1, ror #31
   daa84:	ea4f 70fa 	mov.w	r0, sl, ror #31
   daa88:	9011      	str	r0, [sp, #68]	; 0x44
   daa8a:	eb03 70fa 	add.w	r0, r3, sl, ror #31
   daa8e:	eb00 08b8 	add.w	r8, r0, r8, ror #2
   daa92:	ea47 00bc 	orr.w	r0, r7, ip, ror #2
    P( D, E, A, B, C, R(57) );
   daa96:	eb02 62f7 	add.w	r2, r2, r7, ror #27
    P( C, D, E, A, B, R(58) );
   daa9a:	ea07 04bc 	and.w	r4, r7, ip, ror #2
   daa9e:	ea00 00b5 	and.w	r0, r0, r5, ror #2
   daaa2:	4320      	orrs	r0, r4
   daaa4:	eb08 68f2 	add.w	r8, r8, r2, ror #27
   daaa8:	4480      	add	r8, r0
    P( B, C, D, E, A, R(59) );
   daaaa:	9c02      	ldr	r4, [sp, #8]
   daaac:	9815      	ldr	r0, [sp, #84]	; 0x54
   daaae:	ea80 70f4 	eor.w	r0, r0, r4, ror #31
   daab2:	ea80 79f9 	eor.w	r9, r0, r9, ror #31
   daab6:	9808      	ldr	r0, [sp, #32]
   daab8:	ea89 79f0 	eor.w	r9, r9, r0, ror #31
   daabc:	ea4f 70f9 	mov.w	r0, r9, ror #31
   daac0:	ea42 04b7 	orr.w	r4, r2, r7, ror #2
   daac4:	9015      	str	r0, [sp, #84]	; 0x54
   daac6:	ea04 04bc 	and.w	r4, r4, ip, ror #2
   daaca:	ea02 00b7 	and.w	r0, r2, r7, ror #2
   daace:	eb03 73f9 	add.w	r3, r3, r9, ror #31
   daad2:	eb03 03b5 	add.w	r3, r3, r5, ror #2
   daad6:	4320      	orrs	r0, r4
   daad8:	4418      	add	r0, r3
#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
   daada:	e9dd 430a 	ldrd	r4, r3, [sp, #40]	; 0x28
   daade:	ea83 75f4 	eor.w	r5, r3, r4, ror #31
   daae2:	9b06      	ldr	r3, [sp, #24]
   daae4:	ea85 75f3 	eor.w	r5, r5, r3, ror #31
   daae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   daaea:	ea85 73f3 	eor.w	r3, r5, r3, ror #31
   daaee:	930a      	str	r3, [sp, #40]	; 0x28
   daaf0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   daaf2:	4bd8      	ldr	r3, [pc, #864]	; (dae54 <mbedtls_internal_sha1_process+0xdec>)
    P( E, A, B, C, D, R(61) );
   daaf4:	9d02      	ldr	r5, [sp, #8]
    P( A, B, C, D, E, R(60) );
   daaf6:	eb03 74f4 	add.w	r4, r3, r4, ror #31
   daafa:	eb04 0cbc 	add.w	ip, r4, ip, ror #2
    P( E, A, B, C, D, R(61) );
   daafe:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   dab00:	ea84 74f5 	eor.w	r4, r4, r5, ror #31
   dab04:	9d07      	ldr	r5, [sp, #28]
   dab06:	ea84 74f5 	eor.w	r4, r4, r5, ror #31
   dab0a:	ea84 74fa 	eor.w	r4, r4, sl, ror #31
   dab0e:	9402      	str	r4, [sp, #8]
   dab10:	9d02      	ldr	r5, [sp, #8]
    P( D, E, A, B, C, R(62) );
   dab12:	9e03      	ldr	r6, [sp, #12]
    P( B, C, D, E, A, R(59) );
   dab14:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( E, A, B, C, D, R(61) );
   dab18:	eb03 75f5 	add.w	r5, r3, r5, ror #31
    P( A, B, C, D, E, R(60) );
   dab1c:	ea82 0bb7 	eor.w	fp, r2, r7, ror #2
    P( E, A, B, C, D, R(61) );
   dab20:	eb05 07b7 	add.w	r7, r5, r7, ror #2
    P( D, E, A, B, C, R(62) );
   dab24:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   dab26:	ea85 75f6 	eor.w	r5, r5, r6, ror #31
    P( A, B, C, D, E, R(60) );
   dab2a:	ea8b 0b08 	eor.w	fp, fp, r8
    P( D, E, A, B, C, R(62) );
   dab2e:	ea85 7efe 	eor.w	lr, r5, lr, ror #31
   dab32:	ea8e 7ef9 	eor.w	lr, lr, r9, ror #31
    P( B, C, D, E, A, R(59) );
   dab36:	eb00 60f8 	add.w	r0, r0, r8, ror #27
    P( E, A, B, C, D, R(61) );
   dab3a:	ea82 04b8 	eor.w	r4, r2, r8, ror #2
    P( A, B, C, D, E, R(60) );
   dab3e:	44e3      	add	fp, ip
   dab40:	eb0b 6bf0 	add.w	fp, fp, r0, ror #27
    P( D, E, A, B, C, R(62) );
   dab44:	ea4f 75fe 	mov.w	r5, lr, ror #31
    P( E, A, B, C, D, R(61) );
   dab48:	4044      	eors	r4, r0
   dab4a:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( D, E, A, B, C, R(62) );
   dab4e:	950b      	str	r5, [sp, #44]	; 0x2c
   dab50:	ea80 0cb8 	eor.w	ip, r0, r8, ror #2
   dab54:	eb03 75fe 	add.w	r5, r3, lr, ror #31
   dab58:	442a      	add	r2, r5
   dab5a:	ea8c 0c0b 	eor.w	ip, ip, fp
    P( C, D, E, A, B, R(63) );
   dab5e:	9d04      	ldr	r5, [sp, #16]
    P( D, E, A, B, C, R(62) );
   dab60:	4494      	add	ip, r2
    P( C, D, E, A, B, R(63) );
   dab62:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    P( E, A, B, C, D, R(61) );
   dab64:	443c      	add	r4, r7
    P( C, D, E, A, B, R(63) );
   dab66:	ea82 77f5 	eor.w	r7, r2, r5, ror #31
   dab6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    P( B, C, D, E, A, R(64) );
   dab6c:	9d08      	ldr	r5, [sp, #32]
    P( C, D, E, A, B, R(63) );
   dab6e:	ea87 77f1 	eor.w	r7, r7, r1, ror #31
   dab72:	ea87 77f2 	eor.w	r7, r7, r2, ror #31
   dab76:	ea4f 72f7 	mov.w	r2, r7, ror #31
   dab7a:	920d      	str	r2, [sp, #52]	; 0x34
   dab7c:	eb03 72f7 	add.w	r2, r3, r7, ror #31
   dab80:	eb02 08b8 	add.w	r8, r2, r8, ror #2
    P( B, C, D, E, A, R(64) );
   dab84:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   dab86:	ea82 72f6 	eor.w	r2, r2, r6, ror #31
   dab8a:	ea82 72f5 	eor.w	r2, r2, r5, ror #31
   dab8e:	9d02      	ldr	r5, [sp, #8]
    P( E, A, B, C, D, R(61) );
   dab90:	eb04 64fb 	add.w	r4, r4, fp, ror #27
    P( C, D, E, A, B, R(63) );
   dab94:	ea80 01bb 	eor.w	r1, r0, fp, ror #2
    P( D, E, A, B, C, R(62) );
   dab98:	eb0c 6cf4 	add.w	ip, ip, r4, ror #27
    P( B, C, D, E, A, R(64) );
   dab9c:	ea82 72f5 	eor.w	r2, r2, r5, ror #31
    P( C, D, E, A, B, R(63) );
   daba0:	4061      	eors	r1, r4
   daba2:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( B, C, D, E, A, R(64) );
   daba6:	9203      	str	r2, [sp, #12]
    P( C, D, E, A, B, R(63) );
   daba8:	4441      	add	r1, r8
    P( B, C, D, E, A, R(64) );
   dabaa:	eb03 72f2 	add.w	r2, r3, r2, ror #31
   dabae:	ea84 08bb 	eor.w	r8, r4, fp, ror #2
   dabb2:	4410      	add	r0, r2
   dabb4:	ea88 080c 	eor.w	r8, r8, ip
    P( A, B, C, D, E, R(65) );
   dabb8:	9a14      	ldr	r2, [sp, #80]	; 0x50
    P( B, C, D, E, A, R(64) );
   dabba:	4480      	add	r8, r0
    P( A, B, C, D, E, R(65) );
   dabbc:	9804      	ldr	r0, [sp, #16]
   dabbe:	ea82 76f0 	eor.w	r6, r2, r0, ror #31
   dabc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    P( E, A, B, C, D, R(66) );
   dabc4:	9806      	ldr	r0, [sp, #24]
    P( A, B, C, D, E, R(65) );
   dabc6:	ea86 76f2 	eor.w	r6, r6, r2, ror #31
   dabca:	ea86 72fe 	eor.w	r2, r6, lr, ror #31
   dabce:	9204      	str	r2, [sp, #16]
   dabd0:	eb03 72f2 	add.w	r2, r3, r2, ror #31
   dabd4:	eb02 0bbb 	add.w	fp, r2, fp, ror #2
    P( E, A, B, C, D, R(66) );
   dabd8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   dabda:	ea82 72f0 	eor.w	r2, r2, r0, ror #31
   dabde:	ea82 7afa 	eor.w	sl, r2, sl, ror #31
   dabe2:	ea8a 7af7 	eor.w	sl, sl, r7, ror #31
   dabe6:	eb03 72fa 	add.w	r2, r3, sl, ror #31
    P( D, E, A, B, C, R(67) );
   dabea:	9807      	ldr	r0, [sp, #28]
    P( A, B, C, D, E, R(65) );
   dabec:	ea84 06bc 	eor.w	r6, r4, ip, ror #2
    P( E, A, B, C, D, R(66) );
   dabf0:	4414      	add	r4, r2
    P( D, E, A, B, C, R(67) );
   dabf2:	9a14      	ldr	r2, [sp, #80]	; 0x50
   dabf4:	ea82 72f0 	eor.w	r2, r2, r0, ror #31
    P( C, D, E, A, B, R(63) );
   dabf8:	eb01 61fc 	add.w	r1, r1, ip, ror #27
    P( D, E, A, B, C, R(67) );
   dabfc:	ea82 79f9 	eor.w	r9, r2, r9, ror #31
   dac00:	9a03      	ldr	r2, [sp, #12]
    P( B, C, D, E, A, R(64) );
   dac02:	eb08 68f1 	add.w	r8, r8, r1, ror #27
    P( A, B, C, D, E, R(65) );
   dac06:	404e      	eors	r6, r1
   dac08:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( D, E, A, B, C, R(67) );
   dac0c:	ea89 79f2 	eor.w	r9, r9, r2, ror #31
    P( A, B, C, D, E, R(65) );
   dac10:	445e      	add	r6, fp
    P( E, A, B, C, D, R(66) );
   dac12:	ea81 0bbc 	eor.w	fp, r1, ip, ror #2
    P( D, E, A, B, C, R(67) );
   dac16:	eb03 70f9 	add.w	r0, r3, r9, ror #31
    P( E, A, B, C, D, R(66) );
   dac1a:	ea8b 0b08 	eor.w	fp, fp, r8
    P( D, E, A, B, C, R(67) );
   dac1e:	eb00 0cbc 	add.w	ip, r0, ip, ror #2
    P( E, A, B, C, D, R(66) );
   dac22:	44a3      	add	fp, r4
    P( C, D, E, A, B, R(68) );
   dac24:	9810      	ldr	r0, [sp, #64]	; 0x40
   dac26:	9c06      	ldr	r4, [sp, #24]
   dac28:	ea80 74f4 	eor.w	r4, r0, r4, ror #31
   dac2c:	980a      	ldr	r0, [sp, #40]	; 0x28
   dac2e:	ea84 74f0 	eor.w	r4, r4, r0, ror #31
   dac32:	9804      	ldr	r0, [sp, #16]
    P( A, B, C, D, E, R(65) );
   dac34:	eb06 66f8 	add.w	r6, r6, r8, ror #27
    P( D, E, A, B, C, R(67) );
   dac38:	ea81 02b8 	eor.w	r2, r1, r8, ror #2
    P( E, A, B, C, D, R(66) );
   dac3c:	eb0b 6bf6 	add.w	fp, fp, r6, ror #27
    P( C, D, E, A, B, R(68) );
   dac40:	ea84 74f0 	eor.w	r4, r4, r0, ror #31
    P( D, E, A, B, C, R(67) );
   dac44:	4072      	eors	r2, r6
   dac46:	ea4f 06b6 	mov.w	r6, r6, ror #2
    P( C, D, E, A, B, R(68) );
   dac4a:	eb03 70f4 	add.w	r0, r3, r4, ror #31
    P( D, E, A, B, C, R(67) );
   dac4e:	4462      	add	r2, ip
    P( C, D, E, A, B, R(68) );
   dac50:	ea86 0cb8 	eor.w	ip, r6, r8, ror #2
   dac54:	4401      	add	r1, r0
   dac56:	ea8c 0c0b 	eor.w	ip, ip, fp
    P( B, C, D, E, A, R(69) );
   dac5a:	9807      	ldr	r0, [sp, #28]
    P( C, D, E, A, B, R(68) );
   dac5c:	448c      	add	ip, r1
    P( B, C, D, E, A, R(69) );
   dac5e:	990c      	ldr	r1, [sp, #48]	; 0x30
   dac60:	ea81 71f0 	eor.w	r1, r1, r0, ror #31
   dac64:	ea81 71f5 	eor.w	r1, r1, r5, ror #31
   dac68:	ea81 71fa 	eor.w	r1, r1, sl, ror #31
   dac6c:	eb03 70f1 	add.w	r0, r3, r1, ror #31
    P( D, E, A, B, C, R(67) );
   dac70:	eb02 62fb 	add.w	r2, r2, fp, ror #27
    P( B, C, D, E, A, R(69) );
   dac74:	ea86 05bb 	eor.w	r5, r6, fp, ror #2
   dac78:	eb00 08b8 	add.w	r8, r0, r8, ror #2
    P( A, B, C, D, E, R(70) );
   dac7c:	9810      	ldr	r0, [sp, #64]	; 0x40
    P( B, C, D, E, A, R(69) );
   dac7e:	4055      	eors	r5, r2
   dac80:	4445      	add	r5, r8
    P( A, B, C, D, E, R(70) );
   dac82:	4680      	mov	r8, r0
   dac84:	9808      	ldr	r0, [sp, #32]
   dac86:	ea88 70f0 	eor.w	r0, r8, r0, ror #31
   dac8a:	ea80 7efe 	eor.w	lr, r0, lr, ror #31
    P( C, D, E, A, B, R(68) );
   dac8e:	eb0c 6cf2 	add.w	ip, ip, r2, ror #27
    P( A, B, C, D, E, R(70) );
   dac92:	ea8e 70f9 	eor.w	r0, lr, r9, ror #31
    P( B, C, D, E, A, R(69) );
   dac96:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( A, B, C, D, E, R(70) );
   dac9a:	9006      	str	r0, [sp, #24]
   dac9c:	ea82 08bb 	eor.w	r8, r2, fp, ror #2
   daca0:	eb03 70f0 	add.w	r0, r3, r0, ror #31
   daca4:	4406      	add	r6, r0
   daca6:	ea88 080c 	eor.w	r8, r8, ip
    P( E, A, B, C, D, R(71) );
   dacaa:	980c      	ldr	r0, [sp, #48]	; 0x30
    P( A, B, C, D, E, R(70) );
   dacac:	44b0      	add	r8, r6
    P( E, A, B, C, D, R(71) );
   dacae:	9e09      	ldr	r6, [sp, #36]	; 0x24
   dacb0:	ea80 70f6 	eor.w	r0, r0, r6, ror #31
   dacb4:	ea80 77f7 	eor.w	r7, r0, r7, ror #31
   dacb8:	ea87 70f4 	eor.w	r0, r7, r4, ror #31
   dacbc:	9007      	str	r0, [sp, #28]
   dacbe:	9e07      	ldr	r6, [sp, #28]
    P( D, E, A, B, C, R(72) );
   dacc0:	9f08      	ldr	r7, [sp, #32]
    P( E, A, B, C, D, R(71) );
   dacc2:	eb03 76f6 	add.w	r6, r3, r6, ror #31
   dacc6:	eb06 0bbb 	add.w	fp, r6, fp, ror #2
    P( D, E, A, B, C, R(72) );
   dacca:	9e11      	ldr	r6, [sp, #68]	; 0x44
   daccc:	ea86 77f7 	eor.w	r7, r6, r7, ror #31
   dacd0:	9e03      	ldr	r6, [sp, #12]
    P( B, C, D, E, A, R(69) );
   dacd2:	eb05 65fc 	add.w	r5, r5, ip, ror #27
    P( E, A, B, C, D, R(71) );
   dacd6:	ea82 00bc 	eor.w	r0, r2, ip, ror #2
    P( D, E, A, B, C, R(72) );
   dacda:	ea87 77f6 	eor.w	r7, r7, r6, ror #31
    P( A, B, C, D, E, R(70) );
   dacde:	eb08 68f5 	add.w	r8, r8, r5, ror #27
    P( D, E, A, B, C, R(72) );
   dace2:	ea87 77f1 	eor.w	r7, r7, r1, ror #31
    P( E, A, B, C, D, R(71) );
   dace6:	4068      	eors	r0, r5
   dace8:	ea4f 05b5 	mov.w	r5, r5, ror #2
    P( D, E, A, B, C, R(72) );
   dacec:	eb03 76f7 	add.w	r6, r3, r7, ror #31
   dacf0:	ea85 0ebc 	eor.w	lr, r5, ip, ror #2
   dacf4:	4432      	add	r2, r6
   dacf6:	ea8e 0e08 	eor.w	lr, lr, r8
    P( C, D, E, A, B, R(73) );
   dacfa:	9e09      	ldr	r6, [sp, #36]	; 0x24
    P( D, E, A, B, C, R(72) );
   dacfc:	4496      	add	lr, r2
    P( C, D, E, A, B, R(73) );
   dacfe:	9a15      	ldr	r2, [sp, #84]	; 0x54
   dad00:	ea82 76f6 	eor.w	r6, r2, r6, ror #31
   dad04:	9a04      	ldr	r2, [sp, #16]
   dad06:	ea86 76f2 	eor.w	r6, r6, r2, ror #31
   dad0a:	9a06      	ldr	r2, [sp, #24]
   dad0c:	ea86 72f2 	eor.w	r2, r6, r2, ror #31
   dad10:	9208      	str	r2, [sp, #32]
   dad12:	9e08      	ldr	r6, [sp, #32]
    P( E, A, B, C, D, R(71) );
   dad14:	4458      	add	r0, fp
   dad16:	eb00 60f8 	add.w	r0, r0, r8, ror #27
    P( C, D, E, A, B, R(73) );
   dad1a:	eb03 7bf6 	add.w	fp, r3, r6, ror #31
   dad1e:	ea85 02b8 	eor.w	r2, r5, r8, ror #2
    P( B, C, D, E, A, R(74) );
   dad22:	9e11      	ldr	r6, [sp, #68]	; 0x44
    P( C, D, E, A, B, R(73) );
   dad24:	eb0b 0cbc 	add.w	ip, fp, ip, ror #2
   dad28:	4042      	eors	r2, r0
   dad2a:	4462      	add	r2, ip
    P( B, C, D, E, A, R(74) );
   dad2c:	46b4      	mov	ip, r6
   dad2e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   dad30:	ea8c 7cf6 	eor.w	ip, ip, r6, ror #31
   dad34:	9e07      	ldr	r6, [sp, #28]
   dad36:	ea8c 7afa 	eor.w	sl, ip, sl, ror #31
    P( D, E, A, B, C, R(72) );
   dad3a:	eb0e 6ef0 	add.w	lr, lr, r0, ror #27
    P( B, C, D, E, A, R(74) );
   dad3e:	ea8a 7af6 	eor.w	sl, sl, r6, ror #31
    P( C, D, E, A, B, R(73) );
   dad42:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( B, C, D, E, A, R(74) );
   dad46:	eb03 7bfa 	add.w	fp, r3, sl, ror #31
   dad4a:	ea80 0cb8 	eor.w	ip, r0, r8, ror #2
   dad4e:	445d      	add	r5, fp
   dad50:	ea8c 0c0e 	eor.w	ip, ip, lr
    P( A, B, C, D, E, R(75) );
   dad54:	9e02      	ldr	r6, [sp, #8]
    P( B, C, D, E, A, R(74) );
   dad56:	44ac      	add	ip, r5
    P( A, B, C, D, E, R(75) );
   dad58:	9d15      	ldr	r5, [sp, #84]	; 0x54
   dad5a:	ea85 75f6 	eor.w	r5, r5, r6, ror #31
   dad5e:	ea85 79f9 	eor.w	r9, r5, r9, ror #31
   dad62:	ea89 77f7 	eor.w	r7, r9, r7, ror #31
   dad66:	eb03 75f7 	add.w	r5, r3, r7, ror #31
   dad6a:	eb05 08b8 	add.w	r8, r5, r8, ror #2
    P( E, A, B, C, D, R(76) );
   dad6e:	e9dd 650a 	ldrd	r6, r5, [sp, #40]	; 0x28
   dad72:	ea85 75f6 	eor.w	r5, r5, r6, ror #31
   dad76:	ea85 74f4 	eor.w	r4, r5, r4, ror #31
   dad7a:	9d08      	ldr	r5, [sp, #32]
    P( C, D, E, A, B, R(73) );
   dad7c:	eb02 62fe 	add.w	r2, r2, lr, ror #27
    P( A, B, C, D, E, R(75) );
   dad80:	ea80 0bbe 	eor.w	fp, r0, lr, ror #2
    P( B, C, D, E, A, R(74) );
   dad84:	eb0c 6cf2 	add.w	ip, ip, r2, ror #27
    P( E, A, B, C, D, R(76) );
   dad88:	ea84 76f5 	eor.w	r6, r4, r5, ror #31
    P( A, B, C, D, E, R(75) );
   dad8c:	ea8b 0b02 	eor.w	fp, fp, r2
   dad90:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( E, A, B, C, D, R(76) );
   dad94:	eb03 75f6 	add.w	r5, r3, r6, ror #31
   dad98:	ea82 04be 	eor.w	r4, r2, lr, ror #2
   dad9c:	ea84 040c 	eor.w	r4, r4, ip
   dada0:	4428      	add	r0, r5
   dada2:	4420      	add	r0, r4
    P( D, E, A, B, C, R(77) );
   dada4:	9d02      	ldr	r5, [sp, #8]
   dada6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   dada8:	ea84 74f5 	eor.w	r4, r4, r5, ror #31
   dadac:	ea84 71f1 	eor.w	r1, r4, r1, ror #31
   dadb0:	ea81 71fa 	eor.w	r1, r1, sl, ror #31
   dadb4:	eb03 71f1 	add.w	r1, r3, r1, ror #31
    P( A, B, C, D, E, R(75) );
   dadb8:	44c3      	add	fp, r8
   dadba:	eb0b 6bfc 	add.w	fp, fp, ip, ror #27
    P( D, E, A, B, C, R(77) );
   dadbe:	eb01 0ebe 	add.w	lr, r1, lr, ror #2
   dadc2:	ea82 01bc 	eor.w	r1, r2, ip, ror #2
   dadc6:	ea81 010b 	eor.w	r1, r1, fp
    P( C, D, E, A, B, R(78) );
   dadca:	9c03      	ldr	r4, [sp, #12]
    P( D, E, A, B, C, R(77) );
   dadcc:	448e      	add	lr, r1
    P( C, D, E, A, B, R(78) );
   dadce:	990b      	ldr	r1, [sp, #44]	; 0x2c
   dadd0:	ea81 79f4 	eor.w	r9, r1, r4, ror #31
   dadd4:	9906      	ldr	r1, [sp, #24]
    P( B, C, D, E, A, R(79) );
   dadd6:	9c04      	ldr	r4, [sp, #16]
    P( C, D, E, A, B, R(78) );
   dadd8:	ea89 79f1 	eor.w	r9, r9, r1, ror #31
    P( B, C, D, E, A, R(79) );
   daddc:	990d      	ldr	r1, [sp, #52]	; 0x34
   dadde:	ea81 71f4 	eor.w	r1, r1, r4, ror #31
   dade2:	9c07      	ldr	r4, [sp, #28]
   dade4:	ea81 71f4 	eor.w	r1, r1, r4, ror #31
   dade8:	ea81 76f6 	eor.w	r6, r1, r6, ror #31

#undef K
#undef F

    ctx->state[0] += A;
   dadec:	990e      	ldr	r1, [sp, #56]	; 0x38
    P( C, D, E, A, B, R(78) );
   dadee:	ea89 79f7 	eor.w	r9, r9, r7, ror #31
    P( E, A, B, C, D, R(76) );
   dadf2:	eb00 60fb 	add.w	r0, r0, fp, ror #27
    P( C, D, E, A, B, R(78) );
   dadf6:	eb03 79f9 	add.w	r9, r3, r9, ror #31
    P( D, E, A, B, C, R(77) );
   dadfa:	ea4f 0bbb 	mov.w	fp, fp, ror #2
    ctx->state[0] += A;
   dadfe:	440b      	add	r3, r1
   dae00:	eb03 73f6 	add.w	r3, r3, r6, ror #31
    P( C, D, E, A, B, R(78) );
   dae04:	444a      	add	r2, r9
   dae06:	ea8b 09bc 	eor.w	r9, fp, ip, ror #2
    P( D, E, A, B, C, R(77) );
   dae0a:	eb0e 6ef0 	add.w	lr, lr, r0, ror #27
    P( C, D, E, A, B, R(78) );
   dae0e:	ea89 0900 	eor.w	r9, r9, r0
    ctx->state[0] += A;
   dae12:	eb03 0cbc 	add.w	ip, r3, ip, ror #2
    P( B, C, D, E, A, R(79) );
   dae16:	ea8b 03b0 	eor.w	r3, fp, r0, ror #2
    P( C, D, E, A, B, R(78) );
   dae1a:	444a      	add	r2, r9
    P( B, C, D, E, A, R(79) );
   dae1c:	ea83 030e 	eor.w	r3, r3, lr
    ctx->state[0] += A;
   dae20:	9900      	ldr	r1, [sp, #0]
    P( C, D, E, A, B, R(78) );
   dae22:	eb02 62fe 	add.w	r2, r2, lr, ror #27
    ctx->state[0] += A;
   dae26:	4463      	add	r3, ip
   dae28:	eb03 63f2 	add.w	r3, r3, r2, ror #27
   dae2c:	608b      	str	r3, [r1, #8]
    ctx->state[1] += B;
   dae2e:	9b01      	ldr	r3, [sp, #4]
   dae30:	441a      	add	r2, r3
    ctx->state[2] += C;
   dae32:	9b05      	ldr	r3, [sp, #20]
    ctx->state[1] += B;
   dae34:	60ca      	str	r2, [r1, #12]
    ctx->state[2] += C;
   dae36:	eb03 01be 	add.w	r1, r3, lr, ror #2
   dae3a:	9b00      	ldr	r3, [sp, #0]
   dae3c:	6119      	str	r1, [r3, #16]
    ctx->state[3] += D;
   dae3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dae40:	eb03 00b0 	add.w	r0, r3, r0, ror #2
   dae44:	9b00      	ldr	r3, [sp, #0]
   dae46:	6158      	str	r0, [r3, #20]
    ctx->state[4] += E;
   dae48:	9b12      	ldr	r3, [sp, #72]	; 0x48
   dae4a:	eb03 050b 	add.w	r5, r3, fp
   dae4e:	9b00      	ldr	r3, [sp, #0]

    return( 0 );
}
   dae50:	2000      	movs	r0, #0
   dae52:	e001      	b.n	dae58 <mbedtls_internal_sha1_process+0xdf0>
   dae54:	ca62c1d6 	.word	0xca62c1d6
    ctx->state[4] += E;
   dae58:	619d      	str	r5, [r3, #24]
}
   dae5a:	b019      	add	sp, #100	; 0x64
   dae5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000dae60 <mbedtls_sha1_update_ret>:
 * SHA-1 process buffer
 */
int mbedtls_sha1_update_ret( mbedtls_sha1_context *ctx,
                             const unsigned char *input,
                             size_t ilen )
{
   dae60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dae64:	4605      	mov	r5, r0
   dae66:	460e      	mov	r6, r1
    uint32_t left;

    SHA1_VALIDATE_RET( ctx != NULL );
    SHA1_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
   dae68:	4614      	mov	r4, r2
   dae6a:	b912      	cbnz	r2, dae72 <mbedtls_sha1_update_ret+0x12>
    }

    if( ilen > 0 )
        memcpy( (void *) (ctx->buffer + left), input, ilen );

    return( 0 );
   dae6c:	2000      	movs	r0, #0
}
   dae6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    left = ctx->total[0] & 0x3F;
   dae72:	6803      	ldr	r3, [r0, #0]
   dae74:	f003 073f 	and.w	r7, r3, #63	; 0x3f
    ctx->total[0] += (uint32_t) ilen;
   dae78:	18d3      	adds	r3, r2, r3
   dae7a:	6003      	str	r3, [r0, #0]
        ctx->total[1]++;
   dae7c:	bf22      	ittt	cs
   dae7e:	6843      	ldrcs	r3, [r0, #4]
   dae80:	3301      	addcs	r3, #1
   dae82:	6043      	strcs	r3, [r0, #4]
    if( left && ilen >= fill )
   dae84:	b1a7      	cbz	r7, daeb0 <mbedtls_sha1_update_ret+0x50>
    fill = 64 - left;
   dae86:	f1c7 0940 	rsb	r9, r7, #64	; 0x40
    if( left && ilen >= fill )
   dae8a:	454a      	cmp	r2, r9
   dae8c:	d310      	bcc.n	daeb0 <mbedtls_sha1_update_ret+0x50>
        memcpy( (void *) (ctx->buffer + left), input, fill );
   dae8e:	f100 081c 	add.w	r8, r0, #28
   dae92:	464a      	mov	r2, r9
   dae94:	eb08 0007 	add.w	r0, r8, r7
   dae98:	f00d fd18 	bl	e88cc <memcpy>
        if( ( ret = mbedtls_internal_sha1_process( ctx, ctx->buffer ) ) != 0 )
   dae9c:	4641      	mov	r1, r8
   dae9e:	4628      	mov	r0, r5
   daea0:	f7ff f8e2 	bl	da068 <mbedtls_internal_sha1_process>
   daea4:	2800      	cmp	r0, #0
   daea6:	d1e2      	bne.n	dae6e <mbedtls_sha1_update_ret+0xe>
        ilen  -= fill;
   daea8:	443c      	add	r4, r7
        input += fill;
   daeaa:	444e      	add	r6, r9
        ilen  -= fill;
   daeac:	3c40      	subs	r4, #64	; 0x40
        left = 0;
   daeae:	4607      	mov	r7, r0
   daeb0:	4426      	add	r6, r4
    while( ilen >= 64 )
   daeb2:	2c3f      	cmp	r4, #63	; 0x3f
   daeb4:	eba6 0104 	sub.w	r1, r6, r4
   daeb8:	d906      	bls.n	daec8 <mbedtls_sha1_update_ret+0x68>
        if( ( ret = mbedtls_internal_sha1_process( ctx, input ) ) != 0 )
   daeba:	4628      	mov	r0, r5
   daebc:	f7ff f8d4 	bl	da068 <mbedtls_internal_sha1_process>
   daec0:	2800      	cmp	r0, #0
   daec2:	d1d4      	bne.n	dae6e <mbedtls_sha1_update_ret+0xe>
        ilen  -= 64;
   daec4:	3c40      	subs	r4, #64	; 0x40
    while( ilen >= 64 )
   daec6:	e7f4      	b.n	daeb2 <mbedtls_sha1_update_ret+0x52>
    if( ilen > 0 )
   daec8:	2c00      	cmp	r4, #0
   daeca:	d0cf      	beq.n	dae6c <mbedtls_sha1_update_ret+0xc>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
   daecc:	f105 001c 	add.w	r0, r5, #28
   daed0:	4622      	mov	r2, r4
   daed2:	4438      	add	r0, r7
   daed4:	f00d fcfa 	bl	e88cc <memcpy>
   daed8:	e7c8      	b.n	dae6c <mbedtls_sha1_update_ret+0xc>

000daeda <mbedtls_sha1_finish_ret>:
/*
 * SHA-1 final digest
 */
int mbedtls_sha1_finish_ret( mbedtls_sha1_context *ctx,
                             unsigned char output[20] )
{
   daeda:	b570      	push	{r4, r5, r6, lr}
    SHA1_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
   daedc:	6803      	ldr	r3, [r0, #0]
   daede:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    ctx->buffer[used++] = 0x80;
   daee2:	1c5a      	adds	r2, r3, #1
   daee4:	4403      	add	r3, r0
{
   daee6:	460d      	mov	r5, r1
   daee8:	f100 061c 	add.w	r6, r0, #28
    ctx->buffer[used++] = 0x80;
   daeec:	2180      	movs	r1, #128	; 0x80

    if( used <= 56 )
   daeee:	2a38      	cmp	r2, #56	; 0x38
{
   daef0:	4604      	mov	r4, r0
    ctx->buffer[used++] = 0x80;
   daef2:	7719      	strb	r1, [r3, #28]
    if( used <= 56 )
   daef4:	eb06 0002 	add.w	r0, r6, r2
   daef8:	d842      	bhi.n	daf80 <mbedtls_sha1_finish_ret+0xa6>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
   daefa:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
   daefe:	2100      	movs	r1, #0
        memset( ctx->buffer + used, 0, 64 - used );

        if( ( ret = mbedtls_internal_sha1_process( ctx, ctx->buffer ) ) != 0 )
            return( ret );

        memset( ctx->buffer, 0, 56 );
   daf00:	f00d fd0c 	bl	e891c <memset>

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
   daf04:	e9d4 3100 	ldrd	r3, r1, [r4]
    high = ( ctx->total[0] >> 29 )
   daf08:	0f5a      	lsrs	r2, r3, #29
   daf0a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );
   daf0e:	00db      	lsls	r3, r3, #3
   daf10:	ba12      	rev	r2, r2
   daf12:	ba1b      	rev	r3, r3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
   daf14:	6562      	str	r2, [r4, #84]	; 0x54
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
   daf16:	65a3      	str	r3, [r4, #88]	; 0x58

    if( ( ret = mbedtls_internal_sha1_process( ctx, ctx->buffer ) ) != 0 )
   daf18:	4631      	mov	r1, r6
   daf1a:	4620      	mov	r0, r4
   daf1c:	f7ff f8a4 	bl	da068 <mbedtls_internal_sha1_process>
   daf20:	2800      	cmp	r0, #0
   daf22:	d12c      	bne.n	daf7e <mbedtls_sha1_finish_ret+0xa4>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
   daf24:	7ae3      	ldrb	r3, [r4, #11]
   daf26:	702b      	strb	r3, [r5, #0]
   daf28:	8963      	ldrh	r3, [r4, #10]
   daf2a:	706b      	strb	r3, [r5, #1]
   daf2c:	68a3      	ldr	r3, [r4, #8]
   daf2e:	0a1b      	lsrs	r3, r3, #8
   daf30:	70ab      	strb	r3, [r5, #2]
   daf32:	68a3      	ldr	r3, [r4, #8]
   daf34:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
   daf36:	7be3      	ldrb	r3, [r4, #15]
   daf38:	712b      	strb	r3, [r5, #4]
   daf3a:	89e3      	ldrh	r3, [r4, #14]
   daf3c:	716b      	strb	r3, [r5, #5]
   daf3e:	68e3      	ldr	r3, [r4, #12]
   daf40:	0a1b      	lsrs	r3, r3, #8
   daf42:	71ab      	strb	r3, [r5, #6]
   daf44:	68e3      	ldr	r3, [r4, #12]
   daf46:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
   daf48:	7ce3      	ldrb	r3, [r4, #19]
   daf4a:	722b      	strb	r3, [r5, #8]
   daf4c:	8a63      	ldrh	r3, [r4, #18]
   daf4e:	726b      	strb	r3, [r5, #9]
   daf50:	6923      	ldr	r3, [r4, #16]
   daf52:	0a1b      	lsrs	r3, r3, #8
   daf54:	72ab      	strb	r3, [r5, #10]
   daf56:	6923      	ldr	r3, [r4, #16]
   daf58:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
   daf5a:	7de3      	ldrb	r3, [r4, #23]
   daf5c:	732b      	strb	r3, [r5, #12]
   daf5e:	8ae3      	ldrh	r3, [r4, #22]
   daf60:	736b      	strb	r3, [r5, #13]
   daf62:	6963      	ldr	r3, [r4, #20]
   daf64:	0a1b      	lsrs	r3, r3, #8
   daf66:	73ab      	strb	r3, [r5, #14]
   daf68:	6963      	ldr	r3, [r4, #20]
   daf6a:	73eb      	strb	r3, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
   daf6c:	7ee3      	ldrb	r3, [r4, #27]
   daf6e:	742b      	strb	r3, [r5, #16]
   daf70:	8b63      	ldrh	r3, [r4, #26]
   daf72:	746b      	strb	r3, [r5, #17]
   daf74:	69a3      	ldr	r3, [r4, #24]
   daf76:	0a1b      	lsrs	r3, r3, #8
   daf78:	74ab      	strb	r3, [r5, #18]
   daf7a:	69a3      	ldr	r3, [r4, #24]
   daf7c:	74eb      	strb	r3, [r5, #19]

    return( 0 );
}
   daf7e:	bd70      	pop	{r4, r5, r6, pc}
        memset( ctx->buffer + used, 0, 64 - used );
   daf80:	2100      	movs	r1, #0
   daf82:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
   daf86:	f00d fcc9 	bl	e891c <memset>
        if( ( ret = mbedtls_internal_sha1_process( ctx, ctx->buffer ) ) != 0 )
   daf8a:	4631      	mov	r1, r6
   daf8c:	4620      	mov	r0, r4
   daf8e:	f7ff f86b 	bl	da068 <mbedtls_internal_sha1_process>
   daf92:	2800      	cmp	r0, #0
   daf94:	d1f3      	bne.n	daf7e <mbedtls_sha1_finish_ret+0xa4>
        memset( ctx->buffer, 0, 56 );
   daf96:	4601      	mov	r1, r0
   daf98:	2238      	movs	r2, #56	; 0x38
   daf9a:	4630      	mov	r0, r6
   daf9c:	e7b0      	b.n	daf00 <mbedtls_sha1_finish_ret+0x26>

000daf9e <mbedtls_sha1_ret>:
 * output = SHA-1( input buffer )
 */
int mbedtls_sha1_ret( const unsigned char *input,
                      size_t ilen,
                      unsigned char output[20] )
{
   daf9e:	b5f0      	push	{r4, r5, r6, r7, lr}
   dafa0:	b099      	sub	sp, #100	; 0x64
   dafa2:	4606      	mov	r6, r0
    mbedtls_sha1_context ctx;

    SHA1_VALIDATE_RET( ilen == 0 || input != NULL );
    SHA1_VALIDATE_RET( (unsigned char *)output != NULL );

    mbedtls_sha1_init( &ctx );
   dafa4:	a801      	add	r0, sp, #4
{
   dafa6:	460f      	mov	r7, r1
   dafa8:	4615      	mov	r5, r2
    mbedtls_sha1_init( &ctx );
   dafaa:	f7ff f835 	bl	da018 <mbedtls_sha1_init>

    if( ( ret = mbedtls_sha1_starts_ret( &ctx ) ) != 0 )
   dafae:	a801      	add	r0, sp, #4
   dafb0:	f7ff f840 	bl	da034 <mbedtls_sha1_starts_ret>
   dafb4:	4604      	mov	r4, r0
   dafb6:	b958      	cbnz	r0, dafd0 <mbedtls_sha1_ret+0x32>
        goto exit;

    if( ( ret = mbedtls_sha1_update_ret( &ctx, input, ilen ) ) != 0 )
   dafb8:	463a      	mov	r2, r7
   dafba:	4631      	mov	r1, r6
   dafbc:	a801      	add	r0, sp, #4
   dafbe:	f7ff ff4f 	bl	dae60 <mbedtls_sha1_update_ret>
   dafc2:	4604      	mov	r4, r0
   dafc4:	b920      	cbnz	r0, dafd0 <mbedtls_sha1_ret+0x32>
        goto exit;

    if( ( ret = mbedtls_sha1_finish_ret( &ctx, output ) ) != 0 )
   dafc6:	4629      	mov	r1, r5
   dafc8:	a801      	add	r0, sp, #4
   dafca:	f7ff ff86 	bl	daeda <mbedtls_sha1_finish_ret>
   dafce:	4604      	mov	r4, r0
        goto exit;

exit:
    mbedtls_sha1_free( &ctx );
   dafd0:	a801      	add	r0, sp, #4
   dafd2:	f7ff f825 	bl	da020 <mbedtls_sha1_free>

    return( ret );
}
   dafd6:	4620      	mov	r0, r4
   dafd8:	b019      	add	sp, #100	; 0x64
   dafda:	bdf0      	pop	{r4, r5, r6, r7, pc}

000dafdc <mbedtls_platform_zeroize>:

void mbedtls_platform_zeroize( void *buf, size_t len )
{
    MBEDTLS_INTERNAL_VALIDATE( len == 0 || buf != NULL );

    if( len > 0 )
   dafdc:	460a      	mov	r2, r1
   dafde:	b119      	cbz	r1, dafe8 <mbedtls_platform_zeroize+0xc>
        memset_func( buf, 0, len );
   dafe0:	4b02      	ldr	r3, [pc, #8]	; (dafec <mbedtls_platform_zeroize+0x10>)
   dafe2:	2100      	movs	r1, #0
   dafe4:	681b      	ldr	r3, [r3, #0]
   dafe6:	4718      	bx	r3
}
   dafe8:	4770      	bx	lr
   dafea:	bf00      	nop
   dafec:	2003ac50 	.word	0x2003ac50

000daff0 <mbedtls_timing_get_timer.part.0>:
    (void) _beginthread( TimerProc, 0, NULL );
}

#else /* _WIN32 && !EFIX64 && !EFI32 */

unsigned long mbedtls_timing_get_timer( struct mbedtls_timing_hr_time *val, int reset )
   daff0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   daff2:	4604      	mov	r4, r0
    }
    else
    {
        unsigned long delta;
        struct timeval now;
        gettimeofday( &now, NULL );
   daff4:	2100      	movs	r1, #0
   daff6:	4668      	mov	r0, sp
   daff8:	f00e fbc8 	bl	e978c <gettimeofday>
        delta = ( now.tv_sec  - t->start.tv_sec  ) * 1000ul
   daffc:	9b00      	ldr	r3, [sp, #0]
   daffe:	6822      	ldr	r2, [r4, #0]
              + ( now.tv_usec - t->start.tv_usec ) / 1000;
   db000:	68a1      	ldr	r1, [r4, #8]
        delta = ( now.tv_sec  - t->start.tv_sec  ) * 1000ul
   db002:	1a9a      	subs	r2, r3, r2
              + ( now.tv_usec - t->start.tv_usec ) / 1000;
   db004:	9b02      	ldr	r3, [sp, #8]
   db006:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   db00a:	1a5b      	subs	r3, r3, r1
   db00c:	fb93 f3f0 	sdiv	r3, r3, r0
        return( delta );
    }
}
   db010:	fb00 3002 	mla	r0, r0, r2, r3
   db014:	b004      	add	sp, #16
   db016:	bd10      	pop	{r4, pc}

000db018 <_gettimeofday>:
{
   db018:	b538      	push	{r3, r4, r5, lr}
   db01a:	4604      	mov	r4, r0
    uint32_t t = HAL_Timer_Milliseconds();  // get uptime
   db01c:	f00a f9aa 	bl	e5374 <HAL_Timer_Get_Milli_Seconds>
   db020:	4605      	mov	r5, r0
    hal_rtc_init();
}

// There is no replacement for these
inline time32_t __attribute__((deprecated, always_inline)) HAL_RTC_Get_UnixTime(void) {
    return hal_rtc_get_unixtime_deprecated();
   db022:	f00a f9af 	bl	e5384 <hal_rtc_get_unixtime_deprecated>
    tv->tv_usec = ( t % 1000 )*1000;        // get remaining microseconds
   db026:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    tv->tv_sec = HAL_RTC_Get_UnixTime();    // get rtc time before Particle.syncTime()
   db02a:	17c1      	asrs	r1, r0, #31
   db02c:	e9c4 0100 	strd	r0, r1, [r4]
    tv->tv_usec = ( t % 1000 )*1000;        // get remaining microseconds
   db030:	fbb5 f0f3 	udiv	r0, r5, r3
   db034:	fb03 5510 	mls	r5, r3, r0, r5
   db038:	436b      	muls	r3, r5
   db03a:	60a3      	str	r3, [r4, #8]
} // end _gettimeofday()
   db03c:	2000      	movs	r0, #0
   db03e:	bd38      	pop	{r3, r4, r5, pc}

000db040 <mbedtls_timing_set_delay>:
void mbedtls_timing_set_delay( void *data, uint32_t int_ms, uint32_t fin_ms )
{
    mbedtls_timing_delay_context *ctx = (mbedtls_timing_delay_context *) data;

    ctx->int_ms = int_ms;
    ctx->fin_ms = fin_ms;
   db040:	e9c0 1208 	strd	r1, r2, [r0, #32]

    if( fin_ms != 0 )
   db044:	b112      	cbz	r2, db04c <mbedtls_timing_set_delay+0xc>
        gettimeofday( &t->start, NULL );
   db046:	2100      	movs	r1, #0
   db048:	f00e bba0 	b.w	e978c <gettimeofday>
        (void) mbedtls_timing_get_timer( &ctx->timer, 1 );
}
   db04c:	4770      	bx	lr

000db04e <mbedtls_timing_get_delay>:

/*
 * Get number of delays expired
 */
int mbedtls_timing_get_delay( void *data )
{
   db04e:	b510      	push	{r4, lr}
    mbedtls_timing_delay_context *ctx = (mbedtls_timing_delay_context *) data;
    unsigned long elapsed_ms;

    if( ctx->fin_ms == 0 )
   db050:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
   db052:	4604      	mov	r4, r0
    if( ctx->fin_ms == 0 )
   db054:	b153      	cbz	r3, db06c <mbedtls_timing_get_delay+0x1e>
    if( reset )
   db056:	f7ff ffcb 	bl	daff0 <mbedtls_timing_get_timer.part.0>
        return( -1 );

    elapsed_ms = mbedtls_timing_get_timer( &ctx->timer, 0 );

    if( elapsed_ms >= ctx->fin_ms )
   db05a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   db05c:	4283      	cmp	r3, r0
   db05e:	d908      	bls.n	db072 <mbedtls_timing_get_delay+0x24>
        return( 2 );

    if( elapsed_ms >= ctx->int_ms )
   db060:	6a23      	ldr	r3, [r4, #32]
   db062:	4283      	cmp	r3, r0
   db064:	bf8c      	ite	hi
   db066:	2000      	movhi	r0, #0
   db068:	2001      	movls	r0, #1
        return( 1 );

    return( 0 );
}
   db06a:	bd10      	pop	{r4, pc}
        return( -1 );
   db06c:	f04f 30ff 	mov.w	r0, #4294967295
   db070:	e7fb      	b.n	db06a <mbedtls_timing_get_delay+0x1c>
        return( 2 );
   db072:	2002      	movs	r0, #2
   db074:	e7f9      	b.n	db06a <mbedtls_timing_get_delay+0x1c>

000db076 <mbedtls_pkcs5_pbkdf2_hmac>:

int mbedtls_pkcs5_pbkdf2_hmac( mbedtls_md_context_t *ctx, const unsigned char *password,
                       size_t plen, const unsigned char *salt, size_t slen,
                       unsigned int iteration_count,
                       uint32_t key_length, unsigned char *output )
{
   db076:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db07a:	b0a3      	sub	sp, #140	; 0x8c
   db07c:	4604      	mov	r4, r0
    int ret, j;
    unsigned int i;
    unsigned char md1[MBEDTLS_MD_MAX_SIZE];
    unsigned char work[MBEDTLS_MD_MAX_SIZE];
    unsigned char md_size = mbedtls_md_get_size( ctx->md_info );
   db07e:	6800      	ldr	r0, [r0, #0]
{
   db080:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
   db082:	461f      	mov	r7, r3
   db084:	4688      	mov	r8, r1
   db086:	4691      	mov	r9, r2
    unsigned char md_size = mbedtls_md_get_size( ctx->md_info );
   db088:	f001 ff5a 	bl	dcf40 <mbedtls_md_get_size>
    size_t use_len;
    unsigned char *out_p = output;
    unsigned char counter[4];

    memset( counter, 0, 4 );
   db08c:	2300      	movs	r3, #0
   db08e:	f8ad 3004 	strh.w	r3, [sp, #4]
   db092:	f88d 3006 	strb.w	r3, [sp, #6]
    counter[3] = 1;
   db096:	2301      	movs	r3, #1
    unsigned char md_size = mbedtls_md_get_size( ctx->md_info );
   db098:	4605      	mov	r5, r0
    counter[3] = 1;
   db09a:	f88d 3007 	strb.w	r3, [sp, #7]
            return( ret );

        if( ( ret = mbedtls_md_hmac_finish( ctx, work ) ) != 0 )
            return( ret );

        memcpy( md1, work, md_size );
   db09e:	f10d 0a08 	add.w	sl, sp, #8
    while( key_length )
   db0a2:	2e00      	cmp	r6, #0
   db0a4:	d05f      	beq.n	db166 <mbedtls_pkcs5_pbkdf2_hmac+0xf0>
        if( ( ret = mbedtls_md_hmac_starts( ctx, password, plen ) ) != 0 )
   db0a6:	464a      	mov	r2, r9
   db0a8:	4641      	mov	r1, r8
   db0aa:	4620      	mov	r0, r4
   db0ac:	f001 fe88 	bl	dcdc0 <mbedtls_md_hmac_starts>
   db0b0:	2800      	cmp	r0, #0
   db0b2:	d159      	bne.n	db168 <mbedtls_pkcs5_pbkdf2_hmac+0xf2>
        if( ( ret = mbedtls_md_hmac_update( ctx, salt, slen ) ) != 0 )
   db0b4:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
   db0b6:	4639      	mov	r1, r7
   db0b8:	4620      	mov	r0, r4
   db0ba:	f001 fee7 	bl	dce8c <mbedtls_md_hmac_update>
   db0be:	2800      	cmp	r0, #0
   db0c0:	d152      	bne.n	db168 <mbedtls_pkcs5_pbkdf2_hmac+0xf2>
        if( ( ret = mbedtls_md_hmac_update( ctx, counter, 4 ) ) != 0 )
   db0c2:	2204      	movs	r2, #4
   db0c4:	eb0d 0102 	add.w	r1, sp, r2
   db0c8:	4620      	mov	r0, r4
   db0ca:	f001 fedf 	bl	dce8c <mbedtls_md_hmac_update>
   db0ce:	2800      	cmp	r0, #0
   db0d0:	d14a      	bne.n	db168 <mbedtls_pkcs5_pbkdf2_hmac+0xf2>
        if( ( ret = mbedtls_md_hmac_finish( ctx, work ) ) != 0 )
   db0d2:	a912      	add	r1, sp, #72	; 0x48
   db0d4:	4620      	mov	r0, r4
   db0d6:	f001 feeb 	bl	dceb0 <mbedtls_md_hmac_finish>
   db0da:	2800      	cmp	r0, #0
   db0dc:	d144      	bne.n	db168 <mbedtls_pkcs5_pbkdf2_hmac+0xf2>
        memcpy( md1, work, md_size );
   db0de:	462a      	mov	r2, r5
   db0e0:	a912      	add	r1, sp, #72	; 0x48
   db0e2:	4650      	mov	r0, sl
   db0e4:	f00d fbf2 	bl	e88cc <memcpy>

        for( i = 1; i < iteration_count; i++ )
   db0e8:	f04f 0b01 	mov.w	fp, #1
   db0ec:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   db0ee:	459b      	cmp	fp, r3
   db0f0:	d21e      	bcs.n	db130 <mbedtls_pkcs5_pbkdf2_hmac+0xba>
        {
            // U2 ends up in md1
            //
            if( ( ret = mbedtls_md_hmac_starts( ctx, password, plen ) ) != 0 )
   db0f2:	464a      	mov	r2, r9
   db0f4:	4641      	mov	r1, r8
   db0f6:	4620      	mov	r0, r4
   db0f8:	f001 fe62 	bl	dcdc0 <mbedtls_md_hmac_starts>
   db0fc:	bba0      	cbnz	r0, db168 <mbedtls_pkcs5_pbkdf2_hmac+0xf2>
                return( ret );

            if( ( ret = mbedtls_md_hmac_update( ctx, md1, md_size ) ) != 0 )
   db0fe:	462a      	mov	r2, r5
   db100:	4651      	mov	r1, sl
   db102:	4620      	mov	r0, r4
   db104:	f001 fec2 	bl	dce8c <mbedtls_md_hmac_update>
   db108:	bb70      	cbnz	r0, db168 <mbedtls_pkcs5_pbkdf2_hmac+0xf2>
                return( ret );

            if( ( ret = mbedtls_md_hmac_finish( ctx, md1 ) ) != 0 )
   db10a:	4651      	mov	r1, sl
   db10c:	4620      	mov	r0, r4
   db10e:	f001 fecf 	bl	dceb0 <mbedtls_md_hmac_finish>
   db112:	bb48      	cbnz	r0, db168 <mbedtls_pkcs5_pbkdf2_hmac+0xf2>
   db114:	ab12      	add	r3, sp, #72	; 0x48
                return( ret );

            // U1 xor U2
            //
            for( j = 0; j < md_size; j++ )
   db116:	4285      	cmp	r5, r0
   db118:	dd07      	ble.n	db12a <mbedtls_pkcs5_pbkdf2_hmac+0xb4>
                work[j] ^= md1[j];
   db11a:	781a      	ldrb	r2, [r3, #0]
   db11c:	f810 100a 	ldrb.w	r1, [r0, sl]
   db120:	404a      	eors	r2, r1
   db122:	f803 2b01 	strb.w	r2, [r3], #1
            for( j = 0; j < md_size; j++ )
   db126:	3001      	adds	r0, #1
   db128:	e7f5      	b.n	db116 <mbedtls_pkcs5_pbkdf2_hmac+0xa0>
        for( i = 1; i < iteration_count; i++ )
   db12a:	f10b 0b01 	add.w	fp, fp, #1
   db12e:	e7dd      	b.n	db0ec <mbedtls_pkcs5_pbkdf2_hmac+0x76>
        }

        use_len = ( key_length < md_size ) ? key_length : md_size;
   db130:	42b5      	cmp	r5, r6
   db132:	46ab      	mov	fp, r5
   db134:	bf28      	it	cs
   db136:	46b3      	movcs	fp, r6
        memcpy( out_p, work, use_len );
   db138:	465a      	mov	r2, fp
   db13a:	a912      	add	r1, sp, #72	; 0x48
   db13c:	982f      	ldr	r0, [sp, #188]	; 0xbc
   db13e:	f00d fbc5 	bl	e88cc <memcpy>

        key_length -= (uint32_t) use_len;
        out_p += use_len;
   db142:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   db144:	445b      	add	r3, fp
        key_length -= (uint32_t) use_len;
   db146:	eba6 060b 	sub.w	r6, r6, fp
        out_p += use_len;
   db14a:	932f      	str	r3, [sp, #188]	; 0xbc

        for( i = 4; i > 0; i-- )
   db14c:	f10d 0207 	add.w	r2, sp, #7
        out_p += use_len;
   db150:	2104      	movs	r1, #4
            if( ++counter[i - 1] != 0 )
   db152:	7813      	ldrb	r3, [r2, #0]
   db154:	3301      	adds	r3, #1
   db156:	b2db      	uxtb	r3, r3
   db158:	f802 3901 	strb.w	r3, [r2], #-1
   db15c:	2b00      	cmp	r3, #0
   db15e:	d1a0      	bne.n	db0a2 <mbedtls_pkcs5_pbkdf2_hmac+0x2c>
        for( i = 4; i > 0; i-- )
   db160:	3901      	subs	r1, #1
   db162:	d1f6      	bne.n	db152 <mbedtls_pkcs5_pbkdf2_hmac+0xdc>
   db164:	e79d      	b.n	db0a2 <mbedtls_pkcs5_pbkdf2_hmac+0x2c>
                break;
    }

    return( 0 );
   db166:	4630      	mov	r0, r6
}
   db168:	b023      	add	sp, #140	; 0x8c
   db16a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000db170 <mbedtls_pkcs5_pbes2>:
{
   db170:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   db174:	b0bb      	sub	sp, #236	; 0xec
   db176:	461f      	mov	r7, r3
    int ret, iterations = 0, keylen = 0;
   db178:	2300      	movs	r3, #0
   db17a:	e9cd 3306 	strd	r3, r3, [sp, #24]
{
   db17e:	4616      	mov	r6, r2
    size_t olen = 0;
   db180:	9309      	str	r3, [sp, #36]	; 0x24
    end = p + pbe_params->len;
   db182:	6842      	ldr	r2, [r0, #4]
    p = pbe_params->p;
   db184:	6883      	ldr	r3, [r0, #8]
   db186:	9308      	str	r3, [sp, #32]
    end = p + pbe_params->len;
   db188:	eb03 0802 	add.w	r8, r3, r2
    if( pbe_params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
   db18c:	6803      	ldr	r3, [r0, #0]
    mbedtls_md_type_t md_type = MBEDTLS_MD_SHA1;
   db18e:	2404      	movs	r4, #4
    if( pbe_params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
   db190:	2b30      	cmp	r3, #48	; 0x30
{
   db192:	460d      	mov	r5, r1
    mbedtls_md_type_t md_type = MBEDTLS_MD_SHA1;
   db194:	f88d 4016 	strb.w	r4, [sp, #22]
    if( pbe_params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
   db198:	d11c      	bne.n	db1d4 <mbedtls_pkcs5_pbes2+0x64>
    if( ( ret = mbedtls_asn1_get_alg( &p, end, &kdf_alg_oid, &kdf_alg_params ) ) != 0 )
   db19a:	ab10      	add	r3, sp, #64	; 0x40
   db19c:	aa0a      	add	r2, sp, #40	; 0x28
   db19e:	4641      	mov	r1, r8
   db1a0:	a808      	add	r0, sp, #32
   db1a2:	f7fb f9ed 	bl	d6580 <mbedtls_asn1_get_alg>
   db1a6:	b110      	cbz	r0, db1ae <mbedtls_pkcs5_pbes2+0x3e>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );
   db1a8:	f5a0 543c 	sub.w	r4, r0, #12032	; 0x2f00
   db1ac:	e0c9      	b.n	db342 <mbedtls_pkcs5_pbes2+0x1d2>
    if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS5_PBKDF2, &kdf_alg_oid ) != 0 )
   db1ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   db1b0:	2a09      	cmp	r2, #9
   db1b2:	d001      	beq.n	db1b8 <mbedtls_pkcs5_pbes2+0x48>
        return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );
   db1b4:	4c66      	ldr	r4, [pc, #408]	; (db350 <mbedtls_pkcs5_pbes2+0x1e0>)
   db1b6:	e0c4      	b.n	db342 <mbedtls_pkcs5_pbes2+0x1d2>
    if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS5_PBKDF2, &kdf_alg_oid ) != 0 )
   db1b8:	990c      	ldr	r1, [sp, #48]	; 0x30
   db1ba:	4866      	ldr	r0, [pc, #408]	; (db354 <mbedtls_pkcs5_pbes2+0x1e4>)
   db1bc:	f00d fb78 	bl	e88b0 <memcmp>
   db1c0:	2800      	cmp	r0, #0
   db1c2:	d1f7      	bne.n	db1b4 <mbedtls_pkcs5_pbes2+0x44>
    unsigned char *p = params->p;
   db1c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    const unsigned char *end = params->p + params->len;
   db1c6:	9a11      	ldr	r2, [sp, #68]	; 0x44
    unsigned char *p = params->p;
   db1c8:	9324      	str	r3, [sp, #144]	; 0x90
    const unsigned char *end = params->p + params->len;
   db1ca:	eb03 0902 	add.w	r9, r3, r2
    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
   db1ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
   db1d0:	2b30      	cmp	r3, #48	; 0x30
   db1d2:	d001      	beq.n	db1d8 <mbedtls_pkcs5_pbes2+0x68>
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
   db1d4:	4c60      	ldr	r4, [pc, #384]	; (db358 <mbedtls_pkcs5_pbes2+0x1e8>)
   db1d6:	e0b4      	b.n	db342 <mbedtls_pkcs5_pbes2+0x1d2>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &salt->len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
   db1d8:	4623      	mov	r3, r4
   db1da:	aa17      	add	r2, sp, #92	; 0x5c
   db1dc:	4649      	mov	r1, r9
   db1de:	a824      	add	r0, sp, #144	; 0x90
   db1e0:	f7fb f8f8 	bl	d63d4 <mbedtls_asn1_get_tag>
   db1e4:	2800      	cmp	r0, #0
   db1e6:	d078      	beq.n	db2da <mbedtls_pkcs5_pbes2+0x16a>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );
   db1e8:	f5a0 543c 	sub.w	r4, r0, #12032	; 0x2f00
    if( ( ret = pkcs5_parse_pbkdf2_params( &kdf_alg_params,
   db1ec:	2c00      	cmp	r4, #0
   db1ee:	f040 80a8 	bne.w	db342 <mbedtls_pkcs5_pbes2+0x1d2>
    md_info = mbedtls_md_info_from_type( md_type );
   db1f2:	f89d 0016 	ldrb.w	r0, [sp, #22]
   db1f6:	f001 fd69 	bl	dcccc <mbedtls_md_info_from_type>
    if( md_info == NULL )
   db1fa:	4604      	mov	r4, r0
   db1fc:	2800      	cmp	r0, #0
   db1fe:	d0d9      	beq.n	db1b4 <mbedtls_pkcs5_pbes2+0x44>
    if( ( ret = mbedtls_asn1_get_alg( &p, end, &enc_scheme_oid,
   db200:	ab13      	add	r3, sp, #76	; 0x4c
   db202:	aa0d      	add	r2, sp, #52	; 0x34
   db204:	4641      	mov	r1, r8
   db206:	a808      	add	r0, sp, #32
   db208:	f7fb f9ba 	bl	d6580 <mbedtls_asn1_get_alg>
   db20c:	2800      	cmp	r0, #0
   db20e:	d1cb      	bne.n	db1a8 <mbedtls_pkcs5_pbes2+0x38>
    if( mbedtls_oid_get_cipher_alg( &enc_scheme_oid, &cipher_alg ) != 0 )
   db210:	f10d 0117 	add.w	r1, sp, #23
   db214:	a80d      	add	r0, sp, #52	; 0x34
   db216:	f7fe fe81 	bl	d9f1c <mbedtls_oid_get_cipher_alg>
   db21a:	2800      	cmp	r0, #0
   db21c:	d1ca      	bne.n	db1b4 <mbedtls_pkcs5_pbes2+0x44>
    cipher_info = mbedtls_cipher_info_from_type( cipher_alg );
   db21e:	f89d 0017 	ldrb.w	r0, [sp, #23]
   db222:	f7fa ff1f 	bl	d6064 <mbedtls_cipher_info_from_type>
    if( cipher_info == NULL )
   db226:	4680      	mov	r8, r0
   db228:	2800      	cmp	r0, #0
   db22a:	d0c3      	beq.n	db1b4 <mbedtls_pkcs5_pbes2+0x44>
    keylen = cipher_info->key_bitlen / 8;
   db22c:	6843      	ldr	r3, [r0, #4]
   db22e:	08db      	lsrs	r3, r3, #3
   db230:	9307      	str	r3, [sp, #28]
    if( enc_scheme_params.tag != MBEDTLS_ASN1_OCTET_STRING ||
   db232:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   db234:	2b04      	cmp	r3, #4
   db236:	f040 8088 	bne.w	db34a <mbedtls_pkcs5_pbes2+0x1da>
   db23a:	68c3      	ldr	r3, [r0, #12]
   db23c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   db23e:	429a      	cmp	r2, r3
   db240:	f040 8083 	bne.w	db34a <mbedtls_pkcs5_pbes2+0x1da>
    mbedtls_md_init( &md_ctx );
   db244:	a819      	add	r0, sp, #100	; 0x64
   db246:	f001 fd4d 	bl	dcce4 <mbedtls_md_init>
    mbedtls_cipher_init( &cipher_ctx );
   db24a:	a82c      	add	r0, sp, #176	; 0xb0
   db24c:	f7fa ff2a 	bl	d60a4 <mbedtls_cipher_init>
    memcpy( iv, enc_scheme_params.p, enc_scheme_params.len );
   db250:	e9dd 2114 	ldrd	r2, r1, [sp, #80]	; 0x50
   db254:	a824      	add	r0, sp, #144	; 0x90
   db256:	f00d fb39 	bl	e88cc <memcpy>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
   db25a:	4621      	mov	r1, r4
   db25c:	2201      	movs	r2, #1
   db25e:	a819      	add	r0, sp, #100	; 0x64
   db260:	f001 fd60 	bl	dcd24 <mbedtls_md_setup>
   db264:	4604      	mov	r4, r0
   db266:	2800      	cmp	r0, #0
   db268:	d130      	bne.n	db2cc <mbedtls_pkcs5_pbes2+0x15c>
    if( ( ret = mbedtls_pkcs5_pbkdf2_hmac( &md_ctx, pwd, pwdlen, salt.p, salt.len,
   db26a:	9b07      	ldr	r3, [sp, #28]
   db26c:	9302      	str	r3, [sp, #8]
   db26e:	9b06      	ldr	r3, [sp, #24]
   db270:	9301      	str	r3, [sp, #4]
   db272:	f10d 0970 	add.w	r9, sp, #112	; 0x70
   db276:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   db278:	9300      	str	r3, [sp, #0]
   db27a:	f8cd 900c 	str.w	r9, [sp, #12]
   db27e:	9b18      	ldr	r3, [sp, #96]	; 0x60
   db280:	463a      	mov	r2, r7
   db282:	4631      	mov	r1, r6
   db284:	a819      	add	r0, sp, #100	; 0x64
   db286:	f7ff fef6 	bl	db076 <mbedtls_pkcs5_pbkdf2_hmac>
   db28a:	4604      	mov	r4, r0
   db28c:	b9f0      	cbnz	r0, db2cc <mbedtls_pkcs5_pbes2+0x15c>
    if( ( ret = mbedtls_cipher_setup( &cipher_ctx, cipher_info ) ) != 0 )
   db28e:	4641      	mov	r1, r8
   db290:	a82c      	add	r0, sp, #176	; 0xb0
   db292:	f7fa ff1b 	bl	d60cc <mbedtls_cipher_setup>
   db296:	4604      	mov	r4, r0
   db298:	b9c0      	cbnz	r0, db2cc <mbedtls_pkcs5_pbes2+0x15c>
    if( ( ret = mbedtls_cipher_setkey( &cipher_ctx, key, 8 * keylen, (mbedtls_operation_t) mode ) ) != 0 )
   db29a:	9a07      	ldr	r2, [sp, #28]
   db29c:	b26b      	sxtb	r3, r5
   db29e:	00d2      	lsls	r2, r2, #3
   db2a0:	4649      	mov	r1, r9
   db2a2:	a82c      	add	r0, sp, #176	; 0xb0
   db2a4:	f7fa ff2a 	bl	d60fc <mbedtls_cipher_setkey>
   db2a8:	4604      	mov	r4, r0
   db2aa:	b978      	cbnz	r0, db2cc <mbedtls_pkcs5_pbes2+0x15c>
    if( ( ret = mbedtls_cipher_crypt( &cipher_ctx, iv, enc_scheme_params.len,
   db2ac:	ab09      	add	r3, sp, #36	; 0x24
   db2ae:	9302      	str	r3, [sp, #8]
   db2b0:	9b44      	ldr	r3, [sp, #272]	; 0x110
   db2b2:	9301      	str	r3, [sp, #4]
   db2b4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
   db2b6:	9300      	str	r3, [sp, #0]
   db2b8:	9a14      	ldr	r2, [sp, #80]	; 0x50
   db2ba:	9b42      	ldr	r3, [sp, #264]	; 0x108
   db2bc:	a924      	add	r1, sp, #144	; 0x90
   db2be:	a82c      	add	r0, sp, #176	; 0xb0
   db2c0:	f7fa ffca 	bl	d6258 <mbedtls_cipher_crypt>
        ret = MBEDTLS_ERR_PKCS5_PASSWORD_MISMATCH;
   db2c4:	4b25      	ldr	r3, [pc, #148]	; (db35c <mbedtls_pkcs5_pbes2+0x1ec>)
   db2c6:	1e04      	subs	r4, r0, #0
   db2c8:	bf18      	it	ne
   db2ca:	461c      	movne	r4, r3
    mbedtls_md_free( &md_ctx );
   db2cc:	a819      	add	r0, sp, #100	; 0x64
   db2ce:	f001 fd0e 	bl	dccee <mbedtls_md_free>
    mbedtls_cipher_free( &cipher_ctx );
   db2d2:	a82c      	add	r0, sp, #176	; 0xb0
   db2d4:	f7fa feea 	bl	d60ac <mbedtls_cipher_free>
    return( ret );
   db2d8:	e033      	b.n	db342 <mbedtls_pkcs5_pbes2+0x1d2>
    salt->p = p;
   db2da:	9b24      	ldr	r3, [sp, #144]	; 0x90
    p += salt->len;
   db2dc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    salt->p = p;
   db2de:	9318      	str	r3, [sp, #96]	; 0x60
    if( ( ret = mbedtls_asn1_get_int( &p, end, iterations ) ) != 0 )
   db2e0:	4649      	mov	r1, r9
    p += salt->len;
   db2e2:	4413      	add	r3, r2
    if( ( ret = mbedtls_asn1_get_int( &p, end, iterations ) ) != 0 )
   db2e4:	a824      	add	r0, sp, #144	; 0x90
   db2e6:	aa06      	add	r2, sp, #24
    p += salt->len;
   db2e8:	9324      	str	r3, [sp, #144]	; 0x90
    if( ( ret = mbedtls_asn1_get_int( &p, end, iterations ) ) != 0 )
   db2ea:	f7fb f8a0 	bl	d642e <mbedtls_asn1_get_int>
   db2ee:	2800      	cmp	r0, #0
   db2f0:	f47f af7a 	bne.w	db1e8 <mbedtls_pkcs5_pbes2+0x78>
    if( p == end )
   db2f4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   db2f6:	4599      	cmp	r9, r3
   db2f8:	f43f af7b 	beq.w	db1f2 <mbedtls_pkcs5_pbes2+0x82>
    if( ( ret = mbedtls_asn1_get_int( &p, end, keylen ) ) != 0 )
   db2fc:	aa07      	add	r2, sp, #28
   db2fe:	4649      	mov	r1, r9
   db300:	a824      	add	r0, sp, #144	; 0x90
   db302:	f7fb f894 	bl	d642e <mbedtls_asn1_get_int>
   db306:	b118      	cbz	r0, db310 <mbedtls_pkcs5_pbes2+0x1a0>
        if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   db308:	f110 0f62 	cmn.w	r0, #98	; 0x62
   db30c:	f47f af6c 	bne.w	db1e8 <mbedtls_pkcs5_pbes2+0x78>
    if( p == end )
   db310:	9b24      	ldr	r3, [sp, #144]	; 0x90
   db312:	4599      	cmp	r9, r3
   db314:	f43f af6d 	beq.w	db1f2 <mbedtls_pkcs5_pbes2+0x82>
    if( ( ret = mbedtls_asn1_get_alg_null( &p, end, &prf_alg_oid ) ) != 0 )
   db318:	aa2c      	add	r2, sp, #176	; 0xb0
   db31a:	4649      	mov	r1, r9
   db31c:	a824      	add	r0, sp, #144	; 0x90
   db31e:	f7fb f97a 	bl	d6616 <mbedtls_asn1_get_alg_null>
   db322:	2800      	cmp	r0, #0
   db324:	f47f af60 	bne.w	db1e8 <mbedtls_pkcs5_pbes2+0x78>
    if( mbedtls_oid_get_md_hmac( &prf_alg_oid, md_type ) != 0 )
   db328:	f10d 0116 	add.w	r1, sp, #22
   db32c:	a82c      	add	r0, sp, #176	; 0xb0
   db32e:	f7fe fe3d 	bl	d9fac <mbedtls_oid_get_md_hmac>
   db332:	2800      	cmp	r0, #0
   db334:	f47f af3e 	bne.w	db1b4 <mbedtls_pkcs5_pbes2+0x44>
    if( p != end )
   db338:	9b24      	ldr	r3, [sp, #144]	; 0x90
   db33a:	4599      	cmp	r9, r3
   db33c:	f43f af59 	beq.w	db1f2 <mbedtls_pkcs5_pbes2+0x82>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   db340:	4c07      	ldr	r4, [pc, #28]	; (db360 <mbedtls_pkcs5_pbes2+0x1f0>)
}
   db342:	4620      	mov	r0, r4
   db344:	b03b      	add	sp, #236	; 0xec
   db346:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT );
   db34a:	4c06      	ldr	r4, [pc, #24]	; (db364 <mbedtls_pkcs5_pbes2+0x1f4>)
   db34c:	e7f9      	b.n	db342 <mbedtls_pkcs5_pbes2+0x1d2>
   db34e:	bf00      	nop
   db350:	ffffd180 	.word	0xffffd180
   db354:	000ec254 	.word	0x000ec254
   db358:	ffffd09e 	.word	0xffffd09e
   db35c:	ffffd200 	.word	0xffffd200
   db360:	ffffd09a 	.word	0xffffd09a
   db364:	ffffd100 	.word	0xffffd100

000db368 <_ZL12gcm_ctx_freePv>:

    return( ctx );
}

static void gcm_ctx_free( void *ctx )
{
   db368:	b510      	push	{r4, lr}
   db36a:	4604      	mov	r4, r0
    mbedtls_gcm_free( (mbedtls_gcm_context *)ctx );
   db36c:	f001 fc03 	bl	dcb76 <mbedtls_gcm_free>
    mbedtls_free( ctx );
   db370:	4620      	mov	r0, r4
}
   db372:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
   db376:	f00a ba23 	b.w	e57c0 <free>

000db37a <_ZL13gcm_ctx_allocv>:
{
   db37a:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_gcm_context ) );
   db37c:	f44f 71c0 	mov.w	r1, #384	; 0x180
   db380:	2001      	movs	r0, #1
   db382:	f00d fa29 	bl	e87d8 <calloc>
    if( ctx != NULL )
   db386:	4604      	mov	r4, r0
   db388:	b108      	cbz	r0, db38e <_ZL13gcm_ctx_allocv+0x14>
        mbedtls_gcm_init( (mbedtls_gcm_context *) ctx );
   db38a:	f001 f979 	bl	dc680 <mbedtls_gcm_init>
}
   db38e:	4620      	mov	r0, r4
   db390:	bd10      	pop	{r4, pc}

000db392 <_ZL19gcm_aes_setkey_wrapPvPKhj>:
#endif /* MBEDTLS_CIPHER_MODE_XTS */

#if defined(MBEDTLS_GCM_C)
static int gcm_aes_setkey_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
   db392:	4613      	mov	r3, r2
    return mbedtls_gcm_setkey( (mbedtls_gcm_context *) ctx, MBEDTLS_CIPHER_ID_AES,
   db394:	460a      	mov	r2, r1
   db396:	2102      	movs	r1, #2
   db398:	f001 b977 	b.w	dc68a <mbedtls_gcm_setkey>

000db39c <_ZL12aes_ctx_freePv>:
{
   db39c:	b510      	push	{r4, lr}
   db39e:	4604      	mov	r4, r0
    mbedtls_aes_free( (mbedtls_aes_context *) ctx );
   db3a0:	f006 feff 	bl	e21a2 <mbedtls_aes_free>
    mbedtls_free( ctx );
   db3a4:	4620      	mov	r0, r4
}
   db3a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
   db3aa:	f00a ba09 	b.w	e57c0 <free>

000db3ae <_ZL13aes_ctx_allocv>:
{
   db3ae:	b510      	push	{r4, lr}
    mbedtls_aes_context *aes = (mbedtls_aes_context *)mbedtls_calloc( 1, sizeof( mbedtls_aes_context ) );
   db3b0:	f44f 718c 	mov.w	r1, #280	; 0x118
   db3b4:	2001      	movs	r0, #1
   db3b6:	f00d fa0f 	bl	e87d8 <calloc>
    if( aes == NULL )
   db3ba:	4604      	mov	r4, r0
   db3bc:	b108      	cbz	r0, db3c2 <_ZL13aes_ctx_allocv+0x14>
    mbedtls_aes_init( aes );
   db3be:	f006 feeb 	bl	e2198 <mbedtls_aes_init>
}
   db3c2:	4620      	mov	r0, r4
   db3c4:	bd10      	pop	{r4, pc}

000db3c6 <_ZL19aes_setkey_dec_wrapPvPKhj>:
    return mbedtls_aes_setkey_dec( (mbedtls_aes_context *) ctx, key, key_bitlen );
   db3c6:	f006 bfd9 	b.w	e237c <mbedtls_aes_setkey_dec>

000db3ca <_ZL19aes_setkey_enc_wrapPvPKhj>:
    return mbedtls_aes_setkey_enc( (mbedtls_aes_context *) ctx, key, key_bitlen );
   db3ca:	f006 bef1 	b.w	e21b0 <mbedtls_aes_setkey_enc>

000db3ce <_ZL18aes_crypt_ecb_wrapPv19mbedtls_operation_tPKhPh>:
    return mbedtls_aes_crypt_ecb( (mbedtls_aes_context *) ctx, operation, input, output );
   db3ce:	f007 bb1f 	b.w	e2a10 <mbedtls_aes_crypt_ecb>

000db3d2 <_ZL10rsa_can_do17mbedtls_pk_type_t>:
#include <stdint.h>

#if defined(MBEDTLS_RSA_C)
static int rsa_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_RSA ||
   db3d2:	2801      	cmp	r0, #1
   db3d4:	d002      	beq.n	db3dc <_ZL10rsa_can_do17mbedtls_pk_type_t+0xa>
   db3d6:	1f83      	subs	r3, r0, #6
   db3d8:	4258      	negs	r0, r3
   db3da:	4158      	adcs	r0, r3
            type == MBEDTLS_PK_RSASSA_PSS );
}
   db3dc:	4770      	bx	lr
	...

000db3e0 <_ZL9rsa_debugPKvP21mbedtls_pk_debug_item>:
    mbedtls_free( ctx );
}

static void rsa_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_MPI;
   db3e0:	2301      	movs	r3, #1
    items->name = "rsa.N";
   db3e2:	4a06      	ldr	r2, [pc, #24]	; (db3fc <_ZL9rsa_debugPKvP21mbedtls_pk_debug_item+0x1c>)
    items->type = MBEDTLS_PK_DEBUG_MPI;
   db3e4:	700b      	strb	r3, [r1, #0]
    items->name = "rsa.N";
   db3e6:	604a      	str	r2, [r1, #4]
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );

    items++;

    items->type = MBEDTLS_PK_DEBUG_MPI;
   db3e8:	730b      	strb	r3, [r1, #12]
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );
   db3ea:	f100 0208 	add.w	r2, r0, #8
    items->name = "rsa.E";
   db3ee:	4b04      	ldr	r3, [pc, #16]	; (db400 <_ZL9rsa_debugPKvP21mbedtls_pk_debug_item+0x20>)
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );
   db3f0:	608a      	str	r2, [r1, #8]
    items->value = &( ((mbedtls_rsa_context *) ctx)->E );
   db3f2:	3014      	adds	r0, #20
    items->name = "rsa.E";
   db3f4:	610b      	str	r3, [r1, #16]
    items->value = &( ((mbedtls_rsa_context *) ctx)->E );
   db3f6:	6148      	str	r0, [r1, #20]
}
   db3f8:	4770      	bx	lr
   db3fa:	bf00      	nop
   db3fc:	000ec3b8 	.word	0x000ec3b8
   db400:	000ec3be 	.word	0x000ec3be

000db404 <_ZL12eckey_can_do17mbedtls_pk_type_t>:
 * Generic EC key
 */
static int eckey_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_ECKEY ||
            type == MBEDTLS_PK_ECKEY_DH ||
   db404:	3802      	subs	r0, #2
            type == MBEDTLS_PK_ECDSA );
}
   db406:	2802      	cmp	r0, #2
   db408:	bf8c      	ite	hi
   db40a:	2000      	movhi	r0, #0
   db40c:	2001      	movls	r0, #1
   db40e:	4770      	bx	lr

000db410 <_ZL16eckey_get_bitlenPKv>:

static size_t eckey_get_bitlen( const void *ctx )
{
    return( ((mbedtls_ecp_keypair *) ctx)->grp.pbits );
}
   db410:	6d80      	ldr	r0, [r0, #88]	; 0x58
   db412:	4770      	bx	lr

000db414 <_ZL11eckey_debugPKvP21mbedtls_pk_debug_item>:
    mbedtls_free( ctx );
}

static void eckey_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_ECP;
   db414:	2302      	movs	r3, #2
   db416:	700b      	strb	r3, [r1, #0]
    items->name = "eckey.Q";
    items->value = &( ((mbedtls_ecp_keypair *) ctx)->Q );
   db418:	3088      	adds	r0, #136	; 0x88
    items->name = "eckey.Q";
   db41a:	4b02      	ldr	r3, [pc, #8]	; (db424 <_ZL11eckey_debugPKvP21mbedtls_pk_debug_item+0x10>)
   db41c:	604b      	str	r3, [r1, #4]
    items->value = &( ((mbedtls_ecp_keypair *) ctx)->Q );
   db41e:	6088      	str	r0, [r1, #8]
}
   db420:	4770      	bx	lr
   db422:	bf00      	nop
   db424:	000ec3c4 	.word	0x000ec3c4

000db428 <_ZL14eckeydh_can_do17mbedtls_pk_type_t>:
/*
 * EC key restricted to ECDH
 */
static int eckeydh_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_ECKEY ||
   db428:	3802      	subs	r0, #2
            type == MBEDTLS_PK_ECKEY_DH );
}
   db42a:	2801      	cmp	r0, #1
   db42c:	bf8c      	ite	hi
   db42e:	2000      	movhi	r0, #0
   db430:	2001      	movls	r0, #1
   db432:	4770      	bx	lr

000db434 <_ZL12ecdsa_can_do17mbedtls_pk_type_t>:

#if defined(MBEDTLS_ECDSA_C)
static int ecdsa_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_ECDSA );
}
   db434:	1f03      	subs	r3, r0, #4
   db436:	4258      	negs	r0, r3
   db438:	4158      	adcs	r0, r3
   db43a:	4770      	bx	lr

000db43c <_ZL13rsa_free_wrapPv>:
{
   db43c:	b510      	push	{r4, lr}
   db43e:	4604      	mov	r4, r0
    mbedtls_rsa_free( (mbedtls_rsa_context *) ctx );
   db440:	f7fc ffd6 	bl	d83f0 <mbedtls_rsa_free>
    mbedtls_free( ctx );
   db444:	4620      	mov	r0, r4
}
   db446:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
   db44a:	f00a b9b9 	b.w	e57c0 <free>

000db44e <_ZL14rsa_alloc_wrapv>:
{
   db44e:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_rsa_context ) );
   db450:	21ac      	movs	r1, #172	; 0xac
   db452:	2001      	movs	r0, #1
   db454:	f00d f9c0 	bl	e87d8 <calloc>
    if( ctx != NULL )
   db458:	4604      	mov	r4, r0
   db45a:	b118      	cbz	r0, db464 <_ZL14rsa_alloc_wrapv+0x16>
        mbedtls_rsa_init( (mbedtls_rsa_context *) ctx, 0, 0 );
   db45c:	2200      	movs	r2, #0
   db45e:	4611      	mov	r1, r2
   db460:	f7fb ffa0 	bl	d73a4 <mbedtls_rsa_init>
}
   db464:	4620      	mov	r0, r4
   db466:	bd10      	pop	{r4, pc}

000db468 <_ZL19rsa_check_pair_wrapPKvS0_>:
    return( mbedtls_rsa_check_pub_priv( (const mbedtls_rsa_context *) pub,
   db468:	f7fc b800 	b.w	d746c <mbedtls_rsa_check_pub_priv>

000db46c <_ZL14rsa_get_bitlenPKv>:
{
   db46c:	b508      	push	{r3, lr}
    return( 8 * mbedtls_rsa_get_len( rsa ) );
   db46e:	f7fb ffa4 	bl	d73ba <mbedtls_rsa_get_len>
}
   db472:	00c0      	lsls	r0, r0, #3
   db474:	bd08      	pop	{r3, pc}
	...

000db478 <_ZL16rsa_encrypt_wrapPvPKhjPhPjjPFiS_S2_jES_>:
{
   db478:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   db47c:	460e      	mov	r6, r1
   db47e:	4615      	mov	r5, r2
   db480:	990c      	ldr	r1, [sp, #48]	; 0x30
   db482:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   db484:	9101      	str	r1, [sp, #4]
   db486:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	; 0x28
   db48a:	4604      	mov	r4, r0
   db48c:	461f      	mov	r7, r3
   db48e:	9200      	str	r2, [sp, #0]
    *olen = mbedtls_rsa_get_len( rsa );
   db490:	f7fb ff93 	bl	d73ba <mbedtls_rsa_get_len>
    if( *olen > osize )
   db494:	4540      	cmp	r0, r8
    *olen = mbedtls_rsa_get_len( rsa );
   db496:	f8c9 0000 	str.w	r0, [r9]
    if( *olen > osize )
   db49a:	d80b      	bhi.n	db4b4 <_ZL16rsa_encrypt_wrapPvPKhjPhPjjPFiS_S2_jES_+0x3c>
    return( mbedtls_rsa_pkcs1_encrypt( rsa, f_rng, p_rng, MBEDTLS_RSA_PUBLIC,
   db49c:	e9dd 2100 	ldrd	r2, r1, [sp]
   db4a0:	2300      	movs	r3, #0
   db4a2:	4620      	mov	r0, r4
   db4a4:	e9cd 670b 	strd	r6, r7, [sp, #44]	; 0x2c
   db4a8:	950a      	str	r5, [sp, #40]	; 0x28
}
   db4aa:	b003      	add	sp, #12
   db4ac:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    return( mbedtls_rsa_pkcs1_encrypt( rsa, f_rng, p_rng, MBEDTLS_RSA_PUBLIC,
   db4b0:	f7fc bafc 	b.w	d7aac <mbedtls_rsa_pkcs1_encrypt>
}
   db4b4:	4801      	ldr	r0, [pc, #4]	; (db4bc <_ZL16rsa_encrypt_wrapPvPKhjPhPjjPFiS_S2_jES_+0x44>)
   db4b6:	b003      	add	sp, #12
   db4b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   db4bc:	ffffbc00 	.word	0xffffbc00

000db4c0 <_ZL16rsa_decrypt_wrapPvPKhjPhPjjPFiS_S2_jES_>:
{
   db4c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   db4c4:	4617      	mov	r7, r2
   db4c6:	460d      	mov	r5, r1
   db4c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   db4ca:	990c      	ldr	r1, [sp, #48]	; 0x30
   db4cc:	9101      	str	r1, [sp, #4]
   db4ce:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
   db4d2:	4604      	mov	r4, r0
   db4d4:	461e      	mov	r6, r3
   db4d6:	9200      	str	r2, [sp, #0]
    if( ilen != mbedtls_rsa_get_len( rsa ) )
   db4d8:	f7fb ff6f 	bl	d73ba <mbedtls_rsa_get_len>
   db4dc:	42b8      	cmp	r0, r7
   db4de:	d10c      	bne.n	db4fa <_ZL16rsa_decrypt_wrapPvPKhjPhPjjPFiS_S2_jES_+0x3a>
    return( mbedtls_rsa_pkcs1_decrypt( rsa, f_rng, p_rng,
   db4e0:	e9dd 2100 	ldrd	r2, r1, [sp]
   db4e4:	2301      	movs	r3, #1
   db4e6:	4620      	mov	r0, r4
   db4e8:	e9cd 690c 	strd	r6, r9, [sp, #48]	; 0x30
   db4ec:	e9cd 850a 	strd	r8, r5, [sp, #40]	; 0x28
}
   db4f0:	b003      	add	sp, #12
   db4f2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    return( mbedtls_rsa_pkcs1_decrypt( rsa, f_rng, p_rng,
   db4f6:	f7fc bc93 	b.w	d7e20 <mbedtls_rsa_pkcs1_decrypt>
}
   db4fa:	4802      	ldr	r0, [pc, #8]	; (db504 <_ZL16rsa_decrypt_wrapPvPKhjPhPjjPFiS_S2_jES_+0x44>)
   db4fc:	b003      	add	sp, #12
   db4fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   db502:	bf00      	nop
   db504:	ffffbf80 	.word	0xffffbf80

000db508 <_ZL13rsa_sign_wrapPv17mbedtls_md_type_tPKhjPhPjPFiS_S3_jES_>:
{
   db508:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   db50c:	460d      	mov	r5, r1
   db50e:	4617      	mov	r7, r2
   db510:	990c      	ldr	r1, [sp, #48]	; 0x30
   db512:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   db514:	9101      	str	r1, [sp, #4]
   db516:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
   db51a:	461e      	mov	r6, r3
   db51c:	4604      	mov	r4, r0
   db51e:	9200      	str	r2, [sp, #0]
    *sig_len = mbedtls_rsa_get_len( rsa );
   db520:	f7fb ff4b 	bl	d73ba <mbedtls_rsa_get_len>
    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
   db524:	e9dd 2100 	ldrd	r2, r1, [sp]
    *sig_len = mbedtls_rsa_get_len( rsa );
   db528:	f8c9 0000 	str.w	r0, [r9]
    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
   db52c:	2301      	movs	r3, #1
   db52e:	4620      	mov	r0, r4
   db530:	e9cd 780c 	strd	r7, r8, [sp, #48]	; 0x30
   db534:	e9cd 560a 	strd	r5, r6, [sp, #40]	; 0x28
}
   db538:	b003      	add	sp, #12
   db53a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
   db53e:	f7fc bdd5 	b.w	d80ec <mbedtls_rsa_pkcs1_sign>
	...

000db544 <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j>:
{
   db544:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   db548:	b085      	sub	sp, #20
   db54a:	4605      	mov	r5, r0
   db54c:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
   db550:	460e      	mov	r6, r1
   db552:	4690      	mov	r8, r2
   db554:	461f      	mov	r7, r3
    size_t rsa_len = mbedtls_rsa_get_len( rsa );
   db556:	f7fb ff30 	bl	d73ba <mbedtls_rsa_get_len>
    if( sig_len < rsa_len )
   db55a:	4548      	cmp	r0, r9
    size_t rsa_len = mbedtls_rsa_get_len( rsa );
   db55c:	4604      	mov	r4, r0
    if( sig_len < rsa_len )
   db55e:	d812      	bhi.n	db586 <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x42>
    if( ( ret = mbedtls_rsa_pkcs1_verify( rsa, NULL, NULL,
   db560:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   db562:	e9cd 8302 	strd	r8, r3, [sp, #8]
   db566:	2300      	movs	r3, #0
   db568:	e9cd 6700 	strd	r6, r7, [sp]
   db56c:	461a      	mov	r2, r3
   db56e:	4619      	mov	r1, r3
   db570:	4628      	mov	r0, r5
   db572:	f7fc ff27 	bl	d83c4 <mbedtls_rsa_pkcs1_verify>
   db576:	b918      	cbnz	r0, db580 <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x3c>
        return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );
   db578:	4b04      	ldr	r3, [pc, #16]	; (db58c <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x48>)
   db57a:	454c      	cmp	r4, r9
   db57c:	bf38      	it	cc
   db57e:	4618      	movcc	r0, r3
}
   db580:	b005      	add	sp, #20
   db582:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
   db586:	4802      	ldr	r0, [pc, #8]	; (db590 <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x4c>)
   db588:	e7fa      	b.n	db580 <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x3c>
   db58a:	bf00      	nop
   db58c:	ffffc700 	.word	0xffffc700
   db590:	ffffbc80 	.word	0xffffbc80

000db594 <_ZL15eckey_free_wrapPv>:
{
   db594:	b510      	push	{r4, lr}
   db596:	4604      	mov	r4, r0
    mbedtls_ecp_keypair_free( (mbedtls_ecp_keypair *) ctx );
   db598:	f7fd fc55 	bl	d8e46 <mbedtls_ecp_keypair_free>
    mbedtls_free( ctx );
   db59c:	4620      	mov	r0, r4
}
   db59e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
   db5a2:	f00a b90d 	b.w	e57c0 <free>

000db5a6 <_ZL16eckey_alloc_wrapv>:
{
   db5a6:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_ecp_keypair ) );
   db5a8:	21ac      	movs	r1, #172	; 0xac
   db5aa:	2001      	movs	r0, #1
   db5ac:	f00d f914 	bl	e87d8 <calloc>
    if( ctx != NULL )
   db5b0:	4604      	mov	r4, r0
   db5b2:	b108      	cbz	r0, db5b8 <_ZL16eckey_alloc_wrapv+0x12>
        mbedtls_ecp_keypair_init( (mbedtls_ecp_keypair *)ctx );
   db5b4:	f7fd fc05 	bl	d8dc2 <mbedtls_ecp_keypair_init>
}
   db5b8:	4620      	mov	r0, r4
   db5ba:	bd10      	pop	{r4, pc}

000db5bc <_ZL16eckey_check_pairPKvS0_>:
    return( mbedtls_ecp_check_pub_priv( (const mbedtls_ecp_keypair *) pub,
   db5bc:	f7fe bba0 	b.w	d9d00 <mbedtls_ecp_check_pub_priv>

000db5c0 <_ZL16ecdsa_alloc_wrapv>:

}
#endif /* MBEDTLS_ECP_RESTARTABLE */

static void *ecdsa_alloc_wrap( void )
{
   db5c0:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_ecdsa_context ) );
   db5c2:	21ac      	movs	r1, #172	; 0xac
   db5c4:	2001      	movs	r0, #1
   db5c6:	f00d f907 	bl	e87d8 <calloc>

    if( ctx != NULL )
   db5ca:	4604      	mov	r4, r0
   db5cc:	b108      	cbz	r0, db5d2 <_ZL16ecdsa_alloc_wrapv+0x12>
        mbedtls_ecdsa_init( (mbedtls_ecdsa_context *) ctx );
   db5ce:	f000 faba 	bl	dbb46 <mbedtls_ecdsa_init>

    return( ctx );
}
   db5d2:	4620      	mov	r0, r4
   db5d4:	bd10      	pop	{r4, pc}

000db5d6 <_ZL15ecdsa_free_wrapPv>:

static void ecdsa_free_wrap( void *ctx )
{
   db5d6:	b510      	push	{r4, lr}
   db5d8:	4604      	mov	r4, r0
    mbedtls_ecdsa_free( (mbedtls_ecdsa_context *) ctx );
   db5da:	f000 fab6 	bl	dbb4a <mbedtls_ecdsa_free>
    mbedtls_free( ctx );
   db5de:	4620      	mov	r0, r4
}
   db5e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
   db5e4:	f00a b8ec 	b.w	e57c0 <free>

000db5e8 <_ZL15ecdsa_sign_wrapPv17mbedtls_md_type_tPKhjPhPjPFiS_S3_jES_>:
    return( mbedtls_ecdsa_write_signature( (mbedtls_ecdsa_context *) ctx,
   db5e8:	f000 ba44 	b.w	dba74 <mbedtls_ecdsa_write_signature>

000db5ec <_ZL15eckey_sign_wrapPv17mbedtls_md_type_tPKhjPhPjPFiS_S3_jES_>:
{
   db5ec:	b530      	push	{r4, r5, lr}
   db5ee:	b0b3      	sub	sp, #204	; 0xcc
   db5f0:	4604      	mov	r4, r0
    mbedtls_ecdsa_init( &ecdsa );
   db5f2:	a807      	add	r0, sp, #28
{
   db5f4:	e9cd 3204 	strd	r3, r2, [sp, #16]
   db5f8:	460d      	mov	r5, r1
    mbedtls_ecdsa_init( &ecdsa );
   db5fa:	f000 faa4 	bl	dbb46 <mbedtls_ecdsa_init>
    if( ( ret = mbedtls_ecdsa_from_keypair( &ecdsa, (const mbedtls_ecp_keypair *)ctx ) ) == 0 )
   db5fe:	4621      	mov	r1, r4
   db600:	a807      	add	r0, sp, #28
   db602:	f000 faa6 	bl	dbb52 <mbedtls_ecdsa_from_keypair>
   db606:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   db60a:	4604      	mov	r4, r0
   db60c:	b960      	cbnz	r0, db628 <_ZL15eckey_sign_wrapPv17mbedtls_md_type_tPKhjPhPjPFiS_S3_jES_+0x3c>
    return( mbedtls_ecdsa_write_signature( (mbedtls_ecdsa_context *) ctx,
   db60e:	9939      	ldr	r1, [sp, #228]	; 0xe4
   db610:	9103      	str	r1, [sp, #12]
   db612:	9938      	ldr	r1, [sp, #224]	; 0xe0
   db614:	9102      	str	r1, [sp, #8]
   db616:	9937      	ldr	r1, [sp, #220]	; 0xdc
   db618:	9101      	str	r1, [sp, #4]
   db61a:	9936      	ldr	r1, [sp, #216]	; 0xd8
   db61c:	9100      	str	r1, [sp, #0]
   db61e:	a807      	add	r0, sp, #28
   db620:	4629      	mov	r1, r5
   db622:	f000 fa27 	bl	dba74 <mbedtls_ecdsa_write_signature>
   db626:	4604      	mov	r4, r0
    mbedtls_ecdsa_free( &ecdsa );
   db628:	a807      	add	r0, sp, #28
   db62a:	f000 fa8e 	bl	dbb4a <mbedtls_ecdsa_free>
}
   db62e:	4620      	mov	r0, r4
   db630:	b033      	add	sp, #204	; 0xcc
   db632:	bd30      	pop	{r4, r5, pc}

000db634 <_ZL17ecdsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j>:
{
   db634:	b507      	push	{r0, r1, r2, lr}
   db636:	4611      	mov	r1, r2
   db638:	461a      	mov	r2, r3
    ret = mbedtls_ecdsa_read_signature( (mbedtls_ecdsa_context *) ctx,
   db63a:	9b05      	ldr	r3, [sp, #20]
   db63c:	9300      	str	r3, [sp, #0]
   db63e:	9b04      	ldr	r3, [sp, #16]
   db640:	f000 fa78 	bl	dbb34 <mbedtls_ecdsa_read_signature>
    if( ret == MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH )
   db644:	f510 4f98 	cmn.w	r0, #19456	; 0x4c00
        return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );
   db648:	bf08      	it	eq
   db64a:	f500 5098 	addeq.w	r0, r0, #4864	; 0x1300
}
   db64e:	b003      	add	sp, #12
   db650:	f85d fb04 	ldr.w	pc, [sp], #4

000db654 <_ZL17eckey_verify_wrapPv17mbedtls_md_type_tPKhjS2_j>:
{
   db654:	b530      	push	{r4, r5, lr}
   db656:	b0b1      	sub	sp, #196	; 0xc4
   db658:	4604      	mov	r4, r0
    mbedtls_ecdsa_init( &ecdsa );
   db65a:	a805      	add	r0, sp, #20
{
   db65c:	e9cd 3202 	strd	r3, r2, [sp, #8]
   db660:	460d      	mov	r5, r1
    mbedtls_ecdsa_init( &ecdsa );
   db662:	f000 fa70 	bl	dbb46 <mbedtls_ecdsa_init>
    if( ( ret = mbedtls_ecdsa_from_keypair( &ecdsa, (const mbedtls_ecp_keypair *)ctx ) ) == 0 )
   db666:	4621      	mov	r1, r4
   db668:	a805      	add	r0, sp, #20
   db66a:	f000 fa72 	bl	dbb52 <mbedtls_ecdsa_from_keypair>
   db66e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   db672:	4604      	mov	r4, r0
   db674:	b940      	cbnz	r0, db688 <_ZL17eckey_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x34>
        ret = ecdsa_verify_wrap( &ecdsa, md_alg, hash, hash_len, sig, sig_len );
   db676:	9935      	ldr	r1, [sp, #212]	; 0xd4
   db678:	9101      	str	r1, [sp, #4]
   db67a:	9934      	ldr	r1, [sp, #208]	; 0xd0
   db67c:	9100      	str	r1, [sp, #0]
   db67e:	a805      	add	r0, sp, #20
   db680:	4629      	mov	r1, r5
   db682:	f7ff ffd7 	bl	db634 <_ZL17ecdsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j>
   db686:	4604      	mov	r4, r0
    mbedtls_ecdsa_free( &ecdsa );
   db688:	a805      	add	r0, sp, #20
   db68a:	f000 fa5e 	bl	dbb4a <mbedtls_ecdsa_free>
}
   db68e:	4620      	mov	r0, r4
   db690:	b031      	add	sp, #196	; 0xc4
   db692:	bd30      	pop	{r4, r5, pc}

000db694 <_ZL10derive_mpiPK17mbedtls_ecp_groupP11mbedtls_mpiPKhj>:
 * Derive a suitable integer for group grp from a buffer of length len
 * SEC1 4.1.3 step 5 aka SEC1 4.1.4 step 3
 */
static int derive_mpi( const mbedtls_ecp_group *grp, mbedtls_mpi *x,
                       const unsigned char *buf, size_t blen )
{
   db694:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    int ret;
    size_t n_size = ( grp->nbits + 7 ) / 8;
   db696:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
   db698:	3507      	adds	r5, #7
   db69a:	08ed      	lsrs	r5, r5, #3
   db69c:	429d      	cmp	r5, r3
   db69e:	462c      	mov	r4, r5
{
   db6a0:	460f      	mov	r7, r1
   db6a2:	bf28      	it	cs
   db6a4:	461c      	movcs	r4, r3
   db6a6:	4611      	mov	r1, r2
   db6a8:	4606      	mov	r6, r0
    size_t use_size = blen > n_size ? n_size : blen;

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( x, buf, use_size ) );
   db6aa:	4622      	mov	r2, r4
   db6ac:	4638      	mov	r0, r7
   db6ae:	f005 facc 	bl	e0c4a <mbedtls_mpi_read_binary>
   db6b2:	4605      	mov	r5, r0
   db6b4:	b9e8      	cbnz	r0, db6f2 <_ZL10derive_mpiPK17mbedtls_ecp_groupP11mbedtls_mpiPKhj+0x5e>
    if( use_size * 8 > grp->nbits )
   db6b6:	6df3      	ldr	r3, [r6, #92]	; 0x5c
   db6b8:	ebb3 0fc4 	cmp.w	r3, r4, lsl #3
   db6bc:	ea4f 01c4 	mov.w	r1, r4, lsl #3
   db6c0:	d310      	bcc.n	db6e4 <_ZL10derive_mpiPK17mbedtls_ecp_groupP11mbedtls_mpiPKhj+0x50>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( x, use_size * 8 - grp->nbits ) );

    /* While at it, reduce modulo N */
    if( mbedtls_mpi_cmp_mpi( x, &grp->N ) >= 0 )
   db6c2:	f106 024c 	add.w	r2, r6, #76	; 0x4c
   db6c6:	4611      	mov	r1, r2
   db6c8:	4638      	mov	r0, r7
   db6ca:	9201      	str	r2, [sp, #4]
   db6cc:	f005 fc58 	bl	e0f80 <mbedtls_mpi_cmp_mpi>
   db6d0:	2800      	cmp	r0, #0
   db6d2:	db0e      	blt.n	db6f2 <_ZL10derive_mpiPK17mbedtls_ecp_groupP11mbedtls_mpiPKhj+0x5e>
   db6d4:	9a01      	ldr	r2, [sp, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( x, x, &grp->N ) );
   db6d6:	4639      	mov	r1, r7
   db6d8:	4638      	mov	r0, r7

cleanup:
    return( ret );
}
   db6da:	b003      	add	sp, #12
   db6dc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( x, x, &grp->N ) );
   db6e0:	f005 bd5c 	b.w	e119c <mbedtls_mpi_sub_mpi>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( x, use_size * 8 - grp->nbits ) );
   db6e4:	1ac9      	subs	r1, r1, r3
   db6e6:	4638      	mov	r0, r7
   db6e8:	f005 fb70 	bl	e0dcc <mbedtls_mpi_shift_r>
   db6ec:	2800      	cmp	r0, #0
   db6ee:	d0e8      	beq.n	db6c2 <_ZL10derive_mpiPK17mbedtls_ecp_groupP11mbedtls_mpiPKhj+0x2e>
   db6f0:	4605      	mov	r5, r0
}
   db6f2:	4628      	mov	r0, r5
   db6f4:	b003      	add	sp, #12
   db6f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000db6f8 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0>:
#if !defined(MBEDTLS_ECDSA_SIGN_ALT)
/*
 * Compute ECDSA signature of a hashed message (SEC1 4.1.3)
 * Obviously, compared to SEC1 4.1.3, we skip step 4 (hash message)
 */
static int ecdsa_sign_restartable( mbedtls_ecp_group *grp,
   db6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db6fc:	ed2d 8b02 	vpush	{d8}
   db700:	4698      	mov	r8, r3
    mbedtls_ecp_point R;
    mbedtls_mpi k, e, t;
    mbedtls_mpi *pk = &k, *pr = r;

    /* Fail cleanly on curves such as Curve25519 that can't be used for ECDSA */
    if( grp->N.p == NULL )
   db702:	6d43      	ldr	r3, [r0, #84]	; 0x54
static int ecdsa_sign_restartable( mbedtls_ecp_group *grp,
   db704:	b09b      	sub	sp, #108	; 0x6c
   db706:	4605      	mov	r5, r0
   db708:	460f      	mov	r7, r1
   db70a:	4614      	mov	r4, r2
    if( grp->N.p == NULL )
   db70c:	2b00      	cmp	r3, #0
   db70e:	f000 80b9 	beq.w	db884 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x18c>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    /* Make sure d is in range 1..n-1 */
    if( mbedtls_mpi_cmp_int( d, 1 ) < 0 || mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 )
   db712:	2101      	movs	r1, #1
   db714:	4640      	mov	r0, r8
   db716:	f005 fc74 	bl	e1002 <mbedtls_mpi_cmp_int>
   db71a:	2800      	cmp	r0, #0
   db71c:	da06      	bge.n	db72c <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x34>
        return( MBEDTLS_ERR_ECP_INVALID_KEY );
   db71e:	495a      	ldr	r1, [pc, #360]	; (db888 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x190>)
    mbedtls_mpi_free( &k ); mbedtls_mpi_free( &e ); mbedtls_mpi_free( &t );

    ECDSA_RS_LEAVE( sig );

    return( ret );
}
   db720:	4608      	mov	r0, r1
   db722:	b01b      	add	sp, #108	; 0x6c
   db724:	ecbd 8b02 	vpop	{d8}
   db728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( mbedtls_mpi_cmp_int( d, 1 ) < 0 || mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 )
   db72c:	f105 094c 	add.w	r9, r5, #76	; 0x4c
   db730:	4649      	mov	r1, r9
   db732:	4640      	mov	r0, r8
   db734:	f005 fc24 	bl	e0f80 <mbedtls_mpi_cmp_mpi>
   db738:	2800      	cmp	r0, #0
   db73a:	daf0      	bge.n	db71e <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x26>
    mbedtls_ecp_point_init( &R );
   db73c:	a811      	add	r0, sp, #68	; 0x44
    mbedtls_mpi_init( &k ); mbedtls_mpi_init( &e ); mbedtls_mpi_init( &t );
   db73e:	ae08      	add	r6, sp, #32
    mbedtls_ecp_point_init( &R );
   db740:	f7fd fb10 	bl	d8d64 <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &k ); mbedtls_mpi_init( &e ); mbedtls_mpi_init( &t );
   db744:	4630      	mov	r0, r6
   db746:	f005 f93c 	bl	e09c2 <mbedtls_mpi_init>
   db74a:	a80b      	add	r0, sp, #44	; 0x2c
   db74c:	f005 f939 	bl	e09c2 <mbedtls_mpi_init>
   db750:	a80e      	add	r0, sp, #56	; 0x38
   db752:	f005 f936 	bl	e09c2 <mbedtls_mpi_init>
    *p_sign_tries = 0;
   db756:	2300      	movs	r3, #0
   db758:	9307      	str	r3, [sp, #28]
    int *p_sign_tries = &sign_tries, *p_key_tries = &key_tries;
   db75a:	f10d 0a18 	add.w	sl, sp, #24
   db75e:	f10d 0b1c 	add.w	fp, sp, #28
        *p_key_tries = 0;
   db762:	9304      	str	r3, [sp, #16]
        if( *p_sign_tries++ > 10 )
   db764:	f85b 3b04 	ldr.w	r3, [fp], #4
   db768:	2b0a      	cmp	r3, #10
   db76a:	f300 8089 	bgt.w	db880 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x188>
        *p_key_tries = 0;
   db76e:	9b04      	ldr	r3, [sp, #16]
   db770:	f8ca 3000 	str.w	r3, [sl]
            MBEDTLS_MPI_CHK( mbedtls_ecp_mul_restartable( grp, &R, pk, &grp->G,
   db774:	f105 0328 	add.w	r3, r5, #40	; 0x28
   db778:	ee08 3a10 	vmov	s16, r3
            if( *p_key_tries++ > 10 )
   db77c:	f85a 3b04 	ldr.w	r3, [sl], #4
   db780:	2b0a      	cmp	r3, #10
   db782:	dc7d      	bgt.n	db880 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x188>
            MBEDTLS_MPI_CHK( mbedtls_ecp_gen_privkey( grp, pk, f_rng, p_rng ) );
   db784:	4631      	mov	r1, r6
   db786:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
   db78a:	4628      	mov	r0, r5
   db78c:	f7fe fa78 	bl	d9c80 <mbedtls_ecp_gen_privkey>
   db790:	4601      	mov	r1, r0
   db792:	2800      	cmp	r0, #0
   db794:	d165      	bne.n	db862 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x16a>
            MBEDTLS_MPI_CHK( mbedtls_ecp_mul_restartable( grp, &R, pk, &grp->G,
   db796:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   db798:	9301      	str	r3, [sp, #4]
   db79a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   db79c:	9002      	str	r0, [sp, #8]
   db79e:	9300      	str	r3, [sp, #0]
   db7a0:	a911      	add	r1, sp, #68	; 0x44
   db7a2:	ee18 3a10 	vmov	r3, s16
   db7a6:	4632      	mov	r2, r6
   db7a8:	4628      	mov	r0, r5
   db7aa:	f7fe f8a9 	bl	d9900 <mbedtls_ecp_mul_restartable>
   db7ae:	4601      	mov	r1, r0
   db7b0:	2800      	cmp	r0, #0
   db7b2:	d156      	bne.n	db862 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x16a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( pr, &R.X, &grp->N ) );
   db7b4:	a911      	add	r1, sp, #68	; 0x44
   db7b6:	464a      	mov	r2, r9
   db7b8:	4638      	mov	r0, r7
   db7ba:	f005 ff76 	bl	e16aa <mbedtls_mpi_mod_mpi>
   db7be:	4601      	mov	r1, r0
   db7c0:	2800      	cmp	r0, #0
   db7c2:	d14e      	bne.n	db862 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x16a>
        while( mbedtls_mpi_cmp_int( pr, 0 ) == 0 );
   db7c4:	4638      	mov	r0, r7
   db7c6:	f005 fc1c 	bl	e1002 <mbedtls_mpi_cmp_int>
   db7ca:	2800      	cmp	r0, #0
   db7cc:	d0d6      	beq.n	db77c <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x84>
        MBEDTLS_MPI_CHK( derive_mpi( grp, &e, buf, blen ) );
   db7ce:	a90b      	add	r1, sp, #44	; 0x2c
   db7d0:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
   db7d4:	4628      	mov	r0, r5
   db7d6:	f7ff ff5d 	bl	db694 <_ZL10derive_mpiPK17mbedtls_ecp_groupP11mbedtls_mpiPKhj>
   db7da:	4601      	mov	r1, r0
   db7dc:	2800      	cmp	r0, #0
   db7de:	d140      	bne.n	db862 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x16a>
        MBEDTLS_MPI_CHK( mbedtls_ecp_gen_privkey( grp, &t, f_rng_blind,
   db7e0:	a90e      	add	r1, sp, #56	; 0x38
   db7e2:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
   db7e6:	4628      	mov	r0, r5
   db7e8:	f7fe fa4a 	bl	d9c80 <mbedtls_ecp_gen_privkey>
   db7ec:	4601      	mov	r1, r0
   db7ee:	2800      	cmp	r0, #0
   db7f0:	d137      	bne.n	db862 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x16a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( s, pr, d ) );
   db7f2:	4639      	mov	r1, r7
   db7f4:	4642      	mov	r2, r8
   db7f6:	4620      	mov	r0, r4
   db7f8:	f005 fd1f 	bl	e123a <mbedtls_mpi_mul_mpi>
   db7fc:	4601      	mov	r1, r0
   db7fe:	bb80      	cbnz	r0, db862 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x16a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &e, &e, s ) );
   db800:	a90b      	add	r1, sp, #44	; 0x2c
   db802:	4608      	mov	r0, r1
   db804:	4622      	mov	r2, r4
   db806:	f005 fca7 	bl	e1158 <mbedtls_mpi_add_mpi>
   db80a:	4601      	mov	r1, r0
   db80c:	bb48      	cbnz	r0, db862 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x16a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &e, &e, &t ) );
   db80e:	a90b      	add	r1, sp, #44	; 0x2c
   db810:	4608      	mov	r0, r1
   db812:	aa0e      	add	r2, sp, #56	; 0x38
   db814:	f005 fd11 	bl	e123a <mbedtls_mpi_mul_mpi>
   db818:	4601      	mov	r1, r0
   db81a:	bb10      	cbnz	r0, db862 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x16a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( pk, pk, &t ) );
   db81c:	4631      	mov	r1, r6
   db81e:	aa0e      	add	r2, sp, #56	; 0x38
   db820:	4630      	mov	r0, r6
   db822:	f005 fd0a 	bl	e123a <mbedtls_mpi_mul_mpi>
   db826:	4601      	mov	r1, r0
   db828:	b9d8      	cbnz	r0, db862 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x16a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( s, pk, &grp->N ) );
   db82a:	4631      	mov	r1, r6
   db82c:	464a      	mov	r2, r9
   db82e:	4620      	mov	r0, r4
   db830:	f006 fa4f 	bl	e1cd2 <mbedtls_mpi_inv_mod>
   db834:	4601      	mov	r1, r0
   db836:	b9a0      	cbnz	r0, db862 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x16a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( s, s, &e ) );
   db838:	4621      	mov	r1, r4
   db83a:	aa0b      	add	r2, sp, #44	; 0x2c
   db83c:	4620      	mov	r0, r4
   db83e:	f005 fcfc 	bl	e123a <mbedtls_mpi_mul_mpi>
   db842:	4601      	mov	r1, r0
   db844:	b968      	cbnz	r0, db862 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x16a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( s, s, &grp->N ) );
   db846:	4621      	mov	r1, r4
   db848:	464a      	mov	r2, r9
   db84a:	4620      	mov	r0, r4
   db84c:	f005 ff2d 	bl	e16aa <mbedtls_mpi_mod_mpi>
   db850:	4601      	mov	r1, r0
   db852:	b930      	cbnz	r0, db862 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x16a>
    while( mbedtls_mpi_cmp_int( s, 0 ) == 0 );
   db854:	9005      	str	r0, [sp, #20]
   db856:	4620      	mov	r0, r4
   db858:	f005 fbd3 	bl	e1002 <mbedtls_mpi_cmp_int>
   db85c:	9905      	ldr	r1, [sp, #20]
   db85e:	2800      	cmp	r0, #0
   db860:	d080      	beq.n	db764 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x6c>
    mbedtls_ecp_point_free( &R );
   db862:	a811      	add	r0, sp, #68	; 0x44
   db864:	9104      	str	r1, [sp, #16]
   db866:	f7fd faba 	bl	d8dde <mbedtls_ecp_point_free>
    mbedtls_mpi_free( &k ); mbedtls_mpi_free( &e ); mbedtls_mpi_free( &t );
   db86a:	a808      	add	r0, sp, #32
   db86c:	f005 f8af 	bl	e09ce <mbedtls_mpi_free>
   db870:	a80b      	add	r0, sp, #44	; 0x2c
   db872:	f005 f8ac 	bl	e09ce <mbedtls_mpi_free>
   db876:	a80e      	add	r0, sp, #56	; 0x38
   db878:	f005 f8a9 	bl	e09ce <mbedtls_mpi_free>
    return( ret );
   db87c:	9904      	ldr	r1, [sp, #16]
   db87e:	e74f      	b.n	db720 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x28>
            ret = MBEDTLS_ERR_ECP_RANDOM_FAILED;
   db880:	4902      	ldr	r1, [pc, #8]	; (db88c <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x194>)
   db882:	e7ee      	b.n	db862 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x16a>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   db884:	4902      	ldr	r1, [pc, #8]	; (db890 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x198>)
   db886:	e74b      	b.n	db720 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x28>
   db888:	ffffb380 	.word	0xffffb380
   db88c:	ffffb300 	.word	0xffffb300
   db890:	ffffb080 	.word	0xffffb080

000db894 <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.0>:
#if !defined(MBEDTLS_ECDSA_VERIFY_ALT)
/*
 * Verify ECDSA signature of hashed message (SEC1 4.1.4)
 * Obviously, compared to SEC1 4.1.3, we skip step 2 (hash message)
 */
static int ecdsa_verify_restartable( mbedtls_ecp_group *grp,
   db894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   db898:	b09a      	sub	sp, #104	; 0x68
   db89a:	4605      	mov	r5, r0
    int ret;
    mbedtls_mpi e, s_inv, u1, u2;
    mbedtls_ecp_point R;
    mbedtls_mpi *pu1 = &u1, *pu2 = &u2;

    mbedtls_ecp_point_init( &R );
   db89c:	a811      	add	r0, sp, #68	; 0x44
static int ecdsa_verify_restartable( mbedtls_ecp_group *grp,
   db89e:	4698      	mov	r8, r3
   db8a0:	460c      	mov	r4, r1
   db8a2:	4692      	mov	sl, r2
   db8a4:	e9dd 6922 	ldrd	r6, r9, [sp, #136]	; 0x88
    mbedtls_ecp_point_init( &R );
   db8a8:	f7fd fa5c 	bl	d8d64 <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &e ); mbedtls_mpi_init( &s_inv );
   db8ac:	a805      	add	r0, sp, #20
   db8ae:	f005 f888 	bl	e09c2 <mbedtls_mpi_init>
   db8b2:	a808      	add	r0, sp, #32
   db8b4:	f005 f885 	bl	e09c2 <mbedtls_mpi_init>
    mbedtls_mpi_init( &u1 ); mbedtls_mpi_init( &u2 );
   db8b8:	a80b      	add	r0, sp, #44	; 0x2c
   db8ba:	f005 f882 	bl	e09c2 <mbedtls_mpi_init>
   db8be:	a80e      	add	r0, sp, #56	; 0x38
   db8c0:	f005 f87f 	bl	e09c2 <mbedtls_mpi_init>

    /* Fail cleanly on curves such as Curve25519 that can't be used for ECDSA */
    if( grp->N.p == NULL )
   db8c4:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   db8c6:	2b00      	cmp	r3, #0
   db8c8:	d078      	beq.n	db9bc <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.0+0x128>
#endif /* MBEDTLS_ECP_RESTARTABLE */

    /*
     * Step 1: make sure r and s are in range 1..n-1
     */
    if( mbedtls_mpi_cmp_int( r, 1 ) < 0 || mbedtls_mpi_cmp_mpi( r, &grp->N ) >= 0 ||
   db8ca:	2101      	movs	r1, #1
   db8cc:	4630      	mov	r0, r6
   db8ce:	f005 fb98 	bl	e1002 <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( s, 1 ) < 0 || mbedtls_mpi_cmp_mpi( s, &grp->N ) >= 0 )
   db8d2:	2800      	cmp	r0, #0
   db8d4:	db5e      	blt.n	db994 <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.0+0x100>
    if( mbedtls_mpi_cmp_int( r, 1 ) < 0 || mbedtls_mpi_cmp_mpi( r, &grp->N ) >= 0 ||
   db8d6:	f105 074c 	add.w	r7, r5, #76	; 0x4c
   db8da:	4639      	mov	r1, r7
   db8dc:	4630      	mov	r0, r6
   db8de:	f005 fb4f 	bl	e0f80 <mbedtls_mpi_cmp_mpi>
   db8e2:	2800      	cmp	r0, #0
   db8e4:	da56      	bge.n	db994 <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.0+0x100>
        mbedtls_mpi_cmp_int( s, 1 ) < 0 || mbedtls_mpi_cmp_mpi( s, &grp->N ) >= 0 )
   db8e6:	2101      	movs	r1, #1
   db8e8:	4648      	mov	r0, r9
   db8ea:	f005 fb8a 	bl	e1002 <mbedtls_mpi_cmp_int>
    if( mbedtls_mpi_cmp_int( r, 1 ) < 0 || mbedtls_mpi_cmp_mpi( r, &grp->N ) >= 0 ||
   db8ee:	2800      	cmp	r0, #0
   db8f0:	db50      	blt.n	db994 <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.0+0x100>
        mbedtls_mpi_cmp_int( s, 1 ) < 0 || mbedtls_mpi_cmp_mpi( s, &grp->N ) >= 0 )
   db8f2:	4639      	mov	r1, r7
   db8f4:	4648      	mov	r0, r9
   db8f6:	f005 fb43 	bl	e0f80 <mbedtls_mpi_cmp_mpi>
   db8fa:	2800      	cmp	r0, #0
   db8fc:	da4a      	bge.n	db994 <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.0+0x100>
    }

    /*
     * Step 3: derive MPI from hashed message
     */
    MBEDTLS_MPI_CHK( derive_mpi( grp, &e, buf, blen ) );
   db8fe:	4622      	mov	r2, r4
   db900:	4653      	mov	r3, sl
   db902:	a905      	add	r1, sp, #20
   db904:	4628      	mov	r0, r5
   db906:	f7ff fec5 	bl	db694 <_ZL10derive_mpiPK17mbedtls_ecp_groupP11mbedtls_mpiPKhj>
   db90a:	4604      	mov	r4, r0
   db90c:	2800      	cmp	r0, #0
   db90e:	d142      	bne.n	db996 <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.0+0x102>
    /*
     * Step 4: u1 = e / s mod n, u2 = r / s mod n
     */
    ECDSA_BUDGET( MBEDTLS_ECP_OPS_CHK + MBEDTLS_ECP_OPS_INV + 2 );

    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &s_inv, s, &grp->N ) );
   db910:	463a      	mov	r2, r7
   db912:	4649      	mov	r1, r9
   db914:	a808      	add	r0, sp, #32
   db916:	f006 f9dc 	bl	e1cd2 <mbedtls_mpi_inv_mod>
   db91a:	4604      	mov	r4, r0
   db91c:	2800      	cmp	r0, #0
   db91e:	d13a      	bne.n	db996 <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.0+0x102>

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( pu1, &e, &s_inv ) );
   db920:	aa08      	add	r2, sp, #32
   db922:	a905      	add	r1, sp, #20
   db924:	a80b      	add	r0, sp, #44	; 0x2c
   db926:	f005 fc88 	bl	e123a <mbedtls_mpi_mul_mpi>
   db92a:	4604      	mov	r4, r0
   db92c:	bb98      	cbnz	r0, db996 <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.0+0x102>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( pu1, pu1, &grp->N ) );
   db92e:	a90b      	add	r1, sp, #44	; 0x2c
   db930:	463a      	mov	r2, r7
   db932:	4608      	mov	r0, r1
   db934:	f005 feb9 	bl	e16aa <mbedtls_mpi_mod_mpi>
   db938:	4604      	mov	r4, r0
   db93a:	bb60      	cbnz	r0, db996 <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.0+0x102>

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( pu2, r, &s_inv ) );
   db93c:	aa08      	add	r2, sp, #32
   db93e:	4631      	mov	r1, r6
   db940:	a80e      	add	r0, sp, #56	; 0x38
   db942:	f005 fc7a 	bl	e123a <mbedtls_mpi_mul_mpi>
   db946:	4604      	mov	r4, r0
   db948:	bb28      	cbnz	r0, db996 <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.0+0x102>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( pu2, pu2, &grp->N ) );
   db94a:	a90e      	add	r1, sp, #56	; 0x38
   db94c:	463a      	mov	r2, r7
   db94e:	4608      	mov	r0, r1
   db950:	f005 feab 	bl	e16aa <mbedtls_mpi_mod_mpi>
   db954:	4604      	mov	r4, r0
   db956:	b9f0      	cbnz	r0, db996 <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.0+0x102>
muladd:
#endif
    /*
     * Step 5: R = u1 G + u2 Q
     */
    MBEDTLS_MPI_CHK( mbedtls_ecp_muladd_restartable( grp,
   db958:	a90e      	add	r1, sp, #56	; 0x38
   db95a:	e9cd 8001 	strd	r8, r0, [sp, #4]
   db95e:	9100      	str	r1, [sp, #0]
   db960:	f105 0328 	add.w	r3, r5, #40	; 0x28
   db964:	aa0b      	add	r2, sp, #44	; 0x2c
   db966:	a911      	add	r1, sp, #68	; 0x44
   db968:	4628      	mov	r0, r5
   db96a:	f7fe f94d 	bl	d9c08 <mbedtls_ecp_muladd_restartable>
   db96e:	4604      	mov	r4, r0
   db970:	b988      	cbnz	r0, db996 <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.0+0x102>
                     &R, pu1, &grp->G, pu2, Q, ECDSA_RS_ECP ) );

    if( mbedtls_ecp_is_zero( &R ) )
   db972:	a811      	add	r0, sp, #68	; 0x44
   db974:	f7fd fe0e 	bl	d9594 <mbedtls_ecp_is_zero>
   db978:	b960      	cbnz	r0, db994 <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.0+0x100>

    /*
     * Step 6: convert xR to an integer (no-op)
     * Step 7: reduce xR mod n (gives v)
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &R.X, &R.X, &grp->N ) );
   db97a:	a911      	add	r1, sp, #68	; 0x44
   db97c:	463a      	mov	r2, r7
   db97e:	4608      	mov	r0, r1
   db980:	f005 fe93 	bl	e16aa <mbedtls_mpi_mod_mpi>
   db984:	4604      	mov	r4, r0
   db986:	b930      	cbnz	r0, db996 <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.0+0x102>

    /*
     * Step 8: check if v (that is, R.X) is equal to r
     */
    if( mbedtls_mpi_cmp_mpi( &R.X, r ) != 0 )
   db988:	4631      	mov	r1, r6
   db98a:	a811      	add	r0, sp, #68	; 0x44
   db98c:	f005 faf8 	bl	e0f80 <mbedtls_mpi_cmp_mpi>
   db990:	4604      	mov	r4, r0
   db992:	b100      	cbz	r0, db996 <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.0+0x102>
    {
        ret = MBEDTLS_ERR_ECP_VERIFY_FAILED;
   db994:	4c0a      	ldr	r4, [pc, #40]	; (db9c0 <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.0+0x12c>)
        goto cleanup;
    }

cleanup:
    mbedtls_ecp_point_free( &R );
   db996:	a811      	add	r0, sp, #68	; 0x44
   db998:	f7fd fa21 	bl	d8dde <mbedtls_ecp_point_free>
    mbedtls_mpi_free( &e ); mbedtls_mpi_free( &s_inv );
   db99c:	a805      	add	r0, sp, #20
   db99e:	f005 f816 	bl	e09ce <mbedtls_mpi_free>
   db9a2:	a808      	add	r0, sp, #32
   db9a4:	f005 f813 	bl	e09ce <mbedtls_mpi_free>
    mbedtls_mpi_free( &u1 ); mbedtls_mpi_free( &u2 );
   db9a8:	a80b      	add	r0, sp, #44	; 0x2c
   db9aa:	f005 f810 	bl	e09ce <mbedtls_mpi_free>
   db9ae:	a80e      	add	r0, sp, #56	; 0x38
   db9b0:	f005 f80d 	bl	e09ce <mbedtls_mpi_free>

    ECDSA_RS_LEAVE( ver );

    return( ret );
}
   db9b4:	4620      	mov	r0, r4
   db9b6:	b01a      	add	sp, #104	; 0x68
   db9b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   db9bc:	4c01      	ldr	r4, [pc, #4]	; (db9c4 <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.0+0x130>)
   db9be:	e7f9      	b.n	db9b4 <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.0+0x120>
   db9c0:	ffffb200 	.word	0xffffb200
   db9c4:	ffffb080 	.word	0xffffb080

000db9c8 <mbedtls_ecdsa_write_signature_restartable>:
                           const unsigned char *hash, size_t hlen,
                           unsigned char *sig, size_t *slen,
                           int (*f_rng)(void *, unsigned char *, size_t),
                           void *p_rng,
                           mbedtls_ecdsa_restart_ctx *rs_ctx )
{
   db9c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   db9cc:	b0b2      	sub	sp, #200	; 0xc8
   db9ce:	e9dd 783a 	ldrd	r7, r8, [sp, #232]	; 0xe8
   db9d2:	4604      	mov	r4, r0
    ECDSA_VALIDATE_RET( ctx  != NULL );
    ECDSA_VALIDATE_RET( hash != NULL );
    ECDSA_VALIDATE_RET( sig  != NULL );
    ECDSA_VALIDATE_RET( slen != NULL );

    mbedtls_mpi_init( &r );
   db9d4:	a808      	add	r0, sp, #32
{
   db9d6:	461e      	mov	r6, r3
   db9d8:	4615      	mov	r5, r2
    mbedtls_mpi_init( &r );
   db9da:	f004 fff2 	bl	e09c2 <mbedtls_mpi_init>
    mbedtls_mpi_init( &s );
   db9de:	a80b      	add	r0, sp, #44	; 0x2c
   db9e0:	f004 ffef 	bl	e09c2 <mbedtls_mpi_init>
#if defined(MBEDTLS_ECDSA_SIGN_ALT)
    MBEDTLS_MPI_CHK( mbedtls_ecdsa_sign( &ctx->grp, &r, &s, &ctx->d,
                         hash, hlen, f_rng, p_rng ) );
#else
    /* Use the same RNG for both blinding and ephemeral key generation */
    MBEDTLS_MPI_CHK( ecdsa_sign_restartable( &ctx->grp, &r, &s, &ctx->d,
   db9e4:	e9cd 5600 	strd	r5, r6, [sp]
   db9e8:	e9cd 7804 	strd	r7, r8, [sp, #16]
   db9ec:	e9cd 7802 	strd	r7, r8, [sp, #8]
   db9f0:	f104 037c 	add.w	r3, r4, #124	; 0x7c
   db9f4:	aa0b      	add	r2, sp, #44	; 0x2c
   db9f6:	a908      	add	r1, sp, #32
   db9f8:	4620      	mov	r0, r4
   db9fa:	f7ff fe7d 	bl	db6f8 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0>
   db9fe:	4606      	mov	r6, r0
   dba00:	bb50      	cbnz	r0, dba58 <mbedtls_ecdsa_write_signature_restartable+0x90>
    unsigned char *p = buf + sizeof( buf );
   dba02:	f10d 03c5 	add.w	r3, sp, #197	; 0xc5
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &p, buf, s ) );
   dba06:	aa0b      	add	r2, sp, #44	; 0x2c
   dba08:	a90e      	add	r1, sp, #56	; 0x38
   dba0a:	a807      	add	r0, sp, #28
    unsigned char *p = buf + sizeof( buf );
   dba0c:	9307      	str	r3, [sp, #28]
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &p, buf, s ) );
   dba0e:	f7fa f9e1 	bl	d5dd4 <mbedtls_asn1_write_mpi>
   dba12:	1e04      	subs	r4, r0, #0
   dba14:	db1f      	blt.n	dba56 <mbedtls_ecdsa_write_signature_restartable+0x8e>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &p, buf, r ) );
   dba16:	aa08      	add	r2, sp, #32
   dba18:	a90e      	add	r1, sp, #56	; 0x38
   dba1a:	a807      	add	r0, sp, #28
   dba1c:	f7fa f9da 	bl	d5dd4 <mbedtls_asn1_write_mpi>
   dba20:	1e05      	subs	r5, r0, #0
   dba22:	db23      	blt.n	dba6c <mbedtls_ecdsa_write_signature_restartable+0xa4>
   dba24:	4425      	add	r5, r4
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &p, buf, len ) );
   dba26:	462a      	mov	r2, r5
   dba28:	a90e      	add	r1, sp, #56	; 0x38
   dba2a:	a807      	add	r0, sp, #28
   dba2c:	f7fa f950 	bl	d5cd0 <mbedtls_asn1_write_len>
   dba30:	1e04      	subs	r4, r0, #0
   dba32:	db10      	blt.n	dba56 <mbedtls_ecdsa_write_signature_restartable+0x8e>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &p, buf,
   dba34:	2230      	movs	r2, #48	; 0x30
   dba36:	a90e      	add	r1, sp, #56	; 0x38
   dba38:	a807      	add	r0, sp, #28
   dba3a:	f7fa f9bd 	bl	d5db8 <mbedtls_asn1_write_tag>
   dba3e:	2800      	cmp	r0, #0
   dba40:	db16      	blt.n	dba70 <mbedtls_ecdsa_write_signature_restartable+0xa8>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &p, buf, len ) );
   dba42:	442c      	add	r4, r5
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &p, buf,
   dba44:	4404      	add	r4, r0
    memcpy( sig, p, len );
   dba46:	4622      	mov	r2, r4
   dba48:	9907      	ldr	r1, [sp, #28]
   dba4a:	9838      	ldr	r0, [sp, #224]	; 0xe0
   dba4c:	f00c ff3e 	bl	e88cc <memcpy>
    *slen = len;
   dba50:	9b39      	ldr	r3, [sp, #228]	; 0xe4
   dba52:	601c      	str	r4, [r3, #0]
    return( 0 );
   dba54:	4634      	mov	r4, r6
                                             hash, hlen, f_rng, p_rng, f_rng,
                                             p_rng, rs_ctx ) );
#endif /* MBEDTLS_ECDSA_SIGN_ALT */
#endif /* MBEDTLS_ECDSA_DETERMINISTIC */

    MBEDTLS_MPI_CHK( ecdsa_signature_to_asn1( &r, &s, sig, slen ) );
   dba56:	4626      	mov	r6, r4

cleanup:
    mbedtls_mpi_free( &r );
   dba58:	a808      	add	r0, sp, #32
   dba5a:	f004 ffb8 	bl	e09ce <mbedtls_mpi_free>
    mbedtls_mpi_free( &s );
   dba5e:	a80b      	add	r0, sp, #44	; 0x2c
   dba60:	f004 ffb5 	bl	e09ce <mbedtls_mpi_free>

    return( ret );
}
   dba64:	4630      	mov	r0, r6
   dba66:	b032      	add	sp, #200	; 0xc8
   dba68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dba6c:	462c      	mov	r4, r5
   dba6e:	e7f2      	b.n	dba56 <mbedtls_ecdsa_write_signature_restartable+0x8e>
   dba70:	4604      	mov	r4, r0
   dba72:	e7f0      	b.n	dba56 <mbedtls_ecdsa_write_signature_restartable+0x8e>

000dba74 <mbedtls_ecdsa_write_signature>:
                                 mbedtls_md_type_t md_alg,
                                 const unsigned char *hash, size_t hlen,
                                 unsigned char *sig, size_t *slen,
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng )
{
   dba74:	b510      	push	{r4, lr}
   dba76:	b086      	sub	sp, #24
    ECDSA_VALIDATE_RET( ctx  != NULL );
    ECDSA_VALIDATE_RET( hash != NULL );
    ECDSA_VALIDATE_RET( sig  != NULL );
    ECDSA_VALIDATE_RET( slen != NULL );
    return( mbedtls_ecdsa_write_signature_restartable(
   dba78:	2400      	movs	r4, #0
   dba7a:	9404      	str	r4, [sp, #16]
   dba7c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   dba7e:	9403      	str	r4, [sp, #12]
   dba80:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   dba82:	9402      	str	r4, [sp, #8]
   dba84:	9c09      	ldr	r4, [sp, #36]	; 0x24
   dba86:	9401      	str	r4, [sp, #4]
   dba88:	9c08      	ldr	r4, [sp, #32]
   dba8a:	9400      	str	r4, [sp, #0]
   dba8c:	f7ff ff9c 	bl	db9c8 <mbedtls_ecdsa_write_signature_restartable>
                ctx, md_alg, hash, hlen, sig, slen, f_rng, p_rng, NULL ) );
}
   dba90:	b006      	add	sp, #24
   dba92:	bd10      	pop	{r4, pc}

000dba94 <mbedtls_ecdsa_read_signature_restartable>:
 */
int mbedtls_ecdsa_read_signature_restartable( mbedtls_ecdsa_context *ctx,
                          const unsigned char *hash, size_t hlen,
                          const unsigned char *sig, size_t slen,
                          mbedtls_ecdsa_restart_ctx *rs_ctx )
{
   dba94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dba98:	b08a      	sub	sp, #40	; 0x28
    mbedtls_mpi r, s;
    ECDSA_VALIDATE_RET( ctx  != NULL );
    ECDSA_VALIDATE_RET( hash != NULL );
    ECDSA_VALIDATE_RET( sig  != NULL );

    mbedtls_mpi_init( &r );
   dba9a:	af04      	add	r7, sp, #16
    const unsigned char *end = sig + slen;
   dba9c:	9d12      	ldr	r5, [sp, #72]	; 0x48
    unsigned char *p = (unsigned char *) sig;
   dba9e:	9302      	str	r3, [sp, #8]
{
   dbaa0:	4680      	mov	r8, r0
    mbedtls_mpi_init( &s );
   dbaa2:	ae07      	add	r6, sp, #28
    mbedtls_mpi_init( &r );
   dbaa4:	4638      	mov	r0, r7
    const unsigned char *end = sig + slen;
   dbaa6:	441d      	add	r5, r3
{
   dbaa8:	4689      	mov	r9, r1
   dbaaa:	4692      	mov	sl, r2
    mbedtls_mpi_init( &r );
   dbaac:	f004 ff89 	bl	e09c2 <mbedtls_mpi_init>
    mbedtls_mpi_init( &s );
   dbab0:	4630      	mov	r0, r6
   dbab2:	f004 ff86 	bl	e09c2 <mbedtls_mpi_init>

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   dbab6:	2330      	movs	r3, #48	; 0x30
   dbab8:	aa03      	add	r2, sp, #12
   dbaba:	4629      	mov	r1, r5
   dbabc:	a802      	add	r0, sp, #8
   dbabe:	f7fa fc89 	bl	d63d4 <mbedtls_asn1_get_tag>
   dbac2:	b158      	cbz	r0, dbadc <mbedtls_ecdsa_read_signature_restartable+0x48>
    }

    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &r ) ) != 0 ||
        ( ret = mbedtls_asn1_get_mpi( &p, end, &s ) ) != 0 )
    {
        ret += MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
   dbac4:	f5a0 449f 	sub.w	r4, r0, #20352	; 0x4f80
     * error code if the valid signature is followed by more data. */
    if( p != end )
        ret = MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH;

cleanup:
    mbedtls_mpi_free( &r );
   dbac8:	4638      	mov	r0, r7
   dbaca:	f004 ff80 	bl	e09ce <mbedtls_mpi_free>
    mbedtls_mpi_free( &s );
   dbace:	4630      	mov	r0, r6
   dbad0:	f004 ff7d 	bl	e09ce <mbedtls_mpi_free>

    return( ret );
}
   dbad4:	4620      	mov	r0, r4
   dbad6:	b00a      	add	sp, #40	; 0x28
   dbad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if( p + len != end )
   dbadc:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   dbae0:	4413      	add	r3, r2
   dbae2:	429d      	cmp	r5, r3
   dbae4:	d11f      	bne.n	dbb26 <mbedtls_ecdsa_read_signature_restartable+0x92>
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &r ) ) != 0 ||
   dbae6:	463a      	mov	r2, r7
   dbae8:	4629      	mov	r1, r5
   dbaea:	a802      	add	r0, sp, #8
   dbaec:	f7fa fcc3 	bl	d6476 <mbedtls_asn1_get_mpi>
   dbaf0:	2800      	cmp	r0, #0
   dbaf2:	d1e7      	bne.n	dbac4 <mbedtls_ecdsa_read_signature_restartable+0x30>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &s ) ) != 0 )
   dbaf4:	4632      	mov	r2, r6
   dbaf6:	4629      	mov	r1, r5
   dbaf8:	a802      	add	r0, sp, #8
   dbafa:	f7fa fcbc 	bl	d6476 <mbedtls_asn1_get_mpi>
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &r ) ) != 0 ||
   dbafe:	2800      	cmp	r0, #0
   dbb00:	d1e0      	bne.n	dbac4 <mbedtls_ecdsa_read_signature_restartable+0x30>
    if( ( ret = ecdsa_verify_restartable( &ctx->grp, hash, hlen,
   dbb02:	e9cd 7600 	strd	r7, r6, [sp]
   dbb06:	f108 0388 	add.w	r3, r8, #136	; 0x88
   dbb0a:	4652      	mov	r2, sl
   dbb0c:	4649      	mov	r1, r9
   dbb0e:	4640      	mov	r0, r8
   dbb10:	f7ff fec0 	bl	db894 <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.0>
   dbb14:	4604      	mov	r4, r0
   dbb16:	2800      	cmp	r0, #0
   dbb18:	d1d6      	bne.n	dbac8 <mbedtls_ecdsa_read_signature_restartable+0x34>
        ret = MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH;
   dbb1a:	9a02      	ldr	r2, [sp, #8]
   dbb1c:	4b03      	ldr	r3, [pc, #12]	; (dbb2c <mbedtls_ecdsa_read_signature_restartable+0x98>)
   dbb1e:	42aa      	cmp	r2, r5
   dbb20:	bf18      	it	ne
   dbb22:	461c      	movne	r4, r3
   dbb24:	e7d0      	b.n	dbac8 <mbedtls_ecdsa_read_signature_restartable+0x34>
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA +
   dbb26:	4c02      	ldr	r4, [pc, #8]	; (dbb30 <mbedtls_ecdsa_read_signature_restartable+0x9c>)
   dbb28:	e7ce      	b.n	dbac8 <mbedtls_ecdsa_read_signature_restartable+0x34>
   dbb2a:	bf00      	nop
   dbb2c:	ffffb400 	.word	0xffffb400
   dbb30:	ffffb01a 	.word	0xffffb01a

000dbb34 <mbedtls_ecdsa_read_signature>:
{
   dbb34:	b513      	push	{r0, r1, r4, lr}
    return( mbedtls_ecdsa_read_signature_restartable(
   dbb36:	2400      	movs	r4, #0
   dbb38:	9401      	str	r4, [sp, #4]
   dbb3a:	9c04      	ldr	r4, [sp, #16]
   dbb3c:	9400      	str	r4, [sp, #0]
   dbb3e:	f7ff ffa9 	bl	dba94 <mbedtls_ecdsa_read_signature_restartable>
}
   dbb42:	b002      	add	sp, #8
   dbb44:	bd10      	pop	{r4, pc}

000dbb46 <mbedtls_ecdsa_init>:
 */
void mbedtls_ecdsa_init( mbedtls_ecdsa_context *ctx )
{
    ECDSA_VALIDATE( ctx != NULL );

    mbedtls_ecp_keypair_init( ctx );
   dbb46:	f7fd b93c 	b.w	d8dc2 <mbedtls_ecp_keypair_init>

000dbb4a <mbedtls_ecdsa_free>:
/*
 * Free context
 */
void mbedtls_ecdsa_free( mbedtls_ecdsa_context *ctx )
{
    if( ctx == NULL )
   dbb4a:	b108      	cbz	r0, dbb50 <mbedtls_ecdsa_free+0x6>
        return;

    mbedtls_ecp_keypair_free( ctx );
   dbb4c:	f7fd b97b 	b.w	d8e46 <mbedtls_ecp_keypair_free>
}
   dbb50:	4770      	bx	lr

000dbb52 <mbedtls_ecdsa_from_keypair>:
{
   dbb52:	b570      	push	{r4, r5, r6, lr}
   dbb54:	4605      	mov	r5, r0
   dbb56:	460e      	mov	r6, r1
    if( ( ret = mbedtls_ecp_group_copy( &ctx->grp, &key->grp ) ) != 0 ||
   dbb58:	f7fd f99b 	bl	d8e92 <mbedtls_ecp_group_copy>
        ( ret = mbedtls_mpi_copy( &ctx->d, &key->d ) ) != 0 ||
   dbb5c:	4604      	mov	r4, r0
   dbb5e:	b978      	cbnz	r0, dbb80 <mbedtls_ecdsa_from_keypair+0x2e>
   dbb60:	f106 017c 	add.w	r1, r6, #124	; 0x7c
   dbb64:	f105 007c 	add.w	r0, r5, #124	; 0x7c
   dbb68:	f004 ffa8 	bl	e0abc <mbedtls_mpi_copy>
    if( ( ret = mbedtls_ecp_group_copy( &ctx->grp, &key->grp ) ) != 0 ||
   dbb6c:	4604      	mov	r4, r0
   dbb6e:	b938      	cbnz	r0, dbb80 <mbedtls_ecdsa_from_keypair+0x2e>
        ( ret = mbedtls_ecp_copy( &ctx->Q, &key->Q ) ) != 0 )
   dbb70:	f106 0188 	add.w	r1, r6, #136	; 0x88
   dbb74:	f105 0088 	add.w	r0, r5, #136	; 0x88
   dbb78:	f7fd f975 	bl	d8e66 <mbedtls_ecp_copy>
        ( ret = mbedtls_mpi_copy( &ctx->d, &key->d ) ) != 0 ||
   dbb7c:	4604      	mov	r4, r0
   dbb7e:	b110      	cbz	r0, dbb86 <mbedtls_ecdsa_from_keypair+0x34>
        mbedtls_ecdsa_free( ctx );
   dbb80:	4628      	mov	r0, r5
   dbb82:	f7ff ffe2 	bl	dbb4a <mbedtls_ecdsa_free>
}
   dbb86:	4620      	mov	r0, r4
   dbb88:	bd70      	pop	{r4, r5, r6, pc}
	...

000dbb8c <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context>:
 *  }
 */
static int pk_get_rsapubkey( unsigned char **p,
                             const unsigned char *end,
                             mbedtls_rsa_context *rsa )
{
   dbb8c:	b570      	push	{r4, r5, r6, lr}
   dbb8e:	b08a      	sub	sp, #40	; 0x28
   dbb90:	4616      	mov	r6, r2
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   dbb92:	2330      	movs	r3, #48	; 0x30
   dbb94:	aa09      	add	r2, sp, #36	; 0x24
{
   dbb96:	4604      	mov	r4, r0
   dbb98:	460d      	mov	r5, r1
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   dbb9a:	f7fa fc1b 	bl	d63d4 <mbedtls_asn1_get_tag>
   dbb9e:	b118      	cbz	r0, dbba8 <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0x1c>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
   dbba0:	f5a0 506c 	sub.w	r0, r0, #15104	; 0x3b00
    if( *p != end )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
   dbba4:	b00a      	add	sp, #40	; 0x28
   dbba6:	bd70      	pop	{r4, r5, r6, pc}
    if( *p + len != end )
   dbba8:	6823      	ldr	r3, [r4, #0]
   dbbaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
   dbbac:	4413      	add	r3, r2
   dbbae:	429d      	cmp	r5, r3
   dbbb0:	d147      	bne.n	dbc42 <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0xb6>
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
   dbbb2:	2302      	movs	r3, #2
   dbbb4:	aa09      	add	r2, sp, #36	; 0x24
   dbbb6:	4629      	mov	r1, r5
   dbbb8:	4620      	mov	r0, r4
   dbbba:	f7fa fc0b 	bl	d63d4 <mbedtls_asn1_get_tag>
   dbbbe:	4603      	mov	r3, r0
   dbbc0:	b110      	cbz	r0, dbbc8 <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0x3c>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
   dbbc2:	f5a3 506c 	sub.w	r0, r3, #15104	; 0x3b00
   dbbc6:	e7ed      	b.n	dbba4 <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0x18>
    if( ( ret = mbedtls_rsa_import_raw( rsa, *p, len, NULL, 0, NULL, 0,
   dbbc8:	e9cd 0005 	strd	r0, r0, [sp, #20]
   dbbcc:	e9cd 0003 	strd	r0, r0, [sp, #12]
   dbbd0:	e9cd 0001 	strd	r0, r0, [sp, #4]
   dbbd4:	9000      	str	r0, [sp, #0]
   dbbd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   dbbd8:	6821      	ldr	r1, [r4, #0]
   dbbda:	4630      	mov	r0, r6
   dbbdc:	f7fb fb10 	bl	d7200 <mbedtls_rsa_import_raw>
   dbbe0:	b108      	cbz	r0, dbbe6 <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0x5a>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );
   dbbe2:	4819      	ldr	r0, [pc, #100]	; (dbc48 <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0xbc>)
   dbbe4:	e7de      	b.n	dbba4 <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0x18>
    *p += len;
   dbbe6:	6823      	ldr	r3, [r4, #0]
   dbbe8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   dbbea:	4413      	add	r3, r2
   dbbec:	6023      	str	r3, [r4, #0]
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
   dbbee:	aa09      	add	r2, sp, #36	; 0x24
   dbbf0:	2302      	movs	r3, #2
   dbbf2:	4629      	mov	r1, r5
   dbbf4:	4620      	mov	r0, r4
   dbbf6:	f7fa fbed 	bl	d63d4 <mbedtls_asn1_get_tag>
   dbbfa:	4603      	mov	r3, r0
   dbbfc:	2800      	cmp	r0, #0
   dbbfe:	d1e0      	bne.n	dbbc2 <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0x36>
    if( ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
   dbc00:	9a09      	ldr	r2, [sp, #36]	; 0x24
   dbc02:	9206      	str	r2, [sp, #24]
   dbc04:	6822      	ldr	r2, [r4, #0]
   dbc06:	e9cd 0002 	strd	r0, r0, [sp, #8]
   dbc0a:	e9cd 0204 	strd	r0, r2, [sp, #16]
   dbc0e:	e9cd 0000 	strd	r0, r0, [sp]
   dbc12:	4602      	mov	r2, r0
   dbc14:	4601      	mov	r1, r0
   dbc16:	4630      	mov	r0, r6
   dbc18:	f7fb faf2 	bl	d7200 <mbedtls_rsa_import_raw>
   dbc1c:	2800      	cmp	r0, #0
   dbc1e:	d1e0      	bne.n	dbbe2 <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0x56>
    *p += len;
   dbc20:	6823      	ldr	r3, [r4, #0]
   dbc22:	9a09      	ldr	r2, [sp, #36]	; 0x24
   dbc24:	4413      	add	r3, r2
   dbc26:	6023      	str	r3, [r4, #0]
    if( mbedtls_rsa_complete( rsa ) != 0 ||
   dbc28:	4630      	mov	r0, r6
   dbc2a:	f7fb fb2b 	bl	d7284 <mbedtls_rsa_complete>
   dbc2e:	2800      	cmp	r0, #0
   dbc30:	d1d7      	bne.n	dbbe2 <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0x56>
        mbedtls_rsa_check_pubkey( rsa ) != 0 )
   dbc32:	4630      	mov	r0, r6
   dbc34:	f7fb fbc4 	bl	d73c0 <mbedtls_rsa_check_pubkey>
    if( mbedtls_rsa_complete( rsa ) != 0 ||
   dbc38:	2800      	cmp	r0, #0
   dbc3a:	d1d2      	bne.n	dbbe2 <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0x56>
    if( *p != end )
   dbc3c:	6823      	ldr	r3, [r4, #0]
   dbc3e:	42ab      	cmp	r3, r5
   dbc40:	d0b0      	beq.n	dbba4 <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0x18>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   dbc42:	4802      	ldr	r0, [pc, #8]	; (dbc4c <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0xc0>)
   dbc44:	e7ae      	b.n	dbba4 <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0x18>
   dbc46:	bf00      	nop
   dbc48:	ffffc500 	.word	0xffffc500
   dbc4c:	ffffc49a 	.word	0xffffc49a

000dbc50 <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group>:
{
   dbc50:	b513      	push	{r0, r1, r4, lr}
    if( params->tag == MBEDTLS_ASN1_OID )
   dbc52:	6803      	ldr	r3, [r0, #0]
   dbc54:	2b06      	cmp	r3, #6
{
   dbc56:	460c      	mov	r4, r1
    if( params->tag == MBEDTLS_ASN1_OID )
   dbc58:	d002      	beq.n	dbc60 <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group+0x10>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
   dbc5a:	480a      	ldr	r0, [pc, #40]	; (dbc84 <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group+0x34>)
}
   dbc5c:	b002      	add	sp, #8
   dbc5e:	bd10      	pop	{r4, pc}
        if( mbedtls_oid_get_ec_grp( params, &grp_id ) != 0 )
   dbc60:	f10d 0107 	add.w	r1, sp, #7
   dbc64:	f7fe f940 	bl	d9ee8 <mbedtls_oid_get_ec_grp>
   dbc68:	b948      	cbnz	r0, dbc7e <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group+0x2e>
    if( grp->id != MBEDTLS_ECP_DP_NONE && grp->id != grp_id )
   dbc6a:	7823      	ldrb	r3, [r4, #0]
   dbc6c:	f89d 1007 	ldrb.w	r1, [sp, #7]
   dbc70:	b10b      	cbz	r3, dbc76 <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group+0x26>
   dbc72:	428b      	cmp	r3, r1
   dbc74:	d1f1      	bne.n	dbc5a <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group+0xa>
    if( ( ret = mbedtls_ecp_group_load( grp, grp_id ) ) != 0 )
   dbc76:	4620      	mov	r0, r4
   dbc78:	f001 fbea 	bl	dd450 <mbedtls_ecp_group_load>
   dbc7c:	e7ee      	b.n	dbc5c <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group+0xc>
            return( MBEDTLS_ERR_PK_UNKNOWN_NAMED_CURVE );
   dbc7e:	4802      	ldr	r0, [pc, #8]	; (dbc88 <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group+0x38>)
   dbc80:	e7ec      	b.n	dbc5c <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group+0xc>
   dbc82:	bf00      	nop
   dbc84:	ffffc300 	.word	0xffffc300
   dbc88:	ffffc600 	.word	0xffffc600

000dbc8c <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj>:
 * Parse a PKCS#1 encoded private RSA key
 */
static int pk_parse_key_pkcs1_der( mbedtls_rsa_context *rsa,
                                   const unsigned char *key,
                                   size_t keylen )
{
   dbc8c:	b570      	push	{r4, r5, r6, lr}
   dbc8e:	b08e      	sub	sp, #56	; 0x38
   dbc90:	460c      	mov	r4, r1
   dbc92:	4615      	mov	r5, r2
   dbc94:	4606      	mov	r6, r0
    int ret, version;
    size_t len;
    unsigned char *p, *end;

    mbedtls_mpi T;
    mbedtls_mpi_init( &T );
   dbc96:	a80b      	add	r0, sp, #44	; 0x2c
   dbc98:	f004 fe93 	bl	e09c2 <mbedtls_mpi_init>
     *      exponent2         INTEGER,  -- d mod (q-1)
     *      coefficient       INTEGER,  -- (inverse of q) mod p
     *      otherPrimeInfos   OtherPrimeInfos OPTIONAL
     *  }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   dbc9c:	2330      	movs	r3, #48	; 0x30
   dbc9e:	aa09      	add	r2, sp, #36	; 0x24
   dbca0:	1961      	adds	r1, r4, r5
   dbca2:	a80a      	add	r0, sp, #40	; 0x28
    p = (unsigned char *) key;
   dbca4:	940a      	str	r4, [sp, #40]	; 0x28
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   dbca6:	f7fa fb95 	bl	d63d4 <mbedtls_asn1_get_tag>
   dbcaa:	b120      	cbz	r0, dbcb6 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x2a>

    end = p + len;

    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
   dbcac:	f5a0 5474 	sub.w	r4, r0, #15616	; 0x3d00

        mbedtls_rsa_free( rsa );
    }

    return( ret );
}
   dbcb0:	4620      	mov	r0, r4
   dbcb2:	b00e      	add	sp, #56	; 0x38
   dbcb4:	bd70      	pop	{r4, r5, r6, pc}
    end = p + len;
   dbcb6:	e9dd 3509 	ldrd	r3, r5, [sp, #36]	; 0x24
   dbcba:	441d      	add	r5, r3
    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
   dbcbc:	aa08      	add	r2, sp, #32
   dbcbe:	4629      	mov	r1, r5
   dbcc0:	a80a      	add	r0, sp, #40	; 0x28
   dbcc2:	f7fa fbb4 	bl	d642e <mbedtls_asn1_get_int>
   dbcc6:	2800      	cmp	r0, #0
   dbcc8:	d1f0      	bne.n	dbcac <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x20>
    if( version != 0 )
   dbcca:	9b08      	ldr	r3, [sp, #32]
   dbccc:	2b00      	cmp	r3, #0
   dbcce:	f040 80ca 	bne.w	dbe66 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   dbcd2:	2302      	movs	r3, #2
   dbcd4:	aa09      	add	r2, sp, #36	; 0x24
   dbcd6:	4629      	mov	r1, r5
   dbcd8:	a80a      	add	r0, sp, #40	; 0x28
   dbcda:	f7fa fb7b 	bl	d63d4 <mbedtls_asn1_get_tag>
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
   dbcde:	4604      	mov	r4, r0
   dbce0:	2800      	cmp	r0, #0
   dbce2:	f040 80af 	bne.w	dbe44 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1b8>
        ( ret = mbedtls_rsa_import_raw( rsa, p, len, NULL, 0, NULL, 0,
   dbce6:	e9cd 0005 	strd	r0, r0, [sp, #20]
   dbcea:	e9cd 0003 	strd	r0, r0, [sp, #12]
   dbcee:	e9cd 0001 	strd	r0, r0, [sp, #4]
   dbcf2:	9000      	str	r0, [sp, #0]
   dbcf4:	4603      	mov	r3, r0
   dbcf6:	e9dd 2109 	ldrd	r2, r1, [sp, #36]	; 0x24
   dbcfa:	4630      	mov	r0, r6
   dbcfc:	f7fb fa80 	bl	d7200 <mbedtls_rsa_import_raw>
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
   dbd00:	4604      	mov	r4, r0
   dbd02:	2800      	cmp	r0, #0
   dbd04:	f040 809e 	bne.w	dbe44 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1b8>
    p += len;
   dbd08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   dbd0c:	4413      	add	r3, r2
   dbd0e:	930a      	str	r3, [sp, #40]	; 0x28
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   dbd10:	aa09      	add	r2, sp, #36	; 0x24
   dbd12:	2302      	movs	r3, #2
   dbd14:	4629      	mov	r1, r5
   dbd16:	a80a      	add	r0, sp, #40	; 0x28
   dbd18:	f7fa fb5c 	bl	d63d4 <mbedtls_asn1_get_tag>
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
   dbd1c:	4604      	mov	r4, r0
   dbd1e:	2800      	cmp	r0, #0
   dbd20:	f040 8090 	bne.w	dbe44 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1b8>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
   dbd24:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dbd26:	9306      	str	r3, [sp, #24]
   dbd28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dbd2a:	e9cd 0002 	strd	r0, r0, [sp, #8]
   dbd2e:	e9cd 0304 	strd	r0, r3, [sp, #16]
   dbd32:	e9cd 0000 	strd	r0, r0, [sp]
   dbd36:	4603      	mov	r3, r0
   dbd38:	4602      	mov	r2, r0
   dbd3a:	4601      	mov	r1, r0
   dbd3c:	4630      	mov	r0, r6
   dbd3e:	f7fb fa5f 	bl	d7200 <mbedtls_rsa_import_raw>
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
   dbd42:	4604      	mov	r4, r0
   dbd44:	2800      	cmp	r0, #0
   dbd46:	d17d      	bne.n	dbe44 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1b8>
    p += len;
   dbd48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   dbd4c:	4413      	add	r3, r2
   dbd4e:	930a      	str	r3, [sp, #40]	; 0x28
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   dbd50:	aa09      	add	r2, sp, #36	; 0x24
   dbd52:	2302      	movs	r3, #2
   dbd54:	4629      	mov	r1, r5
   dbd56:	a80a      	add	r0, sp, #40	; 0x28
   dbd58:	f7fa fb3c 	bl	d63d4 <mbedtls_asn1_get_tag>
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
   dbd5c:	4604      	mov	r4, r0
   dbd5e:	2800      	cmp	r0, #0
   dbd60:	d170      	bne.n	dbe44 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1b8>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
   dbd62:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dbd64:	9304      	str	r3, [sp, #16]
   dbd66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dbd68:	e9cd 0005 	strd	r0, r0, [sp, #20]
   dbd6c:	e9cd 0302 	strd	r0, r3, [sp, #8]
   dbd70:	e9cd 0000 	strd	r0, r0, [sp]
   dbd74:	4603      	mov	r3, r0
   dbd76:	4602      	mov	r2, r0
   dbd78:	4601      	mov	r1, r0
   dbd7a:	4630      	mov	r0, r6
   dbd7c:	f7fb fa40 	bl	d7200 <mbedtls_rsa_import_raw>
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
   dbd80:	4604      	mov	r4, r0
   dbd82:	2800      	cmp	r0, #0
   dbd84:	d15e      	bne.n	dbe44 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1b8>
    p += len;
   dbd86:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   dbd8a:	4413      	add	r3, r2
   dbd8c:	930a      	str	r3, [sp, #40]	; 0x28
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   dbd8e:	aa09      	add	r2, sp, #36	; 0x24
   dbd90:	2302      	movs	r3, #2
   dbd92:	4629      	mov	r1, r5
   dbd94:	a80a      	add	r0, sp, #40	; 0x28
   dbd96:	f7fa fb1d 	bl	d63d4 <mbedtls_asn1_get_tag>
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
   dbd9a:	4604      	mov	r4, r0
   dbd9c:	2800      	cmp	r0, #0
   dbd9e:	d151      	bne.n	dbe44 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1b8>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, p, len, NULL, 0,
   dbda0:	2200      	movs	r2, #0
   dbda2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dbda4:	9300      	str	r3, [sp, #0]
   dbda6:	e9cd 2205 	strd	r2, r2, [sp, #20]
   dbdaa:	e9cd 2203 	strd	r2, r2, [sp, #12]
   dbdae:	e9cd 2201 	strd	r2, r2, [sp, #4]
   dbdb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dbdb4:	4611      	mov	r1, r2
   dbdb6:	4630      	mov	r0, r6
   dbdb8:	f7fb fa22 	bl	d7200 <mbedtls_rsa_import_raw>
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
   dbdbc:	4604      	mov	r4, r0
   dbdbe:	2800      	cmp	r0, #0
   dbdc0:	d140      	bne.n	dbe44 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1b8>
    p += len;
   dbdc2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   dbdc6:	4413      	add	r3, r2
   dbdc8:	930a      	str	r3, [sp, #40]	; 0x28
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   dbdca:	aa09      	add	r2, sp, #36	; 0x24
   dbdcc:	2302      	movs	r3, #2
   dbdce:	4629      	mov	r1, r5
   dbdd0:	a80a      	add	r0, sp, #40	; 0x28
   dbdd2:	f7fa faff 	bl	d63d4 <mbedtls_asn1_get_tag>
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
   dbdd6:	4604      	mov	r4, r0
   dbdd8:	2800      	cmp	r0, #0
   dbdda:	d133      	bne.n	dbe44 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1b8>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, p, len,
   dbddc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dbdde:	9302      	str	r3, [sp, #8]
   dbde0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dbde2:	e9cd 0005 	strd	r0, r0, [sp, #20]
   dbde6:	e9cd 0300 	strd	r0, r3, [sp]
   dbdea:	e9cd 0003 	strd	r0, r0, [sp, #12]
   dbdee:	4603      	mov	r3, r0
   dbdf0:	4602      	mov	r2, r0
   dbdf2:	4601      	mov	r1, r0
   dbdf4:	4630      	mov	r0, r6
   dbdf6:	f7fb fa03 	bl	d7200 <mbedtls_rsa_import_raw>
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
   dbdfa:	4604      	mov	r4, r0
   dbdfc:	bb10      	cbnz	r0, dbe44 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1b8>
    p += len;
   dbdfe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
    if( ( ret = mbedtls_rsa_complete( rsa ) ) != 0 )
   dbe02:	4630      	mov	r0, r6
    p += len;
   dbe04:	4413      	add	r3, r2
   dbe06:	930a      	str	r3, [sp, #40]	; 0x28
    if( ( ret = mbedtls_rsa_complete( rsa ) ) != 0 )
   dbe08:	f7fb fa3c 	bl	d7284 <mbedtls_rsa_complete>
   dbe0c:	4604      	mov	r4, r0
   dbe0e:	b9c8      	cbnz	r0, dbe44 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1b8>
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
   dbe10:	aa0b      	add	r2, sp, #44	; 0x2c
   dbe12:	4629      	mov	r1, r5
   dbe14:	a80a      	add	r0, sp, #40	; 0x28
   dbe16:	f7fa fb2e 	bl	d6476 <mbedtls_asn1_get_mpi>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
   dbe1a:	4604      	mov	r4, r0
   dbe1c:	b990      	cbnz	r0, dbe44 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1b8>
   dbe1e:	aa0b      	add	r2, sp, #44	; 0x2c
   dbe20:	4629      	mov	r1, r5
   dbe22:	a80a      	add	r0, sp, #40	; 0x28
   dbe24:	f7fa fb27 	bl	d6476 <mbedtls_asn1_get_mpi>
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
   dbe28:	4604      	mov	r4, r0
   dbe2a:	b958      	cbnz	r0, dbe44 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1b8>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 )
   dbe2c:	aa0b      	add	r2, sp, #44	; 0x2c
   dbe2e:	4629      	mov	r1, r5
   dbe30:	a80a      	add	r0, sp, #40	; 0x28
   dbe32:	f7fa fb20 	bl	d6476 <mbedtls_asn1_get_mpi>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
   dbe36:	4604      	mov	r4, r0
   dbe38:	b920      	cbnz	r0, dbe44 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1b8>
        ret = MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
   dbe3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   dbe3c:	4b0b      	ldr	r3, [pc, #44]	; (dbe6c <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1e0>)
   dbe3e:	42aa      	cmp	r2, r5
   dbe40:	bf18      	it	ne
   dbe42:	461c      	movne	r4, r3
    mbedtls_mpi_free( &T );
   dbe44:	a80b      	add	r0, sp, #44	; 0x2c
   dbe46:	f004 fdc2 	bl	e09ce <mbedtls_mpi_free>
    if( ret != 0 )
   dbe4a:	2c00      	cmp	r4, #0
   dbe4c:	f43f af30 	beq.w	dbcb0 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x24>
        if( ( ret & 0xff80 ) == 0 )
   dbe50:	f64f 7380 	movw	r3, #65408	; 0xff80
   dbe54:	421c      	tst	r4, r3
        mbedtls_rsa_free( rsa );
   dbe56:	4630      	mov	r0, r6
            ret = MBEDTLS_ERR_PK_KEY_INVALID_FORMAT;
   dbe58:	bf14      	ite	ne
   dbe5a:	4c05      	ldrne	r4, [pc, #20]	; (dbe70 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1e4>)
            ret = MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret;
   dbe5c:	f5a4 5474 	subeq.w	r4, r4, #15616	; 0x3d00
        mbedtls_rsa_free( rsa );
   dbe60:	f7fc fac6 	bl	d83f0 <mbedtls_rsa_free>
   dbe64:	e724      	b.n	dbcb0 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x24>
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION );
   dbe66:	4c03      	ldr	r4, [pc, #12]	; (dbe74 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1e8>)
   dbe68:	e722      	b.n	dbcb0 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x24>
   dbe6a:	bf00      	nop
   dbe6c:	ffffc29a 	.word	0xffffc29a
   dbe70:	ffffc300 	.word	0xffffc300
   dbe74:	ffffc280 	.word	0xffffc280

000dbe78 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf>:
{
   dbe78:	b530      	push	{r4, r5, lr}
   dbe7a:	4615      	mov	r5, r2
   dbe7c:	b085      	sub	sp, #20
    memset( params, 0, sizeof(mbedtls_asn1_buf) );
   dbe7e:	2200      	movs	r2, #0
   dbe80:	e9c3 2200 	strd	r2, r2, [r3]
   dbe84:	609a      	str	r2, [r3, #8]
    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
   dbe86:	aa01      	add	r2, sp, #4
{
   dbe88:	461c      	mov	r4, r3
    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
   dbe8a:	f7fa fb79 	bl	d6580 <mbedtls_asn1_get_alg>
   dbe8e:	b118      	cbz	r0, dbe98 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x20>
        return( MBEDTLS_ERR_PK_INVALID_ALG + ret );
   dbe90:	f5a0 506a 	sub.w	r0, r0, #14976	; 0x3a80
}
   dbe94:	b005      	add	sp, #20
   dbe96:	bd30      	pop	{r4, r5, pc}
    if( mbedtls_oid_get_pk_alg( &alg_oid, pk_alg ) != 0 )
   dbe98:	4629      	mov	r1, r5
   dbe9a:	a801      	add	r0, sp, #4
   dbe9c:	f7fe f80a 	bl	d9eb4 <mbedtls_oid_get_pk_alg>
   dbea0:	b960      	cbnz	r0, dbebc <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x44>
    if( *pk_alg == MBEDTLS_PK_RSA &&
   dbea2:	782b      	ldrb	r3, [r5, #0]
   dbea4:	2b01      	cmp	r3, #1
   dbea6:	d1f5      	bne.n	dbe94 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x1c>
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
   dbea8:	6823      	ldr	r3, [r4, #0]
    if( *pk_alg == MBEDTLS_PK_RSA &&
   dbeaa:	2b05      	cmp	r3, #5
   dbeac:	d000      	beq.n	dbeb0 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x38>
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
   dbeae:	b93b      	cbnz	r3, dbec0 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x48>
   dbeb0:	6862      	ldr	r2, [r4, #4]
        return( MBEDTLS_ERR_PK_INVALID_ALG );
   dbeb2:	4b04      	ldr	r3, [pc, #16]	; (dbec4 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x4c>)
   dbeb4:	2a00      	cmp	r2, #0
   dbeb6:	bf18      	it	ne
   dbeb8:	4618      	movne	r0, r3
   dbeba:	e7eb      	b.n	dbe94 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x1c>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
   dbebc:	4802      	ldr	r0, [pc, #8]	; (dbec8 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x50>)
   dbebe:	e7e9      	b.n	dbe94 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x1c>
        return( MBEDTLS_ERR_PK_INVALID_ALG );
   dbec0:	4800      	ldr	r0, [pc, #0]	; (dbec4 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x4c>)
   dbec2:	e7e7      	b.n	dbe94 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x1c>
   dbec4:	ffffc580 	.word	0xffffc580
   dbec8:	ffffc380 	.word	0xffffc380

000dbecc <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj>:
 * Parse a SEC1 encoded private EC key
 */
static int pk_parse_key_sec1_der( mbedtls_ecp_keypair *eck,
                                  const unsigned char *key,
                                  size_t keylen )
{
   dbecc:	b5f0      	push	{r4, r5, r6, r7, lr}
   dbece:	b08b      	sub	sp, #44	; 0x2c
   dbed0:	4605      	mov	r5, r0
   dbed2:	4610      	mov	r0, r2
    int ret;
    int version, pubkey_done;
    size_t len;
    mbedtls_asn1_buf params;
    unsigned char *p = (unsigned char *) key;
   dbed4:	9106      	str	r1, [sp, #24]
     *      privateKey     OCTET STRING,
     *      parameters [0] ECParameters {{ NamedCurve }} OPTIONAL,
     *      publicKey  [1] BIT STRING OPTIONAL
     *    }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   dbed6:	2330      	movs	r3, #48	; 0x30
   dbed8:	4401      	add	r1, r0
   dbeda:	aa05      	add	r2, sp, #20
   dbedc:	a806      	add	r0, sp, #24
   dbede:	f7fa fa79 	bl	d63d4 <mbedtls_asn1_get_tag>
   dbee2:	b120      	cbz	r0, dbeee <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x22>
                        MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 1 ) ) == 0 )
        {
            end2 = p + len;

            if( ( ret = mbedtls_asn1_get_bitstring_null( &p, end2, &len ) ) != 0 )
                return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
   dbee4:	f5a0 5474 	sub.w	r4, r0, #15616	; 0x3d00
        mbedtls_ecp_keypair_free( eck );
        return( ret );
    }

    return( 0 );
}
   dbee8:	4620      	mov	r0, r4
   dbeea:	b00b      	add	sp, #44	; 0x2c
   dbeec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    end = p + len;
   dbeee:	e9dd 3705 	ldrd	r3, r7, [sp, #20]
   dbef2:	441f      	add	r7, r3
    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
   dbef4:	aa04      	add	r2, sp, #16
   dbef6:	4639      	mov	r1, r7
   dbef8:	a806      	add	r0, sp, #24
   dbefa:	f7fa fa98 	bl	d642e <mbedtls_asn1_get_int>
   dbefe:	2800      	cmp	r0, #0
   dbf00:	d1f0      	bne.n	dbee4 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x18>
    if( version != 1 )
   dbf02:	9b04      	ldr	r3, [sp, #16]
   dbf04:	2b01      	cmp	r3, #1
   dbf06:	f040 809a 	bne.w	dc03e <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x172>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
   dbf0a:	2304      	movs	r3, #4
   dbf0c:	aa05      	add	r2, sp, #20
   dbf0e:	4639      	mov	r1, r7
   dbf10:	a806      	add	r0, sp, #24
   dbf12:	f7fa fa5f 	bl	d63d4 <mbedtls_asn1_get_tag>
   dbf16:	2800      	cmp	r0, #0
   dbf18:	d1e4      	bne.n	dbee4 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x18>
    if( ( ret = mbedtls_mpi_read_binary( &eck->d, p, len ) ) != 0 )
   dbf1a:	f105 067c 	add.w	r6, r5, #124	; 0x7c
   dbf1e:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
   dbf22:	4630      	mov	r0, r6
   dbf24:	f004 fe91 	bl	e0c4a <mbedtls_mpi_read_binary>
   dbf28:	4604      	mov	r4, r0
   dbf2a:	b128      	cbz	r0, dbf38 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x6c>
        mbedtls_ecp_keypair_free( eck );
   dbf2c:	4628      	mov	r0, r5
   dbf2e:	f7fc ff8a 	bl	d8e46 <mbedtls_ecp_keypair_free>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
   dbf32:	f5a4 5474 	sub.w	r4, r4, #15616	; 0x3d00
   dbf36:	e7d7      	b.n	dbee8 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x1c>
    p += len;
   dbf38:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   dbf3c:	4413      	add	r3, r2
    if( p != end )
   dbf3e:	42bb      	cmp	r3, r7
    p += len;
   dbf40:	9306      	str	r3, [sp, #24]
    if( p != end )
   dbf42:	d06d      	beq.n	dc020 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x154>
        if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   dbf44:	23a0      	movs	r3, #160	; 0xa0
   dbf46:	aa05      	add	r2, sp, #20
   dbf48:	4639      	mov	r1, r7
   dbf4a:	a806      	add	r0, sp, #24
   dbf4c:	f7fa fa42 	bl	d63d4 <mbedtls_asn1_get_tag>
   dbf50:	4604      	mov	r4, r0
   dbf52:	bb48      	cbnz	r0, dbfa8 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0xdc>
            if( ( ret = pk_get_ecparams( &p, p + len, &params) ) != 0 ||
   dbf54:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
    if ( end - *p < 1 )
   dbf58:	2a00      	cmp	r2, #0
            if( ( ret = pk_get_ecparams( &p, p + len, &params) ) != 0 ||
   dbf5a:	eb03 0402 	add.w	r4, r3, r2
    if ( end - *p < 1 )
   dbf5e:	dd1f      	ble.n	dbfa0 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0xd4>
    params->tag = **p;
   dbf60:	781b      	ldrb	r3, [r3, #0]
   dbf62:	9307      	str	r3, [sp, #28]
    if( params->tag != MBEDTLS_ASN1_OID
   dbf64:	2b06      	cmp	r3, #6
   dbf66:	d11d      	bne.n	dbfa4 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0xd8>
    if( ( ret = mbedtls_asn1_get_tag( p, end, &params->len, params->tag ) ) != 0 )
   dbf68:	aa08      	add	r2, sp, #32
   dbf6a:	4621      	mov	r1, r4
   dbf6c:	a806      	add	r0, sp, #24
   dbf6e:	f7fa fa31 	bl	d63d4 <mbedtls_asn1_get_tag>
   dbf72:	b160      	cbz	r0, dbf8e <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0xc2>
            if( ( ret = pk_get_ecparams( &p, p + len, &params) ) != 0 ||
   dbf74:	f5b0 5474 	subs.w	r4, r0, #15616	; 0x3d00
   dbf78:	d105      	bne.n	dbf86 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0xba>
                ( ret = pk_use_ecparams( &params, &eck->grp )  ) != 0 )
   dbf7a:	4629      	mov	r1, r5
   dbf7c:	a807      	add	r0, sp, #28
   dbf7e:	f7ff fe67 	bl	dbc50 <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group>
            if( ( ret = pk_get_ecparams( &p, p + len, &params) ) != 0 ||
   dbf82:	4604      	mov	r4, r0
   dbf84:	b198      	cbz	r0, dbfae <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0xe2>
        mbedtls_ecp_keypair_free( eck );
   dbf86:	4628      	mov	r0, r5
   dbf88:	f7fc ff5d 	bl	d8e46 <mbedtls_ecp_keypair_free>
        return( ret );
   dbf8c:	e7ac      	b.n	dbee8 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x1c>
    params->p = *p;
   dbf8e:	9b06      	ldr	r3, [sp, #24]
    *p += params->len;
   dbf90:	9a08      	ldr	r2, [sp, #32]
    params->p = *p;
   dbf92:	9309      	str	r3, [sp, #36]	; 0x24
    *p += params->len;
   dbf94:	4413      	add	r3, r2
    if( *p != end )
   dbf96:	429c      	cmp	r4, r3
    *p += params->len;
   dbf98:	9306      	str	r3, [sp, #24]
    if( *p != end )
   dbf9a:	d0ee      	beq.n	dbf7a <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0xae>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   dbf9c:	4c2a      	ldr	r4, [pc, #168]	; (dc048 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x17c>)
   dbf9e:	e7f2      	b.n	dbf86 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0xba>
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   dbfa0:	4c2a      	ldr	r4, [pc, #168]	; (dc04c <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x180>)
   dbfa2:	e7f0      	b.n	dbf86 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0xba>
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
   dbfa4:	4c2a      	ldr	r4, [pc, #168]	; (dc050 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x184>)
                mbedtls_ecp_keypair_free( eck );
   dbfa6:	e7ee      	b.n	dbf86 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0xba>
        else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   dbfa8:	f110 0f62 	cmn.w	r0, #98	; 0x62
   dbfac:	d1be      	bne.n	dbf2c <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x60>
    if( p != end )
   dbfae:	9b06      	ldr	r3, [sp, #24]
   dbfb0:	42bb      	cmp	r3, r7
   dbfb2:	d035      	beq.n	dc020 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x154>
        if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   dbfb4:	23a1      	movs	r3, #161	; 0xa1
   dbfb6:	aa05      	add	r2, sp, #20
   dbfb8:	4639      	mov	r1, r7
   dbfba:	a806      	add	r0, sp, #24
   dbfbc:	f7fa fa0a 	bl	d63d4 <mbedtls_asn1_get_tag>
   dbfc0:	4604      	mov	r4, r0
   dbfc2:	bb50      	cbnz	r0, dc01a <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x14e>
            end2 = p + len;
   dbfc4:	e9dd 3405 	ldrd	r3, r4, [sp, #20]
   dbfc8:	441c      	add	r4, r3
            if( ( ret = mbedtls_asn1_get_bitstring_null( &p, end2, &len ) ) != 0 )
   dbfca:	aa05      	add	r2, sp, #20
   dbfcc:	4621      	mov	r1, r4
   dbfce:	a806      	add	r0, sp, #24
   dbfd0:	f7fa fa86 	bl	d64e0 <mbedtls_asn1_get_bitstring_null>
   dbfd4:	2800      	cmp	r0, #0
   dbfd6:	d185      	bne.n	dbee4 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x18>
            if( p + len != end2 )
   dbfd8:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
   dbfdc:	4413      	add	r3, r2
   dbfde:	429c      	cmp	r4, r3
   dbfe0:	d12f      	bne.n	dc042 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x176>
    if( ( ret = mbedtls_ecp_point_read_binary( &key->grp, &key->Q,
   dbfe2:	f105 0188 	add.w	r1, r5, #136	; 0x88
   dbfe6:	1aa3      	subs	r3, r4, r2
   dbfe8:	4628      	mov	r0, r5
   dbfea:	9103      	str	r1, [sp, #12]
   dbfec:	f7fd fb2a 	bl	d9644 <mbedtls_ecp_point_read_binary>
   dbff0:	9903      	ldr	r1, [sp, #12]
   dbff2:	b910      	cbnz	r0, dbffa <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x12e>
        ret = mbedtls_ecp_check_pubkey( &key->grp, &key->Q );
   dbff4:	4628      	mov	r0, r5
   dbff6:	f7fd fbaf 	bl	d9758 <mbedtls_ecp_check_pubkey>
    *p = (unsigned char *) end;
   dbffa:	9406      	str	r4, [sp, #24]
            if( ( ret = pk_get_ecpubkey( &p, end2, eck ) ) == 0 )
   dbffc:	b940      	cbnz	r0, dc010 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x144>
    if( ( ret = mbedtls_ecp_check_privkey( &eck->grp, &eck->d ) ) != 0 )
   dbffe:	4631      	mov	r1, r6
   dc000:	4628      	mov	r0, r5
   dc002:	f7fd fc5f 	bl	d98c4 <mbedtls_ecp_check_privkey>
   dc006:	4604      	mov	r4, r0
   dc008:	2800      	cmp	r0, #0
   dc00a:	f43f af6d 	beq.w	dbee8 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x1c>
   dc00e:	e7ba      	b.n	dbf86 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0xba>
                if( ret != MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE )
   dc010:	f510 4f9d 	cmn.w	r0, #20096	; 0x4e80
   dc014:	d004      	beq.n	dc020 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x154>
                    return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
   dc016:	4c0f      	ldr	r4, [pc, #60]	; (dc054 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x188>)
   dc018:	e766      	b.n	dbee8 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x1c>
        else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   dc01a:	f110 0f62 	cmn.w	r0, #98	; 0x62
   dc01e:	d185      	bne.n	dbf2c <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x60>
        ( ret = mbedtls_ecp_mul( &eck->grp, &eck->Q, &eck->d, &eck->grp.G,
   dc020:	2300      	movs	r3, #0
   dc022:	e9cd 3300 	strd	r3, r3, [sp]
   dc026:	4632      	mov	r2, r6
   dc028:	f105 0328 	add.w	r3, r5, #40	; 0x28
   dc02c:	f105 0188 	add.w	r1, r5, #136	; 0x88
   dc030:	4628      	mov	r0, r5
   dc032:	f7fd fd9f 	bl	d9b74 <mbedtls_ecp_mul>
    if( ! pubkey_done &&
   dc036:	4604      	mov	r4, r0
   dc038:	2800      	cmp	r0, #0
   dc03a:	d0e0      	beq.n	dbffe <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x132>
   dc03c:	e776      	b.n	dbf2c <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x60>
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION );
   dc03e:	4c06      	ldr	r4, [pc, #24]	; (dc058 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x18c>)
   dc040:	e752      	b.n	dbee8 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x1c>
                        MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   dc042:	4c01      	ldr	r4, [pc, #4]	; (dc048 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x17c>)
   dc044:	e750      	b.n	dbee8 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x1c>
   dc046:	bf00      	nop
   dc048:	ffffc29a 	.word	0xffffc29a
   dc04c:	ffffc2a0 	.word	0xffffc2a0
   dc050:	ffffc29e 	.word	0xffffc29e
   dc054:	ffffc300 	.word	0xffffc300
   dc058:	ffffc280 	.word	0xffffc280

000dc05c <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj>:
 */
static int pk_parse_key_pkcs8_unencrypted_der(
                                    mbedtls_pk_context *pk,
                                    const unsigned char* key,
                                    size_t keylen )
{
   dc05c:	b530      	push	{r4, r5, lr}
   dc05e:	b08b      	sub	sp, #44	; 0x2c
    int ret, version;
    size_t len;
    mbedtls_asn1_buf params;
    unsigned char *p = (unsigned char *) key;
    unsigned char *end = p + keylen;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
   dc060:	2300      	movs	r3, #0
{
   dc062:	4605      	mov	r5, r0
   dc064:	4610      	mov	r0, r2
    unsigned char *p = (unsigned char *) key;
   dc066:	9106      	str	r1, [sp, #24]
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
   dc068:	f88d 300f 	strb.w	r3, [sp, #15]
     *    PrivateKey ::= OCTET STRING
     *
     *  The PrivateKey OCTET STRING is a SEC1 ECPrivateKey
     */

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   dc06c:	4401      	add	r1, r0
   dc06e:	2330      	movs	r3, #48	; 0x30
   dc070:	aa05      	add	r2, sp, #20
   dc072:	a806      	add	r0, sp, #24
   dc074:	f7fa f9ae 	bl	d63d4 <mbedtls_asn1_get_tag>
   dc078:	b120      	cbz	r0, dc084 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x28>

    if( ( ret = pk_get_pk_alg( &p, end, &pk_alg, &params ) ) != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
   dc07a:	f5a0 5474 	sub.w	r4, r0, #15616	; 0x3d00
    } else
#endif /* MBEDTLS_ECP_C */
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    return( 0 );
}
   dc07e:	4620      	mov	r0, r4
   dc080:	b00b      	add	sp, #44	; 0x2c
   dc082:	bd30      	pop	{r4, r5, pc}
    end = p + len;
   dc084:	e9dd 3105 	ldrd	r3, r1, [sp, #20]
    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
   dc088:	aa04      	add	r2, sp, #16
    end = p + len;
   dc08a:	4419      	add	r1, r3
    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
   dc08c:	a806      	add	r0, sp, #24
   dc08e:	9101      	str	r1, [sp, #4]
   dc090:	f7fa f9cd 	bl	d642e <mbedtls_asn1_get_int>
   dc094:	9901      	ldr	r1, [sp, #4]
   dc096:	2800      	cmp	r0, #0
   dc098:	d1ef      	bne.n	dc07a <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x1e>
    if( version != 0 )
   dc09a:	9b04      	ldr	r3, [sp, #16]
   dc09c:	2b00      	cmp	r3, #0
   dc09e:	d140      	bne.n	dc122 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xc6>
    if( ( ret = pk_get_pk_alg( &p, end, &pk_alg, &params ) ) != 0 )
   dc0a0:	ab07      	add	r3, sp, #28
   dc0a2:	f10d 020f 	add.w	r2, sp, #15
   dc0a6:	a806      	add	r0, sp, #24
   dc0a8:	9101      	str	r1, [sp, #4]
   dc0aa:	f7ff fee5 	bl	dbe78 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf>
   dc0ae:	9901      	ldr	r1, [sp, #4]
   dc0b0:	2800      	cmp	r0, #0
   dc0b2:	d1e2      	bne.n	dc07a <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x1e>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
   dc0b4:	2304      	movs	r3, #4
   dc0b6:	aa05      	add	r2, sp, #20
   dc0b8:	a806      	add	r0, sp, #24
   dc0ba:	f7fa f98b 	bl	d63d4 <mbedtls_asn1_get_tag>
   dc0be:	2800      	cmp	r0, #0
   dc0c0:	d1db      	bne.n	dc07a <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x1e>
    if( len < 1 )
   dc0c2:	9b05      	ldr	r3, [sp, #20]
   dc0c4:	b37b      	cbz	r3, dc126 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xca>
    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )
   dc0c6:	f89d 000f 	ldrb.w	r0, [sp, #15]
   dc0ca:	f002 fcc9 	bl	dea60 <mbedtls_pk_info_from_type>
   dc0ce:	4601      	mov	r1, r0
   dc0d0:	b908      	cbnz	r0, dc0d6 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x7a>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
   dc0d2:	4c16      	ldr	r4, [pc, #88]	; (dc12c <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xd0>)
   dc0d4:	e7d3      	b.n	dc07e <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x22>
    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 )
   dc0d6:	4628      	mov	r0, r5
   dc0d8:	f002 fcce 	bl	dea78 <mbedtls_pk_setup>
   dc0dc:	4604      	mov	r4, r0
   dc0de:	2800      	cmp	r0, #0
   dc0e0:	d1cd      	bne.n	dc07e <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x22>
    if( pk_alg == MBEDTLS_PK_RSA )
   dc0e2:	f89d 300f 	ldrb.w	r3, [sp, #15]
   dc0e6:	2b01      	cmp	r3, #1
   dc0e8:	d10b      	bne.n	dc102 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xa6>
        if( ( ret = pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ), p, len ) ) != 0 )
   dc0ea:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
   dc0ee:	6868      	ldr	r0, [r5, #4]
   dc0f0:	f7ff fdcc 	bl	dbc8c <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj>
        if( ( ret = pk_use_ecparams( &params, &mbedtls_pk_ec( *pk )->grp ) ) != 0 ||
   dc0f4:	4604      	mov	r4, r0
   dc0f6:	2800      	cmp	r0, #0
   dc0f8:	d0c1      	beq.n	dc07e <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x22>
            mbedtls_pk_free( pk );
   dc0fa:	4628      	mov	r0, r5
   dc0fc:	f002 fca0 	bl	dea40 <mbedtls_pk_free>
            return( ret );
   dc100:	e7bd      	b.n	dc07e <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x22>
    if( pk_alg == MBEDTLS_PK_ECKEY || pk_alg == MBEDTLS_PK_ECKEY_DH )
   dc102:	3b02      	subs	r3, #2
   dc104:	2b01      	cmp	r3, #1
   dc106:	d8e4      	bhi.n	dc0d2 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x76>
        if( ( ret = pk_use_ecparams( &params, &mbedtls_pk_ec( *pk )->grp ) ) != 0 ||
   dc108:	6869      	ldr	r1, [r5, #4]
   dc10a:	a807      	add	r0, sp, #28
   dc10c:	f7ff fda0 	bl	dbc50 <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group>
   dc110:	4604      	mov	r4, r0
   dc112:	2800      	cmp	r0, #0
   dc114:	d1f1      	bne.n	dc0fa <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x9e>
            ( ret = pk_parse_key_sec1_der( mbedtls_pk_ec( *pk ), p, len )  ) != 0 )
   dc116:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
   dc11a:	6868      	ldr	r0, [r5, #4]
   dc11c:	f7ff fed6 	bl	dbecc <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj>
   dc120:	e7e8      	b.n	dc0f4 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x98>
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION + ret );
   dc122:	4c03      	ldr	r4, [pc, #12]	; (dc130 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xd4>)
   dc124:	e7ab      	b.n	dc07e <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x22>
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   dc126:	4c03      	ldr	r4, [pc, #12]	; (dc134 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xd8>)
   dc128:	e7a9      	b.n	dc07e <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x22>
   dc12a:	bf00      	nop
   dc12c:	ffffc380 	.word	0xffffc380
   dc130:	ffffc280 	.word	0xffffc280
   dc134:	ffffc2a0 	.word	0xffffc2a0

000dc138 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj>:
#if defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)
static int pk_parse_key_pkcs8_encrypted_der(
                                    mbedtls_pk_context *pk,
                                    unsigned char *key, size_t keylen,
                                    const unsigned char *pwd, size_t pwdlen )
{
   dc138:	b5f0      	push	{r4, r5, r6, r7, lr}
   dc13a:	b093      	sub	sp, #76	; 0x4c
   dc13c:	4604      	mov	r4, r0
   dc13e:	9e18      	ldr	r6, [sp, #96]	; 0x60
#if defined(MBEDTLS_PKCS12_C)
    mbedtls_cipher_type_t cipher_alg;
    mbedtls_md_type_t md_alg;
#endif

    p = key;
   dc140:	910b      	str	r1, [sp, #44]	; 0x2c
{
   dc142:	461d      	mov	r5, r3
    end = p + keylen;
   dc144:	4411      	add	r1, r2

    if( pwdlen == 0 )
   dc146:	2e00      	cmp	r6, #0
   dc148:	d070      	beq.n	dc22c <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf4>
     *  EncryptedData ::= OCTET STRING
     *
     *  The EncryptedData OCTET STRING is a PKCS#8 PrivateKeyInfo
     *
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   dc14a:	2330      	movs	r3, #48	; 0x30
   dc14c:	aa0a      	add	r2, sp, #40	; 0x28
   dc14e:	a80b      	add	r0, sp, #44	; 0x2c
   dc150:	f7fa f940 	bl	d63d4 <mbedtls_asn1_get_tag>
   dc154:	b118      	cbz	r0, dc15e <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x26>

    if( ( ret = mbedtls_asn1_get_alg( &p, end, &pbe_alg_oid, &pbe_params ) ) != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
   dc156:	f5a0 5074 	sub.w	r0, r0, #15616	; 0x3d00

    if( decrypted == 0 )
        return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );

    return( pk_parse_key_pkcs8_unencrypted_der( pk, buf, len ) );
}
   dc15a:	b013      	add	sp, #76	; 0x4c
   dc15c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    end = p + len;
   dc15e:	e9dd 310a 	ldrd	r3, r1, [sp, #40]	; 0x28
    if( ( ret = mbedtls_asn1_get_alg( &p, end, &pbe_alg_oid, &pbe_params ) ) != 0 )
   dc162:	aa0c      	add	r2, sp, #48	; 0x30
    end = p + len;
   dc164:	4419      	add	r1, r3
    if( ( ret = mbedtls_asn1_get_alg( &p, end, &pbe_alg_oid, &pbe_params ) ) != 0 )
   dc166:	a80b      	add	r0, sp, #44	; 0x2c
   dc168:	ab0f      	add	r3, sp, #60	; 0x3c
   dc16a:	9107      	str	r1, [sp, #28]
   dc16c:	f7fa fa08 	bl	d6580 <mbedtls_asn1_get_alg>
   dc170:	9907      	ldr	r1, [sp, #28]
   dc172:	2800      	cmp	r0, #0
   dc174:	d1ef      	bne.n	dc156 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x1e>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
   dc176:	2304      	movs	r3, #4
   dc178:	aa0a      	add	r2, sp, #40	; 0x28
   dc17a:	a80b      	add	r0, sp, #44	; 0x2c
   dc17c:	f7fa f92a 	bl	d63d4 <mbedtls_asn1_get_tag>
   dc180:	2800      	cmp	r0, #0
   dc182:	d1e8      	bne.n	dc156 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x1e>
    if( mbedtls_oid_get_pkcs12_pbe_alg( &pbe_alg_oid, &md_alg, &cipher_alg ) == 0 )
   dc184:	f10d 0127 	add.w	r1, sp, #39	; 0x27
   dc188:	f10d 0226 	add.w	r2, sp, #38	; 0x26
   dc18c:	a80c      	add	r0, sp, #48	; 0x30
    buf = p;
   dc18e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    if( mbedtls_oid_get_pkcs12_pbe_alg( &pbe_alg_oid, &md_alg, &cipher_alg ) == 0 )
   dc190:	f7fd ff26 	bl	d9fe0 <mbedtls_oid_get_pkcs12_pbe_alg>
   dc194:	4601      	mov	r1, r0
   dc196:	b998      	cbnz	r0, dc1c0 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x88>
        if( ( ret = mbedtls_pkcs12_pbe( &pbe_params, MBEDTLS_PKCS12_PBE_DECRYPT,
   dc198:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dc19a:	9303      	str	r3, [sp, #12]
   dc19c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   dc19e:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
   dc1a2:	9704      	str	r7, [sp, #16]
   dc1a4:	e9cd 6301 	strd	r6, r3, [sp, #4]
   dc1a8:	9500      	str	r5, [sp, #0]
   dc1aa:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   dc1ae:	a80f      	add	r0, sp, #60	; 0x3c
   dc1b0:	f006 fd48 	bl	e2c44 <mbedtls_pkcs12_pbe>
   dc1b4:	b1e8      	cbz	r0, dc1f2 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xba>
            if( ret == MBEDTLS_ERR_PKCS12_PASSWORD_MISMATCH )
   dc1b6:	f510 5ff0 	cmn.w	r0, #7680	; 0x1e00
   dc1ba:	d1ce      	bne.n	dc15a <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x22>
                return( MBEDTLS_ERR_PK_PASSWORD_MISMATCH );
   dc1bc:	481d      	ldr	r0, [pc, #116]	; (dc234 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xfc>)
   dc1be:	e7cc      	b.n	dc15a <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x22>
    else if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS12_PBE_SHA1_RC4_128, &pbe_alg_oid ) == 0 )
   dc1c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   dc1c2:	2a0a      	cmp	r2, #10
   dc1c4:	d11b      	bne.n	dc1fe <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xc6>
   dc1c6:	990e      	ldr	r1, [sp, #56]	; 0x38
   dc1c8:	481b      	ldr	r0, [pc, #108]	; (dc238 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x100>)
   dc1ca:	f00c fb71 	bl	e88b0 <memcmp>
   dc1ce:	4601      	mov	r1, r0
   dc1d0:	2800      	cmp	r0, #0
   dc1d2:	d12d      	bne.n	dc230 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf8>
        if( ( ret = mbedtls_pkcs12_pbe_sha1_rc4_128( &pbe_params,
   dc1d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dc1d6:	9301      	str	r3, [sp, #4]
   dc1d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   dc1da:	9300      	str	r3, [sp, #0]
   dc1dc:	9702      	str	r7, [sp, #8]
   dc1de:	4633      	mov	r3, r6
   dc1e0:	462a      	mov	r2, r5
   dc1e2:	a80f      	add	r0, sp, #60	; 0x3c
   dc1e4:	f006 fc22 	bl	e2a2c <mbedtls_pkcs12_pbe_sha1_rc4_128>
   dc1e8:	2800      	cmp	r0, #0
   dc1ea:	d1b6      	bne.n	dc15a <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x22>
        if( *buf != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
   dc1ec:	783b      	ldrb	r3, [r7, #0]
   dc1ee:	2b30      	cmp	r3, #48	; 0x30
   dc1f0:	d1e4      	bne.n	dc1bc <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x84>
    return( pk_parse_key_pkcs8_unencrypted_der( pk, buf, len ) );
   dc1f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   dc1f4:	4639      	mov	r1, r7
   dc1f6:	4620      	mov	r0, r4
   dc1f8:	f7ff ff30 	bl	dc05c <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj>
   dc1fc:	e7ad      	b.n	dc15a <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x22>
    if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS5_PBES2, &pbe_alg_oid ) == 0 )
   dc1fe:	2a09      	cmp	r2, #9
   dc200:	d116      	bne.n	dc230 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf8>
   dc202:	990e      	ldr	r1, [sp, #56]	; 0x38
   dc204:	480d      	ldr	r0, [pc, #52]	; (dc23c <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x104>)
   dc206:	f00c fb53 	bl	e88b0 <memcmp>
   dc20a:	4601      	mov	r1, r0
   dc20c:	b980      	cbnz	r0, dc230 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf8>
        if( ( ret = mbedtls_pkcs5_pbes2( &pbe_params, MBEDTLS_PKCS5_DECRYPT, pwd, pwdlen,
   dc20e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dc210:	9301      	str	r3, [sp, #4]
   dc212:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   dc214:	9300      	str	r3, [sp, #0]
   dc216:	9702      	str	r7, [sp, #8]
   dc218:	4633      	mov	r3, r6
   dc21a:	462a      	mov	r2, r5
   dc21c:	a80f      	add	r0, sp, #60	; 0x3c
   dc21e:	f7fe ffa7 	bl	db170 <mbedtls_pkcs5_pbes2>
   dc222:	2800      	cmp	r0, #0
   dc224:	d0e5      	beq.n	dc1f2 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xba>
            if( ret == MBEDTLS_ERR_PKCS5_PASSWORD_MISMATCH )
   dc226:	f510 5f38 	cmn.w	r0, #11776	; 0x2e00
   dc22a:	e7c6      	b.n	dc1ba <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x82>
        return( MBEDTLS_ERR_PK_PASSWORD_REQUIRED );
   dc22c:	4804      	ldr	r0, [pc, #16]	; (dc240 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x108>)
   dc22e:	e794      	b.n	dc15a <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x22>
        return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );
   dc230:	4804      	ldr	r0, [pc, #16]	; (dc244 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x10c>)
   dc232:	e792      	b.n	dc15a <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x22>
   dc234:	ffffc480 	.word	0xffffc480
   dc238:	000ec49c 	.word	0x000ec49c
   dc23c:	000ec4a7 	.word	0x000ec4a7
   dc240:	ffffc400 	.word	0xffffc400
   dc244:	ffffc680 	.word	0xffffc680

000dc248 <mbedtls_pk_parse_subpubkey>:
{
   dc248:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dc24c:	b089      	sub	sp, #36	; 0x24
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
   dc24e:	2300      	movs	r3, #0
{
   dc250:	4690      	mov	r8, r2
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
   dc252:	f88d 300f 	strb.w	r3, [sp, #15]
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   dc256:	aa04      	add	r2, sp, #16
   dc258:	2330      	movs	r3, #48	; 0x30
{
   dc25a:	4606      	mov	r6, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   dc25c:	f7fa f8ba 	bl	d63d4 <mbedtls_asn1_get_tag>
   dc260:	b128      	cbz	r0, dc26e <mbedtls_pk_parse_subpubkey+0x26>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
   dc262:	f5a0 5474 	sub.w	r4, r0, #15616	; 0x3d00
}
   dc266:	4620      	mov	r0, r4
   dc268:	b009      	add	sp, #36	; 0x24
   dc26a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    end = *p + len;
   dc26e:	9b04      	ldr	r3, [sp, #16]
   dc270:	6837      	ldr	r7, [r6, #0]
   dc272:	441f      	add	r7, r3
    if( ( ret = pk_get_pk_alg( p, end, &pk_alg, &alg_params ) ) != 0 )
   dc274:	f10d 020f 	add.w	r2, sp, #15
   dc278:	ab05      	add	r3, sp, #20
   dc27a:	4639      	mov	r1, r7
   dc27c:	4630      	mov	r0, r6
   dc27e:	f7ff fdfb 	bl	dbe78 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf>
   dc282:	4604      	mov	r4, r0
   dc284:	2800      	cmp	r0, #0
   dc286:	d1ee      	bne.n	dc266 <mbedtls_pk_parse_subpubkey+0x1e>
    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
   dc288:	aa04      	add	r2, sp, #16
   dc28a:	4639      	mov	r1, r7
   dc28c:	4630      	mov	r0, r6
   dc28e:	f7fa f927 	bl	d64e0 <mbedtls_asn1_get_bitstring_null>
   dc292:	b110      	cbz	r0, dc29a <mbedtls_pk_parse_subpubkey+0x52>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
   dc294:	f5a0 546c 	sub.w	r4, r0, #15104	; 0x3b00
   dc298:	e7e5      	b.n	dc266 <mbedtls_pk_parse_subpubkey+0x1e>
    if( *p + len != end )
   dc29a:	6833      	ldr	r3, [r6, #0]
   dc29c:	9a04      	ldr	r2, [sp, #16]
   dc29e:	4413      	add	r3, r2
   dc2a0:	429f      	cmp	r7, r3
   dc2a2:	d144      	bne.n	dc32e <mbedtls_pk_parse_subpubkey+0xe6>
    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )
   dc2a4:	f89d 000f 	ldrb.w	r0, [sp, #15]
   dc2a8:	f002 fbda 	bl	dea60 <mbedtls_pk_info_from_type>
   dc2ac:	4601      	mov	r1, r0
   dc2ae:	2800      	cmp	r0, #0
   dc2b0:	d03f      	beq.n	dc332 <mbedtls_pk_parse_subpubkey+0xea>
    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 )
   dc2b2:	4640      	mov	r0, r8
   dc2b4:	f002 fbe0 	bl	dea78 <mbedtls_pk_setup>
   dc2b8:	4604      	mov	r4, r0
   dc2ba:	2800      	cmp	r0, #0
   dc2bc:	d1d3      	bne.n	dc266 <mbedtls_pk_parse_subpubkey+0x1e>
    if( pk_alg == MBEDTLS_PK_RSA )
   dc2be:	f89d 300f 	ldrb.w	r3, [sp, #15]
   dc2c2:	2b01      	cmp	r3, #1
   dc2c4:	d10c      	bne.n	dc2e0 <mbedtls_pk_parse_subpubkey+0x98>
        ret = pk_get_rsapubkey( p, end, mbedtls_pk_rsa( *pk ) );
   dc2c6:	f8d8 2004 	ldr.w	r2, [r8, #4]
   dc2ca:	4639      	mov	r1, r7
   dc2cc:	4630      	mov	r0, r6
   dc2ce:	f7ff fc5d 	bl	dbb8c <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context>
    if( ret == 0 && *p != end )
   dc2d2:	4605      	mov	r5, r0
   dc2d4:	b320      	cbz	r0, dc320 <mbedtls_pk_parse_subpubkey+0xd8>
        mbedtls_pk_free( pk );
   dc2d6:	4640      	mov	r0, r8
   dc2d8:	f002 fbb2 	bl	dea40 <mbedtls_pk_free>
   dc2dc:	462c      	mov	r4, r5
   dc2de:	e7c2      	b.n	dc266 <mbedtls_pk_parse_subpubkey+0x1e>
    if( pk_alg == MBEDTLS_PK_ECKEY_DH || pk_alg == MBEDTLS_PK_ECKEY )
   dc2e0:	3b02      	subs	r3, #2
   dc2e2:	2b01      	cmp	r3, #1
   dc2e4:	d821      	bhi.n	dc32a <mbedtls_pk_parse_subpubkey+0xe2>
        ret = pk_use_ecparams( &alg_params, &mbedtls_pk_ec( *pk )->grp );
   dc2e6:	f8d8 1004 	ldr.w	r1, [r8, #4]
   dc2ea:	a805      	add	r0, sp, #20
   dc2ec:	f7ff fcb0 	bl	dbc50 <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group>
        if( ret == 0 )
   dc2f0:	4605      	mov	r5, r0
   dc2f2:	2800      	cmp	r0, #0
   dc2f4:	d1ef      	bne.n	dc2d6 <mbedtls_pk_parse_subpubkey+0x8e>
            ret = pk_get_ecpubkey( p, end, mbedtls_pk_ec( *pk ) );
   dc2f6:	f8d8 9004 	ldr.w	r9, [r8, #4]
    if( ( ret = mbedtls_ecp_point_read_binary( &key->grp, &key->Q,
   dc2fa:	6832      	ldr	r2, [r6, #0]
   dc2fc:	f109 0188 	add.w	r1, r9, #136	; 0x88
   dc300:	1abb      	subs	r3, r7, r2
   dc302:	4648      	mov	r0, r9
   dc304:	9101      	str	r1, [sp, #4]
   dc306:	f7fd f99d 	bl	d9644 <mbedtls_ecp_point_read_binary>
   dc30a:	9901      	ldr	r1, [sp, #4]
   dc30c:	4605      	mov	r5, r0
   dc30e:	b918      	cbnz	r0, dc318 <mbedtls_pk_parse_subpubkey+0xd0>
        ret = mbedtls_ecp_check_pubkey( &key->grp, &key->Q );
   dc310:	4648      	mov	r0, r9
   dc312:	f7fd fa21 	bl	d9758 <mbedtls_ecp_check_pubkey>
   dc316:	4605      	mov	r5, r0
    *p = (unsigned char *) end;
   dc318:	6037      	str	r7, [r6, #0]
    if( ret == 0 && *p != end )
   dc31a:	2d00      	cmp	r5, #0
   dc31c:	d0a3      	beq.n	dc266 <mbedtls_pk_parse_subpubkey+0x1e>
   dc31e:	e7da      	b.n	dc2d6 <mbedtls_pk_parse_subpubkey+0x8e>
   dc320:	6833      	ldr	r3, [r6, #0]
   dc322:	42bb      	cmp	r3, r7
   dc324:	d09f      	beq.n	dc266 <mbedtls_pk_parse_subpubkey+0x1e>
        ret = MBEDTLS_ERR_PK_INVALID_PUBKEY
   dc326:	4d04      	ldr	r5, [pc, #16]	; (dc338 <mbedtls_pk_parse_subpubkey+0xf0>)
   dc328:	e7d5      	b.n	dc2d6 <mbedtls_pk_parse_subpubkey+0x8e>
        ret = MBEDTLS_ERR_PK_UNKNOWN_PK_ALG;
   dc32a:	4d04      	ldr	r5, [pc, #16]	; (dc33c <mbedtls_pk_parse_subpubkey+0xf4>)
   dc32c:	e7d3      	b.n	dc2d6 <mbedtls_pk_parse_subpubkey+0x8e>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   dc32e:	4c02      	ldr	r4, [pc, #8]	; (dc338 <mbedtls_pk_parse_subpubkey+0xf0>)
   dc330:	e799      	b.n	dc266 <mbedtls_pk_parse_subpubkey+0x1e>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
   dc332:	4c02      	ldr	r4, [pc, #8]	; (dc33c <mbedtls_pk_parse_subpubkey+0xf4>)
   dc334:	e797      	b.n	dc266 <mbedtls_pk_parse_subpubkey+0x1e>
   dc336:	bf00      	nop
   dc338:	ffffc49a 	.word	0xffffc49a
   dc33c:	ffffc380 	.word	0xffffc380

000dc340 <mbedtls_pk_parse_key>:
 * Parse a private key
 */
int mbedtls_pk_parse_key( mbedtls_pk_context *pk,
                  const unsigned char *key, size_t keylen,
                  const unsigned char *pwd, size_t pwdlen )
{
   dc340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc344:	b089      	sub	sp, #36	; 0x24
   dc346:	4605      	mov	r5, r0
   dc348:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   dc34c:	460e      	mov	r6, r1
   dc34e:	4698      	mov	r8, r3
    size_t len;
    mbedtls_pem_context pem;
#endif

    PK_VALIDATE_RET( pk != NULL );
    if( keylen == 0 )
   dc350:	4617      	mov	r7, r2
   dc352:	2a00      	cmp	r2, #0
   dc354:	f000 80ea 	beq.w	dc52c <mbedtls_pk_parse_key+0x1ec>
#if defined(MBEDTLS_PEM_PARSE_C)
   mbedtls_pem_init( &pem );

#if defined(MBEDTLS_RSA_C)
    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( key[keylen - 1] != '\0' )
   dc358:	f107 3bff 	add.w	fp, r7, #4294967295
   mbedtls_pem_init( &pem );
   dc35c:	a805      	add	r0, sp, #20
   dc35e:	f007 fce5 	bl	e3d2c <mbedtls_pem_init>
    if( key[keylen - 1] != '\0' )
   dc362:	f816 300b 	ldrb.w	r3, [r6, fp]
   dc366:	2b00      	cmp	r3, #0
   dc368:	f040 808f 	bne.w	dc48a <mbedtls_pk_parse_key+0x14a>
        ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;
    else
        ret = mbedtls_pem_read_buffer( &pem,
   dc36c:	f10d 0a10 	add.w	sl, sp, #16
   dc370:	e9cd 9a01 	strd	r9, sl, [sp, #4]
   dc374:	4a76      	ldr	r2, [pc, #472]	; (dc550 <mbedtls_pk_parse_key+0x210>)
   dc376:	4977      	ldr	r1, [pc, #476]	; (dc554 <mbedtls_pk_parse_key+0x214>)
   dc378:	f8cd 8000 	str.w	r8, [sp]
   dc37c:	4633      	mov	r3, r6
   dc37e:	a805      	add	r0, sp, #20
   dc380:	f007 fcda 	bl	e3d38 <mbedtls_pem_read_buffer>
                               "-----BEGIN RSA PRIVATE KEY-----",
                               "-----END RSA PRIVATE KEY-----",
                               key, pwd, pwdlen, &len );

    if( ret == 0 )
   dc384:	4604      	mov	r4, r0
   dc386:	b9b0      	cbnz	r0, dc3b6 <mbedtls_pk_parse_key+0x76>
    {
        pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA );
   dc388:	2001      	movs	r0, #1
   dc38a:	f002 fb69 	bl	dea60 <mbedtls_pk_info_from_type>
   dc38e:	4601      	mov	r1, r0
        if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 ||
   dc390:	4628      	mov	r0, r5
   dc392:	f002 fb71 	bl	dea78 <mbedtls_pk_setup>
   dc396:	4604      	mov	r4, r0
   dc398:	b930      	cbnz	r0, dc3a8 <mbedtls_pk_parse_key+0x68>
            ( ret = pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ),
   dc39a:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
   dc39e:	6868      	ldr	r0, [r5, #4]
   dc3a0:	f7ff fc74 	bl	dbc8c <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj>
                               "-----BEGIN ENCRYPTED PRIVATE KEY-----",
                               "-----END ENCRYPTED PRIVATE KEY-----",
                               key, NULL, 0, &len );
    if( ret == 0 )
    {
        if( ( ret = pk_parse_key_pkcs8_encrypted_der( pk,
   dc3a4:	4604      	mov	r4, r0
   dc3a6:	b110      	cbz	r0, dc3ae <mbedtls_pk_parse_key+0x6e>
                                                      pem.buf, pem.buflen,
                                                      pwd, pwdlen ) ) != 0 )
        {
            mbedtls_pk_free( pk );
   dc3a8:	4628      	mov	r0, r5
   dc3aa:	f002 fb49 	bl	dea40 <mbedtls_pk_free>
        }

        mbedtls_pem_free( &pem );
   dc3ae:	a805      	add	r0, sp, #20
   dc3b0:	f007 fd4c 	bl	e3e4c <mbedtls_pem_free>
        return( ret );
   dc3b4:	e003      	b.n	dc3be <mbedtls_pk_parse_key+0x7e>
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_MISMATCH )
   dc3b6:	f510 5f9c 	cmn.w	r0, #4992	; 0x1380
   dc3ba:	d104      	bne.n	dc3c6 <mbedtls_pk_parse_key+0x86>
        return( MBEDTLS_ERR_PK_PASSWORD_MISMATCH );
   dc3bc:	4c66      	ldr	r4, [pc, #408]	; (dc558 <mbedtls_pk_parse_key+0x218>)
     * twice, once here and once by the caller, but this is
     * also ok and in line with the mbedtls_pk_free() calls
     * on failed PEM parsing attempts. */

    return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
}
   dc3be:	4620      	mov	r0, r4
   dc3c0:	b009      	add	sp, #36	; 0x24
   dc3c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_REQUIRED )
   dc3c6:	f510 5f98 	cmn.w	r0, #4864	; 0x1300
   dc3ca:	d101      	bne.n	dc3d0 <mbedtls_pk_parse_key+0x90>
        return( MBEDTLS_ERR_PK_PASSWORD_REQUIRED );
   dc3cc:	4c63      	ldr	r4, [pc, #396]	; (dc55c <mbedtls_pk_parse_key+0x21c>)
   dc3ce:	e7f6      	b.n	dc3be <mbedtls_pk_parse_key+0x7e>
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
   dc3d0:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
   dc3d4:	d1f3      	bne.n	dc3be <mbedtls_pk_parse_key+0x7e>
    if( key[keylen - 1] != '\0' )
   dc3d6:	f816 300b 	ldrb.w	r3, [r6, fp]
   dc3da:	2b00      	cmp	r3, #0
   dc3dc:	d155      	bne.n	dc48a <mbedtls_pk_parse_key+0x14a>
        ret = mbedtls_pem_read_buffer( &pem,
   dc3de:	e9cd 9a01 	strd	r9, sl, [sp, #4]
   dc3e2:	4a5f      	ldr	r2, [pc, #380]	; (dc560 <mbedtls_pk_parse_key+0x220>)
   dc3e4:	495f      	ldr	r1, [pc, #380]	; (dc564 <mbedtls_pk_parse_key+0x224>)
   dc3e6:	f8cd 8000 	str.w	r8, [sp]
   dc3ea:	4633      	mov	r3, r6
   dc3ec:	a805      	add	r0, sp, #20
   dc3ee:	f007 fca3 	bl	e3d38 <mbedtls_pem_read_buffer>
    if( ret == 0 )
   dc3f2:	4604      	mov	r4, r0
   dc3f4:	b978      	cbnz	r0, dc416 <mbedtls_pk_parse_key+0xd6>
        pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_ECKEY );
   dc3f6:	2002      	movs	r0, #2
   dc3f8:	f002 fb32 	bl	dea60 <mbedtls_pk_info_from_type>
   dc3fc:	4601      	mov	r1, r0
        if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 ||
   dc3fe:	4628      	mov	r0, r5
   dc400:	f002 fb3a 	bl	dea78 <mbedtls_pk_setup>
   dc404:	4604      	mov	r4, r0
   dc406:	2800      	cmp	r0, #0
   dc408:	d1ce      	bne.n	dc3a8 <mbedtls_pk_parse_key+0x68>
            ( ret = pk_parse_key_sec1_der( mbedtls_pk_ec( *pk ),
   dc40a:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
   dc40e:	6868      	ldr	r0, [r5, #4]
   dc410:	f7ff fd5c 	bl	dbecc <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj>
   dc414:	e7c6      	b.n	dc3a4 <mbedtls_pk_parse_key+0x64>
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_MISMATCH )
   dc416:	f510 5f9c 	cmn.w	r0, #4992	; 0x1380
   dc41a:	d0cf      	beq.n	dc3bc <mbedtls_pk_parse_key+0x7c>
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_REQUIRED )
   dc41c:	f510 5f98 	cmn.w	r0, #4864	; 0x1300
   dc420:	d0d4      	beq.n	dc3cc <mbedtls_pk_parse_key+0x8c>
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
   dc422:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
   dc426:	d1ca      	bne.n	dc3be <mbedtls_pk_parse_key+0x7e>
    if( key[keylen - 1] != '\0' )
   dc428:	f816 300b 	ldrb.w	r3, [r6, fp]
   dc42c:	bb6b      	cbnz	r3, dc48a <mbedtls_pk_parse_key+0x14a>
        ret = mbedtls_pem_read_buffer( &pem,
   dc42e:	e9cd 3a01 	strd	r3, sl, [sp, #4]
   dc432:	9300      	str	r3, [sp, #0]
   dc434:	4a4c      	ldr	r2, [pc, #304]	; (dc568 <mbedtls_pk_parse_key+0x228>)
   dc436:	494d      	ldr	r1, [pc, #308]	; (dc56c <mbedtls_pk_parse_key+0x22c>)
   dc438:	4633      	mov	r3, r6
   dc43a:	a805      	add	r0, sp, #20
   dc43c:	f007 fc7c 	bl	e3d38 <mbedtls_pem_read_buffer>
    if( ret == 0 )
   dc440:	4604      	mov	r4, r0
   dc442:	b928      	cbnz	r0, dc450 <mbedtls_pk_parse_key+0x110>
        if( ( ret = pk_parse_key_pkcs8_unencrypted_der( pk,
   dc444:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
   dc448:	4628      	mov	r0, r5
   dc44a:	f7ff fe07 	bl	dc05c <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj>
   dc44e:	e7a9      	b.n	dc3a4 <mbedtls_pk_parse_key+0x64>
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
   dc450:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
   dc454:	d1b3      	bne.n	dc3be <mbedtls_pk_parse_key+0x7e>
    if( key[keylen - 1] != '\0' )
   dc456:	f816 300b 	ldrb.w	r3, [r6, fp]
   dc45a:	b9b3      	cbnz	r3, dc48a <mbedtls_pk_parse_key+0x14a>
        ret = mbedtls_pem_read_buffer( &pem,
   dc45c:	e9cd 3a01 	strd	r3, sl, [sp, #4]
   dc460:	9300      	str	r3, [sp, #0]
   dc462:	4a43      	ldr	r2, [pc, #268]	; (dc570 <mbedtls_pk_parse_key+0x230>)
   dc464:	4943      	ldr	r1, [pc, #268]	; (dc574 <mbedtls_pk_parse_key+0x234>)
   dc466:	4633      	mov	r3, r6
   dc468:	a805      	add	r0, sp, #20
   dc46a:	f007 fc65 	bl	e3d38 <mbedtls_pem_read_buffer>
    if( ret == 0 )
   dc46e:	4604      	mov	r4, r0
   dc470:	b940      	cbnz	r0, dc484 <mbedtls_pk_parse_key+0x144>
        if( ( ret = pk_parse_key_pkcs8_encrypted_der( pk,
   dc472:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
   dc476:	f8cd 9000 	str.w	r9, [sp]
   dc47a:	4643      	mov	r3, r8
   dc47c:	4628      	mov	r0, r5
   dc47e:	f7ff fe5b 	bl	dc138 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj>
   dc482:	e78f      	b.n	dc3a4 <mbedtls_pk_parse_key+0x64>
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
   dc484:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
   dc488:	d199      	bne.n	dc3be <mbedtls_pk_parse_key+0x7e>
        if( ( key_copy = (unsigned char *)mbedtls_calloc( 1, keylen ) ) == NULL )
   dc48a:	4639      	mov	r1, r7
   dc48c:	2001      	movs	r0, #1
   dc48e:	f00c f9a3 	bl	e87d8 <calloc>
   dc492:	4604      	mov	r4, r0
   dc494:	b908      	cbnz	r0, dc49a <mbedtls_pk_parse_key+0x15a>
            return( MBEDTLS_ERR_PK_ALLOC_FAILED );
   dc496:	4c38      	ldr	r4, [pc, #224]	; (dc578 <mbedtls_pk_parse_key+0x238>)
   dc498:	e791      	b.n	dc3be <mbedtls_pk_parse_key+0x7e>
        memcpy( key_copy, key, keylen );
   dc49a:	463a      	mov	r2, r7
   dc49c:	4631      	mov	r1, r6
   dc49e:	f00c fa15 	bl	e88cc <memcpy>
        ret = pk_parse_key_pkcs8_encrypted_der( pk, key_copy, keylen,
   dc4a2:	4643      	mov	r3, r8
   dc4a4:	463a      	mov	r2, r7
   dc4a6:	4621      	mov	r1, r4
   dc4a8:	f8cd 9000 	str.w	r9, [sp]
   dc4ac:	4628      	mov	r0, r5
   dc4ae:	f7ff fe43 	bl	dc138 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj>
        mbedtls_platform_zeroize( key_copy, keylen );
   dc4b2:	4639      	mov	r1, r7
        ret = pk_parse_key_pkcs8_encrypted_der( pk, key_copy, keylen,
   dc4b4:	4680      	mov	r8, r0
        mbedtls_platform_zeroize( key_copy, keylen );
   dc4b6:	4620      	mov	r0, r4
   dc4b8:	f7fe fd90 	bl	dafdc <mbedtls_platform_zeroize>
        mbedtls_free( key_copy );
   dc4bc:	4620      	mov	r0, r4
   dc4be:	f009 f97f 	bl	e57c0 <free>
    if( ret == 0 )
   dc4c2:	f1b8 0f00 	cmp.w	r8, #0
   dc4c6:	d101      	bne.n	dc4cc <mbedtls_pk_parse_key+0x18c>
        return( 0 );
   dc4c8:	2400      	movs	r4, #0
   dc4ca:	e778      	b.n	dc3be <mbedtls_pk_parse_key+0x7e>
    mbedtls_pk_free( pk );
   dc4cc:	4628      	mov	r0, r5
   dc4ce:	f002 fab7 	bl	dea40 <mbedtls_pk_free>
    mbedtls_pk_init( pk );
   dc4d2:	4628      	mov	r0, r5
   dc4d4:	f002 fab0 	bl	dea38 <mbedtls_pk_init>
    if( ret == MBEDTLS_ERR_PK_PASSWORD_MISMATCH )
   dc4d8:	f518 5f6e 	cmn.w	r8, #15232	; 0x3b80
   dc4dc:	f43f af6e 	beq.w	dc3bc <mbedtls_pk_parse_key+0x7c>
    if( ( ret = pk_parse_key_pkcs8_unencrypted_der( pk, key, keylen ) ) == 0 )
   dc4e0:	463a      	mov	r2, r7
   dc4e2:	4631      	mov	r1, r6
   dc4e4:	4628      	mov	r0, r5
   dc4e6:	f7ff fdb9 	bl	dc05c <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj>
   dc4ea:	2800      	cmp	r0, #0
   dc4ec:	d0ec      	beq.n	dc4c8 <mbedtls_pk_parse_key+0x188>
    mbedtls_pk_free( pk );
   dc4ee:	4628      	mov	r0, r5
   dc4f0:	f002 faa6 	bl	dea40 <mbedtls_pk_free>
    mbedtls_pk_init( pk );
   dc4f4:	4628      	mov	r0, r5
   dc4f6:	f002 fa9f 	bl	dea38 <mbedtls_pk_init>
    pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA );
   dc4fa:	2001      	movs	r0, #1
   dc4fc:	f002 fab0 	bl	dea60 <mbedtls_pk_info_from_type>
   dc500:	4601      	mov	r1, r0
    if( mbedtls_pk_setup( pk, pk_info ) == 0 &&
   dc502:	4628      	mov	r0, r5
   dc504:	f002 fab8 	bl	dea78 <mbedtls_pk_setup>
   dc508:	b190      	cbz	r0, dc530 <mbedtls_pk_parse_key+0x1f0>
    mbedtls_pk_free( pk );
   dc50a:	4628      	mov	r0, r5
   dc50c:	f002 fa98 	bl	dea40 <mbedtls_pk_free>
    mbedtls_pk_init( pk );
   dc510:	4628      	mov	r0, r5
   dc512:	f002 fa91 	bl	dea38 <mbedtls_pk_init>
    pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_ECKEY );
   dc516:	2002      	movs	r0, #2
   dc518:	f002 faa2 	bl	dea60 <mbedtls_pk_info_from_type>
   dc51c:	4601      	mov	r1, r0
    if( mbedtls_pk_setup( pk, pk_info ) == 0 &&
   dc51e:	4628      	mov	r0, r5
   dc520:	f002 faaa 	bl	dea78 <mbedtls_pk_setup>
   dc524:	b160      	cbz	r0, dc540 <mbedtls_pk_parse_key+0x200>
    mbedtls_pk_free( pk );
   dc526:	4628      	mov	r0, r5
   dc528:	f002 fa8a 	bl	dea40 <mbedtls_pk_free>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
   dc52c:	4c13      	ldr	r4, [pc, #76]	; (dc57c <mbedtls_pk_parse_key+0x23c>)
   dc52e:	e746      	b.n	dc3be <mbedtls_pk_parse_key+0x7e>
        pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ), key, keylen ) == 0 )
   dc530:	6868      	ldr	r0, [r5, #4]
   dc532:	463a      	mov	r2, r7
   dc534:	4631      	mov	r1, r6
   dc536:	f7ff fba9 	bl	dbc8c <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj>
    if( mbedtls_pk_setup( pk, pk_info ) == 0 &&
   dc53a:	2800      	cmp	r0, #0
   dc53c:	d1e5      	bne.n	dc50a <mbedtls_pk_parse_key+0x1ca>
   dc53e:	e7c3      	b.n	dc4c8 <mbedtls_pk_parse_key+0x188>
        pk_parse_key_sec1_der( mbedtls_pk_ec( *pk ),
   dc540:	6868      	ldr	r0, [r5, #4]
   dc542:	463a      	mov	r2, r7
   dc544:	4631      	mov	r1, r6
   dc546:	f7ff fcc1 	bl	dbecc <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj>
    if( mbedtls_pk_setup( pk, pk_info ) == 0 &&
   dc54a:	2800      	cmp	r0, #0
   dc54c:	d0bc      	beq.n	dc4c8 <mbedtls_pk_parse_key+0x188>
   dc54e:	e7ea      	b.n	dc526 <mbedtls_pk_parse_key+0x1e6>
   dc550:	000ec4b1 	.word	0x000ec4b1
   dc554:	000ec4cf 	.word	0x000ec4cf
   dc558:	ffffc480 	.word	0xffffc480
   dc55c:	ffffc400 	.word	0xffffc400
   dc560:	000ec4ef 	.word	0x000ec4ef
   dc564:	000ec50c 	.word	0x000ec50c
   dc568:	000ec52b 	.word	0x000ec52b
   dc56c:	000ec545 	.word	0x000ec545
   dc570:	000ec561 	.word	0x000ec561
   dc574:	000ec585 	.word	0x000ec585
   dc578:	ffffc080 	.word	0xffffc080
   dc57c:	ffffc300 	.word	0xffffc300

000dc580 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>:
 * Sets output to x times H using the precomputed tables.
 * x and output are seen as elements of GF(2^128) as in [MGV].
 */
static void gcm_mult( mbedtls_gcm_context *ctx, const unsigned char x[16],
                      unsigned char output[16] )
{
   dc580:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        mbedtls_aesni_gcm_mult( output, x, h );
        return;
    }
#endif /* MBEDTLS_AESNI_C && MBEDTLS_HAVE_X86_64 */

    lo = x[15] & 0xf;
   dc584:	7bcc      	ldrb	r4, [r1, #15]
   dc586:	f8df e0f4 	ldr.w	lr, [pc, #244]	; dc67c <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh+0xfc>
{
   dc58a:	9100      	str	r1, [sp, #0]
   dc58c:	f004 040f 	and.w	r4, r4, #15
   dc590:	eb00 04c4 	add.w	r4, r0, r4, lsl #3

    zh = ctx->HH[lo];
   dc594:	e9d4 a52e 	ldrd	sl, r5, [r4, #184]	; 0xb8
    zl = ctx->HL[lo];
   dc598:	e9d4 340e 	ldrd	r3, r4, [r4, #56]	; 0x38

    for( i = 15; i >= 0; i-- )
   dc59c:	260f      	movs	r6, #15
    {
        lo = x[i] & 0xf;
   dc59e:	9900      	ldr	r1, [sp, #0]
   dc5a0:	5d8f      	ldrb	r7, [r1, r6]
        hi = x[i] >> 4;
   dc5a2:	1139      	asrs	r1, r7, #4
        lo = x[i] & 0xf;
   dc5a4:	f007 0b0f 	and.w	fp, r7, #15
        hi = x[i] >> 4;
   dc5a8:	f003 070f 	and.w	r7, r3, #15
   dc5ac:	9101      	str	r1, [sp, #4]

        if( i != 15 )
   dc5ae:	f85e 7037 	ldr.w	r7, [lr, r7, lsl #3]
   dc5b2:	ea4f 1c13 	mov.w	ip, r3, lsr #4
   dc5b6:	0439      	lsls	r1, r7, #16
   dc5b8:	ea4f 181a 	mov.w	r8, sl, lsr #4
   dc5bc:	0927      	lsrs	r7, r4, #4
   dc5be:	2e0f      	cmp	r6, #15
   dc5c0:	ea4c 7c04 	orr.w	ip, ip, r4, lsl #28
   dc5c4:	ea47 770a 	orr.w	r7, r7, sl, lsl #28
   dc5c8:	ea48 7805 	orr.w	r8, r8, r5, lsl #28
   dc5cc:	ea4f 1915 	mov.w	r9, r5, lsr #4
   dc5d0:	d00d      	beq.n	dc5ee <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh+0x6e>
        {
            rem = (unsigned char) zl & 0xf;
            zl = ( zh << 60 ) | ( zl >> 4 );
            zh = ( zh >> 4 );
            zh ^= (uint64_t) last4[rem] << 48;
            zh ^= ctx->HH[lo];
   dc5d2:	eb00 04cb 	add.w	r4, r0, fp, lsl #3
   dc5d6:	e9d4 352e 	ldrd	r3, r5, [r4, #184]	; 0xb8
   dc5da:	ea83 0a08 	eor.w	sl, r3, r8
            zl ^= ctx->HL[lo];
   dc5de:	e9d4 340e 	ldrd	r3, r4, [r4, #56]	; 0x38
            zh ^= ctx->HH[lo];
   dc5e2:	4069      	eors	r1, r5
   dc5e4:	ea81 0509 	eor.w	r5, r1, r9
            zl ^= ctx->HL[lo];
   dc5e8:	ea8c 0303 	eor.w	r3, ip, r3
   dc5ec:	407c      	eors	r4, r7

        }

        rem = (unsigned char) zl & 0xf;
        zl = ( zh << 60 ) | ( zl >> 4 );
   dc5ee:	9901      	ldr	r1, [sp, #4]
   dc5f0:	ea4f 770a 	mov.w	r7, sl, lsl #28
   dc5f4:	ea4f 1c13 	mov.w	ip, r3, lsr #4
   dc5f8:	eb00 08c1 	add.w	r8, r0, r1, lsl #3
   dc5fc:	ea4c 7c04 	orr.w	ip, ip, r4, lsl #28
   dc600:	ea47 1414 	orr.w	r4, r7, r4, lsr #4
        zh = ( zh >> 4 );
        zh ^= (uint64_t) last4[rem] << 48;
        zh ^= ctx->HH[hi];
   dc604:	e9d8 712e 	ldrd	r7, r1, [r8, #184]	; 0xb8
        zh = ( zh >> 4 );
   dc608:	ea4f 1a1a 	mov.w	sl, sl, lsr #4
   dc60c:	ea4a 7a05 	orr.w	sl, sl, r5, lsl #28
        zh ^= (uint64_t) last4[rem] << 48;
   dc610:	f003 030f 	and.w	r3, r3, #15
   dc614:	ea81 1515 	eor.w	r5, r1, r5, lsr #4
   dc618:	4918      	ldr	r1, [pc, #96]	; (dc67c <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh+0xfc>)
   dc61a:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
        zh ^= ctx->HH[hi];
   dc61e:	ea8a 0a07 	eor.w	sl, sl, r7
   dc622:	ea85 4503 	eor.w	r5, r5, r3, lsl #16
        zl ^= ctx->HL[hi];
   dc626:	e9d8 370e 	ldrd	r3, r7, [r8, #56]	; 0x38
    for( i = 15; i >= 0; i-- )
   dc62a:	3e01      	subs	r6, #1
        zl ^= ctx->HL[hi];
   dc62c:	ea8c 0303 	eor.w	r3, ip, r3
   dc630:	ea84 0407 	eor.w	r4, r4, r7
    for( i = 15; i >= 0; i-- )
   dc634:	d2b3      	bcs.n	dc59e <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh+0x1e>
    }

    PUT_UINT32_BE( zh >> 32, output, 0 );
   dc636:	0e29      	lsrs	r1, r5, #24
   dc638:	7011      	strb	r1, [r2, #0]
   dc63a:	0c29      	lsrs	r1, r5, #16
   dc63c:	7051      	strb	r1, [r2, #1]
   dc63e:	0a29      	lsrs	r1, r5, #8
   dc640:	7091      	strb	r1, [r2, #2]
    PUT_UINT32_BE( zh, output, 4 );
   dc642:	ea4f 611a 	mov.w	r1, sl, lsr #24
   dc646:	7111      	strb	r1, [r2, #4]
   dc648:	ea4f 411a 	mov.w	r1, sl, lsr #16
   dc64c:	7151      	strb	r1, [r2, #5]
   dc64e:	ea4f 211a 	mov.w	r1, sl, lsr #8
   dc652:	7191      	strb	r1, [r2, #6]
    PUT_UINT32_BE( zl >> 32, output, 8 );
   dc654:	0e21      	lsrs	r1, r4, #24
   dc656:	7211      	strb	r1, [r2, #8]
   dc658:	0c21      	lsrs	r1, r4, #16
   dc65a:	7251      	strb	r1, [r2, #9]
   dc65c:	0a21      	lsrs	r1, r4, #8
   dc65e:	7291      	strb	r1, [r2, #10]
    PUT_UINT32_BE( zl, output, 12 );
   dc660:	0e19      	lsrs	r1, r3, #24
   dc662:	7311      	strb	r1, [r2, #12]
   dc664:	0c19      	lsrs	r1, r3, #16
   dc666:	7351      	strb	r1, [r2, #13]
   dc668:	0a19      	lsrs	r1, r3, #8
    PUT_UINT32_BE( zh >> 32, output, 0 );
   dc66a:	70d5      	strb	r5, [r2, #3]
    PUT_UINT32_BE( zh, output, 4 );
   dc66c:	f882 a007 	strb.w	sl, [r2, #7]
    PUT_UINT32_BE( zl >> 32, output, 8 );
   dc670:	72d4      	strb	r4, [r2, #11]
    PUT_UINT32_BE( zl, output, 12 );
   dc672:	7391      	strb	r1, [r2, #14]
   dc674:	73d3      	strb	r3, [r2, #15]
}
   dc676:	b003      	add	sp, #12
   dc678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc67c:	000ec5b0 	.word	0x000ec5b0

000dc680 <mbedtls_gcm_init>:
    memset( ctx, 0, sizeof( mbedtls_gcm_context ) );
   dc680:	f44f 72c0 	mov.w	r2, #384	; 0x180
   dc684:	2100      	movs	r1, #0
   dc686:	f00c b949 	b.w	e891c <memset>

000dc68a <mbedtls_gcm_setkey>:
{
   dc68a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc68e:	4604      	mov	r4, r0
   dc690:	b08d      	sub	sp, #52	; 0x34
   dc692:	4608      	mov	r0, r1
   dc694:	4690      	mov	r8, r2
    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
   dc696:	4619      	mov	r1, r3
   dc698:	2201      	movs	r2, #1
{
   dc69a:	461e      	mov	r6, r3
    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
   dc69c:	f7f9 fcee 	bl	d607c <mbedtls_cipher_info_from_values>
    if( cipher_info == NULL )
   dc6a0:	4605      	mov	r5, r0
   dc6a2:	2800      	cmp	r0, #0
   dc6a4:	f000 8096 	beq.w	dc7d4 <mbedtls_gcm_setkey+0x14a>
    if( cipher_info->block_size != 16 )
   dc6a8:	6947      	ldr	r7, [r0, #20]
   dc6aa:	2f10      	cmp	r7, #16
   dc6ac:	f040 8092 	bne.w	dc7d4 <mbedtls_gcm_setkey+0x14a>
    mbedtls_cipher_free( &ctx->cipher_ctx );
   dc6b0:	4620      	mov	r0, r4
   dc6b2:	f7f9 fcfb 	bl	d60ac <mbedtls_cipher_free>
    if( ( ret = mbedtls_cipher_setup( &ctx->cipher_ctx, cipher_info ) ) != 0 )
   dc6b6:	4629      	mov	r1, r5
   dc6b8:	4620      	mov	r0, r4
   dc6ba:	f7f9 fd07 	bl	d60cc <mbedtls_cipher_setup>
   dc6be:	2800      	cmp	r0, #0
   dc6c0:	f040 8085 	bne.w	dc7ce <mbedtls_gcm_setkey+0x144>
    if( ( ret = mbedtls_cipher_setkey( &ctx->cipher_ctx, key, keybits,
   dc6c4:	2301      	movs	r3, #1
   dc6c6:	4632      	mov	r2, r6
   dc6c8:	4641      	mov	r1, r8
   dc6ca:	4620      	mov	r0, r4
   dc6cc:	f7f9 fd16 	bl	d60fc <mbedtls_cipher_setkey>
   dc6d0:	2800      	cmp	r0, #0
   dc6d2:	d17c      	bne.n	dc7ce <mbedtls_gcm_setkey+0x144>
    memset( h, 0, 16 );
   dc6d4:	4601      	mov	r1, r0
    size_t olen = 0;
   dc6d6:	9007      	str	r0, [sp, #28]
    memset( h, 0, 16 );
   dc6d8:	463a      	mov	r2, r7
   dc6da:	a808      	add	r0, sp, #32
   dc6dc:	f00c f91e 	bl	e891c <memset>
    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, h, 16, h, &olen ) ) != 0 )
   dc6e0:	ab07      	add	r3, sp, #28
   dc6e2:	9300      	str	r3, [sp, #0]
   dc6e4:	ab08      	add	r3, sp, #32
   dc6e6:	463a      	mov	r2, r7
   dc6e8:	4619      	mov	r1, r3
   dc6ea:	4620      	mov	r0, r4
   dc6ec:	f7f9 fd52 	bl	d6194 <mbedtls_cipher_update>
   dc6f0:	2800      	cmp	r0, #0
   dc6f2:	d16c      	bne.n	dc7ce <mbedtls_gcm_setkey+0x144>
    GET_UINT32_BE( lo, h,  4  );
   dc6f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dc6f6:	9f08      	ldr	r7, [sp, #32]
   dc6f8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   dc6fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   dc6fc:	ba1b      	rev	r3, r3
   dc6fe:	ba3f      	rev	r7, r7
    GET_UINT32_BE( lo, h,  12 );
   dc700:	ba36      	rev	r6, r6
   dc702:	fa92 fc82 	rev.w	ip, r2
    ctx->HL[8] = vl;
   dc706:	e9c4 6c1e 	strd	r6, ip, [r4, #120]	; 0x78
    ctx->HH[8] = vh;
   dc70a:	e9c4 373e 	strd	r3, r7, [r4, #248]	; 0xf8
    ctx->HH[0] = 0;
   dc70e:	f04f 0800 	mov.w	r8, #0
   dc712:	f04f 0900 	mov.w	r9, #0
   dc716:	e9c4 892e 	strd	r8, r9, [r4, #184]	; 0xb8
    ctx->HL[0] = 0;
   dc71a:	e9c4 890e 	strd	r8, r9, [r4, #56]	; 0x38
   dc71e:	2103      	movs	r1, #3
    for( i = 4; i > 0; i >>= 1 )
   dc720:	2504      	movs	r5, #4
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
   dc722:	f04f 4861 	mov.w	r8, #3774873600	; 0xe1000000
   dc726:	f006 0201 	and.w	r2, r6, #1
   dc72a:	fb08 f202 	mul.w	r2, r8, r2
        vl  = ( vh << 63 ) | ( vl >> 1 );
   dc72e:	ea4f 7ec3 	mov.w	lr, r3, lsl #31
   dc732:	0876      	lsrs	r6, r6, #1
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
   dc734:	085b      	lsrs	r3, r3, #1
        vl  = ( vh << 63 ) | ( vl >> 1 );
   dc736:	ea46 76cc 	orr.w	r6, r6, ip, lsl #31
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
   dc73a:	ea43 73c7 	orr.w	r3, r3, r7, lsl #31
        vl  = ( vh << 63 ) | ( vl >> 1 );
   dc73e:	ea4e 0c5c 	orr.w	ip, lr, ip, lsr #1
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
   dc742:	ea82 0757 	eor.w	r7, r2, r7, lsr #1
    for( i = 4; i > 0; i >>= 1 )
   dc746:	3901      	subs	r1, #1
   dc748:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
        ctx->HL[i] = vl;
   dc74c:	e9c2 6c0e 	strd	r6, ip, [r2, #56]	; 0x38
        ctx->HH[i] = vh;
   dc750:	e9c2 372e 	strd	r3, r7, [r2, #184]	; 0xb8
    for( i = 4; i > 0; i >>= 1 )
   dc754:	ea4f 0565 	mov.w	r5, r5, asr #1
   dc758:	d1e5      	bne.n	dc726 <mbedtls_gcm_setkey+0x9c>
   dc75a:	f04f 0e03 	mov.w	lr, #3
    for( i = 2; i <= 8; i *= 2 )
   dc75e:	2202      	movs	r2, #2
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
   dc760:	f104 0838 	add.w	r8, r4, #56	; 0x38
   dc764:	f104 09b8 	add.w	r9, r4, #184	; 0xb8
   dc768:	eb09 06c2 	add.w	r6, r9, r2, lsl #3
   dc76c:	eb08 03c2 	add.w	r3, r8, r2, lsl #3
        vh = *HiH;
   dc770:	6871      	ldr	r1, [r6, #4]
   dc772:	9103      	str	r1, [sp, #12]
        vl = *HiL;
   dc774:	f858 1032 	ldr.w	r1, [r8, r2, lsl #3]
   dc778:	9104      	str	r1, [sp, #16]
        vh = *HiH;
   dc77a:	f859 b032 	ldr.w	fp, [r9, r2, lsl #3]
        vl = *HiL;
   dc77e:	6859      	ldr	r1, [r3, #4]
   dc780:	9105      	str	r1, [sp, #20]
        for( j = 1; j < i; j++ )
   dc782:	f104 0540 	add.w	r5, r4, #64	; 0x40
   dc786:	f106 0108 	add.w	r1, r6, #8
   dc78a:	9302      	str	r3, [sp, #8]
   dc78c:	eb06 0ac2 	add.w	sl, r6, r2, lsl #3
            HiH[j] = vh ^ ctx->HH[j];
   dc790:	e9d5 7620 	ldrd	r7, r6, [r5, #128]	; 0x80
   dc794:	9b03      	ldr	r3, [sp, #12]
   dc796:	ea87 070b 	eor.w	r7, r7, fp
   dc79a:	405e      	eors	r6, r3
   dc79c:	e9c1 7600 	strd	r7, r6, [r1]
            HiL[j] = vl ^ ctx->HL[j];
   dc7a0:	9b04      	ldr	r3, [sp, #16]
   dc7a2:	682e      	ldr	r6, [r5, #0]
   dc7a4:	46ac      	mov	ip, r5
   dc7a6:	405e      	eors	r6, r3
   dc7a8:	f8dc 7004 	ldr.w	r7, [ip, #4]
   dc7ac:	9b05      	ldr	r3, [sp, #20]
   dc7ae:	405f      	eors	r7, r3
   dc7b0:	9b02      	ldr	r3, [sp, #8]
   dc7b2:	3108      	adds	r1, #8
   dc7b4:	f843 6f08 	str.w	r6, [r3, #8]!
        for( j = 1; j < i; j++ )
   dc7b8:	4551      	cmp	r1, sl
            HiL[j] = vl ^ ctx->HL[j];
   dc7ba:	f105 0508 	add.w	r5, r5, #8
   dc7be:	9302      	str	r3, [sp, #8]
   dc7c0:	605f      	str	r7, [r3, #4]
        for( j = 1; j < i; j++ )
   dc7c2:	d1e5      	bne.n	dc790 <mbedtls_gcm_setkey+0x106>
    for( i = 2; i <= 8; i *= 2 )
   dc7c4:	f1be 0e01 	subs.w	lr, lr, #1
   dc7c8:	ea4f 0242 	mov.w	r2, r2, lsl #1
   dc7cc:	d1cc      	bne.n	dc768 <mbedtls_gcm_setkey+0xde>
}
   dc7ce:	b00d      	add	sp, #52	; 0x34
   dc7d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
   dc7d4:	f06f 0013 	mvn.w	r0, #19
   dc7d8:	e7f9      	b.n	dc7ce <mbedtls_gcm_setkey+0x144>

000dc7da <mbedtls_gcm_starts>:
                int mode,
                const unsigned char *iv,
                size_t iv_len,
                const unsigned char *add,
                size_t add_len )
{
   dc7da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc7de:	b089      	sub	sp, #36	; 0x24
    int ret;
    unsigned char work_buf[16];
    size_t i;
    const unsigned char *p;
    size_t use_len, olen = 0;
   dc7e0:	f04f 0800 	mov.w	r8, #0
{
   dc7e4:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
    size_t use_len, olen = 0;
   dc7e8:	f8cd 800c 	str.w	r8, [sp, #12]
{
   dc7ec:	4604      	mov	r4, r0
   dc7ee:	468b      	mov	fp, r1
   dc7f0:	4616      	mov	r6, r2
    GCM_VALIDATE_RET( iv != NULL );
    GCM_VALIDATE_RET( add_len == 0 || add != NULL );

    /* IV and AD are limited to 2^64 bits, so 2^61 bytes */
    /* IV is not allowed to be zero length */
    if( iv_len == 0 ||
   dc7f2:	461d      	mov	r5, r3
   dc7f4:	2b00      	cmp	r3, #0
   dc7f6:	f000 808f 	beq.w	dc918 <mbedtls_gcm_starts+0x13e>
      ( (uint64_t) add_len ) >> 61 != 0 )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
    }

    memset( ctx->y, 0x00, sizeof(ctx->y) );
   dc7fa:	f500 77ac 	add.w	r7, r0, #344	; 0x158
   dc7fe:	2210      	movs	r2, #16
   dc800:	4641      	mov	r1, r8
   dc802:	4638      	mov	r0, r7
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );
   dc804:	f504 7ab4 	add.w	sl, r4, #360	; 0x168
    memset( ctx->y, 0x00, sizeof(ctx->y) );
   dc808:	f00c f888 	bl	e891c <memset>
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );
   dc80c:	2210      	movs	r2, #16
   dc80e:	4641      	mov	r1, r8
   dc810:	4650      	mov	r0, sl
   dc812:	f00c f883 	bl	e891c <memset>

    ctx->mode = mode;
    ctx->len = 0;
   dc816:	2200      	movs	r2, #0
   dc818:	2300      	movs	r3, #0
    ctx->add_len = 0;

    if( iv_len == 12 )
   dc81a:	2d0c      	cmp	r5, #12
    ctx->len = 0;
   dc81c:	e9c4 234e 	strd	r2, r3, [r4, #312]	; 0x138
    ctx->add_len = 0;
   dc820:	e9c4 2350 	strd	r2, r3, [r4, #320]	; 0x140
    ctx->mode = mode;
   dc824:	f8c4 b178 	str.w	fp, [r4, #376]	; 0x178
    if( iv_len == 12 )
   dc828:	d134      	bne.n	dc894 <mbedtls_gcm_starts+0xba>
    {
        memcpy( ctx->y, iv, iv_len );
   dc82a:	6833      	ldr	r3, [r6, #0]
   dc82c:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
   dc830:	6873      	ldr	r3, [r6, #4]
   dc832:	607b      	str	r3, [r7, #4]
   dc834:	68b3      	ldr	r3, [r6, #8]
   dc836:	60bb      	str	r3, [r7, #8]
        ctx->y[15] = 1;
   dc838:	2301      	movs	r3, #1
   dc83a:	f884 3167 	strb.w	r3, [r4, #359]	; 0x167
            ctx->y[i] ^= work_buf[i];

        gcm_mult( ctx, ctx->y, ctx->y );
    }

    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ctx->base_ectr,
   dc83e:	ab03      	add	r3, sp, #12
   dc840:	9300      	str	r3, [sp, #0]
   dc842:	2210      	movs	r2, #16
   dc844:	f504 73a4 	add.w	r3, r4, #328	; 0x148
   dc848:	4639      	mov	r1, r7
   dc84a:	4620      	mov	r0, r4
   dc84c:	f7f9 fca2 	bl	d6194 <mbedtls_cipher_update>
   dc850:	4605      	mov	r5, r0
   dc852:	2800      	cmp	r0, #0
   dc854:	d162      	bne.n	dc91c <mbedtls_gcm_starts+0x142>
      ( (uint64_t) add_len ) >> 61 != 0 )
   dc856:	e9c4 9050 	strd	r9, r0, [r4, #320]	; 0x140
        return( ret );
    }

    ctx->add_len = add_len;
    p = add;
    while( add_len > 0 )
   dc85a:	f1b9 0f00 	cmp.w	r9, #0
   dc85e:	d05d      	beq.n	dc91c <mbedtls_gcm_starts+0x142>
    {
        use_len = ( add_len < 16 ) ? add_len : 16;
   dc860:	464f      	mov	r7, r9
   dc862:	9b12      	ldr	r3, [sp, #72]	; 0x48
   dc864:	2f10      	cmp	r7, #16
   dc866:	bf28      	it	cs
   dc868:	2710      	movcs	r7, #16

        for( i = 0; i < use_len; i++ )
   dc86a:	f504 72b4 	add.w	r2, r4, #360	; 0x168
   dc86e:	19de      	adds	r6, r3, r7
            ctx->buf[i] ^= p[i];
   dc870:	f813 0b01 	ldrb.w	r0, [r3], #1
   dc874:	7811      	ldrb	r1, [r2, #0]
        for( i = 0; i < use_len; i++ )
   dc876:	429e      	cmp	r6, r3
            ctx->buf[i] ^= p[i];
   dc878:	ea81 0100 	eor.w	r1, r1, r0
   dc87c:	f802 1b01 	strb.w	r1, [r2], #1
        for( i = 0; i < use_len; i++ )
   dc880:	d1f6      	bne.n	dc870 <mbedtls_gcm_starts+0x96>

        gcm_mult( ctx, ctx->buf, ctx->buf );
   dc882:	4652      	mov	r2, sl
   dc884:	4651      	mov	r1, sl
   dc886:	4620      	mov	r0, r4
   dc888:	f7ff fe7a 	bl	dc580 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>

        add_len -= use_len;
   dc88c:	eba9 0907 	sub.w	r9, r9, r7
        p += use_len;
   dc890:	9612      	str	r6, [sp, #72]	; 0x48
    while( add_len > 0 )
   dc892:	e7e2      	b.n	dc85a <mbedtls_gcm_starts+0x80>
        PUT_UINT32_BE( iv_len * 8, work_buf, 12 );
   dc894:	f3c5 5247 	ubfx	r2, r5, #21, #8
   dc898:	f88d 201c 	strb.w	r2, [sp, #28]
        memset( work_buf, 0x00, 16 );
   dc89c:	e9cd 8804 	strd	r8, r8, [sp, #16]
        PUT_UINT32_BE( iv_len * 8, work_buf, 12 );
   dc8a0:	f3c5 324f 	ubfx	r2, r5, #13, #16
   dc8a4:	00eb      	lsls	r3, r5, #3
   dc8a6:	f88d 201d 	strb.w	r2, [sp, #29]
   dc8aa:	f3c5 1257 	ubfx	r2, r5, #5, #24
        memset( work_buf, 0x00, 16 );
   dc8ae:	f8cd 8018 	str.w	r8, [sp, #24]
        PUT_UINT32_BE( iv_len * 8, work_buf, 12 );
   dc8b2:	f88d 201e 	strb.w	r2, [sp, #30]
   dc8b6:	f88d 301f 	strb.w	r3, [sp, #31]
            use_len = ( iv_len < 16 ) ? iv_len : 16;
   dc8ba:	2d10      	cmp	r5, #16
   dc8bc:	46ab      	mov	fp, r5
   dc8be:	f504 78ac 	add.w	r8, r4, #344	; 0x158
   dc8c2:	bf28      	it	cs
   dc8c4:	f04f 0b10 	movcs.w	fp, #16
            for( i = 0; i < use_len; i++ )
   dc8c8:	4633      	mov	r3, r6
   dc8ca:	eb0b 0006 	add.w	r0, fp, r6
            use_len = ( iv_len < 16 ) ? iv_len : 16;
   dc8ce:	4642      	mov	r2, r8
                ctx->y[i] ^= p[i];
   dc8d0:	f813 cb01 	ldrb.w	ip, [r3], #1
   dc8d4:	7811      	ldrb	r1, [r2, #0]
            for( i = 0; i < use_len; i++ )
   dc8d6:	4283      	cmp	r3, r0
                ctx->y[i] ^= p[i];
   dc8d8:	ea81 010c 	eor.w	r1, r1, ip
   dc8dc:	f802 1b01 	strb.w	r1, [r2], #1
            for( i = 0; i < use_len; i++ )
   dc8e0:	d1f6      	bne.n	dc8d0 <mbedtls_gcm_starts+0xf6>
            gcm_mult( ctx, ctx->y, ctx->y );
   dc8e2:	463a      	mov	r2, r7
   dc8e4:	4639      	mov	r1, r7
   dc8e6:	4620      	mov	r0, r4
   dc8e8:	f7ff fe4a 	bl	dc580 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>
        while( iv_len > 0 )
   dc8ec:	ebb5 050b 	subs.w	r5, r5, fp
            p += use_len;
   dc8f0:	445e      	add	r6, fp
        while( iv_len > 0 )
   dc8f2:	d1e2      	bne.n	dc8ba <mbedtls_gcm_starts+0xe0>
   dc8f4:	aa04      	add	r2, sp, #16
   dc8f6:	f504 71b4 	add.w	r1, r4, #360	; 0x168
            ctx->y[i] ^= work_buf[i];
   dc8fa:	f898 3000 	ldrb.w	r3, [r8]
   dc8fe:	f812 0b01 	ldrb.w	r0, [r2], #1
   dc902:	4043      	eors	r3, r0
   dc904:	f808 3b01 	strb.w	r3, [r8], #1
        for( i = 0; i < 16; i++ )
   dc908:	4588      	cmp	r8, r1
   dc90a:	d1f6      	bne.n	dc8fa <mbedtls_gcm_starts+0x120>
        gcm_mult( ctx, ctx->y, ctx->y );
   dc90c:	463a      	mov	r2, r7
   dc90e:	4639      	mov	r1, r7
   dc910:	4620      	mov	r0, r4
   dc912:	f7ff fe35 	bl	dc580 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>
   dc916:	e792      	b.n	dc83e <mbedtls_gcm_starts+0x64>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
   dc918:	f06f 0513 	mvn.w	r5, #19
    }

    return( 0 );
}
   dc91c:	4628      	mov	r0, r5
   dc91e:	b009      	add	sp, #36	; 0x24
   dc920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000dc924 <mbedtls_gcm_update>:

int mbedtls_gcm_update( mbedtls_gcm_context *ctx,
                size_t length,
                const unsigned char *input,
                unsigned char *output )
{
   dc924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc928:	461f      	mov	r7, r3
   dc92a:	b089      	sub	sp, #36	; 0x24
    int ret;
    unsigned char ectr[16];
    size_t i;
    const unsigned char *p;
    unsigned char *out_p = output;
    size_t use_len, olen = 0;
   dc92c:	2300      	movs	r3, #0

    GCM_VALIDATE_RET( ctx != NULL );
    GCM_VALIDATE_RET( length == 0 || input != NULL );
    GCM_VALIDATE_RET( length == 0 || output != NULL );

    if( output > input && (size_t) ( output - input ) < length )
   dc92e:	4297      	cmp	r7, r2
{
   dc930:	4604      	mov	r4, r0
   dc932:	460d      	mov	r5, r1
   dc934:	4616      	mov	r6, r2
    size_t use_len, olen = 0;
   dc936:	9303      	str	r3, [sp, #12]
    if( output > input && (size_t) ( output - input ) < length )
   dc938:	d902      	bls.n	dc940 <mbedtls_gcm_update+0x1c>
   dc93a:	1abb      	subs	r3, r7, r2
   dc93c:	428b      	cmp	r3, r1
   dc93e:	d366      	bcc.n	dca0e <mbedtls_gcm_update+0xea>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    /* Total length is restricted to 2^39 - 256 bits, ie 2^36 - 2^5 bytes
     * Also check for possible overflow */
    if( ctx->len + length < ctx->len ||
   dc940:	e9d4 ab4e 	ldrd	sl, fp, [r4, #312]	; 0x138
   dc944:	2300      	movs	r3, #0
   dc946:	eb1a 0805 	adds.w	r8, sl, r5
   dc94a:	eb5b 0903 	adcs.w	r9, fp, r3
   dc94e:	f04f 0000 	mov.w	r0, #0
   dc952:	f04f 0100 	mov.w	r1, #0
   dc956:	bf24      	itt	cs
   dc958:	2001      	movcs	r0, #1
   dc95a:	2100      	movcs	r1, #0
   dc95c:	ea50 0301 	orrs.w	r3, r0, r1
   dc960:	d155      	bne.n	dca0e <mbedtls_gcm_update+0xea>
   dc962:	230f      	movs	r3, #15
   dc964:	f06f 021f 	mvn.w	r2, #31
   dc968:	454b      	cmp	r3, r9
   dc96a:	bf08      	it	eq
   dc96c:	4542      	cmpeq	r2, r8
   dc96e:	d34e      	bcc.n	dca0e <mbedtls_gcm_update+0xea>
        (uint64_t) ctx->len + length > 0xFFFFFFFE0ull )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
    }

    ctx->len += length;
   dc970:	e9c4 894e 	strd	r8, r9, [r4, #312]	; 0x138

        for( i = 16; i > 12; i-- )
            if( ++ctx->y[i - 1] != 0 )
                break;

        if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ectr,
   dc974:	f504 7aac 	add.w	sl, r4, #344	; 0x158
   dc978:	f204 1963 	addw	r9, r4, #355	; 0x163
    while( length > 0 )
   dc97c:	2d00      	cmp	r5, #0
   dc97e:	d04b      	beq.n	dca18 <mbedtls_gcm_update+0xf4>
        use_len = ( length < 16 ) ? length : 16;
   dc980:	2d10      	cmp	r5, #16
   dc982:	46a8      	mov	r8, r5
   dc984:	f204 1267 	addw	r2, r4, #359	; 0x167
   dc988:	bf28      	it	cs
   dc98a:	f04f 0810 	movcs.w	r8, #16
            if( ++ctx->y[i - 1] != 0 )
   dc98e:	7813      	ldrb	r3, [r2, #0]
   dc990:	3301      	adds	r3, #1
   dc992:	b2db      	uxtb	r3, r3
   dc994:	f802 3901 	strb.w	r3, [r2], #-1
   dc998:	b90b      	cbnz	r3, dc99e <mbedtls_gcm_update+0x7a>
        for( i = 16; i > 12; i-- )
   dc99a:	454a      	cmp	r2, r9
   dc99c:	d1f7      	bne.n	dc98e <mbedtls_gcm_update+0x6a>
        if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ectr,
   dc99e:	ab03      	add	r3, sp, #12
   dc9a0:	9300      	str	r3, [sp, #0]
   dc9a2:	2210      	movs	r2, #16
   dc9a4:	ab04      	add	r3, sp, #16
   dc9a6:	4651      	mov	r1, sl
   dc9a8:	4620      	mov	r0, r4
   dc9aa:	f7f9 fbf3 	bl	d6194 <mbedtls_cipher_update>
   dc9ae:	bb80      	cbnz	r0, dca12 <mbedtls_gcm_update+0xee>
   dc9b0:	f504 73b4 	add.w	r3, r4, #360	; 0x168
   dc9b4:	4631      	mov	r1, r6
   dc9b6:	f10d 0c10 	add.w	ip, sp, #16
   dc9ba:	f107 3eff 	add.w	lr, r7, #4294967295
   dc9be:	4446      	add	r6, r8
   dc9c0:	461a      	mov	r2, r3
            return( ret );
        }

        for( i = 0; i < use_len; i++ )
        {
            if( ctx->mode == MBEDTLS_GCM_DECRYPT )
   dc9c2:	f8d4 0178 	ldr.w	r0, [r4, #376]	; 0x178
   dc9c6:	b928      	cbnz	r0, dc9d4 <mbedtls_gcm_update+0xb0>
                ctx->buf[i] ^= p[i];
   dc9c8:	7818      	ldrb	r0, [r3, #0]
   dc9ca:	f891 b000 	ldrb.w	fp, [r1]
   dc9ce:	ea80 000b 	eor.w	r0, r0, fp
   dc9d2:	7018      	strb	r0, [r3, #0]
            out_p[i] = ectr[i] ^ p[i];
   dc9d4:	f811 0b01 	ldrb.w	r0, [r1], #1
   dc9d8:	f81c bb01 	ldrb.w	fp, [ip], #1
   dc9dc:	ea8b 0b00 	eor.w	fp, fp, r0
   dc9e0:	f80e bf01 	strb.w	fp, [lr, #1]!
            if( ctx->mode == MBEDTLS_GCM_ENCRYPT )
   dc9e4:	f8d4 0178 	ldr.w	r0, [r4, #376]	; 0x178
   dc9e8:	2801      	cmp	r0, #1
                ctx->buf[i] ^= out_p[i];
   dc9ea:	bf02      	ittt	eq
   dc9ec:	7818      	ldrbeq	r0, [r3, #0]
   dc9ee:	ea8b 0b00 	eoreq.w	fp, fp, r0
   dc9f2:	f883 b000 	strbeq.w	fp, [r3]
        for( i = 0; i < use_len; i++ )
   dc9f6:	428e      	cmp	r6, r1
   dc9f8:	f103 0301 	add.w	r3, r3, #1
   dc9fc:	d1e1      	bne.n	dc9c2 <mbedtls_gcm_update+0x9e>
        }

        gcm_mult( ctx, ctx->buf, ctx->buf );
   dc9fe:	4611      	mov	r1, r2
   dca00:	4620      	mov	r0, r4
   dca02:	f7ff fdbd 	bl	dc580 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>

        length -= use_len;
   dca06:	eba5 0508 	sub.w	r5, r5, r8
        p += use_len;
        out_p += use_len;
   dca0a:	4447      	add	r7, r8
    while( length > 0 )
   dca0c:	e7b6      	b.n	dc97c <mbedtls_gcm_update+0x58>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
   dca0e:	f06f 0013 	mvn.w	r0, #19
    }

    return( 0 );
}
   dca12:	b009      	add	sp, #36	; 0x24
   dca14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return( 0 );
   dca18:	4628      	mov	r0, r5
   dca1a:	e7fa      	b.n	dca12 <mbedtls_gcm_update+0xee>

000dca1c <mbedtls_gcm_finish>:

int mbedtls_gcm_finish( mbedtls_gcm_context *ctx,
                unsigned char *tag,
                size_t tag_len )
{
   dca1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    uint64_t orig_add_len;

    GCM_VALIDATE_RET( ctx != NULL );
    GCM_VALIDATE_RET( tag != NULL );

    orig_len = ctx->len * 8;
   dca20:	e9d0 354e 	ldrd	r3, r5, [r0, #312]	; 0x138
   dca24:	00ed      	lsls	r5, r5, #3
   dca26:	ea45 7553 	orr.w	r5, r5, r3, lsr #29
   dca2a:	ea4f 08c3 	mov.w	r8, r3, lsl #3
    orig_add_len = ctx->add_len * 8;
   dca2e:	e9d0 3650 	ldrd	r3, r6, [r0, #320]	; 0x140
   dca32:	00f6      	lsls	r6, r6, #3
   dca34:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
   dca38:	ea4f 09c3 	mov.w	r9, r3, lsl #3

    if( tag_len > 16 || tag_len < 4 )
   dca3c:	1f13      	subs	r3, r2, #4
   dca3e:	2b0c      	cmp	r3, #12
{
   dca40:	4604      	mov	r4, r0
   dca42:	460f      	mov	r7, r1
   dca44:	4692      	mov	sl, r2
    if( tag_len > 16 || tag_len < 4 )
   dca46:	d847      	bhi.n	dcad8 <mbedtls_gcm_finish+0xbc>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    memcpy( tag, ctx->base_ectr, tag_len );
   dca48:	f500 71a4 	add.w	r1, r0, #328	; 0x148
   dca4c:	4638      	mov	r0, r7
   dca4e:	f00b ff3d 	bl	e88cc <memcpy>

    if( orig_len || orig_add_len )
   dca52:	ea48 0209 	orr.w	r2, r8, r9
   dca56:	ea45 0306 	orr.w	r3, r5, r6
   dca5a:	4313      	orrs	r3, r2
   dca5c:	d103      	bne.n	dca66 <mbedtls_gcm_finish+0x4a>

        for( i = 0; i < tag_len; i++ )
            tag[i] ^= ctx->buf[i];
    }

    return( 0 );
   dca5e:	2000      	movs	r0, #0
}
   dca60:	b004      	add	sp, #16
   dca62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
   dca66:	0e33      	lsrs	r3, r6, #24
   dca68:	f88d 3000 	strb.w	r3, [sp]
   dca6c:	0c33      	lsrs	r3, r6, #16
   dca6e:	f88d 3001 	strb.w	r3, [sp, #1]
   dca72:	0a33      	lsrs	r3, r6, #8
   dca74:	f88d 3002 	strb.w	r3, [sp, #2]
   dca78:	fa99 f389 	rev.w	r3, r9
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
   dca7c:	9301      	str	r3, [sp, #4]
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
   dca7e:	0e2b      	lsrs	r3, r5, #24
   dca80:	f88d 3008 	strb.w	r3, [sp, #8]
   dca84:	0c2b      	lsrs	r3, r5, #16
   dca86:	f88d 3009 	strb.w	r3, [sp, #9]
   dca8a:	0a2b      	lsrs	r3, r5, #8
   dca8c:	f88d 300a 	strb.w	r3, [sp, #10]
   dca90:	f504 72b4 	add.w	r2, r4, #360	; 0x168
   dca94:	fa98 f388 	rev.w	r3, r8
   dca98:	f88d 500b 	strb.w	r5, [sp, #11]
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );
   dca9c:	9303      	str	r3, [sp, #12]
        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
   dca9e:	f88d 6003 	strb.w	r6, [sp, #3]
        for( i = 0; i < 16; i++ )
   dcaa2:	4668      	mov	r0, sp
   dcaa4:	f504 75bc 	add.w	r5, r4, #376	; 0x178
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );
   dcaa8:	4613      	mov	r3, r2
            ctx->buf[i] ^= work_buf[i];
   dcaaa:	7819      	ldrb	r1, [r3, #0]
   dcaac:	f810 6b01 	ldrb.w	r6, [r0], #1
   dcab0:	4071      	eors	r1, r6
   dcab2:	f803 1b01 	strb.w	r1, [r3], #1
        for( i = 0; i < 16; i++ )
   dcab6:	42ab      	cmp	r3, r5
   dcab8:	d1f7      	bne.n	dcaaa <mbedtls_gcm_finish+0x8e>
        gcm_mult( ctx, ctx->buf, ctx->buf );
   dcaba:	4620      	mov	r0, r4
   dcabc:	4611      	mov	r1, r2
   dcabe:	f7ff fd5f 	bl	dc580 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>
        for( i = 0; i < tag_len; i++ )
   dcac2:	44ba      	add	sl, r7
   dcac4:	4638      	mov	r0, r7
            tag[i] ^= ctx->buf[i];
   dcac6:	7803      	ldrb	r3, [r0, #0]
   dcac8:	f812 1b01 	ldrb.w	r1, [r2], #1
   dcacc:	404b      	eors	r3, r1
   dcace:	f800 3b01 	strb.w	r3, [r0], #1
        for( i = 0; i < tag_len; i++ )
   dcad2:	4582      	cmp	sl, r0
   dcad4:	d1f7      	bne.n	dcac6 <mbedtls_gcm_finish+0xaa>
   dcad6:	e7c2      	b.n	dca5e <mbedtls_gcm_finish+0x42>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
   dcad8:	f06f 0013 	mvn.w	r0, #19
   dcadc:	e7c0      	b.n	dca60 <mbedtls_gcm_finish+0x44>

000dcade <mbedtls_gcm_crypt_and_tag>:
                       size_t add_len,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t tag_len,
                       unsigned char *tag )
{
   dcade:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   dcae2:	4615      	mov	r5, r2
   dcae4:	461a      	mov	r2, r3
    GCM_VALIDATE_RET( add_len == 0 || add != NULL );
    GCM_VALIDATE_RET( length == 0 || input != NULL );
    GCM_VALIDATE_RET( length == 0 || output != NULL );
    GCM_VALIDATE_RET( tag != NULL );

    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
   dcae6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   dcae8:	9301      	str	r3, [sp, #4]
   dcaea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   dcaec:	9300      	str	r3, [sp, #0]
   dcaee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
{
   dcaf0:	e9dd 890d 	ldrd	r8, r9, [sp, #52]	; 0x34
   dcaf4:	e9dd 760f 	ldrd	r7, r6, [sp, #60]	; 0x3c
   dcaf8:	4604      	mov	r4, r0
    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
   dcafa:	f7ff fe6e 	bl	dc7da <mbedtls_gcm_starts>
   dcafe:	b970      	cbnz	r0, dcb1e <mbedtls_gcm_crypt_and_tag+0x40>
        return( ret );

    if( ( ret = mbedtls_gcm_update( ctx, length, input, output ) ) != 0 )
   dcb00:	464b      	mov	r3, r9
   dcb02:	4642      	mov	r2, r8
   dcb04:	4629      	mov	r1, r5
   dcb06:	4620      	mov	r0, r4
   dcb08:	f7ff ff0c 	bl	dc924 <mbedtls_gcm_update>
   dcb0c:	b938      	cbnz	r0, dcb1e <mbedtls_gcm_crypt_and_tag+0x40>
        return( ret );

    if( ( ret = mbedtls_gcm_finish( ctx, tag, tag_len ) ) != 0 )
   dcb0e:	463a      	mov	r2, r7
   dcb10:	4631      	mov	r1, r6
   dcb12:	4620      	mov	r0, r4
        return( ret );

    return( 0 );
}
   dcb14:	b003      	add	sp, #12
   dcb16:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if( ( ret = mbedtls_gcm_finish( ctx, tag, tag_len ) ) != 0 )
   dcb1a:	f7ff bf7f 	b.w	dca1c <mbedtls_gcm_finish>
}
   dcb1e:	b003      	add	sp, #12
   dcb20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000dcb24 <mbedtls_gcm_auth_decrypt>:
                      size_t add_len,
                      const unsigned char *tag,
                      size_t tag_len,
                      const unsigned char *input,
                      unsigned char *output )
{
   dcb24:	b5f0      	push	{r4, r5, r6, r7, lr}
   dcb26:	b08d      	sub	sp, #52	; 0x34
   dcb28:	460d      	mov	r5, r1
    GCM_VALIDATE_RET( add_len == 0 || add != NULL );
    GCM_VALIDATE_RET( tag != NULL );
    GCM_VALIDATE_RET( length == 0 || input != NULL );
    GCM_VALIDATE_RET( length == 0 || output != NULL );

    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
   dcb2a:	9916      	ldr	r1, [sp, #88]	; 0x58
   dcb2c:	9103      	str	r1, [sp, #12]
   dcb2e:	9913      	ldr	r1, [sp, #76]	; 0x4c
{
   dcb30:	9c15      	ldr	r4, [sp, #84]	; 0x54
    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
   dcb32:	9102      	str	r1, [sp, #8]
   dcb34:	9912      	ldr	r1, [sp, #72]	; 0x48
{
   dcb36:	9e17      	ldr	r6, [sp, #92]	; 0x5c
    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
   dcb38:	9604      	str	r6, [sp, #16]
   dcb3a:	af08      	add	r7, sp, #32
   dcb3c:	e9cd 3100 	strd	r3, r1, [sp]
   dcb40:	e9cd 4705 	strd	r4, r7, [sp, #20]
   dcb44:	4613      	mov	r3, r2
   dcb46:	2100      	movs	r1, #0
   dcb48:	462a      	mov	r2, r5
   dcb4a:	f7ff ffc8 	bl	dcade <mbedtls_gcm_crypt_and_tag>
   dcb4e:	b980      	cbnz	r0, dcb72 <mbedtls_gcm_auth_decrypt+0x4e>
    {
        return( ret );
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
   dcb50:	4603      	mov	r3, r0
   dcb52:	42a3      	cmp	r3, r4
   dcb54:	d006      	beq.n	dcb64 <mbedtls_gcm_auth_decrypt+0x40>
        diff |= tag[i] ^ check_tag[i];
   dcb56:	9a14      	ldr	r2, [sp, #80]	; 0x50
   dcb58:	5cf9      	ldrb	r1, [r7, r3]
   dcb5a:	5cd2      	ldrb	r2, [r2, r3]
   dcb5c:	404a      	eors	r2, r1
   dcb5e:	4310      	orrs	r0, r2
    for( diff = 0, i = 0; i < tag_len; i++ )
   dcb60:	3301      	adds	r3, #1
   dcb62:	e7f6      	b.n	dcb52 <mbedtls_gcm_auth_decrypt+0x2e>

    if( diff != 0 )
   dcb64:	b128      	cbz	r0, dcb72 <mbedtls_gcm_auth_decrypt+0x4e>
    {
        mbedtls_platform_zeroize( output, length );
   dcb66:	4630      	mov	r0, r6
   dcb68:	4629      	mov	r1, r5
   dcb6a:	f7fe fa37 	bl	dafdc <mbedtls_platform_zeroize>
        return( MBEDTLS_ERR_GCM_AUTH_FAILED );
   dcb6e:	f06f 0011 	mvn.w	r0, #17
    }

    return( 0 );
}
   dcb72:	b00d      	add	sp, #52	; 0x34
   dcb74:	bdf0      	pop	{r4, r5, r6, r7, pc}

000dcb76 <mbedtls_gcm_free>:

void mbedtls_gcm_free( mbedtls_gcm_context *ctx )
{
   dcb76:	b510      	push	{r4, lr}
    if( ctx == NULL )
   dcb78:	4604      	mov	r4, r0
   dcb7a:	b140      	cbz	r0, dcb8e <mbedtls_gcm_free+0x18>
        return;
    mbedtls_cipher_free( &ctx->cipher_ctx );
   dcb7c:	f7f9 fa96 	bl	d60ac <mbedtls_cipher_free>
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_gcm_context ) );
   dcb80:	4620      	mov	r0, r4
   dcb82:	f44f 71c0 	mov.w	r1, #384	; 0x180
}
   dcb86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_gcm_context ) );
   dcb8a:	f7fe ba27 	b.w	dafdc <mbedtls_platform_zeroize>
}
   dcb8e:	bd10      	pop	{r4, pc}

000dcb90 <mbedtls_base64_decode>:
/*
 * Decode a base64-formatted buffer
 */
int mbedtls_base64_decode( unsigned char *dst, size_t dlen, size_t *olen,
                   const unsigned char *src, size_t slen )
{
   dcb90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dcb94:	9e07      	ldr	r6, [sp, #28]
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] == '=' && ++j > 2 )
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
   dcb96:	f8df 812c 	ldr.w	r8, [pc, #300]	; dccc4 <mbedtls_base64_decode+0x134>
    for( i = n = j = 0; i < slen; i++ )
   dcb9a:	2700      	movs	r7, #0
   dcb9c:	463c      	mov	r4, r7
   dcb9e:	463d      	mov	r5, r7
   dcba0:	42b5      	cmp	r5, r6
   dcba2:	d23f      	bcs.n	dcc24 <mbedtls_base64_decode+0x94>
        x = 0;
   dcba4:	f04f 0e00 	mov.w	lr, #0
        while( i < slen && src[i] == ' ' )
   dcba8:	f813 c005 	ldrb.w	ip, [r3, r5]
   dcbac:	f1bc 0f20 	cmp.w	ip, #32
   dcbb0:	d108      	bne.n	dcbc4 <mbedtls_base64_decode+0x34>
            ++i;
   dcbb2:	3501      	adds	r5, #1
        while( i < slen && src[i] == ' ' )
   dcbb4:	42ae      	cmp	r6, r5
            ++x;
   dcbb6:	f10e 0e01 	add.w	lr, lr, #1
        while( i < slen && src[i] == ' ' )
   dcbba:	d1f5      	bne.n	dcba8 <mbedtls_base64_decode+0x18>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        n++;
    }

    if( n == 0 )
   dcbbc:	bba4      	cbnz	r4, dcc28 <mbedtls_base64_decode+0x98>
    {
        *olen = 0;
   dcbbe:	6014      	str	r4, [r2, #0]
        }
    }

    *olen = p - dst;

    return( 0 );
   dcbc0:	2000      	movs	r0, #0
   dcbc2:	e071      	b.n	dcca8 <mbedtls_base64_decode+0x118>
        if( i == slen )
   dcbc4:	42ae      	cmp	r6, r5
   dcbc6:	d0f9      	beq.n	dcbbc <mbedtls_base64_decode+0x2c>
        if( ( slen - i ) >= 2 &&
   dcbc8:	eba6 0905 	sub.w	r9, r6, r5
   dcbcc:	f1b9 0f01 	cmp.w	r9, #1
   dcbd0:	d915      	bls.n	dcbfe <mbedtls_base64_decode+0x6e>
   dcbd2:	f1bc 0f0d 	cmp.w	ip, #13
   dcbd6:	d112      	bne.n	dcbfe <mbedtls_base64_decode+0x6e>
            src[i] == '\r' && src[i + 1] == '\n' )
   dcbd8:	eb03 0905 	add.w	r9, r3, r5
   dcbdc:	f899 9001 	ldrb.w	r9, [r9, #1]
   dcbe0:	f1b9 0f0a 	cmp.w	r9, #10
        if( src[i] == '\n' )
   dcbe4:	d01c      	beq.n	dcc20 <mbedtls_base64_decode+0x90>
        if( x != 0 )
   dcbe6:	f1be 0f00 	cmp.w	lr, #0
   dcbea:	d105      	bne.n	dcbf8 <mbedtls_base64_decode+0x68>
        if( src[i] == '=' && ++j > 2 )
   dcbec:	f1bc 0f3d 	cmp.w	ip, #61	; 0x3d
   dcbf0:	d108      	bne.n	dcc04 <mbedtls_base64_decode+0x74>
   dcbf2:	3701      	adds	r7, #1
   dcbf4:	2f02      	cmp	r7, #2
   dcbf6:	d908      	bls.n	dcc0a <mbedtls_base64_decode+0x7a>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
   dcbf8:	f06f 002b 	mvn.w	r0, #43	; 0x2b
   dcbfc:	e054      	b.n	dcca8 <mbedtls_base64_decode+0x118>
        if( src[i] == '\n' )
   dcbfe:	f1bc 0f0a 	cmp.w	ip, #10
   dcc02:	e7ef      	b.n	dcbe4 <mbedtls_base64_decode+0x54>
        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
   dcc04:	f01c 0f80 	tst.w	ip, #128	; 0x80
   dcc08:	d1f6      	bne.n	dcbf8 <mbedtls_base64_decode+0x68>
   dcc0a:	f818 c00c 	ldrb.w	ip, [r8, ip]
   dcc0e:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
   dcc12:	d0f1      	beq.n	dcbf8 <mbedtls_base64_decode+0x68>
        if( base64_dec_map[src[i]] < 64 && j != 0 )
   dcc14:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
   dcc18:	d801      	bhi.n	dcc1e <mbedtls_base64_decode+0x8e>
   dcc1a:	2f00      	cmp	r7, #0
   dcc1c:	d1ec      	bne.n	dcbf8 <mbedtls_base64_decode+0x68>
        n++;
   dcc1e:	3401      	adds	r4, #1
    for( i = n = j = 0; i < slen; i++ )
   dcc20:	3501      	adds	r5, #1
   dcc22:	e7bd      	b.n	dcba0 <mbedtls_base64_decode+0x10>
   dcc24:	462e      	mov	r6, r5
   dcc26:	e7c9      	b.n	dcbbc <mbedtls_base64_decode+0x2c>
    n = ( 6 * ( n >> 3 ) ) + ( ( 6 * ( n & 0x7 ) + 7 ) >> 3 );
   dcc28:	f004 0c07 	and.w	ip, r4, #7
   dcc2c:	2506      	movs	r5, #6
   dcc2e:	08e4      	lsrs	r4, r4, #3
   dcc30:	fb05 fc0c 	mul.w	ip, r5, ip
   dcc34:	436c      	muls	r4, r5
   dcc36:	f10c 0c07 	add.w	ip, ip, #7
    n -= j;
   dcc3a:	1be4      	subs	r4, r4, r7
   dcc3c:	eb04 04dc 	add.w	r4, r4, ip, lsr #3
    if( dst == NULL || dlen < n )
   dcc40:	b378      	cbz	r0, dcca2 <mbedtls_base64_decode+0x112>
   dcc42:	428c      	cmp	r4, r1
   dcc44:	d82d      	bhi.n	dcca2 <mbedtls_base64_decode+0x112>
   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
   dcc46:	2700      	movs	r7, #0
        j -= ( base64_dec_map[*src] == 64 );
   dcc48:	f8df e078 	ldr.w	lr, [pc, #120]	; dccc4 <mbedtls_base64_decode+0x134>
        if( *src == '\r' || *src == '\n' || *src == ' ' )
   dcc4c:	f8df 8078 	ldr.w	r8, [pc, #120]	; dccc8 <mbedtls_base64_decode+0x138>
   dcc50:	441e      	add	r6, r3
    if( dst == NULL || dlen < n )
   dcc52:	4601      	mov	r1, r0
   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
   dcc54:	2503      	movs	r5, #3
   dcc56:	463c      	mov	r4, r7
   dcc58:	429e      	cmp	r6, r3
   dcc5a:	d030      	beq.n	dccbe <mbedtls_base64_decode+0x12e>
        if( *src == '\r' || *src == '\n' || *src == ' ' )
   dcc5c:	f813 9b01 	ldrb.w	r9, [r3], #1
   dcc60:	f1a9 0c0a 	sub.w	ip, r9, #10
   dcc64:	fa5f fc8c 	uxtb.w	ip, ip
   dcc68:	f1bc 0f16 	cmp.w	ip, #22
   dcc6c:	d804      	bhi.n	dcc78 <mbedtls_base64_decode+0xe8>
   dcc6e:	fa28 fc0c 	lsr.w	ip, r8, ip
   dcc72:	f01c 0f01 	tst.w	ip, #1
   dcc76:	d1ef      	bne.n	dcc58 <mbedtls_base64_decode+0xc8>
        j -= ( base64_dec_map[*src] == 64 );
   dcc78:	f81e c009 	ldrb.w	ip, [lr, r9]
        if( ++n == 4 )
   dcc7c:	3401      	adds	r4, #1
        j -= ( base64_dec_map[*src] == 64 );
   dcc7e:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
   dcc82:	bf08      	it	eq
   dcc84:	3d01      	subeq	r5, #1
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );
   dcc86:	f00c 0c3f 	and.w	ip, ip, #63	; 0x3f
        if( ++n == 4 )
   dcc8a:	2c04      	cmp	r4, #4
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );
   dcc8c:	ea4c 1787 	orr.w	r7, ip, r7, lsl #6
        if( ++n == 4 )
   dcc90:	d1e2      	bne.n	dcc58 <mbedtls_base64_decode+0xc8>
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
   dcc92:	b125      	cbz	r5, dcc9e <mbedtls_base64_decode+0x10e>
   dcc94:	0c3c      	lsrs	r4, r7, #16
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
   dcc96:	2d01      	cmp	r5, #1
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
   dcc98:	700c      	strb	r4, [r1, #0]
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
   dcc9a:	d107      	bne.n	dccac <mbedtls_base64_decode+0x11c>
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
   dcc9c:	3101      	adds	r1, #1
            n = 0;
   dcc9e:	2400      	movs	r4, #0
   dcca0:	e7da      	b.n	dcc58 <mbedtls_base64_decode+0xc8>
        *olen = n;
   dcca2:	6014      	str	r4, [r2, #0]
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
   dcca4:	f06f 0029 	mvn.w	r0, #41	; 0x29
}
   dcca8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            if( j > 2 ) *p++ = (unsigned char)( x       );
   dccac:	2d02      	cmp	r5, #2
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
   dccae:	ea4f 2417 	mov.w	r4, r7, lsr #8
   dccb2:	704c      	strb	r4, [r1, #1]
            if( j > 2 ) *p++ = (unsigned char)( x       );
   dccb4:	bf16      	itet	ne
   dccb6:	708f      	strbne	r7, [r1, #2]
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
   dccb8:	3102      	addeq	r1, #2
            if( j > 2 ) *p++ = (unsigned char)( x       );
   dccba:	3103      	addne	r1, #3
   dccbc:	e7ef      	b.n	dcc9e <mbedtls_base64_decode+0x10e>
    *olen = p - dst;
   dccbe:	1a09      	subs	r1, r1, r0
   dccc0:	6011      	str	r1, [r2, #0]
   dccc2:	e77d      	b.n	dcbc0 <mbedtls_base64_decode+0x30>
   dccc4:	000ec630 	.word	0x000ec630
   dccc8:	00400009 	.word	0x00400009

000dcccc <mbedtls_md_info_from_type>:
    return( NULL );
}

const mbedtls_md_info_t *mbedtls_md_info_from_type( mbedtls_md_type_t md_type )
{
    switch( md_type )
   dcccc:	3804      	subs	r0, #4
   dccce:	b2c0      	uxtb	r0, r0
   dccd0:	2804      	cmp	r0, #4
   dccd2:	bf9a      	itte	ls
   dccd4:	4b02      	ldrls	r3, [pc, #8]	; (dcce0 <mbedtls_md_info_from_type+0x14>)
   dccd6:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
{
   dccda:	2000      	movhi	r0, #0
            return( &mbedtls_sha512_info );
#endif
        default:
            return( NULL );
    }
}
   dccdc:	4770      	bx	lr
   dccde:	bf00      	nop
   dcce0:	000ec6b0 	.word	0x000ec6b0

000dcce4 <mbedtls_md_init>:

void mbedtls_md_init( mbedtls_md_context_t *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_md_context_t ) );
   dcce4:	2300      	movs	r3, #0
   dcce6:	6003      	str	r3, [r0, #0]
   dcce8:	6043      	str	r3, [r0, #4]
   dccea:	6083      	str	r3, [r0, #8]
}
   dccec:	4770      	bx	lr

000dccee <mbedtls_md_free>:

void mbedtls_md_free( mbedtls_md_context_t *ctx )
{
   dccee:	b510      	push	{r4, lr}
    if( ctx == NULL || ctx->md_info == NULL )
   dccf0:	4604      	mov	r4, r0
   dccf2:	b1a8      	cbz	r0, dcd20 <mbedtls_md_free+0x32>
   dccf4:	6803      	ldr	r3, [r0, #0]
   dccf6:	b19b      	cbz	r3, dcd20 <mbedtls_md_free+0x32>
        return;

    if( ctx->md_ctx != NULL )
   dccf8:	6840      	ldr	r0, [r0, #4]
   dccfa:	b108      	cbz	r0, dcd00 <mbedtls_md_free+0x12>
        ctx->md_info->ctx_free_func( ctx->md_ctx );
   dccfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   dccfe:	4798      	blx	r3

    if( ctx->hmac_ctx != NULL )
   dcd00:	68a0      	ldr	r0, [r4, #8]
   dcd02:	b138      	cbz	r0, dcd14 <mbedtls_md_free+0x26>
    {
        mbedtls_platform_zeroize( ctx->hmac_ctx,
                                  2 * ctx->md_info->block_size );
   dcd04:	6823      	ldr	r3, [r4, #0]
   dcd06:	68d9      	ldr	r1, [r3, #12]
        mbedtls_platform_zeroize( ctx->hmac_ctx,
   dcd08:	0049      	lsls	r1, r1, #1
   dcd0a:	f7fe f967 	bl	dafdc <mbedtls_platform_zeroize>
        mbedtls_free( ctx->hmac_ctx );
   dcd0e:	68a0      	ldr	r0, [r4, #8]
   dcd10:	f008 fd56 	bl	e57c0 <free>
    }

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_md_context_t ) );
   dcd14:	4620      	mov	r0, r4
   dcd16:	210c      	movs	r1, #12
}
   dcd18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_md_context_t ) );
   dcd1c:	f7fe b95e 	b.w	dafdc <mbedtls_platform_zeroize>
}
   dcd20:	bd10      	pop	{r4, pc}
	...

000dcd24 <mbedtls_md_setup>:
    return mbedtls_md_setup( ctx, md_info, 1 );
}
#endif

int mbedtls_md_setup( mbedtls_md_context_t *ctx, const mbedtls_md_info_t *md_info, int hmac )
{
   dcd24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dcd26:	4605      	mov	r5, r0
   dcd28:	4617      	mov	r7, r2
    if( md_info == NULL || ctx == NULL )
   dcd2a:	460c      	mov	r4, r1
   dcd2c:	b1a1      	cbz	r1, dcd58 <mbedtls_md_setup+0x34>
   dcd2e:	b198      	cbz	r0, dcd58 <mbedtls_md_setup+0x34>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    if( ( ctx->md_ctx = md_info->ctx_alloc_func() ) == NULL )
   dcd30:	6a0b      	ldr	r3, [r1, #32]
   dcd32:	4798      	blx	r3
   dcd34:	4606      	mov	r6, r0
   dcd36:	6068      	str	r0, [r5, #4]
   dcd38:	b148      	cbz	r0, dcd4e <mbedtls_md_setup+0x2a>
        return( MBEDTLS_ERR_MD_ALLOC_FAILED );

    if( hmac != 0 )
   dcd3a:	b157      	cbz	r7, dcd52 <mbedtls_md_setup+0x2e>
    {
        ctx->hmac_ctx = mbedtls_calloc( 2, md_info->block_size );
   dcd3c:	68e1      	ldr	r1, [r4, #12]
   dcd3e:	2002      	movs	r0, #2
   dcd40:	f00b fd4a 	bl	e87d8 <calloc>
   dcd44:	60a8      	str	r0, [r5, #8]
        if( ctx->hmac_ctx == NULL )
   dcd46:	b920      	cbnz	r0, dcd52 <mbedtls_md_setup+0x2e>
        {
            md_info->ctx_free_func( ctx->md_ctx );
   dcd48:	6a63      	ldr	r3, [r4, #36]	; 0x24
   dcd4a:	4630      	mov	r0, r6
   dcd4c:	4798      	blx	r3
        return( MBEDTLS_ERR_MD_ALLOC_FAILED );
   dcd4e:	4803      	ldr	r0, [pc, #12]	; (dcd5c <mbedtls_md_setup+0x38>)
   dcd50:	e001      	b.n	dcd56 <mbedtls_md_setup+0x32>
            return( MBEDTLS_ERR_MD_ALLOC_FAILED );
        }
    }

    ctx->md_info = md_info;
   dcd52:	602c      	str	r4, [r5, #0]

    return( 0 );
   dcd54:	2000      	movs	r0, #0
}
   dcd56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
   dcd58:	4801      	ldr	r0, [pc, #4]	; (dcd60 <mbedtls_md_setup+0x3c>)
   dcd5a:	e7fc      	b.n	dcd56 <mbedtls_md_setup+0x32>
   dcd5c:	ffffae80 	.word	0xffffae80
   dcd60:	ffffaf00 	.word	0xffffaf00

000dcd64 <mbedtls_md_starts>:

int mbedtls_md_starts( mbedtls_md_context_t *ctx )
{
    if( ctx == NULL || ctx->md_info == NULL )
   dcd64:	b120      	cbz	r0, dcd70 <mbedtls_md_starts+0xc>
   dcd66:	6803      	ldr	r3, [r0, #0]
   dcd68:	b113      	cbz	r3, dcd70 <mbedtls_md_starts+0xc>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->starts_func( ctx->md_ctx ) );
   dcd6a:	691b      	ldr	r3, [r3, #16]
   dcd6c:	6840      	ldr	r0, [r0, #4]
   dcd6e:	4718      	bx	r3
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
   dcd70:	4800      	ldr	r0, [pc, #0]	; (dcd74 <mbedtls_md_starts+0x10>)
}
   dcd72:	4770      	bx	lr
   dcd74:	ffffaf00 	.word	0xffffaf00

000dcd78 <mbedtls_md_update>:

int mbedtls_md_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
    if( ctx == NULL || ctx->md_info == NULL )
   dcd78:	b120      	cbz	r0, dcd84 <mbedtls_md_update+0xc>
   dcd7a:	6803      	ldr	r3, [r0, #0]
   dcd7c:	b113      	cbz	r3, dcd84 <mbedtls_md_update+0xc>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
   dcd7e:	695b      	ldr	r3, [r3, #20]
   dcd80:	6840      	ldr	r0, [r0, #4]
   dcd82:	4718      	bx	r3
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
   dcd84:	4800      	ldr	r0, [pc, #0]	; (dcd88 <mbedtls_md_update+0x10>)
}
   dcd86:	4770      	bx	lr
   dcd88:	ffffaf00 	.word	0xffffaf00

000dcd8c <mbedtls_md_finish>:

int mbedtls_md_finish( mbedtls_md_context_t *ctx, unsigned char *output )
{
    if( ctx == NULL || ctx->md_info == NULL )
   dcd8c:	b120      	cbz	r0, dcd98 <mbedtls_md_finish+0xc>
   dcd8e:	6803      	ldr	r3, [r0, #0]
   dcd90:	b113      	cbz	r3, dcd98 <mbedtls_md_finish+0xc>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
   dcd92:	699b      	ldr	r3, [r3, #24]
   dcd94:	6840      	ldr	r0, [r0, #4]
   dcd96:	4718      	bx	r3
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
   dcd98:	4800      	ldr	r0, [pc, #0]	; (dcd9c <mbedtls_md_finish+0x10>)
}
   dcd9a:	4770      	bx	lr
   dcd9c:	ffffaf00 	.word	0xffffaf00

000dcda0 <mbedtls_md>:

int mbedtls_md( const mbedtls_md_info_t *md_info, const unsigned char *input, size_t ilen,
            unsigned char *output )
{
   dcda0:	b410      	push	{r4}
   dcda2:	4604      	mov	r4, r0
   dcda4:	4608      	mov	r0, r1
   dcda6:	4611      	mov	r1, r2
   dcda8:	461a      	mov	r2, r3
    if( md_info == NULL )
   dcdaa:	b11c      	cbz	r4, dcdb4 <mbedtls_md+0x14>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( md_info->digest_func( input, ilen, output ) );
   dcdac:	69e3      	ldr	r3, [r4, #28]
}
   dcdae:	f85d 4b04 	ldr.w	r4, [sp], #4
    return( md_info->digest_func( input, ilen, output ) );
   dcdb2:	4718      	bx	r3
}
   dcdb4:	4801      	ldr	r0, [pc, #4]	; (dcdbc <mbedtls_md+0x1c>)
   dcdb6:	f85d 4b04 	ldr.w	r4, [sp], #4
   dcdba:	4770      	bx	lr
   dcdbc:	ffffaf00 	.word	0xffffaf00

000dcdc0 <mbedtls_md_hmac_starts>:
    return( ret );
}
#endif /* MBEDTLS_FS_IO */

int mbedtls_md_hmac_starts( mbedtls_md_context_t *ctx, const unsigned char *key, size_t keylen )
{
   dcdc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dcdc4:	460e      	mov	r6, r1
   dcdc6:	b090      	sub	sp, #64	; 0x40
   dcdc8:	4617      	mov	r7, r2
    int ret;
    unsigned char sum[MBEDTLS_MD_MAX_SIZE];
    unsigned char *ipad, *opad;
    size_t i;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
   dcdca:	4605      	mov	r5, r0
   dcdcc:	2800      	cmp	r0, #0
   dcdce:	d059      	beq.n	dce84 <mbedtls_md_hmac_starts+0xc4>
   dcdd0:	6803      	ldr	r3, [r0, #0]
   dcdd2:	2b00      	cmp	r3, #0
   dcdd4:	d056      	beq.n	dce84 <mbedtls_md_hmac_starts+0xc4>
   dcdd6:	6882      	ldr	r2, [r0, #8]
   dcdd8:	2a00      	cmp	r2, #0
   dcdda:	d053      	beq.n	dce84 <mbedtls_md_hmac_starts+0xc4>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    if( keylen > (size_t) ctx->md_info->block_size )
   dcddc:	68da      	ldr	r2, [r3, #12]
   dcdde:	42ba      	cmp	r2, r7
   dcde0:	d219      	bcs.n	dce16 <mbedtls_md_hmac_starts+0x56>
    {
        if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
   dcde2:	691b      	ldr	r3, [r3, #16]
   dcde4:	6840      	ldr	r0, [r0, #4]
   dcde6:	4798      	blx	r3
   dcde8:	4604      	mov	r4, r0
   dcdea:	2800      	cmp	r0, #0
   dcdec:	d142      	bne.n	dce74 <mbedtls_md_hmac_starts+0xb4>
            goto cleanup;
        if( ( ret = ctx->md_info->update_func( ctx->md_ctx, key, keylen ) ) != 0 )
   dcdee:	682b      	ldr	r3, [r5, #0]
   dcdf0:	6868      	ldr	r0, [r5, #4]
   dcdf2:	695b      	ldr	r3, [r3, #20]
   dcdf4:	463a      	mov	r2, r7
   dcdf6:	4631      	mov	r1, r6
   dcdf8:	4798      	blx	r3
   dcdfa:	4604      	mov	r4, r0
   dcdfc:	2800      	cmp	r0, #0
   dcdfe:	d139      	bne.n	dce74 <mbedtls_md_hmac_starts+0xb4>
            goto cleanup;
        if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, sum ) ) != 0 )
   dce00:	682b      	ldr	r3, [r5, #0]
   dce02:	6868      	ldr	r0, [r5, #4]
   dce04:	699b      	ldr	r3, [r3, #24]
   dce06:	4669      	mov	r1, sp
   dce08:	4798      	blx	r3
   dce0a:	4604      	mov	r4, r0
   dce0c:	2800      	cmp	r0, #0
   dce0e:	d131      	bne.n	dce74 <mbedtls_md_hmac_starts+0xb4>
            goto cleanup;

        keylen = ctx->md_info->size;
   dce10:	682b      	ldr	r3, [r5, #0]
   dce12:	689f      	ldr	r7, [r3, #8]
        key = sum;
   dce14:	466e      	mov	r6, sp
    }

    ipad = (unsigned char *) ctx->hmac_ctx;
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
   dce16:	682b      	ldr	r3, [r5, #0]
    ipad = (unsigned char *) ctx->hmac_ctx;
   dce18:	f8d5 8008 	ldr.w	r8, [r5, #8]
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
   dce1c:	68da      	ldr	r2, [r3, #12]

    memset( ipad, 0x36, ctx->md_info->block_size );
   dce1e:	2136      	movs	r1, #54	; 0x36
   dce20:	4640      	mov	r0, r8
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
   dce22:	eb08 0402 	add.w	r4, r8, r2
    memset( ipad, 0x36, ctx->md_info->block_size );
   dce26:	f00b fd79 	bl	e891c <memset>
    memset( opad, 0x5C, ctx->md_info->block_size );
   dce2a:	682b      	ldr	r3, [r5, #0]
   dce2c:	215c      	movs	r1, #92	; 0x5c
   dce2e:	68da      	ldr	r2, [r3, #12]
   dce30:	4620      	mov	r0, r4
   dce32:	f00b fd73 	bl	e891c <memset>

    for( i = 0; i < keylen; i++ )
   dce36:	3e01      	subs	r6, #1
   dce38:	4643      	mov	r3, r8
   dce3a:	1e60      	subs	r0, r4, #1
   dce3c:	4447      	add	r7, r8
   dce3e:	429f      	cmp	r7, r3
   dce40:	d00b      	beq.n	dce5a <mbedtls_md_hmac_starts+0x9a>
    {
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
   dce42:	f816 1f01 	ldrb.w	r1, [r6, #1]!
   dce46:	781a      	ldrb	r2, [r3, #0]
   dce48:	404a      	eors	r2, r1
   dce4a:	f803 2b01 	strb.w	r2, [r3], #1
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
   dce4e:	f810 2f01 	ldrb.w	r2, [r0, #1]!
   dce52:	7831      	ldrb	r1, [r6, #0]
   dce54:	404a      	eors	r2, r1
   dce56:	7002      	strb	r2, [r0, #0]
    for( i = 0; i < keylen; i++ )
   dce58:	e7f1      	b.n	dce3e <mbedtls_md_hmac_starts+0x7e>
    }

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
   dce5a:	682b      	ldr	r3, [r5, #0]
   dce5c:	6868      	ldr	r0, [r5, #4]
   dce5e:	691b      	ldr	r3, [r3, #16]
   dce60:	4798      	blx	r3
   dce62:	4604      	mov	r4, r0
   dce64:	b930      	cbnz	r0, dce74 <mbedtls_md_hmac_starts+0xb4>
        goto cleanup;
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, ipad,
   dce66:	682b      	ldr	r3, [r5, #0]
   dce68:	6868      	ldr	r0, [r5, #4]
   dce6a:	695c      	ldr	r4, [r3, #20]
   dce6c:	68da      	ldr	r2, [r3, #12]
   dce6e:	4641      	mov	r1, r8
   dce70:	47a0      	blx	r4
   dce72:	4604      	mov	r4, r0
                                           ctx->md_info->block_size ) ) != 0 )
        goto cleanup;

cleanup:
    mbedtls_platform_zeroize( sum, sizeof( sum ) );
   dce74:	2140      	movs	r1, #64	; 0x40
   dce76:	4668      	mov	r0, sp
   dce78:	f7fe f8b0 	bl	dafdc <mbedtls_platform_zeroize>

    return( ret );
}
   dce7c:	4620      	mov	r0, r4
   dce7e:	b010      	add	sp, #64	; 0x40
   dce80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
   dce84:	4c00      	ldr	r4, [pc, #0]	; (dce88 <mbedtls_md_hmac_starts+0xc8>)
   dce86:	e7f9      	b.n	dce7c <mbedtls_md_hmac_starts+0xbc>
   dce88:	ffffaf00 	.word	0xffffaf00

000dce8c <mbedtls_md_hmac_update>:

int mbedtls_md_hmac_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
   dce8c:	b410      	push	{r4}
    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
   dce8e:	b140      	cbz	r0, dcea2 <mbedtls_md_hmac_update+0x16>
   dce90:	6803      	ldr	r3, [r0, #0]
   dce92:	b133      	cbz	r3, dcea2 <mbedtls_md_hmac_update+0x16>
   dce94:	6884      	ldr	r4, [r0, #8]
   dce96:	b124      	cbz	r4, dcea2 <mbedtls_md_hmac_update+0x16>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
   dce98:	695b      	ldr	r3, [r3, #20]
   dce9a:	6840      	ldr	r0, [r0, #4]
}
   dce9c:	f85d 4b04 	ldr.w	r4, [sp], #4
    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
   dcea0:	4718      	bx	r3
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
   dcea2:	4802      	ldr	r0, [pc, #8]	; (dceac <mbedtls_md_hmac_update+0x20>)
}
   dcea4:	f85d 4b04 	ldr.w	r4, [sp], #4
   dcea8:	4770      	bx	lr
   dceaa:	bf00      	nop
   dceac:	ffffaf00 	.word	0xffffaf00

000dceb0 <mbedtls_md_hmac_finish>:

int mbedtls_md_hmac_finish( mbedtls_md_context_t *ctx, unsigned char *output )
{
   dceb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dceb4:	460d      	mov	r5, r1
   dceb6:	b090      	sub	sp, #64	; 0x40
    int ret;
    unsigned char tmp[MBEDTLS_MD_MAX_SIZE];
    unsigned char *opad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
   dceb8:	4604      	mov	r4, r0
   dceba:	b328      	cbz	r0, dcf08 <mbedtls_md_hmac_finish+0x58>
   dcebc:	6803      	ldr	r3, [r0, #0]
   dcebe:	b31b      	cbz	r3, dcf08 <mbedtls_md_hmac_finish+0x58>
   dcec0:	6886      	ldr	r6, [r0, #8]
   dcec2:	b30e      	cbz	r6, dcf08 <mbedtls_md_hmac_finish+0x58>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
   dcec4:	68df      	ldr	r7, [r3, #12]

    if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, tmp ) ) != 0 )
   dcec6:	6840      	ldr	r0, [r0, #4]
   dcec8:	699b      	ldr	r3, [r3, #24]
   dceca:	4669      	mov	r1, sp
   dcecc:	4798      	blx	r3
   dcece:	b9c0      	cbnz	r0, dcf02 <mbedtls_md_hmac_finish+0x52>
        return( ret );
    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
   dced0:	6823      	ldr	r3, [r4, #0]
   dced2:	6860      	ldr	r0, [r4, #4]
   dced4:	691b      	ldr	r3, [r3, #16]
   dced6:	4798      	blx	r3
   dced8:	b998      	cbnz	r0, dcf02 <mbedtls_md_hmac_finish+0x52>
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, opad,
   dceda:	6823      	ldr	r3, [r4, #0]
   dcedc:	6860      	ldr	r0, [r4, #4]
   dcede:	f8d3 8014 	ldr.w	r8, [r3, #20]
   dcee2:	68da      	ldr	r2, [r3, #12]
   dcee4:	19f1      	adds	r1, r6, r7
   dcee6:	47c0      	blx	r8
   dcee8:	b958      	cbnz	r0, dcf02 <mbedtls_md_hmac_finish+0x52>
                                           ctx->md_info->block_size ) ) != 0 )
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, tmp,
   dceea:	6823      	ldr	r3, [r4, #0]
   dceec:	6860      	ldr	r0, [r4, #4]
   dceee:	695e      	ldr	r6, [r3, #20]
   dcef0:	689a      	ldr	r2, [r3, #8]
   dcef2:	4669      	mov	r1, sp
   dcef4:	47b0      	blx	r6
   dcef6:	b920      	cbnz	r0, dcf02 <mbedtls_md_hmac_finish+0x52>
                                           ctx->md_info->size ) ) != 0 )
        return( ret );
    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
   dcef8:	6823      	ldr	r3, [r4, #0]
   dcefa:	6860      	ldr	r0, [r4, #4]
   dcefc:	699b      	ldr	r3, [r3, #24]
   dcefe:	4629      	mov	r1, r5
   dcf00:	4798      	blx	r3
}
   dcf02:	b010      	add	sp, #64	; 0x40
   dcf04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
   dcf08:	4800      	ldr	r0, [pc, #0]	; (dcf0c <mbedtls_md_hmac_finish+0x5c>)
   dcf0a:	e7fa      	b.n	dcf02 <mbedtls_md_hmac_finish+0x52>
   dcf0c:	ffffaf00 	.word	0xffffaf00

000dcf10 <mbedtls_md_hmac_reset>:

int mbedtls_md_hmac_reset( mbedtls_md_context_t *ctx )
{
   dcf10:	b570      	push	{r4, r5, r6, lr}
    int ret;
    unsigned char *ipad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
   dcf12:	4604      	mov	r4, r0
   dcf14:	b180      	cbz	r0, dcf38 <mbedtls_md_hmac_reset+0x28>
   dcf16:	6803      	ldr	r3, [r0, #0]
   dcf18:	b173      	cbz	r3, dcf38 <mbedtls_md_hmac_reset+0x28>
   dcf1a:	6885      	ldr	r5, [r0, #8]
   dcf1c:	b165      	cbz	r5, dcf38 <mbedtls_md_hmac_reset+0x28>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    ipad = (unsigned char *) ctx->hmac_ctx;

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
   dcf1e:	691b      	ldr	r3, [r3, #16]
   dcf20:	6840      	ldr	r0, [r0, #4]
   dcf22:	4798      	blx	r3
   dcf24:	b948      	cbnz	r0, dcf3a <mbedtls_md_hmac_reset+0x2a>
        return( ret );
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
   dcf26:	6823      	ldr	r3, [r4, #0]
   dcf28:	6860      	ldr	r0, [r4, #4]
   dcf2a:	695e      	ldr	r6, [r3, #20]
   dcf2c:	68da      	ldr	r2, [r3, #12]
   dcf2e:	4629      	mov	r1, r5
   dcf30:	4633      	mov	r3, r6
                                       ctx->md_info->block_size ) );
}
   dcf32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
   dcf36:	4718      	bx	r3
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
   dcf38:	4800      	ldr	r0, [pc, #0]	; (dcf3c <mbedtls_md_hmac_reset+0x2c>)
}
   dcf3a:	bd70      	pop	{r4, r5, r6, pc}
   dcf3c:	ffffaf00 	.word	0xffffaf00

000dcf40 <mbedtls_md_get_size>:
    return( ctx->md_info->process_func( ctx->md_ctx, data ) );
}

unsigned char mbedtls_md_get_size( const mbedtls_md_info_t *md_info )
{
    if( md_info == NULL )
   dcf40:	b100      	cbz	r0, dcf44 <mbedtls_md_get_size+0x4>
        return( 0 );

    return md_info->size;
   dcf42:	7a00      	ldrb	r0, [r0, #8]
}
   dcf44:	4770      	bx	lr

000dcf46 <mbedtls_md_get_name>:
    return md_info->type;
}

const char *mbedtls_md_get_name( const mbedtls_md_info_t *md_info )
{
    if( md_info == NULL )
   dcf46:	b100      	cbz	r0, dcf4a <mbedtls_md_get_name+0x4>
        return( NULL );

    return md_info->name;
   dcf48:	6840      	ldr	r0, [r0, #4]
}
   dcf4a:	4770      	bx	lr

000dcf4c <_ZL5add32PmmPa>:
/*
 * Helpers for addition and subtraction of chunks, with signed carry.
 */
static inline void add32( uint32_t *dst, uint32_t src, signed char *carry )
{
    *dst += src;
   dcf4c:	6803      	ldr	r3, [r0, #0]
   dcf4e:	1859      	adds	r1, r3, r1
   dcf50:	6001      	str	r1, [r0, #0]
    *carry += ( *dst < src );
   dcf52:	7811      	ldrb	r1, [r2, #0]
   dcf54:	bf2c      	ite	cs
   dcf56:	2301      	movcs	r3, #1
   dcf58:	2300      	movcc	r3, #0
   dcf5a:	440b      	add	r3, r1
   dcf5c:	7013      	strb	r3, [r2, #0]
}
   dcf5e:	4770      	bx	lr

000dcf60 <_ZL5sub32PmmPa>:

static inline void sub32( uint32_t *dst, uint32_t src, signed char *carry )
{
    *carry -= ( *dst < src );
   dcf60:	7813      	ldrb	r3, [r2, #0]
{
   dcf62:	b510      	push	{r4, lr}
    *carry -= ( *dst < src );
   dcf64:	6804      	ldr	r4, [r0, #0]
   dcf66:	428c      	cmp	r4, r1
   dcf68:	bf38      	it	cc
   dcf6a:	3b01      	subcc	r3, #1
   dcf6c:	7013      	strb	r3, [r2, #0]
    *dst -= src;
   dcf6e:	6803      	ldr	r3, [r0, #0]
   dcf70:	1a59      	subs	r1, r3, r1
   dcf72:	6001      	str	r1, [r0, #0]
}
   dcf74:	bd10      	pop	{r4, pc}

000dcf76 <_ZL12ecp_mod_p256P11mbedtls_mpi>:
#if defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED)
/*
 * Fast quasi-reduction modulo p256 (FIPS 186-3 D.2.3)
 */
static int ecp_mod_p256( mbedtls_mpi *N )
{
   dcf76:	b530      	push	{r4, r5, lr}
    INIT( 256 );
   dcf78:	2309      	movs	r3, #9
{
   dcf7a:	b08f      	sub	sp, #60	; 0x3c
    INIT( 256 );
   dcf7c:	2201      	movs	r2, #1
   dcf7e:	e9cd 2302 	strd	r2, r3, [sp, #8]
   dcf82:	2100      	movs	r1, #0
{
   dcf84:	4604      	mov	r4, r0
    INIT( 256 );
   dcf86:	2224      	movs	r2, #36	; 0x24
   dcf88:	a805      	add	r0, sp, #20
   dcf8a:	f88d 1003 	strb.w	r1, [sp, #3]
   dcf8e:	9004      	str	r0, [sp, #16]
   dcf90:	f00b fcc4 	bl	e891c <memset>
   dcf94:	2110      	movs	r1, #16
   dcf96:	4620      	mov	r0, r4
   dcf98:	f003 fd2b 	bl	e09f2 <mbedtls_mpi_grow>
   dcf9c:	4605      	mov	r5, r0
   dcf9e:	2800      	cmp	r0, #0
   dcfa0:	f040 8253 	bne.w	dd44a <_ZL12ecp_mod_p256P11mbedtls_mpi+0x4d4>
   dcfa4:	68a3      	ldr	r3, [r4, #8]
   dcfa6:	681a      	ldr	r2, [r3, #0]

    ADD(  8 ); ADD(  9 );
   dcfa8:	6a19      	ldr	r1, [r3, #32]
    INIT( 256 );
   dcfaa:	9201      	str	r2, [sp, #4]
    ADD(  8 ); ADD(  9 );
   dcfac:	a801      	add	r0, sp, #4
   dcfae:	f10d 0203 	add.w	r2, sp, #3
   dcfb2:	f7ff ffcb 	bl	dcf4c <_ZL5add32PmmPa>
   dcfb6:	68a3      	ldr	r3, [r4, #8]
   dcfb8:	f10d 0203 	add.w	r2, sp, #3
   dcfbc:	6a59      	ldr	r1, [r3, #36]	; 0x24
   dcfbe:	a801      	add	r0, sp, #4
   dcfc0:	f7ff ffc4 	bl	dcf4c <_ZL5add32PmmPa>
    SUB( 11 ); SUB( 12 ); SUB( 13 ); SUB( 14 );             NEXT; // A0
   dcfc4:	68a3      	ldr	r3, [r4, #8]
   dcfc6:	f10d 0203 	add.w	r2, sp, #3
   dcfca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   dcfcc:	a801      	add	r0, sp, #4
   dcfce:	f7ff ffc7 	bl	dcf60 <_ZL5sub32PmmPa>
   dcfd2:	68a3      	ldr	r3, [r4, #8]
   dcfd4:	f10d 0203 	add.w	r2, sp, #3
   dcfd8:	6b19      	ldr	r1, [r3, #48]	; 0x30
   dcfda:	a801      	add	r0, sp, #4
   dcfdc:	f7ff ffc0 	bl	dcf60 <_ZL5sub32PmmPa>
   dcfe0:	68a3      	ldr	r3, [r4, #8]
   dcfe2:	f10d 0203 	add.w	r2, sp, #3
   dcfe6:	6b59      	ldr	r1, [r3, #52]	; 0x34
   dcfe8:	a801      	add	r0, sp, #4
   dcfea:	f7ff ffb9 	bl	dcf60 <_ZL5sub32PmmPa>
   dcfee:	68a3      	ldr	r3, [r4, #8]
   dcff0:	f10d 0203 	add.w	r2, sp, #3
   dcff4:	6b99      	ldr	r1, [r3, #56]	; 0x38
   dcff6:	a801      	add	r0, sp, #4
   dcff8:	f7ff ffb2 	bl	dcf60 <_ZL5sub32PmmPa>
   dcffc:	68a3      	ldr	r3, [r4, #8]
   dcffe:	9a01      	ldr	r2, [sp, #4]
   dd000:	601a      	str	r2, [r3, #0]
   dd002:	f99d 1003 	ldrsb.w	r1, [sp, #3]
   dd006:	68a3      	ldr	r3, [r4, #8]
   dd008:	f88d 5003 	strb.w	r5, [sp, #3]
   dd00c:	685b      	ldr	r3, [r3, #4]
   dd00e:	9301      	str	r3, [sp, #4]
   dd010:	2900      	cmp	r1, #0
   dd012:	f10d 0203 	add.w	r2, sp, #3
   dd016:	f280 81e7 	bge.w	dd3e8 <_ZL12ecp_mod_p256P11mbedtls_mpi+0x472>
   dd01a:	4249      	negs	r1, r1
   dd01c:	a801      	add	r0, sp, #4
   dd01e:	f7ff ff9f 	bl	dcf60 <_ZL5sub32PmmPa>

    ADD(  9 ); ADD( 10 );
   dd022:	68a3      	ldr	r3, [r4, #8]
   dd024:	f10d 0203 	add.w	r2, sp, #3
   dd028:	6a59      	ldr	r1, [r3, #36]	; 0x24
   dd02a:	a801      	add	r0, sp, #4
   dd02c:	f7ff ff8e 	bl	dcf4c <_ZL5add32PmmPa>
   dd030:	68a3      	ldr	r3, [r4, #8]
   dd032:	f10d 0203 	add.w	r2, sp, #3
   dd036:	6a99      	ldr	r1, [r3, #40]	; 0x28
   dd038:	a801      	add	r0, sp, #4
   dd03a:	f7ff ff87 	bl	dcf4c <_ZL5add32PmmPa>
    SUB( 12 ); SUB( 13 ); SUB( 14 ); SUB( 15 );             NEXT; // A1
   dd03e:	68a3      	ldr	r3, [r4, #8]
   dd040:	f10d 0203 	add.w	r2, sp, #3
   dd044:	6b19      	ldr	r1, [r3, #48]	; 0x30
   dd046:	a801      	add	r0, sp, #4
   dd048:	f7ff ff8a 	bl	dcf60 <_ZL5sub32PmmPa>
   dd04c:	68a3      	ldr	r3, [r4, #8]
   dd04e:	f10d 0203 	add.w	r2, sp, #3
   dd052:	6b59      	ldr	r1, [r3, #52]	; 0x34
   dd054:	a801      	add	r0, sp, #4
   dd056:	f7ff ff83 	bl	dcf60 <_ZL5sub32PmmPa>
   dd05a:	68a3      	ldr	r3, [r4, #8]
   dd05c:	f10d 0203 	add.w	r2, sp, #3
   dd060:	6b99      	ldr	r1, [r3, #56]	; 0x38
   dd062:	a801      	add	r0, sp, #4
   dd064:	f7ff ff7c 	bl	dcf60 <_ZL5sub32PmmPa>
   dd068:	68a3      	ldr	r3, [r4, #8]
   dd06a:	f10d 0203 	add.w	r2, sp, #3
   dd06e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   dd070:	a801      	add	r0, sp, #4
   dd072:	f7ff ff75 	bl	dcf60 <_ZL5sub32PmmPa>
   dd076:	68a3      	ldr	r3, [r4, #8]
   dd078:	9a01      	ldr	r2, [sp, #4]
   dd07a:	605a      	str	r2, [r3, #4]
   dd07c:	68a3      	ldr	r3, [r4, #8]
   dd07e:	f99d 1003 	ldrsb.w	r1, [sp, #3]
   dd082:	689b      	ldr	r3, [r3, #8]
   dd084:	9301      	str	r3, [sp, #4]
   dd086:	2300      	movs	r3, #0
   dd088:	4299      	cmp	r1, r3
   dd08a:	f88d 3003 	strb.w	r3, [sp, #3]
   dd08e:	f10d 0203 	add.w	r2, sp, #3
   dd092:	f280 81ad 	bge.w	dd3f0 <_ZL12ecp_mod_p256P11mbedtls_mpi+0x47a>
   dd096:	4249      	negs	r1, r1
   dd098:	a801      	add	r0, sp, #4
   dd09a:	f7ff ff61 	bl	dcf60 <_ZL5sub32PmmPa>

    ADD( 10 ); ADD( 11 );
   dd09e:	68a3      	ldr	r3, [r4, #8]
   dd0a0:	f10d 0203 	add.w	r2, sp, #3
   dd0a4:	6a99      	ldr	r1, [r3, #40]	; 0x28
   dd0a6:	a801      	add	r0, sp, #4
   dd0a8:	f7ff ff50 	bl	dcf4c <_ZL5add32PmmPa>
   dd0ac:	68a3      	ldr	r3, [r4, #8]
   dd0ae:	f10d 0203 	add.w	r2, sp, #3
   dd0b2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   dd0b4:	a801      	add	r0, sp, #4
   dd0b6:	f7ff ff49 	bl	dcf4c <_ZL5add32PmmPa>
    SUB( 13 ); SUB( 14 ); SUB( 15 );                        NEXT; // A2
   dd0ba:	68a3      	ldr	r3, [r4, #8]
   dd0bc:	f10d 0203 	add.w	r2, sp, #3
   dd0c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
   dd0c2:	a801      	add	r0, sp, #4
   dd0c4:	f7ff ff4c 	bl	dcf60 <_ZL5sub32PmmPa>
   dd0c8:	68a3      	ldr	r3, [r4, #8]
   dd0ca:	f10d 0203 	add.w	r2, sp, #3
   dd0ce:	6b99      	ldr	r1, [r3, #56]	; 0x38
   dd0d0:	a801      	add	r0, sp, #4
   dd0d2:	f7ff ff45 	bl	dcf60 <_ZL5sub32PmmPa>
   dd0d6:	68a3      	ldr	r3, [r4, #8]
   dd0d8:	f10d 0203 	add.w	r2, sp, #3
   dd0dc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   dd0de:	a801      	add	r0, sp, #4
   dd0e0:	f7ff ff3e 	bl	dcf60 <_ZL5sub32PmmPa>
   dd0e4:	68a3      	ldr	r3, [r4, #8]
   dd0e6:	9a01      	ldr	r2, [sp, #4]
   dd0e8:	609a      	str	r2, [r3, #8]
   dd0ea:	68a3      	ldr	r3, [r4, #8]
   dd0ec:	f99d 1003 	ldrsb.w	r1, [sp, #3]
   dd0f0:	68db      	ldr	r3, [r3, #12]
   dd0f2:	9301      	str	r3, [sp, #4]
   dd0f4:	2300      	movs	r3, #0
   dd0f6:	4299      	cmp	r1, r3
   dd0f8:	f88d 3003 	strb.w	r3, [sp, #3]
   dd0fc:	f10d 0203 	add.w	r2, sp, #3
   dd100:	f280 817a 	bge.w	dd3f8 <_ZL12ecp_mod_p256P11mbedtls_mpi+0x482>
   dd104:	4249      	negs	r1, r1
   dd106:	a801      	add	r0, sp, #4
   dd108:	f7ff ff2a 	bl	dcf60 <_ZL5sub32PmmPa>

    ADD( 11 ); ADD( 11 ); ADD( 12 ); ADD( 12 ); ADD( 13 );
   dd10c:	68a3      	ldr	r3, [r4, #8]
   dd10e:	f10d 0203 	add.w	r2, sp, #3
   dd112:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   dd114:	a801      	add	r0, sp, #4
   dd116:	f7ff ff19 	bl	dcf4c <_ZL5add32PmmPa>
   dd11a:	68a3      	ldr	r3, [r4, #8]
   dd11c:	f10d 0203 	add.w	r2, sp, #3
   dd120:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   dd122:	a801      	add	r0, sp, #4
   dd124:	f7ff ff12 	bl	dcf4c <_ZL5add32PmmPa>
   dd128:	68a3      	ldr	r3, [r4, #8]
   dd12a:	f10d 0203 	add.w	r2, sp, #3
   dd12e:	6b19      	ldr	r1, [r3, #48]	; 0x30
   dd130:	a801      	add	r0, sp, #4
   dd132:	f7ff ff0b 	bl	dcf4c <_ZL5add32PmmPa>
   dd136:	68a3      	ldr	r3, [r4, #8]
   dd138:	f10d 0203 	add.w	r2, sp, #3
   dd13c:	6b19      	ldr	r1, [r3, #48]	; 0x30
   dd13e:	a801      	add	r0, sp, #4
   dd140:	f7ff ff04 	bl	dcf4c <_ZL5add32PmmPa>
   dd144:	68a3      	ldr	r3, [r4, #8]
   dd146:	f10d 0203 	add.w	r2, sp, #3
   dd14a:	6b59      	ldr	r1, [r3, #52]	; 0x34
   dd14c:	a801      	add	r0, sp, #4
   dd14e:	f7ff fefd 	bl	dcf4c <_ZL5add32PmmPa>
    SUB( 15 ); SUB(  8 ); SUB(  9 );                        NEXT; // A3
   dd152:	68a3      	ldr	r3, [r4, #8]
   dd154:	f10d 0203 	add.w	r2, sp, #3
   dd158:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   dd15a:	a801      	add	r0, sp, #4
   dd15c:	f7ff ff00 	bl	dcf60 <_ZL5sub32PmmPa>
   dd160:	68a3      	ldr	r3, [r4, #8]
   dd162:	f10d 0203 	add.w	r2, sp, #3
   dd166:	6a19      	ldr	r1, [r3, #32]
   dd168:	a801      	add	r0, sp, #4
   dd16a:	f7ff fef9 	bl	dcf60 <_ZL5sub32PmmPa>
   dd16e:	68a3      	ldr	r3, [r4, #8]
   dd170:	f10d 0203 	add.w	r2, sp, #3
   dd174:	6a59      	ldr	r1, [r3, #36]	; 0x24
   dd176:	a801      	add	r0, sp, #4
   dd178:	f7ff fef2 	bl	dcf60 <_ZL5sub32PmmPa>
   dd17c:	68a3      	ldr	r3, [r4, #8]
   dd17e:	9a01      	ldr	r2, [sp, #4]
   dd180:	60da      	str	r2, [r3, #12]
   dd182:	68a3      	ldr	r3, [r4, #8]
   dd184:	f99d 1003 	ldrsb.w	r1, [sp, #3]
   dd188:	691b      	ldr	r3, [r3, #16]
   dd18a:	9301      	str	r3, [sp, #4]
   dd18c:	2300      	movs	r3, #0
   dd18e:	4299      	cmp	r1, r3
   dd190:	f88d 3003 	strb.w	r3, [sp, #3]
   dd194:	f10d 0203 	add.w	r2, sp, #3
   dd198:	f280 8132 	bge.w	dd400 <_ZL12ecp_mod_p256P11mbedtls_mpi+0x48a>
   dd19c:	4249      	negs	r1, r1
   dd19e:	a801      	add	r0, sp, #4
   dd1a0:	f7ff fede 	bl	dcf60 <_ZL5sub32PmmPa>

    ADD( 12 ); ADD( 12 ); ADD( 13 ); ADD( 13 ); ADD( 14 );
   dd1a4:	68a3      	ldr	r3, [r4, #8]
   dd1a6:	f10d 0203 	add.w	r2, sp, #3
   dd1aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
   dd1ac:	a801      	add	r0, sp, #4
   dd1ae:	f7ff fecd 	bl	dcf4c <_ZL5add32PmmPa>
   dd1b2:	68a3      	ldr	r3, [r4, #8]
   dd1b4:	f10d 0203 	add.w	r2, sp, #3
   dd1b8:	6b19      	ldr	r1, [r3, #48]	; 0x30
   dd1ba:	a801      	add	r0, sp, #4
   dd1bc:	f7ff fec6 	bl	dcf4c <_ZL5add32PmmPa>
   dd1c0:	68a3      	ldr	r3, [r4, #8]
   dd1c2:	f10d 0203 	add.w	r2, sp, #3
   dd1c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
   dd1c8:	a801      	add	r0, sp, #4
   dd1ca:	f7ff febf 	bl	dcf4c <_ZL5add32PmmPa>
   dd1ce:	68a3      	ldr	r3, [r4, #8]
   dd1d0:	f10d 0203 	add.w	r2, sp, #3
   dd1d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
   dd1d6:	a801      	add	r0, sp, #4
   dd1d8:	f7ff feb8 	bl	dcf4c <_ZL5add32PmmPa>
   dd1dc:	68a3      	ldr	r3, [r4, #8]
   dd1de:	f10d 0203 	add.w	r2, sp, #3
   dd1e2:	6b99      	ldr	r1, [r3, #56]	; 0x38
   dd1e4:	a801      	add	r0, sp, #4
   dd1e6:	f7ff feb1 	bl	dcf4c <_ZL5add32PmmPa>
    SUB(  9 ); SUB( 10 );                                   NEXT; // A4
   dd1ea:	68a3      	ldr	r3, [r4, #8]
   dd1ec:	f10d 0203 	add.w	r2, sp, #3
   dd1f0:	6a59      	ldr	r1, [r3, #36]	; 0x24
   dd1f2:	a801      	add	r0, sp, #4
   dd1f4:	f7ff feb4 	bl	dcf60 <_ZL5sub32PmmPa>
   dd1f8:	68a3      	ldr	r3, [r4, #8]
   dd1fa:	f10d 0203 	add.w	r2, sp, #3
   dd1fe:	6a99      	ldr	r1, [r3, #40]	; 0x28
   dd200:	a801      	add	r0, sp, #4
   dd202:	f7ff fead 	bl	dcf60 <_ZL5sub32PmmPa>
   dd206:	68a3      	ldr	r3, [r4, #8]
   dd208:	9a01      	ldr	r2, [sp, #4]
   dd20a:	611a      	str	r2, [r3, #16]
   dd20c:	68a3      	ldr	r3, [r4, #8]
   dd20e:	f99d 1003 	ldrsb.w	r1, [sp, #3]
   dd212:	695b      	ldr	r3, [r3, #20]
   dd214:	9301      	str	r3, [sp, #4]
   dd216:	2300      	movs	r3, #0
   dd218:	4299      	cmp	r1, r3
   dd21a:	f88d 3003 	strb.w	r3, [sp, #3]
   dd21e:	f10d 0203 	add.w	r2, sp, #3
   dd222:	f280 80f1 	bge.w	dd408 <_ZL12ecp_mod_p256P11mbedtls_mpi+0x492>
   dd226:	4249      	negs	r1, r1
   dd228:	a801      	add	r0, sp, #4
   dd22a:	f7ff fe99 	bl	dcf60 <_ZL5sub32PmmPa>

    ADD( 13 ); ADD( 13 ); ADD( 14 ); ADD( 14 ); ADD( 15 );
   dd22e:	68a3      	ldr	r3, [r4, #8]
   dd230:	f10d 0203 	add.w	r2, sp, #3
   dd234:	6b59      	ldr	r1, [r3, #52]	; 0x34
   dd236:	a801      	add	r0, sp, #4
   dd238:	f7ff fe88 	bl	dcf4c <_ZL5add32PmmPa>
   dd23c:	68a3      	ldr	r3, [r4, #8]
   dd23e:	f10d 0203 	add.w	r2, sp, #3
   dd242:	6b59      	ldr	r1, [r3, #52]	; 0x34
   dd244:	a801      	add	r0, sp, #4
   dd246:	f7ff fe81 	bl	dcf4c <_ZL5add32PmmPa>
   dd24a:	68a3      	ldr	r3, [r4, #8]
   dd24c:	f10d 0203 	add.w	r2, sp, #3
   dd250:	6b99      	ldr	r1, [r3, #56]	; 0x38
   dd252:	a801      	add	r0, sp, #4
   dd254:	f7ff fe7a 	bl	dcf4c <_ZL5add32PmmPa>
   dd258:	68a3      	ldr	r3, [r4, #8]
   dd25a:	f10d 0203 	add.w	r2, sp, #3
   dd25e:	6b99      	ldr	r1, [r3, #56]	; 0x38
   dd260:	a801      	add	r0, sp, #4
   dd262:	f7ff fe73 	bl	dcf4c <_ZL5add32PmmPa>
   dd266:	68a3      	ldr	r3, [r4, #8]
   dd268:	f10d 0203 	add.w	r2, sp, #3
   dd26c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   dd26e:	a801      	add	r0, sp, #4
   dd270:	f7ff fe6c 	bl	dcf4c <_ZL5add32PmmPa>
    SUB( 10 ); SUB( 11 );                                   NEXT; // A5
   dd274:	68a3      	ldr	r3, [r4, #8]
   dd276:	f10d 0203 	add.w	r2, sp, #3
   dd27a:	6a99      	ldr	r1, [r3, #40]	; 0x28
   dd27c:	a801      	add	r0, sp, #4
   dd27e:	f7ff fe6f 	bl	dcf60 <_ZL5sub32PmmPa>
   dd282:	68a3      	ldr	r3, [r4, #8]
   dd284:	f10d 0203 	add.w	r2, sp, #3
   dd288:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   dd28a:	a801      	add	r0, sp, #4
   dd28c:	f7ff fe68 	bl	dcf60 <_ZL5sub32PmmPa>
   dd290:	68a3      	ldr	r3, [r4, #8]
   dd292:	9a01      	ldr	r2, [sp, #4]
   dd294:	615a      	str	r2, [r3, #20]
   dd296:	68a3      	ldr	r3, [r4, #8]
   dd298:	f99d 1003 	ldrsb.w	r1, [sp, #3]
   dd29c:	699b      	ldr	r3, [r3, #24]
   dd29e:	9301      	str	r3, [sp, #4]
   dd2a0:	2300      	movs	r3, #0
   dd2a2:	4299      	cmp	r1, r3
   dd2a4:	f88d 3003 	strb.w	r3, [sp, #3]
   dd2a8:	f10d 0203 	add.w	r2, sp, #3
   dd2ac:	f280 80b0 	bge.w	dd410 <_ZL12ecp_mod_p256P11mbedtls_mpi+0x49a>
   dd2b0:	4249      	negs	r1, r1
   dd2b2:	a801      	add	r0, sp, #4
   dd2b4:	f7ff fe54 	bl	dcf60 <_ZL5sub32PmmPa>

    ADD( 14 ); ADD( 14 ); ADD( 15 ); ADD( 15 ); ADD( 14 ); ADD( 13 );
   dd2b8:	68a3      	ldr	r3, [r4, #8]
   dd2ba:	f10d 0203 	add.w	r2, sp, #3
   dd2be:	6b99      	ldr	r1, [r3, #56]	; 0x38
   dd2c0:	a801      	add	r0, sp, #4
   dd2c2:	f7ff fe43 	bl	dcf4c <_ZL5add32PmmPa>
   dd2c6:	68a3      	ldr	r3, [r4, #8]
   dd2c8:	f10d 0203 	add.w	r2, sp, #3
   dd2cc:	6b99      	ldr	r1, [r3, #56]	; 0x38
   dd2ce:	a801      	add	r0, sp, #4
   dd2d0:	f7ff fe3c 	bl	dcf4c <_ZL5add32PmmPa>
   dd2d4:	68a3      	ldr	r3, [r4, #8]
   dd2d6:	f10d 0203 	add.w	r2, sp, #3
   dd2da:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   dd2dc:	a801      	add	r0, sp, #4
   dd2de:	f7ff fe35 	bl	dcf4c <_ZL5add32PmmPa>
   dd2e2:	68a3      	ldr	r3, [r4, #8]
   dd2e4:	f10d 0203 	add.w	r2, sp, #3
   dd2e8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   dd2ea:	a801      	add	r0, sp, #4
   dd2ec:	f7ff fe2e 	bl	dcf4c <_ZL5add32PmmPa>
   dd2f0:	68a3      	ldr	r3, [r4, #8]
   dd2f2:	f10d 0203 	add.w	r2, sp, #3
   dd2f6:	6b99      	ldr	r1, [r3, #56]	; 0x38
   dd2f8:	a801      	add	r0, sp, #4
   dd2fa:	f7ff fe27 	bl	dcf4c <_ZL5add32PmmPa>
   dd2fe:	68a3      	ldr	r3, [r4, #8]
   dd300:	f10d 0203 	add.w	r2, sp, #3
   dd304:	6b59      	ldr	r1, [r3, #52]	; 0x34
   dd306:	a801      	add	r0, sp, #4
   dd308:	f7ff fe20 	bl	dcf4c <_ZL5add32PmmPa>
    SUB(  8 ); SUB(  9 );                                   NEXT; // A6
   dd30c:	68a3      	ldr	r3, [r4, #8]
   dd30e:	f10d 0203 	add.w	r2, sp, #3
   dd312:	6a19      	ldr	r1, [r3, #32]
   dd314:	a801      	add	r0, sp, #4
   dd316:	f7ff fe23 	bl	dcf60 <_ZL5sub32PmmPa>
   dd31a:	68a3      	ldr	r3, [r4, #8]
   dd31c:	f10d 0203 	add.w	r2, sp, #3
   dd320:	6a59      	ldr	r1, [r3, #36]	; 0x24
   dd322:	a801      	add	r0, sp, #4
   dd324:	f7ff fe1c 	bl	dcf60 <_ZL5sub32PmmPa>
   dd328:	68a3      	ldr	r3, [r4, #8]
   dd32a:	9a01      	ldr	r2, [sp, #4]
   dd32c:	619a      	str	r2, [r3, #24]
   dd32e:	68a3      	ldr	r3, [r4, #8]
   dd330:	f99d 1003 	ldrsb.w	r1, [sp, #3]
   dd334:	69db      	ldr	r3, [r3, #28]
   dd336:	9301      	str	r3, [sp, #4]
   dd338:	2300      	movs	r3, #0
   dd33a:	4299      	cmp	r1, r3
   dd33c:	f88d 3003 	strb.w	r3, [sp, #3]
   dd340:	f10d 0203 	add.w	r2, sp, #3
   dd344:	da68      	bge.n	dd418 <_ZL12ecp_mod_p256P11mbedtls_mpi+0x4a2>
   dd346:	4249      	negs	r1, r1
   dd348:	a801      	add	r0, sp, #4
   dd34a:	f7ff fe09 	bl	dcf60 <_ZL5sub32PmmPa>

    ADD( 15 ); ADD( 15 ); ADD( 15 ); ADD( 8 );
   dd34e:	68a3      	ldr	r3, [r4, #8]
   dd350:	f10d 0203 	add.w	r2, sp, #3
   dd354:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   dd356:	a801      	add	r0, sp, #4
   dd358:	f7ff fdf8 	bl	dcf4c <_ZL5add32PmmPa>
   dd35c:	68a3      	ldr	r3, [r4, #8]
   dd35e:	f10d 0203 	add.w	r2, sp, #3
   dd362:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   dd364:	a801      	add	r0, sp, #4
   dd366:	f7ff fdf1 	bl	dcf4c <_ZL5add32PmmPa>
   dd36a:	68a3      	ldr	r3, [r4, #8]
   dd36c:	f10d 0203 	add.w	r2, sp, #3
   dd370:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   dd372:	a801      	add	r0, sp, #4
   dd374:	f7ff fdea 	bl	dcf4c <_ZL5add32PmmPa>
   dd378:	68a3      	ldr	r3, [r4, #8]
   dd37a:	f10d 0203 	add.w	r2, sp, #3
   dd37e:	6a19      	ldr	r1, [r3, #32]
   dd380:	a801      	add	r0, sp, #4
   dd382:	f7ff fde3 	bl	dcf4c <_ZL5add32PmmPa>
    SUB( 10 ); SUB( 11 ); SUB( 12 ); SUB( 13 );             LAST; // A7
   dd386:	68a3      	ldr	r3, [r4, #8]
   dd388:	f10d 0203 	add.w	r2, sp, #3
   dd38c:	6a99      	ldr	r1, [r3, #40]	; 0x28
   dd38e:	a801      	add	r0, sp, #4
   dd390:	f7ff fde6 	bl	dcf60 <_ZL5sub32PmmPa>
   dd394:	68a3      	ldr	r3, [r4, #8]
   dd396:	f10d 0203 	add.w	r2, sp, #3
   dd39a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   dd39c:	a801      	add	r0, sp, #4
   dd39e:	f7ff fddf 	bl	dcf60 <_ZL5sub32PmmPa>
   dd3a2:	68a3      	ldr	r3, [r4, #8]
   dd3a4:	f10d 0203 	add.w	r2, sp, #3
   dd3a8:	6b19      	ldr	r1, [r3, #48]	; 0x30
   dd3aa:	a801      	add	r0, sp, #4
   dd3ac:	f7ff fdd8 	bl	dcf60 <_ZL5sub32PmmPa>
   dd3b0:	68a3      	ldr	r3, [r4, #8]
   dd3b2:	f10d 0203 	add.w	r2, sp, #3
   dd3b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
   dd3b8:	a801      	add	r0, sp, #4
   dd3ba:	f7ff fdd1 	bl	dcf60 <_ZL5sub32PmmPa>
   dd3be:	68a3      	ldr	r3, [r4, #8]
   dd3c0:	9a01      	ldr	r2, [sp, #4]
   dd3c2:	61da      	str	r2, [r3, #28]
   dd3c4:	f99d 3003 	ldrsb.w	r3, [sp, #3]
   dd3c8:	68a2      	ldr	r2, [r4, #8]
   dd3ca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   dd3ce:	6213      	str	r3, [r2, #32]
   dd3d0:	2300      	movs	r3, #0
   dd3d2:	9301      	str	r3, [sp, #4]
   dd3d4:	2308      	movs	r3, #8
   dd3d6:	6862      	ldr	r2, [r4, #4]
   dd3d8:	3301      	adds	r3, #1
   dd3da:	429a      	cmp	r2, r3
   dd3dc:	d920      	bls.n	dd420 <_ZL12ecp_mod_p256P11mbedtls_mpi+0x4aa>
   dd3de:	68a2      	ldr	r2, [r4, #8]
   dd3e0:	9901      	ldr	r1, [sp, #4]
   dd3e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   dd3e6:	e7f6      	b.n	dd3d6 <_ZL12ecp_mod_p256P11mbedtls_mpi+0x460>
    SUB( 11 ); SUB( 12 ); SUB( 13 ); SUB( 14 );             NEXT; // A0
   dd3e8:	a801      	add	r0, sp, #4
   dd3ea:	f7ff fdaf 	bl	dcf4c <_ZL5add32PmmPa>
   dd3ee:	e618      	b.n	dd022 <_ZL12ecp_mod_p256P11mbedtls_mpi+0xac>
    SUB( 12 ); SUB( 13 ); SUB( 14 ); SUB( 15 );             NEXT; // A1
   dd3f0:	a801      	add	r0, sp, #4
   dd3f2:	f7ff fdab 	bl	dcf4c <_ZL5add32PmmPa>
   dd3f6:	e652      	b.n	dd09e <_ZL12ecp_mod_p256P11mbedtls_mpi+0x128>
    SUB( 13 ); SUB( 14 ); SUB( 15 );                        NEXT; // A2
   dd3f8:	a801      	add	r0, sp, #4
   dd3fa:	f7ff fda7 	bl	dcf4c <_ZL5add32PmmPa>
   dd3fe:	e685      	b.n	dd10c <_ZL12ecp_mod_p256P11mbedtls_mpi+0x196>
    SUB( 15 ); SUB(  8 ); SUB(  9 );                        NEXT; // A3
   dd400:	a801      	add	r0, sp, #4
   dd402:	f7ff fda3 	bl	dcf4c <_ZL5add32PmmPa>
   dd406:	e6cd      	b.n	dd1a4 <_ZL12ecp_mod_p256P11mbedtls_mpi+0x22e>
    SUB(  9 ); SUB( 10 );                                   NEXT; // A4
   dd408:	a801      	add	r0, sp, #4
   dd40a:	f7ff fd9f 	bl	dcf4c <_ZL5add32PmmPa>
   dd40e:	e70e      	b.n	dd22e <_ZL12ecp_mod_p256P11mbedtls_mpi+0x2b8>
    SUB( 10 ); SUB( 11 );                                   NEXT; // A5
   dd410:	a801      	add	r0, sp, #4
   dd412:	f7ff fd9b 	bl	dcf4c <_ZL5add32PmmPa>
   dd416:	e74f      	b.n	dd2b8 <_ZL12ecp_mod_p256P11mbedtls_mpi+0x342>
    SUB(  8 ); SUB(  9 );                                   NEXT; // A6
   dd418:	a801      	add	r0, sp, #4
   dd41a:	f7ff fd97 	bl	dcf4c <_ZL5add32PmmPa>
   dd41e:	e796      	b.n	dd34e <_ZL12ecp_mod_p256P11mbedtls_mpi+0x3d8>
    SUB( 10 ); SUB( 11 ); SUB( 12 ); SUB( 13 );             LAST; // A7
   dd420:	f99d 2003 	ldrsb.w	r2, [sp, #3]
   dd424:	2a00      	cmp	r2, #0
   dd426:	da10      	bge.n	dd44a <_ZL12ecp_mod_p256P11mbedtls_mpi+0x4d4>
        C->p[ C->n - 1 ] = (mbedtls_mpi_uint) -c;
   dd428:	9b03      	ldr	r3, [sp, #12]
   dd42a:	9904      	ldr	r1, [sp, #16]
   dd42c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   dd430:	3b01      	subs	r3, #1
   dd432:	4252      	negs	r2, r2
   dd434:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, C, N ) );
   dd438:	4620      	mov	r0, r4
   dd43a:	4622      	mov	r2, r4
   dd43c:	a902      	add	r1, sp, #8
   dd43e:	f003 fe4f 	bl	e10e0 <mbedtls_mpi_sub_abs>
   dd442:	b910      	cbnz	r0, dd44a <_ZL12ecp_mod_p256P11mbedtls_mpi+0x4d4>
    N->s = -1;
   dd444:	f04f 33ff 	mov.w	r3, #4294967295
   dd448:	6023      	str	r3, [r4, #0]

cleanup:
    return( ret );
}
   dd44a:	4628      	mov	r0, r5
   dd44c:	b00f      	add	sp, #60	; 0x3c
   dd44e:	bd30      	pop	{r4, r5, pc}

000dd450 <mbedtls_ecp_group_load>:
{
   dd450:	b538      	push	{r3, r4, r5, lr}
   dd452:	460d      	mov	r5, r1
   dd454:	4604      	mov	r4, r0
    mbedtls_ecp_group_free( grp );
   dd456:	f7fb fcc6 	bl	d8de6 <mbedtls_ecp_group_free>
    switch( id )
   dd45a:	2d03      	cmp	r5, #3
    grp->id = id;
   dd45c:	7025      	strb	r5, [r4, #0]
    switch( id )
   dd45e:	d127      	bne.n	dd4b0 <mbedtls_ecp_group_load+0x60>
            NIST_MODP( p256 );
   dd460:	4b16      	ldr	r3, [pc, #88]	; (dd4bc <mbedtls_ecp_group_load+0x6c>)
    X->p = (mbedtls_mpi_uint *) p;
   dd462:	4a17      	ldr	r2, [pc, #92]	; (dd4c0 <mbedtls_ecp_group_load+0x70>)
            NIST_MODP( p256 );
   dd464:	6663      	str	r3, [r4, #100]	; 0x64
    X->n = len / sizeof( mbedtls_mpi_uint );
   dd466:	2501      	movs	r5, #1
   dd468:	2308      	movs	r3, #8
    X->p = (mbedtls_mpi_uint *) p;
   dd46a:	60e2      	str	r2, [r4, #12]
   dd46c:	4a15      	ldr	r2, [pc, #84]	; (dd4c4 <mbedtls_ecp_group_load+0x74>)
   dd46e:	6262      	str	r2, [r4, #36]	; 0x24
    X->n = len / sizeof( mbedtls_mpi_uint );
   dd470:	e9c4 5301 	strd	r5, r3, [r4, #4]
   dd474:	e9c4 5307 	strd	r5, r3, [r4, #28]
   dd478:	e9c4 5313 	strd	r5, r3, [r4, #76]	; 0x4c
   dd47c:	e9c4 530a 	strd	r5, r3, [r4, #40]	; 0x28
    X->p = (mbedtls_mpi_uint *) p;
   dd480:	4a11      	ldr	r2, [pc, #68]	; (dd4c8 <mbedtls_ecp_group_load+0x78>)
    X->n = len / sizeof( mbedtls_mpi_uint );
   dd482:	63a3      	str	r3, [r4, #56]	; 0x38
    X->p = (mbedtls_mpi_uint *) p;
   dd484:	4b11      	ldr	r3, [pc, #68]	; (dd4cc <mbedtls_ecp_group_load+0x7c>)
   dd486:	6562      	str	r2, [r4, #84]	; 0x54
   dd488:	4a11      	ldr	r2, [pc, #68]	; (dd4d0 <mbedtls_ecp_group_load+0x80>)
    X->n = 1;
   dd48a:	6465      	str	r5, [r4, #68]	; 0x44
    X->s = 1;
   dd48c:	e9c4 350f 	strd	r3, r5, [r4, #60]	; 0x3c
    X->p = one;
   dd490:	4b10      	ldr	r3, [pc, #64]	; (dd4d4 <mbedtls_ecp_group_load+0x84>)
   dd492:	64a3      	str	r3, [r4, #72]	; 0x48
    X->s = 1;
   dd494:	e9c4 250c 	strd	r2, r5, [r4, #48]	; 0x30
    grp->pbits = mbedtls_mpi_bitlen( &grp->P );
   dd498:	1d20      	adds	r0, r4, #4
   dd49a:	f003 fbb5 	bl	e0c08 <mbedtls_mpi_bitlen>
   dd49e:	65a0      	str	r0, [r4, #88]	; 0x58
    grp->nbits = mbedtls_mpi_bitlen( &grp->N );
   dd4a0:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   dd4a4:	f003 fbb0 	bl	e0c08 <mbedtls_mpi_bitlen>
    grp->h = 1;
   dd4a8:	e9c4 0517 	strd	r0, r5, [r4, #92]	; 0x5c
            return( LOAD_GROUP( secp256r1 ) );
   dd4ac:	2000      	movs	r0, #0
}
   dd4ae:	bd38      	pop	{r3, r4, r5, pc}
            mbedtls_ecp_group_free( grp );
   dd4b0:	4620      	mov	r0, r4
   dd4b2:	f7fb fc98 	bl	d8de6 <mbedtls_ecp_group_free>
            return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
   dd4b6:	4808      	ldr	r0, [pc, #32]	; (dd4d8 <mbedtls_ecp_group_load+0x88>)
   dd4b8:	e7f9      	b.n	dd4ae <mbedtls_ecp_group_load+0x5e>
   dd4ba:	bf00      	nop
   dd4bc:	000dcf77 	.word	0x000dcf77
   dd4c0:	000ec704 	.word	0x000ec704
   dd4c4:	000ec6c4 	.word	0x000ec6c4
   dd4c8:	000ec6e4 	.word	0x000ec6e4
   dd4cc:	000ec744 	.word	0x000ec744
   dd4d0:	000ec724 	.word	0x000ec724
   dd4d4:	2003ac54 	.word	0x2003ac54
   dd4d8:	ffffb180 	.word	0xffffb180

000dd4dc <_ZL15x509_memcasecmpPKvS0_j>:

/*
 * Like memcmp, but case-insensitive and always returns -1 if different
 */
static int x509_memcasecmp( const void *s1, const void *s2, size_t len )
{
   dd4dc:	b570      	push	{r4, r5, r6, lr}
    size_t i;
    unsigned char diff;
    const unsigned char *n1 = (const unsigned char *)s1, *n2 = (const unsigned char *)s2;

    for( i = 0; i < len; i++ )
   dd4de:	2400      	movs	r4, #0
   dd4e0:	4294      	cmp	r4, r2
   dd4e2:	d00e      	beq.n	dd502 <_ZL15x509_memcasecmpPKvS0_j+0x26>
    {
        diff = n1[i] ^ n2[i];
   dd4e4:	5d03      	ldrb	r3, [r0, r4]
   dd4e6:	5d0d      	ldrb	r5, [r1, r4]

        if( diff == 0 )
   dd4e8:	42ab      	cmp	r3, r5
        diff = n1[i] ^ n2[i];
   dd4ea:	ea83 0605 	eor.w	r6, r3, r5
        if( diff == 0 )
   dd4ee:	d006      	beq.n	dd4fe <_ZL15x509_memcasecmpPKvS0_j+0x22>
            continue;

        if( diff == 32 &&
   dd4f0:	2e20      	cmp	r6, #32
   dd4f2:	d108      	bne.n	dd506 <_ZL15x509_memcasecmpPKvS0_j+0x2a>
            ( ( n1[i] >= 'a' && n1[i] <= 'z' ) ||
   dd4f4:	f023 0320 	bic.w	r3, r3, #32
   dd4f8:	3b41      	subs	r3, #65	; 0x41
   dd4fa:	2b19      	cmp	r3, #25
   dd4fc:	d803      	bhi.n	dd506 <_ZL15x509_memcasecmpPKvS0_j+0x2a>
    for( i = 0; i < len; i++ )
   dd4fe:	3401      	adds	r4, #1
   dd500:	e7ee      	b.n	dd4e0 <_ZL15x509_memcasecmpPKvS0_j+0x4>
        }

        return( -1 );
    }

    return( 0 );
   dd502:	2000      	movs	r0, #0
}
   dd504:	bd70      	pop	{r4, r5, r6, pc}
        return( -1 );
   dd506:	f04f 30ff 	mov.w	r0, #4294967295
   dd50a:	e7fb      	b.n	dd504 <_ZL15x509_memcasecmpPKvS0_j+0x28>

000dd50c <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_>:
 * or space folding.)
 *
 * Return 0 if equal, -1 otherwise.
 */
static int x509_name_cmp( const mbedtls_x509_name *a, const mbedtls_x509_name *b )
{
   dd50c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dd50e:	4605      	mov	r5, r0
   dd510:	460c      	mov	r4, r1
    /* Avoid recursion, it might not be optimised by the compiler */
    while( a != NULL || b != NULL )
   dd512:	b925      	cbnz	r5, dd51e <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x12>
   dd514:	1e20      	subs	r0, r4, #0
   dd516:	bf18      	it	ne
   dd518:	2001      	movne	r0, #1
   dd51a:	4240      	negs	r0, r0
        b = b->next;
    }

    /* a == NULL == b */
    return( 0 );
}
   dd51c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if( a == NULL || b == NULL )
   dd51e:	2c00      	cmp	r4, #0
   dd520:	d031      	beq.n	dd586 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
        if( a->oid.tag != b->oid.tag ||
   dd522:	682a      	ldr	r2, [r5, #0]
   dd524:	6823      	ldr	r3, [r4, #0]
   dd526:	429a      	cmp	r2, r3
   dd528:	d12d      	bne.n	dd586 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
            a->oid.len != b->oid.len ||
   dd52a:	6863      	ldr	r3, [r4, #4]
        if( a->oid.tag != b->oid.tag ||
   dd52c:	686a      	ldr	r2, [r5, #4]
   dd52e:	429a      	cmp	r2, r3
   dd530:	d129      	bne.n	dd586 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
            memcmp( a->oid.p, b->oid.p, b->oid.len ) != 0 )
   dd532:	68a1      	ldr	r1, [r4, #8]
   dd534:	68a8      	ldr	r0, [r5, #8]
   dd536:	f00b f9bb 	bl	e88b0 <memcmp>
            a->oid.len != b->oid.len ||
   dd53a:	bb20      	cbnz	r0, dd586 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
    if( a->tag == b->tag &&
   dd53c:	68ef      	ldr	r7, [r5, #12]
   dd53e:	68e6      	ldr	r6, [r4, #12]
   dd540:	42b7      	cmp	r7, r6
   dd542:	d108      	bne.n	dd556 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x4a>
        a->len == b->len &&
   dd544:	6923      	ldr	r3, [r4, #16]
    if( a->tag == b->tag &&
   dd546:	692a      	ldr	r2, [r5, #16]
   dd548:	429a      	cmp	r2, r3
   dd54a:	d104      	bne.n	dd556 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x4a>
        memcmp( a->p, b->p, b->len ) == 0 )
   dd54c:	6961      	ldr	r1, [r4, #20]
   dd54e:	6968      	ldr	r0, [r5, #20]
   dd550:	f00b f9ae 	bl	e88b0 <memcmp>
        a->len == b->len &&
   dd554:	b180      	cbz	r0, dd578 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x6c>
        a->len == b->len &&
   dd556:	2f0c      	cmp	r7, #12
   dd558:	d001      	beq.n	dd55e <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x52>
    if( ( a->tag == MBEDTLS_ASN1_UTF8_STRING || a->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
   dd55a:	2f13      	cmp	r7, #19
   dd55c:	d113      	bne.n	dd586 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
   dd55e:	2e0c      	cmp	r6, #12
   dd560:	d001      	beq.n	dd566 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x5a>
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
   dd562:	2e13      	cmp	r6, #19
   dd564:	d10f      	bne.n	dd586 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
        a->len == b->len &&
   dd566:	6923      	ldr	r3, [r4, #16]
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
   dd568:	692a      	ldr	r2, [r5, #16]
   dd56a:	429a      	cmp	r2, r3
   dd56c:	d10b      	bne.n	dd586 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
        x509_memcasecmp( a->p, b->p, b->len ) == 0 )
   dd56e:	6961      	ldr	r1, [r4, #20]
   dd570:	6968      	ldr	r0, [r5, #20]
   dd572:	f7ff ffb3 	bl	dd4dc <_ZL15x509_memcasecmpPKvS0_j>
        a->len == b->len &&
   dd576:	b930      	cbnz	r0, dd586 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
        if( a->next_merged != b->next_merged )
   dd578:	7f2a      	ldrb	r2, [r5, #28]
   dd57a:	7f23      	ldrb	r3, [r4, #28]
   dd57c:	429a      	cmp	r2, r3
   dd57e:	d102      	bne.n	dd586 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
        a = a->next;
   dd580:	69ad      	ldr	r5, [r5, #24]
        b = b->next;
   dd582:	69a4      	ldr	r4, [r4, #24]
    while( a != NULL || b != NULL )
   dd584:	e7c5      	b.n	dd512 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x6>
            return( -1 );
   dd586:	f04f 30ff 	mov.w	r0, #4294967295
   dd58a:	e7c7      	b.n	dd51c <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x10>

000dd58c <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj>:
/*
 * Check for CN match
 */
static int x509_crt_check_cn( const mbedtls_x509_buf *name,
                              const char *cn, size_t cn_len )
{
   dd58c:	b570      	push	{r4, r5, r6, lr}
    /* try exact match */
    if( name->len == cn_len &&
   dd58e:	6845      	ldr	r5, [r0, #4]
   dd590:	4295      	cmp	r5, r2
{
   dd592:	4606      	mov	r6, r0
   dd594:	460c      	mov	r4, r1
    if( name->len == cn_len &&
   dd596:	d104      	bne.n	dd5a2 <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj+0x16>
        x509_memcasecmp( cn, name->p, cn_len ) == 0 )
   dd598:	6881      	ldr	r1, [r0, #8]
   dd59a:	4620      	mov	r0, r4
   dd59c:	f7ff ff9e 	bl	dd4dc <_ZL15x509_memcasecmpPKvS0_j>
    if( name->len == cn_len &&
   dd5a0:	b310      	cbz	r0, dd5e8 <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj+0x5c>
    size_t cn_idx = 0, cn_len = strlen( cn );
   dd5a2:	4620      	mov	r0, r4
   dd5a4:	f00b fa08 	bl	e89b8 <strlen>
    if( name->len < 3 || name->p[0] != '*' || name->p[1] != '.' )
   dd5a8:	2d02      	cmp	r5, #2
    size_t cn_idx = 0, cn_len = strlen( cn );
   dd5aa:	4602      	mov	r2, r0
    if( name->len < 3 || name->p[0] != '*' || name->p[1] != '.' )
   dd5ac:	d91d      	bls.n	dd5ea <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj+0x5e>
   dd5ae:	68b0      	ldr	r0, [r6, #8]
   dd5b0:	7803      	ldrb	r3, [r0, #0]
   dd5b2:	2b2a      	cmp	r3, #42	; 0x2a
   dd5b4:	d119      	bne.n	dd5ea <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj+0x5e>
   dd5b6:	7843      	ldrb	r3, [r0, #1]
   dd5b8:	2b2e      	cmp	r3, #46	; 0x2e
   dd5ba:	d116      	bne.n	dd5ea <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj+0x5e>
    for( i = 0; i < cn_len; ++i )
   dd5bc:	2300      	movs	r3, #0
   dd5be:	429a      	cmp	r2, r3
   dd5c0:	d013      	beq.n	dd5ea <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj+0x5e>
        if( cn[i] == '.' )
   dd5c2:	4621      	mov	r1, r4
   dd5c4:	3401      	adds	r4, #1
   dd5c6:	780e      	ldrb	r6, [r1, #0]
   dd5c8:	2e2e      	cmp	r6, #46	; 0x2e
   dd5ca:	d001      	beq.n	dd5d0 <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj+0x44>
    for( i = 0; i < cn_len; ++i )
   dd5cc:	3301      	adds	r3, #1
   dd5ce:	e7f6      	b.n	dd5be <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj+0x32>
    if( cn_idx == 0 )
   dd5d0:	b15b      	cbz	r3, dd5ea <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj+0x5e>
    if( cn_len - cn_idx == name->len - 1 &&
   dd5d2:	3d01      	subs	r5, #1
   dd5d4:	1ad2      	subs	r2, r2, r3
   dd5d6:	42aa      	cmp	r2, r5
   dd5d8:	d107      	bne.n	dd5ea <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj+0x5e>
        x509_memcasecmp( name->p + 1, cn + cn_idx, name->len - 1 ) == 0 )
   dd5da:	3001      	adds	r0, #1
   dd5dc:	f7ff ff7e 	bl	dd4dc <_ZL15x509_memcasecmpPKvS0_j>
    if( cn_len - cn_idx == name->len - 1 &&
   dd5e0:	3800      	subs	r0, #0
   dd5e2:	bf18      	it	ne
   dd5e4:	2001      	movne	r0, #1
   dd5e6:	4240      	negs	r0, r0
    {
        return( 0 );
    }

    return( -1 );
}
   dd5e8:	bd70      	pop	{r4, r5, r6, pc}
    return( -1 );
   dd5ea:	f04f 30ff 	mov.w	r0, #4294967295
   dd5ee:	e7fb      	b.n	dd5e8 <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj+0x5c>

000dd5f0 <_ZL25x509_profile_check_pk_algPK24mbedtls_x509_crt_profile17mbedtls_pk_type_t.isra.0>:
    if( pk_alg == MBEDTLS_PK_NONE )
   dd5f0:	b151      	cbz	r1, dd608 <_ZL25x509_profile_check_pk_algPK24mbedtls_x509_crt_profile17mbedtls_pk_type_t.isra.0+0x18>
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
   dd5f2:	2301      	movs	r3, #1
   dd5f4:	3901      	subs	r1, #1
   dd5f6:	fa03 f101 	lsl.w	r1, r3, r1
   dd5fa:	6803      	ldr	r3, [r0, #0]
   dd5fc:	4219      	tst	r1, r3
   dd5fe:	bf0c      	ite	eq
   dd600:	f04f 30ff 	moveq.w	r0, #4294967295
   dd604:	2000      	movne	r0, #0
   dd606:	4770      	bx	lr
        return( -1 );
   dd608:	f04f 30ff 	mov.w	r0, #4294967295
}
   dd60c:	4770      	bx	lr

000dd60e <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi>:
{
   dd60e:	b570      	push	{r4, r5, r6, lr}
   dd610:	4615      	mov	r5, r2
    if( *p == end )
   dd612:	6802      	ldr	r2, [r0, #0]
   dd614:	428a      	cmp	r2, r1
{
   dd616:	4604      	mov	r4, r0
    if( *p == end )
   dd618:	d101      	bne.n	dd61e <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi+0x10>
        return( 0 );
   dd61a:	2000      	movs	r0, #0
}
   dd61c:	bd70      	pop	{r4, r5, r6, pc}
    uid->tag = **p;
   dd61e:	7816      	ldrb	r6, [r2, #0]
   dd620:	462a      	mov	r2, r5
    if( ( ret = mbedtls_asn1_get_tag( p, end, &uid->len,
   dd622:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
    uid->tag = **p;
   dd626:	f842 6b04 	str.w	r6, [r2], #4
    if( ( ret = mbedtls_asn1_get_tag( p, end, &uid->len,
   dd62a:	f7f8 fed3 	bl	d63d4 <mbedtls_asn1_get_tag>
   dd62e:	b128      	cbz	r0, dd63c <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi+0x2e>
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   dd630:	f110 0f62 	cmn.w	r0, #98	; 0x62
   dd634:	d0f1      	beq.n	dd61a <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi+0xc>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
   dd636:	f5a0 5006 	sub.w	r0, r0, #8576	; 0x2180
   dd63a:	e7ef      	b.n	dd61c <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi+0xe>
    uid->p = *p;
   dd63c:	6823      	ldr	r3, [r4, #0]
    *p += uid->len;
   dd63e:	686a      	ldr	r2, [r5, #4]
    uid->p = *p;
   dd640:	60ab      	str	r3, [r5, #8]
    *p += uid->len;
   dd642:	4413      	add	r3, r2
   dd644:	6023      	str	r3, [r4, #0]
    return( 0 );
   dd646:	e7e9      	b.n	dd61c <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi+0xe>

000dd648 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profilePK18mbedtls_pk_context>:
{
   dd648:	b538      	push	{r3, r4, r5, lr}
   dd64a:	4605      	mov	r5, r0
    const mbedtls_pk_type_t pk_alg = mbedtls_pk_get_type( pk );
   dd64c:	4608      	mov	r0, r1
{
   dd64e:	460c      	mov	r4, r1
    const mbedtls_pk_type_t pk_alg = mbedtls_pk_get_type( pk );
   dd650:	f001 fb12 	bl	dec78 <mbedtls_pk_get_type>
    if( pk_alg == MBEDTLS_PK_RSA || pk_alg == MBEDTLS_PK_RSASSA_PSS )
   dd654:	2801      	cmp	r0, #1
   dd656:	d001      	beq.n	dd65c <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profilePK18mbedtls_pk_context+0x14>
   dd658:	2806      	cmp	r0, #6
   dd65a:	d109      	bne.n	dd670 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profilePK18mbedtls_pk_context+0x28>
        if( mbedtls_pk_get_bitlen( pk ) >= profile->rsa_min_bitlen )
   dd65c:	4620      	mov	r0, r4
   dd65e:	f001 faa1 	bl	deba4 <mbedtls_pk_get_bitlen>
   dd662:	68eb      	ldr	r3, [r5, #12]
   dd664:	4298      	cmp	r0, r3
   dd666:	f04f 30ff 	mov.w	r0, #4294967295
   dd66a:	bf28      	it	cs
   dd66c:	2000      	movcs	r0, #0
}
   dd66e:	bd38      	pop	{r3, r4, r5, pc}
    if( pk_alg == MBEDTLS_PK_ECDSA ||
   dd670:	1e83      	subs	r3, r0, #2
   dd672:	b2db      	uxtb	r3, r3
   dd674:	2b02      	cmp	r3, #2
   dd676:	d80d      	bhi.n	dd694 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profilePK18mbedtls_pk_context+0x4c>
        const mbedtls_ecp_group_id gid = mbedtls_pk_ec( *pk )->grp.id;
   dd678:	6863      	ldr	r3, [r4, #4]
   dd67a:	781b      	ldrb	r3, [r3, #0]
        if( gid == MBEDTLS_ECP_DP_NONE )
   dd67c:	b153      	cbz	r3, dd694 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profilePK18mbedtls_pk_context+0x4c>
        if( ( profile->allowed_curves & MBEDTLS_X509_ID_FLAG( gid ) ) != 0 )
   dd67e:	2201      	movs	r2, #1
   dd680:	3b01      	subs	r3, #1
   dd682:	fa02 f303 	lsl.w	r3, r2, r3
   dd686:	68aa      	ldr	r2, [r5, #8]
   dd688:	4213      	tst	r3, r2
   dd68a:	bf0c      	ite	eq
   dd68c:	f04f 30ff 	moveq.w	r0, #4294967295
   dd690:	2000      	movne	r0, #0
   dd692:	e7ec      	b.n	dd66e <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profilePK18mbedtls_pk_context+0x26>
    return( -1 );
   dd694:	f04f 30ff 	mov.w	r0, #4294967295
   dd698:	e7e9      	b.n	dd66e <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profilePK18mbedtls_pk_context+0x26>
	...

000dd69c <mbedtls_x509_crt_info>:
{
   dd69c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dd6a0:	4680      	mov	r8, r0
   dd6a2:	b08d      	sub	sp, #52	; 0x34
   dd6a4:	468a      	mov	sl, r1
   dd6a6:	4691      	mov	r9, r2
    if( NULL == crt )
   dd6a8:	461f      	mov	r7, r3
   dd6aa:	b95b      	cbnz	r3, dd6c4 <mbedtls_x509_crt_info+0x28>
        ret = mbedtls_snprintf( p, n, "\nCertificate is uninitialised!\n" );
   dd6ac:	4aa4      	ldr	r2, [pc, #656]	; (dd940 <mbedtls_x509_crt_info+0x2a4>)
   dd6ae:	f008 f89f 	bl	e57f0 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   dd6b2:	2800      	cmp	r0, #0
   dd6b4:	da01      	bge.n	dd6ba <mbedtls_x509_crt_info+0x1e>
   dd6b6:	48a3      	ldr	r0, [pc, #652]	; (dd944 <mbedtls_x509_crt_info+0x2a8>)
   dd6b8:	e001      	b.n	dd6be <mbedtls_x509_crt_info+0x22>
   dd6ba:	4550      	cmp	r0, sl
   dd6bc:	d2fb      	bcs.n	dd6b6 <mbedtls_x509_crt_info+0x1a>
}
   dd6be:	b00d      	add	sp, #52	; 0x34
   dd6c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ret = mbedtls_snprintf( p, n, "%scert. version     : %d\n",
   dd6c4:	699b      	ldr	r3, [r3, #24]
   dd6c6:	9300      	str	r3, [sp, #0]
   dd6c8:	4613      	mov	r3, r2
   dd6ca:	4a9f      	ldr	r2, [pc, #636]	; (dd948 <mbedtls_x509_crt_info+0x2ac>)
   dd6cc:	f008 f890 	bl	e57f0 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
   dd6d0:	2800      	cmp	r0, #0
   dd6d2:	dbf0      	blt.n	dd6b6 <mbedtls_x509_crt_info+0x1a>
   dd6d4:	4550      	cmp	r0, sl
   dd6d6:	d2ee      	bcs.n	dd6b6 <mbedtls_x509_crt_info+0x1a>
   dd6d8:	ebaa 0500 	sub.w	r5, sl, r0
   dd6dc:	4480      	add	r8, r0
    ret = mbedtls_snprintf( p, n, "%sserial number     : ",
   dd6de:	4a9b      	ldr	r2, [pc, #620]	; (dd94c <mbedtls_x509_crt_info+0x2b0>)
   dd6e0:	464b      	mov	r3, r9
   dd6e2:	4629      	mov	r1, r5
   dd6e4:	4640      	mov	r0, r8
   dd6e6:	f008 f883 	bl	e57f0 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
   dd6ea:	2800      	cmp	r0, #0
   dd6ec:	dbe3      	blt.n	dd6b6 <mbedtls_x509_crt_info+0x1a>
   dd6ee:	4285      	cmp	r5, r0
   dd6f0:	d9e1      	bls.n	dd6b6 <mbedtls_x509_crt_info+0x1a>
   dd6f2:	1a2d      	subs	r5, r5, r0
   dd6f4:	4480      	add	r8, r0
    ret = mbedtls_x509_serial_gets( p, n, &crt->serial );
   dd6f6:	f107 021c 	add.w	r2, r7, #28
   dd6fa:	4629      	mov	r1, r5
   dd6fc:	4640      	mov	r0, r8
   dd6fe:	f7f9 fb1d 	bl	d6d3c <mbedtls_x509_serial_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
   dd702:	2800      	cmp	r0, #0
   dd704:	dbd7      	blt.n	dd6b6 <mbedtls_x509_crt_info+0x1a>
   dd706:	4285      	cmp	r5, r0
   dd708:	d9d5      	bls.n	dd6b6 <mbedtls_x509_crt_info+0x1a>
   dd70a:	1a2d      	subs	r5, r5, r0
   dd70c:	eb08 0600 	add.w	r6, r8, r0
    ret = mbedtls_snprintf( p, n, "\n%sissuer name       : ", prefix );
   dd710:	4a8f      	ldr	r2, [pc, #572]	; (dd950 <mbedtls_x509_crt_info+0x2b4>)
   dd712:	464b      	mov	r3, r9
   dd714:	4629      	mov	r1, r5
   dd716:	4630      	mov	r0, r6
   dd718:	f008 f86a 	bl	e57f0 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
   dd71c:	2800      	cmp	r0, #0
   dd71e:	dbca      	blt.n	dd6b6 <mbedtls_x509_crt_info+0x1a>
   dd720:	4285      	cmp	r5, r0
   dd722:	d9c8      	bls.n	dd6b6 <mbedtls_x509_crt_info+0x1a>
   dd724:	1a2d      	subs	r5, r5, r0
   dd726:	4406      	add	r6, r0
    ret = mbedtls_x509_dn_gets( p, n, &crt->issuer  );
   dd728:	f107 024c 	add.w	r2, r7, #76	; 0x4c
   dd72c:	4629      	mov	r1, r5
   dd72e:	4630      	mov	r0, r6
   dd730:	f7f9 fa80 	bl	d6c34 <mbedtls_x509_dn_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
   dd734:	2800      	cmp	r0, #0
   dd736:	dbbe      	blt.n	dd6b6 <mbedtls_x509_crt_info+0x1a>
   dd738:	4285      	cmp	r5, r0
   dd73a:	d9bc      	bls.n	dd6b6 <mbedtls_x509_crt_info+0x1a>
   dd73c:	1a2d      	subs	r5, r5, r0
   dd73e:	1834      	adds	r4, r6, r0
    ret = mbedtls_snprintf( p, n, "\n%ssubject name      : ", prefix );
   dd740:	4a84      	ldr	r2, [pc, #528]	; (dd954 <mbedtls_x509_crt_info+0x2b8>)
   dd742:	464b      	mov	r3, r9
   dd744:	4629      	mov	r1, r5
   dd746:	4620      	mov	r0, r4
   dd748:	f008 f852 	bl	e57f0 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
   dd74c:	2800      	cmp	r0, #0
   dd74e:	dbb2      	blt.n	dd6b6 <mbedtls_x509_crt_info+0x1a>
   dd750:	4285      	cmp	r5, r0
   dd752:	d9b0      	bls.n	dd6b6 <mbedtls_x509_crt_info+0x1a>
   dd754:	1a2d      	subs	r5, r5, r0
   dd756:	4404      	add	r4, r0
    ret = mbedtls_x509_dn_gets( p, n, &crt->subject );
   dd758:	f107 026c 	add.w	r2, r7, #108	; 0x6c
   dd75c:	4629      	mov	r1, r5
   dd75e:	4620      	mov	r0, r4
   dd760:	f7f9 fa68 	bl	d6c34 <mbedtls_x509_dn_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
   dd764:	2800      	cmp	r0, #0
   dd766:	dba6      	blt.n	dd6b6 <mbedtls_x509_crt_info+0x1a>
   dd768:	4285      	cmp	r5, r0
   dd76a:	d9a4      	bls.n	dd6b6 <mbedtls_x509_crt_info+0x1a>
    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
   dd76c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   dd770:	9305      	str	r3, [sp, #20]
   dd772:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   dd776:	9304      	str	r3, [sp, #16]
   dd778:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   dd77c:	9303      	str	r3, [sp, #12]
   dd77e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   dd782:	9302      	str	r3, [sp, #8]
   dd784:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
   dd788:	9301      	str	r3, [sp, #4]
   dd78a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   dd78e:	9300      	str	r3, [sp, #0]
    MBEDTLS_X509_SAFE_SNPRINTF;
   dd790:	1a2d      	subs	r5, r5, r0
   dd792:	4404      	add	r4, r0
    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
   dd794:	4a70      	ldr	r2, [pc, #448]	; (dd958 <mbedtls_x509_crt_info+0x2bc>)
   dd796:	464b      	mov	r3, r9
   dd798:	4629      	mov	r1, r5
   dd79a:	4620      	mov	r0, r4
   dd79c:	f008 f828 	bl	e57f0 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
   dd7a0:	2800      	cmp	r0, #0
   dd7a2:	db88      	blt.n	dd6b6 <mbedtls_x509_crt_info+0x1a>
   dd7a4:	4285      	cmp	r5, r0
   dd7a6:	d986      	bls.n	dd6b6 <mbedtls_x509_crt_info+0x1a>
    ret = mbedtls_snprintf( p, n, "\n%sexpires on        : " \
   dd7a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
   dd7ac:	9305      	str	r3, [sp, #20]
   dd7ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
   dd7b2:	9304      	str	r3, [sp, #16]
   dd7b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   dd7b8:	9303      	str	r3, [sp, #12]
   dd7ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
   dd7be:	9302      	str	r3, [sp, #8]
   dd7c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
   dd7c4:	9301      	str	r3, [sp, #4]
   dd7c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
   dd7ca:	9300      	str	r3, [sp, #0]
    MBEDTLS_X509_SAFE_SNPRINTF;
   dd7cc:	1a2d      	subs	r5, r5, r0
   dd7ce:	eb04 0800 	add.w	r8, r4, r0
    ret = mbedtls_snprintf( p, n, "\n%sexpires on        : " \
   dd7d2:	4a62      	ldr	r2, [pc, #392]	; (dd95c <mbedtls_x509_crt_info+0x2c0>)
   dd7d4:	464b      	mov	r3, r9
   dd7d6:	4629      	mov	r1, r5
   dd7d8:	4640      	mov	r0, r8
   dd7da:	f008 f809 	bl	e57f0 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
   dd7de:	2800      	cmp	r0, #0
   dd7e0:	f6ff af69 	blt.w	dd6b6 <mbedtls_x509_crt_info+0x1a>
   dd7e4:	4285      	cmp	r5, r0
   dd7e6:	f67f af66 	bls.w	dd6b6 <mbedtls_x509_crt_info+0x1a>
   dd7ea:	1a2d      	subs	r5, r5, r0
   dd7ec:	4480      	add	r8, r0
    ret = mbedtls_snprintf( p, n, "\n%ssigned using      : ", prefix );
   dd7ee:	4a5c      	ldr	r2, [pc, #368]	; (dd960 <mbedtls_x509_crt_info+0x2c4>)
   dd7f0:	464b      	mov	r3, r9
   dd7f2:	4629      	mov	r1, r5
   dd7f4:	4640      	mov	r0, r8
   dd7f6:	f007 fffb 	bl	e57f0 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
   dd7fa:	2800      	cmp	r0, #0
   dd7fc:	f6ff af5b 	blt.w	dd6b6 <mbedtls_x509_crt_info+0x1a>
   dd800:	4285      	cmp	r5, r0
   dd802:	f67f af58 	bls.w	dd6b6 <mbedtls_x509_crt_info+0x1a>
    ret = mbedtls_x509_sig_alg_gets( p, n, &crt->sig_oid, crt->sig_pk,
   dd806:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
   dd80a:	9301      	str	r3, [sp, #4]
   dd80c:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
   dd810:	9300      	str	r3, [sp, #0]
    MBEDTLS_X509_SAFE_SNPRINTF;
   dd812:	1a2d      	subs	r5, r5, r0
   dd814:	4480      	add	r8, r0
    ret = mbedtls_x509_sig_alg_gets( p, n, &crt->sig_oid, crt->sig_pk,
   dd816:	f897 3129 	ldrb.w	r3, [r7, #297]	; 0x129
   dd81a:	f107 0228 	add.w	r2, r7, #40	; 0x28
   dd81e:	4629      	mov	r1, r5
   dd820:	4640      	mov	r0, r8
   dd822:	f7f9 fad9 	bl	d6dd8 <mbedtls_x509_sig_alg_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
   dd826:	1e06      	subs	r6, r0, #0
   dd828:	f6ff af45 	blt.w	dd6b6 <mbedtls_x509_crt_info+0x1a>
   dd82c:	42b5      	cmp	r5, r6
   dd82e:	f67f af42 	bls.w	dd6b6 <mbedtls_x509_crt_info+0x1a>
    if( ( ret = mbedtls_x509_key_size_helper( key_size_str, BEFORE_COLON,
   dd832:	f107 04bc 	add.w	r4, r7, #188	; 0xbc
   dd836:	4620      	mov	r0, r4
   dd838:	f001 fa14 	bl	dec64 <mbedtls_pk_get_name>
   dd83c:	f10d 0b1c 	add.w	fp, sp, #28
   dd840:	4602      	mov	r2, r0
   dd842:	2112      	movs	r1, #18
   dd844:	4658      	mov	r0, fp
   dd846:	f7f9 fb25 	bl	d6e94 <mbedtls_x509_key_size_helper>
   dd84a:	2800      	cmp	r0, #0
   dd84c:	f47f af37 	bne.w	dd6be <mbedtls_x509_crt_info+0x22>
                          (int) mbedtls_pk_get_bitlen( &crt->pk ) );
   dd850:	4620      	mov	r0, r4
   dd852:	f001 f9a7 	bl	deba4 <mbedtls_pk_get_bitlen>
    MBEDTLS_X509_SAFE_SNPRINTF;
   dd856:	1bad      	subs	r5, r5, r6
   dd858:	44b0      	add	r8, r6
    ret = mbedtls_snprintf( p, n, "\n%s%-" BC "s: %d bits", prefix, key_size_str,
   dd85a:	e9cd b000 	strd	fp, r0, [sp]
   dd85e:	4a41      	ldr	r2, [pc, #260]	; (dd964 <mbedtls_x509_crt_info+0x2c8>)
   dd860:	464b      	mov	r3, r9
   dd862:	4629      	mov	r1, r5
   dd864:	4640      	mov	r0, r8
   dd866:	f007 ffc3 	bl	e57f0 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
   dd86a:	2800      	cmp	r0, #0
   dd86c:	f6ff af23 	blt.w	dd6b6 <mbedtls_x509_crt_info+0x1a>
   dd870:	4285      	cmp	r5, r0
   dd872:	f67f af20 	bls.w	dd6b6 <mbedtls_x509_crt_info+0x1a>
    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
   dd876:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
   dd87a:	05de      	lsls	r6, r3, #23
    MBEDTLS_X509_SAFE_SNPRINTF;
   dd87c:	eba5 0400 	sub.w	r4, r5, r0
   dd880:	eb08 0500 	add.w	r5, r8, r0
    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
   dd884:	d528      	bpl.n	dd8d8 <mbedtls_x509_crt_info+0x23c>
        ret = mbedtls_snprintf( p, n, "\n%sbasic constraints : CA=%s", prefix,
   dd886:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
   dd88a:	4a37      	ldr	r2, [pc, #220]	; (dd968 <mbedtls_x509_crt_info+0x2cc>)
   dd88c:	4b37      	ldr	r3, [pc, #220]	; (dd96c <mbedtls_x509_crt_info+0x2d0>)
   dd88e:	2900      	cmp	r1, #0
   dd890:	bf08      	it	eq
   dd892:	4613      	moveq	r3, r2
   dd894:	9300      	str	r3, [sp, #0]
   dd896:	4a36      	ldr	r2, [pc, #216]	; (dd970 <mbedtls_x509_crt_info+0x2d4>)
   dd898:	464b      	mov	r3, r9
   dd89a:	4621      	mov	r1, r4
   dd89c:	4628      	mov	r0, r5
   dd89e:	f007 ffa7 	bl	e57f0 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   dd8a2:	2800      	cmp	r0, #0
   dd8a4:	f6ff af07 	blt.w	dd6b6 <mbedtls_x509_crt_info+0x1a>
   dd8a8:	4284      	cmp	r4, r0
   dd8aa:	f67f af04 	bls.w	dd6b6 <mbedtls_x509_crt_info+0x1a>
        if( crt->max_pathlen > 0 )
   dd8ae:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
   dd8b2:	2b00      	cmp	r3, #0
        MBEDTLS_X509_SAFE_SNPRINTF;
   dd8b4:	eba4 0400 	sub.w	r4, r4, r0
   dd8b8:	4405      	add	r5, r0
        if( crt->max_pathlen > 0 )
   dd8ba:	dd0d      	ble.n	dd8d8 <mbedtls_x509_crt_info+0x23c>
            ret = mbedtls_snprintf( p, n, ", max_pathlen=%d", crt->max_pathlen - 1 );
   dd8bc:	4a2d      	ldr	r2, [pc, #180]	; (dd974 <mbedtls_x509_crt_info+0x2d8>)
   dd8be:	3b01      	subs	r3, #1
   dd8c0:	4621      	mov	r1, r4
   dd8c2:	4628      	mov	r0, r5
   dd8c4:	f007 ff94 	bl	e57f0 <snprintf>
            MBEDTLS_X509_SAFE_SNPRINTF;
   dd8c8:	2800      	cmp	r0, #0
   dd8ca:	f6ff aef4 	blt.w	dd6b6 <mbedtls_x509_crt_info+0x1a>
   dd8ce:	4284      	cmp	r4, r0
   dd8d0:	f67f aef1 	bls.w	dd6b6 <mbedtls_x509_crt_info+0x1a>
   dd8d4:	1a24      	subs	r4, r4, r0
   dd8d6:	4405      	add	r5, r0
    if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
   dd8d8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
   dd8dc:	0698      	lsls	r0, r3, #26
   dd8de:	d557      	bpl.n	dd990 <mbedtls_x509_crt_info+0x2f4>
        ret = mbedtls_snprintf( p, n, "\n%ssubject alt name  : ", prefix );
   dd8e0:	4a25      	ldr	r2, [pc, #148]	; (dd978 <mbedtls_x509_crt_info+0x2dc>)
   dd8e2:	464b      	mov	r3, r9
   dd8e4:	4621      	mov	r1, r4
   dd8e6:	4628      	mov	r0, r5
   dd8e8:	f007 ff82 	bl	e57f0 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   dd8ec:	2800      	cmp	r0, #0
   dd8ee:	f6ff aee2 	blt.w	dd6b6 <mbedtls_x509_crt_info+0x1a>
   dd8f2:	42a0      	cmp	r0, r4
   dd8f4:	f4bf aedf 	bcs.w	dd6b6 <mbedtls_x509_crt_info+0x1a>
   dd8f8:	1a24      	subs	r4, r4, r0
   dd8fa:	4405      	add	r5, r0
    size_t sep_len = 0;
   dd8fc:	2100      	movs	r1, #0
    const char *sep = "";
   dd8fe:	f8df c080 	ldr.w	ip, [pc, #128]	; dd980 <mbedtls_x509_crt_info+0x2e4>
        sep = ", ";
   dd902:	481e      	ldr	r0, [pc, #120]	; (dd97c <mbedtls_x509_crt_info+0x2e0>)
        if( ( ret = x509_info_subject_alt_name( &p, &n,
   dd904:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
    while( cur != NULL )
   dd908:	460e      	mov	r6, r1
        if( cur->buf.len + sep_len >= n )
   dd90a:	6853      	ldr	r3, [r2, #4]
   dd90c:	440b      	add	r3, r1
   dd90e:	42a3      	cmp	r3, r4
   dd910:	d301      	bcc.n	dd916 <mbedtls_x509_crt_info+0x27a>
            *p = '\0';
   dd912:	702e      	strb	r6, [r5, #0]
            return( MBEDTLS_ERR_X509_BUFFER_TOO_SMALL );
   dd914:	e6cf      	b.n	dd6b6 <mbedtls_x509_crt_info+0x1a>
        n -= cur->buf.len + sep_len;
   dd916:	1ae4      	subs	r4, r4, r3
        for( i = 0; i < sep_len; i++ )
   dd918:	2300      	movs	r3, #0
   dd91a:	428b      	cmp	r3, r1
   dd91c:	d10a      	bne.n	dd934 <mbedtls_x509_crt_info+0x298>
   dd91e:	441d      	add	r5, r3
        for( i = 0; i < cur->buf.len; i++ )
   dd920:	2300      	movs	r3, #0
   dd922:	6851      	ldr	r1, [r2, #4]
   dd924:	4299      	cmp	r1, r3
   dd926:	d92d      	bls.n	dd984 <mbedtls_x509_crt_info+0x2e8>
            *p++ = cur->buf.p[i];
   dd928:	6891      	ldr	r1, [r2, #8]
   dd92a:	5cc9      	ldrb	r1, [r1, r3]
   dd92c:	f805 1b01 	strb.w	r1, [r5], #1
        for( i = 0; i < cur->buf.len; i++ )
   dd930:	3301      	adds	r3, #1
   dd932:	e7f6      	b.n	dd922 <mbedtls_x509_crt_info+0x286>
            *p++ = sep[i];
   dd934:	f81c e003 	ldrb.w	lr, [ip, r3]
   dd938:	f805 e003 	strb.w	lr, [r5, r3]
        for( i = 0; i < sep_len; i++ )
   dd93c:	3301      	adds	r3, #1
   dd93e:	e7ec      	b.n	dd91a <mbedtls_x509_crt_info+0x27e>
   dd940:	000ec76f 	.word	0x000ec76f
   dd944:	ffffd680 	.word	0xffffd680
   dd948:	000ec78f 	.word	0x000ec78f
   dd94c:	000ec7a9 	.word	0x000ec7a9
   dd950:	000ec7c0 	.word	0x000ec7c0
   dd954:	000ec7d8 	.word	0x000ec7d8
   dd958:	000ec7f0 	.word	0x000ec7f0
   dd95c:	000ec825 	.word	0x000ec825
   dd960:	000ec85a 	.word	0x000ec85a
   dd964:	000ec872 	.word	0x000ec872
   dd968:	000ec769 	.word	0x000ec769
   dd96c:	000ec764 	.word	0x000ec764
   dd970:	000ec884 	.word	0x000ec884
   dd974:	000ec8a1 	.word	0x000ec8a1
   dd978:	000ec8b2 	.word	0x000ec8b2
   dd97c:	000eb2ee 	.word	0x000eb2ee
   dd980:	000eb611 	.word	0x000eb611
        cur = cur->next;
   dd984:	68d2      	ldr	r2, [r2, #12]
        sep_len = 2;
   dd986:	2102      	movs	r1, #2
        sep = ", ";
   dd988:	4684      	mov	ip, r0
    while( cur != NULL )
   dd98a:	2a00      	cmp	r2, #0
   dd98c:	d1bd      	bne.n	dd90a <mbedtls_x509_crt_info+0x26e>
    *p = '\0';
   dd98e:	702a      	strb	r2, [r5, #0]
    if( crt->ext_types & MBEDTLS_X509_EXT_NS_CERT_TYPE )
   dd990:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
   dd994:	03d9      	lsls	r1, r3, #15
   dd996:	f140 8093 	bpl.w	ddac0 <mbedtls_x509_crt_info+0x424>
        ret = mbedtls_snprintf( p, n, "\n%scert. type        : ", prefix );
   dd99a:	4abe      	ldr	r2, [pc, #760]	; (ddc94 <mbedtls_x509_crt_info+0x5f8>)
   dd99c:	464b      	mov	r3, r9
   dd99e:	4621      	mov	r1, r4
   dd9a0:	4628      	mov	r0, r5
   dd9a2:	f007 ff25 	bl	e57f0 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   dd9a6:	2800      	cmp	r0, #0
   dd9a8:	f6ff ae85 	blt.w	dd6b6 <mbedtls_x509_crt_info+0x1a>
   dd9ac:	42a0      	cmp	r0, r4
   dd9ae:	f4bf ae82 	bcs.w	dd6b6 <mbedtls_x509_crt_info+0x1a>
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT,         "SSL Client" );
   dd9b2:	f997 3118 	ldrsb.w	r3, [r7, #280]	; 0x118
        if( ( ret = x509_info_cert_type( &p, &n, crt->ns_cert_type ) ) != 0 )
   dd9b6:	f897 6118 	ldrb.w	r6, [r7, #280]	; 0x118
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT,         "SSL Client" );
   dd9ba:	2b00      	cmp	r3, #0
        MBEDTLS_X509_SAFE_SNPRINTF;
   dd9bc:	eba4 0400 	sub.w	r4, r4, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT,         "SSL Client" );
   dd9c0:	4bb5      	ldr	r3, [pc, #724]	; (ddc98 <mbedtls_x509_crt_info+0x5fc>)
        MBEDTLS_X509_SAFE_SNPRINTF;
   dd9c2:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT,         "SSL Client" );
   dd9c4:	da0d      	bge.n	dd9e2 <mbedtls_x509_crt_info+0x346>
   dd9c6:	4ab5      	ldr	r2, [pc, #724]	; (ddc9c <mbedtls_x509_crt_info+0x600>)
   dd9c8:	4621      	mov	r1, r4
   dd9ca:	4628      	mov	r0, r5
   dd9cc:	f007 ff10 	bl	e57f0 <snprintf>
   dd9d0:	2800      	cmp	r0, #0
   dd9d2:	f6ff ae70 	blt.w	dd6b6 <mbedtls_x509_crt_info+0x1a>
   dd9d6:	4284      	cmp	r4, r0
   dd9d8:	f67f ae6d 	bls.w	dd6b6 <mbedtls_x509_crt_info+0x1a>
   dd9dc:	4bb0      	ldr	r3, [pc, #704]	; (ddca0 <mbedtls_x509_crt_info+0x604>)
   dd9de:	1a24      	subs	r4, r4, r0
   dd9e0:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_SERVER,         "SSL Server" );
   dd9e2:	0672      	lsls	r2, r6, #25
   dd9e4:	d50d      	bpl.n	dda02 <mbedtls_x509_crt_info+0x366>
   dd9e6:	4aaf      	ldr	r2, [pc, #700]	; (ddca4 <mbedtls_x509_crt_info+0x608>)
   dd9e8:	4621      	mov	r1, r4
   dd9ea:	4628      	mov	r0, r5
   dd9ec:	f007 ff00 	bl	e57f0 <snprintf>
   dd9f0:	2800      	cmp	r0, #0
   dd9f2:	f6ff ae60 	blt.w	dd6b6 <mbedtls_x509_crt_info+0x1a>
   dd9f6:	4284      	cmp	r4, r0
   dd9f8:	f67f ae5d 	bls.w	dd6b6 <mbedtls_x509_crt_info+0x1a>
   dd9fc:	4ba8      	ldr	r3, [pc, #672]	; (ddca0 <mbedtls_x509_crt_info+0x604>)
   dd9fe:	1a24      	subs	r4, r4, r0
   dda00:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_EMAIL,              "Email" );
   dda02:	06b0      	lsls	r0, r6, #26
   dda04:	d50d      	bpl.n	dda22 <mbedtls_x509_crt_info+0x386>
   dda06:	4aa8      	ldr	r2, [pc, #672]	; (ddca8 <mbedtls_x509_crt_info+0x60c>)
   dda08:	4621      	mov	r1, r4
   dda0a:	4628      	mov	r0, r5
   dda0c:	f007 fef0 	bl	e57f0 <snprintf>
   dda10:	2800      	cmp	r0, #0
   dda12:	f6ff ae50 	blt.w	dd6b6 <mbedtls_x509_crt_info+0x1a>
   dda16:	4284      	cmp	r4, r0
   dda18:	f67f ae4d 	bls.w	dd6b6 <mbedtls_x509_crt_info+0x1a>
   dda1c:	4ba0      	ldr	r3, [pc, #640]	; (ddca0 <mbedtls_x509_crt_info+0x604>)
   dda1e:	1a24      	subs	r4, r4, r0
   dda20:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING,     "Object Signing" );
   dda22:	06f1      	lsls	r1, r6, #27
   dda24:	d50d      	bpl.n	dda42 <mbedtls_x509_crt_info+0x3a6>
   dda26:	4aa1      	ldr	r2, [pc, #644]	; (ddcac <mbedtls_x509_crt_info+0x610>)
   dda28:	4621      	mov	r1, r4
   dda2a:	4628      	mov	r0, r5
   dda2c:	f007 fee0 	bl	e57f0 <snprintf>
   dda30:	2800      	cmp	r0, #0
   dda32:	f6ff ae40 	blt.w	dd6b6 <mbedtls_x509_crt_info+0x1a>
   dda36:	4284      	cmp	r4, r0
   dda38:	f67f ae3d 	bls.w	dd6b6 <mbedtls_x509_crt_info+0x1a>
   dda3c:	4b98      	ldr	r3, [pc, #608]	; (ddca0 <mbedtls_x509_crt_info+0x604>)
   dda3e:	1a24      	subs	r4, r4, r0
   dda40:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_RESERVED,           "Reserved" );
   dda42:	0732      	lsls	r2, r6, #28
   dda44:	d50d      	bpl.n	dda62 <mbedtls_x509_crt_info+0x3c6>
   dda46:	4a9a      	ldr	r2, [pc, #616]	; (ddcb0 <mbedtls_x509_crt_info+0x614>)
   dda48:	4621      	mov	r1, r4
   dda4a:	4628      	mov	r0, r5
   dda4c:	f007 fed0 	bl	e57f0 <snprintf>
   dda50:	2800      	cmp	r0, #0
   dda52:	f6ff ae30 	blt.w	dd6b6 <mbedtls_x509_crt_info+0x1a>
   dda56:	4284      	cmp	r4, r0
   dda58:	f67f ae2d 	bls.w	dd6b6 <mbedtls_x509_crt_info+0x1a>
   dda5c:	4b90      	ldr	r3, [pc, #576]	; (ddca0 <mbedtls_x509_crt_info+0x604>)
   dda5e:	1a24      	subs	r4, r4, r0
   dda60:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CA,             "SSL CA" );
   dda62:	0770      	lsls	r0, r6, #29
   dda64:	d50d      	bpl.n	dda82 <mbedtls_x509_crt_info+0x3e6>
   dda66:	4a93      	ldr	r2, [pc, #588]	; (ddcb4 <mbedtls_x509_crt_info+0x618>)
   dda68:	4621      	mov	r1, r4
   dda6a:	4628      	mov	r0, r5
   dda6c:	f007 fec0 	bl	e57f0 <snprintf>
   dda70:	2800      	cmp	r0, #0
   dda72:	f6ff ae20 	blt.w	dd6b6 <mbedtls_x509_crt_info+0x1a>
   dda76:	4284      	cmp	r4, r0
   dda78:	f67f ae1d 	bls.w	dd6b6 <mbedtls_x509_crt_info+0x1a>
   dda7c:	4b88      	ldr	r3, [pc, #544]	; (ddca0 <mbedtls_x509_crt_info+0x604>)
   dda7e:	1a24      	subs	r4, r4, r0
   dda80:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_EMAIL_CA,           "Email CA" );
   dda82:	07b1      	lsls	r1, r6, #30
   dda84:	d50d      	bpl.n	ddaa2 <mbedtls_x509_crt_info+0x406>
   dda86:	4a8c      	ldr	r2, [pc, #560]	; (ddcb8 <mbedtls_x509_crt_info+0x61c>)
   dda88:	4621      	mov	r1, r4
   dda8a:	4628      	mov	r0, r5
   dda8c:	f007 feb0 	bl	e57f0 <snprintf>
   dda90:	2800      	cmp	r0, #0
   dda92:	f6ff ae10 	blt.w	dd6b6 <mbedtls_x509_crt_info+0x1a>
   dda96:	4284      	cmp	r4, r0
   dda98:	f67f ae0d 	bls.w	dd6b6 <mbedtls_x509_crt_info+0x1a>
   dda9c:	4b80      	ldr	r3, [pc, #512]	; (ddca0 <mbedtls_x509_crt_info+0x604>)
   dda9e:	1a24      	subs	r4, r4, r0
   ddaa0:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING_CA,  "Object Signing CA" );
   ddaa2:	07f2      	lsls	r2, r6, #31
   ddaa4:	d50c      	bpl.n	ddac0 <mbedtls_x509_crt_info+0x424>
   ddaa6:	4a85      	ldr	r2, [pc, #532]	; (ddcbc <mbedtls_x509_crt_info+0x620>)
   ddaa8:	4621      	mov	r1, r4
   ddaaa:	4628      	mov	r0, r5
   ddaac:	f007 fea0 	bl	e57f0 <snprintf>
   ddab0:	2800      	cmp	r0, #0
   ddab2:	f6ff ae00 	blt.w	dd6b6 <mbedtls_x509_crt_info+0x1a>
   ddab6:	4284      	cmp	r4, r0
   ddab8:	f67f adfd 	bls.w	dd6b6 <mbedtls_x509_crt_info+0x1a>
   ddabc:	1a24      	subs	r4, r4, r0
   ddabe:	4405      	add	r5, r0
    if( crt->ext_types & MBEDTLS_X509_EXT_KEY_USAGE )
   ddac0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
   ddac4:	075e      	lsls	r6, r3, #29
   ddac6:	f140 80a0 	bpl.w	ddc0a <mbedtls_x509_crt_info+0x56e>
        ret = mbedtls_snprintf( p, n, "\n%skey usage         : ", prefix );
   ddaca:	4a7d      	ldr	r2, [pc, #500]	; (ddcc0 <mbedtls_x509_crt_info+0x624>)
   ddacc:	464b      	mov	r3, r9
   ddace:	4621      	mov	r1, r4
   ddad0:	4628      	mov	r0, r5
   ddad2:	f007 fe8d 	bl	e57f0 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   ddad6:	2800      	cmp	r0, #0
   ddad8:	f6ff aded 	blt.w	dd6b6 <mbedtls_x509_crt_info+0x1a>
   ddadc:	42a0      	cmp	r0, r4
   ddade:	f4bf adea 	bcs.w	dd6b6 <mbedtls_x509_crt_info+0x1a>
        if( ( ret = x509_info_key_usage( &p, &n, crt->key_usage ) ) != 0 )
   ddae2:	f8d7 6104 	ldr.w	r6, [r7, #260]	; 0x104
    KEY_USAGE( MBEDTLS_X509_KU_DIGITAL_SIGNATURE,    "Digital Signature" );
   ddae6:	4b6c      	ldr	r3, [pc, #432]	; (ddc98 <mbedtls_x509_crt_info+0x5fc>)
        MBEDTLS_X509_SAFE_SNPRINTF;
   ddae8:	1a24      	subs	r4, r4, r0
   ddaea:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_DIGITAL_SIGNATURE,    "Digital Signature" );
   ddaec:	0630      	lsls	r0, r6, #24
   ddaee:	d50d      	bpl.n	ddb0c <mbedtls_x509_crt_info+0x470>
   ddaf0:	4a74      	ldr	r2, [pc, #464]	; (ddcc4 <mbedtls_x509_crt_info+0x628>)
   ddaf2:	4621      	mov	r1, r4
   ddaf4:	4628      	mov	r0, r5
   ddaf6:	f007 fe7b 	bl	e57f0 <snprintf>
   ddafa:	2800      	cmp	r0, #0
   ddafc:	f6ff addb 	blt.w	dd6b6 <mbedtls_x509_crt_info+0x1a>
   ddb00:	4284      	cmp	r4, r0
   ddb02:	f67f add8 	bls.w	dd6b6 <mbedtls_x509_crt_info+0x1a>
   ddb06:	4b66      	ldr	r3, [pc, #408]	; (ddca0 <mbedtls_x509_crt_info+0x604>)
   ddb08:	1a24      	subs	r4, r4, r0
   ddb0a:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_NON_REPUDIATION,      "Non Repudiation" );
   ddb0c:	0671      	lsls	r1, r6, #25
   ddb0e:	d50d      	bpl.n	ddb2c <mbedtls_x509_crt_info+0x490>
   ddb10:	4a6d      	ldr	r2, [pc, #436]	; (ddcc8 <mbedtls_x509_crt_info+0x62c>)
   ddb12:	4621      	mov	r1, r4
   ddb14:	4628      	mov	r0, r5
   ddb16:	f007 fe6b 	bl	e57f0 <snprintf>
   ddb1a:	2800      	cmp	r0, #0
   ddb1c:	f6ff adcb 	blt.w	dd6b6 <mbedtls_x509_crt_info+0x1a>
   ddb20:	4284      	cmp	r4, r0
   ddb22:	f67f adc8 	bls.w	dd6b6 <mbedtls_x509_crt_info+0x1a>
   ddb26:	4b5e      	ldr	r3, [pc, #376]	; (ddca0 <mbedtls_x509_crt_info+0x604>)
   ddb28:	1a24      	subs	r4, r4, r0
   ddb2a:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_KEY_ENCIPHERMENT,     "Key Encipherment" );
   ddb2c:	06b2      	lsls	r2, r6, #26
   ddb2e:	d50d      	bpl.n	ddb4c <mbedtls_x509_crt_info+0x4b0>
   ddb30:	4a66      	ldr	r2, [pc, #408]	; (ddccc <mbedtls_x509_crt_info+0x630>)
   ddb32:	4621      	mov	r1, r4
   ddb34:	4628      	mov	r0, r5
   ddb36:	f007 fe5b 	bl	e57f0 <snprintf>
   ddb3a:	2800      	cmp	r0, #0
   ddb3c:	f6ff adbb 	blt.w	dd6b6 <mbedtls_x509_crt_info+0x1a>
   ddb40:	4284      	cmp	r4, r0
   ddb42:	f67f adb8 	bls.w	dd6b6 <mbedtls_x509_crt_info+0x1a>
   ddb46:	4b56      	ldr	r3, [pc, #344]	; (ddca0 <mbedtls_x509_crt_info+0x604>)
   ddb48:	1a24      	subs	r4, r4, r0
   ddb4a:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_DATA_ENCIPHERMENT,    "Data Encipherment" );
   ddb4c:	06f0      	lsls	r0, r6, #27
   ddb4e:	d50d      	bpl.n	ddb6c <mbedtls_x509_crt_info+0x4d0>
   ddb50:	4a5f      	ldr	r2, [pc, #380]	; (ddcd0 <mbedtls_x509_crt_info+0x634>)
   ddb52:	4621      	mov	r1, r4
   ddb54:	4628      	mov	r0, r5
   ddb56:	f007 fe4b 	bl	e57f0 <snprintf>
   ddb5a:	2800      	cmp	r0, #0
   ddb5c:	f6ff adab 	blt.w	dd6b6 <mbedtls_x509_crt_info+0x1a>
   ddb60:	4284      	cmp	r4, r0
   ddb62:	f67f ada8 	bls.w	dd6b6 <mbedtls_x509_crt_info+0x1a>
   ddb66:	4b4e      	ldr	r3, [pc, #312]	; (ddca0 <mbedtls_x509_crt_info+0x604>)
   ddb68:	1a24      	subs	r4, r4, r0
   ddb6a:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_KEY_AGREEMENT,        "Key Agreement" );
   ddb6c:	0731      	lsls	r1, r6, #28
   ddb6e:	d50d      	bpl.n	ddb8c <mbedtls_x509_crt_info+0x4f0>
   ddb70:	4a58      	ldr	r2, [pc, #352]	; (ddcd4 <mbedtls_x509_crt_info+0x638>)
   ddb72:	4621      	mov	r1, r4
   ddb74:	4628      	mov	r0, r5
   ddb76:	f007 fe3b 	bl	e57f0 <snprintf>
   ddb7a:	2800      	cmp	r0, #0
   ddb7c:	f6ff ad9b 	blt.w	dd6b6 <mbedtls_x509_crt_info+0x1a>
   ddb80:	4284      	cmp	r4, r0
   ddb82:	f67f ad98 	bls.w	dd6b6 <mbedtls_x509_crt_info+0x1a>
   ddb86:	4b46      	ldr	r3, [pc, #280]	; (ddca0 <mbedtls_x509_crt_info+0x604>)
   ddb88:	1a24      	subs	r4, r4, r0
   ddb8a:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_KEY_CERT_SIGN,        "Key Cert Sign" );
   ddb8c:	0772      	lsls	r2, r6, #29
   ddb8e:	d50d      	bpl.n	ddbac <mbedtls_x509_crt_info+0x510>
   ddb90:	4a51      	ldr	r2, [pc, #324]	; (ddcd8 <mbedtls_x509_crt_info+0x63c>)
   ddb92:	4621      	mov	r1, r4
   ddb94:	4628      	mov	r0, r5
   ddb96:	f007 fe2b 	bl	e57f0 <snprintf>
   ddb9a:	2800      	cmp	r0, #0
   ddb9c:	f6ff ad8b 	blt.w	dd6b6 <mbedtls_x509_crt_info+0x1a>
   ddba0:	4284      	cmp	r4, r0
   ddba2:	f67f ad88 	bls.w	dd6b6 <mbedtls_x509_crt_info+0x1a>
   ddba6:	4b3e      	ldr	r3, [pc, #248]	; (ddca0 <mbedtls_x509_crt_info+0x604>)
   ddba8:	1a24      	subs	r4, r4, r0
   ddbaa:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_CRL_SIGN,             "CRL Sign" );
   ddbac:	07b0      	lsls	r0, r6, #30
   ddbae:	d50d      	bpl.n	ddbcc <mbedtls_x509_crt_info+0x530>
   ddbb0:	4a4a      	ldr	r2, [pc, #296]	; (ddcdc <mbedtls_x509_crt_info+0x640>)
   ddbb2:	4621      	mov	r1, r4
   ddbb4:	4628      	mov	r0, r5
   ddbb6:	f007 fe1b 	bl	e57f0 <snprintf>
   ddbba:	2800      	cmp	r0, #0
   ddbbc:	f6ff ad7b 	blt.w	dd6b6 <mbedtls_x509_crt_info+0x1a>
   ddbc0:	4284      	cmp	r4, r0
   ddbc2:	f67f ad78 	bls.w	dd6b6 <mbedtls_x509_crt_info+0x1a>
   ddbc6:	4b36      	ldr	r3, [pc, #216]	; (ddca0 <mbedtls_x509_crt_info+0x604>)
   ddbc8:	1a24      	subs	r4, r4, r0
   ddbca:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_ENCIPHER_ONLY,        "Encipher Only" );
   ddbcc:	07f1      	lsls	r1, r6, #31
   ddbce:	d50d      	bpl.n	ddbec <mbedtls_x509_crt_info+0x550>
   ddbd0:	4a43      	ldr	r2, [pc, #268]	; (ddce0 <mbedtls_x509_crt_info+0x644>)
   ddbd2:	4621      	mov	r1, r4
   ddbd4:	4628      	mov	r0, r5
   ddbd6:	f007 fe0b 	bl	e57f0 <snprintf>
   ddbda:	2800      	cmp	r0, #0
   ddbdc:	f6ff ad6b 	blt.w	dd6b6 <mbedtls_x509_crt_info+0x1a>
   ddbe0:	4284      	cmp	r4, r0
   ddbe2:	f67f ad68 	bls.w	dd6b6 <mbedtls_x509_crt_info+0x1a>
   ddbe6:	4b2e      	ldr	r3, [pc, #184]	; (ddca0 <mbedtls_x509_crt_info+0x604>)
   ddbe8:	1a24      	subs	r4, r4, r0
   ddbea:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_DECIPHER_ONLY,        "Decipher Only" );
   ddbec:	0432      	lsls	r2, r6, #16
   ddbee:	d50c      	bpl.n	ddc0a <mbedtls_x509_crt_info+0x56e>
   ddbf0:	4a3c      	ldr	r2, [pc, #240]	; (ddce4 <mbedtls_x509_crt_info+0x648>)
   ddbf2:	4621      	mov	r1, r4
   ddbf4:	4628      	mov	r0, r5
   ddbf6:	f007 fdfb 	bl	e57f0 <snprintf>
   ddbfa:	2800      	cmp	r0, #0
   ddbfc:	f6ff ad5b 	blt.w	dd6b6 <mbedtls_x509_crt_info+0x1a>
   ddc00:	4284      	cmp	r4, r0
   ddc02:	f67f ad58 	bls.w	dd6b6 <mbedtls_x509_crt_info+0x1a>
   ddc06:	1a24      	subs	r4, r4, r0
   ddc08:	4405      	add	r5, r0
    if( crt->ext_types & MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE )
   ddc0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
   ddc0e:	051b      	lsls	r3, r3, #20
   ddc10:	d531      	bpl.n	ddc76 <mbedtls_x509_crt_info+0x5da>
        ret = mbedtls_snprintf( p, n, "\n%sext key usage     : ", prefix );
   ddc12:	4a35      	ldr	r2, [pc, #212]	; (ddce8 <mbedtls_x509_crt_info+0x64c>)
   ddc14:	464b      	mov	r3, r9
   ddc16:	4621      	mov	r1, r4
   ddc18:	4628      	mov	r0, r5
   ddc1a:	f007 fde9 	bl	e57f0 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   ddc1e:	2800      	cmp	r0, #0
   ddc20:	f6ff ad49 	blt.w	dd6b6 <mbedtls_x509_crt_info+0x1a>
   ddc24:	42a0      	cmp	r0, r4
   ddc26:	f4bf ad46 	bcs.w	dd6b6 <mbedtls_x509_crt_info+0x1a>
    const char *sep = "";
   ddc2a:	f8df b06c 	ldr.w	fp, [pc, #108]	; ddc98 <mbedtls_x509_crt_info+0x5fc>
            desc = "???";
   ddc2e:	f8df 80c0 	ldr.w	r8, [pc, #192]	; ddcf0 <mbedtls_x509_crt_info+0x654>
        ret = mbedtls_snprintf( p, n, "%s%s", sep, desc );
   ddc32:	f8df 90c0 	ldr.w	r9, [pc, #192]	; ddcf4 <mbedtls_x509_crt_info+0x658>
        sep = ", ";
   ddc36:	4e1a      	ldr	r6, [pc, #104]	; (ddca0 <mbedtls_x509_crt_info+0x604>)
        MBEDTLS_X509_SAFE_SNPRINTF;
   ddc38:	1a24      	subs	r4, r4, r0
   ddc3a:	4405      	add	r5, r0
        if( ( ret = x509_info_ext_key_usage( &p, &n,
   ddc3c:	f507 7784 	add.w	r7, r7, #264	; 0x108
        if( mbedtls_oid_get_extended_key_usage( &cur->buf, &desc ) != 0 )
   ddc40:	a906      	add	r1, sp, #24
   ddc42:	4638      	mov	r0, r7
   ddc44:	f7fc f8fe 	bl	d9e44 <mbedtls_oid_get_extended_key_usage>
   ddc48:	b108      	cbz	r0, ddc4e <mbedtls_x509_crt_info+0x5b2>
            desc = "???";
   ddc4a:	f8cd 8018 	str.w	r8, [sp, #24]
        ret = mbedtls_snprintf( p, n, "%s%s", sep, desc );
   ddc4e:	9b06      	ldr	r3, [sp, #24]
   ddc50:	9300      	str	r3, [sp, #0]
   ddc52:	464a      	mov	r2, r9
   ddc54:	465b      	mov	r3, fp
   ddc56:	4621      	mov	r1, r4
   ddc58:	4628      	mov	r0, r5
   ddc5a:	f007 fdc9 	bl	e57f0 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   ddc5e:	2800      	cmp	r0, #0
   ddc60:	f6ff ad29 	blt.w	dd6b6 <mbedtls_x509_crt_info+0x1a>
   ddc64:	42a0      	cmp	r0, r4
   ddc66:	f4bf ad26 	bcs.w	dd6b6 <mbedtls_x509_crt_info+0x1a>
        cur = cur->next;
   ddc6a:	68ff      	ldr	r7, [r7, #12]
        MBEDTLS_X509_SAFE_SNPRINTF;
   ddc6c:	1a24      	subs	r4, r4, r0
   ddc6e:	4405      	add	r5, r0
        sep = ", ";
   ddc70:	46b3      	mov	fp, r6
    while( cur != NULL )
   ddc72:	2f00      	cmp	r7, #0
   ddc74:	d1e4      	bne.n	ddc40 <mbedtls_x509_crt_info+0x5a4>
    ret = mbedtls_snprintf( p, n, "\n" );
   ddc76:	4a1d      	ldr	r2, [pc, #116]	; (ddcec <mbedtls_x509_crt_info+0x650>)
   ddc78:	4621      	mov	r1, r4
   ddc7a:	4628      	mov	r0, r5
   ddc7c:	f007 fdb8 	bl	e57f0 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
   ddc80:	2800      	cmp	r0, #0
   ddc82:	f6ff ad18 	blt.w	dd6b6 <mbedtls_x509_crt_info+0x1a>
   ddc86:	42a0      	cmp	r0, r4
   ddc88:	f4bf ad15 	bcs.w	dd6b6 <mbedtls_x509_crt_info+0x1a>
    return( (int) ( size - n ) );
   ddc8c:	1b00      	subs	r0, r0, r4
   ddc8e:	4450      	add	r0, sl
   ddc90:	e515      	b.n	dd6be <mbedtls_x509_crt_info+0x22>
   ddc92:	bf00      	nop
   ddc94:	000ec8ca 	.word	0x000ec8ca
   ddc98:	000eb611 	.word	0x000eb611
   ddc9c:	000ec8e2 	.word	0x000ec8e2
   ddca0:	000eb2ee 	.word	0x000eb2ee
   ddca4:	000ec8ef 	.word	0x000ec8ef
   ddca8:	000ec8fc 	.word	0x000ec8fc
   ddcac:	000ec904 	.word	0x000ec904
   ddcb0:	000ec915 	.word	0x000ec915
   ddcb4:	000ec920 	.word	0x000ec920
   ddcb8:	000ec929 	.word	0x000ec929
   ddcbc:	000ec934 	.word	0x000ec934
   ddcc0:	000ec948 	.word	0x000ec948
   ddcc4:	000ec960 	.word	0x000ec960
   ddcc8:	000ec974 	.word	0x000ec974
   ddccc:	000ec986 	.word	0x000ec986
   ddcd0:	000ec999 	.word	0x000ec999
   ddcd4:	000ec9ad 	.word	0x000ec9ad
   ddcd8:	000ec9bd 	.word	0x000ec9bd
   ddcdc:	000ec9cd 	.word	0x000ec9cd
   ddce0:	000ec9d8 	.word	0x000ec9d8
   ddce4:	000ec9e8 	.word	0x000ec9e8
   ddce8:	000ec9f8 	.word	0x000ec9f8
   ddcec:	000eb84d 	.word	0x000eb84d
   ddcf0:	000eb305 	.word	0x000eb305
   ddcf4:	000eca10 	.word	0x000eca10

000ddcf8 <mbedtls_x509_crt_check_key_usage>:
{
   ddcf8:	b510      	push	{r4, lr}
    if( ( crt->ext_types & MBEDTLS_X509_EXT_KEY_USAGE ) == 0 )
   ddcfa:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
{
   ddcfe:	4602      	mov	r2, r0
    if( ( crt->ext_types & MBEDTLS_X509_EXT_KEY_USAGE ) == 0 )
   ddd00:	f013 0004 	ands.w	r0, r3, #4
   ddd04:	d011      	beq.n	ddd2a <mbedtls_x509_crt_check_key_usage+0x32>
    if( ( ( crt->key_usage & ~may_mask ) & usage_must ) != usage_must )
   ddd06:	f8d2 2104 	ldr.w	r2, [r2, #260]	; 0x104
    usage_must = usage & ~may_mask;
   ddd0a:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
   ddd0e:	f023 0301 	bic.w	r3, r3, #1
    if( ( ( crt->key_usage & ~may_mask ) & usage_must ) != usage_must )
   ddd12:	4393      	bics	r3, r2
   ddd14:	d10a      	bne.n	ddd2c <mbedtls_x509_crt_check_key_usage+0x34>
    usage_may = usage & may_mask;
   ddd16:	f248 0301 	movw	r3, #32769	; 0x8001
   ddd1a:	ea01 0403 	and.w	r4, r1, r3
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
   ddd1e:	4804      	ldr	r0, [pc, #16]	; (ddd30 <mbedtls_x509_crt_check_key_usage+0x38>)
    if( ( ( crt->key_usage & may_mask ) | usage_may ) != usage_may )
   ddd20:	4311      	orrs	r1, r2
   ddd22:	4019      	ands	r1, r3
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
   ddd24:	428c      	cmp	r4, r1
   ddd26:	bf08      	it	eq
   ddd28:	2000      	moveq	r0, #0
}
   ddd2a:	bd10      	pop	{r4, pc}
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
   ddd2c:	4800      	ldr	r0, [pc, #0]	; (ddd30 <mbedtls_x509_crt_check_key_usage+0x38>)
   ddd2e:	e7fc      	b.n	ddd2a <mbedtls_x509_crt_check_key_usage+0x32>
   ddd30:	ffffd800 	.word	0xffffd800

000ddd34 <mbedtls_x509_crt_check_extended_key_usage>:
{
   ddd34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if( ( crt->ext_types & MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE ) == 0 )
   ddd38:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
{
   ddd3c:	4604      	mov	r4, r0
    if( ( crt->ext_types & MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE ) == 0 )
   ddd3e:	f413 6000 	ands.w	r0, r3, #2048	; 0x800
{
   ddd42:	460e      	mov	r6, r1
   ddd44:	4615      	mov	r5, r2
    if( ( crt->ext_types & MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE ) == 0 )
   ddd46:	d018      	beq.n	ddd7a <mbedtls_x509_crt_check_extended_key_usage+0x46>
        if( MBEDTLS_OID_CMP( MBEDTLS_OID_ANY_EXTENDED_KEY_USAGE, cur_oid ) == 0 )
   ddd48:	f8df 8038 	ldr.w	r8, [pc, #56]	; ddd84 <mbedtls_x509_crt_check_extended_key_usage+0x50>
    for( cur = &crt->ext_key_usage; cur != NULL; cur = cur->next )
   ddd4c:	f504 7484 	add.w	r4, r4, #264	; 0x108
        if( cur_oid->len == usage_len &&
   ddd50:	6867      	ldr	r7, [r4, #4]
   ddd52:	42af      	cmp	r7, r5
   ddd54:	d105      	bne.n	ddd62 <mbedtls_x509_crt_check_extended_key_usage+0x2e>
            memcmp( cur_oid->p, usage_oid, usage_len ) == 0 )
   ddd56:	68a0      	ldr	r0, [r4, #8]
   ddd58:	462a      	mov	r2, r5
   ddd5a:	4631      	mov	r1, r6
   ddd5c:	f00a fda8 	bl	e88b0 <memcmp>
        if( cur_oid->len == usage_len &&
   ddd60:	b158      	cbz	r0, ddd7a <mbedtls_x509_crt_check_extended_key_usage+0x46>
        if( MBEDTLS_OID_CMP( MBEDTLS_OID_ANY_EXTENDED_KEY_USAGE, cur_oid ) == 0 )
   ddd62:	2f04      	cmp	r7, #4
   ddd64:	d105      	bne.n	ddd72 <mbedtls_x509_crt_check_extended_key_usage+0x3e>
   ddd66:	68a1      	ldr	r1, [r4, #8]
   ddd68:	463a      	mov	r2, r7
   ddd6a:	4640      	mov	r0, r8
   ddd6c:	f00a fda0 	bl	e88b0 <memcmp>
   ddd70:	b118      	cbz	r0, ddd7a <mbedtls_x509_crt_check_extended_key_usage+0x46>
    for( cur = &crt->ext_key_usage; cur != NULL; cur = cur->next )
   ddd72:	68e4      	ldr	r4, [r4, #12]
   ddd74:	2c00      	cmp	r4, #0
   ddd76:	d1eb      	bne.n	ddd50 <mbedtls_x509_crt_check_extended_key_usage+0x1c>
    return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
   ddd78:	4801      	ldr	r0, [pc, #4]	; (ddd80 <mbedtls_x509_crt_check_extended_key_usage+0x4c>)
}
   ddd7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ddd7e:	bf00      	nop
   ddd80:	ffffd800 	.word	0xffffd800
   ddd84:	000eca4b 	.word	0x000eca4b

000ddd88 <mbedtls_x509_crt_is_revoked>:
{
   ddd88:	b538      	push	{r3, r4, r5, lr}
   ddd8a:	4605      	mov	r5, r0
    const mbedtls_x509_crl_entry *cur = &crl->entry;
   ddd8c:	f101 0484 	add.w	r4, r1, #132	; 0x84
    while( cur != NULL && cur->serial.len != 0 )
   ddd90:	6922      	ldr	r2, [r4, #16]
   ddd92:	b12a      	cbz	r2, ddda0 <mbedtls_x509_crt_is_revoked+0x18>
        if( crt->serial.len == cur->serial.len &&
   ddd94:	6a2b      	ldr	r3, [r5, #32]
   ddd96:	429a      	cmp	r2, r3
   ddd98:	d004      	beq.n	ddda4 <mbedtls_x509_crt_is_revoked+0x1c>
        cur = cur->next;
   ddd9a:	6be4      	ldr	r4, [r4, #60]	; 0x3c
    while( cur != NULL && cur->serial.len != 0 )
   ddd9c:	2c00      	cmp	r4, #0
   ddd9e:	d1f7      	bne.n	ddd90 <mbedtls_x509_crt_is_revoked+0x8>
    return( 0 );
   ddda0:	2000      	movs	r0, #0
}
   ddda2:	bd38      	pop	{r3, r4, r5, pc}
            memcmp( crt->serial.p, cur->serial.p, crt->serial.len ) == 0 )
   ddda4:	6961      	ldr	r1, [r4, #20]
   ddda6:	6a68      	ldr	r0, [r5, #36]	; 0x24
   ddda8:	f00a fd82 	bl	e88b0 <memcmp>
        if( crt->serial.len == cur->serial.len &&
   dddac:	2800      	cmp	r0, #0
   dddae:	d1f4      	bne.n	ddd9a <mbedtls_x509_crt_is_revoked+0x12>
            if( mbedtls_x509_time_is_past( &cur->revocation_date ) )
   dddb0:	f104 0018 	add.w	r0, r4, #24
   dddb4:	f7f9 f882 	bl	d6ebc <mbedtls_x509_time_is_past>
   dddb8:	2800      	cmp	r0, #0
   dddba:	d0ee      	beq.n	ddd9a <mbedtls_x509_crt_is_revoked+0x12>
                return( 1 );
   dddbc:	2001      	movs	r0, #1
   dddbe:	e7f0      	b.n	ddda2 <mbedtls_x509_crt_is_revoked+0x1a>

000dddc0 <mbedtls_x509_crt_verify_restartable>:
                     const mbedtls_x509_crt_profile *profile,
                     const char *cn, uint32_t *flags,
                     int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                     void *p_vrfy,
                     mbedtls_x509_crt_restart_ctx *rs_ctx )
{
   dddc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dddc4:	ed2d 8b04 	vpush	{d8-d9}
   dddc8:	b0b5      	sub	sp, #212	; 0xd4
   dddca:	469a      	mov	sl, r3
   dddcc:	920a      	str	r2, [sp, #40]	; 0x28
    int ret;
    mbedtls_pk_type_t pk_type;
    mbedtls_x509_crt_verify_chain ver_chain;
    uint32_t ee_flags;

    *flags = 0;
   dddce:	9a43      	ldr	r2, [sp, #268]	; 0x10c
{
   dddd0:	9d42      	ldr	r5, [sp, #264]	; 0x108
   dddd2:	9107      	str	r1, [sp, #28]
    *flags = 0;
   dddd4:	2300      	movs	r3, #0
   dddd6:	af1f      	add	r7, sp, #124	; 0x7c
{
   dddd8:	4604      	mov	r4, r0
    *flags = 0;
   dddda:	6013      	str	r3, [r2, #0]
        ver_chain->items[i].crt = NULL;
   ddddc:	4618      	mov	r0, r3
    *flags = 0;
   dddde:	463a      	mov	r2, r7
        ver_chain->items[i].flags = (uint32_t) -1;
   ddde0:	f04f 31ff 	mov.w	r1, #4294967295
    for( i = 0; i < MBEDTLS_X509_MAX_VERIFY_CHAIN_SIZE; i++ )
   ddde4:	3301      	adds	r3, #1
   ddde6:	2b0a      	cmp	r3, #10
        ver_chain->items[i].flags = (uint32_t) -1;
   ddde8:	e9c2 0100 	strd	r0, r1, [r2]
    for( i = 0; i < MBEDTLS_X509_MAX_VERIFY_CHAIN_SIZE; i++ )
   dddec:	f102 0208 	add.w	r2, r2, #8
   dddf0:	d1f8      	bne.n	ddde4 <mbedtls_x509_crt_verify_restartable+0x24>
    ee_flags = 0;
    x509_crt_verify_chain_reset( &ver_chain );

    if( profile == NULL )
   dddf2:	f1ba 0f00 	cmp.w	sl, #0
   dddf6:	f000 81f3 	beq.w	de1e0 <mbedtls_x509_crt_verify_restartable+0x420>
        ret = MBEDTLS_ERR_X509_BAD_INPUT_DATA;
        goto exit;
    }

    /* check name if requested */
    if( cn != NULL )
   dddfa:	b3ad      	cbz	r5, dde68 <mbedtls_x509_crt_verify_restartable+0xa8>
    size_t cn_len = strlen( cn );
   dddfc:	4628      	mov	r0, r5
   dddfe:	f00a fddb 	bl	e89b8 <strlen>
    if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
   dde02:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   dde06:	069b      	lsls	r3, r3, #26
    size_t cn_len = strlen( cn );
   dde08:	4606      	mov	r6, r0
    if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
   dde0a:	d511      	bpl.n	dde30 <mbedtls_x509_crt_verify_restartable+0x70>
        for( cur = &crt->subject_alt_names; cur != NULL; cur = cur->next )
   dde0c:	f104 08e8 	add.w	r8, r4, #232	; 0xe8
            if( x509_crt_check_cn( &cur->buf, cn, cn_len ) == 0 )
   dde10:	4632      	mov	r2, r6
   dde12:	4629      	mov	r1, r5
   dde14:	4640      	mov	r0, r8
   dde16:	f7ff fbb9 	bl	dd58c <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj>
   dde1a:	2800      	cmp	r0, #0
   dde1c:	f000 8092 	beq.w	ddf44 <mbedtls_x509_crt_verify_restartable+0x184>
        for( cur = &crt->subject_alt_names; cur != NULL; cur = cur->next )
   dde20:	f8d8 800c 	ldr.w	r8, [r8, #12]
   dde24:	f1b8 0f00 	cmp.w	r8, #0
   dde28:	d1f2      	bne.n	dde10 <mbedtls_x509_crt_verify_restartable+0x50>
            *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
   dde2a:	2304      	movs	r3, #4
   dde2c:	9305      	str	r3, [sp, #20]
   dde2e:	e01c      	b.n	dde6a <mbedtls_x509_crt_verify_restartable+0xaa>
            if( MBEDTLS_OID_CMP( MBEDTLS_OID_AT_CN, &name->oid ) == 0 &&
   dde30:	f8df 8410 	ldr.w	r8, [pc, #1040]	; de244 <mbedtls_x509_crt_verify_restartable+0x484>
        for( name = &crt->subject; name != NULL; name = name->next )
   dde34:	f104 096c 	add.w	r9, r4, #108	; 0x6c
            if( MBEDTLS_OID_CMP( MBEDTLS_OID_AT_CN, &name->oid ) == 0 &&
   dde38:	f8d9 2004 	ldr.w	r2, [r9, #4]
   dde3c:	2a03      	cmp	r2, #3
   dde3e:	d10d      	bne.n	dde5c <mbedtls_x509_crt_verify_restartable+0x9c>
   dde40:	f8d9 1008 	ldr.w	r1, [r9, #8]
   dde44:	4640      	mov	r0, r8
   dde46:	f00a fd33 	bl	e88b0 <memcmp>
   dde4a:	b938      	cbnz	r0, dde5c <mbedtls_x509_crt_verify_restartable+0x9c>
                x509_crt_check_cn( &name->val, cn, cn_len ) == 0 )
   dde4c:	4632      	mov	r2, r6
   dde4e:	4629      	mov	r1, r5
   dde50:	f109 000c 	add.w	r0, r9, #12
   dde54:	f7ff fb9a 	bl	dd58c <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj>
            if( MBEDTLS_OID_CMP( MBEDTLS_OID_AT_CN, &name->oid ) == 0 &&
   dde58:	2800      	cmp	r0, #0
   dde5a:	d073      	beq.n	ddf44 <mbedtls_x509_crt_verify_restartable+0x184>
        for( name = &crt->subject; name != NULL; name = name->next )
   dde5c:	f8d9 9018 	ldr.w	r9, [r9, #24]
   dde60:	f1b9 0f00 	cmp.w	r9, #0
   dde64:	d1e8      	bne.n	dde38 <mbedtls_x509_crt_verify_restartable+0x78>
   dde66:	e7e0      	b.n	dde2a <mbedtls_x509_crt_verify_restartable+0x6a>
    ee_flags = 0;
   dde68:	9505      	str	r5, [sp, #20]
        x509_crt_verify_name( crt, cn, &ee_flags );

    /* Check the type and size of the key */
    pk_type = mbedtls_pk_get_type( &crt->pk );
   dde6a:	f104 05bc 	add.w	r5, r4, #188	; 0xbc
   dde6e:	4628      	mov	r0, r5
   dde70:	f000 ff02 	bl	dec78 <mbedtls_pk_get_type>
   dde74:	f10a 0304 	add.w	r3, sl, #4
   dde78:	4601      	mov	r1, r0

    if( x509_profile_check_pk_alg( profile, pk_type ) != 0 )
   dde7a:	4618      	mov	r0, r3
   dde7c:	ee08 3a10 	vmov	s16, r3
   dde80:	f7ff fbb6 	bl	dd5f0 <_ZL25x509_profile_check_pk_algPK24mbedtls_x509_crt_profile17mbedtls_pk_type_t.isra.0>
   dde84:	b118      	cbz	r0, dde8e <mbedtls_x509_crt_verify_restartable+0xce>
        ee_flags |= MBEDTLS_X509_BADCERT_BAD_PK;
   dde86:	9b05      	ldr	r3, [sp, #20]
   dde88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   dde8c:	9305      	str	r3, [sp, #20]

    if( x509_profile_check_key( profile, &crt->pk ) != 0 )
   dde8e:	4629      	mov	r1, r5
   dde90:	4650      	mov	r0, sl
   dde92:	f7ff fbd9 	bl	dd648 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profilePK18mbedtls_pk_context>
   dde96:	b118      	cbz	r0, ddea0 <mbedtls_x509_crt_verify_restartable+0xe0>
        ee_flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
   dde98:	9b05      	ldr	r3, [sp, #20]
   dde9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   dde9e:	9305      	str	r3, [sp, #20]
    ver_chain->len = 0;
   ddea0:	f04f 0900 	mov.w	r9, #0
    self_cnt = 0;
   ddea4:	f8cd 9020 	str.w	r9, [sp, #32]
    child_is_trusted = 0;
   ddea8:	464d      	mov	r5, r9
        cur->flags = 0;
   ddeaa:	2300      	movs	r3, #0
        if( mbedtls_x509_time_is_past( &child->valid_to ) )
   ddeac:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
        cur->crt = child;
   ddeb0:	603c      	str	r4, [r7, #0]
        cur->flags = 0;
   ddeb2:	607b      	str	r3, [r7, #4]
        ver_chain->len++;
   ddeb4:	f109 0b01 	add.w	fp, r9, #1
        if( mbedtls_x509_time_is_past( &child->valid_to ) )
   ddeb8:	f7f9 f800 	bl	d6ebc <mbedtls_x509_time_is_past>
   ddebc:	b108      	cbz	r0, ddec2 <mbedtls_x509_crt_verify_restartable+0x102>
            *flags |= MBEDTLS_X509_BADCERT_EXPIRED;
   ddebe:	2301      	movs	r3, #1
   ddec0:	607b      	str	r3, [r7, #4]
        if( mbedtls_x509_time_is_future( &child->valid_from ) )
   ddec2:	f104 008c 	add.w	r0, r4, #140	; 0x8c
   ddec6:	f7f8 fffb 	bl	d6ec0 <mbedtls_x509_time_is_future>
   ddeca:	b118      	cbz	r0, dded4 <mbedtls_x509_crt_verify_restartable+0x114>
            *flags |= MBEDTLS_X509_BADCERT_FUTURE;
   ddecc:	687b      	ldr	r3, [r7, #4]
   ddece:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   dded2:	607b      	str	r3, [r7, #4]
        if( child_is_trusted )
   dded4:	2d00      	cmp	r5, #0
   dded6:	f040 818e 	bne.w	de1f6 <mbedtls_x509_crt_verify_restartable+0x436>
        if( x509_profile_check_md_alg( profile, child->sig_md ) != 0 )
   ddeda:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    if( md_alg == MBEDTLS_MD_NONE )
   ddede:	b13b      	cbz	r3, ddef0 <mbedtls_x509_crt_verify_restartable+0x130>
    if( ( profile->allowed_mds & MBEDTLS_X509_ID_FLAG( md_alg ) ) != 0 )
   ddee0:	2201      	movs	r2, #1
   ddee2:	3b01      	subs	r3, #1
   ddee4:	fa02 f303 	lsl.w	r3, r2, r3
   ddee8:	f8da 2000 	ldr.w	r2, [sl]
   ddeec:	4213      	tst	r3, r2
   ddeee:	d103      	bne.n	ddef8 <mbedtls_x509_crt_verify_restartable+0x138>
            *flags |= MBEDTLS_X509_BADCERT_BAD_MD;
   ddef0:	687b      	ldr	r3, [r7, #4]
   ddef2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   ddef6:	607b      	str	r3, [r7, #4]
        if( x509_profile_check_pk_alg( profile, child->sig_pk ) != 0 )
   ddef8:	f894 1129 	ldrb.w	r1, [r4, #297]	; 0x129
   ddefc:	ee18 0a10 	vmov	r0, s16
   ddf00:	f7ff fb76 	bl	dd5f0 <_ZL25x509_profile_check_pk_algPK24mbedtls_x509_crt_profile17mbedtls_pk_type_t.isra.0>
   ddf04:	b118      	cbz	r0, ddf0e <mbedtls_x509_crt_verify_restartable+0x14e>
            *flags |= MBEDTLS_X509_BADCERT_BAD_PK;
   ddf06:	687b      	ldr	r3, [r7, #4]
   ddf08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   ddf0c:	607b      	str	r3, [r7, #4]
        if( ver_chain->len == 1 &&
   ddf0e:	f1bb 0f01 	cmp.w	fp, #1
   ddf12:	d167      	bne.n	ddfe4 <mbedtls_x509_crt_verify_restartable+0x224>
    if( x509_name_cmp( &crt->issuer, &crt->subject ) != 0 )
   ddf14:	f104 016c 	add.w	r1, r4, #108	; 0x6c
   ddf18:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   ddf1c:	f7ff faf6 	bl	dd50c <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_>
   ddf20:	9e07      	ldr	r6, [sp, #28]
   ddf22:	b988      	cbnz	r0, ddf48 <mbedtls_x509_crt_verify_restartable+0x188>
    for( cur = trust_ca; cur != NULL; cur = cur->next )
   ddf24:	2e00      	cmp	r6, #0
   ddf26:	d05d      	beq.n	ddfe4 <mbedtls_x509_crt_verify_restartable+0x224>
        if( crt->raw.len == cur->raw.len &&
   ddf28:	6862      	ldr	r2, [r4, #4]
   ddf2a:	6873      	ldr	r3, [r6, #4]
   ddf2c:	429a      	cmp	r2, r3
   ddf2e:	d106      	bne.n	ddf3e <mbedtls_x509_crt_verify_restartable+0x17e>
            memcmp( crt->raw.p, cur->raw.p, crt->raw.len ) == 0 )
   ddf30:	68b1      	ldr	r1, [r6, #8]
   ddf32:	68a0      	ldr	r0, [r4, #8]
   ddf34:	f00a fcbc 	bl	e88b0 <memcmp>
        if( crt->raw.len == cur->raw.len &&
   ddf38:	2800      	cmp	r0, #0
   ddf3a:	f000 815c 	beq.w	de1f6 <mbedtls_x509_crt_verify_restartable+0x436>
    for( cur = trust_ca; cur != NULL; cur = cur->next )
   ddf3e:	f8d6 6130 	ldr.w	r6, [r6, #304]	; 0x130
   ddf42:	e7ef      	b.n	ddf24 <mbedtls_x509_crt_verify_restartable+0x164>
    ee_flags = 0;
   ddf44:	9005      	str	r0, [sp, #20]
   ddf46:	e790      	b.n	dde6a <mbedtls_x509_crt_verify_restartable+0xaa>
   ddf48:	f8cd b018 	str.w	fp, [sp, #24]
    if( x509_name_cmp( &child->issuer, &parent->subject ) != 0 )
   ddf4c:	f104 034c 	add.w	r3, r4, #76	; 0x4c
   ddf50:	ee09 3a90 	vmov	s19, r3
   ddf54:	2300      	movs	r3, #0
   ddf56:	9309      	str	r3, [sp, #36]	; 0x24
   ddf58:	4698      	mov	r8, r3
    for( parent = candidates; parent != NULL; parent = parent->next )
   ddf5a:	2e00      	cmp	r6, #0
   ddf5c:	f000 8096 	beq.w	de08c <mbedtls_x509_crt_verify_restartable+0x2cc>
    if( x509_name_cmp( &child->issuer, &parent->subject ) != 0 )
   ddf60:	ee19 0a90 	vmov	r0, s19
   ddf64:	f106 016c 	add.w	r1, r6, #108	; 0x6c
   ddf68:	f7ff fad0 	bl	dd50c <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_>
   ddf6c:	2800      	cmp	r0, #0
   ddf6e:	d136      	bne.n	ddfde <mbedtls_x509_crt_verify_restartable+0x21e>
    if( top && parent->version < 3 )
   ddf70:	9b06      	ldr	r3, [sp, #24]
   ddf72:	b113      	cbz	r3, ddf7a <mbedtls_x509_crt_verify_restartable+0x1ba>
   ddf74:	69b3      	ldr	r3, [r6, #24]
   ddf76:	2b02      	cmp	r3, #2
   ddf78:	dd07      	ble.n	ddf8a <mbedtls_x509_crt_verify_restartable+0x1ca>
    if( need_ca_bit && ! parent->ca_istrue )
   ddf7a:	f8d6 30fc 	ldr.w	r3, [r6, #252]	; 0xfc
   ddf7e:	b373      	cbz	r3, ddfde <mbedtls_x509_crt_verify_restartable+0x21e>
        mbedtls_x509_crt_check_key_usage( parent, MBEDTLS_X509_KU_KEY_CERT_SIGN ) != 0 )
   ddf80:	2104      	movs	r1, #4
   ddf82:	4630      	mov	r0, r6
   ddf84:	f7ff feb8 	bl	ddcf8 <mbedtls_x509_crt_check_key_usage>
    if( need_ca_bit &&
   ddf88:	bb48      	cbnz	r0, ddfde <mbedtls_x509_crt_verify_restartable+0x21e>
        if( parent->max_pathlen > 0 &&
   ddf8a:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
   ddf8e:	2b00      	cmp	r3, #0
   ddf90:	dd04      	ble.n	ddf9c <mbedtls_x509_crt_verify_restartable+0x1dc>
            (size_t) parent->max_pathlen < 1 + path_cnt - self_cnt )
   ddf92:	9a08      	ldr	r2, [sp, #32]
   ddf94:	ebab 0202 	sub.w	r2, fp, r2
        if( parent->max_pathlen > 0 &&
   ddf98:	4293      	cmp	r3, r2
   ddf9a:	d320      	bcc.n	ddfde <mbedtls_x509_crt_verify_restartable+0x21e>
    md_info = mbedtls_md_info_from_type( child->sig_md );
   ddf9c:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
   ddfa0:	f7fe fe94 	bl	dcccc <mbedtls_md_info_from_type>
    if( mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash ) != 0 )
   ddfa4:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
   ddfa8:	ab0f      	add	r3, sp, #60	; 0x3c
    md_info = mbedtls_md_info_from_type( child->sig_md );
   ddfaa:	ee08 0a90 	vmov	s17, r0
    if( mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash ) != 0 )
   ddfae:	f7fe fef7 	bl	dcda0 <mbedtls_md>
   ddfb2:	b1d8      	cbz	r0, ddfec <mbedtls_x509_crt_verify_restartable+0x22c>
        return( -1 );
   ddfb4:	f04f 30ff 	mov.w	r0, #4294967295
        if( top && ! signature_is_good )
   ddfb8:	9a06      	ldr	r2, [sp, #24]
        signature_is_good = ret == 0;
   ddfba:	fab0 f380 	clz	r3, r0
   ddfbe:	095b      	lsrs	r3, r3, #5
        if( top && ! signature_is_good )
   ddfc0:	b102      	cbz	r2, ddfc4 <mbedtls_x509_crt_verify_restartable+0x204>
   ddfc2:	b960      	cbnz	r0, ddfde <mbedtls_x509_crt_verify_restartable+0x21e>
        if( mbedtls_x509_time_is_past( &parent->valid_to ) ||
   ddfc4:	f106 00a4 	add.w	r0, r6, #164	; 0xa4
   ddfc8:	930b      	str	r3, [sp, #44]	; 0x2c
   ddfca:	f7f8 ff77 	bl	d6ebc <mbedtls_x509_time_is_past>
   ddfce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   ddfd0:	2800      	cmp	r0, #0
   ddfd2:	d034      	beq.n	de03e <mbedtls_x509_crt_verify_restartable+0x27e>
            if( fallback_parent == NULL )
   ddfd4:	f1b8 0f00 	cmp.w	r8, #0
   ddfd8:	d101      	bne.n	ddfde <mbedtls_x509_crt_verify_restartable+0x21e>
        signature_is_good = ret == 0;
   ddfda:	9309      	str	r3, [sp, #36]	; 0x24
            if( fallback_parent == NULL )
   ddfdc:	46b0      	mov	r8, r6
    for( parent = candidates; parent != NULL; parent = parent->next )
   ddfde:	f8d6 6130 	ldr.w	r6, [r6, #304]	; 0x130
   ddfe2:	e7ba      	b.n	ddf5a <mbedtls_x509_crt_verify_restartable+0x19a>
   ddfe4:	2301      	movs	r3, #1
   ddfe6:	9e07      	ldr	r6, [sp, #28]
   ddfe8:	9306      	str	r3, [sp, #24]
   ddfea:	e7af      	b.n	ddf4c <mbedtls_x509_crt_verify_restartable+0x18c>
    if( ! mbedtls_pk_can_do( &parent->pk, child->sig_pk ) )
   ddfec:	f106 02bc 	add.w	r2, r6, #188	; 0xbc
   ddff0:	f894 1129 	ldrb.w	r1, [r4, #297]	; 0x129
   ddff4:	920d      	str	r2, [sp, #52]	; 0x34
   ddff6:	4610      	mov	r0, r2
   ddff8:	f000 fd54 	bl	deaa4 <mbedtls_pk_can_do>
   ddffc:	2800      	cmp	r0, #0
   ddffe:	d0d9      	beq.n	ddfb4 <mbedtls_x509_crt_verify_restartable+0x1f4>
    return( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
   de000:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
   de004:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
   de008:	910c      	str	r1, [sp, #48]	; 0x30
   de00a:	ee09 3a10 	vmov	s18, r3
                child->sig_md, hash, mbedtls_md_get_size( md_info ),
   de00e:	ee18 0a90 	vmov	r0, s17
   de012:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
   de016:	930b      	str	r3, [sp, #44]	; 0x2c
   de018:	f7fe ff92 	bl	dcf40 <mbedtls_md_get_size>
    return( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
   de01c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   de020:	9303      	str	r3, [sp, #12]
   de022:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   de026:	e9cd 0301 	strd	r0, r3, [sp, #4]
   de02a:	ab0f      	add	r3, sp, #60	; 0x3c
   de02c:	9300      	str	r3, [sp, #0]
   de02e:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
   de032:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   de034:	ee19 0a10 	vmov	r0, s18
   de038:	f000 fdbc 	bl	debb4 <mbedtls_pk_verify_ext>
                child->sig.p, child->sig.len ) );
   de03c:	e7bc      	b.n	ddfb8 <mbedtls_x509_crt_verify_restartable+0x1f8>
            mbedtls_x509_time_is_future( &parent->valid_from ) )
   de03e:	f106 008c 	add.w	r0, r6, #140	; 0x8c
   de042:	930b      	str	r3, [sp, #44]	; 0x2c
   de044:	f7f8 ff3c 	bl	d6ec0 <mbedtls_x509_time_is_future>
        if( mbedtls_x509_time_is_past( &parent->valid_to ) ||
   de048:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   de04a:	2800      	cmp	r0, #0
   de04c:	d1c2      	bne.n	ddfd4 <mbedtls_x509_crt_verify_restartable+0x214>
   de04e:	46b0      	mov	r8, r6
        if( ver_chain->len != 1 &&
   de050:	f1bb 0f01 	cmp.w	fp, #1
   de054:	d027      	beq.n	de0a6 <mbedtls_x509_crt_verify_restartable+0x2e6>
            x509_name_cmp( &child->issuer, &child->subject ) == 0 )
   de056:	f104 016c 	add.w	r1, r4, #108	; 0x6c
   de05a:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   de05e:	9309      	str	r3, [sp, #36]	; 0x24
   de060:	f7ff fa54 	bl	dd50c <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_>
        if( ver_chain->len != 1 &&
   de064:	9b09      	ldr	r3, [sp, #36]	; 0x24
   de066:	b910      	cbnz	r0, de06e <mbedtls_x509_crt_verify_restartable+0x2ae>
            self_cnt++;
   de068:	9a08      	ldr	r2, [sp, #32]
   de06a:	3201      	adds	r2, #1
   de06c:	9208      	str	r2, [sp, #32]
        if( ! parent_is_trusted &&
   de06e:	9a06      	ldr	r2, [sp, #24]
   de070:	b9ca      	cbnz	r2, de0a6 <mbedtls_x509_crt_verify_restartable+0x2e6>
   de072:	f1bb 0f08 	cmp.w	fp, #8
   de076:	d916      	bls.n	de0a6 <mbedtls_x509_crt_verify_restartable+0x2e6>
            return( MBEDTLS_ERR_X509_FATAL_ERROR );
   de078:	486f      	ldr	r0, [pc, #444]	; (de238 <mbedtls_x509_crt_verify_restartable+0x478>)
    if( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED )
        ret = MBEDTLS_ERR_X509_FATAL_ERROR;

    if( ret != 0 )
    {
        *flags = (uint32_t) -1;
   de07a:	9a43      	ldr	r2, [sp, #268]	; 0x10c
   de07c:	f04f 33ff 	mov.w	r3, #4294967295
   de080:	6013      	str	r3, [r2, #0]

    if( *flags != 0 )
        return( MBEDTLS_ERR_X509_CERT_VERIFY_FAILED );

    return( 0 );
}
   de082:	b035      	add	sp, #212	; 0xd4
   de084:	ecbd 8b04 	vpop	{d8-d9}
   de088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( *parent != NULL || *parent_is_trusted == 0 )
   de08c:	f1b8 0f00 	cmp.w	r8, #0
   de090:	f040 80cf 	bne.w	de232 <mbedtls_x509_crt_verify_restartable+0x472>
   de094:	9b06      	ldr	r3, [sp, #24]
   de096:	2b00      	cmp	r3, #0
   de098:	f000 80a4 	beq.w	de1e4 <mbedtls_x509_crt_verify_restartable+0x424>
        search_list = *parent_is_trusted ? trust_ca : child->next;
   de09c:	f8d4 6130 	ldr.w	r6, [r4, #304]	; 0x130
   de0a0:	f8cd 8018 	str.w	r8, [sp, #24]
   de0a4:	e756      	b.n	ddf54 <mbedtls_x509_crt_verify_restartable+0x194>
        if( ! signature_is_good )
   de0a6:	b91b      	cbnz	r3, de0b0 <mbedtls_x509_crt_verify_restartable+0x2f0>
            *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
   de0a8:	687b      	ldr	r3, [r7, #4]
   de0aa:	f043 0308 	orr.w	r3, r3, #8
   de0ae:	607b      	str	r3, [r7, #4]
        if( x509_profile_check_key( profile, &parent->pk ) != 0 )
   de0b0:	f108 09bc 	add.w	r9, r8, #188	; 0xbc
   de0b4:	4649      	mov	r1, r9
   de0b6:	4650      	mov	r0, sl
   de0b8:	f7ff fac6 	bl	dd648 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profilePK18mbedtls_pk_context>
   de0bc:	b118      	cbz	r0, de0c6 <mbedtls_x509_crt_verify_restartable+0x306>
            *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
   de0be:	687b      	ldr	r3, [r7, #4]
   de0c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   de0c4:	607b      	str	r3, [r7, #4]
            x509_name_cmp( &crl_list->issuer, &ca->subject ) != 0 )
   de0c6:	f108 036c 	add.w	r3, r8, #108	; 0x6c
            if( fallback_parent == NULL )
   de0ca:	9e0a      	ldr	r6, [sp, #40]	; 0x28
            x509_name_cmp( &crl_list->issuer, &ca->subject ) != 0 )
   de0cc:	ee09 3a90 	vmov	s19, r3
    while( crl_list != NULL )
   de0d0:	b196      	cbz	r6, de0f8 <mbedtls_x509_crt_verify_restartable+0x338>
        if( crl_list->version == 0 ||
   de0d2:	69b3      	ldr	r3, [r6, #24]
   de0d4:	b133      	cbz	r3, de0e4 <mbedtls_x509_crt_verify_restartable+0x324>
            x509_name_cmp( &crl_list->issuer, &ca->subject ) != 0 )
   de0d6:	ee19 1a90 	vmov	r1, s19
   de0da:	f106 0034 	add.w	r0, r6, #52	; 0x34
   de0de:	f7ff fa15 	bl	dd50c <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_>
        if( crl_list->version == 0 ||
   de0e2:	b110      	cbz	r0, de0ea <mbedtls_x509_crt_verify_restartable+0x32a>
        crl_list = crl_list->next;
   de0e4:	f8d6 60f0 	ldr.w	r6, [r6, #240]	; 0xf0
   de0e8:	e7f2      	b.n	de0d0 <mbedtls_x509_crt_verify_restartable+0x310>
        if( mbedtls_x509_crt_check_key_usage( ca,
   de0ea:	2102      	movs	r1, #2
   de0ec:	4640      	mov	r0, r8
   de0ee:	f7ff fe03 	bl	ddcf8 <mbedtls_x509_crt_check_key_usage>
   de0f2:	b148      	cbz	r0, de108 <mbedtls_x509_crt_verify_restartable+0x348>
            flags |= MBEDTLS_X509_BADCRL_NOT_TRUSTED;
   de0f4:	f045 0510 	orr.w	r5, r5, #16
        *flags |= x509_crt_verifycrl( child, parent, ca_crl, profile );
   de0f8:	687b      	ldr	r3, [r7, #4]
   de0fa:	431d      	orrs	r5, r3
   de0fc:	607d      	str	r5, [r7, #4]
        ver_chain->len++;
   de0fe:	46d9      	mov	r9, fp
        cur = &ver_chain->items[ver_chain->len];
   de100:	9d06      	ldr	r5, [sp, #24]
   de102:	3708      	adds	r7, #8
   de104:	4644      	mov	r4, r8
   de106:	e6d0      	b.n	ddeaa <mbedtls_x509_crt_verify_restartable+0xea>
        if( x509_profile_check_md_alg( profile, crl_list->sig_md ) != 0 )
   de108:	f896 20e8 	ldrb.w	r2, [r6, #232]	; 0xe8
    if( md_alg == MBEDTLS_MD_NONE )
   de10c:	b132      	cbz	r2, de11c <mbedtls_x509_crt_verify_restartable+0x35c>
    if( ( profile->allowed_mds & MBEDTLS_X509_ID_FLAG( md_alg ) ) != 0 )
   de10e:	1e51      	subs	r1, r2, #1
   de110:	2301      	movs	r3, #1
   de112:	408b      	lsls	r3, r1
   de114:	f8da 1000 	ldr.w	r1, [sl]
   de118:	420b      	tst	r3, r1
   de11a:	d101      	bne.n	de120 <mbedtls_x509_crt_verify_restartable+0x360>
            flags |= MBEDTLS_X509_BADCRL_BAD_MD;
   de11c:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
        if( x509_profile_check_pk_alg( profile, crl_list->sig_pk ) != 0 )
   de120:	f896 10e9 	ldrb.w	r1, [r6, #233]	; 0xe9
   de124:	ee18 0a10 	vmov	r0, s16
   de128:	f7ff fa62 	bl	dd5f0 <_ZL25x509_profile_check_pk_algPK24mbedtls_x509_crt_profile17mbedtls_pk_type_t.isra.0>
   de12c:	b108      	cbz	r0, de132 <mbedtls_x509_crt_verify_restartable+0x372>
            flags |= MBEDTLS_X509_BADCRL_BAD_PK;
   de12e:	f445 2580 	orr.w	r5, r5, #262144	; 0x40000
        md_info = mbedtls_md_info_from_type( crl_list->sig_md );
   de132:	4610      	mov	r0, r2
   de134:	f7fe fdca 	bl	dcccc <mbedtls_md_info_from_type>
        if( mbedtls_md( md_info, crl_list->tbs.p, crl_list->tbs.len, hash ) != 0 )
   de138:	e9d6 2104 	ldrd	r2, r1, [r6, #16]
   de13c:	ab0f      	add	r3, sp, #60	; 0x3c
        md_info = mbedtls_md_info_from_type( crl_list->sig_md );
   de13e:	ee08 0a90 	vmov	s17, r0
        if( mbedtls_md( md_info, crl_list->tbs.p, crl_list->tbs.len, hash ) != 0 )
   de142:	f7fe fe2d 	bl	dcda0 <mbedtls_md>
   de146:	2800      	cmp	r0, #0
   de148:	d1d4      	bne.n	de0f4 <mbedtls_x509_crt_verify_restartable+0x334>
        if( x509_profile_check_key( profile, &ca->pk ) != 0 )
   de14a:	4649      	mov	r1, r9
   de14c:	4650      	mov	r0, sl
   de14e:	f7ff fa7b 	bl	dd648 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profilePK18mbedtls_pk_context>
   de152:	b108      	cbz	r0, de158 <mbedtls_x509_crt_verify_restartable+0x398>
            flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
   de154:	f445 3580 	orr.w	r5, r5, #65536	; 0x10000
        if( mbedtls_pk_verify_ext( crl_list->sig_pk, crl_list->sig_opts, &ca->pk,
   de158:	f896 30e9 	ldrb.w	r3, [r6, #233]	; 0xe9
   de15c:	f8d6 10ec 	ldr.w	r1, [r6, #236]	; 0xec
   de160:	910b      	str	r1, [sp, #44]	; 0x2c
   de162:	ee09 3a10 	vmov	s18, r3
                           crl_list->sig_md, hash, mbedtls_md_get_size( md_info ),
   de166:	ee18 0a90 	vmov	r0, s17
        if( mbedtls_pk_verify_ext( crl_list->sig_pk, crl_list->sig_opts, &ca->pk,
   de16a:	f896 30e8 	ldrb.w	r3, [r6, #232]	; 0xe8
   de16e:	9309      	str	r3, [sp, #36]	; 0x24
                           crl_list->sig_md, hash, mbedtls_md_get_size( md_info ),
   de170:	f7fe fee6 	bl	dcf40 <mbedtls_md_get_size>
        if( mbedtls_pk_verify_ext( crl_list->sig_pk, crl_list->sig_opts, &ca->pk,
   de174:	f8d6 20e0 	ldr.w	r2, [r6, #224]	; 0xe0
   de178:	9203      	str	r2, [sp, #12]
   de17a:	f8d6 20e4 	ldr.w	r2, [r6, #228]	; 0xe4
   de17e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   de180:	ab0f      	add	r3, sp, #60	; 0x3c
   de182:	e9cd 0201 	strd	r0, r2, [sp, #4]
   de186:	9300      	str	r3, [sp, #0]
   de188:	ee19 0a10 	vmov	r0, s18
   de18c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   de18e:	464a      	mov	r2, r9
   de190:	f000 fd10 	bl	debb4 <mbedtls_pk_verify_ext>
   de194:	2800      	cmp	r0, #0
   de196:	d1ad      	bne.n	de0f4 <mbedtls_x509_crt_verify_restartable+0x334>
        if( mbedtls_x509_time_is_past( &crl_list->next_update ) )
   de198:	f106 006c 	add.w	r0, r6, #108	; 0x6c
   de19c:	f7f8 fe8e 	bl	d6ebc <mbedtls_x509_time_is_past>
   de1a0:	b108      	cbz	r0, de1a6 <mbedtls_x509_crt_verify_restartable+0x3e6>
            flags |= MBEDTLS_X509_BADCRL_EXPIRED;
   de1a2:	f045 0520 	orr.w	r5, r5, #32
        if( mbedtls_x509_time_is_future( &crl_list->this_update ) )
   de1a6:	f106 0054 	add.w	r0, r6, #84	; 0x54
   de1aa:	f7f8 fe89 	bl	d6ec0 <mbedtls_x509_time_is_future>
   de1ae:	b108      	cbz	r0, de1b4 <mbedtls_x509_crt_verify_restartable+0x3f4>
            flags |= MBEDTLS_X509_BADCRL_FUTURE;
   de1b0:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
        if( mbedtls_x509_crt_is_revoked( crt, crl_list ) )
   de1b4:	4631      	mov	r1, r6
   de1b6:	4620      	mov	r0, r4
   de1b8:	f7ff fde6 	bl	ddd88 <mbedtls_x509_crt_is_revoked>
   de1bc:	2800      	cmp	r0, #0
   de1be:	d091      	beq.n	de0e4 <mbedtls_x509_crt_verify_restartable+0x324>
            flags |= MBEDTLS_X509_BADCERT_REVOKED;
   de1c0:	f045 0502 	orr.w	r5, r5, #2
            break;
   de1c4:	e798      	b.n	de0f8 <mbedtls_x509_crt_verify_restartable+0x338>
            if( ( ret = f_vrfy( p_vrfy, cur->crt, (int) i-1, &cur_flags ) ) != 0 )
   de1c6:	e9dd 5044 	ldrd	r5, r0, [sp, #272]	; 0x110
   de1ca:	f854 1c08 	ldr.w	r1, [r4, #-8]
   de1ce:	ab0f      	add	r3, sp, #60	; 0x3c
   de1d0:	465a      	mov	r2, fp
   de1d2:	47a8      	blx	r5
   de1d4:	b1f0      	cbz	r0, de214 <mbedtls_x509_crt_verify_restartable+0x454>
    if( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED )
   de1d6:	f510 5f1c 	cmn.w	r0, #9984	; 0x2700
   de1da:	f43f af4d 	beq.w	de078 <mbedtls_x509_crt_verify_restartable+0x2b8>
   de1de:	e74c      	b.n	de07a <mbedtls_x509_crt_verify_restartable+0x2ba>
        ret = MBEDTLS_ERR_X509_BAD_INPUT_DATA;
   de1e0:	4816      	ldr	r0, [pc, #88]	; (de23c <mbedtls_x509_crt_verify_restartable+0x47c>)
   de1e2:	e74a      	b.n	de07a <mbedtls_x509_crt_verify_restartable+0x2ba>
            *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
   de1e4:	ab34      	add	r3, sp, #208	; 0xd0
   de1e6:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   de1ea:	f859 3c50 	ldr.w	r3, [r9, #-80]
   de1ee:	f043 0308 	orr.w	r3, r3, #8
   de1f2:	f849 3c50 	str.w	r3, [r9, #-80]
    ver_chain.items[0].flags |= ee_flags;
   de1f6:	9820      	ldr	r0, [sp, #128]	; 0x80
   de1f8:	9b05      	ldr	r3, [sp, #20]
   de1fa:	4318      	orrs	r0, r3
   de1fc:	ab1f      	add	r3, sp, #124	; 0x7c
   de1fe:	9020      	str	r0, [sp, #128]	; 0x80
    for( i = ver_chain->len; i != 0; --i )
   de200:	eb03 04cb 	add.w	r4, r3, fp, lsl #3
        cur_flags = cur->flags;
   de204:	f854 3c04 	ldr.w	r3, [r4, #-4]
   de208:	930f      	str	r3, [sp, #60]	; 0x3c
        if( NULL != f_vrfy )
   de20a:	9b44      	ldr	r3, [sp, #272]	; 0x110
        cur = &ver_chain->items[i-1];
   de20c:	f10b 3bff 	add.w	fp, fp, #4294967295
        if( NULL != f_vrfy )
   de210:	2b00      	cmp	r3, #0
   de212:	d1d8      	bne.n	de1c6 <mbedtls_x509_crt_verify_restartable+0x406>
        *flags |= cur_flags;
   de214:	9b43      	ldr	r3, [sp, #268]	; 0x10c
   de216:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   de218:	681b      	ldr	r3, [r3, #0]
   de21a:	4313      	orrs	r3, r2
   de21c:	9a43      	ldr	r2, [sp, #268]	; 0x10c
   de21e:	3c08      	subs	r4, #8
   de220:	6013      	str	r3, [r2, #0]
    for( i = ver_chain->len; i != 0; --i )
   de222:	f1bb 0f00 	cmp.w	fp, #0
   de226:	d1ed      	bne.n	de204 <mbedtls_x509_crt_verify_restartable+0x444>
        return( MBEDTLS_ERR_X509_CERT_VERIFY_FAILED );
   de228:	2b00      	cmp	r3, #0
   de22a:	4805      	ldr	r0, [pc, #20]	; (de240 <mbedtls_x509_crt_verify_restartable+0x480>)
   de22c:	bf08      	it	eq
   de22e:	2000      	moveq	r0, #0
   de230:	e727      	b.n	de082 <mbedtls_x509_crt_verify_restartable+0x2c2>
   de232:	9b09      	ldr	r3, [sp, #36]	; 0x24
   de234:	e70c      	b.n	de050 <mbedtls_x509_crt_verify_restartable+0x290>
   de236:	bf00      	nop
   de238:	ffffd000 	.word	0xffffd000
   de23c:	ffffd800 	.word	0xffffd800
   de240:	ffffd900 	.word	0xffffd900
   de244:	000eba41 	.word	0x000eba41

000de248 <mbedtls_x509_crt_init>:
/*
 * Initialize a certificate chain
 */
void mbedtls_x509_crt_init( mbedtls_x509_crt *crt )
{
    memset( crt, 0, sizeof(mbedtls_x509_crt) );
   de248:	f44f 729a 	mov.w	r2, #308	; 0x134
   de24c:	2100      	movs	r1, #0
   de24e:	f00a bb65 	b.w	e891c <memset>

000de252 <mbedtls_x509_crt_free>:

/*
 * Unallocate all certificate data
 */
void mbedtls_x509_crt_free( mbedtls_x509_crt *crt )
{
   de252:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    mbedtls_x509_name *name_cur;
    mbedtls_x509_name *name_prv;
    mbedtls_x509_sequence *seq_cur;
    mbedtls_x509_sequence *seq_prv;

    if( crt == NULL )
   de254:	4605      	mov	r5, r0
   de256:	2800      	cmp	r0, #0
   de258:	d057      	beq.n	de30a <mbedtls_x509_crt_free+0xb8>
   de25a:	4604      	mov	r4, r0
        return;

    do
    {
        mbedtls_pk_free( &cert_cur->pk );
   de25c:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   de260:	f000 fbee 	bl	dea40 <mbedtls_pk_free>

#if defined(MBEDTLS_X509_RSASSA_PSS_SUPPORT)
        mbedtls_free( cert_cur->sig_opts );
   de264:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
   de268:	f007 faaa 	bl	e57c0 <free>
#endif

        name_cur = cert_cur->issuer.next;
   de26c:	6e66      	ldr	r6, [r4, #100]	; 0x64
        while( name_cur != NULL )
   de26e:	b14e      	cbz	r6, de284 <mbedtls_x509_crt_free+0x32>
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
            mbedtls_platform_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
   de270:	4630      	mov	r0, r6
            name_cur = name_cur->next;
   de272:	69b7      	ldr	r7, [r6, #24]
            mbedtls_platform_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
   de274:	2120      	movs	r1, #32
   de276:	f7fc feb1 	bl	dafdc <mbedtls_platform_zeroize>
            mbedtls_free( name_prv );
   de27a:	4630      	mov	r0, r6
   de27c:	f007 faa0 	bl	e57c0 <free>
            name_cur = name_cur->next;
   de280:	463e      	mov	r6, r7
        while( name_cur != NULL )
   de282:	e7f4      	b.n	de26e <mbedtls_x509_crt_free+0x1c>
        }

        name_cur = cert_cur->subject.next;
   de284:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
        while( name_cur != NULL )
   de288:	b14e      	cbz	r6, de29e <mbedtls_x509_crt_free+0x4c>
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
            mbedtls_platform_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
   de28a:	4630      	mov	r0, r6
            name_cur = name_cur->next;
   de28c:	69b7      	ldr	r7, [r6, #24]
            mbedtls_platform_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
   de28e:	2120      	movs	r1, #32
   de290:	f7fc fea4 	bl	dafdc <mbedtls_platform_zeroize>
            mbedtls_free( name_prv );
   de294:	4630      	mov	r0, r6
   de296:	f007 fa93 	bl	e57c0 <free>
            name_cur = name_cur->next;
   de29a:	463e      	mov	r6, r7
        while( name_cur != NULL )
   de29c:	e7f4      	b.n	de288 <mbedtls_x509_crt_free+0x36>
        }

        seq_cur = cert_cur->ext_key_usage.next;
   de29e:	f8d4 6114 	ldr.w	r6, [r4, #276]	; 0x114
        while( seq_cur != NULL )
   de2a2:	b14e      	cbz	r6, de2b8 <mbedtls_x509_crt_free+0x66>
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
            mbedtls_platform_zeroize( seq_prv,
   de2a4:	4630      	mov	r0, r6
            seq_cur = seq_cur->next;
   de2a6:	68f7      	ldr	r7, [r6, #12]
            mbedtls_platform_zeroize( seq_prv,
   de2a8:	2110      	movs	r1, #16
   de2aa:	f7fc fe97 	bl	dafdc <mbedtls_platform_zeroize>
                                      sizeof( mbedtls_x509_sequence ) );
            mbedtls_free( seq_prv );
   de2ae:	4630      	mov	r0, r6
   de2b0:	f007 fa86 	bl	e57c0 <free>
            seq_cur = seq_cur->next;
   de2b4:	463e      	mov	r6, r7
        while( seq_cur != NULL )
   de2b6:	e7f4      	b.n	de2a2 <mbedtls_x509_crt_free+0x50>
        }

        seq_cur = cert_cur->subject_alt_names.next;
   de2b8:	f8d4 60f4 	ldr.w	r6, [r4, #244]	; 0xf4
        while( seq_cur != NULL )
   de2bc:	b14e      	cbz	r6, de2d2 <mbedtls_x509_crt_free+0x80>
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
            mbedtls_platform_zeroize( seq_prv,
   de2be:	4630      	mov	r0, r6
            seq_cur = seq_cur->next;
   de2c0:	68f7      	ldr	r7, [r6, #12]
            mbedtls_platform_zeroize( seq_prv,
   de2c2:	2110      	movs	r1, #16
   de2c4:	f7fc fe8a 	bl	dafdc <mbedtls_platform_zeroize>
                                      sizeof( mbedtls_x509_sequence ) );
            mbedtls_free( seq_prv );
   de2c8:	4630      	mov	r0, r6
   de2ca:	f007 fa79 	bl	e57c0 <free>
            seq_cur = seq_cur->next;
   de2ce:	463e      	mov	r6, r7
        while( seq_cur != NULL )
   de2d0:	e7f4      	b.n	de2bc <mbedtls_x509_crt_free+0x6a>
        }

        if( cert_cur->raw.p != NULL )
   de2d2:	68a0      	ldr	r0, [r4, #8]
   de2d4:	b128      	cbz	r0, de2e2 <mbedtls_x509_crt_free+0x90>
        {
            mbedtls_platform_zeroize( cert_cur->raw.p, cert_cur->raw.len );
   de2d6:	6861      	ldr	r1, [r4, #4]
   de2d8:	f7fc fe80 	bl	dafdc <mbedtls_platform_zeroize>
            mbedtls_free( cert_cur->raw.p );
   de2dc:	68a0      	ldr	r0, [r4, #8]
   de2de:	f007 fa6f 	bl	e57c0 <free>
        }

        cert_cur = cert_cur->next;
   de2e2:	f8d4 4130 	ldr.w	r4, [r4, #304]	; 0x130
    }
    while( cert_cur != NULL );
   de2e6:	2c00      	cmp	r4, #0
   de2e8:	d1b8      	bne.n	de25c <mbedtls_x509_crt_free+0xa>
   de2ea:	462c      	mov	r4, r5

    cert_cur = crt;
    do
    {
        cert_prv = cert_cur;
        cert_cur = cert_cur->next;
   de2ec:	4620      	mov	r0, r4

        mbedtls_platform_zeroize( cert_prv, sizeof( mbedtls_x509_crt ) );
   de2ee:	f44f 719a 	mov.w	r1, #308	; 0x134
   de2f2:	9001      	str	r0, [sp, #4]
        cert_cur = cert_cur->next;
   de2f4:	f8d4 4130 	ldr.w	r4, [r4, #304]	; 0x130
        mbedtls_platform_zeroize( cert_prv, sizeof( mbedtls_x509_crt ) );
   de2f8:	f7fc fe70 	bl	dafdc <mbedtls_platform_zeroize>
        if( cert_prv != crt )
   de2fc:	9801      	ldr	r0, [sp, #4]
   de2fe:	4285      	cmp	r5, r0
   de300:	d001      	beq.n	de306 <mbedtls_x509_crt_free+0xb4>
            mbedtls_free( cert_prv );
   de302:	f007 fa5d 	bl	e57c0 <free>
    }
    while( cert_cur != NULL );
   de306:	2c00      	cmp	r4, #0
   de308:	d1f0      	bne.n	de2ec <mbedtls_x509_crt_free+0x9a>
}
   de30a:	b003      	add	sp, #12
   de30c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000de310 <mbedtls_x509_crt_parse_der>:
{
   de310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   de314:	460e      	mov	r6, r1
   de316:	b09b      	sub	sp, #108	; 0x6c
   de318:	4615      	mov	r5, r2
    if( crt == NULL || buf == NULL )
   de31a:	4683      	mov	fp, r0
   de31c:	2800      	cmp	r0, #0
   de31e:	f000 82f6 	beq.w	de90e <mbedtls_x509_crt_parse_der+0x5fe>
   de322:	2900      	cmp	r1, #0
   de324:	f000 82f3 	beq.w	de90e <mbedtls_x509_crt_parse_der+0x5fe>
   de328:	4604      	mov	r4, r0
    mbedtls_x509_crt *crt = chain, *prev = NULL;
   de32a:	f04f 0a00 	mov.w	sl, #0
    while( crt->version != 0 && crt->next != NULL )
   de32e:	69a3      	ldr	r3, [r4, #24]
   de330:	b163      	cbz	r3, de34c <mbedtls_x509_crt_parse_der+0x3c>
   de332:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
   de336:	46a2      	mov	sl, r4
   de338:	2b00      	cmp	r3, #0
   de33a:	f000 82ee 	beq.w	de91a <mbedtls_x509_crt_parse_der+0x60a>
   de33e:	461c      	mov	r4, r3
   de340:	e7f5      	b.n	de32e <mbedtls_x509_crt_parse_der+0x1e>
        mbedtls_x509_crt_init( crt->next );
   de342:	f7ff ff81 	bl	de248 <mbedtls_x509_crt_init>
        crt = crt->next;
   de346:	46a2      	mov	sl, r4
   de348:	f8d4 4130 	ldr.w	r4, [r4, #304]	; 0x130
    memset( &sig_params1, 0, sizeof( mbedtls_x509_buf ) );
   de34c:	2300      	movs	r3, #0
   de34e:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
    memset( &sig_params2, 0, sizeof( mbedtls_x509_buf ) );
   de352:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
   de356:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
    memset( &sig_oid2, 0, sizeof( mbedtls_x509_buf ) );
   de35a:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
   de35e:	9313      	str	r3, [sp, #76]	; 0x4c
    if( crt == NULL || buf == NULL )
   de360:	2c00      	cmp	r4, #0
   de362:	f000 82c8 	beq.w	de8f6 <mbedtls_x509_crt_parse_der+0x5e6>
    len = buflen;
   de366:	e9cd 5605 	strd	r5, r6, [sp, #20]
    end = p + len;
   de36a:	4435      	add	r5, r6
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   de36c:	2330      	movs	r3, #48	; 0x30
   de36e:	aa05      	add	r2, sp, #20
   de370:	4629      	mov	r1, r5
   de372:	a806      	add	r0, sp, #24
   de374:	f7f8 f82e 	bl	d63d4 <mbedtls_asn1_get_tag>
   de378:	b158      	cbz	r0, de392 <mbedtls_x509_crt_parse_der+0x82>
        mbedtls_x509_crt_free( crt );
   de37a:	4620      	mov	r0, r4
   de37c:	f7ff ff69 	bl	de252 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT );
   de380:	4eb2      	ldr	r6, [pc, #712]	; (de64c <mbedtls_x509_crt_parse_der+0x33c>)
        if( prev )
   de382:	f1ba 0f00 	cmp.w	sl, #0
   de386:	f040 82be 	bne.w	de906 <mbedtls_x509_crt_parse_der+0x5f6>
        if( crt != chain )
   de38a:	45a3      	cmp	fp, r4
   de38c:	f040 82b7 	bne.w	de8fe <mbedtls_x509_crt_parse_der+0x5ee>
   de390:	e02f      	b.n	de3f2 <mbedtls_x509_crt_parse_der+0xe2>
    if( len > (size_t) ( end - p ) )
   de392:	e9dd 8705 	ldrd	r8, r7, [sp, #20]
   de396:	1bed      	subs	r5, r5, r7
   de398:	4545      	cmp	r5, r8
   de39a:	d204      	bcs.n	de3a6 <mbedtls_x509_crt_parse_der+0x96>
        mbedtls_x509_crt_free( crt );
   de39c:	4620      	mov	r0, r4
   de39e:	f7ff ff58 	bl	de252 <mbedtls_x509_crt_free>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   de3a2:	4eab      	ldr	r6, [pc, #684]	; (de650 <mbedtls_x509_crt_parse_der+0x340>)
   de3a4:	e7ed      	b.n	de382 <mbedtls_x509_crt_parse_der+0x72>
    crt_end = p + len;
   de3a6:	4447      	add	r7, r8
    crt->raw.len = crt_end - buf;
   de3a8:	1bbd      	subs	r5, r7, r6
   de3aa:	6065      	str	r5, [r4, #4]
    crt->raw.p = p = (unsigned char *)mbedtls_calloc( 1, crt->raw.len );
   de3ac:	4629      	mov	r1, r5
   de3ae:	2001      	movs	r0, #1
   de3b0:	f00a fa12 	bl	e87d8 <calloc>
   de3b4:	4607      	mov	r7, r0
   de3b6:	9006      	str	r0, [sp, #24]
   de3b8:	60a0      	str	r0, [r4, #8]
    if( p == NULL )
   de3ba:	b908      	cbnz	r0, de3c0 <mbedtls_x509_crt_parse_der+0xb0>
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );
   de3bc:	4ea5      	ldr	r6, [pc, #660]	; (de654 <mbedtls_x509_crt_parse_der+0x344>)
   de3be:	e7e0      	b.n	de382 <mbedtls_x509_crt_parse_der+0x72>
    memcpy( p, buf, crt->raw.len );
   de3c0:	4631      	mov	r1, r6
   de3c2:	462a      	mov	r2, r5
   de3c4:	f00a fa82 	bl	e88cc <memcpy>
    p += crt->raw.len - len;
   de3c8:	eba5 0308 	sub.w	r3, r5, r8
   de3cc:	443b      	add	r3, r7
    end = crt_end = p + len;
   de3ce:	442f      	add	r7, r5
    p += crt->raw.len - len;
   de3d0:	9306      	str	r3, [sp, #24]
    crt->tbs.p = p;
   de3d2:	6163      	str	r3, [r4, #20]
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   de3d4:	aa05      	add	r2, sp, #20
   de3d6:	2330      	movs	r3, #48	; 0x30
   de3d8:	4639      	mov	r1, r7
   de3da:	a806      	add	r0, sp, #24
   de3dc:	f7f7 fffa 	bl	d63d4 <mbedtls_asn1_get_tag>
   de3e0:	4606      	mov	r6, r0
   de3e2:	b150      	cbz	r0, de3fa <mbedtls_x509_crt_parse_der+0xea>
        mbedtls_x509_crt_free( crt );
   de3e4:	4620      	mov	r0, r4
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
   de3e6:	f5a6 5606 	sub.w	r6, r6, #8576	; 0x2180
        mbedtls_x509_crt_free( crt );
   de3ea:	f7ff ff32 	bl	de252 <mbedtls_x509_crt_free>
    if( ( ret = x509_crt_parse_der_core( crt, buf, buflen ) ) != 0 )
   de3ee:	2e00      	cmp	r6, #0
   de3f0:	d1c7      	bne.n	de382 <mbedtls_x509_crt_parse_der+0x72>
}
   de3f2:	4630      	mov	r0, r6
   de3f4:	b01b      	add	sp, #108	; 0x6c
   de3f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    end = p + len;
   de3fa:	e9dd 3505 	ldrd	r3, r5, [sp, #20]
   de3fe:	441d      	add	r5, r3
    crt->tbs.len = end - crt->tbs.p;
   de400:	6963      	ldr	r3, [r4, #20]
   de402:	1aeb      	subs	r3, r5, r3
   de404:	6123      	str	r3, [r4, #16]
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   de406:	aa17      	add	r2, sp, #92	; 0x5c
   de408:	23a0      	movs	r3, #160	; 0xa0
   de40a:	4629      	mov	r1, r5
   de40c:	a806      	add	r0, sp, #24
   de40e:	f7f7 ffe1 	bl	d63d4 <mbedtls_asn1_get_tag>
   de412:	b308      	cbz	r0, de458 <mbedtls_x509_crt_parse_der+0x148>
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   de414:	f110 0f62 	cmn.w	r0, #98	; 0x62
   de418:	d11a      	bne.n	de450 <mbedtls_x509_crt_parse_der+0x140>
            *ver = 0;
   de41a:	61a6      	str	r6, [r4, #24]
        ( ret = mbedtls_x509_get_serial(   &p, end, &crt->serial   ) ) != 0 ||
   de41c:	f104 021c 	add.w	r2, r4, #28
   de420:	4629      	mov	r1, r5
   de422:	a806      	add	r0, sp, #24
   de424:	f7f8 f92e 	bl	d6684 <mbedtls_x509_get_serial>
    if( ( ret = x509_get_version(  &p, end, &crt->version  ) ) != 0 ||
   de428:	4606      	mov	r6, r0
   de42a:	bb38      	cbnz	r0, de47c <mbedtls_x509_crt_parse_der+0x16c>
        ( ret = mbedtls_x509_get_alg(      &p, end, &crt->sig_oid,
   de42c:	f104 0828 	add.w	r8, r4, #40	; 0x28
   de430:	ab0b      	add	r3, sp, #44	; 0x2c
   de432:	4642      	mov	r2, r8
   de434:	4629      	mov	r1, r5
   de436:	a806      	add	r0, sp, #24
   de438:	f7f8 f951 	bl	d66de <mbedtls_x509_get_alg>
        ( ret = mbedtls_x509_get_serial(   &p, end, &crt->serial   ) ) != 0 ||
   de43c:	4606      	mov	r6, r0
   de43e:	b9e8      	cbnz	r0, de47c <mbedtls_x509_crt_parse_der+0x16c>
    if( crt->version < 0 || crt->version > 2 )
   de440:	69a3      	ldr	r3, [r4, #24]
   de442:	2b02      	cmp	r3, #2
   de444:	d91e      	bls.n	de484 <mbedtls_x509_crt_parse_der+0x174>
        mbedtls_x509_crt_free( crt );
   de446:	4620      	mov	r0, r4
   de448:	f7ff ff03 	bl	de252 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_UNKNOWN_VERSION );
   de44c:	4e82      	ldr	r6, [pc, #520]	; (de658 <mbedtls_x509_crt_parse_der+0x348>)
   de44e:	e798      	b.n	de382 <mbedtls_x509_crt_parse_der+0x72>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
   de450:	f5a0 5606 	sub.w	r6, r0, #8576	; 0x2180
        ( ret = mbedtls_x509_get_serial(   &p, end, &crt->serial   ) ) != 0 ||
   de454:	b996      	cbnz	r6, de47c <mbedtls_x509_crt_parse_der+0x16c>
   de456:	e7e1      	b.n	de41c <mbedtls_x509_crt_parse_der+0x10c>
    end = *p + len;
   de458:	9906      	ldr	r1, [sp, #24]
   de45a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   de45c:	eb01 0803 	add.w	r8, r1, r3
    if( ( ret = mbedtls_asn1_get_int( p, end, ver ) ) != 0 )
   de460:	f104 0218 	add.w	r2, r4, #24
   de464:	4641      	mov	r1, r8
   de466:	a806      	add	r0, sp, #24
   de468:	f7f7 ffe1 	bl	d642e <mbedtls_asn1_get_int>
   de46c:	b110      	cbz	r0, de474 <mbedtls_x509_crt_parse_der+0x164>
        return( MBEDTLS_ERR_X509_INVALID_VERSION + ret );
   de46e:	f5a0 5608 	sub.w	r6, r0, #8704	; 0x2200
   de472:	e7ef      	b.n	de454 <mbedtls_x509_crt_parse_der+0x144>
    if( *p != end )
   de474:	9b06      	ldr	r3, [sp, #24]
   de476:	4598      	cmp	r8, r3
   de478:	d0d0      	beq.n	de41c <mbedtls_x509_crt_parse_der+0x10c>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   de47a:	4e78      	ldr	r6, [pc, #480]	; (de65c <mbedtls_x509_crt_parse_der+0x34c>)
        mbedtls_x509_crt_free( crt );
   de47c:	4620      	mov	r0, r4
   de47e:	f7ff fee8 	bl	de252 <mbedtls_x509_crt_free>
        return( ret );
   de482:	e77e      	b.n	de382 <mbedtls_x509_crt_parse_der+0x72>
    crt->version++;
   de484:	3301      	adds	r3, #1
   de486:	61a3      	str	r3, [r4, #24]
    if( ( ret = mbedtls_x509_get_sig_alg( &crt->sig_oid, &sig_params1,
   de488:	f504 7396 	add.w	r3, r4, #300	; 0x12c
   de48c:	9300      	str	r3, [sp, #0]
   de48e:	f504 7294 	add.w	r2, r4, #296	; 0x128
   de492:	f204 1329 	addw	r3, r4, #297	; 0x129
   de496:	a90b      	add	r1, sp, #44	; 0x2c
   de498:	4640      	mov	r0, r8
   de49a:	f7f8 fb61 	bl	d6b60 <mbedtls_x509_get_sig_alg>
   de49e:	4606      	mov	r6, r0
   de4a0:	2800      	cmp	r0, #0
   de4a2:	d1eb      	bne.n	de47c <mbedtls_x509_crt_parse_der+0x16c>
    crt->issuer_raw.p = p;
   de4a4:	9b06      	ldr	r3, [sp, #24]
   de4a6:	63e3      	str	r3, [r4, #60]	; 0x3c
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   de4a8:	aa05      	add	r2, sp, #20
   de4aa:	2330      	movs	r3, #48	; 0x30
   de4ac:	4629      	mov	r1, r5
   de4ae:	a806      	add	r0, sp, #24
   de4b0:	f7f7 ff90 	bl	d63d4 <mbedtls_asn1_get_tag>
   de4b4:	4606      	mov	r6, r0
   de4b6:	2800      	cmp	r0, #0
   de4b8:	d194      	bne.n	de3e4 <mbedtls_x509_crt_parse_der+0xd4>
    if( ( ret = mbedtls_x509_get_name( &p, p + len, &crt->issuer ) ) != 0 )
   de4ba:	e9dd 3105 	ldrd	r3, r1, [sp, #20]
   de4be:	f104 024c 	add.w	r2, r4, #76	; 0x4c
   de4c2:	4419      	add	r1, r3
   de4c4:	a806      	add	r0, sp, #24
   de4c6:	f7f8 f9f9 	bl	d68bc <mbedtls_x509_get_name>
   de4ca:	4606      	mov	r6, r0
   de4cc:	2800      	cmp	r0, #0
   de4ce:	d1d5      	bne.n	de47c <mbedtls_x509_crt_parse_der+0x16c>
    crt->issuer_raw.len = p - crt->issuer_raw.p;
   de4d0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   de4d2:	9b06      	ldr	r3, [sp, #24]
   de4d4:	1a9b      	subs	r3, r3, r2
   de4d6:	63a3      	str	r3, [r4, #56]	; 0x38
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   de4d8:	aa17      	add	r2, sp, #92	; 0x5c
   de4da:	2330      	movs	r3, #48	; 0x30
   de4dc:	4629      	mov	r1, r5
   de4de:	a806      	add	r0, sp, #24
   de4e0:	f7f7 ff78 	bl	d63d4 <mbedtls_asn1_get_tag>
   de4e4:	2800      	cmp	r0, #0
   de4e6:	f000 8093 	beq.w	de610 <mbedtls_x509_crt_parse_der+0x300>
    if( ( ret = x509_get_dates( &p, end, &crt->valid_from,
   de4ea:	f5b0 5610 	subs.w	r6, r0, #9216	; 0x2400
   de4ee:	d1c5      	bne.n	de47c <mbedtls_x509_crt_parse_der+0x16c>
    crt->subject_raw.p = p;
   de4f0:	9b06      	ldr	r3, [sp, #24]
   de4f2:	64a3      	str	r3, [r4, #72]	; 0x48
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   de4f4:	aa05      	add	r2, sp, #20
   de4f6:	2330      	movs	r3, #48	; 0x30
   de4f8:	4629      	mov	r1, r5
   de4fa:	a806      	add	r0, sp, #24
   de4fc:	f7f7 ff6a 	bl	d63d4 <mbedtls_asn1_get_tag>
   de500:	4606      	mov	r6, r0
   de502:	2800      	cmp	r0, #0
   de504:	f47f af6e 	bne.w	de3e4 <mbedtls_x509_crt_parse_der+0xd4>
    if( len && ( ret = mbedtls_x509_get_name( &p, p + len, &crt->subject ) ) != 0 )
   de508:	9b05      	ldr	r3, [sp, #20]
   de50a:	2b00      	cmp	r3, #0
   de50c:	f040 80ac 	bne.w	de668 <mbedtls_x509_crt_parse_der+0x358>
    crt->subject_raw.len = p - crt->subject_raw.p;
   de510:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   de512:	9b06      	ldr	r3, [sp, #24]
   de514:	1a9b      	subs	r3, r3, r2
   de516:	6463      	str	r3, [r4, #68]	; 0x44
    if( ( ret = mbedtls_pk_parse_subpubkey( &p, end, &crt->pk ) ) != 0 )
   de518:	f104 02bc 	add.w	r2, r4, #188	; 0xbc
   de51c:	4629      	mov	r1, r5
   de51e:	a806      	add	r0, sp, #24
   de520:	f7fd fe92 	bl	dc248 <mbedtls_pk_parse_subpubkey>
   de524:	4606      	mov	r6, r0
   de526:	2800      	cmp	r0, #0
   de528:	d1a8      	bne.n	de47c <mbedtls_x509_crt_parse_der+0x16c>
    if( crt->version == 2 || crt->version == 3 )
   de52a:	69a3      	ldr	r3, [r4, #24]
   de52c:	3b02      	subs	r3, #2
   de52e:	2b01      	cmp	r3, #1
   de530:	d817      	bhi.n	de562 <mbedtls_x509_crt_parse_der+0x252>
        ret = x509_get_uid( &p, end, &crt->issuer_id,  1 );
   de532:	2301      	movs	r3, #1
   de534:	f104 02c4 	add.w	r2, r4, #196	; 0xc4
   de538:	4629      	mov	r1, r5
   de53a:	a806      	add	r0, sp, #24
   de53c:	f7ff f867 	bl	dd60e <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi>
        if( ret != 0 )
   de540:	4606      	mov	r6, r0
   de542:	2800      	cmp	r0, #0
   de544:	d19a      	bne.n	de47c <mbedtls_x509_crt_parse_der+0x16c>
    if( crt->version == 2 || crt->version == 3 )
   de546:	69a3      	ldr	r3, [r4, #24]
   de548:	3b02      	subs	r3, #2
   de54a:	2b01      	cmp	r3, #1
   de54c:	d809      	bhi.n	de562 <mbedtls_x509_crt_parse_der+0x252>
        ret = x509_get_uid( &p, end, &crt->subject_id,  2 );
   de54e:	2302      	movs	r3, #2
   de550:	f104 02d0 	add.w	r2, r4, #208	; 0xd0
   de554:	4629      	mov	r1, r5
   de556:	a806      	add	r0, sp, #24
   de558:	f7ff f859 	bl	dd60e <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi>
        if( ret != 0 )
   de55c:	4606      	mov	r6, r0
   de55e:	2800      	cmp	r0, #0
   de560:	d18c      	bne.n	de47c <mbedtls_x509_crt_parse_der+0x16c>
    if( crt->version == 3 )
   de562:	69a3      	ldr	r3, [r4, #24]
   de564:	2b03      	cmp	r3, #3
   de566:	d129      	bne.n	de5bc <mbedtls_x509_crt_parse_der+0x2ac>
    if( *p == end )
   de568:	9a06      	ldr	r2, [sp, #24]
   de56a:	42aa      	cmp	r2, r5
   de56c:	d02a      	beq.n	de5c4 <mbedtls_x509_crt_parse_der+0x2b4>
    if( ( ret = mbedtls_x509_get_ext( p, end, &crt->v3_ext, 3 ) ) != 0 )
   de56e:	f104 02dc 	add.w	r2, r4, #220	; 0xdc
   de572:	4629      	mov	r1, r5
   de574:	a806      	add	r0, sp, #24
   de576:	f7f8 fb37 	bl	d6be8 <mbedtls_x509_get_ext>
   de57a:	4606      	mov	r6, r0
   de57c:	2800      	cmp	r0, #0
   de57e:	f47f af7d 	bne.w	de47c <mbedtls_x509_crt_parse_der+0x16c>
    end = crt->v3_ext.p + crt->v3_ext.len;
   de582:	e9d4 3238 	ldrd	r3, r2, [r4, #224]	; 0xe0
   de586:	18d3      	adds	r3, r2, r3
   de588:	9302      	str	r3, [sp, #8]
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
   de58a:	4681      	mov	r9, r0
    while( *p < end )
   de58c:	9b06      	ldr	r3, [sp, #24]
   de58e:	9a02      	ldr	r2, [sp, #8]
   de590:	429a      	cmp	r2, r3
   de592:	f240 819e 	bls.w	de8d2 <mbedtls_x509_crt_parse_der+0x5c2>
        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   de596:	9902      	ldr	r1, [sp, #8]
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
   de598:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   de59c:	2330      	movs	r3, #48	; 0x30
   de59e:	aa07      	add	r2, sp, #28
   de5a0:	a806      	add	r0, sp, #24
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
   de5a2:	e9cd 9914 	strd	r9, r9, [sp, #80]	; 0x50
        int ext_type = 0;
   de5a6:	e9cd 9908 	strd	r9, r9, [sp, #32]
        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   de5aa:	f7f7 ff13 	bl	d63d4 <mbedtls_asn1_get_tag>
   de5ae:	2800      	cmp	r0, #0
   de5b0:	d066      	beq.n	de680 <mbedtls_x509_crt_parse_der+0x370>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
   de5b2:	f5a0 5614 	sub.w	r6, r0, #9472	; 0x2500
        if( ret != 0 )
   de5b6:	2e00      	cmp	r6, #0
   de5b8:	f47f af60 	bne.w	de47c <mbedtls_x509_crt_parse_der+0x16c>
    if( p != end )
   de5bc:	9b06      	ldr	r3, [sp, #24]
   de5be:	429d      	cmp	r5, r3
   de5c0:	f47f aeec 	bne.w	de39c <mbedtls_x509_crt_parse_der+0x8c>
    if( ( ret = mbedtls_x509_get_alg( &p, end, &sig_oid2, &sig_params2 ) ) != 0 )
   de5c4:	ab0e      	add	r3, sp, #56	; 0x38
   de5c6:	aa11      	add	r2, sp, #68	; 0x44
   de5c8:	4639      	mov	r1, r7
   de5ca:	a806      	add	r0, sp, #24
   de5cc:	f7f8 f887 	bl	d66de <mbedtls_x509_get_alg>
   de5d0:	4606      	mov	r6, r0
   de5d2:	2800      	cmp	r0, #0
   de5d4:	f47f af52 	bne.w	de47c <mbedtls_x509_crt_parse_der+0x16c>
    if( crt->sig_oid.len != sig_oid2.len ||
   de5d8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   de5da:	9b12      	ldr	r3, [sp, #72]	; 0x48
   de5dc:	429a      	cmp	r2, r3
   de5de:	d112      	bne.n	de606 <mbedtls_x509_crt_parse_der+0x2f6>
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
   de5e0:	9913      	ldr	r1, [sp, #76]	; 0x4c
   de5e2:	6b20      	ldr	r0, [r4, #48]	; 0x30
   de5e4:	f00a f964 	bl	e88b0 <memcmp>
    if( crt->sig_oid.len != sig_oid2.len ||
   de5e8:	b968      	cbnz	r0, de606 <mbedtls_x509_crt_parse_der+0x2f6>
        sig_params1.len != sig_params2.len ||
   de5ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
   de5ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   de5ee:	429a      	cmp	r2, r3
   de5f0:	d109      	bne.n	de606 <mbedtls_x509_crt_parse_der+0x2f6>
        sig_params1.len != sig_params2.len ||
   de5f2:	2a00      	cmp	r2, #0
   de5f4:	f000 8170 	beq.w	de8d8 <mbedtls_x509_crt_parse_der+0x5c8>
          memcmp( sig_params1.p, sig_params2.p, sig_params1.len ) != 0 ) )
   de5f8:	9910      	ldr	r1, [sp, #64]	; 0x40
   de5fa:	980d      	ldr	r0, [sp, #52]	; 0x34
   de5fc:	f00a f958 	bl	e88b0 <memcmp>
        ( sig_params1.len != 0 &&
   de600:	2800      	cmp	r0, #0
   de602:	f000 8169 	beq.w	de8d8 <mbedtls_x509_crt_parse_der+0x5c8>
        mbedtls_x509_crt_free( crt );
   de606:	4620      	mov	r0, r4
   de608:	f7ff fe23 	bl	de252 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_SIG_MISMATCH );
   de60c:	4e14      	ldr	r6, [pc, #80]	; (de660 <mbedtls_x509_crt_parse_der+0x350>)
   de60e:	e6b8      	b.n	de382 <mbedtls_x509_crt_parse_der+0x72>
    end = *p + len;
   de610:	9906      	ldr	r1, [sp, #24]
   de612:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   de614:	eb01 0803 	add.w	r8, r1, r3
    if( ( ret = mbedtls_x509_get_time( p, end, from ) ) != 0 )
   de618:	f104 028c 	add.w	r2, r4, #140	; 0x8c
   de61c:	4641      	mov	r1, r8
   de61e:	a806      	add	r0, sp, #24
   de620:	f7f8 f9d0 	bl	d69c4 <mbedtls_x509_get_time>
   de624:	4606      	mov	r6, r0
   de626:	2800      	cmp	r0, #0
   de628:	f47f af28 	bne.w	de47c <mbedtls_x509_crt_parse_der+0x16c>
    if( ( ret = mbedtls_x509_get_time( p, end, to ) ) != 0 )
   de62c:	f104 02a4 	add.w	r2, r4, #164	; 0xa4
   de630:	4641      	mov	r1, r8
   de632:	a806      	add	r0, sp, #24
   de634:	f7f8 f9c6 	bl	d69c4 <mbedtls_x509_get_time>
   de638:	4606      	mov	r6, r0
   de63a:	2800      	cmp	r0, #0
   de63c:	f47f af1e 	bne.w	de47c <mbedtls_x509_crt_parse_der+0x16c>
    if( *p != end )
   de640:	9b06      	ldr	r3, [sp, #24]
   de642:	4598      	cmp	r8, r3
   de644:	f43f af54 	beq.w	de4f0 <mbedtls_x509_crt_parse_der+0x1e0>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   de648:	4e06      	ldr	r6, [pc, #24]	; (de664 <mbedtls_x509_crt_parse_der+0x354>)
        mbedtls_x509_crt_free( crt );
   de64a:	e717      	b.n	de47c <mbedtls_x509_crt_parse_der+0x16c>
   de64c:	ffffde80 	.word	0xffffde80
   de650:	ffffde1a 	.word	0xffffde1a
   de654:	ffffd780 	.word	0xffffd780
   de658:	ffffda80 	.word	0xffffda80
   de65c:	ffffdd9a 	.word	0xffffdd9a
   de660:	ffffd980 	.word	0xffffd980
   de664:	ffffdb9a 	.word	0xffffdb9a
    if( len && ( ret = mbedtls_x509_get_name( &p, p + len, &crt->subject ) ) != 0 )
   de668:	9906      	ldr	r1, [sp, #24]
   de66a:	f104 026c 	add.w	r2, r4, #108	; 0x6c
   de66e:	4419      	add	r1, r3
   de670:	a806      	add	r0, sp, #24
   de672:	f7f8 f923 	bl	d68bc <mbedtls_x509_get_name>
   de676:	4606      	mov	r6, r0
   de678:	2800      	cmp	r0, #0
   de67a:	f43f af49 	beq.w	de510 <mbedtls_x509_crt_parse_der+0x200>
   de67e:	e6fd      	b.n	de47c <mbedtls_x509_crt_parse_der+0x16c>
        end_ext_data = *p + len;
   de680:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   de684:	eb02 0803 	add.w	r8, r2, r3
        if( ( ret = mbedtls_asn1_get_tag( p, end_ext_data, &extn_oid.len,
   de688:	4641      	mov	r1, r8
   de68a:	2306      	movs	r3, #6
   de68c:	aa15      	add	r2, sp, #84	; 0x54
   de68e:	a806      	add	r0, sp, #24
   de690:	f7f7 fea0 	bl	d63d4 <mbedtls_asn1_get_tag>
   de694:	2800      	cmp	r0, #0
   de696:	d18c      	bne.n	de5b2 <mbedtls_x509_crt_parse_der+0x2a2>
        extn_oid.tag = MBEDTLS_ASN1_OID;
   de698:	2306      	movs	r3, #6
        *p += extn_oid.len;
   de69a:	9a15      	ldr	r2, [sp, #84]	; 0x54
        extn_oid.tag = MBEDTLS_ASN1_OID;
   de69c:	9314      	str	r3, [sp, #80]	; 0x50
        extn_oid.p = *p;
   de69e:	9b06      	ldr	r3, [sp, #24]
   de6a0:	9316      	str	r3, [sp, #88]	; 0x58
        if( ( ret = mbedtls_asn1_get_bool( p, end_ext_data, &is_critical ) ) != 0 &&
   de6a2:	4641      	mov	r1, r8
        *p += extn_oid.len;
   de6a4:	4413      	add	r3, r2
        if( ( ret = mbedtls_asn1_get_bool( p, end_ext_data, &is_critical ) ) != 0 &&
   de6a6:	a806      	add	r0, sp, #24
   de6a8:	aa08      	add	r2, sp, #32
        *p += extn_oid.len;
   de6aa:	9306      	str	r3, [sp, #24]
        if( ( ret = mbedtls_asn1_get_bool( p, end_ext_data, &is_critical ) ) != 0 &&
   de6ac:	f7f7 fea6 	bl	d63fc <mbedtls_asn1_get_bool>
   de6b0:	b118      	cbz	r0, de6ba <mbedtls_x509_crt_parse_der+0x3aa>
   de6b2:	f110 0f62 	cmn.w	r0, #98	; 0x62
   de6b6:	f47f af7c 	bne.w	de5b2 <mbedtls_x509_crt_parse_der+0x2a2>
        if( ( ret = mbedtls_asn1_get_tag( p, end_ext_data, &len,
   de6ba:	2304      	movs	r3, #4
   de6bc:	aa07      	add	r2, sp, #28
   de6be:	4641      	mov	r1, r8
   de6c0:	a806      	add	r0, sp, #24
   de6c2:	f7f7 fe87 	bl	d63d4 <mbedtls_asn1_get_tag>
   de6c6:	2800      	cmp	r0, #0
   de6c8:	f47f af73 	bne.w	de5b2 <mbedtls_x509_crt_parse_der+0x2a2>
        end_ext_octet = *p + len;
   de6cc:	e9dd 6306 	ldrd	r6, r3, [sp, #24]
   de6d0:	441e      	add	r6, r3
        if( end_ext_octet != end_ext_data )
   de6d2:	45b0      	cmp	r8, r6
   de6d4:	f040 80fb 	bne.w	de8ce <mbedtls_x509_crt_parse_der+0x5be>
        ret = mbedtls_oid_get_x509_ext_type( &extn_oid, &ext_type );
   de6d8:	a909      	add	r1, sp, #36	; 0x24
   de6da:	a814      	add	r0, sp, #80	; 0x50
   de6dc:	f7fb fb98 	bl	d9e10 <mbedtls_oid_get_x509_ext_type>
        if( ret != 0 )
   de6e0:	b138      	cbz	r0, de6f2 <mbedtls_x509_crt_parse_der+0x3e2>
            if( is_critical )
   de6e2:	9b08      	ldr	r3, [sp, #32]
            *p = end_ext_octet;
   de6e4:	f8cd 8018 	str.w	r8, [sp, #24]
            if( is_critical )
   de6e8:	2b00      	cmp	r3, #0
   de6ea:	f43f af4f 	beq.w	de58c <mbedtls_x509_crt_parse_der+0x27c>
                        MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
   de6ee:	4e92      	ldr	r6, [pc, #584]	; (de938 <mbedtls_x509_crt_parse_der+0x628>)
   de6f0:	e6c4      	b.n	de47c <mbedtls_x509_crt_parse_der+0x16c>
        if( ( crt->ext_types & ext_type ) != 0 )
   de6f2:	f8d4 10f8 	ldr.w	r1, [r4, #248]	; 0xf8
   de6f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   de6f8:	ea11 0302 	ands.w	r3, r1, r2
   de6fc:	f040 8119 	bne.w	de932 <mbedtls_x509_crt_parse_der+0x622>
        crt->ext_types |= ext_type;
   de700:	4311      	orrs	r1, r2
        switch( ext_type )
   de702:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
        crt->ext_types |= ext_type;
   de706:	f8c4 10f8 	str.w	r1, [r4, #248]	; 0xf8
        switch( ext_type )
   de70a:	d020      	beq.n	de74e <mbedtls_x509_crt_parse_der+0x43e>
   de70c:	dc06      	bgt.n	de71c <mbedtls_x509_crt_parse_der+0x40c>
   de70e:	2a04      	cmp	r2, #4
   de710:	d05e      	beq.n	de7d0 <mbedtls_x509_crt_parse_der+0x4c0>
   de712:	2a20      	cmp	r2, #32
   de714:	f000 8090 	beq.w	de838 <mbedtls_x509_crt_parse_der+0x528>
        if( ret != 0 )
   de718:	4e88      	ldr	r6, [pc, #544]	; (de93c <mbedtls_x509_crt_parse_der+0x62c>)
   de71a:	e6af      	b.n	de47c <mbedtls_x509_crt_parse_der+0x16c>
        switch( ext_type )
   de71c:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   de720:	d07a      	beq.n	de818 <mbedtls_x509_crt_parse_der+0x508>
   de722:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   de726:	d1f7      	bne.n	de718 <mbedtls_x509_crt_parse_der+0x408>
    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
   de728:	aa17      	add	r2, sp, #92	; 0x5c
   de72a:	4641      	mov	r1, r8
   de72c:	a806      	add	r0, sp, #24
    mbedtls_x509_bitstring bs = { 0, 0, NULL };
   de72e:	9317      	str	r3, [sp, #92]	; 0x5c
   de730:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
   de734:	9319      	str	r3, [sp, #100]	; 0x64
    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
   de736:	f7f7 feb1 	bl	d649c <mbedtls_asn1_get_bitstring>
   de73a:	2800      	cmp	r0, #0
   de73c:	d152      	bne.n	de7e4 <mbedtls_x509_crt_parse_der+0x4d4>
    if( bs.len != 1 )
   de73e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   de740:	2b01      	cmp	r3, #1
   de742:	d177      	bne.n	de834 <mbedtls_x509_crt_parse_der+0x524>
    *ns_cert_type = *bs.p;
   de744:	9b19      	ldr	r3, [sp, #100]	; 0x64
   de746:	781b      	ldrb	r3, [r3, #0]
   de748:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
            continue;
   de74c:	e71e      	b.n	de58c <mbedtls_x509_crt_parse_der+0x27c>
    *max_pathlen = 0; /* endless */
   de74e:	e9c4 333f 	strd	r3, r3, [r4, #252]	; 0xfc
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   de752:	aa17      	add	r2, sp, #92	; 0x5c
   de754:	2330      	movs	r3, #48	; 0x30
   de756:	4641      	mov	r1, r8
   de758:	a806      	add	r0, sp, #24
   de75a:	f7f7 fe3b 	bl	d63d4 <mbedtls_asn1_get_tag>
   de75e:	b128      	cbz	r0, de76c <mbedtls_x509_crt_parse_der+0x45c>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
   de760:	f5a0 5614 	sub.w	r6, r0, #9472	; 0x2500
            if( ( ret = x509_get_subject_alt_name( p, end_ext_octet,
   de764:	2e00      	cmp	r6, #0
   de766:	f43f af11 	beq.w	de58c <mbedtls_x509_crt_parse_der+0x27c>
   de76a:	e687      	b.n	de47c <mbedtls_x509_crt_parse_der+0x16c>
    if( *p == end )
   de76c:	9b06      	ldr	r3, [sp, #24]
   de76e:	429e      	cmp	r6, r3
   de770:	f43f af0c 	beq.w	de58c <mbedtls_x509_crt_parse_der+0x27c>
            if( ( ret = x509_get_basic_constraints( p, end_ext_octet,
   de774:	f104 02fc 	add.w	r2, r4, #252	; 0xfc
    if( ( ret = mbedtls_asn1_get_bool( p, end, ca_istrue ) ) != 0 )
   de778:	4631      	mov	r1, r6
   de77a:	a806      	add	r0, sp, #24
   de77c:	9203      	str	r2, [sp, #12]
   de77e:	f7f7 fe3d 	bl	d63fc <mbedtls_asn1_get_bool>
   de782:	b178      	cbz	r0, de7a4 <mbedtls_x509_crt_parse_der+0x494>
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   de784:	f110 0f62 	cmn.w	r0, #98	; 0x62
   de788:	9a03      	ldr	r2, [sp, #12]
   de78a:	d1e9      	bne.n	de760 <mbedtls_x509_crt_parse_der+0x450>
            ret = mbedtls_asn1_get_int( p, end, ca_istrue );
   de78c:	4631      	mov	r1, r6
   de78e:	a806      	add	r0, sp, #24
   de790:	f7f7 fe4d 	bl	d642e <mbedtls_asn1_get_int>
        if( ret != 0 )
   de794:	2800      	cmp	r0, #0
   de796:	d1e3      	bne.n	de760 <mbedtls_x509_crt_parse_der+0x450>
        if( *ca_istrue != 0 )
   de798:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
   de79c:	b113      	cbz	r3, de7a4 <mbedtls_x509_crt_parse_der+0x494>
            *ca_istrue = 1;
   de79e:	2301      	movs	r3, #1
   de7a0:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
    if( *p == end )
   de7a4:	9b06      	ldr	r3, [sp, #24]
   de7a6:	429e      	cmp	r6, r3
   de7a8:	f43f aef0 	beq.w	de58c <mbedtls_x509_crt_parse_der+0x27c>
    if( ( ret = mbedtls_asn1_get_int( p, end, max_pathlen ) ) != 0 )
   de7ac:	f504 7280 	add.w	r2, r4, #256	; 0x100
   de7b0:	4631      	mov	r1, r6
   de7b2:	a806      	add	r0, sp, #24
   de7b4:	f7f7 fe3b 	bl	d642e <mbedtls_asn1_get_int>
   de7b8:	2800      	cmp	r0, #0
   de7ba:	d1d1      	bne.n	de760 <mbedtls_x509_crt_parse_der+0x450>
    if( *p != end )
   de7bc:	9b06      	ldr	r3, [sp, #24]
   de7be:	429e      	cmp	r6, r3
   de7c0:	f040 8085 	bne.w	de8ce <mbedtls_x509_crt_parse_der+0x5be>
    (*max_pathlen)++;
   de7c4:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   de7c8:	3301      	adds	r3, #1
   de7ca:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    return( 0 );
   de7ce:	e6dd      	b.n	de58c <mbedtls_x509_crt_parse_der+0x27c>
    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
   de7d0:	aa17      	add	r2, sp, #92	; 0x5c
   de7d2:	4641      	mov	r1, r8
   de7d4:	a806      	add	r0, sp, #24
    mbedtls_x509_bitstring bs = { 0, 0, NULL };
   de7d6:	9317      	str	r3, [sp, #92]	; 0x5c
   de7d8:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
   de7dc:	9319      	str	r3, [sp, #100]	; 0x64
    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
   de7de:	f7f7 fe5d 	bl	d649c <mbedtls_asn1_get_bitstring>
   de7e2:	b120      	cbz	r0, de7ee <mbedtls_x509_crt_parse_der+0x4de>
            if( ( ret = x509_get_ns_cert_type( p, end_ext_octet,
   de7e4:	f5b0 5614 	subs.w	r6, r0, #9472	; 0x2500
   de7e8:	f43f aed0 	beq.w	de58c <mbedtls_x509_crt_parse_der+0x27c>
   de7ec:	e646      	b.n	de47c <mbedtls_x509_crt_parse_der+0x16c>
    if( bs.len < 1 )
   de7ee:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   de7f0:	b302      	cbz	r2, de834 <mbedtls_x509_crt_parse_der+0x524>
    *key_usage = 0;
   de7f2:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
   de7f6:	9919      	ldr	r1, [sp, #100]	; 0x64
   de7f8:	5c0b      	ldrb	r3, [r1, r0]
   de7fa:	00c6      	lsls	r6, r0, #3
   de7fc:	fa03 f606 	lsl.w	r6, r3, r6
   de800:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
   de804:	3001      	adds	r0, #1
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
   de806:	4333      	orrs	r3, r6
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
   de808:	4282      	cmp	r2, r0
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
   de80a:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
   de80e:	f43f aebd 	beq.w	de58c <mbedtls_x509_crt_parse_der+0x27c>
   de812:	2804      	cmp	r0, #4
   de814:	d1f0      	bne.n	de7f8 <mbedtls_x509_crt_parse_der+0x4e8>
   de816:	e6b9      	b.n	de58c <mbedtls_x509_crt_parse_der+0x27c>
    if( ( ret = mbedtls_asn1_get_sequence_of( p, end, ext_key_usage, MBEDTLS_ASN1_OID ) ) != 0 )
   de818:	2306      	movs	r3, #6
   de81a:	f504 7284 	add.w	r2, r4, #264	; 0x108
   de81e:	4641      	mov	r1, r8
   de820:	a806      	add	r0, sp, #24
   de822:	f7f7 fe71 	bl	d6508 <mbedtls_asn1_get_sequence_of>
   de826:	2800      	cmp	r0, #0
   de828:	d1dc      	bne.n	de7e4 <mbedtls_x509_crt_parse_der+0x4d4>
    if( ext_key_usage->buf.p == NULL )
   de82a:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   de82e:	2b00      	cmp	r3, #0
   de830:	f47f aeac 	bne.w	de58c <mbedtls_x509_crt_parse_der+0x27c>
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );
   de834:	4e42      	ldr	r6, [pc, #264]	; (de940 <mbedtls_x509_crt_parse_der+0x630>)
        if( ret != 0 )
   de836:	e621      	b.n	de47c <mbedtls_x509_crt_parse_der+0x16c>
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   de838:	2330      	movs	r3, #48	; 0x30
   de83a:	aa0a      	add	r2, sp, #40	; 0x28
   de83c:	4641      	mov	r1, r8
   de83e:	a806      	add	r0, sp, #24
   de840:	f7f7 fdc8 	bl	d63d4 <mbedtls_asn1_get_tag>
   de844:	2800      	cmp	r0, #0
   de846:	d18b      	bne.n	de760 <mbedtls_x509_crt_parse_der+0x450>
    if( *p + len != end )
   de848:	9b06      	ldr	r3, [sp, #24]
   de84a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   de84c:	4413      	add	r3, r2
   de84e:	429e      	cmp	r6, r3
   de850:	d13d      	bne.n	de8ce <mbedtls_x509_crt_parse_der+0x5be>
            if( ( ret = x509_get_subject_alt_name( p, end_ext_octet,
   de852:	f104 08e8 	add.w	r8, r4, #232	; 0xe8
    while( *p < end )
   de856:	9a06      	ldr	r2, [sp, #24]
   de858:	4296      	cmp	r6, r2
   de85a:	d934      	bls.n	de8c6 <mbedtls_x509_crt_parse_der+0x5b6>
        if( ( end - *p ) < 1 )
   de85c:	1ab3      	subs	r3, r6, r2
   de85e:	2b00      	cmp	r3, #0
   de860:	dd57      	ble.n	de912 <mbedtls_x509_crt_parse_der+0x602>
        tag = **p;
   de862:	f812 3b01 	ldrb.w	r3, [r2], #1
        (*p)++;
   de866:	9206      	str	r2, [sp, #24]
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
   de868:	4631      	mov	r1, r6
   de86a:	aa17      	add	r2, sp, #92	; 0x5c
   de86c:	a806      	add	r0, sp, #24
        tag = **p;
   de86e:	9303      	str	r3, [sp, #12]
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
   de870:	f7f7 fd64 	bl	d633c <mbedtls_asn1_get_len>
   de874:	9b03      	ldr	r3, [sp, #12]
   de876:	2800      	cmp	r0, #0
   de878:	f47f af72 	bne.w	de760 <mbedtls_x509_crt_parse_der+0x450>
        if( ( tag & MBEDTLS_ASN1_TAG_CLASS_MASK ) !=
   de87c:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   de880:	2a80      	cmp	r2, #128	; 0x80
   de882:	f47f af34 	bne.w	de6ee <mbedtls_x509_crt_parse_der+0x3de>
        if( tag != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | 2 ) )
   de886:	2b82      	cmp	r3, #130	; 0x82
   de888:	d004      	beq.n	de894 <mbedtls_x509_crt_parse_der+0x584>
            *p += tag_len;
   de88a:	9b06      	ldr	r3, [sp, #24]
   de88c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
        *p += buf->len;
   de88e:	4413      	add	r3, r2
   de890:	9306      	str	r3, [sp, #24]
   de892:	e7e0      	b.n	de856 <mbedtls_x509_crt_parse_der+0x546>
        if( cur->buf.p != NULL )
   de894:	f8d8 3008 	ldr.w	r3, [r8, #8]
   de898:	b15b      	cbz	r3, de8b2 <mbedtls_x509_crt_parse_der+0x5a2>
            if( cur->next != NULL )
   de89a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   de89e:	2b00      	cmp	r3, #0
   de8a0:	d147      	bne.n	de932 <mbedtls_x509_crt_parse_der+0x622>
            cur->next = (mbedtls_asn1_sequence *)mbedtls_calloc( 1, sizeof( mbedtls_asn1_sequence ) );
   de8a2:	2110      	movs	r1, #16
   de8a4:	2001      	movs	r0, #1
   de8a6:	f009 ff97 	bl	e87d8 <calloc>
   de8aa:	f8c8 000c 	str.w	r0, [r8, #12]
            if( cur->next == NULL )
   de8ae:	b390      	cbz	r0, de916 <mbedtls_x509_crt_parse_der+0x606>
   de8b0:	4680      	mov	r8, r0
        buf->tag = tag;
   de8b2:	2382      	movs	r3, #130	; 0x82
   de8b4:	f8c8 3000 	str.w	r3, [r8]
        buf->p = *p;
   de8b8:	9b06      	ldr	r3, [sp, #24]
   de8ba:	f8c8 3008 	str.w	r3, [r8, #8]
        buf->len = tag_len;
   de8be:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   de8c0:	f8c8 2004 	str.w	r2, [r8, #4]
   de8c4:	e7e3      	b.n	de88e <mbedtls_x509_crt_parse_der+0x57e>
    cur->next = NULL;
   de8c6:	f8c8 900c 	str.w	r9, [r8, #12]
    if( *p != end )
   de8ca:	f43f ae5f 	beq.w	de58c <mbedtls_x509_crt_parse_der+0x27c>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   de8ce:	4e1d      	ldr	r6, [pc, #116]	; (de944 <mbedtls_x509_crt_parse_der+0x634>)
            mbedtls_x509_crt_free( crt );
   de8d0:	e5d4      	b.n	de47c <mbedtls_x509_crt_parse_der+0x16c>
    if( *p != end )
   de8d2:	f43f ae73 	beq.w	de5bc <mbedtls_x509_crt_parse_der+0x2ac>
   de8d6:	e7fa      	b.n	de8ce <mbedtls_x509_crt_parse_der+0x5be>
    if( ( ret = mbedtls_x509_get_sig( &p, end, &crt->sig ) ) != 0 )
   de8d8:	f504 728e 	add.w	r2, r4, #284	; 0x11c
   de8dc:	4639      	mov	r1, r7
   de8de:	a806      	add	r0, sp, #24
   de8e0:	f7f8 f922 	bl	d6b28 <mbedtls_x509_get_sig>
   de8e4:	4606      	mov	r6, r0
   de8e6:	2800      	cmp	r0, #0
   de8e8:	f47f adc8 	bne.w	de47c <mbedtls_x509_crt_parse_der+0x16c>
    if( p != end )
   de8ec:	9b06      	ldr	r3, [sp, #24]
   de8ee:	429f      	cmp	r7, r3
   de8f0:	f43f ad7f 	beq.w	de3f2 <mbedtls_x509_crt_parse_der+0xe2>
   de8f4:	e552      	b.n	de39c <mbedtls_x509_crt_parse_der+0x8c>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
   de8f6:	4e14      	ldr	r6, [pc, #80]	; (de948 <mbedtls_x509_crt_parse_der+0x638>)
        if( prev )
   de8f8:	f1ba 0f00 	cmp.w	sl, #0
   de8fc:	d103      	bne.n	de906 <mbedtls_x509_crt_parse_der+0x5f6>
            mbedtls_free( crt );
   de8fe:	4620      	mov	r0, r4
   de900:	f006 ff5e 	bl	e57c0 <free>
   de904:	e575      	b.n	de3f2 <mbedtls_x509_crt_parse_der+0xe2>
            prev->next = NULL;
   de906:	2300      	movs	r3, #0
   de908:	f8ca 3130 	str.w	r3, [sl, #304]	; 0x130
   de90c:	e53d      	b.n	de38a <mbedtls_x509_crt_parse_der+0x7a>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
   de90e:	4e0e      	ldr	r6, [pc, #56]	; (de948 <mbedtls_x509_crt_parse_der+0x638>)
   de910:	e56f      	b.n	de3f2 <mbedtls_x509_crt_parse_der+0xe2>
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   de912:	4e0e      	ldr	r6, [pc, #56]	; (de94c <mbedtls_x509_crt_parse_der+0x63c>)
   de914:	e5b2      	b.n	de47c <mbedtls_x509_crt_parse_der+0x16c>
                        MBEDTLS_ERR_ASN1_ALLOC_FAILED );
   de916:	4e0e      	ldr	r6, [pc, #56]	; (de950 <mbedtls_x509_crt_parse_der+0x640>)
   de918:	e5b0      	b.n	de47c <mbedtls_x509_crt_parse_der+0x16c>
        crt->next = (mbedtls_x509_crt *)mbedtls_calloc( 1, sizeof( mbedtls_x509_crt ) );
   de91a:	f44f 719a 	mov.w	r1, #308	; 0x134
   de91e:	2001      	movs	r0, #1
   de920:	f009 ff5a 	bl	e87d8 <calloc>
   de924:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
        if( crt->next == NULL )
   de928:	2800      	cmp	r0, #0
   de92a:	f47f ad0a 	bne.w	de342 <mbedtls_x509_crt_parse_der+0x32>
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );
   de92e:	4e09      	ldr	r6, [pc, #36]	; (de954 <mbedtls_x509_crt_parse_der+0x644>)
   de930:	e55f      	b.n	de3f2 <mbedtls_x509_crt_parse_der+0xe2>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );
   de932:	4e09      	ldr	r6, [pc, #36]	; (de958 <mbedtls_x509_crt_parse_der+0x648>)
   de934:	e5a2      	b.n	de47c <mbedtls_x509_crt_parse_der+0x16c>
   de936:	bf00      	nop
   de938:	ffffda9e 	.word	0xffffda9e
   de93c:	ffffdf80 	.word	0xffffdf80
   de940:	ffffda9c 	.word	0xffffda9c
   de944:	ffffda9a 	.word	0xffffda9a
   de948:	ffffd800 	.word	0xffffd800
   de94c:	ffffdaa0 	.word	0xffffdaa0
   de950:	ffffda96 	.word	0xffffda96
   de954:	ffffd780 	.word	0xffffd780
   de958:	ffffdb00 	.word	0xffffdb00

000de95c <mbedtls_x509_crt_parse>:
{
   de95c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   de960:	468a      	mov	sl, r1
   de962:	b089      	sub	sp, #36	; 0x24
   de964:	4617      	mov	r7, r2
    if( chain == NULL || buf == NULL )
   de966:	4680      	mov	r8, r0
   de968:	2800      	cmp	r0, #0
   de96a:	d059      	beq.n	dea20 <mbedtls_x509_crt_parse+0xc4>
   de96c:	2900      	cmp	r1, #0
   de96e:	d057      	beq.n	dea20 <mbedtls_x509_crt_parse+0xc4>
    if( buflen != 0 && buf[buflen - 1] == '\0' &&
   de970:	b142      	cbz	r2, de984 <mbedtls_x509_crt_parse+0x28>
   de972:	188a      	adds	r2, r1, r2
   de974:	f812 6c01 	ldrb.w	r6, [r2, #-1]
   de978:	b926      	cbnz	r6, de984 <mbedtls_x509_crt_parse+0x28>
        strstr( (const char *) buf, "-----BEGIN CERTIFICATE-----" ) != NULL )
   de97a:	492b      	ldr	r1, [pc, #172]	; (dea28 <mbedtls_x509_crt_parse+0xcc>)
   de97c:	4650      	mov	r0, sl
   de97e:	f00a f835 	bl	e89ec <strstr>
    if( buflen != 0 && buf[buflen - 1] == '\0' &&
   de982:	b948      	cbnz	r0, de998 <mbedtls_x509_crt_parse+0x3c>
        return mbedtls_x509_crt_parse_der( chain, buf, buflen );
   de984:	463a      	mov	r2, r7
   de986:	4651      	mov	r1, sl
   de988:	4640      	mov	r0, r8
   de98a:	f7ff fcc1 	bl	de310 <mbedtls_x509_crt_parse_der>
   de98e:	4604      	mov	r4, r0
}
   de990:	4620      	mov	r0, r4
   de992:	b009      	add	sp, #36	; 0x24
   de994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            ret = mbedtls_pem_read_buffer( &pem,
   de998:	f8df b08c 	ldr.w	fp, [pc, #140]	; dea28 <mbedtls_x509_crt_parse+0xcc>
    int success = 0, first_error = 0, total_failed = 0;
   de99c:	4634      	mov	r4, r6
   de99e:	46b1      	mov	r9, r6
        while( buflen > 1 )
   de9a0:	2f01      	cmp	r7, #1
   de9a2:	d935      	bls.n	dea10 <mbedtls_x509_crt_parse+0xb4>
            mbedtls_pem_init( &pem );
   de9a4:	a805      	add	r0, sp, #20
   de9a6:	f005 f9c1 	bl	e3d2c <mbedtls_pem_init>
            ret = mbedtls_pem_read_buffer( &pem,
   de9aa:	aa04      	add	r2, sp, #16
   de9ac:	9202      	str	r2, [sp, #8]
   de9ae:	2200      	movs	r2, #0
   de9b0:	e9cd 2200 	strd	r2, r2, [sp]
   de9b4:	4653      	mov	r3, sl
   de9b6:	4a1d      	ldr	r2, [pc, #116]	; (dea2c <mbedtls_x509_crt_parse+0xd0>)
   de9b8:	4659      	mov	r1, fp
   de9ba:	a805      	add	r0, sp, #20
   de9bc:	f005 f9bc 	bl	e3d38 <mbedtls_pem_read_buffer>
            if( ret == 0 )
   de9c0:	4605      	mov	r5, r0
   de9c2:	b978      	cbnz	r0, de9e4 <mbedtls_x509_crt_parse+0x88>
                buflen -= use_len;
   de9c4:	9a04      	ldr	r2, [sp, #16]
            ret = mbedtls_x509_crt_parse_der( chain, pem.buf, pem.buflen );
   de9c6:	4640      	mov	r0, r8
                buflen -= use_len;
   de9c8:	1abf      	subs	r7, r7, r2
                buf += use_len;
   de9ca:	4492      	add	sl, r2
            ret = mbedtls_x509_crt_parse_der( chain, pem.buf, pem.buflen );
   de9cc:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
   de9d0:	f7ff fc9e 	bl	de310 <mbedtls_x509_crt_parse_der>
   de9d4:	4605      	mov	r5, r0
            mbedtls_pem_free( &pem );
   de9d6:	a805      	add	r0, sp, #20
   de9d8:	f005 fa38 	bl	e3e4c <mbedtls_pem_free>
            if( ret != 0 )
   de9dc:	b99d      	cbnz	r5, dea06 <mbedtls_x509_crt_parse+0xaa>
            success = 1;
   de9de:	f04f 0901 	mov.w	r9, #1
   de9e2:	e7dd      	b.n	de9a0 <mbedtls_x509_crt_parse+0x44>
            else if( ret == MBEDTLS_ERR_PEM_BAD_INPUT_DATA )
   de9e4:	f510 5fa4 	cmn.w	r0, #5248	; 0x1480
   de9e8:	d010      	beq.n	dea0c <mbedtls_x509_crt_parse+0xb0>
            else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
   de9ea:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
   de9ee:	d00f      	beq.n	dea10 <mbedtls_x509_crt_parse+0xb4>
                mbedtls_pem_free( &pem );
   de9f0:	a805      	add	r0, sp, #20
   de9f2:	f005 fa2b 	bl	e3e4c <mbedtls_pem_free>
                buflen -= use_len;
   de9f6:	9a04      	ldr	r2, [sp, #16]
   de9f8:	1abf      	subs	r7, r7, r2
                buf += use_len;
   de9fa:	4492      	add	sl, r2
                if( first_error == 0 )
   de9fc:	2c00      	cmp	r4, #0
   de9fe:	bf08      	it	eq
   dea00:	462c      	moveq	r4, r5
                total_failed++;
   dea02:	3601      	adds	r6, #1
                continue;
   dea04:	e7cc      	b.n	de9a0 <mbedtls_x509_crt_parse+0x44>
                if( ret == MBEDTLS_ERR_X509_ALLOC_FAILED )
   dea06:	f515 5f22 	cmn.w	r5, #10368	; 0x2880
   dea0a:	d1f7      	bne.n	de9fc <mbedtls_x509_crt_parse+0xa0>
   dea0c:	462c      	mov	r4, r5
   dea0e:	e7bf      	b.n	de990 <mbedtls_x509_crt_parse+0x34>
    if( success )
   dea10:	f1b9 0f00 	cmp.w	r9, #0
   dea14:	d106      	bne.n	dea24 <mbedtls_x509_crt_parse+0xc8>
        return( MBEDTLS_ERR_X509_CERT_UNKNOWN_FORMAT );
   dea16:	4b06      	ldr	r3, [pc, #24]	; (dea30 <mbedtls_x509_crt_parse+0xd4>)
   dea18:	2c00      	cmp	r4, #0
   dea1a:	bf08      	it	eq
   dea1c:	461c      	moveq	r4, r3
   dea1e:	e7b7      	b.n	de990 <mbedtls_x509_crt_parse+0x34>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
   dea20:	4c04      	ldr	r4, [pc, #16]	; (dea34 <mbedtls_x509_crt_parse+0xd8>)
   dea22:	e7b5      	b.n	de990 <mbedtls_x509_crt_parse+0x34>
   dea24:	4634      	mov	r4, r6
   dea26:	e7b3      	b.n	de990 <mbedtls_x509_crt_parse+0x34>
   dea28:	000eca15 	.word	0x000eca15
   dea2c:	000eca31 	.word	0x000eca31
   dea30:	ffffd880 	.word	0xffffd880
   dea34:	ffffd800 	.word	0xffffd800

000dea38 <mbedtls_pk_init>:
 */
void mbedtls_pk_init( mbedtls_pk_context *ctx )
{
    PK_VALIDATE( ctx != NULL );

    ctx->pk_info = NULL;
   dea38:	2300      	movs	r3, #0
    ctx->pk_ctx = NULL;
   dea3a:	e9c0 3300 	strd	r3, r3, [r0]
}
   dea3e:	4770      	bx	lr

000dea40 <mbedtls_pk_free>:

/*
 * Free (the components of) a mbedtls_pk_context
 */
void mbedtls_pk_free( mbedtls_pk_context *ctx )
{
   dea40:	b510      	push	{r4, lr}
    if( ctx == NULL )
   dea42:	4604      	mov	r4, r0
   dea44:	b150      	cbz	r0, dea5c <mbedtls_pk_free+0x1c>
        return;

    if ( ctx->pk_info != NULL )
   dea46:	6803      	ldr	r3, [r0, #0]
   dea48:	b113      	cbz	r3, dea50 <mbedtls_pk_free+0x10>
        ctx->pk_info->ctx_free_func( ctx->pk_ctx );
   dea4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   dea4c:	6840      	ldr	r0, [r0, #4]
   dea4e:	4798      	blx	r3

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_pk_context ) );
   dea50:	4620      	mov	r0, r4
   dea52:	2108      	movs	r1, #8
}
   dea54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_pk_context ) );
   dea58:	f7fc bac0 	b.w	dafdc <mbedtls_platform_zeroize>
}
   dea5c:	bd10      	pop	{r4, pc}
	...

000dea60 <mbedtls_pk_info_from_type>:
/*
 * Get pk_info structure from type
 */
const mbedtls_pk_info_t * mbedtls_pk_info_from_type( mbedtls_pk_type_t pk_type )
{
    switch( pk_type ) {
   dea60:	3801      	subs	r0, #1
   dea62:	b2c0      	uxtb	r0, r0
   dea64:	2803      	cmp	r0, #3
   dea66:	bf9a      	itte	ls
   dea68:	4b02      	ldrls	r3, [pc, #8]	; (dea74 <mbedtls_pk_info_from_type+0x14>)
   dea6a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
{
   dea6e:	2000      	movhi	r0, #0
#endif
        /* MBEDTLS_PK_RSA_ALT omitted on purpose */
        default:
            return( NULL );
    }
}
   dea70:	4770      	bx	lr
   dea72:	bf00      	nop
   dea74:	000eca7c 	.word	0x000eca7c

000dea78 <mbedtls_pk_setup>:

/*
 * Initialise context
 */
int mbedtls_pk_setup( mbedtls_pk_context *ctx, const mbedtls_pk_info_t *info )
{
   dea78:	b570      	push	{r4, r5, r6, lr}
   dea7a:	4605      	mov	r5, r0
    PK_VALIDATE_RET( ctx != NULL );
    if( info == NULL || ctx->pk_info != NULL )
   dea7c:	460e      	mov	r6, r1
   dea7e:	b141      	cbz	r1, dea92 <mbedtls_pk_setup+0x1a>
   dea80:	6804      	ldr	r4, [r0, #0]
   dea82:	b934      	cbnz	r4, dea92 <mbedtls_pk_setup+0x1a>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ( ctx->pk_ctx = info->ctx_alloc_func() ) == NULL )
   dea84:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   dea86:	4798      	blx	r3
   dea88:	6068      	str	r0, [r5, #4]
   dea8a:	b120      	cbz	r0, dea96 <mbedtls_pk_setup+0x1e>
        return( MBEDTLS_ERR_PK_ALLOC_FAILED );

    ctx->pk_info = info;
   dea8c:	602e      	str	r6, [r5, #0]

    return( 0 );
   dea8e:	4620      	mov	r0, r4
}
   dea90:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
   dea92:	4802      	ldr	r0, [pc, #8]	; (dea9c <mbedtls_pk_setup+0x24>)
   dea94:	e7fc      	b.n	dea90 <mbedtls_pk_setup+0x18>
        return( MBEDTLS_ERR_PK_ALLOC_FAILED );
   dea96:	4802      	ldr	r0, [pc, #8]	; (deaa0 <mbedtls_pk_setup+0x28>)
   dea98:	e7fa      	b.n	dea90 <mbedtls_pk_setup+0x18>
   dea9a:	bf00      	nop
   dea9c:	ffffc180 	.word	0xffffc180
   deaa0:	ffffc080 	.word	0xffffc080

000deaa4 <mbedtls_pk_can_do>:

/*
 * Tell if a PK can do the operations of the given type
 */
int mbedtls_pk_can_do( const mbedtls_pk_context *ctx, mbedtls_pk_type_t type )
{
   deaa4:	4603      	mov	r3, r0
   deaa6:	4608      	mov	r0, r1
    /* A context with null pk_info is not set up yet and can't do anything.
     * For backward compatibility, also accept NULL instead of a context
     * pointer. */
    if( ctx == NULL || ctx->pk_info == NULL )
   deaa8:	b11b      	cbz	r3, deab2 <mbedtls_pk_can_do+0xe>
   deaaa:	681b      	ldr	r3, [r3, #0]
   deaac:	b10b      	cbz	r3, deab2 <mbedtls_pk_can_do+0xe>
        return( 0 );

    return( ctx->pk_info->can_do( type ) );
   deaae:	68db      	ldr	r3, [r3, #12]
   deab0:	4718      	bx	r3
}
   deab2:	2000      	movs	r0, #0
   deab4:	4770      	bx	lr
	...

000deab8 <mbedtls_pk_verify_restartable>:
int mbedtls_pk_verify_restartable( mbedtls_pk_context *ctx,
               mbedtls_md_type_t md_alg,
               const unsigned char *hash, size_t hash_len,
               const unsigned char *sig, size_t sig_len,
               mbedtls_pk_restart_ctx *rs_ctx )
{
   deab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   deabc:	4616      	mov	r6, r2
    PK_VALIDATE_RET( ctx != NULL );
    PK_VALIDATE_RET( ( md_alg == MBEDTLS_MD_NONE && hash_len == 0 ) ||
                     hash != NULL );
    PK_VALIDATE_RET( sig != NULL );

    if( ctx->pk_info == NULL ||
   deabe:	6802      	ldr	r2, [r0, #0]
{
   deac0:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   deac4:	4604      	mov	r4, r0
   deac6:	460d      	mov	r5, r1
    if( ctx->pk_info == NULL ||
   deac8:	b912      	cbnz	r2, dead0 <mbedtls_pk_verify_restartable+0x18>
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
   deaca:	480d      	ldr	r0, [pc, #52]	; (deb00 <mbedtls_pk_verify_restartable+0x48>)
    if( ctx->pk_info->verify_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->verify_func( ctx->pk_ctx, md_alg, hash, hash_len,
                                       sig, sig_len ) );
}
   deacc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if( *hash_len != 0 )
   dead0:	b93b      	cbnz	r3, deae2 <mbedtls_pk_verify_restartable+0x2a>
    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
   dead2:	4608      	mov	r0, r1
   dead4:	f7fe f8fa 	bl	dcccc <mbedtls_md_info_from_type>
   dead8:	2800      	cmp	r0, #0
   deada:	d0f6      	beq.n	deaca <mbedtls_pk_verify_restartable+0x12>
    *hash_len = mbedtls_md_get_size( md_info );
   deadc:	f7fe fa30 	bl	dcf40 <mbedtls_md_get_size>
   deae0:	4603      	mov	r3, r0
    if( ctx->pk_info->verify_func == NULL )
   deae2:	6822      	ldr	r2, [r4, #0]
   deae4:	6917      	ldr	r7, [r2, #16]
   deae6:	b147      	cbz	r7, deafa <mbedtls_pk_verify_restartable+0x42>
    return( ctx->pk_info->verify_func( ctx->pk_ctx, md_alg, hash, hash_len,
   deae8:	e9cd 8908 	strd	r8, r9, [sp, #32]
   deaec:	6860      	ldr	r0, [r4, #4]
   deaee:	4632      	mov	r2, r6
   deaf0:	4629      	mov	r1, r5
   deaf2:	46bc      	mov	ip, r7
}
   deaf4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return( ctx->pk_info->verify_func( ctx->pk_ctx, md_alg, hash, hash_len,
   deaf8:	4760      	bx	ip
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
   deafa:	4802      	ldr	r0, [pc, #8]	; (deb04 <mbedtls_pk_verify_restartable+0x4c>)
   deafc:	e7e6      	b.n	deacc <mbedtls_pk_verify_restartable+0x14>
   deafe:	bf00      	nop
   deb00:	ffffc180 	.word	0xffffc180
   deb04:	ffffc100 	.word	0xffffc100

000deb08 <mbedtls_pk_verify>:
 * Verify a signature
 */
int mbedtls_pk_verify( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
               const unsigned char *hash, size_t hash_len,
               const unsigned char *sig, size_t sig_len )
{
   deb08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return( mbedtls_pk_verify_restartable( ctx, md_alg, hash, hash_len,
   deb0a:	2400      	movs	r4, #0
   deb0c:	9402      	str	r4, [sp, #8]
   deb0e:	9c07      	ldr	r4, [sp, #28]
   deb10:	9401      	str	r4, [sp, #4]
   deb12:	9c06      	ldr	r4, [sp, #24]
   deb14:	9400      	str	r4, [sp, #0]
   deb16:	f7ff ffcf 	bl	deab8 <mbedtls_pk_verify_restartable>
                                           sig, sig_len, NULL ) );
}
   deb1a:	b004      	add	sp, #16
   deb1c:	bd10      	pop	{r4, pc}
	...

000deb20 <mbedtls_pk_sign_restartable>:
             mbedtls_md_type_t md_alg,
             const unsigned char *hash, size_t hash_len,
             unsigned char *sig, size_t *sig_len,
             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng,
             mbedtls_pk_restart_ctx *rs_ctx )
{
   deb20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   deb24:	4692      	mov	sl, r2
    PK_VALIDATE_RET( ctx != NULL );
    PK_VALIDATE_RET( ( md_alg == MBEDTLS_MD_NONE && hash_len == 0 ) ||
                     hash != NULL );
    PK_VALIDATE_RET( sig != NULL );

    if( ctx->pk_info == NULL ||
   deb26:	6802      	ldr	r2, [r0, #0]
{
   deb28:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
   deb2c:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
   deb30:	4604      	mov	r4, r0
   deb32:	460d      	mov	r5, r1
    if( ctx->pk_info == NULL ||
   deb34:	b912      	cbnz	r2, deb3c <mbedtls_pk_sign_restartable+0x1c>
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
   deb36:	480f      	ldr	r0, [pc, #60]	; (deb74 <mbedtls_pk_sign_restartable+0x54>)
    if( ctx->pk_info->sign_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->sign_func( ctx->pk_ctx, md_alg, hash, hash_len,
                                     sig, sig_len, f_rng, p_rng ) );
}
   deb38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if( *hash_len != 0 )
   deb3c:	b93b      	cbnz	r3, deb4e <mbedtls_pk_sign_restartable+0x2e>
    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
   deb3e:	4608      	mov	r0, r1
   deb40:	f7fe f8c4 	bl	dcccc <mbedtls_md_info_from_type>
   deb44:	2800      	cmp	r0, #0
   deb46:	d0f6      	beq.n	deb36 <mbedtls_pk_sign_restartable+0x16>
    *hash_len = mbedtls_md_get_size( md_info );
   deb48:	f7fe f9fa 	bl	dcf40 <mbedtls_md_get_size>
   deb4c:	4603      	mov	r3, r0
    if( ctx->pk_info->sign_func == NULL )
   deb4e:	6822      	ldr	r2, [r4, #0]
   deb50:	f8d2 e014 	ldr.w	lr, [r2, #20]
   deb54:	f1be 0f00 	cmp.w	lr, #0
   deb58:	d00a      	beq.n	deb70 <mbedtls_pk_sign_restartable+0x50>
    return( ctx->pk_info->sign_func( ctx->pk_ctx, md_alg, hash, hash_len,
   deb5a:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
   deb5e:	e9cd 6708 	strd	r6, r7, [sp, #32]
   deb62:	6860      	ldr	r0, [r4, #4]
   deb64:	4652      	mov	r2, sl
   deb66:	4629      	mov	r1, r5
   deb68:	46f4      	mov	ip, lr
}
   deb6a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return( ctx->pk_info->sign_func( ctx->pk_ctx, md_alg, hash, hash_len,
   deb6e:	4760      	bx	ip
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
   deb70:	4801      	ldr	r0, [pc, #4]	; (deb78 <mbedtls_pk_sign_restartable+0x58>)
   deb72:	e7e1      	b.n	deb38 <mbedtls_pk_sign_restartable+0x18>
   deb74:	ffffc180 	.word	0xffffc180
   deb78:	ffffc100 	.word	0xffffc100

000deb7c <mbedtls_pk_encrypt>:
 */
int mbedtls_pk_encrypt( mbedtls_pk_context *ctx,
                const unsigned char *input, size_t ilen,
                unsigned char *output, size_t *olen, size_t osize,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
   deb7c:	b410      	push	{r4}
    PK_VALIDATE_RET( ctx != NULL );
    PK_VALIDATE_RET( input != NULL || ilen == 0 );
    PK_VALIDATE_RET( output != NULL || osize == 0 );
    PK_VALIDATE_RET( olen != NULL );

    if( ctx->pk_info == NULL )
   deb7e:	6804      	ldr	r4, [r0, #0]
   deb80:	b134      	cbz	r4, deb90 <mbedtls_pk_encrypt+0x14>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ctx->pk_info->encrypt_func == NULL )
   deb82:	69e4      	ldr	r4, [r4, #28]
   deb84:	b144      	cbz	r4, deb98 <mbedtls_pk_encrypt+0x1c>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->encrypt_func( ctx->pk_ctx, input, ilen,
   deb86:	46a4      	mov	ip, r4
   deb88:	6840      	ldr	r0, [r0, #4]
                output, olen, osize, f_rng, p_rng ) );
}
   deb8a:	f85d 4b04 	ldr.w	r4, [sp], #4
    return( ctx->pk_info->encrypt_func( ctx->pk_ctx, input, ilen,
   deb8e:	4760      	bx	ip
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
   deb90:	4802      	ldr	r0, [pc, #8]	; (deb9c <mbedtls_pk_encrypt+0x20>)
}
   deb92:	f85d 4b04 	ldr.w	r4, [sp], #4
   deb96:	4770      	bx	lr
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
   deb98:	4801      	ldr	r0, [pc, #4]	; (deba0 <mbedtls_pk_encrypt+0x24>)
   deb9a:	e7fa      	b.n	deb92 <mbedtls_pk_encrypt+0x16>
   deb9c:	ffffc180 	.word	0xffffc180
   deba0:	ffffc100 	.word	0xffffc100

000deba4 <mbedtls_pk_get_bitlen>:
 */
size_t mbedtls_pk_get_bitlen( const mbedtls_pk_context *ctx )
{
    /* For backward compatibility, accept NULL or a context that
     * isn't set up yet, and return a fake value that should be safe. */
    if( ctx == NULL || ctx->pk_info == NULL )
   deba4:	b120      	cbz	r0, debb0 <mbedtls_pk_get_bitlen+0xc>
   deba6:	6803      	ldr	r3, [r0, #0]
   deba8:	b113      	cbz	r3, debb0 <mbedtls_pk_get_bitlen+0xc>
        return( 0 );

    return( ctx->pk_info->get_bitlen( ctx->pk_ctx ) );
   debaa:	689b      	ldr	r3, [r3, #8]
   debac:	6840      	ldr	r0, [r0, #4]
   debae:	4718      	bx	r3
}
   debb0:	2000      	movs	r0, #0
   debb2:	4770      	bx	lr

000debb4 <mbedtls_pk_verify_ext>:
{
   debb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   debb8:	461e      	mov	r6, r3
    if( ctx->pk_info == NULL )
   debba:	6813      	ldr	r3, [r2, #0]
{
   debbc:	b087      	sub	sp, #28
   debbe:	e9dd 9b10 	ldrd	r9, fp, [sp, #64]	; 0x40
   debc2:	e9dd a812 	ldrd	sl, r8, [sp, #72]	; 0x48
   debc6:	4607      	mov	r7, r0
   debc8:	460c      	mov	r4, r1
   debca:	4615      	mov	r5, r2
    if( ctx->pk_info == NULL )
   debcc:	b923      	cbnz	r3, debd8 <mbedtls_pk_verify_ext+0x24>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
   debce:	4c21      	ldr	r4, [pc, #132]	; (dec54 <mbedtls_pk_verify_ext+0xa0>)
}
   debd0:	4620      	mov	r0, r4
   debd2:	b007      	add	sp, #28
   debd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( ! mbedtls_pk_can_do( ctx, type ) )
   debd8:	4601      	mov	r1, r0
   debda:	4610      	mov	r0, r2
   debdc:	f7ff ff62 	bl	deaa4 <mbedtls_pk_can_do>
   debe0:	b398      	cbz	r0, dec4a <mbedtls_pk_verify_ext+0x96>
    if( type == MBEDTLS_PK_RSASSA_PSS )
   debe2:	2f06      	cmp	r7, #6
   debe4:	d124      	bne.n	dec30 <mbedtls_pk_verify_ext+0x7c>
        if( options == NULL )
   debe6:	2c00      	cmp	r4, #0
   debe8:	d0f1      	beq.n	debce <mbedtls_pk_verify_ext+0x1a>
 *
 * \return          Key length in bytes, or 0 on error
 */
static inline size_t mbedtls_pk_get_len( const mbedtls_pk_context *ctx )
{
    return( ( mbedtls_pk_get_bitlen( ctx ) + 7 ) / 8 );
   debea:	4628      	mov	r0, r5
   debec:	f7ff ffda 	bl	deba4 <mbedtls_pk_get_bitlen>
   debf0:	3007      	adds	r0, #7
        if( sig_len < mbedtls_pk_get_len( ctx ) )
   debf2:	ebb8 0fd0 	cmp.w	r8, r0, lsr #3
   debf6:	d32a      	bcc.n	dec4e <mbedtls_pk_verify_ext+0x9a>
        ret = mbedtls_rsa_rsassa_pss_verify_ext( mbedtls_pk_rsa( *ctx ),
   debf8:	f8cd a014 	str.w	sl, [sp, #20]
   debfc:	6863      	ldr	r3, [r4, #4]
   debfe:	9304      	str	r3, [sp, #16]
   dec00:	7823      	ldrb	r3, [r4, #0]
   dec02:	6868      	ldr	r0, [r5, #4]
   dec04:	e9cd 9302 	strd	r9, r3, [sp, #8]
   dec08:	2300      	movs	r3, #0
   dec0a:	e9cd 6b00 	strd	r6, fp, [sp]
   dec0e:	461a      	mov	r2, r3
   dec10:	4619      	mov	r1, r3
   dec12:	f7f9 fa81 	bl	d8118 <mbedtls_rsa_rsassa_pss_verify_ext>
        if( ret != 0 )
   dec16:	4604      	mov	r4, r0
   dec18:	2800      	cmp	r0, #0
   dec1a:	d1d9      	bne.n	debd0 <mbedtls_pk_verify_ext+0x1c>
   dec1c:	4628      	mov	r0, r5
   dec1e:	f7ff ffc1 	bl	deba4 <mbedtls_pk_get_bitlen>
            return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );
   dec22:	4b0d      	ldr	r3, [pc, #52]	; (dec58 <mbedtls_pk_verify_ext+0xa4>)
   dec24:	3007      	adds	r0, #7
   dec26:	ebb8 0fd0 	cmp.w	r8, r0, lsr #3
   dec2a:	bf88      	it	hi
   dec2c:	461c      	movhi	r4, r3
   dec2e:	e7cf      	b.n	debd0 <mbedtls_pk_verify_ext+0x1c>
    if( options != NULL )
   dec30:	2c00      	cmp	r4, #0
   dec32:	d1cc      	bne.n	debce <mbedtls_pk_verify_ext+0x1a>
    return( mbedtls_pk_verify( ctx, md_alg, hash, hash_len, sig, sig_len ) );
   dec34:	465b      	mov	r3, fp
   dec36:	464a      	mov	r2, r9
   dec38:	4631      	mov	r1, r6
   dec3a:	4628      	mov	r0, r5
   dec3c:	e9cd a810 	strd	sl, r8, [sp, #64]	; 0x40
}
   dec40:	b007      	add	sp, #28
   dec42:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return( mbedtls_pk_verify( ctx, md_alg, hash, hash_len, sig, sig_len ) );
   dec46:	f7ff bf5f 	b.w	deb08 <mbedtls_pk_verify>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
   dec4a:	4c04      	ldr	r4, [pc, #16]	; (dec5c <mbedtls_pk_verify_ext+0xa8>)
   dec4c:	e7c0      	b.n	debd0 <mbedtls_pk_verify_ext+0x1c>
            return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
   dec4e:	4c04      	ldr	r4, [pc, #16]	; (dec60 <mbedtls_pk_verify_ext+0xac>)
   dec50:	e7be      	b.n	debd0 <mbedtls_pk_verify_ext+0x1c>
   dec52:	bf00      	nop
   dec54:	ffffc180 	.word	0xffffc180
   dec58:	ffffc700 	.word	0xffffc700
   dec5c:	ffffc100 	.word	0xffffc100
   dec60:	ffffbc80 	.word	0xffffbc80

000dec64 <mbedtls_pk_get_name>:
/*
 * Access the PK type name
 */
const char *mbedtls_pk_get_name( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
   dec64:	b118      	cbz	r0, dec6e <mbedtls_pk_get_name+0xa>
   dec66:	6803      	ldr	r3, [r0, #0]
   dec68:	b10b      	cbz	r3, dec6e <mbedtls_pk_get_name+0xa>
        return( "invalid PK" );

    return( ctx->pk_info->name );
   dec6a:	6858      	ldr	r0, [r3, #4]
   dec6c:	4770      	bx	lr
        return( "invalid PK" );
   dec6e:	4801      	ldr	r0, [pc, #4]	; (dec74 <mbedtls_pk_get_name+0x10>)
}
   dec70:	4770      	bx	lr
   dec72:	bf00      	nop
   dec74:	000eca70 	.word	0x000eca70

000dec78 <mbedtls_pk_get_type>:
/*
 * Access the PK type
 */
mbedtls_pk_type_t mbedtls_pk_get_type( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
   dec78:	b110      	cbz	r0, dec80 <mbedtls_pk_get_type+0x8>
   dec7a:	6800      	ldr	r0, [r0, #0]
   dec7c:	b100      	cbz	r0, dec80 <mbedtls_pk_get_type+0x8>
        return( MBEDTLS_PK_NONE );

    return( ctx->pk_info->type );
   dec7e:	7800      	ldrb	r0, [r0, #0]
}
   dec80:	4770      	bx	lr

000dec82 <_ZL13ssl_set_timerP19mbedtls_ssl_contextm>:
 * Start a timer.
 * Passing millisecs = 0 cancels a running timer.
 */
static void ssl_set_timer( mbedtls_ssl_context *ssl, uint32_t millisecs )
{
    if( ssl->f_set_timer == NULL )
   dec82:	6c83      	ldr	r3, [r0, #72]	; 0x48
{
   dec84:	460a      	mov	r2, r1
    if( ssl->f_set_timer == NULL )
   dec86:	b113      	cbz	r3, dec8e <_ZL13ssl_set_timerP19mbedtls_ssl_contextm+0xc>
        return;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "set_timer to %d ms", (int) millisecs ) );
    ssl->f_set_timer( ssl->p_timer, millisecs / 4, millisecs );
   dec88:	6c40      	ldr	r0, [r0, #68]	; 0x44
   dec8a:	0889      	lsrs	r1, r1, #2
   dec8c:	4718      	bx	r3
}
   dec8e:	4770      	bx	lr

000dec90 <_ZL23ssl_update_out_pointersP19mbedtls_ssl_contextP21mbedtls_ssl_transform>:
        ssl->out_iv  = ssl->out_hdr + 13;
    }
    else
#endif
    {
        ssl->out_ctr = ssl->out_hdr - 8;
   dec90:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
   dec94:	f1a3 0208 	sub.w	r2, r3, #8
   dec98:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
        ssl->out_len = ssl->out_hdr + 3;
   dec9c:	1cda      	adds	r2, r3, #3
        ssl->out_iv  = ssl->out_hdr + 5;
   dec9e:	3305      	adds	r3, #5
        ssl->out_len = ssl->out_hdr + 3;
   deca0:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
        ssl->out_iv  = ssl->out_hdr + 5;
   deca4:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
    }

    /* Adjust out_msg to make space for explicit IV, if used. */
    if( transform != NULL &&
   deca8:	b131      	cbz	r1, decb8 <_ZL23ssl_update_out_pointersP19mbedtls_ssl_contextP21mbedtls_ssl_transform+0x28>
   decaa:	68c2      	ldr	r2, [r0, #12]
   decac:	2a01      	cmp	r2, #1
        ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
    {
        ssl->out_msg = ssl->out_iv + transform->ivlen - transform->fixed_ivlen;
   decae:	bfc2      	ittt	gt
   decb0:	e9d1 2103 	ldrdgt	r2, r1, [r1, #12]
   decb4:	1a52      	subgt	r2, r2, r1
   decb6:	189b      	addgt	r3, r3, r2
   decb8:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
    }
    else
        ssl->out_msg = ssl->out_iv;
}
   decbc:	4770      	bx	lr
	...

000decc0 <_ZL28ssl_calc_finished_tls_sha256P19mbedtls_ssl_contextPhi>:
{
   decc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    mbedtls_ssl_session *session = ssl->session_negotiate;
   decc2:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
{
   decc4:	b0ab      	sub	sp, #172	; 0xac
   decc6:	4604      	mov	r4, r0
   decc8:	460e      	mov	r6, r1
   decca:	4617      	mov	r7, r2
    if( !session )
   deccc:	b905      	cbnz	r5, decd0 <_ZL28ssl_calc_finished_tls_sha256P19mbedtls_ssl_contextPhi+0x10>
        session = ssl->session;
   decce:	6a85      	ldr	r5, [r0, #40]	; 0x28
    mbedtls_sha256_init( &sha256 );
   decd0:	a80f      	add	r0, sp, #60	; 0x3c
   decd2:	f7f6 fb5f 	bl	d5394 <mbedtls_sha256_init>
    mbedtls_sha256_clone( &sha256, &ssl->handshake->fin_sha256 );
   decd6:	6b21      	ldr	r1, [r4, #48]	; 0x30
   decd8:	a80f      	add	r0, sp, #60	; 0x3c
   decda:	f501 71ac 	add.w	r1, r1, #344	; 0x158
   decde:	f7f6 fb62 	bl	d53a6 <mbedtls_sha256_clone>
    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
   dece2:	4b10      	ldr	r3, [pc, #64]	; (ded24 <_ZL28ssl_calc_finished_tls_sha256P19mbedtls_ssl_contextPhi+0x64>)
   dece4:	4a10      	ldr	r2, [pc, #64]	; (ded28 <_ZL28ssl_calc_finished_tls_sha256P19mbedtls_ssl_contextPhi+0x68>)
    mbedtls_sha256_finish_ret( &sha256, padbuf );
   dece6:	a907      	add	r1, sp, #28
    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
   dece8:	2f00      	cmp	r7, #0
   decea:	bf08      	it	eq
   decec:	461a      	moveq	r2, r3
    mbedtls_sha256_finish_ret( &sha256, padbuf );
   decee:	a80f      	add	r0, sp, #60	; 0x3c
    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
   decf0:	9205      	str	r2, [sp, #20]
    mbedtls_sha256_finish_ret( &sha256, padbuf );
   decf2:	f7f6 ff4a 	bl	d5b8a <mbedtls_sha256_finish_ret>
    ssl->handshake->tls_prf( session->master, 48, sender,
   decf6:	210c      	movs	r1, #12
   decf8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   decfa:	9a05      	ldr	r2, [sp, #20]
   decfc:	e9cd 6101 	strd	r6, r1, [sp, #4]
   ded00:	2420      	movs	r4, #32
   ded02:	9400      	str	r4, [sp, #0]
   ded04:	f8d3 62ac 	ldr.w	r6, [r3, #684]	; 0x2ac
   ded08:	2130      	movs	r1, #48	; 0x30
   ded0a:	ab07      	add	r3, sp, #28
   ded0c:	f105 002c 	add.w	r0, r5, #44	; 0x2c
   ded10:	47b0      	blx	r6
    mbedtls_sha256_free( &sha256 );
   ded12:	a80f      	add	r0, sp, #60	; 0x3c
   ded14:	f7f6 fb42 	bl	d539c <mbedtls_sha256_free>
    mbedtls_platform_zeroize(  padbuf, sizeof(  padbuf ) );
   ded18:	4621      	mov	r1, r4
   ded1a:	a807      	add	r0, sp, #28
   ded1c:	f7fc f95e 	bl	dafdc <mbedtls_platform_zeroize>
}
   ded20:	b02b      	add	sp, #172	; 0xac
   ded22:	bdf0      	pop	{r4, r5, r6, r7, pc}
   ded24:	000eca8c 	.word	0x000eca8c
   ded28:	000eca9c 	.word	0x000eca9c

000ded2c <_ZL26ssl_calc_verify_tls_sha256P19mbedtls_ssl_contextPh>:
{
   ded2c:	b530      	push	{r4, r5, lr}
   ded2e:	4605      	mov	r5, r0
   ded30:	b09d      	sub	sp, #116	; 0x74
    mbedtls_sha256_init( &sha256 );
   ded32:	a801      	add	r0, sp, #4
{
   ded34:	460c      	mov	r4, r1
    mbedtls_sha256_init( &sha256 );
   ded36:	f7f6 fb2d 	bl	d5394 <mbedtls_sha256_init>
    mbedtls_sha256_clone( &sha256, &ssl->handshake->fin_sha256 );
   ded3a:	6b29      	ldr	r1, [r5, #48]	; 0x30
   ded3c:	a801      	add	r0, sp, #4
   ded3e:	f501 71ac 	add.w	r1, r1, #344	; 0x158
   ded42:	f7f6 fb30 	bl	d53a6 <mbedtls_sha256_clone>
    mbedtls_sha256_finish_ret( &sha256, hash );
   ded46:	4621      	mov	r1, r4
   ded48:	a801      	add	r0, sp, #4
   ded4a:	f7f6 ff1e 	bl	d5b8a <mbedtls_sha256_finish_ret>
    mbedtls_sha256_free( &sha256 );
   ded4e:	a801      	add	r0, sp, #4
   ded50:	f7f6 fb24 	bl	d539c <mbedtls_sha256_free>
}
   ded54:	b01d      	add	sp, #116	; 0x74
   ded56:	bd30      	pop	{r4, r5, pc}

000ded58 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj>:
{
   ded58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ded5c:	ed2d 8b02 	vpush	{d8}
   ded60:	b0b5      	sub	sp, #212	; 0xd4
   ded62:	4604      	mov	r4, r0
    mbedtls_md_init( &md_ctx );
   ded64:	a801      	add	r0, sp, #4
{
   ded66:	ee08 1a10 	vmov	s16, r1
   ded6a:	4692      	mov	sl, r2
   ded6c:	4699      	mov	r9, r3
   ded6e:	9e43      	ldr	r6, [sp, #268]	; 0x10c
    mbedtls_md_init( &md_ctx );
   ded70:	f7fd ffb8 	bl	dcce4 <mbedtls_md_init>
    if( ( md_info = mbedtls_md_info_from_type( md_type ) ) == NULL )
   ded74:	4620      	mov	r0, r4
   ded76:	f7fd ffa9 	bl	dcccc <mbedtls_md_info_from_type>
   ded7a:	4607      	mov	r7, r0
   ded7c:	2800      	cmp	r0, #0
   ded7e:	d078      	beq.n	dee72 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x11a>
    md_len = mbedtls_md_get_size( md_info );
   ded80:	f7fe f8de 	bl	dcf40 <mbedtls_md_get_size>
   ded84:	4604      	mov	r4, r0
    if( sizeof( tmp ) < md_len + strlen( label ) + rlen )
   ded86:	4648      	mov	r0, r9
   ded88:	f009 fe16 	bl	e89b8 <strlen>
   ded8c:	9b41      	ldr	r3, [sp, #260]	; 0x104
   ded8e:	eb00 0804 	add.w	r8, r0, r4
   ded92:	eb08 0203 	add.w	r2, r8, r3
   ded96:	2a80      	cmp	r2, #128	; 0x80
   ded98:	4605      	mov	r5, r0
   ded9a:	d86c      	bhi.n	dee76 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x11e>
    memcpy( tmp + md_len, label, nb );
   ded9c:	ab14      	add	r3, sp, #80	; 0x50
   ded9e:	eb03 0b04 	add.w	fp, r3, r4
   deda2:	4602      	mov	r2, r0
   deda4:	4649      	mov	r1, r9
   deda6:	4658      	mov	r0, fp
   deda8:	f009 fd90 	bl	e88cc <memcpy>
    memcpy( tmp + md_len + nb, random, rlen );
   dedac:	ab14      	add	r3, sp, #80	; 0x50
   dedae:	e9dd 1240 	ldrd	r1, r2, [sp, #256]	; 0x100
   dedb2:	eb03 0008 	add.w	r0, r3, r8
   dedb6:	f009 fd89 	bl	e88cc <memcpy>
    if ( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
   dedba:	4639      	mov	r1, r7
   dedbc:	2201      	movs	r2, #1
   dedbe:	a801      	add	r0, sp, #4
   dedc0:	f7fd ffb0 	bl	dcd24 <mbedtls_md_setup>
   dedc4:	4607      	mov	r7, r0
   dedc6:	2800      	cmp	r0, #0
   dedc8:	d14d      	bne.n	dee66 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x10e>
    nb += rlen;
   dedca:	9b41      	ldr	r3, [sp, #260]	; 0x104
    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
   dedcc:	ee18 1a10 	vmov	r1, s16
    nb += rlen;
   dedd0:	441d      	add	r5, r3
    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
   dedd2:	4652      	mov	r2, sl
   dedd4:	a801      	add	r0, sp, #4
   dedd6:	f7fd fff3 	bl	dcdc0 <mbedtls_md_hmac_starts>
    mbedtls_md_hmac_update( &md_ctx, tmp + md_len, nb );
   dedda:	462a      	mov	r2, r5
   deddc:	4659      	mov	r1, fp
   dedde:	a801      	add	r0, sp, #4
   dede0:	f7fe f854 	bl	dce8c <mbedtls_md_hmac_update>
    mbedtls_md_hmac_finish( &md_ctx, tmp );
   dede4:	a914      	add	r1, sp, #80	; 0x50
   dede6:	a801      	add	r0, sp, #4
   dede8:	f7fe f862 	bl	dceb0 <mbedtls_md_hmac_finish>
   dedec:	46b9      	mov	r9, r7
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len + nb );
   dedee:	4425      	add	r5, r4
    for( i = 0; i < dlen; i += md_len )
   dedf0:	454e      	cmp	r6, r9
    mbedtls_md_free( &md_ctx );
   dedf2:	a801      	add	r0, sp, #4
    for( i = 0; i < dlen; i += md_len )
   dedf4:	d92d      	bls.n	dee52 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0xfa>
        mbedtls_md_hmac_reset ( &md_ctx );
   dedf6:	f7fe f88b 	bl	dcf10 <mbedtls_md_hmac_reset>
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len + nb );
   dedfa:	462a      	mov	r2, r5
   dedfc:	a914      	add	r1, sp, #80	; 0x50
   dedfe:	a801      	add	r0, sp, #4
   dee00:	f7fe f844 	bl	dce8c <mbedtls_md_hmac_update>
        mbedtls_md_hmac_finish( &md_ctx, h_i );
   dee04:	a904      	add	r1, sp, #16
   dee06:	a801      	add	r0, sp, #4
   dee08:	f7fe f852 	bl	dceb0 <mbedtls_md_hmac_finish>
        mbedtls_md_hmac_reset ( &md_ctx );
   dee0c:	a801      	add	r0, sp, #4
   dee0e:	f7fe f87f 	bl	dcf10 <mbedtls_md_hmac_reset>
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
   dee12:	4622      	mov	r2, r4
   dee14:	a914      	add	r1, sp, #80	; 0x50
   dee16:	a801      	add	r0, sp, #4
   dee18:	f7fe f838 	bl	dce8c <mbedtls_md_hmac_update>
        mbedtls_md_hmac_finish( &md_ctx, tmp );
   dee1c:	a914      	add	r1, sp, #80	; 0x50
   dee1e:	a801      	add	r0, sp, #4
   dee20:	f7fe f846 	bl	dceb0 <mbedtls_md_hmac_finish>
        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;
   dee24:	eb04 0109 	add.w	r1, r4, r9
   dee28:	9842      	ldr	r0, [sp, #264]	; 0x108
   dee2a:	428e      	cmp	r6, r1
   dee2c:	bf2c      	ite	cs
   dee2e:	4623      	movcs	r3, r4
   dee30:	fbb6 f3f4 	udivcc	r3, r6, r4
   dee34:	4481      	add	r9, r0
   dee36:	bf38      	it	cc
   dee38:	fb04 6313 	mlscc	r3, r4, r3, r6
        for( j = 0; j < k; j++ )
   dee3c:	aa04      	add	r2, sp, #16
   dee3e:	444b      	add	r3, r9
   dee40:	4599      	cmp	r9, r3
   dee42:	d004      	beq.n	dee4e <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0xf6>
            dstbuf[i + j]  = h_i[j];
   dee44:	f812 0b01 	ldrb.w	r0, [r2], #1
   dee48:	f809 0b01 	strb.w	r0, [r9], #1
        for( j = 0; j < k; j++ )
   dee4c:	e7f8      	b.n	dee40 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0xe8>
   dee4e:	4689      	mov	r9, r1
   dee50:	e7ce      	b.n	dedf0 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x98>
    mbedtls_md_free( &md_ctx );
   dee52:	f7fd ff4c 	bl	dccee <mbedtls_md_free>
    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
   dee56:	2180      	movs	r1, #128	; 0x80
   dee58:	a814      	add	r0, sp, #80	; 0x50
   dee5a:	f7fc f8bf 	bl	dafdc <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( h_i, sizeof( h_i ) );
   dee5e:	2140      	movs	r1, #64	; 0x40
   dee60:	a804      	add	r0, sp, #16
   dee62:	f7fc f8bb 	bl	dafdc <mbedtls_platform_zeroize>
}
   dee66:	4638      	mov	r0, r7
   dee68:	b035      	add	sp, #212	; 0xd4
   dee6a:	ecbd 8b02 	vpop	{d8}
   dee6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   dee72:	4f02      	ldr	r7, [pc, #8]	; (dee7c <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x124>)
   dee74:	e7f7      	b.n	dee66 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x10e>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   dee76:	4f02      	ldr	r7, [pc, #8]	; (dee80 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x128>)
   dee78:	e7f5      	b.n	dee66 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x10e>
   dee7a:	bf00      	nop
   dee7c:	ffff9400 	.word	0xffff9400
   dee80:	ffff8f00 	.word	0xffff8f00

000dee84 <_ZL14tls_prf_sha256PKhjPKcS0_jPhj>:
{
   dee84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return( tls_prf_generic( MBEDTLS_MD_SHA256, secret, slen,
   dee86:	9c08      	ldr	r4, [sp, #32]
   dee88:	9403      	str	r4, [sp, #12]
   dee8a:	9c07      	ldr	r4, [sp, #28]
   dee8c:	9402      	str	r4, [sp, #8]
   dee8e:	9c06      	ldr	r4, [sp, #24]
   dee90:	e9cd 3400 	strd	r3, r4, [sp]
   dee94:	4613      	mov	r3, r2
   dee96:	460a      	mov	r2, r1
   dee98:	4601      	mov	r1, r0
   dee9a:	2006      	movs	r0, #6
   dee9c:	f7ff ff5c 	bl	ded58 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj>
}
   deea0:	b004      	add	sp, #16
   deea2:	bd10      	pop	{r4, pc}

000deea4 <_ZL14tls_prf_sha384PKhjPKcS0_jPhj>:
{
   deea4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return( tls_prf_generic( MBEDTLS_MD_SHA384, secret, slen,
   deea6:	9c08      	ldr	r4, [sp, #32]
   deea8:	9403      	str	r4, [sp, #12]
   deeaa:	9c07      	ldr	r4, [sp, #28]
   deeac:	9402      	str	r4, [sp, #8]
   deeae:	9c06      	ldr	r4, [sp, #24]
   deeb0:	e9cd 3400 	strd	r3, r4, [sp]
   deeb4:	4613      	mov	r3, r2
   deeb6:	460a      	mov	r2, r1
   deeb8:	4601      	mov	r1, r0
   deeba:	2007      	movs	r0, #7
   deebc:	f7ff ff4c 	bl	ded58 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj>
}
   deec0:	b004      	add	sp, #16
   deec2:	bd10      	pop	{r4, pc}

000deec4 <_ZL28ssl_calc_finished_tls_sha384P19mbedtls_ssl_contextPhi>:
{
   deec4:	b5f0      	push	{r4, r5, r6, r7, lr}
    mbedtls_ssl_session *session = ssl->session_negotiate;
   deec6:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
{
   deec8:	b0c9      	sub	sp, #292	; 0x124
   deeca:	4604      	mov	r4, r0
   deecc:	460e      	mov	r6, r1
   deece:	4617      	mov	r7, r2
    if( !session )
   deed0:	b905      	cbnz	r5, deed4 <_ZL28ssl_calc_finished_tls_sha384P19mbedtls_ssl_contextPhi+0x10>
        session = ssl->session;
   deed2:	6a85      	ldr	r5, [r0, #40]	; 0x28
    mbedtls_sha512_init( &sha512 );
   deed4:	a812      	add	r0, sp, #72	; 0x48
   deed6:	f003 ff87 	bl	e2de8 <mbedtls_sha512_init>
    mbedtls_sha512_clone( &sha512, &ssl->handshake->fin_sha512 );
   deeda:	6b21      	ldr	r1, [r4, #48]	; 0x30
   deedc:	a812      	add	r0, sp, #72	; 0x48
   deede:	f501 71e4 	add.w	r1, r1, #456	; 0x1c8
   deee2:	f003 ff8a 	bl	e2dfa <mbedtls_sha512_clone>
    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
   deee6:	4b10      	ldr	r3, [pc, #64]	; (def28 <_ZL28ssl_calc_finished_tls_sha384P19mbedtls_ssl_contextPhi+0x64>)
   deee8:	4a10      	ldr	r2, [pc, #64]	; (def2c <_ZL28ssl_calc_finished_tls_sha384P19mbedtls_ssl_contextPhi+0x68>)
    mbedtls_sha512_finish_ret( &sha512, padbuf );
   deeea:	a906      	add	r1, sp, #24
    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
   deeec:	2f00      	cmp	r7, #0
   deeee:	bf08      	it	eq
   deef0:	461a      	moveq	r2, r3
    mbedtls_sha512_finish_ret( &sha512, padbuf );
   deef2:	a812      	add	r0, sp, #72	; 0x48
    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
   deef4:	9205      	str	r2, [sp, #20]
    mbedtls_sha512_finish_ret( &sha512, padbuf );
   deef6:	f004 fddc 	bl	e3ab2 <mbedtls_sha512_finish_ret>
    ssl->handshake->tls_prf( session->master, 48, sender,
   deefa:	210c      	movs	r1, #12
   deefc:	6b23      	ldr	r3, [r4, #48]	; 0x30
   deefe:	9a05      	ldr	r2, [sp, #20]
   def00:	e9cd 6101 	strd	r6, r1, [sp, #4]
   def04:	2130      	movs	r1, #48	; 0x30
   def06:	9100      	str	r1, [sp, #0]
   def08:	f8d3 42ac 	ldr.w	r4, [r3, #684]	; 0x2ac
   def0c:	f105 002c 	add.w	r0, r5, #44	; 0x2c
   def10:	ab06      	add	r3, sp, #24
   def12:	47a0      	blx	r4
    mbedtls_sha512_free( &sha512 );
   def14:	a812      	add	r0, sp, #72	; 0x48
   def16:	f003 ff6b 	bl	e2df0 <mbedtls_sha512_free>
    mbedtls_platform_zeroize(  padbuf, sizeof( padbuf ) );
   def1a:	2130      	movs	r1, #48	; 0x30
   def1c:	a806      	add	r0, sp, #24
   def1e:	f7fc f85d 	bl	dafdc <mbedtls_platform_zeroize>
}
   def22:	b049      	add	sp, #292	; 0x124
   def24:	bdf0      	pop	{r4, r5, r6, r7, pc}
   def26:	bf00      	nop
   def28:	000eca8c 	.word	0x000eca8c
   def2c:	000eca9c 	.word	0x000eca9c

000def30 <_ZL26ssl_calc_verify_tls_sha384P19mbedtls_ssl_contextPh>:
{
   def30:	b530      	push	{r4, r5, lr}
   def32:	4605      	mov	r5, r0
   def34:	b0b7      	sub	sp, #220	; 0xdc
    mbedtls_sha512_init( &sha512 );
   def36:	4668      	mov	r0, sp
{
   def38:	460c      	mov	r4, r1
    mbedtls_sha512_init( &sha512 );
   def3a:	f003 ff55 	bl	e2de8 <mbedtls_sha512_init>
    mbedtls_sha512_clone( &sha512, &ssl->handshake->fin_sha512 );
   def3e:	6b29      	ldr	r1, [r5, #48]	; 0x30
   def40:	4668      	mov	r0, sp
   def42:	f501 71e4 	add.w	r1, r1, #456	; 0x1c8
   def46:	f003 ff58 	bl	e2dfa <mbedtls_sha512_clone>
    mbedtls_sha512_finish_ret( &sha512, hash );
   def4a:	4621      	mov	r1, r4
   def4c:	4668      	mov	r0, sp
   def4e:	f004 fdb0 	bl	e3ab2 <mbedtls_sha512_finish_ret>
    mbedtls_sha512_free( &sha512 );
   def52:	4668      	mov	r0, sp
   def54:	f003 ff4c 	bl	e2df0 <mbedtls_sha512_free>
}
   def58:	b037      	add	sp, #220	; 0xdc
   def5a:	bd30      	pop	{r4, r5, pc}

000def5c <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context>:

/* Append a new keycert entry to a (possibly empty) list */
static int ssl_append_key_cert( mbedtls_ssl_key_cert **head,
                                mbedtls_x509_crt *cert,
                                mbedtls_pk_context *key )
{
   def5c:	b570      	push	{r4, r5, r6, lr}
   def5e:	4604      	mov	r4, r0
   def60:	460e      	mov	r6, r1
    mbedtls_ssl_key_cert *new_cert;

    new_cert = (mbedtls_ssl_key_cert *)mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
   def62:	2001      	movs	r0, #1
   def64:	210c      	movs	r1, #12
{
   def66:	4615      	mov	r5, r2
    new_cert = (mbedtls_ssl_key_cert *)mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
   def68:	f009 fc36 	bl	e87d8 <calloc>
    if( new_cert == NULL )
   def6c:	b170      	cbz	r0, def8c <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x30>
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );

    new_cert->cert = cert;
    new_cert->key  = key;
    new_cert->next = NULL;
   def6e:	2300      	movs	r3, #0
   def70:	6083      	str	r3, [r0, #8]

    /* Update head is the list was null, else add to the end */
    if( *head == NULL )
   def72:	6823      	ldr	r3, [r4, #0]
    new_cert->key  = key;
   def74:	e9c0 6500 	strd	r6, r5, [r0]
    if( *head == NULL )
   def78:	b913      	cbnz	r3, def80 <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x24>
    {
        *head = new_cert;
   def7a:	6020      	str	r0, [r4, #0]
        while( cur->next != NULL )
            cur = cur->next;
        cur->next = new_cert;
    }

    return( 0 );
   def7c:	4618      	mov	r0, r3
}
   def7e:	bd70      	pop	{r4, r5, r6, pc}
        while( cur->next != NULL )
   def80:	461a      	mov	r2, r3
   def82:	689b      	ldr	r3, [r3, #8]
   def84:	2b00      	cmp	r3, #0
   def86:	d1fb      	bne.n	def80 <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x24>
        cur->next = new_cert;
   def88:	6090      	str	r0, [r2, #8]
   def8a:	e7f7      	b.n	def7c <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x20>
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
   def8c:	4800      	ldr	r0, [pc, #0]	; (def90 <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x34>)
   def8e:	e7f6      	b.n	def7e <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x22>
   def90:	ffff8100 	.word	0xffff8100

000def94 <_ZL26ssl_update_checksum_sha256P19mbedtls_ssl_contextPKhj>:
    mbedtls_sha256_update_ret( &ssl->handshake->fin_sha256, buf, len );
   def94:	6b00      	ldr	r0, [r0, #48]	; 0x30
   def96:	f500 70ac 	add.w	r0, r0, #344	; 0x158
   def9a:	f7f6 bdb9 	b.w	d5b10 <mbedtls_sha256_update_ret>

000def9e <_ZL26ssl_update_checksum_sha384P19mbedtls_ssl_contextPKhj>:
    mbedtls_sha512_update_ret( &ssl->handshake->fin_sha512, buf, len );
   def9e:	6b00      	ldr	r0, [r0, #48]	; 0x30
   defa0:	f500 70e4 	add.w	r0, r0, #456	; 0x1c8
   defa4:	f004 bd32 	b.w	e3a0c <mbedtls_sha512_update_ret>

000defa8 <_ZL25ssl_update_checksum_startP19mbedtls_ssl_contextPKhj>:
{
   defa8:	b570      	push	{r4, r5, r6, lr}
   defaa:	4604      	mov	r4, r0
    mbedtls_sha256_update_ret( &ssl->handshake->fin_sha256, buf, len );
   defac:	6b00      	ldr	r0, [r0, #48]	; 0x30
   defae:	f500 70ac 	add.w	r0, r0, #344	; 0x158
{
   defb2:	460d      	mov	r5, r1
   defb4:	4616      	mov	r6, r2
    mbedtls_sha256_update_ret( &ssl->handshake->fin_sha256, buf, len );
   defb6:	f7f6 fdab 	bl	d5b10 <mbedtls_sha256_update_ret>
    mbedtls_sha512_update_ret( &ssl->handshake->fin_sha512, buf, len );
   defba:	6b20      	ldr	r0, [r4, #48]	; 0x30
   defbc:	4632      	mov	r2, r6
   defbe:	4629      	mov	r1, r5
   defc0:	f500 70e4 	add.w	r0, r0, #456	; 0x1c8
}
   defc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    mbedtls_sha512_update_ret( &ssl->handshake->fin_sha512, buf, len );
   defc8:	f004 bd20 	b.w	e3a0c <mbedtls_sha512_update_ret>

000defcc <_ZL25ssl_reset_in_out_pointersP19mbedtls_ssl_context>:
        ssl->out_hdr = ssl->out_buf + 8;
   defcc:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
   defd0:	3308      	adds	r3, #8
   defd2:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
        ssl->in_hdr  = ssl->in_buf  + 8;
   defd6:	6d03      	ldr	r3, [r0, #80]	; 0x50
   defd8:	3308      	adds	r3, #8
   defda:	6583      	str	r3, [r0, #88]	; 0x58
{
   defdc:	b510      	push	{r4, lr}
    ssl_update_out_pointers( ssl, NULL /* no transform enabled */ );
   defde:	2100      	movs	r1, #0
   defe0:	f7ff fe56 	bl	dec90 <_ZL23ssl_update_out_pointersP19mbedtls_ssl_contextP21mbedtls_ssl_transform>
        ssl->in_ctr = ssl->in_hdr - 8;
   defe4:	6d83      	ldr	r3, [r0, #88]	; 0x58
   defe6:	f1a3 0208 	sub.w	r2, r3, #8
   defea:	6542      	str	r2, [r0, #84]	; 0x54
        ssl->in_len = ssl->in_hdr + 3;
   defec:	1cda      	adds	r2, r3, #3
        ssl->in_iv  = ssl->in_hdr + 5;
   defee:	3305      	adds	r3, #5
        ssl->in_msg = ssl->in_iv;
   deff0:	e9c0 3318 	strd	r3, r3, [r0, #96]	; 0x60
        ssl->in_len = ssl->in_hdr + 3;
   deff4:	65c2      	str	r2, [r0, #92]	; 0x5c
}
   deff6:	bd10      	pop	{r4, pc}

000deff8 <mbedtls_ssl_derive_keys>:
{
   deff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    mbedtls_ssl_transform *transform = ssl->transform_negotiate;
   deffc:	6c04      	ldr	r4, [r0, #64]	; 0x40
    mbedtls_ssl_session *session = ssl->session_negotiate;
   deffe:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
    cipher_info = mbedtls_cipher_info_from_type( transform->ciphersuite_info->cipher );
   df000:	6823      	ldr	r3, [r4, #0]
    mbedtls_ssl_handshake_params *handshake = ssl->handshake;
   df002:	6b05      	ldr	r5, [r0, #48]	; 0x30
{
   df004:	b0d7      	sub	sp, #348	; 0x15c
   df006:	4680      	mov	r8, r0
    cipher_info = mbedtls_cipher_info_from_type( transform->ciphersuite_info->cipher );
   df008:	7a18      	ldrb	r0, [r3, #8]
   df00a:	f7f7 f82b 	bl	d6064 <mbedtls_cipher_info_from_type>
    if( cipher_info == NULL )
   df00e:	4606      	mov	r6, r0
   df010:	b920      	cbnz	r0, df01c <mbedtls_ssl_derive_keys+0x24>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   df012:	4aac      	ldr	r2, [pc, #688]	; (df2c4 <mbedtls_ssl_derive_keys+0x2cc>)
}
   df014:	4610      	mov	r0, r2
   df016:	b057      	add	sp, #348	; 0x15c
   df018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    md_info = mbedtls_md_info_from_type( transform->ciphersuite_info->mac );
   df01c:	6823      	ldr	r3, [r4, #0]
   df01e:	7a58      	ldrb	r0, [r3, #9]
   df020:	f7fd fe54 	bl	dcccc <mbedtls_md_info_from_type>
    if( md_info == NULL )
   df024:	4681      	mov	r9, r0
   df026:	2800      	cmp	r0, #0
   df028:	d0f3      	beq.n	df012 <mbedtls_ssl_derive_keys+0x1a>
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 &&
   df02a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   df02e:	2b03      	cmp	r3, #3
   df030:	d001      	beq.n	df036 <mbedtls_ssl_derive_keys+0x3e>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   df032:	4aa5      	ldr	r2, [pc, #660]	; (df2c8 <mbedtls_ssl_derive_keys+0x2d0>)
   df034:	e7ee      	b.n	df014 <mbedtls_ssl_derive_keys+0x1c>
        transform->ciphersuite_info->mac == MBEDTLS_MD_SHA384 )
   df036:	6823      	ldr	r3, [r4, #0]
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 &&
   df038:	7a5b      	ldrb	r3, [r3, #9]
   df03a:	2b07      	cmp	r3, #7
   df03c:	f040 810a 	bne.w	df254 <mbedtls_ssl_derive_keys+0x25c>
        handshake->tls_prf = tls_prf_sha384;
   df040:	4ba2      	ldr	r3, [pc, #648]	; (df2cc <mbedtls_ssl_derive_keys+0x2d4>)
   df042:	f8c5 32ac 	str.w	r3, [r5, #684]	; 0x2ac
        handshake->calc_verify = ssl_calc_verify_tls_sha384;
   df046:	4ba2      	ldr	r3, [pc, #648]	; (df2d0 <mbedtls_ssl_derive_keys+0x2d8>)
   df048:	f8c5 32a4 	str.w	r3, [r5, #676]	; 0x2a4
        handshake->calc_finished = ssl_calc_finished_tls_sha384;
   df04c:	4ba1      	ldr	r3, [pc, #644]	; (df2d4 <mbedtls_ssl_derive_keys+0x2dc>)
    if( handshake->resume == 0 )
   df04e:	f8d5 2348 	ldr.w	r2, [r5, #840]	; 0x348
        handshake->calc_finished = ssl_calc_finished_tls_sha256;
   df052:	f8c5 32a8 	str.w	r3, [r5, #680]	; 0x2a8
    if( handshake->resume == 0 )
   df056:	f107 0a2c 	add.w	sl, r7, #44	; 0x2c
   df05a:	f505 732d 	add.w	r3, r5, #692	; 0x2b4
   df05e:	b9b2      	cbnz	r2, df08e <mbedtls_ssl_derive_keys+0x96>
        ret = handshake->tls_prf( handshake->premaster, handshake->pmslen,
   df060:	2230      	movs	r2, #48	; 0x30
   df062:	e9cd a201 	strd	sl, r2, [sp, #4]
   df066:	2240      	movs	r2, #64	; 0x40
   df068:	9200      	str	r2, [sp, #0]
   df06a:	f505 7b3d 	add.w	fp, r5, #756	; 0x2f4
   df06e:	4a9a      	ldr	r2, [pc, #616]	; (df2d8 <mbedtls_ssl_derive_keys+0x2e0>)
   df070:	f8d5 72ac 	ldr.w	r7, [r5, #684]	; 0x2ac
   df074:	f8d5 12b0 	ldr.w	r1, [r5, #688]	; 0x2b0
   df078:	9305      	str	r3, [sp, #20]
   df07a:	4658      	mov	r0, fp
   df07c:	47b8      	blx	r7
        if( ret != 0 )
   df07e:	4602      	mov	r2, r0
   df080:	2800      	cmp	r0, #0
   df082:	d1c7      	bne.n	df014 <mbedtls_ssl_derive_keys+0x1c>
        mbedtls_platform_zeroize( handshake->premaster,
   df084:	2154      	movs	r1, #84	; 0x54
   df086:	4658      	mov	r0, fp
   df088:	f7fb ffa8 	bl	dafdc <mbedtls_platform_zeroize>
   df08c:	9b05      	ldr	r3, [sp, #20]
    memcpy( tmp, handshake->randbytes, 64 );
   df08e:	461a      	mov	r2, r3
   df090:	f10d 0c18 	add.w	ip, sp, #24
   df094:	f505 7e3d 	add.w	lr, r5, #756	; 0x2f4
   df098:	6810      	ldr	r0, [r2, #0]
   df09a:	6851      	ldr	r1, [r2, #4]
   df09c:	4667      	mov	r7, ip
   df09e:	c703      	stmia	r7!, {r0, r1}
   df0a0:	3208      	adds	r2, #8
   df0a2:	4572      	cmp	r2, lr
   df0a4:	46bc      	mov	ip, r7
   df0a6:	d1f7      	bne.n	df098 <mbedtls_ssl_derive_keys+0xa0>
    memcpy( handshake->randbytes, tmp + 32, 32 );
   df0a8:	f10d 0e38 	add.w	lr, sp, #56	; 0x38
   df0ac:	469c      	mov	ip, r3
   df0ae:	af16      	add	r7, sp, #88	; 0x58
   df0b0:	4672      	mov	r2, lr
   df0b2:	ca03      	ldmia	r2!, {r0, r1}
   df0b4:	42ba      	cmp	r2, r7
   df0b6:	f8cc 0000 	str.w	r0, [ip]
   df0ba:	f8cc 1004 	str.w	r1, [ip, #4]
   df0be:	4696      	mov	lr, r2
   df0c0:	f10c 0c08 	add.w	ip, ip, #8
   df0c4:	d1f4      	bne.n	df0b0 <mbedtls_ssl_derive_keys+0xb8>
    memcpy( handshake->randbytes + 32, tmp, 32 );
   df0c6:	f10d 0e18 	add.w	lr, sp, #24
   df0ca:	f505 7c35 	add.w	ip, r5, #724	; 0x2d4
   df0ce:	f10d 0b38 	add.w	fp, sp, #56	; 0x38
   df0d2:	4672      	mov	r2, lr
   df0d4:	ca03      	ldmia	r2!, {r0, r1}
   df0d6:	455a      	cmp	r2, fp
   df0d8:	f8cc 0000 	str.w	r0, [ip]
   df0dc:	f8cc 1004 	str.w	r1, [ip, #4]
   df0e0:	4696      	mov	lr, r2
   df0e2:	f10c 0c08 	add.w	ip, ip, #8
   df0e6:	d1f4      	bne.n	df0d2 <mbedtls_ssl_derive_keys+0xda>
    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
   df0e8:	2140      	movs	r1, #64	; 0x40
   df0ea:	a806      	add	r0, sp, #24
   df0ec:	9305      	str	r3, [sp, #20]
   df0ee:	f7fb ff75 	bl	dafdc <mbedtls_platform_zeroize>
    ret = handshake->tls_prf( session->master, 48, "key expansion",
   df0f2:	f44f 7280 	mov.w	r2, #256	; 0x100
   df0f6:	e9cd 7201 	strd	r7, r2, [sp, #4]
   df0fa:	2740      	movs	r7, #64	; 0x40
   df0fc:	9700      	str	r7, [sp, #0]
   df0fe:	4a77      	ldr	r2, [pc, #476]	; (df2dc <mbedtls_ssl_derive_keys+0x2e4>)
   df100:	f8d5 52ac 	ldr.w	r5, [r5, #684]	; 0x2ac
   df104:	9b05      	ldr	r3, [sp, #20]
   df106:	2130      	movs	r1, #48	; 0x30
   df108:	4650      	mov	r0, sl
   df10a:	47a8      	blx	r5
    if( ret != 0 )
   df10c:	4602      	mov	r2, r0
   df10e:	2800      	cmp	r0, #0
   df110:	d180      	bne.n	df014 <mbedtls_ssl_derive_keys+0x1c>
    mbedtls_platform_zeroize( handshake->randbytes,
   df112:	9b05      	ldr	r3, [sp, #20]
   df114:	4639      	mov	r1, r7
   df116:	4618      	mov	r0, r3
   df118:	f7fb ff60 	bl	dafdc <mbedtls_platform_zeroize>
    transform->keylen = cipher_info->key_bitlen / 8;
   df11c:	6873      	ldr	r3, [r6, #4]
   df11e:	08db      	lsrs	r3, r3, #3
   df120:	6063      	str	r3, [r4, #4]
    if( cipher_info->mode == MBEDTLS_MODE_GCM ||
   df122:	7873      	ldrb	r3, [r6, #1]
   df124:	2b06      	cmp	r3, #6
   df126:	d004      	beq.n	df132 <mbedtls_ssl_derive_keys+0x13a>
   df128:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   df12c:	2b08      	cmp	r3, #8
   df12e:	f040 8099 	bne.w	df264 <mbedtls_ssl_derive_keys+0x26c>
        transform->maclen = 0;
   df132:	2000      	movs	r0, #0
        transform->ivlen = 12;
   df134:	230c      	movs	r3, #12
        transform->maclen = 0;
   df136:	6160      	str	r0, [r4, #20]
        transform->ivlen = 12;
   df138:	60e3      	str	r3, [r4, #12]
        if( cipher_info->mode == MBEDTLS_MODE_CHACHAPOLY )
   df13a:	7873      	ldrb	r3, [r6, #1]
            transform->fixed_ivlen = 4;
   df13c:	2b0a      	cmp	r3, #10
   df13e:	bf0c      	ite	eq
   df140:	220c      	moveq	r2, #12
   df142:	2204      	movne	r2, #4
        taglen = transform->ciphersuite_info->flags &
   df144:	6823      	ldr	r3, [r4, #0]
   df146:	6122      	str	r2, [r4, #16]
                  MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
   df148:	7f1b      	ldrb	r3, [r3, #28]
   df14a:	f013 0f02 	tst.w	r3, #2
   df14e:	bf14      	ite	ne
   df150:	2308      	movne	r3, #8
   df152:	2310      	moveq	r3, #16
        explicit_ivlen = transform->ivlen - transform->fixed_ivlen;
   df154:	f1c2 020c 	rsb	r2, r2, #12
        transform->minlen = explicit_ivlen + taglen;
   df158:	441a      	add	r2, r3
   df15a:	60a2      	str	r2, [r4, #8]
        mac_key_len = 0;
   df15c:	4681      	mov	r9, r0
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
   df15e:	f8d8 3000 	ldr.w	r3, [r8]
   df162:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
   df166:	07db      	lsls	r3, r3, #31
   df168:	f53f af63 	bmi.w	df032 <mbedtls_ssl_derive_keys+0x3a>
        key2 = keyblk + mac_key_len * 2 + transform->keylen;
   df16c:	6863      	ldr	r3, [r4, #4]
        iv_copy_len = ( transform->fixed_ivlen ) ?
   df16e:	f8d4 b010 	ldr.w	fp, [r4, #16]
        key2 = keyblk + mac_key_len * 2 + transform->keylen;
   df172:	eb03 0549 	add.w	r5, r3, r9, lsl #1
   df176:	aa16      	add	r2, sp, #88	; 0x58
        key1 = keyblk + mac_key_len * 2;
   df178:	ea4f 0749 	mov.w	r7, r9, lsl #1
        key2 = keyblk + mac_key_len * 2 + transform->keylen;
   df17c:	4415      	add	r5, r2
        iv_copy_len = ( transform->fixed_ivlen ) ?
   df17e:	f1bb 0f00 	cmp.w	fp, #0
   df182:	d101      	bne.n	df188 <mbedtls_ssl_derive_keys+0x190>
   df184:	f8d4 b00c 	ldr.w	fp, [r4, #12]
        memcpy( transform->iv_enc, key2 + transform->keylen,  iv_copy_len );
   df188:	9305      	str	r3, [sp, #20]
   df18a:	18e9      	adds	r1, r5, r3
   df18c:	465a      	mov	r2, fp
   df18e:	f104 0018 	add.w	r0, r4, #24
   df192:	f009 fb9b 	bl	e88cc <memcpy>
        memcpy( transform->iv_dec, key2 + transform->keylen + iv_copy_len,
   df196:	9b05      	ldr	r3, [sp, #20]
   df198:	eb03 010b 	add.w	r1, r3, fp
   df19c:	465a      	mov	r2, fp
   df19e:	4429      	add	r1, r5
   df1a0:	f104 0028 	add.w	r0, r4, #40	; 0x28
   df1a4:	f009 fb92 	bl	e88cc <memcpy>
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
   df1a8:	f8d8 300c 	ldr.w	r3, [r8, #12]
   df1ac:	2b00      	cmp	r3, #0
   df1ae:	f77f af40 	ble.w	df032 <mbedtls_ssl_derive_keys+0x3a>
        if( mac_key_len != 0 )
   df1b2:	f1b9 0f00 	cmp.w	r9, #0
   df1b6:	d00d      	beq.n	df1d4 <mbedtls_ssl_derive_keys+0x1dc>
            mbedtls_md_hmac_starts( &transform->md_ctx_enc, mac_enc, mac_key_len );
   df1b8:	464a      	mov	r2, r9
   df1ba:	a916      	add	r1, sp, #88	; 0x58
   df1bc:	f104 0038 	add.w	r0, r4, #56	; 0x38
   df1c0:	f7fd fdfe 	bl	dcdc0 <mbedtls_md_hmac_starts>
            mbedtls_md_hmac_starts( &transform->md_ctx_dec, mac_dec, mac_key_len );
   df1c4:	ab16      	add	r3, sp, #88	; 0x58
   df1c6:	464a      	mov	r2, r9
   df1c8:	eb03 0109 	add.w	r1, r3, r9
   df1cc:	f104 0044 	add.w	r0, r4, #68	; 0x44
   df1d0:	f7fd fdf6 	bl	dcdc0 <mbedtls_md_hmac_starts>
    if( ssl->conf->f_export_keys != NULL )
   df1d4:	f8d8 0000 	ldr.w	r0, [r8]
   df1d8:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
   df1dc:	f1b8 0f00 	cmp.w	r8, #0
   df1e0:	d008      	beq.n	df1f4 <mbedtls_ssl_derive_keys+0x1fc>
        ssl->conf->f_export_keys( ssl->conf->p_export_keys,
   df1e2:	f8cd b004 	str.w	fp, [sp, #4]
   df1e6:	6863      	ldr	r3, [r4, #4]
   df1e8:	9300      	str	r3, [sp, #0]
   df1ea:	6c80      	ldr	r0, [r0, #72]	; 0x48
   df1ec:	464b      	mov	r3, r9
   df1ee:	aa16      	add	r2, sp, #88	; 0x58
   df1f0:	4651      	mov	r1, sl
   df1f2:	47c0      	blx	r8
    if( ( ret = mbedtls_cipher_setup( &transform->cipher_ctx_enc,
   df1f4:	f104 0850 	add.w	r8, r4, #80	; 0x50
   df1f8:	4631      	mov	r1, r6
   df1fa:	4640      	mov	r0, r8
   df1fc:	f7f6 ff66 	bl	d60cc <mbedtls_cipher_setup>
   df200:	4602      	mov	r2, r0
   df202:	2800      	cmp	r0, #0
   df204:	f47f af06 	bne.w	df014 <mbedtls_ssl_derive_keys+0x1c>
    if( ( ret = mbedtls_cipher_setup( &transform->cipher_ctx_dec,
   df208:	3488      	adds	r4, #136	; 0x88
   df20a:	4631      	mov	r1, r6
   df20c:	4620      	mov	r0, r4
   df20e:	f7f6 ff5d 	bl	d60cc <mbedtls_cipher_setup>
   df212:	4602      	mov	r2, r0
   df214:	2800      	cmp	r0, #0
   df216:	f47f aefd 	bne.w	df014 <mbedtls_ssl_derive_keys+0x1c>
    if( ( ret = mbedtls_cipher_setkey( &transform->cipher_ctx_enc, key1,
   df21a:	a916      	add	r1, sp, #88	; 0x58
   df21c:	6872      	ldr	r2, [r6, #4]
   df21e:	2301      	movs	r3, #1
   df220:	4439      	add	r1, r7
   df222:	4640      	mov	r0, r8
   df224:	f7f6 ff6a 	bl	d60fc <mbedtls_cipher_setkey>
   df228:	4602      	mov	r2, r0
   df22a:	2800      	cmp	r0, #0
   df22c:	f47f aef2 	bne.w	df014 <mbedtls_ssl_derive_keys+0x1c>
    if( ( ret = mbedtls_cipher_setkey( &transform->cipher_ctx_dec, key2,
   df230:	6872      	ldr	r2, [r6, #4]
   df232:	4603      	mov	r3, r0
   df234:	4629      	mov	r1, r5
   df236:	4620      	mov	r0, r4
   df238:	f7f6 ff60 	bl	d60fc <mbedtls_cipher_setkey>
   df23c:	4602      	mov	r2, r0
   df23e:	2800      	cmp	r0, #0
   df240:	f47f aee8 	bne.w	df014 <mbedtls_ssl_derive_keys+0x1c>
   df244:	9005      	str	r0, [sp, #20]
    mbedtls_platform_zeroize( keyblk, sizeof( keyblk ) );
   df246:	f44f 7180 	mov.w	r1, #256	; 0x100
   df24a:	a816      	add	r0, sp, #88	; 0x58
   df24c:	f7fb fec6 	bl	dafdc <mbedtls_platform_zeroize>
   df250:	9a05      	ldr	r2, [sp, #20]
    return( 0 );
   df252:	e6df      	b.n	df014 <mbedtls_ssl_derive_keys+0x1c>
        handshake->tls_prf = tls_prf_sha256;
   df254:	4b22      	ldr	r3, [pc, #136]	; (df2e0 <mbedtls_ssl_derive_keys+0x2e8>)
   df256:	f8c5 32ac 	str.w	r3, [r5, #684]	; 0x2ac
        handshake->calc_verify = ssl_calc_verify_tls_sha256;
   df25a:	4b22      	ldr	r3, [pc, #136]	; (df2e4 <mbedtls_ssl_derive_keys+0x2ec>)
   df25c:	f8c5 32a4 	str.w	r3, [r5, #676]	; 0x2a4
        handshake->calc_finished = ssl_calc_finished_tls_sha256;
   df260:	4b21      	ldr	r3, [pc, #132]	; (df2e8 <mbedtls_ssl_derive_keys+0x2f0>)
   df262:	e6f4      	b.n	df04e <mbedtls_ssl_derive_keys+0x56>
        if( ( ret = mbedtls_md_setup( &transform->md_ctx_enc, md_info, 1 ) ) != 0 ||
   df264:	2201      	movs	r2, #1
   df266:	4649      	mov	r1, r9
   df268:	f104 0038 	add.w	r0, r4, #56	; 0x38
   df26c:	f7fd fd5a 	bl	dcd24 <mbedtls_md_setup>
   df270:	4602      	mov	r2, r0
   df272:	2800      	cmp	r0, #0
   df274:	f47f aece 	bne.w	df014 <mbedtls_ssl_derive_keys+0x1c>
            ( ret = mbedtls_md_setup( &transform->md_ctx_dec, md_info, 1 ) ) != 0 )
   df278:	2201      	movs	r2, #1
   df27a:	4649      	mov	r1, r9
   df27c:	f104 0044 	add.w	r0, r4, #68	; 0x44
   df280:	f7fd fd50 	bl	dcd24 <mbedtls_md_setup>
        if( ( ret = mbedtls_md_setup( &transform->md_ctx_enc, md_info, 1 ) ) != 0 ||
   df284:	4602      	mov	r2, r0
   df286:	2800      	cmp	r0, #0
   df288:	f47f aec4 	bne.w	df014 <mbedtls_ssl_derive_keys+0x1c>
        mac_key_len = mbedtls_md_get_size( md_info );
   df28c:	4648      	mov	r0, r9
   df28e:	f7fd fe57 	bl	dcf40 <mbedtls_md_get_size>
        transform->maclen = mac_key_len;
   df292:	6160      	str	r0, [r4, #20]
        transform->ivlen = cipher_info->iv_size;
   df294:	68f2      	ldr	r2, [r6, #12]
   df296:	60e2      	str	r2, [r4, #12]
        if( cipher_info->mode == MBEDTLS_MODE_STREAM )
   df298:	7873      	ldrb	r3, [r6, #1]
   df29a:	2b07      	cmp	r3, #7
        mac_key_len = mbedtls_md_get_size( md_info );
   df29c:	4681      	mov	r9, r0
        if( cipher_info->mode == MBEDTLS_MODE_STREAM )
   df29e:	d101      	bne.n	df2a4 <mbedtls_ssl_derive_keys+0x2ac>
            transform->minlen = transform->maclen;
   df2a0:	60a0      	str	r0, [r4, #8]
   df2a2:	e75c      	b.n	df15e <mbedtls_ssl_derive_keys+0x166>
                                  + cipher_info->block_size
   df2a4:	6973      	ldr	r3, [r6, #20]
                                  - transform->maclen % cipher_info->block_size;
   df2a6:	fbb0 f1f3 	udiv	r1, r0, r3
   df2aa:	fb03 3301 	mla	r3, r3, r1, r3
                transform->minlen = transform->maclen
   df2ae:	60a3      	str	r3, [r4, #8]
            if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_2 ||
   df2b0:	f8d8 100c 	ldr.w	r1, [r8, #12]
   df2b4:	3902      	subs	r1, #2
   df2b6:	2901      	cmp	r1, #1
   df2b8:	f63f aebb 	bhi.w	df032 <mbedtls_ssl_derive_keys+0x3a>
                transform->minlen += transform->ivlen;
   df2bc:	4413      	add	r3, r2
   df2be:	60a3      	str	r3, [r4, #8]
   df2c0:	e74d      	b.n	df15e <mbedtls_ssl_derive_keys+0x166>
   df2c2:	bf00      	nop
   df2c4:	ffff8f00 	.word	0xffff8f00
   df2c8:	ffff9400 	.word	0xffff9400
   df2cc:	000deea5 	.word	0x000deea5
   df2d0:	000def31 	.word	0x000def31
   df2d4:	000deec5 	.word	0x000deec5
   df2d8:	000ecaac 	.word	0x000ecaac
   df2dc:	000ecaba 	.word	0x000ecaba
   df2e0:	000dee85 	.word	0x000dee85
   df2e4:	000ded2d 	.word	0x000ded2d
   df2e8:	000decc1 	.word	0x000decc1

000df2ec <mbedtls_ssl_psk_derive_premaster>:
{
   df2ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unsigned char *p = ssl->handshake->premaster;
   df2f0:	6b03      	ldr	r3, [r0, #48]	; 0x30
    const unsigned char *psk = ssl->conf->psk;
   df2f2:	6802      	ldr	r2, [r0, #0]
    size_t psk_len = ssl->conf->psk_len;
   df2f4:	e9d2 8419 	ldrd	r8, r4, [r2, #100]	; 0x64
    if( ssl->handshake->psk != NULL )
   df2f8:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
{
   df2fc:	4607      	mov	r7, r0
    unsigned char *end = p + sizeof( ssl->handshake->premaster );
   df2fe:	f503 7652 	add.w	r6, r3, #840	; 0x348
    if( ssl->handshake->psk != NULL )
   df302:	b112      	cbz	r2, df30a <mbedtls_ssl_psk_derive_premaster+0x1e>
        psk_len = ssl->handshake->psk_len;
   df304:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
   df308:	4690      	mov	r8, r2
    if( key_ex == MBEDTLS_KEY_EXCHANGE_PSK )
   df30a:	2905      	cmp	r1, #5
   df30c:	d12d      	bne.n	df36a <mbedtls_ssl_psk_derive_premaster+0x7e>
        *(p++) = (unsigned char)( psk_len >> 8 );
   df30e:	0a22      	lsrs	r2, r4, #8
        *(p++) = (unsigned char)( psk_len      );
   df310:	f203 25f6 	addw	r5, r3, #758	; 0x2f6
        *(p++) = (unsigned char)( psk_len >> 8 );
   df314:	f883 22f4 	strb.w	r2, [r3, #756]	; 0x2f4
        *(p++) = (unsigned char)( psk_len      );
   df318:	f883 42f5 	strb.w	r4, [r3, #757]	; 0x2f5
        if( end < p || (size_t)( end - p ) < psk_len )
   df31c:	1b73      	subs	r3, r6, r5
   df31e:	42a3      	cmp	r3, r4
   df320:	d202      	bcs.n	df328 <mbedtls_ssl_psk_derive_premaster+0x3c>
            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   df322:	4818      	ldr	r0, [pc, #96]	; (df384 <mbedtls_ssl_psk_derive_premaster+0x98>)
}
   df324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        memset( p, 0, psk_len );
   df328:	4622      	mov	r2, r4
   df32a:	2100      	movs	r1, #0
   df32c:	4628      	mov	r0, r5
   df32e:	f009 faf5 	bl	e891c <memset>
        p += psk_len;
   df332:	192b      	adds	r3, r5, r4
    if( end - p < 2 )
   df334:	1af2      	subs	r2, r6, r3
   df336:	2a01      	cmp	r2, #1
   df338:	ddf3      	ble.n	df322 <mbedtls_ssl_psk_derive_premaster+0x36>
    *(p++) = (unsigned char)( psk_len >> 8 );
   df33a:	461d      	mov	r5, r3
   df33c:	0a22      	lsrs	r2, r4, #8
   df33e:	f805 2b02 	strb.w	r2, [r5], #2
    if( end < p || (size_t)( end - p ) < psk_len )
   df342:	42ae      	cmp	r6, r5
    *(p++) = (unsigned char)( psk_len      );
   df344:	705c      	strb	r4, [r3, #1]
    if( end < p || (size_t)( end - p ) < psk_len )
   df346:	d3ec      	bcc.n	df322 <mbedtls_ssl_psk_derive_premaster+0x36>
   df348:	1b76      	subs	r6, r6, r5
   df34a:	42a6      	cmp	r6, r4
   df34c:	d3e9      	bcc.n	df322 <mbedtls_ssl_psk_derive_premaster+0x36>
    memcpy( p, psk, psk_len );
   df34e:	4622      	mov	r2, r4
   df350:	4628      	mov	r0, r5
   df352:	4641      	mov	r1, r8
   df354:	f009 faba 	bl	e88cc <memcpy>
    ssl->handshake->pmslen = p - ssl->handshake->premaster;
   df358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    p += psk_len;
   df35a:	442c      	add	r4, r5
    ssl->handshake->pmslen = p - ssl->handshake->premaster;
   df35c:	f503 753d 	add.w	r5, r3, #756	; 0x2f4
   df360:	1b64      	subs	r4, r4, r5
   df362:	f8c3 42b0 	str.w	r4, [r3, #688]	; 0x2b0
    return( 0 );
   df366:	2000      	movs	r0, #0
   df368:	e7dc      	b.n	df324 <mbedtls_ssl_psk_derive_premaster+0x38>
    if( key_ex == MBEDTLS_KEY_EXCHANGE_RSA_PSK )
   df36a:	2907      	cmp	r1, #7
   df36c:	d108      	bne.n	df380 <mbedtls_ssl_psk_derive_premaster+0x94>
        *p++ = 0;
   df36e:	2200      	movs	r2, #0
   df370:	f883 22f4 	strb.w	r2, [r3, #756]	; 0x2f4
        *p++ = 48;
   df374:	2230      	movs	r2, #48	; 0x30
   df376:	f883 22f5 	strb.w	r2, [r3, #757]	; 0x2f5
        p += 48;
   df37a:	f203 3326 	addw	r3, r3, #806	; 0x326
   df37e:	e7d9      	b.n	df334 <mbedtls_ssl_psk_derive_premaster+0x48>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   df380:	4801      	ldr	r0, [pc, #4]	; (df388 <mbedtls_ssl_psk_derive_premaster+0x9c>)
   df382:	e7cf      	b.n	df324 <mbedtls_ssl_psk_derive_premaster+0x38>
   df384:	ffff8f00 	.word	0xffff8f00
   df388:	ffff9400 	.word	0xffff9400

000df38c <mbedtls_ssl_fetch_input>:
{
   df38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if( ssl->f_recv == NULL && ssl->f_recv_timeout == NULL )
   df38e:	6943      	ldr	r3, [r0, #20]
{
   df390:	4604      	mov	r4, r0
   df392:	460d      	mov	r5, r1
    if( ssl->f_recv == NULL && ssl->f_recv_timeout == NULL )
   df394:	b90b      	cbnz	r3, df39a <mbedtls_ssl_fetch_input+0xe>
   df396:	6983      	ldr	r3, [r0, #24]
   df398:	b353      	cbz	r3, df3f0 <mbedtls_ssl_fetch_input+0x64>
    if( nb_want > MBEDTLS_SSL_IN_BUFFER_LEN - (size_t)( ssl->in_hdr - ssl->in_buf ) )
   df39a:	6da3      	ldr	r3, [r4, #88]	; 0x58
   df39c:	6d22      	ldr	r2, [r4, #80]	; 0x50
   df39e:	1a9b      	subs	r3, r3, r2
   df3a0:	f5c3 5300 	rsb	r3, r3, #8192	; 0x2000
   df3a4:	332d      	adds	r3, #45	; 0x2d
   df3a6:	42ab      	cmp	r3, r5
   df3a8:	d322      	bcc.n	df3f0 <mbedtls_ssl_fetch_input+0x64>
        while( ssl->in_left < nb_want )
   df3aa:	6f66      	ldr	r6, [r4, #116]	; 0x74
   df3ac:	42b5      	cmp	r5, r6
   df3ae:	d921      	bls.n	df3f4 <mbedtls_ssl_fetch_input+0x68>
    if( ssl->f_get_timer == NULL )
   df3b0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
            len = nb_want - ssl->in_left;
   df3b2:	1bae      	subs	r6, r5, r6
    if( ssl->f_get_timer == NULL )
   df3b4:	b94b      	cbnz	r3, df3ca <mbedtls_ssl_fetch_input+0x3e>
                if( ssl->f_recv_timeout != NULL )
   df3b6:	e9d4 7006 	ldrd	r7, r0, [r4, #24]
   df3ba:	6da1      	ldr	r1, [r4, #88]	; 0x58
   df3bc:	6f63      	ldr	r3, [r4, #116]	; 0x74
   df3be:	4419      	add	r1, r3
   df3c0:	b94f      	cbnz	r7, df3d6 <mbedtls_ssl_fetch_input+0x4a>
                    ret = ssl->f_recv( ssl->p_bio,
   df3c2:	6963      	ldr	r3, [r4, #20]
   df3c4:	4632      	mov	r2, r6
   df3c6:	4798      	blx	r3
   df3c8:	e009      	b.n	df3de <mbedtls_ssl_fetch_input+0x52>
    if( ssl->f_get_timer( ssl->p_timer ) == 2 )
   df3ca:	6c60      	ldr	r0, [r4, #68]	; 0x44
   df3cc:	4798      	blx	r3
   df3ce:	2802      	cmp	r0, #2
   df3d0:	d1f1      	bne.n	df3b6 <mbedtls_ssl_fetch_input+0x2a>
                ret = MBEDTLS_ERR_SSL_TIMEOUT;
   df3d2:	480b      	ldr	r0, [pc, #44]	; (df400 <mbedtls_ssl_fetch_input+0x74>)
   df3d4:	e00d      	b.n	df3f2 <mbedtls_ssl_fetch_input+0x66>
                                               ssl->conf->read_timeout );
   df3d6:	6823      	ldr	r3, [r4, #0]
                    ret = ssl->f_recv_timeout( ssl->p_bio,
   df3d8:	4632      	mov	r2, r6
   df3da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   df3dc:	47b8      	blx	r7
            if( ret == 0 )
   df3de:	2800      	cmp	r0, #0
   df3e0:	d00a      	beq.n	df3f8 <mbedtls_ssl_fetch_input+0x6c>
            if( ret < 0 )
   df3e2:	db06      	blt.n	df3f2 <mbedtls_ssl_fetch_input+0x66>
            if ( (size_t)ret > len || ( INT_MAX > SIZE_MAX && ret > SIZE_MAX ) )
   df3e4:	4286      	cmp	r6, r0
   df3e6:	d309      	bcc.n	df3fc <mbedtls_ssl_fetch_input+0x70>
            ssl->in_left += ret;
   df3e8:	6f63      	ldr	r3, [r4, #116]	; 0x74
   df3ea:	4418      	add	r0, r3
   df3ec:	6760      	str	r0, [r4, #116]	; 0x74
        while( ssl->in_left < nb_want )
   df3ee:	e7dc      	b.n	df3aa <mbedtls_ssl_fetch_input+0x1e>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   df3f0:	4804      	ldr	r0, [pc, #16]	; (df404 <mbedtls_ssl_fetch_input+0x78>)
}
   df3f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return( 0 );
   df3f4:	2000      	movs	r0, #0
   df3f6:	e7fc      	b.n	df3f2 <mbedtls_ssl_fetch_input+0x66>
                return( MBEDTLS_ERR_SSL_CONN_EOF );
   df3f8:	4803      	ldr	r0, [pc, #12]	; (df408 <mbedtls_ssl_fetch_input+0x7c>)
   df3fa:	e7fa      	b.n	df3f2 <mbedtls_ssl_fetch_input+0x66>
                return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   df3fc:	4803      	ldr	r0, [pc, #12]	; (df40c <mbedtls_ssl_fetch_input+0x80>)
   df3fe:	e7f8      	b.n	df3f2 <mbedtls_ssl_fetch_input+0x66>
   df400:	ffff9800 	.word	0xffff9800
   df404:	ffff8f00 	.word	0xffff8f00
   df408:	ffff8d80 	.word	0xffff8d80
   df40c:	ffff9400 	.word	0xffff9400

000df410 <mbedtls_ssl_flush_output>:
{
   df410:	b538      	push	{r3, r4, r5, lr}
    if( ssl->f_send == NULL )
   df412:	6903      	ldr	r3, [r0, #16]
{
   df414:	4605      	mov	r5, r0
    if( ssl->f_send == NULL )
   df416:	b313      	cbz	r3, df45e <mbedtls_ssl_flush_output+0x4e>
    if( ssl->out_left == 0 )
   df418:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
   df41c:	b1ea      	cbz	r2, df45a <mbedtls_ssl_flush_output+0x4a>
    while( ssl->out_left > 0 )
   df41e:	f8d5 40a4 	ldr.w	r4, [r5, #164]	; 0xa4
   df422:	b184      	cbz	r4, df446 <mbedtls_ssl_flush_output+0x36>
        buf = ssl->out_hdr - ssl->out_left;
   df424:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
        ret = ssl->f_send( ssl->p_bio, buf, ssl->out_left );
   df428:	692b      	ldr	r3, [r5, #16]
   df42a:	69e8      	ldr	r0, [r5, #28]
   df42c:	4622      	mov	r2, r4
   df42e:	1b09      	subs	r1, r1, r4
   df430:	4798      	blx	r3
        if( ret <= 0 )
   df432:	1e02      	subs	r2, r0, #0
   df434:	dd11      	ble.n	df45a <mbedtls_ssl_flush_output+0x4a>
        if( (size_t)ret > ssl->out_left || ( INT_MAX > SIZE_MAX && ret > SIZE_MAX ) )
   df436:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
   df43a:	4290      	cmp	r0, r2
   df43c:	d311      	bcc.n	df462 <mbedtls_ssl_flush_output+0x52>
        ssl->out_left -= ret;
   df43e:	1a80      	subs	r0, r0, r2
   df440:	f8c5 00a4 	str.w	r0, [r5, #164]	; 0xa4
    while( ssl->out_left > 0 )
   df444:	e7eb      	b.n	df41e <mbedtls_ssl_flush_output+0xe>
        ssl->out_hdr = ssl->out_buf + 8;
   df446:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
    ssl_update_out_pointers( ssl, ssl->transform_out );
   df44a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
        ssl->out_hdr = ssl->out_buf + 8;
   df44c:	3308      	adds	r3, #8
   df44e:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
    ssl_update_out_pointers( ssl, ssl->transform_out );
   df452:	4628      	mov	r0, r5
   df454:	f7ff fc1c 	bl	dec90 <_ZL23ssl_update_out_pointersP19mbedtls_ssl_contextP21mbedtls_ssl_transform>
   df458:	4622      	mov	r2, r4
}
   df45a:	4610      	mov	r0, r2
   df45c:	bd38      	pop	{r3, r4, r5, pc}
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   df45e:	4a02      	ldr	r2, [pc, #8]	; (df468 <mbedtls_ssl_flush_output+0x58>)
   df460:	e7fb      	b.n	df45a <mbedtls_ssl_flush_output+0x4a>
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   df462:	4a02      	ldr	r2, [pc, #8]	; (df46c <mbedtls_ssl_flush_output+0x5c>)
   df464:	e7f9      	b.n	df45a <mbedtls_ssl_flush_output+0x4a>
   df466:	bf00      	nop
   df468:	ffff8f00 	.word	0xffff8f00
   df46c:	ffff9400 	.word	0xffff9400

000df470 <mbedtls_ssl_write_record>:
{
   df470:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        ssl->out_hdr[0] = (unsigned char) ssl->out_msgtype;
   df474:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
    size_t len = ssl->out_msglen;
   df478:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
{
   df47c:	460e      	mov	r6, r1
        ssl->out_hdr[0] = (unsigned char) ssl->out_msgtype;
   df47e:	f8d0 109c 	ldr.w	r1, [r0, #156]	; 0x9c
   df482:	7011      	strb	r1, [r2, #0]
                           ssl->conf->transport, ssl->out_hdr + 1 );
   df484:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
   df488:	68c1      	ldr	r1, [r0, #12]
{
   df48a:	4604      	mov	r4, r0
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
   df48c:	6880      	ldr	r0, [r0, #8]
   df48e:	7050      	strb	r0, [r2, #1]
        ver[1] = (unsigned char) minor;
   df490:	7091      	strb	r1, [r2, #2]
        memcpy( ssl->out_ctr, ssl->cur_out_ctr, 8 );
   df492:	4621      	mov	r1, r4
   df494:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   df498:	f851 2fa8 	ldr.w	r2, [r1, #168]!
   df49c:	6002      	str	r2, [r0, #0]
   df49e:	684a      	ldr	r2, [r1, #4]
   df4a0:	6042      	str	r2, [r0, #4]
        ssl->out_len[0] = (unsigned char)( len >> 8 );
   df4a2:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   df4a6:	0a19      	lsrs	r1, r3, #8
   df4a8:	7011      	strb	r1, [r2, #0]
        ssl->out_len[1] = (unsigned char)( len      );
   df4aa:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   df4ae:	7053      	strb	r3, [r2, #1]
        if( ssl->transform_out != NULL )
   df4b0:	6ba5      	ldr	r5, [r4, #56]	; 0x38
{
   df4b2:	b091      	sub	sp, #68	; 0x44
        if( ssl->transform_out != NULL )
   df4b4:	2d00      	cmp	r5, #0
   df4b6:	d073      	beq.n	df5a0 <mbedtls_ssl_write_record+0x130>
    if( ssl->session_out == NULL || ssl->transform_out == NULL )
   df4b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   df4ba:	2b00      	cmp	r3, #0
   df4bc:	f000 80b5 	beq.w	df62a <mbedtls_ssl_write_record+0x1ba>
    mode = mbedtls_cipher_get_cipher_mode( &ssl->transform_out->cipher_ctx_enc );
   df4c0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 */
static inline mbedtls_cipher_mode_t mbedtls_cipher_get_cipher_mode(
    const mbedtls_cipher_context_t *ctx )
{
    MBEDTLS_INTERNAL_VALIDATE_RET( ctx != NULL, MBEDTLS_MODE_NONE );
    if( ctx->cipher_info == NULL )
   df4c2:	2b00      	cmp	r3, #0
   df4c4:	f000 80b1 	beq.w	df62a <mbedtls_ssl_write_record+0x1ba>
        return MBEDTLS_MODE_NONE;

    return ctx->cipher_info->mode;
   df4c8:	785b      	ldrb	r3, [r3, #1]
    if( mode == MBEDTLS_MODE_GCM ||
   df4ca:	2b06      	cmp	r3, #6
   df4cc:	d004      	beq.n	df4d8 <mbedtls_ssl_write_record+0x68>
   df4ce:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   df4d2:	2b08      	cmp	r3, #8
   df4d4:	f040 80a9 	bne.w	df62a <mbedtls_ssl_write_record+0x1ba>
        unsigned char taglen = transform->ciphersuite_info->flags &
   df4d8:	682b      	ldr	r3, [r5, #0]
   df4da:	7f1b      	ldrb	r3, [r3, #28]
   df4dc:	f013 0f02 	tst.w	r3, #2
        memcpy( add_data, ssl->out_ctr, 8 );
   df4e0:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   df4e4:	6818      	ldr	r0, [r3, #0]
   df4e6:	6859      	ldr	r1, [r3, #4]
   df4e8:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
   df4ec:	e8ac 0003 	stmia.w	ip!, {r0, r1}
        add_data[8]  = ssl->out_msgtype;
   df4f0:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
        size_t explicit_ivlen = transform->ivlen - transform->fixed_ivlen;
   df4f4:	e9d5 2903 	ldrd	r2, r9, [r5, #12]
        add_data[8]  = ssl->out_msgtype;
   df4f8:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
        ver[0] = (unsigned char) major;
   df4fc:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
        ver[1] = (unsigned char) minor;
   df500:	f88d 103a 	strb.w	r1, [sp, #58]	; 0x3a
        add_data[11] = ( ssl->out_msglen >> 8 ) & 0xFF;
   df504:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
        ver[0] = (unsigned char) major;
   df508:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
        add_data[11] = ( ssl->out_msglen >> 8 ) & 0xFF;
   df50c:	ea4f 2011 	mov.w	r0, r1, lsr #8
   df510:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
        add_data[12] = ssl->out_msglen & 0xFF;
   df514:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
        if( transform->ivlen == 12 && transform->fixed_ivlen == 4 )
   df518:	68e9      	ldr	r1, [r5, #12]
        unsigned char taglen = transform->ciphersuite_info->flags &
   df51a:	bf14      	ite	ne
   df51c:	2708      	movne	r7, #8
   df51e:	2710      	moveq	r7, #16
        if( transform->ivlen == 12 && transform->fixed_ivlen == 4 )
   df520:	290c      	cmp	r1, #12
   df522:	f040 8082 	bne.w	df62a <mbedtls_ssl_write_record+0x1ba>
   df526:	f1b9 0f04 	cmp.w	r9, #4
   df52a:	d156      	bne.n	df5da <mbedtls_ssl_write_record+0x16a>
            memcpy( iv, transform->iv_enc, transform->fixed_ivlen );
   df52c:	69a9      	ldr	r1, [r5, #24]
   df52e:	9109      	str	r1, [sp, #36]	; 0x24
            memcpy( iv + transform->fixed_ivlen, ssl->out_ctr, 8 );
   df530:	6818      	ldr	r0, [r3, #0]
   df532:	6859      	ldr	r1, [r3, #4]
   df534:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
   df538:	e8ac 0003 	stmia.w	ip!, {r0, r1}
            memcpy( ssl->out_iv, ssl->out_ctr, 8 );
   df53c:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   df540:	6819      	ldr	r1, [r3, #0]
   df542:	6001      	str	r1, [r0, #0]
   df544:	6859      	ldr	r1, [r3, #4]
   df546:	6041      	str	r1, [r0, #4]
        enc_msglen = ssl->out_msglen;
   df548:	f8d4 80a0 	ldr.w	r8, [r4, #160]	; 0xa0
        enc_msg = ssl->out_msg;
   df54c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
        if( ( ret = mbedtls_cipher_auth_encrypt( &transform->cipher_ctx_enc,
   df550:	9706      	str	r7, [sp, #24]
        ssl->out_msglen += explicit_ivlen;
   df552:	4442      	add	r2, r8
   df554:	eba2 0209 	sub.w	r2, r2, r9
   df558:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
        if( ( ret = mbedtls_cipher_auth_encrypt( &transform->cipher_ctx_enc,
   df55c:	eb03 0208 	add.w	r2, r3, r8
   df560:	9205      	str	r2, [sp, #20]
   df562:	aa08      	add	r2, sp, #32
   df564:	e9cd 3203 	strd	r3, r2, [sp, #12]
   df568:	e9cd 3801 	strd	r3, r8, [sp, #4]
   df56c:	230d      	movs	r3, #13
   df56e:	9300      	str	r3, [sp, #0]
   df570:	68ea      	ldr	r2, [r5, #12]
   df572:	ab0c      	add	r3, sp, #48	; 0x30
   df574:	a909      	add	r1, sp, #36	; 0x24
   df576:	f105 0050 	add.w	r0, r5, #80	; 0x50
   df57a:	f7f6 fe93 	bl	d62a4 <mbedtls_cipher_auth_encrypt>
   df57e:	2800      	cmp	r0, #0
   df580:	d150      	bne.n	df624 <mbedtls_ssl_write_record+0x1b4>
        if( olen != enc_msglen )
   df582:	9b08      	ldr	r3, [sp, #32]
   df584:	4598      	cmp	r8, r3
   df586:	d150      	bne.n	df62a <mbedtls_ssl_write_record+0x1ba>
        ssl->out_msglen += taglen;
   df588:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
            ssl->out_len[0] = (unsigned char)( len >> 8 );
   df58c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
        ssl->out_msglen += taglen;
   df590:	443b      	add	r3, r7
            ssl->out_len[0] = (unsigned char)( len >> 8 );
   df592:	0a19      	lsrs	r1, r3, #8
        ssl->out_msglen += taglen;
   df594:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
            ssl->out_len[0] = (unsigned char)( len >> 8 );
   df598:	7011      	strb	r1, [r2, #0]
            ssl->out_len[1] = (unsigned char)( len      );
   df59a:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   df59e:	7053      	strb	r3, [r2, #1]
        ssl->out_left += protected_record_size;
   df5a0:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
        ssl_update_out_pointers( ssl, ssl->transform_out );
   df5a4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
        protected_record_size = len + mbedtls_ssl_hdr_len( ssl );
   df5a6:	3305      	adds	r3, #5
        ssl->out_left += protected_record_size;
   df5a8:	441a      	add	r2, r3
   df5aa:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
        ssl->out_hdr  += protected_record_size;
   df5ae:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   df5b2:	4413      	add	r3, r2
   df5b4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        ssl_update_out_pointers( ssl, ssl->transform_out );
   df5b8:	4620      	mov	r0, r4
   df5ba:	f7ff fb69 	bl	dec90 <_ZL23ssl_update_out_pointersP19mbedtls_ssl_contextP21mbedtls_ssl_transform>
    return( 0 );
   df5be:	f104 02af 	add.w	r2, r4, #175	; 0xaf
   df5c2:	f104 01a7 	add.w	r1, r4, #167	; 0xa7
            if( ++ssl->cur_out_ctr[i - 1] != 0 )
   df5c6:	7813      	ldrb	r3, [r2, #0]
   df5c8:	3301      	adds	r3, #1
   df5ca:	b2db      	uxtb	r3, r3
   df5cc:	f802 3901 	strb.w	r3, [r2], #-1
   df5d0:	b30b      	cbz	r3, df616 <mbedtls_ssl_write_record+0x1a6>
    if( ( flush == SSL_FORCE_FLUSH ) &&
   df5d2:	2e01      	cmp	r6, #1
   df5d4:	d023      	beq.n	df61e <mbedtls_ssl_write_record+0x1ae>
    return( 0 );
   df5d6:	2000      	movs	r0, #0
   df5d8:	e024      	b.n	df624 <mbedtls_ssl_write_record+0x1b4>
        else if( transform->ivlen == 12 && transform->fixed_ivlen == 12 )
   df5da:	f1b9 0f0c 	cmp.w	r9, #12
   df5de:	d124      	bne.n	df62a <mbedtls_ssl_write_record+0x1ba>
            memcpy( iv, transform->iv_enc, transform->fixed_ivlen );
   df5e0:	46ae      	mov	lr, r5
   df5e2:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
   df5e6:	f85e 0f18 	ldr.w	r0, [lr, #24]!
   df5ea:	f8de 1004 	ldr.w	r1, [lr, #4]
   df5ee:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   df5f2:	f8de 0008 	ldr.w	r0, [lr, #8]
   df5f6:	f8cc 0000 	str.w	r0, [ip]
            for( i = 0; i < 8; i++ )
   df5fa:	1e59      	subs	r1, r3, #1
   df5fc:	a80a      	add	r0, sp, #40	; 0x28
   df5fe:	3307      	adds	r3, #7
                iv[i+4] ^= ssl->out_ctr[i];
   df600:	f811 ef01 	ldrb.w	lr, [r1, #1]!
   df604:	f890 c000 	ldrb.w	ip, [r0]
            for( i = 0; i < 8; i++ )
   df608:	4299      	cmp	r1, r3
                iv[i+4] ^= ssl->out_ctr[i];
   df60a:	ea8c 0c0e 	eor.w	ip, ip, lr
   df60e:	f800 cb01 	strb.w	ip, [r0], #1
            for( i = 0; i < 8; i++ )
   df612:	d1f5      	bne.n	df600 <mbedtls_ssl_write_record+0x190>
   df614:	e798      	b.n	df548 <mbedtls_ssl_write_record+0xd8>
        for( i = 8; i > ssl_ep_len( ssl ); i-- )
   df616:	4291      	cmp	r1, r2
   df618:	d1d5      	bne.n	df5c6 <mbedtls_ssl_write_record+0x156>
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
   df61a:	4805      	ldr	r0, [pc, #20]	; (df630 <mbedtls_ssl_write_record+0x1c0>)
   df61c:	e002      	b.n	df624 <mbedtls_ssl_write_record+0x1b4>
        ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
   df61e:	4620      	mov	r0, r4
   df620:	f7ff fef6 	bl	df410 <mbedtls_ssl_flush_output>
}
   df624:	b011      	add	sp, #68	; 0x44
   df626:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   df62a:	4802      	ldr	r0, [pc, #8]	; (df634 <mbedtls_ssl_write_record+0x1c4>)
   df62c:	e7fa      	b.n	df624 <mbedtls_ssl_write_record+0x1b4>
   df62e:	bf00      	nop
   df630:	ffff9480 	.word	0xffff9480
   df634:	ffff9400 	.word	0xffff9400

000df638 <mbedtls_ssl_write_handshake_msg>:
{
   df638:	b538      	push	{r3, r4, r5, lr}
   df63a:	4604      	mov	r4, r0
    const unsigned char hs_type = ssl->out_msg[0];
   df63c:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
    if( ssl->out_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE          &&
   df640:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
    const size_t hs_len = ssl->out_msglen - 4;
   df644:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    const unsigned char hs_type = ssl->out_msg[0];
   df648:	7808      	ldrb	r0, [r1, #0]
    if( ssl->out_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE          &&
   df64a:	2a16      	cmp	r2, #22
   df64c:	d003      	beq.n	df656 <mbedtls_ssl_write_handshake_msg+0x1e>
   df64e:	2a14      	cmp	r2, #20
   df650:	d002      	beq.n	df658 <mbedtls_ssl_write_handshake_msg+0x20>
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   df652:	4814      	ldr	r0, [pc, #80]	; (df6a4 <mbedtls_ssl_write_handshake_msg+0x6c>)
}
   df654:	bd38      	pop	{r3, r4, r5, pc}
    if( ! ( ssl->out_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE &&
   df656:	b308      	cbz	r0, df69c <mbedtls_ssl_write_handshake_msg+0x64>
            hs_type          == MBEDTLS_SSL_HS_HELLO_REQUEST ) &&
   df658:	6b25      	ldr	r5, [r4, #48]	; 0x30
   df65a:	2d00      	cmp	r5, #0
   df65c:	d0f9      	beq.n	df652 <mbedtls_ssl_write_handshake_msg+0x1a>
    if( ssl->out_msglen > MBEDTLS_SSL_OUT_CONTENT_LEN )
   df65e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   df662:	d8f6      	bhi.n	df652 <mbedtls_ssl_write_handshake_msg+0x1a>
    if( ssl->out_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
   df664:	2a16      	cmp	r2, #22
   df666:	d113      	bne.n	df690 <mbedtls_ssl_write_handshake_msg+0x58>
    const size_t hs_len = ssl->out_msglen - 4;
   df668:	3b04      	subs	r3, #4
        ssl->out_msg[1] = (unsigned char)( hs_len >> 16 );
   df66a:	0c1a      	lsrs	r2, r3, #16
   df66c:	704a      	strb	r2, [r1, #1]
        ssl->out_msg[2] = (unsigned char)( hs_len >>  8 );
   df66e:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   df672:	0a19      	lsrs	r1, r3, #8
   df674:	7091      	strb	r1, [r2, #2]
        ssl->out_msg[3] = (unsigned char)( hs_len       );
   df676:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   df67a:	70d3      	strb	r3, [r2, #3]
        if( hs_type != MBEDTLS_SSL_HS_HELLO_REQUEST )
   df67c:	b140      	cbz	r0, df690 <mbedtls_ssl_write_handshake_msg+0x58>
            ssl->handshake->update_checksum( ssl, ssl->out_msg, ssl->out_msglen );
   df67e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   df680:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   df684:	f8d3 32a0 	ldr.w	r3, [r3, #672]	; 0x2a0
   df688:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
   df68c:	4620      	mov	r0, r4
   df68e:	4798      	blx	r3
        if( ( ret = mbedtls_ssl_write_record( ssl, SSL_FORCE_FLUSH ) ) != 0 )
   df690:	4620      	mov	r0, r4
   df692:	2101      	movs	r1, #1
}
   df694:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        if( ( ret = mbedtls_ssl_write_record( ssl, SSL_FORCE_FLUSH ) ) != 0 )
   df698:	f7ff beea 	b.w	df470 <mbedtls_ssl_write_record>
    if( ssl->out_msglen > MBEDTLS_SSL_OUT_CONTENT_LEN )
   df69c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   df6a0:	d9e2      	bls.n	df668 <mbedtls_ssl_write_handshake_msg+0x30>
   df6a2:	e7d6      	b.n	df652 <mbedtls_ssl_write_handshake_msg+0x1a>
   df6a4:	ffff9400 	.word	0xffff9400

000df6a8 <mbedtls_ssl_prepare_handshake_record>:
{
   df6a8:	b510      	push	{r4, lr}
    if( ssl->in_msglen < mbedtls_ssl_hs_hdr_len( ssl ) )
   df6aa:	6f01      	ldr	r1, [r0, #112]	; 0x70
   df6ac:	2903      	cmp	r1, #3
   df6ae:	d90e      	bls.n	df6ce <mbedtls_ssl_prepare_handshake_record+0x26>
    ssl->in_hslen = mbedtls_ssl_hs_hdr_len( ssl ) + ssl_get_hs_total_len( ssl );
   df6b0:	6e42      	ldr	r2, [r0, #100]	; 0x64
            ( ssl->in_msg[2] << 8  ) |
   df6b2:	7893      	ldrb	r3, [r2, #2]
    return( ( ssl->in_msg[1] << 16 ) |
   df6b4:	7854      	ldrb	r4, [r2, #1]
              ssl->in_msg[3] );
   df6b6:	78d2      	ldrb	r2, [r2, #3]
            ( ssl->in_msg[2] << 8  ) |
   df6b8:	021b      	lsls	r3, r3, #8
    return( ( ssl->in_msg[1] << 16 ) |
   df6ba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
            ( ssl->in_msg[2] << 8  ) |
   df6be:	4313      	orrs	r3, r2
    ssl->in_hslen = mbedtls_ssl_hs_hdr_len( ssl ) + ssl_get_hs_total_len( ssl );
   df6c0:	3304      	adds	r3, #4
   df6c2:	6783      	str	r3, [r0, #120]	; 0x78
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
   df6c4:	4803      	ldr	r0, [pc, #12]	; (df6d4 <mbedtls_ssl_prepare_handshake_record+0x2c>)
   df6c6:	4299      	cmp	r1, r3
   df6c8:	bf28      	it	cs
   df6ca:	2000      	movcs	r0, #0
}
   df6cc:	bd10      	pop	{r4, pc}
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
   df6ce:	4802      	ldr	r0, [pc, #8]	; (df6d8 <mbedtls_ssl_prepare_handshake_record+0x30>)
   df6d0:	e7fc      	b.n	df6cc <mbedtls_ssl_prepare_handshake_record+0x24>
   df6d2:	bf00      	nop
   df6d4:	ffff8f80 	.word	0xffff8f80
   df6d8:	ffff8e00 	.word	0xffff8e00

000df6dc <mbedtls_ssl_update_handshake_status>:
    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER && hs != NULL )
   df6dc:	6842      	ldr	r2, [r0, #4]
   df6de:	2a10      	cmp	r2, #16
{
   df6e0:	b410      	push	{r4}
    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER && hs != NULL )
   df6e2:	d009      	beq.n	df6f8 <mbedtls_ssl_update_handshake_status+0x1c>
    mbedtls_ssl_handshake_params * const hs = ssl->handshake;
   df6e4:	6b02      	ldr	r2, [r0, #48]	; 0x30
    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER && hs != NULL )
   df6e6:	b13a      	cbz	r2, df6f8 <mbedtls_ssl_update_handshake_status+0x1c>
        ssl->handshake->update_checksum( ssl, ssl->in_msg, ssl->in_hslen );
   df6e8:	f8d2 42a0 	ldr.w	r4, [r2, #672]	; 0x2a0
   df6ec:	6e41      	ldr	r1, [r0, #100]	; 0x64
   df6ee:	6f82      	ldr	r2, [r0, #120]	; 0x78
   df6f0:	4623      	mov	r3, r4
}
   df6f2:	f85d 4b04 	ldr.w	r4, [sp], #4
        ssl->handshake->update_checksum( ssl, ssl->in_msg, ssl->in_hslen );
   df6f6:	4718      	bx	r3
}
   df6f8:	f85d 4b04 	ldr.w	r4, [sp], #4
   df6fc:	4770      	bx	lr
	...

000df700 <mbedtls_ssl_handle_message_type>:
{
   df700:	b510      	push	{r4, lr}
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
   df702:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   df704:	2b16      	cmp	r3, #22
{
   df706:	4604      	mov	r4, r0
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
   df708:	d00c      	beq.n	df724 <mbedtls_ssl_handle_message_type+0x24>
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC )
   df70a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   df70c:	2b14      	cmp	r3, #20
   df70e:	d10e      	bne.n	df72e <mbedtls_ssl_handle_message_type+0x2e>
        if( ssl->in_msglen != 1 )
   df710:	6f23      	ldr	r3, [r4, #112]	; 0x70
   df712:	2b01      	cmp	r3, #1
   df714:	d11d      	bne.n	df752 <mbedtls_ssl_handle_message_type+0x52>
        if( ssl->in_msg[0] != 1 )
   df716:	6e63      	ldr	r3, [r4, #100]	; 0x64
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
   df718:	4812      	ldr	r0, [pc, #72]	; (df764 <mbedtls_ssl_handle_message_type+0x64>)
        if( ssl->in_msg[0] != 1 )
   df71a:	781b      	ldrb	r3, [r3, #0]
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
   df71c:	2b01      	cmp	r3, #1
            return( 0 );
   df71e:	bf08      	it	eq
   df720:	2000      	moveq	r0, #0
   df722:	e003      	b.n	df72c <mbedtls_ssl_handle_message_type+0x2c>
        if( ( ret = mbedtls_ssl_prepare_handshake_record( ssl ) ) != 0 )
   df724:	f7ff ffc0 	bl	df6a8 <mbedtls_ssl_prepare_handshake_record>
   df728:	2800      	cmp	r0, #0
   df72a:	d0ee      	beq.n	df70a <mbedtls_ssl_handle_message_type+0xa>
}
   df72c:	bd10      	pop	{r4, pc}
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT )
   df72e:	2b15      	cmp	r3, #21
   df730:	d10d      	bne.n	df74e <mbedtls_ssl_handle_message_type+0x4e>
        if( ssl->in_msglen != 2 )
   df732:	6f23      	ldr	r3, [r4, #112]	; 0x70
   df734:	2b02      	cmp	r3, #2
   df736:	d10c      	bne.n	df752 <mbedtls_ssl_handle_message_type+0x52>
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_FATAL )
   df738:	6e63      	ldr	r3, [r4, #100]	; 0x64
   df73a:	781a      	ldrb	r2, [r3, #0]
   df73c:	2a02      	cmp	r2, #2
   df73e:	d00a      	beq.n	df756 <mbedtls_ssl_handle_message_type+0x56>
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
   df740:	2a01      	cmp	r2, #1
   df742:	d10a      	bne.n	df75a <mbedtls_ssl_handle_message_type+0x5a>
            ssl->in_msg[1] == MBEDTLS_SSL_ALERT_MSG_CLOSE_NOTIFY )
   df744:	785b      	ldrb	r3, [r3, #1]
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
   df746:	b153      	cbz	r3, df75e <mbedtls_ssl_handle_message_type+0x5e>
            return( 0 );
   df748:	4807      	ldr	r0, [pc, #28]	; (df768 <mbedtls_ssl_handle_message_type+0x68>)
   df74a:	2b64      	cmp	r3, #100	; 0x64
   df74c:	e7e7      	b.n	df71e <mbedtls_ssl_handle_message_type+0x1e>
   df74e:	2000      	movs	r0, #0
   df750:	e7ec      	b.n	df72c <mbedtls_ssl_handle_message_type+0x2c>
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
   df752:	4804      	ldr	r0, [pc, #16]	; (df764 <mbedtls_ssl_handle_message_type+0x64>)
   df754:	e7ea      	b.n	df72c <mbedtls_ssl_handle_message_type+0x2c>
            return( MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE );
   df756:	4805      	ldr	r0, [pc, #20]	; (df76c <mbedtls_ssl_handle_message_type+0x6c>)
   df758:	e7e8      	b.n	df72c <mbedtls_ssl_handle_message_type+0x2c>
        return MBEDTLS_ERR_SSL_NON_FATAL;
   df75a:	4803      	ldr	r0, [pc, #12]	; (df768 <mbedtls_ssl_handle_message_type+0x68>)
   df75c:	e7e6      	b.n	df72c <mbedtls_ssl_handle_message_type+0x2c>
            return( MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY );
   df75e:	4804      	ldr	r0, [pc, #16]	; (df770 <mbedtls_ssl_handle_message_type+0x70>)
   df760:	e7e4      	b.n	df72c <mbedtls_ssl_handle_message_type+0x2c>
   df762:	bf00      	nop
   df764:	ffff8e00 	.word	0xffff8e00
   df768:	ffff9980 	.word	0xffff9980
   df76c:	ffff8880 	.word	0xffff8880
   df770:	ffff8780 	.word	0xffff8780

000df774 <mbedtls_ssl_send_alert_message>:
{
   df774:	b410      	push	{r4}
    if( ssl == NULL || ssl->conf == NULL )
   df776:	b188      	cbz	r0, df79c <mbedtls_ssl_send_alert_message+0x28>
   df778:	6804      	ldr	r4, [r0, #0]
   df77a:	b17c      	cbz	r4, df79c <mbedtls_ssl_send_alert_message+0x28>
    ssl->out_msglen = 2;
   df77c:	2402      	movs	r4, #2
   df77e:	f04f 0c15 	mov.w	ip, #21
   df782:	e9c0 c427 	strd	ip, r4, [r0, #156]	; 0x9c
    ssl->out_msg[0] = level;
   df786:	f8d0 4098 	ldr.w	r4, [r0, #152]	; 0x98
   df78a:	7021      	strb	r1, [r4, #0]
    ssl->out_msg[1] = message;
   df78c:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
   df790:	705a      	strb	r2, [r3, #1]
}
   df792:	f85d 4b04 	ldr.w	r4, [sp], #4
    if( ( ret = mbedtls_ssl_write_record( ssl, SSL_FORCE_FLUSH ) ) != 0 )
   df796:	2101      	movs	r1, #1
   df798:	f7ff be6a 	b.w	df470 <mbedtls_ssl_write_record>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   df79c:	4801      	ldr	r0, [pc, #4]	; (df7a4 <mbedtls_ssl_send_alert_message+0x30>)
}
   df79e:	f85d 4b04 	ldr.w	r4, [sp], #4
   df7a2:	4770      	bx	lr
   df7a4:	ffff8f00 	.word	0xffff8f00

000df7a8 <mbedtls_ssl_read_record>:
{
   df7a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if( ssl->keep_current_message == 0 )
   df7ac:	f8d0 6080 	ldr.w	r6, [r0, #128]	; 0x80
{
   df7b0:	b091      	sub	sp, #68	; 0x44
   df7b2:	4604      	mov	r4, r0
   df7b4:	460f      	mov	r7, r1
    if( ssl->keep_current_message == 0 )
   df7b6:	2e00      	cmp	r6, #0
   df7b8:	f040 812c 	bne.w	dfa14 <mbedtls_ssl_read_record+0x26c>
    if( ssl->in_hslen != 0 )
   df7bc:	6fa1      	ldr	r1, [r4, #120]	; 0x78
   df7be:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   df7c0:	2900      	cmp	r1, #0
   df7c2:	d032      	beq.n	df82a <mbedtls_ssl_read_record+0x82>
        if( ssl->in_offt != NULL )
   df7c4:	b10b      	cbz	r3, df7ca <mbedtls_ssl_read_record+0x22>
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   df7c6:	4d95      	ldr	r5, [pc, #596]	; (dfa1c <mbedtls_ssl_read_record+0x274>)
   df7c8:	e029      	b.n	df81e <mbedtls_ssl_read_record+0x76>
        if( ssl->in_hslen < ssl->in_msglen )
   df7ca:	6f22      	ldr	r2, [r4, #112]	; 0x70
   df7cc:	4291      	cmp	r1, r2
   df7ce:	d22a      	bcs.n	df826 <mbedtls_ssl_read_record+0x7e>
            memmove( ssl->in_msg, ssl->in_msg + ssl->in_hslen,
   df7d0:	6e60      	ldr	r0, [r4, #100]	; 0x64
            ssl->in_msglen -= ssl->in_hslen;
   df7d2:	1a52      	subs	r2, r2, r1
   df7d4:	6722      	str	r2, [r4, #112]	; 0x70
            memmove( ssl->in_msg, ssl->in_msg + ssl->in_hslen,
   df7d6:	4401      	add	r1, r0
   df7d8:	f009 f886 	bl	e88e8 <memmove>
        ssl->in_hslen   = 0;
   df7dc:	67a6      	str	r6, [r4, #120]	; 0x78
    if( ssl->in_msglen > 0 )
   df7de:	6f23      	ldr	r3, [r4, #112]	; 0x70
   df7e0:	2b00      	cmp	r3, #0
   df7e2:	f040 80f9 	bne.w	df9d8 <mbedtls_ssl_read_record+0x230>
    if( ( ret = mbedtls_ssl_fetch_input( ssl, mbedtls_ssl_hdr_len( ssl ) ) ) != 0 )
   df7e6:	2105      	movs	r1, #5
   df7e8:	4620      	mov	r0, r4
   df7ea:	f7ff fdcf 	bl	df38c <mbedtls_ssl_fetch_input>
   df7ee:	4605      	mov	r5, r0
   df7f0:	2800      	cmp	r0, #0
   df7f2:	f040 80b0 	bne.w	df956 <mbedtls_ssl_read_record+0x1ae>
    ssl->in_msgtype =  ssl->in_hdr[0];
   df7f6:	6da2      	ldr	r2, [r4, #88]	; 0x58
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
   df7f8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
    ssl->in_msgtype =  ssl->in_hdr[0];
   df7fa:	7813      	ldrb	r3, [r2, #0]
   df7fc:	66e3      	str	r3, [r4, #108]	; 0x6c
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
   df7fe:	8809      	ldrh	r1, [r1, #0]
    mbedtls_ssl_read_version( &major_ver, &minor_ver, ssl->conf->transport, ssl->in_hdr + 1 );
   df800:	6820      	ldr	r0, [r4, #0]
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
   df802:	ba49      	rev16	r1, r1
   df804:	b289      	uxth	r1, r1
        ssl->in_msgtype != MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC &&
   df806:	3b14      	subs	r3, #20
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
   df808:	6721      	str	r1, [r4, #112]	; 0x70
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE &&
   df80a:	2b03      	cmp	r3, #3
    else
#else
    ((void) transport);
#endif
    {
        *major = ver[0];
   df80c:	7855      	ldrb	r5, [r2, #1]
        *minor = ver[1];
   df80e:	7892      	ldrb	r2, [r2, #2]
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE &&
   df810:	d90f      	bls.n	df832 <mbedtls_ssl_read_record+0x8a>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   df812:	220a      	movs	r2, #10
   df814:	2102      	movs	r1, #2
   df816:	4620      	mov	r0, r4
   df818:	f7ff ffac 	bl	df774 <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   df81c:	4d80      	ldr	r5, [pc, #512]	; (dfa20 <mbedtls_ssl_read_record+0x278>)
}
   df81e:	4628      	mov	r0, r5
   df820:	b011      	add	sp, #68	; 0x44
   df822:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            ssl->in_msglen = 0;
   df826:	6723      	str	r3, [r4, #112]	; 0x70
   df828:	e7d8      	b.n	df7dc <mbedtls_ssl_read_record+0x34>
    else if( ssl->in_offt != NULL )
   df82a:	2b00      	cmp	r3, #0
   df82c:	d1d7      	bne.n	df7de <mbedtls_ssl_read_record+0x36>
        ssl->in_msglen = 0;
   df82e:	6723      	str	r3, [r4, #112]	; 0x70
            if( ret != 0 )
   df830:	e7d5      	b.n	df7de <mbedtls_ssl_read_record+0x36>
    if( major_ver != ssl->major_ver )
   df832:	68a3      	ldr	r3, [r4, #8]
   df834:	429d      	cmp	r5, r3
   df836:	d1f1      	bne.n	df81c <mbedtls_ssl_read_record+0x74>
    if( minor_ver > ssl->conf->max_minor_ver )
   df838:	f890 3079 	ldrb.w	r3, [r0, #121]	; 0x79
   df83c:	4293      	cmp	r3, r2
   df83e:	d3ed      	bcc.n	df81c <mbedtls_ssl_read_record+0x74>
                         - (size_t)( ssl->in_msg - ssl->in_buf ) )
   df840:	6e63      	ldr	r3, [r4, #100]	; 0x64
   df842:	6d22      	ldr	r2, [r4, #80]	; 0x50
   df844:	1a9b      	subs	r3, r3, r2
   df846:	f5c3 5300 	rsb	r3, r3, #8192	; 0x2000
   df84a:	332d      	adds	r3, #45	; 0x2d
    if( ssl->in_msglen > MBEDTLS_SSL_IN_BUFFER_LEN
   df84c:	4299      	cmp	r1, r3
   df84e:	d8e5      	bhi.n	df81c <mbedtls_ssl_read_record+0x74>
    if( ssl->transform_in == NULL )
   df850:	6b63      	ldr	r3, [r4, #52]	; 0x34
   df852:	b9e3      	cbnz	r3, df88e <mbedtls_ssl_read_record+0xe6>
        if( ssl->in_msglen < 1 ||
   df854:	1e4b      	subs	r3, r1, #1
   df856:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   df85a:	d2df      	bcs.n	df81c <mbedtls_ssl_read_record+0x74>
    if( ( ret = mbedtls_ssl_fetch_input( ssl,
   df85c:	3105      	adds	r1, #5
   df85e:	4620      	mov	r0, r4
   df860:	f7ff fd94 	bl	df38c <mbedtls_ssl_fetch_input>
   df864:	4605      	mov	r5, r0
   df866:	2800      	cmp	r0, #0
   df868:	d175      	bne.n	df956 <mbedtls_ssl_read_record+0x1ae>
    if( !done && ssl->transform_in != NULL )
   df86a:	6b65      	ldr	r5, [r4, #52]	; 0x34
        ssl->in_left = 0;
   df86c:	6760      	str	r0, [r4, #116]	; 0x74
    if( !done && ssl->transform_in != NULL )
   df86e:	2d00      	cmp	r5, #0
   df870:	f000 80b2 	beq.w	df9d8 <mbedtls_ssl_read_record+0x230>
    if( ssl->session_in == NULL || ssl->transform_in == NULL )
   df874:	6a23      	ldr	r3, [r4, #32]
   df876:	2b00      	cmp	r3, #0
   df878:	d0a5      	beq.n	df7c6 <mbedtls_ssl_read_record+0x1e>
    mode = mbedtls_cipher_get_cipher_mode( &ssl->transform_in->cipher_ctx_dec );
   df87a:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
    if( ctx->cipher_info == NULL )
   df87e:	b103      	cbz	r3, df882 <mbedtls_ssl_read_record+0xda>
    return ctx->cipher_info->mode;
   df880:	785b      	ldrb	r3, [r3, #1]
    if( ssl->in_msglen < ssl->transform_in->minlen )
   df882:	6f22      	ldr	r2, [r4, #112]	; 0x70
   df884:	68a9      	ldr	r1, [r5, #8]
   df886:	428a      	cmp	r2, r1
   df888:	d20c      	bcs.n	df8a4 <mbedtls_ssl_read_record+0xfc>
                return( MBEDTLS_ERR_SSL_INVALID_MAC );
   df88a:	4d66      	ldr	r5, [pc, #408]	; (dfa24 <mbedtls_ssl_read_record+0x27c>)
   df88c:	e7c7      	b.n	df81e <mbedtls_ssl_read_record+0x76>
        if( ssl->in_msglen < ssl->transform_in->minlen )
   df88e:	689b      	ldr	r3, [r3, #8]
   df890:	4299      	cmp	r1, r3
   df892:	d3c3      	bcc.n	df81c <mbedtls_ssl_read_record+0x74>
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 &&
   df894:	68e2      	ldr	r2, [r4, #12]
   df896:	2a00      	cmp	r2, #0
   df898:	dde0      	ble.n	df85c <mbedtls_ssl_read_record+0xb4>
                             MBEDTLS_SSL_IN_CONTENT_LEN + 256 )
   df89a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 &&
   df89e:	4299      	cmp	r1, r3
   df8a0:	d9dc      	bls.n	df85c <mbedtls_ssl_read_record+0xb4>
   df8a2:	e7bb      	b.n	df81c <mbedtls_ssl_read_record+0x74>
    if( mode == MBEDTLS_MODE_GCM ||
   df8a4:	2b06      	cmp	r3, #6
   df8a6:	d003      	beq.n	df8b0 <mbedtls_ssl_read_record+0x108>
   df8a8:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   df8ac:	2b08      	cmp	r3, #8
   df8ae:	d18a      	bne.n	df7c6 <mbedtls_ssl_read_record+0x1e>
        unsigned char taglen = transform->ciphersuite_info->flags &
   df8b0:	682b      	ldr	r3, [r5, #0]
        size_t explicit_iv_len = transform->ivlen - transform->fixed_ivlen;
   df8b2:	e9d5 1003 	ldrd	r1, r0, [r5, #12]
        unsigned char taglen = transform->ciphersuite_info->flags &
   df8b6:	7f1b      	ldrb	r3, [r3, #28]
   df8b8:	f013 0f02 	tst.w	r3, #2
   df8bc:	bf14      	ite	ne
   df8be:	f04f 0e08 	movne.w	lr, #8
   df8c2:	f04f 0e10 	moveq.w	lr, #16
        size_t explicit_iv_len = transform->ivlen - transform->fixed_ivlen;
   df8c6:	1a0b      	subs	r3, r1, r0
        if( ssl->in_msglen < explicit_iv_len + taglen )
   df8c8:	4473      	add	r3, lr
   df8ca:	429a      	cmp	r2, r3
   df8cc:	d3dd      	bcc.n	df88a <mbedtls_ssl_read_record+0xe2>
        dec_msglen = ssl->in_msglen - explicit_iv_len - taglen;
   df8ce:	eb02 0800 	add.w	r8, r2, r0
   df8d2:	eba8 0801 	sub.w	r8, r8, r1
   df8d6:	eba8 080e 	sub.w	r8, r8, lr
        memcpy( add_data, ssl->in_ctr, 8 );
   df8da:	6d63      	ldr	r3, [r4, #84]	; 0x54
        ssl->in_msglen = dec_msglen;
   df8dc:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
        memcpy( add_data, ssl->in_ctr, 8 );
   df8e0:	6859      	ldr	r1, [r3, #4]
   df8e2:	6818      	ldr	r0, [r3, #0]
        add_data[12] = ssl->in_msglen & 0xFF;
   df8e4:	f88d 803c 	strb.w	r8, [sp, #60]	; 0x3c
        memcpy( add_data, ssl->in_ctr, 8 );
   df8e8:	aa0c      	add	r2, sp, #48	; 0x30
   df8ea:	c203      	stmia	r2!, {r0, r1}
        add_data[8]  = ssl->in_msgtype;
   df8ec:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   df8ee:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
        ver[0] = (unsigned char) major;
   df8f2:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
        ver[1] = (unsigned char) minor;
   df8f6:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
        add_data[11] = ( ssl->in_msglen >> 8 ) & 0xFF;
   df8fa:	ea4f 2218 	mov.w	r2, r8, lsr #8
   df8fe:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
        if( transform->ivlen == 12 && transform->fixed_ivlen == 4 )
   df902:	68ea      	ldr	r2, [r5, #12]
        dec_msg = ssl->in_msg;
   df904:	f8d4 9064 	ldr.w	r9, [r4, #100]	; 0x64
        ver[0] = (unsigned char) major;
   df908:	f88d 1039 	strb.w	r1, [sp, #57]	; 0x39
        if( transform->ivlen == 12 && transform->fixed_ivlen == 4 )
   df90c:	2a0c      	cmp	r2, #12
   df90e:	f47f af5a 	bne.w	df7c6 <mbedtls_ssl_read_record+0x1e>
   df912:	692a      	ldr	r2, [r5, #16]
   df914:	2a04      	cmp	r2, #4
   df916:	d123      	bne.n	df960 <mbedtls_ssl_read_record+0x1b8>
            memcpy( iv, transform->iv_dec, transform->fixed_ivlen );
   df918:	6aab      	ldr	r3, [r5, #40]	; 0x28
            memcpy( iv + transform->fixed_ivlen, ssl->in_iv, 8 );
   df91a:	6e22      	ldr	r2, [r4, #96]	; 0x60
            memcpy( iv, transform->iv_dec, transform->fixed_ivlen );
   df91c:	9309      	str	r3, [sp, #36]	; 0x24
            memcpy( iv + transform->fixed_ivlen, ssl->in_iv, 8 );
   df91e:	6810      	ldr	r0, [r2, #0]
   df920:	6851      	ldr	r1, [r2, #4]
   df922:	ab0a      	add	r3, sp, #40	; 0x28
   df924:	c303      	stmia	r3!, {r0, r1}
                                         dec_msg + dec_msglen, taglen ) ) != 0 )
   df926:	eb09 0308 	add.w	r3, r9, r8
        if( ( ret = mbedtls_cipher_auth_decrypt( &ssl->transform_in->cipher_ctx_dec,
   df92a:	9305      	str	r3, [sp, #20]
   df92c:	ab08      	add	r3, sp, #32
   df92e:	e9cd 9303 	strd	r9, r3, [sp, #12]
   df932:	230d      	movs	r3, #13
   df934:	9300      	str	r3, [sp, #0]
   df936:	f105 0088 	add.w	r0, r5, #136	; 0x88
   df93a:	e9cd 9801 	strd	r9, r8, [sp, #4]
   df93e:	f8cd e018 	str.w	lr, [sp, #24]
   df942:	ab0c      	add	r3, sp, #48	; 0x30
   df944:	220c      	movs	r2, #12
   df946:	a909      	add	r1, sp, #36	; 0x24
   df948:	f7f6 fcd0 	bl	d62ec <mbedtls_cipher_auth_decrypt>
   df94c:	4605      	mov	r5, r0
   df94e:	b308      	cbz	r0, df994 <mbedtls_ssl_read_record+0x1ec>
            if( ret == MBEDTLS_ERR_CIPHER_AUTH_FAILED )
   df950:	f510 4fc6 	cmn.w	r0, #25344	; 0x6300
   df954:	d099      	beq.n	df88a <mbedtls_ssl_read_record+0xe2>
                    if( ret == MBEDTLS_ERR_SSL_CONTINUE_PROCESSING )
   df956:	f515 4fcb 	cmn.w	r5, #25984	; 0x6580
   df95a:	f47f af60 	bne.w	df81e <mbedtls_ssl_read_record+0x76>
   df95e:	e72d      	b.n	df7bc <mbedtls_ssl_read_record+0x14>
        else if( transform->ivlen == 12 && transform->fixed_ivlen == 12 )
   df960:	2a0c      	cmp	r2, #12
   df962:	f47f af30 	bne.w	df7c6 <mbedtls_ssl_read_record+0x1e>
            memcpy( iv, transform->iv_dec, transform->fixed_ivlen );
   df966:	46ac      	mov	ip, r5
   df968:	aa09      	add	r2, sp, #36	; 0x24
   df96a:	f85c 0f28 	ldr.w	r0, [ip, #40]!
   df96e:	f8dc 1004 	ldr.w	r1, [ip, #4]
   df972:	c203      	stmia	r2!, {r0, r1}
   df974:	f8dc 0008 	ldr.w	r0, [ip, #8]
   df978:	6010      	str	r0, [r2, #0]
            for( i = 0; i < 8; i++ )
   df97a:	a90a      	add	r1, sp, #40	; 0x28
   df97c:	1e5a      	subs	r2, r3, #1
   df97e:	3307      	adds	r3, #7
                iv[i+4] ^= ssl->in_ctr[i];
   df980:	f812 cf01 	ldrb.w	ip, [r2, #1]!
   df984:	7808      	ldrb	r0, [r1, #0]
            for( i = 0; i < 8; i++ )
   df986:	429a      	cmp	r2, r3
                iv[i+4] ^= ssl->in_ctr[i];
   df988:	ea80 000c 	eor.w	r0, r0, ip
   df98c:	f801 0b01 	strb.w	r0, [r1], #1
            for( i = 0; i < 8; i++ )
   df990:	d1f6      	bne.n	df980 <mbedtls_ssl_read_record+0x1d8>
   df992:	e7c8      	b.n	df926 <mbedtls_ssl_read_record+0x17e>
        if( olen != dec_msglen )
   df994:	9b08      	ldr	r3, [sp, #32]
   df996:	4598      	cmp	r8, r3
   df998:	f47f af15 	bne.w	df7c6 <mbedtls_ssl_read_record+0x1e>
    if( ssl->in_msglen == 0 )
   df99c:	6f23      	ldr	r3, [r4, #112]	; 0x70
   df99e:	b10b      	cbz	r3, df9a4 <mbedtls_ssl_read_record+0x1fc>
        ssl->nb_zero = 0;
   df9a0:	67e0      	str	r0, [r4, #124]	; 0x7c
   df9a2:	e00c      	b.n	df9be <mbedtls_ssl_read_record+0x216>
        if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3
   df9a4:	68e3      	ldr	r3, [r4, #12]
   df9a6:	2b03      	cmp	r3, #3
   df9a8:	d103      	bne.n	df9b2 <mbedtls_ssl_read_record+0x20a>
            && ssl->in_msgtype != MBEDTLS_SSL_MSG_APPLICATION_DATA )
   df9aa:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   df9ac:	2b17      	cmp	r3, #23
   df9ae:	f47f af35 	bne.w	df81c <mbedtls_ssl_read_record+0x74>
        ssl->nb_zero++;
   df9b2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   df9b4:	3301      	adds	r3, #1
        if( ssl->nb_zero > 3 )
   df9b6:	2b03      	cmp	r3, #3
        ssl->nb_zero++;
   df9b8:	67e3      	str	r3, [r4, #124]	; 0x7c
        if( ssl->nb_zero > 3 )
   df9ba:	f73f af66 	bgt.w	df88a <mbedtls_ssl_read_record+0xe2>
        unsigned char taglen = transform->ciphersuite_info->flags &
   df9be:	2207      	movs	r2, #7
            if( ++ssl->in_ctr[i - 1] != 0 )
   df9c0:	6d61      	ldr	r1, [r4, #84]	; 0x54
   df9c2:	5c8b      	ldrb	r3, [r1, r2]
   df9c4:	3301      	adds	r3, #1
   df9c6:	b2db      	uxtb	r3, r3
   df9c8:	548b      	strb	r3, [r1, r2]
   df9ca:	3a01      	subs	r2, #1
   df9cc:	b1f3      	cbz	r3, dfa0c <mbedtls_ssl_read_record+0x264>
        if( ssl->in_msglen > MBEDTLS_SSL_IN_CONTENT_LEN )
   df9ce:	6f23      	ldr	r3, [r4, #112]	; 0x70
   df9d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   df9d4:	f63f af22 	bhi.w	df81c <mbedtls_ssl_read_record+0x74>
            ret = mbedtls_ssl_handle_message_type( ssl );
   df9d8:	4620      	mov	r0, r4
   df9da:	f7ff fe91 	bl	df700 <mbedtls_ssl_handle_message_type>
        } while( MBEDTLS_ERR_SSL_NON_FATAL           == ret  ||
   df9de:	f510 4fcd 	cmn.w	r0, #26240	; 0x6680
            ret = mbedtls_ssl_handle_message_type( ssl );
   df9e2:	4605      	mov	r5, r0
        } while( MBEDTLS_ERR_SSL_NON_FATAL           == ret  ||
   df9e4:	f43f aeea 	beq.w	df7bc <mbedtls_ssl_read_record+0x14>
   df9e8:	f510 4fcb 	cmn.w	r0, #25984	; 0x6580
   df9ec:	f43f aee6 	beq.w	df7bc <mbedtls_ssl_read_record+0x14>
        if( 0 != ret )
   df9f0:	2800      	cmp	r0, #0
   df9f2:	f47f af14 	bne.w	df81e <mbedtls_ssl_read_record+0x76>
        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE &&
   df9f6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   df9f8:	2b16      	cmp	r3, #22
   df9fa:	f47f af10 	bne.w	df81e <mbedtls_ssl_read_record+0x76>
   df9fe:	2f01      	cmp	r7, #1
   dfa00:	f47f af0d 	bne.w	df81e <mbedtls_ssl_read_record+0x76>
            mbedtls_ssl_update_handshake_status( ssl );
   dfa04:	4620      	mov	r0, r4
   dfa06:	f7ff fe69 	bl	df6dc <mbedtls_ssl_update_handshake_status>
   dfa0a:	e708      	b.n	df81e <mbedtls_ssl_read_record+0x76>
        for( i = 8; i > ssl_ep_len( ssl ); i-- )
   dfa0c:	1c53      	adds	r3, r2, #1
   dfa0e:	d1d7      	bne.n	df9c0 <mbedtls_ssl_read_record+0x218>
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
   dfa10:	4d05      	ldr	r5, [pc, #20]	; (dfa28 <mbedtls_ssl_read_record+0x280>)
   dfa12:	e704      	b.n	df81e <mbedtls_ssl_read_record+0x76>
        ssl->keep_current_message = 0;
   dfa14:	2500      	movs	r5, #0
   dfa16:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
   dfa1a:	e700      	b.n	df81e <mbedtls_ssl_read_record+0x76>
   dfa1c:	ffff9400 	.word	0xffff9400
   dfa20:	ffff8e00 	.word	0xffff8e00
   dfa24:	ffff8e80 	.word	0xffff8e80
   dfa28:	ffff9480 	.word	0xffff9480

000dfa2c <mbedtls_ssl_write_certificate>:
{
   dfa2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
   dfa30:	6c03      	ldr	r3, [r0, #64]	; 0x40
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
   dfa32:	681b      	ldr	r3, [r3, #0]
   dfa34:	7a9a      	ldrb	r2, [r3, #10]
   dfa36:	2a0b      	cmp	r2, #11
{
   dfa38:	4604      	mov	r4, r0
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
   dfa3a:	d80a      	bhi.n	dfa52 <mbedtls_ssl_write_certificate+0x26>
   dfa3c:	f44f 6316 	mov.w	r3, #2400	; 0x960
   dfa40:	40d3      	lsrs	r3, r2
   dfa42:	07da      	lsls	r2, r3, #31
   dfa44:	d505      	bpl.n	dfa52 <mbedtls_ssl_write_certificate+0x26>
        ssl->state++;
   dfa46:	6863      	ldr	r3, [r4, #4]
   dfa48:	3301      	adds	r3, #1
   dfa4a:	6063      	str	r3, [r4, #4]
        return( 0 );
   dfa4c:	2000      	movs	r0, #0
}
   dfa4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
   dfa52:	6822      	ldr	r2, [r4, #0]
   dfa54:	f892 307c 	ldrb.w	r3, [r2, #124]	; 0x7c
   dfa58:	07db      	lsls	r3, r3, #31
   dfa5a:	d403      	bmi.n	dfa64 <mbedtls_ssl_write_certificate+0x38>
        if( ssl->client_auth == 0 )
   dfa5c:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   dfa60:	2b00      	cmp	r3, #0
   dfa62:	d0f0      	beq.n	dfa46 <mbedtls_ssl_write_certificate+0x1a>

static inline mbedtls_x509_crt *mbedtls_ssl_own_cert( mbedtls_ssl_context *ssl )
{
    mbedtls_ssl_key_cert *key_cert;

    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
   dfa64:	6b23      	ldr	r3, [r4, #48]	; 0x30
   dfa66:	b113      	cbz	r3, dfa6e <mbedtls_ssl_write_certificate+0x42>
   dfa68:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
   dfa6c:	b90b      	cbnz	r3, dfa72 <mbedtls_ssl_write_certificate+0x46>
        key_cert = ssl->handshake->key_cert;
    else
        key_cert = ssl->conf->key_cert;
   dfa6e:	6d13      	ldr	r3, [r2, #80]	; 0x50

    return( key_cert == NULL ? NULL : key_cert->cert );
   dfa70:	b31b      	cbz	r3, dfaba <mbedtls_ssl_write_certificate+0x8e>
   dfa72:	681e      	ldr	r6, [r3, #0]
        if( n > MBEDTLS_SSL_OUT_CONTENT_LEN - 3 - i )
   dfa74:	f641 77fd 	movw	r7, #8189	; 0x1ffd
   dfa78:	2307      	movs	r3, #7
    while( crt != NULL )
   dfa7a:	b1fe      	cbz	r6, dfabc <mbedtls_ssl_write_certificate+0x90>
        n = crt->raw.len;
   dfa7c:	6875      	ldr	r5, [r6, #4]
        if( n > MBEDTLS_SSL_OUT_CONTENT_LEN - 3 - i )
   dfa7e:	1afa      	subs	r2, r7, r3
   dfa80:	42aa      	cmp	r2, r5
   dfa82:	d338      	bcc.n	dfaf6 <mbedtls_ssl_write_certificate+0xca>
        ssl->out_msg[i    ] = (unsigned char)( n >> 16 );
   dfa84:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   dfa88:	0c29      	lsrs	r1, r5, #16
   dfa8a:	54d1      	strb	r1, [r2, r3]
        ssl->out_msg[i + 1] = (unsigned char)( n >>  8 );
   dfa8c:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   dfa90:	441a      	add	r2, r3
   dfa92:	0a29      	lsrs	r1, r5, #8
   dfa94:	7051      	strb	r1, [r2, #1]
        ssl->out_msg[i + 2] = (unsigned char)( n       );
   dfa96:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   dfa9a:	441a      	add	r2, r3
        i += 3; memcpy( ssl->out_msg + i, crt->raw.p, n );
   dfa9c:	f103 0803 	add.w	r8, r3, #3
        ssl->out_msg[i + 2] = (unsigned char)( n       );
   dfaa0:	7095      	strb	r5, [r2, #2]
        i += 3; memcpy( ssl->out_msg + i, crt->raw.p, n );
   dfaa2:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   dfaa6:	68b1      	ldr	r1, [r6, #8]
   dfaa8:	462a      	mov	r2, r5
   dfaaa:	4440      	add	r0, r8
   dfaac:	f008 ff0e 	bl	e88cc <memcpy>
        i += n; crt = crt->next;
   dfab0:	f8d6 6130 	ldr.w	r6, [r6, #304]	; 0x130
   dfab4:	eb05 0308 	add.w	r3, r5, r8
    while( crt != NULL )
   dfab8:	e7df      	b.n	dfa7a <mbedtls_ssl_write_certificate+0x4e>
   dfaba:	2307      	movs	r3, #7
    ssl->out_msg[4]  = (unsigned char)( ( i - 7 ) >> 16 );
   dfabc:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
   dfac0:	1fda      	subs	r2, r3, #7
   dfac2:	0c10      	lsrs	r0, r2, #16
   dfac4:	7108      	strb	r0, [r1, #4]
    ssl->out_msg[5]  = (unsigned char)( ( i - 7 ) >>  8 );
   dfac6:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
   dfaca:	0a10      	lsrs	r0, r2, #8
   dfacc:	7148      	strb	r0, [r1, #5]
    ssl->out_msg[6]  = (unsigned char)( ( i - 7 )       );
   dface:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
   dfad2:	718a      	strb	r2, [r1, #6]
    ssl->out_msglen  = i;
   dfad4:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
   dfad8:	2316      	movs	r3, #22
   dfada:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE;
   dfade:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   dfae2:	220b      	movs	r2, #11
   dfae4:	701a      	strb	r2, [r3, #0]
    ssl->state++;
   dfae6:	6863      	ldr	r3, [r4, #4]
   dfae8:	3301      	adds	r3, #1
   dfaea:	6063      	str	r3, [r4, #4]
    if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
   dfaec:	4620      	mov	r0, r4
}
   dfaee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
   dfaf2:	f7ff bda1 	b.w	df638 <mbedtls_ssl_write_handshake_msg>
            return( MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE );
   dfaf6:	4801      	ldr	r0, [pc, #4]	; (dfafc <mbedtls_ssl_write_certificate+0xd0>)
   dfaf8:	e7a9      	b.n	dfa4e <mbedtls_ssl_write_certificate+0x22>
   dfafa:	bf00      	nop
   dfafc:	ffff8b00 	.word	0xffff8b00

000dfb00 <mbedtls_ssl_write_change_cipher_spec>:
    ssl->out_msglen  = 1;
   dfb00:	2201      	movs	r2, #1
   dfb02:	2114      	movs	r1, #20
   dfb04:	e9c0 1227 	strd	r1, r2, [r0, #156]	; 0x9c
    ssl->out_msg[0]  = 1;
   dfb08:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
   dfb0c:	700a      	strb	r2, [r1, #0]
    ssl->state++;
   dfb0e:	6842      	ldr	r2, [r0, #4]
   dfb10:	3201      	adds	r2, #1
   dfb12:	6042      	str	r2, [r0, #4]
    if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
   dfb14:	f7ff bd90 	b.w	df638 <mbedtls_ssl_write_handshake_msg>

000dfb18 <mbedtls_ssl_parse_change_cipher_spec>:
{
   dfb18:	b510      	push	{r4, lr}
    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   dfb1a:	2101      	movs	r1, #1
{
   dfb1c:	4604      	mov	r4, r0
    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   dfb1e:	f7ff fe43 	bl	df7a8 <mbedtls_ssl_read_record>
   dfb22:	b940      	cbnz	r0, dfb36 <mbedtls_ssl_parse_change_cipher_spec+0x1e>
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC )
   dfb24:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   dfb26:	2b14      	cmp	r3, #20
   dfb28:	d006      	beq.n	dfb38 <mbedtls_ssl_parse_change_cipher_spec+0x20>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   dfb2a:	220a      	movs	r2, #10
   dfb2c:	2102      	movs	r1, #2
   dfb2e:	4620      	mov	r0, r4
   dfb30:	f7ff fe20 	bl	df774 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
   dfb34:	480f      	ldr	r0, [pc, #60]	; (dfb74 <mbedtls_ssl_parse_change_cipher_spec+0x5c>)
}
   dfb36:	bd10      	pop	{r4, pc}
    ssl->transform_in = ssl->transform_negotiate;
   dfb38:	6c23      	ldr	r3, [r4, #64]	; 0x40
   dfb3a:	6363      	str	r3, [r4, #52]	; 0x34
    ssl->session_in = ssl->session_negotiate;
   dfb3c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   dfb3e:	6223      	str	r3, [r4, #32]
    memset( ssl->in_ctr, 0, 8 );
   dfb40:	6d63      	ldr	r3, [r4, #84]	; 0x54
   dfb42:	6018      	str	r0, [r3, #0]
   dfb44:	6058      	str	r0, [r3, #4]
        ssl->in_ctr = ssl->in_hdr - 8;
   dfb46:	6da3      	ldr	r3, [r4, #88]	; 0x58
    ssl_update_in_pointers( ssl, ssl->transform_negotiate );
   dfb48:	6c21      	ldr	r1, [r4, #64]	; 0x40
        ssl->in_ctr = ssl->in_hdr - 8;
   dfb4a:	f1a3 0208 	sub.w	r2, r3, #8
   dfb4e:	6562      	str	r2, [r4, #84]	; 0x54
        ssl->in_len = ssl->in_hdr + 3;
   dfb50:	1cda      	adds	r2, r3, #3
        ssl->in_iv  = ssl->in_hdr + 5;
   dfb52:	3305      	adds	r3, #5
        ssl->in_len = ssl->in_hdr + 3;
   dfb54:	65e2      	str	r2, [r4, #92]	; 0x5c
        ssl->in_iv  = ssl->in_hdr + 5;
   dfb56:	6623      	str	r3, [r4, #96]	; 0x60
    if( transform != NULL &&
   dfb58:	b131      	cbz	r1, dfb68 <mbedtls_ssl_parse_change_cipher_spec+0x50>
   dfb5a:	68e2      	ldr	r2, [r4, #12]
   dfb5c:	2a01      	cmp	r2, #1
        ssl->in_msg = ssl->in_iv + transform->ivlen - transform->fixed_ivlen;
   dfb5e:	bfc2      	ittt	gt
   dfb60:	e9d1 2103 	ldrdgt	r2, r1, [r1, #12]
   dfb64:	1a52      	subgt	r2, r2, r1
   dfb66:	189b      	addgt	r3, r3, r2
   dfb68:	6663      	str	r3, [r4, #100]	; 0x64
    ssl->state++;
   dfb6a:	6863      	ldr	r3, [r4, #4]
   dfb6c:	3301      	adds	r3, #1
   dfb6e:	6063      	str	r3, [r4, #4]
    return( 0 );
   dfb70:	e7e1      	b.n	dfb36 <mbedtls_ssl_parse_change_cipher_spec+0x1e>
   dfb72:	bf00      	nop
   dfb74:	ffff8900 	.word	0xffff8900

000dfb78 <mbedtls_ssl_optimize_checksum>:
    if( ciphersuite_info->mac == MBEDTLS_MD_SHA384 )
   dfb78:	7a4a      	ldrb	r2, [r1, #9]
   dfb7a:	6b03      	ldr	r3, [r0, #48]	; 0x30
   dfb7c:	2a07      	cmp	r2, #7
        ssl->handshake->update_checksum = ssl_update_checksum_sha384;
   dfb7e:	bf0c      	ite	eq
   dfb80:	4a02      	ldreq	r2, [pc, #8]	; (dfb8c <mbedtls_ssl_optimize_checksum+0x14>)
        ssl->handshake->update_checksum = ssl_update_checksum_sha256;
   dfb82:	4a03      	ldrne	r2, [pc, #12]	; (dfb90 <mbedtls_ssl_optimize_checksum+0x18>)
   dfb84:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
}
   dfb88:	4770      	bx	lr
   dfb8a:	bf00      	nop
   dfb8c:	000def9f 	.word	0x000def9f
   dfb90:	000def95 	.word	0x000def95

000dfb94 <mbedtls_ssl_write_finished>:
{
   dfb94:	b510      	push	{r4, lr}
    ssl_update_out_pointers( ssl, ssl->transform_negotiate );
   dfb96:	6c01      	ldr	r1, [r0, #64]	; 0x40
{
   dfb98:	4604      	mov	r4, r0
    ssl_update_out_pointers( ssl, ssl->transform_negotiate );
   dfb9a:	f7ff f879 	bl	dec90 <_ZL23ssl_update_out_pointersP19mbedtls_ssl_contextP21mbedtls_ssl_transform>
    ssl->handshake->calc_finished( ssl, ssl->out_msg + 4, ssl->conf->endpoint );
   dfb9e:	6803      	ldr	r3, [r0, #0]
   dfba0:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
   dfba4:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
   dfba8:	6b03      	ldr	r3, [r0, #48]	; 0x30
   dfbaa:	f002 0201 	and.w	r2, r2, #1
   dfbae:	f8d3 32a8 	ldr.w	r3, [r3, #680]	; 0x2a8
   dfbb2:	3104      	adds	r1, #4
   dfbb4:	4798      	blx	r3
    hash_len = ( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ) ? 36 : 12;
   dfbb6:	68e3      	ldr	r3, [r4, #12]
   dfbb8:	2b00      	cmp	r3, #0
    ssl->out_msglen  = 4 + hash_len;
   dfbba:	bf14      	ite	ne
   dfbbc:	2310      	movne	r3, #16
   dfbbe:	2328      	moveq	r3, #40	; 0x28
   dfbc0:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
   dfbc4:	2316      	movs	r3, #22
   dfbc6:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_FINISHED;
   dfbca:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   dfbce:	2214      	movs	r2, #20
   dfbd0:	701a      	strb	r2, [r3, #0]
    if( ssl->handshake->resume != 0 )
   dfbd2:	6b23      	ldr	r3, [r4, #48]	; 0x30
   dfbd4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
   dfbd8:	b1a3      	cbz	r3, dfc04 <mbedtls_ssl_write_finished+0x70>
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
   dfbda:	6823      	ldr	r3, [r4, #0]
   dfbdc:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
   dfbe0:	07db      	lsls	r3, r3, #31
   dfbe2:	d401      	bmi.n	dfbe8 <mbedtls_ssl_write_finished+0x54>
            ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
   dfbe4:	230f      	movs	r3, #15
        ssl->state++;
   dfbe6:	6063      	str	r3, [r4, #4]
    memset( ssl->cur_out_ctr, 0, 8 );
   dfbe8:	2300      	movs	r3, #0
   dfbea:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
   dfbee:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
    ssl->transform_out = ssl->transform_negotiate;
   dfbf2:	6c23      	ldr	r3, [r4, #64]	; 0x40
   dfbf4:	63a3      	str	r3, [r4, #56]	; 0x38
    ssl->session_out = ssl->session_negotiate;
   dfbf6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   dfbf8:	6263      	str	r3, [r4, #36]	; 0x24
    if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
   dfbfa:	4620      	mov	r0, r4
}
   dfbfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
   dfc00:	f7ff bd1a 	b.w	df638 <mbedtls_ssl_write_handshake_msg>
        ssl->state++;
   dfc04:	6863      	ldr	r3, [r4, #4]
   dfc06:	3301      	adds	r3, #1
   dfc08:	e7ed      	b.n	dfbe6 <mbedtls_ssl_write_finished+0x52>
	...

000dfc0c <mbedtls_ssl_parse_finished>:
{
   dfc0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ssl->handshake->calc_finished( ssl, buf, ssl->conf->endpoint ^ 1 );
   dfc0e:	6803      	ldr	r3, [r0, #0]
   dfc10:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
   dfc14:	6b03      	ldr	r3, [r0, #48]	; 0x30
{
   dfc16:	b085      	sub	sp, #20
    ssl->handshake->calc_finished( ssl, buf, ssl->conf->endpoint ^ 1 );
   dfc18:	43d2      	mvns	r2, r2
   dfc1a:	ae01      	add	r6, sp, #4
{
   dfc1c:	4604      	mov	r4, r0
    ssl->handshake->calc_finished( ssl, buf, ssl->conf->endpoint ^ 1 );
   dfc1e:	4631      	mov	r1, r6
   dfc20:	f8d3 32a8 	ldr.w	r3, [r3, #680]	; 0x2a8
   dfc24:	f002 0201 	and.w	r2, r2, #1
   dfc28:	4798      	blx	r3
    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   dfc2a:	2101      	movs	r1, #1
   dfc2c:	4620      	mov	r0, r4
   dfc2e:	f7ff fdbb 	bl	df7a8 <mbedtls_ssl_read_record>
   dfc32:	b940      	cbnz	r0, dfc46 <mbedtls_ssl_parse_finished+0x3a>
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
   dfc34:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   dfc36:	2b16      	cmp	r3, #22
   dfc38:	d007      	beq.n	dfc4a <mbedtls_ssl_parse_finished+0x3e>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   dfc3a:	220a      	movs	r2, #10
   dfc3c:	2102      	movs	r1, #2
   dfc3e:	4620      	mov	r0, r4
   dfc40:	f7ff fd98 	bl	df774 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
   dfc44:	481a      	ldr	r0, [pc, #104]	; (dfcb0 <mbedtls_ssl_parse_finished+0xa4>)
}
   dfc46:	b005      	add	sp, #20
   dfc48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_FINISHED ||
   dfc4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
   dfc4c:	7813      	ldrb	r3, [r2, #0]
   dfc4e:	2b14      	cmp	r3, #20
   dfc50:	d102      	bne.n	dfc58 <mbedtls_ssl_parse_finished+0x4c>
   dfc52:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   dfc54:	2b10      	cmp	r3, #16
   dfc56:	d006      	beq.n	dfc66 <mbedtls_ssl_parse_finished+0x5a>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   dfc58:	2232      	movs	r2, #50	; 0x32
   dfc5a:	2102      	movs	r1, #2
   dfc5c:	4620      	mov	r0, r4
   dfc5e:	f7ff fd89 	bl	df774 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_FINISHED );
   dfc62:	4814      	ldr	r0, [pc, #80]	; (dfcb4 <mbedtls_ssl_parse_finished+0xa8>)
   dfc64:	e7ef      	b.n	dfc46 <mbedtls_ssl_parse_finished+0x3a>
static inline int mbedtls_ssl_safer_memcmp( const void *a, const void *b, size_t n )
{
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;
   dfc66:	f88d 0003 	strb.w	r0, [sp, #3]

    for( i = 0; i < n; i++ )
   dfc6a:	4603      	mov	r3, r0
   dfc6c:	3204      	adds	r2, #4
    {
        /* Read volatile data in order before computing diff.
         * This avoids IAR compiler warning:
         * 'the order of volatile accesses is undefined ..' */
        unsigned char x = A[i], y = B[i];
   dfc6e:	5cd5      	ldrb	r5, [r2, r3]
   dfc70:	5cf7      	ldrb	r7, [r6, r3]
        diff |= x ^ y;
   dfc72:	f89d 1003 	ldrb.w	r1, [sp, #3]
   dfc76:	407d      	eors	r5, r7
    for( i = 0; i < n; i++ )
   dfc78:	3301      	adds	r3, #1
        diff |= x ^ y;
   dfc7a:	4329      	orrs	r1, r5
    for( i = 0; i < n; i++ )
   dfc7c:	2b0c      	cmp	r3, #12
        diff |= x ^ y;
   dfc7e:	f88d 1003 	strb.w	r1, [sp, #3]
    for( i = 0; i < n; i++ )
   dfc82:	d1f4      	bne.n	dfc6e <mbedtls_ssl_parse_finished+0x62>
    }

    return( diff );
   dfc84:	f89d 3003 	ldrb.w	r3, [sp, #3]
    if( mbedtls_ssl_safer_memcmp( ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl ),
   dfc88:	2b00      	cmp	r3, #0
   dfc8a:	d1e5      	bne.n	dfc58 <mbedtls_ssl_parse_finished+0x4c>
    if( ssl->handshake->resume != 0 )
   dfc8c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   dfc8e:	f8d3 2348 	ldr.w	r2, [r3, #840]	; 0x348
   dfc92:	b13a      	cbz	r2, dfca4 <mbedtls_ssl_parse_finished+0x98>
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
   dfc94:	6823      	ldr	r3, [r4, #0]
   dfc96:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
   dfc9a:	07db      	lsls	r3, r3, #31
   dfc9c:	d4d3      	bmi.n	dfc46 <mbedtls_ssl_parse_finished+0x3a>
            ssl->state = MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC;
   dfc9e:	230a      	movs	r3, #10
   dfca0:	6063      	str	r3, [r4, #4]
   dfca2:	e7d0      	b.n	dfc46 <mbedtls_ssl_parse_finished+0x3a>
        ssl->state++;
   dfca4:	6863      	ldr	r3, [r4, #4]
   dfca6:	3301      	adds	r3, #1
   dfca8:	6063      	str	r3, [r4, #4]
    return( 0 );
   dfcaa:	4610      	mov	r0, r2
   dfcac:	e7cb      	b.n	dfc46 <mbedtls_ssl_parse_finished+0x3a>
   dfcae:	bf00      	nop
   dfcb0:	ffff8900 	.word	0xffff8900
   dfcb4:	ffff8180 	.word	0xffff8180

000dfcb8 <mbedtls_ssl_session_init>:
    memset( session, 0, sizeof(mbedtls_ssl_session) );
   dfcb8:	2274      	movs	r2, #116	; 0x74
   dfcba:	2100      	movs	r1, #0
   dfcbc:	f008 be2e 	b.w	e891c <memset>

000dfcc0 <mbedtls_ssl_init>:
    memset( ssl, 0, sizeof( mbedtls_ssl_context ) );
   dfcc0:	22bc      	movs	r2, #188	; 0xbc
   dfcc2:	2100      	movs	r1, #0
   dfcc4:	f008 be2a 	b.w	e891c <memset>

000dfcc8 <mbedtls_ssl_conf_authmode>:
    conf->authmode   = authmode;
   dfcc8:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
   dfccc:	f361 0383 	bfi	r3, r1, #2, #2
   dfcd0:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
}
   dfcd4:	4770      	bx	lr

000dfcd6 <mbedtls_ssl_conf_verify>:
    conf->p_vrfy      = p_vrfy;
   dfcd6:	e9c0 120d 	strd	r1, r2, [r0, #52]	; 0x34
}
   dfcda:	4770      	bx	lr

000dfcdc <mbedtls_ssl_conf_rng>:
    conf->p_rng      = p_rng;
   dfcdc:	e9c0 1206 	strd	r1, r2, [r0, #24]
}
   dfce0:	4770      	bx	lr

000dfce2 <mbedtls_ssl_conf_dbg>:
    conf->p_dbg      = p_dbg;
   dfce2:	e9c0 1204 	strd	r1, r2, [r0, #16]
}
   dfce6:	4770      	bx	lr

000dfce8 <mbedtls_ssl_set_bio>:
    ssl->f_recv         = f_recv;
   dfce8:	e9c0 2304 	strd	r2, r3, [r0, #16]
    ssl->f_recv_timeout = f_recv_timeout;
   dfcec:	9b00      	ldr	r3, [sp, #0]
    ssl->p_bio          = p_bio;
   dfcee:	61c1      	str	r1, [r0, #28]
    ssl->f_recv_timeout = f_recv_timeout;
   dfcf0:	6183      	str	r3, [r0, #24]
}
   dfcf2:	4770      	bx	lr

000dfcf4 <mbedtls_ssl_set_timer_cb>:
{
   dfcf4:	b410      	push	{r4}
    ssl->f_set_timer    = f_set_timer;
   dfcf6:	e9c0 1211 	strd	r1, r2, [r0, #68]	; 0x44
}
   dfcfa:	f85d 4b04 	ldr.w	r4, [sp], #4
    ssl->f_get_timer    = f_get_timer;
   dfcfe:	64c3      	str	r3, [r0, #76]	; 0x4c
    ssl_set_timer( ssl, 0 );
   dfd00:	2100      	movs	r1, #0
   dfd02:	f7fe bfbe 	b.w	dec82 <_ZL13ssl_set_timerP19mbedtls_ssl_contextm>

000dfd06 <mbedtls_ssl_conf_own_cert>:
    return( ssl_append_key_cert( &conf->key_cert, own_cert, pk_key ) );
   dfd06:	3050      	adds	r0, #80	; 0x50
   dfd08:	f7ff b928 	b.w	def5c <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context>

000dfd0c <mbedtls_ssl_conf_ca_chain>:
    conf->ca_crl     = ca_crl;
   dfd0c:	e9c0 1215 	strd	r1, r2, [r0, #84]	; 0x54
}
   dfd10:	4770      	bx	lr
	...

000dfd14 <mbedtls_ssl_set_hostname>:
{
   dfd14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dfd16:	4606      	mov	r6, r0
    if( hostname != NULL )
   dfd18:	460c      	mov	r4, r1
   dfd1a:	b139      	cbz	r1, dfd2c <mbedtls_ssl_set_hostname+0x18>
        hostname_len = strlen( hostname );
   dfd1c:	4608      	mov	r0, r1
   dfd1e:	f008 fe4b 	bl	e89b8 <strlen>
        if( hostname_len > MBEDTLS_SSL_MAX_HOST_NAME_LEN )
   dfd22:	28ff      	cmp	r0, #255	; 0xff
        hostname_len = strlen( hostname );
   dfd24:	4605      	mov	r5, r0
        if( hostname_len > MBEDTLS_SSL_MAX_HOST_NAME_LEN )
   dfd26:	d902      	bls.n	dfd2e <mbedtls_ssl_set_hostname+0x1a>
            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   dfd28:	4813      	ldr	r0, [pc, #76]	; (dfd78 <mbedtls_ssl_set_hostname+0x64>)
   dfd2a:	e012      	b.n	dfd52 <mbedtls_ssl_set_hostname+0x3e>
    size_t hostname_len = 0;
   dfd2c:	460d      	mov	r5, r1
    if( ssl->hostname != NULL )
   dfd2e:	f8d6 70b4 	ldr.w	r7, [r6, #180]	; 0xb4
   dfd32:	b157      	cbz	r7, dfd4a <mbedtls_ssl_set_hostname+0x36>
        mbedtls_platform_zeroize( ssl->hostname, strlen( ssl->hostname ) );
   dfd34:	4638      	mov	r0, r7
   dfd36:	f008 fe3f 	bl	e89b8 <strlen>
   dfd3a:	4601      	mov	r1, r0
   dfd3c:	4638      	mov	r0, r7
   dfd3e:	f7fb f94d 	bl	dafdc <mbedtls_platform_zeroize>
        mbedtls_free( ssl->hostname );
   dfd42:	f8d6 00b4 	ldr.w	r0, [r6, #180]	; 0xb4
   dfd46:	f005 fd3b 	bl	e57c0 <free>
    if( hostname == NULL )
   dfd4a:	b91c      	cbnz	r4, dfd54 <mbedtls_ssl_set_hostname+0x40>
        ssl->hostname = NULL;
   dfd4c:	f8c6 40b4 	str.w	r4, [r6, #180]	; 0xb4
    return( 0 );
   dfd50:	4620      	mov	r0, r4
}
   dfd52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ssl->hostname = (char *)mbedtls_calloc( 1, hostname_len + 1 );
   dfd54:	1c69      	adds	r1, r5, #1
   dfd56:	2001      	movs	r0, #1
   dfd58:	f008 fd3e 	bl	e87d8 <calloc>
   dfd5c:	4607      	mov	r7, r0
   dfd5e:	f8c6 00b4 	str.w	r0, [r6, #180]	; 0xb4
        if( ssl->hostname == NULL )
   dfd62:	b130      	cbz	r0, dfd72 <mbedtls_ssl_set_hostname+0x5e>
        memcpy( ssl->hostname, hostname, hostname_len );
   dfd64:	4621      	mov	r1, r4
   dfd66:	462a      	mov	r2, r5
        ssl->hostname[hostname_len] = '\0';
   dfd68:	2400      	movs	r4, #0
        memcpy( ssl->hostname, hostname, hostname_len );
   dfd6a:	f008 fdaf 	bl	e88cc <memcpy>
        ssl->hostname[hostname_len] = '\0';
   dfd6e:	557c      	strb	r4, [r7, r5]
   dfd70:	e7ee      	b.n	dfd50 <mbedtls_ssl_set_hostname+0x3c>
            return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
   dfd72:	4802      	ldr	r0, [pc, #8]	; (dfd7c <mbedtls_ssl_set_hostname+0x68>)
   dfd74:	e7ed      	b.n	dfd52 <mbedtls_ssl_set_hostname+0x3e>
   dfd76:	bf00      	nop
   dfd78:	ffff8f00 	.word	0xffff8f00
   dfd7c:	ffff8100 	.word	0xffff8100

000dfd80 <mbedtls_ssl_conf_min_version>:
    conf->min_major_ver = major;
   dfd80:	f880 107a 	strb.w	r1, [r0, #122]	; 0x7a
    conf->min_minor_ver = minor;
   dfd84:	f880 207b 	strb.w	r2, [r0, #123]	; 0x7b
}
   dfd88:	4770      	bx	lr
	...

000dfd8c <mbedtls_ssl_get_max_frag_len>:
    max_len = ssl_mfl_code_to_length( ssl->conf->mfl_code );
   dfd8c:	6803      	ldr	r3, [r0, #0]
   dfd8e:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
    switch( mfl )
   dfd92:	f3c3 1382 	ubfx	r3, r3, #6, #3
   dfd96:	3b01      	subs	r3, #1
   dfd98:	2b03      	cmp	r3, #3
{
   dfd9a:	4602      	mov	r2, r0
   dfd9c:	bf9c      	itt	ls
   dfd9e:	4912      	ldrls	r1, [pc, #72]	; (dfde8 <mbedtls_ssl_get_max_frag_len+0x5c>)
   dfda0:	f831 0013 	ldrhls.w	r0, [r1, r3, lsl #1]
    if( ssl->session_out != NULL &&
   dfda4:	6a53      	ldr	r3, [r2, #36]	; 0x24
    switch( mfl )
   dfda6:	bf88      	it	hi
   dfda8:	f44f 5000 	movhi.w	r0, #8192	; 0x2000
    if( ssl->session_out != NULL &&
   dfdac:	b163      	cbz	r3, dfdc8 <mbedtls_ssl_get_max_frag_len+0x3c>
    switch( mfl )
   dfdae:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
   dfdb2:	3b01      	subs	r3, #1
   dfdb4:	2b03      	cmp	r3, #3
   dfdb6:	bf9a      	itte	ls
   dfdb8:	490b      	ldrls	r1, [pc, #44]	; (dfde8 <mbedtls_ssl_get_max_frag_len+0x5c>)
   dfdba:	f831 3013 	ldrhls.w	r3, [r1, r3, lsl #1]
   dfdbe:	f44f 5300 	movhi.w	r3, #8192	; 0x2000
   dfdc2:	4298      	cmp	r0, r3
   dfdc4:	bf28      	it	cs
   dfdc6:	4618      	movcs	r0, r3
    if( ssl->session_negotiate != NULL &&
   dfdc8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   dfdca:	b163      	cbz	r3, dfde6 <mbedtls_ssl_get_max_frag_len+0x5a>
    switch( mfl )
   dfdcc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
   dfdd0:	3b01      	subs	r3, #1
   dfdd2:	2b03      	cmp	r3, #3
   dfdd4:	bf9a      	itte	ls
   dfdd6:	4a04      	ldrls	r2, [pc, #16]	; (dfde8 <mbedtls_ssl_get_max_frag_len+0x5c>)
   dfdd8:	f832 3013 	ldrhls.w	r3, [r2, r3, lsl #1]
   dfddc:	f44f 5300 	movhi.w	r3, #8192	; 0x2000
   dfde0:	4298      	cmp	r0, r3
   dfde2:	bf28      	it	cs
   dfde4:	4618      	movcs	r0, r3
}
   dfde6:	4770      	bx	lr
   dfde8:	000ecac8 	.word	0x000ecac8

000dfdec <mbedtls_ssl_get_max_out_record_payload>:
{
   dfdec:	b508      	push	{r3, lr}
    const size_t mfl = mbedtls_ssl_get_max_frag_len( ssl );
   dfdee:	f7ff ffcd 	bl	dfd8c <mbedtls_ssl_get_max_frag_len>
}
   dfdf2:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
   dfdf6:	bf28      	it	cs
   dfdf8:	f44f 5000 	movcs.w	r0, #8192	; 0x2000
   dfdfc:	bd08      	pop	{r3, pc}
	...

000dfe00 <mbedtls_ssl_handshake_step>:
    if( ssl == NULL || ssl->conf == NULL )
   dfe00:	b138      	cbz	r0, dfe12 <mbedtls_ssl_handshake_step+0x12>
   dfe02:	6803      	ldr	r3, [r0, #0]
   dfe04:	b12b      	cbz	r3, dfe12 <mbedtls_ssl_handshake_step+0x12>
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
   dfe06:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
   dfe0a:	07db      	lsls	r3, r3, #31
   dfe0c:	d403      	bmi.n	dfe16 <mbedtls_ssl_handshake_step+0x16>
        ret = mbedtls_ssl_handshake_client_step( ssl );
   dfe0e:	f004 bbe3 	b.w	e45d8 <mbedtls_ssl_handshake_client_step>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   dfe12:	4802      	ldr	r0, [pc, #8]	; (dfe1c <mbedtls_ssl_handshake_step+0x1c>)
   dfe14:	4770      	bx	lr
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
   dfe16:	4802      	ldr	r0, [pc, #8]	; (dfe20 <mbedtls_ssl_handshake_step+0x20>)
}
   dfe18:	4770      	bx	lr
   dfe1a:	bf00      	nop
   dfe1c:	ffff8f00 	.word	0xffff8f00
   dfe20:	ffff8f80 	.word	0xffff8f80

000dfe24 <mbedtls_ssl_handshake>:
{
   dfe24:	b510      	push	{r4, lr}
    if( ssl == NULL || ssl->conf == NULL )
   dfe26:	4604      	mov	r4, r0
   dfe28:	b150      	cbz	r0, dfe40 <mbedtls_ssl_handshake+0x1c>
   dfe2a:	6803      	ldr	r3, [r0, #0]
   dfe2c:	b143      	cbz	r3, dfe40 <mbedtls_ssl_handshake+0x1c>
    while( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
   dfe2e:	6863      	ldr	r3, [r4, #4]
   dfe30:	2b10      	cmp	r3, #16
   dfe32:	d007      	beq.n	dfe44 <mbedtls_ssl_handshake+0x20>
        ret = mbedtls_ssl_handshake_step( ssl );
   dfe34:	4620      	mov	r0, r4
   dfe36:	f7ff ffe3 	bl	dfe00 <mbedtls_ssl_handshake_step>
        if( ret != 0 )
   dfe3a:	2800      	cmp	r0, #0
   dfe3c:	d0f7      	beq.n	dfe2e <mbedtls_ssl_handshake+0xa>
}
   dfe3e:	bd10      	pop	{r4, pc}
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   dfe40:	4801      	ldr	r0, [pc, #4]	; (dfe48 <mbedtls_ssl_handshake+0x24>)
   dfe42:	e7fc      	b.n	dfe3e <mbedtls_ssl_handshake+0x1a>
   dfe44:	2000      	movs	r0, #0
   dfe46:	e7fa      	b.n	dfe3e <mbedtls_ssl_handshake+0x1a>
   dfe48:	ffff8f00 	.word	0xffff8f00

000dfe4c <mbedtls_ssl_read>:
{
   dfe4c:	b570      	push	{r4, r5, r6, lr}
   dfe4e:	460e      	mov	r6, r1
   dfe50:	4614      	mov	r4, r2
    if( ssl == NULL || ssl->conf == NULL )
   dfe52:	4605      	mov	r5, r0
   dfe54:	2800      	cmp	r0, #0
   dfe56:	d069      	beq.n	dff2c <mbedtls_ssl_read+0xe0>
   dfe58:	6803      	ldr	r3, [r0, #0]
   dfe5a:	2b00      	cmp	r3, #0
   dfe5c:	d066      	beq.n	dff2c <mbedtls_ssl_read+0xe0>
    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
   dfe5e:	6843      	ldr	r3, [r0, #4]
   dfe60:	2b10      	cmp	r3, #16
   dfe62:	d005      	beq.n	dfe70 <mbedtls_ssl_read+0x24>
        ret = mbedtls_ssl_handshake( ssl );
   dfe64:	f7ff ffde 	bl	dfe24 <mbedtls_ssl_handshake>
        if( ret != MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO &&
   dfe68:	f510 4fd6 	cmn.w	r0, #27392	; 0x6b00
   dfe6c:	d000      	beq.n	dfe70 <mbedtls_ssl_read+0x24>
   dfe6e:	b9b0      	cbnz	r0, dfe9e <mbedtls_ssl_read+0x52>
    while( ssl->in_offt == NULL )
   dfe70:	6ea9      	ldr	r1, [r5, #104]	; 0x68
   dfe72:	2900      	cmp	r1, #0
   dfe74:	d145      	bne.n	dff02 <mbedtls_ssl_read+0xb6>
        if( ssl->f_get_timer != NULL &&
   dfe76:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   dfe78:	b143      	cbz	r3, dfe8c <mbedtls_ssl_read+0x40>
            ssl->f_get_timer( ssl->p_timer ) == -1 )
   dfe7a:	6c68      	ldr	r0, [r5, #68]	; 0x44
   dfe7c:	4798      	blx	r3
        if( ssl->f_get_timer != NULL &&
   dfe7e:	3001      	adds	r0, #1
   dfe80:	d104      	bne.n	dfe8c <mbedtls_ssl_read+0x40>
            ssl_set_timer( ssl, ssl->conf->read_timeout );
   dfe82:	682b      	ldr	r3, [r5, #0]
   dfe84:	4628      	mov	r0, r5
   dfe86:	6f59      	ldr	r1, [r3, #116]	; 0x74
   dfe88:	f7fe fefb 	bl	dec82 <_ZL13ssl_set_timerP19mbedtls_ssl_contextm>
        if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   dfe8c:	2101      	movs	r1, #1
   dfe8e:	4628      	mov	r0, r5
   dfe90:	f7ff fc8a 	bl	df7a8 <mbedtls_ssl_read_record>
   dfe94:	b120      	cbz	r0, dfea0 <mbedtls_ssl_read+0x54>
            if( ret == MBEDTLS_ERR_SSL_CONN_EOF )
   dfe96:	f510 4fe5 	cmn.w	r0, #29312	; 0x7280
   dfe9a:	d100      	bne.n	dfe9e <mbedtls_ssl_read+0x52>
                return( 0 );
   dfe9c:	2000      	movs	r0, #0
}
   dfe9e:	bd70      	pop	{r4, r5, r6, pc}
        if( ssl->in_msglen  == 0 &&
   dfea0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   dfea2:	b943      	cbnz	r3, dfeb6 <mbedtls_ssl_read+0x6a>
   dfea4:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
   dfea6:	2b17      	cmp	r3, #23
   dfea8:	d105      	bne.n	dfeb6 <mbedtls_ssl_read+0x6a>
            if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   dfeaa:	2101      	movs	r1, #1
   dfeac:	4628      	mov	r0, r5
   dfeae:	f7ff fc7b 	bl	df7a8 <mbedtls_ssl_read_record>
   dfeb2:	2800      	cmp	r0, #0
   dfeb4:	d1ef      	bne.n	dfe96 <mbedtls_ssl_read+0x4a>
        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
   dfeb6:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
   dfeb8:	2b16      	cmp	r3, #22
   dfeba:	d114      	bne.n	dfee6 <mbedtls_ssl_read+0x9a>
            if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT &&
   dfebc:	682b      	ldr	r3, [r5, #0]
   dfebe:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
   dfec2:	07db      	lsls	r3, r3, #31
   dfec4:	d406      	bmi.n	dfed4 <mbedtls_ssl_read+0x88>
                ( ssl->in_msg[0] != MBEDTLS_SSL_HS_HELLO_REQUEST ||
   dfec6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
            if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT &&
   dfec8:	781b      	ldrb	r3, [r3, #0]
   dfeca:	2b00      	cmp	r3, #0
   dfecc:	d134      	bne.n	dff38 <mbedtls_ssl_read+0xec>
                ( ssl->in_msg[0] != MBEDTLS_SSL_HS_HELLO_REQUEST ||
   dfece:	6fab      	ldr	r3, [r5, #120]	; 0x78
   dfed0:	2b04      	cmp	r3, #4
   dfed2:	d131      	bne.n	dff38 <mbedtls_ssl_read+0xec>
                if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
   dfed4:	68eb      	ldr	r3, [r5, #12]
   dfed6:	2b00      	cmp	r3, #0
   dfed8:	dd2a      	ble.n	dff30 <mbedtls_ssl_read+0xe4>
                    if( ( ret = mbedtls_ssl_send_alert_message( ssl,
   dfeda:	2264      	movs	r2, #100	; 0x64
   dfedc:	2101      	movs	r1, #1
   dfede:	4628      	mov	r0, r5
   dfee0:	f7ff fc48 	bl	df774 <mbedtls_ssl_send_alert_message>
   dfee4:	e7c3      	b.n	dfe6e <mbedtls_ssl_read+0x22>
        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT )
   dfee6:	2b15      	cmp	r3, #21
   dfee8:	d024      	beq.n	dff34 <mbedtls_ssl_read+0xe8>
        if( ssl->in_msgtype != MBEDTLS_SSL_MSG_APPLICATION_DATA )
   dfeea:	2b17      	cmp	r3, #23
   dfeec:	d124      	bne.n	dff38 <mbedtls_ssl_read+0xec>
        ssl->in_offt = ssl->in_msg;
   dfeee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   dfef0:	66ab      	str	r3, [r5, #104]	; 0x68
        if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER )
   dfef2:	686b      	ldr	r3, [r5, #4]
   dfef4:	2b10      	cmp	r3, #16
   dfef6:	d1bb      	bne.n	dfe70 <mbedtls_ssl_read+0x24>
            ssl_set_timer( ssl, 0 );
   dfef8:	2100      	movs	r1, #0
   dfefa:	4628      	mov	r0, r5
   dfefc:	f7fe fec1 	bl	dec82 <_ZL13ssl_set_timerP19mbedtls_ssl_contextm>
   dff00:	e7b6      	b.n	dfe70 <mbedtls_ssl_read+0x24>
    n = ( len < ssl->in_msglen )
   dff02:	6f28      	ldr	r0, [r5, #112]	; 0x70
   dff04:	4284      	cmp	r4, r0
   dff06:	bf28      	it	cs
   dff08:	4604      	movcs	r4, r0
    memcpy( buf, ssl->in_offt, n );
   dff0a:	4622      	mov	r2, r4
   dff0c:	4630      	mov	r0, r6
   dff0e:	f008 fcdd 	bl	e88cc <memcpy>
    ssl->in_msglen -= n;
   dff12:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   dff14:	1b1b      	subs	r3, r3, r4
   dff16:	672b      	str	r3, [r5, #112]	; 0x70
    if( ssl->in_msglen == 0 )
   dff18:	b923      	cbnz	r3, dff24 <mbedtls_ssl_read+0xd8>
        ssl->in_offt = NULL;
   dff1a:	66ab      	str	r3, [r5, #104]	; 0x68
        ssl->keep_current_message = 0;
   dff1c:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
    return( (int) n );
   dff20:	4620      	mov	r0, r4
   dff22:	e7bc      	b.n	dfe9e <mbedtls_ssl_read+0x52>
        ssl->in_offt += n;
   dff24:	6eab      	ldr	r3, [r5, #104]	; 0x68
   dff26:	4423      	add	r3, r4
   dff28:	66ab      	str	r3, [r5, #104]	; 0x68
   dff2a:	e7f9      	b.n	dff20 <mbedtls_ssl_read+0xd4>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   dff2c:	4803      	ldr	r0, [pc, #12]	; (dff3c <mbedtls_ssl_read+0xf0>)
   dff2e:	e7b6      	b.n	dfe9e <mbedtls_ssl_read+0x52>
                    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   dff30:	4803      	ldr	r0, [pc, #12]	; (dff40 <mbedtls_ssl_read+0xf4>)
   dff32:	e7b4      	b.n	dfe9e <mbedtls_ssl_read+0x52>
            return( MBEDTLS_ERR_SSL_WANT_READ );
   dff34:	4803      	ldr	r0, [pc, #12]	; (dff44 <mbedtls_ssl_read+0xf8>)
   dff36:	e7b2      	b.n	dfe9e <mbedtls_ssl_read+0x52>
                return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
   dff38:	4803      	ldr	r0, [pc, #12]	; (dff48 <mbedtls_ssl_read+0xfc>)
   dff3a:	e7b0      	b.n	dfe9e <mbedtls_ssl_read+0x52>
   dff3c:	ffff8f00 	.word	0xffff8f00
   dff40:	ffff9400 	.word	0xffff9400
   dff44:	ffff9700 	.word	0xffff9700
   dff48:	ffff8900 	.word	0xffff8900

000dff4c <mbedtls_ssl_write>:
{
   dff4c:	b570      	push	{r4, r5, r6, lr}
   dff4e:	460e      	mov	r6, r1
   dff50:	4615      	mov	r5, r2
    if( ssl == NULL || ssl->conf == NULL )
   dff52:	4604      	mov	r4, r0
   dff54:	b360      	cbz	r0, dffb0 <mbedtls_ssl_write+0x64>
   dff56:	6803      	ldr	r3, [r0, #0]
   dff58:	b353      	cbz	r3, dffb0 <mbedtls_ssl_write+0x64>
    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
   dff5a:	6843      	ldr	r3, [r0, #4]
   dff5c:	2b10      	cmp	r3, #16
   dff5e:	d105      	bne.n	dff6c <mbedtls_ssl_write+0x20>
    int ret = mbedtls_ssl_get_max_out_record_payload( ssl );
   dff60:	4620      	mov	r0, r4
   dff62:	f7ff ff43 	bl	dfdec <mbedtls_ssl_get_max_out_record_payload>
    if( ret < 0 )
   dff66:	2800      	cmp	r0, #0
   dff68:	da05      	bge.n	dff76 <mbedtls_ssl_write+0x2a>
}
   dff6a:	bd70      	pop	{r4, r5, r6, pc}
        if( ( ret = mbedtls_ssl_handshake( ssl ) ) != 0 )
   dff6c:	f7ff ff5a 	bl	dfe24 <mbedtls_ssl_handshake>
   dff70:	2800      	cmp	r0, #0
   dff72:	d0f5      	beq.n	dff60 <mbedtls_ssl_write+0x14>
   dff74:	e7f9      	b.n	dff6a <mbedtls_ssl_write+0x1e>
    if( ssl->out_left != 0 )
   dff76:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   dff7a:	4285      	cmp	r5, r0
   dff7c:	bf28      	it	cs
   dff7e:	4605      	movcs	r5, r0
   dff80:	b133      	cbz	r3, dff90 <mbedtls_ssl_write+0x44>
        if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
   dff82:	4620      	mov	r0, r4
   dff84:	f7ff fa44 	bl	df410 <mbedtls_ssl_flush_output>
   dff88:	2800      	cmp	r0, #0
   dff8a:	d1ee      	bne.n	dff6a <mbedtls_ssl_write+0x1e>
    return( (int) len );
   dff8c:	4628      	mov	r0, r5
   dff8e:	e7ec      	b.n	dff6a <mbedtls_ssl_write+0x1e>
        ssl->out_msgtype = MBEDTLS_SSL_MSG_APPLICATION_DATA;
   dff90:	2317      	movs	r3, #23
        memcpy( ssl->out_msg, buf, len );
   dff92:	4631      	mov	r1, r6
   dff94:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
        ssl->out_msglen  = len;
   dff98:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
        ssl->out_msgtype = MBEDTLS_SSL_MSG_APPLICATION_DATA;
   dff9c:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
        memcpy( ssl->out_msg, buf, len );
   dffa0:	462a      	mov	r2, r5
   dffa2:	f008 fc93 	bl	e88cc <memcpy>
        if( ( ret = mbedtls_ssl_write_record( ssl, SSL_FORCE_FLUSH ) ) != 0 )
   dffa6:	2101      	movs	r1, #1
   dffa8:	4620      	mov	r0, r4
   dffaa:	f7ff fa61 	bl	df470 <mbedtls_ssl_write_record>
   dffae:	e7eb      	b.n	dff88 <mbedtls_ssl_write+0x3c>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   dffb0:	4800      	ldr	r0, [pc, #0]	; (dffb4 <mbedtls_ssl_write+0x68>)
   dffb2:	e7da      	b.n	dff6a <mbedtls_ssl_write+0x1e>
   dffb4:	ffff8f00 	.word	0xffff8f00

000dffb8 <mbedtls_ssl_transform_free>:
{
   dffb8:	b510      	push	{r4, lr}
    if( transform == NULL )
   dffba:	4604      	mov	r4, r0
   dffbc:	b1a0      	cbz	r0, dffe8 <mbedtls_ssl_transform_free+0x30>
    mbedtls_cipher_free( &transform->cipher_ctx_enc );
   dffbe:	3050      	adds	r0, #80	; 0x50
   dffc0:	f7f6 f874 	bl	d60ac <mbedtls_cipher_free>
    mbedtls_cipher_free( &transform->cipher_ctx_dec );
   dffc4:	f104 0088 	add.w	r0, r4, #136	; 0x88
   dffc8:	f7f6 f870 	bl	d60ac <mbedtls_cipher_free>
    mbedtls_md_free( &transform->md_ctx_enc );
   dffcc:	f104 0038 	add.w	r0, r4, #56	; 0x38
   dffd0:	f7fc fe8d 	bl	dccee <mbedtls_md_free>
    mbedtls_md_free( &transform->md_ctx_dec );
   dffd4:	f104 0044 	add.w	r0, r4, #68	; 0x44
   dffd8:	f7fc fe89 	bl	dccee <mbedtls_md_free>
    mbedtls_platform_zeroize( transform, sizeof( mbedtls_ssl_transform ) );
   dffdc:	4620      	mov	r0, r4
   dffde:	21c0      	movs	r1, #192	; 0xc0
}
   dffe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_platform_zeroize( transform, sizeof( mbedtls_ssl_transform ) );
   dffe4:	f7fa bffa 	b.w	dafdc <mbedtls_platform_zeroize>
}
   dffe8:	bd10      	pop	{r4, pc}

000dffea <mbedtls_ssl_handshake_free>:
{
   dffea:	b538      	push	{r3, r4, r5, lr}
    mbedtls_ssl_handshake_params *handshake = ssl->handshake;
   dffec:	6b04      	ldr	r4, [r0, #48]	; 0x30
    if( handshake == NULL )
   dffee:	b344      	cbz	r4, e0042 <mbedtls_ssl_handshake_free+0x58>
    mbedtls_sha256_free(   &handshake->fin_sha256    );
   dfff0:	f504 70ac 	add.w	r0, r4, #344	; 0x158
   dfff4:	f7f5 f9d2 	bl	d539c <mbedtls_sha256_free>
    mbedtls_sha512_free(   &handshake->fin_sha512    );
   dfff8:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   dfffc:	f002 fef8 	bl	e2df0 <mbedtls_sha512_free>
    mbedtls_ecdh_free( &handshake->ecdh_ctx );
   e0000:	1d20      	adds	r0, r4, #4
   e0002:	f7f5 ff91 	bl	d5f28 <mbedtls_ecdh_free>
    mbedtls_free( (void *) handshake->curves );
   e0006:	f8d4 0138 	ldr.w	r0, [r4, #312]	; 0x138
   e000a:	f005 fbd9 	bl	e57c0 <free>
    if( handshake->psk != NULL )
   e000e:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
   e0012:	b138      	cbz	r0, e0024 <mbedtls_ssl_handshake_free+0x3a>
        mbedtls_platform_zeroize( handshake->psk, handshake->psk_len );
   e0014:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
   e0018:	f7fa ffe0 	bl	dafdc <mbedtls_platform_zeroize>
        mbedtls_free( handshake->psk );
   e001c:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
   e0020:	f005 fbce 	bl	e57c0 <free>
    if( handshake->sni_key_cert != NULL )
   e0024:	f8d4 514c 	ldr.w	r5, [r4, #332]	; 0x14c
   e0028:	b125      	cbz	r5, e0034 <mbedtls_ssl_handshake_free+0x4a>
            next = cur->next;
   e002a:	4628      	mov	r0, r5
   e002c:	68ad      	ldr	r5, [r5, #8]
            mbedtls_free( cur );
   e002e:	f005 fbc7 	bl	e57c0 <free>
        while( cur != NULL )
   e0032:	e7f9      	b.n	e0028 <mbedtls_ssl_handshake_free+0x3e>
    mbedtls_platform_zeroize( handshake,
   e0034:	4620      	mov	r0, r4
   e0036:	f44f 7158 	mov.w	r1, #864	; 0x360
}
   e003a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    mbedtls_platform_zeroize( handshake,
   e003e:	f7fa bfcd 	b.w	dafdc <mbedtls_platform_zeroize>
}
   e0042:	bd38      	pop	{r3, r4, r5, pc}

000e0044 <mbedtls_ssl_session_free>:
{
   e0044:	b510      	push	{r4, lr}
    if( session == NULL )
   e0046:	4604      	mov	r4, r0
   e0048:	b178      	cbz	r0, e006a <mbedtls_ssl_session_free+0x26>
    if( session->peer_cert != NULL )
   e004a:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   e004c:	b120      	cbz	r0, e0058 <mbedtls_ssl_session_free+0x14>
        mbedtls_x509_crt_free( session->peer_cert );
   e004e:	f7fe f900 	bl	de252 <mbedtls_x509_crt_free>
        mbedtls_free( session->peer_cert );
   e0052:	6de0      	ldr	r0, [r4, #92]	; 0x5c
   e0054:	f005 fbb4 	bl	e57c0 <free>
    mbedtls_free( session->ticket );
   e0058:	6e60      	ldr	r0, [r4, #100]	; 0x64
   e005a:	f005 fbb1 	bl	e57c0 <free>
    mbedtls_platform_zeroize( session, sizeof( mbedtls_ssl_session ) );
   e005e:	4620      	mov	r0, r4
   e0060:	2174      	movs	r1, #116	; 0x74
}
   e0062:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_platform_zeroize( session, sizeof( mbedtls_ssl_session ) );
   e0066:	f7fa bfb9 	b.w	dafdc <mbedtls_platform_zeroize>
}
   e006a:	bd10      	pop	{r4, pc}

000e006c <mbedtls_ssl_handshake_wrapup>:
{
   e006c:	b538      	push	{r3, r4, r5, lr}
   e006e:	4604      	mov	r4, r0
    int resume = ssl->handshake->resume;
   e0070:	6b03      	ldr	r3, [r0, #48]	; 0x30
    if( ssl->session )
   e0072:	6a80      	ldr	r0, [r0, #40]	; 0x28
    int resume = ssl->handshake->resume;
   e0074:	f8d3 5348 	ldr.w	r5, [r3, #840]	; 0x348
    if( ssl->session )
   e0078:	b120      	cbz	r0, e0084 <mbedtls_ssl_handshake_wrapup+0x18>
        mbedtls_ssl_session_free( ssl->session );
   e007a:	f7ff ffe3 	bl	e0044 <mbedtls_ssl_session_free>
        mbedtls_free( ssl->session );
   e007e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   e0080:	f005 fb9e 	bl	e57c0 <free>
    ssl->session = ssl->session_negotiate;
   e0084:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    if( ssl->conf->f_set_cache != NULL &&
   e0086:	6822      	ldr	r2, [r4, #0]
    ssl->session = ssl->session_negotiate;
   e0088:	62a1      	str	r1, [r4, #40]	; 0x28
    ssl->session_negotiate = NULL;
   e008a:	2300      	movs	r3, #0
   e008c:	62e3      	str	r3, [r4, #44]	; 0x2c
    if( ssl->conf->f_set_cache != NULL &&
   e008e:	6a53      	ldr	r3, [r2, #36]	; 0x24
   e0090:	b123      	cbz	r3, e009c <mbedtls_ssl_handshake_wrapup+0x30>
   e0092:	6888      	ldr	r0, [r1, #8]
   e0094:	b110      	cbz	r0, e009c <mbedtls_ssl_handshake_wrapup+0x30>
        ssl->session->id_len != 0 &&
   e0096:	b90d      	cbnz	r5, e009c <mbedtls_ssl_handshake_wrapup+0x30>
        if( ssl->conf->f_set_cache( ssl->conf->p_cache, ssl->session ) != 0 )
   e0098:	6a90      	ldr	r0, [r2, #40]	; 0x28
   e009a:	4798      	blx	r3
    mbedtls_ssl_handshake_free( ssl );
   e009c:	4620      	mov	r0, r4
   e009e:	f7ff ffa4 	bl	dffea <mbedtls_ssl_handshake_free>
    mbedtls_free( ssl->handshake );
   e00a2:	6b20      	ldr	r0, [r4, #48]	; 0x30
   e00a4:	f005 fb8c 	bl	e57c0 <free>
    if( ssl->transform )
   e00a8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    ssl->handshake = NULL;
   e00aa:	2300      	movs	r3, #0
   e00ac:	6323      	str	r3, [r4, #48]	; 0x30
    if( ssl->transform )
   e00ae:	b120      	cbz	r0, e00ba <mbedtls_ssl_handshake_wrapup+0x4e>
        mbedtls_ssl_transform_free( ssl->transform );
   e00b0:	f7ff ff82 	bl	dffb8 <mbedtls_ssl_transform_free>
        mbedtls_free( ssl->transform );
   e00b4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   e00b6:	f005 fb83 	bl	e57c0 <free>
    ssl->transform = ssl->transform_negotiate;
   e00ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
   e00bc:	63e3      	str	r3, [r4, #60]	; 0x3c
    ssl->transform_negotiate = NULL;
   e00be:	2300      	movs	r3, #0
   e00c0:	6423      	str	r3, [r4, #64]	; 0x40
    ssl->state++;
   e00c2:	6863      	ldr	r3, [r4, #4]
   e00c4:	3301      	adds	r3, #1
   e00c6:	6063      	str	r3, [r4, #4]
}
   e00c8:	bd38      	pop	{r3, r4, r5, pc}
	...

000e00cc <_ZL18ssl_handshake_initP19mbedtls_ssl_context>:
{
   e00cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   e00ce:	4604      	mov	r4, r0
    if( ssl->transform_negotiate )
   e00d0:	6c00      	ldr	r0, [r0, #64]	; 0x40
   e00d2:	b108      	cbz	r0, e00d8 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0xc>
        mbedtls_ssl_transform_free( ssl->transform_negotiate );
   e00d4:	f7ff ff70 	bl	dffb8 <mbedtls_ssl_transform_free>
    if( ssl->session_negotiate )
   e00d8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   e00da:	b108      	cbz	r0, e00e0 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x14>
        mbedtls_ssl_session_free( ssl->session_negotiate );
   e00dc:	f7ff ffb2 	bl	e0044 <mbedtls_ssl_session_free>
    if( ssl->handshake )
   e00e0:	6b23      	ldr	r3, [r4, #48]	; 0x30
   e00e2:	b113      	cbz	r3, e00ea <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x1e>
        mbedtls_ssl_handshake_free( ssl );
   e00e4:	4620      	mov	r0, r4
   e00e6:	f7ff ff80 	bl	dffea <mbedtls_ssl_handshake_free>
    if( ssl->transform_negotiate == NULL )
   e00ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
   e00ec:	b923      	cbnz	r3, e00f8 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x2c>
        ssl->transform_negotiate = (mbedtls_ssl_transform *)mbedtls_calloc( 1, sizeof(mbedtls_ssl_transform) );
   e00ee:	21c0      	movs	r1, #192	; 0xc0
   e00f0:	2001      	movs	r0, #1
   e00f2:	f008 fb71 	bl	e87d8 <calloc>
   e00f6:	6420      	str	r0, [r4, #64]	; 0x40
    if( ssl->session_negotiate == NULL )
   e00f8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e00fa:	b923      	cbnz	r3, e0106 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x3a>
        ssl->session_negotiate = (mbedtls_ssl_session *)mbedtls_calloc( 1, sizeof(mbedtls_ssl_session) );
   e00fc:	2174      	movs	r1, #116	; 0x74
   e00fe:	2001      	movs	r0, #1
   e0100:	f008 fb6a 	bl	e87d8 <calloc>
   e0104:	62e0      	str	r0, [r4, #44]	; 0x2c
    if( ssl->handshake == NULL )
   e0106:	6b23      	ldr	r3, [r4, #48]	; 0x30
   e0108:	b92b      	cbnz	r3, e0116 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x4a>
        ssl->handshake = (mbedtls_ssl_handshake_params *)mbedtls_calloc( 1, sizeof(mbedtls_ssl_handshake_params) );
   e010a:	f44f 7158 	mov.w	r1, #864	; 0x360
   e010e:	2001      	movs	r0, #1
   e0110:	f008 fb62 	bl	e87d8 <calloc>
   e0114:	6320      	str	r0, [r4, #48]	; 0x30
    if( ssl->handshake == NULL ||
   e0116:	6b20      	ldr	r0, [r4, #48]	; 0x30
   e0118:	b118      	cbz	r0, e0122 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x56>
   e011a:	6c23      	ldr	r3, [r4, #64]	; 0x40
   e011c:	b10b      	cbz	r3, e0122 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x56>
        ssl->session_negotiate == NULL )
   e011e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        ssl->transform_negotiate == NULL ||
   e0120:	b973      	cbnz	r3, e0140 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x74>
        mbedtls_free( ssl->handshake );
   e0122:	f005 fb4d 	bl	e57c0 <free>
        mbedtls_free( ssl->transform_negotiate );
   e0126:	6c20      	ldr	r0, [r4, #64]	; 0x40
   e0128:	f005 fb4a 	bl	e57c0 <free>
        mbedtls_free( ssl->session_negotiate );
   e012c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   e012e:	f005 fb47 	bl	e57c0 <free>
        ssl->handshake = NULL;
   e0132:	2300      	movs	r3, #0
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
   e0134:	4822      	ldr	r0, [pc, #136]	; (e01c0 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0xf4>)
        ssl->handshake = NULL;
   e0136:	6323      	str	r3, [r4, #48]	; 0x30
        ssl->transform_negotiate = NULL;
   e0138:	6423      	str	r3, [r4, #64]	; 0x40
        ssl->session_negotiate = NULL;
   e013a:	62e3      	str	r3, [r4, #44]	; 0x2c
}
   e013c:	b003      	add	sp, #12
   e013e:	bd30      	pop	{r4, r5, pc}
    mbedtls_ssl_session_init( ssl->session_negotiate );
   e0140:	4618      	mov	r0, r3
   e0142:	f7ff fdb9 	bl	dfcb8 <mbedtls_ssl_session_init>
    ssl_transform_init( ssl->transform_negotiate );
   e0146:	6c25      	ldr	r5, [r4, #64]	; 0x40
    memset( transform, 0, sizeof(mbedtls_ssl_transform) );
   e0148:	22c0      	movs	r2, #192	; 0xc0
   e014a:	2100      	movs	r1, #0
   e014c:	4628      	mov	r0, r5
   e014e:	f008 fbe5 	bl	e891c <memset>
    mbedtls_cipher_init( &transform->cipher_ctx_enc );
   e0152:	f105 0050 	add.w	r0, r5, #80	; 0x50
   e0156:	f7f5 ffa5 	bl	d60a4 <mbedtls_cipher_init>
    mbedtls_cipher_init( &transform->cipher_ctx_dec );
   e015a:	f105 0088 	add.w	r0, r5, #136	; 0x88
   e015e:	f7f5 ffa1 	bl	d60a4 <mbedtls_cipher_init>
    mbedtls_md_init( &transform->md_ctx_enc );
   e0162:	f105 0038 	add.w	r0, r5, #56	; 0x38
   e0166:	f7fc fdbd 	bl	dcce4 <mbedtls_md_init>
    mbedtls_md_init( &transform->md_ctx_dec );
   e016a:	f105 0044 	add.w	r0, r5, #68	; 0x44
   e016e:	f7fc fdb9 	bl	dcce4 <mbedtls_md_init>
    ssl_handshake_params_init( ssl->handshake );
   e0172:	6b24      	ldr	r4, [r4, #48]	; 0x30
    memset( handshake, 0, sizeof( mbedtls_ssl_handshake_params ) );
   e0174:	f44f 7258 	mov.w	r2, #864	; 0x360
   e0178:	2100      	movs	r1, #0
   e017a:	4620      	mov	r0, r4
   e017c:	f008 fbce 	bl	e891c <memset>
    mbedtls_sha256_init(   &handshake->fin_sha256    );
   e0180:	f504 70ac 	add.w	r0, r4, #344	; 0x158
   e0184:	9001      	str	r0, [sp, #4]
   e0186:	f7f5 f905 	bl	d5394 <mbedtls_sha256_init>
    mbedtls_sha256_starts_ret( &handshake->fin_sha256, 0 );
   e018a:	2100      	movs	r1, #0
   e018c:	9801      	ldr	r0, [sp, #4]
   e018e:	f7f5 f90f 	bl	d53b0 <mbedtls_sha256_starts_ret>
    mbedtls_sha512_init(   &handshake->fin_sha512    );
   e0192:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   e0196:	9001      	str	r0, [sp, #4]
   e0198:	f002 fe26 	bl	e2de8 <mbedtls_sha512_init>
    mbedtls_sha512_starts_ret( &handshake->fin_sha512, 1 );
   e019c:	2101      	movs	r1, #1
   e019e:	9801      	ldr	r0, [sp, #4]
   e01a0:	f002 fe32 	bl	e2e08 <mbedtls_sha512_starts_ret>
    set->rsa   = md_alg;
   e01a4:	2500      	movs	r5, #0
    handshake->update_checksum = ssl_update_checksum_start;
   e01a6:	4b07      	ldr	r3, [pc, #28]	; (e01c4 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0xf8>)
   e01a8:	f8c4 32a0 	str.w	r3, [r4, #672]	; 0x2a0
    mbedtls_ecdh_init( &handshake->ecdh_ctx );
   e01ac:	1d20      	adds	r0, r4, #4
    set->rsa   = md_alg;
   e01ae:	7025      	strb	r5, [r4, #0]
    set->ecdsa = md_alg;
   e01b0:	7065      	strb	r5, [r4, #1]
    mbedtls_ecdh_init( &handshake->ecdh_ctx );
   e01b2:	f7f5 fe95 	bl	d5ee0 <mbedtls_ecdh_init>
    handshake->sni_authmode = MBEDTLS_SSL_VERIFY_UNSET;
   e01b6:	2303      	movs	r3, #3
   e01b8:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    return( 0 );
   e01bc:	4628      	mov	r0, r5
}
   e01be:	e7bd      	b.n	e013c <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x70>
   e01c0:	ffff8100 	.word	0xffff8100
   e01c4:	000defa9 	.word	0x000defa9

000e01c8 <mbedtls_ssl_setup>:
{
   e01c8:	b538      	push	{r3, r4, r5, lr}
    ssl->out_buf = NULL;
   e01ca:	2300      	movs	r3, #0
    ssl->conf = conf;
   e01cc:	6001      	str	r1, [r0, #0]
{
   e01ce:	4604      	mov	r4, r0
    ssl->out_buf = NULL;
   e01d0:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    ssl->in_buf = (unsigned char *)mbedtls_calloc( 1, MBEDTLS_SSL_IN_BUFFER_LEN );
   e01d4:	f242 012d 	movw	r1, #8237	; 0x202d
   e01d8:	2001      	movs	r0, #1
   e01da:	f008 fafd 	bl	e87d8 <calloc>
   e01de:	6520      	str	r0, [r4, #80]	; 0x50
    if( ssl->in_buf == NULL )
   e01e0:	b9c0      	cbnz	r0, e0214 <mbedtls_ssl_setup+0x4c>
        ret = MBEDTLS_ERR_SSL_ALLOC_FAILED;
   e01e2:	4d16      	ldr	r5, [pc, #88]	; (e023c <mbedtls_ssl_setup+0x74>)
    mbedtls_free( ssl->in_buf );
   e01e4:	6d20      	ldr	r0, [r4, #80]	; 0x50
   e01e6:	f005 faeb 	bl	e57c0 <free>
    mbedtls_free( ssl->out_buf );
   e01ea:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
   e01ee:	f005 fae7 	bl	e57c0 <free>
    ssl->conf = NULL;
   e01f2:	2300      	movs	r3, #0
    ssl->in_ctr = NULL;
   e01f4:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
    ssl->in_iv = NULL;
   e01f8:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
    ssl->out_ctr = NULL;
   e01fc:	e9c4 3322 	strd	r3, r3, [r4, #136]	; 0x88
    ssl->out_iv = NULL;
   e0200:	e9c4 3324 	strd	r3, r3, [r4, #144]	; 0x90
    ssl->conf = NULL;
   e0204:	6023      	str	r3, [r4, #0]
    ssl->in_buf = NULL;
   e0206:	6523      	str	r3, [r4, #80]	; 0x50
    ssl->out_buf = NULL;
   e0208:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    ssl->in_msg = NULL;
   e020c:	6663      	str	r3, [r4, #100]	; 0x64
    ssl->out_msg = NULL;
   e020e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    return( ret );
   e0212:	e010      	b.n	e0236 <mbedtls_ssl_setup+0x6e>
    ssl->out_buf = (unsigned char *)mbedtls_calloc( 1, MBEDTLS_SSL_OUT_BUFFER_LEN );
   e0214:	f242 012d 	movw	r1, #8237	; 0x202d
   e0218:	2001      	movs	r0, #1
   e021a:	f008 fadd 	bl	e87d8 <calloc>
   e021e:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    if( ssl->out_buf == NULL )
   e0222:	2800      	cmp	r0, #0
   e0224:	d0dd      	beq.n	e01e2 <mbedtls_ssl_setup+0x1a>
    ssl_reset_in_out_pointers( ssl );
   e0226:	4620      	mov	r0, r4
   e0228:	f7fe fed0 	bl	defcc <_ZL25ssl_reset_in_out_pointersP19mbedtls_ssl_context>
    if( ( ret = ssl_handshake_init( ssl ) ) != 0 )
   e022c:	f7ff ff4e 	bl	e00cc <_ZL18ssl_handshake_initP19mbedtls_ssl_context>
   e0230:	4605      	mov	r5, r0
   e0232:	2800      	cmp	r0, #0
   e0234:	d1d6      	bne.n	e01e4 <mbedtls_ssl_setup+0x1c>
}
   e0236:	4628      	mov	r0, r5
   e0238:	bd38      	pop	{r3, r4, r5, pc}
   e023a:	bf00      	nop
   e023c:	ffff8100 	.word	0xffff8100

000e0240 <mbedtls_ssl_free>:
{
   e0240:	b538      	push	{r3, r4, r5, lr}
    if( ssl == NULL )
   e0242:	4604      	mov	r4, r0
   e0244:	2800      	cmp	r0, #0
   e0246:	d049      	beq.n	e02dc <mbedtls_ssl_free+0x9c>
    if( ssl->out_buf != NULL )
   e0248:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
   e024c:	b138      	cbz	r0, e025e <mbedtls_ssl_free+0x1e>
        mbedtls_platform_zeroize( ssl->out_buf, MBEDTLS_SSL_OUT_BUFFER_LEN );
   e024e:	f242 012d 	movw	r1, #8237	; 0x202d
   e0252:	f7fa fec3 	bl	dafdc <mbedtls_platform_zeroize>
        mbedtls_free( ssl->out_buf );
   e0256:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
   e025a:	f005 fab1 	bl	e57c0 <free>
    if( ssl->in_buf != NULL )
   e025e:	6d20      	ldr	r0, [r4, #80]	; 0x50
   e0260:	b130      	cbz	r0, e0270 <mbedtls_ssl_free+0x30>
        mbedtls_platform_zeroize( ssl->in_buf, MBEDTLS_SSL_IN_BUFFER_LEN );
   e0262:	f242 012d 	movw	r1, #8237	; 0x202d
   e0266:	f7fa feb9 	bl	dafdc <mbedtls_platform_zeroize>
        mbedtls_free( ssl->in_buf );
   e026a:	6d20      	ldr	r0, [r4, #80]	; 0x50
   e026c:	f005 faa8 	bl	e57c0 <free>
    if( ssl->transform )
   e0270:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   e0272:	b120      	cbz	r0, e027e <mbedtls_ssl_free+0x3e>
        mbedtls_ssl_transform_free( ssl->transform );
   e0274:	f7ff fea0 	bl	dffb8 <mbedtls_ssl_transform_free>
        mbedtls_free( ssl->transform );
   e0278:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   e027a:	f005 faa1 	bl	e57c0 <free>
    if( ssl->handshake )
   e027e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   e0280:	b18b      	cbz	r3, e02a6 <mbedtls_ssl_free+0x66>
        mbedtls_ssl_handshake_free( ssl );
   e0282:	4620      	mov	r0, r4
   e0284:	f7ff feb1 	bl	dffea <mbedtls_ssl_handshake_free>
        mbedtls_ssl_transform_free( ssl->transform_negotiate );
   e0288:	6c20      	ldr	r0, [r4, #64]	; 0x40
   e028a:	f7ff fe95 	bl	dffb8 <mbedtls_ssl_transform_free>
        mbedtls_ssl_session_free( ssl->session_negotiate );
   e028e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   e0290:	f7ff fed8 	bl	e0044 <mbedtls_ssl_session_free>
        mbedtls_free( ssl->handshake );
   e0294:	6b20      	ldr	r0, [r4, #48]	; 0x30
   e0296:	f005 fa93 	bl	e57c0 <free>
        mbedtls_free( ssl->transform_negotiate );
   e029a:	6c20      	ldr	r0, [r4, #64]	; 0x40
   e029c:	f005 fa90 	bl	e57c0 <free>
        mbedtls_free( ssl->session_negotiate );
   e02a0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   e02a2:	f005 fa8d 	bl	e57c0 <free>
    if( ssl->session )
   e02a6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   e02a8:	b120      	cbz	r0, e02b4 <mbedtls_ssl_free+0x74>
        mbedtls_ssl_session_free( ssl->session );
   e02aa:	f7ff fecb 	bl	e0044 <mbedtls_ssl_session_free>
        mbedtls_free( ssl->session );
   e02ae:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   e02b0:	f005 fa86 	bl	e57c0 <free>
    if( ssl->hostname != NULL )
   e02b4:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
   e02b8:	b155      	cbz	r5, e02d0 <mbedtls_ssl_free+0x90>
        mbedtls_platform_zeroize( ssl->hostname, strlen( ssl->hostname ) );
   e02ba:	4628      	mov	r0, r5
   e02bc:	f008 fb7c 	bl	e89b8 <strlen>
   e02c0:	4601      	mov	r1, r0
   e02c2:	4628      	mov	r0, r5
   e02c4:	f7fa fe8a 	bl	dafdc <mbedtls_platform_zeroize>
        mbedtls_free( ssl->hostname );
   e02c8:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   e02cc:	f005 fa78 	bl	e57c0 <free>
    mbedtls_platform_zeroize( ssl, sizeof( mbedtls_ssl_context ) );
   e02d0:	4620      	mov	r0, r4
   e02d2:	21bc      	movs	r1, #188	; 0xbc
}
   e02d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    mbedtls_platform_zeroize( ssl, sizeof( mbedtls_ssl_context ) );
   e02d8:	f7fa be80 	b.w	dafdc <mbedtls_platform_zeroize>
}
   e02dc:	bd38      	pop	{r3, r4, r5, pc}

000e02de <mbedtls_ssl_config_init>:
    memset( conf, 0, sizeof( mbedtls_ssl_config ) );
   e02de:	2280      	movs	r2, #128	; 0x80
   e02e0:	2100      	movs	r1, #0
   e02e2:	f008 bb1b 	b.w	e891c <memset>
	...

000e02e8 <mbedtls_ssl_config_defaults>:
{
   e02e8:	b510      	push	{r4, lr}
   e02ea:	4604      	mov	r4, r0
    conf->endpoint   = endpoint;
   e02ec:	f002 0201 	and.w	r2, r2, #1
   e02f0:	f001 0001 	and.w	r0, r1, #1
   e02f4:	ea40 0242 	orr.w	r2, r0, r2, lsl #1
   e02f8:	f894 007c 	ldrb.w	r0, [r4, #124]	; 0x7c
   e02fc:	f020 0003 	bic.w	r0, r0, #3
   e0300:	4302      	orrs	r2, r0
   e0302:	f884 207c 	strb.w	r2, [r4, #124]	; 0x7c
    if( endpoint == MBEDTLS_SSL_IS_CLIENT )
   e0306:	b939      	cbnz	r1, e0318 <mbedtls_ssl_config_defaults+0x30>
        conf->authmode = MBEDTLS_SSL_VERIFY_REQUIRED;
   e0308:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
   e030c:	f422 7203 	bic.w	r2, r2, #524	; 0x20c
   e0310:	f442 7202 	orr.w	r2, r2, #520	; 0x208
   e0314:	f8a4 207c 	strh.w	r2, [r4, #124]	; 0x7c
    switch( preset )
   e0318:	2b02      	cmp	r3, #2
   e031a:	f04f 3303 	mov.w	r3, #50529027	; 0x3030303
            conf->max_major_ver = MBEDTLS_SSL_MAX_MAJOR_VERSION;
   e031e:	67a3      	str	r3, [r4, #120]	; 0x78
    switch( preset )
   e0320:	d10c      	bne.n	e033c <mbedtls_ssl_config_defaults+0x54>
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
   e0322:	4b0d      	ldr	r3, [pc, #52]	; (e0358 <mbedtls_ssl_config_defaults+0x70>)
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
   e0324:	e9c4 3302 	strd	r3, r3, [r4, #8]
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
   e0328:	e9c4 3300 	strd	r3, r3, [r4]
            conf->cert_profile = &mbedtls_x509_crt_profile_suiteb;
   e032c:	4b0b      	ldr	r3, [pc, #44]	; (e035c <mbedtls_ssl_config_defaults+0x74>)
   e032e:	64e3      	str	r3, [r4, #76]	; 0x4c
            conf->sig_hashes = ssl_preset_suiteb_hashes;
   e0330:	4b0b      	ldr	r3, [pc, #44]	; (e0360 <mbedtls_ssl_config_defaults+0x78>)
   e0332:	65e3      	str	r3, [r4, #92]	; 0x5c
            conf->curve_list = ssl_preset_suiteb_curves;
   e0334:	4b0b      	ldr	r3, [pc, #44]	; (e0364 <mbedtls_ssl_config_defaults+0x7c>)
   e0336:	6623      	str	r3, [r4, #96]	; 0x60
}
   e0338:	2000      	movs	r0, #0
   e033a:	bd10      	pop	{r4, pc}
                                   mbedtls_ssl_list_ciphersuites();
   e033c:	f003 fda6 	bl	e3e8c <mbedtls_ssl_list_ciphersuites>
            conf->cert_profile = &mbedtls_x509_crt_profile_default;
   e0340:	4b09      	ldr	r3, [pc, #36]	; (e0368 <mbedtls_ssl_config_defaults+0x80>)
   e0342:	64e3      	str	r3, [r4, #76]	; 0x4c
            conf->sig_hashes = ssl_preset_default_hashes;
   e0344:	4b09      	ldr	r3, [pc, #36]	; (e036c <mbedtls_ssl_config_defaults+0x84>)
   e0346:	65e3      	str	r3, [r4, #92]	; 0x5c
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
   e0348:	e9c4 0002 	strd	r0, r0, [r4, #8]
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
   e034c:	e9c4 0000 	strd	r0, r0, [r4]
            conf->curve_list = mbedtls_ecp_grp_id_list();
   e0350:	f7f8 fcd8 	bl	d8d04 <mbedtls_ecp_grp_id_list>
   e0354:	6620      	str	r0, [r4, #96]	; 0x60
   e0356:	e7ef      	b.n	e0338 <mbedtls_ssl_config_defaults+0x50>
   e0358:	2003ac80 	.word	0x2003ac80
   e035c:	000eca60 	.word	0x000eca60
   e0360:	2003ac5c 	.word	0x2003ac5c
   e0364:	2003ac58 	.word	0x2003ac58
   e0368:	000eca50 	.word	0x000eca50
   e036c:	2003ac68 	.word	0x2003ac68

000e0370 <mbedtls_ssl_config_free>:
{
   e0370:	b538      	push	{r3, r4, r5, lr}
   e0372:	4604      	mov	r4, r0
    if( conf->psk != NULL )
   e0374:	6e40      	ldr	r0, [r0, #100]	; 0x64
   e0376:	b140      	cbz	r0, e038a <mbedtls_ssl_config_free+0x1a>
        mbedtls_platform_zeroize( conf->psk, conf->psk_len );
   e0378:	6ea1      	ldr	r1, [r4, #104]	; 0x68
   e037a:	f7fa fe2f 	bl	dafdc <mbedtls_platform_zeroize>
        mbedtls_free( conf->psk );
   e037e:	6e60      	ldr	r0, [r4, #100]	; 0x64
   e0380:	f005 fa1e 	bl	e57c0 <free>
        conf->psk = NULL;
   e0384:	2300      	movs	r3, #0
        conf->psk_len = 0;
   e0386:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
    if( conf->psk_identity != NULL )
   e038a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
   e038c:	b140      	cbz	r0, e03a0 <mbedtls_ssl_config_free+0x30>
        mbedtls_platform_zeroize( conf->psk_identity, conf->psk_identity_len );
   e038e:	6f21      	ldr	r1, [r4, #112]	; 0x70
   e0390:	f7fa fe24 	bl	dafdc <mbedtls_platform_zeroize>
        mbedtls_free( conf->psk_identity );
   e0394:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
   e0396:	f005 fa13 	bl	e57c0 <free>
        conf->psk_identity = NULL;
   e039a:	2300      	movs	r3, #0
        conf->psk_identity_len = 0;
   e039c:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
    ssl_key_cert_free( conf->key_cert );
   e03a0:	6d20      	ldr	r0, [r4, #80]	; 0x50
    while( cur != NULL )
   e03a2:	b120      	cbz	r0, e03ae <mbedtls_ssl_config_free+0x3e>
        next = cur->next;
   e03a4:	6885      	ldr	r5, [r0, #8]
        mbedtls_free( cur );
   e03a6:	f005 fa0b 	bl	e57c0 <free>
        cur = next;
   e03aa:	4628      	mov	r0, r5
    while( cur != NULL )
   e03ac:	e7f9      	b.n	e03a2 <mbedtls_ssl_config_free+0x32>
    mbedtls_platform_zeroize( conf, sizeof( mbedtls_ssl_config ) );
   e03ae:	4620      	mov	r0, r4
   e03b0:	2180      	movs	r1, #128	; 0x80
}
   e03b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    mbedtls_platform_zeroize( conf, sizeof( mbedtls_ssl_config ) );
   e03b6:	f7fa be11 	b.w	dafdc <mbedtls_platform_zeroize>

000e03ba <mbedtls_ssl_sig_from_pk>:
{
   e03ba:	b510      	push	{r4, lr}
    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_RSA ) )
   e03bc:	2101      	movs	r1, #1
{
   e03be:	4604      	mov	r4, r0
    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_RSA ) )
   e03c0:	f7fe fb70 	bl	deaa4 <mbedtls_pk_can_do>
   e03c4:	b940      	cbnz	r0, e03d8 <mbedtls_ssl_sig_from_pk+0x1e>
    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_ECDSA ) )
   e03c6:	2104      	movs	r1, #4
   e03c8:	4620      	mov	r0, r4
   e03ca:	f7fe fb6b 	bl	deaa4 <mbedtls_pk_can_do>
   e03ce:	2800      	cmp	r0, #0
        return( MBEDTLS_SSL_SIG_ECDSA );
   e03d0:	bf0c      	ite	eq
   e03d2:	2000      	moveq	r0, #0
   e03d4:	2003      	movne	r0, #3
}
   e03d6:	bd10      	pop	{r4, pc}
        return( MBEDTLS_SSL_SIG_RSA );
   e03d8:	2001      	movs	r0, #1
   e03da:	e7fc      	b.n	e03d6 <mbedtls_ssl_sig_from_pk+0x1c>

000e03dc <mbedtls_ssl_pk_alg_from_sig>:
    switch( sig )
   e03dc:	2801      	cmp	r0, #1
   e03de:	d003      	beq.n	e03e8 <mbedtls_ssl_pk_alg_from_sig+0xc>
   e03e0:	2803      	cmp	r0, #3
   e03e2:	bf14      	ite	ne
   e03e4:	2000      	movne	r0, #0
   e03e6:	2004      	moveq	r0, #4
}
   e03e8:	4770      	bx	lr

000e03ea <mbedtls_ssl_md_alg_from_hash>:
    switch( hash )
   e03ea:	1e83      	subs	r3, r0, #2
   e03ec:	2b04      	cmp	r3, #4
   e03ee:	bf9a      	itte	ls
   e03f0:	3002      	addls	r0, #2
   e03f2:	b2c0      	uxtbls	r0, r0
{
   e03f4:	2000      	movhi	r0, #0
}
   e03f6:	4770      	bx	lr

000e03f8 <mbedtls_ssl_hash_from_md_alg>:
    switch( md )
   e03f8:	1f03      	subs	r3, r0, #4
   e03fa:	2b04      	cmp	r3, #4
   e03fc:	bf9a      	itte	ls
   e03fe:	3802      	subls	r0, #2
   e0400:	b2c0      	uxtbls	r0, r0
   e0402:	2000      	movhi	r0, #0
}
   e0404:	4770      	bx	lr

000e0406 <mbedtls_ssl_check_curve>:
    if( ssl->conf->curve_list == NULL )
   e0406:	6803      	ldr	r3, [r0, #0]
   e0408:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   e040a:	b13b      	cbz	r3, e041c <mbedtls_ssl_check_curve+0x16>
   e040c:	3b01      	subs	r3, #1
    for( gid = ssl->conf->curve_list; *gid != MBEDTLS_ECP_DP_NONE; gid++ )
   e040e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   e0412:	b11a      	cbz	r2, e041c <mbedtls_ssl_check_curve+0x16>
        if( *gid == grp_id )
   e0414:	428a      	cmp	r2, r1
   e0416:	d1fa      	bne.n	e040e <mbedtls_ssl_check_curve+0x8>
            return( 0 );
   e0418:	2000      	movs	r0, #0
   e041a:	4770      	bx	lr
        return( -1 );
   e041c:	f04f 30ff 	mov.w	r0, #4294967295
}
   e0420:	4770      	bx	lr

000e0422 <mbedtls_ssl_check_sig_hash>:
    if( ssl->conf->sig_hashes == NULL )
   e0422:	6803      	ldr	r3, [r0, #0]
   e0424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   e0426:	b13b      	cbz	r3, e0438 <mbedtls_ssl_check_sig_hash+0x16>
   e0428:	3b04      	subs	r3, #4
    for( cur = ssl->conf->sig_hashes; *cur != MBEDTLS_MD_NONE; cur++ )
   e042a:	f853 2f04 	ldr.w	r2, [r3, #4]!
   e042e:	b11a      	cbz	r2, e0438 <mbedtls_ssl_check_sig_hash+0x16>
        if( *cur == (int) md )
   e0430:	428a      	cmp	r2, r1
   e0432:	d1fa      	bne.n	e042a <mbedtls_ssl_check_sig_hash+0x8>
            return( 0 );
   e0434:	2000      	movs	r0, #0
   e0436:	4770      	bx	lr
        return( -1 );
   e0438:	f04f 30ff 	mov.w	r0, #4294967295
}
   e043c:	4770      	bx	lr
	...

000e0440 <mbedtls_ssl_check_cert_usage>:
    if( cert_endpoint == MBEDTLS_SSL_IS_SERVER )
   e0440:	2a01      	cmp	r2, #1
{
   e0442:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e0444:	4606      	mov	r6, r0
   e0446:	4617      	mov	r7, r2
   e0448:	461d      	mov	r5, r3
    if( cert_endpoint == MBEDTLS_SSL_IS_SERVER )
   e044a:	d12a      	bne.n	e04a2 <mbedtls_ssl_check_cert_usage+0x62>
        switch( ciphersuite->key_exchange )
   e044c:	7a8b      	ldrb	r3, [r1, #10]
   e044e:	3b01      	subs	r3, #1
   e0450:	2b09      	cmp	r3, #9
   e0452:	d828      	bhi.n	e04a6 <mbedtls_ssl_check_cert_usage+0x66>
   e0454:	e8df f003 	tbb	[pc, r3]
   e0458:	25252505 	.word	0x25252505
   e045c:	27052727 	.word	0x27052727
   e0460:	2323      	.short	0x2323
   e0462:	2120      	movs	r1, #32
    if( mbedtls_x509_crt_check_key_usage( cert, usage ) != 0 )
   e0464:	4630      	mov	r0, r6
   e0466:	f7fd fc47 	bl	ddcf8 <mbedtls_x509_crt_check_key_usage>
   e046a:	4604      	mov	r4, r0
   e046c:	b128      	cbz	r0, e047a <mbedtls_ssl_check_cert_usage+0x3a>
        *flags |= MBEDTLS_X509_BADCERT_KEY_USAGE;
   e046e:	682b      	ldr	r3, [r5, #0]
   e0470:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   e0474:	602b      	str	r3, [r5, #0]
        ret = -1;
   e0476:	f04f 34ff 	mov.w	r4, #4294967295
    if( mbedtls_x509_crt_check_extended_key_usage( cert, ext_oid, ext_len ) != 0 )
   e047a:	490c      	ldr	r1, [pc, #48]	; (e04ac <mbedtls_ssl_check_cert_usage+0x6c>)
   e047c:	4b0c      	ldr	r3, [pc, #48]	; (e04b0 <mbedtls_ssl_check_cert_usage+0x70>)
   e047e:	2208      	movs	r2, #8
   e0480:	2f01      	cmp	r7, #1
   e0482:	bf18      	it	ne
   e0484:	4619      	movne	r1, r3
   e0486:	4630      	mov	r0, r6
   e0488:	f7fd fc54 	bl	ddd34 <mbedtls_x509_crt_check_extended_key_usage>
   e048c:	b128      	cbz	r0, e049a <mbedtls_ssl_check_cert_usage+0x5a>
        *flags |= MBEDTLS_X509_BADCERT_EXT_KEY_USAGE;
   e048e:	682b      	ldr	r3, [r5, #0]
   e0490:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   e0494:	602b      	str	r3, [r5, #0]
        ret = -1;
   e0496:	f04f 34ff 	mov.w	r4, #4294967295
}
   e049a:	4620      	mov	r0, r4
   e049c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                usage = MBEDTLS_X509_KU_KEY_AGREEMENT;
   e049e:	2108      	movs	r1, #8
                break;
   e04a0:	e7e0      	b.n	e0464 <mbedtls_ssl_check_cert_usage+0x24>
        usage = MBEDTLS_X509_KU_DIGITAL_SIGNATURE;
   e04a2:	2180      	movs	r1, #128	; 0x80
   e04a4:	e7de      	b.n	e0464 <mbedtls_ssl_check_cert_usage+0x24>
    int usage = 0;
   e04a6:	2100      	movs	r1, #0
   e04a8:	e7dc      	b.n	e0464 <mbedtls_ssl_check_cert_usage+0x24>
   e04aa:	bf00      	nop
   e04ac:	000eb85a 	.word	0x000eb85a
   e04b0:	000eb892 	.word	0x000eb892

000e04b4 <mbedtls_ssl_parse_certificate>:
{
   e04b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const mbedtls_ssl_ciphersuite_t * const ciphersuite_info =
   e04b8:	6c03      	ldr	r3, [r0, #64]	; 0x40
   e04ba:	f8d3 8000 	ldr.w	r8, [r3]
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
   e04be:	f898 300a 	ldrb.w	r3, [r8, #10]
   e04c2:	2b0b      	cmp	r3, #11
{
   e04c4:	b087      	sub	sp, #28
   e04c6:	4604      	mov	r4, r0
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
   e04c8:	d80d      	bhi.n	e04e6 <mbedtls_ssl_parse_certificate+0x32>
   e04ca:	f44f 6516 	mov.w	r5, #2400	; 0x960
   e04ce:	40dd      	lsrs	r5, r3
   e04d0:	43ed      	mvns	r5, r5
   e04d2:	f015 0501 	ands.w	r5, r5, #1
   e04d6:	d106      	bne.n	e04e6 <mbedtls_ssl_parse_certificate+0x32>
    ssl->state++;
   e04d8:	6863      	ldr	r3, [r4, #4]
   e04da:	3301      	adds	r3, #1
   e04dc:	6063      	str	r3, [r4, #4]
}
   e04de:	4628      	mov	r0, r5
   e04e0:	b007      	add	sp, #28
   e04e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    const int authmode = ssl->conf->authmode;
   e04e6:	6823      	ldr	r3, [r4, #0]
    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   e04e8:	2101      	movs	r1, #1
   e04ea:	4620      	mov	r0, r4
    const int authmode = ssl->conf->authmode;
   e04ec:	f893 907c 	ldrb.w	r9, [r3, #124]	; 0x7c
    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   e04f0:	f7ff f95a 	bl	df7a8 <mbedtls_ssl_read_record>
    const int authmode = ssl->conf->authmode;
   e04f4:	f3c9 0981 	ubfx	r9, r9, #2, #2
    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   e04f8:	4605      	mov	r5, r0
   e04fa:	2800      	cmp	r0, #0
   e04fc:	d1ef      	bne.n	e04de <mbedtls_ssl_parse_certificate+0x2a>
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
   e04fe:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   e0500:	2b16      	cmp	r3, #22
   e0502:	d007      	beq.n	e0514 <mbedtls_ssl_parse_certificate+0x60>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   e0504:	220a      	movs	r2, #10
   e0506:	2102      	movs	r1, #2
   e0508:	4620      	mov	r0, r4
   e050a:	f7ff f933 	bl	df774 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
   e050e:	f5a5 45ee 	sub.w	r5, r5, #30464	; 0x7700
   e0512:	e7e1      	b.n	e04d8 <mbedtls_ssl_parse_certificate+0x24>
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_CERTIFICATE ||
   e0514:	6e62      	ldr	r2, [r4, #100]	; 0x64
   e0516:	7813      	ldrb	r3, [r2, #0]
   e0518:	2b0b      	cmp	r3, #11
   e051a:	d102      	bne.n	e0522 <mbedtls_ssl_parse_certificate+0x6e>
        ssl->in_hslen < mbedtls_ssl_hs_hdr_len( ssl ) + 3 + 3 )
   e051c:	6fa1      	ldr	r1, [r4, #120]	; 0x78
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_CERTIFICATE ||
   e051e:	2909      	cmp	r1, #9
   e0520:	d806      	bhi.n	e0530 <mbedtls_ssl_parse_certificate+0x7c>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   e0522:	2232      	movs	r2, #50	; 0x32
   e0524:	2102      	movs	r1, #2
   e0526:	4620      	mov	r0, r4
   e0528:	f7ff f924 	bl	df774 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
   e052c:	4d76      	ldr	r5, [pc, #472]	; (e0708 <mbedtls_ssl_parse_certificate+0x254>)
   e052e:	e7d3      	b.n	e04d8 <mbedtls_ssl_parse_certificate+0x24>
    n = ( ssl->in_msg[i+1] << 8 ) | ssl->in_msg[i+2];
   e0530:	f8b2 3005 	ldrh.w	r3, [r2, #5]
    if( ssl->in_msg[i] != 0 ||
   e0534:	7912      	ldrb	r2, [r2, #4]
    n = ( ssl->in_msg[i+1] << 8 ) | ssl->in_msg[i+2];
   e0536:	ba5b      	rev16	r3, r3
   e0538:	b29b      	uxth	r3, r3
    if( ssl->in_msg[i] != 0 ||
   e053a:	2a00      	cmp	r2, #0
   e053c:	d1f1      	bne.n	e0522 <mbedtls_ssl_parse_certificate+0x6e>
        ssl->in_hslen != n + 3 + mbedtls_ssl_hs_hdr_len( ssl ) )
   e053e:	3307      	adds	r3, #7
    if( ssl->in_msg[i] != 0 ||
   e0540:	4299      	cmp	r1, r3
   e0542:	d1ee      	bne.n	e0522 <mbedtls_ssl_parse_certificate+0x6e>
    if( ssl->session_negotiate->peer_cert != NULL )
   e0544:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e0546:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
   e0548:	b128      	cbz	r0, e0556 <mbedtls_ssl_parse_certificate+0xa2>
        mbedtls_x509_crt_free( ssl->session_negotiate->peer_cert );
   e054a:	f7fd fe82 	bl	de252 <mbedtls_x509_crt_free>
        mbedtls_free( ssl->session_negotiate->peer_cert );
   e054e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e0550:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
   e0552:	f005 f935 	bl	e57c0 <free>
    if( ( ssl->session_negotiate->peer_cert = (mbedtls_x509_crt *)mbedtls_calloc( 1,
   e0556:	f44f 719a 	mov.w	r1, #308	; 0x134
   e055a:	2001      	movs	r0, #1
   e055c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   e055e:	f008 f93b 	bl	e87d8 <calloc>
   e0562:	65f0      	str	r0, [r6, #92]	; 0x5c
   e0564:	b930      	cbnz	r0, e0574 <mbedtls_ssl_parse_certificate+0xc0>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   e0566:	2250      	movs	r2, #80	; 0x50
   e0568:	2102      	movs	r1, #2
   e056a:	4620      	mov	r0, r4
   e056c:	f7ff f902 	bl	df774 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
   e0570:	4d66      	ldr	r5, [pc, #408]	; (e070c <mbedtls_ssl_parse_certificate+0x258>)
   e0572:	e7b1      	b.n	e04d8 <mbedtls_ssl_parse_certificate+0x24>
    mbedtls_x509_crt_init( ssl->session_negotiate->peer_cert );
   e0574:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        switch( ret )
   e0576:	f8df a19c 	ldr.w	sl, [pc, #412]	; e0714 <mbedtls_ssl_parse_certificate+0x260>
    mbedtls_x509_crt_init( ssl->session_negotiate->peer_cert );
   e057a:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
        switch( ret )
   e057c:	f8df b198 	ldr.w	fp, [pc, #408]	; e0718 <mbedtls_ssl_parse_certificate+0x264>
    mbedtls_x509_crt_init( ssl->session_negotiate->peer_cert );
   e0580:	f7fd fe62 	bl	de248 <mbedtls_x509_crt_init>
    i += 3;
   e0584:	2607      	movs	r6, #7
    while( i < ssl->in_hslen )
   e0586:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   e0588:	42b3      	cmp	r3, r6
   e058a:	d92e      	bls.n	e05ea <mbedtls_ssl_parse_certificate+0x136>
        if ( i + 3 > ssl->in_hslen ) {
   e058c:	1cf1      	adds	r1, r6, #3
   e058e:	428b      	cmp	r3, r1
   e0590:	d3c7      	bcc.n	e0522 <mbedtls_ssl_parse_certificate+0x6e>
        if( ssl->in_msg[i] != 0 )
   e0592:	6e60      	ldr	r0, [r4, #100]	; 0x64
   e0594:	5d82      	ldrb	r2, [r0, r6]
   e0596:	2a00      	cmp	r2, #0
   e0598:	d1c3      	bne.n	e0522 <mbedtls_ssl_parse_certificate+0x6e>
        n = ( (unsigned int) ssl->in_msg[i + 1] << 8 )
   e059a:	4406      	add	r6, r0
   e059c:	7877      	ldrb	r7, [r6, #1]
            | (unsigned int) ssl->in_msg[i + 2];
   e059e:	78b2      	ldrb	r2, [r6, #2]
        n = ( (unsigned int) ssl->in_msg[i + 1] << 8 )
   e05a0:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
        if( n < 128 || i + n > ssl->in_hslen )
   e05a4:	2a7f      	cmp	r2, #127	; 0x7f
   e05a6:	d9bc      	bls.n	e0522 <mbedtls_ssl_parse_certificate+0x6e>
   e05a8:	188e      	adds	r6, r1, r2
   e05aa:	42b3      	cmp	r3, r6
   e05ac:	d3b9      	bcc.n	e0522 <mbedtls_ssl_parse_certificate+0x6e>
        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
   e05ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e05b0:	4401      	add	r1, r0
   e05b2:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
   e05b4:	f7fd feac 	bl	de310 <mbedtls_x509_crt_parse_der>
        switch( ret )
   e05b8:	f510 5f16 	cmn.w	r0, #9600	; 0x2580
        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
   e05bc:	4607      	mov	r7, r0
        switch( ret )
   e05be:	d010      	beq.n	e05e2 <mbedtls_ssl_parse_certificate+0x12e>
   e05c0:	4550      	cmp	r0, sl
   e05c2:	da0b      	bge.n	e05dc <mbedtls_ssl_parse_certificate+0x128>
   e05c4:	f510 5f22 	cmn.w	r0, #10368	; 0x2880
   e05c8:	d00d      	beq.n	e05e6 <mbedtls_ssl_parse_certificate+0x132>
   e05ca:	4558      	cmp	r0, fp
   e05cc:	d0db      	beq.n	e0586 <mbedtls_ssl_parse_certificate+0xd2>
            alert = MBEDTLS_SSL_ALERT_MSG_BAD_CERT;
   e05ce:	222a      	movs	r2, #42	; 0x2a
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL, alert );
   e05d0:	2102      	movs	r1, #2
   e05d2:	4620      	mov	r0, r4
   e05d4:	f7ff f8ce 	bl	df774 <mbedtls_ssl_send_alert_message>
   e05d8:	463d      	mov	r5, r7
        ssl->state++;
   e05da:	e77d      	b.n	e04d8 <mbedtls_ssl_parse_certificate+0x24>
        switch( ret )
   e05dc:	2800      	cmp	r0, #0
   e05de:	d0d2      	beq.n	e0586 <mbedtls_ssl_parse_certificate+0xd2>
   e05e0:	e7f5      	b.n	e05ce <mbedtls_ssl_parse_certificate+0x11a>
            alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
   e05e2:	222b      	movs	r2, #43	; 0x2b
   e05e4:	e7f4      	b.n	e05d0 <mbedtls_ssl_parse_certificate+0x11c>
        switch( ret )
   e05e6:	2250      	movs	r2, #80	; 0x50
   e05e8:	e7f2      	b.n	e05d0 <mbedtls_ssl_parse_certificate+0x11c>
    if( authmode != MBEDTLS_SSL_VERIFY_NONE )
   e05ea:	f1b9 0f00 	cmp.w	r9, #0
   e05ee:	f43f af73 	beq.w	e04d8 <mbedtls_ssl_parse_certificate+0x24>
        if( ssl->handshake->sni_ca_chain != NULL )
   e05f2:	6b22      	ldr	r2, [r4, #48]	; 0x30
   e05f4:	6823      	ldr	r3, [r4, #0]
   e05f6:	f8d2 7150 	ldr.w	r7, [r2, #336]	; 0x150
   e05fa:	2f00      	cmp	r7, #0
   e05fc:	d067      	beq.n	e06ce <mbedtls_ssl_parse_certificate+0x21a>
            ca_crl   = ssl->handshake->sni_ca_crl;
   e05fe:	f8d2 2154 	ldr.w	r2, [r2, #340]	; 0x154
                                ssl->session_negotiate->peer_cert,
   e0602:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
        ret = mbedtls_x509_crt_verify_restartable(
   e0604:	2100      	movs	r1, #0
   e0606:	9104      	str	r1, [sp, #16]
   e0608:	6b99      	ldr	r1, [r3, #56]	; 0x38
   e060a:	9103      	str	r1, [sp, #12]
   e060c:	6b59      	ldr	r1, [r3, #52]	; 0x34
   e060e:	9102      	str	r1, [sp, #8]
   e0610:	f100 0160 	add.w	r1, r0, #96	; 0x60
   e0614:	9101      	str	r1, [sp, #4]
   e0616:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   e061a:	9100      	str	r1, [sp, #0]
   e061c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   e061e:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   e0620:	4639      	mov	r1, r7
   e0622:	f7fd fbcd 	bl	dddc0 <mbedtls_x509_crt_verify_restartable>
            const mbedtls_pk_context *pk = &ssl->session_negotiate->peer_cert->pk;
   e0626:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e0628:	f8d3 a05c 	ldr.w	sl, [r3, #92]	; 0x5c
        ret = mbedtls_x509_crt_verify_restartable(
   e062c:	4606      	mov	r6, r0
            if( mbedtls_pk_can_do( pk, MBEDTLS_PK_ECKEY ) &&
   e062e:	2102      	movs	r1, #2
   e0630:	f10a 00bc 	add.w	r0, sl, #188	; 0xbc
   e0634:	f7fe fa36 	bl	deaa4 <mbedtls_pk_can_do>
   e0638:	b178      	cbz	r0, e065a <mbedtls_ssl_parse_certificate+0x1a6>
                mbedtls_ssl_check_curve( ssl, mbedtls_pk_ec( *pk )->grp.id ) != 0 )
   e063a:	f8da 30c0 	ldr.w	r3, [sl, #192]	; 0xc0
   e063e:	4620      	mov	r0, r4
   e0640:	7819      	ldrb	r1, [r3, #0]
   e0642:	f7ff fee0 	bl	e0406 <mbedtls_ssl_check_curve>
            if( mbedtls_pk_can_do( pk, MBEDTLS_PK_ECKEY ) &&
   e0646:	b140      	cbz	r0, e065a <mbedtls_ssl_parse_certificate+0x1a6>
   e0648:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
                ssl->session_negotiate->verify_result |= MBEDTLS_X509_BADCERT_BAD_KEY;
   e064a:	6e13      	ldr	r3, [r2, #96]	; 0x60
   e064c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   e0650:	6613      	str	r3, [r2, #96]	; 0x60
                    ret = MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE;
   e0652:	4b2d      	ldr	r3, [pc, #180]	; (e0708 <mbedtls_ssl_parse_certificate+0x254>)
   e0654:	2e00      	cmp	r6, #0
   e0656:	bf08      	it	eq
   e0658:	461e      	moveq	r6, r3
                                 ! ssl->conf->endpoint,
   e065a:	6823      	ldr	r3, [r4, #0]
        if( mbedtls_ssl_check_cert_usage( ssl->session_negotiate->peer_cert,
   e065c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   e065e:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
   e0662:	43d2      	mvns	r2, r2
   e0664:	f100 0360 	add.w	r3, r0, #96	; 0x60
   e0668:	f002 0201 	and.w	r2, r2, #1
   e066c:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   e066e:	4641      	mov	r1, r8
   e0670:	f7ff fee6 	bl	e0440 <mbedtls_ssl_check_cert_usage>
   e0674:	b108      	cbz	r0, e067a <mbedtls_ssl_parse_certificate+0x1c6>
            if( ret == 0 )
   e0676:	2e00      	cmp	r6, #0
   e0678:	d03a      	beq.n	e06f0 <mbedtls_ssl_parse_certificate+0x23c>
        if( authmode == MBEDTLS_SSL_VERIFY_OPTIONAL &&
   e067a:	f1b9 0f01 	cmp.w	r9, #1
   e067e:	d107      	bne.n	e0690 <mbedtls_ssl_parse_certificate+0x1dc>
   e0680:	f516 5f1c 	cmn.w	r6, #9984	; 0x2700
   e0684:	f43f af28 	beq.w	e04d8 <mbedtls_ssl_parse_certificate+0x24>
            ( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED ||
   e0688:	f516 4ff4 	cmn.w	r6, #31232	; 0x7a00
   e068c:	f43f af24 	beq.w	e04d8 <mbedtls_ssl_parse_certificate+0x24>
        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
   e0690:	b917      	cbnz	r7, e0698 <mbedtls_ssl_parse_certificate+0x1e4>
   e0692:	f1b9 0f02 	cmp.w	r9, #2
   e0696:	d01f      	beq.n	e06d8 <mbedtls_ssl_parse_certificate+0x224>
        if( ret != 0 )
   e0698:	2e00      	cmp	r6, #0
   e069a:	f43f af1d 	beq.w	e04d8 <mbedtls_ssl_parse_certificate+0x24>
            ret = MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED;
   e069e:	4635      	mov	r5, r6
            if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_OTHER )
   e06a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e06a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   e06a4:	05df      	lsls	r7, r3, #23
   e06a6:	d419      	bmi.n	e06dc <mbedtls_ssl_parse_certificate+0x228>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_CN_MISMATCH )
   e06a8:	075e      	lsls	r6, r3, #29
   e06aa:	d419      	bmi.n	e06e0 <mbedtls_ssl_parse_certificate+0x22c>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_KEY )
   e06ac:	f413 3fdc 	tst.w	r3, #112640	; 0x1b800
   e06b0:	d118      	bne.n	e06e4 <mbedtls_ssl_parse_certificate+0x230>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_EXPIRED )
   e06b2:	07d8      	lsls	r0, r3, #31
   e06b4:	d418      	bmi.n	e06e8 <mbedtls_ssl_parse_certificate+0x234>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_REVOKED )
   e06b6:	0799      	lsls	r1, r3, #30
   e06b8:	d418      	bmi.n	e06ec <mbedtls_ssl_parse_certificate+0x238>
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_UNKNOWN;
   e06ba:	f013 0f08 	tst.w	r3, #8
   e06be:	bf14      	ite	ne
   e06c0:	2230      	movne	r2, #48	; 0x30
   e06c2:	222e      	moveq	r2, #46	; 0x2e
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   e06c4:	2102      	movs	r1, #2
   e06c6:	4620      	mov	r0, r4
   e06c8:	f7ff f854 	bl	df774 <mbedtls_ssl_send_alert_message>
   e06cc:	e704      	b.n	e04d8 <mbedtls_ssl_parse_certificate+0x24>
            ca_crl   = ssl->conf->ca_crl;
   e06ce:	e9d3 7215 	ldrd	r7, r2, [r3, #84]	; 0x54
   e06d2:	e796      	b.n	e0602 <mbedtls_ssl_parse_certificate+0x14e>
                ret = MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE;
   e06d4:	4d0c      	ldr	r5, [pc, #48]	; (e0708 <mbedtls_ssl_parse_certificate+0x254>)
   e06d6:	e7e3      	b.n	e06a0 <mbedtls_ssl_parse_certificate+0x1ec>
            ret = MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED;
   e06d8:	4d0d      	ldr	r5, [pc, #52]	; (e0710 <mbedtls_ssl_parse_certificate+0x25c>)
   e06da:	e7e1      	b.n	e06a0 <mbedtls_ssl_parse_certificate+0x1ec>
                alert = MBEDTLS_SSL_ALERT_MSG_ACCESS_DENIED;
   e06dc:	2231      	movs	r2, #49	; 0x31
   e06de:	e7f1      	b.n	e06c4 <mbedtls_ssl_parse_certificate+0x210>
                alert = MBEDTLS_SSL_ALERT_MSG_BAD_CERT;
   e06e0:	222a      	movs	r2, #42	; 0x2a
   e06e2:	e7ef      	b.n	e06c4 <mbedtls_ssl_parse_certificate+0x210>
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
   e06e4:	222b      	movs	r2, #43	; 0x2b
   e06e6:	e7ed      	b.n	e06c4 <mbedtls_ssl_parse_certificate+0x210>
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_EXPIRED;
   e06e8:	222d      	movs	r2, #45	; 0x2d
   e06ea:	e7eb      	b.n	e06c4 <mbedtls_ssl_parse_certificate+0x210>
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_REVOKED;
   e06ec:	222c      	movs	r2, #44	; 0x2c
   e06ee:	e7e9      	b.n	e06c4 <mbedtls_ssl_parse_certificate+0x210>
        if( authmode == MBEDTLS_SSL_VERIFY_OPTIONAL &&
   e06f0:	f1b9 0f01 	cmp.w	r9, #1
   e06f4:	f43f aef0 	beq.w	e04d8 <mbedtls_ssl_parse_certificate+0x24>
        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
   e06f8:	2f00      	cmp	r7, #0
   e06fa:	d1eb      	bne.n	e06d4 <mbedtls_ssl_parse_certificate+0x220>
   e06fc:	f1b9 0f02 	cmp.w	r9, #2
   e0700:	d0ea      	beq.n	e06d8 <mbedtls_ssl_parse_certificate+0x224>
                ret = MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE;
   e0702:	4e01      	ldr	r6, [pc, #4]	; (e0708 <mbedtls_ssl_parse_certificate+0x254>)
   e0704:	e7cb      	b.n	e069e <mbedtls_ssl_parse_certificate+0x1ea>
   e0706:	bf00      	nop
   e0708:	ffff8600 	.word	0xffff8600
   e070c:	ffff8100 	.word	0xffff8100
   e0710:	ffff8980 	.word	0xffff8980
   e0714:	ffffda81 	.word	0xffffda81
   e0718:	ffffd9d2 	.word	0xffffd9d2

000e071c <mbedtls_ssl_write_version>:
        ver[0] = (unsigned char) major;
   e071c:	7018      	strb	r0, [r3, #0]
        ver[1] = (unsigned char) minor;
   e071e:	7059      	strb	r1, [r3, #1]
}
   e0720:	4770      	bx	lr

000e0722 <mbedtls_ssl_read_version>:
        *major = ver[0];
   e0722:	781a      	ldrb	r2, [r3, #0]
   e0724:	6002      	str	r2, [r0, #0]
        *minor = ver[1];
   e0726:	785b      	ldrb	r3, [r3, #1]
   e0728:	600b      	str	r3, [r1, #0]
    }
}
   e072a:	4770      	bx	lr

000e072c <mbedtls_ssl_get_key_exchange_md_tls1_2>:
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
int mbedtls_ssl_get_key_exchange_md_tls1_2( mbedtls_ssl_context *ssl,
                                            unsigned char *hash, size_t *hashlen,
                                            unsigned char *data, size_t data_len,
                                            mbedtls_md_type_t md_alg )
{
   e072c:	b5f0      	push	{r4, r5, r6, r7, lr}
   e072e:	b087      	sub	sp, #28
   e0730:	4605      	mov	r5, r0
    int ret = 0;
    mbedtls_md_context_t ctx;
    const mbedtls_md_info_t *md_info = mbedtls_md_info_from_type( md_alg );
   e0732:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
{
   e0736:	4614      	mov	r4, r2
   e0738:	460e      	mov	r6, r1
   e073a:	461f      	mov	r7, r3
    const mbedtls_md_info_t *md_info = mbedtls_md_info_from_type( md_alg );
   e073c:	f7fc fac6 	bl	dcccc <mbedtls_md_info_from_type>
   e0740:	9001      	str	r0, [sp, #4]
    *hashlen = mbedtls_md_get_size( md_info );
   e0742:	f7fc fbfd 	bl	dcf40 <mbedtls_md_get_size>
   e0746:	6020      	str	r0, [r4, #0]

    mbedtls_md_init( &ctx );
   e0748:	a803      	add	r0, sp, #12
   e074a:	f7fc facb 	bl	dcce4 <mbedtls_md_init>
     *     opaque client_random[32];
     *     opaque server_random[32];
     *     ServerDHParams params;
     * };
     */
    if( ( ret = mbedtls_md_setup( &ctx, md_info, 0 ) ) != 0 )
   e074e:	9901      	ldr	r1, [sp, #4]
   e0750:	2200      	movs	r2, #0
   e0752:	a803      	add	r0, sp, #12
   e0754:	f7fc fae6 	bl	dcd24 <mbedtls_md_setup>
   e0758:	4604      	mov	r4, r0
   e075a:	b9c8      	cbnz	r0, e0790 <mbedtls_ssl_get_key_exchange_md_tls1_2+0x64>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_setup", ret );
        goto exit;
    }
    if( ( ret = mbedtls_md_starts( &ctx ) ) != 0 )
   e075c:	a803      	add	r0, sp, #12
   e075e:	f7fc fb01 	bl	dcd64 <mbedtls_md_starts>
   e0762:	4604      	mov	r4, r0
   e0764:	b9a0      	cbnz	r0, e0790 <mbedtls_ssl_get_key_exchange_md_tls1_2+0x64>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_starts", ret );
        goto exit;
    }
    if( ( ret = mbedtls_md_update( &ctx, ssl->handshake->randbytes, 64 ) ) != 0 )
   e0766:	6b29      	ldr	r1, [r5, #48]	; 0x30
   e0768:	2240      	movs	r2, #64	; 0x40
   e076a:	f501 712d 	add.w	r1, r1, #692	; 0x2b4
   e076e:	a803      	add	r0, sp, #12
   e0770:	f7fc fb02 	bl	dcd78 <mbedtls_md_update>
   e0774:	4604      	mov	r4, r0
   e0776:	b958      	cbnz	r0, e0790 <mbedtls_ssl_get_key_exchange_md_tls1_2+0x64>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_update", ret );
        goto exit;
    }
    if( ( ret = mbedtls_md_update( &ctx, data, data_len ) ) != 0 )
   e0778:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   e077a:	4639      	mov	r1, r7
   e077c:	a803      	add	r0, sp, #12
   e077e:	f7fc fafb 	bl	dcd78 <mbedtls_md_update>
   e0782:	4604      	mov	r4, r0
   e0784:	b920      	cbnz	r0, e0790 <mbedtls_ssl_get_key_exchange_md_tls1_2+0x64>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_update", ret );
        goto exit;
    }
    if( ( ret = mbedtls_md_finish( &ctx, hash ) ) != 0 )
   e0786:	4631      	mov	r1, r6
   e0788:	a803      	add	r0, sp, #12
   e078a:	f7fc faff 	bl	dcd8c <mbedtls_md_finish>
   e078e:	4604      	mov	r4, r0
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_finish", ret );
        goto exit;
    }

exit:
    mbedtls_md_free( &ctx );
   e0790:	a803      	add	r0, sp, #12
   e0792:	f7fc faac 	bl	dccee <mbedtls_md_free>

    if( ret != 0 )
   e0796:	b124      	cbz	r4, e07a2 <mbedtls_ssl_get_key_exchange_md_tls1_2+0x76>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   e0798:	2250      	movs	r2, #80	; 0x50
   e079a:	2102      	movs	r1, #2
   e079c:	4628      	mov	r0, r5
   e079e:	f7fe ffe9 	bl	df774 <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );

    return( ret );
}
   e07a2:	4620      	mov	r0, r4
   e07a4:	b007      	add	sp, #28
   e07a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000e07a8 <_ZL11mpi_sub_hlpjPmS_>:
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
   e07a8:	2300      	movs	r3, #0
{
   e07aa:	b5f0      	push	{r4, r5, r6, r7, lr}
   e07ac:	1f16      	subs	r6, r2, #4
    for( i = c = 0; i < n; i++, s++, d++ )
   e07ae:	461c      	mov	r4, r3
   e07b0:	4284      	cmp	r4, r0
   e07b2:	d10b      	bne.n	e07cc <_ZL11mpi_sub_hlpjPmS_+0x24>
   e07b4:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        z = ( *d <  c );     *d -=  c;
        c = ( *d < *s ) + z; *d -= *s;
    }

    while( c != 0 )
   e07b8:	b1f3      	cbz	r3, e07f8 <_ZL11mpi_sub_hlpjPmS_+0x50>
    {
        z = ( *d < c ); *d -= c;
   e07ba:	6811      	ldr	r1, [r2, #0]
   e07bc:	1ac8      	subs	r0, r1, r3
        c = z; d++;
   e07be:	4299      	cmp	r1, r3
        z = ( *d < c ); *d -= c;
   e07c0:	f842 0b04 	str.w	r0, [r2], #4
        c = z; d++;
   e07c4:	bf2c      	ite	cs
   e07c6:	2300      	movcs	r3, #0
   e07c8:	2301      	movcc	r3, #1
    while( c != 0 )
   e07ca:	e7f5      	b.n	e07b8 <_ZL11mpi_sub_hlpjPmS_+0x10>
        z = ( *d <  c );     *d -=  c;
   e07cc:	f856 cf04 	ldr.w	ip, [r6, #4]!
   e07d0:	ebac 0503 	sub.w	r5, ip, r3
   e07d4:	6035      	str	r5, [r6, #0]
        c = ( *d < *s ) + z; *d -= *s;
   e07d6:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   e07da:	42bd      	cmp	r5, r7
   e07dc:	bf2c      	ite	cs
   e07de:	f04f 0e00 	movcs.w	lr, #0
   e07e2:	f04f 0e01 	movcc.w	lr, #1
   e07e6:	1bed      	subs	r5, r5, r7
   e07e8:	459c      	cmp	ip, r3
   e07ea:	bf2c      	ite	cs
   e07ec:	4673      	movcs	r3, lr
   e07ee:	f10e 0301 	addcc.w	r3, lr, #1
   e07f2:	6035      	str	r5, [r6, #0]
    for( i = c = 0; i < n; i++, s++, d++ )
   e07f4:	3401      	adds	r4, #1
   e07f6:	e7db      	b.n	e07b0 <_ZL11mpi_sub_hlpjPmS_+0x8>
    }
}
   e07f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000e07fa <_ZL11mpi_mul_hlpjPmS_m>:
 * appears to need this to prevent bad ARM code generation at -O3.
 */
__attribute__ ((noinline))
#endif
void mpi_mul_hlp( size_t i, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d, mbedtls_mpi_uint b )
{
   e07fa:	b5f0      	push	{r4, r5, r6, r7, lr}
   e07fc:	4605      	mov	r5, r0
   e07fe:	4607      	mov	r7, r0
    mbedtls_mpi_uint c = 0, t = 0;
   e0800:	2400      	movs	r4, #0
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
   e0802:	2f0f      	cmp	r7, #15
   e0804:	d84e      	bhi.n	e08a4 <_ZL11mpi_mul_hlpjPmS_m+0xaa>
   e0806:	092e      	lsrs	r6, r5, #4
   e0808:	f06f 000f 	mvn.w	r0, #15
   e080c:	fb00 5506 	mla	r5, r0, r6, r5
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i >= 8; i -= 8 )
   e0810:	2d07      	cmp	r5, #7
   e0812:	d93a      	bls.n	e088a <_ZL11mpi_mul_hlpjPmS_m+0x90>
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE

        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
   e0814:	460e      	mov	r6, r1
    for( ; i >= 8; i -= 8 )
   e0816:	3d08      	subs	r5, #8
        MULADDC_STOP
   e0818:	f856 0b04 	ldr.w	r0, [r6], #4
   e081c:	6811      	ldr	r1, [r2, #0]
   e081e:	fbe3 1460 	umaal	r1, r4, r3, r0
   e0822:	f842 1b04 	str.w	r1, [r2], #4
   e0826:	f856 0b04 	ldr.w	r0, [r6], #4
   e082a:	6811      	ldr	r1, [r2, #0]
   e082c:	fbe3 1460 	umaal	r1, r4, r3, r0
   e0830:	f842 1b04 	str.w	r1, [r2], #4
   e0834:	f856 0b04 	ldr.w	r0, [r6], #4
   e0838:	6811      	ldr	r1, [r2, #0]
   e083a:	fbe3 1460 	umaal	r1, r4, r3, r0
   e083e:	f842 1b04 	str.w	r1, [r2], #4
   e0842:	f856 0b04 	ldr.w	r0, [r6], #4
   e0846:	6811      	ldr	r1, [r2, #0]
   e0848:	fbe3 1460 	umaal	r1, r4, r3, r0
   e084c:	f842 1b04 	str.w	r1, [r2], #4
   e0850:	f856 0b04 	ldr.w	r0, [r6], #4
   e0854:	6811      	ldr	r1, [r2, #0]
   e0856:	fbe3 1460 	umaal	r1, r4, r3, r0
   e085a:	f842 1b04 	str.w	r1, [r2], #4
   e085e:	f856 0b04 	ldr.w	r0, [r6], #4
   e0862:	6811      	ldr	r1, [r2, #0]
   e0864:	fbe3 1460 	umaal	r1, r4, r3, r0
   e0868:	f842 1b04 	str.w	r1, [r2], #4
   e086c:	f856 0b04 	ldr.w	r0, [r6], #4
   e0870:	6811      	ldr	r1, [r2, #0]
   e0872:	fbe3 1460 	umaal	r1, r4, r3, r0
   e0876:	f842 1b04 	str.w	r1, [r2], #4
   e087a:	f856 0b04 	ldr.w	r0, [r6], #4
   e087e:	6811      	ldr	r1, [r2, #0]
   e0880:	fbe3 1460 	umaal	r1, r4, r3, r0
   e0884:	f842 1b04 	str.w	r1, [r2], #4
   e0888:	4631      	mov	r1, r6
    }

    for( ; i > 0; i-- )
   e088a:	2d00      	cmp	r5, #0
   e088c:	d07e      	beq.n	e098c <_ZL11mpi_mul_hlpjPmS_m+0x192>
    {
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
   e088e:	460e      	mov	r6, r1
    for( ; i > 0; i-- )
   e0890:	3d01      	subs	r5, #1
        MULADDC_STOP
   e0892:	f856 0b04 	ldr.w	r0, [r6], #4
   e0896:	6811      	ldr	r1, [r2, #0]
   e0898:	fbe3 1460 	umaal	r1, r4, r3, r0
   e089c:	f842 1b04 	str.w	r1, [r2], #4
   e08a0:	4631      	mov	r1, r6
    for( ; i > 0; i-- )
   e08a2:	e7f2      	b.n	e088a <_ZL11mpi_mul_hlpjPmS_m+0x90>
        MULADDC_STOP
   e08a4:	460e      	mov	r6, r1
    for( ; i >= 16; i -= 16 )
   e08a6:	3f10      	subs	r7, #16
        MULADDC_STOP
   e08a8:	f856 0b04 	ldr.w	r0, [r6], #4
   e08ac:	6811      	ldr	r1, [r2, #0]
   e08ae:	fbe3 1460 	umaal	r1, r4, r3, r0
   e08b2:	f842 1b04 	str.w	r1, [r2], #4
   e08b6:	f856 0b04 	ldr.w	r0, [r6], #4
   e08ba:	6811      	ldr	r1, [r2, #0]
   e08bc:	fbe3 1460 	umaal	r1, r4, r3, r0
   e08c0:	f842 1b04 	str.w	r1, [r2], #4
   e08c4:	f856 0b04 	ldr.w	r0, [r6], #4
   e08c8:	6811      	ldr	r1, [r2, #0]
   e08ca:	fbe3 1460 	umaal	r1, r4, r3, r0
   e08ce:	f842 1b04 	str.w	r1, [r2], #4
   e08d2:	f856 0b04 	ldr.w	r0, [r6], #4
   e08d6:	6811      	ldr	r1, [r2, #0]
   e08d8:	fbe3 1460 	umaal	r1, r4, r3, r0
   e08dc:	f842 1b04 	str.w	r1, [r2], #4
   e08e0:	f856 0b04 	ldr.w	r0, [r6], #4
   e08e4:	6811      	ldr	r1, [r2, #0]
   e08e6:	fbe3 1460 	umaal	r1, r4, r3, r0
   e08ea:	f842 1b04 	str.w	r1, [r2], #4
   e08ee:	f856 0b04 	ldr.w	r0, [r6], #4
   e08f2:	6811      	ldr	r1, [r2, #0]
   e08f4:	fbe3 1460 	umaal	r1, r4, r3, r0
   e08f8:	f842 1b04 	str.w	r1, [r2], #4
   e08fc:	f856 0b04 	ldr.w	r0, [r6], #4
   e0900:	6811      	ldr	r1, [r2, #0]
   e0902:	fbe3 1460 	umaal	r1, r4, r3, r0
   e0906:	f842 1b04 	str.w	r1, [r2], #4
   e090a:	f856 0b04 	ldr.w	r0, [r6], #4
   e090e:	6811      	ldr	r1, [r2, #0]
   e0910:	fbe3 1460 	umaal	r1, r4, r3, r0
   e0914:	f842 1b04 	str.w	r1, [r2], #4
   e0918:	f856 0b04 	ldr.w	r0, [r6], #4
   e091c:	6811      	ldr	r1, [r2, #0]
   e091e:	fbe3 1460 	umaal	r1, r4, r3, r0
   e0922:	f842 1b04 	str.w	r1, [r2], #4
   e0926:	f856 0b04 	ldr.w	r0, [r6], #4
   e092a:	6811      	ldr	r1, [r2, #0]
   e092c:	fbe3 1460 	umaal	r1, r4, r3, r0
   e0930:	f842 1b04 	str.w	r1, [r2], #4
   e0934:	f856 0b04 	ldr.w	r0, [r6], #4
   e0938:	6811      	ldr	r1, [r2, #0]
   e093a:	fbe3 1460 	umaal	r1, r4, r3, r0
   e093e:	f842 1b04 	str.w	r1, [r2], #4
   e0942:	f856 0b04 	ldr.w	r0, [r6], #4
   e0946:	6811      	ldr	r1, [r2, #0]
   e0948:	fbe3 1460 	umaal	r1, r4, r3, r0
   e094c:	f842 1b04 	str.w	r1, [r2], #4
   e0950:	f856 0b04 	ldr.w	r0, [r6], #4
   e0954:	6811      	ldr	r1, [r2, #0]
   e0956:	fbe3 1460 	umaal	r1, r4, r3, r0
   e095a:	f842 1b04 	str.w	r1, [r2], #4
   e095e:	f856 0b04 	ldr.w	r0, [r6], #4
   e0962:	6811      	ldr	r1, [r2, #0]
   e0964:	fbe3 1460 	umaal	r1, r4, r3, r0
   e0968:	f842 1b04 	str.w	r1, [r2], #4
   e096c:	f856 0b04 	ldr.w	r0, [r6], #4
   e0970:	6811      	ldr	r1, [r2, #0]
   e0972:	fbe3 1460 	umaal	r1, r4, r3, r0
   e0976:	f842 1b04 	str.w	r1, [r2], #4
   e097a:	f856 0b04 	ldr.w	r0, [r6], #4
   e097e:	6811      	ldr	r1, [r2, #0]
   e0980:	fbe3 1460 	umaal	r1, r4, r3, r0
   e0984:	f842 1b04 	str.w	r1, [r2], #4
   e0988:	4631      	mov	r1, r6
    for( ; i >= 16; i -= 16 )
   e098a:	e73a      	b.n	e0802 <_ZL11mpi_mul_hlpjPmS_m+0x8>
#endif /* MULADDC_HUIT */

    t++;

    do {
        *d += c; c = ( *d < c ); d++;
   e098c:	6813      	ldr	r3, [r2, #0]
   e098e:	191b      	adds	r3, r3, r4
   e0990:	bf2c      	ite	cs
   e0992:	2401      	movcs	r4, #1
   e0994:	2400      	movcc	r4, #0
   e0996:	f842 3b04 	str.w	r3, [r2], #4
    }
    while( c != 0 );
   e099a:	2c00      	cmp	r4, #0
   e099c:	d1f6      	bne.n	e098c <_ZL11mpi_mul_hlpjPmS_m+0x192>
}
   e099e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000e09a0 <_ZL21mpi_bigendian_to_hostPmj.part.0>:
    for( cur_limb_left = p, cur_limb_right = p + ( limbs - 1 );
   e09a0:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   e09a4:	3901      	subs	r1, #1
   e09a6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
         cur_limb_left <= cur_limb_right;
   e09aa:	4281      	cmp	r1, r0
   e09ac:	d308      	bcc.n	e09c0 <_ZL21mpi_bigendian_to_hostPmj.part.0+0x20>
            return( __builtin_bswap32(x) );
   e09ae:	6803      	ldr	r3, [r0, #0]
   e09b0:	680a      	ldr	r2, [r1, #0]
   e09b2:	ba1b      	rev	r3, r3
   e09b4:	ba12      	rev	r2, r2
        *cur_limb_left  = mpi_uint_bigendian_to_host( *cur_limb_right );
   e09b6:	f840 2b04 	str.w	r2, [r0], #4
        *cur_limb_right = tmp;
   e09ba:	f841 3904 	str.w	r3, [r1], #-4
    for( cur_limb_left = p, cur_limb_right = p + ( limbs - 1 );
   e09be:	e7f4      	b.n	e09aa <_ZL21mpi_bigendian_to_hostPmj.part.0+0xa>
}
   e09c0:	4770      	bx	lr

000e09c2 <mbedtls_mpi_init>:
    X->n = 0;
   e09c2:	2300      	movs	r3, #0
   e09c4:	2201      	movs	r2, #1
   e09c6:	e9c0 2300 	strd	r2, r3, [r0]
    X->p = NULL;
   e09ca:	6083      	str	r3, [r0, #8]
}
   e09cc:	4770      	bx	lr

000e09ce <mbedtls_mpi_free>:
{
   e09ce:	b510      	push	{r4, lr}
    if( X == NULL )
   e09d0:	4604      	mov	r4, r0
   e09d2:	b168      	cbz	r0, e09f0 <mbedtls_mpi_free+0x22>
    if( X->p != NULL )
   e09d4:	6880      	ldr	r0, [r0, #8]
   e09d6:	b130      	cbz	r0, e09e6 <mbedtls_mpi_free+0x18>
    mbedtls_platform_zeroize( v, ciL * n );
   e09d8:	6861      	ldr	r1, [r4, #4]
   e09da:	0089      	lsls	r1, r1, #2
   e09dc:	f7fa fafe 	bl	dafdc <mbedtls_platform_zeroize>
        mbedtls_free( X->p );
   e09e0:	68a0      	ldr	r0, [r4, #8]
   e09e2:	f004 feed 	bl	e57c0 <free>
    X->n = 0;
   e09e6:	2300      	movs	r3, #0
   e09e8:	2201      	movs	r2, #1
   e09ea:	e9c4 2300 	strd	r2, r3, [r4]
    X->p = NULL;
   e09ee:	60a3      	str	r3, [r4, #8]
}
   e09f0:	bd10      	pop	{r4, pc}

000e09f2 <mbedtls_mpi_grow>:
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
   e09f2:	f242 7310 	movw	r3, #10000	; 0x2710
   e09f6:	4299      	cmp	r1, r3
{
   e09f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e09fc:	4604      	mov	r4, r0
   e09fe:	460d      	mov	r5, r1
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
   e0a00:	d903      	bls.n	e0a0a <mbedtls_mpi_grow+0x18>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
   e0a02:	f06f 000f 	mvn.w	r0, #15
}
   e0a06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( X->n < nblimbs )
   e0a0a:	6846      	ldr	r6, [r0, #4]
   e0a0c:	428e      	cmp	r6, r1
   e0a0e:	d219      	bcs.n	e0a44 <mbedtls_mpi_grow+0x52>
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
   e0a10:	2104      	movs	r1, #4
   e0a12:	4628      	mov	r0, r5
   e0a14:	f007 fee0 	bl	e87d8 <calloc>
   e0a18:	4607      	mov	r7, r0
   e0a1a:	2800      	cmp	r0, #0
   e0a1c:	d0f1      	beq.n	e0a02 <mbedtls_mpi_grow+0x10>
        if( X->p != NULL )
   e0a1e:	f8d4 8008 	ldr.w	r8, [r4, #8]
   e0a22:	f1b8 0f00 	cmp.w	r8, #0
   e0a26:	d00b      	beq.n	e0a40 <mbedtls_mpi_grow+0x4e>
            memcpy( p, X->p, X->n * ciL );
   e0a28:	00b6      	lsls	r6, r6, #2
   e0a2a:	4632      	mov	r2, r6
   e0a2c:	4641      	mov	r1, r8
   e0a2e:	f007 ff4d 	bl	e88cc <memcpy>
    mbedtls_platform_zeroize( v, ciL * n );
   e0a32:	4640      	mov	r0, r8
   e0a34:	4631      	mov	r1, r6
   e0a36:	f7fa fad1 	bl	dafdc <mbedtls_platform_zeroize>
            mbedtls_free( X->p );
   e0a3a:	68a0      	ldr	r0, [r4, #8]
   e0a3c:	f004 fec0 	bl	e57c0 <free>
        X->p = p;
   e0a40:	e9c4 5701 	strd	r5, r7, [r4, #4]
    return( 0 );
   e0a44:	2000      	movs	r0, #0
   e0a46:	e7de      	b.n	e0a06 <mbedtls_mpi_grow+0x14>

000e0a48 <mbedtls_mpi_shrink>:
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
   e0a48:	f242 7310 	movw	r3, #10000	; 0x2710
   e0a4c:	4299      	cmp	r1, r3
{
   e0a4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e0a52:	4605      	mov	r5, r0
   e0a54:	460c      	mov	r4, r1
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
   e0a56:	d903      	bls.n	e0a60 <mbedtls_mpi_shrink+0x18>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
   e0a58:	f06f 000f 	mvn.w	r0, #15
}
   e0a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( X->n <= nblimbs )
   e0a60:	f8d0 8004 	ldr.w	r8, [r0, #4]
   e0a64:	4588      	cmp	r8, r1
   e0a66:	d803      	bhi.n	e0a70 <mbedtls_mpi_shrink+0x28>
}
   e0a68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        return( mbedtls_mpi_grow( X, nblimbs ) );
   e0a6c:	f7ff bfc1 	b.w	e09f2 <mbedtls_mpi_grow>
    for( i = X->n - 1; i > 0; i-- )
   e0a70:	f108 31ff 	add.w	r1, r8, #4294967295
   e0a74:	b129      	cbz	r1, e0a82 <mbedtls_mpi_shrink+0x3a>
        if( X->p[i] != 0 )
   e0a76:	68ab      	ldr	r3, [r5, #8]
   e0a78:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   e0a7c:	b90b      	cbnz	r3, e0a82 <mbedtls_mpi_shrink+0x3a>
    for( i = X->n - 1; i > 0; i-- )
   e0a7e:	3901      	subs	r1, #1
   e0a80:	e7f8      	b.n	e0a74 <mbedtls_mpi_shrink+0x2c>
    i++;
   e0a82:	3101      	adds	r1, #1
    if( i < nblimbs )
   e0a84:	428c      	cmp	r4, r1
   e0a86:	bf38      	it	cc
   e0a88:	460c      	movcc	r4, r1
    if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( i, ciL ) ) == NULL )
   e0a8a:	4620      	mov	r0, r4
   e0a8c:	2104      	movs	r1, #4
   e0a8e:	f007 fea3 	bl	e87d8 <calloc>
   e0a92:	4606      	mov	r6, r0
   e0a94:	2800      	cmp	r0, #0
   e0a96:	d0df      	beq.n	e0a58 <mbedtls_mpi_shrink+0x10>
    if( X->p != NULL )
   e0a98:	68af      	ldr	r7, [r5, #8]
   e0a9a:	b15f      	cbz	r7, e0ab4 <mbedtls_mpi_shrink+0x6c>
        memcpy( p, X->p, i * ciL );
   e0a9c:	00a2      	lsls	r2, r4, #2
   e0a9e:	4639      	mov	r1, r7
   e0aa0:	f007 ff14 	bl	e88cc <memcpy>
    mbedtls_platform_zeroize( v, ciL * n );
   e0aa4:	4638      	mov	r0, r7
   e0aa6:	ea4f 0188 	mov.w	r1, r8, lsl #2
   e0aaa:	f7fa fa97 	bl	dafdc <mbedtls_platform_zeroize>
        mbedtls_free( X->p );
   e0aae:	68a8      	ldr	r0, [r5, #8]
   e0ab0:	f004 fe86 	bl	e57c0 <free>
    X->p = p;
   e0ab4:	e9c5 4601 	strd	r4, r6, [r5, #4]
    return( 0 );
   e0ab8:	2000      	movs	r0, #0
   e0aba:	e7cf      	b.n	e0a5c <mbedtls_mpi_shrink+0x14>

000e0abc <mbedtls_mpi_copy>:
    if( X == Y )
   e0abc:	4288      	cmp	r0, r1
{
   e0abe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e0ac0:	4606      	mov	r6, r0
   e0ac2:	460f      	mov	r7, r1
    if( X == Y )
   e0ac4:	d003      	beq.n	e0ace <mbedtls_mpi_copy+0x12>
    if( Y->p == NULL )
   e0ac6:	688d      	ldr	r5, [r1, #8]
   e0ac8:	b91d      	cbnz	r5, e0ad2 <mbedtls_mpi_copy+0x16>
        mbedtls_mpi_free( X );
   e0aca:	f7ff ff80 	bl	e09ce <mbedtls_mpi_free>
        return( 0 );
   e0ace:	2000      	movs	r0, #0
   e0ad0:	e011      	b.n	e0af6 <mbedtls_mpi_copy+0x3a>
    for( i = Y->n - 1; i > 0; i-- )
   e0ad2:	684c      	ldr	r4, [r1, #4]
   e0ad4:	3c01      	subs	r4, #1
   e0ad6:	b11c      	cbz	r4, e0ae0 <mbedtls_mpi_copy+0x24>
        if( Y->p[i] != 0 )
   e0ad8:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   e0adc:	2b00      	cmp	r3, #0
   e0ade:	d0f9      	beq.n	e0ad4 <mbedtls_mpi_copy+0x18>
    if( X->n < i )
   e0ae0:	6872      	ldr	r2, [r6, #4]
    X->s = Y->s;
   e0ae2:	683b      	ldr	r3, [r7, #0]
   e0ae4:	6033      	str	r3, [r6, #0]
    i++;
   e0ae6:	3401      	adds	r4, #1
    if( X->n < i )
   e0ae8:	42a2      	cmp	r2, r4
   e0aea:	d205      	bcs.n	e0af8 <mbedtls_mpi_copy+0x3c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i ) );
   e0aec:	4621      	mov	r1, r4
   e0aee:	4630      	mov	r0, r6
   e0af0:	f7ff ff7f 	bl	e09f2 <mbedtls_mpi_grow>
   e0af4:	b140      	cbz	r0, e0b08 <mbedtls_mpi_copy+0x4c>
}
   e0af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        memset( X->p + i, 0, ( X->n - i ) * ciL );
   e0af8:	68b0      	ldr	r0, [r6, #8]
   e0afa:	1b12      	subs	r2, r2, r4
   e0afc:	0092      	lsls	r2, r2, #2
   e0afe:	2100      	movs	r1, #0
   e0b00:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   e0b04:	f007 ff0a 	bl	e891c <memset>
    memcpy( X->p, Y->p, i * ciL );
   e0b08:	68b9      	ldr	r1, [r7, #8]
   e0b0a:	68b0      	ldr	r0, [r6, #8]
   e0b0c:	00a2      	lsls	r2, r4, #2
   e0b0e:	f007 fedd 	bl	e88cc <memcpy>
   e0b12:	e7dc      	b.n	e0ace <mbedtls_mpi_copy+0x12>

000e0b14 <mbedtls_mpi_safe_cond_assign>:
{
   e0b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e0b16:	460e      	mov	r6, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
   e0b18:	6849      	ldr	r1, [r1, #4]
{
   e0b1a:	4605      	mov	r5, r0
   e0b1c:	4614      	mov	r4, r2
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
   e0b1e:	f7ff ff68 	bl	e09f2 <mbedtls_mpi_grow>
   e0b22:	bb40      	cbnz	r0, e0b76 <mbedtls_mpi_safe_cond_assign+0x62>
    assign = (assign | (unsigned char)-assign) >> 7;
   e0b24:	4262      	negs	r2, r4
   e0b26:	4322      	orrs	r2, r4
    X->s = X->s * ( 1 - assign ) + Y->s * assign;
   e0b28:	6834      	ldr	r4, [r6, #0]
   e0b2a:	682b      	ldr	r3, [r5, #0]
    assign = (assign | (unsigned char)-assign) >> 7;
   e0b2c:	f3c2 12c0 	ubfx	r2, r2, #7, #1
    X->s = X->s * ( 1 - assign ) + Y->s * assign;
   e0b30:	f1c2 0101 	rsb	r1, r2, #1
   e0b34:	4354      	muls	r4, r2
   e0b36:	fb03 4301 	mla	r3, r3, r1, r4
   e0b3a:	602b      	str	r3, [r5, #0]
    for( i = 0; i < Y->n; i++ )
   e0b3c:	4603      	mov	r3, r0
   e0b3e:	6874      	ldr	r4, [r6, #4]
   e0b40:	429c      	cmp	r4, r3
   e0b42:	d90d      	bls.n	e0b60 <mbedtls_mpi_safe_cond_assign+0x4c>
        X->p[i] = X->p[i] * ( 1 - assign ) + Y->p[i] * assign;
   e0b44:	f8d5 c008 	ldr.w	ip, [r5, #8]
   e0b48:	68b4      	ldr	r4, [r6, #8]
   e0b4a:	f85c 7023 	ldr.w	r7, [ip, r3, lsl #2]
   e0b4e:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
   e0b52:	434f      	muls	r7, r1
   e0b54:	fb04 7402 	mla	r4, r4, r2, r7
   e0b58:	f84c 4023 	str.w	r4, [ip, r3, lsl #2]
    for( i = 0; i < Y->n; i++ )
   e0b5c:	3301      	adds	r3, #1
   e0b5e:	e7ee      	b.n	e0b3e <mbedtls_mpi_safe_cond_assign+0x2a>
    for( ; i < X->n; i++ )
   e0b60:	686a      	ldr	r2, [r5, #4]
   e0b62:	429a      	cmp	r2, r3
   e0b64:	d907      	bls.n	e0b76 <mbedtls_mpi_safe_cond_assign+0x62>
        X->p[i] *= ( 1 - assign );
   e0b66:	68ac      	ldr	r4, [r5, #8]
   e0b68:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   e0b6c:	434a      	muls	r2, r1
   e0b6e:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    for( ; i < X->n; i++ )
   e0b72:	3301      	adds	r3, #1
   e0b74:	e7f4      	b.n	e0b60 <mbedtls_mpi_safe_cond_assign+0x4c>
}
   e0b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000e0b78 <mbedtls_mpi_lset>:
{
   e0b78:	b570      	push	{r4, r5, r6, lr}
   e0b7a:	460e      	mov	r6, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
   e0b7c:	2101      	movs	r1, #1
{
   e0b7e:	4604      	mov	r4, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
   e0b80:	f7ff ff37 	bl	e09f2 <mbedtls_mpi_grow>
   e0b84:	4605      	mov	r5, r0
   e0b86:	b988      	cbnz	r0, e0bac <mbedtls_mpi_lset+0x34>
    memset( X->p, 0, X->n * ciL );
   e0b88:	6862      	ldr	r2, [r4, #4]
   e0b8a:	4601      	mov	r1, r0
   e0b8c:	0092      	lsls	r2, r2, #2
   e0b8e:	68a0      	ldr	r0, [r4, #8]
   e0b90:	f007 fec4 	bl	e891c <memset>
    X->p[0] = ( z < 0 ) ? -z : z;
   e0b94:	68a3      	ldr	r3, [r4, #8]
   e0b96:	ea86 72e6 	eor.w	r2, r6, r6, asr #31
    X->s    = ( z < 0 ) ? -1 : 1;
   e0b9a:	2e00      	cmp	r6, #0
    X->p[0] = ( z < 0 ) ? -z : z;
   e0b9c:	eba2 72e6 	sub.w	r2, r2, r6, asr #31
   e0ba0:	601a      	str	r2, [r3, #0]
    X->s    = ( z < 0 ) ? -1 : 1;
   e0ba2:	bfb4      	ite	lt
   e0ba4:	f04f 33ff 	movlt.w	r3, #4294967295
   e0ba8:	2301      	movge	r3, #1
   e0baa:	6023      	str	r3, [r4, #0]
}
   e0bac:	4628      	mov	r0, r5
   e0bae:	bd70      	pop	{r4, r5, r6, pc}

000e0bb0 <mbedtls_mpi_get_bit>:
    if( X->n * biL <= pos )
   e0bb0:	6843      	ldr	r3, [r0, #4]
   e0bb2:	ebb1 1f43 	cmp.w	r1, r3, lsl #5
    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
   e0bb6:	bf3f      	itttt	cc
   e0bb8:	094a      	lsrcc	r2, r1, #5
   e0bba:	6883      	ldrcc	r3, [r0, #8]
   e0bbc:	f853 0022 	ldrcc.w	r0, [r3, r2, lsl #2]
   e0bc0:	f001 011f 	andcc.w	r1, r1, #31
   e0bc4:	bf3a      	itte	cc
   e0bc6:	fa20 f101 	lsrcc.w	r1, r0, r1
   e0bca:	f001 0001 	andcc.w	r0, r1, #1
        return( 0 );
   e0bce:	2000      	movcs	r0, #0
}
   e0bd0:	4770      	bx	lr

000e0bd2 <mbedtls_mpi_lsb>:
{
   e0bd2:	b5f0      	push	{r4, r5, r6, r7, lr}
    size_t i, j, count = 0;
   e0bd4:	2200      	movs	r2, #0
    for( i = 0; i < X->n; i++ )
   e0bd6:	6845      	ldr	r5, [r0, #4]
   e0bd8:	4611      	mov	r1, r2
   e0bda:	428d      	cmp	r5, r1
   e0bdc:	d011      	beq.n	e0c02 <mbedtls_mpi_lsb+0x30>
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
   e0bde:	6883      	ldr	r3, [r0, #8]
   e0be0:	f853 6021 	ldr.w	r6, [r3, r1, lsl #2]
        for( j = 0; j < biL; j++, count++ )
   e0be4:	2300      	movs	r3, #0
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
   e0be6:	fa26 f703 	lsr.w	r7, r6, r3
   e0bea:	07ff      	lsls	r7, r7, #31
   e0bec:	eb02 0403 	add.w	r4, r2, r3
   e0bf0:	d408      	bmi.n	e0c04 <mbedtls_mpi_lsb+0x32>
        for( j = 0; j < biL; j++, count++ )
   e0bf2:	3301      	adds	r3, #1
   e0bf4:	2b20      	cmp	r3, #32
   e0bf6:	eb02 0403 	add.w	r4, r2, r3
   e0bfa:	d1f4      	bne.n	e0be6 <mbedtls_mpi_lsb+0x14>
    for( i = 0; i < X->n; i++ )
   e0bfc:	3101      	adds	r1, #1
        for( j = 0; j < biL; j++, count++ )
   e0bfe:	4622      	mov	r2, r4
    for( i = 0; i < X->n; i++ )
   e0c00:	e7eb      	b.n	e0bda <mbedtls_mpi_lsb+0x8>
    return( 0 );
   e0c02:	2400      	movs	r4, #0
}
   e0c04:	4620      	mov	r0, r4
   e0c06:	bdf0      	pop	{r4, r5, r6, r7, pc}

000e0c08 <mbedtls_mpi_bitlen>:
{
   e0c08:	4602      	mov	r2, r0
    if( X->n == 0 )
   e0c0a:	6840      	ldr	r0, [r0, #4]
   e0c0c:	b1b0      	cbz	r0, e0c3c <mbedtls_mpi_bitlen+0x34>
    for( i = X->n - 1; i > 0; i-- )
   e0c0e:	6892      	ldr	r2, [r2, #8]
   e0c10:	1e43      	subs	r3, r0, #1
   e0c12:	b123      	cbz	r3, e0c1e <mbedtls_mpi_bitlen+0x16>
        if( X->p[i] != 0 )
   e0c14:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   e0c18:	b909      	cbnz	r1, e0c1e <mbedtls_mpi_bitlen+0x16>
    for( i = X->n - 1; i > 0; i-- )
   e0c1a:	3b01      	subs	r3, #1
   e0c1c:	e7f9      	b.n	e0c12 <mbedtls_mpi_bitlen+0xa>
    j = biL - mbedtls_clz( X->p[i] );
   e0c1e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    for( j = 0; j < biL; j++ )
   e0c22:	2000      	movs	r0, #0
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);
   e0c24:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
        if( x & mask ) break;
   e0c28:	4211      	tst	r1, r2
   e0c2a:	d104      	bne.n	e0c36 <mbedtls_mpi_bitlen+0x2e>
    for( j = 0; j < biL; j++ )
   e0c2c:	3001      	adds	r0, #1
   e0c2e:	2820      	cmp	r0, #32
        mask >>= 1;
   e0c30:	ea4f 0252 	mov.w	r2, r2, lsr #1
    for( j = 0; j < biL; j++ )
   e0c34:	d1f8      	bne.n	e0c28 <mbedtls_mpi_bitlen+0x20>
    return( ( i * biL ) + j );
   e0c36:	3301      	adds	r3, #1
   e0c38:	ebc0 1043 	rsb	r0, r0, r3, lsl #5
}
   e0c3c:	4770      	bx	lr

000e0c3e <mbedtls_mpi_size>:
{
   e0c3e:	b508      	push	{r3, lr}
    return( ( mbedtls_mpi_bitlen( X ) + 7 ) >> 3 );
   e0c40:	f7ff ffe2 	bl	e0c08 <mbedtls_mpi_bitlen>
   e0c44:	3007      	adds	r0, #7
}
   e0c46:	08c0      	lsrs	r0, r0, #3
   e0c48:	bd08      	pop	{r3, pc}

000e0c4a <mbedtls_mpi_read_binary>:
{
   e0c4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    size_t const limbs    = CHARS_TO_LIMBS( buflen );
   e0c4e:	f012 0503 	ands.w	r5, r2, #3
   e0c52:	bf18      	it	ne
   e0c54:	2501      	movne	r5, #1
    if( X->n != limbs )
   e0c56:	6843      	ldr	r3, [r0, #4]
    size_t const limbs    = CHARS_TO_LIMBS( buflen );
   e0c58:	eb05 0592 	add.w	r5, r5, r2, lsr #2
    if( X->n != limbs )
   e0c5c:	42ab      	cmp	r3, r5
{
   e0c5e:	4604      	mov	r4, r0
   e0c60:	4688      	mov	r8, r1
   e0c62:	4617      	mov	r7, r2
    if( X->n != limbs )
   e0c64:	d108      	bne.n	e0c78 <mbedtls_mpi_read_binary+0x2e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
   e0c66:	2100      	movs	r1, #0
   e0c68:	4620      	mov	r0, r4
   e0c6a:	f7ff ff85 	bl	e0b78 <mbedtls_mpi_lset>
   e0c6e:	4606      	mov	r6, r0
   e0c70:	b188      	cbz	r0, e0c96 <mbedtls_mpi_read_binary+0x4c>
}
   e0c72:	4630      	mov	r0, r6
   e0c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        mbedtls_mpi_free( X );
   e0c78:	f7ff fea9 	bl	e09ce <mbedtls_mpi_free>
    X->n = 0;
   e0c7c:	2300      	movs	r3, #0
   e0c7e:	2201      	movs	r2, #1
   e0c80:	e9c4 2300 	strd	r2, r3, [r4]
    X->p = NULL;
   e0c84:	60a3      	str	r3, [r4, #8]
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
   e0c86:	4629      	mov	r1, r5
   e0c88:	4620      	mov	r0, r4
   e0c8a:	f7ff feb2 	bl	e09f2 <mbedtls_mpi_grow>
   e0c8e:	4606      	mov	r6, r0
   e0c90:	2800      	cmp	r0, #0
   e0c92:	d0e8      	beq.n	e0c66 <mbedtls_mpi_read_binary+0x1c>
   e0c94:	e7ed      	b.n	e0c72 <mbedtls_mpi_read_binary+0x28>
    if( buf != NULL )
   e0c96:	f1b8 0f00 	cmp.w	r8, #0
   e0c9a:	d0ea      	beq.n	e0c72 <mbedtls_mpi_read_binary+0x28>
        memcpy( Xp + overhead, buf, buflen );
   e0c9c:	68a3      	ldr	r3, [r4, #8]
    size_t const overhead = ( limbs * ciL ) - buflen;
   e0c9e:	ebc7 0085 	rsb	r0, r7, r5, lsl #2
        memcpy( Xp + overhead, buf, buflen );
   e0ca2:	463a      	mov	r2, r7
   e0ca4:	4641      	mov	r1, r8
   e0ca6:	4418      	add	r0, r3
   e0ca8:	f007 fe10 	bl	e88cc <memcpy>
    if( limbs == 0 )
   e0cac:	2d00      	cmp	r5, #0
   e0cae:	d0e0      	beq.n	e0c72 <mbedtls_mpi_read_binary+0x28>
   e0cb0:	68a0      	ldr	r0, [r4, #8]
   e0cb2:	4629      	mov	r1, r5
   e0cb4:	f7ff fe74 	bl	e09a0 <_ZL21mpi_bigendian_to_hostPmj.part.0>
    return( ret );
   e0cb8:	e7db      	b.n	e0c72 <mbedtls_mpi_read_binary+0x28>

000e0cba <mbedtls_mpi_write_binary>:
{
   e0cba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e0cbc:	4604      	mov	r4, r0
   e0cbe:	4608      	mov	r0, r1
    stored_bytes = X->n * ciL;
   e0cc0:	6863      	ldr	r3, [r4, #4]
    if( stored_bytes < buflen )
   e0cc2:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
    stored_bytes = X->n * ciL;
   e0cc6:	ea4f 0583 	mov.w	r5, r3, lsl #2
    if( stored_bytes < buflen )
   e0cca:	d916      	bls.n	e0cfa <mbedtls_mpi_write_binary+0x40>
        p = buf + buflen - stored_bytes;
   e0ccc:	1b52      	subs	r2, r2, r5
   e0cce:	188e      	adds	r6, r1, r2
        memset( buf, 0, buflen - stored_bytes );
   e0cd0:	2100      	movs	r1, #0
   e0cd2:	f007 fe23 	bl	e891c <memset>
        p = buf + buflen - stored_bytes;
   e0cd6:	4630      	mov	r0, r6
   e0cd8:	462a      	mov	r2, r5
    for( i = 0; i < bytes_to_copy; i++ )
   e0cda:	1881      	adds	r1, r0, r2
   e0cdc:	2300      	movs	r3, #0
   e0cde:	429a      	cmp	r2, r3
   e0ce0:	d01f      	beq.n	e0d22 <mbedtls_mpi_write_binary+0x68>
        p[bytes_to_copy - i - 1] = GET_BYTE( X, i );
   e0ce2:	68a7      	ldr	r7, [r4, #8]
   e0ce4:	f023 0603 	bic.w	r6, r3, #3
   e0ce8:	f003 0003 	and.w	r0, r3, #3
   e0cec:	00c5      	lsls	r5, r0, #3
   e0cee:	59b8      	ldr	r0, [r7, r6]
   e0cf0:	40e8      	lsrs	r0, r5
   e0cf2:	f801 0d01 	strb.w	r0, [r1, #-1]!
    for( i = 0; i < bytes_to_copy; i++ )
   e0cf6:	3301      	adds	r3, #1
   e0cf8:	e7f1      	b.n	e0cde <mbedtls_mpi_write_binary+0x24>
   e0cfa:	4613      	mov	r3, r2
        for( i = bytes_to_copy; i < stored_bytes; i++ )
   e0cfc:	42ab      	cmp	r3, r5
   e0cfe:	d0ec      	beq.n	e0cda <mbedtls_mpi_write_binary+0x20>
            if( GET_BYTE( X, i ) != 0 )
   e0d00:	68a7      	ldr	r7, [r4, #8]
   e0d02:	f023 0c03 	bic.w	ip, r3, #3
   e0d06:	f003 0103 	and.w	r1, r3, #3
   e0d0a:	00ce      	lsls	r6, r1, #3
   e0d0c:	f857 100c 	ldr.w	r1, [r7, ip]
   e0d10:	40f1      	lsrs	r1, r6
   e0d12:	f011 0fff 	tst.w	r1, #255	; 0xff
   e0d16:	d101      	bne.n	e0d1c <mbedtls_mpi_write_binary+0x62>
        for( i = bytes_to_copy; i < stored_bytes; i++ )
   e0d18:	3301      	adds	r3, #1
   e0d1a:	e7ef      	b.n	e0cfc <mbedtls_mpi_write_binary+0x42>
                return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
   e0d1c:	f06f 0007 	mvn.w	r0, #7
}
   e0d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return( 0 );
   e0d22:	2000      	movs	r0, #0
   e0d24:	e7fc      	b.n	e0d20 <mbedtls_mpi_write_binary+0x66>

000e0d26 <mbedtls_mpi_shift_l>:
{
   e0d26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e0d28:	4605      	mov	r5, r0
   e0d2a:	460e      	mov	r6, r1
    v0 = count / (biL    );
   e0d2c:	094c      	lsrs	r4, r1, #5
    t1 = count & (biL - 1);
   e0d2e:	f001 071f 	and.w	r7, r1, #31
    i = mbedtls_mpi_bitlen( X ) + count;
   e0d32:	f7ff ff69 	bl	e0c08 <mbedtls_mpi_bitlen>
    if( X->n * biL < i )
   e0d36:	686b      	ldr	r3, [r5, #4]
    i = mbedtls_mpi_bitlen( X ) + count;
   e0d38:	4430      	add	r0, r6
    if( X->n * biL < i )
   e0d3a:	ebb0 1f43 	cmp.w	r0, r3, lsl #5
   e0d3e:	d804      	bhi.n	e0d4a <mbedtls_mpi_shift_l+0x24>
    if( v0 > 0 )
   e0d40:	2e1f      	cmp	r6, #31
   e0d42:	d80e      	bhi.n	e0d62 <mbedtls_mpi_shift_l+0x3c>
    if( t1 > 0 )
   e0d44:	bb5f      	cbnz	r7, e0d9e <mbedtls_mpi_shift_l+0x78>
    ret = 0;
   e0d46:	2000      	movs	r0, #0
   e0d48:	e00a      	b.n	e0d60 <mbedtls_mpi_shift_l+0x3a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );
   e0d4a:	f010 011f 	ands.w	r1, r0, #31
   e0d4e:	bf18      	it	ne
   e0d50:	2101      	movne	r1, #1
   e0d52:	eb01 1150 	add.w	r1, r1, r0, lsr #5
   e0d56:	4628      	mov	r0, r5
   e0d58:	f7ff fe4b 	bl	e09f2 <mbedtls_mpi_grow>
   e0d5c:	2800      	cmp	r0, #0
   e0d5e:	d0ef      	beq.n	e0d40 <mbedtls_mpi_shift_l+0x1a>
}
   e0d60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for( i = X->n; i > v0; i-- )
   e0d62:	686b      	ldr	r3, [r5, #4]
   e0d64:	f06f 0003 	mvn.w	r0, #3
   e0d68:	009a      	lsls	r2, r3, #2
   e0d6a:	4360      	muls	r0, r4
   e0d6c:	4619      	mov	r1, r3
   e0d6e:	42a1      	cmp	r1, r4
   e0d70:	f1a2 0204 	sub.w	r2, r2, #4
   e0d74:	d80a      	bhi.n	e0d8c <mbedtls_mpi_shift_l+0x66>
   e0d76:	42a3      	cmp	r3, r4
   e0d78:	bf28      	it	cs
   e0d7a:	4623      	movcs	r3, r4
   e0d7c:	009b      	lsls	r3, r3, #2
            X->p[i - 1] = 0;
   e0d7e:	2100      	movs	r1, #0
        for( ; i > 0; i-- )
   e0d80:	3b04      	subs	r3, #4
   e0d82:	1d1a      	adds	r2, r3, #4
   e0d84:	d0de      	beq.n	e0d44 <mbedtls_mpi_shift_l+0x1e>
            X->p[i - 1] = 0;
   e0d86:	68aa      	ldr	r2, [r5, #8]
   e0d88:	50d1      	str	r1, [r2, r3]
        for( ; i > 0; i-- )
   e0d8a:	e7f9      	b.n	e0d80 <mbedtls_mpi_shift_l+0x5a>
            X->p[i - 1] = X->p[i - v0 - 1];
   e0d8c:	68ae      	ldr	r6, [r5, #8]
   e0d8e:	eb06 0c02 	add.w	ip, r6, r2
        for( i = X->n; i > v0; i-- )
   e0d92:	3901      	subs	r1, #1
            X->p[i - 1] = X->p[i - v0 - 1];
   e0d94:	f85c c000 	ldr.w	ip, [ip, r0]
   e0d98:	f846 c002 	str.w	ip, [r6, r2]
        for( i = X->n; i > v0; i-- )
   e0d9c:	e7e7      	b.n	e0d6e <mbedtls_mpi_shift_l+0x48>
    mbedtls_mpi_uint r0 = 0, r1;
   e0d9e:	2200      	movs	r2, #0
            r1 = X->p[i] >> (biL - t1);
   e0da0:	f1c7 0620 	rsb	r6, r7, #32
        for( i = v0; i < X->n; i++ )
   e0da4:	686b      	ldr	r3, [r5, #4]
   e0da6:	42a3      	cmp	r3, r4
   e0da8:	d9cd      	bls.n	e0d46 <mbedtls_mpi_shift_l+0x20>
            r1 = X->p[i] >> (biL - t1);
   e0daa:	68ab      	ldr	r3, [r5, #8]
   e0dac:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
            X->p[i] <<= t1;
   e0db0:	fa01 f007 	lsl.w	r0, r1, r7
   e0db4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
            X->p[i] |= r0;
   e0db8:	68a8      	ldr	r0, [r5, #8]
   e0dba:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   e0dbe:	4313      	orrs	r3, r2
   e0dc0:	f840 3024 	str.w	r3, [r0, r4, lsl #2]
            r0 = r1;
   e0dc4:	fa21 f206 	lsr.w	r2, r1, r6
        for( i = v0; i < X->n; i++ )
   e0dc8:	3401      	adds	r4, #1
   e0dca:	e7eb      	b.n	e0da4 <mbedtls_mpi_shift_l+0x7e>

000e0dcc <mbedtls_mpi_shift_r>:
{
   e0dcc:	b4f0      	push	{r4, r5, r6, r7}
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
   e0dce:	6843      	ldr	r3, [r0, #4]
    v0 = count /  biL;
   e0dd0:	094c      	lsrs	r4, r1, #5
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
   e0dd2:	42a3      	cmp	r3, r4
   e0dd4:	d303      	bcc.n	e0dde <mbedtls_mpi_shift_r+0x12>
    v1 = count & (biL - 1);
   e0dd6:	f001 021f 	and.w	r2, r1, #31
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
   e0dda:	d104      	bne.n	e0de6 <mbedtls_mpi_shift_r+0x1a>
   e0ddc:	b37a      	cbz	r2, e0e3e <mbedtls_mpi_shift_r+0x72>
}
   e0dde:	bcf0      	pop	{r4, r5, r6, r7}
        return mbedtls_mpi_lset( X, 0 );
   e0de0:	2100      	movs	r1, #0
   e0de2:	f7ff bec9 	b.w	e0b78 <mbedtls_mpi_lset>
    if( v0 > 0 )
   e0de6:	291f      	cmp	r1, #31
   e0de8:	d82b      	bhi.n	e0e42 <mbedtls_mpi_shift_r+0x76>
    if( v1 > 0 )
   e0dea:	b36a      	cbz	r2, e0e48 <mbedtls_mpi_shift_r+0x7c>
        for( i = X->n; i > 0; i-- )
   e0dec:	6843      	ldr	r3, [r0, #4]
    mbedtls_mpi_uint r0 = 0, r1;
   e0dee:	2400      	movs	r4, #0
            r1 = X->p[i - 1] << (biL - v1);
   e0df0:	f1c2 0720 	rsb	r7, r2, #32
        for( i = X->n; i > 0; i-- )
   e0df4:	3b01      	subs	r3, #1
   e0df6:	d327      	bcc.n	e0e48 <mbedtls_mpi_shift_r+0x7c>
            r1 = X->p[i - 1] << (biL - v1);
   e0df8:	6881      	ldr	r1, [r0, #8]
   e0dfa:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
            X->p[i - 1] >>= v1;
   e0dfe:	fa25 f602 	lsr.w	r6, r5, r2
   e0e02:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
            X->p[i - 1] |= r0;
   e0e06:	6886      	ldr	r6, [r0, #8]
   e0e08:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
   e0e0c:	4321      	orrs	r1, r4
   e0e0e:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
            r0 = r1;
   e0e12:	fa05 f407 	lsl.w	r4, r5, r7
        for( i = X->n; i > 0; i-- )
   e0e16:	e7ed      	b.n	e0df4 <mbedtls_mpi_shift_r+0x28>
            X->p[i] = X->p[i + v0];
   e0e18:	6885      	ldr	r5, [r0, #8]
   e0e1a:	586e      	ldr	r6, [r5, r1]
   e0e1c:	f845 6023 	str.w	r6, [r5, r3, lsl #2]
        for( i = 0; i < X->n - v0; i++ )
   e0e20:	3104      	adds	r1, #4
   e0e22:	3301      	adds	r3, #1
   e0e24:	6845      	ldr	r5, [r0, #4]
   e0e26:	1b2d      	subs	r5, r5, r4
   e0e28:	429d      	cmp	r5, r3
   e0e2a:	d8f5      	bhi.n	e0e18 <mbedtls_mpi_shift_r+0x4c>
            X->p[i] = 0;
   e0e2c:	2400      	movs	r4, #0
        for( ; i < X->n; i++ )
   e0e2e:	6841      	ldr	r1, [r0, #4]
   e0e30:	4299      	cmp	r1, r3
   e0e32:	d9da      	bls.n	e0dea <mbedtls_mpi_shift_r+0x1e>
            X->p[i] = 0;
   e0e34:	6881      	ldr	r1, [r0, #8]
   e0e36:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
        for( ; i < X->n; i++ )
   e0e3a:	3301      	adds	r3, #1
   e0e3c:	e7f7      	b.n	e0e2e <mbedtls_mpi_shift_r+0x62>
    if( v0 > 0 )
   e0e3e:	291f      	cmp	r1, #31
   e0e40:	d902      	bls.n	e0e48 <mbedtls_mpi_shift_r+0x7c>
   e0e42:	00a1      	lsls	r1, r4, #2
{
   e0e44:	2300      	movs	r3, #0
   e0e46:	e7ed      	b.n	e0e24 <mbedtls_mpi_shift_r+0x58>
}
   e0e48:	2000      	movs	r0, #0
   e0e4a:	bcf0      	pop	{r4, r5, r6, r7}
   e0e4c:	4770      	bx	lr

000e0e4e <mbedtls_mpi_cmp_abs>:
{
   e0e4e:	b530      	push	{r4, r5, lr}
    for( i = X->n; i > 0; i-- )
   e0e50:	6843      	ldr	r3, [r0, #4]
   e0e52:	b13b      	cbz	r3, e0e64 <mbedtls_mpi_cmp_abs+0x16>
        if( X->p[i - 1] != 0 )
   e0e54:	6882      	ldr	r2, [r0, #8]
   e0e56:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   e0e5a:	f852 2c04 	ldr.w	r2, [r2, #-4]
   e0e5e:	b90a      	cbnz	r2, e0e64 <mbedtls_mpi_cmp_abs+0x16>
    for( i = X->n; i > 0; i-- )
   e0e60:	3b01      	subs	r3, #1
   e0e62:	e7f6      	b.n	e0e52 <mbedtls_mpi_cmp_abs+0x4>
    for( j = Y->n; j > 0; j-- )
   e0e64:	684a      	ldr	r2, [r1, #4]
   e0e66:	b302      	cbz	r2, e0eaa <mbedtls_mpi_cmp_abs+0x5c>
        if( Y->p[j - 1] != 0 )
   e0e68:	688c      	ldr	r4, [r1, #8]
   e0e6a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   e0e6e:	f855 5c04 	ldr.w	r5, [r5, #-4]
   e0e72:	b92d      	cbnz	r5, e0e80 <mbedtls_mpi_cmp_abs+0x32>
    for( j = Y->n; j > 0; j-- )
   e0e74:	3a01      	subs	r2, #1
   e0e76:	e7f6      	b.n	e0e66 <mbedtls_mpi_cmp_abs+0x18>
    return( 0 );
   e0e78:	2000      	movs	r0, #0
   e0e7a:	e015      	b.n	e0ea8 <mbedtls_mpi_cmp_abs+0x5a>
    if( i > j ) return(  1 );
   e0e7c:	2001      	movs	r0, #1
   e0e7e:	e013      	b.n	e0ea8 <mbedtls_mpi_cmp_abs+0x5a>
    if( i == 0 && j == 0 )
   e0e80:	b10b      	cbz	r3, e0e86 <mbedtls_mpi_cmp_abs+0x38>
    if( i > j ) return(  1 );
   e0e82:	4293      	cmp	r3, r2
   e0e84:	d8fa      	bhi.n	e0e7c <mbedtls_mpi_cmp_abs+0x2e>
    if( j > i ) return( -1 );
   e0e86:	4293      	cmp	r3, r2
   e0e88:	d30c      	bcc.n	e0ea4 <mbedtls_mpi_cmp_abs+0x56>
   e0e8a:	3b01      	subs	r3, #1
    for( ; i > 0; i-- )
   e0e8c:	1c5a      	adds	r2, r3, #1
   e0e8e:	d0f3      	beq.n	e0e78 <mbedtls_mpi_cmp_abs+0x2a>
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
   e0e90:	6882      	ldr	r2, [r0, #8]
   e0e92:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   e0e96:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   e0e9a:	4291      	cmp	r1, r2
   e0e9c:	d8ee      	bhi.n	e0e7c <mbedtls_mpi_cmp_abs+0x2e>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
   e0e9e:	f103 33ff 	add.w	r3, r3, #4294967295
   e0ea2:	d2f3      	bcs.n	e0e8c <mbedtls_mpi_cmp_abs+0x3e>
    if( j > i ) return( -1 );
   e0ea4:	f04f 30ff 	mov.w	r0, #4294967295
}
   e0ea8:	bd30      	pop	{r4, r5, pc}
    if( i == 0 && j == 0 )
   e0eaa:	1e18      	subs	r0, r3, #0
   e0eac:	bf18      	it	ne
   e0eae:	2001      	movne	r0, #1
   e0eb0:	e7fa      	b.n	e0ea8 <mbedtls_mpi_cmp_abs+0x5a>

000e0eb2 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>:
/*
 * Montgomery multiplication: A = A * B * R^-1 mod N  (HAC 14.36)
 */
static int mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
                         const mbedtls_mpi *T )
{
   e0eb2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e0eb6:	4614      	mov	r4, r2
   e0eb8:	9301      	str	r3, [sp, #4]
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    if( T->n < N->n + 1 || T->p == NULL )
   e0eba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   e0ebc:	685a      	ldr	r2, [r3, #4]
   e0ebe:	6863      	ldr	r3, [r4, #4]
   e0ec0:	3301      	adds	r3, #1
   e0ec2:	429a      	cmp	r2, r3
{
   e0ec4:	4606      	mov	r6, r0
   e0ec6:	468a      	mov	sl, r1
    if( T->n < N->n + 1 || T->p == NULL )
   e0ec8:	d357      	bcc.n	e0f7a <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0xc8>
   e0eca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   e0ecc:	6898      	ldr	r0, [r3, #8]
   e0ece:	2800      	cmp	r0, #0
   e0ed0:	d053      	beq.n	e0f7a <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0xc8>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    memset( T->p, 0, T->n * ciL );
   e0ed2:	0092      	lsls	r2, r2, #2
   e0ed4:	2100      	movs	r1, #0
   e0ed6:	f007 fd21 	bl	e891c <memset>

    d = T->p;
   e0eda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    n = N->n;
   e0edc:	6865      	ldr	r5, [r4, #4]
    d = T->p;
   e0ede:	689b      	ldr	r3, [r3, #8]
   e0ee0:	9300      	str	r3, [sp, #0]
    m = ( B->n < n ) ? B->n : n;
   e0ee2:	f8da 3004 	ldr.w	r3, [sl, #4]
    d = T->p;
   e0ee6:	f8dd 9000 	ldr.w	r9, [sp]
   e0eea:	42ab      	cmp	r3, r5
   e0eec:	bf28      	it	cs
   e0eee:	462b      	movcs	r3, r5
        u1 = ( d[0] + u0 * B->p[0] ) * mm;

        mpi_mul_hlp( m, B->p, d, u0 );
        mpi_mul_hlp( n, N->p, d, u1 );

        *d++ = u0; d[n + 1] = 0;
   e0ef0:	1c6f      	adds	r7, r5, #1
   e0ef2:	ee07 3a90 	vmov	s15, r3
   e0ef6:	00bf      	lsls	r7, r7, #2
    for( i = 0; i < n; i++ )
   e0ef8:	f04f 0800 	mov.w	r8, #0
   e0efc:	4545      	cmp	r5, r8
   e0efe:	68b0      	ldr	r0, [r6, #8]
   e0f00:	d021      	beq.n	e0f46 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0x94>
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
   e0f02:	f8da 1008 	ldr.w	r1, [sl, #8]
        u0 = A->p[i];
   e0f06:	f850 b028 	ldr.w	fp, [r0, r8, lsl #2]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
   e0f0a:	680b      	ldr	r3, [r1, #0]
   e0f0c:	f8d9 0000 	ldr.w	r0, [r9]
   e0f10:	9a01      	ldr	r2, [sp, #4]
   e0f12:	fb03 030b 	mla	r3, r3, fp, r0
   e0f16:	4353      	muls	r3, r2
   e0f18:	ee07 3a10 	vmov	s14, r3
        mpi_mul_hlp( m, B->p, d, u0 );
   e0f1c:	ee17 0a90 	vmov	r0, s15
   e0f20:	464a      	mov	r2, r9
   e0f22:	465b      	mov	r3, fp
   e0f24:	f7ff fc69 	bl	e07fa <_ZL11mpi_mul_hlpjPmS_m>
        mpi_mul_hlp( n, N->p, d, u1 );
   e0f28:	464a      	mov	r2, r9
   e0f2a:	ee17 3a10 	vmov	r3, s14
   e0f2e:	68a1      	ldr	r1, [r4, #8]
   e0f30:	4628      	mov	r0, r5
   e0f32:	f7ff fc62 	bl	e07fa <_ZL11mpi_mul_hlpjPmS_m>
        *d++ = u0; d[n + 1] = 0;
   e0f36:	f849 bb04 	str.w	fp, [r9], #4
   e0f3a:	2300      	movs	r3, #0
   e0f3c:	f849 3007 	str.w	r3, [r9, r7]
    for( i = 0; i < n; i++ )
   e0f40:	f108 0801 	add.w	r8, r8, #1
   e0f44:	e7da      	b.n	e0efc <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0x4a>
    }

    memcpy( A->p, d, ( n + 1 ) * ciL );
   e0f46:	9b00      	ldr	r3, [sp, #0]
   e0f48:	1f39      	subs	r1, r7, #4
   e0f4a:	440b      	add	r3, r1
   e0f4c:	463a      	mov	r2, r7
   e0f4e:	4619      	mov	r1, r3
   e0f50:	f007 fcbc 	bl	e88cc <memcpy>

    if( mbedtls_mpi_cmp_abs( A, N ) >= 0 )
   e0f54:	4621      	mov	r1, r4
   e0f56:	4630      	mov	r0, r6
   e0f58:	f7ff ff79 	bl	e0e4e <mbedtls_mpi_cmp_abs>
   e0f5c:	2800      	cmp	r0, #0
        mpi_sub_hlp( n, N->p, A->p );
    else
        /* prevent timing attacks */
        mpi_sub_hlp( n, A->p, T->p );
   e0f5e:	bfb3      	iteet	lt
   e0f60:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
        mpi_sub_hlp( n, N->p, A->p );
   e0f62:	68b2      	ldrge	r2, [r6, #8]
   e0f64:	68a1      	ldrge	r1, [r4, #8]
        mpi_sub_hlp( n, A->p, T->p );
   e0f66:	689a      	ldrlt	r2, [r3, #8]
   e0f68:	bfb8      	it	lt
   e0f6a:	68b1      	ldrlt	r1, [r6, #8]
   e0f6c:	4628      	mov	r0, r5
   e0f6e:	f7ff fc1b 	bl	e07a8 <_ZL11mpi_sub_hlpjPmS_>

    return( 0 );
   e0f72:	2000      	movs	r0, #0
}
   e0f74:	b003      	add	sp, #12
   e0f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
   e0f7a:	f06f 0003 	mvn.w	r0, #3
   e0f7e:	e7f9      	b.n	e0f74 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0xc2>

000e0f80 <mbedtls_mpi_cmp_mpi>:
{
   e0f80:	b530      	push	{r4, r5, lr}
    for( i = X->n; i > 0; i-- )
   e0f82:	6843      	ldr	r3, [r0, #4]
{
   e0f84:	4602      	mov	r2, r0
    for( i = X->n; i > 0; i-- )
   e0f86:	b13b      	cbz	r3, e0f98 <mbedtls_mpi_cmp_mpi+0x18>
        if( X->p[i - 1] != 0 )
   e0f88:	6890      	ldr	r0, [r2, #8]
   e0f8a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   e0f8e:	f850 0c04 	ldr.w	r0, [r0, #-4]
   e0f92:	b908      	cbnz	r0, e0f98 <mbedtls_mpi_cmp_mpi+0x18>
    for( i = X->n; i > 0; i-- )
   e0f94:	3b01      	subs	r3, #1
   e0f96:	e7f6      	b.n	e0f86 <mbedtls_mpi_cmp_mpi+0x6>
    for( j = Y->n; j > 0; j-- )
   e0f98:	6848      	ldr	r0, [r1, #4]
   e0f9a:	b370      	cbz	r0, e0ffa <mbedtls_mpi_cmp_mpi+0x7a>
        if( Y->p[j - 1] != 0 )
   e0f9c:	688c      	ldr	r4, [r1, #8]
   e0f9e:	eb04 0580 	add.w	r5, r4, r0, lsl #2
   e0fa2:	f855 5c04 	ldr.w	r5, [r5, #-4]
   e0fa6:	bb15      	cbnz	r5, e0fee <mbedtls_mpi_cmp_mpi+0x6e>
    for( j = Y->n; j > 0; j-- )
   e0fa8:	3801      	subs	r0, #1
   e0faa:	e7f6      	b.n	e0f9a <mbedtls_mpi_cmp_mpi+0x1a>
    if( j > i ) return( -Y->s );
   e0fac:	4283      	cmp	r3, r0
   e0fae:	6809      	ldr	r1, [r1, #0]
   e0fb0:	d201      	bcs.n	e0fb6 <mbedtls_mpi_cmp_mpi+0x36>
   e0fb2:	4248      	negs	r0, r1
   e0fb4:	e020      	b.n	e0ff8 <mbedtls_mpi_cmp_mpi+0x78>
    if( X->s > 0 && Y->s < 0 ) return(  1 );
   e0fb6:	6810      	ldr	r0, [r2, #0]
   e0fb8:	2800      	cmp	r0, #0
   e0fba:	dd03      	ble.n	e0fc4 <mbedtls_mpi_cmp_mpi+0x44>
   e0fbc:	2900      	cmp	r1, #0
   e0fbe:	da04      	bge.n	e0fca <mbedtls_mpi_cmp_mpi+0x4a>
   e0fc0:	2001      	movs	r0, #1
   e0fc2:	e019      	b.n	e0ff8 <mbedtls_mpi_cmp_mpi+0x78>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
   e0fc4:	2900      	cmp	r1, #0
   e0fc6:	dd00      	ble.n	e0fca <mbedtls_mpi_cmp_mpi+0x4a>
   e0fc8:	b970      	cbnz	r0, e0fe8 <mbedtls_mpi_cmp_mpi+0x68>
   e0fca:	3b01      	subs	r3, #1
    for( ; i > 0; i-- )
   e0fcc:	1c59      	adds	r1, r3, #1
   e0fce:	d016      	beq.n	e0ffe <mbedtls_mpi_cmp_mpi+0x7e>
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
   e0fd0:	6891      	ldr	r1, [r2, #8]
   e0fd2:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
   e0fd6:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
   e0fda:	428d      	cmp	r5, r1
   e0fdc:	d80c      	bhi.n	e0ff8 <mbedtls_mpi_cmp_mpi+0x78>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
   e0fde:	f103 33ff 	add.w	r3, r3, #4294967295
   e0fe2:	d2f3      	bcs.n	e0fcc <mbedtls_mpi_cmp_mpi+0x4c>
   e0fe4:	4240      	negs	r0, r0
   e0fe6:	e007      	b.n	e0ff8 <mbedtls_mpi_cmp_mpi+0x78>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
   e0fe8:	f04f 30ff 	mov.w	r0, #4294967295
   e0fec:	e004      	b.n	e0ff8 <mbedtls_mpi_cmp_mpi+0x78>
    if( i == 0 && j == 0 )
   e0fee:	2b00      	cmp	r3, #0
   e0ff0:	d0dc      	beq.n	e0fac <mbedtls_mpi_cmp_mpi+0x2c>
    if( i > j ) return(  X->s );
   e0ff2:	4283      	cmp	r3, r0
   e0ff4:	d9da      	bls.n	e0fac <mbedtls_mpi_cmp_mpi+0x2c>
   e0ff6:	6810      	ldr	r0, [r2, #0]
}
   e0ff8:	bd30      	pop	{r4, r5, pc}
    if( i == 0 && j == 0 )
   e0ffa:	2b00      	cmp	r3, #0
   e0ffc:	d1fb      	bne.n	e0ff6 <mbedtls_mpi_cmp_mpi+0x76>
    return( 0 );
   e0ffe:	2000      	movs	r0, #0
   e1000:	e7fa      	b.n	e0ff8 <mbedtls_mpi_cmp_mpi+0x78>

000e1002 <mbedtls_mpi_cmp_int>:
{
   e1002:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    *p  = ( z < 0 ) ? -z : z;
   e1004:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
   e1008:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
    Y.s = ( z < 0 ) ? -1 : 1;
   e100c:	2900      	cmp	r1, #0
    *p  = ( z < 0 ) ? -z : z;
   e100e:	9300      	str	r3, [sp, #0]
    Y.s = ( z < 0 ) ? -1 : 1;
   e1010:	bfb4      	ite	lt
   e1012:	f04f 33ff 	movlt.w	r3, #4294967295
   e1016:	2301      	movge	r3, #1
   e1018:	9301      	str	r3, [sp, #4]
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
   e101a:	a901      	add	r1, sp, #4
    Y.n = 1;
   e101c:	2301      	movs	r3, #1
   e101e:	9302      	str	r3, [sp, #8]
    Y.p = p;
   e1020:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
   e1024:	f7ff ffac 	bl	e0f80 <mbedtls_mpi_cmp_mpi>
}
   e1028:	b005      	add	sp, #20
   e102a:	f85d fb04 	ldr.w	pc, [sp], #4

000e102e <mbedtls_mpi_add_abs>:
    if( X == B )
   e102e:	4290      	cmp	r0, r2
{
   e1030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e1034:	4607      	mov	r7, r0
   e1036:	460e      	mov	r6, r1
   e1038:	4615      	mov	r5, r2
    if( X == B )
   e103a:	d002      	beq.n	e1042 <mbedtls_mpi_add_abs+0x14>
    if( X != A )
   e103c:	4288      	cmp	r0, r1
   e103e:	d10c      	bne.n	e105a <mbedtls_mpi_add_abs+0x2c>
{
   e1040:	462e      	mov	r6, r5
    X->s = 1;
   e1042:	2301      	movs	r3, #1
   e1044:	603b      	str	r3, [r7, #0]
    for( j = B->n; j > 0; j-- )
   e1046:	6875      	ldr	r5, [r6, #4]
   e1048:	b17d      	cbz	r5, e106a <mbedtls_mpi_add_abs+0x3c>
        if( B->p[j - 1] != 0 )
   e104a:	68b3      	ldr	r3, [r6, #8]
   e104c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   e1050:	f853 3c04 	ldr.w	r3, [r3, #-4]
   e1054:	b94b      	cbnz	r3, e106a <mbedtls_mpi_add_abs+0x3c>
    for( j = B->n; j > 0; j-- )
   e1056:	3d01      	subs	r5, #1
   e1058:	e7f6      	b.n	e1048 <mbedtls_mpi_add_abs+0x1a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
   e105a:	f7ff fd2f 	bl	e0abc <mbedtls_mpi_copy>
   e105e:	4604      	mov	r4, r0
   e1060:	2800      	cmp	r0, #0
   e1062:	d0ed      	beq.n	e1040 <mbedtls_mpi_add_abs+0x12>
}
   e1064:	4620      	mov	r0, r4
   e1066:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
   e106a:	4629      	mov	r1, r5
   e106c:	4638      	mov	r0, r7
   e106e:	f7ff fcc0 	bl	e09f2 <mbedtls_mpi_grow>
   e1072:	4604      	mov	r4, r0
   e1074:	2800      	cmp	r0, #0
   e1076:	d1f5      	bne.n	e1064 <mbedtls_mpi_add_abs+0x36>
    o = B->p; p = X->p; c = 0;
   e1078:	68bb      	ldr	r3, [r7, #8]
   e107a:	68b1      	ldr	r1, [r6, #8]
   e107c:	4606      	mov	r6, r0
    for( i = 0; i < j; i++, o++, p++ )
   e107e:	4285      	cmp	r5, r0
   e1080:	d119      	bne.n	e10b6 <mbedtls_mpi_add_abs+0x88>
   e1082:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    while( c != 0 )
   e1086:	2e00      	cmp	r6, #0
   e1088:	d0ec      	beq.n	e1064 <mbedtls_mpi_add_abs+0x36>
        if( i >= X->n )
   e108a:	687a      	ldr	r2, [r7, #4]
   e108c:	42aa      	cmp	r2, r5
   e108e:	f105 0801 	add.w	r8, r5, #1
   e1092:	d807      	bhi.n	e10a4 <mbedtls_mpi_add_abs+0x76>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
   e1094:	4641      	mov	r1, r8
   e1096:	4638      	mov	r0, r7
   e1098:	f7ff fcab 	bl	e09f2 <mbedtls_mpi_grow>
   e109c:	b9f0      	cbnz	r0, e10dc <mbedtls_mpi_add_abs+0xae>
            p = X->p + i;
   e109e:	68bb      	ldr	r3, [r7, #8]
   e10a0:	eb03 0385 	add.w	r3, r3, r5, lsl #2
        *p += c; c = ( *p < c ); i++; p++;
   e10a4:	681a      	ldr	r2, [r3, #0]
   e10a6:	1996      	adds	r6, r2, r6
   e10a8:	f843 6b04 	str.w	r6, [r3], #4
    while( c != 0 )
   e10ac:	4645      	mov	r5, r8
        *p += c; c = ( *p < c ); i++; p++;
   e10ae:	bf2c      	ite	cs
   e10b0:	2601      	movcs	r6, #1
   e10b2:	2600      	movcc	r6, #0
    while( c != 0 )
   e10b4:	e7e7      	b.n	e1086 <mbedtls_mpi_add_abs+0x58>
        *p +=  c; c  = ( *p <  c );
   e10b6:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
   e10ba:	eb12 0c06 	adds.w	ip, r2, r6
   e10be:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
   e10c2:	bf2c      	ite	cs
   e10c4:	2601      	movcs	r6, #1
   e10c6:	2600      	movcc	r6, #0
        *p += tmp; c += ( *p < tmp );
   e10c8:	eb1c 0202 	adds.w	r2, ip, r2
   e10cc:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
   e10d0:	bf2c      	ite	cs
   e10d2:	2201      	movcs	r2, #1
   e10d4:	2200      	movcc	r2, #0
   e10d6:	4416      	add	r6, r2
    for( i = 0; i < j; i++, o++, p++ )
   e10d8:	3001      	adds	r0, #1
   e10da:	e7d0      	b.n	e107e <mbedtls_mpi_add_abs+0x50>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
   e10dc:	4604      	mov	r4, r0
    return( ret );
   e10de:	e7c1      	b.n	e1064 <mbedtls_mpi_add_abs+0x36>

000e10e0 <mbedtls_mpi_sub_abs>:
{
   e10e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   e10e2:	460f      	mov	r7, r1
   e10e4:	b085      	sub	sp, #20
   e10e6:	4606      	mov	r6, r0
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
   e10e8:	4611      	mov	r1, r2
   e10ea:	4638      	mov	r0, r7
{
   e10ec:	4615      	mov	r5, r2
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
   e10ee:	f7ff feae 	bl	e0e4e <mbedtls_mpi_cmp_abs>
   e10f2:	2800      	cmp	r0, #0
   e10f4:	db2d      	blt.n	e1152 <mbedtls_mpi_sub_abs+0x72>
    X->n = 0;
   e10f6:	2300      	movs	r3, #0
   e10f8:	2201      	movs	r2, #1
    if( X == B )
   e10fa:	42b5      	cmp	r5, r6
    X->n = 0;
   e10fc:	e9cd 2301 	strd	r2, r3, [sp, #4]
    X->p = NULL;
   e1100:	9303      	str	r3, [sp, #12]
    if( X == B )
   e1102:	d106      	bne.n	e1112 <mbedtls_mpi_sub_abs+0x32>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
   e1104:	4629      	mov	r1, r5
   e1106:	a801      	add	r0, sp, #4
   e1108:	f7ff fcd8 	bl	e0abc <mbedtls_mpi_copy>
   e110c:	4604      	mov	r4, r0
   e110e:	b9a8      	cbnz	r0, e113c <mbedtls_mpi_sub_abs+0x5c>
        B = &TB;
   e1110:	ad01      	add	r5, sp, #4
    if( X != A )
   e1112:	42b7      	cmp	r7, r6
   e1114:	d10b      	bne.n	e112e <mbedtls_mpi_sub_abs+0x4e>
    X->s = 1;
   e1116:	2301      	movs	r3, #1
   e1118:	6033      	str	r3, [r6, #0]
    for( n = B->n; n > 0; n-- )
   e111a:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
   e111e:	b198      	cbz	r0, e1148 <mbedtls_mpi_sub_abs+0x68>
        if( B->p[n - 1] != 0 )
   e1120:	eb01 0380 	add.w	r3, r1, r0, lsl #2
   e1124:	f853 3c04 	ldr.w	r3, [r3, #-4]
   e1128:	b973      	cbnz	r3, e1148 <mbedtls_mpi_sub_abs+0x68>
    for( n = B->n; n > 0; n-- )
   e112a:	3801      	subs	r0, #1
   e112c:	e7f7      	b.n	e111e <mbedtls_mpi_sub_abs+0x3e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
   e112e:	4639      	mov	r1, r7
   e1130:	4630      	mov	r0, r6
   e1132:	f7ff fcc3 	bl	e0abc <mbedtls_mpi_copy>
   e1136:	4604      	mov	r4, r0
   e1138:	2800      	cmp	r0, #0
   e113a:	d0ec      	beq.n	e1116 <mbedtls_mpi_sub_abs+0x36>
    mbedtls_mpi_free( &TB );
   e113c:	a801      	add	r0, sp, #4
   e113e:	f7ff fc46 	bl	e09ce <mbedtls_mpi_free>
}
   e1142:	4620      	mov	r0, r4
   e1144:	b005      	add	sp, #20
   e1146:	bdf0      	pop	{r4, r5, r6, r7, pc}
    mpi_sub_hlp( n, B->p, X->p );
   e1148:	68b2      	ldr	r2, [r6, #8]
   e114a:	f7ff fb2d 	bl	e07a8 <_ZL11mpi_sub_hlpjPmS_>
    ret = 0;
   e114e:	2400      	movs	r4, #0
   e1150:	e7f4      	b.n	e113c <mbedtls_mpi_sub_abs+0x5c>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
   e1152:	f06f 0409 	mvn.w	r4, #9
   e1156:	e7f4      	b.n	e1142 <mbedtls_mpi_sub_abs+0x62>

000e1158 <mbedtls_mpi_add_mpi>:
{
   e1158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    s = A->s;
   e115a:	680d      	ldr	r5, [r1, #0]
    if( A->s * B->s < 0 )
   e115c:	6813      	ldr	r3, [r2, #0]
   e115e:	436b      	muls	r3, r5
{
   e1160:	4604      	mov	r4, r0
   e1162:	460f      	mov	r7, r1
   e1164:	4616      	mov	r6, r2
    if( A->s * B->s < 0 )
   e1166:	d516      	bpl.n	e1196 <mbedtls_mpi_add_mpi+0x3e>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
   e1168:	4611      	mov	r1, r2
   e116a:	4638      	mov	r0, r7
   e116c:	f7ff fe6f 	bl	e0e4e <mbedtls_mpi_cmp_abs>
   e1170:	2800      	cmp	r0, #0
   e1172:	db06      	blt.n	e1182 <mbedtls_mpi_add_mpi+0x2a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
   e1174:	4632      	mov	r2, r6
   e1176:	4639      	mov	r1, r7
   e1178:	4620      	mov	r0, r4
   e117a:	f7ff ffb1 	bl	e10e0 <mbedtls_mpi_sub_abs>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
   e117e:	b140      	cbz	r0, e1192 <mbedtls_mpi_add_mpi+0x3a>
}
   e1180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
   e1182:	463a      	mov	r2, r7
   e1184:	4631      	mov	r1, r6
   e1186:	4620      	mov	r0, r4
   e1188:	f7ff ffaa 	bl	e10e0 <mbedtls_mpi_sub_abs>
   e118c:	2800      	cmp	r0, #0
   e118e:	d1f7      	bne.n	e1180 <mbedtls_mpi_add_mpi+0x28>
            X->s = -s;
   e1190:	426d      	negs	r5, r5
        X->s = s;
   e1192:	6025      	str	r5, [r4, #0]
    return( ret );
   e1194:	e7f4      	b.n	e1180 <mbedtls_mpi_add_mpi+0x28>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
   e1196:	f7ff ff4a 	bl	e102e <mbedtls_mpi_add_abs>
   e119a:	e7f0      	b.n	e117e <mbedtls_mpi_add_mpi+0x26>

000e119c <mbedtls_mpi_sub_mpi>:
{
   e119c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    s = A->s;
   e119e:	680d      	ldr	r5, [r1, #0]
    if( A->s * B->s > 0 )
   e11a0:	6813      	ldr	r3, [r2, #0]
   e11a2:	436b      	muls	r3, r5
   e11a4:	2b00      	cmp	r3, #0
{
   e11a6:	4604      	mov	r4, r0
   e11a8:	460f      	mov	r7, r1
   e11aa:	4616      	mov	r6, r2
    if( A->s * B->s > 0 )
   e11ac:	dd16      	ble.n	e11dc <mbedtls_mpi_sub_mpi+0x40>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
   e11ae:	4611      	mov	r1, r2
   e11b0:	4638      	mov	r0, r7
   e11b2:	f7ff fe4c 	bl	e0e4e <mbedtls_mpi_cmp_abs>
   e11b6:	2800      	cmp	r0, #0
   e11b8:	db06      	blt.n	e11c8 <mbedtls_mpi_sub_mpi+0x2c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
   e11ba:	4632      	mov	r2, r6
   e11bc:	4639      	mov	r1, r7
   e11be:	4620      	mov	r0, r4
   e11c0:	f7ff ff8e 	bl	e10e0 <mbedtls_mpi_sub_abs>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
   e11c4:	b140      	cbz	r0, e11d8 <mbedtls_mpi_sub_mpi+0x3c>
}
   e11c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
   e11c8:	463a      	mov	r2, r7
   e11ca:	4631      	mov	r1, r6
   e11cc:	4620      	mov	r0, r4
   e11ce:	f7ff ff87 	bl	e10e0 <mbedtls_mpi_sub_abs>
   e11d2:	2800      	cmp	r0, #0
   e11d4:	d1f7      	bne.n	e11c6 <mbedtls_mpi_sub_mpi+0x2a>
            X->s = -s;
   e11d6:	426d      	negs	r5, r5
        X->s = s;
   e11d8:	6025      	str	r5, [r4, #0]
    return( ret );
   e11da:	e7f4      	b.n	e11c6 <mbedtls_mpi_sub_mpi+0x2a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
   e11dc:	f7ff ff27 	bl	e102e <mbedtls_mpi_add_abs>
   e11e0:	e7f0      	b.n	e11c4 <mbedtls_mpi_sub_mpi+0x28>

000e11e2 <mbedtls_mpi_add_int>:
{
   e11e2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    p[0] = ( b < 0 ) ? -b : b;
   e11e4:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
   e11e8:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    _B.s = ( b < 0 ) ? -1 : 1;
   e11ec:	2a00      	cmp	r2, #0
    p[0] = ( b < 0 ) ? -b : b;
   e11ee:	9300      	str	r3, [sp, #0]
    _B.s = ( b < 0 ) ? -1 : 1;
   e11f0:	bfb4      	ite	lt
   e11f2:	f04f 33ff 	movlt.w	r3, #4294967295
   e11f6:	2301      	movge	r3, #1
   e11f8:	9301      	str	r3, [sp, #4]
    return( mbedtls_mpi_add_mpi( X, A, &_B ) );
   e11fa:	aa01      	add	r2, sp, #4
    _B.n = 1;
   e11fc:	2301      	movs	r3, #1
   e11fe:	9302      	str	r3, [sp, #8]
    _B.p = p;
   e1200:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_add_mpi( X, A, &_B ) );
   e1204:	f7ff ffa8 	bl	e1158 <mbedtls_mpi_add_mpi>
}
   e1208:	b005      	add	sp, #20
   e120a:	f85d fb04 	ldr.w	pc, [sp], #4

000e120e <mbedtls_mpi_sub_int>:
{
   e120e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    p[0] = ( b < 0 ) ? -b : b;
   e1210:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
   e1214:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    _B.s = ( b < 0 ) ? -1 : 1;
   e1218:	2a00      	cmp	r2, #0
    p[0] = ( b < 0 ) ? -b : b;
   e121a:	9300      	str	r3, [sp, #0]
    _B.s = ( b < 0 ) ? -1 : 1;
   e121c:	bfb4      	ite	lt
   e121e:	f04f 33ff 	movlt.w	r3, #4294967295
   e1222:	2301      	movge	r3, #1
   e1224:	9301      	str	r3, [sp, #4]
    return( mbedtls_mpi_sub_mpi( X, A, &_B ) );
   e1226:	aa01      	add	r2, sp, #4
    _B.n = 1;
   e1228:	2301      	movs	r3, #1
   e122a:	9302      	str	r3, [sp, #8]
    _B.p = p;
   e122c:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_sub_mpi( X, A, &_B ) );
   e1230:	f7ff ffb4 	bl	e119c <mbedtls_mpi_sub_mpi>
}
   e1234:	b005      	add	sp, #20
   e1236:	f85d fb04 	ldr.w	pc, [sp], #4

000e123a <mbedtls_mpi_mul_mpi>:
{
   e123a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    X->n = 0;
   e123e:	2300      	movs	r3, #0
{
   e1240:	b087      	sub	sp, #28
   e1242:	4615      	mov	r5, r2
    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
   e1244:	4288      	cmp	r0, r1
    X->n = 0;
   e1246:	f04f 0201 	mov.w	r2, #1
   e124a:	e9cd 2300 	strd	r2, r3, [sp]
    X->s = 1;
   e124e:	e9cd 3202 	strd	r3, r2, [sp, #8]
    X->p = NULL;
   e1252:	e9cd 3304 	strd	r3, r3, [sp, #16]
{
   e1256:	4680      	mov	r8, r0
   e1258:	460e      	mov	r6, r1
    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
   e125a:	d106      	bne.n	e126a <mbedtls_mpi_mul_mpi+0x30>
   e125c:	4668      	mov	r0, sp
   e125e:	f7ff fc2d 	bl	e0abc <mbedtls_mpi_copy>
   e1262:	4604      	mov	r4, r0
   e1264:	2800      	cmp	r0, #0
   e1266:	d142      	bne.n	e12ee <mbedtls_mpi_mul_mpi+0xb4>
   e1268:	466e      	mov	r6, sp
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }
   e126a:	45a8      	cmp	r8, r5
   e126c:	d107      	bne.n	e127e <mbedtls_mpi_mul_mpi+0x44>
   e126e:	4641      	mov	r1, r8
   e1270:	a803      	add	r0, sp, #12
   e1272:	f7ff fc23 	bl	e0abc <mbedtls_mpi_copy>
   e1276:	4604      	mov	r4, r0
   e1278:	2800      	cmp	r0, #0
   e127a:	d138      	bne.n	e12ee <mbedtls_mpi_mul_mpi+0xb4>
   e127c:	ad03      	add	r5, sp, #12
    for( i = A->n; i > 0; i-- )
   e127e:	f8d6 9004 	ldr.w	r9, [r6, #4]
   e1282:	f1b9 0f00 	cmp.w	r9, #0
   e1286:	d008      	beq.n	e129a <mbedtls_mpi_mul_mpi+0x60>
        if( A->p[i - 1] != 0 )
   e1288:	68b3      	ldr	r3, [r6, #8]
   e128a:	eb03 0389 	add.w	r3, r3, r9, lsl #2
   e128e:	f853 3c04 	ldr.w	r3, [r3, #-4]
   e1292:	b913      	cbnz	r3, e129a <mbedtls_mpi_mul_mpi+0x60>
    for( i = A->n; i > 0; i-- )
   e1294:	f109 39ff 	add.w	r9, r9, #4294967295
   e1298:	e7f3      	b.n	e1282 <mbedtls_mpi_mul_mpi+0x48>
    for( j = B->n; j > 0; j-- )
   e129a:	686f      	ldr	r7, [r5, #4]
   e129c:	b13f      	cbz	r7, e12ae <mbedtls_mpi_mul_mpi+0x74>
        if( B->p[j - 1] != 0 )
   e129e:	68ab      	ldr	r3, [r5, #8]
   e12a0:	eb03 0387 	add.w	r3, r3, r7, lsl #2
   e12a4:	f853 3c04 	ldr.w	r3, [r3, #-4]
   e12a8:	b90b      	cbnz	r3, e12ae <mbedtls_mpi_mul_mpi+0x74>
    for( j = B->n; j > 0; j-- )
   e12aa:	3f01      	subs	r7, #1
   e12ac:	e7f6      	b.n	e129c <mbedtls_mpi_mul_mpi+0x62>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );
   e12ae:	eb09 0107 	add.w	r1, r9, r7
   e12b2:	4640      	mov	r0, r8
   e12b4:	f7ff fb9d 	bl	e09f2 <mbedtls_mpi_grow>
   e12b8:	4604      	mov	r4, r0
   e12ba:	b9c0      	cbnz	r0, e12ee <mbedtls_mpi_mul_mpi+0xb4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
   e12bc:	4601      	mov	r1, r0
   e12be:	4640      	mov	r0, r8
   e12c0:	f7ff fc5a 	bl	e0b78 <mbedtls_mpi_lset>
   e12c4:	4604      	mov	r4, r0
   e12c6:	b990      	cbnz	r0, e12ee <mbedtls_mpi_mul_mpi+0xb4>
    for( ; j > 0; j-- )
   e12c8:	3f01      	subs	r7, #1
   e12ca:	d30b      	bcc.n	e12e4 <mbedtls_mpi_mul_mpi+0xaa>
        mpi_mul_hlp( i, A->p, X->p + j - 1, B->p[j - 1] );
   e12cc:	68ab      	ldr	r3, [r5, #8]
   e12ce:	f8d8 2008 	ldr.w	r2, [r8, #8]
   e12d2:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
   e12d6:	68b1      	ldr	r1, [r6, #8]
   e12d8:	eb02 0287 	add.w	r2, r2, r7, lsl #2
   e12dc:	4648      	mov	r0, r9
   e12de:	f7ff fa8c 	bl	e07fa <_ZL11mpi_mul_hlpjPmS_m>
    for( ; j > 0; j-- )
   e12e2:	e7f1      	b.n	e12c8 <mbedtls_mpi_mul_mpi+0x8e>
    X->s = A->s * B->s;
   e12e4:	6832      	ldr	r2, [r6, #0]
   e12e6:	682b      	ldr	r3, [r5, #0]
   e12e8:	4353      	muls	r3, r2
   e12ea:	f8c8 3000 	str.w	r3, [r8]
    mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TA );
   e12ee:	a803      	add	r0, sp, #12
   e12f0:	f7ff fb6d 	bl	e09ce <mbedtls_mpi_free>
   e12f4:	4668      	mov	r0, sp
   e12f6:	f7ff fb6a 	bl	e09ce <mbedtls_mpi_free>
}
   e12fa:	4620      	mov	r0, r4
   e12fc:	b007      	add	sp, #28
   e12fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000e1302 <mbedtls_mpi_mul_int>:
{
   e1302:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    _B.s = 1;
   e1304:	2301      	movs	r3, #1
    p[0] = b;
   e1306:	9200      	str	r2, [sp, #0]
    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
   e1308:	aa01      	add	r2, sp, #4
    _B.n = 1;
   e130a:	e9cd 3301 	strd	r3, r3, [sp, #4]
    _B.p = p;
   e130e:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
   e1312:	f7ff ff92 	bl	e123a <mbedtls_mpi_mul_mpi>
}
   e1316:	b005      	add	sp, #20
   e1318:	f85d fb04 	ldr.w	pc, [sp], #4

000e131c <mbedtls_mpi_div_mpi>:
{
   e131c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e1320:	ed2d 8b02 	vpush	{d8}
   e1324:	4606      	mov	r6, r0
   e1326:	b095      	sub	sp, #84	; 0x54
   e1328:	4688      	mov	r8, r1
    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
   e132a:	4618      	mov	r0, r3
   e132c:	2100      	movs	r1, #0
{
   e132e:	ee08 3a90 	vmov	s17, r3
   e1332:	4691      	mov	r9, r2
    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
   e1334:	f7ff fe65 	bl	e1002 <mbedtls_mpi_cmp_int>
   e1338:	2800      	cmp	r0, #0
   e133a:	f000 81b3 	beq.w	e16a4 <mbedtls_mpi_div_mpi+0x388>
    X->n = 0;
   e133e:	2400      	movs	r4, #0
   e1340:	2501      	movs	r5, #1
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
   e1342:	ee18 1a90 	vmov	r1, s17
   e1346:	4648      	mov	r0, r9
    X->n = 0;
   e1348:	e9cd 5405 	strd	r5, r4, [sp, #20]
    X->s = 1;
   e134c:	e9cd 4507 	strd	r4, r5, [sp, #28]
    X->p = NULL;
   e1350:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    X->n = 0;
   e1354:	e9cd 540b 	strd	r5, r4, [sp, #44]	; 0x2c
    X->s = 1;
   e1358:	e9cd 450d 	strd	r4, r5, [sp, #52]	; 0x34
    X->p = NULL;
   e135c:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
    X->n = 0;
   e1360:	e9cd 5411 	strd	r5, r4, [sp, #68]	; 0x44
    X->p = NULL;
   e1364:	9413      	str	r4, [sp, #76]	; 0x4c
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
   e1366:	f7ff fd72 	bl	e0e4e <mbedtls_mpi_cmp_abs>
   e136a:	42a0      	cmp	r0, r4
   e136c:	da29      	bge.n	e13c2 <mbedtls_mpi_div_mpi+0xa6>
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
   e136e:	b94e      	cbnz	r6, e1384 <mbedtls_mpi_div_mpi+0x68>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
   e1370:	f1b8 0f00 	cmp.w	r8, #0
   e1374:	d11d      	bne.n	e13b2 <mbedtls_mpi_div_mpi+0x96>
        return( 0 );
   e1376:	2400      	movs	r4, #0
}
   e1378:	4620      	mov	r0, r4
   e137a:	b015      	add	sp, #84	; 0x54
   e137c:	ecbd 8b02 	vpop	{d8}
   e1380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
   e1384:	4621      	mov	r1, r4
   e1386:	4630      	mov	r0, r6
   e1388:	f7ff fbf6 	bl	e0b78 <mbedtls_mpi_lset>
   e138c:	4604      	mov	r4, r0
   e138e:	2800      	cmp	r0, #0
   e1390:	d0ee      	beq.n	e1370 <mbedtls_mpi_div_mpi+0x54>
    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
   e1392:	a805      	add	r0, sp, #20
   e1394:	f7ff fb1b 	bl	e09ce <mbedtls_mpi_free>
   e1398:	a808      	add	r0, sp, #32
   e139a:	f7ff fb18 	bl	e09ce <mbedtls_mpi_free>
   e139e:	a80b      	add	r0, sp, #44	; 0x2c
   e13a0:	f7ff fb15 	bl	e09ce <mbedtls_mpi_free>
    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 );
   e13a4:	a80e      	add	r0, sp, #56	; 0x38
   e13a6:	f7ff fb12 	bl	e09ce <mbedtls_mpi_free>
   e13aa:	a811      	add	r0, sp, #68	; 0x44
   e13ac:	f7ff fb0f 	bl	e09ce <mbedtls_mpi_free>
    return( ret );
   e13b0:	e7e2      	b.n	e1378 <mbedtls_mpi_div_mpi+0x5c>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
   e13b2:	4649      	mov	r1, r9
   e13b4:	4640      	mov	r0, r8
   e13b6:	f7ff fb81 	bl	e0abc <mbedtls_mpi_copy>
   e13ba:	4604      	mov	r4, r0
   e13bc:	2800      	cmp	r0, #0
   e13be:	d1e8      	bne.n	e1392 <mbedtls_mpi_div_mpi+0x76>
   e13c0:	e7d9      	b.n	e1376 <mbedtls_mpi_div_mpi+0x5a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
   e13c2:	4649      	mov	r1, r9
   e13c4:	a805      	add	r0, sp, #20
   e13c6:	f7ff fb79 	bl	e0abc <mbedtls_mpi_copy>
   e13ca:	4604      	mov	r4, r0
   e13cc:	2800      	cmp	r0, #0
   e13ce:	d1e0      	bne.n	e1392 <mbedtls_mpi_div_mpi+0x76>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
   e13d0:	af08      	add	r7, sp, #32
   e13d2:	ee18 1a90 	vmov	r1, s17
   e13d6:	4638      	mov	r0, r7
   e13d8:	f7ff fb70 	bl	e0abc <mbedtls_mpi_copy>
   e13dc:	4604      	mov	r4, r0
   e13de:	2800      	cmp	r0, #0
   e13e0:	d1d7      	bne.n	e1392 <mbedtls_mpi_div_mpi+0x76>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
   e13e2:	f8d9 1004 	ldr.w	r1, [r9, #4]
    X.s = Y.s = 1;
   e13e6:	9508      	str	r5, [sp, #32]
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
   e13e8:	3102      	adds	r1, #2
   e13ea:	a80b      	add	r0, sp, #44	; 0x2c
    X.s = Y.s = 1;
   e13ec:	9505      	str	r5, [sp, #20]
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
   e13ee:	f7ff fb00 	bl	e09f2 <mbedtls_mpi_grow>
   e13f2:	4604      	mov	r4, r0
   e13f4:	2800      	cmp	r0, #0
   e13f6:	d1cc      	bne.n	e1392 <mbedtls_mpi_div_mpi+0x76>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Z,  0 ) );
   e13f8:	4601      	mov	r1, r0
   e13fa:	a80b      	add	r0, sp, #44	; 0x2c
   e13fc:	f7ff fbbc 	bl	e0b78 <mbedtls_mpi_lset>
   e1400:	4604      	mov	r4, r0
   e1402:	2800      	cmp	r0, #0
   e1404:	d1c5      	bne.n	e1392 <mbedtls_mpi_div_mpi+0x76>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T1, 2 ) );
   e1406:	2102      	movs	r1, #2
   e1408:	a80e      	add	r0, sp, #56	; 0x38
   e140a:	f7ff faf2 	bl	e09f2 <mbedtls_mpi_grow>
   e140e:	4604      	mov	r4, r0
   e1410:	2800      	cmp	r0, #0
   e1412:	d1be      	bne.n	e1392 <mbedtls_mpi_div_mpi+0x76>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T2, 3 ) );
   e1414:	2103      	movs	r1, #3
   e1416:	a811      	add	r0, sp, #68	; 0x44
   e1418:	f7ff faeb 	bl	e09f2 <mbedtls_mpi_grow>
   e141c:	4604      	mov	r4, r0
   e141e:	2800      	cmp	r0, #0
   e1420:	d1b7      	bne.n	e1392 <mbedtls_mpi_div_mpi+0x76>
    k = mbedtls_mpi_bitlen( &Y ) % biL;
   e1422:	4638      	mov	r0, r7
   e1424:	f7ff fbf0 	bl	e0c08 <mbedtls_mpi_bitlen>
   e1428:	f000 001f 	and.w	r0, r0, #31
    if( k < biL - 1 )
   e142c:	281f      	cmp	r0, #31
   e142e:	d039      	beq.n	e14a4 <mbedtls_mpi_div_mpi+0x188>
        k = biL - 1 - k;
   e1430:	f1c0 031f 	rsb	r3, r0, #31
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
   e1434:	4619      	mov	r1, r3
   e1436:	a805      	add	r0, sp, #20
        k = biL - 1 - k;
   e1438:	ee08 3a10 	vmov	s16, r3
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
   e143c:	f7ff fc73 	bl	e0d26 <mbedtls_mpi_shift_l>
   e1440:	4604      	mov	r4, r0
   e1442:	2800      	cmp	r0, #0
   e1444:	d1a5      	bne.n	e1392 <mbedtls_mpi_div_mpi+0x76>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
   e1446:	ee18 1a10 	vmov	r1, s16
   e144a:	4638      	mov	r0, r7
   e144c:	f7ff fc6b 	bl	e0d26 <mbedtls_mpi_shift_l>
   e1450:	4604      	mov	r4, r0
   e1452:	2800      	cmp	r0, #0
   e1454:	d19d      	bne.n	e1392 <mbedtls_mpi_div_mpi+0x76>
    n = X.n - 1;
   e1456:	9d06      	ldr	r5, [sp, #24]
    t = Y.n - 1;
   e1458:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
   e145c:	eba5 030a 	sub.w	r3, r5, sl
   e1460:	ea4f 1b43 	mov.w	fp, r3, lsl #5
   e1464:	4659      	mov	r1, fp
   e1466:	4638      	mov	r0, r7
   e1468:	9300      	str	r3, [sp, #0]
   e146a:	f7ff fc5c 	bl	e0d26 <mbedtls_mpi_shift_l>
   e146e:	4604      	mov	r4, r0
   e1470:	2800      	cmp	r0, #0
   e1472:	d18e      	bne.n	e1392 <mbedtls_mpi_div_mpi+0x76>
        Z.p[n - t]++;
   e1474:	9b00      	ldr	r3, [sp, #0]
   e1476:	009b      	lsls	r3, r3, #2
    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
   e1478:	4639      	mov	r1, r7
   e147a:	a805      	add	r0, sp, #20
   e147c:	9300      	str	r3, [sp, #0]
   e147e:	f7ff fd7f 	bl	e0f80 <mbedtls_mpi_cmp_mpi>
   e1482:	2800      	cmp	r0, #0
   e1484:	db11      	blt.n	e14aa <mbedtls_mpi_div_mpi+0x18e>
        Z.p[n - t]++;
   e1486:	990d      	ldr	r1, [sp, #52]	; 0x34
   e1488:	9b00      	ldr	r3, [sp, #0]
   e148a:	58ca      	ldr	r2, [r1, r3]
   e148c:	3201      	adds	r2, #1
   e148e:	50ca      	str	r2, [r1, r3]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
   e1490:	a905      	add	r1, sp, #20
   e1492:	463a      	mov	r2, r7
   e1494:	4608      	mov	r0, r1
   e1496:	f7ff fe81 	bl	e119c <mbedtls_mpi_sub_mpi>
   e149a:	9b00      	ldr	r3, [sp, #0]
   e149c:	4604      	mov	r4, r0
   e149e:	2800      	cmp	r0, #0
   e14a0:	d0ea      	beq.n	e1478 <mbedtls_mpi_div_mpi+0x15c>
   e14a2:	e776      	b.n	e1392 <mbedtls_mpi_div_mpi+0x76>
    else k = 0;
   e14a4:	ee08 4a10 	vmov	s16, r4
   e14a8:	e7d5      	b.n	e1456 <mbedtls_mpi_div_mpi+0x13a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );
   e14aa:	4659      	mov	r1, fp
   e14ac:	4638      	mov	r0, r7
   e14ae:	f7ff fc8d 	bl	e0dcc <mbedtls_mpi_shift_r>
   e14b2:	4604      	mov	r4, r0
   e14b4:	2800      	cmp	r0, #0
   e14b6:	f47f af6c 	bne.w	e1392 <mbedtls_mpi_div_mpi+0x76>
    t = Y.n - 1;
   e14ba:	f10a 3bff 	add.w	fp, sl, #4294967295
        if( X.p[i] >= Y.p[t] )
   e14be:	ea4f 038b 	mov.w	r3, fp, lsl #2
    n = X.n - 1;
   e14c2:	1e6f      	subs	r7, r5, #1
        if( X.p[i] >= Y.p[t] )
   e14c4:	9300      	str	r3, [sp, #0]
   e14c6:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
   e14ca:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
   e14ce:	3b02      	subs	r3, #2
   e14d0:	3d01      	subs	r5, #1
   e14d2:	009b      	lsls	r3, r3, #2
   e14d4:	eba5 0a0a 	sub.w	sl, r5, sl
   e14d8:	9303      	str	r3, [sp, #12]
   e14da:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
    for( i = n; i > t ; i-- )
   e14de:	455f      	cmp	r7, fp
   e14e0:	f240 80b3 	bls.w	e164a <mbedtls_mpi_div_mpi+0x32e>
        if( X.p[i] >= Y.p[t] )
   e14e4:	00ba      	lsls	r2, r7, #2
   e14e6:	9800      	ldr	r0, [sp, #0]
   e14e8:	9202      	str	r2, [sp, #8]
   e14ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   e14ec:	9b07      	ldr	r3, [sp, #28]
   e14ee:	5812      	ldr	r2, [r2, r0]
   e14f0:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
   e14f4:	00b8      	lsls	r0, r7, #2
   e14f6:	3804      	subs	r0, #4
   e14f8:	9001      	str	r0, [sp, #4]
   e14fa:	980d      	ldr	r0, [sp, #52]	; 0x34
   e14fc:	4291      	cmp	r1, r2
   e14fe:	eb00 050a 	add.w	r5, r0, sl
   e1502:	f0c0 808b 	bcc.w	e161c <mbedtls_mpi_div_mpi+0x300>
            Z.p[i - t - 1] = ~0;
   e1506:	f04f 33ff 	mov.w	r3, #4294967295
   e150a:	f840 300a 	str.w	r3, [r0, sl]
        Z.p[i - t - 1]++;
   e150e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   e1510:	f852 300a 	ldr.w	r3, [r2, sl]
   e1514:	3301      	adds	r3, #1
   e1516:	f842 300a 	str.w	r3, [r2, sl]
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
   e151a:	00bb      	lsls	r3, r7, #2
   e151c:	f1a3 0508 	sub.w	r5, r3, #8
            Z.p[i - t - 1]--;
   e1520:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   e1522:	f852 300a 	ldr.w	r3, [r2, sl]
   e1526:	3b01      	subs	r3, #1
   e1528:	f842 300a 	str.w	r3, [r2, sl]
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
   e152c:	2100      	movs	r1, #0
   e152e:	a80e      	add	r0, sp, #56	; 0x38
   e1530:	f7ff fb22 	bl	e0b78 <mbedtls_mpi_lset>
   e1534:	2800      	cmp	r0, #0
   e1536:	f040 80b1 	bne.w	e169c <mbedtls_mpi_div_mpi+0x380>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
   e153a:	f1bb 0f00 	cmp.w	fp, #0
   e153e:	f000 8082 	beq.w	e1646 <mbedtls_mpi_div_mpi+0x32a>
   e1542:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e1544:	9a03      	ldr	r2, [sp, #12]
   e1546:	589b      	ldr	r3, [r3, r2]
   e1548:	9a10      	ldr	r2, [sp, #64]	; 0x40
   e154a:	6013      	str	r3, [r2, #0]
            T1.p[1] = Y.p[t];
   e154c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e154e:	9a00      	ldr	r2, [sp, #0]
   e1550:	589a      	ldr	r2, [r3, r2]
   e1552:	9b10      	ldr	r3, [sp, #64]	; 0x40
   e1554:	605a      	str	r2, [r3, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
   e1556:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   e1558:	a90e      	add	r1, sp, #56	; 0x38
   e155a:	4608      	mov	r0, r1
   e155c:	f853 200a 	ldr.w	r2, [r3, sl]
   e1560:	f7ff fecf 	bl	e1302 <mbedtls_mpi_mul_int>
   e1564:	4601      	mov	r1, r0
   e1566:	2800      	cmp	r0, #0
   e1568:	f040 809a 	bne.w	e16a0 <mbedtls_mpi_div_mpi+0x384>
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
   e156c:	a811      	add	r0, sp, #68	; 0x44
   e156e:	f7ff fb03 	bl	e0b78 <mbedtls_mpi_lset>
   e1572:	2800      	cmp	r0, #0
   e1574:	f040 8092 	bne.w	e169c <mbedtls_mpi_div_mpi+0x380>
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
   e1578:	2f01      	cmp	r7, #1
   e157a:	bf18      	it	ne
   e157c:	9b07      	ldrne	r3, [sp, #28]
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
   e157e:	9a01      	ldr	r2, [sp, #4]
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
   e1580:	bf18      	it	ne
   e1582:	5958      	ldrne	r0, [r3, r5]
   e1584:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   e1586:	6018      	str	r0, [r3, #0]
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
   e1588:	9b07      	ldr	r3, [sp, #28]
   e158a:	589a      	ldr	r2, [r3, r2]
   e158c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   e158e:	605a      	str	r2, [r3, #4]
            T2.p[2] = X.p[i];
   e1590:	9b07      	ldr	r3, [sp, #28]
   e1592:	9a02      	ldr	r2, [sp, #8]
   e1594:	589a      	ldr	r2, [r3, r2]
   e1596:	9b13      	ldr	r3, [sp, #76]	; 0x4c
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
   e1598:	a911      	add	r1, sp, #68	; 0x44
            T2.p[2] = X.p[i];
   e159a:	609a      	str	r2, [r3, #8]
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
   e159c:	a80e      	add	r0, sp, #56	; 0x38
   e159e:	f7ff fcef 	bl	e0f80 <mbedtls_mpi_cmp_mpi>
   e15a2:	2800      	cmp	r0, #0
   e15a4:	dcbc      	bgt.n	e1520 <mbedtls_mpi_div_mpi+0x204>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
   e15a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   e15a8:	a908      	add	r1, sp, #32
   e15aa:	f853 200a 	ldr.w	r2, [r3, sl]
   e15ae:	a80e      	add	r0, sp, #56	; 0x38
   e15b0:	f7ff fea7 	bl	e1302 <mbedtls_mpi_mul_int>
   e15b4:	2800      	cmp	r0, #0
   e15b6:	d171      	bne.n	e169c <mbedtls_mpi_div_mpi+0x380>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );
   e15b8:	ea4f 05ca 	mov.w	r5, sl, lsl #3
   e15bc:	4629      	mov	r1, r5
   e15be:	a80e      	add	r0, sp, #56	; 0x38
   e15c0:	f7ff fbb1 	bl	e0d26 <mbedtls_mpi_shift_l>
   e15c4:	2800      	cmp	r0, #0
   e15c6:	d169      	bne.n	e169c <mbedtls_mpi_div_mpi+0x380>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );
   e15c8:	a905      	add	r1, sp, #20
   e15ca:	4608      	mov	r0, r1
   e15cc:	aa0e      	add	r2, sp, #56	; 0x38
   e15ce:	f7ff fde5 	bl	e119c <mbedtls_mpi_sub_mpi>
   e15d2:	4601      	mov	r1, r0
   e15d4:	2800      	cmp	r0, #0
   e15d6:	d163      	bne.n	e16a0 <mbedtls_mpi_div_mpi+0x384>
        if( mbedtls_mpi_cmp_int( &X, 0 ) < 0 )
   e15d8:	a805      	add	r0, sp, #20
   e15da:	f7ff fd12 	bl	e1002 <mbedtls_mpi_cmp_int>
   e15de:	2800      	cmp	r0, #0
   e15e0:	da18      	bge.n	e1614 <mbedtls_mpi_div_mpi+0x2f8>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );
   e15e2:	a908      	add	r1, sp, #32
   e15e4:	a80e      	add	r0, sp, #56	; 0x38
   e15e6:	f7ff fa69 	bl	e0abc <mbedtls_mpi_copy>
   e15ea:	2800      	cmp	r0, #0
   e15ec:	d156      	bne.n	e169c <mbedtls_mpi_div_mpi+0x380>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );
   e15ee:	4629      	mov	r1, r5
   e15f0:	a80e      	add	r0, sp, #56	; 0x38
   e15f2:	f7ff fb98 	bl	e0d26 <mbedtls_mpi_shift_l>
   e15f6:	2800      	cmp	r0, #0
   e15f8:	d150      	bne.n	e169c <mbedtls_mpi_div_mpi+0x380>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
   e15fa:	a905      	add	r1, sp, #20
   e15fc:	aa0e      	add	r2, sp, #56	; 0x38
   e15fe:	4608      	mov	r0, r1
   e1600:	f7ff fdaa 	bl	e1158 <mbedtls_mpi_add_mpi>
   e1604:	2800      	cmp	r0, #0
   e1606:	d149      	bne.n	e169c <mbedtls_mpi_div_mpi+0x380>
            Z.p[i - t - 1]--;
   e1608:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   e160a:	f852 300a 	ldr.w	r3, [r2, sl]
   e160e:	3b01      	subs	r3, #1
   e1610:	f842 300a 	str.w	r3, [r2, sl]
    for( i = n; i > t ; i-- )
   e1614:	3f01      	subs	r7, #1
   e1616:	f1aa 0a04 	sub.w	sl, sl, #4
   e161a:	e760      	b.n	e14de <mbedtls_mpi_div_mpi+0x1c2>
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
   e161c:	9801      	ldr	r0, [sp, #4]
   e161e:	5818      	ldr	r0, [r3, r0]
    if( 0 == d || u1 >= d )
   e1620:	b172      	cbz	r2, e1640 <mbedtls_mpi_div_mpi+0x324>
    quotient = dividend / d;
   e1622:	2300      	movs	r3, #0
   e1624:	f006 ff3a 	bl	e849c <__aeabi_uldivmod>
   e1628:	460b      	mov	r3, r1
    return (mbedtls_mpi_uint) quotient;
   e162a:	2100      	movs	r1, #0
    quotient = dividend / d;
   e162c:	4602      	mov	r2, r0
    return (mbedtls_mpi_uint) quotient;
   e162e:	4299      	cmp	r1, r3
   e1630:	f04f 30ff 	mov.w	r0, #4294967295
   e1634:	bf08      	it	eq
   e1636:	4290      	cmpeq	r0, r2
   e1638:	d200      	bcs.n	e163c <mbedtls_mpi_div_mpi+0x320>
   e163a:	4602      	mov	r2, r0
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
   e163c:	602a      	str	r2, [r5, #0]
   e163e:	e766      	b.n	e150e <mbedtls_mpi_div_mpi+0x1f2>
        return ( ~0 );
   e1640:	f04f 32ff 	mov.w	r2, #4294967295
   e1644:	e7fa      	b.n	e163c <mbedtls_mpi_div_mpi+0x320>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
   e1646:	465b      	mov	r3, fp
   e1648:	e77e      	b.n	e1548 <mbedtls_mpi_div_mpi+0x22c>
    if( Q != NULL )
   e164a:	b15e      	cbz	r6, e1664 <mbedtls_mpi_div_mpi+0x348>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );
   e164c:	a90b      	add	r1, sp, #44	; 0x2c
   e164e:	4630      	mov	r0, r6
   e1650:	f7ff fa34 	bl	e0abc <mbedtls_mpi_copy>
   e1654:	bb10      	cbnz	r0, e169c <mbedtls_mpi_div_mpi+0x380>
        Q->s = A->s * B->s;
   e1656:	ee18 3a90 	vmov	r3, s17
   e165a:	f8d9 2000 	ldr.w	r2, [r9]
   e165e:	681b      	ldr	r3, [r3, #0]
   e1660:	4353      	muls	r3, r2
   e1662:	6033      	str	r3, [r6, #0]
    if( R != NULL )
   e1664:	f1b8 0f00 	cmp.w	r8, #0
   e1668:	f43f ae93 	beq.w	e1392 <mbedtls_mpi_div_mpi+0x76>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
   e166c:	ee18 1a10 	vmov	r1, s16
   e1670:	a805      	add	r0, sp, #20
   e1672:	f7ff fbab 	bl	e0dcc <mbedtls_mpi_shift_r>
   e1676:	b988      	cbnz	r0, e169c <mbedtls_mpi_div_mpi+0x380>
        X.s = A->s;
   e1678:	f8d9 3000 	ldr.w	r3, [r9]
   e167c:	9305      	str	r3, [sp, #20]
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
   e167e:	a905      	add	r1, sp, #20
   e1680:	4640      	mov	r0, r8
   e1682:	f7ff fa1b 	bl	e0abc <mbedtls_mpi_copy>
   e1686:	4601      	mov	r1, r0
   e1688:	b950      	cbnz	r0, e16a0 <mbedtls_mpi_div_mpi+0x384>
        if( mbedtls_mpi_cmp_int( R, 0 ) == 0 )
   e168a:	4640      	mov	r0, r8
   e168c:	f7ff fcb9 	bl	e1002 <mbedtls_mpi_cmp_int>
   e1690:	2800      	cmp	r0, #0
   e1692:	f47f ae7e 	bne.w	e1392 <mbedtls_mpi_div_mpi+0x76>
            R->s = 1;
   e1696:	2301      	movs	r3, #1
   e1698:	f8c8 3000 	str.w	r3, [r8]
   e169c:	4604      	mov	r4, r0
   e169e:	e678      	b.n	e1392 <mbedtls_mpi_div_mpi+0x76>
   e16a0:	460c      	mov	r4, r1
   e16a2:	e676      	b.n	e1392 <mbedtls_mpi_div_mpi+0x76>
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );
   e16a4:	f06f 040b 	mvn.w	r4, #11
   e16a8:	e666      	b.n	e1378 <mbedtls_mpi_div_mpi+0x5c>

000e16aa <mbedtls_mpi_mod_mpi>:
{
   e16aa:	b570      	push	{r4, r5, r6, lr}
   e16ac:	4604      	mov	r4, r0
   e16ae:	460d      	mov	r5, r1
    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
   e16b0:	4610      	mov	r0, r2
   e16b2:	2100      	movs	r1, #0
{
   e16b4:	4616      	mov	r6, r2
    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
   e16b6:	f7ff fca4 	bl	e1002 <mbedtls_mpi_cmp_int>
   e16ba:	2800      	cmp	r0, #0
   e16bc:	db24      	blt.n	e1708 <mbedtls_mpi_mod_mpi+0x5e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );
   e16be:	462a      	mov	r2, r5
   e16c0:	4633      	mov	r3, r6
   e16c2:	4621      	mov	r1, r4
   e16c4:	2000      	movs	r0, #0
   e16c6:	f7ff fe29 	bl	e131c <mbedtls_mpi_div_mpi>
   e16ca:	4605      	mov	r5, r0
   e16cc:	b9f0      	cbnz	r0, e170c <mbedtls_mpi_mod_mpi+0x62>
    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
   e16ce:	2100      	movs	r1, #0
   e16d0:	4620      	mov	r0, r4
   e16d2:	f7ff fc96 	bl	e1002 <mbedtls_mpi_cmp_int>
   e16d6:	2800      	cmp	r0, #0
   e16d8:	da08      	bge.n	e16ec <mbedtls_mpi_mod_mpi+0x42>
      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );
   e16da:	4632      	mov	r2, r6
   e16dc:	4621      	mov	r1, r4
   e16de:	4620      	mov	r0, r4
   e16e0:	f7ff fd3a 	bl	e1158 <mbedtls_mpi_add_mpi>
   e16e4:	2800      	cmp	r0, #0
   e16e6:	d0f2      	beq.n	e16ce <mbedtls_mpi_mod_mpi+0x24>
   e16e8:	4605      	mov	r5, r0
   e16ea:	e00f      	b.n	e170c <mbedtls_mpi_mod_mpi+0x62>
    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
   e16ec:	4631      	mov	r1, r6
   e16ee:	4620      	mov	r0, r4
   e16f0:	f7ff fc46 	bl	e0f80 <mbedtls_mpi_cmp_mpi>
   e16f4:	2800      	cmp	r0, #0
   e16f6:	db09      	blt.n	e170c <mbedtls_mpi_mod_mpi+0x62>
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );
   e16f8:	4632      	mov	r2, r6
   e16fa:	4621      	mov	r1, r4
   e16fc:	4620      	mov	r0, r4
   e16fe:	f7ff fd4d 	bl	e119c <mbedtls_mpi_sub_mpi>
   e1702:	2800      	cmp	r0, #0
   e1704:	d0f2      	beq.n	e16ec <mbedtls_mpi_mod_mpi+0x42>
   e1706:	e7ef      	b.n	e16e8 <mbedtls_mpi_mod_mpi+0x3e>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
   e1708:	f06f 0509 	mvn.w	r5, #9
}
   e170c:	4628      	mov	r0, r5
   e170e:	bd70      	pop	{r4, r5, r6, pc}

000e1710 <mbedtls_mpi_exp_mod>:
 * Sliding-window exponentiation: X = A^E mod N  (HAC 14.85)
 */
int mbedtls_mpi_exp_mod( mbedtls_mpi *X, const mbedtls_mpi *A,
                         const mbedtls_mpi *E, const mbedtls_mpi *N,
                         mbedtls_mpi *_RR )
{
   e1710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e1714:	f2ad 6d54 	subw	sp, sp, #1620	; 0x654
   e1718:	4605      	mov	r5, r0
   e171a:	4688      	mov	r8, r1
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( E != NULL );
    MPI_VALIDATE_RET( N != NULL );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
   e171c:	4618      	mov	r0, r3
   e171e:	2100      	movs	r1, #0
{
   e1720:	9202      	str	r2, [sp, #8]
   e1722:	461c      	mov	r4, r3
    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
   e1724:	f7ff fc6d 	bl	e1002 <mbedtls_mpi_cmp_int>
   e1728:	2800      	cmp	r0, #0
   e172a:	f340 8215 	ble.w	e1b58 <mbedtls_mpi_exp_mod+0x448>
   e172e:	68a3      	ldr	r3, [r4, #8]
   e1730:	681e      	ldr	r6, [r3, #0]
   e1732:	f016 0301 	ands.w	r3, r6, #1
   e1736:	9304      	str	r3, [sp, #16]
   e1738:	f000 820e 	beq.w	e1b58 <mbedtls_mpi_exp_mod+0x448>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( E, 0 ) < 0 )
   e173c:	9802      	ldr	r0, [sp, #8]
   e173e:	2100      	movs	r1, #0
   e1740:	f7ff fc5f 	bl	e1002 <mbedtls_mpi_cmp_int>
   e1744:	2800      	cmp	r0, #0
   e1746:	f2c0 8207 	blt.w	e1b58 <mbedtls_mpi_exp_mod+0x448>
    x += ( ( m0 + 2 ) & 4 ) << 1;
   e174a:	1cb7      	adds	r7, r6, #2
   e174c:	007f      	lsls	r7, r7, #1
   e174e:	f007 0708 	and.w	r7, r7, #8
   e1752:	4437      	add	r7, r6
   e1754:	2103      	movs	r1, #3
        x *= ( 2 - ( m0 * x ) );
   e1756:	fb07 f306 	mul.w	r3, r7, r6
   e175a:	f1c3 0302 	rsb	r3, r3, #2
    for( i = biL; i >= 8; i /= 2 )
   e175e:	3901      	subs	r1, #1
        x *= ( 2 - ( m0 * x ) );
   e1760:	fb03 f707 	mul.w	r7, r3, r7
    for( i = biL; i >= 8; i /= 2 )
   e1764:	d1f7      	bne.n	e1756 <mbedtls_mpi_exp_mod+0x46>
    X->s = 1;
   e1766:	2301      	movs	r3, #1
     * Init temps and window size
     */
    mpi_montg_init( &mm, N );
    mbedtls_mpi_init( &RR ); mbedtls_mpi_init( &T );
    mbedtls_mpi_init( &Apos );
    memset( W, 0, sizeof( W ) );
   e1768:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   e176c:	a814      	add	r0, sp, #80	; 0x50
    X->n = 0;
   e176e:	e9cd 3108 	strd	r3, r1, [sp, #32]
    X->s = 1;
   e1772:	e9cd 130a 	strd	r1, r3, [sp, #40]	; 0x28
    X->p = NULL;
   e1776:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    X->n = 0;
   e177a:	e9cd 310e 	strd	r3, r1, [sp, #56]	; 0x38
    X->p = NULL;
   e177e:	9110      	str	r1, [sp, #64]	; 0x40
    memset( W, 0, sizeof( W ) );
   e1780:	f007 f8cc 	bl	e891c <memset>

    i = mbedtls_mpi_bitlen( E );
   e1784:	9802      	ldr	r0, [sp, #8]
   e1786:	f7ff fa3f 	bl	e0c08 <mbedtls_mpi_bitlen>

    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
   e178a:	f5b0 7f28 	cmp.w	r0, #672	; 0x2a0
   e178e:	f080 80fb 	bcs.w	e1988 <mbedtls_mpi_exp_mod+0x278>
   e1792:	28ef      	cmp	r0, #239	; 0xef
   e1794:	f200 80fa 	bhi.w	e198c <mbedtls_mpi_exp_mod+0x27c>
   e1798:	284f      	cmp	r0, #79	; 0x4f
   e179a:	f200 80f9 	bhi.w	e1990 <mbedtls_mpi_exp_mod+0x280>
   e179e:	9b04      	ldr	r3, [sp, #16]
   e17a0:	2817      	cmp	r0, #23
   e17a2:	bf94      	ite	ls
   e17a4:	461e      	movls	r6, r3
   e17a6:	2603      	movhi	r6, #3
#if( MBEDTLS_MPI_WINDOW_SIZE < 6 )
    if( wsize > MBEDTLS_MPI_WINDOW_SIZE )
        wsize = MBEDTLS_MPI_WINDOW_SIZE;
#endif

    j = N->n + 1;
   e17a8:	6861      	ldr	r1, [r4, #4]
   e17aa:	f101 0901 	add.w	r9, r1, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
   e17ae:	4649      	mov	r1, r9
   e17b0:	4628      	mov	r0, r5
   e17b2:	f7ff f91e 	bl	e09f2 <mbedtls_mpi_grow>
   e17b6:	4602      	mov	r2, r0
   e17b8:	2800      	cmp	r0, #0
   e17ba:	f040 817d 	bne.w	e1ab8 <mbedtls_mpi_exp_mod+0x3a8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1],  j ) );
   e17be:	4649      	mov	r1, r9
   e17c0:	a817      	add	r0, sp, #92	; 0x5c
   e17c2:	f7ff f916 	bl	e09f2 <mbedtls_mpi_grow>
   e17c6:	4602      	mov	r2, r0
   e17c8:	2800      	cmp	r0, #0
   e17ca:	f040 8175 	bne.w	e1ab8 <mbedtls_mpi_exp_mod+0x3a8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T, j * 2 ) );
   e17ce:	ea4f 0149 	mov.w	r1, r9, lsl #1
   e17d2:	a80b      	add	r0, sp, #44	; 0x2c
   e17d4:	f7ff f90d 	bl	e09f2 <mbedtls_mpi_grow>
   e17d8:	4602      	mov	r2, r0
   e17da:	2800      	cmp	r0, #0
   e17dc:	f040 816c 	bne.w	e1ab8 <mbedtls_mpi_exp_mod+0x3a8>

    /*
     * Compensate for negative A (and correct at the end)
     */
    neg = ( A->s == -1 );
   e17e0:	f8d8 3000 	ldr.w	r3, [r8]
   e17e4:	9303      	str	r3, [sp, #12]
    if( neg )
   e17e6:	3301      	adds	r3, #1
   e17e8:	d10b      	bne.n	e1802 <mbedtls_mpi_exp_mod+0xf2>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Apos, A ) );
   e17ea:	4641      	mov	r1, r8
   e17ec:	a80e      	add	r0, sp, #56	; 0x38
   e17ee:	f7ff f965 	bl	e0abc <mbedtls_mpi_copy>
   e17f2:	4602      	mov	r2, r0
   e17f4:	2800      	cmp	r0, #0
   e17f6:	f040 815f 	bne.w	e1ab8 <mbedtls_mpi_exp_mod+0x3a8>
        Apos.s = 1;
   e17fa:	2301      	movs	r3, #1
   e17fc:	930e      	str	r3, [sp, #56]	; 0x38
        A = &Apos;
   e17fe:	f10d 0838 	add.w	r8, sp, #56	; 0x38
    }

    /*
     * If 1st call, pre-compute R^2 mod N
     */
    if( _RR == NULL || _RR->p == NULL )
   e1802:	f8dd 3678 	ldr.w	r3, [sp, #1656]	; 0x678
   e1806:	b11b      	cbz	r3, e1810 <mbedtls_mpi_exp_mod+0x100>
   e1808:	689b      	ldr	r3, [r3, #8]
   e180a:	2b00      	cmp	r3, #0
   e180c:	f040 80c2 	bne.w	e1994 <mbedtls_mpi_exp_mod+0x284>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &RR, 1 ) );
   e1810:	2101      	movs	r1, #1
   e1812:	a808      	add	r0, sp, #32
   e1814:	f7ff f9b0 	bl	e0b78 <mbedtls_mpi_lset>
   e1818:	4602      	mov	r2, r0
   e181a:	2800      	cmp	r0, #0
   e181c:	f040 814c 	bne.w	e1ab8 <mbedtls_mpi_exp_mod+0x3a8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &RR, N->n * 2 * biL ) );
   e1820:	6861      	ldr	r1, [r4, #4]
   e1822:	a808      	add	r0, sp, #32
   e1824:	0189      	lsls	r1, r1, #6
   e1826:	f7ff fa7e 	bl	e0d26 <mbedtls_mpi_shift_l>
   e182a:	4602      	mov	r2, r0
   e182c:	2800      	cmp	r0, #0
   e182e:	f040 8143 	bne.w	e1ab8 <mbedtls_mpi_exp_mod+0x3a8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &RR, &RR, N ) );
   e1832:	a908      	add	r1, sp, #32
   e1834:	4622      	mov	r2, r4
   e1836:	4608      	mov	r0, r1
   e1838:	f7ff ff37 	bl	e16aa <mbedtls_mpi_mod_mpi>
   e183c:	4602      	mov	r2, r0
   e183e:	2800      	cmp	r0, #0
   e1840:	f040 813a 	bne.w	e1ab8 <mbedtls_mpi_exp_mod+0x3a8>

        if( _RR != NULL )
   e1844:	f8dd 3678 	ldr.w	r3, [sp, #1656]	; 0x678
   e1848:	b13b      	cbz	r3, e185a <mbedtls_mpi_exp_mod+0x14a>
            memcpy( _RR, &RR, sizeof( mbedtls_mpi ) );
   e184a:	ab08      	add	r3, sp, #32
   e184c:	cb03      	ldmia	r3!, {r0, r1}
   e184e:	f8dd 2678 	ldr.w	r2, [sp, #1656]	; 0x678
   e1852:	6010      	str	r0, [r2, #0]
   e1854:	6818      	ldr	r0, [r3, #0]
   e1856:	6051      	str	r1, [r2, #4]
   e1858:	6090      	str	r0, [r2, #8]
        memcpy( &RR, _RR, sizeof( mbedtls_mpi ) );

    /*
     * W[1] = A * R^2 * R^-1 mod N = A * R mod N
     */
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
   e185a:	4621      	mov	r1, r4
   e185c:	4640      	mov	r0, r8
   e185e:	f7ff fb8f 	bl	e0f80 <mbedtls_mpi_cmp_mpi>
   e1862:	2800      	cmp	r0, #0
   e1864:	f2c0 809f 	blt.w	e19a6 <mbedtls_mpi_exp_mod+0x296>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
   e1868:	4622      	mov	r2, r4
   e186a:	4641      	mov	r1, r8
   e186c:	a817      	add	r0, sp, #92	; 0x5c
   e186e:	f7ff ff1c 	bl	e16aa <mbedtls_mpi_mod_mpi>
   e1872:	4602      	mov	r2, r0
   e1874:	2800      	cmp	r0, #0
   e1876:	f040 811f 	bne.w	e1ab8 <mbedtls_mpi_exp_mod+0x3a8>
    else
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );

    MBEDTLS_MPI_CHK( mpi_montmul( &W[1], &RR, N, mm, &T ) );
   e187a:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
    *mm = ~x + 1;
   e187e:	427b      	negs	r3, r7
    MBEDTLS_MPI_CHK( mpi_montmul( &W[1], &RR, N, mm, &T ) );
   e1880:	4622      	mov	r2, r4
   e1882:	f8cd 9000 	str.w	r9, [sp]
   e1886:	a908      	add	r1, sp, #32
   e1888:	a817      	add	r0, sp, #92	; 0x5c
   e188a:	9305      	str	r3, [sp, #20]
   e188c:	f7ff fb11 	bl	e0eb2 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
   e1890:	4602      	mov	r2, r0
   e1892:	2800      	cmp	r0, #0
   e1894:	f040 8110 	bne.w	e1ab8 <mbedtls_mpi_exp_mod+0x3a8>

    /*
     * X = R^2 * R^-1 mod N = R mod N
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &RR ) );
   e1898:	a908      	add	r1, sp, #32
   e189a:	4628      	mov	r0, r5
   e189c:	f7ff f90e 	bl	e0abc <mbedtls_mpi_copy>
   e18a0:	4602      	mov	r2, r0
   e18a2:	2800      	cmp	r0, #0
   e18a4:	f040 8108 	bne.w	e1ab8 <mbedtls_mpi_exp_mod+0x3a8>
    mbedtls_mpi_uint z = 1;
   e18a8:	aa07      	add	r2, sp, #28
   e18aa:	2701      	movs	r7, #1
    U.p = &z;
   e18ac:	9213      	str	r2, [sp, #76]	; 0x4c
    return( mpi_montmul( A, &U, N, mm, T ) );
   e18ae:	9b05      	ldr	r3, [sp, #20]
   e18b0:	f8cd 9000 	str.w	r9, [sp]
   e18b4:	4622      	mov	r2, r4
   e18b6:	a911      	add	r1, sp, #68	; 0x44
   e18b8:	4628      	mov	r0, r5
    U.n = U.s = (int) z;
   e18ba:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
    mbedtls_mpi_uint z = 1;
   e18be:	9707      	str	r7, [sp, #28]
    return( mpi_montmul( A, &U, N, mm, T ) );
   e18c0:	f7ff faf7 	bl	e0eb2 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
   e18c4:	4602      	mov	r2, r0
   e18c6:	2800      	cmp	r0, #0
   e18c8:	f040 80f6 	bne.w	e1ab8 <mbedtls_mpi_exp_mod+0x3a8>

    if( wsize > 1 )
   e18cc:	42be      	cmp	r6, r7
   e18ce:	9b05      	ldr	r3, [sp, #20]
   e18d0:	d06e      	beq.n	e19b0 <mbedtls_mpi_exp_mod+0x2a0>
   e18d2:	f106 3bff 	add.w	fp, r6, #4294967295
   e18d6:	fa07 f80b 	lsl.w	r8, r7, fp
        /*
         * W[1 << (wsize - 1)] = W[1] ^ (wsize - 1)
         */
        j =  one << ( wsize - 1 );

        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
   e18da:	270c      	movs	r7, #12
   e18dc:	6861      	ldr	r1, [r4, #4]
   e18de:	ab14      	add	r3, sp, #80	; 0x50
   e18e0:	fa07 f70b 	lsl.w	r7, r7, fp
   e18e4:	441f      	add	r7, r3
   e18e6:	3101      	adds	r1, #1
   e18e8:	4638      	mov	r0, r7
   e18ea:	f7ff f882 	bl	e09f2 <mbedtls_mpi_grow>
   e18ee:	4602      	mov	r2, r0
   e18f0:	2800      	cmp	r0, #0
   e18f2:	f040 80e1 	bne.w	e1ab8 <mbedtls_mpi_exp_mod+0x3a8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );
   e18f6:	a917      	add	r1, sp, #92	; 0x5c
   e18f8:	4638      	mov	r0, r7
   e18fa:	f7ff f8df 	bl	e0abc <mbedtls_mpi_copy>
   e18fe:	4602      	mov	r2, r0
   e1900:	2800      	cmp	r0, #0
   e1902:	f040 80d9 	bne.w	e1ab8 <mbedtls_mpi_exp_mod+0x3a8>

        for( i = 0; i < wsize - 1; i++ )
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );
   e1906:	9b05      	ldr	r3, [sp, #20]
        for( i = 0; i < wsize - 1; i++ )
   e1908:	4682      	mov	sl, r0
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );
   e190a:	4622      	mov	r2, r4
   e190c:	f8cd 9000 	str.w	r9, [sp]
   e1910:	4639      	mov	r1, r7
   e1912:	4638      	mov	r0, r7
   e1914:	9305      	str	r3, [sp, #20]
   e1916:	f7ff facc 	bl	e0eb2 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
   e191a:	4602      	mov	r2, r0
   e191c:	2800      	cmp	r0, #0
   e191e:	f040 80cb 	bne.w	e1ab8 <mbedtls_mpi_exp_mod+0x3a8>
        for( i = 0; i < wsize - 1; i++ )
   e1922:	f10a 0a01 	add.w	sl, sl, #1
   e1926:	45d3      	cmp	fp, sl
   e1928:	9b05      	ldr	r3, [sp, #20]
   e192a:	d8ee      	bhi.n	e190a <mbedtls_mpi_exp_mod+0x1fa>

        /*
         * W[i] = W[i - 1] * W[1]
         */
        for( i = j + 1; i < ( one << wsize ); i++ )
   e192c:	f04f 0a01 	mov.w	sl, #1
   e1930:	46bb      	mov	fp, r7
   e1932:	f108 0801 	add.w	r8, r8, #1
   e1936:	fa0a fa06 	lsl.w	sl, sl, r6
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );

            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
   e193a:	af0b      	add	r7, sp, #44	; 0x2c
        for( i = j + 1; i < ( one << wsize ); i++ )
   e193c:	45c2      	cmp	sl, r8
   e193e:	d937      	bls.n	e19b0 <mbedtls_mpi_exp_mod+0x2a0>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
   e1940:	6861      	ldr	r1, [r4, #4]
   e1942:	9305      	str	r3, [sp, #20]
   e1944:	f10b 090c 	add.w	r9, fp, #12
   e1948:	3101      	adds	r1, #1
   e194a:	4648      	mov	r0, r9
   e194c:	f7ff f851 	bl	e09f2 <mbedtls_mpi_grow>
   e1950:	4602      	mov	r2, r0
   e1952:	2800      	cmp	r0, #0
   e1954:	f040 80b0 	bne.w	e1ab8 <mbedtls_mpi_exp_mod+0x3a8>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );
   e1958:	4659      	mov	r1, fp
   e195a:	4648      	mov	r0, r9
   e195c:	f7ff f8ae 	bl	e0abc <mbedtls_mpi_copy>
   e1960:	4602      	mov	r2, r0
   e1962:	2800      	cmp	r0, #0
   e1964:	f040 80a8 	bne.w	e1ab8 <mbedtls_mpi_exp_mod+0x3a8>
            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
   e1968:	4622      	mov	r2, r4
   e196a:	9b05      	ldr	r3, [sp, #20]
   e196c:	9700      	str	r7, [sp, #0]
   e196e:	a917      	add	r1, sp, #92	; 0x5c
   e1970:	4648      	mov	r0, r9
   e1972:	f7ff fa9e 	bl	e0eb2 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
   e1976:	4602      	mov	r2, r0
   e1978:	2800      	cmp	r0, #0
   e197a:	f040 809d 	bne.w	e1ab8 <mbedtls_mpi_exp_mod+0x3a8>
        for( i = j + 1; i < ( one << wsize ); i++ )
   e197e:	9b05      	ldr	r3, [sp, #20]
   e1980:	f108 0801 	add.w	r8, r8, #1
   e1984:	46cb      	mov	fp, r9
   e1986:	e7d9      	b.n	e193c <mbedtls_mpi_exp_mod+0x22c>
    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
   e1988:	2606      	movs	r6, #6
   e198a:	e70d      	b.n	e17a8 <mbedtls_mpi_exp_mod+0x98>
   e198c:	2605      	movs	r6, #5
   e198e:	e70b      	b.n	e17a8 <mbedtls_mpi_exp_mod+0x98>
   e1990:	2604      	movs	r6, #4
   e1992:	e709      	b.n	e17a8 <mbedtls_mpi_exp_mod+0x98>
        memcpy( &RR, _RR, sizeof( mbedtls_mpi ) );
   e1994:	f8dd 2678 	ldr.w	r2, [sp, #1656]	; 0x678
   e1998:	6810      	ldr	r0, [r2, #0]
   e199a:	6851      	ldr	r1, [r2, #4]
   e199c:	ab08      	add	r3, sp, #32
   e199e:	c303      	stmia	r3!, {r0, r1}
   e19a0:	6890      	ldr	r0, [r2, #8]
   e19a2:	6018      	str	r0, [r3, #0]
   e19a4:	e759      	b.n	e185a <mbedtls_mpi_exp_mod+0x14a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );
   e19a6:	4641      	mov	r1, r8
   e19a8:	a817      	add	r0, sp, #92	; 0x5c
   e19aa:	f7ff f887 	bl	e0abc <mbedtls_mpi_copy>
   e19ae:	e760      	b.n	e1872 <mbedtls_mpi_exp_mod+0x162>
        }
    }

    nblimbs = E->n;
   e19b0:	9a02      	ldr	r2, [sp, #8]
    bufsize = 0;
    nbits   = 0;
    wbits   = 0;
    state   = 0;
   e19b2:	f04f 0800 	mov.w	r8, #0
    nblimbs = E->n;
   e19b6:	f8d2 b004 	ldr.w	fp, [r2, #4]
    nbits   = 0;
   e19ba:	4647      	mov	r7, r8
    bufsize = 0;
   e19bc:	46c1      	mov	r9, r8
    wbits   = 0;
   e19be:	46c2      	mov	sl, r8

    while( 1 )
    {
        if( bufsize == 0 )
   e19c0:	f1b9 0f00 	cmp.w	r9, #0
   e19c4:	d125      	bne.n	e1a12 <mbedtls_mpi_exp_mod+0x302>
        {
            if( nblimbs == 0 )
   e19c6:	f1bb 0f00 	cmp.w	fp, #0
   e19ca:	d11e      	bne.n	e1a0a <mbedtls_mpi_exp_mod+0x2fa>
    {
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );

        wbits <<= 1;

        if( ( wbits & ( one << wsize ) ) != 0 )
   e19cc:	f04f 0901 	mov.w	r9, #1
   e19d0:	fa09 f906 	lsl.w	r9, r9, r6
   e19d4:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
    for( i = 0; i < nbits; i++ )
   e19d8:	45bb      	cmp	fp, r7
   e19da:	d07f      	beq.n	e1adc <mbedtls_mpi_exp_mod+0x3cc>
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
   e19dc:	4622      	mov	r2, r4
   e19de:	f8cd 8000 	str.w	r8, [sp]
   e19e2:	4629      	mov	r1, r5
   e19e4:	4628      	mov	r0, r5
   e19e6:	9304      	str	r3, [sp, #16]
   e19e8:	f7ff fa63 	bl	e0eb2 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
   e19ec:	4602      	mov	r2, r0
   e19ee:	2800      	cmp	r0, #0
   e19f0:	d162      	bne.n	e1ab8 <mbedtls_mpi_exp_mod+0x3a8>
        wbits <<= 1;
   e19f2:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
        if( ( wbits & ( one << wsize ) ) != 0 )
   e19f6:	ea19 0f0a 	tst.w	r9, sl
   e19fa:	9b04      	ldr	r3, [sp, #16]
   e19fc:	d150      	bne.n	e1aa0 <mbedtls_mpi_exp_mod+0x390>
    for( i = 0; i < nbits; i++ )
   e19fe:	f10b 0b01 	add.w	fp, fp, #1
   e1a02:	e7e9      	b.n	e19d8 <mbedtls_mpi_exp_mod+0x2c8>
        state = 2;
   e1a04:	f04f 0802 	mov.w	r8, #2
   e1a08:	e7da      	b.n	e19c0 <mbedtls_mpi_exp_mod+0x2b0>
            nblimbs--;
   e1a0a:	f10b 3bff 	add.w	fp, fp, #4294967295
            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
   e1a0e:	f04f 0920 	mov.w	r9, #32
        ei = (E->p[nblimbs] >> bufsize) & 1;
   e1a12:	9a02      	ldr	r2, [sp, #8]
   e1a14:	6892      	ldr	r2, [r2, #8]
   e1a16:	f852 202b 	ldr.w	r2, [r2, fp, lsl #2]
        bufsize--;
   e1a1a:	f109 39ff 	add.w	r9, r9, #4294967295
        ei = (E->p[nblimbs] >> bufsize) & 1;
   e1a1e:	fa22 f209 	lsr.w	r2, r2, r9
        if( ei == 0 && state == 0 )
   e1a22:	f012 0201 	ands.w	r2, r2, #1
   e1a26:	d112      	bne.n	e1a4e <mbedtls_mpi_exp_mod+0x33e>
   e1a28:	f1b8 0f00 	cmp.w	r8, #0
   e1a2c:	d0c8      	beq.n	e19c0 <mbedtls_mpi_exp_mod+0x2b0>
        if( ei == 0 && state == 1 )
   e1a2e:	f1b8 0f01 	cmp.w	r8, #1
   e1a32:	d10c      	bne.n	e1a4e <mbedtls_mpi_exp_mod+0x33e>
            MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
   e1a34:	aa0b      	add	r2, sp, #44	; 0x2c
   e1a36:	9200      	str	r2, [sp, #0]
   e1a38:	4629      	mov	r1, r5
   e1a3a:	4622      	mov	r2, r4
   e1a3c:	4628      	mov	r0, r5
   e1a3e:	9305      	str	r3, [sp, #20]
   e1a40:	f7ff fa37 	bl	e0eb2 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
   e1a44:	4602      	mov	r2, r0
   e1a46:	2800      	cmp	r0, #0
   e1a48:	d136      	bne.n	e1ab8 <mbedtls_mpi_exp_mod+0x3a8>
   e1a4a:	9b05      	ldr	r3, [sp, #20]
   e1a4c:	e7b8      	b.n	e19c0 <mbedtls_mpi_exp_mod+0x2b0>
        nbits++;
   e1a4e:	3701      	adds	r7, #1
        wbits |= ( ei << ( wsize - nbits ) );
   e1a50:	1bf1      	subs	r1, r6, r7
   e1a52:	408a      	lsls	r2, r1
        if( nbits == wsize )
   e1a54:	42be      	cmp	r6, r7
        wbits |= ( ei << ( wsize - nbits ) );
   e1a56:	ea4a 0a02 	orr.w	sl, sl, r2
        if( nbits == wsize )
   e1a5a:	d1d3      	bne.n	e1a04 <mbedtls_mpi_exp_mod+0x2f4>
            for( i = 0; i < wsize; i++ )
   e1a5c:	f04f 0800 	mov.w	r8, #0
                MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
   e1a60:	aa0b      	add	r2, sp, #44	; 0x2c
   e1a62:	9200      	str	r2, [sp, #0]
   e1a64:	4629      	mov	r1, r5
   e1a66:	4622      	mov	r2, r4
   e1a68:	4628      	mov	r0, r5
   e1a6a:	9305      	str	r3, [sp, #20]
   e1a6c:	f7ff fa21 	bl	e0eb2 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
   e1a70:	4602      	mov	r2, r0
   e1a72:	bb08      	cbnz	r0, e1ab8 <mbedtls_mpi_exp_mod+0x3a8>
            for( i = 0; i < wsize; i++ )
   e1a74:	f108 0801 	add.w	r8, r8, #1
   e1a78:	4547      	cmp	r7, r8
   e1a7a:	9b05      	ldr	r3, [sp, #20]
   e1a7c:	d8f0      	bhi.n	e1a60 <mbedtls_mpi_exp_mod+0x350>
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[wbits], N, mm, &T ) );
   e1a7e:	aa0b      	add	r2, sp, #44	; 0x2c
   e1a80:	a814      	add	r0, sp, #80	; 0x50
   e1a82:	210c      	movs	r1, #12
   e1a84:	9200      	str	r2, [sp, #0]
   e1a86:	fb01 010a 	mla	r1, r1, sl, r0
   e1a8a:	4622      	mov	r2, r4
   e1a8c:	4628      	mov	r0, r5
   e1a8e:	f7ff fa10 	bl	e0eb2 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
   e1a92:	4602      	mov	r2, r0
   e1a94:	b980      	cbnz	r0, e1ab8 <mbedtls_mpi_exp_mod+0x3a8>
            state--;
   e1a96:	f8dd 8010 	ldr.w	r8, [sp, #16]
            nbits = 0;
   e1a9a:	4607      	mov	r7, r0
            wbits = 0;
   e1a9c:	4682      	mov	sl, r0
   e1a9e:	e7d4      	b.n	e1a4a <mbedtls_mpi_exp_mod+0x33a>
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[1], N, mm, &T ) );
   e1aa0:	4622      	mov	r2, r4
   e1aa2:	f8cd 8000 	str.w	r8, [sp]
   e1aa6:	a917      	add	r1, sp, #92	; 0x5c
   e1aa8:	4628      	mov	r0, r5
   e1aaa:	9304      	str	r3, [sp, #16]
   e1aac:	f7ff fa01 	bl	e0eb2 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
   e1ab0:	9b04      	ldr	r3, [sp, #16]
   e1ab2:	4602      	mov	r2, r0
   e1ab4:	2800      	cmp	r0, #0
   e1ab6:	d0a2      	beq.n	e19fe <mbedtls_mpi_exp_mod+0x2ee>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
    }

cleanup:

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
   e1ab8:	1e74      	subs	r4, r6, #1
   e1aba:	2301      	movs	r3, #1
   e1abc:	fa03 f404 	lsl.w	r4, r3, r4
   e1ac0:	fa03 f606 	lsl.w	r6, r3, r6
        mbedtls_mpi_free( &W[i] );
   e1ac4:	250c      	movs	r5, #12
    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
   e1ac6:	42a6      	cmp	r6, r4
   e1ac8:	9202      	str	r2, [sp, #8]
   e1aca:	d92c      	bls.n	e1b26 <mbedtls_mpi_exp_mod+0x416>
        mbedtls_mpi_free( &W[i] );
   e1acc:	ab14      	add	r3, sp, #80	; 0x50
   e1ace:	fb05 3004 	mla	r0, r5, r4, r3
   e1ad2:	f7fe ff7c 	bl	e09ce <mbedtls_mpi_free>
    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
   e1ad6:	3401      	adds	r4, #1
   e1ad8:	9a02      	ldr	r2, [sp, #8]
   e1ada:	e7f4      	b.n	e1ac6 <mbedtls_mpi_exp_mod+0x3b6>
    mbedtls_mpi_uint z = 1;
   e1adc:	2201      	movs	r2, #1
   e1ade:	a907      	add	r1, sp, #28
    U.n = U.s = (int) z;
   e1ae0:	e9cd 2211 	strd	r2, r2, [sp, #68]	; 0x44
    mbedtls_mpi_uint z = 1;
   e1ae4:	9207      	str	r2, [sp, #28]
    U.p = &z;
   e1ae6:	9113      	str	r1, [sp, #76]	; 0x4c
    return( mpi_montmul( A, &U, N, mm, T ) );
   e1ae8:	4622      	mov	r2, r4
   e1aea:	f8cd 8000 	str.w	r8, [sp]
   e1aee:	a911      	add	r1, sp, #68	; 0x44
   e1af0:	4628      	mov	r0, r5
   e1af2:	f7ff f9de 	bl	e0eb2 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
   e1af6:	4602      	mov	r2, r0
   e1af8:	2800      	cmp	r0, #0
   e1afa:	d1dd      	bne.n	e1ab8 <mbedtls_mpi_exp_mod+0x3a8>
    if( neg && E->n != 0 && ( E->p[0] & 1 ) != 0 )
   e1afc:	9b03      	ldr	r3, [sp, #12]
   e1afe:	3301      	adds	r3, #1
   e1b00:	d1da      	bne.n	e1ab8 <mbedtls_mpi_exp_mod+0x3a8>
   e1b02:	9b02      	ldr	r3, [sp, #8]
   e1b04:	685b      	ldr	r3, [r3, #4]
   e1b06:	2b00      	cmp	r3, #0
   e1b08:	d0d6      	beq.n	e1ab8 <mbedtls_mpi_exp_mod+0x3a8>
   e1b0a:	9b02      	ldr	r3, [sp, #8]
   e1b0c:	689b      	ldr	r3, [r3, #8]
   e1b0e:	681b      	ldr	r3, [r3, #0]
   e1b10:	07db      	lsls	r3, r3, #31
   e1b12:	d5d1      	bpl.n	e1ab8 <mbedtls_mpi_exp_mod+0x3a8>
        X->s = -1;
   e1b14:	9b03      	ldr	r3, [sp, #12]
   e1b16:	602b      	str	r3, [r5, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
   e1b18:	462a      	mov	r2, r5
   e1b1a:	4621      	mov	r1, r4
   e1b1c:	4628      	mov	r0, r5
   e1b1e:	f7ff fb1b 	bl	e1158 <mbedtls_mpi_add_mpi>
   e1b22:	4602      	mov	r2, r0
   e1b24:	e7c8      	b.n	e1ab8 <mbedtls_mpi_exp_mod+0x3a8>

    mbedtls_mpi_free( &W[1] ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &Apos );
   e1b26:	a817      	add	r0, sp, #92	; 0x5c
   e1b28:	f7fe ff51 	bl	e09ce <mbedtls_mpi_free>
   e1b2c:	a80b      	add	r0, sp, #44	; 0x2c
   e1b2e:	f7fe ff4e 	bl	e09ce <mbedtls_mpi_free>
   e1b32:	a80e      	add	r0, sp, #56	; 0x38
   e1b34:	f7fe ff4b 	bl	e09ce <mbedtls_mpi_free>

    if( _RR == NULL || _RR->p == NULL )
   e1b38:	f8dd 3678 	ldr.w	r3, [sp, #1656]	; 0x678
   e1b3c:	9a02      	ldr	r2, [sp, #8]
   e1b3e:	b10b      	cbz	r3, e1b44 <mbedtls_mpi_exp_mod+0x434>
   e1b40:	689b      	ldr	r3, [r3, #8]
   e1b42:	b923      	cbnz	r3, e1b4e <mbedtls_mpi_exp_mod+0x43e>
        mbedtls_mpi_free( &RR );
   e1b44:	a808      	add	r0, sp, #32
   e1b46:	9202      	str	r2, [sp, #8]
   e1b48:	f7fe ff41 	bl	e09ce <mbedtls_mpi_free>
   e1b4c:	9a02      	ldr	r2, [sp, #8]

    return( ret );
}
   e1b4e:	4610      	mov	r0, r2
   e1b50:	f20d 6d54 	addw	sp, sp, #1620	; 0x654
   e1b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
   e1b58:	f06f 0203 	mvn.w	r2, #3
   e1b5c:	e7f7      	b.n	e1b4e <mbedtls_mpi_exp_mod+0x43e>

000e1b5e <mbedtls_mpi_gcd>:

/*
 * Greatest common divisor: G = gcd(A, B)  (HAC 14.54)
 */
int mbedtls_mpi_gcd( mbedtls_mpi *G, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
   e1b5e:	b5f0      	push	{r4, r5, r6, r7, lr}
   e1b60:	b08b      	sub	sp, #44	; 0x2c
    X->n = 0;
   e1b62:	2300      	movs	r3, #0
   e1b64:	2701      	movs	r7, #1
{
   e1b66:	4605      	mov	r5, r0
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    mbedtls_mpi_init( &TG ); mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
   e1b68:	a804      	add	r0, sp, #16
    X->n = 0;
   e1b6a:	e9cd 7301 	strd	r7, r3, [sp, #4]
    X->s = 1;
   e1b6e:	e9cd 3703 	strd	r3, r7, [sp, #12]
    X->p = NULL;
   e1b72:	e9cd 3305 	strd	r3, r3, [sp, #20]
    X->n = 0;
   e1b76:	e9cd 7307 	strd	r7, r3, [sp, #28]
{
   e1b7a:	4616      	mov	r6, r2
    X->p = NULL;
   e1b7c:	9309      	str	r3, [sp, #36]	; 0x24
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
   e1b7e:	f7fe ff9d 	bl	e0abc <mbedtls_mpi_copy>
   e1b82:	4604      	mov	r4, r0
   e1b84:	2800      	cmp	r0, #0
   e1b86:	d14b      	bne.n	e1c20 <mbedtls_mpi_gcd+0xc2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
   e1b88:	4631      	mov	r1, r6
   e1b8a:	a807      	add	r0, sp, #28
   e1b8c:	f7fe ff96 	bl	e0abc <mbedtls_mpi_copy>
   e1b90:	4604      	mov	r4, r0
   e1b92:	2800      	cmp	r0, #0
   e1b94:	d144      	bne.n	e1c20 <mbedtls_mpi_gcd+0xc2>

    lz = mbedtls_mpi_lsb( &TA );
   e1b96:	a804      	add	r0, sp, #16
   e1b98:	f7ff f81b 	bl	e0bd2 <mbedtls_mpi_lsb>
   e1b9c:	4606      	mov	r6, r0
    lzt = mbedtls_mpi_lsb( &TB );
   e1b9e:	a807      	add	r0, sp, #28
   e1ba0:	f7ff f817 	bl	e0bd2 <mbedtls_mpi_lsb>

    if( lzt < lz )
   e1ba4:	4286      	cmp	r6, r0
   e1ba6:	bf28      	it	cs
   e1ba8:	4606      	movcs	r6, r0
        lz = lzt;

    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, lz ) );
   e1baa:	4631      	mov	r1, r6
   e1bac:	a804      	add	r0, sp, #16
   e1bae:	f7ff f90d 	bl	e0dcc <mbedtls_mpi_shift_r>
   e1bb2:	4604      	mov	r4, r0
   e1bb4:	2800      	cmp	r0, #0
   e1bb6:	d133      	bne.n	e1c20 <mbedtls_mpi_gcd+0xc2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, lz ) );
   e1bb8:	4631      	mov	r1, r6
   e1bba:	a807      	add	r0, sp, #28
   e1bbc:	f7ff f906 	bl	e0dcc <mbedtls_mpi_shift_r>
   e1bc0:	4604      	mov	r4, r0
   e1bc2:	bb68      	cbnz	r0, e1c20 <mbedtls_mpi_gcd+0xc2>

    TA.s = TB.s = 1;
   e1bc4:	9707      	str	r7, [sp, #28]
   e1bc6:	9704      	str	r7, [sp, #16]

    while( mbedtls_mpi_cmp_int( &TA, 0 ) != 0 )
   e1bc8:	2100      	movs	r1, #0
   e1bca:	a804      	add	r0, sp, #16
   e1bcc:	f7ff fa19 	bl	e1002 <mbedtls_mpi_cmp_int>
   e1bd0:	2800      	cmp	r0, #0
   e1bd2:	d03c      	beq.n	e1c4e <mbedtls_mpi_gcd+0xf0>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, mbedtls_mpi_lsb( &TA ) ) );
   e1bd4:	a804      	add	r0, sp, #16
   e1bd6:	f7fe fffc 	bl	e0bd2 <mbedtls_mpi_lsb>
   e1bda:	4601      	mov	r1, r0
   e1bdc:	a804      	add	r0, sp, #16
   e1bde:	f7ff f8f5 	bl	e0dcc <mbedtls_mpi_shift_r>
   e1be2:	4604      	mov	r4, r0
   e1be4:	b9e0      	cbnz	r0, e1c20 <mbedtls_mpi_gcd+0xc2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, mbedtls_mpi_lsb( &TB ) ) );
   e1be6:	a807      	add	r0, sp, #28
   e1be8:	f7fe fff3 	bl	e0bd2 <mbedtls_mpi_lsb>
   e1bec:	4601      	mov	r1, r0
   e1bee:	a807      	add	r0, sp, #28
   e1bf0:	f7ff f8ec 	bl	e0dcc <mbedtls_mpi_shift_r>
   e1bf4:	4604      	mov	r4, r0
   e1bf6:	b998      	cbnz	r0, e1c20 <mbedtls_mpi_gcd+0xc2>

        if( mbedtls_mpi_cmp_mpi( &TA, &TB ) >= 0 )
   e1bf8:	a907      	add	r1, sp, #28
   e1bfa:	a804      	add	r0, sp, #16
   e1bfc:	f7ff f9c0 	bl	e0f80 <mbedtls_mpi_cmp_mpi>
   e1c00:	2800      	cmp	r0, #0
   e1c02:	db19      	blt.n	e1c38 <mbedtls_mpi_gcd+0xda>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TA, &TA, &TB ) );
   e1c04:	a904      	add	r1, sp, #16
   e1c06:	aa07      	add	r2, sp, #28
   e1c08:	4608      	mov	r0, r1
   e1c0a:	f7ff fa69 	bl	e10e0 <mbedtls_mpi_sub_abs>
   e1c0e:	4604      	mov	r4, r0
   e1c10:	b930      	cbnz	r0, e1c20 <mbedtls_mpi_gcd+0xc2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, 1 ) );
   e1c12:	2101      	movs	r1, #1
   e1c14:	a804      	add	r0, sp, #16
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TB, &TB, &TA ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, 1 ) );
   e1c16:	f7ff f8d9 	bl	e0dcc <mbedtls_mpi_shift_r>
   e1c1a:	4604      	mov	r4, r0
   e1c1c:	2800      	cmp	r0, #0
   e1c1e:	d0d3      	beq.n	e1bc8 <mbedtls_mpi_gcd+0x6a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &TB, lz ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( G, &TB ) );

cleanup:

    mbedtls_mpi_free( &TG ); mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TB );
   e1c20:	a801      	add	r0, sp, #4
   e1c22:	f7fe fed4 	bl	e09ce <mbedtls_mpi_free>
   e1c26:	a804      	add	r0, sp, #16
   e1c28:	f7fe fed1 	bl	e09ce <mbedtls_mpi_free>
   e1c2c:	a807      	add	r0, sp, #28
   e1c2e:	f7fe fece 	bl	e09ce <mbedtls_mpi_free>

    return( ret );
}
   e1c32:	4620      	mov	r0, r4
   e1c34:	b00b      	add	sp, #44	; 0x2c
   e1c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TB, &TB, &TA ) );
   e1c38:	a907      	add	r1, sp, #28
   e1c3a:	aa04      	add	r2, sp, #16
   e1c3c:	4608      	mov	r0, r1
   e1c3e:	f7ff fa4f 	bl	e10e0 <mbedtls_mpi_sub_abs>
   e1c42:	4604      	mov	r4, r0
   e1c44:	2800      	cmp	r0, #0
   e1c46:	d1eb      	bne.n	e1c20 <mbedtls_mpi_gcd+0xc2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, 1 ) );
   e1c48:	2101      	movs	r1, #1
   e1c4a:	a807      	add	r0, sp, #28
   e1c4c:	e7e3      	b.n	e1c16 <mbedtls_mpi_gcd+0xb8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &TB, lz ) );
   e1c4e:	4631      	mov	r1, r6
   e1c50:	a807      	add	r0, sp, #28
   e1c52:	f7ff f868 	bl	e0d26 <mbedtls_mpi_shift_l>
   e1c56:	4604      	mov	r4, r0
   e1c58:	2800      	cmp	r0, #0
   e1c5a:	d1e1      	bne.n	e1c20 <mbedtls_mpi_gcd+0xc2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( G, &TB ) );
   e1c5c:	a907      	add	r1, sp, #28
   e1c5e:	4628      	mov	r0, r5
   e1c60:	f7fe ff2c 	bl	e0abc <mbedtls_mpi_copy>
   e1c64:	4604      	mov	r4, r0
cleanup:
   e1c66:	e7db      	b.n	e1c20 <mbedtls_mpi_gcd+0xc2>

000e1c68 <mbedtls_mpi_fill_random>:
 * deterministic, eg for tests).
 */
int mbedtls_mpi_fill_random( mbedtls_mpi *X, size_t size,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
   e1c68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    int ret;
    size_t const limbs = CHARS_TO_LIMBS( size );
   e1c6c:	f011 0503 	ands.w	r5, r1, #3
   e1c70:	bf18      	it	ne
   e1c72:	2501      	movne	r5, #1
{
   e1c74:	4699      	mov	r9, r3

    MPI_VALIDATE_RET( X     != NULL );
    MPI_VALIDATE_RET( f_rng != NULL );

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
   e1c76:	6843      	ldr	r3, [r0, #4]
    size_t const limbs = CHARS_TO_LIMBS( size );
   e1c78:	eb05 0591 	add.w	r5, r5, r1, lsr #2
    if( X->n != limbs )
   e1c7c:	42ab      	cmp	r3, r5
{
   e1c7e:	4604      	mov	r4, r0
   e1c80:	460f      	mov	r7, r1
   e1c82:	4690      	mov	r8, r2
    if( X->n != limbs )
   e1c84:	d108      	bne.n	e1c98 <mbedtls_mpi_fill_random+0x30>
    {
        mbedtls_mpi_free( X );
        mbedtls_mpi_init( X );
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
   e1c86:	2100      	movs	r1, #0
   e1c88:	4620      	mov	r0, r4
   e1c8a:	f7fe ff75 	bl	e0b78 <mbedtls_mpi_lset>
   e1c8e:	4606      	mov	r6, r0
   e1c90:	b188      	cbz	r0, e1cb6 <mbedtls_mpi_fill_random+0x4e>

    mpi_bigendian_to_host( X->p, limbs );

cleanup:
    return( ret );
}
   e1c92:	4630      	mov	r0, r6
   e1c94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        mbedtls_mpi_free( X );
   e1c98:	f7fe fe99 	bl	e09ce <mbedtls_mpi_free>
    X->n = 0;
   e1c9c:	2300      	movs	r3, #0
   e1c9e:	2201      	movs	r2, #1
   e1ca0:	e9c4 2300 	strd	r2, r3, [r4]
    X->p = NULL;
   e1ca4:	60a3      	str	r3, [r4, #8]
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
   e1ca6:	4629      	mov	r1, r5
   e1ca8:	4620      	mov	r0, r4
   e1caa:	f7fe fea2 	bl	e09f2 <mbedtls_mpi_grow>
   e1cae:	4606      	mov	r6, r0
   e1cb0:	2800      	cmp	r0, #0
   e1cb2:	d0e8      	beq.n	e1c86 <mbedtls_mpi_fill_random+0x1e>
   e1cb4:	e7ed      	b.n	e1c92 <mbedtls_mpi_fill_random+0x2a>
    f_rng( p_rng, Xp + overhead, size );
   e1cb6:	68a1      	ldr	r1, [r4, #8]
    size_t const overhead = ( limbs * ciL ) - size;
   e1cb8:	ebc7 0385 	rsb	r3, r7, r5, lsl #2
    f_rng( p_rng, Xp + overhead, size );
   e1cbc:	463a      	mov	r2, r7
   e1cbe:	4419      	add	r1, r3
   e1cc0:	4648      	mov	r0, r9
   e1cc2:	47c0      	blx	r8
    if( limbs == 0 )
   e1cc4:	2d00      	cmp	r5, #0
   e1cc6:	d0e4      	beq.n	e1c92 <mbedtls_mpi_fill_random+0x2a>
   e1cc8:	68a0      	ldr	r0, [r4, #8]
   e1cca:	4629      	mov	r1, r5
   e1ccc:	f7fe fe68 	bl	e09a0 <_ZL21mpi_bigendian_to_hostPmj.part.0>
    return( ret );
   e1cd0:	e7df      	b.n	e1c92 <mbedtls_mpi_fill_random+0x2a>

000e1cd2 <mbedtls_mpi_inv_mod>:

/*
 * Modular inverse: X = A^-1 mod N  (HAC 14.61 / 14.64)
 */
int mbedtls_mpi_inv_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *N )
{
   e1cd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e1cd6:	4606      	mov	r6, r0
   e1cd8:	b09c      	sub	sp, #112	; 0x70
   e1cda:	4688      	mov	r8, r1
    mbedtls_mpi G, TA, TU, U1, U2, TB, TV, V1, V2;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( N != NULL );

    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
   e1cdc:	4610      	mov	r0, r2
   e1cde:	2101      	movs	r1, #1
{
   e1ce0:	4615      	mov	r5, r2
    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
   e1ce2:	f7ff f98e 	bl	e1002 <mbedtls_mpi_cmp_int>
   e1ce6:	2800      	cmp	r0, #0
   e1ce8:	f340 8144 	ble.w	e1f74 <mbedtls_mpi_inv_mod+0x2a2>
    X->n = 0;
   e1cec:	2300      	movs	r3, #0
   e1cee:	2701      	movs	r7, #1

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TU ); mbedtls_mpi_init( &U1 ); mbedtls_mpi_init( &U2 );
    mbedtls_mpi_init( &G ); mbedtls_mpi_init( &TB ); mbedtls_mpi_init( &TV );
    mbedtls_mpi_init( &V1 ); mbedtls_mpi_init( &V2 );

    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
   e1cf0:	462a      	mov	r2, r5
   e1cf2:	4641      	mov	r1, r8
   e1cf4:	a801      	add	r0, sp, #4
    X->n = 0;
   e1cf6:	e9cd 7304 	strd	r7, r3, [sp, #16]
    X->s = 1;
   e1cfa:	e9cd 3706 	strd	r3, r7, [sp, #24]
    X->p = NULL;
   e1cfe:	e9cd 3308 	strd	r3, r3, [sp, #32]
    X->n = 0;
   e1d02:	e9cd 730a 	strd	r7, r3, [sp, #40]	; 0x28
    X->s = 1;
   e1d06:	e9cd 370c 	strd	r3, r7, [sp, #48]	; 0x30
    X->p = NULL;
   e1d0a:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
    X->n = 0;
   e1d0e:	e9cd 7301 	strd	r7, r3, [sp, #4]
   e1d12:	e9cd 7310 	strd	r7, r3, [sp, #64]	; 0x40
    X->s = 1;
   e1d16:	e9cd 3712 	strd	r3, r7, [sp, #72]	; 0x48
    X->p = NULL;
   e1d1a:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
    X->n = 0;
   e1d1e:	e9cd 7316 	strd	r7, r3, [sp, #88]	; 0x58
    X->s = 1;
   e1d22:	e9cd 3718 	strd	r3, r7, [sp, #96]	; 0x60
    X->p = NULL;
   e1d26:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
   e1d2a:	9303      	str	r3, [sp, #12]
    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
   e1d2c:	f7ff ff17 	bl	e1b5e <mbedtls_mpi_gcd>
   e1d30:	4604      	mov	r4, r0
   e1d32:	2800      	cmp	r0, #0
   e1d34:	d154      	bne.n	e1de0 <mbedtls_mpi_inv_mod+0x10e>

    if( mbedtls_mpi_cmp_int( &G, 1 ) != 0 )
   e1d36:	4639      	mov	r1, r7
   e1d38:	a801      	add	r0, sp, #4
   e1d3a:	f7ff f962 	bl	e1002 <mbedtls_mpi_cmp_int>
   e1d3e:	2800      	cmp	r0, #0
   e1d40:	f040 8115 	bne.w	e1f6e <mbedtls_mpi_inv_mod+0x29c>
    {
        ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
        goto cleanup;
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &TA, A, N ) );
   e1d44:	462a      	mov	r2, r5
   e1d46:	4641      	mov	r1, r8
   e1d48:	a804      	add	r0, sp, #16
   e1d4a:	f7ff fcae 	bl	e16aa <mbedtls_mpi_mod_mpi>
   e1d4e:	4604      	mov	r4, r0
   e1d50:	2800      	cmp	r0, #0
   e1d52:	d145      	bne.n	e1de0 <mbedtls_mpi_inv_mod+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TU, &TA ) );
   e1d54:	a904      	add	r1, sp, #16
   e1d56:	a807      	add	r0, sp, #28
   e1d58:	f7fe feb0 	bl	e0abc <mbedtls_mpi_copy>
   e1d5c:	4604      	mov	r4, r0
   e1d5e:	2800      	cmp	r0, #0
   e1d60:	d13e      	bne.n	e1de0 <mbedtls_mpi_inv_mod+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, N ) );
   e1d62:	4629      	mov	r1, r5
   e1d64:	a810      	add	r0, sp, #64	; 0x40
   e1d66:	f7fe fea9 	bl	e0abc <mbedtls_mpi_copy>
   e1d6a:	4604      	mov	r4, r0
   e1d6c:	2800      	cmp	r0, #0
   e1d6e:	d137      	bne.n	e1de0 <mbedtls_mpi_inv_mod+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TV, N ) );
   e1d70:	4629      	mov	r1, r5
   e1d72:	a813      	add	r0, sp, #76	; 0x4c
   e1d74:	f7fe fea2 	bl	e0abc <mbedtls_mpi_copy>
   e1d78:	4604      	mov	r4, r0
   e1d7a:	2800      	cmp	r0, #0
   e1d7c:	d130      	bne.n	e1de0 <mbedtls_mpi_inv_mod+0x10e>

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U1, 1 ) );
   e1d7e:	4639      	mov	r1, r7
   e1d80:	a80a      	add	r0, sp, #40	; 0x28
   e1d82:	f7fe fef9 	bl	e0b78 <mbedtls_mpi_lset>
   e1d86:	4604      	mov	r4, r0
   e1d88:	bb50      	cbnz	r0, e1de0 <mbedtls_mpi_inv_mod+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U2, 0 ) );
   e1d8a:	4601      	mov	r1, r0
   e1d8c:	a80d      	add	r0, sp, #52	; 0x34
   e1d8e:	f7fe fef3 	bl	e0b78 <mbedtls_mpi_lset>
   e1d92:	4604      	mov	r4, r0
   e1d94:	bb20      	cbnz	r0, e1de0 <mbedtls_mpi_inv_mod+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V1, 0 ) );
   e1d96:	4601      	mov	r1, r0
   e1d98:	a816      	add	r0, sp, #88	; 0x58
   e1d9a:	f7fe feed 	bl	e0b78 <mbedtls_mpi_lset>
   e1d9e:	4604      	mov	r4, r0
   e1da0:	b9f0      	cbnz	r0, e1de0 <mbedtls_mpi_inv_mod+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V2, 1 ) );
   e1da2:	4639      	mov	r1, r7
   e1da4:	a819      	add	r0, sp, #100	; 0x64
   e1da6:	f7fe fee7 	bl	e0b78 <mbedtls_mpi_lset>
   e1daa:	4604      	mov	r4, r0
   e1dac:	b9c0      	cbnz	r0, e1de0 <mbedtls_mpi_inv_mod+0x10e>

    do
    {
        while( ( TU.p[0] & 1 ) == 0 )
   e1dae:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e1db0:	681b      	ldr	r3, [r3, #0]
   e1db2:	07df      	lsls	r7, r3, #31
   e1db4:	d449      	bmi.n	e1e4a <mbedtls_mpi_inv_mod+0x178>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TU, 1 ) );
   e1db6:	2101      	movs	r1, #1
   e1db8:	a807      	add	r0, sp, #28
   e1dba:	f7ff f807 	bl	e0dcc <mbedtls_mpi_shift_r>
   e1dbe:	4604      	mov	r4, r0
   e1dc0:	b970      	cbnz	r0, e1de0 <mbedtls_mpi_inv_mod+0x10e>

            if( ( U1.p[0] & 1 ) != 0 || ( U2.p[0] & 1 ) != 0 )
   e1dc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   e1dc4:	681b      	ldr	r3, [r3, #0]
   e1dc6:	07dc      	lsls	r4, r3, #31
   e1dc8:	d429      	bmi.n	e1e1e <mbedtls_mpi_inv_mod+0x14c>
   e1dca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   e1dcc:	681b      	ldr	r3, [r3, #0]
   e1dce:	07d8      	lsls	r0, r3, #31
   e1dd0:	d425      	bmi.n	e1e1e <mbedtls_mpi_inv_mod+0x14c>
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &U1, &U1, &TB ) );
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &TA ) );
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U1, 1 ) );
   e1dd2:	2101      	movs	r1, #1
   e1dd4:	a80a      	add	r0, sp, #40	; 0x28
   e1dd6:	f7fe fff9 	bl	e0dcc <mbedtls_mpi_shift_r>
   e1dda:	4604      	mov	r4, r0
   e1ddc:	2800      	cmp	r0, #0
   e1dde:	d02f      	beq.n	e1e40 <mbedtls_mpi_inv_mod+0x16e>

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &V1 ) );

cleanup:

    mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TU ); mbedtls_mpi_free( &U1 ); mbedtls_mpi_free( &U2 );
   e1de0:	a804      	add	r0, sp, #16
   e1de2:	f7fe fdf4 	bl	e09ce <mbedtls_mpi_free>
   e1de6:	a807      	add	r0, sp, #28
   e1de8:	f7fe fdf1 	bl	e09ce <mbedtls_mpi_free>
   e1dec:	a80a      	add	r0, sp, #40	; 0x28
   e1dee:	f7fe fdee 	bl	e09ce <mbedtls_mpi_free>
   e1df2:	a80d      	add	r0, sp, #52	; 0x34
   e1df4:	f7fe fdeb 	bl	e09ce <mbedtls_mpi_free>
    mbedtls_mpi_free( &G ); mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TV );
   e1df8:	a801      	add	r0, sp, #4
   e1dfa:	f7fe fde8 	bl	e09ce <mbedtls_mpi_free>
   e1dfe:	a810      	add	r0, sp, #64	; 0x40
   e1e00:	f7fe fde5 	bl	e09ce <mbedtls_mpi_free>
   e1e04:	a813      	add	r0, sp, #76	; 0x4c
   e1e06:	f7fe fde2 	bl	e09ce <mbedtls_mpi_free>
    mbedtls_mpi_free( &V1 ); mbedtls_mpi_free( &V2 );
   e1e0a:	a816      	add	r0, sp, #88	; 0x58
   e1e0c:	f7fe fddf 	bl	e09ce <mbedtls_mpi_free>
   e1e10:	a819      	add	r0, sp, #100	; 0x64
   e1e12:	f7fe fddc 	bl	e09ce <mbedtls_mpi_free>

    return( ret );
}
   e1e16:	4620      	mov	r0, r4
   e1e18:	b01c      	add	sp, #112	; 0x70
   e1e1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &U1, &U1, &TB ) );
   e1e1e:	a90a      	add	r1, sp, #40	; 0x28
   e1e20:	aa10      	add	r2, sp, #64	; 0x40
   e1e22:	4608      	mov	r0, r1
   e1e24:	f7ff f998 	bl	e1158 <mbedtls_mpi_add_mpi>
   e1e28:	4604      	mov	r4, r0
   e1e2a:	2800      	cmp	r0, #0
   e1e2c:	d1d8      	bne.n	e1de0 <mbedtls_mpi_inv_mod+0x10e>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &TA ) );
   e1e2e:	a90d      	add	r1, sp, #52	; 0x34
   e1e30:	aa04      	add	r2, sp, #16
   e1e32:	4608      	mov	r0, r1
   e1e34:	f7ff f9b2 	bl	e119c <mbedtls_mpi_sub_mpi>
   e1e38:	4604      	mov	r4, r0
   e1e3a:	2800      	cmp	r0, #0
   e1e3c:	d0c9      	beq.n	e1dd2 <mbedtls_mpi_inv_mod+0x100>
   e1e3e:	e7cf      	b.n	e1de0 <mbedtls_mpi_inv_mod+0x10e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
   e1e40:	2101      	movs	r1, #1
   e1e42:	a80d      	add	r0, sp, #52	; 0x34
   e1e44:	f7fe ffc2 	bl	e0dcc <mbedtls_mpi_shift_r>
   e1e48:	e7af      	b.n	e1daa <mbedtls_mpi_inv_mod+0xd8>
        while( ( TV.p[0] & 1 ) == 0 )
   e1e4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e1e4c:	681b      	ldr	r3, [r3, #0]
   e1e4e:	07d9      	lsls	r1, r3, #31
   e1e50:	d42e      	bmi.n	e1eb0 <mbedtls_mpi_inv_mod+0x1de>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TV, 1 ) );
   e1e52:	2101      	movs	r1, #1
   e1e54:	a813      	add	r0, sp, #76	; 0x4c
   e1e56:	f7fe ffb9 	bl	e0dcc <mbedtls_mpi_shift_r>
   e1e5a:	4604      	mov	r4, r0
   e1e5c:	2800      	cmp	r0, #0
   e1e5e:	d1bf      	bne.n	e1de0 <mbedtls_mpi_inv_mod+0x10e>
            if( ( V1.p[0] & 1 ) != 0 || ( V2.p[0] & 1 ) != 0 )
   e1e60:	9b18      	ldr	r3, [sp, #96]	; 0x60
   e1e62:	681b      	ldr	r3, [r3, #0]
   e1e64:	07da      	lsls	r2, r3, #31
   e1e66:	d412      	bmi.n	e1e8e <mbedtls_mpi_inv_mod+0x1bc>
   e1e68:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   e1e6a:	681b      	ldr	r3, [r3, #0]
   e1e6c:	07db      	lsls	r3, r3, #31
   e1e6e:	d40e      	bmi.n	e1e8e <mbedtls_mpi_inv_mod+0x1bc>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V1, 1 ) );
   e1e70:	2101      	movs	r1, #1
   e1e72:	a816      	add	r0, sp, #88	; 0x58
   e1e74:	f7fe ffaa 	bl	e0dcc <mbedtls_mpi_shift_r>
   e1e78:	4604      	mov	r4, r0
   e1e7a:	2800      	cmp	r0, #0
   e1e7c:	d1b0      	bne.n	e1de0 <mbedtls_mpi_inv_mod+0x10e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V2, 1 ) );
   e1e7e:	2101      	movs	r1, #1
   e1e80:	a819      	add	r0, sp, #100	; 0x64
   e1e82:	f7fe ffa3 	bl	e0dcc <mbedtls_mpi_shift_r>
   e1e86:	4604      	mov	r4, r0
   e1e88:	2800      	cmp	r0, #0
   e1e8a:	d0de      	beq.n	e1e4a <mbedtls_mpi_inv_mod+0x178>
   e1e8c:	e7a8      	b.n	e1de0 <mbedtls_mpi_inv_mod+0x10e>
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, &TB ) );
   e1e8e:	a916      	add	r1, sp, #88	; 0x58
   e1e90:	aa10      	add	r2, sp, #64	; 0x40
   e1e92:	4608      	mov	r0, r1
   e1e94:	f7ff f960 	bl	e1158 <mbedtls_mpi_add_mpi>
   e1e98:	4604      	mov	r4, r0
   e1e9a:	2800      	cmp	r0, #0
   e1e9c:	d1a0      	bne.n	e1de0 <mbedtls_mpi_inv_mod+0x10e>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &TA ) );
   e1e9e:	a919      	add	r1, sp, #100	; 0x64
   e1ea0:	aa04      	add	r2, sp, #16
   e1ea2:	4608      	mov	r0, r1
   e1ea4:	f7ff f97a 	bl	e119c <mbedtls_mpi_sub_mpi>
   e1ea8:	4604      	mov	r4, r0
   e1eaa:	2800      	cmp	r0, #0
   e1eac:	d0e0      	beq.n	e1e70 <mbedtls_mpi_inv_mod+0x19e>
   e1eae:	e797      	b.n	e1de0 <mbedtls_mpi_inv_mod+0x10e>
        if( mbedtls_mpi_cmp_mpi( &TU, &TV ) >= 0 )
   e1eb0:	a913      	add	r1, sp, #76	; 0x4c
   e1eb2:	a807      	add	r0, sp, #28
   e1eb4:	f7ff f864 	bl	e0f80 <mbedtls_mpi_cmp_mpi>
   e1eb8:	2800      	cmp	r0, #0
   e1eba:	db2e      	blt.n	e1f1a <mbedtls_mpi_inv_mod+0x248>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TU, &TU, &TV ) );
   e1ebc:	a907      	add	r1, sp, #28
   e1ebe:	aa13      	add	r2, sp, #76	; 0x4c
   e1ec0:	4608      	mov	r0, r1
   e1ec2:	f7ff f96b 	bl	e119c <mbedtls_mpi_sub_mpi>
   e1ec6:	4604      	mov	r4, r0
   e1ec8:	2800      	cmp	r0, #0
   e1eca:	d189      	bne.n	e1de0 <mbedtls_mpi_inv_mod+0x10e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U1, &U1, &V1 ) );
   e1ecc:	a90a      	add	r1, sp, #40	; 0x28
   e1ece:	aa16      	add	r2, sp, #88	; 0x58
   e1ed0:	4608      	mov	r0, r1
   e1ed2:	f7ff f963 	bl	e119c <mbedtls_mpi_sub_mpi>
   e1ed6:	4604      	mov	r4, r0
   e1ed8:	2800      	cmp	r0, #0
   e1eda:	d181      	bne.n	e1de0 <mbedtls_mpi_inv_mod+0x10e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &V2 ) );
   e1edc:	aa19      	add	r2, sp, #100	; 0x64
   e1ede:	a90d      	add	r1, sp, #52	; 0x34
   e1ee0:	4608      	mov	r0, r1
   e1ee2:	f7ff f95b 	bl	e119c <mbedtls_mpi_sub_mpi>
   e1ee6:	4604      	mov	r4, r0
   e1ee8:	2800      	cmp	r0, #0
   e1eea:	f47f af79 	bne.w	e1de0 <mbedtls_mpi_inv_mod+0x10e>
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );
   e1eee:	2100      	movs	r1, #0
   e1ef0:	a807      	add	r0, sp, #28
   e1ef2:	f7ff f886 	bl	e1002 <mbedtls_mpi_cmp_int>
   e1ef6:	2800      	cmp	r0, #0
   e1ef8:	f47f af59 	bne.w	e1dae <mbedtls_mpi_inv_mod+0xdc>
    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
   e1efc:	2100      	movs	r1, #0
   e1efe:	a816      	add	r0, sp, #88	; 0x58
   e1f00:	f7ff f87f 	bl	e1002 <mbedtls_mpi_cmp_int>
   e1f04:	2800      	cmp	r0, #0
   e1f06:	da1d      	bge.n	e1f44 <mbedtls_mpi_inv_mod+0x272>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );
   e1f08:	a916      	add	r1, sp, #88	; 0x58
   e1f0a:	462a      	mov	r2, r5
   e1f0c:	4608      	mov	r0, r1
   e1f0e:	f7ff f923 	bl	e1158 <mbedtls_mpi_add_mpi>
   e1f12:	4604      	mov	r4, r0
   e1f14:	2800      	cmp	r0, #0
   e1f16:	d0f1      	beq.n	e1efc <mbedtls_mpi_inv_mod+0x22a>
   e1f18:	e762      	b.n	e1de0 <mbedtls_mpi_inv_mod+0x10e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TV, &TV, &TU ) );
   e1f1a:	a913      	add	r1, sp, #76	; 0x4c
   e1f1c:	aa07      	add	r2, sp, #28
   e1f1e:	4608      	mov	r0, r1
   e1f20:	f7ff f93c 	bl	e119c <mbedtls_mpi_sub_mpi>
   e1f24:	4604      	mov	r4, r0
   e1f26:	2800      	cmp	r0, #0
   e1f28:	f47f af5a 	bne.w	e1de0 <mbedtls_mpi_inv_mod+0x10e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, &U1 ) );
   e1f2c:	a916      	add	r1, sp, #88	; 0x58
   e1f2e:	aa0a      	add	r2, sp, #40	; 0x28
   e1f30:	4608      	mov	r0, r1
   e1f32:	f7ff f933 	bl	e119c <mbedtls_mpi_sub_mpi>
   e1f36:	4604      	mov	r4, r0
   e1f38:	2800      	cmp	r0, #0
   e1f3a:	f47f af51 	bne.w	e1de0 <mbedtls_mpi_inv_mod+0x10e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
   e1f3e:	aa0d      	add	r2, sp, #52	; 0x34
   e1f40:	a919      	add	r1, sp, #100	; 0x64
   e1f42:	e7cd      	b.n	e1ee0 <mbedtls_mpi_inv_mod+0x20e>
    while( mbedtls_mpi_cmp_mpi( &V1, N ) >= 0 )
   e1f44:	4629      	mov	r1, r5
   e1f46:	a816      	add	r0, sp, #88	; 0x58
   e1f48:	f7ff f81a 	bl	e0f80 <mbedtls_mpi_cmp_mpi>
   e1f4c:	2800      	cmp	r0, #0
   e1f4e:	db08      	blt.n	e1f62 <mbedtls_mpi_inv_mod+0x290>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, N ) );
   e1f50:	a916      	add	r1, sp, #88	; 0x58
   e1f52:	462a      	mov	r2, r5
   e1f54:	4608      	mov	r0, r1
   e1f56:	f7ff f921 	bl	e119c <mbedtls_mpi_sub_mpi>
   e1f5a:	4604      	mov	r4, r0
   e1f5c:	2800      	cmp	r0, #0
   e1f5e:	d0f1      	beq.n	e1f44 <mbedtls_mpi_inv_mod+0x272>
   e1f60:	e73e      	b.n	e1de0 <mbedtls_mpi_inv_mod+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &V1 ) );
   e1f62:	a916      	add	r1, sp, #88	; 0x58
   e1f64:	4630      	mov	r0, r6
   e1f66:	f7fe fda9 	bl	e0abc <mbedtls_mpi_copy>
   e1f6a:	4604      	mov	r4, r0
cleanup:
   e1f6c:	e738      	b.n	e1de0 <mbedtls_mpi_inv_mod+0x10e>
        ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
   e1f6e:	f06f 040d 	mvn.w	r4, #13
   e1f72:	e735      	b.n	e1de0 <mbedtls_mpi_inv_mod+0x10e>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
   e1f74:	f06f 0403 	mvn.w	r4, #3
   e1f78:	e74d      	b.n	e1e16 <mbedtls_mpi_inv_mod+0x144>
	...

000e1f7c <_ZL14aes_gen_tablesv>:
#define MUL(x,y) ( ( (x) && (y) ) ? pow[(log[(x)]+log[(y)]) % 255] : 0 )

static int aes_init_done = 0;

static void aes_gen_tables( void )
{
   e1f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e1f80:	f6ad 0d24 	subw	sp, sp, #2084	; 0x824
   e1f84:	ac08      	add	r4, sp, #32
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
   e1f86:	2301      	movs	r3, #1
   e1f88:	2200      	movs	r2, #0
   e1f8a:	4626      	mov	r6, r4
    {
        pow[i] = x;
        log[x] = i;
   e1f8c:	f50d 6184 	add.w	r1, sp, #1056	; 0x420
        x = ( x ^ XTIME( x ) ) & 0xFF;
   e1f90:	f013 0080 	ands.w	r0, r3, #128	; 0x80
        log[x] = i;
   e1f94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        x = ( x ^ XTIME( x ) ) & 0xFF;
   e1f98:	bf18      	it	ne
   e1f9a:	201b      	movne	r0, #27
        pow[i] = x;
   e1f9c:	f844 3b04 	str.w	r3, [r4], #4
    for( i = 0, x = 1; i < 256; i++ )
   e1fa0:	3201      	adds	r2, #1
        x = ( x ^ XTIME( x ) ) & 0xFF;
   e1fa2:	ea83 0343 	eor.w	r3, r3, r3, lsl #1
   e1fa6:	4043      	eors	r3, r0
    for( i = 0, x = 1; i < 256; i++ )
   e1fa8:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
        x = ( x ^ XTIME( x ) ) & 0xFF;
   e1fac:	b2db      	uxtb	r3, r3
    for( i = 0, x = 1; i < 256; i++ )
   e1fae:	d1ef      	bne.n	e1f90 <_ZL14aes_gen_tablesv+0x14>
   e1fb0:	4c6d      	ldr	r4, [pc, #436]	; (e2168 <_ZL14aes_gen_tablesv+0x1ec>)
    }

    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
   e1fb2:	2301      	movs	r3, #1
   e1fb4:	2200      	movs	r2, #0
    {
        RCON[i] = (uint32_t) x;
        x = XTIME( x ) & 0xFF;
   e1fb6:	f013 0080 	ands.w	r0, r3, #128	; 0x80
   e1fba:	bf18      	it	ne
   e1fbc:	201b      	movne	r0, #27
    for( i = 0, x = 1; i < 10; i++ )
   e1fbe:	3201      	adds	r2, #1
        RCON[i] = (uint32_t) x;
   e1fc0:	f844 3b04 	str.w	r3, [r4], #4
    for( i = 0, x = 1; i < 10; i++ )
   e1fc4:	2a0a      	cmp	r2, #10
        x = XTIME( x ) & 0xFF;
   e1fc6:	ea80 0343 	eor.w	r3, r0, r3, lsl #1
   e1fca:	b2db      	uxtb	r3, r3
    for( i = 0, x = 1; i < 10; i++ )
   e1fcc:	d1f3      	bne.n	e1fb6 <_ZL14aes_gen_tablesv+0x3a>
    }

    /*
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
   e1fce:	4d67      	ldr	r5, [pc, #412]	; (e216c <_ZL14aes_gen_tablesv+0x1f0>)
    RSb[0x63] = 0x00;
   e1fd0:	4c67      	ldr	r4, [pc, #412]	; (e2170 <_ZL14aes_gen_tablesv+0x1f4>)
    FSb[0x00] = 0x63;
   e1fd2:	2363      	movs	r3, #99	; 0x63
   e1fd4:	702b      	strb	r3, [r5, #0]
    RSb[0x63] = 0x00;
   e1fd6:	2300      	movs	r3, #0
   e1fd8:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63

    for( i = 1; i < 256; i++ )
   e1fdc:	2001      	movs	r0, #1
    {
        x = pow[255 - log[i]];
   e1fde:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
   e1fe2:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
   e1fe6:	f856 8023 	ldr.w	r8, [r6, r3, lsl #2]

        y  = x; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
   e1fea:	ea4f 12e8 	mov.w	r2, r8, asr #7
   e1fee:	ea42 0248 	orr.w	r2, r2, r8, lsl #1
   e1ff2:	fa5f fe82 	uxtb.w	lr, r2
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
   e1ff6:	f3c2 12c0 	ubfx	r2, r2, #7, #1
   e1ffa:	ea42 024e 	orr.w	r2, r2, lr, lsl #1
   e1ffe:	fa5f fc82 	uxtb.w	ip, r2
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
   e2002:	f3c2 12c0 	ubfx	r2, r2, #7, #1
   e2006:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
   e200a:	b2d7      	uxtb	r7, r2
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
   e200c:	f3c2 12c0 	ubfx	r2, r2, #7, #1
   e2010:	ea42 0247 	orr.w	r2, r2, r7, lsl #1
   e2014:	b2d3      	uxtb	r3, r2
   e2016:	ea83 0308 	eor.w	r3, r3, r8
   e201a:	ea83 030e 	eor.w	r3, r3, lr
   e201e:	ea83 030c 	eor.w	r3, r3, ip
   e2022:	407b      	eors	r3, r7
        x ^= y ^ 0x63;
   e2024:	f083 0363 	eor.w	r3, r3, #99	; 0x63

        FSb[i] = (unsigned char) x;
   e2028:	542b      	strb	r3, [r5, r0]
        RSb[x] = (unsigned char) i;
   e202a:	54e0      	strb	r0, [r4, r3]
    for( i = 1; i < 256; i++ )
   e202c:	3001      	adds	r0, #1
   e202e:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   e2032:	d1d4      	bne.n	e1fde <_ZL14aes_gen_tablesv+0x62>
        FT3[i] = ROTL8( FT2[i] );
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
   e2034:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   e2036:	9303      	str	r3, [sp, #12]
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
   e2038:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   e203a:	9304      	str	r3, [sp, #16]
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
   e203c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   e203e:	9306      	str	r3, [sp, #24]
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
   e2040:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   e2042:	9307      	str	r3, [sp, #28]
   e2044:	4b4b      	ldr	r3, [pc, #300]	; (e2174 <_ZL14aes_gen_tablesv+0x1f8>)
   e2046:	9302      	str	r3, [sp, #8]
   e2048:	4848      	ldr	r0, [pc, #288]	; (e216c <_ZL14aes_gen_tablesv+0x1f0>)
   e204a:	4b4b      	ldr	r3, [pc, #300]	; (e2178 <_ZL14aes_gen_tablesv+0x1fc>)
   e204c:	f8df c138 	ldr.w	ip, [pc, #312]	; e2188 <_ZL14aes_gen_tablesv+0x20c>
   e2050:	4f4a      	ldr	r7, [pc, #296]	; (e217c <_ZL14aes_gen_tablesv+0x200>)
   e2052:	4e4b      	ldr	r6, [pc, #300]	; (e2180 <_ZL14aes_gen_tablesv+0x204>)
   e2054:	f8df a134 	ldr.w	sl, [pc, #308]	; e218c <_ZL14aes_gen_tablesv+0x210>
   e2058:	f8df 9134 	ldr.w	r9, [pc, #308]	; e2190 <_ZL14aes_gen_tablesv+0x214>
   e205c:	f8df 8134 	ldr.w	r8, [pc, #308]	; e2194 <_ZL14aes_gen_tablesv+0x218>
   e2060:	f8df e10c 	ldr.w	lr, [pc, #268]	; e2170 <_ZL14aes_gen_tablesv+0x1f4>
   e2064:	9301      	str	r3, [sp, #4]
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
   e2066:	f50d 6584 	add.w	r5, sp, #1056	; 0x420
   e206a:	24ff      	movs	r4, #255	; 0xff
        x = FSb[i];
   e206c:	f810 3b01 	ldrb.w	r3, [r0], #1
        y = XTIME( x ) & 0xFF;
   e2070:	f013 0f80 	tst.w	r3, #128	; 0x80
   e2074:	bf14      	ite	ne
   e2076:	221b      	movne	r2, #27
   e2078:	2200      	moveq	r2, #0
   e207a:	ea82 0243 	eor.w	r2, r2, r3, lsl #1
                 ( (uint32_t) x << 16 ) ^
   e207e:	0419      	lsls	r1, r3, #16
        y = XTIME( x ) & 0xFF;
   e2080:	b2d2      	uxtb	r2, r2
                 ( (uint32_t) x <<  8 ) ^
   e2082:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   e2086:	4051      	eors	r1, r2
        z =  ( y ^ x ) & 0xFF;
   e2088:	4053      	eors	r3, r2
                 ( (uint32_t) x << 16 ) ^
   e208a:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
        FT0[i] = ( (uint32_t) y       ) ^
   e208e:	9b01      	ldr	r3, [sp, #4]
   e2090:	f843 1b04 	str.w	r1, [r3], #4
   e2094:	9301      	str	r3, [sp, #4]
        FT1[i] = ROTL8( FT0[i] );
   e2096:	ea4f 6331 	mov.w	r3, r1, ror #24
   e209a:	f84a 3b04 	str.w	r3, [sl], #4
        FT2[i] = ROTL8( FT1[i] );
   e209e:	ea4f 4331 	mov.w	r3, r1, ror #16
   e20a2:	f849 3b04 	str.w	r3, [r9], #4
        x = RSb[i];
   e20a6:	f81e 3b01 	ldrb.w	r3, [lr], #1
        FT3[i] = ROTL8( FT2[i] );
   e20aa:	ea4f 2131 	mov.w	r1, r1, ror #8
   e20ae:	f848 1b04 	str.w	r1, [r8], #4
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
   e20b2:	2b00      	cmp	r3, #0
   e20b4:	d052      	beq.n	e215c <_ZL14aes_gen_tablesv+0x1e0>
   e20b6:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   e20ba:	9903      	ldr	r1, [sp, #12]
   e20bc:	4411      	add	r1, r2
   e20be:	fb91 fbf4 	sdiv	fp, r1, r4
   e20c2:	ebcb 2b0b 	rsb	fp, fp, fp, lsl #8
   e20c6:	eba1 0b0b 	sub.w	fp, r1, fp
   e20ca:	a908      	add	r1, sp, #32
   e20cc:	f851 b02b 	ldr.w	fp, [r1, fp, lsl #2]
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
   e20d0:	9904      	ldr	r1, [sp, #16]
   e20d2:	440a      	add	r2, r1
   e20d4:	fb92 f1f4 	sdiv	r1, r2, r4
   e20d8:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
   e20dc:	1a51      	subs	r1, r2, r1
   e20de:	aa08      	add	r2, sp, #32
   e20e0:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   e20e4:	0212      	lsls	r2, r2, #8
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
   e20e6:	ea82 020b 	eor.w	r2, r2, fp
   e20ea:	9205      	str	r2, [sp, #20]
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
   e20ec:	2b00      	cmp	r3, #0
   e20ee:	d038      	beq.n	e2162 <_ZL14aes_gen_tablesv+0x1e6>
   e20f0:	9906      	ldr	r1, [sp, #24]
   e20f2:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   e20f6:	440a      	add	r2, r1
   e20f8:	fb92 fbf4 	sdiv	fp, r2, r4
   e20fc:	ebcb 2b0b 	rsb	fp, fp, fp, lsl #8
   e2100:	eba2 010b 	sub.w	r1, r2, fp
   e2104:	aa08      	add	r2, sp, #32
   e2106:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
   e210a:	0409      	lsls	r1, r1, #16
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
   e210c:	9a05      	ldr	r2, [sp, #20]
   e210e:	404a      	eors	r2, r1
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
   e2110:	b163      	cbz	r3, e212c <_ZL14aes_gen_tablesv+0x1b0>
   e2112:	9907      	ldr	r1, [sp, #28]
   e2114:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   e2118:	440b      	add	r3, r1
   e211a:	fb93 f1f4 	sdiv	r1, r3, r4
   e211e:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
   e2122:	1a59      	subs	r1, r3, r1
   e2124:	ab08      	add	r3, sp, #32
   e2126:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   e212a:	061b      	lsls	r3, r3, #24
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
   e212c:	405a      	eors	r2, r3
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
   e212e:	9b02      	ldr	r3, [sp, #8]
   e2130:	f843 2b04 	str.w	r2, [r3], #4
   e2134:	9302      	str	r3, [sp, #8]

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        RT1[i] = ROTL8( RT0[i] );
   e2136:	ea4f 6332 	mov.w	r3, r2, ror #24
   e213a:	f84c 3b04 	str.w	r3, [ip], #4
        RT2[i] = ROTL8( RT1[i] );
   e213e:	ea4f 4332 	mov.w	r3, r2, ror #16
   e2142:	f847 3b04 	str.w	r3, [r7], #4
    for( i = 0; i < 256; i++ )
   e2146:	4b0f      	ldr	r3, [pc, #60]	; (e2184 <_ZL14aes_gen_tablesv+0x208>)
        RT3[i] = ROTL8( RT2[i] );
   e2148:	ea4f 2232 	mov.w	r2, r2, ror #8
    for( i = 0; i < 256; i++ )
   e214c:	4283      	cmp	r3, r0
        RT3[i] = ROTL8( RT2[i] );
   e214e:	f846 2b04 	str.w	r2, [r6], #4
    for( i = 0; i < 256; i++ )
   e2152:	d18b      	bne.n	e206c <_ZL14aes_gen_tablesv+0xf0>
#endif /* !MBEDTLS_AES_FEWER_TABLES */
    }
}
   e2154:	f60d 0d24 	addw	sp, sp, #2084	; 0x824
   e2158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
   e215c:	469b      	mov	fp, r3
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
   e215e:	461a      	mov	r2, r3
   e2160:	e7c1      	b.n	e20e6 <_ZL14aes_gen_tablesv+0x16a>
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
   e2162:	4619      	mov	r1, r3
   e2164:	e7d2      	b.n	e210c <_ZL14aes_gen_tablesv+0x190>
   e2166:	bf00      	nop
   e2168:	2003e5f0 	.word	0x2003e5f0
   e216c:	2003c3f0 	.word	0x2003c3f0
   e2170:	2003d4f0 	.word	0x2003d4f0
   e2174:	2003d5f0 	.word	0x2003d5f0
   e2178:	2003c4f0 	.word	0x2003c4f0
   e217c:	2003ddf0 	.word	0x2003ddf0
   e2180:	2003e1f0 	.word	0x2003e1f0
   e2184:	2003c4f0 	.word	0x2003c4f0
   e2188:	2003d9f0 	.word	0x2003d9f0
   e218c:	2003c8f0 	.word	0x2003c8f0
   e2190:	2003ccf0 	.word	0x2003ccf0
   e2194:	2003d0f0 	.word	0x2003d0f0

000e2198 <mbedtls_aes_init>:

void mbedtls_aes_init( mbedtls_aes_context *ctx )
{
    AES_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
   e2198:	f44f 728c 	mov.w	r2, #280	; 0x118
   e219c:	2100      	movs	r1, #0
   e219e:	f006 bbbd 	b.w	e891c <memset>

000e21a2 <mbedtls_aes_free>:
}

void mbedtls_aes_free( mbedtls_aes_context *ctx )
{
    if( ctx == NULL )
   e21a2:	b118      	cbz	r0, e21ac <mbedtls_aes_free+0xa>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_aes_context ) );
   e21a4:	f44f 718c 	mov.w	r1, #280	; 0x118
   e21a8:	f7f8 bf18 	b.w	dafdc <mbedtls_platform_zeroize>
}
   e21ac:	4770      	bx	lr
	...

000e21b0 <mbedtls_aes_setkey_enc>:
    uint32_t *RK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    switch( keybits )
   e21b0:	2ac0      	cmp	r2, #192	; 0xc0
{
   e21b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e21b4:	4604      	mov	r4, r0
   e21b6:	460d      	mov	r5, r1
   e21b8:	4616      	mov	r6, r2
    switch( keybits )
   e21ba:	d027      	beq.n	e220c <mbedtls_aes_setkey_enc+0x5c>
   e21bc:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   e21c0:	d026      	beq.n	e2210 <mbedtls_aes_setkey_enc+0x60>
   e21c2:	2a80      	cmp	r2, #128	; 0x80
   e21c4:	f040 80d0 	bne.w	e2368 <mbedtls_aes_setkey_enc+0x1b8>
    {
        case 128: ctx->nr = 10; break;
   e21c8:	230a      	movs	r3, #10
        case 256: ctx->nr = 14; break;
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
    }

#if !defined(MBEDTLS_AES_ROM_TABLES)
    if( aes_init_done == 0 )
   e21ca:	4f69      	ldr	r7, [pc, #420]	; (e2370 <mbedtls_aes_setkey_enc+0x1c0>)
        case 256: ctx->nr = 14; break;
   e21cc:	6023      	str	r3, [r4, #0]
    if( aes_init_done == 0 )
   e21ce:	683b      	ldr	r3, [r7, #0]
   e21d0:	b91b      	cbnz	r3, e21da <mbedtls_aes_setkey_enc+0x2a>
    {
        aes_gen_tables();
   e21d2:	f7ff fed3 	bl	e1f7c <_ZL14aes_gen_tablesv>
        aes_init_done = 1;
   e21d6:	2301      	movs	r3, #1
   e21d8:	603b      	str	r3, [r7, #0]

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
   e21da:	4622      	mov	r2, r4
   e21dc:	f104 0308 	add.w	r3, r4, #8
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
   e21e0:	0976      	lsrs	r6, r6, #5
    ctx->rk = RK = ctx->buf;
   e21e2:	f842 3f04 	str.w	r3, [r2, #4]!
    for( i = 0; i < ( keybits >> 5 ); i++ )
   e21e6:	4629      	mov	r1, r5
   e21e8:	eb05 0686 	add.w	r6, r5, r6, lsl #2
   e21ec:	428e      	cmp	r6, r1
   e21ee:	d011      	beq.n	e2214 <mbedtls_aes_setkey_enc+0x64>
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
   e21f0:	788b      	ldrb	r3, [r1, #2]
   e21f2:	7848      	ldrb	r0, [r1, #1]
   e21f4:	041b      	lsls	r3, r3, #16
   e21f6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   e21fa:	7808      	ldrb	r0, [r1, #0]
   e21fc:	4303      	orrs	r3, r0
   e21fe:	78c8      	ldrb	r0, [r1, #3]
   e2200:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
   e2204:	f842 3f04 	str.w	r3, [r2, #4]!
    for( i = 0; i < ( keybits >> 5 ); i++ )
   e2208:	3104      	adds	r1, #4
   e220a:	e7ef      	b.n	e21ec <mbedtls_aes_setkey_enc+0x3c>
        case 192: ctx->nr = 12; break;
   e220c:	230c      	movs	r3, #12
   e220e:	e7dc      	b.n	e21ca <mbedtls_aes_setkey_enc+0x1a>
        case 256: ctx->nr = 14; break;
   e2210:	230e      	movs	r3, #14
   e2212:	e7da      	b.n	e21ca <mbedtls_aes_setkey_enc+0x1a>
    }

    switch( ctx->nr )
   e2214:	6823      	ldr	r3, [r4, #0]
   e2216:	2b0c      	cmp	r3, #12
   e2218:	d02d      	beq.n	e2276 <mbedtls_aes_setkey_enc+0xc6>
   e221a:	2b0e      	cmp	r3, #14
   e221c:	d05c      	beq.n	e22d8 <mbedtls_aes_setkey_enc+0x128>
   e221e:	2b0a      	cmp	r3, #10
   e2220:	d127      	bne.n	e2272 <mbedtls_aes_setkey_enc+0xc2>
   e2222:	4d54      	ldr	r5, [pc, #336]	; (e2374 <mbedtls_aes_setkey_enc+0x1c4>)
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
   e2224:	4954      	ldr	r1, [pc, #336]	; (e2378 <mbedtls_aes_setkey_enc+0x1c8>)
   e2226:	4620      	mov	r0, r4
   e2228:	f104 06a0 	add.w	r6, r4, #160	; 0xa0
   e222c:	6942      	ldr	r2, [r0, #20]
                RK[4]  = RK[0] ^ RCON[i] ^
   e222e:	f855 4b04 	ldr.w	r4, [r5], #4
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
   e2232:	6887      	ldr	r7, [r0, #8]
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
   e2234:	f3c2 2307 	ubfx	r3, r2, #8, #8
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
   e2238:	407c      	eors	r4, r7
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
   e223a:	5ccb      	ldrb	r3, [r1, r3]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
   e223c:	4063      	eors	r3, r4
   e223e:	0e14      	lsrs	r4, r2, #24
   e2240:	3010      	adds	r0, #16
   e2242:	5d0c      	ldrb	r4, [r1, r4]
   e2244:	ea83 4304 	eor.w	r3, r3, r4, lsl #16
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
   e2248:	b2d4      	uxtb	r4, r2
   e224a:	5d0c      	ldrb	r4, [r1, r4]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
   e224c:	ea83 6304 	eor.w	r3, r3, r4, lsl #24
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
   e2250:	f3c2 4407 	ubfx	r4, r2, #16, #8
   e2254:	5d0c      	ldrb	r4, [r1, r4]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
   e2256:	ea83 2304 	eor.w	r3, r3, r4, lsl #8

                RK[5]  = RK[1] ^ RK[4];
   e225a:	f850 4c04 	ldr.w	r4, [r0, #-4]
                RK[4]  = RK[0] ^ RCON[i] ^
   e225e:	6083      	str	r3, [r0, #8]
                RK[5]  = RK[1] ^ RK[4];
   e2260:	4063      	eors	r3, r4
                RK[6]  = RK[2] ^ RK[5];
   e2262:	6804      	ldr	r4, [r0, #0]
                RK[5]  = RK[1] ^ RK[4];
   e2264:	60c3      	str	r3, [r0, #12]
                RK[6]  = RK[2] ^ RK[5];
   e2266:	4063      	eors	r3, r4
   e2268:	6103      	str	r3, [r0, #16]
                RK[7]  = RK[3] ^ RK[6];
   e226a:	4053      	eors	r3, r2
   e226c:	6143      	str	r3, [r0, #20]
            for( i = 0; i < 10; i++, RK += 4 )
   e226e:	4286      	cmp	r6, r0
   e2270:	d1dc      	bne.n	e222c <mbedtls_aes_setkey_enc+0x7c>
    switch( ctx->nr )
   e2272:	2000      	movs	r0, #0
   e2274:	e07a      	b.n	e236c <mbedtls_aes_setkey_enc+0x1bc>
   e2276:	4620      	mov	r0, r4
        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
   e2278:	493f      	ldr	r1, [pc, #252]	; (e2378 <mbedtls_aes_setkey_enc+0x1c8>)
   e227a:	4c3e      	ldr	r4, [pc, #248]	; (e2374 <mbedtls_aes_setkey_enc+0x1c4>)
   e227c:	f100 05c0 	add.w	r5, r0, #192	; 0xc0
   e2280:	69c2      	ldr	r2, [r0, #28]
                RK[6]  = RK[0] ^ RCON[i] ^
   e2282:	f854 6b04 	ldr.w	r6, [r4], #4
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
   e2286:	6887      	ldr	r7, [r0, #8]
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
   e2288:	f3c2 2307 	ubfx	r3, r2, #8, #8
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
   e228c:	407e      	eors	r6, r7
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
   e228e:	5ccb      	ldrb	r3, [r1, r3]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
   e2290:	4073      	eors	r3, r6
   e2292:	0e16      	lsrs	r6, r2, #24
   e2294:	3018      	adds	r0, #24
   e2296:	5d8e      	ldrb	r6, [r1, r6]
   e2298:	ea83 4306 	eor.w	r3, r3, r6, lsl #16
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
   e229c:	b2d6      	uxtb	r6, r2
   e229e:	5d8e      	ldrb	r6, [r1, r6]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
   e22a0:	ea83 6306 	eor.w	r3, r3, r6, lsl #24
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
   e22a4:	f3c2 4607 	ubfx	r6, r2, #16, #8
   e22a8:	5d8e      	ldrb	r6, [r1, r6]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
   e22aa:	ea83 2306 	eor.w	r3, r3, r6, lsl #8

                RK[7]  = RK[1] ^ RK[6];
   e22ae:	f850 6c0c 	ldr.w	r6, [r0, #-12]
                RK[6]  = RK[0] ^ RCON[i] ^
   e22b2:	6083      	str	r3, [r0, #8]
                RK[7]  = RK[1] ^ RK[6];
   e22b4:	4073      	eors	r3, r6
                RK[8]  = RK[2] ^ RK[7];
   e22b6:	f850 6c08 	ldr.w	r6, [r0, #-8]
                RK[7]  = RK[1] ^ RK[6];
   e22ba:	60c3      	str	r3, [r0, #12]
                RK[8]  = RK[2] ^ RK[7];
   e22bc:	4073      	eors	r3, r6
                RK[9]  = RK[3] ^ RK[8];
   e22be:	f850 6c04 	ldr.w	r6, [r0, #-4]
                RK[8]  = RK[2] ^ RK[7];
   e22c2:	6103      	str	r3, [r0, #16]
                RK[9]  = RK[3] ^ RK[8];
   e22c4:	4073      	eors	r3, r6
                RK[10] = RK[4] ^ RK[9];
   e22c6:	6806      	ldr	r6, [r0, #0]
                RK[9]  = RK[3] ^ RK[8];
   e22c8:	6143      	str	r3, [r0, #20]
                RK[10] = RK[4] ^ RK[9];
   e22ca:	4073      	eors	r3, r6
   e22cc:	6183      	str	r3, [r0, #24]
                RK[11] = RK[5] ^ RK[10];
   e22ce:	4053      	eors	r3, r2
   e22d0:	61c3      	str	r3, [r0, #28]
            for( i = 0; i < 8; i++, RK += 6 )
   e22d2:	4285      	cmp	r5, r0
   e22d4:	d1d4      	bne.n	e2280 <mbedtls_aes_setkey_enc+0xd0>
   e22d6:	e7cc      	b.n	e2272 <mbedtls_aes_setkey_enc+0xc2>
   e22d8:	4d26      	ldr	r5, [pc, #152]	; (e2374 <mbedtls_aes_setkey_enc+0x1c4>)
        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
   e22da:	4927      	ldr	r1, [pc, #156]	; (e2378 <mbedtls_aes_setkey_enc+0x1c8>)
   e22dc:	4620      	mov	r0, r4
   e22de:	f104 06e0 	add.w	r6, r4, #224	; 0xe0
   e22e2:	6a44      	ldr	r4, [r0, #36]	; 0x24
                RK[8]  = RK[0] ^ RCON[i] ^
   e22e4:	f855 2b04 	ldr.w	r2, [r5], #4
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
   e22e8:	6887      	ldr	r7, [r0, #8]
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
   e22ea:	f3c4 2307 	ubfx	r3, r4, #8, #8
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
   e22ee:	407a      	eors	r2, r7
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
   e22f0:	5ccb      	ldrb	r3, [r1, r3]
                RK[11] = RK[3] ^ RK[10];

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
   e22f2:	6987      	ldr	r7, [r0, #24]
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
   e22f4:	4053      	eors	r3, r2
   e22f6:	0e22      	lsrs	r2, r4, #24
   e22f8:	3020      	adds	r0, #32
   e22fa:	5c8a      	ldrb	r2, [r1, r2]
   e22fc:	ea83 4302 	eor.w	r3, r3, r2, lsl #16
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
   e2300:	b2e2      	uxtb	r2, r4
   e2302:	5c8a      	ldrb	r2, [r1, r2]
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
   e2304:	ea83 6302 	eor.w	r3, r3, r2, lsl #24
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
   e2308:	f3c4 4207 	ubfx	r2, r4, #16, #8
   e230c:	5c8a      	ldrb	r2, [r1, r2]
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
   e230e:	ea83 2302 	eor.w	r3, r3, r2, lsl #8
                RK[9]  = RK[1] ^ RK[8];
   e2312:	f850 2c14 	ldr.w	r2, [r0, #-20]
                RK[8]  = RK[0] ^ RCON[i] ^
   e2316:	6083      	str	r3, [r0, #8]
                RK[9]  = RK[1] ^ RK[8];
   e2318:	4053      	eors	r3, r2
                RK[10] = RK[2] ^ RK[9];
   e231a:	f850 2c10 	ldr.w	r2, [r0, #-16]
                RK[9]  = RK[1] ^ RK[8];
   e231e:	60c3      	str	r3, [r0, #12]
                RK[10] = RK[2] ^ RK[9];
   e2320:	4053      	eors	r3, r2
                RK[11] = RK[3] ^ RK[10];
   e2322:	f850 2c0c 	ldr.w	r2, [r0, #-12]
                RK[10] = RK[2] ^ RK[9];
   e2326:	6103      	str	r3, [r0, #16]
                RK[11] = RK[3] ^ RK[10];
   e2328:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
   e232a:	b2da      	uxtb	r2, r3
                RK[11] = RK[3] ^ RK[10];
   e232c:	6143      	str	r3, [r0, #20]
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
   e232e:	5c8a      	ldrb	r2, [r1, r2]
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
   e2330:	407a      	eors	r2, r7
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
   e2332:	0e1f      	lsrs	r7, r3, #24
   e2334:	5dcf      	ldrb	r7, [r1, r7]
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
   e2336:	ea82 6207 	eor.w	r2, r2, r7, lsl #24
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
   e233a:	f3c3 2707 	ubfx	r7, r3, #8, #8
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
   e233e:	f3c3 4307 	ubfx	r3, r3, #16, #8
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
   e2342:	5dcf      	ldrb	r7, [r1, r7]
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
   e2344:	5ccb      	ldrb	r3, [r1, r3]
   e2346:	ea82 2207 	eor.w	r2, r2, r7, lsl #8
   e234a:	ea82 4303 	eor.w	r3, r2, r3, lsl #16

                RK[13] = RK[5] ^ RK[12];
   e234e:	f850 2c04 	ldr.w	r2, [r0, #-4]
                RK[12] = RK[4] ^
   e2352:	6183      	str	r3, [r0, #24]
                RK[13] = RK[5] ^ RK[12];
   e2354:	4053      	eors	r3, r2
                RK[14] = RK[6] ^ RK[13];
   e2356:	6802      	ldr	r2, [r0, #0]
                RK[13] = RK[5] ^ RK[12];
   e2358:	61c3      	str	r3, [r0, #28]
                RK[14] = RK[6] ^ RK[13];
   e235a:	4053      	eors	r3, r2
   e235c:	6203      	str	r3, [r0, #32]
                RK[15] = RK[7] ^ RK[14];
   e235e:	4063      	eors	r3, r4
   e2360:	6243      	str	r3, [r0, #36]	; 0x24
            for( i = 0; i < 7; i++, RK += 8 )
   e2362:	4286      	cmp	r6, r0
   e2364:	d1bd      	bne.n	e22e2 <mbedtls_aes_setkey_enc+0x132>
   e2366:	e784      	b.n	e2272 <mbedtls_aes_setkey_enc+0xc2>
    switch( keybits )
   e2368:	f06f 001f 	mvn.w	r0, #31
            }
            break;
    }

    return( 0 );
}
   e236c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   e236e:	bf00      	nop
   e2370:	2003c3ec 	.word	0x2003c3ec
   e2374:	2003e5f0 	.word	0x2003e5f0
   e2378:	2003c3f0 	.word	0x2003c3f0

000e237c <mbedtls_aes_setkey_dec>:
 * AES key schedule (decryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_DEC_ALT)
int mbedtls_aes_setkey_dec( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
   e237c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e2380:	b0c9      	sub	sp, #292	; 0x124
   e2382:	4604      	mov	r4, r0
    uint32_t *SK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    mbedtls_aes_init( &cty );
   e2384:	a802      	add	r0, sp, #8
{
   e2386:	e9cd 2100 	strd	r2, r1, [sp]
    mbedtls_aes_init( &cty );
   e238a:	f7ff ff05 	bl	e2198 <mbedtls_aes_init>

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
   e238e:	f104 0308 	add.w	r3, r4, #8

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
   e2392:	e9dd 2100 	ldrd	r2, r1, [sp]
    ctx->rk = RK = ctx->buf;
   e2396:	6063      	str	r3, [r4, #4]
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
   e2398:	a802      	add	r0, sp, #8
   e239a:	f7ff ff09 	bl	e21b0 <mbedtls_aes_setkey_enc>
   e239e:	4607      	mov	r7, r0
   e23a0:	2800      	cmp	r0, #0
   e23a2:	d165      	bne.n	e2470 <mbedtls_aes_setkey_dec+0xf4>
        goto exit;

    ctx->nr = cty.nr;
   e23a4:	9d02      	ldr	r5, [sp, #8]
   e23a6:	6025      	str	r5, [r4, #0]
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
   e23a8:	012b      	lsls	r3, r5, #4
   e23aa:	9301      	str	r3, [sp, #4]

    *RK++ = *SK++;
   e23ac:	0129      	lsls	r1, r5, #4
    SK = cty.rk + cty.nr * 4;
   e23ae:	9b03      	ldr	r3, [sp, #12]

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
   e23b0:	4833      	ldr	r0, [pc, #204]	; (e2480 <mbedtls_aes_setkey_dec+0x104>)
    SK = cty.rk + cty.nr * 4;
   e23b2:	eb03 1205 	add.w	r2, r3, r5, lsl #4
    *RK++ = *SK++;
   e23b6:	585b      	ldr	r3, [r3, r1]
   e23b8:	60a3      	str	r3, [r4, #8]
    *RK++ = *SK++;
   e23ba:	6853      	ldr	r3, [r2, #4]
   e23bc:	60e3      	str	r3, [r4, #12]
    *RK++ = *SK++;
   e23be:	6893      	ldr	r3, [r2, #8]
   e23c0:	6123      	str	r3, [r4, #16]
    *RK++ = *SK++;
   e23c2:	68d3      	ldr	r3, [r2, #12]
   e23c4:	6163      	str	r3, [r4, #20]
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
   e23c6:	f105 3bff 	add.w	fp, r5, #4294967295
   e23ca:	3a10      	subs	r2, #16
    *RK++ = *SK++;
   e23cc:	f104 0a18 	add.w	sl, r4, #24
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
   e23d0:	f104 0328 	add.w	r3, r4, #40	; 0x28
   e23d4:	4694      	mov	ip, r2
   e23d6:	46de      	mov	lr, fp
   e23d8:	f1be 0f00 	cmp.w	lr, #0
   e23dc:	f1a3 0810 	sub.w	r8, r3, #16
   e23e0:	dd2c      	ble.n	e243c <mbedtls_aes_setkey_dec+0xc0>
   e23e2:	f1ac 0404 	sub.w	r4, ip, #4
   e23e6:	9400      	str	r4, [sp, #0]
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
   e23e8:	9e00      	ldr	r6, [sp, #0]
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
   e23ea:	4926      	ldr	r1, [pc, #152]	; (e2484 <mbedtls_aes_setkey_dec+0x108>)
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
   e23ec:	f856 4f04 	ldr.w	r4, [r6, #4]!
   e23f0:	9600      	str	r6, [sp, #0]
   e23f2:	b2e6      	uxtb	r6, r4
   e23f4:	f810 9006 	ldrb.w	r9, [r0, r6]
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
   e23f8:	0e26      	lsrs	r6, r4, #24
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
   e23fa:	f851 9029 	ldr.w	r9, [r1, r9, lsl #2]
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
   e23fe:	5d86      	ldrb	r6, [r0, r6]
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
   e2400:	4921      	ldr	r1, [pc, #132]	; (e2488 <mbedtls_aes_setkey_dec+0x10c>)
   e2402:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
   e2406:	4921      	ldr	r1, [pc, #132]	; (e248c <mbedtls_aes_setkey_dec+0x110>)
   e2408:	ea89 0906 	eor.w	r9, r9, r6
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
   e240c:	f3c4 2607 	ubfx	r6, r4, #8, #8
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
   e2410:	f3c4 4407 	ubfx	r4, r4, #16, #8
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
   e2414:	5d86      	ldrb	r6, [r0, r6]
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
   e2416:	5d04      	ldrb	r4, [r0, r4]
   e2418:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
   e241c:	491c      	ldr	r1, [pc, #112]	; (e2490 <mbedtls_aes_setkey_dec+0x114>)
   e241e:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
   e2422:	ea89 0606 	eor.w	r6, r9, r6
   e2426:	4066      	eors	r6, r4
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
   e2428:	f848 6b04 	str.w	r6, [r8], #4
        for( j = 0; j < 4; j++, SK++ )
   e242c:	4598      	cmp	r8, r3
   e242e:	d1db      	bne.n	e23e8 <mbedtls_aes_setkey_dec+0x6c>
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
   e2430:	f10e 3eff 	add.w	lr, lr, #4294967295
   e2434:	f1ac 0c10 	sub.w	ip, ip, #16
   e2438:	3310      	adds	r3, #16
   e243a:	e7cd      	b.n	e23d8 <mbedtls_aes_setkey_dec+0x5c>
   e243c:	9b01      	ldr	r3, [sp, #4]
   e243e:	2d00      	cmp	r5, #0
   e2440:	f1a3 0110 	sub.w	r1, r3, #16
   e2444:	f06f 030f 	mvn.w	r3, #15
   e2448:	fb03 fb0b 	mul.w	fp, r3, fp
   e244c:	bfdc      	itt	le
   e244e:	f04f 0b00 	movle.w	fp, #0
   e2452:	2100      	movle	r1, #0
   e2454:	eb02 030b 	add.w	r3, r2, fp
        }
    }

    *RK++ = *SK++;
   e2458:	f852 200b 	ldr.w	r2, [r2, fp]
   e245c:	f84a 2001 	str.w	r2, [sl, r1]
   e2460:	eb0a 0001 	add.w	r0, sl, r1
    *RK++ = *SK++;
   e2464:	685a      	ldr	r2, [r3, #4]
   e2466:	6042      	str	r2, [r0, #4]
    *RK++ = *SK++;
   e2468:	689a      	ldr	r2, [r3, #8]
   e246a:	6082      	str	r2, [r0, #8]
    *RK++ = *SK++;
   e246c:	68db      	ldr	r3, [r3, #12]
   e246e:	60c3      	str	r3, [r0, #12]

exit:
    mbedtls_aes_free( &cty );
   e2470:	a802      	add	r0, sp, #8
   e2472:	f7ff fe96 	bl	e21a2 <mbedtls_aes_free>

    return( ret );
}
   e2476:	4638      	mov	r0, r7
   e2478:	b049      	add	sp, #292	; 0x124
   e247a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e247e:	bf00      	nop
   e2480:	2003c3f0 	.word	0x2003c3f0
   e2484:	2003d5f0 	.word	0x2003d5f0
   e2488:	2003e1f0 	.word	0x2003e1f0
   e248c:	2003d9f0 	.word	0x2003d9f0
   e2490:	2003ddf0 	.word	0x2003ddf0

000e2494 <mbedtls_internal_aes_encrypt>:
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
   e2494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
   e2498:	6847      	ldr	r7, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
   e249a:	680e      	ldr	r6, [r1, #0]
   e249c:	683b      	ldr	r3, [r7, #0]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
   e249e:	684d      	ldr	r5, [r1, #4]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
   e24a0:	688c      	ldr	r4, [r1, #8]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
   e24a2:	68c9      	ldr	r1, [r1, #12]
   e24a4:	f8df 829c 	ldr.w	r8, [pc, #668]	; e2744 <mbedtls_internal_aes_encrypt+0x2b0>
   e24a8:	f8df e29c 	ldr.w	lr, [pc, #668]	; e2748 <mbedtls_internal_aes_encrypt+0x2b4>
   e24ac:	f8df c29c 	ldr.w	ip, [pc, #668]	; e274c <mbedtls_internal_aes_encrypt+0x2b8>
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
   e24b0:	405e      	eors	r6, r3
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
   e24b2:	687b      	ldr	r3, [r7, #4]
   e24b4:	405d      	eors	r5, r3
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
   e24b6:	68bb      	ldr	r3, [r7, #8]
   e24b8:	405c      	eors	r4, r3
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
   e24ba:	68fb      	ldr	r3, [r7, #12]
   e24bc:	404b      	eors	r3, r1

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
   e24be:	6801      	ldr	r1, [r0, #0]
{
   e24c0:	b08f      	sub	sp, #60	; 0x3c
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
   e24c2:	1049      	asrs	r1, r1, #1
   e24c4:	3901      	subs	r1, #1
   e24c6:	9100      	str	r1, [sp, #0]
   e24c8:	f107 0130 	add.w	r1, r7, #48	; 0x30
   e24cc:	f851 7c10 	ldr.w	r7, [r1, #-16]
   e24d0:	9701      	str	r7, [sp, #4]
   e24d2:	b2f7      	uxtb	r7, r6
   e24d4:	f851 0c20 	ldr.w	r0, [r1, #-32]
   e24d8:	f858 7027 	ldr.w	r7, [r8, r7, lsl #2]
   e24dc:	ea87 0900 	eor.w	r9, r7, r0
   e24e0:	0e1f      	lsrs	r7, r3, #24
   e24e2:	4896      	ldr	r0, [pc, #600]	; (e273c <mbedtls_internal_aes_encrypt+0x2a8>)
   e24e4:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
   e24e8:	ea89 0907 	eor.w	r9, r9, r7
   e24ec:	f3c5 2707 	ubfx	r7, r5, #8, #8
   e24f0:	ea4f 6b15 	mov.w	fp, r5, lsr #24
   e24f4:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
   e24f8:	f85e b02b 	ldr.w	fp, [lr, fp, lsl #2]
   e24fc:	ea89 0907 	eor.w	r9, r9, r7
   e2500:	f3c4 4707 	ubfx	r7, r4, #16, #8
   e2504:	3120      	adds	r1, #32
   e2506:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
   e250a:	ea89 0907 	eor.w	r9, r9, r7
   e250e:	b2ef      	uxtb	r7, r5
   e2510:	fa5f f089 	uxtb.w	r0, r9
   e2514:	f858 7027 	ldr.w	r7, [r8, r7, lsl #2]
   e2518:	9002      	str	r0, [sp, #8]
   e251a:	f851 0c3c 	ldr.w	r0, [r1, #-60]
   e251e:	ea87 0a00 	eor.w	sl, r7, r0
   e2522:	0e37      	lsrs	r7, r6, #24
   e2524:	4885      	ldr	r0, [pc, #532]	; (e273c <mbedtls_internal_aes_encrypt+0x2a8>)
   e2526:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
   e252a:	ea8a 0a07 	eor.w	sl, sl, r7
   e252e:	f3c4 2707 	ubfx	r7, r4, #8, #8
   e2532:	f3c5 4507 	ubfx	r5, r5, #16, #8
   e2536:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
   e253a:	ea8a 0a07 	eor.w	sl, sl, r7
   e253e:	f3c3 4707 	ubfx	r7, r3, #16, #8
   e2542:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
   e2546:	ea8a 0a07 	eor.w	sl, sl, r7
   e254a:	b2e7      	uxtb	r7, r4
   e254c:	f3ca 2007 	ubfx	r0, sl, #8, #8
   e2550:	f858 7027 	ldr.w	r7, [r8, r7, lsl #2]
   e2554:	9003      	str	r0, [sp, #12]
   e2556:	f851 0c38 	ldr.w	r0, [r1, #-56]
   e255a:	4047      	eors	r7, r0
   e255c:	ea87 070b 	eor.w	r7, r7, fp
   e2560:	f3c3 2b07 	ubfx	fp, r3, #8, #8
   e2564:	4875      	ldr	r0, [pc, #468]	; (e273c <mbedtls_internal_aes_encrypt+0x2a8>)
   e2566:	f85c b02b 	ldr.w	fp, [ip, fp, lsl #2]
   e256a:	ea87 070b 	eor.w	r7, r7, fp
   e256e:	f3c6 4b07 	ubfx	fp, r6, #16, #8
   e2572:	b2db      	uxtb	r3, r3
   e2574:	f850 b02b 	ldr.w	fp, [r0, fp, lsl #2]
   e2578:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
   e257c:	ea87 070b 	eor.w	r7, r7, fp
   e2580:	f3c7 4007 	ubfx	r0, r7, #16, #8
   e2584:	0e24      	lsrs	r4, r4, #24
   e2586:	9004      	str	r0, [sp, #16]
   e2588:	f851 0c34 	ldr.w	r0, [r1, #-52]
   e258c:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
   e2590:	f3c6 2607 	ubfx	r6, r6, #8, #8
   e2594:	4043      	eors	r3, r0
   e2596:	4063      	eors	r3, r4
   e2598:	4868      	ldr	r0, [pc, #416]	; (e273c <mbedtls_internal_aes_encrypt+0x2a8>)
   e259a:	f85c 4026 	ldr.w	r4, [ip, r6, lsl #2]
   e259e:	4063      	eors	r3, r4
   e25a0:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
   e25a4:	f851 0c2c 	ldr.w	r0, [r1, #-44]
   e25a8:	9005      	str	r0, [sp, #20]
   e25aa:	4063      	eors	r3, r4
   e25ac:	f3c3 4007 	ubfx	r0, r3, #16, #8
   e25b0:	9006      	str	r0, [sp, #24]
   e25b2:	f851 0c28 	ldr.w	r0, [r1, #-40]
   e25b6:	9007      	str	r0, [sp, #28]
   e25b8:	b2f8      	uxtb	r0, r7
   e25ba:	9008      	str	r0, [sp, #32]
   e25bc:	f3c3 2007 	ubfx	r0, r3, #8, #8
   e25c0:	9009      	str	r0, [sp, #36]	; 0x24
   e25c2:	0e1e      	lsrs	r6, r3, #24
   e25c4:	f3c9 4007 	ubfx	r0, r9, #16, #8
   e25c8:	b2db      	uxtb	r3, r3
   e25ca:	900a      	str	r0, [sp, #40]	; 0x28
   e25cc:	930d      	str	r3, [sp, #52]	; 0x34
   e25ce:	9b00      	ldr	r3, [sp, #0]
   e25d0:	ea4f 601a 	mov.w	r0, sl, lsr #24
   e25d4:	900b      	str	r0, [sp, #44]	; 0x2c
   e25d6:	2b00      	cmp	r3, #0
   e25d8:	f851 0c24 	ldr.w	r0, [r1, #-36]
   e25dc:	900c      	str	r0, [sp, #48]	; 0x30
   e25de:	fa5f f58a 	uxtb.w	r5, sl
   e25e2:	f3c7 2b07 	ubfx	fp, r7, #8, #8
   e25e6:	ea4f 6419 	mov.w	r4, r9, lsr #24
   e25ea:	f3ca 4a07 	ubfx	sl, sl, #16, #8
   e25ee:	f3c9 2907 	ubfx	r9, r9, #8, #8
   e25f2:	ea4f 6717 	mov.w	r7, r7, lsr #24
   e25f6:	dd42      	ble.n	e267e <mbedtls_internal_aes_encrypt+0x1ea>
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
   e25f8:	9b02      	ldr	r3, [sp, #8]
   e25fa:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
   e25fe:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
   e2602:	9801      	ldr	r0, [sp, #4]
   e2604:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
   e2608:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
   e260c:	4073      	eors	r3, r6
   e260e:	4043      	eors	r3, r0
   e2610:	9803      	ldr	r0, [sp, #12]
   e2612:	f85c 6020 	ldr.w	r6, [ip, r0, lsl #2]
   e2616:	4849      	ldr	r0, [pc, #292]	; (e273c <mbedtls_internal_aes_encrypt+0x2a8>)
   e2618:	405e      	eors	r6, r3
   e261a:	9b04      	ldr	r3, [sp, #16]
   e261c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   e2620:	405e      	eors	r6, r3
   e2622:	f85e 3024 	ldr.w	r3, [lr, r4, lsl #2]
   e2626:	405d      	eors	r5, r3
   e2628:	9b05      	ldr	r3, [sp, #20]
   e262a:	405d      	eors	r5, r3
   e262c:	f85c 302b 	ldr.w	r3, [ip, fp, lsl #2]
   e2630:	405d      	eors	r5, r3
   e2632:	9b06      	ldr	r3, [sp, #24]
   e2634:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   e2638:	405d      	eors	r5, r3
   e263a:	9b08      	ldr	r3, [sp, #32]
   e263c:	f858 4023 	ldr.w	r4, [r8, r3, lsl #2]
   e2640:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   e2642:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
   e2646:	405c      	eors	r4, r3
   e2648:	9b07      	ldr	r3, [sp, #28]
   e264a:	405c      	eors	r4, r3
   e264c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e264e:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
   e2652:	405c      	eors	r4, r3
   e2654:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e2656:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   e265a:	980c      	ldr	r0, [sp, #48]	; 0x30
   e265c:	405c      	eors	r4, r3
   e265e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   e2660:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
   e2664:	407b      	eors	r3, r7
   e2666:	4043      	eors	r3, r0
   e2668:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
   e266c:	4833      	ldr	r0, [pc, #204]	; (e273c <mbedtls_internal_aes_encrypt+0x2a8>)
   e266e:	407b      	eors	r3, r7
   e2670:	f850 702a 	ldr.w	r7, [r0, sl, lsl #2]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
   e2674:	9800      	ldr	r0, [sp, #0]
   e2676:	3801      	subs	r0, #1
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
   e2678:	407b      	eors	r3, r7
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
   e267a:	9000      	str	r0, [sp, #0]
   e267c:	e726      	b.n	e24cc <mbedtls_internal_aes_encrypt+0x38>

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
   e267e:	4930      	ldr	r1, [pc, #192]	; (e2740 <mbedtls_internal_aes_encrypt+0x2ac>)
   e2680:	9b03      	ldr	r3, [sp, #12]
    X0 = *RK++ ^ \
   e2682:	9801      	ldr	r0, [sp, #4]
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
   e2684:	f811 c003 	ldrb.w	ip, [r1, r3]
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
   e2688:	9b02      	ldr	r3, [sp, #8]
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
   e268a:	5d4d      	ldrb	r5, [r1, r5]
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
   e268c:	5ccb      	ldrb	r3, [r1, r3]
    X0 = *RK++ ^ \
   e268e:	4043      	eors	r3, r0
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
   e2690:	9804      	ldr	r0, [sp, #16]
   e2692:	5c08      	ldrb	r0, [r1, r0]
    X0 = *RK++ ^ \
   e2694:	ea83 230c 	eor.w	r3, r3, ip, lsl #8
   e2698:	ea83 4300 	eor.w	r3, r3, r0, lsl #16
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
   e269c:	5d88      	ldrb	r0, [r1, r6]
    X1 = *RK++ ^ \
   e269e:	9e05      	ldr	r6, [sp, #20]
    X0 = *RK++ ^ \
   e26a0:	ea83 6300 	eor.w	r3, r3, r0, lsl #24
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
   e26a4:	f811 000b 	ldrb.w	r0, [r1, fp]
    X1 = *RK++ ^ \
   e26a8:	4075      	eors	r5, r6
   e26aa:	ea85 2500 	eor.w	r5, r5, r0, lsl #8
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
   e26ae:	9806      	ldr	r0, [sp, #24]
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
   e26b0:	9e07      	ldr	r6, [sp, #28]
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
   e26b2:	5c08      	ldrb	r0, [r1, r0]
    X1 = *RK++ ^ \
   e26b4:	ea85 4500 	eor.w	r5, r5, r0, lsl #16
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
   e26b8:	5d08      	ldrb	r0, [r1, r4]
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
   e26ba:	9c08      	ldr	r4, [sp, #32]
    X1 = *RK++ ^ \
   e26bc:	ea85 6500 	eor.w	r5, r5, r0, lsl #24
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
   e26c0:	9809      	ldr	r0, [sp, #36]	; 0x24
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
   e26c2:	5d0c      	ldrb	r4, [r1, r4]
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
   e26c4:	5c08      	ldrb	r0, [r1, r0]
    X2 = *RK++ ^ \
   e26c6:	4074      	eors	r4, r6
   e26c8:	ea84 2400 	eor.w	r4, r4, r0, lsl #8
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
   e26cc:	980a      	ldr	r0, [sp, #40]	; 0x28
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
   e26ce:	9e0c      	ldr	r6, [sp, #48]	; 0x30
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
   e26d0:	5c08      	ldrb	r0, [r1, r0]
    X2 = *RK++ ^ \
   e26d2:	ea84 4400 	eor.w	r4, r4, r0, lsl #16
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
   e26d6:	980b      	ldr	r0, [sp, #44]	; 0x2c
   e26d8:	5c08      	ldrb	r0, [r1, r0]
    X2 = *RK++ ^ \
   e26da:	ea84 6400 	eor.w	r4, r4, r0, lsl #24
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
   e26de:	980d      	ldr	r0, [sp, #52]	; 0x34
   e26e0:	5c08      	ldrb	r0, [r1, r0]
    X3 = *RK++ ^ \
   e26e2:	4070      	eors	r0, r6
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
   e26e4:	f811 6009 	ldrb.w	r6, [r1, r9]
    X3 = *RK++ ^ \
   e26e8:	ea80 2006 	eor.w	r0, r0, r6, lsl #8
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
   e26ec:	f811 600a 	ldrb.w	r6, [r1, sl]
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
   e26f0:	5dc9      	ldrb	r1, [r1, r7]

    PUT_UINT32_LE( X0, output,  0 );
   e26f2:	7013      	strb	r3, [r2, #0]
    X3 = *RK++ ^ \
   e26f4:	ea80 4006 	eor.w	r0, r0, r6, lsl #16
   e26f8:	ea80 6101 	eor.w	r1, r0, r1, lsl #24
    PUT_UINT32_LE( X0, output,  0 );
   e26fc:	0a18      	lsrs	r0, r3, #8
   e26fe:	7050      	strb	r0, [r2, #1]
   e2700:	0c18      	lsrs	r0, r3, #16
   e2702:	0e1b      	lsrs	r3, r3, #24
   e2704:	7090      	strb	r0, [r2, #2]
   e2706:	70d3      	strb	r3, [r2, #3]
    PUT_UINT32_LE( X1, output,  4 );
   e2708:	0a2b      	lsrs	r3, r5, #8
   e270a:	7153      	strb	r3, [r2, #5]
   e270c:	0c2b      	lsrs	r3, r5, #16
   e270e:	7193      	strb	r3, [r2, #6]
    PUT_UINT32_LE( X2, output,  8 );
   e2710:	0a23      	lsrs	r3, r4, #8
   e2712:	7253      	strb	r3, [r2, #9]
   e2714:	0c23      	lsrs	r3, r4, #16
   e2716:	7293      	strb	r3, [r2, #10]
    PUT_UINT32_LE( X3, output, 12 );
   e2718:	0a0b      	lsrs	r3, r1, #8
    PUT_UINT32_LE( X1, output,  4 );
   e271a:	7115      	strb	r5, [r2, #4]
    PUT_UINT32_LE( X2, output,  8 );
   e271c:	7214      	strb	r4, [r2, #8]
    PUT_UINT32_LE( X1, output,  4 );
   e271e:	0e2d      	lsrs	r5, r5, #24
    PUT_UINT32_LE( X2, output,  8 );
   e2720:	0e24      	lsrs	r4, r4, #24
    PUT_UINT32_LE( X3, output, 12 );
   e2722:	7311      	strb	r1, [r2, #12]
   e2724:	7353      	strb	r3, [r2, #13]

    return( 0 );
}
   e2726:	2000      	movs	r0, #0
    PUT_UINT32_LE( X3, output, 12 );
   e2728:	0c0b      	lsrs	r3, r1, #16
   e272a:	0e09      	lsrs	r1, r1, #24
    PUT_UINT32_LE( X1, output,  4 );
   e272c:	71d5      	strb	r5, [r2, #7]
    PUT_UINT32_LE( X2, output,  8 );
   e272e:	72d4      	strb	r4, [r2, #11]
    PUT_UINT32_LE( X3, output, 12 );
   e2730:	7393      	strb	r3, [r2, #14]
   e2732:	73d1      	strb	r1, [r2, #15]
}
   e2734:	b00f      	add	sp, #60	; 0x3c
   e2736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e273a:	bf00      	nop
   e273c:	2003ccf0 	.word	0x2003ccf0
   e2740:	2003c3f0 	.word	0x2003c3f0
   e2744:	2003c4f0 	.word	0x2003c4f0
   e2748:	2003d0f0 	.word	0x2003d0f0
   e274c:	2003c8f0 	.word	0x2003c8f0

000e2750 <mbedtls_internal_aes_decrypt>:
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
   e2750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
   e2754:	6847      	ldr	r7, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
   e2756:	680e      	ldr	r6, [r1, #0]
   e2758:	683b      	ldr	r3, [r7, #0]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
   e275a:	684d      	ldr	r5, [r1, #4]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
   e275c:	688c      	ldr	r4, [r1, #8]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
   e275e:	68c9      	ldr	r1, [r1, #12]
   e2760:	f8df 82a0 	ldr.w	r8, [pc, #672]	; e2a04 <mbedtls_internal_aes_decrypt+0x2b4>
   e2764:	f8df e2a0 	ldr.w	lr, [pc, #672]	; e2a08 <mbedtls_internal_aes_decrypt+0x2b8>
   e2768:	f8df c2a0 	ldr.w	ip, [pc, #672]	; e2a0c <mbedtls_internal_aes_decrypt+0x2bc>
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
   e276c:	405e      	eors	r6, r3
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
   e276e:	687b      	ldr	r3, [r7, #4]
   e2770:	405d      	eors	r5, r3
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
   e2772:	68bb      	ldr	r3, [r7, #8]
   e2774:	405c      	eors	r4, r3
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
   e2776:	68fb      	ldr	r3, [r7, #12]
   e2778:	404b      	eors	r3, r1

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
   e277a:	6801      	ldr	r1, [r0, #0]
{
   e277c:	b08f      	sub	sp, #60	; 0x3c
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
   e277e:	1049      	asrs	r1, r1, #1
   e2780:	3901      	subs	r1, #1
   e2782:	9100      	str	r1, [sp, #0]
   e2784:	f107 0130 	add.w	r1, r7, #48	; 0x30
   e2788:	f851 7c10 	ldr.w	r7, [r1, #-16]
   e278c:	9701      	str	r7, [sp, #4]
   e278e:	b2f7      	uxtb	r7, r6
   e2790:	f851 0c20 	ldr.w	r0, [r1, #-32]
   e2794:	f858 7027 	ldr.w	r7, [r8, r7, lsl #2]
   e2798:	ea87 0900 	eor.w	r9, r7, r0
   e279c:	0e2f      	lsrs	r7, r5, #24
   e279e:	4897      	ldr	r0, [pc, #604]	; (e29fc <mbedtls_internal_aes_decrypt+0x2ac>)
   e27a0:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
   e27a4:	ea89 0907 	eor.w	r9, r9, r7
   e27a8:	f3c3 2707 	ubfx	r7, r3, #8, #8
   e27ac:	ea4f 6b13 	mov.w	fp, r3, lsr #24
   e27b0:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
   e27b4:	f85e b02b 	ldr.w	fp, [lr, fp, lsl #2]
   e27b8:	ea89 0907 	eor.w	r9, r9, r7
   e27bc:	f3c4 4707 	ubfx	r7, r4, #16, #8
   e27c0:	3120      	adds	r1, #32
   e27c2:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
   e27c6:	ea89 0907 	eor.w	r9, r9, r7
   e27ca:	b2df      	uxtb	r7, r3
   e27cc:	fa5f f089 	uxtb.w	r0, r9
   e27d0:	f858 7027 	ldr.w	r7, [r8, r7, lsl #2]
   e27d4:	9002      	str	r0, [sp, #8]
   e27d6:	f851 0c34 	ldr.w	r0, [r1, #-52]
   e27da:	ea87 0a00 	eor.w	sl, r7, r0
   e27de:	0e37      	lsrs	r7, r6, #24
   e27e0:	4886      	ldr	r0, [pc, #536]	; (e29fc <mbedtls_internal_aes_decrypt+0x2ac>)
   e27e2:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
   e27e6:	ea8a 0a07 	eor.w	sl, sl, r7
   e27ea:	f3c4 2707 	ubfx	r7, r4, #8, #8
   e27ee:	f3c3 4307 	ubfx	r3, r3, #16, #8
   e27f2:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
   e27f6:	ea8a 0a07 	eor.w	sl, sl, r7
   e27fa:	f3c5 4707 	ubfx	r7, r5, #16, #8
   e27fe:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
   e2802:	ea8a 0a07 	eor.w	sl, sl, r7
   e2806:	b2e7      	uxtb	r7, r4
   e2808:	f3ca 2007 	ubfx	r0, sl, #8, #8
   e280c:	f858 7027 	ldr.w	r7, [r8, r7, lsl #2]
   e2810:	9003      	str	r0, [sp, #12]
   e2812:	f851 0c38 	ldr.w	r0, [r1, #-56]
   e2816:	4047      	eors	r7, r0
   e2818:	ea87 070b 	eor.w	r7, r7, fp
   e281c:	f3c5 2b07 	ubfx	fp, r5, #8, #8
   e2820:	4876      	ldr	r0, [pc, #472]	; (e29fc <mbedtls_internal_aes_decrypt+0x2ac>)
   e2822:	f85c b02b 	ldr.w	fp, [ip, fp, lsl #2]
   e2826:	ea87 070b 	eor.w	r7, r7, fp
   e282a:	f3c6 4b07 	ubfx	fp, r6, #16, #8
   e282e:	b2ed      	uxtb	r5, r5
   e2830:	f850 b02b 	ldr.w	fp, [r0, fp, lsl #2]
   e2834:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
   e2838:	ea87 070b 	eor.w	r7, r7, fp
   e283c:	f3c7 4007 	ubfx	r0, r7, #16, #8
   e2840:	0e24      	lsrs	r4, r4, #24
   e2842:	9004      	str	r0, [sp, #16]
   e2844:	f851 0c3c 	ldr.w	r0, [r1, #-60]
   e2848:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
   e284c:	f3c6 2607 	ubfx	r6, r6, #8, #8
   e2850:	4045      	eors	r5, r0
   e2852:	486a      	ldr	r0, [pc, #424]	; (e29fc <mbedtls_internal_aes_decrypt+0x2ac>)
   e2854:	4065      	eors	r5, r4
   e2856:	f85c 4026 	ldr.w	r4, [ip, r6, lsl #2]
   e285a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   e285e:	f851 0c28 	ldr.w	r0, [r1, #-40]
   e2862:	9007      	str	r0, [sp, #28]
   e2864:	4065      	eors	r5, r4
   e2866:	405d      	eors	r5, r3
   e2868:	b2f8      	uxtb	r0, r7
   e286a:	f851 3c2c 	ldr.w	r3, [r1, #-44]
   e286e:	9008      	str	r0, [sp, #32]
   e2870:	f3c5 2007 	ubfx	r0, r5, #8, #8
   e2874:	9305      	str	r3, [sp, #20]
   e2876:	9009      	str	r0, [sp, #36]	; 0x24
   e2878:	f3ca 4307 	ubfx	r3, sl, #16, #8
   e287c:	f3c9 4007 	ubfx	r0, r9, #16, #8
   e2880:	9306      	str	r3, [sp, #24]
   e2882:	900a      	str	r0, [sp, #40]	; 0x28
   e2884:	ea4f 601a 	mov.w	r0, sl, lsr #24
   e2888:	900b      	str	r0, [sp, #44]	; 0x2c
   e288a:	f851 0c24 	ldr.w	r0, [r1, #-36]
   e288e:	900c      	str	r0, [sp, #48]	; 0x30
   e2890:	f3c5 4007 	ubfx	r0, r5, #16, #8
   e2894:	900d      	str	r0, [sp, #52]	; 0x34
   e2896:	9800      	ldr	r0, [sp, #0]
   e2898:	2800      	cmp	r0, #0
   e289a:	f3c9 2b07 	ubfx	fp, r9, #8, #8
   e289e:	ea4f 6317 	mov.w	r3, r7, lsr #24
   e28a2:	ea4f 6615 	mov.w	r6, r5, lsr #24
   e28a6:	b2ec      	uxtb	r4, r5
   e28a8:	fa5f fa8a 	uxtb.w	sl, sl
   e28ac:	f3c7 2707 	ubfx	r7, r7, #8, #8
   e28b0:	ea4f 6919 	mov.w	r9, r9, lsr #24
   e28b4:	dd44      	ble.n	e2940 <mbedtls_internal_aes_decrypt+0x1f0>
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
   e28b6:	9802      	ldr	r0, [sp, #8]
   e28b8:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
   e28bc:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
   e28c0:	9801      	ldr	r0, [sp, #4]
   e28c2:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
   e28c6:	f85e 9029 	ldr.w	r9, [lr, r9, lsl #2]
   e28ca:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
   e28ce:	4075      	eors	r5, r6
   e28d0:	4045      	eors	r5, r0
   e28d2:	9803      	ldr	r0, [sp, #12]
   e28d4:	f85c 6020 	ldr.w	r6, [ip, r0, lsl #2]
   e28d8:	9804      	ldr	r0, [sp, #16]
   e28da:	406e      	eors	r6, r5
   e28dc:	4d47      	ldr	r5, [pc, #284]	; (e29fc <mbedtls_internal_aes_decrypt+0x2ac>)
   e28de:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
   e28e2:	4846      	ldr	r0, [pc, #280]	; (e29fc <mbedtls_internal_aes_decrypt+0x2ac>)
   e28e4:	406e      	eors	r6, r5
   e28e6:	f858 5024 	ldr.w	r5, [r8, r4, lsl #2]
   e28ea:	405d      	eors	r5, r3
   e28ec:	9b05      	ldr	r3, [sp, #20]
   e28ee:	405d      	eors	r5, r3
   e28f0:	f85c 302b 	ldr.w	r3, [ip, fp, lsl #2]
   e28f4:	405d      	eors	r5, r3
   e28f6:	9b06      	ldr	r3, [sp, #24]
   e28f8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   e28fc:	405d      	eors	r5, r3
   e28fe:	9b08      	ldr	r3, [sp, #32]
   e2900:	f858 4023 	ldr.w	r4, [r8, r3, lsl #2]
   e2904:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   e2906:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
   e290a:	405c      	eors	r4, r3
   e290c:	9b07      	ldr	r3, [sp, #28]
   e290e:	405c      	eors	r4, r3
   e2910:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e2912:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
   e2916:	405c      	eors	r4, r3
   e2918:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e291a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   e291e:	980c      	ldr	r0, [sp, #48]	; 0x30
   e2920:	405c      	eors	r4, r3
   e2922:	f858 302a 	ldr.w	r3, [r8, sl, lsl #2]
   e2926:	ea83 0309 	eor.w	r3, r3, r9
   e292a:	4043      	eors	r3, r0
   e292c:	407b      	eors	r3, r7
   e292e:	980d      	ldr	r0, [sp, #52]	; 0x34
   e2930:	4f32      	ldr	r7, [pc, #200]	; (e29fc <mbedtls_internal_aes_decrypt+0x2ac>)
   e2932:	f857 7020 	ldr.w	r7, [r7, r0, lsl #2]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
   e2936:	9800      	ldr	r0, [sp, #0]
   e2938:	3801      	subs	r0, #1
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
   e293a:	407b      	eors	r3, r7
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
   e293c:	9000      	str	r0, [sp, #0]
   e293e:	e723      	b.n	e2788 <mbedtls_internal_aes_decrypt+0x38>

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
   e2940:	492f      	ldr	r1, [pc, #188]	; (e2a00 <mbedtls_internal_aes_decrypt+0x2b0>)
   e2942:	9803      	ldr	r0, [sp, #12]
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
   e2944:	9d02      	ldr	r5, [sp, #8]
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
   e2946:	f811 c000 	ldrb.w	ip, [r1, r0]
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
   e294a:	5d4d      	ldrb	r5, [r1, r5]
    X0 = *RK++ ^ \
   e294c:	9801      	ldr	r0, [sp, #4]
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
   e294e:	5d0c      	ldrb	r4, [r1, r4]
    X0 = *RK++ ^ \
   e2950:	4045      	eors	r5, r0
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
   e2952:	9804      	ldr	r0, [sp, #16]
   e2954:	5c08      	ldrb	r0, [r1, r0]
    X0 = *RK++ ^ \
   e2956:	ea85 250c 	eor.w	r5, r5, ip, lsl #8
   e295a:	ea85 4500 	eor.w	r5, r5, r0, lsl #16
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
   e295e:	5d88      	ldrb	r0, [r1, r6]
    X1 = *RK++ ^ \
   e2960:	9e05      	ldr	r6, [sp, #20]
    X0 = *RK++ ^ \
   e2962:	ea85 6500 	eor.w	r5, r5, r0, lsl #24
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
   e2966:	f811 000b 	ldrb.w	r0, [r1, fp]
    X1 = *RK++ ^ \
   e296a:	4074      	eors	r4, r6
   e296c:	ea84 2400 	eor.w	r4, r4, r0, lsl #8
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
   e2970:	9806      	ldr	r0, [sp, #24]
   e2972:	5c08      	ldrb	r0, [r1, r0]
    X1 = *RK++ ^ \
   e2974:	ea84 4400 	eor.w	r4, r4, r0, lsl #16
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
   e2978:	5cc8      	ldrb	r0, [r1, r3]

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
   e297a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    X1 = *RK++ ^ \
   e297c:	ea84 6400 	eor.w	r4, r4, r0, lsl #24
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
   e2980:	5cc8      	ldrb	r0, [r1, r3]
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
   e2982:	9b08      	ldr	r3, [sp, #32]
   e2984:	5cce      	ldrb	r6, [r1, r3]
    X2 = *RK++ ^ \
   e2986:	9b07      	ldr	r3, [sp, #28]
   e2988:	405e      	eors	r6, r3
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
   e298a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e298c:	5ccb      	ldrb	r3, [r1, r3]
    X2 = *RK++ ^ \
   e298e:	ea86 2600 	eor.w	r6, r6, r0, lsl #8
   e2992:	ea86 4603 	eor.w	r6, r6, r3, lsl #16
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
   e2996:	9b0b      	ldr	r3, [sp, #44]	; 0x2c

    X3 = *RK++ ^ \
   e2998:	980c      	ldr	r0, [sp, #48]	; 0x30
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
   e299a:	5ccb      	ldrb	r3, [r1, r3]
    X2 = *RK++ ^ \
   e299c:	ea86 6603 	eor.w	r6, r6, r3, lsl #24
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
   e29a0:	f811 300a 	ldrb.w	r3, [r1, sl]
    X3 = *RK++ ^ \
   e29a4:	4043      	eors	r3, r0
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
   e29a6:	5dc8      	ldrb	r0, [r1, r7]
    X3 = *RK++ ^ \
   e29a8:	ea83 2300 	eor.w	r3, r3, r0, lsl #8
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
   e29ac:	980d      	ldr	r0, [sp, #52]	; 0x34
   e29ae:	5c08      	ldrb	r0, [r1, r0]
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
   e29b0:	f811 1009 	ldrb.w	r1, [r1, r9]

    PUT_UINT32_LE( X0, output,  0 );
   e29b4:	7015      	strb	r5, [r2, #0]
    X3 = *RK++ ^ \
   e29b6:	ea83 4300 	eor.w	r3, r3, r0, lsl #16
   e29ba:	ea83 6301 	eor.w	r3, r3, r1, lsl #24
    PUT_UINT32_LE( X0, output,  0 );
   e29be:	0a29      	lsrs	r1, r5, #8
   e29c0:	7051      	strb	r1, [r2, #1]
   e29c2:	0c29      	lsrs	r1, r5, #16
   e29c4:	7091      	strb	r1, [r2, #2]
   e29c6:	0e2d      	lsrs	r5, r5, #24
    PUT_UINT32_LE( X1, output,  4 );
   e29c8:	0a21      	lsrs	r1, r4, #8
    PUT_UINT32_LE( X0, output,  0 );
   e29ca:	70d5      	strb	r5, [r2, #3]
    PUT_UINT32_LE( X1, output,  4 );
   e29cc:	7151      	strb	r1, [r2, #5]
   e29ce:	0c21      	lsrs	r1, r4, #16
   e29d0:	7191      	strb	r1, [r2, #6]
    PUT_UINT32_LE( X2, output,  8 );
   e29d2:	0a31      	lsrs	r1, r6, #8
   e29d4:	7251      	strb	r1, [r2, #9]
   e29d6:	0c31      	lsrs	r1, r6, #16
   e29d8:	7291      	strb	r1, [r2, #10]
    PUT_UINT32_LE( X3, output, 12 );
   e29da:	0a19      	lsrs	r1, r3, #8
    PUT_UINT32_LE( X1, output,  4 );
   e29dc:	7114      	strb	r4, [r2, #4]
    PUT_UINT32_LE( X2, output,  8 );
   e29de:	7216      	strb	r6, [r2, #8]
    PUT_UINT32_LE( X1, output,  4 );
   e29e0:	0e24      	lsrs	r4, r4, #24
    PUT_UINT32_LE( X2, output,  8 );
   e29e2:	0e36      	lsrs	r6, r6, #24
    PUT_UINT32_LE( X3, output, 12 );
   e29e4:	7313      	strb	r3, [r2, #12]
   e29e6:	7351      	strb	r1, [r2, #13]

    return( 0 );
}
   e29e8:	2000      	movs	r0, #0
    PUT_UINT32_LE( X3, output, 12 );
   e29ea:	0c19      	lsrs	r1, r3, #16
   e29ec:	0e1b      	lsrs	r3, r3, #24
    PUT_UINT32_LE( X1, output,  4 );
   e29ee:	71d4      	strb	r4, [r2, #7]
    PUT_UINT32_LE( X2, output,  8 );
   e29f0:	72d6      	strb	r6, [r2, #11]
    PUT_UINT32_LE( X3, output, 12 );
   e29f2:	7391      	strb	r1, [r2, #14]
   e29f4:	73d3      	strb	r3, [r2, #15]
}
   e29f6:	b00f      	add	sp, #60	; 0x3c
   e29f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e29fc:	2003ddf0 	.word	0x2003ddf0
   e2a00:	2003d4f0 	.word	0x2003d4f0
   e2a04:	2003d5f0 	.word	0x2003d5f0
   e2a08:	2003e1f0 	.word	0x2003e1f0
   e2a0c:	2003d9f0 	.word	0x2003d9f0

000e2a10 <mbedtls_aes_crypt_ecb>:
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                           int mode,
                           const unsigned char input[16],
                           unsigned char output[16] )
{
   e2a10:	b410      	push	{r4}
   e2a12:	460c      	mov	r4, r1
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
   e2a14:	2c01      	cmp	r4, #1
{
   e2a16:	4611      	mov	r1, r2
   e2a18:	461a      	mov	r2, r3
    if( mode == MBEDTLS_AES_ENCRYPT )
   e2a1a:	d103      	bne.n	e2a24 <mbedtls_aes_crypt_ecb+0x14>
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
}
   e2a1c:	f85d 4b04 	ldr.w	r4, [sp], #4
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
   e2a20:	f7ff bd38 	b.w	e2494 <mbedtls_internal_aes_encrypt>
}
   e2a24:	f85d 4b04 	ldr.w	r4, [sp], #4
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
   e2a28:	f7ff be92 	b.w	e2750 <mbedtls_internal_aes_decrypt>

000e2a2c <mbedtls_pkcs12_pbe_sha1_rc4_128>:
    mbedtls_platform_zeroize( key, sizeof( key ) );
    mbedtls_arc4_free( &ctx );

    return( ret );
#endif /* MBEDTLS_ARC4_C */
}
   e2a2c:	4800      	ldr	r0, [pc, #0]	; (e2a30 <mbedtls_pkcs12_pbe_sha1_rc4_128+0x4>)
   e2a2e:	4770      	bx	lr
   e2a30:	ffffe100 	.word	0xffffe100

000e2a34 <mbedtls_pkcs12_derivation>:

int mbedtls_pkcs12_derivation( unsigned char *data, size_t datalen,
                       const unsigned char *pwd, size_t pwdlen,
                       const unsigned char *salt, size_t saltlen,
                       mbedtls_md_type_t md_type, int id, int iterations )
{
   e2a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e2a38:	ed2d 8b02 	vpush	{d8}
   e2a3c:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c

    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    // This version only allows max of 64 bytes of password or salt
    if( datalen > 128 || pwdlen > 64 || saltlen > 64 )
   e2a40:	2980      	cmp	r1, #128	; 0x80
{
   e2a42:	ee08 2a10 	vmov	s16, r2
   e2a46:	f8dd a28c 	ldr.w	sl, [sp, #652]	; 0x28c
   e2a4a:	9001      	str	r0, [sp, #4]
   e2a4c:	460d      	mov	r5, r1
   e2a4e:	469b      	mov	fp, r3
    if( datalen > 128 || pwdlen > 64 || saltlen > 64 )
   e2a50:	f200 80ef 	bhi.w	e2c32 <mbedtls_pkcs12_derivation+0x1fe>
   e2a54:	2b40      	cmp	r3, #64	; 0x40
   e2a56:	f200 80ec 	bhi.w	e2c32 <mbedtls_pkcs12_derivation+0x1fe>
   e2a5a:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
   e2a5e:	f200 80e8 	bhi.w	e2c32 <mbedtls_pkcs12_derivation+0x1fe>
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );

    md_info = mbedtls_md_info_from_type( md_type );
   e2a62:	f89d 0290 	ldrb.w	r0, [sp, #656]	; 0x290
   e2a66:	f7fa f931 	bl	dcccc <mbedtls_md_info_from_type>
    if( md_info == NULL )
   e2a6a:	4606      	mov	r6, r0
   e2a6c:	2800      	cmp	r0, #0
   e2a6e:	f000 80e2 	beq.w	e2c36 <mbedtls_pkcs12_derivation+0x202>
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );

    mbedtls_md_init( &md_ctx );
   e2a72:	a803      	add	r0, sp, #12
   e2a74:	f7fa f936 	bl	dcce4 <mbedtls_md_init>

    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
   e2a78:	2200      	movs	r2, #0
   e2a7a:	4631      	mov	r1, r6
   e2a7c:	a803      	add	r0, sp, #12
   e2a7e:	f7fa f951 	bl	dcd24 <mbedtls_md_setup>
   e2a82:	2800      	cmp	r0, #0
   e2a84:	f040 80cf 	bne.w	e2c26 <mbedtls_pkcs12_derivation+0x1f2>
        return( ret );
    hlen = mbedtls_md_get_size( md_info );
   e2a88:	4630      	mov	r0, r6
   e2a8a:	f7fa fa59 	bl	dcf40 <mbedtls_md_get_size>

    if( hlen <= 32 )
        v = 64;
    else
        v = 128;
   e2a8e:	2821      	cmp	r0, #33	; 0x21
   e2a90:	bf34      	ite	cc
   e2a92:	2440      	movcc	r4, #64	; 0x40
   e2a94:	2480      	movcs	r4, #128	; 0x80

    memset( diversifier, (unsigned char) id, v );
   e2a96:	f89d 1294 	ldrb.w	r1, [sp, #660]	; 0x294
    hlen = mbedtls_md_get_size( md_info );
   e2a9a:	4680      	mov	r8, r0
    memset( diversifier, (unsigned char) id, v );
   e2a9c:	4622      	mov	r2, r4
   e2a9e:	a816      	add	r0, sp, #88	; 0x58
   e2aa0:	f005 ff3c 	bl	e891c <memset>
   e2aa4:	46a1      	mov	r9, r4
    unsigned char *p = data;
   e2aa6:	ab36      	add	r3, sp, #216	; 0xd8
        use_len = ( data_len > fill_len ) ? fill_len : data_len;
   e2aa8:	45ca      	cmp	sl, r9
   e2aaa:	4657      	mov	r7, sl
   e2aac:	bf28      	it	cs
   e2aae:	464f      	movcs	r7, r9
        memcpy( p, filler, use_len );
   e2ab0:	4618      	mov	r0, r3
   e2ab2:	99a2      	ldr	r1, [sp, #648]	; 0x288
   e2ab4:	463a      	mov	r2, r7
   e2ab6:	f005 ff09 	bl	e88cc <memcpy>
    while( data_len > 0 )
   e2aba:	ebb9 0907 	subs.w	r9, r9, r7
        memcpy( p, filler, use_len );
   e2abe:	4603      	mov	r3, r0
        p += use_len;
   e2ac0:	443b      	add	r3, r7
    while( data_len > 0 )
   e2ac2:	d1f1      	bne.n	e2aa8 <mbedtls_pkcs12_derivation+0x74>
    unsigned char *p = data;
   e2ac4:	ab56      	add	r3, sp, #344	; 0x158
   e2ac6:	46a1      	mov	r9, r4
   e2ac8:	469a      	mov	sl, r3
        use_len = ( data_len > fill_len ) ? fill_len : data_len;
   e2aca:	45cb      	cmp	fp, r9
   e2acc:	465f      	mov	r7, fp
   e2ace:	bf28      	it	cs
   e2ad0:	464f      	movcs	r7, r9
        memcpy( p, filler, use_len );
   e2ad2:	4618      	mov	r0, r3
   e2ad4:	ee18 1a10 	vmov	r1, s16
   e2ad8:	463a      	mov	r2, r7
   e2ada:	f005 fef7 	bl	e88cc <memcpy>
    while( data_len > 0 )
   e2ade:	ebb9 0907 	subs.w	r9, r9, r7
        memcpy( p, filler, use_len );
   e2ae2:	4603      	mov	r3, r0
        p += use_len;
   e2ae4:	443b      	add	r3, r7
    while( data_len > 0 )
   e2ae6:	d1f0      	bne.n	e2aca <mbedtls_pkcs12_derivation+0x96>

    pkcs12_fill_buffer( salt_block, v, salt, saltlen );
    pkcs12_fill_buffer( pwd_block,  v, pwd,  pwdlen  );

    p = data;
    while( datalen > 0 )
   e2ae8:	2d00      	cmp	r5, #0
   e2aea:	f000 8087 	beq.w	e2bfc <mbedtls_pkcs12_derivation+0x1c8>
    {
        // Calculate hash( diversifier || salt_block || pwd_block )
        if( ( ret = mbedtls_md_starts( &md_ctx ) ) != 0 )
   e2aee:	a803      	add	r0, sp, #12
   e2af0:	f7fa f938 	bl	dcd64 <mbedtls_md_starts>
   e2af4:	4607      	mov	r7, r0
   e2af6:	2800      	cmp	r0, #0
   e2af8:	f040 8081 	bne.w	e2bfe <mbedtls_pkcs12_derivation+0x1ca>
            goto exit;

        if( ( ret = mbedtls_md_update( &md_ctx, diversifier, v ) ) != 0 )
   e2afc:	4622      	mov	r2, r4
   e2afe:	a916      	add	r1, sp, #88	; 0x58
   e2b00:	a803      	add	r0, sp, #12
   e2b02:	f7fa f939 	bl	dcd78 <mbedtls_md_update>
   e2b06:	4607      	mov	r7, r0
   e2b08:	2800      	cmp	r0, #0
   e2b0a:	d178      	bne.n	e2bfe <mbedtls_pkcs12_derivation+0x1ca>
            goto exit;

        if( ( ret = mbedtls_md_update( &md_ctx, salt_block, v ) ) != 0 )
   e2b0c:	4622      	mov	r2, r4
   e2b0e:	a936      	add	r1, sp, #216	; 0xd8
   e2b10:	a803      	add	r0, sp, #12
   e2b12:	f7fa f931 	bl	dcd78 <mbedtls_md_update>
   e2b16:	4607      	mov	r7, r0
   e2b18:	2800      	cmp	r0, #0
   e2b1a:	d170      	bne.n	e2bfe <mbedtls_pkcs12_derivation+0x1ca>
            goto exit;

        if( ( ret = mbedtls_md_update( &md_ctx, pwd_block, v ) ) != 0 )
   e2b1c:	4622      	mov	r2, r4
   e2b1e:	4651      	mov	r1, sl
   e2b20:	a803      	add	r0, sp, #12
   e2b22:	f7fa f929 	bl	dcd78 <mbedtls_md_update>
   e2b26:	4607      	mov	r7, r0
   e2b28:	2800      	cmp	r0, #0
   e2b2a:	d168      	bne.n	e2bfe <mbedtls_pkcs12_derivation+0x1ca>
            goto exit;

        if( ( ret = mbedtls_md_finish( &md_ctx, hash_output ) ) != 0 )
   e2b2c:	a906      	add	r1, sp, #24
   e2b2e:	a803      	add	r0, sp, #12
   e2b30:	f7fa f92c 	bl	dcd8c <mbedtls_md_finish>
   e2b34:	4607      	mov	r7, r0
   e2b36:	2800      	cmp	r0, #0
   e2b38:	d161      	bne.n	e2bfe <mbedtls_pkcs12_derivation+0x1ca>
            goto exit;

        // Perform remaining ( iterations - 1 ) recursive hash calculations
        for( i = 1; i < (size_t) iterations; i++ )
   e2b3a:	f04f 0901 	mov.w	r9, #1
   e2b3e:	9ba6      	ldr	r3, [sp, #664]	; 0x298
   e2b40:	454b      	cmp	r3, r9
   e2b42:	d90b      	bls.n	e2b5c <mbedtls_pkcs12_derivation+0x128>
        {
            if( ( ret = mbedtls_md( md_info, hash_output, hlen, hash_output ) ) != 0 )
   e2b44:	ab06      	add	r3, sp, #24
   e2b46:	4642      	mov	r2, r8
   e2b48:	4619      	mov	r1, r3
   e2b4a:	4630      	mov	r0, r6
   e2b4c:	f7fa f928 	bl	dcda0 <mbedtls_md>
   e2b50:	4607      	mov	r7, r0
   e2b52:	2800      	cmp	r0, #0
   e2b54:	d153      	bne.n	e2bfe <mbedtls_pkcs12_derivation+0x1ca>
        for( i = 1; i < (size_t) iterations; i++ )
   e2b56:	f109 0901 	add.w	r9, r9, #1
   e2b5a:	e7f0      	b.n	e2b3e <mbedtls_pkcs12_derivation+0x10a>
                goto exit;
        }

        use_len = ( datalen > hlen ) ? hlen : datalen;
   e2b5c:	4545      	cmp	r5, r8
   e2b5e:	46a9      	mov	r9, r5
   e2b60:	bf28      	it	cs
   e2b62:	46c1      	movcs	r9, r8
        memcpy( p, hash_output, use_len );
   e2b64:	9801      	ldr	r0, [sp, #4]
   e2b66:	464a      	mov	r2, r9
   e2b68:	a906      	add	r1, sp, #24
   e2b6a:	f005 feaf 	bl	e88cc <memcpy>
        datalen -= use_len;
        p += use_len;
   e2b6e:	9b01      	ldr	r3, [sp, #4]

        if( datalen == 0 )
   e2b70:	ebb5 0509 	subs.w	r5, r5, r9
        p += use_len;
   e2b74:	444b      	add	r3, r9
   e2b76:	9301      	str	r3, [sp, #4]
        if( datalen == 0 )
   e2b78:	d040      	beq.n	e2bfc <mbedtls_pkcs12_derivation+0x1c8>
    unsigned char *p = data;
   e2b7a:	ab76      	add	r3, sp, #472	; 0x1d8
   e2b7c:	46a1      	mov	r9, r4
   e2b7e:	469b      	mov	fp, r3
        use_len = ( data_len > fill_len ) ? fill_len : data_len;
   e2b80:	45c8      	cmp	r8, r9
   e2b82:	4647      	mov	r7, r8
   e2b84:	bf28      	it	cs
   e2b86:	464f      	movcs	r7, r9
        memcpy( p, filler, use_len );
   e2b88:	4618      	mov	r0, r3
   e2b8a:	463a      	mov	r2, r7
   e2b8c:	a906      	add	r1, sp, #24
   e2b8e:	f005 fe9d 	bl	e88cc <memcpy>
    while( data_len > 0 )
   e2b92:	ebb9 0907 	subs.w	r9, r9, r7
        memcpy( p, filler, use_len );
   e2b96:	4603      	mov	r3, r0
        p += use_len;
   e2b98:	443b      	add	r3, r7
    while( data_len > 0 )
   e2b9a:	d1f1      	bne.n	e2b80 <mbedtls_pkcs12_derivation+0x14c>
   e2b9c:	ab76      	add	r3, sp, #472	; 0x1d8
   e2b9e:	191a      	adds	r2, r3, r4

        // Concatenating copies of hash_output into hash_block (B)
        pkcs12_fill_buffer( hash_block, v, hash_output, hlen );

        // B += 1
        for( i = v; i > 0; i-- )
   e2ba0:	4621      	mov	r1, r4
            if( ++hash_block[i - 1] != 0 )
   e2ba2:	f812 3c01 	ldrb.w	r3, [r2, #-1]
   e2ba6:	3301      	adds	r3, #1
   e2ba8:	b2db      	uxtb	r3, r3
   e2baa:	3901      	subs	r1, #1
   e2bac:	f802 3c01 	strb.w	r3, [r2, #-1]
   e2bb0:	b913      	cbnz	r3, e2bb8 <mbedtls_pkcs12_derivation+0x184>
        for( i = v; i > 0; i-- )
   e2bb2:	3a01      	subs	r2, #1
   e2bb4:	2900      	cmp	r1, #0
   e2bb6:	d1f4      	bne.n	e2ba2 <mbedtls_pkcs12_derivation+0x16e>
   e2bb8:	ab36      	add	r3, sp, #216	; 0xd8
   e2bba:	1919      	adds	r1, r3, r4
   e2bbc:	2000      	movs	r0, #0
   e2bbe:	4623      	mov	r3, r4

        // salt_block += B
        c = 0;
        for( i = v; i > 0; i-- )
        {
            j = salt_block[i - 1] + hash_block[i - 1] + c;
   e2bc0:	3b01      	subs	r3, #1
   e2bc2:	f811 2c01 	ldrb.w	r2, [r1, #-1]
   e2bc6:	f81b c003 	ldrb.w	ip, [fp, r3]
   e2bca:	4462      	add	r2, ip
   e2bcc:	4402      	add	r2, r0
            c = (unsigned char) (j >> 8);
            salt_block[i - 1] = j & 0xFF;
   e2bce:	f801 2d01 	strb.w	r2, [r1, #-1]!
            c = (unsigned char) (j >> 8);
   e2bd2:	f3c2 2007 	ubfx	r0, r2, #8, #8
        for( i = v; i > 0; i-- )
   e2bd6:	2b00      	cmp	r3, #0
   e2bd8:	d1f2      	bne.n	e2bc0 <mbedtls_pkcs12_derivation+0x18c>
   e2bda:	aa56      	add	r2, sp, #344	; 0x158
   e2bdc:	1911      	adds	r1, r2, r4
        }

        // pwd_block  += B
        c = 0;
        for( i = v; i > 0; i-- )
   e2bde:	4620      	mov	r0, r4
        {
            j = pwd_block[i - 1] + hash_block[i - 1] + c;
   e2be0:	3801      	subs	r0, #1
   e2be2:	f811 2c01 	ldrb.w	r2, [r1, #-1]
   e2be6:	f81b c000 	ldrb.w	ip, [fp, r0]
   e2bea:	4462      	add	r2, ip
   e2bec:	441a      	add	r2, r3
            c = (unsigned char) (j >> 8);
            pwd_block[i - 1] = j & 0xFF;
   e2bee:	f801 2d01 	strb.w	r2, [r1, #-1]!
            c = (unsigned char) (j >> 8);
   e2bf2:	f3c2 2307 	ubfx	r3, r2, #8, #8
        for( i = v; i > 0; i-- )
   e2bf6:	2800      	cmp	r0, #0
   e2bf8:	d1f2      	bne.n	e2be0 <mbedtls_pkcs12_derivation+0x1ac>
   e2bfa:	e775      	b.n	e2ae8 <mbedtls_pkcs12_derivation+0xb4>
        }
    }

    ret = 0;
   e2bfc:	2700      	movs	r7, #0

exit:
    mbedtls_platform_zeroize( salt_block, sizeof( salt_block ) );
   e2bfe:	2180      	movs	r1, #128	; 0x80
   e2c00:	a836      	add	r0, sp, #216	; 0xd8
   e2c02:	f7f8 f9eb 	bl	dafdc <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( pwd_block, sizeof( pwd_block ) );
   e2c06:	2180      	movs	r1, #128	; 0x80
   e2c08:	4650      	mov	r0, sl
   e2c0a:	f7f8 f9e7 	bl	dafdc <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( hash_block, sizeof( hash_block ) );
   e2c0e:	2180      	movs	r1, #128	; 0x80
   e2c10:	a876      	add	r0, sp, #472	; 0x1d8
   e2c12:	f7f8 f9e3 	bl	dafdc <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( hash_output, sizeof( hash_output ) );
   e2c16:	2140      	movs	r1, #64	; 0x40
   e2c18:	a806      	add	r0, sp, #24
   e2c1a:	f7f8 f9df 	bl	dafdc <mbedtls_platform_zeroize>

    mbedtls_md_free( &md_ctx );
   e2c1e:	a803      	add	r0, sp, #12
   e2c20:	f7fa f865 	bl	dccee <mbedtls_md_free>

    return( ret );
   e2c24:	4638      	mov	r0, r7
}
   e2c26:	f50d 7d17 	add.w	sp, sp, #604	; 0x25c
   e2c2a:	ecbd 8b02 	vpop	{d8}
   e2c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );
   e2c32:	4802      	ldr	r0, [pc, #8]	; (e2c3c <mbedtls_pkcs12_derivation+0x208>)
   e2c34:	e7f7      	b.n	e2c26 <mbedtls_pkcs12_derivation+0x1f2>
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );
   e2c36:	4802      	ldr	r0, [pc, #8]	; (e2c40 <mbedtls_pkcs12_derivation+0x20c>)
   e2c38:	e7f5      	b.n	e2c26 <mbedtls_pkcs12_derivation+0x1f2>
   e2c3a:	bf00      	nop
   e2c3c:	ffffe080 	.word	0xffffe080
   e2c40:	ffffe100 	.word	0xffffe100

000e2c44 <mbedtls_pkcs12_pbe>:
{
   e2c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e2c48:	b0db      	sub	sp, #364	; 0x16c
   e2c4a:	4604      	mov	r4, r0
    size_t olen = 0;
   e2c4c:	f04f 0b00 	mov.w	fp, #0
    cipher_info = mbedtls_cipher_info_from_type( cipher_type );
   e2c50:	4610      	mov	r0, r2
{
   e2c52:	9d65      	ldr	r5, [sp, #404]	; 0x194
    size_t olen = 0;
   e2c54:	f8cd b020 	str.w	fp, [sp, #32]
{
   e2c58:	4689      	mov	r9, r1
   e2c5a:	4698      	mov	r8, r3
    cipher_info = mbedtls_cipher_info_from_type( cipher_type );
   e2c5c:	f7f3 fa02 	bl	d6064 <mbedtls_cipher_info_from_type>
    if( cipher_info == NULL )
   e2c60:	4606      	mov	r6, r0
   e2c62:	2800      	cmp	r0, #0
   e2c64:	f000 80b2 	beq.w	e2dcc <mbedtls_pkcs12_pbe+0x188>
    if( pwdlen > PKCS12_MAX_PWDLEN )
   e2c68:	2d80      	cmp	r5, #128	; 0x80
    keylen = cipher_info->key_bitlen / 8;
   e2c6a:	6847      	ldr	r7, [r0, #4]
                                          iv, cipher_info->iv_size ) ) != 0 )
   e2c6c:	f8d0 a00c 	ldr.w	sl, [r0, #12]
    int ret, iterations = 0;
   e2c70:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
    if( pwdlen > PKCS12_MAX_PWDLEN )
   e2c74:	d904      	bls.n	e2c80 <mbedtls_pkcs12_pbe+0x3c>
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );
   e2c76:	4c57      	ldr	r4, [pc, #348]	; (e2dd4 <mbedtls_pkcs12_pbe+0x190>)
}
   e2c78:	4620      	mov	r0, r4
   e2c7a:	b05b      	add	sp, #364	; 0x16c
   e2c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memset( &unipwd, 0, sizeof(unipwd) );
   e2c80:	4659      	mov	r1, fp
   e2c82:	f44f 7281 	mov.w	r2, #258	; 0x102
   e2c86:	a819      	add	r0, sp, #100	; 0x64
    memset( &salt, 0, sizeof(mbedtls_asn1_buf) );
   e2c88:	e9cd bb0a 	strd	fp, fp, [sp, #40]	; 0x28
   e2c8c:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
    memset( &unipwd, 0, sizeof(unipwd) );
   e2c90:	f005 fe44 	bl	e891c <memset>
    const unsigned char *end = params->p + params->len;
   e2c94:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   e2c98:	4419      	add	r1, r3
    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
   e2c9a:	6823      	ldr	r3, [r4, #0]
   e2c9c:	2b30      	cmp	r3, #48	; 0x30
    unsigned char **p = &params->p;
   e2c9e:	f104 0b08 	add.w	fp, r4, #8
    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
   e2ca2:	f040 8095 	bne.w	e2dd0 <mbedtls_pkcs12_pbe+0x18c>
    if( ( ret = mbedtls_asn1_get_tag( p, end, &salt->len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
   e2ca6:	2304      	movs	r3, #4
   e2ca8:	aa0b      	add	r2, sp, #44	; 0x2c
   e2caa:	4658      	mov	r0, fp
   e2cac:	9107      	str	r1, [sp, #28]
   e2cae:	f7f3 fb91 	bl	d63d4 <mbedtls_asn1_get_tag>
   e2cb2:	9907      	ldr	r1, [sp, #28]
   e2cb4:	b170      	cbz	r0, e2cd4 <mbedtls_pkcs12_pbe+0x90>
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT + ret );
   e2cb6:	f5a0 54f4 	sub.w	r4, r0, #7808	; 0x1e80
    if( ( ret = pkcs12_parse_pbe_params( pbe_params, &salt,
   e2cba:	2c00      	cmp	r4, #0
   e2cbc:	d1dc      	bne.n	e2c78 <mbedtls_pkcs12_pbe+0x34>
{
   e2cbe:	2300      	movs	r3, #0
    for( i = 0; i < pwdlen; i++ )
   e2cc0:	429d      	cmp	r5, r3
   e2cc2:	d019      	beq.n	e2cf8 <mbedtls_pkcs12_pbe+0xb4>
        unipwd[i * 2 + 1] = pwd[i];
   e2cc4:	9964      	ldr	r1, [sp, #400]	; 0x190
   e2cc6:	aa19      	add	r2, sp, #100	; 0x64
   e2cc8:	eb02 0243 	add.w	r2, r2, r3, lsl #1
   e2ccc:	5cc9      	ldrb	r1, [r1, r3]
   e2cce:	7051      	strb	r1, [r2, #1]
    for( i = 0; i < pwdlen; i++ )
   e2cd0:	3301      	adds	r3, #1
   e2cd2:	e7f5      	b.n	e2cc0 <mbedtls_pkcs12_pbe+0x7c>
    salt->p = *p;
   e2cd4:	68a3      	ldr	r3, [r4, #8]
    *p += salt->len;
   e2cd6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    salt->p = *p;
   e2cd8:	930c      	str	r3, [sp, #48]	; 0x30
    *p += salt->len;
   e2cda:	4413      	add	r3, r2
   e2cdc:	60a3      	str	r3, [r4, #8]
    if( ( ret = mbedtls_asn1_get_int( p, end, iterations ) ) != 0 )
   e2cde:	aa09      	add	r2, sp, #36	; 0x24
   e2ce0:	4658      	mov	r0, fp
   e2ce2:	9107      	str	r1, [sp, #28]
   e2ce4:	f7f3 fba3 	bl	d642e <mbedtls_asn1_get_int>
   e2ce8:	9907      	ldr	r1, [sp, #28]
   e2cea:	2800      	cmp	r0, #0
   e2cec:	d1e3      	bne.n	e2cb6 <mbedtls_pkcs12_pbe+0x72>
    if( *p != end )
   e2cee:	68a3      	ldr	r3, [r4, #8]
   e2cf0:	4299      	cmp	r1, r3
   e2cf2:	d0e4      	beq.n	e2cbe <mbedtls_pkcs12_pbe+0x7a>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   e2cf4:	4c38      	ldr	r4, [pc, #224]	; (e2dd8 <mbedtls_pkcs12_pbe+0x194>)
   e2cf6:	e7bf      	b.n	e2c78 <mbedtls_pkcs12_pbe+0x34>
    if( ( ret = mbedtls_pkcs12_derivation( key, keylen, unipwd, pwdlen * 2 + 2,
   e2cf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   e2cfa:	9204      	str	r2, [sp, #16]
   e2cfc:	2201      	movs	r2, #1
   e2cfe:	e9cd 8202 	strd	r8, r2, [sp, #8]
   e2d02:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   e2d04:	9201      	str	r2, [sp, #4]
    keylen = cipher_info->key_bitlen / 8;
   e2d06:	08ff      	lsrs	r7, r7, #3
    if( ( ret = mbedtls_pkcs12_derivation( key, keylen, unipwd, pwdlen * 2 + 2,
   e2d08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   e2d0a:	9200      	str	r2, [sp, #0]
   e2d0c:	1c6b      	adds	r3, r5, #1
   e2d0e:	005b      	lsls	r3, r3, #1
   e2d10:	aa19      	add	r2, sp, #100	; 0x64
   e2d12:	4639      	mov	r1, r7
   e2d14:	a811      	add	r0, sp, #68	; 0x44
   e2d16:	9307      	str	r3, [sp, #28]
   e2d18:	f7ff fe8c 	bl	e2a34 <mbedtls_pkcs12_derivation>
   e2d1c:	4604      	mov	r4, r0
   e2d1e:	2800      	cmp	r0, #0
   e2d20:	d1aa      	bne.n	e2c78 <mbedtls_pkcs12_pbe+0x34>
    if( iv == NULL || ivlen == 0 )
   e2d22:	9b07      	ldr	r3, [sp, #28]
   e2d24:	f1ba 0f00 	cmp.w	sl, #0
   e2d28:	d13e      	bne.n	e2da8 <mbedtls_pkcs12_pbe+0x164>
    mbedtls_cipher_init( &cipher_ctx );
   e2d2a:	a819      	add	r0, sp, #100	; 0x64
   e2d2c:	f7f3 f9ba 	bl	d60a4 <mbedtls_cipher_init>
    if( ( ret = mbedtls_cipher_setup( &cipher_ctx, cipher_info ) ) != 0 )
   e2d30:	4631      	mov	r1, r6
   e2d32:	a819      	add	r0, sp, #100	; 0x64
   e2d34:	f7f3 f9ca 	bl	d60cc <mbedtls_cipher_setup>
   e2d38:	4604      	mov	r4, r0
   e2d3a:	bb48      	cbnz	r0, e2d90 <mbedtls_pkcs12_pbe+0x14c>
    if( ( ret = mbedtls_cipher_setkey( &cipher_ctx, key, 8 * keylen, (mbedtls_operation_t) mode ) ) != 0 )
   e2d3c:	fa4f f389 	sxtb.w	r3, r9
   e2d40:	00fa      	lsls	r2, r7, #3
   e2d42:	a911      	add	r1, sp, #68	; 0x44
   e2d44:	a819      	add	r0, sp, #100	; 0x64
   e2d46:	f7f3 f9d9 	bl	d60fc <mbedtls_cipher_setkey>
   e2d4a:	4604      	mov	r4, r0
   e2d4c:	bb00      	cbnz	r0, e2d90 <mbedtls_pkcs12_pbe+0x14c>
    if( ( ret = mbedtls_cipher_set_iv( &cipher_ctx, iv, cipher_info->iv_size ) ) != 0 )
   e2d4e:	68f2      	ldr	r2, [r6, #12]
   e2d50:	a90d      	add	r1, sp, #52	; 0x34
   e2d52:	a819      	add	r0, sp, #100	; 0x64
   e2d54:	f7f3 f9f2 	bl	d613c <mbedtls_cipher_set_iv>
   e2d58:	4604      	mov	r4, r0
   e2d5a:	b9c8      	cbnz	r0, e2d90 <mbedtls_pkcs12_pbe+0x14c>
    if( ( ret = mbedtls_cipher_reset( &cipher_ctx ) ) != 0 )
   e2d5c:	a819      	add	r0, sp, #100	; 0x64
   e2d5e:	f7f3 fa0f 	bl	d6180 <mbedtls_cipher_reset>
   e2d62:	4604      	mov	r4, r0
   e2d64:	b9a0      	cbnz	r0, e2d90 <mbedtls_pkcs12_pbe+0x14c>
    if( ( ret = mbedtls_cipher_update( &cipher_ctx, data, len,
   e2d66:	ad08      	add	r5, sp, #32
   e2d68:	e9dd 2367 	ldrd	r2, r3, [sp, #412]	; 0x19c
   e2d6c:	9966      	ldr	r1, [sp, #408]	; 0x198
   e2d6e:	9500      	str	r5, [sp, #0]
   e2d70:	a819      	add	r0, sp, #100	; 0x64
   e2d72:	f7f3 fa0f 	bl	d6194 <mbedtls_cipher_update>
   e2d76:	4604      	mov	r4, r0
   e2d78:	b950      	cbnz	r0, e2d90 <mbedtls_pkcs12_pbe+0x14c>
    if( ( ret = mbedtls_cipher_finish( &cipher_ctx, output + olen, &olen ) ) != 0 )
   e2d7a:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   e2d7c:	6829      	ldr	r1, [r5, #0]
   e2d7e:	462a      	mov	r2, r5
   e2d80:	4419      	add	r1, r3
   e2d82:	a819      	add	r0, sp, #100	; 0x64
   e2d84:	f7f3 fa46 	bl	d6214 <mbedtls_cipher_finish>
        ret = MBEDTLS_ERR_PKCS12_PASSWORD_MISMATCH;
   e2d88:	4b14      	ldr	r3, [pc, #80]	; (e2ddc <mbedtls_pkcs12_pbe+0x198>)
   e2d8a:	1e04      	subs	r4, r0, #0
   e2d8c:	bf18      	it	ne
   e2d8e:	461c      	movne	r4, r3
    mbedtls_platform_zeroize( key, sizeof( key ) );
   e2d90:	a811      	add	r0, sp, #68	; 0x44
   e2d92:	2120      	movs	r1, #32
   e2d94:	f7f8 f922 	bl	dafdc <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( iv,  sizeof( iv  ) );
   e2d98:	a80d      	add	r0, sp, #52	; 0x34
   e2d9a:	2110      	movs	r1, #16
   e2d9c:	f7f8 f91e 	bl	dafdc <mbedtls_platform_zeroize>
    mbedtls_cipher_free( &cipher_ctx );
   e2da0:	a819      	add	r0, sp, #100	; 0x64
   e2da2:	f7f3 f983 	bl	d60ac <mbedtls_cipher_free>
    return( ret );
   e2da6:	e767      	b.n	e2c78 <mbedtls_pkcs12_pbe+0x34>
    if( ( ret = mbedtls_pkcs12_derivation( iv, ivlen, unipwd, pwdlen * 2 + 2,
   e2da8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   e2daa:	9204      	str	r2, [sp, #16]
   e2dac:	2202      	movs	r2, #2
   e2dae:	e9cd 8202 	strd	r8, r2, [sp, #8]
   e2db2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   e2db4:	9201      	str	r2, [sp, #4]
   e2db6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   e2db8:	9200      	str	r2, [sp, #0]
   e2dba:	4651      	mov	r1, sl
   e2dbc:	aa19      	add	r2, sp, #100	; 0x64
   e2dbe:	a80d      	add	r0, sp, #52	; 0x34
   e2dc0:	f7ff fe38 	bl	e2a34 <mbedtls_pkcs12_derivation>
   e2dc4:	4604      	mov	r4, r0
   e2dc6:	2800      	cmp	r0, #0
   e2dc8:	d0af      	beq.n	e2d2a <mbedtls_pkcs12_pbe+0xe6>
   e2dca:	e755      	b.n	e2c78 <mbedtls_pkcs12_pbe+0x34>
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );
   e2dcc:	4c04      	ldr	r4, [pc, #16]	; (e2de0 <mbedtls_pkcs12_pbe+0x19c>)
   e2dce:	e753      	b.n	e2c78 <mbedtls_pkcs12_pbe+0x34>
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
   e2dd0:	4c04      	ldr	r4, [pc, #16]	; (e2de4 <mbedtls_pkcs12_pbe+0x1a0>)
   e2dd2:	e751      	b.n	e2c78 <mbedtls_pkcs12_pbe+0x34>
   e2dd4:	ffffe080 	.word	0xffffe080
   e2dd8:	ffffe11a 	.word	0xffffe11a
   e2ddc:	ffffe200 	.word	0xffffe200
   e2de0:	ffffe100 	.word	0xffffe100
   e2de4:	ffffe11e 	.word	0xffffe11e

000e2de8 <mbedtls_sha512_init>:

void mbedtls_sha512_init( mbedtls_sha512_context *ctx )
{
    SHA512_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_sha512_context ) );
   e2de8:	22d8      	movs	r2, #216	; 0xd8
   e2dea:	2100      	movs	r1, #0
   e2dec:	f005 bd96 	b.w	e891c <memset>

000e2df0 <mbedtls_sha512_free>:
}

void mbedtls_sha512_free( mbedtls_sha512_context *ctx )
{
    if( ctx == NULL )
   e2df0:	b110      	cbz	r0, e2df8 <mbedtls_sha512_free+0x8>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_sha512_context ) );
   e2df2:	21d8      	movs	r1, #216	; 0xd8
   e2df4:	f7f8 b8f2 	b.w	dafdc <mbedtls_platform_zeroize>
}
   e2df8:	4770      	bx	lr

000e2dfa <mbedtls_sha512_clone>:

void mbedtls_sha512_clone( mbedtls_sha512_context *dst,
                           const mbedtls_sha512_context *src )
{
   e2dfa:	b508      	push	{r3, lr}
    SHA512_VALIDATE( dst != NULL );
    SHA512_VALIDATE( src != NULL );

    *dst = *src;
   e2dfc:	22d8      	movs	r2, #216	; 0xd8
   e2dfe:	f005 fd65 	bl	e88cc <memcpy>
}
   e2e02:	bd08      	pop	{r3, pc}
   e2e04:	0000      	movs	r0, r0
	...

000e2e08 <mbedtls_sha512_starts_ret>:
int mbedtls_sha512_starts_ret( mbedtls_sha512_context *ctx, int is384 )
{
    SHA512_VALIDATE_RET( ctx != NULL );
    SHA512_VALIDATE_RET( is384 == 0 || is384 == 1 );

    ctx->total[0] = 0;
   e2e08:	2200      	movs	r2, #0
   e2e0a:	2300      	movs	r3, #0
   e2e0c:	e9c0 2300 	strd	r2, r3, [r0]
    ctx->total[1] = 0;
   e2e10:	e9c0 2302 	strd	r2, r3, [r0, #8]

    if( is384 == 0 )
   e2e14:	bb59      	cbnz	r1, e2e6e <mbedtls_sha512_starts_ret+0x66>
    {
        /* SHA-512 */
        ctx->state[0] = UL64(0x6A09E667F3BCC908);
   e2e16:	a32a      	add	r3, pc, #168	; (adr r3, e2ec0 <mbedtls_sha512_starts_ret+0xb8>)
   e2e18:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2e1c:	e9c0 2304 	strd	r2, r3, [r0, #16]
        ctx->state[1] = UL64(0xBB67AE8584CAA73B);
   e2e20:	a329      	add	r3, pc, #164	; (adr r3, e2ec8 <mbedtls_sha512_starts_ret+0xc0>)
   e2e22:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2e26:	e9c0 2306 	strd	r2, r3, [r0, #24]
        ctx->state[2] = UL64(0x3C6EF372FE94F82B);
   e2e2a:	a329      	add	r3, pc, #164	; (adr r3, e2ed0 <mbedtls_sha512_starts_ret+0xc8>)
   e2e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2e30:	e9c0 2308 	strd	r2, r3, [r0, #32]
        ctx->state[3] = UL64(0xA54FF53A5F1D36F1);
   e2e34:	a328      	add	r3, pc, #160	; (adr r3, e2ed8 <mbedtls_sha512_starts_ret+0xd0>)
   e2e36:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2e3a:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
        ctx->state[4] = UL64(0x510E527FADE682D1);
   e2e3e:	a328      	add	r3, pc, #160	; (adr r3, e2ee0 <mbedtls_sha512_starts_ret+0xd8>)
   e2e40:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2e44:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
        ctx->state[5] = UL64(0x9B05688C2B3E6C1F);
   e2e48:	a327      	add	r3, pc, #156	; (adr r3, e2ee8 <mbedtls_sha512_starts_ret+0xe0>)
   e2e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2e4e:	e9c0 230e 	strd	r2, r3, [r0, #56]	; 0x38
        ctx->state[6] = UL64(0x1F83D9ABFB41BD6B);
   e2e52:	a327      	add	r3, pc, #156	; (adr r3, e2ef0 <mbedtls_sha512_starts_ret+0xe8>)
   e2e54:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2e58:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
        ctx->state[7] = UL64(0x5BE0CD19137E2179);
   e2e5c:	a326      	add	r3, pc, #152	; (adr r3, e2ef8 <mbedtls_sha512_starts_ret+0xf0>)
   e2e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
        ctx->state[2] = UL64(0x9159015A3070DD17);
        ctx->state[3] = UL64(0x152FECD8F70E5939);
        ctx->state[4] = UL64(0x67332667FFC00B31);
        ctx->state[5] = UL64(0x8EB44A8768581511);
        ctx->state[6] = UL64(0xDB0C2E0D64F98FA7);
        ctx->state[7] = UL64(0x47B5481DBEFA4FA4);
   e2e62:	e9c0 2312 	strd	r2, r3, [r0, #72]	; 0x48
    }

    ctx->is384 = is384;
   e2e66:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0

    return( 0 );
}
   e2e6a:	2000      	movs	r0, #0
   e2e6c:	4770      	bx	lr
        ctx->state[0] = UL64(0xCBBB9D5DC1059ED8);
   e2e6e:	a324      	add	r3, pc, #144	; (adr r3, e2f00 <mbedtls_sha512_starts_ret+0xf8>)
   e2e70:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2e74:	e9c0 2304 	strd	r2, r3, [r0, #16]
        ctx->state[1] = UL64(0x629A292A367CD507);
   e2e78:	a323      	add	r3, pc, #140	; (adr r3, e2f08 <mbedtls_sha512_starts_ret+0x100>)
   e2e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2e7e:	e9c0 2306 	strd	r2, r3, [r0, #24]
        ctx->state[2] = UL64(0x9159015A3070DD17);
   e2e82:	a323      	add	r3, pc, #140	; (adr r3, e2f10 <mbedtls_sha512_starts_ret+0x108>)
   e2e84:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2e88:	e9c0 2308 	strd	r2, r3, [r0, #32]
        ctx->state[3] = UL64(0x152FECD8F70E5939);
   e2e8c:	a322      	add	r3, pc, #136	; (adr r3, e2f18 <mbedtls_sha512_starts_ret+0x110>)
   e2e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2e92:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
        ctx->state[4] = UL64(0x67332667FFC00B31);
   e2e96:	a322      	add	r3, pc, #136	; (adr r3, e2f20 <mbedtls_sha512_starts_ret+0x118>)
   e2e98:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2e9c:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
        ctx->state[5] = UL64(0x8EB44A8768581511);
   e2ea0:	a321      	add	r3, pc, #132	; (adr r3, e2f28 <mbedtls_sha512_starts_ret+0x120>)
   e2ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2ea6:	e9c0 230e 	strd	r2, r3, [r0, #56]	; 0x38
        ctx->state[6] = UL64(0xDB0C2E0D64F98FA7);
   e2eaa:	a321      	add	r3, pc, #132	; (adr r3, e2f30 <mbedtls_sha512_starts_ret+0x128>)
   e2eac:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2eb0:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
        ctx->state[7] = UL64(0x47B5481DBEFA4FA4);
   e2eb4:	a320      	add	r3, pc, #128	; (adr r3, e2f38 <mbedtls_sha512_starts_ret+0x130>)
   e2eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2eba:	e7d2      	b.n	e2e62 <mbedtls_sha512_starts_ret+0x5a>
   e2ebc:	f3af 8000 	nop.w
   e2ec0:	f3bcc908 	.word	0xf3bcc908
   e2ec4:	6a09e667 	.word	0x6a09e667
   e2ec8:	84caa73b 	.word	0x84caa73b
   e2ecc:	bb67ae85 	.word	0xbb67ae85
   e2ed0:	fe94f82b 	.word	0xfe94f82b
   e2ed4:	3c6ef372 	.word	0x3c6ef372
   e2ed8:	5f1d36f1 	.word	0x5f1d36f1
   e2edc:	a54ff53a 	.word	0xa54ff53a
   e2ee0:	ade682d1 	.word	0xade682d1
   e2ee4:	510e527f 	.word	0x510e527f
   e2ee8:	2b3e6c1f 	.word	0x2b3e6c1f
   e2eec:	9b05688c 	.word	0x9b05688c
   e2ef0:	fb41bd6b 	.word	0xfb41bd6b
   e2ef4:	1f83d9ab 	.word	0x1f83d9ab
   e2ef8:	137e2179 	.word	0x137e2179
   e2efc:	5be0cd19 	.word	0x5be0cd19
   e2f00:	c1059ed8 	.word	0xc1059ed8
   e2f04:	cbbb9d5d 	.word	0xcbbb9d5d
   e2f08:	367cd507 	.word	0x367cd507
   e2f0c:	629a292a 	.word	0x629a292a
   e2f10:	3070dd17 	.word	0x3070dd17
   e2f14:	9159015a 	.word	0x9159015a
   e2f18:	f70e5939 	.word	0xf70e5939
   e2f1c:	152fecd8 	.word	0x152fecd8
   e2f20:	ffc00b31 	.word	0xffc00b31
   e2f24:	67332667 	.word	0x67332667
   e2f28:	68581511 	.word	0x68581511
   e2f2c:	8eb44a87 	.word	0x8eb44a87
   e2f30:	64f98fa7 	.word	0x64f98fa7
   e2f34:	db0c2e0d 	.word	0xdb0c2e0d
   e2f38:	befa4fa4 	.word	0xbefa4fa4
   e2f3c:	47b5481d 	.word	0x47b5481d

000e2f40 <mbedtls_internal_sha512_process>:
    UL64(0x5FCB6FAB3AD6FAEC),  UL64(0x6C44198C4A475817)
};

int mbedtls_internal_sha512_process( mbedtls_sha512_context *ctx,
                                     const unsigned char data[128] )
{
   e2f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e2f44:	f5ad 7d3f 	sub.w	sp, sp, #764	; 0x2fc
   e2f48:	f101 0780 	add.w	r7, r1, #128	; 0x80
   e2f4c:	9000      	str	r0, [sp, #0]
   e2f4e:	a81e      	add	r0, sp, #120	; 0x78
   e2f50:	4606      	mov	r6, r0
        (d) += temp1; (h) = temp1 + temp2;                      \
    } while( 0 )

    for( i = 0; i < 16; i++ )
    {
        GET_UINT64_BE( W[i], data, i << 3 );
   e2f52:	784a      	ldrb	r2, [r1, #1]
   e2f54:	780c      	ldrb	r4, [r1, #0]
   e2f56:	f891 8002 	ldrb.w	r8, [r1, #2]
   e2f5a:	79cb      	ldrb	r3, [r1, #7]
   e2f5c:	f891 a004 	ldrb.w	sl, [r1, #4]
   e2f60:	0412      	lsls	r2, r2, #16
   e2f62:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
   e2f66:	ea42 2508 	orr.w	r5, r2, r8, lsl #8
   e2f6a:	794a      	ldrb	r2, [r1, #5]
   e2f6c:	f891 8003 	ldrb.w	r8, [r1, #3]
   e2f70:	ea43 640a 	orr.w	r4, r3, sl, lsl #24
   e2f74:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   e2f78:	798a      	ldrb	r2, [r1, #6]
   e2f7a:	3108      	adds	r1, #8
   e2f7c:	ea44 2202 	orr.w	r2, r4, r2, lsl #8
   e2f80:	ea45 0508 	orr.w	r5, r5, r8
    for( i = 0; i < 16; i++ )
   e2f84:	428f      	cmp	r7, r1
        GET_UINT64_BE( W[i], data, i << 3 );
   e2f86:	e9c6 2500 	strd	r2, r5, [r6]
   e2f8a:	f106 0608 	add.w	r6, r6, #8
    for( i = 0; i < 16; i++ )
   e2f8e:	d1e0      	bne.n	e2f52 <mbedtls_internal_sha512_process+0x12>
   e2f90:	4601      	mov	r1, r0
   e2f92:	2610      	movs	r6, #16
    }

    for( ; i < 80; i++ )
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
   e2f94:	e9d1 421c 	ldrd	r4, r2, [r1, #112]	; 0x70
   e2f98:	0ce3      	lsrs	r3, r4, #19
   e2f9a:	ea4f 4cd2 	mov.w	ip, r2, lsr #19
   e2f9e:	ea4f 08c2 	mov.w	r8, r2, lsl #3
   e2fa2:	ea4f 09c4 	mov.w	r9, r4, lsl #3
   e2fa6:	ea48 7854 	orr.w	r8, r8, r4, lsr #29
   e2faa:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
   e2fae:	ea4c 3c44 	orr.w	ip, ip, r4, lsl #13
   e2fb2:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
   e2fb6:	09a4      	lsrs	r4, r4, #6
   e2fb8:	468e      	mov	lr, r1
   e2fba:	ea8c 0c08 	eor.w	ip, ip, r8
   e2fbe:	ea44 6482 	orr.w	r4, r4, r2, lsl #26
   e2fc2:	ea83 0309 	eor.w	r3, r3, r9
   e2fc6:	4063      	eors	r3, r4
   e2fc8:	ea8c 1c92 	eor.w	ip, ip, r2, lsr #6
               S0(W[i - 15]) + W[i - 16];
   e2fcc:	e9de 4212 	ldrd	r4, r2, [lr, #72]	; 0x48
   e2fd0:	e9de 8e00 	ldrd	r8, lr, [lr]
   e2fd4:	e9d1 7502 	ldrd	r7, r5, [r1, #8]
   e2fd8:	eb14 0408 	adds.w	r4, r4, r8
   e2fdc:	eb42 020e 	adc.w	r2, r2, lr
   e2fe0:	191b      	adds	r3, r3, r4
   e2fe2:	eb4c 0c02 	adc.w	ip, ip, r2
   e2fe6:	087c      	lsrs	r4, r7, #1
   e2fe8:	0a3a      	lsrs	r2, r7, #8
   e2fea:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   e2fee:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
   e2ff2:	ea4f 0e55 	mov.w	lr, r5, lsr #1
   e2ff6:	ea4f 2815 	mov.w	r8, r5, lsr #8
   e2ffa:	4054      	eors	r4, r2
   e2ffc:	09fa      	lsrs	r2, r7, #7
   e2ffe:	ea42 6245 	orr.w	r2, r2, r5, lsl #25
   e3002:	ea4e 7ec7 	orr.w	lr, lr, r7, lsl #31
   e3006:	ea48 6807 	orr.w	r8, r8, r7, lsl #24
   e300a:	ea8e 0e08 	eor.w	lr, lr, r8
   e300e:	4062      	eors	r2, r4
   e3010:	189a      	adds	r2, r3, r2
   e3012:	ea8e 15d5 	eor.w	r5, lr, r5, lsr #7
    for( ; i < 80; i++ )
   e3016:	f106 0601 	add.w	r6, r6, #1
               S0(W[i - 15]) + W[i - 16];
   e301a:	eb4c 0505 	adc.w	r5, ip, r5
   e301e:	3108      	adds	r1, #8
    for( ; i < 80; i++ )
   e3020:	2e50      	cmp	r6, #80	; 0x50
        W[i] = S1(W[i -  2]) + W[i -  7] +
   e3022:	e9c1 251e 	strd	r2, r5, [r1, #120]	; 0x78
    for( ; i < 80; i++ )
   e3026:	d1b5      	bne.n	e2f94 <mbedtls_internal_sha512_process+0x54>
    }

    A = ctx->state[0];
   e3028:	9b00      	ldr	r3, [sp, #0]
   e302a:	4926      	ldr	r1, [pc, #152]	; (e30c4 <mbedtls_internal_sha512_process+0x184>)
   e302c:	691b      	ldr	r3, [r3, #16]
   e302e:	930e      	str	r3, [sp, #56]	; 0x38
   e3030:	9b00      	ldr	r3, [sp, #0]
   e3032:	695b      	ldr	r3, [r3, #20]
   e3034:	930f      	str	r3, [sp, #60]	; 0x3c
    B = ctx->state[1];
   e3036:	9b00      	ldr	r3, [sp, #0]
   e3038:	699b      	ldr	r3, [r3, #24]
   e303a:	9310      	str	r3, [sp, #64]	; 0x40
   e303c:	9b00      	ldr	r3, [sp, #0]
   e303e:	69db      	ldr	r3, [r3, #28]
   e3040:	9311      	str	r3, [sp, #68]	; 0x44
    C = ctx->state[2];
   e3042:	9b00      	ldr	r3, [sp, #0]
   e3044:	6a1b      	ldr	r3, [r3, #32]
   e3046:	9312      	str	r3, [sp, #72]	; 0x48
   e3048:	9b00      	ldr	r3, [sp, #0]
   e304a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   e304c:	9313      	str	r3, [sp, #76]	; 0x4c
    D = ctx->state[3];
   e304e:	9b00      	ldr	r3, [sp, #0]
   e3050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   e3052:	9314      	str	r3, [sp, #80]	; 0x50
   e3054:	9b00      	ldr	r3, [sp, #0]
   e3056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   e3058:	9315      	str	r3, [sp, #84]	; 0x54
    E = ctx->state[4];
   e305a:	9b00      	ldr	r3, [sp, #0]
   e305c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   e305e:	9316      	str	r3, [sp, #88]	; 0x58
   e3060:	9b00      	ldr	r3, [sp, #0]
   e3062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   e3064:	9317      	str	r3, [sp, #92]	; 0x5c
    F = ctx->state[5];
   e3066:	9b00      	ldr	r3, [sp, #0]
   e3068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   e306a:	9318      	str	r3, [sp, #96]	; 0x60
   e306c:	9b00      	ldr	r3, [sp, #0]
   e306e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   e3070:	9319      	str	r3, [sp, #100]	; 0x64
    G = ctx->state[6];
   e3072:	9b00      	ldr	r3, [sp, #0]
   e3074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   e3076:	931a      	str	r3, [sp, #104]	; 0x68
   e3078:	9b00      	ldr	r3, [sp, #0]
   e307a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   e307c:	931b      	str	r3, [sp, #108]	; 0x6c
    H = ctx->state[7];
   e307e:	9b00      	ldr	r3, [sp, #0]
   e3080:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   e3082:	931c      	str	r3, [sp, #112]	; 0x70
   e3084:	9b00      	ldr	r3, [sp, #0]
   e3086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   e3088:	931d      	str	r3, [sp, #116]	; 0x74
   e308a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   e308c:	9305      	str	r3, [sp, #20]
   e308e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e3090:	9306      	str	r3, [sp, #24]
    G = ctx->state[6];
   e3092:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   e3094:	9307      	str	r3, [sp, #28]
   e3096:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   e3098:	9308      	str	r3, [sp, #32]
    F = ctx->state[5];
   e309a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   e309c:	9309      	str	r3, [sp, #36]	; 0x24
   e309e:	9b19      	ldr	r3, [sp, #100]	; 0x64
   e30a0:	930a      	str	r3, [sp, #40]	; 0x28
    E = ctx->state[4];
   e30a2:	9b16      	ldr	r3, [sp, #88]	; 0x58
   e30a4:	930b      	str	r3, [sp, #44]	; 0x2c
   e30a6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e30a8:	930c      	str	r3, [sp, #48]	; 0x30
    D = ctx->state[3];
   e30aa:	e9dd a314 	ldrd	sl, r3, [sp, #80]	; 0x50
   e30ae:	9301      	str	r3, [sp, #4]
    C = ctx->state[2];
   e30b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   e30b2:	9302      	str	r3, [sp, #8]
    B = ctx->state[1];
   e30b4:	e9dd ce10 	ldrd	ip, lr, [sp, #64]	; 0x40
    C = ctx->state[2];
   e30b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   e30ba:	9303      	str	r3, [sp, #12]
    A = ctx->state[0];
   e30bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   e30be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   e30c0:	9304      	str	r3, [sp, #16]
   e30c2:	e001      	b.n	e30c8 <mbedtls_internal_sha512_process+0x188>
   e30c4:	000ecad0 	.word	0x000ecad0
    i = 0;

    do
    {
        P( A, B, C, D, E, F, G, H, W[i], K[i] ); i++;
   e30c8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   e30ca:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   e30cc:	9b04      	ldr	r3, [sp, #16]
   e30ce:	ea4f 3894 	mov.w	r8, r4, lsr #14
   e30d2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   e30d4:	ea48 4884 	orr.w	r8, r8, r4, lsl #18
   e30d8:	ea4f 3994 	mov.w	r9, r4, lsr #14
   e30dc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   e30de:	ea49 4984 	orr.w	r9, r9, r4, lsl #18
   e30e2:	0ca5      	lsrs	r5, r4, #18
   e30e4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   e30e6:	ea45 3584 	orr.w	r5, r5, r4, lsl #14
   e30ea:	0ca4      	lsrs	r4, r4, #18
   e30ec:	ea44 3486 	orr.w	r4, r4, r6, lsl #14
   e30f0:	ea89 0904 	eor.w	r9, r9, r4
   e30f4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   e30f6:	05e4      	lsls	r4, r4, #23
   e30f8:	ea44 2456 	orr.w	r4, r4, r6, lsr #9
   e30fc:	ea88 0805 	eor.w	r8, r8, r5
   e3100:	05f5      	lsls	r5, r6, #23
   e3102:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   e3104:	ea45 2556 	orr.w	r5, r5, r6, lsr #9
   e3108:	ea88 0805 	eor.w	r8, r8, r5
   e310c:	ea89 0904 	eor.w	r9, r9, r4
   e3110:	e9d1 5700 	ldrd	r5, r7, [r1]
   e3114:	e9d0 6400 	ldrd	r6, r4, [r0]
   e3118:	19ad      	adds	r5, r5, r6
   e311a:	eb47 0404 	adc.w	r4, r7, r4
   e311e:	9e09      	ldr	r6, [sp, #36]	; 0x24
   e3120:	9f07      	ldr	r7, [sp, #28]
   e3122:	ea86 0b07 	eor.w	fp, r6, r7
   e3126:	9f08      	ldr	r7, [sp, #32]
   e3128:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   e312a:	407e      	eors	r6, r7
   e312c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   e312e:	ea0b 0b07 	and.w	fp, fp, r7
   e3132:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   e3134:	403e      	ands	r6, r7
   e3136:	9f07      	ldr	r7, [sp, #28]
   e3138:	ea8b 0b07 	eor.w	fp, fp, r7
   e313c:	9f08      	ldr	r7, [sp, #32]
   e313e:	eb18 0505 	adds.w	r5, r8, r5
   e3142:	eb49 0404 	adc.w	r4, r9, r4
   e3146:	407e      	eors	r6, r7
   e3148:	eb15 050b 	adds.w	r5, r5, fp
   e314c:	eb46 0404 	adc.w	r4, r6, r4
   e3150:	9e05      	ldr	r6, [sp, #20]
   e3152:	19ad      	adds	r5, r5, r6
   e3154:	9e06      	ldr	r6, [sp, #24]
   e3156:	eb44 0606 	adc.w	r6, r4, r6
   e315a:	4634      	mov	r4, r6
   e315c:	eb15 060a 	adds.w	r6, r5, sl
   e3160:	9605      	str	r6, [sp, #20]
   e3162:	9e01      	ldr	r6, [sp, #4]
   e3164:	eb44 0606 	adc.w	r6, r4, r6
   e3168:	960d      	str	r6, [sp, #52]	; 0x34
   e316a:	ea4f 7913 	mov.w	r9, r3, lsr #28
   e316e:	079e      	lsls	r6, r3, #30
   e3170:	ea46 0692 	orr.w	r6, r6, r2, lsr #2
   e3174:	ea49 1902 	orr.w	r9, r9, r2, lsl #4
   e3178:	ea4f 7812 	mov.w	r8, r2, lsr #28
   e317c:	0797      	lsls	r7, r2, #30
   e317e:	ea47 0793 	orr.w	r7, r7, r3, lsr #2
   e3182:	ea48 1803 	orr.w	r8, r8, r3, lsl #4
   e3186:	ea89 0906 	eor.w	r9, r9, r6
   e318a:	065e      	lsls	r6, r3, #25
   e318c:	ea46 16d2 	orr.w	r6, r6, r2, lsr #7
   e3190:	ea88 0807 	eor.w	r8, r8, r7
   e3194:	0657      	lsls	r7, r2, #25
   e3196:	ea47 17d3 	orr.w	r7, r7, r3, lsr #7
   e319a:	ea89 0906 	eor.w	r9, r9, r6
   e319e:	ea43 060c 	orr.w	r6, r3, ip
   e31a2:	9b02      	ldr	r3, [sp, #8]
   e31a4:	401e      	ands	r6, r3
   e31a6:	9b03      	ldr	r3, [sp, #12]
   e31a8:	ea88 0807 	eor.w	r8, r8, r7
   e31ac:	ea42 070e 	orr.w	r7, r2, lr
   e31b0:	401f      	ands	r7, r3
   e31b2:	9b04      	ldr	r3, [sp, #16]
   e31b4:	ea03 0b0c 	and.w	fp, r3, ip
   e31b8:	ea02 0a0e 	and.w	sl, r2, lr
   e31bc:	ea46 060b 	orr.w	r6, r6, fp
   e31c0:	eb19 0606 	adds.w	r6, r9, r6
   e31c4:	ea47 070a 	orr.w	r7, r7, sl
   e31c8:	eb48 0707 	adc.w	r7, r8, r7
   e31cc:	1973      	adds	r3, r6, r5
   e31ce:	9301      	str	r3, [sp, #4]
   e31d0:	eb47 0304 	adc.w	r3, r7, r4
   e31d4:	9306      	str	r3, [sp, #24]
        P( H, A, B, C, D, E, F, G, W[i], K[i] ); i++;
   e31d6:	e9d1 4502 	ldrd	r4, r5, [r1, #8]
   e31da:	e9d0 6702 	ldrd	r6, r7, [r0, #8]
   e31de:	9b07      	ldr	r3, [sp, #28]
   e31e0:	19a4      	adds	r4, r4, r6
   e31e2:	eb47 0505 	adc.w	r5, r7, r5
   e31e6:	18e4      	adds	r4, r4, r3
   e31e8:	9b08      	ldr	r3, [sp, #32]
   e31ea:	eb45 0803 	adc.w	r8, r5, r3
   e31ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   e31f0:	9d09      	ldr	r5, [sp, #36]	; 0x24
   e31f2:	ea83 0a05 	eor.w	sl, r3, r5
   e31f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   e31f8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   e31fa:	405d      	eors	r5, r3
   e31fc:	9b05      	ldr	r3, [sp, #20]
   e31fe:	ea0a 0a03 	and.w	sl, sl, r3
   e3202:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   e3204:	401d      	ands	r5, r3
   e3206:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e3208:	ea8a 0a03 	eor.w	sl, sl, r3
   e320c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e320e:	ea85 0903 	eor.w	r9, r5, r3
   e3212:	9b05      	ldr	r3, [sp, #20]
   e3214:	eb14 0a0a 	adds.w	sl, r4, sl
   e3218:	ea4f 3493 	mov.w	r4, r3, lsr #14
   e321c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   e321e:	eb48 0509 	adc.w	r5, r8, r9
   e3222:	ea4f 3b93 	mov.w	fp, r3, lsr #14
   e3226:	ea44 4983 	orr.w	r9, r4, r3, lsl #18
   e322a:	9b05      	ldr	r3, [sp, #20]
   e322c:	ea4b 4883 	orr.w	r8, fp, r3, lsl #18
   e3230:	0c9c      	lsrs	r4, r3, #18
   e3232:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   e3234:	ea4f 4b93 	mov.w	fp, r3, lsr #18
   e3238:	ea44 3483 	orr.w	r4, r4, r3, lsl #14
   e323c:	9b05      	ldr	r3, [sp, #20]
   e323e:	ea4b 3683 	orr.w	r6, fp, r3, lsl #14
   e3242:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   e3244:	ea88 0b06 	eor.w	fp, r8, r6
   e3248:	ea4f 58c3 	mov.w	r8, r3, lsl #23
   e324c:	9b05      	ldr	r3, [sp, #20]
   e324e:	ea89 0404 	eor.w	r4, r9, r4
   e3252:	ea48 2853 	orr.w	r8, r8, r3, lsr #9
   e3256:	ea4f 59c3 	mov.w	r9, r3, lsl #23
   e325a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   e325c:	ea49 2953 	orr.w	r9, r9, r3, lsr #9
   e3260:	ea84 0409 	eor.w	r4, r4, r9
   e3264:	9b02      	ldr	r3, [sp, #8]
   e3266:	eb1a 0404 	adds.w	r4, sl, r4
   e326a:	ea8b 0808 	eor.w	r8, fp, r8
   e326e:	eb45 0808 	adc.w	r8, r5, r8
   e3272:	18e3      	adds	r3, r4, r3
   e3274:	9307      	str	r3, [sp, #28]
   e3276:	9b03      	ldr	r3, [sp, #12]
   e3278:	eb48 0303 	adc.w	r3, r8, r3
   e327c:	9308      	str	r3, [sp, #32]
   e327e:	9b01      	ldr	r3, [sp, #4]
   e3280:	0f1f      	lsrs	r7, r3, #28
   e3282:	9b06      	ldr	r3, [sp, #24]
   e3284:	0f1e      	lsrs	r6, r3, #28
   e3286:	ea47 1703 	orr.w	r7, r7, r3, lsl #4
   e328a:	9b01      	ldr	r3, [sp, #4]
   e328c:	ea46 1903 	orr.w	r9, r6, r3, lsl #4
   e3290:	9b06      	ldr	r3, [sp, #24]
   e3292:	079e      	lsls	r6, r3, #30
   e3294:	9b01      	ldr	r3, [sp, #4]
   e3296:	ea46 0693 	orr.w	r6, r6, r3, lsr #2
   e329a:	079d      	lsls	r5, r3, #30
   e329c:	9b06      	ldr	r3, [sp, #24]
   e329e:	ea89 0606 	eor.w	r6, r9, r6
   e32a2:	ea45 0593 	orr.w	r5, r5, r3, lsr #2
   e32a6:	ea4f 6943 	mov.w	r9, r3, lsl #25
   e32aa:	9b01      	ldr	r3, [sp, #4]
   e32ac:	406f      	eors	r7, r5
   e32ae:	ea49 19d3 	orr.w	r9, r9, r3, lsr #7
   e32b2:	065d      	lsls	r5, r3, #25
   e32b4:	9b06      	ldr	r3, [sp, #24]
   e32b6:	ea45 15d3 	orr.w	r5, r5, r3, lsr #7
   e32ba:	406f      	eors	r7, r5
   e32bc:	9b01      	ldr	r3, [sp, #4]
   e32be:	9d04      	ldr	r5, [sp, #16]
   e32c0:	431d      	orrs	r5, r3
   e32c2:	9b06      	ldr	r3, [sp, #24]
   e32c4:	ea86 0609 	eor.w	r6, r6, r9
   e32c8:	ea43 0902 	orr.w	r9, r3, r2
   e32cc:	ea05 030c 	and.w	r3, r5, ip
   e32d0:	9302      	str	r3, [sp, #8]
   e32d2:	9d04      	ldr	r5, [sp, #16]
   e32d4:	9b01      	ldr	r3, [sp, #4]
   e32d6:	ea03 0b05 	and.w	fp, r3, r5
   e32da:	9b06      	ldr	r3, [sp, #24]
   e32dc:	ea03 0a02 	and.w	sl, r3, r2
   e32e0:	9b02      	ldr	r3, [sp, #8]
   e32e2:	ea09 090e 	and.w	r9, r9, lr
   e32e6:	ea43 050b 	orr.w	r5, r3, fp
   e32ea:	197d      	adds	r5, r7, r5
   e32ec:	ea49 090a 	orr.w	r9, r9, sl
   e32f0:	eb46 0909 	adc.w	r9, r6, r9
        P( G, H, A, B, C, D, E, F, W[i], K[i] ); i++;
   e32f4:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
        P( H, A, B, C, D, E, F, G, W[i], K[i] ); i++;
   e32f8:	192b      	adds	r3, r5, r4
        P( G, H, A, B, C, D, E, F, W[i], K[i] ); i++;
   e32fa:	e9d1 4504 	ldrd	r4, r5, [r1, #16]
        P( H, A, B, C, D, E, F, G, W[i], K[i] ); i++;
   e32fe:	9302      	str	r3, [sp, #8]
   e3300:	eb49 0308 	adc.w	r3, r9, r8
   e3304:	9303      	str	r3, [sp, #12]
        P( G, H, A, B, C, D, E, F, W[i], K[i] ); i++;
   e3306:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e3308:	19a4      	adds	r4, r4, r6
   e330a:	eb47 0505 	adc.w	r5, r7, r5
   e330e:	18e4      	adds	r4, r4, r3
   e3310:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e3312:	eb45 0803 	adc.w	r8, r5, r3
   e3316:	9b05      	ldr	r3, [sp, #20]
   e3318:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   e331a:	ea83 0a05 	eor.w	sl, r3, r5
   e331e:	e9dd 530c 	ldrd	r5, r3, [sp, #48]	; 0x30
   e3322:	405d      	eors	r5, r3
   e3324:	9b07      	ldr	r3, [sp, #28]
   e3326:	ea0a 0a03 	and.w	sl, sl, r3
   e332a:	9b08      	ldr	r3, [sp, #32]
   e332c:	401d      	ands	r5, r3
   e332e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   e3330:	ea8a 0a03 	eor.w	sl, sl, r3
   e3334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   e3336:	ea85 0903 	eor.w	r9, r5, r3
   e333a:	9b07      	ldr	r3, [sp, #28]
   e333c:	eb14 0a0a 	adds.w	sl, r4, sl
   e3340:	ea4f 3493 	mov.w	r4, r3, lsr #14
   e3344:	9b08      	ldr	r3, [sp, #32]
   e3346:	eb48 0509 	adc.w	r5, r8, r9
   e334a:	ea4f 3b93 	mov.w	fp, r3, lsr #14
   e334e:	ea44 4983 	orr.w	r9, r4, r3, lsl #18
   e3352:	9b07      	ldr	r3, [sp, #28]
   e3354:	ea4b 4883 	orr.w	r8, fp, r3, lsl #18
   e3358:	0c9c      	lsrs	r4, r3, #18
   e335a:	9b08      	ldr	r3, [sp, #32]
   e335c:	ea4f 4b93 	mov.w	fp, r3, lsr #18
   e3360:	ea44 3483 	orr.w	r4, r4, r3, lsl #14
   e3364:	9b07      	ldr	r3, [sp, #28]
   e3366:	ea4b 3683 	orr.w	r6, fp, r3, lsl #14
   e336a:	9b08      	ldr	r3, [sp, #32]
   e336c:	ea88 0b06 	eor.w	fp, r8, r6
   e3370:	ea4f 58c3 	mov.w	r8, r3, lsl #23
   e3374:	9b07      	ldr	r3, [sp, #28]
   e3376:	ea89 0404 	eor.w	r4, r9, r4
   e337a:	ea48 2853 	orr.w	r8, r8, r3, lsr #9
   e337e:	ea4f 59c3 	mov.w	r9, r3, lsl #23
   e3382:	9b08      	ldr	r3, [sp, #32]
   e3384:	ea49 2953 	orr.w	r9, r9, r3, lsr #9
   e3388:	ea84 0409 	eor.w	r4, r4, r9
   e338c:	eb1a 0404 	adds.w	r4, sl, r4
   e3390:	ea8b 0808 	eor.w	r8, fp, r8
   e3394:	eb45 0808 	adc.w	r8, r5, r8
   e3398:	eb14 030c 	adds.w	r3, r4, ip
   e339c:	9309      	str	r3, [sp, #36]	; 0x24
   e339e:	eb48 030e 	adc.w	r3, r8, lr
   e33a2:	930a      	str	r3, [sp, #40]	; 0x28
   e33a4:	9b02      	ldr	r3, [sp, #8]
   e33a6:	0f1f      	lsrs	r7, r3, #28
   e33a8:	9b03      	ldr	r3, [sp, #12]
   e33aa:	0f1e      	lsrs	r6, r3, #28
   e33ac:	ea47 1703 	orr.w	r7, r7, r3, lsl #4
   e33b0:	9b02      	ldr	r3, [sp, #8]
   e33b2:	ea46 1c03 	orr.w	ip, r6, r3, lsl #4
   e33b6:	9b03      	ldr	r3, [sp, #12]
   e33b8:	079e      	lsls	r6, r3, #30
   e33ba:	9b02      	ldr	r3, [sp, #8]
   e33bc:	ea46 0693 	orr.w	r6, r6, r3, lsr #2
   e33c0:	079d      	lsls	r5, r3, #30
   e33c2:	9b03      	ldr	r3, [sp, #12]
   e33c4:	ea8c 0606 	eor.w	r6, ip, r6
   e33c8:	ea45 0593 	orr.w	r5, r5, r3, lsr #2
   e33cc:	ea4f 6c43 	mov.w	ip, r3, lsl #25
   e33d0:	9b02      	ldr	r3, [sp, #8]
   e33d2:	406f      	eors	r7, r5
   e33d4:	ea4c 1cd3 	orr.w	ip, ip, r3, lsr #7
   e33d8:	065d      	lsls	r5, r3, #25
   e33da:	9b03      	ldr	r3, [sp, #12]
   e33dc:	ea45 15d3 	orr.w	r5, r5, r3, lsr #7
   e33e0:	406f      	eors	r7, r5
   e33e2:	e9dd 3501 	ldrd	r3, r5, [sp, #4]
   e33e6:	431d      	orrs	r5, r3
   e33e8:	9b06      	ldr	r3, [sp, #24]
   e33ea:	ea86 060c 	eor.w	r6, r6, ip
   e33ee:	469c      	mov	ip, r3
   e33f0:	9b03      	ldr	r3, [sp, #12]
   e33f2:	ea4c 0c03 	orr.w	ip, ip, r3
   e33f6:	9b04      	ldr	r3, [sp, #16]
   e33f8:	401d      	ands	r5, r3
   e33fa:	9b01      	ldr	r3, [sp, #4]
   e33fc:	469e      	mov	lr, r3
   e33fe:	9b02      	ldr	r3, [sp, #8]
   e3400:	ea0e 0903 	and.w	r9, lr, r3
   e3404:	9b06      	ldr	r3, [sp, #24]
   e3406:	469e      	mov	lr, r3
   e3408:	9b03      	ldr	r3, [sp, #12]
   e340a:	ea0c 0c02 	and.w	ip, ip, r2
   e340e:	ea0e 0e03 	and.w	lr, lr, r3
   e3412:	ea45 0509 	orr.w	r5, r5, r9
   e3416:	197d      	adds	r5, r7, r5
   e3418:	ea4c 0c0e 	orr.w	ip, ip, lr
   e341c:	eb46 0c0c 	adc.w	ip, r6, ip
   e3420:	eb15 0904 	adds.w	r9, r5, r4
        P( F, G, H, A, B, C, D, E, W[i], K[i] ); i++;
   e3424:	e9d0 6706 	ldrd	r6, r7, [r0, #24]
   e3428:	e9d1 4506 	ldrd	r4, r5, [r1, #24]
   e342c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        P( G, H, A, B, C, D, E, F, W[i], K[i] ); i++;
   e342e:	eb4c 0b08 	adc.w	fp, ip, r8
        P( F, G, H, A, B, C, D, E, W[i], K[i] ); i++;
   e3432:	19a4      	adds	r4, r4, r6
   e3434:	eb45 0707 	adc.w	r7, r5, r7
   e3438:	18e4      	adds	r4, r4, r3
   e343a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   e343c:	9d07      	ldr	r5, [sp, #28]
   e343e:	eb43 0707 	adc.w	r7, r3, r7
   e3442:	9b05      	ldr	r3, [sp, #20]
   e3444:	ea83 0605 	eor.w	r6, r3, r5
   e3448:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   e344a:	9d08      	ldr	r5, [sp, #32]
   e344c:	405d      	eors	r5, r3
   e344e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e3450:	401e      	ands	r6, r3
   e3452:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e3454:	401d      	ands	r5, r3
   e3456:	9b05      	ldr	r3, [sp, #20]
   e3458:	405e      	eors	r6, r3
   e345a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   e345c:	ea85 0c03 	eor.w	ip, r5, r3
   e3460:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e3462:	19a6      	adds	r6, r4, r6
   e3464:	ea4f 3493 	mov.w	r4, r3, lsr #14
   e3468:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e346a:	eb47 050c 	adc.w	r5, r7, ip
   e346e:	ea4f 3e93 	mov.w	lr, r3, lsr #14
   e3472:	ea44 4c83 	orr.w	ip, r4, r3, lsl #18
   e3476:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e3478:	ea4e 4883 	orr.w	r8, lr, r3, lsl #18
   e347c:	0c9c      	lsrs	r4, r3, #18
   e347e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e3480:	ea4f 4e93 	mov.w	lr, r3, lsr #18
   e3484:	ea44 3483 	orr.w	r4, r4, r3, lsl #14
   e3488:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e348a:	ea4e 3783 	orr.w	r7, lr, r3, lsl #14
   e348e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e3490:	ea88 0e07 	eor.w	lr, r8, r7
   e3494:	05df      	lsls	r7, r3, #23
   e3496:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e3498:	ea8c 0404 	eor.w	r4, ip, r4
   e349c:	ea47 2753 	orr.w	r7, r7, r3, lsr #9
   e34a0:	ea4f 5cc3 	mov.w	ip, r3, lsl #23
   e34a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e34a6:	ea4c 2c53 	orr.w	ip, ip, r3, lsr #9
   e34aa:	ea84 040c 	eor.w	r4, r4, ip
   e34ae:	9b04      	ldr	r3, [sp, #16]
   e34b0:	1934      	adds	r4, r6, r4
   e34b2:	ea8e 0707 	eor.w	r7, lr, r7
   e34b6:	eb45 0707 	adc.w	r7, r5, r7
   e34ba:	eb14 0803 	adds.w	r8, r4, r3
   e34be:	eb47 0302 	adc.w	r3, r7, r2
   e34c2:	930b      	str	r3, [sp, #44]	; 0x2c
   e34c4:	ea4f 721b 	mov.w	r2, fp, lsr #28
   e34c8:	ea4f 7519 	mov.w	r5, r9, lsr #28
   e34cc:	ea4f 7389 	mov.w	r3, r9, lsl #30
   e34d0:	ea42 1609 	orr.w	r6, r2, r9, lsl #4
   e34d4:	ea43 039b 	orr.w	r3, r3, fp, lsr #2
   e34d8:	ea45 150b 	orr.w	r5, r5, fp, lsl #4
   e34dc:	ea4f 728b 	mov.w	r2, fp, lsl #30
   e34e0:	ea42 0299 	orr.w	r2, r2, r9, lsr #2
   e34e4:	405d      	eors	r5, r3
   e34e6:	ea4f 6349 	mov.w	r3, r9, lsl #25
   e34ea:	4072      	eors	r2, r6
   e34ec:	ea43 13db 	orr.w	r3, r3, fp, lsr #7
   e34f0:	ea4f 664b 	mov.w	r6, fp, lsl #25
   e34f4:	ea46 16d9 	orr.w	r6, r6, r9, lsr #7
   e34f8:	405d      	eors	r5, r3
   e34fa:	9b02      	ldr	r3, [sp, #8]
   e34fc:	ea82 0a06 	eor.w	sl, r2, r6
   e3500:	9a01      	ldr	r2, [sp, #4]
   e3502:	9e03      	ldr	r6, [sp, #12]
   e3504:	ea43 0309 	orr.w	r3, r3, r9
   e3508:	4013      	ands	r3, r2
   e350a:	9a06      	ldr	r2, [sp, #24]
   e350c:	ea46 060b 	orr.w	r6, r6, fp
   e3510:	4016      	ands	r6, r2
   e3512:	9a02      	ldr	r2, [sp, #8]
   e3514:	ea02 0e09 	and.w	lr, r2, r9
   e3518:	9a03      	ldr	r2, [sp, #12]
   e351a:	ea43 030e 	orr.w	r3, r3, lr
   e351e:	ea02 0c0b 	and.w	ip, r2, fp
   e3522:	18eb      	adds	r3, r5, r3
   e3524:	ea46 060c 	orr.w	r6, r6, ip
   e3528:	eb4a 0606 	adc.w	r6, sl, r6
   e352c:	191b      	adds	r3, r3, r4
   e352e:	9304      	str	r3, [sp, #16]
   e3530:	eb46 0307 	adc.w	r3, r6, r7
        P( E, F, G, H, A, B, C, D, W[i], K[i] ); i++;
   e3534:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
        P( F, G, H, A, B, C, D, E, W[i], K[i] ); i++;
   e3538:	930c      	str	r3, [sp, #48]	; 0x30
        P( E, F, G, H, A, B, C, D, W[i], K[i] ); i++;
   e353a:	e9d1 3208 	ldrd	r3, r2, [r1, #32]
   e353e:	191b      	adds	r3, r3, r4
   e3540:	eb42 0505 	adc.w	r5, r2, r5
   e3544:	9a05      	ldr	r2, [sp, #20]
   e3546:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   e3548:	eb13 0a02 	adds.w	sl, r3, r2
   e354c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   e354e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   e3550:	eb43 0505 	adc.w	r5, r3, r5
   e3554:	9b07      	ldr	r3, [sp, #28]
   e3556:	4053      	eors	r3, r2
   e3558:	9a08      	ldr	r2, [sp, #32]
   e355a:	4062      	eors	r2, r4
   e355c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   e355e:	4022      	ands	r2, r4
   e3560:	9c07      	ldr	r4, [sp, #28]
   e3562:	ea03 0308 	and.w	r3, r3, r8
   e3566:	4063      	eors	r3, r4
   e3568:	9c08      	ldr	r4, [sp, #32]
   e356a:	ea82 0604 	eor.w	r6, r2, r4
   e356e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   e3570:	eb1a 0303 	adds.w	r3, sl, r3
   e3574:	ea4f 3794 	mov.w	r7, r4, lsr #14
   e3578:	eb45 0206 	adc.w	r2, r5, r6
   e357c:	ea4f 3a98 	mov.w	sl, r8, lsr #14
   e3580:	ea47 4588 	orr.w	r5, r7, r8, lsl #18
   e3584:	ea4f 4698 	mov.w	r6, r8, lsr #18
   e3588:	0ca7      	lsrs	r7, r4, #18
   e358a:	ea46 3684 	orr.w	r6, r6, r4, lsl #14
   e358e:	ea4a 4a84 	orr.w	sl, sl, r4, lsl #18
   e3592:	ea47 3488 	orr.w	r4, r7, r8, lsl #14
   e3596:	ea85 0704 	eor.w	r7, r5, r4
   e359a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   e359c:	ea8a 0a06 	eor.w	sl, sl, r6
   e35a0:	ea4f 56c8 	mov.w	r6, r8, lsl #23
   e35a4:	ea46 2654 	orr.w	r6, r6, r4, lsr #9
   e35a8:	05e5      	lsls	r5, r4, #23
   e35aa:	ea8a 0a06 	eor.w	sl, sl, r6
   e35ae:	eb13 0a0a 	adds.w	sl, r3, sl
   e35b2:	ea45 2558 	orr.w	r5, r5, r8, lsr #9
   e35b6:	9b01      	ldr	r3, [sp, #4]
   e35b8:	ea85 0507 	eor.w	r5, r5, r7
   e35bc:	eb42 0505 	adc.w	r5, r2, r5
   e35c0:	eb13 030a 	adds.w	r3, r3, sl
   e35c4:	9305      	str	r3, [sp, #20]
   e35c6:	9b06      	ldr	r3, [sp, #24]
   e35c8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   e35ca:	416b      	adcs	r3, r5
   e35cc:	9306      	str	r3, [sp, #24]
   e35ce:	9b04      	ldr	r3, [sp, #16]
   e35d0:	0f1c      	lsrs	r4, r3, #28
   e35d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   e35d4:	0f1a      	lsrs	r2, r3, #28
   e35d6:	ea44 1403 	orr.w	r4, r4, r3, lsl #4
   e35da:	9b04      	ldr	r3, [sp, #16]
   e35dc:	ea42 1603 	orr.w	r6, r2, r3, lsl #4
   e35e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   e35e2:	079a      	lsls	r2, r3, #30
   e35e4:	9b04      	ldr	r3, [sp, #16]
   e35e6:	ea42 0293 	orr.w	r2, r2, r3, lsr #2
   e35ea:	079b      	lsls	r3, r3, #30
   e35ec:	ea43 0397 	orr.w	r3, r3, r7, lsr #2
   e35f0:	405c      	eors	r4, r3
   e35f2:	9b04      	ldr	r3, [sp, #16]
   e35f4:	4072      	eors	r2, r6
   e35f6:	067e      	lsls	r6, r7, #25
   e35f8:	ea46 16d3 	orr.w	r6, r6, r3, lsr #7
   e35fc:	065b      	lsls	r3, r3, #25
   e35fe:	ea43 13d7 	orr.w	r3, r3, r7, lsr #7
   e3602:	405c      	eors	r4, r3
   e3604:	9b04      	ldr	r3, [sp, #16]
   e3606:	4072      	eors	r2, r6
   e3608:	ea4b 0607 	orr.w	r6, fp, r7
   e360c:	9f02      	ldr	r7, [sp, #8]
   e360e:	ea49 0303 	orr.w	r3, r9, r3
   e3612:	403b      	ands	r3, r7
   e3614:	9f03      	ldr	r7, [sp, #12]
   e3616:	403e      	ands	r6, r7
   e3618:	9f04      	ldr	r7, [sp, #16]
   e361a:	ea09 0c07 	and.w	ip, r9, r7
   e361e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   e3620:	ea43 030c 	orr.w	r3, r3, ip
   e3624:	ea0b 0707 	and.w	r7, fp, r7
   e3628:	18e3      	adds	r3, r4, r3
   e362a:	ea46 0607 	orr.w	r6, r6, r7
   e362e:	eb42 0606 	adc.w	r6, r2, r6
   e3632:	eb13 0a0a 	adds.w	sl, r3, sl
   e3636:	eb46 0305 	adc.w	r3, r6, r5
   e363a:	9301      	str	r3, [sp, #4]
        P( D, E, F, G, H, A, B, C, W[i], K[i] ); i++;
   e363c:	e9d0 450a 	ldrd	r4, r5, [r0, #40]	; 0x28
   e3640:	e9d1 320a 	ldrd	r3, r2, [r1, #40]	; 0x28
   e3644:	191b      	adds	r3, r3, r4
   e3646:	9c07      	ldr	r4, [sp, #28]
   e3648:	eb45 0202 	adc.w	r2, r5, r2
   e364c:	191b      	adds	r3, r3, r4
   e364e:	9c08      	ldr	r4, [sp, #32]
   e3650:	eb42 0504 	adc.w	r5, r2, r4
   e3654:	9a09      	ldr	r2, [sp, #36]	; 0x24
   e3656:	ea82 0408 	eor.w	r4, r2, r8
   e365a:	e9dd 260a 	ldrd	r2, r6, [sp, #40]	; 0x28
   e365e:	4072      	eors	r2, r6
   e3660:	9e05      	ldr	r6, [sp, #20]
   e3662:	4034      	ands	r4, r6
   e3664:	9e06      	ldr	r6, [sp, #24]
   e3666:	4032      	ands	r2, r6
   e3668:	9e09      	ldr	r6, [sp, #36]	; 0x24
   e366a:	4074      	eors	r4, r6
   e366c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   e366e:	191c      	adds	r4, r3, r4
   e3670:	ea82 0606 	eor.w	r6, r2, r6
   e3674:	9b05      	ldr	r3, [sp, #20]
   e3676:	eb45 0206 	adc.w	r2, r5, r6
   e367a:	9d06      	ldr	r5, [sp, #24]
   e367c:	0b9b      	lsrs	r3, r3, #14
   e367e:	ea43 4685 	orr.w	r6, r3, r5, lsl #18
   e3682:	9b05      	ldr	r3, [sp, #20]
   e3684:	0baf      	lsrs	r7, r5, #14
   e3686:	ea47 4c83 	orr.w	ip, r7, r3, lsl #18
   e368a:	0c9b      	lsrs	r3, r3, #18
   e368c:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
   e3690:	0caf      	lsrs	r7, r5, #18
   e3692:	9d05      	ldr	r5, [sp, #20]
   e3694:	ea47 3585 	orr.w	r5, r7, r5, lsl #14
   e3698:	ea8c 0705 	eor.w	r7, ip, r5
   e369c:	9d06      	ldr	r5, [sp, #24]
   e369e:	ea83 0e06 	eor.w	lr, r3, r6
   e36a2:	9e05      	ldr	r6, [sp, #20]
   e36a4:	9b06      	ldr	r3, [sp, #24]
   e36a6:	05ed      	lsls	r5, r5, #23
   e36a8:	ea45 2556 	orr.w	r5, r5, r6, lsr #9
   e36ac:	05f6      	lsls	r6, r6, #23
   e36ae:	ea46 2653 	orr.w	r6, r6, r3, lsr #9
   e36b2:	ea8e 0306 	eor.w	r3, lr, r6
   e36b6:	18e3      	adds	r3, r4, r3
   e36b8:	ea87 0705 	eor.w	r7, r7, r5
   e36bc:	eb42 0707 	adc.w	r7, r2, r7
   e36c0:	9a02      	ldr	r2, [sp, #8]
   e36c2:	930d      	str	r3, [sp, #52]	; 0x34
   e36c4:	18d2      	adds	r2, r2, r3
   e36c6:	9207      	str	r2, [sp, #28]
   e36c8:	9a03      	ldr	r2, [sp, #12]
   e36ca:	9b01      	ldr	r3, [sp, #4]
   e36cc:	417a      	adcs	r2, r7
   e36ce:	9208      	str	r2, [sp, #32]
   e36d0:	9a01      	ldr	r2, [sp, #4]
   e36d2:	ea4f 751a 	mov.w	r5, sl, lsr #28
   e36d6:	0f14      	lsrs	r4, r2, #28
   e36d8:	ea44 160a 	orr.w	r6, r4, sl, lsl #4
   e36dc:	ea45 1502 	orr.w	r5, r5, r2, lsl #4
   e36e0:	0794      	lsls	r4, r2, #30
   e36e2:	ea4f 728a 	mov.w	r2, sl, lsl #30
   e36e6:	ea42 0293 	orr.w	r2, r2, r3, lsr #2
   e36ea:	4055      	eors	r5, r2
   e36ec:	ea44 049a 	orr.w	r4, r4, sl, lsr #2
   e36f0:	ea4f 624a 	mov.w	r2, sl, lsl #25
   e36f4:	ea42 12d3 	orr.w	r2, r2, r3, lsr #7
   e36f8:	4074      	eors	r4, r6
   e36fa:	065e      	lsls	r6, r3, #25
   e36fc:	9b04      	ldr	r3, [sp, #16]
   e36fe:	ea46 16da 	orr.w	r6, r6, sl, lsr #7
   e3702:	4055      	eors	r5, r2
   e3704:	4074      	eors	r4, r6
   e3706:	ea43 020a 	orr.w	r2, r3, sl
   e370a:	9e01      	ldr	r6, [sp, #4]
   e370c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   e370e:	431e      	orrs	r6, r3
   e3710:	9b04      	ldr	r3, [sp, #16]
   e3712:	ea03 0e0a 	and.w	lr, r3, sl
   e3716:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   e3718:	469c      	mov	ip, r3
   e371a:	9b01      	ldr	r3, [sp, #4]
   e371c:	ea02 0209 	and.w	r2, r2, r9
   e3720:	ea0c 0c03 	and.w	ip, ip, r3
   e3724:	ea06 060b 	and.w	r6, r6, fp
   e3728:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   e372a:	ea42 020e 	orr.w	r2, r2, lr
   e372e:	18aa      	adds	r2, r5, r2
   e3730:	ea46 060c 	orr.w	r6, r6, ip
   e3734:	eb44 0606 	adc.w	r6, r4, r6
   e3738:	18d3      	adds	r3, r2, r3
   e373a:	9302      	str	r3, [sp, #8]
   e373c:	eb46 0307 	adc.w	r3, r6, r7
        P( C, D, E, F, G, H, A, B, W[i], K[i] ); i++;
   e3740:	e9d0 450c 	ldrd	r4, r5, [r0, #48]	; 0x30
        P( D, E, F, G, H, A, B, C, W[i], K[i] ); i++;
   e3744:	9303      	str	r3, [sp, #12]
        P( C, D, E, F, G, H, A, B, W[i], K[i] ); i++;
   e3746:	e9d1 320c 	ldrd	r3, r2, [r1, #48]	; 0x30
   e374a:	eb13 0c04 	adds.w	ip, r3, r4
   e374e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e3750:	9c06      	ldr	r4, [sp, #24]
   e3752:	eb42 0e05 	adc.w	lr, r2, r5
   e3756:	eb1c 0c03 	adds.w	ip, ip, r3
   e375a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e375c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   e375e:	eb4e 0e03 	adc.w	lr, lr, r3
   e3762:	9b05      	ldr	r3, [sp, #20]
   e3764:	ea82 0604 	eor.w	r6, r2, r4
   e3768:	9a07      	ldr	r2, [sp, #28]
   e376a:	ea88 0303 	eor.w	r3, r8, r3
   e376e:	4013      	ands	r3, r2
   e3770:	ea83 0308 	eor.w	r3, r3, r8
   e3774:	9a08      	ldr	r2, [sp, #32]
   e3776:	eb1c 0c03 	adds.w	ip, ip, r3
   e377a:	9b07      	ldr	r3, [sp, #28]
   e377c:	ea06 0602 	and.w	r6, r6, r2
   e3780:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   e3782:	ea4f 3493 	mov.w	r4, r3, lsr #14
   e3786:	9b08      	ldr	r3, [sp, #32]
   e3788:	ea86 0602 	eor.w	r6, r6, r2
   e378c:	9a07      	ldr	r2, [sp, #28]
   e378e:	eb4e 0e06 	adc.w	lr, lr, r6
   e3792:	ea44 4683 	orr.w	r6, r4, r3, lsl #18
   e3796:	0b9b      	lsrs	r3, r3, #14
   e3798:	ea43 4582 	orr.w	r5, r3, r2, lsl #18
   e379c:	9b08      	ldr	r3, [sp, #32]
   e379e:	0c94      	lsrs	r4, r2, #18
   e37a0:	ea44 3283 	orr.w	r2, r4, r3, lsl #14
   e37a4:	9c07      	ldr	r4, [sp, #28]
   e37a6:	0c9b      	lsrs	r3, r3, #18
   e37a8:	ea43 3384 	orr.w	r3, r3, r4, lsl #14
   e37ac:	ea86 0402 	eor.w	r4, r6, r2
   e37b0:	9a08      	ldr	r2, [sp, #32]
   e37b2:	9e08      	ldr	r6, [sp, #32]
   e37b4:	406b      	eors	r3, r5
   e37b6:	05d5      	lsls	r5, r2, #23
   e37b8:	9a07      	ldr	r2, [sp, #28]
   e37ba:	ea45 2552 	orr.w	r5, r5, r2, lsr #9
   e37be:	05d2      	lsls	r2, r2, #23
   e37c0:	ea42 2256 	orr.w	r2, r2, r6, lsr #9
   e37c4:	4062      	eors	r2, r4
   e37c6:	eb1c 0c02 	adds.w	ip, ip, r2
   e37ca:	ea83 0305 	eor.w	r3, r3, r5
   e37ce:	eb4e 0e03 	adc.w	lr, lr, r3
   e37d2:	eb19 030c 	adds.w	r3, r9, ip
   e37d6:	9309      	str	r3, [sp, #36]	; 0x24
   e37d8:	eb4b 030e 	adc.w	r3, fp, lr
   e37dc:	930a      	str	r3, [sp, #40]	; 0x28
   e37de:	9b02      	ldr	r3, [sp, #8]
   e37e0:	9e03      	ldr	r6, [sp, #12]
   e37e2:	0f1c      	lsrs	r4, r3, #28
   e37e4:	9b03      	ldr	r3, [sp, #12]
   e37e6:	0f1a      	lsrs	r2, r3, #28
   e37e8:	ea44 1403 	orr.w	r4, r4, r3, lsl #4
   e37ec:	9b02      	ldr	r3, [sp, #8]
   e37ee:	ea42 1503 	orr.w	r5, r2, r3, lsl #4
   e37f2:	9b03      	ldr	r3, [sp, #12]
   e37f4:	079a      	lsls	r2, r3, #30
   e37f6:	9b02      	ldr	r3, [sp, #8]
   e37f8:	ea42 0293 	orr.w	r2, r2, r3, lsr #2
   e37fc:	079b      	lsls	r3, r3, #30
   e37fe:	ea43 0396 	orr.w	r3, r3, r6, lsr #2
   e3802:	405c      	eors	r4, r3
   e3804:	9b02      	ldr	r3, [sp, #8]
   e3806:	406a      	eors	r2, r5
   e3808:	0675      	lsls	r5, r6, #25
   e380a:	ea45 15d3 	orr.w	r5, r5, r3, lsr #7
   e380e:	065b      	lsls	r3, r3, #25
   e3810:	ea43 13d6 	orr.w	r3, r3, r6, lsr #7
   e3814:	406a      	eors	r2, r5
   e3816:	9d01      	ldr	r5, [sp, #4]
   e3818:	405c      	eors	r4, r3
   e381a:	9b02      	ldr	r3, [sp, #8]
   e381c:	4335      	orrs	r5, r6
   e381e:	9e04      	ldr	r6, [sp, #16]
   e3820:	ea4a 0303 	orr.w	r3, sl, r3
   e3824:	4033      	ands	r3, r6
   e3826:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   e3828:	4035      	ands	r5, r6
   e382a:	9e02      	ldr	r6, [sp, #8]
   e382c:	ea0a 0706 	and.w	r7, sl, r6
   e3830:	9e01      	ldr	r6, [sp, #4]
   e3832:	46b1      	mov	r9, r6
   e3834:	9e03      	ldr	r6, [sp, #12]
   e3836:	433b      	orrs	r3, r7
   e3838:	ea09 0606 	and.w	r6, r9, r6
   e383c:	18e3      	adds	r3, r4, r3
   e383e:	ea45 0506 	orr.w	r5, r5, r6
   e3842:	eb42 0505 	adc.w	r5, r2, r5
   e3846:	eb13 0c0c 	adds.w	ip, r3, ip
   e384a:	eb45 0e0e 	adc.w	lr, r5, lr
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
   e384e:	e9d1 320e 	ldrd	r3, r2, [r1, #56]	; 0x38
   e3852:	e9d0 450e 	ldrd	r4, r5, [r0, #56]	; 0x38
   e3856:	191b      	adds	r3, r3, r4
   e3858:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   e385a:	eb45 0202 	adc.w	r2, r5, r2
   e385e:	eb13 0308 	adds.w	r3, r3, r8
   e3862:	eb42 0504 	adc.w	r5, r2, r4
   e3866:	9a05      	ldr	r2, [sp, #20]
   e3868:	9c07      	ldr	r4, [sp, #28]
   e386a:	9e08      	ldr	r6, [sp, #32]
   e386c:	4054      	eors	r4, r2
   e386e:	9a06      	ldr	r2, [sp, #24]
   e3870:	4072      	eors	r2, r6
   e3872:	9e09      	ldr	r6, [sp, #36]	; 0x24
   e3874:	4034      	ands	r4, r6
   e3876:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   e3878:	4032      	ands	r2, r6
   e387a:	9e05      	ldr	r6, [sp, #20]
   e387c:	4074      	eors	r4, r6
   e387e:	eb13 0b04 	adds.w	fp, r3, r4
   e3882:	9c09      	ldr	r4, [sp, #36]	; 0x24
   e3884:	9e06      	ldr	r6, [sp, #24]
   e3886:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e3888:	ea4f 3794 	mov.w	r7, r4, lsr #14
   e388c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   e388e:	ea82 0606 	eor.w	r6, r2, r6
   e3892:	eb45 0206 	adc.w	r2, r5, r6
   e3896:	ea47 4984 	orr.w	r9, r7, r4, lsl #18
   e389a:	0ba6      	lsrs	r6, r4, #14
   e389c:	9c09      	ldr	r4, [sp, #36]	; 0x24
   e389e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   e38a0:	ea46 4884 	orr.w	r8, r6, r4, lsl #18
   e38a4:	0ca7      	lsrs	r7, r4, #18
   e38a6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   e38a8:	0cae      	lsrs	r6, r5, #18
   e38aa:	ea47 3484 	orr.w	r4, r7, r4, lsl #14
   e38ae:	9d09      	ldr	r5, [sp, #36]	; 0x24
   e38b0:	ea89 0704 	eor.w	r7, r9, r4
   e38b4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   e38b6:	ea46 3585 	orr.w	r5, r6, r5, lsl #14
   e38ba:	ea88 0605 	eor.w	r6, r8, r5
   e38be:	05e5      	lsls	r5, r4, #23
   e38c0:	9c09      	ldr	r4, [sp, #36]	; 0x24
   e38c2:	ea45 2554 	orr.w	r5, r5, r4, lsr #9
   e38c6:	05e4      	lsls	r4, r4, #23
   e38c8:	ea44 2453 	orr.w	r4, r4, r3, lsr #9
   e38cc:	407c      	eors	r4, r7
   e38ce:	9b04      	ldr	r3, [sp, #16]
   e38d0:	eb1b 0404 	adds.w	r4, fp, r4
   e38d4:	ea85 0506 	eor.w	r5, r5, r6
   e38d8:	eb42 0505 	adc.w	r5, r2, r5
   e38dc:	191b      	adds	r3, r3, r4
   e38de:	930b      	str	r3, [sp, #44]	; 0x2c
   e38e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   e38e2:	416b      	adcs	r3, r5
   e38e4:	930c      	str	r3, [sp, #48]	; 0x30
   e38e6:	ea4f 771c 	mov.w	r7, ip, lsr #28
   e38ea:	ea4f 738c 	mov.w	r3, ip, lsl #30
   e38ee:	ea43 039e 	orr.w	r3, r3, lr, lsr #2
   e38f2:	ea47 170e 	orr.w	r7, r7, lr, lsl #4
   e38f6:	405f      	eors	r7, r3
   e38f8:	ea4f 634c 	mov.w	r3, ip, lsl #25
   e38fc:	ea4f 721e 	mov.w	r2, lr, lsr #28
   e3900:	ea43 13de 	orr.w	r3, r3, lr, lsr #7
   e3904:	ea42 180c 	orr.w	r8, r2, ip, lsl #4
   e3908:	405f      	eors	r7, r3
   e390a:	ea4f 728e 	mov.w	r2, lr, lsl #30
   e390e:	9b02      	ldr	r3, [sp, #8]
   e3910:	ea42 029c 	orr.w	r2, r2, ip, lsr #2
   e3914:	ea88 0202 	eor.w	r2, r8, r2
   e3918:	ea43 060c 	orr.w	r6, r3, ip
   e391c:	ea4f 684e 	mov.w	r8, lr, lsl #25
   e3920:	9b03      	ldr	r3, [sp, #12]
   e3922:	ea48 18dc 	orr.w	r8, r8, ip, lsr #7
   e3926:	ea82 0208 	eor.w	r2, r2, r8
   e392a:	ea43 080e 	orr.w	r8, r3, lr
   e392e:	9b01      	ldr	r3, [sp, #4]
   e3930:	ea08 0803 	and.w	r8, r8, r3
   e3934:	9b02      	ldr	r3, [sp, #8]
   e3936:	ea03 0b0c 	and.w	fp, r3, ip
   e393a:	9b03      	ldr	r3, [sp, #12]
   e393c:	ea06 060a 	and.w	r6, r6, sl
   e3940:	ea03 090e 	and.w	r9, r3, lr
   e3944:	ea4b 0306 	orr.w	r3, fp, r6
   e3948:	18fb      	adds	r3, r7, r3
   e394a:	ea48 0809 	orr.w	r8, r8, r9
   e394e:	eb42 0208 	adc.w	r2, r2, r8
   e3952:	191b      	adds	r3, r3, r4
   e3954:	9304      	str	r3, [sp, #16]
    }
    while( i < 80 );
   e3956:	4b2c      	ldr	r3, [pc, #176]	; (e3a08 <mbedtls_internal_sha512_process+0xac8>)
   e3958:	f101 0140 	add.w	r1, r1, #64	; 0x40
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
   e395c:	eb45 0202 	adc.w	r2, r5, r2
    while( i < 80 );
   e3960:	428b      	cmp	r3, r1
   e3962:	f100 0040 	add.w	r0, r0, #64	; 0x40
   e3966:	f47f abaf 	bne.w	e30c8 <mbedtls_internal_sha512_process+0x188>

    ctx->state[0] += A;
   e396a:	9904      	ldr	r1, [sp, #16]
   e396c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
    ctx->state[4] += E;
   e396e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    ctx->state[5] += F;
   e3970:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    ctx->state[0] += A;
   e3972:	185b      	adds	r3, r3, r1
   e3974:	990f      	ldr	r1, [sp, #60]	; 0x3c
   e3976:	eb41 0202 	adc.w	r2, r1, r2
   e397a:	9900      	ldr	r1, [sp, #0]
   e397c:	610b      	str	r3, [r1, #16]
    ctx->state[1] += B;
   e397e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ctx->state[0] += A;
   e3980:	614a      	str	r2, [r1, #20]
    ctx->state[1] += B;
   e3982:	9a11      	ldr	r2, [sp, #68]	; 0x44
   e3984:	eb13 030c 	adds.w	r3, r3, ip
   e3988:	eb42 020e 	adc.w	r2, r2, lr
   e398c:	618b      	str	r3, [r1, #24]
   e398e:	61ca      	str	r2, [r1, #28]
    ctx->state[2] += C;
   e3990:	9b12      	ldr	r3, [sp, #72]	; 0x48
   e3992:	9a02      	ldr	r2, [sp, #8]
   e3994:	9913      	ldr	r1, [sp, #76]	; 0x4c
   e3996:	189b      	adds	r3, r3, r2
   e3998:	9a03      	ldr	r2, [sp, #12]
   e399a:	eb41 0202 	adc.w	r2, r1, r2
   e399e:	9900      	ldr	r1, [sp, #0]
   e39a0:	620b      	str	r3, [r1, #32]
    ctx->state[3] += D;
   e39a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
    ctx->state[2] += C;
   e39a4:	624a      	str	r2, [r1, #36]	; 0x24
    ctx->state[3] += D;
   e39a6:	9915      	ldr	r1, [sp, #84]	; 0x54
   e39a8:	9a01      	ldr	r2, [sp, #4]
   e39aa:	eb13 030a 	adds.w	r3, r3, sl
   e39ae:	eb41 0202 	adc.w	r2, r1, r2
   e39b2:	9900      	ldr	r1, [sp, #0]
   e39b4:	628b      	str	r3, [r1, #40]	; 0x28
   e39b6:	62ca      	str	r2, [r1, #44]	; 0x2c
    ctx->state[4] += E;
   e39b8:	9b16      	ldr	r3, [sp, #88]	; 0x58
   e39ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   e39bc:	189c      	adds	r4, r3, r2
   e39be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    ctx->state[5] += F;
   e39c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ctx->state[4] += E;
   e39c2:	eb43 0707 	adc.w	r7, r3, r7
    ctx->state[5] += F;
   e39c6:	9b18      	ldr	r3, [sp, #96]	; 0x60
    ctx->state[4] += E;
   e39c8:	e9c1 470c 	strd	r4, r7, [r1, #48]	; 0x30
    ctx->state[5] += F;
   e39cc:	189c      	adds	r4, r3, r2
   e39ce:	9b19      	ldr	r3, [sp, #100]	; 0x64
    ctx->state[6] += G;
   e39d0:	9a07      	ldr	r2, [sp, #28]
    ctx->state[5] += F;
   e39d2:	eb43 0505 	adc.w	r5, r3, r5
    ctx->state[6] += G;
   e39d6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    ctx->state[5] += F;
   e39d8:	e9c1 450e 	strd	r4, r5, [r1, #56]	; 0x38
    ctx->state[6] += G;
   e39dc:	189c      	adds	r4, r3, r2
   e39de:	9d08      	ldr	r5, [sp, #32]
   e39e0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    ctx->state[7] += H;
   e39e2:	9a05      	ldr	r2, [sp, #20]
    ctx->state[6] += G;
   e39e4:	eb43 0505 	adc.w	r5, r3, r5
    ctx->state[7] += H;
   e39e8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    ctx->state[6] += G;
   e39ea:	e9c1 4510 	strd	r4, r5, [r1, #64]	; 0x40
    ctx->state[7] += H;
   e39ee:	189d      	adds	r5, r3, r2
   e39f0:	9c06      	ldr	r4, [sp, #24]
   e39f2:	9b1d      	ldr	r3, [sp, #116]	; 0x74

    return( 0 );
}
   e39f4:	f04f 0000 	mov.w	r0, #0
    ctx->state[7] += H;
   e39f8:	eb43 0404 	adc.w	r4, r3, r4
   e39fc:	e9c1 5412 	strd	r5, r4, [r1, #72]	; 0x48
}
   e3a00:	f50d 7d3f 	add.w	sp, sp, #764	; 0x2fc
   e3a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e3a08:	000ecd50 	.word	0x000ecd50

000e3a0c <mbedtls_sha512_update_ret>:
 * SHA-512 process buffer
 */
int mbedtls_sha512_update_ret( mbedtls_sha512_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
   e3a0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e3a10:	4605      	mov	r5, r0
   e3a12:	460e      	mov	r6, r1
    unsigned int left;

    SHA512_VALIDATE_RET( ctx != NULL );
    SHA512_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
   e3a14:	4614      	mov	r4, r2
   e3a16:	b912      	cbnz	r2, e3a1e <mbedtls_sha512_update_ret+0x12>
    }

    if( ilen > 0 )
        memcpy( (void *) (ctx->buffer + left), input, ilen );

    return( 0 );
   e3a18:	2000      	movs	r0, #0
}
   e3a1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    left = (unsigned int) (ctx->total[0] & 0x7F);
   e3a1e:	e9d0 ab00 	ldrd	sl, fp, [r0]
   e3a22:	2300      	movs	r3, #0
   e3a24:	eb1a 0002 	adds.w	r0, sl, r2
   e3a28:	eb5b 0103 	adcs.w	r1, fp, r3
   e3a2c:	f04f 0800 	mov.w	r8, #0
   e3a30:	f04f 0900 	mov.w	r9, #0
   e3a34:	bf24      	itt	cs
   e3a36:	f04f 0801 	movcs.w	r8, #1
   e3a3a:	f04f 0900 	movcs.w	r9, #0
    if( ctx->total[0] < (uint64_t) ilen )
   e3a3e:	ea58 0309 	orrs.w	r3, r8, r9
    ctx->total[0] += (uint64_t) ilen;
   e3a42:	e9c5 0100 	strd	r0, r1, [r5]
    left = (unsigned int) (ctx->total[0] & 0x7F);
   e3a46:	f00a 077f 	and.w	r7, sl, #127	; 0x7f
    if( ctx->total[0] < (uint64_t) ilen )
   e3a4a:	d006      	beq.n	e3a5a <mbedtls_sha512_update_ret+0x4e>
        ctx->total[1]++;
   e3a4c:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
   e3a50:	3301      	adds	r3, #1
   e3a52:	f142 0200 	adc.w	r2, r2, #0
   e3a56:	e9c5 3202 	strd	r3, r2, [r5, #8]
    if( left && ilen >= fill )
   e3a5a:	b1af      	cbz	r7, e3a88 <mbedtls_sha512_update_ret+0x7c>
    fill = 128 - left;
   e3a5c:	f1c7 0980 	rsb	r9, r7, #128	; 0x80
    if( left && ilen >= fill )
   e3a60:	454c      	cmp	r4, r9
   e3a62:	d311      	bcc.n	e3a88 <mbedtls_sha512_update_ret+0x7c>
        memcpy( (void *) (ctx->buffer + left), input, fill );
   e3a64:	f105 0850 	add.w	r8, r5, #80	; 0x50
   e3a68:	4631      	mov	r1, r6
   e3a6a:	464a      	mov	r2, r9
   e3a6c:	eb08 0007 	add.w	r0, r8, r7
   e3a70:	f004 ff2c 	bl	e88cc <memcpy>
        if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
   e3a74:	4641      	mov	r1, r8
   e3a76:	4628      	mov	r0, r5
   e3a78:	f7ff fa62 	bl	e2f40 <mbedtls_internal_sha512_process>
   e3a7c:	2800      	cmp	r0, #0
   e3a7e:	d1cc      	bne.n	e3a1a <mbedtls_sha512_update_ret+0xe>
        ilen  -= fill;
   e3a80:	3c80      	subs	r4, #128	; 0x80
   e3a82:	443c      	add	r4, r7
        input += fill;
   e3a84:	444e      	add	r6, r9
        left = 0;
   e3a86:	4607      	mov	r7, r0
   e3a88:	4426      	add	r6, r4
    while( ilen >= 128 )
   e3a8a:	2c7f      	cmp	r4, #127	; 0x7f
   e3a8c:	eba6 0104 	sub.w	r1, r6, r4
   e3a90:	d906      	bls.n	e3aa0 <mbedtls_sha512_update_ret+0x94>
        if( ( ret = mbedtls_internal_sha512_process( ctx, input ) ) != 0 )
   e3a92:	4628      	mov	r0, r5
   e3a94:	f7ff fa54 	bl	e2f40 <mbedtls_internal_sha512_process>
   e3a98:	2800      	cmp	r0, #0
   e3a9a:	d1be      	bne.n	e3a1a <mbedtls_sha512_update_ret+0xe>
        ilen  -= 128;
   e3a9c:	3c80      	subs	r4, #128	; 0x80
    while( ilen >= 128 )
   e3a9e:	e7f4      	b.n	e3a8a <mbedtls_sha512_update_ret+0x7e>
    if( ilen > 0 )
   e3aa0:	2c00      	cmp	r4, #0
   e3aa2:	d0b9      	beq.n	e3a18 <mbedtls_sha512_update_ret+0xc>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
   e3aa4:	f105 0050 	add.w	r0, r5, #80	; 0x50
   e3aa8:	4622      	mov	r2, r4
   e3aaa:	4438      	add	r0, r7
   e3aac:	f004 ff0e 	bl	e88cc <memcpy>
   e3ab0:	e7b2      	b.n	e3a18 <mbedtls_sha512_update_ret+0xc>

000e3ab2 <mbedtls_sha512_finish_ret>:
/*
 * SHA-512 final digest
 */
int mbedtls_sha512_finish_ret( mbedtls_sha512_context *ctx,
                               unsigned char output[64] )
{
   e3ab2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    SHA512_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 16 bytes remain for the length
     */
    used = ctx->total[0] & 0x7F;
   e3ab4:	6803      	ldr	r3, [r0, #0]
   e3ab6:	f003 037f 	and.w	r3, r3, #127	; 0x7f

    ctx->buffer[used++] = 0x80;
   e3aba:	1c5a      	adds	r2, r3, #1
   e3abc:	4403      	add	r3, r0
{
   e3abe:	460d      	mov	r5, r1
   e3ac0:	f100 0650 	add.w	r6, r0, #80	; 0x50
    ctx->buffer[used++] = 0x80;
   e3ac4:	2180      	movs	r1, #128	; 0x80

    if( used <= 112 )
   e3ac6:	2a70      	cmp	r2, #112	; 0x70
{
   e3ac8:	4604      	mov	r4, r0
    ctx->buffer[used++] = 0x80;
   e3aca:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
    if( used <= 112 )
   e3ace:	eb06 0002 	add.w	r0, r6, r2
   e3ad2:	f200 80fb 	bhi.w	e3ccc <mbedtls_sha512_finish_ret+0x21a>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 112 - used );
   e3ad6:	f1c2 0270 	rsb	r2, r2, #112	; 0x70
   e3ada:	2100      	movs	r1, #0
        memset( ctx->buffer + used, 0, 128 - used );

        if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
            return( ret );

        memset( ctx->buffer, 0, 112 );
   e3adc:	f004 ff1e 	bl	e891c <memset>

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 61 )
         | ( ctx->total[1] <<  3 );
   e3ae0:	e9d4 7202 	ldrd	r7, r2, [r4, #8]
    high = ( ctx->total[0] >> 61 )
   e3ae4:	e9d4 1300 	ldrd	r1, r3, [r4]
         | ( ctx->total[1] <<  3 );
   e3ae8:	00d2      	lsls	r2, r2, #3
   e3aea:	ea42 7257 	orr.w	r2, r2, r7, lsr #29
    high = ( ctx->total[0] >> 61 )
   e3aee:	0f58      	lsrs	r0, r3, #29
   e3af0:	ea40 00c7 	orr.w	r0, r0, r7, lsl #3
    low  = ( ctx->total[0] <<  3 );
   e3af4:	00db      	lsls	r3, r3, #3

    PUT_UINT64_BE( high, ctx->buffer, 112 );
   e3af6:	0e17      	lsrs	r7, r2, #24
    low  = ( ctx->total[0] <<  3 );
   e3af8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
    PUT_UINT64_BE( high, ctx->buffer, 112 );
   e3afc:	f884 70c0 	strb.w	r7, [r4, #192]	; 0xc0
   e3b00:	0c17      	lsrs	r7, r2, #16
   e3b02:	f884 70c1 	strb.w	r7, [r4, #193]	; 0xc1
   e3b06:	f884 20c3 	strb.w	r2, [r4, #195]	; 0xc3
   e3b0a:	0a17      	lsrs	r7, r2, #8
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
   e3b0c:	0e1a      	lsrs	r2, r3, #24
    low  = ( ctx->total[0] <<  3 );
   e3b0e:	00c9      	lsls	r1, r1, #3
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
   e3b10:	f884 20c8 	strb.w	r2, [r4, #200]	; 0xc8
   e3b14:	0c1a      	lsrs	r2, r3, #16
   e3b16:	ba00      	rev	r0, r0
   e3b18:	ba09      	rev	r1, r1
   e3b1a:	f884 20c9 	strb.w	r2, [r4, #201]	; 0xc9
   e3b1e:	0a1a      	lsrs	r2, r3, #8
    PUT_UINT64_BE( high, ctx->buffer, 112 );
   e3b20:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
   e3b24:	f8c4 10cc 	str.w	r1, [r4, #204]	; 0xcc
    PUT_UINT64_BE( high, ctx->buffer, 112 );
   e3b28:	f884 70c2 	strb.w	r7, [r4, #194]	; 0xc2
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
   e3b2c:	f884 20ca 	strb.w	r2, [r4, #202]	; 0xca
   e3b30:	f884 30cb 	strb.w	r3, [r4, #203]	; 0xcb

    if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
   e3b34:	4631      	mov	r1, r6
   e3b36:	4620      	mov	r0, r4
   e3b38:	f7ff fa02 	bl	e2f40 <mbedtls_internal_sha512_process>
   e3b3c:	2800      	cmp	r0, #0
   e3b3e:	f040 80c4 	bne.w	e3cca <mbedtls_sha512_finish_ret+0x218>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT64_BE( ctx->state[0], output,  0 );
   e3b42:	7de3      	ldrb	r3, [r4, #23]
   e3b44:	702b      	strb	r3, [r5, #0]
   e3b46:	8ae3      	ldrh	r3, [r4, #22]
   e3b48:	706b      	strb	r3, [r5, #1]
   e3b4a:	6963      	ldr	r3, [r4, #20]
   e3b4c:	0a1b      	lsrs	r3, r3, #8
   e3b4e:	70ab      	strb	r3, [r5, #2]
   e3b50:	6963      	ldr	r3, [r4, #20]
   e3b52:	70eb      	strb	r3, [r5, #3]
   e3b54:	7ce3      	ldrb	r3, [r4, #19]
   e3b56:	712b      	strb	r3, [r5, #4]
   e3b58:	8a63      	ldrh	r3, [r4, #18]
   e3b5a:	716b      	strb	r3, [r5, #5]
   e3b5c:	6923      	ldr	r3, [r4, #16]
   e3b5e:	0a1b      	lsrs	r3, r3, #8
   e3b60:	71ab      	strb	r3, [r5, #6]
   e3b62:	6923      	ldr	r3, [r4, #16]
   e3b64:	71eb      	strb	r3, [r5, #7]
    PUT_UINT64_BE( ctx->state[1], output,  8 );
   e3b66:	7fe3      	ldrb	r3, [r4, #31]
   e3b68:	722b      	strb	r3, [r5, #8]
   e3b6a:	8be3      	ldrh	r3, [r4, #30]
   e3b6c:	726b      	strb	r3, [r5, #9]
   e3b6e:	69e3      	ldr	r3, [r4, #28]
   e3b70:	0a1b      	lsrs	r3, r3, #8
   e3b72:	72ab      	strb	r3, [r5, #10]
   e3b74:	69e3      	ldr	r3, [r4, #28]
   e3b76:	72eb      	strb	r3, [r5, #11]
   e3b78:	7ee3      	ldrb	r3, [r4, #27]
   e3b7a:	732b      	strb	r3, [r5, #12]
   e3b7c:	8b63      	ldrh	r3, [r4, #26]
   e3b7e:	736b      	strb	r3, [r5, #13]
   e3b80:	69a3      	ldr	r3, [r4, #24]
   e3b82:	0a1b      	lsrs	r3, r3, #8
   e3b84:	73ab      	strb	r3, [r5, #14]
   e3b86:	69a3      	ldr	r3, [r4, #24]
   e3b88:	73eb      	strb	r3, [r5, #15]
    PUT_UINT64_BE( ctx->state[2], output, 16 );
   e3b8a:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   e3b8e:	742b      	strb	r3, [r5, #16]
   e3b90:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   e3b92:	746b      	strb	r3, [r5, #17]
   e3b94:	6a63      	ldr	r3, [r4, #36]	; 0x24
   e3b96:	0a1b      	lsrs	r3, r3, #8
   e3b98:	74ab      	strb	r3, [r5, #18]
   e3b9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   e3b9c:	74eb      	strb	r3, [r5, #19]
   e3b9e:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   e3ba2:	752b      	strb	r3, [r5, #20]
   e3ba4:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   e3ba6:	756b      	strb	r3, [r5, #21]
   e3ba8:	6a23      	ldr	r3, [r4, #32]
   e3baa:	0a1b      	lsrs	r3, r3, #8
   e3bac:	75ab      	strb	r3, [r5, #22]
   e3bae:	6a23      	ldr	r3, [r4, #32]
   e3bb0:	75eb      	strb	r3, [r5, #23]
    PUT_UINT64_BE( ctx->state[3], output, 24 );
   e3bb2:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   e3bb6:	762b      	strb	r3, [r5, #24]
   e3bb8:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   e3bba:	766b      	strb	r3, [r5, #25]
   e3bbc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e3bbe:	0a1b      	lsrs	r3, r3, #8
   e3bc0:	76ab      	strb	r3, [r5, #26]
   e3bc2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e3bc4:	76eb      	strb	r3, [r5, #27]
   e3bc6:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   e3bca:	772b      	strb	r3, [r5, #28]
   e3bcc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   e3bce:	776b      	strb	r3, [r5, #29]
   e3bd0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   e3bd2:	0a1b      	lsrs	r3, r3, #8
   e3bd4:	77ab      	strb	r3, [r5, #30]
   e3bd6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   e3bd8:	77eb      	strb	r3, [r5, #31]
    PUT_UINT64_BE( ctx->state[4], output, 32 );
   e3bda:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
   e3bde:	f885 3020 	strb.w	r3, [r5, #32]
   e3be2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   e3be4:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
   e3be8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   e3bea:	0a1b      	lsrs	r3, r3, #8
   e3bec:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   e3bf0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   e3bf2:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
   e3bf6:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
   e3bfa:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
   e3bfe:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   e3c00:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
   e3c04:	6b23      	ldr	r3, [r4, #48]	; 0x30
   e3c06:	0a1b      	lsrs	r3, r3, #8
   e3c08:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26
   e3c0c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   e3c0e:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
    PUT_UINT64_BE( ctx->state[5], output, 40 );
   e3c12:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
   e3c16:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
   e3c1a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
   e3c1c:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
   e3c20:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   e3c22:	0a1b      	lsrs	r3, r3, #8
   e3c24:	f885 302a 	strb.w	r3, [r5, #42]	; 0x2a
   e3c28:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   e3c2a:	f885 302b 	strb.w	r3, [r5, #43]	; 0x2b
   e3c2e:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
   e3c32:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
   e3c36:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
   e3c38:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
   e3c3c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   e3c3e:	0a1b      	lsrs	r3, r3, #8
   e3c40:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
   e3c44:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   e3c46:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f

    if( ctx->is384 == 0 )
   e3c4a:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
   e3c4e:	2b00      	cmp	r3, #0
   e3c50:	d13b      	bne.n	e3cca <mbedtls_sha512_finish_ret+0x218>
    {
        PUT_UINT64_BE( ctx->state[6], output, 48 );
   e3c52:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
   e3c56:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
   e3c5a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
   e3c5e:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
   e3c62:	6c63      	ldr	r3, [r4, #68]	; 0x44
   e3c64:	0a1b      	lsrs	r3, r3, #8
   e3c66:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
   e3c6a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   e3c6c:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
   e3c70:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   e3c74:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
   e3c78:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   e3c7c:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
   e3c80:	6c23      	ldr	r3, [r4, #64]	; 0x40
   e3c82:	0a1b      	lsrs	r3, r3, #8
   e3c84:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
   e3c88:	6c23      	ldr	r3, [r4, #64]	; 0x40
   e3c8a:	f885 3037 	strb.w	r3, [r5, #55]	; 0x37
        PUT_UINT64_BE( ctx->state[7], output, 56 );
   e3c8e:	f894 304f 	ldrb.w	r3, [r4, #79]	; 0x4f
   e3c92:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
   e3c96:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
   e3c9a:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
   e3c9e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   e3ca0:	0a1b      	lsrs	r3, r3, #8
   e3ca2:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
   e3ca6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   e3ca8:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
   e3cac:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
   e3cb0:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   e3cb4:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
   e3cb8:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
   e3cbc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   e3cbe:	0a1b      	lsrs	r3, r3, #8
   e3cc0:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
   e3cc4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   e3cc6:	f885 303f 	strb.w	r3, [r5, #63]	; 0x3f
    }

    return( 0 );
}
   e3cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        memset( ctx->buffer + used, 0, 128 - used );
   e3ccc:	2100      	movs	r1, #0
   e3cce:	f1c2 0280 	rsb	r2, r2, #128	; 0x80
   e3cd2:	f004 fe23 	bl	e891c <memset>
        if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
   e3cd6:	4631      	mov	r1, r6
   e3cd8:	4620      	mov	r0, r4
   e3cda:	f7ff f931 	bl	e2f40 <mbedtls_internal_sha512_process>
   e3cde:	2800      	cmp	r0, #0
   e3ce0:	d1f3      	bne.n	e3cca <mbedtls_sha512_finish_ret+0x218>
        memset( ctx->buffer, 0, 112 );
   e3ce2:	4601      	mov	r1, r0
   e3ce4:	2270      	movs	r2, #112	; 0x70
   e3ce6:	4630      	mov	r0, r6
   e3ce8:	e6f8      	b.n	e3adc <mbedtls_sha512_finish_ret+0x2a>

000e3cea <mbedtls_sha512_ret>:
 */
int mbedtls_sha512_ret( const unsigned char *input,
                    size_t ilen,
                    unsigned char output[64],
                    int is384 )
{
   e3cea:	b5f0      	push	{r4, r5, r6, r7, lr}
   e3cec:	b0b9      	sub	sp, #228	; 0xe4
   e3cee:	4606      	mov	r6, r0

    SHA512_VALIDATE_RET( is384 == 0 || is384 == 1 );
    SHA512_VALIDATE_RET( ilen == 0 || input != NULL );
    SHA512_VALIDATE_RET( (unsigned char *)output != NULL );

    mbedtls_sha512_init( &ctx );
   e3cf0:	a802      	add	r0, sp, #8
{
   e3cf2:	460f      	mov	r7, r1
   e3cf4:	4615      	mov	r5, r2
   e3cf6:	9301      	str	r3, [sp, #4]
    mbedtls_sha512_init( &ctx );
   e3cf8:	f7ff f876 	bl	e2de8 <mbedtls_sha512_init>

    if( ( ret = mbedtls_sha512_starts_ret( &ctx, is384 ) ) != 0 )
   e3cfc:	9901      	ldr	r1, [sp, #4]
   e3cfe:	a802      	add	r0, sp, #8
   e3d00:	f7ff f882 	bl	e2e08 <mbedtls_sha512_starts_ret>
   e3d04:	4604      	mov	r4, r0
   e3d06:	b958      	cbnz	r0, e3d20 <mbedtls_sha512_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha512_update_ret( &ctx, input, ilen ) ) != 0 )
   e3d08:	463a      	mov	r2, r7
   e3d0a:	4631      	mov	r1, r6
   e3d0c:	a802      	add	r0, sp, #8
   e3d0e:	f7ff fe7d 	bl	e3a0c <mbedtls_sha512_update_ret>
   e3d12:	4604      	mov	r4, r0
   e3d14:	b920      	cbnz	r0, e3d20 <mbedtls_sha512_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha512_finish_ret( &ctx, output ) ) != 0 )
   e3d16:	4629      	mov	r1, r5
   e3d18:	a802      	add	r0, sp, #8
   e3d1a:	f7ff feca 	bl	e3ab2 <mbedtls_sha512_finish_ret>
   e3d1e:	4604      	mov	r4, r0
        goto exit;

exit:
    mbedtls_sha512_free( &ctx );
   e3d20:	a802      	add	r0, sp, #8
   e3d22:	f7ff f865 	bl	e2df0 <mbedtls_sha512_free>

    return( ret );
}
   e3d26:	4620      	mov	r0, r4
   e3d28:	b039      	add	sp, #228	; 0xe4
   e3d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000e3d2c <mbedtls_pem_init>:
#endif

#if defined(MBEDTLS_PEM_PARSE_C)
void mbedtls_pem_init( mbedtls_pem_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_pem_context ) );
   e3d2c:	2300      	movs	r3, #0
   e3d2e:	6003      	str	r3, [r0, #0]
   e3d30:	6043      	str	r3, [r0, #4]
   e3d32:	6083      	str	r3, [r0, #8]
}
   e3d34:	4770      	bx	lr
	...

000e3d38 <mbedtls_pem_read_buffer>:
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */

int mbedtls_pem_read_buffer( mbedtls_pem_context *ctx, const char *header, const char *footer,
                     const unsigned char *data, const unsigned char *pwd,
                     size_t pwdlen, size_t *use_len )
{
   e3d38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   e3d3c:	4689      	mov	r9, r1
   e3d3e:	b087      	sub	sp, #28
   e3d40:	4690      	mov	r8, r2
   e3d42:	461f      	mov	r7, r3
    ((void) pwd);
    ((void) pwdlen);
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */

    if( ctx == NULL )
   e3d44:	4606      	mov	r6, r0
   e3d46:	2800      	cmp	r0, #0
   e3d48:	d065      	beq.n	e3e16 <mbedtls_pem_read_buffer+0xde>
        return( MBEDTLS_ERR_PEM_BAD_INPUT_DATA );

    s1 = (unsigned char *) strstr( (const char *) data, header );
   e3d4a:	4618      	mov	r0, r3
   e3d4c:	f004 fe4e 	bl	e89ec <strstr>

    if( s1 == NULL )
   e3d50:	4604      	mov	r4, r0
   e3d52:	2800      	cmp	r0, #0
   e3d54:	d061      	beq.n	e3e1a <mbedtls_pem_read_buffer+0xe2>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s2 = (unsigned char *) strstr( (const char *) data, footer );
   e3d56:	4641      	mov	r1, r8
   e3d58:	4638      	mov	r0, r7
   e3d5a:	f004 fe47 	bl	e89ec <strstr>

    if( s2 == NULL || s2 <= s1 )
   e3d5e:	4605      	mov	r5, r0
   e3d60:	2800      	cmp	r0, #0
   e3d62:	d05a      	beq.n	e3e1a <mbedtls_pem_read_buffer+0xe2>
   e3d64:	4284      	cmp	r4, r0
   e3d66:	d258      	bcs.n	e3e1a <mbedtls_pem_read_buffer+0xe2>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s1 += strlen( header );
   e3d68:	4648      	mov	r0, r9
   e3d6a:	f004 fe25 	bl	e89b8 <strlen>
    if( *s1 == ' '  ) s1++;
   e3d6e:	5c23      	ldrb	r3, [r4, r0]
    s1 += strlen( header );
   e3d70:	1821      	adds	r1, r4, r0
    if( *s1 == ' '  ) s1++;
   e3d72:	2b20      	cmp	r3, #32
   e3d74:	bf08      	it	eq
   e3d76:	3101      	addeq	r1, #1
    if( *s1 == '\r' ) s1++;
   e3d78:	780b      	ldrb	r3, [r1, #0]
   e3d7a:	2b0d      	cmp	r3, #13
   e3d7c:	bf08      	it	eq
   e3d7e:	3101      	addeq	r1, #1
    if( *s1 == '\n' ) s1++;
   e3d80:	780b      	ldrb	r3, [r1, #0]
   e3d82:	2b0a      	cmp	r3, #10
   e3d84:	d149      	bne.n	e3e1a <mbedtls_pem_read_buffer+0xe2>
    else return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    end = s2;
    end += strlen( footer );
   e3d86:	4640      	mov	r0, r8
    if( *s1 == '\n' ) s1++;
   e3d88:	1c4c      	adds	r4, r1, #1
    end += strlen( footer );
   e3d8a:	f004 fe15 	bl	e89b8 <strlen>
    if( *end == ' '  ) end++;
   e3d8e:	5c2b      	ldrb	r3, [r5, r0]
    end += strlen( footer );
   e3d90:	182a      	adds	r2, r5, r0
    if( *end == ' '  ) end++;
   e3d92:	2b20      	cmp	r3, #32
   e3d94:	bf08      	it	eq
   e3d96:	3201      	addeq	r2, #1
    if( *end == '\r' ) end++;
   e3d98:	7813      	ldrb	r3, [r2, #0]
   e3d9a:	2b0d      	cmp	r3, #13
   e3d9c:	bf08      	it	eq
   e3d9e:	3201      	addeq	r2, #1
    if( *end == '\n' ) end++;
   e3da0:	7813      	ldrb	r3, [r2, #0]
   e3da2:	2b0a      	cmp	r3, #10
   e3da4:	bf08      	it	eq
   e3da6:	3201      	addeq	r2, #1
    *use_len = end - data;
   e3da8:	1bd2      	subs	r2, r2, r7
   e3daa:	9b10      	ldr	r3, [sp, #64]	; 0x40

    enc = 0;

    if( s2 - s1 >= 22 && memcmp( s1, "Proc-Type: 4,ENCRYPTED", 22 ) == 0 )
   e3dac:	1b2f      	subs	r7, r5, r4
   e3dae:	2f15      	cmp	r7, #21
    *use_len = end - data;
   e3db0:	601a      	str	r2, [r3, #0]
    if( s2 - s1 >= 22 && memcmp( s1, "Proc-Type: 4,ENCRYPTED", 22 ) == 0 )
   e3db2:	dd05      	ble.n	e3dc0 <mbedtls_pem_read_buffer+0x88>
   e3db4:	491e      	ldr	r1, [pc, #120]	; (e3e30 <mbedtls_pem_read_buffer+0xf8>)
   e3db6:	2216      	movs	r2, #22
   e3db8:	4620      	mov	r0, r4
   e3dba:	f004 fd79 	bl	e88b0 <memcmp>
   e3dbe:	b370      	cbz	r0, e3e1e <mbedtls_pem_read_buffer+0xe6>
        return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
    }

    if( s1 >= s2 )
   e3dc0:	42a5      	cmp	r5, r4
   e3dc2:	d92e      	bls.n	e3e22 <mbedtls_pem_read_buffer+0xea>
        return( MBEDTLS_ERR_PEM_INVALID_DATA );

    ret = mbedtls_base64_decode( NULL, 0, &len, s1, s2 - s1 );
   e3dc4:	2100      	movs	r1, #0
   e3dc6:	9700      	str	r7, [sp, #0]
   e3dc8:	4623      	mov	r3, r4
   e3dca:	aa05      	add	r2, sp, #20
   e3dcc:	4608      	mov	r0, r1
   e3dce:	f7f8 fedf 	bl	dcb90 <mbedtls_base64_decode>

    if( ret == MBEDTLS_ERR_BASE64_INVALID_CHARACTER )
   e3dd2:	302c      	adds	r0, #44	; 0x2c
   e3dd4:	d027      	beq.n	e3e26 <mbedtls_pem_read_buffer+0xee>
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );

    if( ( buf = (unsigned char *)mbedtls_calloc( 1, len ) ) == NULL )
   e3dd6:	9905      	ldr	r1, [sp, #20]
   e3dd8:	9103      	str	r1, [sp, #12]
   e3dda:	2001      	movs	r0, #1
   e3ddc:	f004 fcfc 	bl	e87d8 <calloc>
   e3de0:	4605      	mov	r5, r0
   e3de2:	b310      	cbz	r0, e3e2a <mbedtls_pem_read_buffer+0xf2>
        return( MBEDTLS_ERR_PEM_ALLOC_FAILED );

    if( ( ret = mbedtls_base64_decode( buf, len, &len, s1, s2 - s1 ) ) != 0 )
   e3de4:	4623      	mov	r3, r4
   e3de6:	9903      	ldr	r1, [sp, #12]
   e3de8:	9700      	str	r7, [sp, #0]
   e3dea:	aa05      	add	r2, sp, #20
   e3dec:	f7f8 fed0 	bl	dcb90 <mbedtls_base64_decode>
   e3df0:	4604      	mov	r4, r0
   e3df2:	b160      	cbz	r0, e3e0e <mbedtls_pem_read_buffer+0xd6>
    {
        mbedtls_platform_zeroize( buf, len );
   e3df4:	9905      	ldr	r1, [sp, #20]
   e3df6:	4628      	mov	r0, r5
   e3df8:	f7f7 f8f0 	bl	dafdc <mbedtls_platform_zeroize>
        mbedtls_free( buf );
   e3dfc:	4628      	mov	r0, r5
   e3dfe:	f001 fcdf 	bl	e57c0 <free>
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );
   e3e02:	f5a4 5488 	sub.w	r4, r4, #4352	; 0x1100

    ctx->buf = buf;
    ctx->buflen = len;

    return( 0 );
}
   e3e06:	4620      	mov	r0, r4
   e3e08:	b007      	add	sp, #28
   e3e0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ctx->buflen = len;
   e3e0e:	9b05      	ldr	r3, [sp, #20]
    ctx->buf = buf;
   e3e10:	6035      	str	r5, [r6, #0]
    ctx->buflen = len;
   e3e12:	6073      	str	r3, [r6, #4]
    return( 0 );
   e3e14:	e7f7      	b.n	e3e06 <mbedtls_pem_read_buffer+0xce>
        return( MBEDTLS_ERR_PEM_BAD_INPUT_DATA );
   e3e16:	4c07      	ldr	r4, [pc, #28]	; (e3e34 <mbedtls_pem_read_buffer+0xfc>)
   e3e18:	e7f5      	b.n	e3e06 <mbedtls_pem_read_buffer+0xce>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );
   e3e1a:	4c07      	ldr	r4, [pc, #28]	; (e3e38 <mbedtls_pem_read_buffer+0x100>)
   e3e1c:	e7f3      	b.n	e3e06 <mbedtls_pem_read_buffer+0xce>
        return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );
   e3e1e:	4c07      	ldr	r4, [pc, #28]	; (e3e3c <mbedtls_pem_read_buffer+0x104>)
   e3e20:	e7f1      	b.n	e3e06 <mbedtls_pem_read_buffer+0xce>
        return( MBEDTLS_ERR_PEM_INVALID_DATA );
   e3e22:	4c07      	ldr	r4, [pc, #28]	; (e3e40 <mbedtls_pem_read_buffer+0x108>)
   e3e24:	e7ef      	b.n	e3e06 <mbedtls_pem_read_buffer+0xce>
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );
   e3e26:	4c07      	ldr	r4, [pc, #28]	; (e3e44 <mbedtls_pem_read_buffer+0x10c>)
   e3e28:	e7ed      	b.n	e3e06 <mbedtls_pem_read_buffer+0xce>
        return( MBEDTLS_ERR_PEM_ALLOC_FAILED );
   e3e2a:	4c07      	ldr	r4, [pc, #28]	; (e3e48 <mbedtls_pem_read_buffer+0x110>)
   e3e2c:	e7eb      	b.n	e3e06 <mbedtls_pem_read_buffer+0xce>
   e3e2e:	bf00      	nop
   e3e30:	000ecd50 	.word	0x000ecd50
   e3e34:	ffffeb80 	.word	0xffffeb80
   e3e38:	ffffef80 	.word	0xffffef80
   e3e3c:	ffffec00 	.word	0xffffec00
   e3e40:	ffffef00 	.word	0xffffef00
   e3e44:	ffffeed4 	.word	0xffffeed4
   e3e48:	ffffee80 	.word	0xffffee80

000e3e4c <mbedtls_pem_free>:

void mbedtls_pem_free( mbedtls_pem_context *ctx )
{
   e3e4c:	b510      	push	{r4, lr}
   e3e4e:	4604      	mov	r4, r0
    if ( ctx->buf != NULL )
   e3e50:	6800      	ldr	r0, [r0, #0]
   e3e52:	b128      	cbz	r0, e3e60 <mbedtls_pem_free+0x14>
    {
        mbedtls_platform_zeroize( ctx->buf, ctx->buflen );
   e3e54:	6861      	ldr	r1, [r4, #4]
   e3e56:	f7f7 f8c1 	bl	dafdc <mbedtls_platform_zeroize>
        mbedtls_free( ctx->buf );
   e3e5a:	6820      	ldr	r0, [r4, #0]
   e3e5c:	f001 fcb0 	bl	e57c0 <free>
    }
    mbedtls_free( ctx->info );
   e3e60:	68a0      	ldr	r0, [r4, #8]
   e3e62:	f001 fcad 	bl	e57c0 <free>

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_pem_context ) );
   e3e66:	4620      	mov	r0, r4
   e3e68:	210c      	movs	r1, #12
}
   e3e6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_pem_context ) );
   e3e6e:	f7f7 b8b5 	b.w	dafdc <mbedtls_platform_zeroize>
	...

000e3e74 <mbedtls_ssl_ciphersuite_from_id>:

    return( NULL );
}

const mbedtls_ssl_ciphersuite_t *mbedtls_ssl_ciphersuite_from_id( int ciphersuite )
{
   e3e74:	4602      	mov	r2, r0
    const mbedtls_ssl_ciphersuite_t *cur = ciphersuite_definitions;
   e3e76:	4804      	ldr	r0, [pc, #16]	; (e3e88 <mbedtls_ssl_ciphersuite_from_id+0x14>)

    while( cur->id != 0 )
   e3e78:	6803      	ldr	r3, [r0, #0]
   e3e7a:	b11b      	cbz	r3, e3e84 <mbedtls_ssl_ciphersuite_from_id+0x10>
    {
        if( cur->id == ciphersuite )
   e3e7c:	4293      	cmp	r3, r2
   e3e7e:	d002      	beq.n	e3e86 <mbedtls_ssl_ciphersuite_from_id+0x12>
            return( cur );

        cur++;
   e3e80:	3020      	adds	r0, #32
    while( cur->id != 0 )
   e3e82:	e7f9      	b.n	e3e78 <mbedtls_ssl_ciphersuite_from_id+0x4>
    }

    return( NULL );
   e3e84:	4618      	mov	r0, r3
}
   e3e86:	4770      	bx	lr
   e3e88:	000ed1c0 	.word	0x000ed1c0

000e3e8c <mbedtls_ssl_list_ciphersuites>:
{
   e3e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if( supported_init == 0 )
   e3e8e:	4e0e      	ldr	r6, [pc, #56]	; (e3ec8 <mbedtls_ssl_list_ciphersuites+0x3c>)
   e3e90:	6832      	ldr	r2, [r6, #0]
   e3e92:	b9ba      	cbnz	r2, e3ec4 <mbedtls_ssl_list_ciphersuites+0x38>
        for( p = ciphersuite_preference, q = supported_ciphersuites;
   e3e94:	490d      	ldr	r1, [pc, #52]	; (e3ecc <mbedtls_ssl_list_ciphersuites+0x40>)
   e3e96:	4d0e      	ldr	r5, [pc, #56]	; (e3ed0 <mbedtls_ssl_list_ciphersuites+0x44>)
             *p != 0 && q < supported_ciphersuites + MAX_CIPHERSUITES - 1;
   e3e98:	f101 0720 	add.w	r7, r1, #32
   e3e9c:	f855 4b04 	ldr.w	r4, [r5], #4
   e3ea0:	b164      	cbz	r4, e3ebc <mbedtls_ssl_list_ciphersuites+0x30>
   e3ea2:	42b9      	cmp	r1, r7
   e3ea4:	d20a      	bcs.n	e3ebc <mbedtls_ssl_list_ciphersuites+0x30>
            if( ( cs_info = mbedtls_ssl_ciphersuite_from_id( *p ) ) != NULL &&
   e3ea6:	4620      	mov	r0, r4
   e3ea8:	f7ff ffe4 	bl	e3e74 <mbedtls_ssl_ciphersuite_from_id>
   e3eac:	2800      	cmp	r0, #0
   e3eae:	d0f5      	beq.n	e3e9c <mbedtls_ssl_list_ciphersuites+0x10>
    if( cs_info->cipher == MBEDTLS_CIPHER_ARC4_128 )
   e3eb0:	7a03      	ldrb	r3, [r0, #8]
   e3eb2:	2b2a      	cmp	r3, #42	; 0x2a
   e3eb4:	d0f2      	beq.n	e3e9c <mbedtls_ssl_list_ciphersuites+0x10>
                *(q++) = *p;
   e3eb6:	f841 4b04 	str.w	r4, [r1], #4
        for( p = ciphersuite_preference, q = supported_ciphersuites;
   e3eba:	e7ef      	b.n	e3e9c <mbedtls_ssl_list_ciphersuites+0x10>
        *q = 0;
   e3ebc:	2300      	movs	r3, #0
   e3ebe:	600b      	str	r3, [r1, #0]
        supported_init = 1;
   e3ec0:	2301      	movs	r3, #1
   e3ec2:	6033      	str	r3, [r6, #0]
}
   e3ec4:	4801      	ldr	r0, [pc, #4]	; (e3ecc <mbedtls_ssl_list_ciphersuites+0x40>)
   e3ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   e3ec8:	2003e618 	.word	0x2003e618
   e3ecc:	2003e61c 	.word	0x2003e61c
   e3ed0:	000ece80 	.word	0x000ece80

000e3ed4 <mbedtls_ssl_get_ciphersuite_sig_pk_alg>:
}

#if defined(MBEDTLS_PK_C)
mbedtls_pk_type_t mbedtls_ssl_get_ciphersuite_sig_pk_alg( const mbedtls_ssl_ciphersuite_t *info )
{
    switch( info->key_exchange )
   e3ed4:	7a80      	ldrb	r0, [r0, #10]
   e3ed6:	1e43      	subs	r3, r0, #1
   e3ed8:	2b09      	cmp	r3, #9
   e3eda:	d808      	bhi.n	e3eee <mbedtls_ssl_get_ciphersuite_sig_pk_alg+0x1a>
   e3edc:	e8df f003 	tbb	[pc, r3]
   e3ee0:	0a090909 	.word	0x0a090909
   e3ee4:	07090707 	.word	0x07090707
   e3ee8:	0505      	.short	0x0505
        case MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA:
            return( MBEDTLS_PK_ECDSA );

        case MBEDTLS_KEY_EXCHANGE_ECDH_RSA:
        case MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA:
            return( MBEDTLS_PK_ECKEY );
   e3eea:	2002      	movs	r0, #2
   e3eec:	4770      	bx	lr

        default:
            return( MBEDTLS_PK_NONE );
   e3eee:	2000      	movs	r0, #0
   e3ef0:	4770      	bx	lr
            return( MBEDTLS_PK_RSA );
   e3ef2:	2001      	movs	r0, #1
    }
}
   e3ef4:	4770      	bx	lr

000e3ef6 <mbedtls_ssl_ciphersuite_uses_ec>:

#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C) || \
    defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
int mbedtls_ssl_ciphersuite_uses_ec( const mbedtls_ssl_ciphersuite_t *info )
{
    switch( info->key_exchange )
   e3ef6:	7a80      	ldrb	r0, [r0, #10]
   e3ef8:	2804      	cmp	r0, #4
   e3efa:	d804      	bhi.n	e3f06 <mbedtls_ssl_ciphersuite_uses_ec+0x10>
   e3efc:	2802      	cmp	r0, #2
   e3efe:	bf94      	ite	ls
   e3f00:	2000      	movls	r0, #0
   e3f02:	2001      	movhi	r0, #1
   e3f04:	4770      	bx	lr
   e3f06:	3808      	subs	r0, #8
   e3f08:	2803      	cmp	r0, #3
   e3f0a:	bf8c      	ite	hi
   e3f0c:	2000      	movhi	r0, #0
   e3f0e:	2001      	movls	r0, #1
            return( 1 );

        default:
            return( 0 );
    }
}
   e3f10:	4770      	bx	lr

000e3f12 <mbedtls_ssl_ciphersuite_uses_psk>:
#endif /* MBEDTLS_ECDH_C || MBEDTLS_ECDSA_C || MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED*/

#if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)
int mbedtls_ssl_ciphersuite_uses_psk( const mbedtls_ssl_ciphersuite_t *info )
{
    switch( info->key_exchange )
   e3f12:	7a80      	ldrb	r0, [r0, #10]
   e3f14:	3805      	subs	r0, #5
            return( 1 );

        default:
            return( 0 );
    }
}
   e3f16:	2803      	cmp	r0, #3
   e3f18:	bf8c      	ite	hi
   e3f1a:	2000      	movhi	r0, #0
   e3f1c:	2001      	movls	r0, #1
   e3f1e:	4770      	bx	lr

000e3f20 <mbedtls_rsa_deduce_primes>:
 *
 */
int mbedtls_rsa_deduce_primes( mbedtls_mpi const *N,
                     mbedtls_mpi const *E, mbedtls_mpi const *D,
                     mbedtls_mpi *P, mbedtls_mpi *Q )
{
   e3f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e3f24:	b097      	sub	sp, #92	; 0x5c
   e3f26:	461e      	mov	r6, r3
    uint16_t order;    /* Order of 2 in DE - 1 */

    mbedtls_mpi T;  /* Holds largest odd divisor of DE - 1     */
    mbedtls_mpi K;  /* Temporary holding the current candidate */

    const unsigned char primes[] = { 2,
   e3f28:	4b74      	ldr	r3, [pc, #464]	; (e40fc <mbedtls_rsa_deduce_primes+0x1dc>)
{
   e3f2a:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
    const unsigned char primes[] = { 2,
   e3f2e:	ac08      	add	r4, sp, #32
{
   e3f30:	4605      	mov	r5, r0
   e3f32:	468a      	mov	sl, r1
   e3f34:	4617      	mov	r7, r2
    const unsigned char primes[] = { 2,
   e3f36:	f103 0c30 	add.w	ip, r3, #48	; 0x30
   e3f3a:	46a1      	mov	r9, r4
   e3f3c:	6818      	ldr	r0, [r3, #0]
   e3f3e:	6859      	ldr	r1, [r3, #4]
   e3f40:	4622      	mov	r2, r4
   e3f42:	c203      	stmia	r2!, {r0, r1}
   e3f44:	3308      	adds	r3, #8
   e3f46:	4563      	cmp	r3, ip
   e3f48:	4614      	mov	r4, r2
   e3f4a:	d1f7      	bne.n	e3f3c <mbedtls_rsa_deduce_primes+0x1c>
   e3f4c:	6818      	ldr	r0, [r3, #0]
   e3f4e:	889b      	ldrh	r3, [r3, #4]
   e3f50:	6010      	str	r0, [r2, #0]
   e3f52:	8093      	strh	r3, [r2, #4]
         229,  233,  239,  241,  251
    };

    const size_t num_primes = sizeof( primes ) / sizeof( *primes );

    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
   e3f54:	b92e      	cbnz	r6, e3f62 <mbedtls_rsa_deduce_primes+0x42>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
   e3f56:	f06f 0403 	mvn.w	r4, #3
cleanup:

    mbedtls_mpi_free( &K );
    mbedtls_mpi_free( &T );
    return( ret );
}
   e3f5a:	4620      	mov	r0, r4
   e3f5c:	b017      	add	sp, #92	; 0x5c
   e3f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
   e3f62:	f1b8 0f00 	cmp.w	r8, #0
   e3f66:	d0f6      	beq.n	e3f56 <mbedtls_rsa_deduce_primes+0x36>
   e3f68:	68b3      	ldr	r3, [r6, #8]
   e3f6a:	2b00      	cmp	r3, #0
   e3f6c:	d1f3      	bne.n	e3f56 <mbedtls_rsa_deduce_primes+0x36>
   e3f6e:	f8d8 1008 	ldr.w	r1, [r8, #8]
   e3f72:	2900      	cmp	r1, #0
   e3f74:	d1ef      	bne.n	e3f56 <mbedtls_rsa_deduce_primes+0x36>
    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
   e3f76:	4628      	mov	r0, r5
   e3f78:	f7fd f843 	bl	e1002 <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
   e3f7c:	2800      	cmp	r0, #0
   e3f7e:	ddea      	ble.n	e3f56 <mbedtls_rsa_deduce_primes+0x36>
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
   e3f80:	2101      	movs	r1, #1
   e3f82:	4638      	mov	r0, r7
   e3f84:	f7fd f83d 	bl	e1002 <mbedtls_mpi_cmp_int>
    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
   e3f88:	2800      	cmp	r0, #0
   e3f8a:	dde4      	ble.n	e3f56 <mbedtls_rsa_deduce_primes+0x36>
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
   e3f8c:	4629      	mov	r1, r5
   e3f8e:	4638      	mov	r0, r7
   e3f90:	f7fc fff6 	bl	e0f80 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
   e3f94:	2800      	cmp	r0, #0
   e3f96:	dade      	bge.n	e3f56 <mbedtls_rsa_deduce_primes+0x36>
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
   e3f98:	2101      	movs	r1, #1
   e3f9a:	4650      	mov	r0, sl
   e3f9c:	f7fd f831 	bl	e1002 <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
   e3fa0:	2800      	cmp	r0, #0
   e3fa2:	ddd8      	ble.n	e3f56 <mbedtls_rsa_deduce_primes+0x36>
        mbedtls_mpi_cmp_mpi( E, N ) >= 0 )
   e3fa4:	4629      	mov	r1, r5
   e3fa6:	4650      	mov	r0, sl
   e3fa8:	f7fc ffea 	bl	e0f80 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
   e3fac:	2800      	cmp	r0, #0
   e3fae:	dad2      	bge.n	e3f56 <mbedtls_rsa_deduce_primes+0x36>
    mbedtls_mpi_init( &K );
   e3fb0:	a805      	add	r0, sp, #20
   e3fb2:	f7fc fd06 	bl	e09c2 <mbedtls_mpi_init>
    mbedtls_mpi_init( &T );
   e3fb6:	a802      	add	r0, sp, #8
   e3fb8:	f7fc fd03 	bl	e09c2 <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, D,  E ) );
   e3fbc:	4652      	mov	r2, sl
   e3fbe:	4639      	mov	r1, r7
   e3fc0:	a802      	add	r0, sp, #8
   e3fc2:	f7fd f93a 	bl	e123a <mbedtls_mpi_mul_mpi>
   e3fc6:	4604      	mov	r4, r0
   e3fc8:	b980      	cbnz	r0, e3fec <mbedtls_rsa_deduce_primes+0xcc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &T, &T, 1 ) );
   e3fca:	a902      	add	r1, sp, #8
   e3fcc:	2201      	movs	r2, #1
   e3fce:	4608      	mov	r0, r1
   e3fd0:	f7fd f91d 	bl	e120e <mbedtls_mpi_sub_int>
   e3fd4:	4604      	mov	r4, r0
   e3fd6:	b948      	cbnz	r0, e3fec <mbedtls_rsa_deduce_primes+0xcc>
    if( ( order = (uint16_t) mbedtls_mpi_lsb( &T ) ) == 0 )
   e3fd8:	a802      	add	r0, sp, #8
   e3fda:	f7fc fdfa 	bl	e0bd2 <mbedtls_mpi_lsb>
   e3fde:	fa1f fb80 	uxth.w	fp, r0
   e3fe2:	f1bb 0f00 	cmp.w	fp, #0
   e3fe6:	d108      	bne.n	e3ffa <mbedtls_rsa_deduce_primes+0xda>
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
   e3fe8:	f06f 0403 	mvn.w	r4, #3
    mbedtls_mpi_free( &K );
   e3fec:	a805      	add	r0, sp, #20
   e3fee:	f7fc fcee 	bl	e09ce <mbedtls_mpi_free>
    mbedtls_mpi_free( &T );
   e3ff2:	a802      	add	r0, sp, #8
   e3ff4:	f7fc fceb 	bl	e09ce <mbedtls_mpi_free>
    return( ret );
   e3ff8:	e7af      	b.n	e3f5a <mbedtls_rsa_deduce_primes+0x3a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &T, order ) );
   e3ffa:	b281      	uxth	r1, r0
   e3ffc:	a802      	add	r0, sp, #8
   e3ffe:	f7fc fee5 	bl	e0dcc <mbedtls_mpi_shift_r>
   e4002:	4604      	mov	r4, r0
   e4004:	2800      	cmp	r0, #0
   e4006:	d1f1      	bne.n	e3fec <mbedtls_rsa_deduce_primes+0xcc>
    if( N->p[0] % 8 == 1 )
   e4008:	68ab      	ldr	r3, [r5, #8]
   e400a:	681f      	ldr	r7, [r3, #0]
   e400c:	f007 0707 	and.w	r7, r7, #7
   e4010:	1e7b      	subs	r3, r7, #1
   e4012:	425f      	negs	r7, r3
   e4014:	415f      	adcs	r7, r3
        mbedtls_mpi_lset( &K, primes[attempt] );
   e4016:	f819 1007 	ldrb.w	r1, [r9, r7]
   e401a:	a805      	add	r0, sp, #20
   e401c:	f7fc fdac 	bl	e0b78 <mbedtls_mpi_lset>
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );
   e4020:	462a      	mov	r2, r5
   e4022:	a905      	add	r1, sp, #20
   e4024:	4630      	mov	r0, r6
   e4026:	f7fd fd9a 	bl	e1b5e <mbedtls_mpi_gcd>
   e402a:	4604      	mov	r4, r0
   e402c:	2800      	cmp	r0, #0
   e402e:	d1dd      	bne.n	e3fec <mbedtls_rsa_deduce_primes+0xcc>
        if( mbedtls_mpi_cmp_int( P, 1 ) != 0 )
   e4030:	2101      	movs	r1, #1
   e4032:	4630      	mov	r0, r6
   e4034:	f7fc ffe5 	bl	e1002 <mbedtls_mpi_cmp_int>
   e4038:	b120      	cbz	r0, e4044 <mbedtls_rsa_deduce_primes+0x124>
    for( ; attempt < num_primes; ++attempt )
   e403a:	3701      	adds	r7, #1
   e403c:	b2bb      	uxth	r3, r7
   e403e:	2b35      	cmp	r3, #53	; 0x35
   e4040:	d9e9      	bls.n	e4016 <mbedtls_rsa_deduce_primes+0xf6>
   e4042:	e7d1      	b.n	e3fe8 <mbedtls_rsa_deduce_primes+0xc8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &K, &K, &T, N,
   e4044:	a905      	add	r1, sp, #20
   e4046:	f8cd 8000 	str.w	r8, [sp]
   e404a:	462b      	mov	r3, r5
   e404c:	aa02      	add	r2, sp, #8
   e404e:	4608      	mov	r0, r1
   e4050:	f7fd fb5e 	bl	e1710 <mbedtls_mpi_exp_mod>
   e4054:	4604      	mov	r4, r0
   e4056:	2800      	cmp	r0, #0
   e4058:	d1c8      	bne.n	e3fec <mbedtls_rsa_deduce_primes+0xcc>
        for( iter = 1; iter <= order; ++iter )
   e405a:	f04f 0a01 	mov.w	sl, #1
            if( mbedtls_mpi_cmp_int( &K, 1 ) == 0 )
   e405e:	2101      	movs	r1, #1
   e4060:	a805      	add	r0, sp, #20
   e4062:	f7fc ffce 	bl	e1002 <mbedtls_mpi_cmp_int>
   e4066:	2800      	cmp	r0, #0
   e4068:	d033      	beq.n	e40d2 <mbedtls_rsa_deduce_primes+0x1b2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( &K, &K, 1 ) );
   e406a:	a905      	add	r1, sp, #20
   e406c:	2201      	movs	r2, #1
   e406e:	4608      	mov	r0, r1
   e4070:	f7fd f8b7 	bl	e11e2 <mbedtls_mpi_add_int>
   e4074:	4604      	mov	r4, r0
   e4076:	2800      	cmp	r0, #0
   e4078:	d1b8      	bne.n	e3fec <mbedtls_rsa_deduce_primes+0xcc>
            MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );
   e407a:	462a      	mov	r2, r5
   e407c:	a905      	add	r1, sp, #20
   e407e:	4630      	mov	r0, r6
   e4080:	f7fd fd6d 	bl	e1b5e <mbedtls_mpi_gcd>
   e4084:	4604      	mov	r4, r0
   e4086:	2800      	cmp	r0, #0
   e4088:	d1b0      	bne.n	e3fec <mbedtls_rsa_deduce_primes+0xcc>
            if( mbedtls_mpi_cmp_int( P, 1 ) ==  1 &&
   e408a:	2101      	movs	r1, #1
   e408c:	4630      	mov	r0, r6
   e408e:	f7fc ffb8 	bl	e1002 <mbedtls_mpi_cmp_int>
   e4092:	2801      	cmp	r0, #1
   e4094:	d024      	beq.n	e40e0 <mbedtls_rsa_deduce_primes+0x1c0>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
   e4096:	a905      	add	r1, sp, #20
   e4098:	2201      	movs	r2, #1
   e409a:	4608      	mov	r0, r1
   e409c:	f7fd f8b7 	bl	e120e <mbedtls_mpi_sub_int>
   e40a0:	4604      	mov	r4, r0
   e40a2:	2800      	cmp	r0, #0
   e40a4:	d1a2      	bne.n	e3fec <mbedtls_rsa_deduce_primes+0xcc>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, &K, &K ) );
   e40a6:	aa05      	add	r2, sp, #20
   e40a8:	4611      	mov	r1, r2
   e40aa:	4610      	mov	r0, r2
   e40ac:	f7fd f8c5 	bl	e123a <mbedtls_mpi_mul_mpi>
   e40b0:	4604      	mov	r4, r0
   e40b2:	2800      	cmp	r0, #0
   e40b4:	d19a      	bne.n	e3fec <mbedtls_rsa_deduce_primes+0xcc>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, N ) );
   e40b6:	a905      	add	r1, sp, #20
   e40b8:	462a      	mov	r2, r5
   e40ba:	4608      	mov	r0, r1
   e40bc:	f7fd faf5 	bl	e16aa <mbedtls_mpi_mod_mpi>
   e40c0:	4604      	mov	r4, r0
   e40c2:	2800      	cmp	r0, #0
   e40c4:	d192      	bne.n	e3fec <mbedtls_rsa_deduce_primes+0xcc>
        for( iter = 1; iter <= order; ++iter )
   e40c6:	f10a 0a01 	add.w	sl, sl, #1
   e40ca:	fa1f fa8a 	uxth.w	sl, sl
   e40ce:	45d3      	cmp	fp, sl
   e40d0:	d2c5      	bcs.n	e405e <mbedtls_rsa_deduce_primes+0x13e>
        if( mbedtls_mpi_cmp_int( &K, 1 ) != 0 )
   e40d2:	2101      	movs	r1, #1
   e40d4:	a805      	add	r0, sp, #20
   e40d6:	f7fc ff94 	bl	e1002 <mbedtls_mpi_cmp_int>
   e40da:	2800      	cmp	r0, #0
   e40dc:	d0ad      	beq.n	e403a <mbedtls_rsa_deduce_primes+0x11a>
   e40de:	e783      	b.n	e3fe8 <mbedtls_rsa_deduce_primes+0xc8>
                mbedtls_mpi_cmp_mpi( P, N ) == -1 )
   e40e0:	4629      	mov	r1, r5
   e40e2:	4630      	mov	r0, r6
   e40e4:	f7fc ff4c 	bl	e0f80 <mbedtls_mpi_cmp_mpi>
            if( mbedtls_mpi_cmp_int( P, 1 ) ==  1 &&
   e40e8:	3001      	adds	r0, #1
   e40ea:	d1d4      	bne.n	e4096 <mbedtls_rsa_deduce_primes+0x176>
                MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( Q, NULL, N, P ) );
   e40ec:	4621      	mov	r1, r4
   e40ee:	4633      	mov	r3, r6
   e40f0:	462a      	mov	r2, r5
   e40f2:	4640      	mov	r0, r8
   e40f4:	f7fd f912 	bl	e131c <mbedtls_mpi_div_mpi>
   e40f8:	4604      	mov	r4, r0
   e40fa:	e777      	b.n	e3fec <mbedtls_rsa_deduce_primes+0xcc>
   e40fc:	000ed2e0 	.word	0x000ed2e0

000e4100 <mbedtls_rsa_deduce_private_exponent>:
 */
int mbedtls_rsa_deduce_private_exponent( mbedtls_mpi const *P,
                                         mbedtls_mpi const *Q,
                                         mbedtls_mpi const *E,
                                         mbedtls_mpi *D )
{
   e4100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e4104:	4604      	mov	r4, r0
   e4106:	b086      	sub	sp, #24
   e4108:	460f      	mov	r7, r1
   e410a:	4616      	mov	r6, r2
    int ret = 0;
    mbedtls_mpi K, L;

    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
   e410c:	461d      	mov	r5, r3
   e410e:	b92b      	cbnz	r3, e411c <mbedtls_rsa_deduce_private_exponent+0x1c>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
   e4110:	f06f 0403 	mvn.w	r4, #3

    mbedtls_mpi_free( &K );
    mbedtls_mpi_free( &L );

    return( ret );
}
   e4114:	4620      	mov	r0, r4
   e4116:	b006      	add	sp, #24
   e4118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
   e411c:	2100      	movs	r1, #0
   e411e:	4618      	mov	r0, r3
   e4120:	f7fc ff6f 	bl	e1002 <mbedtls_mpi_cmp_int>
   e4124:	4680      	mov	r8, r0
   e4126:	2800      	cmp	r0, #0
   e4128:	d1f2      	bne.n	e4110 <mbedtls_rsa_deduce_private_exponent+0x10>
    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
   e412a:	2101      	movs	r1, #1
   e412c:	4620      	mov	r0, r4
   e412e:	f7fc ff68 	bl	e1002 <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( Q, 1 ) <= 0 ||
   e4132:	2800      	cmp	r0, #0
   e4134:	ddec      	ble.n	e4110 <mbedtls_rsa_deduce_private_exponent+0x10>
   e4136:	2101      	movs	r1, #1
   e4138:	4638      	mov	r0, r7
   e413a:	f7fc ff62 	bl	e1002 <mbedtls_mpi_cmp_int>
    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
   e413e:	2800      	cmp	r0, #0
   e4140:	dde6      	ble.n	e4110 <mbedtls_rsa_deduce_private_exponent+0x10>
        mbedtls_mpi_cmp_int( E, 0 ) == 0 )
   e4142:	4641      	mov	r1, r8
   e4144:	4630      	mov	r0, r6
   e4146:	f7fc ff5c 	bl	e1002 <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( Q, 1 ) <= 0 ||
   e414a:	2800      	cmp	r0, #0
   e414c:	d0e0      	beq.n	e4110 <mbedtls_rsa_deduce_private_exponent+0x10>
    mbedtls_mpi_init( &K );
   e414e:	4668      	mov	r0, sp
   e4150:	f7fc fc37 	bl	e09c2 <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
   e4154:	a803      	add	r0, sp, #12
   e4156:	f7fc fc34 	bl	e09c2 <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1 ) );
   e415a:	4621      	mov	r1, r4
   e415c:	2201      	movs	r2, #1
   e415e:	4668      	mov	r0, sp
   e4160:	f7fd f855 	bl	e120e <mbedtls_mpi_sub_int>
   e4164:	4604      	mov	r4, r0
   e4166:	bb10      	cbnz	r0, e41ae <mbedtls_rsa_deduce_private_exponent+0xae>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
   e4168:	2201      	movs	r2, #1
   e416a:	4639      	mov	r1, r7
   e416c:	a803      	add	r0, sp, #12
   e416e:	f7fd f84e 	bl	e120e <mbedtls_mpi_sub_int>
   e4172:	4604      	mov	r4, r0
   e4174:	b9d8      	cbnz	r0, e41ae <mbedtls_rsa_deduce_private_exponent+0xae>
    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( D, &K, &L ) );
   e4176:	aa03      	add	r2, sp, #12
   e4178:	4669      	mov	r1, sp
   e417a:	4628      	mov	r0, r5
   e417c:	f7fd fcef 	bl	e1b5e <mbedtls_mpi_gcd>
   e4180:	4604      	mov	r4, r0
   e4182:	b9a0      	cbnz	r0, e41ae <mbedtls_rsa_deduce_private_exponent+0xae>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, &K, &L ) );
   e4184:	aa03      	add	r2, sp, #12
   e4186:	4669      	mov	r1, sp
   e4188:	4668      	mov	r0, sp
   e418a:	f7fd f856 	bl	e123a <mbedtls_mpi_mul_mpi>
   e418e:	4604      	mov	r4, r0
   e4190:	b968      	cbnz	r0, e41ae <mbedtls_rsa_deduce_private_exponent+0xae>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( &K, NULL, &K, D ) );
   e4192:	4601      	mov	r1, r0
   e4194:	462b      	mov	r3, r5
   e4196:	466a      	mov	r2, sp
   e4198:	4668      	mov	r0, sp
   e419a:	f7fd f8bf 	bl	e131c <mbedtls_mpi_div_mpi>
   e419e:	4604      	mov	r4, r0
   e41a0:	b928      	cbnz	r0, e41ae <mbedtls_rsa_deduce_private_exponent+0xae>
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( D, E, &K ) );
   e41a2:	466a      	mov	r2, sp
   e41a4:	4631      	mov	r1, r6
   e41a6:	4628      	mov	r0, r5
   e41a8:	f7fd fd93 	bl	e1cd2 <mbedtls_mpi_inv_mod>
   e41ac:	4604      	mov	r4, r0
    mbedtls_mpi_free( &K );
   e41ae:	4668      	mov	r0, sp
   e41b0:	f7fc fc0d 	bl	e09ce <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
   e41b4:	a803      	add	r0, sp, #12
   e41b6:	f7fc fc0a 	bl	e09ce <mbedtls_mpi_free>
    return( ret );
   e41ba:	e7ab      	b.n	e4114 <mbedtls_rsa_deduce_private_exponent+0x14>

000e41bc <mbedtls_rsa_validate_crt>:
 * Check that RSA CRT parameters are in accordance with core parameters.
 */
int mbedtls_rsa_validate_crt( const mbedtls_mpi *P,  const mbedtls_mpi *Q,
                              const mbedtls_mpi *D,  const mbedtls_mpi *DP,
                              const mbedtls_mpi *DQ, const mbedtls_mpi *QP )
{
   e41bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   e41c0:	b087      	sub	sp, #28
   e41c2:	4604      	mov	r4, r0
    int ret = 0;

    mbedtls_mpi K, L;
    mbedtls_mpi_init( &K );
   e41c4:	4668      	mov	r0, sp
{
   e41c6:	4699      	mov	r9, r3
   e41c8:	e9dd 860e 	ldrd	r8, r6, [sp, #56]	; 0x38
   e41cc:	460d      	mov	r5, r1
   e41ce:	4617      	mov	r7, r2
    mbedtls_mpi_init( &K );
   e41d0:	f7fc fbf7 	bl	e09c2 <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
   e41d4:	a803      	add	r0, sp, #12
   e41d6:	f7fc fbf4 	bl	e09c2 <mbedtls_mpi_init>

    /* Check that DP - D == 0 mod P - 1 */
    if( DP != NULL )
   e41da:	f1b9 0f00 	cmp.w	r9, #0
   e41de:	d106      	bne.n	e41ee <mbedtls_rsa_validate_crt+0x32>
            goto cleanup;
        }
    }

    /* Check that DQ - D == 0 mod Q - 1 */
    if( DQ != NULL )
   e41e0:	f1b8 0f00 	cmp.w	r8, #0
   e41e4:	d12c      	bne.n	e4240 <mbedtls_rsa_validate_crt+0x84>
            goto cleanup;
        }
    }

    /* Check that QP * Q - 1 == 0 mod P */
    if( QP != NULL )
   e41e6:	2e00      	cmp	r6, #0
   e41e8:	d145      	bne.n	e4276 <mbedtls_rsa_validate_crt+0xba>
            goto cleanup;
        }

        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, QP, Q ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, P ) );
   e41ea:	2400      	movs	r4, #0
   e41ec:	e001      	b.n	e41f2 <mbedtls_rsa_validate_crt+0x36>
        if( P == NULL )
   e41ee:	b954      	cbnz	r4, e4206 <mbedtls_rsa_validate_crt+0x4a>
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
   e41f0:	4c34      	ldr	r4, [pc, #208]	; (e42c4 <mbedtls_rsa_validate_crt+0x108>)
        ret != MBEDTLS_ERR_RSA_BAD_INPUT_DATA )
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
    }

    mbedtls_mpi_free( &K );
   e41f2:	4668      	mov	r0, sp
   e41f4:	f7fc fbeb 	bl	e09ce <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
   e41f8:	a803      	add	r0, sp, #12
   e41fa:	f7fc fbe8 	bl	e09ce <mbedtls_mpi_free>

    return( ret );
}
   e41fe:	4620      	mov	r0, r4
   e4200:	b007      	add	sp, #28
   e4202:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1 ) );
   e4206:	2201      	movs	r2, #1
   e4208:	4621      	mov	r1, r4
   e420a:	4668      	mov	r0, sp
   e420c:	f7fc ffff 	bl	e120e <mbedtls_mpi_sub_int>
   e4210:	2800      	cmp	r0, #0
   e4212:	d14d      	bne.n	e42b0 <mbedtls_rsa_validate_crt+0xf4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &L, DP, D ) );
   e4214:	463a      	mov	r2, r7
   e4216:	4649      	mov	r1, r9
   e4218:	a803      	add	r0, sp, #12
   e421a:	f7fc ffbf 	bl	e119c <mbedtls_mpi_sub_mpi>
   e421e:	2800      	cmp	r0, #0
   e4220:	d146      	bne.n	e42b0 <mbedtls_rsa_validate_crt+0xf4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &L, &L, &K ) );
   e4222:	a903      	add	r1, sp, #12
   e4224:	466a      	mov	r2, sp
   e4226:	4608      	mov	r0, r1
   e4228:	f7fd fa3f 	bl	e16aa <mbedtls_mpi_mod_mpi>
   e422c:	2800      	cmp	r0, #0
   e422e:	d13f      	bne.n	e42b0 <mbedtls_rsa_validate_crt+0xf4>
        if( mbedtls_mpi_cmp_int( &L, 0 ) != 0 )
   e4230:	4601      	mov	r1, r0
   e4232:	a803      	add	r0, sp, #12
   e4234:	f7fc fee5 	bl	e1002 <mbedtls_mpi_cmp_int>
   e4238:	2800      	cmp	r0, #0
   e423a:	d0d1      	beq.n	e41e0 <mbedtls_rsa_validate_crt+0x24>
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
   e423c:	4c22      	ldr	r4, [pc, #136]	; (e42c8 <mbedtls_rsa_validate_crt+0x10c>)
   e423e:	e7d8      	b.n	e41f2 <mbedtls_rsa_validate_crt+0x36>
        if( Q == NULL )
   e4240:	2d00      	cmp	r5, #0
   e4242:	d0d5      	beq.n	e41f0 <mbedtls_rsa_validate_crt+0x34>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1 ) );
   e4244:	2201      	movs	r2, #1
   e4246:	4629      	mov	r1, r5
   e4248:	4668      	mov	r0, sp
   e424a:	f7fc ffe0 	bl	e120e <mbedtls_mpi_sub_int>
   e424e:	bb78      	cbnz	r0, e42b0 <mbedtls_rsa_validate_crt+0xf4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &L, DQ, D ) );
   e4250:	463a      	mov	r2, r7
   e4252:	4641      	mov	r1, r8
   e4254:	a803      	add	r0, sp, #12
   e4256:	f7fc ffa1 	bl	e119c <mbedtls_mpi_sub_mpi>
   e425a:	bb48      	cbnz	r0, e42b0 <mbedtls_rsa_validate_crt+0xf4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &L, &L, &K ) );
   e425c:	a903      	add	r1, sp, #12
   e425e:	466a      	mov	r2, sp
   e4260:	4608      	mov	r0, r1
   e4262:	f7fd fa22 	bl	e16aa <mbedtls_mpi_mod_mpi>
   e4266:	bb18      	cbnz	r0, e42b0 <mbedtls_rsa_validate_crt+0xf4>
        if( mbedtls_mpi_cmp_int( &L, 0 ) != 0 )
   e4268:	4601      	mov	r1, r0
   e426a:	a803      	add	r0, sp, #12
   e426c:	f7fc fec9 	bl	e1002 <mbedtls_mpi_cmp_int>
   e4270:	2800      	cmp	r0, #0
   e4272:	d0b8      	beq.n	e41e6 <mbedtls_rsa_validate_crt+0x2a>
   e4274:	e7e2      	b.n	e423c <mbedtls_rsa_validate_crt+0x80>
        if( P == NULL || Q == NULL )
   e4276:	2c00      	cmp	r4, #0
   e4278:	d0ba      	beq.n	e41f0 <mbedtls_rsa_validate_crt+0x34>
   e427a:	2d00      	cmp	r5, #0
   e427c:	d0b8      	beq.n	e41f0 <mbedtls_rsa_validate_crt+0x34>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, QP, Q ) );
   e427e:	462a      	mov	r2, r5
   e4280:	4631      	mov	r1, r6
   e4282:	4668      	mov	r0, sp
   e4284:	f7fc ffd9 	bl	e123a <mbedtls_mpi_mul_mpi>
   e4288:	b990      	cbnz	r0, e42b0 <mbedtls_rsa_validate_crt+0xf4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
   e428a:	2201      	movs	r2, #1
   e428c:	4669      	mov	r1, sp
   e428e:	4668      	mov	r0, sp
   e4290:	f7fc ffbd 	bl	e120e <mbedtls_mpi_sub_int>
   e4294:	b960      	cbnz	r0, e42b0 <mbedtls_rsa_validate_crt+0xf4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, P ) );
   e4296:	4622      	mov	r2, r4
   e4298:	4669      	mov	r1, sp
   e429a:	4668      	mov	r0, sp
   e429c:	f7fd fa05 	bl	e16aa <mbedtls_mpi_mod_mpi>
   e42a0:	b930      	cbnz	r0, e42b0 <mbedtls_rsa_validate_crt+0xf4>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
   e42a2:	4601      	mov	r1, r0
   e42a4:	4668      	mov	r0, sp
   e42a6:	f7fc feac 	bl	e1002 <mbedtls_mpi_cmp_int>
   e42aa:	2800      	cmp	r0, #0
   e42ac:	d09d      	beq.n	e41ea <mbedtls_rsa_validate_crt+0x2e>
   e42ae:	e7c5      	b.n	e423c <mbedtls_rsa_validate_crt+0x80>
    if( ret != 0 &&
   e42b0:	f510 4f84 	cmn.w	r0, #16896	; 0x4200
   e42b4:	d0c2      	beq.n	e423c <mbedtls_rsa_validate_crt+0x80>
        ret != MBEDTLS_ERR_RSA_KEY_CHECK_FAILED &&
   e42b6:	f510 4f81 	cmn.w	r0, #16512	; 0x4080
   e42ba:	d099      	beq.n	e41f0 <mbedtls_rsa_validate_crt+0x34>
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
   e42bc:	f5a0 4484 	sub.w	r4, r0, #16896	; 0x4200
   e42c0:	e797      	b.n	e41f2 <mbedtls_rsa_validate_crt+0x36>
   e42c2:	bf00      	nop
   e42c4:	ffffbf80 	.word	0xffffbf80
   e42c8:	ffffbe00 	.word	0xffffbe00

000e42cc <mbedtls_rsa_validate_params>:
int mbedtls_rsa_validate_params( const mbedtls_mpi *N, const mbedtls_mpi *P,
                                 const mbedtls_mpi *Q, const mbedtls_mpi *D,
                                 const mbedtls_mpi *E,
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng )
{
   e42cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   e42d0:	b087      	sub	sp, #28
   e42d2:	4681      	mov	r9, r0
    int ret = 0;
    mbedtls_mpi K, L;

    mbedtls_mpi_init( &K );
   e42d4:	4668      	mov	r0, sp
{
   e42d6:	4688      	mov	r8, r1
   e42d8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   e42da:	4615      	mov	r5, r2
   e42dc:	461e      	mov	r6, r3
    mbedtls_mpi_init( &K );
   e42de:	f7fc fb70 	bl	e09c2 <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
   e42e2:	a803      	add	r0, sp, #12
   e42e4:	f7fc fb6d 	bl	e09c2 <mbedtls_mpi_init>

    /*
     * Step 2: Check that 1 < N = P * Q
     */

    if( P != NULL && Q != NULL && N != NULL )
   e42e8:	f1b8 0f00 	cmp.w	r8, #0
   e42ec:	d077      	beq.n	e43de <mbedtls_rsa_validate_params+0x112>
   e42ee:	2d00      	cmp	r5, #0
   e42f0:	f000 80a9 	beq.w	e4446 <mbedtls_rsa_validate_params+0x17a>
   e42f4:	f1b9 0f00 	cmp.w	r9, #0
   e42f8:	d15d      	bne.n	e43b6 <mbedtls_rsa_validate_params+0xea>

    /*
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
   e42fa:	2e00      	cmp	r6, #0
   e42fc:	f000 8092 	beq.w	e4424 <mbedtls_rsa_validate_params+0x158>
   e4300:	2f00      	cmp	r7, #0
   e4302:	f000 808f 	beq.w	e4424 <mbedtls_rsa_validate_params+0x158>
    {
        if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
   e4306:	2101      	movs	r1, #1
   e4308:	4640      	mov	r0, r8
   e430a:	f7fc fe7a 	bl	e1002 <mbedtls_mpi_cmp_int>
   e430e:	2800      	cmp	r0, #0
   e4310:	dd63      	ble.n	e43da <mbedtls_rsa_validate_params+0x10e>
            mbedtls_mpi_cmp_int( Q, 1 ) <= 0 )
   e4312:	2101      	movs	r1, #1
   e4314:	4628      	mov	r0, r5
   e4316:	f7fc fe74 	bl	e1002 <mbedtls_mpi_cmp_int>
        if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
   e431a:	2800      	cmp	r0, #0
   e431c:	dd5d      	ble.n	e43da <mbedtls_rsa_validate_params+0x10e>
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
            goto cleanup;
        }

        /* Compute DE-1 mod P-1 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, D, E ) );
   e431e:	463a      	mov	r2, r7
   e4320:	4631      	mov	r1, r6
   e4322:	4668      	mov	r0, sp
   e4324:	f7fc ff89 	bl	e123a <mbedtls_mpi_mul_mpi>
   e4328:	4604      	mov	r4, r0
   e432a:	2800      	cmp	r0, #0
   e432c:	d17b      	bne.n	e4426 <mbedtls_rsa_validate_params+0x15a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
   e432e:	2201      	movs	r2, #1
   e4330:	4669      	mov	r1, sp
   e4332:	4668      	mov	r0, sp
   e4334:	f7fc ff6b 	bl	e120e <mbedtls_mpi_sub_int>
   e4338:	4604      	mov	r4, r0
   e433a:	2800      	cmp	r0, #0
   e433c:	d173      	bne.n	e4426 <mbedtls_rsa_validate_params+0x15a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, P, 1 ) );
   e433e:	2201      	movs	r2, #1
   e4340:	4641      	mov	r1, r8
   e4342:	a803      	add	r0, sp, #12
   e4344:	f7fc ff63 	bl	e120e <mbedtls_mpi_sub_int>
   e4348:	4604      	mov	r4, r0
   e434a:	2800      	cmp	r0, #0
   e434c:	d16b      	bne.n	e4426 <mbedtls_rsa_validate_params+0x15a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
   e434e:	aa03      	add	r2, sp, #12
   e4350:	4669      	mov	r1, sp
   e4352:	4668      	mov	r0, sp
   e4354:	f7fd f9a9 	bl	e16aa <mbedtls_mpi_mod_mpi>
   e4358:	4604      	mov	r4, r0
   e435a:	2800      	cmp	r0, #0
   e435c:	d163      	bne.n	e4426 <mbedtls_rsa_validate_params+0x15a>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
   e435e:	4601      	mov	r1, r0
   e4360:	4668      	mov	r0, sp
   e4362:	f7fc fe4e 	bl	e1002 <mbedtls_mpi_cmp_int>
   e4366:	2800      	cmp	r0, #0
   e4368:	d137      	bne.n	e43da <mbedtls_rsa_validate_params+0x10e>
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
            goto cleanup;
        }

        /* Compute DE-1 mod Q-1 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, D, E ) );
   e436a:	463a      	mov	r2, r7
   e436c:	4631      	mov	r1, r6
   e436e:	4668      	mov	r0, sp
   e4370:	f7fc ff63 	bl	e123a <mbedtls_mpi_mul_mpi>
   e4374:	4604      	mov	r4, r0
   e4376:	2800      	cmp	r0, #0
   e4378:	d155      	bne.n	e4426 <mbedtls_rsa_validate_params+0x15a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
   e437a:	2201      	movs	r2, #1
   e437c:	4669      	mov	r1, sp
   e437e:	4668      	mov	r0, sp
   e4380:	f7fc ff45 	bl	e120e <mbedtls_mpi_sub_int>
   e4384:	4604      	mov	r4, r0
   e4386:	2800      	cmp	r0, #0
   e4388:	d14d      	bne.n	e4426 <mbedtls_rsa_validate_params+0x15a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
   e438a:	2201      	movs	r2, #1
   e438c:	4629      	mov	r1, r5
   e438e:	a803      	add	r0, sp, #12
   e4390:	f7fc ff3d 	bl	e120e <mbedtls_mpi_sub_int>
   e4394:	4604      	mov	r4, r0
   e4396:	2800      	cmp	r0, #0
   e4398:	d145      	bne.n	e4426 <mbedtls_rsa_validate_params+0x15a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
   e439a:	aa03      	add	r2, sp, #12
   e439c:	4669      	mov	r1, sp
   e439e:	4668      	mov	r0, sp
   e43a0:	f7fd f983 	bl	e16aa <mbedtls_mpi_mod_mpi>
   e43a4:	4604      	mov	r4, r0
   e43a6:	2800      	cmp	r0, #0
   e43a8:	d13d      	bne.n	e4426 <mbedtls_rsa_validate_params+0x15a>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
   e43aa:	4601      	mov	r1, r0
   e43ac:	4668      	mov	r0, sp
   e43ae:	f7fc fe28 	bl	e1002 <mbedtls_mpi_cmp_int>
   e43b2:	b3b8      	cbz	r0, e4424 <mbedtls_rsa_validate_params+0x158>
   e43b4:	e011      	b.n	e43da <mbedtls_rsa_validate_params+0x10e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, P, Q ) );
   e43b6:	462a      	mov	r2, r5
   e43b8:	4641      	mov	r1, r8
   e43ba:	4668      	mov	r0, sp
   e43bc:	f7fc ff3d 	bl	e123a <mbedtls_mpi_mul_mpi>
   e43c0:	4604      	mov	r4, r0
   e43c2:	bb80      	cbnz	r0, e4426 <mbedtls_rsa_validate_params+0x15a>
        if( mbedtls_mpi_cmp_int( N, 1 )  <= 0 ||
   e43c4:	2101      	movs	r1, #1
   e43c6:	4648      	mov	r0, r9
   e43c8:	f7fc fe1b 	bl	e1002 <mbedtls_mpi_cmp_int>
   e43cc:	2800      	cmp	r0, #0
   e43ce:	dd04      	ble.n	e43da <mbedtls_rsa_validate_params+0x10e>
            mbedtls_mpi_cmp_mpi( &K, N ) != 0 )
   e43d0:	4649      	mov	r1, r9
   e43d2:	4668      	mov	r0, sp
   e43d4:	f7fc fdd4 	bl	e0f80 <mbedtls_mpi_cmp_mpi>
        if( mbedtls_mpi_cmp_int( N, 1 )  <= 0 ||
   e43d8:	b3c0      	cbz	r0, e444c <mbedtls_rsa_validate_params+0x180>
        {
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
   e43da:	4c1e      	ldr	r4, [pc, #120]	; (e4454 <mbedtls_rsa_validate_params+0x188>)
            goto cleanup;
   e43dc:	e023      	b.n	e4426 <mbedtls_rsa_validate_params+0x15a>
    if( N != NULL && D != NULL && E != NULL )
   e43de:	f1b9 0f00 	cmp.w	r9, #0
   e43e2:	d01f      	beq.n	e4424 <mbedtls_rsa_validate_params+0x158>
   e43e4:	b1f6      	cbz	r6, e4424 <mbedtls_rsa_validate_params+0x158>
   e43e6:	b1bf      	cbz	r7, e4418 <mbedtls_rsa_validate_params+0x14c>
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
   e43e8:	2101      	movs	r1, #1
   e43ea:	4630      	mov	r0, r6
   e43ec:	f7fc fe09 	bl	e1002 <mbedtls_mpi_cmp_int>
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
   e43f0:	2800      	cmp	r0, #0
   e43f2:	ddf2      	ble.n	e43da <mbedtls_rsa_validate_params+0x10e>
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
   e43f4:	2101      	movs	r1, #1
   e43f6:	4638      	mov	r0, r7
   e43f8:	f7fc fe03 	bl	e1002 <mbedtls_mpi_cmp_int>
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
   e43fc:	2800      	cmp	r0, #0
   e43fe:	ddec      	ble.n	e43da <mbedtls_rsa_validate_params+0x10e>
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
   e4400:	4649      	mov	r1, r9
   e4402:	4630      	mov	r0, r6
   e4404:	f7fc fdbc 	bl	e0f80 <mbedtls_mpi_cmp_mpi>
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
   e4408:	2800      	cmp	r0, #0
   e440a:	dae6      	bge.n	e43da <mbedtls_rsa_validate_params+0x10e>
             mbedtls_mpi_cmp_mpi( E, N ) >= 0 )
   e440c:	4649      	mov	r1, r9
   e440e:	4638      	mov	r0, r7
   e4410:	f7fc fdb6 	bl	e0f80 <mbedtls_mpi_cmp_mpi>
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
   e4414:	2800      	cmp	r0, #0
   e4416:	dae0      	bge.n	e43da <mbedtls_rsa_validate_params+0x10e>
    if( P != NULL && Q != NULL && D != NULL && E != NULL )
   e4418:	f1b8 0f00 	cmp.w	r8, #0
   e441c:	d002      	beq.n	e4424 <mbedtls_rsa_validate_params+0x158>
   e441e:	2d00      	cmp	r5, #0
   e4420:	f47f af6b 	bne.w	e42fa <mbedtls_rsa_validate_params+0x2e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
   e4424:	2400      	movs	r4, #0
        }
    }

cleanup:

    mbedtls_mpi_free( &K );
   e4426:	4668      	mov	r0, sp
   e4428:	f7fc fad1 	bl	e09ce <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
   e442c:	a803      	add	r0, sp, #12
   e442e:	f7fc face 	bl	e09ce <mbedtls_mpi_free>

    /* Wrap MPI error codes by RSA check failure error code */
    if( ret != 0 && ret != MBEDTLS_ERR_RSA_KEY_CHECK_FAILED )
   e4432:	b124      	cbz	r4, e443e <mbedtls_rsa_validate_params+0x172>
   e4434:	f514 4f84 	cmn.w	r4, #16896	; 0x4200
   e4438:	d001      	beq.n	e443e <mbedtls_rsa_validate_params+0x172>
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
   e443a:	f5a4 4484 	sub.w	r4, r4, #16896	; 0x4200
    }

    return( ret );
}
   e443e:	4620      	mov	r0, r4
   e4440:	b007      	add	sp, #28
   e4442:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( N != NULL && D != NULL && E != NULL )
   e4446:	f1b9 0f00 	cmp.w	r9, #0
   e444a:	d0eb      	beq.n	e4424 <mbedtls_rsa_validate_params+0x158>
   e444c:	2e00      	cmp	r6, #0
   e444e:	d1ca      	bne.n	e43e6 <mbedtls_rsa_validate_params+0x11a>
   e4450:	e7e5      	b.n	e441e <mbedtls_rsa_validate_params+0x152>
   e4452:	bf00      	nop
   e4454:	ffffbe00 	.word	0xffffbe00

000e4458 <mbedtls_rsa_deduce_crt>:

int mbedtls_rsa_deduce_crt( const mbedtls_mpi *P, const mbedtls_mpi *Q,
                            const mbedtls_mpi *D, mbedtls_mpi *DP,
                            mbedtls_mpi *DQ, mbedtls_mpi *QP )
{
   e4458:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   e445c:	4606      	mov	r6, r0
   e445e:	469a      	mov	sl, r3
    int ret = 0;
    mbedtls_mpi K;
    mbedtls_mpi_init( &K );
   e4460:	a801      	add	r0, sp, #4
{
   e4462:	e9dd 980c 	ldrd	r9, r8, [sp, #48]	; 0x30
   e4466:	460d      	mov	r5, r1
   e4468:	4617      	mov	r7, r2
    mbedtls_mpi_init( &K );
   e446a:	f7fc faaa 	bl	e09c2 <mbedtls_mpi_init>

    /* DP = D mod P-1 */
    if( DP != NULL )
   e446e:	f1ba 0f00 	cmp.w	sl, #0
   e4472:	d107      	bne.n	e4484 <mbedtls_rsa_deduce_crt+0x2c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1  ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DP, D, &K ) );
    }

    /* DQ = D mod Q-1 */
    if( DQ != NULL )
   e4474:	f1b9 0f00 	cmp.w	r9, #0
   e4478:	d11a      	bne.n	e44b0 <mbedtls_rsa_deduce_crt+0x58>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1  ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DQ, D, &K ) );
    }

    /* QP = Q^{-1} mod P */
    if( QP != NULL )
   e447a:	f1b8 0f00 	cmp.w	r8, #0
   e447e:	d128      	bne.n	e44d2 <mbedtls_rsa_deduce_crt+0x7a>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( QP, Q, P ) );
    }

cleanup:
   e4480:	4644      	mov	r4, r8
   e4482:	e00e      	b.n	e44a2 <mbedtls_rsa_deduce_crt+0x4a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1  ) );
   e4484:	2201      	movs	r2, #1
   e4486:	4631      	mov	r1, r6
   e4488:	a801      	add	r0, sp, #4
   e448a:	f7fc fec0 	bl	e120e <mbedtls_mpi_sub_int>
   e448e:	4604      	mov	r4, r0
   e4490:	b938      	cbnz	r0, e44a2 <mbedtls_rsa_deduce_crt+0x4a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DP, D, &K ) );
   e4492:	aa01      	add	r2, sp, #4
   e4494:	4639      	mov	r1, r7
   e4496:	4650      	mov	r0, sl
   e4498:	f7fd f907 	bl	e16aa <mbedtls_mpi_mod_mpi>
   e449c:	4604      	mov	r4, r0
   e449e:	2800      	cmp	r0, #0
   e44a0:	d0e8      	beq.n	e4474 <mbedtls_rsa_deduce_crt+0x1c>
    mbedtls_mpi_free( &K );
   e44a2:	a801      	add	r0, sp, #4
   e44a4:	f7fc fa93 	bl	e09ce <mbedtls_mpi_free>

    return( ret );
}
   e44a8:	4620      	mov	r0, r4
   e44aa:	b004      	add	sp, #16
   e44ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1  ) );
   e44b0:	2201      	movs	r2, #1
   e44b2:	4629      	mov	r1, r5
   e44b4:	a801      	add	r0, sp, #4
   e44b6:	f7fc feaa 	bl	e120e <mbedtls_mpi_sub_int>
   e44ba:	4604      	mov	r4, r0
   e44bc:	2800      	cmp	r0, #0
   e44be:	d1f0      	bne.n	e44a2 <mbedtls_rsa_deduce_crt+0x4a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DQ, D, &K ) );
   e44c0:	aa01      	add	r2, sp, #4
   e44c2:	4639      	mov	r1, r7
   e44c4:	4648      	mov	r0, r9
   e44c6:	f7fd f8f0 	bl	e16aa <mbedtls_mpi_mod_mpi>
   e44ca:	4604      	mov	r4, r0
   e44cc:	2800      	cmp	r0, #0
   e44ce:	d0d4      	beq.n	e447a <mbedtls_rsa_deduce_crt+0x22>
   e44d0:	e7e7      	b.n	e44a2 <mbedtls_rsa_deduce_crt+0x4a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( QP, Q, P ) );
   e44d2:	4632      	mov	r2, r6
   e44d4:	4629      	mov	r1, r5
   e44d6:	4640      	mov	r0, r8
   e44d8:	f7fd fbfb 	bl	e1cd2 <mbedtls_mpi_inv_mod>
   e44dc:	4604      	mov	r4, r0
   e44de:	e7e0      	b.n	e44a2 <mbedtls_rsa_deduce_crt+0x4a>

000e44e0 <mbedtls_ssl_own_key>:
    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
   e44e0:	6b02      	ldr	r2, [r0, #48]	; 0x30
{
   e44e2:	4603      	mov	r3, r0
    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
   e44e4:	b112      	cbz	r2, e44ec <mbedtls_ssl_own_key+0xc>
   e44e6:	f8d2 0144 	ldr.w	r0, [r2, #324]	; 0x144
   e44ea:	b910      	cbnz	r0, e44f2 <mbedtls_ssl_own_key+0x12>
        key_cert = ssl->conf->key_cert;
   e44ec:	681b      	ldr	r3, [r3, #0]
   e44ee:	6d18      	ldr	r0, [r3, #80]	; 0x50
    return( key_cert == NULL ? NULL : key_cert->key );
   e44f0:	b100      	cbz	r0, e44f4 <mbedtls_ssl_own_key+0x14>
   e44f2:	6840      	ldr	r0, [r0, #4]
}
   e44f4:	4770      	bx	lr
	...

000e44f8 <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj>:
 * Generate a pre-master secret and encrypt it with the server's RSA key
 */
static int ssl_write_encrypted_pms( mbedtls_ssl_context *ssl,
                                    size_t offset, size_t *olen,
                                    size_t pms_offset )
{
   e44f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e44fc:	4615      	mov	r5, r2
    int ret;
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
   e44fe:	68c2      	ldr	r2, [r0, #12]
   e4500:	2a00      	cmp	r2, #0
   e4502:	bf0c      	ite	eq
   e4504:	f04f 0800 	moveq.w	r8, #0
   e4508:	f04f 0802 	movne.w	r8, #2
    unsigned char *p = ssl->handshake->premaster + pms_offset;
   e450c:	6b02      	ldr	r2, [r0, #48]	; 0x30

    if( offset + len_bytes > MBEDTLS_SSL_OUT_CONTENT_LEN )
   e450e:	eb08 0901 	add.w	r9, r8, r1
    unsigned char *p = ssl->handshake->premaster + pms_offset;
   e4512:	f502 723d 	add.w	r2, r2, #756	; 0x2f4
    if( offset + len_bytes > MBEDTLS_SSL_OUT_CONTENT_LEN )
   e4516:	f5b9 5f00 	cmp.w	r9, #8192	; 0x2000
{
   e451a:	b086      	sub	sp, #24
   e451c:	4604      	mov	r4, r0
   e451e:	460f      	mov	r7, r1
    unsigned char *p = ssl->handshake->premaster + pms_offset;
   e4520:	eb02 0603 	add.w	r6, r2, r3
    if( offset + len_bytes > MBEDTLS_SSL_OUT_CONTENT_LEN )
   e4524:	d84c      	bhi.n	e45c0 <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xc8>
     *  struct {
     *      ProtocolVersion client_version;
     *      opaque random[46];
     *  } PreMasterSecret;
     */
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
   e4526:	6800      	ldr	r0, [r0, #0]
                       ssl->conf->transport, p );
   e4528:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
   e452c:	f890 1079 	ldrb.w	r1, [r0, #121]	; 0x79
   e4530:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
   e4534:	4633      	mov	r3, r6
   e4536:	f3c2 0240 	ubfx	r2, r2, #1, #1
   e453a:	f7fc f8ef 	bl	e071c <mbedtls_ssl_write_version>

    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p + 2, 46 ) ) != 0 )
   e453e:	6823      	ldr	r3, [r4, #0]
   e4540:	222e      	movs	r2, #46	; 0x2e
   e4542:	f8d3 a018 	ldr.w	sl, [r3, #24]
   e4546:	69d8      	ldr	r0, [r3, #28]
   e4548:	1cb1      	adds	r1, r6, #2
   e454a:	47d0      	blx	sl
   e454c:	2800      	cmp	r0, #0
   e454e:	d134      	bne.n	e45ba <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xc2>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "f_rng", ret );
        return( ret );
    }

    ssl->handshake->pmslen = 48;
   e4550:	6b23      	ldr	r3, [r4, #48]	; 0x30
   e4552:	2230      	movs	r2, #48	; 0x30
   e4554:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0

    if( ssl->session_negotiate->peer_cert == NULL )
   e4558:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e455a:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
   e455c:	2800      	cmp	r0, #0
   e455e:	d031      	beq.n	e45c4 <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xcc>
    }

    /*
     * Now write it out, encrypted
     */
    if( ! mbedtls_pk_can_do( &ssl->session_negotiate->peer_cert->pk,
   e4560:	2101      	movs	r1, #1
   e4562:	30bc      	adds	r0, #188	; 0xbc
   e4564:	f7fa fa9e 	bl	deaa4 <mbedtls_pk_can_do>
   e4568:	b370      	cbz	r0, e45c8 <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xd0>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate key type mismatch" ) );
        return( MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH );
    }

    if( ( ret = mbedtls_pk_encrypt( &ssl->session_negotiate->peer_cert->pk,
   e456a:	e9d4 010b 	ldrd	r0, r1, [r4, #44]	; 0x2c
                            p, ssl->handshake->pmslen,
                            ssl->out_msg + offset + len_bytes, olen,
                            MBEDTLS_SSL_OUT_CONTENT_LEN - offset - len_bytes,
                            ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
   e456e:	6822      	ldr	r2, [r4, #0]
    if( ( ret = mbedtls_pk_encrypt( &ssl->session_negotiate->peer_cert->pk,
   e4570:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   e4574:	9305      	str	r3, [sp, #20]
   e4576:	69d3      	ldr	r3, [r2, #28]
   e4578:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   e457a:	9303      	str	r3, [sp, #12]
   e457c:	6992      	ldr	r2, [r2, #24]
   e457e:	9202      	str	r2, [sp, #8]
   e4580:	f5c9 5200 	rsb	r2, r9, #8192	; 0x2000
   e4584:	e9cd 5200 	strd	r5, r2, [sp]
   e4588:	9b05      	ldr	r3, [sp, #20]
   e458a:	f8d1 22b0 	ldr.w	r2, [r1, #688]	; 0x2b0
   e458e:	444b      	add	r3, r9
   e4590:	4631      	mov	r1, r6
   e4592:	30bc      	adds	r0, #188	; 0xbc
   e4594:	f7fa faf2 	bl	deb7c <mbedtls_pk_encrypt>
   e4598:	b978      	cbnz	r0, e45ba <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xc2>
        return( ret );
    }

#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
    if( len_bytes == 2 )
   e459a:	f1b8 0f00 	cmp.w	r8, #0
   e459e:	d00c      	beq.n	e45ba <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xc2>
    {
        ssl->out_msg[offset+0] = (unsigned char)( *olen >> 8 );
   e45a0:	682b      	ldr	r3, [r5, #0]
   e45a2:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   e45a6:	0a1b      	lsrs	r3, r3, #8
   e45a8:	55d3      	strb	r3, [r2, r7]
        ssl->out_msg[offset+1] = (unsigned char)( *olen      );
   e45aa:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
   e45ae:	682b      	ldr	r3, [r5, #0]
   e45b0:	440f      	add	r7, r1
   e45b2:	707b      	strb	r3, [r7, #1]
        *olen += 2;
   e45b4:	682b      	ldr	r3, [r5, #0]
   e45b6:	3302      	adds	r3, #2
   e45b8:	602b      	str	r3, [r5, #0]
    }
#endif

    return( 0 );
}
   e45ba:	b006      	add	sp, #24
   e45bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return( MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL );
   e45c0:	4802      	ldr	r0, [pc, #8]	; (e45cc <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xd4>)
   e45c2:	e7fa      	b.n	e45ba <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xc2>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
   e45c4:	4802      	ldr	r0, [pc, #8]	; (e45d0 <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xd8>)
   e45c6:	e7f8      	b.n	e45ba <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xc2>
        return( MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH );
   e45c8:	4802      	ldr	r0, [pc, #8]	; (e45d4 <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xdc>)
   e45ca:	e7f6      	b.n	e45ba <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xc2>
   e45cc:	ffff9600 	.word	0xffff9600
   e45d0:	ffff8900 	.word	0xffff8900
   e45d4:	ffff9300 	.word	0xffff9300

000e45d8 <mbedtls_ssl_handshake_client_step>:

/*
 * SSL handshake -- client side -- single step
 */
int mbedtls_ssl_handshake_client_step( mbedtls_ssl_context *ssl )
{
   e45d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret = 0;

    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER || ssl->handshake == NULL )
   e45dc:	6843      	ldr	r3, [r0, #4]
   e45de:	2b10      	cmp	r3, #16
{
   e45e0:	b09d      	sub	sp, #116	; 0x74
   e45e2:	4604      	mov	r4, r0
    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER || ssl->handshake == NULL )
   e45e4:	d101      	bne.n	e45ea <mbedtls_ssl_handshake_client_step+0x12>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   e45e6:	4dbd      	ldr	r5, [pc, #756]	; (e48dc <mbedtls_ssl_handshake_client_step+0x304>)
   e45e8:	e05b      	b.n	e46a2 <mbedtls_ssl_handshake_client_step+0xca>
    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER || ssl->handshake == NULL )
   e45ea:	6b03      	ldr	r3, [r0, #48]	; 0x30
   e45ec:	2b00      	cmp	r3, #0
   e45ee:	d0fa      	beq.n	e45e6 <mbedtls_ssl_handshake_client_step+0xe>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "client state: %d", ssl->state ) );

    if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
   e45f0:	f7fa ff0e 	bl	df410 <mbedtls_ssl_flush_output>
   e45f4:	4605      	mov	r5, r0
   e45f6:	2800      	cmp	r0, #0
   e45f8:	d153      	bne.n	e46a2 <mbedtls_ssl_handshake_client_step+0xca>
#endif /* MBEDTLS_SSL_PROTO_DTLS */

    /* Change state now, so that it is right in mbedtls_ssl_read_record(), used
     * by DTLS for dropping out-of-sequence ChangeCipherSpec records */
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
    if( ssl->state == MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC &&
   e45fa:	6863      	ldr	r3, [r4, #4]
   e45fc:	2b0c      	cmp	r3, #12
   e45fe:	d124      	bne.n	e464a <mbedtls_ssl_handshake_client_step+0x72>
        ssl->handshake->new_session_ticket != 0 )
   e4600:	6b23      	ldr	r3, [r4, #48]	; 0x30
    if( ssl->state == MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC &&
   e4602:	f8d3 3358 	ldr.w	r3, [r3, #856]	; 0x358
   e4606:	2b00      	cmp	r3, #0
   e4608:	f000 864c 	beq.w	e52a4 <mbedtls_ssl_handshake_client_step+0xccc>
    {
        ssl->state = MBEDTLS_SSL_SERVER_NEW_SESSION_TICKET;
   e460c:	2311      	movs	r3, #17
   e460e:	6063      	str	r3, [r4, #4]
    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   e4610:	2101      	movs	r1, #1
   e4612:	4620      	mov	r0, r4
   e4614:	f7fb f8c8 	bl	df7a8 <mbedtls_ssl_read_record>
   e4618:	4606      	mov	r6, r0
   e461a:	2800      	cmp	r0, #0
   e461c:	f040 842a 	bne.w	e4e74 <mbedtls_ssl_handshake_client_step+0x89c>
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
   e4620:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   e4622:	2b16      	cmp	r3, #22
   e4624:	f040 824c 	bne.w	e4ac0 <mbedtls_ssl_handshake_client_step+0x4e8>
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_NEW_SESSION_TICKET ||
   e4628:	f8d4 8064 	ldr.w	r8, [r4, #100]	; 0x64
   e462c:	f898 3000 	ldrb.w	r3, [r8]
   e4630:	2b04      	cmp	r3, #4
   e4632:	d103      	bne.n	e463c <mbedtls_ssl_handshake_client_step+0x64>
        ssl->in_hslen < 6 + mbedtls_ssl_hs_hdr_len( ssl ) )
   e4634:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_NEW_SESSION_TICKET ||
   e4636:	2b09      	cmp	r3, #9
   e4638:	f200 85f3 	bhi.w	e5222 <mbedtls_ssl_handshake_client_step+0xc4a>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   e463c:	2232      	movs	r2, #50	; 0x32
   e463e:	2102      	movs	r1, #2
   e4640:	4620      	mov	r0, r4
   e4642:	f7fb f897 	bl	df774 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_NEW_SESSION_TICKET );
   e4646:	4da6      	ldr	r5, [pc, #664]	; (e48e0 <mbedtls_ssl_handshake_client_step+0x308>)
   e4648:	e02b      	b.n	e46a2 <mbedtls_ssl_handshake_client_step+0xca>
    }
#endif

    switch( ssl->state )
   e464a:	2b11      	cmp	r3, #17
   e464c:	d8cb      	bhi.n	e45e6 <mbedtls_ssl_handshake_client_step+0xe>
   e464e:	a201      	add	r2, pc, #4	; (adr r2, e4654 <mbedtls_ssl_handshake_client_step+0x7c>)
   e4650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   e4654:	000e469d 	.word	0x000e469d
   e4658:	000e46ab 	.word	0x000e46ab
   e465c:	000e4aa9 	.word	0x000e4aa9
   e4660:	000e4d5f 	.word	0x000e4d5f
   e4664:	000e4d69 	.word	0x000e4d69
   e4668:	000e4f17 	.word	0x000e4f17
   e466c:	000e4fb3 	.word	0x000e4fb3
   e4670:	000e4feb 	.word	0x000e4feb
   e4674:	000e4ff3 	.word	0x000e4ff3
   e4678:	000e5127 	.word	0x000e5127
   e467c:	000e5213 	.word	0x000e5213
   e4680:	000e521b 	.word	0x000e521b
   e4684:	000e45e7 	.word	0x000e45e7
   e4688:	000e52ad 	.word	0x000e52ad
   e468c:	000e52b5 	.word	0x000e52b5
   e4690:	000e52b9 	.word	0x000e52b9
   e4694:	000e45e7 	.word	0x000e45e7
   e4698:	000e4611 	.word	0x000e4611
    {
        case MBEDTLS_SSL_HELLO_REQUEST:
            ssl->state = MBEDTLS_SSL_CLIENT_HELLO;
   e469c:	2201      	movs	r2, #1
   e469e:	6062      	str	r2, [r4, #4]
    if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
   e46a0:	461d      	mov	r5, r3
           MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid state %d", ssl->state ) );
           return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   }

    return( ret );
}
   e46a2:	4628      	mov	r0, r5
   e46a4:	b01d      	add	sp, #116	; 0x74
   e46a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( ssl->conf->f_rng == NULL )
   e46aa:	6821      	ldr	r1, [r4, #0]
   e46ac:	698b      	ldr	r3, [r1, #24]
   e46ae:	2b00      	cmp	r3, #0
   e46b0:	f000 8607 	beq.w	e52c2 <mbedtls_ssl_handshake_client_step+0xcea>
        ssl->major_ver = ssl->conf->min_major_ver;
   e46b4:	f891 307a 	ldrb.w	r3, [r1, #122]	; 0x7a
   e46b8:	60a3      	str	r3, [r4, #8]
        ssl->minor_ver = ssl->conf->min_minor_ver;
   e46ba:	f891 307b 	ldrb.w	r3, [r1, #123]	; 0x7b
   e46be:	60e3      	str	r3, [r4, #12]
    if( ssl->conf->max_major_ver == 0 )
   e46c0:	f891 0078 	ldrb.w	r0, [r1, #120]	; 0x78
   e46c4:	2800      	cmp	r0, #0
   e46c6:	d08e      	beq.n	e45e6 <mbedtls_ssl_handshake_client_step+0xe>
                       ssl->conf->transport, p );
   e46c8:	f891 207c 	ldrb.w	r2, [r1, #124]	; 0x7c
    buf = ssl->out_msg;
   e46cc:	f8d4 a098 	ldr.w	sl, [r4, #152]	; 0x98
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
   e46d0:	f891 1079 	ldrb.w	r1, [r1, #121]	; 0x79
   e46d4:	f10a 0304 	add.w	r3, sl, #4
   e46d8:	f3c2 0240 	ubfx	r2, r2, #1, #1
   e46dc:	f7fc f81e 	bl	e071c <mbedtls_ssl_write_version>
    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 4 ) ) != 0 )
   e46e0:	6823      	ldr	r3, [r4, #0]
    unsigned char *p = ssl->handshake->randbytes;
   e46e2:	6b26      	ldr	r6, [r4, #48]	; 0x30
    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 4 ) ) != 0 )
   e46e4:	699d      	ldr	r5, [r3, #24]
   e46e6:	69d8      	ldr	r0, [r3, #28]
   e46e8:	2204      	movs	r2, #4
   e46ea:	f506 712d 	add.w	r1, r6, #692	; 0x2b4
   e46ee:	47a8      	blx	r5
   e46f0:	4605      	mov	r5, r0
   e46f2:	2800      	cmp	r0, #0
   e46f4:	d1d5      	bne.n	e46a2 <mbedtls_ssl_handshake_client_step+0xca>
    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 28 ) ) != 0 )
   e46f6:	6823      	ldr	r3, [r4, #0]
   e46f8:	221c      	movs	r2, #28
   e46fa:	699d      	ldr	r5, [r3, #24]
   e46fc:	69d8      	ldr	r0, [r3, #28]
   e46fe:	f506 712e 	add.w	r1, r6, #696	; 0x2b8
   e4702:	47a8      	blx	r5
   e4704:	4681      	mov	r9, r0
   e4706:	2800      	cmp	r0, #0
   e4708:	f040 85de 	bne.w	e52c8 <mbedtls_ssl_handshake_client_step+0xcf0>
    memcpy( p, ssl->handshake->randbytes, 32 );
   e470c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   e470e:	f10a 0106 	add.w	r1, sl, #6
   e4712:	f503 722d 	add.w	r2, r3, #692	; 0x2b4
   e4716:	f503 7335 	add.w	r3, r3, #724	; 0x2d4
   e471a:	f852 0b04 	ldr.w	r0, [r2], #4
   e471e:	f841 0b04 	str.w	r0, [r1], #4
   e4722:	429a      	cmp	r2, r3
   e4724:	d1f9      	bne.n	e471a <mbedtls_ssl_handshake_client_step+0x142>
    n = ssl->session_negotiate->id_len;
   e4726:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   e4728:	688b      	ldr	r3, [r1, #8]
    if( n < 16 || n > 32 ||
   e472a:	f1a3 0210 	sub.w	r2, r3, #16
   e472e:	2a10      	cmp	r2, #16
   e4730:	d824      	bhi.n	e477c <mbedtls_ssl_handshake_client_step+0x1a4>
        ssl->handshake->resume == 0 )
   e4732:	6b22      	ldr	r2, [r4, #48]	; 0x30
    if( n < 16 || n > 32 ||
   e4734:	f8d2 2348 	ldr.w	r2, [r2, #840]	; 0x348
        n = 0;
   e4738:	2a00      	cmp	r2, #0
   e473a:	bf08      	it	eq
   e473c:	2300      	moveq	r3, #0
        if( ssl->session_negotiate->ticket != NULL &&
   e473e:	6e4a      	ldr	r2, [r1, #100]	; 0x64
   e4740:	b16a      	cbz	r2, e475e <mbedtls_ssl_handshake_client_step+0x186>
   e4742:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   e4744:	b15a      	cbz	r2, e475e <mbedtls_ssl_handshake_client_step+0x186>
            ret = ssl->conf->f_rng( ssl->conf->p_rng, ssl->session_negotiate->id, 32 );
   e4746:	6823      	ldr	r3, [r4, #0]
   e4748:	2220      	movs	r2, #32
   e474a:	699d      	ldr	r5, [r3, #24]
   e474c:	69d8      	ldr	r0, [r3, #28]
   e474e:	310c      	adds	r1, #12
   e4750:	47a8      	blx	r5
            if( ret != 0 )
   e4752:	4605      	mov	r5, r0
   e4754:	2800      	cmp	r0, #0
   e4756:	d1a4      	bne.n	e46a2 <mbedtls_ssl_handshake_client_step+0xca>
            ssl->session_negotiate->id_len = n = 32;
   e4758:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   e475a:	2320      	movs	r3, #32
   e475c:	6093      	str	r3, [r2, #8]
    *p++ = (unsigned char) n;
   e475e:	f10a 0527 	add.w	r5, sl, #39	; 0x27
   e4762:	f88a 3026 	strb.w	r3, [sl, #38]	; 0x26
   e4766:	4628      	mov	r0, r5
    for( i = 0; i < n; i++ )
   e4768:	2200      	movs	r2, #0
   e476a:	4293      	cmp	r3, r2
   e476c:	d008      	beq.n	e4780 <mbedtls_ssl_handshake_client_step+0x1a8>
        *p++ = ssl->session_negotiate->id[i];
   e476e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   e4770:	4411      	add	r1, r2
    for( i = 0; i < n; i++ )
   e4772:	3201      	adds	r2, #1
        *p++ = ssl->session_negotiate->id[i];
   e4774:	7b09      	ldrb	r1, [r1, #12]
   e4776:	f800 1b01 	strb.w	r1, [r0], #1
    for( i = 0; i < n; i++ )
   e477a:	e7f6      	b.n	e476a <mbedtls_ssl_handshake_client_step+0x192>
        n = 0;
   e477c:	2300      	movs	r3, #0
   e477e:	e7de      	b.n	e473e <mbedtls_ssl_handshake_client_step+0x166>
   e4780:	441d      	add	r5, r3
    ciphersuites = ssl->conf->ciphersuite_list[ssl->minor_ver];
   e4782:	68e2      	ldr	r2, [r4, #12]
   e4784:	6823      	ldr	r3, [r4, #0]
   e4786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    p += 2;
   e478a:	1cae      	adds	r6, r5, #2
    for( i = 0; ciphersuites[i] != 0; i++ )
   e478c:	f1a3 0804 	sub.w	r8, r3, #4
    n = 0;
   e4790:	2100      	movs	r1, #0
    for( i = 0; ciphersuites[i] != 0; i++ )
   e4792:	f858 7f04 	ldr.w	r7, [r8, #4]!
   e4796:	9106      	str	r1, [sp, #24]
   e4798:	f101 0b01 	add.w	fp, r1, #1
   e479c:	b307      	cbz	r7, e47e0 <mbedtls_ssl_handshake_client_step+0x208>
        ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( ciphersuites[i] );
   e479e:	4638      	mov	r0, r7
   e47a0:	f7ff fb68 	bl	e3e74 <mbedtls_ssl_ciphersuite_from_id>
                                      ssl->conf->min_minor_ver,
   e47a4:	6827      	ldr	r7, [r4, #0]
    if( suite_info == NULL )
   e47a6:	9906      	ldr	r1, [sp, #24]
        if( ssl_validate_ciphersuite( ciphersuite_info, ssl,
   e47a8:	f897 c079 	ldrb.w	ip, [r7, #121]	; 0x79
    if( suite_info == NULL )
   e47ac:	2800      	cmp	r0, #0
   e47ae:	d0f0      	beq.n	e4792 <mbedtls_ssl_handshake_client_step+0x1ba>
    if( suite_info->min_minor_ver > max_minor_ver ||
   e47b0:	6903      	ldr	r3, [r0, #16]
   e47b2:	459c      	cmp	ip, r3
   e47b4:	dbed      	blt.n	e4792 <mbedtls_ssl_handshake_client_step+0x1ba>
        if( ssl_validate_ciphersuite( ciphersuite_info, ssl,
   e47b6:	f897 707b 	ldrb.w	r7, [r7, #123]	; 0x7b
    if( suite_info->min_minor_ver > max_minor_ver ||
   e47ba:	6983      	ldr	r3, [r0, #24]
   e47bc:	429f      	cmp	r7, r3
   e47be:	dce8      	bgt.n	e4792 <mbedtls_ssl_handshake_client_step+0x1ba>
        uses_ec |= mbedtls_ssl_ciphersuite_uses_ec( ciphersuite_info );
   e47c0:	f7ff fb99 	bl	e3ef6 <mbedtls_ssl_ciphersuite_uses_ec>
        *p++ = (unsigned char)( ciphersuites[i] >> 8 );
   e47c4:	f8d8 3000 	ldr.w	r3, [r8]
   e47c8:	4632      	mov	r2, r6
   e47ca:	121b      	asrs	r3, r3, #8
   e47cc:	f802 3b02 	strb.w	r3, [r2], #2
        *p++ = (unsigned char)( ciphersuites[i]      );
   e47d0:	f8d8 3000 	ldr.w	r3, [r8]
   e47d4:	7073      	strb	r3, [r6, #1]
        uses_ec |= mbedtls_ssl_ciphersuite_uses_ec( ciphersuite_info );
   e47d6:	ea49 0900 	orr.w	r9, r9, r0
        *p++ = (unsigned char)( ciphersuites[i]      );
   e47da:	4616      	mov	r6, r2
   e47dc:	4659      	mov	r1, fp
    for( i = 0; ciphersuites[i] != 0; i++ )
   e47de:	e7d8      	b.n	e4792 <mbedtls_ssl_handshake_client_step+0x1ba>
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO      );
   e47e0:	23ff      	movs	r3, #255	; 0xff
   e47e2:	7073      	strb	r3, [r6, #1]
    *q++ = (unsigned char)( n >> 7 );
   e47e4:	ea4f 13db 	mov.w	r3, fp, lsr #7
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO >> 8 );
   e47e8:	7037      	strb	r7, [r6, #0]
    *q++ = (unsigned char)( n << 1 );
   e47ea:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
    *q++ = (unsigned char)( n >> 7 );
   e47ee:	702b      	strb	r3, [r5, #0]
        *p++ = 1;
   e47f0:	2301      	movs	r3, #1
    *q++ = (unsigned char)( n << 1 );
   e47f2:	f885 b001 	strb.w	fp, [r5, #1]
        *p++ = 1;
   e47f6:	70b3      	strb	r3, [r6, #2]
        *p++ = MBEDTLS_SSL_COMPRESS_NULL;
   e47f8:	70f7      	strb	r7, [r6, #3]
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
   e47fa:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
    if( ssl->hostname == NULL )
   e47fe:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
        *p++ = MBEDTLS_SSL_COMPRESS_NULL;
   e4802:	f106 0804 	add.w	r8, r6, #4
    ssl_write_hostname_ext( ssl, p + 2 + ext_len, &olen );
   e4806:	f106 0b06 	add.w	fp, r6, #6
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
   e480a:	f501 5500 	add.w	r5, r1, #8192	; 0x2000
    if( ssl->hostname == NULL )
   e480e:	b378      	cbz	r0, e4870 <mbedtls_ssl_handshake_client_step+0x298>
    if( end < p || (size_t)( end - p ) < hostname_len + 9 )
   e4810:	45ab      	cmp	fp, r5
   e4812:	d82f      	bhi.n	e4874 <mbedtls_ssl_handshake_client_step+0x29c>
    hostname_len = strlen( ssl->hostname );
   e4814:	f004 f8d0 	bl	e89b8 <strlen>
    if( end < p || (size_t)( end - p ) < hostname_len + 9 )
   e4818:	eba5 010b 	sub.w	r1, r5, fp
   e481c:	f100 0309 	add.w	r3, r0, #9
   e4820:	4299      	cmp	r1, r3
   e4822:	9306      	str	r3, [sp, #24]
   e4824:	d326      	bcc.n	e4874 <mbedtls_ssl_handshake_client_step+0x29c>
    *p++ = (unsigned char)( ( (hostname_len + 5) >> 8 ) & 0xFF );
   e4826:	1d41      	adds	r1, r0, #5
    *p++ = (unsigned char)( ( (hostname_len + 5)      ) & 0xFF );
   e4828:	b2c2      	uxtb	r2, r0
    *p++ = (unsigned char)( ( (hostname_len + 5) >> 8 ) & 0xFF );
   e482a:	0a09      	lsrs	r1, r1, #8
   e482c:	7231      	strb	r1, [r6, #8]
    *p++ = (unsigned char)( ( (hostname_len + 5)      ) & 0xFF );
   e482e:	1d51      	adds	r1, r2, #5
   e4830:	7271      	strb	r1, [r6, #9]
    *p++ = (unsigned char)( ( (hostname_len + 3) >> 8 ) & 0xFF );
   e4832:	1cc1      	adds	r1, r0, #3
   e4834:	0a09      	lsrs	r1, r1, #8
   e4836:	72b1      	strb	r1, [r6, #10]
    *p++ = (unsigned char)( ( (hostname_len + 3)      ) & 0xFF );
   e4838:	1cd1      	adds	r1, r2, #3
   e483a:	72f1      	strb	r1, [r6, #11]
    *p++ = (unsigned char)( ( hostname_len >> 8 ) & 0xFF );
   e483c:	0a01      	lsrs	r1, r0, #8
    *p++ = (unsigned char)( ( hostname_len      ) & 0xFF );
   e483e:	73b2      	strb	r2, [r6, #14]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME >> 8 ) & 0xFF );
   e4840:	71b7      	strb	r7, [r6, #6]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME      ) & 0xFF );
   e4842:	71f7      	strb	r7, [r6, #7]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME_HOSTNAME ) & 0xFF );
   e4844:	7337      	strb	r7, [r6, #12]
    *p++ = (unsigned char)( ( hostname_len >> 8 ) & 0xFF );
   e4846:	7371      	strb	r1, [r6, #13]
    memcpy( p, ssl->hostname, hostname_len );
   e4848:	4602      	mov	r2, r0
   e484a:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   e484e:	f106 000f 	add.w	r0, r6, #15
   e4852:	f004 f83b 	bl	e88cc <memcpy>
    *olen = hostname_len + 9;
   e4856:	9b06      	ldr	r3, [sp, #24]
    if( ssl->conf->max_minor_ver != MBEDTLS_SSL_MINOR_VERSION_3 )
   e4858:	6822      	ldr	r2, [r4, #0]
   e485a:	f892 1079 	ldrb.w	r1, [r2, #121]	; 0x79
   e485e:	2903      	cmp	r1, #3
   e4860:	f040 80dd 	bne.w	e4a1e <mbedtls_ssl_handshake_client_step+0x446>
    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
   e4864:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
    size_t sig_alg_len = 0;
   e4866:	2200      	movs	r2, #0
    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
   e4868:	588d      	ldr	r5, [r1, r2]
   e486a:	b12d      	cbz	r5, e4878 <mbedtls_ssl_handshake_client_step+0x2a0>
        sig_alg_len += 2;
   e486c:	3204      	adds	r2, #4
    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
   e486e:	e7fb      	b.n	e4868 <mbedtls_ssl_handshake_client_step+0x290>
    *olen = 0;
   e4870:	4603      	mov	r3, r0
   e4872:	e7f1      	b.n	e4858 <mbedtls_ssl_handshake_client_step+0x280>
   e4874:	463b      	mov	r3, r7
   e4876:	e7ef      	b.n	e4858 <mbedtls_ssl_handshake_client_step+0x280>
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
   e4878:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    ssl_write_signature_algorithms_ext( ssl, p + 2 + ext_len, &olen );
   e487c:	1c9f      	adds	r7, r3, #2
   e487e:	4447      	add	r7, r8
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
   e4880:	f500 5000 	add.w	r0, r0, #8192	; 0x2000
    if( end < p || (size_t)( end - p ) < sig_alg_len + 6 )
   e4884:	4287      	cmp	r7, r0
   e4886:	d83b      	bhi.n	e4900 <mbedtls_ssl_handshake_client_step+0x328>
   e4888:	1bc0      	subs	r0, r0, r7
   e488a:	3206      	adds	r2, #6
   e488c:	4290      	cmp	r0, r2
   e488e:	d337      	bcc.n	e4900 <mbedtls_ssl_handshake_client_step+0x328>
   e4890:	3904      	subs	r1, #4
    unsigned char *sig_alg_list = buf + 6;
   e4892:	1dba      	adds	r2, r7, #6
    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
   e4894:	f851 0f04 	ldr.w	r0, [r1, #4]!
   e4898:	9109      	str	r1, [sp, #36]	; 0x24
   e489a:	3204      	adds	r2, #4
   e489c:	e9cd 2206 	strd	r2, r2, [sp, #24]
   e48a0:	f105 0c02 	add.w	ip, r5, #2
   e48a4:	b1f0      	cbz	r0, e48e4 <mbedtls_ssl_handshake_client_step+0x30c>
   e48a6:	9308      	str	r3, [sp, #32]
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
   e48a8:	f7fb fda6 	bl	e03f8 <mbedtls_ssl_hash_from_md_alg>
   e48ac:	9a06      	ldr	r2, [sp, #24]
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
   e48ae:	9909      	ldr	r1, [sp, #36]	; 0x24
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
   e48b0:	f802 0c04 	strb.w	r0, [r2, #-4]
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_ECDSA;
   e48b4:	f04f 0303 	mov.w	r3, #3
   e48b8:	f802 3c03 	strb.w	r3, [r2, #-3]
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
   e48bc:	6808      	ldr	r0, [r1, #0]
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_ECDSA;
   e48be:	9207      	str	r2, [sp, #28]
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
   e48c0:	9106      	str	r1, [sp, #24]
   e48c2:	f7fb fd99 	bl	e03f8 <mbedtls_ssl_hash_from_md_alg>
   e48c6:	9a07      	ldr	r2, [sp, #28]
    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
   e48c8:	9906      	ldr	r1, [sp, #24]
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
   e48ca:	f802 0c02 	strb.w	r0, [r2, #-2]
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_RSA;
   e48ce:	f04f 0301 	mov.w	r3, #1
   e48d2:	f802 3c01 	strb.w	r3, [r2, #-1]
   e48d6:	3504      	adds	r5, #4
    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
   e48d8:	9b08      	ldr	r3, [sp, #32]
   e48da:	e7db      	b.n	e4894 <mbedtls_ssl_handshake_client_step+0x2bc>
   e48dc:	ffff8f00 	.word	0xffff8f00
   e48e0:	ffff9200 	.word	0xffff9200
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG      ) & 0xFF );
   e48e4:	220d      	movs	r2, #13
   e48e6:	707a      	strb	r2, [r7, #1]
    *p++ = (unsigned char)( ( ( sig_alg_len + 2 )      ) & 0xFF );
   e48e8:	b2ea      	uxtb	r2, r5
   e48ea:	1c91      	adds	r1, r2, #2
    *p++ = (unsigned char)( ( ( sig_alg_len + 2 ) >> 8 ) & 0xFF );
   e48ec:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
    *p++ = (unsigned char)( ( ( sig_alg_len + 2 )      ) & 0xFF );
   e48f0:	70f9      	strb	r1, [r7, #3]
    *p++ = (unsigned char)( ( sig_alg_len >> 8 ) & 0xFF );
   e48f2:	0a29      	lsrs	r1, r5, #8
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG >> 8 ) & 0xFF );
   e48f4:	7038      	strb	r0, [r7, #0]
    *p++ = (unsigned char)( ( ( sig_alg_len + 2 ) >> 8 ) & 0xFF );
   e48f6:	f887 c002 	strb.w	ip, [r7, #2]
    *p++ = (unsigned char)( ( sig_alg_len >> 8 ) & 0xFF );
   e48fa:	7139      	strb	r1, [r7, #4]
    *p++ = (unsigned char)( ( sig_alg_len      ) & 0xFF );
   e48fc:	717a      	strb	r2, [r7, #5]
    *olen = 6 + sig_alg_len;
   e48fe:	3506      	adds	r5, #6
    ext_len += olen;
   e4900:	441d      	add	r5, r3
    if( uses_ec )
   e4902:	f1b9 0f00 	cmp.w	r9, #0
   e4906:	d02b      	beq.n	e4960 <mbedtls_ssl_handshake_client_step+0x388>
    for( grp_id = ssl->conf->curve_list; *grp_id != MBEDTLS_ECP_DP_NONE; grp_id++ )
   e4908:	6822      	ldr	r2, [r4, #0]
   e490a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   e490e:	6e17      	ldr	r7, [r2, #96]	; 0x60
    size_t elliptic_curve_len = 0;
   e4910:	f04f 0900 	mov.w	r9, #0
   e4914:	3f01      	subs	r7, #1
    for( grp_id = ssl->conf->curve_list; *grp_id != MBEDTLS_ECP_DP_NONE; grp_id++ )
   e4916:	f817 0f01 	ldrb.w	r0, [r7, #1]!
   e491a:	2800      	cmp	r0, #0
   e491c:	f000 8084 	beq.w	e4a28 <mbedtls_ssl_handshake_client_step+0x450>
   e4920:	9306      	str	r3, [sp, #24]
        info = mbedtls_ecp_curve_info_from_grp_id( *grp_id );
   e4922:	f7f4 fa0b 	bl	d8d3c <mbedtls_ecp_curve_info_from_grp_id>
        if( info == NULL )
   e4926:	9b06      	ldr	r3, [sp, #24]
   e4928:	2800      	cmp	r0, #0
   e492a:	d17a      	bne.n	e4a22 <mbedtls_ssl_handshake_client_step+0x44a>
    *olen = 0;
   e492c:	2300      	movs	r3, #0
        ext_len += olen;
   e492e:	18e8      	adds	r0, r5, r3
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
   e4930:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
        ssl_write_supported_point_formats_ext( ssl, p + 2 + ext_len, &olen );
   e4934:	1c82      	adds	r2, r0, #2
   e4936:	4442      	add	r2, r8
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
   e4938:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
    if( end < p || (size_t)( end - p ) < 6 )
   e493c:	428a      	cmp	r2, r1
   e493e:	f04f 0300 	mov.w	r3, #0
   e4942:	d80c      	bhi.n	e495e <mbedtls_ssl_handshake_client_step+0x386>
   e4944:	1a89      	subs	r1, r1, r2
   e4946:	2905      	cmp	r1, #5
   e4948:	d909      	bls.n	e495e <mbedtls_ssl_handshake_client_step+0x386>
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS      ) & 0xFF );
   e494a:	210b      	movs	r1, #11
   e494c:	7051      	strb	r1, [r2, #1]
    *p++ = 2;
   e494e:	2102      	movs	r1, #2
   e4950:	70d1      	strb	r1, [r2, #3]
    *p++ = 1;
   e4952:	2101      	movs	r1, #1
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS >> 8 ) & 0xFF );
   e4954:	7013      	strb	r3, [r2, #0]
    *p++ = 0x00;
   e4956:	7093      	strb	r3, [r2, #2]
    *p++ = MBEDTLS_ECP_PF_UNCOMPRESSED;
   e4958:	7153      	strb	r3, [r2, #5]
    *p++ = 1;
   e495a:	7111      	strb	r1, [r2, #4]
    *olen = 6;
   e495c:	2306      	movs	r3, #6
        ext_len += olen;
   e495e:	18c5      	adds	r5, r0, r3
    if( ssl->conf->mfl_code == MBEDTLS_SSL_MAX_FRAG_LEN_NONE ) {
   e4960:	6823      	ldr	r3, [r4, #0]
   e4962:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
   e4966:	f413 73e0 	ands.w	r3, r3, #448	; 0x1c0
   e496a:	d018      	beq.n	e499e <mbedtls_ssl_handshake_client_step+0x3c6>
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
   e496c:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
    ssl_write_max_fragment_length_ext( ssl, p + 2 + ext_len, &olen );
   e4970:	1ca9      	adds	r1, r5, #2
   e4972:	4441      	add	r1, r8
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
   e4974:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
    if( end < p || (size_t)( end - p ) < 5 )
   e4978:	4291      	cmp	r1, r2
   e497a:	f04f 0300 	mov.w	r3, #0
   e497e:	d80e      	bhi.n	e499e <mbedtls_ssl_handshake_client_step+0x3c6>
   e4980:	1a52      	subs	r2, r2, r1
   e4982:	2a04      	cmp	r2, #4
   e4984:	d90b      	bls.n	e499e <mbedtls_ssl_handshake_client_step+0x3c6>
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH      ) & 0xFF );
   e4986:	2201      	movs	r2, #1
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH >> 8 ) & 0xFF );
   e4988:	700b      	strb	r3, [r1, #0]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH      ) & 0xFF );
   e498a:	704a      	strb	r2, [r1, #1]
    *p++ = 0x00;
   e498c:	708b      	strb	r3, [r1, #2]
    *p++ = 1;
   e498e:	70ca      	strb	r2, [r1, #3]
    *p++ = ssl->conf->mfl_code;
   e4990:	6823      	ldr	r3, [r4, #0]
   e4992:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
   e4996:	f3c3 1382 	ubfx	r3, r3, #6, #3
   e499a:	710b      	strb	r3, [r1, #4]
    *olen = 5;
   e499c:	2305      	movs	r3, #5
    ext_len += olen;
   e499e:	441d      	add	r5, r3
    if( ssl->conf->session_tickets == MBEDTLS_SSL_SESSION_TICKETS_DISABLED )
   e49a0:	6823      	ldr	r3, [r4, #0]
   e49a2:	f893 707d 	ldrb.w	r7, [r3, #125]	; 0x7d
   e49a6:	f017 0702 	ands.w	r7, r7, #2
   e49aa:	d01e      	beq.n	e49ea <mbedtls_ssl_handshake_client_step+0x412>
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
   e49ac:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    ssl_write_session_ticket_ext( ssl, p + 2 + ext_len, &olen );
   e49b0:	1ca8      	adds	r0, r5, #2
   e49b2:	4440      	add	r0, r8
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
   e49b4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
    if( end < p || (size_t)( end - p ) < 4 + tlen )
   e49b8:	4298      	cmp	r0, r3
   e49ba:	d871      	bhi.n	e4aa0 <mbedtls_ssl_handshake_client_step+0x4c8>
    size_t tlen = ssl->session_negotiate->ticket_len;
   e49bc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   e49be:	6e92      	ldr	r2, [r2, #104]	; 0x68
    if( end < p || (size_t)( end - p ) < 4 + tlen )
   e49c0:	1a1b      	subs	r3, r3, r0
   e49c2:	1d17      	adds	r7, r2, #4
   e49c4:	42bb      	cmp	r3, r7
   e49c6:	f04f 0300 	mov.w	r3, #0
   e49ca:	d369      	bcc.n	e4aa0 <mbedtls_ssl_handshake_client_step+0x4c8>
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SESSION_TICKET >> 8 ) & 0xFF );
   e49cc:	7003      	strb	r3, [r0, #0]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SESSION_TICKET      ) & 0xFF );
   e49ce:	2323      	movs	r3, #35	; 0x23
   e49d0:	7043      	strb	r3, [r0, #1]
    *p++ = (unsigned char)( ( tlen >> 8 ) & 0xFF );
   e49d2:	0a13      	lsrs	r3, r2, #8
   e49d4:	7083      	strb	r3, [r0, #2]
    *p++ = (unsigned char)( ( tlen      ) & 0xFF );
   e49d6:	70c2      	strb	r2, [r0, #3]
    if( ssl->session_negotiate->ticket == NULL || tlen == 0 )
   e49d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e49da:	6e59      	ldr	r1, [r3, #100]	; 0x64
   e49dc:	2900      	cmp	r1, #0
   e49de:	d061      	beq.n	e4aa4 <mbedtls_ssl_handshake_client_step+0x4cc>
   e49e0:	2a00      	cmp	r2, #0
   e49e2:	d05f      	beq.n	e4aa4 <mbedtls_ssl_handshake_client_step+0x4cc>
    memcpy( p, ssl->session_negotiate->ticket, tlen );
   e49e4:	3004      	adds	r0, #4
   e49e6:	f003 ff71 	bl	e88cc <memcpy>
    if( ext_len > 0 )
   e49ea:	19ed      	adds	r5, r5, r7
        *p++ = (unsigned char)( ( ext_len >> 8 ) & 0xFF );
   e49ec:	bf1e      	ittt	ne
   e49ee:	0a2b      	lsrne	r3, r5, #8
        p += ext_len;
   e49f0:	eb0b 0805 	addne.w	r8, fp, r5
        *p++ = (unsigned char)( ( ext_len >> 8 ) & 0xFF );
   e49f4:	7133      	strbne	r3, [r6, #4]
    ssl->out_msglen  = p - buf;
   e49f6:	eba8 030a 	sub.w	r3, r8, sl
        *p++ = (unsigned char)( ( ext_len      ) & 0xFF );
   e49fa:	bf18      	it	ne
   e49fc:	7175      	strbne	r5, [r6, #5]
    ssl->out_msglen  = p - buf;
   e49fe:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
   e4a02:	2316      	movs	r3, #22
   e4a04:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_HELLO;
   e4a08:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   e4a0c:	2201      	movs	r2, #1
   e4a0e:	701a      	strb	r2, [r3, #0]
    ssl->state++;
   e4a10:	6863      	ldr	r3, [r4, #4]
   e4a12:	4413      	add	r3, r2
    ssl->state++;
   e4a14:	6063      	str	r3, [r4, #4]
    if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
   e4a16:	4620      	mov	r0, r4
   e4a18:	f7fa fe0e 	bl	df638 <mbedtls_ssl_write_handshake_msg>
   e4a1c:	e1a2      	b.n	e4d64 <mbedtls_ssl_handshake_client_step+0x78c>
    *olen = 0;
   e4a1e:	2500      	movs	r5, #0
   e4a20:	e76e      	b.n	e4900 <mbedtls_ssl_handshake_client_step+0x328>
        elliptic_curve_len += 2;
   e4a22:	f109 0902 	add.w	r9, r9, #2
    for( grp_id = ssl->conf->curve_list; *grp_id != MBEDTLS_ECP_DP_NONE; grp_id++ )
   e4a26:	e776      	b.n	e4916 <mbedtls_ssl_handshake_client_step+0x33e>
   e4a28:	1caf      	adds	r7, r5, #2
   e4a2a:	4447      	add	r7, r8
   e4a2c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
    if( end < p || (size_t)( end - p ) < 6 + elliptic_curve_len )
   e4a30:	42bb      	cmp	r3, r7
   e4a32:	f4ff af7b 	bcc.w	e492c <mbedtls_ssl_handshake_client_step+0x354>
   e4a36:	1bdb      	subs	r3, r3, r7
   e4a38:	f109 0206 	add.w	r2, r9, #6
   e4a3c:	4293      	cmp	r3, r2
   e4a3e:	f4ff af75 	bcc.w	e492c <mbedtls_ssl_handshake_client_step+0x354>
    for( grp_id = ssl->conf->curve_list; *grp_id != MBEDTLS_ECP_DP_NONE; grp_id++ )
   e4a42:	6823      	ldr	r3, [r4, #0]
   e4a44:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   e4a46:	f06f 0105 	mvn.w	r1, #5
   e4a4a:	3a01      	subs	r2, #1
    unsigned char *elliptic_curve_list = p + 6;
   e4a4c:	f107 0906 	add.w	r9, r7, #6
   e4a50:	1bc9      	subs	r1, r1, r7
    for( grp_id = ssl->conf->curve_list; *grp_id != MBEDTLS_ECP_DP_NONE; grp_id++ )
   e4a52:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   e4a56:	9107      	str	r1, [sp, #28]
   e4a58:	eb01 0309 	add.w	r3, r1, r9
   e4a5c:	9206      	str	r2, [sp, #24]
   e4a5e:	9208      	str	r2, [sp, #32]
   e4a60:	f109 0902 	add.w	r9, r9, #2
   e4a64:	b158      	cbz	r0, e4a7e <mbedtls_ssl_handshake_client_step+0x4a6>
        info = mbedtls_ecp_curve_info_from_grp_id( *grp_id );
   e4a66:	f7f4 f969 	bl	d8d3c <mbedtls_ecp_curve_info_from_grp_id>
        elliptic_curve_list[elliptic_curve_len++] = info->tls_id >> 8;
   e4a6a:	8843      	ldrh	r3, [r0, #2]
   e4a6c:	121b      	asrs	r3, r3, #8
   e4a6e:	f809 3c02 	strb.w	r3, [r9, #-2]
        elliptic_curve_list[elliptic_curve_len++] = info->tls_id & 0xFF;
   e4a72:	8843      	ldrh	r3, [r0, #2]
   e4a74:	f809 3c01 	strb.w	r3, [r9, #-1]
    for( grp_id = ssl->conf->curve_list; *grp_id != MBEDTLS_ECP_DP_NONE; grp_id++ )
   e4a78:	e9dd 2106 	ldrd	r2, r1, [sp, #24]
   e4a7c:	e7e9      	b.n	e4a52 <mbedtls_ssl_handshake_client_step+0x47a>
    if( elliptic_curve_len == 0 )
   e4a7e:	2b00      	cmp	r3, #0
   e4a80:	f43f af54 	beq.w	e492c <mbedtls_ssl_handshake_client_step+0x354>
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_ELLIPTIC_CURVES      ) & 0xFF );
   e4a84:	220a      	movs	r2, #10
   e4a86:	707a      	strb	r2, [r7, #1]
    *p++ = (unsigned char)( ( ( elliptic_curve_len + 2 ) >> 8 ) & 0xFF );
   e4a88:	1c9a      	adds	r2, r3, #2
   e4a8a:	0a12      	lsrs	r2, r2, #8
   e4a8c:	70ba      	strb	r2, [r7, #2]
    *p++ = (unsigned char)( ( ( elliptic_curve_len + 2 )      ) & 0xFF );
   e4a8e:	b2da      	uxtb	r2, r3
   e4a90:	1c91      	adds	r1, r2, #2
   e4a92:	70f9      	strb	r1, [r7, #3]
    *p++ = (unsigned char)( ( ( elliptic_curve_len     ) >> 8 ) & 0xFF );
   e4a94:	0a19      	lsrs	r1, r3, #8
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_ELLIPTIC_CURVES >> 8 ) & 0xFF );
   e4a96:	7038      	strb	r0, [r7, #0]
    *p++ = (unsigned char)( ( ( elliptic_curve_len     ) >> 8 ) & 0xFF );
   e4a98:	7139      	strb	r1, [r7, #4]
    *p++ = (unsigned char)( ( ( elliptic_curve_len     )      ) & 0xFF );
   e4a9a:	717a      	strb	r2, [r7, #5]
    *olen = 6 + elliptic_curve_len;
   e4a9c:	3306      	adds	r3, #6
   e4a9e:	e746      	b.n	e492e <mbedtls_ssl_handshake_client_step+0x356>
    *olen = 0;
   e4aa0:	2700      	movs	r7, #0
   e4aa2:	e7a2      	b.n	e49ea <mbedtls_ssl_handshake_client_step+0x412>
    *olen = 4;
   e4aa4:	2704      	movs	r7, #4
   e4aa6:	e7a0      	b.n	e49ea <mbedtls_ssl_handshake_client_step+0x412>
    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   e4aa8:	2101      	movs	r1, #1
   e4aaa:	4620      	mov	r0, r4
    buf = ssl->in_msg;
   e4aac:	f8d4 8064 	ldr.w	r8, [r4, #100]	; 0x64
    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   e4ab0:	f7fa fe7a 	bl	df7a8 <mbedtls_ssl_read_record>
   e4ab4:	2800      	cmp	r0, #0
   e4ab6:	f040 8155 	bne.w	e4d64 <mbedtls_ssl_handshake_client_step+0x78c>
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
   e4aba:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   e4abc:	2b16      	cmp	r3, #22
   e4abe:	d006      	beq.n	e4ace <mbedtls_ssl_handshake_client_step+0x4f6>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   e4ac0:	220a      	movs	r2, #10
   e4ac2:	2102      	movs	r1, #2
   e4ac4:	4620      	mov	r0, r4
   e4ac6:	f7fa fe55 	bl	df774 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
   e4aca:	4dad      	ldr	r5, [pc, #692]	; (e4d80 <mbedtls_ssl_handshake_client_step+0x7a8>)
   e4acc:	e5e9      	b.n	e46a2 <mbedtls_ssl_handshake_client_step+0xca>
    if( ssl->in_hslen < 38 + mbedtls_ssl_hs_hdr_len( ssl ) ||
   e4ace:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   e4ad0:	2b29      	cmp	r3, #41	; 0x29
   e4ad2:	d951      	bls.n	e4b78 <mbedtls_ssl_handshake_client_step+0x5a0>
   e4ad4:	f898 3000 	ldrb.w	r3, [r8]
   e4ad8:	2b02      	cmp	r3, #2
   e4ada:	d14d      	bne.n	e4b78 <mbedtls_ssl_handshake_client_step+0x5a0>
                      ssl->conf->transport, buf + 0 );
   e4adc:	4621      	mov	r1, r4
    buf += mbedtls_ssl_hs_hdr_len( ssl );
   e4ade:	f108 0904 	add.w	r9, r8, #4
                      ssl->conf->transport, buf + 0 );
   e4ae2:	f851 3b0c 	ldr.w	r3, [r1], #12
   e4ae6:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
    mbedtls_ssl_read_version( &ssl->major_ver, &ssl->minor_ver,
   e4aea:	f104 0008 	add.w	r0, r4, #8
   e4aee:	464b      	mov	r3, r9
   e4af0:	f3c2 0240 	ubfx	r2, r2, #1, #1
   e4af4:	f7fb fe15 	bl	e0722 <mbedtls_ssl_read_version>
    if( ssl->major_ver < ssl->conf->min_major_ver ||
   e4af8:	6823      	ldr	r3, [r4, #0]
   e4afa:	68a1      	ldr	r1, [r4, #8]
   e4afc:	f893 207a 	ldrb.w	r2, [r3, #122]	; 0x7a
   e4b00:	4291      	cmp	r1, r2
   e4b02:	da06      	bge.n	e4b12 <mbedtls_ssl_handshake_client_step+0x53a>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   e4b04:	2246      	movs	r2, #70	; 0x46
   e4b06:	2102      	movs	r1, #2
   e4b08:	4620      	mov	r0, r4
   e4b0a:	f7fa fe33 	bl	df774 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_PROTOCOL_VERSION );
   e4b0e:	4d9d      	ldr	r5, [pc, #628]	; (e4d84 <mbedtls_ssl_handshake_client_step+0x7ac>)
   e4b10:	e5c7      	b.n	e46a2 <mbedtls_ssl_handshake_client_step+0xca>
        ssl->minor_ver < ssl->conf->min_minor_ver ||
   e4b12:	68e2      	ldr	r2, [r4, #12]
   e4b14:	f893 007b 	ldrb.w	r0, [r3, #123]	; 0x7b
    if( ssl->major_ver < ssl->conf->min_major_ver ||
   e4b18:	4282      	cmp	r2, r0
   e4b1a:	dbf3      	blt.n	e4b04 <mbedtls_ssl_handshake_client_step+0x52c>
        ssl->major_ver > ssl->conf->max_major_ver ||
   e4b1c:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
        ssl->minor_ver < ssl->conf->min_minor_ver ||
   e4b20:	4281      	cmp	r1, r0
   e4b22:	dcef      	bgt.n	e4b04 <mbedtls_ssl_handshake_client_step+0x52c>
        ssl->minor_ver > ssl->conf->max_minor_ver )
   e4b24:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
        ssl->major_ver > ssl->conf->max_major_ver ||
   e4b28:	429a      	cmp	r2, r3
   e4b2a:	dceb      	bgt.n	e4b04 <mbedtls_ssl_handshake_client_step+0x52c>
    memcpy( ssl->handshake->randbytes + 32, buf + 2, 32 );
   e4b2c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   e4b2e:	f108 0206 	add.w	r2, r8, #6
   e4b32:	f503 7335 	add.w	r3, r3, #724	; 0x2d4
   e4b36:	f108 0126 	add.w	r1, r8, #38	; 0x26
   e4b3a:	f852 0b04 	ldr.w	r0, [r2], #4
   e4b3e:	f843 0b04 	str.w	r0, [r3], #4
   e4b42:	428a      	cmp	r2, r1
   e4b44:	d1f9      	bne.n	e4b3a <mbedtls_ssl_handshake_client_step+0x562>
    n = buf[34];
   e4b46:	f898 6026 	ldrb.w	r6, [r8, #38]	; 0x26
    if( n > 32 )
   e4b4a:	2e20      	cmp	r6, #32
   e4b4c:	d814      	bhi.n	e4b78 <mbedtls_ssl_handshake_client_step+0x5a0>
    if( ssl->in_hslen > mbedtls_ssl_hs_hdr_len( ssl ) + 39 + n )
   e4b4e:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   e4b50:	f106 032b 	add.w	r3, r6, #43	; 0x2b
   e4b54:	429a      	cmp	r2, r3
   e4b56:	d916      	bls.n	e4b86 <mbedtls_ssl_handshake_client_step+0x5ae>
        ext_len = ( ( buf[38 + n] <<  8 )
   e4b58:	eb09 0306 	add.w	r3, r9, r6
   e4b5c:	f893 1026 	ldrb.w	r1, [r3, #38]	; 0x26
                  | ( buf[39 + n]       ) );
   e4b60:	f893 7027 	ldrb.w	r7, [r3, #39]	; 0x27
   e4b64:	ea47 2701 	orr.w	r7, r7, r1, lsl #8
        if( ( ext_len > 0 && ext_len < 4 ) ||
   e4b68:	1e7b      	subs	r3, r7, #1
   e4b6a:	2b02      	cmp	r3, #2
   e4b6c:	d904      	bls.n	e4b78 <mbedtls_ssl_handshake_client_step+0x5a0>
            ssl->in_hslen != mbedtls_ssl_hs_hdr_len( ssl ) + 40 + n + ext_len )
   e4b6e:	f106 032c 	add.w	r3, r6, #44	; 0x2c
   e4b72:	443b      	add	r3, r7
        if( ( ext_len > 0 && ext_len < 4 ) ||
   e4b74:	429a      	cmp	r2, r3
   e4b76:	d00b      	beq.n	e4b90 <mbedtls_ssl_handshake_client_step+0x5b8>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   e4b78:	2232      	movs	r2, #50	; 0x32
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   e4b7a:	2102      	movs	r1, #2
   e4b7c:	4620      	mov	r0, r4
   e4b7e:	f7fa fdf9 	bl	df774 <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
   e4b82:	4d81      	ldr	r5, [pc, #516]	; (e4d88 <mbedtls_ssl_handshake_client_step+0x7b0>)
   e4b84:	e58d      	b.n	e46a2 <mbedtls_ssl_handshake_client_step+0xca>
    else if( ssl->in_hslen == mbedtls_ssl_hs_hdr_len( ssl ) + 38 + n )
   e4b86:	f106 032a 	add.w	r3, r6, #42	; 0x2a
   e4b8a:	429a      	cmp	r2, r3
   e4b8c:	d1f4      	bne.n	e4b78 <mbedtls_ssl_handshake_client_step+0x5a0>
        ext_len = 0;
   e4b8e:	2700      	movs	r7, #0
    i = ( buf[35 + n] << 8 ) | buf[36 + n];
   e4b90:	eb09 0306 	add.w	r3, r9, r6
   e4b94:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
   e4b98:	f893 a024 	ldrb.w	sl, [r3, #36]	; 0x24
    if( comp != MBEDTLS_SSL_COMPRESS_NULL )
   e4b9c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    i = ( buf[35 + n] << 8 ) | buf[36 + n];
   e4ba0:	ea4a 2a02 	orr.w	sl, sl, r2, lsl #8
    if( comp != MBEDTLS_SSL_COMPRESS_NULL )
   e4ba4:	b133      	cbz	r3, e4bb4 <mbedtls_ssl_handshake_client_step+0x5dc>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   e4ba6:	222f      	movs	r2, #47	; 0x2f
   e4ba8:	2102      	movs	r1, #2
   e4baa:	4620      	mov	r0, r4
   e4bac:	f7fa fde2 	bl	df774 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
   e4bb0:	4d76      	ldr	r5, [pc, #472]	; (e4d8c <mbedtls_ssl_handshake_client_step+0x7b4>)
   e4bb2:	e576      	b.n	e46a2 <mbedtls_ssl_handshake_client_step+0xca>
    ssl->transform_negotiate->ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( i );
   e4bb4:	4650      	mov	r0, sl
   e4bb6:	f8d4 b040 	ldr.w	fp, [r4, #64]	; 0x40
   e4bba:	f7ff f95b 	bl	e3e74 <mbedtls_ssl_ciphersuite_from_id>
   e4bbe:	f8cb 0000 	str.w	r0, [fp]
    if( ssl->transform_negotiate->ciphersuite_info == NULL )
   e4bc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
   e4bc4:	6819      	ldr	r1, [r3, #0]
   e4bc6:	b929      	cbnz	r1, e4bd4 <mbedtls_ssl_handshake_client_step+0x5fc>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   e4bc8:	2250      	movs	r2, #80	; 0x50
   e4bca:	2102      	movs	r1, #2
   e4bcc:	4620      	mov	r0, r4
   e4bce:	f7fa fdd1 	bl	df774 <mbedtls_ssl_send_alert_message>
   e4bd2:	e508      	b.n	e45e6 <mbedtls_ssl_handshake_client_step+0xe>
    mbedtls_ssl_optimize_checksum( ssl, ssl->transform_negotiate->ciphersuite_info );
   e4bd4:	4620      	mov	r0, r4
   e4bd6:	f7fa ffcf 	bl	dfb78 <mbedtls_ssl_optimize_checksum>
    if( ssl->handshake->resume == 0 || n == 0 ||
   e4bda:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
   e4bde:	f8db 3348 	ldr.w	r3, [fp, #840]	; 0x348
   e4be2:	f108 0127 	add.w	r1, r8, #39	; 0x27
   e4be6:	b183      	cbz	r3, e4c0a <mbedtls_ssl_handshake_client_step+0x632>
   e4be8:	b17e      	cbz	r6, e4c0a <mbedtls_ssl_handshake_client_step+0x632>
        ssl->session_negotiate->ciphersuite != i ||
   e4bea:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    if( ssl->handshake->resume == 0 || n == 0 ||
   e4bec:	6803      	ldr	r3, [r0, #0]
   e4bee:	459a      	cmp	sl, r3
   e4bf0:	d10b      	bne.n	e4c0a <mbedtls_ssl_handshake_client_step+0x632>
        ssl->session_negotiate->ciphersuite != i ||
   e4bf2:	6843      	ldr	r3, [r0, #4]
   e4bf4:	b94b      	cbnz	r3, e4c0a <mbedtls_ssl_handshake_client_step+0x632>
        ssl->session_negotiate->compression != comp ||
   e4bf6:	6883      	ldr	r3, [r0, #8]
   e4bf8:	429e      	cmp	r6, r3
   e4bfa:	d106      	bne.n	e4c0a <mbedtls_ssl_handshake_client_step+0x632>
        memcmp( ssl->session_negotiate->id, buf + 35, n ) != 0 )
   e4bfc:	4632      	mov	r2, r6
   e4bfe:	300c      	adds	r0, #12
   e4c00:	9106      	str	r1, [sp, #24]
   e4c02:	f003 fe55 	bl	e88b0 <memcmp>
        ssl->session_negotiate->id_len != n ||
   e4c06:	9906      	ldr	r1, [sp, #24]
   e4c08:	b1d8      	cbz	r0, e4c42 <mbedtls_ssl_handshake_client_step+0x66a>
        ssl->state++;
   e4c0a:	6863      	ldr	r3, [r4, #4]
   e4c0c:	3301      	adds	r3, #1
   e4c0e:	6063      	str	r3, [r4, #4]
        ssl->handshake->resume = 0;
   e4c10:	2300      	movs	r3, #0
   e4c12:	f8cb 3348 	str.w	r3, [fp, #840]	; 0x348
        ssl->session_negotiate->ciphersuite = i;
   e4c16:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   e4c18:	f8c2 a000 	str.w	sl, [r2]
        ssl->session_negotiate->compression = comp;
   e4c1c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   e4c1e:	6053      	str	r3, [r2, #4]
        ssl->session_negotiate->id_len = n;
   e4c20:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e4c22:	609e      	str	r6, [r3, #8]
        memcpy( ssl->session_negotiate->id, buf + 35, n );
   e4c24:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   e4c26:	4632      	mov	r2, r6
   e4c28:	300c      	adds	r0, #12
   e4c2a:	f003 fe4f 	bl	e88cc <memcpy>
        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i] == 0 )
   e4c2e:	6823      	ldr	r3, [r4, #0]
   e4c30:	68e2      	ldr	r2, [r4, #12]
   e4c32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   e4c36:	3b04      	subs	r3, #4
   e4c38:	f853 0f04 	ldr.w	r0, [r3, #4]!
   e4c3c:	b980      	cbnz	r0, e4c60 <mbedtls_ssl_handshake_client_step+0x688>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   e4c3e:	222f      	movs	r2, #47	; 0x2f
   e4c40:	e79b      	b.n	e4b7a <mbedtls_ssl_handshake_client_step+0x5a2>
        ssl->state = MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC;
   e4c42:	230c      	movs	r3, #12
   e4c44:	6063      	str	r3, [r4, #4]
        if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
   e4c46:	4620      	mov	r0, r4
   e4c48:	f7fa f9d6 	bl	deff8 <mbedtls_ssl_derive_keys>
   e4c4c:	4680      	mov	r8, r0
   e4c4e:	2800      	cmp	r0, #0
   e4c50:	d0ed      	beq.n	e4c2e <mbedtls_ssl_handshake_client_step+0x656>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   e4c52:	2250      	movs	r2, #80	; 0x50
   e4c54:	2102      	movs	r1, #2
   e4c56:	4620      	mov	r0, r4
   e4c58:	f7fa fd8c 	bl	df774 <mbedtls_ssl_send_alert_message>
            return( ret );
   e4c5c:	4645      	mov	r5, r8
   e4c5e:	e520      	b.n	e46a2 <mbedtls_ssl_handshake_client_step+0xca>
            ssl->session_negotiate->ciphersuite )
   e4c60:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   e4c62:	6812      	ldr	r2, [r2, #0]
        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i++] ==
   e4c64:	4290      	cmp	r0, r2
   e4c66:	d1e7      	bne.n	e4c38 <mbedtls_ssl_handshake_client_step+0x660>
    suite_info = mbedtls_ssl_ciphersuite_from_id( ssl->session_negotiate->ciphersuite );
   e4c68:	f7ff f904 	bl	e3e74 <mbedtls_ssl_ciphersuite_from_id>
    if( suite_info == NULL )
   e4c6c:	2800      	cmp	r0, #0
   e4c6e:	d0e6      	beq.n	e4c3e <mbedtls_ssl_handshake_client_step+0x666>
    if( ssl_validate_ciphersuite( suite_info, ssl, ssl->minor_ver, ssl->minor_ver ) != 0 )
   e4c70:	68e3      	ldr	r3, [r4, #12]
    if( suite_info->min_minor_ver > max_minor_ver ||
   e4c72:	6902      	ldr	r2, [r0, #16]
   e4c74:	4293      	cmp	r3, r2
   e4c76:	dbe2      	blt.n	e4c3e <mbedtls_ssl_handshake_client_step+0x666>
   e4c78:	6982      	ldr	r2, [r0, #24]
   e4c7a:	4293      	cmp	r3, r2
   e4c7c:	dcdf      	bgt.n	e4c3e <mbedtls_ssl_handshake_client_step+0x666>
    ssl->session_negotiate->compression = comp;
   e4c7e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e4c80:	2200      	movs	r2, #0
    ext = buf + 40 + n;
   e4c82:	3628      	adds	r6, #40	; 0x28
    ssl->session_negotiate->compression = comp;
   e4c84:	605a      	str	r2, [r3, #4]
    ext = buf + 40 + n;
   e4c86:	444e      	add	r6, r9
    ssl->handshake->new_session_ticket = 1;
   e4c88:	2301      	movs	r3, #1
        switch( ext_id )
   e4c8a:	f64f 7201 	movw	r2, #65281	; 0xff01
    while( ext_len )
   e4c8e:	2f00      	cmp	r7, #0
   e4c90:	d057      	beq.n	e4d42 <mbedtls_ssl_handshake_client_step+0x76a>
        unsigned int ext_id   = ( ( ext[0] <<  8 )
   e4c92:	8871      	ldrh	r1, [r6, #2]
   e4c94:	8830      	ldrh	r0, [r6, #0]
   e4c96:	ba49      	rev16	r1, r1
   e4c98:	b289      	uxth	r1, r1
        if( ext_size + 4 > ext_len )
   e4c9a:	f101 0c04 	add.w	ip, r1, #4
   e4c9e:	ba40      	rev16	r0, r0
   e4ca0:	4567      	cmp	r7, ip
   e4ca2:	b280      	uxth	r0, r0
   e4ca4:	f4ff af68 	bcc.w	e4b78 <mbedtls_ssl_handshake_client_step+0x5a0>
        switch( ext_id )
   e4ca8:	2823      	cmp	r0, #35	; 0x23
   e4caa:	d027      	beq.n	e4cfc <mbedtls_ssl_handshake_client_step+0x724>
   e4cac:	dc0a      	bgt.n	e4cc4 <mbedtls_ssl_handshake_client_step+0x6ec>
   e4cae:	2801      	cmp	r0, #1
   e4cb0:	d013      	beq.n	e4cda <mbedtls_ssl_handshake_client_step+0x702>
   e4cb2:	280b      	cmp	r0, #11
   e4cb4:	d02d      	beq.n	e4d12 <mbedtls_ssl_handshake_client_step+0x73a>
        ext_len -= 4 + ext_size;
   e4cb6:	1a79      	subs	r1, r7, r1
   e4cb8:	1f0f      	subs	r7, r1, #4
        if( ext_len > 0 && ext_len < 4 )
   e4cba:	3905      	subs	r1, #5
   e4cbc:	2902      	cmp	r1, #2
        ext += 4 + ext_size;
   e4cbe:	4466      	add	r6, ip
        if( ext_len > 0 && ext_len < 4 )
   e4cc0:	d8e5      	bhi.n	e4c8e <mbedtls_ssl_handshake_client_step+0x6b6>
   e4cc2:	e75e      	b.n	e4b82 <mbedtls_ssl_handshake_client_step+0x5aa>
        switch( ext_id )
   e4cc4:	4290      	cmp	r0, r2
   e4cc6:	d1f6      	bne.n	e4cb6 <mbedtls_ssl_handshake_client_step+0x6de>
        if( len != 1 || buf[0] != 0x00 )
   e4cc8:	2901      	cmp	r1, #1
   e4cca:	d101      	bne.n	e4cd0 <mbedtls_ssl_handshake_client_step+0x6f8>
   e4ccc:	7930      	ldrb	r0, [r6, #4]
   e4cce:	b108      	cbz	r0, e4cd4 <mbedtls_ssl_handshake_client_step+0x6fc>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   e4cd0:	2228      	movs	r2, #40	; 0x28
   e4cd2:	e752      	b.n	e4b7a <mbedtls_ssl_handshake_client_step+0x5a2>
        ssl->secure_renegotiation = MBEDTLS_SSL_SECURE_RENEGOTIATION;
   e4cd4:	f8c4 10b8 	str.w	r1, [r4, #184]	; 0xb8
    return( 0 );
   e4cd8:	e7ed      	b.n	e4cb6 <mbedtls_ssl_handshake_client_step+0x6de>
    if( ssl->conf->mfl_code == MBEDTLS_SSL_MAX_FRAG_LEN_NONE ||
   e4cda:	6820      	ldr	r0, [r4, #0]
   e4cdc:	f8b0 007c 	ldrh.w	r0, [r0, #124]	; 0x7c
   e4ce0:	f400 7ee0 	and.w	lr, r0, #448	; 0x1c0
   e4ce4:	f1be 0f00 	cmp.w	lr, #0
   e4ce8:	d0f2      	beq.n	e4cd0 <mbedtls_ssl_handshake_client_step+0x6f8>
   e4cea:	2901      	cmp	r1, #1
   e4cec:	d1f0      	bne.n	e4cd0 <mbedtls_ssl_handshake_client_step+0x6f8>
        len != 1 ||
   e4cee:	f896 e004 	ldrb.w	lr, [r6, #4]
   e4cf2:	f3c0 1082 	ubfx	r0, r0, #6, #3
   e4cf6:	4586      	cmp	lr, r0
   e4cf8:	d0dd      	beq.n	e4cb6 <mbedtls_ssl_handshake_client_step+0x6de>
   e4cfa:	e7e9      	b.n	e4cd0 <mbedtls_ssl_handshake_client_step+0x6f8>
    if( ssl->conf->session_tickets == MBEDTLS_SSL_SESSION_TICKETS_DISABLED ||
   e4cfc:	6820      	ldr	r0, [r4, #0]
   e4cfe:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
   e4d02:	0780      	lsls	r0, r0, #30
   e4d04:	d5e4      	bpl.n	e4cd0 <mbedtls_ssl_handshake_client_step+0x6f8>
   e4d06:	2900      	cmp	r1, #0
   e4d08:	d1e2      	bne.n	e4cd0 <mbedtls_ssl_handshake_client_step+0x6f8>
    ssl->handshake->new_session_ticket = 1;
   e4d0a:	6b20      	ldr	r0, [r4, #48]	; 0x30
   e4d0c:	f8c0 3358 	str.w	r3, [r0, #856]	; 0x358
    return( 0 );
   e4d10:	e7d1      	b.n	e4cb6 <mbedtls_ssl_handshake_client_step+0x6de>
    if( len == 0 || (size_t)( buf[0] + 1 ) != len )
   e4d12:	2900      	cmp	r1, #0
   e4d14:	f43f af30 	beq.w	e4b78 <mbedtls_ssl_handshake_client_step+0x5a0>
   e4d18:	7930      	ldrb	r0, [r6, #4]
   e4d1a:	f100 0e01 	add.w	lr, r0, #1
   e4d1e:	4571      	cmp	r1, lr
   e4d20:	f47f af2a 	bne.w	e4b78 <mbedtls_ssl_handshake_client_step+0x5a0>
    p = buf + 1;
   e4d24:	f106 0e04 	add.w	lr, r6, #4
    while( list_size > 0 )
   e4d28:	2800      	cmp	r0, #0
   e4d2a:	d0d1      	beq.n	e4cd0 <mbedtls_ssl_handshake_client_step+0x6f8>
        if( p[0] == MBEDTLS_ECP_PF_UNCOMPRESSED ||
   e4d2c:	f81e 8f01 	ldrb.w	r8, [lr, #1]!
   e4d30:	f1b8 0f01 	cmp.w	r8, #1
   e4d34:	d803      	bhi.n	e4d3e <mbedtls_ssl_handshake_client_step+0x766>
            ssl->handshake->ecdh_ctx.point_format = p[0];
   e4d36:	6b20      	ldr	r0, [r4, #48]	; 0x30
   e4d38:	f8c0 80e0 	str.w	r8, [r0, #224]	; 0xe0
            return( 0 );
   e4d3c:	e7bb      	b.n	e4cb6 <mbedtls_ssl_handshake_client_step+0x6de>
        list_size--;
   e4d3e:	3801      	subs	r0, #1
    while( list_size > 0 )
   e4d40:	e7f2      	b.n	e4d28 <mbedtls_ssl_handshake_client_step+0x750>
    if( ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
   e4d42:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   e4d46:	2b00      	cmp	r3, #0
   e4d48:	f47f acab 	bne.w	e46a2 <mbedtls_ssl_handshake_client_step+0xca>
        ssl->conf->allow_legacy_renegotiation == MBEDTLS_SSL_LEGACY_BREAK_HANDSHAKE )
   e4d4c:	6823      	ldr	r3, [r4, #0]
   e4d4e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
    if( ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
   e4d52:	f003 0330 	and.w	r3, r3, #48	; 0x30
   e4d56:	2b20      	cmp	r3, #32
   e4d58:	f47f aca3 	bne.w	e46a2 <mbedtls_ssl_handshake_client_step+0xca>
   e4d5c:	e7b8      	b.n	e4cd0 <mbedtls_ssl_handshake_client_step+0x6f8>
           ret = mbedtls_ssl_parse_certificate( ssl );
   e4d5e:	4620      	mov	r0, r4
   e4d60:	f7fb fba8 	bl	e04b4 <mbedtls_ssl_parse_certificate>
   e4d64:	4605      	mov	r5, r0
   e4d66:	e49c      	b.n	e46a2 <mbedtls_ssl_handshake_client_step+0xca>
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
   e4d68:	6c23      	ldr	r3, [r4, #64]	; 0x40
   e4d6a:	f8d3 8000 	ldr.w	r8, [r3]
    unsigned char *p = NULL, *end = NULL;
   e4d6e:	2300      	movs	r3, #0
   e4d70:	930a      	str	r3, [sp, #40]	; 0x28
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA )
   e4d72:	f898 300a 	ldrb.w	r3, [r8, #10]
   e4d76:	2b01      	cmp	r3, #1
   e4d78:	d10a      	bne.n	e4d90 <mbedtls_ssl_handshake_client_step+0x7b8>
        ssl->state++;
   e4d7a:	2305      	movs	r3, #5
           ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
   e4d7c:	6063      	str	r3, [r4, #4]
           break;
   e4d7e:	e490      	b.n	e46a2 <mbedtls_ssl_handshake_client_step+0xca>
   e4d80:	ffff8900 	.word	0xffff8900
   e4d84:	ffff9180 	.word	0xffff9180
   e4d88:	ffff8680 	.word	0xffff8680
   e4d8c:	ffff8f80 	.word	0xffff8f80
    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   e4d90:	2101      	movs	r1, #1
   e4d92:	4620      	mov	r0, r4
   e4d94:	f7fa fd08 	bl	df7a8 <mbedtls_ssl_read_record>
   e4d98:	4605      	mov	r5, r0
   e4d9a:	2800      	cmp	r0, #0
   e4d9c:	f47f ac81 	bne.w	e46a2 <mbedtls_ssl_handshake_client_step+0xca>
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
   e4da0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   e4da2:	2b16      	cmp	r3, #22
   e4da4:	f47f ae8c 	bne.w	e4ac0 <mbedtls_ssl_handshake_client_step+0x4e8>
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_KEY_EXCHANGE )
   e4da8:	6e63      	ldr	r3, [r4, #100]	; 0x64
   e4daa:	f898 100a 	ldrb.w	r1, [r8, #10]
   e4dae:	781a      	ldrb	r2, [r3, #0]
   e4db0:	2a0c      	cmp	r2, #12
   e4db2:	d00a      	beq.n	e4dca <mbedtls_ssl_handshake_client_step+0x7f2>
        if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
   e4db4:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
   e4db8:	2905      	cmp	r1, #5
   e4dba:	f47f ae81 	bne.w	e4ac0 <mbedtls_ssl_handshake_client_step+0x4e8>
            ssl->keep_current_message = 1;
   e4dbe:	2301      	movs	r3, #1
   e4dc0:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        ssl->state++;
   e4dc4:	6863      	ldr	r3, [r4, #4]
   e4dc6:	3301      	adds	r3, #1
   e4dc8:	e7d8      	b.n	e4d7c <mbedtls_ssl_handshake_client_step+0x7a4>
    p   = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );
   e4dca:	1d1a      	adds	r2, r3, #4
   e4dcc:	920a      	str	r2, [sp, #40]	; 0x28
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
   e4dce:	1f48      	subs	r0, r1, #5
    end = ssl->in_msg + ssl->in_hslen;
   e4dd0:	6fa2      	ldr	r2, [r4, #120]	; 0x78
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
   e4dd2:	2803      	cmp	r0, #3
    end = ssl->in_msg + ssl->in_hslen;
   e4dd4:	eb03 0602 	add.w	r6, r3, r2
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
   e4dd8:	d905      	bls.n	e4de6 <mbedtls_ssl_handshake_client_step+0x80e>
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_RSA ||
   e4dda:	3903      	subs	r1, #3
   e4ddc:	2901      	cmp	r1, #1
   e4dde:	f240 8279 	bls.w	e52d4 <mbedtls_ssl_handshake_client_step+0xcfc>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   e4de2:	4da3      	ldr	r5, [pc, #652]	; (e5070 <mbedtls_ssl_handshake_client_step+0xa98>)
   e4de4:	e45d      	b.n	e46a2 <mbedtls_ssl_handshake_client_step+0xca>
    if( end - (*p) < 2 )
   e4de6:	2a05      	cmp	r2, #5
   e4de8:	dd07      	ble.n	e4dfa <mbedtls_ssl_handshake_client_step+0x822>
    len = (*p)[0] << 8 | (*p)[1];
   e4dea:	889a      	ldrh	r2, [r3, #4]
    *p += 2;
   e4dec:	3306      	adds	r3, #6
   e4dee:	ba52      	rev16	r2, r2
   e4df0:	b292      	uxth	r2, r2
    if( end - (*p) < (int) len )
   e4df2:	1af0      	subs	r0, r6, r3
   e4df4:	4282      	cmp	r2, r0
   e4df6:	dd07      	ble.n	e4e08 <mbedtls_ssl_handshake_client_step+0x830>
    *p += 2;
   e4df8:	930a      	str	r3, [sp, #40]	; 0x28
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   e4dfa:	222f      	movs	r2, #47	; 0x2f
   e4dfc:	2102      	movs	r1, #2
   e4dfe:	4620      	mov	r0, r4
   e4e00:	f7fa fcb8 	bl	df774 <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );
   e4e04:	4d9b      	ldr	r5, [pc, #620]	; (e5074 <mbedtls_ssl_handshake_client_step+0xa9c>)
   e4e06:	e44c      	b.n	e46a2 <mbedtls_ssl_handshake_client_step+0xca>
    *p += len;
   e4e08:	4413      	add	r3, r2
   e4e0a:	930a      	str	r3, [sp, #40]	; 0x28
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
   e4e0c:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
   e4e10:	2b05      	cmp	r3, #5
   e4e12:	f040 825c 	bne.w	e52ce <mbedtls_ssl_handshake_client_step+0xcf6>
#endif /* MBEDTLS_KEY_EXCHANGE__SOME__ECDHE_ENABLED) */

#if defined(MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED)
static inline int mbedtls_ssl_ciphersuite_uses_server_signature( const mbedtls_ssl_ciphersuite_t *info )
{
    switch( info->key_exchange )
   e4e16:	f898 300a 	ldrb.w	r3, [r8, #10]
   e4e1a:	3b02      	subs	r3, #2
   e4e1c:	2b02      	cmp	r3, #2
   e4e1e:	d8d1      	bhi.n	e4dc4 <mbedtls_ssl_handshake_client_step+0x7ec>
        if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
   e4e20:	68e3      	ldr	r3, [r4, #12]
   e4e22:	2b03      	cmp	r3, #3
   e4e24:	d175      	bne.n	e4f12 <mbedtls_ssl_handshake_client_step+0x93a>
        size_t params_len = p - params;
   e4e26:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    if( (*p) + 2 > end )
   e4e2a:	f10a 0302 	add.w	r3, sl, #2
   e4e2e:	429e      	cmp	r6, r3
   e4e30:	d31a      	bcc.n	e4e68 <mbedtls_ssl_handshake_client_step+0x890>
    if( ( *md_alg = mbedtls_ssl_md_alg_from_hash( (*p)[0] ) ) == MBEDTLS_MD_NONE )
   e4e32:	f89a 0000 	ldrb.w	r0, [sl]
        unsigned char *params = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );
   e4e36:	f8d4 b064 	ldr.w	fp, [r4, #100]	; 0x64
    if( ( *md_alg = mbedtls_ssl_md_alg_from_hash( (*p)[0] ) ) == MBEDTLS_MD_NONE )
   e4e3a:	f7fb fad6 	bl	e03ea <mbedtls_ssl_md_alg_from_hash>
   e4e3e:	4607      	mov	r7, r0
   e4e40:	b190      	cbz	r0, e4e68 <mbedtls_ssl_handshake_client_step+0x890>
    if( ( *pk_alg = mbedtls_ssl_pk_alg_from_sig( (*p)[1] ) ) == MBEDTLS_PK_NONE )
   e4e42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e4e44:	7858      	ldrb	r0, [r3, #1]
   e4e46:	f7fb fac9 	bl	e03dc <mbedtls_ssl_pk_alg_from_sig>
   e4e4a:	4681      	mov	r9, r0
   e4e4c:	b160      	cbz	r0, e4e68 <mbedtls_ssl_handshake_client_step+0x890>
    if( mbedtls_ssl_check_sig_hash( ssl, *md_alg ) != 0 )
   e4e4e:	4639      	mov	r1, r7
   e4e50:	4620      	mov	r0, r4
   e4e52:	f7fb fae6 	bl	e0422 <mbedtls_ssl_check_sig_hash>
   e4e56:	b938      	cbnz	r0, e4e68 <mbedtls_ssl_handshake_client_step+0x890>
    *p += 2;
   e4e58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
            if( pk_alg != mbedtls_ssl_get_ciphersuite_sig_pk_alg( ciphersuite_info ) )
   e4e5a:	4640      	mov	r0, r8
    *p += 2;
   e4e5c:	3302      	adds	r3, #2
   e4e5e:	930a      	str	r3, [sp, #40]	; 0x28
            if( pk_alg != mbedtls_ssl_get_ciphersuite_sig_pk_alg( ciphersuite_info ) )
   e4e60:	f7ff f838 	bl	e3ed4 <mbedtls_ssl_get_ciphersuite_sig_pk_alg>
   e4e64:	4548      	cmp	r0, r9
   e4e66:	d007      	beq.n	e4e78 <mbedtls_ssl_handshake_client_step+0x8a0>
                mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   e4e68:	222f      	movs	r2, #47	; 0x2f
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   e4e6a:	2102      	movs	r1, #2
   e4e6c:	4620      	mov	r0, r4
   e4e6e:	f7fa fc81 	bl	df774 <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );
   e4e72:	4e80      	ldr	r6, [pc, #512]	; (e5074 <mbedtls_ssl_handshake_client_step+0xa9c>)
   e4e74:	4635      	mov	r5, r6
   e4e76:	e414      	b.n	e46a2 <mbedtls_ssl_handshake_client_step+0xca>
        if( p > end - 2 )
   e4e78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e4e7a:	1eb2      	subs	r2, r6, #2
   e4e7c:	4293      	cmp	r3, r2
   e4e7e:	d901      	bls.n	e4e84 <mbedtls_ssl_handshake_client_step+0x8ac>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   e4e80:	2232      	movs	r2, #50	; 0x32
   e4e82:	e7f2      	b.n	e4e6a <mbedtls_ssl_handshake_client_step+0x892>
        sig_len = ( p[0] << 8 ) | p[1];
   e4e84:	f833 8b02 	ldrh.w	r8, [r3], #2
        p += 2;
   e4e88:	930a      	str	r3, [sp, #40]	; 0x28
        sig_len = ( p[0] << 8 ) | p[1];
   e4e8a:	fa98 f898 	rev16.w	r8, r8
   e4e8e:	fa1f f888 	uxth.w	r8, r8
        if( p != end - sig_len )
   e4e92:	eba6 0608 	sub.w	r6, r6, r8
   e4e96:	42b3      	cmp	r3, r6
   e4e98:	d1f2      	bne.n	e4e80 <mbedtls_ssl_handshake_client_step+0x8a8>
        unsigned char *params = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );
   e4e9a:	f10b 0304 	add.w	r3, fp, #4
        size_t params_len = p - params;
   e4e9e:	ebaa 0203 	sub.w	r2, sl, r3
            ret = mbedtls_ssl_get_key_exchange_md_tls1_2( ssl, hash, &hashlen,
   e4ea2:	9200      	str	r2, [sp, #0]
   e4ea4:	9701      	str	r7, [sp, #4]
   e4ea6:	aa0b      	add	r2, sp, #44	; 0x2c
   e4ea8:	a90c      	add	r1, sp, #48	; 0x30
   e4eaa:	4620      	mov	r0, r4
   e4eac:	f7fb fc3e 	bl	e072c <mbedtls_ssl_get_key_exchange_md_tls1_2>
            if( ret != 0 )
   e4eb0:	4606      	mov	r6, r0
   e4eb2:	2800      	cmp	r0, #0
   e4eb4:	d1de      	bne.n	e4e74 <mbedtls_ssl_handshake_client_step+0x89c>
        if( ssl->session_negotiate->peer_cert == NULL )
   e4eb6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e4eb8:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
   e4eba:	b938      	cbnz	r0, e4ecc <mbedtls_ssl_handshake_client_step+0x8f4>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   e4ebc:	2228      	movs	r2, #40	; 0x28
   e4ebe:	2102      	movs	r1, #2
   e4ec0:	4620      	mov	r0, r4
   e4ec2:	f7fa fc57 	bl	df774 <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
   e4ec6:	f5a6 46ee 	sub.w	r6, r6, #30464	; 0x7700
   e4eca:	e7d3      	b.n	e4e74 <mbedtls_ssl_handshake_client_step+0x89c>
        if( ! mbedtls_pk_can_do( &ssl->session_negotiate->peer_cert->pk, pk_alg ) )
   e4ecc:	4649      	mov	r1, r9
   e4ece:	30bc      	adds	r0, #188	; 0xbc
   e4ed0:	f7f9 fde8 	bl	deaa4 <mbedtls_pk_can_do>
   e4ed4:	b930      	cbnz	r0, e4ee4 <mbedtls_ssl_handshake_client_step+0x90c>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   e4ed6:	2228      	movs	r2, #40	; 0x28
   e4ed8:	2102      	movs	r1, #2
   e4eda:	4620      	mov	r0, r4
   e4edc:	f7fa fc4a 	bl	df774 <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH );
   e4ee0:	4e65      	ldr	r6, [pc, #404]	; (e5078 <mbedtls_ssl_handshake_client_step+0xaa0>)
   e4ee2:	e7c7      	b.n	e4e74 <mbedtls_ssl_handshake_client_step+0x89c>
                        &ssl->session_negotiate->peer_cert->pk,
   e4ee4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        if( ( ret = mbedtls_pk_verify_restartable(
   e4ee6:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
   e4ee8:	2300      	movs	r3, #0
   e4eea:	e9cd 8301 	strd	r8, r3, [sp, #4]
   e4eee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e4ef0:	9300      	str	r3, [sp, #0]
   e4ef2:	aa0c      	add	r2, sp, #48	; 0x30
   e4ef4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   e4ef6:	4639      	mov	r1, r7
   e4ef8:	30bc      	adds	r0, #188	; 0xbc
   e4efa:	f7f9 fddd 	bl	deab8 <mbedtls_pk_verify_restartable>
   e4efe:	4606      	mov	r6, r0
   e4f00:	2800      	cmp	r0, #0
   e4f02:	f43f af5f 	beq.w	e4dc4 <mbedtls_ssl_handshake_client_step+0x7ec>
                mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   e4f06:	2233      	movs	r2, #51	; 0x33
   e4f08:	2102      	movs	r1, #2
   e4f0a:	4620      	mov	r0, r4
   e4f0c:	f7fa fc32 	bl	df774 <mbedtls_ssl_send_alert_message>
            return( ret );
   e4f10:	e7b0      	b.n	e4e74 <mbedtls_ssl_handshake_client_step+0x89c>
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   e4f12:	4e57      	ldr	r6, [pc, #348]	; (e5070 <mbedtls_ssl_handshake_client_step+0xa98>)
   e4f14:	e7ae      	b.n	e4e74 <mbedtls_ssl_handshake_client_step+0x89c>
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
   e4f16:	6c23      	ldr	r3, [r4, #64]	; 0x40
    if( ! mbedtls_ssl_ciphersuite_cert_req_allowed( ciphersuite_info ) )
   e4f18:	681b      	ldr	r3, [r3, #0]
   e4f1a:	7a9b      	ldrb	r3, [r3, #10]
    switch( info->key_exchange )
   e4f1c:	2b04      	cmp	r3, #4
   e4f1e:	d81b      	bhi.n	e4f58 <mbedtls_ssl_handshake_client_step+0x980>
   e4f20:	b1eb      	cbz	r3, e4f5e <mbedtls_ssl_handshake_client_step+0x986>
    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   e4f22:	2101      	movs	r1, #1
   e4f24:	4620      	mov	r0, r4
   e4f26:	f7fa fc3f 	bl	df7a8 <mbedtls_ssl_read_record>
   e4f2a:	2800      	cmp	r0, #0
   e4f2c:	f47f af1a 	bne.w	e4d64 <mbedtls_ssl_handshake_client_step+0x78c>
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
   e4f30:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   e4f32:	2b16      	cmp	r3, #22
   e4f34:	f47f adc4 	bne.w	e4ac0 <mbedtls_ssl_handshake_client_step+0x4e8>
    ssl->state++;
   e4f38:	6863      	ldr	r3, [r4, #4]
    ssl->client_auth = ( ssl->in_msg[0] == MBEDTLS_SSL_HS_CERTIFICATE_REQUEST );
   e4f3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
    ssl->state++;
   e4f3c:	3301      	adds	r3, #1
   e4f3e:	6063      	str	r3, [r4, #4]
    ssl->client_auth = ( ssl->in_msg[0] == MBEDTLS_SSL_HS_CERTIFICATE_REQUEST );
   e4f40:	7813      	ldrb	r3, [r2, #0]
   e4f42:	2b0d      	cmp	r3, #13
   e4f44:	bf0c      	ite	eq
   e4f46:	2301      	moveq	r3, #1
   e4f48:	2300      	movne	r3, #0
   e4f4a:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
    if( ssl->client_auth == 0 )
   e4f4e:	d008      	beq.n	e4f62 <mbedtls_ssl_handshake_client_step+0x98a>
        ssl->keep_current_message = 1;
   e4f50:	2301      	movs	r3, #1
   e4f52:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        goto exit;
   e4f56:	e705      	b.n	e4d64 <mbedtls_ssl_handshake_client_step+0x78c>
   e4f58:	3b09      	subs	r3, #9
   e4f5a:	2b01      	cmp	r3, #1
   e4f5c:	d9e1      	bls.n	e4f22 <mbedtls_ssl_handshake_client_step+0x94a>
        ssl->state++;
   e4f5e:	2306      	movs	r3, #6
   e4f60:	e70c      	b.n	e4d7c <mbedtls_ssl_handshake_client_step+0x7a4>
    if( ssl->in_hslen <= mbedtls_ssl_hs_hdr_len( ssl ) )
   e4f62:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   e4f64:	2e04      	cmp	r6, #4
   e4f66:	d807      	bhi.n	e4f78 <mbedtls_ssl_handshake_client_step+0x9a0>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   e4f68:	2232      	movs	r2, #50	; 0x32
   e4f6a:	2102      	movs	r1, #2
   e4f6c:	4620      	mov	r0, r4
   e4f6e:	f7fa fc01 	bl	df774 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST );
   e4f72:	4d42      	ldr	r5, [pc, #264]	; (e507c <mbedtls_ssl_handshake_client_step+0xaa4>)
   e4f74:	f7ff bb95 	b.w	e46a2 <mbedtls_ssl_handshake_client_step+0xca>
    cert_type_len = buf[mbedtls_ssl_hs_hdr_len( ssl )];
   e4f78:	7913      	ldrb	r3, [r2, #4]
    if( ssl->in_hslen <= mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n )
   e4f7a:	1d98      	adds	r0, r3, #6
   e4f7c:	4286      	cmp	r6, r0
   e4f7e:	d9f3      	bls.n	e4f68 <mbedtls_ssl_handshake_client_step+0x990>
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
   e4f80:	18d1      	adds	r1, r2, r3
   e4f82:	794f      	ldrb	r7, [r1, #5]
   e4f84:	5c11      	ldrb	r1, [r2, r0]
   e4f86:	68e0      	ldr	r0, [r4, #12]
   e4f88:	2803      	cmp	r0, #3
   e4f8a:	d107      	bne.n	e4f9c <mbedtls_ssl_handshake_client_step+0x9c4>
   e4f8c:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
        if( ssl->in_hslen <= mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n + sig_alg_len )
   e4f90:	1dd8      	adds	r0, r3, #7
   e4f92:	4408      	add	r0, r1
   e4f94:	4286      	cmp	r6, r0
   e4f96:	d9e7      	bls.n	e4f68 <mbedtls_ssl_handshake_client_step+0x990>
        n += 2 + sig_alg_len;
   e4f98:	3302      	adds	r3, #2
   e4f9a:	440b      	add	r3, r1
    dn_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )
   e4f9c:	441a      	add	r2, r3
    if( ssl->in_hslen != mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n )
   e4f9e:	3307      	adds	r3, #7
    dn_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )
   e4fa0:	7951      	ldrb	r1, [r2, #5]
             | ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n]       ) );
   e4fa2:	7992      	ldrb	r2, [r2, #6]
   e4fa4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    if( ssl->in_hslen != mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n )
   e4fa8:	4413      	add	r3, r2
   e4faa:	429e      	cmp	r6, r3
   e4fac:	f43f ab79 	beq.w	e46a2 <mbedtls_ssl_handshake_client_step+0xca>
   e4fb0:	e7da      	b.n	e4f68 <mbedtls_ssl_handshake_client_step+0x990>
    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   e4fb2:	2101      	movs	r1, #1
   e4fb4:	4620      	mov	r0, r4
   e4fb6:	f7fa fbf7 	bl	df7a8 <mbedtls_ssl_read_record>
   e4fba:	4605      	mov	r5, r0
   e4fbc:	2800      	cmp	r0, #0
   e4fbe:	f47f ab70 	bne.w	e46a2 <mbedtls_ssl_handshake_client_step+0xca>
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
   e4fc2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   e4fc4:	2b16      	cmp	r3, #22
   e4fc6:	f47f ad80 	bne.w	e4aca <mbedtls_ssl_handshake_client_step+0x4f2>
    if( ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ||
   e4fca:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   e4fcc:	2b04      	cmp	r3, #4
   e4fce:	d104      	bne.n	e4fda <mbedtls_ssl_handshake_client_step+0xa02>
        ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_HELLO_DONE )
   e4fd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
    if( ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ||
   e4fd2:	781b      	ldrb	r3, [r3, #0]
   e4fd4:	2b0e      	cmp	r3, #14
   e4fd6:	f43f aef5 	beq.w	e4dc4 <mbedtls_ssl_handshake_client_step+0x7ec>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   e4fda:	2232      	movs	r2, #50	; 0x32
   e4fdc:	2102      	movs	r1, #2
   e4fde:	4620      	mov	r0, r4
   e4fe0:	f7fa fbc8 	bl	df774 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO_DONE );
   e4fe4:	4d26      	ldr	r5, [pc, #152]	; (e5080 <mbedtls_ssl_handshake_client_step+0xaa8>)
   e4fe6:	f7ff bb5c 	b.w	e46a2 <mbedtls_ssl_handshake_client_step+0xca>
           ret = mbedtls_ssl_write_certificate( ssl );
   e4fea:	4620      	mov	r0, r4
   e4fec:	f7fa fd1e 	bl	dfa2c <mbedtls_ssl_write_certificate>
   e4ff0:	e6b8      	b.n	e4d64 <mbedtls_ssl_handshake_client_step+0x78c>
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
   e4ff2:	6c23      	ldr	r3, [r4, #64]	; 0x40
   e4ff4:	681e      	ldr	r6, [r3, #0]
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_RSA ||
   e4ff6:	7ab3      	ldrb	r3, [r6, #10]
   e4ff8:	1eda      	subs	r2, r3, #3
   e4ffa:	2a01      	cmp	r2, #1
   e4ffc:	d902      	bls.n	e5004 <mbedtls_ssl_handshake_client_step+0xa2c>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA ||
   e4ffe:	3b09      	subs	r3, #9
   e5000:	2b01      	cmp	r3, #1
   e5002:	d83f      	bhi.n	e5084 <mbedtls_ssl_handshake_client_step+0xaac>
                                ssl->conf->f_rng, ssl->conf->p_rng );
   e5004:	6823      	ldr	r3, [r4, #0]
        ret = mbedtls_ecdh_make_public( &ssl->handshake->ecdh_ctx,
   e5006:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   e500a:	69d9      	ldr	r1, [r3, #28]
   e500c:	9101      	str	r1, [sp, #4]
   e500e:	6b20      	ldr	r0, [r4, #48]	; 0x30
   e5010:	699b      	ldr	r3, [r3, #24]
   e5012:	9300      	str	r3, [sp, #0]
   e5014:	3204      	adds	r2, #4
   e5016:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   e501a:	a90c      	add	r1, sp, #48	; 0x30
   e501c:	3004      	adds	r0, #4
   e501e:	f7f0 ffc7 	bl	d5fb0 <mbedtls_ecdh_make_public>
        if( ret != 0 )
   e5022:	4605      	mov	r5, r0
   e5024:	2800      	cmp	r0, #0
   e5026:	f47f ab3c 	bne.w	e46a2 <mbedtls_ssl_handshake_client_step+0xca>
                                       ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
   e502a:	6823      	ldr	r3, [r4, #0]
        if( ( ret = mbedtls_ecdh_calc_secret( &ssl->handshake->ecdh_ctx,
   e502c:	6b20      	ldr	r0, [r4, #48]	; 0x30
   e502e:	69da      	ldr	r2, [r3, #28]
   e5030:	9201      	str	r2, [sp, #4]
   e5032:	699b      	ldr	r3, [r3, #24]
   e5034:	9300      	str	r3, [sp, #0]
   e5036:	f500 723d 	add.w	r2, r0, #756	; 0x2f4
   e503a:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
   e503e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   e5042:	3004      	adds	r0, #4
   e5044:	f7f0 ffda 	bl	d5ffc <mbedtls_ecdh_calc_secret>
   e5048:	4605      	mov	r5, r0
   e504a:	2800      	cmp	r0, #0
   e504c:	f47f ab29 	bne.w	e46a2 <mbedtls_ssl_handshake_client_step+0xca>
        i = 4;
   e5050:	2704      	movs	r7, #4
    ssl->out_msglen  = i + n;
   e5052:	990c      	ldr	r1, [sp, #48]	; 0x30
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
   e5054:	2316      	movs	r3, #22
    ssl->out_msglen  = i + n;
   e5056:	4439      	add	r1, r7
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
   e5058:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_KEY_EXCHANGE;
   e505c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    ssl->out_msglen  = i + n;
   e5060:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_KEY_EXCHANGE;
   e5064:	2210      	movs	r2, #16
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE_VERIFY;
   e5066:	701a      	strb	r2, [r3, #0]
    ssl->state++;
   e5068:	6863      	ldr	r3, [r4, #4]
   e506a:	3301      	adds	r3, #1
   e506c:	e4d2      	b.n	e4a14 <mbedtls_ssl_handshake_client_step+0x43c>
   e506e:	bf00      	nop
   e5070:	ffff9400 	.word	0xffff9400
   e5074:	ffff8500 	.word	0xffff8500
   e5078:	ffff9300 	.word	0xffff9300
   e507c:	ffff8580 	.word	0xffff8580
   e5080:	ffff8480 	.word	0xffff8480
    if( mbedtls_ssl_ciphersuite_uses_psk( ciphersuite_info ) )
   e5084:	4630      	mov	r0, r6
   e5086:	f7fe ff44 	bl	e3f12 <mbedtls_ssl_ciphersuite_uses_psk>
   e508a:	2800      	cmp	r0, #0
   e508c:	d03d      	beq.n	e510a <mbedtls_ssl_handshake_client_step+0xb32>
        if( ssl->conf->psk == NULL || ssl->conf->psk_identity == NULL )
   e508e:	6823      	ldr	r3, [r4, #0]
   e5090:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   e5092:	2a00      	cmp	r2, #0
   e5094:	f000 80ba 	beq.w	e520c <mbedtls_ssl_handshake_client_step+0xc34>
   e5098:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   e509a:	2a00      	cmp	r2, #0
   e509c:	f000 80b6 	beq.w	e520c <mbedtls_ssl_handshake_client_step+0xc34>
        n = ssl->conf->psk_identity_len;
   e50a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   e50a2:	930c      	str	r3, [sp, #48]	; 0x30
        if( i + 2 + n > MBEDTLS_SSL_OUT_CONTENT_LEN )
   e50a4:	1d9a      	adds	r2, r3, #6
   e50a6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   e50aa:	d839      	bhi.n	e5120 <mbedtls_ssl_handshake_client_step+0xb48>
        ssl->out_msg[i++] = (unsigned char)( n >> 8 );
   e50ac:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   e50b0:	0a19      	lsrs	r1, r3, #8
   e50b2:	7111      	strb	r1, [r2, #4]
        ssl->out_msg[i++] = (unsigned char)( n      );
   e50b4:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   e50b8:	7153      	strb	r3, [r2, #5]
        memcpy( ssl->out_msg + i, ssl->conf->psk_identity, ssl->conf->psk_identity_len );
   e50ba:	6823      	ldr	r3, [r4, #0]
   e50bc:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   e50c0:	e9d3 121b 	ldrd	r1, r2, [r3, #108]	; 0x6c
   e50c4:	3006      	adds	r0, #6
   e50c6:	f003 fc01 	bl	e88cc <memcpy>
        i += ssl->conf->psk_identity_len;
   e50ca:	6823      	ldr	r3, [r4, #0]
   e50cc:	6f1f      	ldr	r7, [r3, #112]	; 0x70
        if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK )
   e50ce:	7ab3      	ldrb	r3, [r6, #10]
   e50d0:	2b05      	cmp	r3, #5
        i += ssl->conf->psk_identity_len;
   e50d2:	f107 0706 	add.w	r7, r7, #6
        if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK )
   e50d6:	d10a      	bne.n	e50ee <mbedtls_ssl_handshake_client_step+0xb16>
            n = 0;
   e50d8:	2300      	movs	r3, #0
   e50da:	930c      	str	r3, [sp, #48]	; 0x30
        if( ( ret = mbedtls_ssl_psk_derive_premaster( ssl,
   e50dc:	7ab1      	ldrb	r1, [r6, #10]
   e50de:	4620      	mov	r0, r4
   e50e0:	f7fa f904 	bl	df2ec <mbedtls_ssl_psk_derive_premaster>
   e50e4:	4605      	mov	r5, r0
   e50e6:	2800      	cmp	r0, #0
   e50e8:	d0b3      	beq.n	e5052 <mbedtls_ssl_handshake_client_step+0xa7a>
   e50ea:	f7ff bada 	b.w	e46a2 <mbedtls_ssl_handshake_client_step+0xca>
        if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK )
   e50ee:	2b07      	cmp	r3, #7
   e50f0:	f47f ae77 	bne.w	e4de2 <mbedtls_ssl_handshake_client_step+0x80a>
            if( ( ret = ssl_write_encrypted_pms( ssl, i, &n, 2 ) ) != 0 )
   e50f4:	2302      	movs	r3, #2
   e50f6:	aa0c      	add	r2, sp, #48	; 0x30
   e50f8:	4639      	mov	r1, r7
   e50fa:	4620      	mov	r0, r4
   e50fc:	f7ff f9fc 	bl	e44f8 <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj>
   e5100:	4605      	mov	r5, r0
   e5102:	2800      	cmp	r0, #0
   e5104:	d0ea      	beq.n	e50dc <mbedtls_ssl_handshake_client_step+0xb04>
   e5106:	f7ff bacc 	b.w	e46a2 <mbedtls_ssl_handshake_client_step+0xca>
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA )
   e510a:	7ab3      	ldrb	r3, [r6, #10]
   e510c:	2b01      	cmp	r3, #1
   e510e:	f47f ae68 	bne.w	e4de2 <mbedtls_ssl_handshake_client_step+0x80a>
        if( ( ret = ssl_write_encrypted_pms( ssl, i, &n, 0 ) ) != 0 )
   e5112:	4603      	mov	r3, r0
   e5114:	aa0c      	add	r2, sp, #48	; 0x30
   e5116:	2104      	movs	r1, #4
   e5118:	4620      	mov	r0, r4
   e511a:	f7ff f9ed 	bl	e44f8 <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj>
   e511e:	e793      	b.n	e5048 <mbedtls_ssl_handshake_client_step+0xa70>
            return( MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL );
   e5120:	4d79      	ldr	r5, [pc, #484]	; (e5308 <mbedtls_ssl_handshake_client_step+0xd30>)
           break;
   e5122:	f7ff babe 	b.w	e46a2 <mbedtls_ssl_handshake_client_step+0xca>
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
   e5126:	6c23      	ldr	r3, [r4, #64]	; 0x40
    if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
   e5128:	4620      	mov	r0, r4
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
   e512a:	681e      	ldr	r6, [r3, #0]
    size_t n = 0, offset = 0;
   e512c:	2300      	movs	r3, #0
   e512e:	930b      	str	r3, [sp, #44]	; 0x2c
    if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
   e5130:	f7f9 ff62 	bl	deff8 <mbedtls_ssl_derive_keys>
   e5134:	4605      	mov	r5, r0
   e5136:	2800      	cmp	r0, #0
   e5138:	f47f aab3 	bne.w	e46a2 <mbedtls_ssl_handshake_client_step+0xca>
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
   e513c:	7ab3      	ldrb	r3, [r6, #10]
   e513e:	1f5a      	subs	r2, r3, #5
   e5140:	2a03      	cmp	r2, #3
   e5142:	f67f ae3f 	bls.w	e4dc4 <mbedtls_ssl_handshake_client_step+0x7ec>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
   e5146:	2b0b      	cmp	r3, #11
   e5148:	f43f ae3c 	beq.w	e4dc4 <mbedtls_ssl_handshake_client_step+0x7ec>
    if( ssl->client_auth == 0 || mbedtls_ssl_own_cert( ssl ) == NULL )
   e514c:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   e5150:	2b00      	cmp	r3, #0
   e5152:	f43f ae37 	beq.w	e4dc4 <mbedtls_ssl_handshake_client_step+0x7ec>
    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
   e5156:	6b21      	ldr	r1, [r4, #48]	; 0x30
   e5158:	b111      	cbz	r1, e5160 <mbedtls_ssl_handshake_client_step+0xb88>
   e515a:	f8d1 3144 	ldr.w	r3, [r1, #324]	; 0x144
   e515e:	b923      	cbnz	r3, e516a <mbedtls_ssl_handshake_client_step+0xb92>
        key_cert = ssl->conf->key_cert;
   e5160:	6823      	ldr	r3, [r4, #0]
   e5162:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    return( key_cert == NULL ? NULL : key_cert->cert );
   e5164:	2b00      	cmp	r3, #0
   e5166:	f43f ae2d 	beq.w	e4dc4 <mbedtls_ssl_handshake_client_step+0x7ec>
   e516a:	681b      	ldr	r3, [r3, #0]
   e516c:	2b00      	cmp	r3, #0
   e516e:	f43f ae29 	beq.w	e4dc4 <mbedtls_ssl_handshake_client_step+0x7ec>
    if( mbedtls_ssl_own_key( ssl ) == NULL )
   e5172:	4620      	mov	r0, r4
   e5174:	f7ff f9b4 	bl	e44e0 <mbedtls_ssl_own_key>
   e5178:	2800      	cmp	r0, #0
   e517a:	d047      	beq.n	e520c <mbedtls_ssl_handshake_client_step+0xc34>
    ssl->handshake->calc_verify( ssl, hash );
   e517c:	f8d1 32a4 	ldr.w	r3, [r1, #676]	; 0x2a4
   e5180:	4620      	mov	r0, r4
   e5182:	a90c      	add	r1, sp, #48	; 0x30
   e5184:	4798      	blx	r3
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
   e5186:	68e3      	ldr	r3, [r4, #12]
   e5188:	2b03      	cmp	r3, #3
   e518a:	f47f ae2a 	bne.w	e4de2 <mbedtls_ssl_handshake_client_step+0x80a>
        if( ssl->transform_negotiate->ciphersuite_info->mac ==
   e518e:	6c23      	ldr	r3, [r4, #64]	; 0x40
   e5190:	681b      	ldr	r3, [r3, #0]
   e5192:	7a5d      	ldrb	r5, [r3, #9]
   e5194:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   e5198:	2d07      	cmp	r5, #7
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA384;
   e519a:	bf0b      	itete	eq
   e519c:	2205      	moveq	r2, #5
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
   e519e:	2204      	movne	r2, #4
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA384;
   e51a0:	711a      	strbeq	r2, [r3, #4]
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
   e51a2:	711a      	strbne	r2, [r3, #4]
        ssl->out_msg[5] = mbedtls_ssl_sig_from_pk( mbedtls_ssl_own_key( ssl ) );
   e51a4:	4620      	mov	r0, r4
            md_alg = MBEDTLS_MD_SHA256;
   e51a6:	bf18      	it	ne
   e51a8:	2506      	movne	r5, #6
        ssl->out_msg[5] = mbedtls_ssl_sig_from_pk( mbedtls_ssl_own_key( ssl ) );
   e51aa:	f7ff f999 	bl	e44e0 <mbedtls_ssl_own_key>
   e51ae:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
   e51b2:	f7fb f902 	bl	e03ba <mbedtls_ssl_sig_from_pk>
   e51b6:	7170      	strb	r0, [r6, #5]
    if( ( ret = mbedtls_pk_sign_restartable( mbedtls_ssl_own_key( ssl ),
   e51b8:	4620      	mov	r0, r4
   e51ba:	f7ff f991 	bl	e44e0 <mbedtls_ssl_own_key>
                         ssl->conf->f_rng, ssl->conf->p_rng, rs_ctx ) ) != 0 )
   e51be:	6822      	ldr	r2, [r4, #0]
    if( ( ret = mbedtls_pk_sign_restartable( mbedtls_ssl_own_key( ssl ),
   e51c0:	2300      	movs	r3, #0
   e51c2:	9304      	str	r3, [sp, #16]
   e51c4:	69d1      	ldr	r1, [r2, #28]
   e51c6:	9103      	str	r1, [sp, #12]
   e51c8:	6992      	ldr	r2, [r2, #24]
   e51ca:	9202      	str	r2, [sp, #8]
   e51cc:	aa0b      	add	r2, sp, #44	; 0x2c
   e51ce:	9201      	str	r2, [sp, #4]
   e51d0:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   e51d4:	3208      	adds	r2, #8
   e51d6:	9200      	str	r2, [sp, #0]
   e51d8:	4629      	mov	r1, r5
   e51da:	aa0c      	add	r2, sp, #48	; 0x30
   e51dc:	f7f9 fca0 	bl	deb20 <mbedtls_pk_sign_restartable>
   e51e0:	4605      	mov	r5, r0
   e51e2:	2800      	cmp	r0, #0
   e51e4:	f47f aa5d 	bne.w	e46a2 <mbedtls_ssl_handshake_client_step+0xca>
    ssl->out_msg[4 + offset] = (unsigned char)( n >> 8 );
   e51e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   e51ea:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   e51ee:	0a19      	lsrs	r1, r3, #8
   e51f0:	7191      	strb	r1, [r2, #6]
    ssl->out_msg[5 + offset] = (unsigned char)( n      );
   e51f2:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   e51f6:	71d3      	strb	r3, [r2, #7]
    ssl->out_msglen  = 6 + n + offset;
   e51f8:	3308      	adds	r3, #8
   e51fa:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
   e51fe:	2316      	movs	r3, #22
   e5200:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE_VERIFY;
   e5204:	220f      	movs	r2, #15
   e5206:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   e520a:	e72c      	b.n	e5066 <mbedtls_ssl_handshake_client_step+0xa8e>
        return( MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED );
   e520c:	4d3f      	ldr	r5, [pc, #252]	; (e530c <mbedtls_ssl_handshake_client_step+0xd34>)
   e520e:	f7ff ba48 	b.w	e46a2 <mbedtls_ssl_handshake_client_step+0xca>
           ret = mbedtls_ssl_write_change_cipher_spec( ssl );
   e5212:	4620      	mov	r0, r4
   e5214:	f7fa fc74 	bl	dfb00 <mbedtls_ssl_write_change_cipher_spec>
   e5218:	e5a4      	b.n	e4d64 <mbedtls_ssl_handshake_client_step+0x78c>
           ret = mbedtls_ssl_write_finished( ssl );
   e521a:	4620      	mov	r0, r4
   e521c:	f7fa fcba 	bl	dfb94 <mbedtls_ssl_write_finished>
   e5220:	e5a0      	b.n	e4d64 <mbedtls_ssl_handshake_client_step+0x78c>
    lifetime = ( ((uint32_t) msg[0]) << 24 ) | ( msg[1] << 16 ) |
   e5222:	f8b8 2008 	ldrh.w	r2, [r8, #8]
   e5226:	f8d8 7004 	ldr.w	r7, [r8, #4]
    ticket_len = ( msg[4] << 8 ) | ( msg[5] );
   e522a:	ba52      	rev16	r2, r2
   e522c:	fa1f f982 	uxth.w	r9, r2
    if( ticket_len + 6 + mbedtls_ssl_hs_hdr_len( ssl ) != ssl->in_hslen )
   e5230:	f109 020a 	add.w	r2, r9, #10
   e5234:	4293      	cmp	r3, r2
   e5236:	f47f aa01 	bne.w	e463c <mbedtls_ssl_handshake_client_step+0x64>
    ssl->handshake->new_session_ticket = 0;
   e523a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   e523c:	f8c3 0358 	str.w	r0, [r3, #856]	; 0x358
    ssl->state = MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC;
   e5240:	230c      	movs	r3, #12
   e5242:	6063      	str	r3, [r4, #4]
    if( ticket_len == 0 )
   e5244:	f1b9 0f00 	cmp.w	r9, #0
   e5248:	f43f aa2b 	beq.w	e46a2 <mbedtls_ssl_handshake_client_step+0xca>
    mbedtls_platform_zeroize( ssl->session_negotiate->ticket,
   e524c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e524e:	e9d3 0119 	ldrd	r0, r1, [r3, #100]	; 0x64
   e5252:	f7f5 fec3 	bl	dafdc <mbedtls_platform_zeroize>
    mbedtls_free( ssl->session_negotiate->ticket );
   e5256:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e5258:	6e58      	ldr	r0, [r3, #100]	; 0x64
   e525a:	f000 fab1 	bl	e57c0 <free>
    ssl->session_negotiate->ticket = NULL;
   e525e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e5260:	665e      	str	r6, [r3, #100]	; 0x64
    ssl->session_negotiate->ticket_len = 0;
   e5262:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if( ( ticket = (unsigned char *)mbedtls_calloc( 1, ticket_len ) ) == NULL )
   e5264:	4649      	mov	r1, r9
    ssl->session_negotiate->ticket_len = 0;
   e5266:	669e      	str	r6, [r3, #104]	; 0x68
    if( ( ticket = (unsigned char *)mbedtls_calloc( 1, ticket_len ) ) == NULL )
   e5268:	2001      	movs	r0, #1
   e526a:	f003 fab5 	bl	e87d8 <calloc>
   e526e:	4605      	mov	r5, r0
   e5270:	b940      	cbnz	r0, e5284 <mbedtls_ssl_handshake_client_step+0xcac>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   e5272:	2250      	movs	r2, #80	; 0x50
   e5274:	2102      	movs	r1, #2
   e5276:	4620      	mov	r0, r4
   e5278:	f7fa fa7c 	bl	df774 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
   e527c:	f5a5 45fe 	sub.w	r5, r5, #32512	; 0x7f00
   e5280:	f7ff ba0f 	b.w	e46a2 <mbedtls_ssl_handshake_client_step+0xca>
    memcpy( ticket, msg + 6, ticket_len );
   e5284:	464a      	mov	r2, r9
   e5286:	f108 010a 	add.w	r1, r8, #10
   e528a:	f003 fb1f 	bl	e88cc <memcpy>
    ssl->session_negotiate->ticket = ticket;
   e528e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e5290:	665d      	str	r5, [r3, #100]	; 0x64
    ssl->session_negotiate->ticket_len = ticket_len;
   e5292:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e5294:	f8c3 9068 	str.w	r9, [r3, #104]	; 0x68
    ssl->session_negotiate->ticket_lifetime = lifetime;
   e5298:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   e529a:	ba3f      	rev	r7, r7
   e529c:	66d7      	str	r7, [r2, #108]	; 0x6c
    ssl->session_negotiate->id_len = 0;
   e529e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e52a0:	609e      	str	r6, [r3, #8]
    return( 0 );
   e52a2:	e5e7      	b.n	e4e74 <mbedtls_ssl_handshake_client_step+0x89c>
           ret = mbedtls_ssl_parse_change_cipher_spec( ssl );
   e52a4:	4620      	mov	r0, r4
   e52a6:	f7fa fc37 	bl	dfb18 <mbedtls_ssl_parse_change_cipher_spec>
   e52aa:	e55b      	b.n	e4d64 <mbedtls_ssl_handshake_client_step+0x78c>
           ret = mbedtls_ssl_parse_finished( ssl );
   e52ac:	4620      	mov	r0, r4
   e52ae:	f7fa fcad 	bl	dfc0c <mbedtls_ssl_parse_finished>
   e52b2:	e557      	b.n	e4d64 <mbedtls_ssl_handshake_client_step+0x78c>
           ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
   e52b4:	230f      	movs	r3, #15
   e52b6:	e561      	b.n	e4d7c <mbedtls_ssl_handshake_client_step+0x7a4>
           mbedtls_ssl_handshake_wrapup( ssl );
   e52b8:	4620      	mov	r0, r4
   e52ba:	f7fa fed7 	bl	e006c <mbedtls_ssl_handshake_wrapup>
           break;
   e52be:	f7ff b9f0 	b.w	e46a2 <mbedtls_ssl_handshake_client_step+0xca>
        return( MBEDTLS_ERR_SSL_NO_RNG );
   e52c2:	4d13      	ldr	r5, [pc, #76]	; (e5310 <mbedtls_ssl_handshake_client_step+0xd38>)
   e52c4:	f7ff b9ed 	b.w	e46a2 <mbedtls_ssl_handshake_client_step+0xca>
   e52c8:	4605      	mov	r5, r0
   e52ca:	f7ff b9ea 	b.w	e46a2 <mbedtls_ssl_handshake_client_step+0xca>
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_RSA ||
   e52ce:	2908      	cmp	r1, #8
   e52d0:	f47f ad87 	bne.w	e4de2 <mbedtls_ssl_handshake_client_step+0x80a>
    if( ( ret = mbedtls_ecdh_read_params( &ssl->handshake->ecdh_ctx,
   e52d4:	6b20      	ldr	r0, [r4, #48]	; 0x30
   e52d6:	4632      	mov	r2, r6
   e52d8:	a90a      	add	r1, sp, #40	; 0x28
   e52da:	3004      	adds	r0, #4
   e52dc:	f7f0 fe48 	bl	d5f70 <mbedtls_ecdh_read_params>
   e52e0:	2800      	cmp	r0, #0
   e52e2:	f47f ad8a 	bne.w	e4dfa <mbedtls_ssl_handshake_client_step+0x822>
    grp_id = ssl->handshake->ecdh_ctx.grp.id;
   e52e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   e52e8:	7919      	ldrb	r1, [r3, #4]
    curve_info = mbedtls_ecp_curve_info_from_grp_id( grp_id );
   e52ea:	9106      	str	r1, [sp, #24]
   e52ec:	4608      	mov	r0, r1
   e52ee:	f7f3 fd25 	bl	d8d3c <mbedtls_ecp_curve_info_from_grp_id>
    if( curve_info == NULL )
   e52f2:	2800      	cmp	r0, #0
   e52f4:	f43f ad81 	beq.w	e4dfa <mbedtls_ssl_handshake_client_step+0x822>
    if( mbedtls_ssl_check_curve( ssl, grp_id ) != 0 )
   e52f8:	9906      	ldr	r1, [sp, #24]
   e52fa:	4620      	mov	r0, r4
   e52fc:	f7fb f883 	bl	e0406 <mbedtls_ssl_check_curve>
   e5300:	2800      	cmp	r0, #0
   e5302:	f43f ad88 	beq.w	e4e16 <mbedtls_ssl_handshake_client_step+0x83e>
   e5306:	e578      	b.n	e4dfa <mbedtls_ssl_handshake_client_step+0x822>
   e5308:	ffff9600 	.word	0xffff9600
   e530c:	ffff8a00 	.word	0xffff8a00
   e5310:	ffff8c00 	.word	0xffff8c00

000e5314 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   e5314:	b508      	push	{r3, lr}
   e5316:	4b02      	ldr	r3, [pc, #8]	; (e5320 <netdb_freeaddrinfo+0xc>)
   e5318:	681b      	ldr	r3, [r3, #0]
   e531a:	689b      	ldr	r3, [r3, #8]
   e531c:	9301      	str	r3, [sp, #4]
   e531e:	bd08      	pop	{r3, pc}
   e5320:	00030268 	.word	0x00030268

000e5324 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   e5324:	b508      	push	{r3, lr}
   e5326:	4b02      	ldr	r3, [pc, #8]	; (e5330 <netdb_getaddrinfo+0xc>)
   e5328:	681b      	ldr	r3, [r3, #0]
   e532a:	68db      	ldr	r3, [r3, #12]
   e532c:	9301      	str	r3, [sp, #4]
   e532e:	bd08      	pop	{r3, pc}
   e5330:	00030268 	.word	0x00030268

000e5334 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   e5334:	b508      	push	{r3, lr}
   e5336:	4b02      	ldr	r3, [pc, #8]	; (e5340 <HAL_Validate_Pin_Function+0xc>)
   e5338:	681b      	ldr	r3, [r3, #0]
   e533a:	685b      	ldr	r3, [r3, #4]
   e533c:	9301      	str	r3, [sp, #4]
   e533e:	bd08      	pop	{r3, pc}
   e5340:	0003022c 	.word	0x0003022c

000e5344 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   e5344:	b508      	push	{r3, lr}
   e5346:	4b02      	ldr	r3, [pc, #8]	; (e5350 <if_index_to_name+0xc>)
   e5348:	681b      	ldr	r3, [r3, #0]
   e534a:	695b      	ldr	r3, [r3, #20]
   e534c:	9301      	str	r3, [sp, #4]
   e534e:	bd08      	pop	{r3, pc}
   e5350:	0003026c 	.word	0x0003026c

000e5354 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   e5354:	b508      	push	{r3, lr}
   e5356:	4b02      	ldr	r3, [pc, #8]	; (e5360 <HAL_RNG_GetRandomNumber+0xc>)
   e5358:	681b      	ldr	r3, [r3, #0]
   e535a:	685b      	ldr	r3, [r3, #4]
   e535c:	9301      	str	r3, [sp, #4]
   e535e:	bd08      	pop	{r3, pc}
   e5360:	00030218 	.word	0x00030218

000e5364 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   e5364:	b508      	push	{r3, lr}
   e5366:	4b02      	ldr	r3, [pc, #8]	; (e5370 <HAL_Delay_Microseconds+0xc>)
   e5368:	681b      	ldr	r3, [r3, #0]
   e536a:	68db      	ldr	r3, [r3, #12]
   e536c:	9301      	str	r3, [sp, #4]
   e536e:	bd08      	pop	{r3, pc}
   e5370:	00030218 	.word	0x00030218

000e5374 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   e5374:	b508      	push	{r3, lr}
   e5376:	4b02      	ldr	r3, [pc, #8]	; (e5380 <HAL_Timer_Get_Milli_Seconds+0xc>)
   e5378:	681b      	ldr	r3, [r3, #0]
   e537a:	695b      	ldr	r3, [r3, #20]
   e537c:	9301      	str	r3, [sp, #4]
   e537e:	bd08      	pop	{r3, pc}
   e5380:	00030218 	.word	0x00030218

000e5384 <hal_rtc_get_unixtime_deprecated>:

DYNALIB_FN(BASE_IDX + 4, hal, hal_rtc_init, void(void))

// These functions are deprecated
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
   e5384:	b508      	push	{r3, lr}
   e5386:	4b02      	ldr	r3, [pc, #8]	; (e5390 <hal_rtc_get_unixtime_deprecated+0xc>)
   e5388:	681b      	ldr	r3, [r3, #0]
   e538a:	69db      	ldr	r3, [r3, #28]
   e538c:	9301      	str	r3, [sp, #4]
   e538e:	bd08      	pop	{r3, pc}
   e5390:	00030218 	.word	0x00030218

000e5394 <os_thread_scheduling>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   e5394:	b508      	push	{r3, lr}
   e5396:	4b02      	ldr	r3, [pc, #8]	; (e53a0 <os_thread_scheduling+0xc>)
   e5398:	681b      	ldr	r3, [r3, #0]
   e539a:	69db      	ldr	r3, [r3, #28]
   e539c:	9301      	str	r3, [sp, #4]
   e539e:	bd08      	pop	{r3, pc}
   e53a0:	00030248 	.word	0x00030248

000e53a4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   e53a4:	b508      	push	{r3, lr}
   e53a6:	4b02      	ldr	r3, [pc, #8]	; (e53b0 <os_mutex_recursive_create+0xc>)
   e53a8:	681b      	ldr	r3, [r3, #0]
   e53aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   e53ac:	9301      	str	r3, [sp, #4]
   e53ae:	bd08      	pop	{r3, pc}
   e53b0:	00030248 	.word	0x00030248

000e53b4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   e53b4:	b508      	push	{r3, lr}
   e53b6:	4b02      	ldr	r3, [pc, #8]	; (e53c0 <os_mutex_recursive_destroy+0xc>)
   e53b8:	681b      	ldr	r3, [r3, #0]
   e53ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   e53bc:	9301      	str	r3, [sp, #4]
   e53be:	bd08      	pop	{r3, pc}
   e53c0:	00030248 	.word	0x00030248

000e53c4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   e53c4:	b508      	push	{r3, lr}
   e53c6:	4b02      	ldr	r3, [pc, #8]	; (e53d0 <inet_inet_ntop+0xc>)
   e53c8:	681b      	ldr	r3, [r3, #0]
   e53ca:	695b      	ldr	r3, [r3, #20]
   e53cc:	9301      	str	r3, [sp, #4]
   e53ce:	bd08      	pop	{r3, pc}
   e53d0:	00030264 	.word	0x00030264

000e53d4 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   e53d4:	b508      	push	{r3, lr}
   e53d6:	4b02      	ldr	r3, [pc, #8]	; (e53e0 <inet_htonl+0xc>)
   e53d8:	681b      	ldr	r3, [r3, #0]
   e53da:	6a1b      	ldr	r3, [r3, #32]
   e53dc:	9301      	str	r3, [sp, #4]
   e53de:	bd08      	pop	{r3, pc}
   e53e0:	00030264 	.word	0x00030264

000e53e4 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   e53e4:	b508      	push	{r3, lr}
   e53e6:	4b02      	ldr	r3, [pc, #8]	; (e53f0 <inet_htons+0xc>)
   e53e8:	681b      	ldr	r3, [r3, #0]
   e53ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   e53ec:	9301      	str	r3, [sp, #4]
   e53ee:	bd08      	pop	{r3, pc}
   e53f0:	00030264 	.word	0x00030264

000e53f4 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   e53f4:	b508      	push	{r3, lr}
   e53f6:	4b02      	ldr	r3, [pc, #8]	; (e5400 <hal_usart_init+0xc>)
   e53f8:	681b      	ldr	r3, [r3, #0]
   e53fa:	681b      	ldr	r3, [r3, #0]
   e53fc:	9301      	str	r3, [sp, #4]
   e53fe:	bd08      	pop	{r3, pc}
   e5400:	0003023c 	.word	0x0003023c

000e5404 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   e5404:	b508      	push	{r3, lr}
   e5406:	4b02      	ldr	r3, [pc, #8]	; (e5410 <hal_usart_write+0xc>)
   e5408:	681b      	ldr	r3, [r3, #0]
   e540a:	68db      	ldr	r3, [r3, #12]
   e540c:	9301      	str	r3, [sp, #4]
   e540e:	bd08      	pop	{r3, pc}
   e5410:	0003023c 	.word	0x0003023c

000e5414 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   e5414:	b508      	push	{r3, lr}
   e5416:	4b02      	ldr	r3, [pc, #8]	; (e5420 <hal_usart_available+0xc>)
   e5418:	681b      	ldr	r3, [r3, #0]
   e541a:	691b      	ldr	r3, [r3, #16]
   e541c:	9301      	str	r3, [sp, #4]
   e541e:	bd08      	pop	{r3, pc}
   e5420:	0003023c 	.word	0x0003023c

000e5424 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   e5424:	b508      	push	{r3, lr}
   e5426:	4b02      	ldr	r3, [pc, #8]	; (e5430 <hal_usart_read+0xc>)
   e5428:	681b      	ldr	r3, [r3, #0]
   e542a:	695b      	ldr	r3, [r3, #20]
   e542c:	9301      	str	r3, [sp, #4]
   e542e:	bd08      	pop	{r3, pc}
   e5430:	0003023c 	.word	0x0003023c

000e5434 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   e5434:	b508      	push	{r3, lr}
   e5436:	4b02      	ldr	r3, [pc, #8]	; (e5440 <hal_usart_peek+0xc>)
   e5438:	681b      	ldr	r3, [r3, #0]
   e543a:	699b      	ldr	r3, [r3, #24]
   e543c:	9301      	str	r3, [sp, #4]
   e543e:	bd08      	pop	{r3, pc}
   e5440:	0003023c 	.word	0x0003023c

000e5444 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   e5444:	b508      	push	{r3, lr}
   e5446:	4b02      	ldr	r3, [pc, #8]	; (e5450 <hal_usart_flush+0xc>)
   e5448:	681b      	ldr	r3, [r3, #0]
   e544a:	69db      	ldr	r3, [r3, #28]
   e544c:	9301      	str	r3, [sp, #4]
   e544e:	bd08      	pop	{r3, pc}
   e5450:	0003023c 	.word	0x0003023c

000e5454 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   e5454:	b508      	push	{r3, lr}
   e5456:	4b02      	ldr	r3, [pc, #8]	; (e5460 <hal_usart_is_enabled+0xc>)
   e5458:	681b      	ldr	r3, [r3, #0]
   e545a:	6a1b      	ldr	r3, [r3, #32]
   e545c:	9301      	str	r3, [sp, #4]
   e545e:	bd08      	pop	{r3, pc}
   e5460:	0003023c 	.word	0x0003023c

000e5464 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   e5464:	b508      	push	{r3, lr}
   e5466:	4b02      	ldr	r3, [pc, #8]	; (e5470 <hal_usart_available_data_for_write+0xc>)
   e5468:	681b      	ldr	r3, [r3, #0]
   e546a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   e546c:	9301      	str	r3, [sp, #4]
   e546e:	bd08      	pop	{r3, pc}
   e5470:	0003023c 	.word	0x0003023c

000e5474 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   e5474:	b508      	push	{r3, lr}
   e5476:	4b02      	ldr	r3, [pc, #8]	; (e5480 <hal_i2c_write+0xc>)
   e5478:	681b      	ldr	r3, [r3, #0]
   e547a:	6a1b      	ldr	r3, [r3, #32]
   e547c:	9301      	str	r3, [sp, #4]
   e547e:	bd08      	pop	{r3, pc}
   e5480:	00030228 	.word	0x00030228

000e5484 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   e5484:	b508      	push	{r3, lr}
   e5486:	4b02      	ldr	r3, [pc, #8]	; (e5490 <hal_i2c_available+0xc>)
   e5488:	681b      	ldr	r3, [r3, #0]
   e548a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   e548c:	9301      	str	r3, [sp, #4]
   e548e:	bd08      	pop	{r3, pc}
   e5490:	00030228 	.word	0x00030228

000e5494 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   e5494:	b508      	push	{r3, lr}
   e5496:	4b02      	ldr	r3, [pc, #8]	; (e54a0 <hal_i2c_read+0xc>)
   e5498:	681b      	ldr	r3, [r3, #0]
   e549a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   e549c:	9301      	str	r3, [sp, #4]
   e549e:	bd08      	pop	{r3, pc}
   e54a0:	00030228 	.word	0x00030228

000e54a4 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   e54a4:	b508      	push	{r3, lr}
   e54a6:	4b02      	ldr	r3, [pc, #8]	; (e54b0 <hal_i2c_peek+0xc>)
   e54a8:	681b      	ldr	r3, [r3, #0]
   e54aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   e54ac:	9301      	str	r3, [sp, #4]
   e54ae:	bd08      	pop	{r3, pc}
   e54b0:	00030228 	.word	0x00030228

000e54b4 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   e54b4:	b508      	push	{r3, lr}
   e54b6:	4b02      	ldr	r3, [pc, #8]	; (e54c0 <hal_i2c_flush+0xc>)
   e54b8:	681b      	ldr	r3, [r3, #0]
   e54ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   e54bc:	9301      	str	r3, [sp, #4]
   e54be:	bd08      	pop	{r3, pc}
   e54c0:	00030228 	.word	0x00030228

000e54c4 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   e54c4:	b508      	push	{r3, lr}
   e54c6:	4b02      	ldr	r3, [pc, #8]	; (e54d0 <hal_i2c_is_enabled+0xc>)
   e54c8:	681b      	ldr	r3, [r3, #0]
   e54ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   e54cc:	9301      	str	r3, [sp, #4]
   e54ce:	bd08      	pop	{r3, pc}
   e54d0:	00030228 	.word	0x00030228

000e54d4 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   e54d4:	b508      	push	{r3, lr}
   e54d6:	4b02      	ldr	r3, [pc, #8]	; (e54e0 <hal_i2c_init+0xc>)
   e54d8:	681b      	ldr	r3, [r3, #0]
   e54da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   e54dc:	9301      	str	r3, [sp, #4]
   e54de:	bd08      	pop	{r3, pc}
   e54e0:	00030228 	.word	0x00030228

000e54e4 <sock_accept>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
   e54e4:	b508      	push	{r3, lr}
   e54e6:	4b02      	ldr	r3, [pc, #8]	; (e54f0 <sock_accept+0xc>)
   e54e8:	681b      	ldr	r3, [r3, #0]
   e54ea:	681b      	ldr	r3, [r3, #0]
   e54ec:	9301      	str	r3, [sp, #4]
   e54ee:	bd08      	pop	{r3, pc}
   e54f0:	00030238 	.word	0x00030238

000e54f4 <sock_bind>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   e54f4:	b508      	push	{r3, lr}
   e54f6:	4b02      	ldr	r3, [pc, #8]	; (e5500 <sock_bind+0xc>)
   e54f8:	681b      	ldr	r3, [r3, #0]
   e54fa:	685b      	ldr	r3, [r3, #4]
   e54fc:	9301      	str	r3, [sp, #4]
   e54fe:	bd08      	pop	{r3, pc}
   e5500:	00030238 	.word	0x00030238

000e5504 <sock_getpeername>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
   e5504:	b508      	push	{r3, lr}
   e5506:	4b02      	ldr	r3, [pc, #8]	; (e5510 <sock_getpeername+0xc>)
   e5508:	681b      	ldr	r3, [r3, #0]
   e550a:	68db      	ldr	r3, [r3, #12]
   e550c:	9301      	str	r3, [sp, #4]
   e550e:	bd08      	pop	{r3, pc}
   e5510:	00030238 	.word	0x00030238

000e5514 <sock_setsockopt>:
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   e5514:	b508      	push	{r3, lr}
   e5516:	4b02      	ldr	r3, [pc, #8]	; (e5520 <sock_setsockopt+0xc>)
   e5518:	681b      	ldr	r3, [r3, #0]
   e551a:	699b      	ldr	r3, [r3, #24]
   e551c:	9301      	str	r3, [sp, #4]
   e551e:	bd08      	pop	{r3, pc}
   e5520:	00030238 	.word	0x00030238

000e5524 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   e5524:	b508      	push	{r3, lr}
   e5526:	4b02      	ldr	r3, [pc, #8]	; (e5530 <sock_close+0xc>)
   e5528:	681b      	ldr	r3, [r3, #0]
   e552a:	69db      	ldr	r3, [r3, #28]
   e552c:	9301      	str	r3, [sp, #4]
   e552e:	bd08      	pop	{r3, pc}
   e5530:	00030238 	.word	0x00030238

000e5534 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   e5534:	b508      	push	{r3, lr}
   e5536:	4b02      	ldr	r3, [pc, #8]	; (e5540 <sock_connect+0xc>)
   e5538:	681b      	ldr	r3, [r3, #0]
   e553a:	6a1b      	ldr	r3, [r3, #32]
   e553c:	9301      	str	r3, [sp, #4]
   e553e:	bd08      	pop	{r3, pc}
   e5540:	00030238 	.word	0x00030238

000e5544 <sock_listen>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
   e5544:	b508      	push	{r3, lr}
   e5546:	4b02      	ldr	r3, [pc, #8]	; (e5550 <sock_listen+0xc>)
   e5548:	681b      	ldr	r3, [r3, #0]
   e554a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   e554c:	9301      	str	r3, [sp, #4]
   e554e:	bd08      	pop	{r3, pc}
   e5550:	00030238 	.word	0x00030238

000e5554 <sock_recv>:
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   e5554:	b508      	push	{r3, lr}
   e5556:	4b02      	ldr	r3, [pc, #8]	; (e5560 <sock_recv+0xc>)
   e5558:	681b      	ldr	r3, [r3, #0]
   e555a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   e555c:	9301      	str	r3, [sp, #4]
   e555e:	bd08      	pop	{r3, pc}
   e5560:	00030238 	.word	0x00030238

000e5564 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   e5564:	b508      	push	{r3, lr}
   e5566:	4b02      	ldr	r3, [pc, #8]	; (e5570 <sock_send+0xc>)
   e5568:	681b      	ldr	r3, [r3, #0]
   e556a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   e556c:	9301      	str	r3, [sp, #4]
   e556e:	bd08      	pop	{r3, pc}
   e5570:	00030238 	.word	0x00030238

000e5574 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   e5574:	b508      	push	{r3, lr}
   e5576:	4b02      	ldr	r3, [pc, #8]	; (e5580 <sock_socket+0xc>)
   e5578:	681b      	ldr	r3, [r3, #0]
   e557a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   e557c:	9301      	str	r3, [sp, #4]
   e557e:	bd08      	pop	{r3, pc}
   e5580:	00030238 	.word	0x00030238

000e5584 <sock_fcntl>:
DYNALIB_FN(15, hal_socket, sock_fcntl, int(int, int, ...))
   e5584:	b508      	push	{r3, lr}
   e5586:	4b02      	ldr	r3, [pc, #8]	; (e5590 <sock_fcntl+0xc>)
   e5588:	681b      	ldr	r3, [r3, #0]
   e558a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   e558c:	9301      	str	r3, [sp, #4]
   e558e:	bd08      	pop	{r3, pc}
   e5590:	00030238 	.word	0x00030238

000e5594 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   e5594:	b508      	push	{r3, lr}
   e5596:	4b02      	ldr	r3, [pc, #8]	; (e55a0 <hal_spi_init+0xc>)
   e5598:	681b      	ldr	r3, [r3, #0]
   e559a:	69db      	ldr	r3, [r3, #28]
   e559c:	9301      	str	r3, [sp, #4]
   e559e:	bd08      	pop	{r3, pc}
   e55a0:	00030230 	.word	0x00030230

000e55a4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   e55a4:	b508      	push	{r3, lr}
   e55a6:	4b02      	ldr	r3, [pc, #8]	; (e55b0 <hal_spi_is_enabled+0xc>)
   e55a8:	681b      	ldr	r3, [r3, #0]
   e55aa:	6a1b      	ldr	r3, [r3, #32]
   e55ac:	9301      	str	r3, [sp, #4]
   e55ae:	bd08      	pop	{r3, pc}
   e55b0:	00030230 	.word	0x00030230

000e55b4 <HAL_Servo_Attach>:
DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
DYNALIB_FN(1, hal_peripherals, HAL_Tone_Stop, void(uint8_t))
DYNALIB_FN(2, hal_peripherals, HAL_Tone_Get_Frequency, uint32_t(uint8_t))
DYNALIB_FN(3, hal_peripherals, HAL_Tone_Is_Stopped, bool(uint8_t))

DYNALIB_FN(4, hal_peripherals, HAL_Servo_Attach, void(uint16_t))
   e55b4:	b508      	push	{r3, lr}
   e55b6:	4b02      	ldr	r3, [pc, #8]	; (e55c0 <HAL_Servo_Attach+0xc>)
   e55b8:	681b      	ldr	r3, [r3, #0]
   e55ba:	691b      	ldr	r3, [r3, #16]
   e55bc:	9301      	str	r3, [sp, #4]
   e55be:	bd08      	pop	{r3, pc}
   e55c0:	00030224 	.word	0x00030224

000e55c4 <HAL_Servo_Detach>:
DYNALIB_FN(5, hal_peripherals, HAL_Servo_Detach, void(uint16_t))
   e55c4:	b508      	push	{r3, lr}
   e55c6:	4b02      	ldr	r3, [pc, #8]	; (e55d0 <HAL_Servo_Detach+0xc>)
   e55c8:	681b      	ldr	r3, [r3, #0]
   e55ca:	695b      	ldr	r3, [r3, #20]
   e55cc:	9301      	str	r3, [sp, #4]
   e55ce:	bd08      	pop	{r3, pc}
   e55d0:	00030224 	.word	0x00030224

000e55d4 <HAL_Servo_Write_Pulse_Width>:
DYNALIB_FN(6, hal_peripherals, HAL_Servo_Write_Pulse_Width, void(uint16_t, uint16_t))
   e55d4:	b508      	push	{r3, lr}
   e55d6:	4b02      	ldr	r3, [pc, #8]	; (e55e0 <HAL_Servo_Write_Pulse_Width+0xc>)
   e55d8:	681b      	ldr	r3, [r3, #0]
   e55da:	699b      	ldr	r3, [r3, #24]
   e55dc:	9301      	str	r3, [sp, #4]
   e55de:	bd08      	pop	{r3, pc}
   e55e0:	00030224 	.word	0x00030224

000e55e4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   e55e4:	b508      	push	{r3, lr}
   e55e6:	4b02      	ldr	r3, [pc, #8]	; (e55f0 <HAL_USB_USART_Init+0xc>)
   e55e8:	681b      	ldr	r3, [r3, #0]
   e55ea:	681b      	ldr	r3, [r3, #0]
   e55ec:	9301      	str	r3, [sp, #4]
   e55ee:	bd08      	pop	{r3, pc}
   e55f0:	0003024c 	.word	0x0003024c

000e55f4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   e55f4:	b508      	push	{r3, lr}
   e55f6:	4b02      	ldr	r3, [pc, #8]	; (e5600 <HAL_USB_USART_Available_Data+0xc>)
   e55f8:	681b      	ldr	r3, [r3, #0]
   e55fa:	691b      	ldr	r3, [r3, #16]
   e55fc:	9301      	str	r3, [sp, #4]
   e55fe:	bd08      	pop	{r3, pc}
   e5600:	0003024c 	.word	0x0003024c

000e5604 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   e5604:	b508      	push	{r3, lr}
   e5606:	4b02      	ldr	r3, [pc, #8]	; (e5610 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   e5608:	681b      	ldr	r3, [r3, #0]
   e560a:	695b      	ldr	r3, [r3, #20]
   e560c:	9301      	str	r3, [sp, #4]
   e560e:	bd08      	pop	{r3, pc}
   e5610:	0003024c 	.word	0x0003024c

000e5614 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   e5614:	b508      	push	{r3, lr}
   e5616:	4b02      	ldr	r3, [pc, #8]	; (e5620 <HAL_USB_USART_Receive_Data+0xc>)
   e5618:	681b      	ldr	r3, [r3, #0]
   e561a:	699b      	ldr	r3, [r3, #24]
   e561c:	9301      	str	r3, [sp, #4]
   e561e:	bd08      	pop	{r3, pc}
   e5620:	0003024c 	.word	0x0003024c

000e5624 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   e5624:	b508      	push	{r3, lr}
   e5626:	4b02      	ldr	r3, [pc, #8]	; (e5630 <HAL_USB_USART_Send_Data+0xc>)
   e5628:	681b      	ldr	r3, [r3, #0]
   e562a:	69db      	ldr	r3, [r3, #28]
   e562c:	9301      	str	r3, [sp, #4]
   e562e:	bd08      	pop	{r3, pc}
   e5630:	0003024c 	.word	0x0003024c

000e5634 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   e5634:	b508      	push	{r3, lr}
   e5636:	4b02      	ldr	r3, [pc, #8]	; (e5640 <HAL_USB_USART_Flush_Data+0xc>)
   e5638:	681b      	ldr	r3, [r3, #0]
   e563a:	6a1b      	ldr	r3, [r3, #32]
   e563c:	9301      	str	r3, [sp, #4]
   e563e:	bd08      	pop	{r3, pc}
   e5640:	0003024c 	.word	0x0003024c

000e5644 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   e5644:	b508      	push	{r3, lr}
   e5646:	4b02      	ldr	r3, [pc, #8]	; (e5650 <panic_+0xc>)
   e5648:	681b      	ldr	r3, [r3, #0]
   e564a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   e564c:	9301      	str	r3, [sp, #4]
   e564e:	bd08      	pop	{r3, pc}
   e5650:	00030260 	.word	0x00030260

000e5654 <jsmn_init>:

DYNALIB_FN(14, services, jsmn_init, void(jsmn_parser*, void*))
   e5654:	b508      	push	{r3, lr}
   e5656:	4b02      	ldr	r3, [pc, #8]	; (e5660 <jsmn_init+0xc>)
   e5658:	681b      	ldr	r3, [r3, #0]
   e565a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   e565c:	9301      	str	r3, [sp, #4]
   e565e:	bd08      	pop	{r3, pc}
   e5660:	00030260 	.word	0x00030260

000e5664 <jsmn_parse>:
DYNALIB_FN(15, services, jsmn_parse, jsmnerr_t(jsmn_parser*, const char*, size_t, jsmntok_t*, unsigned int, void*))
   e5664:	b508      	push	{r3, lr}
   e5666:	4b02      	ldr	r3, [pc, #8]	; (e5670 <jsmn_parse+0xc>)
   e5668:	681b      	ldr	r3, [r3, #0]
   e566a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   e566c:	9301      	str	r3, [sp, #4]
   e566e:	bd08      	pop	{r3, pc}
   e5670:	00030260 	.word	0x00030260

000e5674 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   e5674:	b508      	push	{r3, lr}
   e5676:	4b02      	ldr	r3, [pc, #8]	; (e5680 <log_message+0xc>)
   e5678:	681b      	ldr	r3, [r3, #0]
   e567a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   e567c:	9301      	str	r3, [sp, #4]
   e567e:	bd08      	pop	{r3, pc}
   e5680:	00030260 	.word	0x00030260

000e5684 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   e5684:	b508      	push	{r3, lr}
   e5686:	4b02      	ldr	r3, [pc, #8]	; (e5690 <set_system_mode+0xc>)
   e5688:	681b      	ldr	r3, [r3, #0]
   e568a:	685b      	ldr	r3, [r3, #4]
   e568c:	9301      	str	r3, [sp, #4]
   e568e:	bd08      	pop	{r3, pc}
   e5690:	00030220 	.word	0x00030220

000e5694 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   e5694:	b508      	push	{r3, lr}
   e5696:	4b02      	ldr	r3, [pc, #8]	; (e56a0 <system_delay_ms+0xc>)
   e5698:	681b      	ldr	r3, [r3, #0]
   e569a:	695b      	ldr	r3, [r3, #20]
   e569c:	9301      	str	r3, [sp, #4]
   e569e:	bd08      	pop	{r3, pc}
   e56a0:	00030220 	.word	0x00030220

000e56a4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   e56a4:	b508      	push	{r3, lr}
   e56a6:	4b03      	ldr	r3, [pc, #12]	; (e56b4 <system_ctrl_set_app_request_handler+0x10>)
   e56a8:	681b      	ldr	r3, [r3, #0]
   e56aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   e56ae:	9301      	str	r3, [sp, #4]
   e56b0:	bd08      	pop	{r3, pc}
   e56b2:	0000      	.short	0x0000
   e56b4:	00030220 	.word	0x00030220

000e56b8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   e56b8:	b508      	push	{r3, lr}
   e56ba:	4b03      	ldr	r3, [pc, #12]	; (e56c8 <system_ctrl_set_result+0x10>)
   e56bc:	681b      	ldr	r3, [r3, #0]
   e56be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   e56c2:	9301      	str	r3, [sp, #4]
   e56c4:	bd08      	pop	{r3, pc}
   e56c6:	0000      	.short	0x0000
   e56c8:	00030220 	.word	0x00030220

000e56cc <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   e56cc:	b508      	push	{r3, lr}
   e56ce:	4b03      	ldr	r3, [pc, #12]	; (e56dc <system_sleep_ext+0x10>)
   e56d0:	681b      	ldr	r3, [r3, #0]
   e56d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   e56d6:	9301      	str	r3, [sp, #4]
   e56d8:	bd08      	pop	{r3, pc}
   e56da:	0000      	.short	0x0000
   e56dc:	00030220 	.word	0x00030220

000e56e0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   e56e0:	b508      	push	{r3, lr}
   e56e2:	4b02      	ldr	r3, [pc, #8]	; (e56ec <network_connect+0xc>)
   e56e4:	681b      	ldr	r3, [r3, #0]
   e56e6:	685b      	ldr	r3, [r3, #4]
   e56e8:	9301      	str	r3, [sp, #4]
   e56ea:	bd08      	pop	{r3, pc}
   e56ec:	00030240 	.word	0x00030240

000e56f0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   e56f0:	b508      	push	{r3, lr}
   e56f2:	4b02      	ldr	r3, [pc, #8]	; (e56fc <network_connecting+0xc>)
   e56f4:	681b      	ldr	r3, [r3, #0]
   e56f6:	689b      	ldr	r3, [r3, #8]
   e56f8:	9301      	str	r3, [sp, #4]
   e56fa:	bd08      	pop	{r3, pc}
   e56fc:	00030240 	.word	0x00030240

000e5700 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   e5700:	b508      	push	{r3, lr}
   e5702:	4b02      	ldr	r3, [pc, #8]	; (e570c <network_disconnect+0xc>)
   e5704:	681b      	ldr	r3, [r3, #0]
   e5706:	68db      	ldr	r3, [r3, #12]
   e5708:	9301      	str	r3, [sp, #4]
   e570a:	bd08      	pop	{r3, pc}
   e570c:	00030240 	.word	0x00030240

000e5710 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   e5710:	b508      	push	{r3, lr}
   e5712:	4b02      	ldr	r3, [pc, #8]	; (e571c <network_ready+0xc>)
   e5714:	681b      	ldr	r3, [r3, #0]
   e5716:	691b      	ldr	r3, [r3, #16]
   e5718:	9301      	str	r3, [sp, #4]
   e571a:	bd08      	pop	{r3, pc}
   e571c:	00030240 	.word	0x00030240

000e5720 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   e5720:	b508      	push	{r3, lr}
   e5722:	4b02      	ldr	r3, [pc, #8]	; (e572c <network_on+0xc>)
   e5724:	681b      	ldr	r3, [r3, #0]
   e5726:	695b      	ldr	r3, [r3, #20]
   e5728:	9301      	str	r3, [sp, #4]
   e572a:	bd08      	pop	{r3, pc}
   e572c:	00030240 	.word	0x00030240

000e5730 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   e5730:	b508      	push	{r3, lr}
   e5732:	4b02      	ldr	r3, [pc, #8]	; (e573c <network_off+0xc>)
   e5734:	681b      	ldr	r3, [r3, #0]
   e5736:	699b      	ldr	r3, [r3, #24]
   e5738:	9301      	str	r3, [sp, #4]
   e573a:	bd08      	pop	{r3, pc}
   e573c:	00030240 	.word	0x00030240

000e5740 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   e5740:	b508      	push	{r3, lr}
   e5742:	4b02      	ldr	r3, [pc, #8]	; (e574c <network_listen+0xc>)
   e5744:	681b      	ldr	r3, [r3, #0]
   e5746:	69db      	ldr	r3, [r3, #28]
   e5748:	9301      	str	r3, [sp, #4]
   e574a:	bd08      	pop	{r3, pc}
   e574c:	00030240 	.word	0x00030240

000e5750 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   e5750:	b508      	push	{r3, lr}
   e5752:	4b02      	ldr	r3, [pc, #8]	; (e575c <network_listening+0xc>)
   e5754:	681b      	ldr	r3, [r3, #0]
   e5756:	6a1b      	ldr	r3, [r3, #32]
   e5758:	9301      	str	r3, [sp, #4]
   e575a:	bd08      	pop	{r3, pc}
   e575c:	00030240 	.word	0x00030240

000e5760 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   e5760:	b508      	push	{r3, lr}
   e5762:	4b02      	ldr	r3, [pc, #8]	; (e576c <network_set_listen_timeout+0xc>)
   e5764:	681b      	ldr	r3, [r3, #0]
   e5766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   e5768:	9301      	str	r3, [sp, #4]
   e576a:	bd08      	pop	{r3, pc}
   e576c:	00030240 	.word	0x00030240

000e5770 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   e5770:	b508      	push	{r3, lr}
   e5772:	4b02      	ldr	r3, [pc, #8]	; (e577c <network_get_listen_timeout+0xc>)
   e5774:	681b      	ldr	r3, [r3, #0]
   e5776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   e5778:	9301      	str	r3, [sp, #4]
   e577a:	bd08      	pop	{r3, pc}
   e577c:	00030240 	.word	0x00030240

000e5780 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   e5780:	b508      	push	{r3, lr}
   e5782:	4b02      	ldr	r3, [pc, #8]	; (e578c <spark_cloud_flag_connected+0xc>)
   e5784:	681b      	ldr	r3, [r3, #0]
   e5786:	695b      	ldr	r3, [r3, #20]
   e5788:	9301      	str	r3, [sp, #4]
   e578a:	bd08      	pop	{r3, pc}
   e578c:	00030244 	.word	0x00030244

000e5790 <spark_sync_time>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   e5790:	b508      	push	{r3, lr}
   e5792:	4b02      	ldr	r3, [pc, #8]	; (e579c <spark_sync_time+0xc>)
   e5794:	681b      	ldr	r3, [r3, #0]
   e5796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   e5798:	9301      	str	r3, [sp, #4]
   e579a:	bd08      	pop	{r3, pc}
   e579c:	00030244 	.word	0x00030244

000e57a0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   e57a0:	b508      	push	{r3, lr}
   e57a2:	4b02      	ldr	r3, [pc, #8]	; (e57ac <spark_set_random_seed_from_cloud_handler+0xc>)
   e57a4:	681b      	ldr	r3, [r3, #0]
   e57a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   e57a8:	9301      	str	r3, [sp, #4]
   e57aa:	bd08      	pop	{r3, pc}
   e57ac:	00030244 	.word	0x00030244

000e57b0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   e57b0:	b508      	push	{r3, lr}
   e57b2:	4b02      	ldr	r3, [pc, #8]	; (e57bc <malloc+0xc>)
   e57b4:	681b      	ldr	r3, [r3, #0]
   e57b6:	681b      	ldr	r3, [r3, #0]
   e57b8:	9301      	str	r3, [sp, #4]
   e57ba:	bd08      	pop	{r3, pc}
   e57bc:	0003021c 	.word	0x0003021c

000e57c0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   e57c0:	b508      	push	{r3, lr}
   e57c2:	4b02      	ldr	r3, [pc, #8]	; (e57cc <free+0xc>)
   e57c4:	681b      	ldr	r3, [r3, #0]
   e57c6:	685b      	ldr	r3, [r3, #4]
   e57c8:	9301      	str	r3, [sp, #4]
   e57ca:	bd08      	pop	{r3, pc}
   e57cc:	0003021c 	.word	0x0003021c

000e57d0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   e57d0:	b508      	push	{r3, lr}
   e57d2:	4b02      	ldr	r3, [pc, #8]	; (e57dc <realloc+0xc>)
   e57d4:	681b      	ldr	r3, [r3, #0]
   e57d6:	689b      	ldr	r3, [r3, #8]
   e57d8:	9301      	str	r3, [sp, #4]
   e57da:	bd08      	pop	{r3, pc}
   e57dc:	0003021c 	.word	0x0003021c

000e57e0 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   e57e0:	b508      	push	{r3, lr}
   e57e2:	4b02      	ldr	r3, [pc, #8]	; (e57ec <sprintf+0xc>)
   e57e4:	681b      	ldr	r3, [r3, #0]
   e57e6:	68db      	ldr	r3, [r3, #12]
   e57e8:	9301      	str	r3, [sp, #4]
   e57ea:	bd08      	pop	{r3, pc}
   e57ec:	0003021c 	.word	0x0003021c

000e57f0 <snprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   e57f0:	b508      	push	{r3, lr}
   e57f2:	4b02      	ldr	r3, [pc, #8]	; (e57fc <snprintf+0xc>)
   e57f4:	681b      	ldr	r3, [r3, #0]
   e57f6:	69db      	ldr	r3, [r3, #28]
   e57f8:	9301      	str	r3, [sp, #4]
   e57fa:	bd08      	pop	{r3, pc}
   e57fc:	0003021c 	.word	0x0003021c

000e5800 <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   e5800:	b508      	push	{r3, lr}
   e5802:	4b02      	ldr	r3, [pc, #8]	; (e580c <abort+0xc>)
   e5804:	681b      	ldr	r3, [r3, #0]
   e5806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   e5808:	9301      	str	r3, [sp, #4]
   e580a:	bd08      	pop	{r3, pc}
   e580c:	0003021c 	.word	0x0003021c

000e5810 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   e5810:	b508      	push	{r3, lr}
   e5812:	4b02      	ldr	r3, [pc, #8]	; (e581c <_malloc_r+0xc>)
   e5814:	681b      	ldr	r3, [r3, #0]
   e5816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   e5818:	9301      	str	r3, [sp, #4]
   e581a:	bd08      	pop	{r3, pc}
   e581c:	0003021c 	.word	0x0003021c

000e5820 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   e5820:	b508      	push	{r3, lr}
   e5822:	4b02      	ldr	r3, [pc, #8]	; (e582c <__errno+0xc>)
   e5824:	681b      	ldr	r3, [r3, #0]
   e5826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   e5828:	9301      	str	r3, [sp, #4]
   e582a:	bd08      	pop	{r3, pc}
   e582c:	0003021c 	.word	0x0003021c

000e5830 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   e5830:	b508      	push	{r3, lr}
   e5832:	4b02      	ldr	r3, [pc, #8]	; (e583c <newlib_impure_ptr_callback+0xc>)
   e5834:	681b      	ldr	r3, [r3, #0]
   e5836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   e5838:	9301      	str	r3, [sp, #4]
   e583a:	bd08      	pop	{r3, pc}
   e583c:	0003021c 	.word	0x0003021c

000e5840 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   e5840:	2200      	movs	r2, #0
   e5842:	6840      	ldr	r0, [r0, #4]
   e5844:	4611      	mov	r1, r2
   e5846:	f7ff bf83 	b.w	e5750 <network_listening>

000e584a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   e584a:	2200      	movs	r2, #0
   e584c:	6840      	ldr	r0, [r0, #4]
   e584e:	4611      	mov	r1, r2
   e5850:	f7ff bf8e 	b.w	e5770 <network_get_listen_timeout>

000e5854 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   e5854:	6840      	ldr	r0, [r0, #4]
   e5856:	2200      	movs	r2, #0
   e5858:	f7ff bf82 	b.w	e5760 <network_set_listen_timeout>

000e585c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   e585c:	6840      	ldr	r0, [r0, #4]
   e585e:	2200      	movs	r2, #0
   e5860:	f081 0101 	eor.w	r1, r1, #1
   e5864:	f7ff bf6c 	b.w	e5740 <network_listen>

000e5868 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   e5868:	2300      	movs	r3, #0
   e586a:	6840      	ldr	r0, [r0, #4]
   e586c:	461a      	mov	r2, r3
   e586e:	4619      	mov	r1, r3
   e5870:	f7ff bf5e 	b.w	e5730 <network_off>

000e5874 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   e5874:	2300      	movs	r3, #0
   e5876:	6840      	ldr	r0, [r0, #4]
   e5878:	461a      	mov	r2, r3
   e587a:	4619      	mov	r1, r3
   e587c:	f7ff bf50 	b.w	e5720 <network_on>

000e5880 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   e5880:	2200      	movs	r2, #0
   e5882:	6840      	ldr	r0, [r0, #4]
   e5884:	4611      	mov	r1, r2
   e5886:	f7ff bf43 	b.w	e5710 <network_ready>

000e588a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   e588a:	2200      	movs	r2, #0
   e588c:	6840      	ldr	r0, [r0, #4]
   e588e:	4611      	mov	r1, r2
   e5890:	f7ff bf2e 	b.w	e56f0 <network_connecting>

000e5894 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   e5894:	6840      	ldr	r0, [r0, #4]
   e5896:	2200      	movs	r2, #0
   e5898:	2102      	movs	r1, #2
   e589a:	f7ff bf31 	b.w	e5700 <network_disconnect>

000e589e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   e589e:	2300      	movs	r3, #0
   e58a0:	6840      	ldr	r0, [r0, #4]
   e58a2:	461a      	mov	r2, r3
   e58a4:	f7ff bf1c 	b.w	e56e0 <network_connect>

000e58a8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   e58a8:	4b02      	ldr	r3, [pc, #8]	; (e58b4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   e58aa:	2203      	movs	r2, #3
   e58ac:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   e58ae:	4a02      	ldr	r2, [pc, #8]	; (e58b8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   e58b0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   e58b2:	4770      	bx	lr
   e58b4:	2003e640 	.word	0x2003e640
   e58b8:	000ed320 	.word	0x000ed320

000e58bc <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   e58bc:	b510      	push	{r4, lr}
   e58be:	4604      	mov	r4, r0
   e58c0:	4608      	mov	r0, r1
{
    _spi = spi;
   e58c2:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   e58c4:	f7ff fe66 	bl	e5594 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   e58c8:	2300      	movs	r3, #0
   e58ca:	6063      	str	r3, [r4, #4]
}
   e58cc:	4620      	mov	r0, r4
   e58ce:	bd10      	pop	{r4, pc}

000e58d0 <_ZN5Servo17writeMicrosecondsEt>:
}

void Servo::writeMicroseconds(uint16_t pulseWidth)
{

  if (!this->attached())
   e58d0:	f9b0 2000 	ldrsh.w	r2, [r0]
   e58d4:	1c53      	adds	r3, r2, #1
   e58d6:	d00b      	beq.n	e58f0 <_ZN5Servo17writeMicrosecondsEt+0x20>
  {
    return;
  }

  pulseWidth = constrain(pulseWidth, this->minPW, this->maxPW);
   e58d8:	8843      	ldrh	r3, [r0, #2]
   e58da:	8880      	ldrh	r0, [r0, #4]
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   e58dc:	428b      	cmp	r3, r1
   e58de:	d803      	bhi.n	e58e8 <_ZN5Servo17writeMicrosecondsEt+0x18>
   e58e0:	4288      	cmp	r0, r1
   e58e2:	4603      	mov	r3, r0
   e58e4:	bf28      	it	cs
   e58e6:	460b      	movcs	r3, r1

  HAL_Servo_Write_Pulse_Width(this->pin, pulseWidth);
   e58e8:	4619      	mov	r1, r3
   e58ea:	b290      	uxth	r0, r2
   e58ec:	f7ff be72 	b.w	e55d4 <HAL_Servo_Write_Pulse_Width>
}
   e58f0:	4770      	bx	lr

000e58f2 <_ZN5Servo5writeEi>:
{
   e58f2:	b513      	push	{r0, r1, r4, lr}
   e58f4:	4604      	mov	r4, r0
   e58f6:	4608      	mov	r0, r1
   e58f8:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
   e58fc:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
   e5900:	4288      	cmp	r0, r1
   e5902:	db10      	blt.n	e5926 <_ZN5Servo5writeEi+0x34>
   e5904:	4290      	cmp	r0, r2
   e5906:	bfa8      	it	ge
   e5908:	4610      	movge	r0, r2
  this->writeMicroseconds(ANGLE_TO_US(degrees)+trim);
   e590a:	88a3      	ldrh	r3, [r4, #4]
   e590c:	9300      	str	r3, [sp, #0]
   e590e:	8863      	ldrh	r3, [r4, #2]
   e5910:	f000 fb2a 	bl	e5f68 <_Z3mapiiiii>
   e5914:	68e3      	ldr	r3, [r4, #12]
   e5916:	4418      	add	r0, r3
   e5918:	b281      	uxth	r1, r0
   e591a:	4620      	mov	r0, r4
}
   e591c:	b002      	add	sp, #8
   e591e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  this->writeMicroseconds(ANGLE_TO_US(degrees)+trim);
   e5922:	f7ff bfd5 	b.w	e58d0 <_ZN5Servo17writeMicrosecondsEt>
   e5926:	4608      	mov	r0, r1
   e5928:	e7ef      	b.n	e590a <_ZN5Servo5writeEi+0x18>
	...

000e592c <_ZN5Servo11resetFieldsEv>:
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
  this->maxPW = SERVO_DEFAULT_MAX_PW;
   e592c:	4a04      	ldr	r2, [pc, #16]	; (e5940 <_ZN5Servo11resetFieldsEv+0x14>)
   e592e:	f44f 6316 	mov.w	r3, #2400	; 0x960
   e5932:	e9c0 2300 	strd	r2, r3, [r0]
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
   e5936:	23b4      	movs	r3, #180	; 0xb4
   e5938:	8103      	strh	r3, [r0, #8]
  this->trim = 0;
   e593a:	2300      	movs	r3, #0
   e593c:	60c3      	str	r3, [r0, #12]
}
   e593e:	4770      	bx	lr
   e5940:	0220ffff 	.word	0x0220ffff

000e5944 <_ZN5ServoC1Ev>:
Servo::Servo()
   e5944:	b508      	push	{r3, lr}
  this->resetFields();
   e5946:	f7ff fff1 	bl	e592c <_ZN5Servo11resetFieldsEv>
}
   e594a:	bd08      	pop	{r3, pc}

000e594c <_ZN5Servo6detachEv>:
{
   e594c:	b510      	push	{r4, lr}
   e594e:	4604      	mov	r4, r0
  if (!this->attached())
   e5950:	f9b0 0000 	ldrsh.w	r0, [r0]
   e5954:	1c43      	adds	r3, r0, #1
   e5956:	d007      	beq.n	e5968 <_ZN5Servo6detachEv+0x1c>
  HAL_Servo_Detach(this->pin);
   e5958:	b280      	uxth	r0, r0
   e595a:	f7ff fe33 	bl	e55c4 <HAL_Servo_Detach>
  this->resetFields();
   e595e:	4620      	mov	r0, r4
   e5960:	f7ff ffe4 	bl	e592c <_ZN5Servo11resetFieldsEv>
  return true;
   e5964:	2001      	movs	r0, #1
}
   e5966:	bd10      	pop	{r4, pc}
    return false;
   e5968:	2000      	movs	r0, #0
   e596a:	e7fc      	b.n	e5966 <_ZN5Servo6detachEv+0x1a>

000e596c <_ZN5ServoD1Ev>:
Servo::~Servo()
   e596c:	b510      	push	{r4, lr}
   e596e:	4604      	mov	r4, r0
  detach();
   e5970:	f7ff ffec 	bl	e594c <_ZN5Servo6detachEv>
}
   e5974:	4620      	mov	r0, r4
   e5976:	bd10      	pop	{r4, pc}

000e5978 <_ZN5Servo6attachEtttss>:
{
   e5978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e597c:	460d      	mov	r5, r1
   e597e:	4604      	mov	r4, r0
  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
   e5980:	2102      	movs	r1, #2
   e5982:	4628      	mov	r0, r5
{
   e5984:	4690      	mov	r8, r2
   e5986:	461f      	mov	r7, r3
  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
   e5988:	f7ff fcd4 	bl	e5334 <HAL_Validate_Pin_Function>
   e598c:	2802      	cmp	r0, #2
   e598e:	d003      	beq.n	e5998 <_ZN5Servo6attachEtttss+0x20>
    return false;
   e5990:	2600      	movs	r6, #0
}
   e5992:	4630      	mov	r0, r6
   e5994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!pinAvailable(pin))
   e5998:	4628      	mov	r0, r5
   e599a:	f001 fd9d 	bl	e74d8 <pinAvailable>
   e599e:	4606      	mov	r6, r0
   e59a0:	2800      	cmp	r0, #0
   e59a2:	d0f5      	beq.n	e5990 <_ZN5Servo6attachEtttss+0x18>
  if (this->attached())
   e59a4:	f9b4 3000 	ldrsh.w	r3, [r4]
   e59a8:	3301      	adds	r3, #1
   e59aa:	d002      	beq.n	e59b2 <_ZN5Servo6attachEtttss+0x3a>
    this->detach();
   e59ac:	4620      	mov	r0, r4
   e59ae:	f7ff ffcd 	bl	e594c <_ZN5Servo6detachEv>
  this->minAngle = minAngle;
   e59b2:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
   e59b6:	80e3      	strh	r3, [r4, #6]
  this->maxAngle = maxAngle;
   e59b8:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
  this->pin = pin;
   e59bc:	8025      	strh	r5, [r4, #0]
  this->minPW = minPW;
   e59be:	f8a4 8002 	strh.w	r8, [r4, #2]
  this->maxPW = maxPW;
   e59c2:	80a7      	strh	r7, [r4, #4]
  this->maxAngle = maxAngle;
   e59c4:	8123      	strh	r3, [r4, #8]
  HAL_Servo_Attach(this->pin);
   e59c6:	4628      	mov	r0, r5
   e59c8:	f7ff fdf4 	bl	e55b4 <HAL_Servo_Attach>
  return true;
   e59cc:	e7e1      	b.n	e5992 <_ZN5Servo6attachEtttss+0x1a>

000e59ce <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   e59ce:	b510      	push	{r4, lr}
   e59d0:	4604      	mov	r4, r0
        if (wakeupSource_) {
   e59d2:	6800      	ldr	r0, [r0, #0]
   e59d4:	b118      	cbz	r0, e59de <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   e59d6:	f7ff fef3 	bl	e57c0 <free>
            wakeupSource_ = nullptr;
   e59da:	2300      	movs	r3, #0
   e59dc:	6023      	str	r3, [r4, #0]
        }
    }
   e59de:	bd10      	pop	{r4, pc}

000e59e0 <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   e59e0:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   e59e2:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   e59e6:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   e59e8:	460b      	mov	r3, r1
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   e59ea:	460d      	mov	r5, r1
        compatResult_ = result.compatResult_;
   e59ec:	f853 2f06 	ldr.w	r2, [r3, #6]!
   e59f0:	f8c0 2006 	str.w	r2, [r0, #6]
   e59f4:	889b      	ldrh	r3, [r3, #4]
   e59f6:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   e59f8:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   e59fa:	f7ff ffe8 	bl	e59ce <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
   e59fe:	682b      	ldr	r3, [r5, #0]
   e5a00:	b113      	cbz	r3, e5a08 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   e5a02:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   e5a04:	2300      	movs	r3, #0
   e5a06:	602b      	str	r3, [r5, #0]
    }
   e5a08:	4620      	mov	r0, r4
   e5a0a:	bd38      	pop	{r3, r4, r5, pc}

000e5a0c <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   e5a0c:	b538      	push	{r3, r4, r5, lr}
   e5a0e:	460c      	mov	r4, r1
   e5a10:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   e5a12:	f7ff ffdc 	bl	e59ce <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (source) {
   e5a16:	b144      	cbz	r4, e5a2a <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   e5a18:	8820      	ldrh	r0, [r4, #0]
   e5a1a:	f7ff fec9 	bl	e57b0 <malloc>
   e5a1e:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   e5a20:	b128      	cbz	r0, e5a2e <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   e5a22:	8822      	ldrh	r2, [r4, #0]
   e5a24:	4621      	mov	r1, r4
   e5a26:	f002 ff51 	bl	e88cc <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
   e5a2a:	2000      	movs	r0, #0
    }
   e5a2c:	bd38      	pop	{r3, r4, r5, pc}
                return SYSTEM_ERROR_NO_MEMORY;
   e5a2e:	4801      	ldr	r0, [pc, #4]	; (e5a34 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
   e5a30:	e7fc      	b.n	e5a2c <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x20>
   e5a32:	bf00      	nop
   e5a34:	fffffefc 	.word	0xfffffefc

000e5a38 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   e5a38:	b5f0      	push	{r4, r5, r6, r7, lr}
   e5a3a:	4d2d      	ldr	r5, [pc, #180]	; (e5af0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   e5a3c:	7d0b      	ldrb	r3, [r1, #20]
   e5a3e:	4604      	mov	r4, r0
   e5a40:	b08b      	sub	sp, #44	; 0x2c
   e5a42:	4608      	mov	r0, r1
   e5a44:	1daf      	adds	r7, r5, #6
   e5a46:	2b00      	cmp	r3, #0
   e5a48:	d038      	beq.n	e5abc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
        return static_cast<SystemSleepMode>(config_->mode);
   e5a4a:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   e5a4c:	791b      	ldrb	r3, [r3, #4]
   e5a4e:	2b00      	cmp	r3, #0
   e5a50:	d034      	beq.n	e5abc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
              error_(SYSTEM_ERROR_NONE) {
   e5a52:	2200      	movs	r2, #0
    SleepResult() {}
   e5a54:	4b27      	ldr	r3, [pc, #156]	; (e5af4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   e5a56:	9304      	str	r3, [sp, #16]
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   e5a58:	a902      	add	r1, sp, #8
   e5a5a:	3004      	adds	r0, #4
              error_(SYSTEM_ERROR_NONE) {
   e5a5c:	9202      	str	r2, [sp, #8]
   e5a5e:	f8ad 200c 	strh.w	r2, [sp, #12]
    SleepResult() {}
   e5a62:	f88d 200e 	strb.w	r2, [sp, #14]
   e5a66:	f7ff fe31 	bl	e56cc <system_sleep_ext>
        compatResult_ = result.compatResult_;
   e5a6a:	f8dd 300e 	ldr.w	r3, [sp, #14]
   e5a6e:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   e5a72:	b200      	sxth	r0, r0
   e5a74:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   e5a78:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   e5a7c:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   e5a7e:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   e5a80:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   e5a82:	4628      	mov	r0, r5
   e5a84:	f7ff ffc2 	bl	e5a0c <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        freeWakeupSourceMemory();
   e5a88:	a802      	add	r0, sp, #8
   e5a8a:	f7ff ffa0 	bl	e59ce <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
              error_(SYSTEM_ERROR_NONE) {
   e5a8e:	2300      	movs	r3, #0
   e5a90:	6023      	str	r3, [r4, #0]
   e5a92:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   e5a94:	71a3      	strb	r3, [r4, #6]
   e5a96:	8123      	strh	r3, [r4, #8]
   e5a98:	f64f 73ff 	movw	r3, #65535	; 0xffff
   e5a9c:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   e5a9e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   e5aa2:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   e5aa4:	683b      	ldr	r3, [r7, #0]
   e5aa6:	f8c4 3006 	str.w	r3, [r4, #6]
   e5aaa:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   e5aac:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   e5aae:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   e5ab0:	4620      	mov	r0, r4
   e5ab2:	f7ff ffab 	bl	e5a0c <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   e5ab6:	4620      	mov	r0, r4
   e5ab8:	b00b      	add	sp, #44	; 0x2c
   e5aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   e5abc:	2600      	movs	r6, #0
   e5abe:	2320      	movs	r3, #32
   e5ac0:	e9cd 3602 	strd	r3, r6, [sp, #8]
   e5ac4:	4b0c      	ldr	r3, [pc, #48]	; (e5af8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc0>)
   e5ac6:	9300      	str	r3, [sp, #0]
   e5ac8:	490c      	ldr	r1, [pc, #48]	; (e5afc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc4>)
   e5aca:	4633      	mov	r3, r6
   e5acc:	aa02      	add	r2, sp, #8
   e5ace:	2032      	movs	r0, #50	; 0x32
   e5ad0:	f7ff fdd0 	bl	e5674 <log_message>
    SleepResult() {}
   e5ad4:	4b07      	ldr	r3, [pc, #28]	; (e5af4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   e5ad6:	9304      	str	r3, [sp, #16]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   e5ad8:	a902      	add	r1, sp, #8
        error_ = error;
   e5ada:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   e5ade:	4804      	ldr	r0, [pc, #16]	; (e5af0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
              error_(SYSTEM_ERROR_NONE) {
   e5ae0:	9602      	str	r6, [sp, #8]
    SleepResult() {}
   e5ae2:	f88d 600e 	strb.w	r6, [sp, #14]
        error_ = error;
   e5ae6:	f8ad 300c 	strh.w	r3, [sp, #12]
   e5aea:	f7ff ff79 	bl	e59e0 <_ZN17SystemSleepResultaSEOS_>
   e5aee:	e7cb      	b.n	e5a88 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x50>
   e5af0:	2003e648 	.word	0x2003e648
   e5af4:	ffff0000 	.word	0xffff0000
   e5af8:	000ed353 	.word	0x000ed353
   e5afc:	000ed34c 	.word	0x000ed34c

000e5b00 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   e5b00:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   e5b02:	4b09      	ldr	r3, [pc, #36]	; (e5b28 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   e5b04:	4c09      	ldr	r4, [pc, #36]	; (e5b2c <_GLOBAL__sub_I_System+0x2c>)
   e5b06:	2202      	movs	r2, #2
   e5b08:	2000      	movs	r0, #0
   e5b0a:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   e5b0c:	4b08      	ldr	r3, [pc, #32]	; (e5b30 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   e5b0e:	6020      	str	r0, [r4, #0]
   e5b10:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   e5b12:	71a0      	strb	r0, [r4, #6]
   e5b14:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   e5b16:	f7ff fdb5 	bl	e5684 <set_system_mode>
SystemClass System;
   e5b1a:	4620      	mov	r0, r4
   e5b1c:	4a05      	ldr	r2, [pc, #20]	; (e5b34 <_GLOBAL__sub_I_System+0x34>)
   e5b1e:	4906      	ldr	r1, [pc, #24]	; (e5b38 <_GLOBAL__sub_I_System+0x38>)
   e5b20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   e5b24:	f001 bd56 	b.w	e75d4 <__aeabi_atexit>
   e5b28:	2003e654 	.word	0x2003e654
   e5b2c:	2003e648 	.word	0x2003e648
   e5b30:	ffff0000 	.word	0xffff0000
   e5b34:	2003ae68 	.word	0x2003ae68
   e5b38:	000d4115 	.word	0x000d4115

000e5b3c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   e5b3c:	b510      	push	{r4, lr}
   e5b3e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   e5b40:	f002 ff3a 	bl	e89b8 <strlen>
   e5b44:	3801      	subs	r0, #1
   e5b46:	1823      	adds	r3, r4, r0
   e5b48:	4620      	mov	r0, r4
	while(i<j){
   e5b4a:	4283      	cmp	r3, r0
   e5b4c:	d906      	bls.n	e5b5c <_Z11str_reversePc+0x20>
		c = *i;
   e5b4e:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   e5b50:	7819      	ldrb	r1, [r3, #0]
   e5b52:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   e5b56:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   e5b5a:	e7f6      	b.n	e5b4a <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   e5b5c:	bd10      	pop	{r4, pc}

000e5b5e <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   e5b5e:	b570      	push	{r4, r5, r6, lr}
   e5b60:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   e5b62:	1e91      	subs	r1, r2, #2
   e5b64:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   e5b66:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   e5b68:	d822      	bhi.n	e5bb0 <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   e5b6a:	4620      	mov	r0, r4

	div_t result;
	while(a){
   e5b6c:	b16d      	cbz	r5, e5b8a <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   e5b6e:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   e5b72:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   e5b76:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   e5b78:	2d09      	cmp	r5, #9
                *ptr += '0';
   e5b7a:	bf94      	ite	ls
   e5b7c:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   e5b7e:	3157      	addhi	r1, #87	; 0x57
   e5b80:	b2c9      	uxtb	r1, r1
   e5b82:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   e5b86:	4635      	mov	r5, r6
	while(a){
   e5b88:	e7f0      	b.n	e5b6c <ultoa+0xe>
   e5b8a:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   e5b8c:	4423      	add	r3, r4
            *ptr++ = '0';
   e5b8e:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   e5b90:	4293      	cmp	r3, r2
   e5b92:	d902      	bls.n	e5b9a <ultoa+0x3c>
            *ptr++ = '0';
   e5b94:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   e5b98:	e7fa      	b.n	e5b90 <ultoa+0x32>
   e5b9a:	1a1a      	subs	r2, r3, r0
   e5b9c:	4283      	cmp	r3, r0
   e5b9e:	bf38      	it	cc
   e5ba0:	2200      	movcc	r2, #0

	*ptr = '\0';
   e5ba2:	2300      	movs	r3, #0
   e5ba4:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   e5ba6:	4620      	mov	r0, r4
   e5ba8:	f7ff ffc8 	bl	e5b3c <_Z11str_reversePc>
	return buffer;
   e5bac:	4620      	mov	r0, r4
}
   e5bae:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   e5bb0:	2000      	movs	r0, #0
   e5bb2:	e7fc      	b.n	e5bae <ultoa+0x50>

000e5bb4 <utoa>:
		ultoa(a, buffer, radix);
	}
	return buffer;
}

__attribute__((weak)) char* utoa(unsigned a, char* buffer, int radix) {
   e5bb4:	b508      	push	{r3, lr}
    return ultoa(a, buffer, radix);
   e5bb6:	2301      	movs	r3, #1
   e5bb8:	f7ff ffd1 	bl	e5b5e <ultoa>
}
   e5bbc:	bd08      	pop	{r3, pc}

000e5bbe <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   e5bbe:	b510      	push	{r4, lr}
   e5bc0:	4604      	mov	r4, r0
{
	free(buffer);
   e5bc2:	6800      	ldr	r0, [r0, #0]
   e5bc4:	f7ff fdfc 	bl	e57c0 <free>
}
   e5bc8:	4620      	mov	r0, r4
   e5bca:	bd10      	pop	{r4, pc}

000e5bcc <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   e5bcc:	b510      	push	{r4, lr}
   e5bce:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   e5bd0:	6800      	ldr	r0, [r0, #0]
   e5bd2:	b108      	cbz	r0, e5bd8 <_ZN6String10invalidateEv+0xc>
   e5bd4:	f7ff fdf4 	bl	e57c0 <free>
	buffer = NULL;
   e5bd8:	2300      	movs	r3, #0
	capacity = len = 0;
   e5bda:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   e5bde:	6023      	str	r3, [r4, #0]
}
   e5be0:	bd10      	pop	{r4, pc}

000e5be2 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   e5be2:	b538      	push	{r3, r4, r5, lr}
   e5be4:	4604      	mov	r4, r0
   e5be6:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   e5be8:	6800      	ldr	r0, [r0, #0]
   e5bea:	3101      	adds	r1, #1
   e5bec:	f7ff fdf0 	bl	e57d0 <realloc>
	if (newbuffer) {
   e5bf0:	b110      	cbz	r0, e5bf8 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   e5bf2:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   e5bf6:	2001      	movs	r0, #1
	}
	return 0;
}
   e5bf8:	bd38      	pop	{r3, r4, r5, pc}

000e5bfa <_ZN6String7reserveEj>:
{
   e5bfa:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   e5bfc:	6803      	ldr	r3, [r0, #0]
{
   e5bfe:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   e5c00:	b123      	cbz	r3, e5c0c <_ZN6String7reserveEj+0x12>
   e5c02:	6843      	ldr	r3, [r0, #4]
   e5c04:	428b      	cmp	r3, r1
   e5c06:	d301      	bcc.n	e5c0c <_ZN6String7reserveEj+0x12>
   e5c08:	2001      	movs	r0, #1
}
   e5c0a:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   e5c0c:	4620      	mov	r0, r4
   e5c0e:	f7ff ffe8 	bl	e5be2 <_ZN6String12changeBufferEj>
   e5c12:	2800      	cmp	r0, #0
   e5c14:	d0f9      	beq.n	e5c0a <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   e5c16:	68a3      	ldr	r3, [r4, #8]
   e5c18:	2b00      	cmp	r3, #0
   e5c1a:	d1f5      	bne.n	e5c08 <_ZN6String7reserveEj+0xe>
   e5c1c:	6822      	ldr	r2, [r4, #0]
   e5c1e:	7013      	strb	r3, [r2, #0]
   e5c20:	e7f2      	b.n	e5c08 <_ZN6String7reserveEj+0xe>

000e5c22 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   e5c22:	b537      	push	{r0, r1, r2, r4, r5, lr}
   e5c24:	460d      	mov	r5, r1
	if (!reserve(length)) {
   e5c26:	4611      	mov	r1, r2
   e5c28:	9201      	str	r2, [sp, #4]
{
   e5c2a:	4604      	mov	r4, r0
	if (!reserve(length)) {
   e5c2c:	f7ff ffe5 	bl	e5bfa <_ZN6String7reserveEj>
   e5c30:	9a01      	ldr	r2, [sp, #4]
   e5c32:	b928      	cbnz	r0, e5c40 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   e5c34:	4620      	mov	r0, r4
   e5c36:	f7ff ffc9 	bl	e5bcc <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   e5c3a:	4620      	mov	r0, r4
   e5c3c:	b003      	add	sp, #12
   e5c3e:	bd30      	pop	{r4, r5, pc}
	len = length;
   e5c40:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   e5c42:	4629      	mov	r1, r5
   e5c44:	6820      	ldr	r0, [r4, #0]
   e5c46:	f002 fe41 	bl	e88cc <memcpy>
	buffer[len] = 0;
   e5c4a:	6822      	ldr	r2, [r4, #0]
   e5c4c:	68a3      	ldr	r3, [r4, #8]
   e5c4e:	2100      	movs	r1, #0
   e5c50:	54d1      	strb	r1, [r2, r3]
	return *this;
   e5c52:	e7f2      	b.n	e5c3a <_ZN6String4copyEPKcj+0x18>

000e5c54 <_ZN6StringC1EPKc>:
	buffer = NULL;
   e5c54:	2300      	movs	r3, #0
String::String(const char *cstr)
   e5c56:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   e5c58:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   e5c5c:	4604      	mov	r4, r0
	len = 0;
   e5c5e:	6083      	str	r3, [r0, #8]
	flags = 0;
   e5c60:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   e5c62:	b141      	cbz	r1, e5c76 <_ZN6StringC1EPKc+0x22>
   e5c64:	4608      	mov	r0, r1
   e5c66:	9101      	str	r1, [sp, #4]
   e5c68:	f002 fea6 	bl	e89b8 <strlen>
   e5c6c:	9901      	ldr	r1, [sp, #4]
   e5c6e:	4602      	mov	r2, r0
   e5c70:	4620      	mov	r0, r4
   e5c72:	f7ff ffd6 	bl	e5c22 <_ZN6String4copyEPKcj>
}
   e5c76:	4620      	mov	r0, r4
   e5c78:	b002      	add	sp, #8
   e5c7a:	bd10      	pop	{r4, pc}

000e5c7c <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   e5c7c:	b538      	push	{r3, r4, r5, lr}
   e5c7e:	4605      	mov	r5, r0
	if (buffer) {
   e5c80:	6800      	ldr	r0, [r0, #0]
{
   e5c82:	460c      	mov	r4, r1
	if (buffer) {
   e5c84:	b168      	cbz	r0, e5ca2 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   e5c86:	686a      	ldr	r2, [r5, #4]
   e5c88:	688b      	ldr	r3, [r1, #8]
   e5c8a:	429a      	cmp	r2, r3
   e5c8c:	d307      	bcc.n	e5c9e <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   e5c8e:	6809      	ldr	r1, [r1, #0]
   e5c90:	f002 fe8a 	bl	e89a8 <strcpy>
			len = rhs.len;
   e5c94:	68a3      	ldr	r3, [r4, #8]
   e5c96:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   e5c98:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   e5c9a:	60a3      	str	r3, [r4, #8]
}
   e5c9c:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   e5c9e:	f7ff fd8f 	bl	e57c0 <free>
	buffer = rhs.buffer;
   e5ca2:	6823      	ldr	r3, [r4, #0]
   e5ca4:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   e5ca6:	6863      	ldr	r3, [r4, #4]
   e5ca8:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   e5caa:	68a3      	ldr	r3, [r4, #8]
   e5cac:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   e5cae:	2300      	movs	r3, #0
	rhs.capacity = 0;
   e5cb0:	e9c4 3300 	strd	r3, r3, [r4]
   e5cb4:	e7f1      	b.n	e5c9a <_ZN6String4moveERS_+0x1e>

000e5cb6 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   e5cb6:	4288      	cmp	r0, r1
{
   e5cb8:	b510      	push	{r4, lr}
   e5cba:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   e5cbc:	d005      	beq.n	e5cca <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   e5cbe:	680b      	ldr	r3, [r1, #0]
   e5cc0:	b12b      	cbz	r3, e5cce <_ZN6StringaSERKS_+0x18>
   e5cc2:	688a      	ldr	r2, [r1, #8]
   e5cc4:	4619      	mov	r1, r3
   e5cc6:	f7ff ffac 	bl	e5c22 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   e5cca:	4620      	mov	r0, r4
   e5ccc:	bd10      	pop	{r4, pc}
	else invalidate();
   e5cce:	f7ff ff7d 	bl	e5bcc <_ZN6String10invalidateEv>
   e5cd2:	e7fa      	b.n	e5cca <_ZN6StringaSERKS_+0x14>

000e5cd4 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   e5cd4:	b510      	push	{r4, lr}
	buffer = NULL;
   e5cd6:	2300      	movs	r3, #0
String::String(const String &value)
   e5cd8:	4604      	mov	r4, r0
	capacity = 0;
   e5cda:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   e5cde:	6083      	str	r3, [r0, #8]
	flags = 0;
   e5ce0:	7303      	strb	r3, [r0, #12]
	*this = value;
   e5ce2:	f7ff ffe8 	bl	e5cb6 <_ZN6StringaSERKS_>
}
   e5ce6:	4620      	mov	r0, r4
   e5ce8:	bd10      	pop	{r4, pc}

000e5cea <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   e5cea:	4288      	cmp	r0, r1
{
   e5cec:	b510      	push	{r4, lr}
   e5cee:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   e5cf0:	d001      	beq.n	e5cf6 <_ZN6StringaSEOS_+0xc>
   e5cf2:	f7ff ffc3 	bl	e5c7c <_ZN6String4moveERS_>
	return *this;
}
   e5cf6:	4620      	mov	r0, r4
   e5cf8:	bd10      	pop	{r4, pc}

000e5cfa <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   e5cfa:	b513      	push	{r0, r1, r4, lr}
   e5cfc:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   e5cfe:	b159      	cbz	r1, e5d18 <_ZN6StringaSEPKc+0x1e>
   e5d00:	4608      	mov	r0, r1
   e5d02:	9101      	str	r1, [sp, #4]
   e5d04:	f002 fe58 	bl	e89b8 <strlen>
   e5d08:	9901      	ldr	r1, [sp, #4]
   e5d0a:	4602      	mov	r2, r0
   e5d0c:	4620      	mov	r0, r4
   e5d0e:	f7ff ff88 	bl	e5c22 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   e5d12:	4620      	mov	r0, r4
   e5d14:	b002      	add	sp, #8
   e5d16:	bd10      	pop	{r4, pc}
	else invalidate();
   e5d18:	f7ff ff58 	bl	e5bcc <_ZN6String10invalidateEv>
   e5d1c:	e7f9      	b.n	e5d12 <_ZN6StringaSEPKc+0x18>

000e5d1e <_ZN6StringC1Ejh>:
String::String(unsigned int value, unsigned char base)
   e5d1e:	b510      	push	{r4, lr}
   e5d20:	4604      	mov	r4, r0
   e5d22:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   e5d24:	2300      	movs	r3, #0
	capacity = 0;
   e5d26:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   e5d2a:	60a3      	str	r3, [r4, #8]
	flags = 0;
   e5d2c:	7323      	strb	r3, [r4, #12]
String::String(unsigned int value, unsigned char base)
   e5d2e:	4608      	mov	r0, r1
	utoa(value, buf, base);
   e5d30:	a901      	add	r1, sp, #4
   e5d32:	f7ff ff3f 	bl	e5bb4 <utoa>
	*this = buf;
   e5d36:	a901      	add	r1, sp, #4
   e5d38:	4620      	mov	r0, r4
   e5d3a:	f7ff ffde 	bl	e5cfa <_ZN6StringaSEPKc>
}
   e5d3e:	4620      	mov	r0, r4
   e5d40:	b00a      	add	sp, #40	; 0x28
   e5d42:	bd10      	pop	{r4, pc}

000e5d44 <_ZN6StringC1Emh>:
String::String(unsigned long value, unsigned char base)
   e5d44:	b510      	push	{r4, lr}
   e5d46:	4604      	mov	r4, r0
   e5d48:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   e5d4a:	2300      	movs	r3, #0
	capacity = 0;
   e5d4c:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   e5d50:	60a3      	str	r3, [r4, #8]
	flags = 0;
   e5d52:	7323      	strb	r3, [r4, #12]
String::String(unsigned long value, unsigned char base)
   e5d54:	4608      	mov	r0, r1
	ultoa(value, buf, base);
   e5d56:	2301      	movs	r3, #1
   e5d58:	a901      	add	r1, sp, #4
   e5d5a:	f7ff ff00 	bl	e5b5e <ultoa>
	*this = buf;
   e5d5e:	a901      	add	r1, sp, #4
   e5d60:	4620      	mov	r0, r4
   e5d62:	f7ff ffca 	bl	e5cfa <_ZN6StringaSEPKc>
}
   e5d66:	4620      	mov	r0, r4
   e5d68:	b00a      	add	sp, #40	; 0x28
   e5d6a:	bd10      	pop	{r4, pc}

000e5d6c <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   e5d6c:	b570      	push	{r4, r5, r6, lr}
   e5d6e:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   e5d70:	460e      	mov	r6, r1
   e5d72:	b909      	cbnz	r1, e5d78 <_ZN6String6concatEPKcj+0xc>
   e5d74:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   e5d76:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   e5d78:	b16a      	cbz	r2, e5d96 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   e5d7a:	6884      	ldr	r4, [r0, #8]
   e5d7c:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   e5d7e:	4621      	mov	r1, r4
   e5d80:	f7ff ff3b 	bl	e5bfa <_ZN6String7reserveEj>
   e5d84:	2800      	cmp	r0, #0
   e5d86:	d0f5      	beq.n	e5d74 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   e5d88:	6828      	ldr	r0, [r5, #0]
   e5d8a:	68ab      	ldr	r3, [r5, #8]
   e5d8c:	4631      	mov	r1, r6
   e5d8e:	4418      	add	r0, r3
   e5d90:	f002 fe0a 	bl	e89a8 <strcpy>
	len = newlen;
   e5d94:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   e5d96:	2001      	movs	r0, #1
   e5d98:	e7ed      	b.n	e5d76 <_ZN6String6concatEPKcj+0xa>

000e5d9a <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   e5d9a:	688a      	ldr	r2, [r1, #8]
   e5d9c:	6809      	ldr	r1, [r1, #0]
   e5d9e:	f7ff bfe5 	b.w	e5d6c <_ZN6String6concatEPKcj>

000e5da2 <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
   e5da2:	b513      	push	{r0, r1, r4, lr}
   e5da4:	4604      	mov	r4, r0
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}
   e5da6:	4608      	mov	r0, r1
	if (!cstr) return 0;
   e5da8:	b151      	cbz	r1, e5dc0 <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
   e5daa:	9101      	str	r1, [sp, #4]
   e5dac:	f002 fe04 	bl	e89b8 <strlen>
   e5db0:	9901      	ldr	r1, [sp, #4]
   e5db2:	4602      	mov	r2, r0
   e5db4:	4620      	mov	r0, r4
}
   e5db6:	b002      	add	sp, #8
   e5db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return concat(cstr, strlen(cstr));
   e5dbc:	f7ff bfd6 	b.w	e5d6c <_ZN6String6concatEPKcj>
}
   e5dc0:	b002      	add	sp, #8
   e5dc2:	bd10      	pop	{r4, pc}

000e5dc4 <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
   e5dc4:	6802      	ldr	r2, [r0, #0]
{
   e5dc6:	460b      	mov	r3, r1
   e5dc8:	6809      	ldr	r1, [r1, #0]
	if (!buffer || !s.buffer) {
   e5dca:	b162      	cbz	r2, e5de6 <_ZNK6String9compareToERKS_+0x22>
   e5dcc:	b941      	cbnz	r1, e5de0 <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
   e5dce:	6880      	ldr	r0, [r0, #8]
   e5dd0:	b160      	cbz	r0, e5dec <_ZNK6String9compareToERKS_+0x28>
   e5dd2:	7810      	ldrb	r0, [r2, #0]
   e5dd4:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   e5dd6:	6898      	ldr	r0, [r3, #8]
   e5dd8:	b140      	cbz	r0, e5dec <_ZNK6String9compareToERKS_+0x28>
   e5dda:	7809      	ldrb	r1, [r1, #0]
   e5ddc:	4248      	negs	r0, r1
   e5dde:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
   e5de0:	4610      	mov	r0, r2
   e5de2:	f002 bdd7 	b.w	e8994 <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   e5de6:	2900      	cmp	r1, #0
   e5de8:	d1f5      	bne.n	e5dd6 <_ZNK6String9compareToERKS_+0x12>
		return 0;
   e5dea:	4608      	mov	r0, r1
}
   e5dec:	4770      	bx	lr

000e5dee <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
   e5dee:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
   e5df0:	6882      	ldr	r2, [r0, #8]
   e5df2:	688b      	ldr	r3, [r1, #8]
   e5df4:	429a      	cmp	r2, r3
   e5df6:	d105      	bne.n	e5e04 <_ZNK6String6equalsERKS_+0x16>
   e5df8:	f7ff ffe4 	bl	e5dc4 <_ZNK6String9compareToERKS_>
   e5dfc:	fab0 f080 	clz	r0, r0
   e5e00:	0940      	lsrs	r0, r0, #5
}
   e5e02:	bd08      	pop	{r3, pc}
	return (len == s2.len && compareTo(s2) == 0);
   e5e04:	2000      	movs	r0, #0
   e5e06:	e7fc      	b.n	e5e02 <_ZNK6String6equalsERKS_+0x14>

000e5e08 <_ZNK6String6equalsEPKc>:

unsigned char String::equals(const char *cstr) const
{
   e5e08:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   e5e0a:	6882      	ldr	r2, [r0, #8]
   e5e0c:	b93a      	cbnz	r2, e5e1e <_ZNK6String6equalsEPKc+0x16>
   e5e0e:	b121      	cbz	r1, e5e1a <_ZNK6String6equalsEPKc+0x12>
   e5e10:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   e5e12:	fab0 f080 	clz	r0, r0
   e5e16:	0940      	lsrs	r0, r0, #5
   e5e18:	e000      	b.n	e5e1c <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   e5e1a:	2001      	movs	r0, #1
}
   e5e1c:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   e5e1e:	6800      	ldr	r0, [r0, #0]
   e5e20:	b909      	cbnz	r1, e5e26 <_ZNK6String6equalsEPKc+0x1e>
   e5e22:	7800      	ldrb	r0, [r0, #0]
   e5e24:	e7f5      	b.n	e5e12 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   e5e26:	f002 fdb5 	bl	e8994 <strcmp>
   e5e2a:	e7f2      	b.n	e5e12 <_ZNK6String6equalsEPKc+0xa>

000e5e2c <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   e5e2c:	b510      	push	{r4, lr}
   e5e2e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   e5e30:	6800      	ldr	r0, [r0, #0]
   e5e32:	b108      	cbz	r0, e5e38 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   e5e34:	f7ff fabe 	bl	e53b4 <os_mutex_recursive_destroy>
    }
   e5e38:	4620      	mov	r0, r4
   e5e3a:	bd10      	pop	{r4, pc}

000e5e3c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   e5e3c:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   e5e3e:	4c06      	ldr	r4, [pc, #24]	; (e5e58 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   e5e40:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   e5e42:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   e5e44:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   e5e46:	f7ff faad 	bl	e53a4 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   e5e4a:	4620      	mov	r0, r4
   e5e4c:	4a03      	ldr	r2, [pc, #12]	; (e5e5c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   e5e4e:	4904      	ldr	r1, [pc, #16]	; (e5e60 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   e5e50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   e5e54:	f001 bbbe 	b.w	e75d4 <__aeabi_atexit>
   e5e58:	2003e658 	.word	0x2003e658
   e5e5c:	2003ae68 	.word	0x2003ae68
   e5e60:	000e5e2d 	.word	0x000e5e2d

000e5e64 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   e5e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e5e66:	4606      	mov	r6, r0
   e5e68:	460d      	mov	r5, r1
  size_t n = 0;
   e5e6a:	188f      	adds	r7, r1, r2
   e5e6c:	2400      	movs	r4, #0
  while (size--) {
   e5e6e:	42bd      	cmp	r5, r7
   e5e70:	d00c      	beq.n	e5e8c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   e5e72:	6833      	ldr	r3, [r6, #0]
   e5e74:	f815 1b01 	ldrb.w	r1, [r5], #1
   e5e78:	689b      	ldr	r3, [r3, #8]
   e5e7a:	4630      	mov	r0, r6
   e5e7c:	4798      	blx	r3
     if (chunk>=0)
   e5e7e:	1e03      	subs	r3, r0, #0
   e5e80:	db01      	blt.n	e5e86 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   e5e82:	441c      	add	r4, r3
  while (size--) {
   e5e84:	e7f3      	b.n	e5e6e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   e5e86:	2c00      	cmp	r4, #0
   e5e88:	bf08      	it	eq
   e5e8a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   e5e8c:	4620      	mov	r0, r4
   e5e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000e5e90 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   e5e90:	b513      	push	{r0, r1, r4, lr}
   e5e92:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   e5e94:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   e5e96:	b159      	cbz	r1, e5eb0 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   e5e98:	9101      	str	r1, [sp, #4]
   e5e9a:	f002 fd8d 	bl	e89b8 <strlen>
   e5e9e:	6823      	ldr	r3, [r4, #0]
   e5ea0:	9901      	ldr	r1, [sp, #4]
   e5ea2:	68db      	ldr	r3, [r3, #12]
   e5ea4:	4602      	mov	r2, r0
   e5ea6:	4620      	mov	r0, r4
    }
   e5ea8:	b002      	add	sp, #8
   e5eaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   e5eae:	4718      	bx	r3
    }
   e5eb0:	b002      	add	sp, #8
   e5eb2:	bd10      	pop	{r4, pc}

000e5eb4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   e5eb4:	6803      	ldr	r3, [r0, #0]
   e5eb6:	689b      	ldr	r3, [r3, #8]
   e5eb8:	4718      	bx	r3

000e5eba <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   e5eba:	b530      	push	{r4, r5, lr}
   e5ebc:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   e5ebe:	2300      	movs	r3, #0
   e5ec0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   e5ec4:	2a01      	cmp	r2, #1
   e5ec6:	bf98      	it	ls
   e5ec8:	220a      	movls	r2, #10
   e5eca:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   e5ecc:	460d      	mov	r5, r1
   e5ece:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   e5ed2:	fb01 5312 	mls	r3, r1, r2, r5
   e5ed6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   e5eda:	2b09      	cmp	r3, #9
   e5edc:	bf94      	ite	ls
   e5ede:	3330      	addls	r3, #48	; 0x30
   e5ee0:	3337      	addhi	r3, #55	; 0x37
   e5ee2:	b2db      	uxtb	r3, r3
  } while(n);
   e5ee4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   e5ee6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   e5eea:	d9ef      	bls.n	e5ecc <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   e5eec:	4621      	mov	r1, r4
   e5eee:	f7ff ffcf 	bl	e5e90 <_ZN5Print5writeEPKc>
}
   e5ef2:	b00b      	add	sp, #44	; 0x2c
   e5ef4:	bd30      	pop	{r4, r5, pc}

000e5ef6 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   e5ef6:	b510      	push	{r4, lr}
   e5ef8:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   e5efa:	f7ff fa3b 	bl	e5374 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   e5efe:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   e5f00:	6823      	ldr	r3, [r4, #0]
   e5f02:	4620      	mov	r0, r4
   e5f04:	695b      	ldr	r3, [r3, #20]
   e5f06:	4798      	blx	r3
    if (c >= 0) return c;
   e5f08:	2800      	cmp	r0, #0
   e5f0a:	da08      	bge.n	e5f1e <_ZN6Stream9timedReadEv+0x28>
   e5f0c:	f7ff fa32 	bl	e5374 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   e5f10:	68e3      	ldr	r3, [r4, #12]
   e5f12:	1ac0      	subs	r0, r0, r3
   e5f14:	68a3      	ldr	r3, [r4, #8]
   e5f16:	4298      	cmp	r0, r3
   e5f18:	d3f2      	bcc.n	e5f00 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   e5f1a:	f04f 30ff 	mov.w	r0, #4294967295
}
   e5f1e:	bd10      	pop	{r4, pc}

000e5f20 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   e5f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e5f22:	4606      	mov	r6, r0
   e5f24:	460d      	mov	r5, r1
   e5f26:	4617      	mov	r7, r2
  size_t count = 0;
   e5f28:	2400      	movs	r4, #0
  while (count < length) {
   e5f2a:	42bc      	cmp	r4, r7
   e5f2c:	d007      	beq.n	e5f3e <_ZN6Stream9readBytesEPcj+0x1e>
    int c = timedRead();
   e5f2e:	4630      	mov	r0, r6
   e5f30:	f7ff ffe1 	bl	e5ef6 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   e5f34:	1e03      	subs	r3, r0, #0
   e5f36:	db02      	blt.n	e5f3e <_ZN6Stream9readBytesEPcj+0x1e>
    *buffer++ = (char)c;
   e5f38:	552b      	strb	r3, [r5, r4]
    count++;
   e5f3a:	3401      	adds	r4, #1
  while (count < length) {
   e5f3c:	e7f5      	b.n	e5f2a <_ZN6Stream9readBytesEPcj+0xa>
  }
  return count;
}
   e5f3e:	4620      	mov	r0, r4
   e5f40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000e5f44 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   e5f44:	4b01      	ldr	r3, [pc, #4]	; (e5f4c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   e5f46:	4a02      	ldr	r2, [pc, #8]	; (e5f50 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   e5f48:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   e5f4a:	4770      	bx	lr
   e5f4c:	2003e65c 	.word	0x2003e65c
   e5f50:	000ed384 	.word	0x000ed384

000e5f54 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   e5f54:	4b02      	ldr	r3, [pc, #8]	; (e5f60 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   e5f56:	681a      	ldr	r2, [r3, #0]
   e5f58:	4b02      	ldr	r3, [pc, #8]	; (e5f64 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   e5f5a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   e5f5c:	4770      	bx	lr
   e5f5e:	bf00      	nop
   e5f60:	2003ac8c 	.word	0x2003ac8c
   e5f64:	2003e660 	.word	0x2003e660

000e5f68 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   e5f68:	428a      	cmp	r2, r1
{
   e5f6a:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   e5f6c:	d007      	beq.n	e5f7e <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   e5f6e:	9c02      	ldr	r4, [sp, #8]
   e5f70:	1a40      	subs	r0, r0, r1
   e5f72:	1ae4      	subs	r4, r4, r3
   e5f74:	4360      	muls	r0, r4
   e5f76:	1a52      	subs	r2, r2, r1
   e5f78:	fb90 f0f2 	sdiv	r0, r0, r2
   e5f7c:	4418      	add	r0, r3
}
   e5f7e:	bd10      	pop	{r4, pc}

000e5f80 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   e5f80:	2100      	movs	r1, #0
   e5f82:	f7ff bb87 	b.w	e5694 <system_delay_ms>

000e5f86 <_ZN9TCPServer5writeEhm>:
    }

    return _client;
}

size_t TCPServer::write(uint8_t b, system_tick_t timeout) {
   e5f86:	b513      	push	{r0, r1, r4, lr}
   e5f88:	4613      	mov	r3, r2
    return write(&b, sizeof(b), timeout);
   e5f8a:	6802      	ldr	r2, [r0, #0]
size_t TCPServer::write(uint8_t b, system_tick_t timeout) {
   e5f8c:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, sizeof(b), timeout);
   e5f90:	6994      	ldr	r4, [r2, #24]
   e5f92:	f10d 0107 	add.w	r1, sp, #7
   e5f96:	2201      	movs	r2, #1
   e5f98:	47a0      	blx	r4
}
   e5f9a:	b002      	add	sp, #8
   e5f9c:	bd10      	pop	{r4, pc}

000e5f9e <_ZN9TCPServer5writeEh>:
    size_t ret = _client.write(buf, size, timeout);
    setWriteError(_client.getWriteError());
    return ret;
}

size_t TCPServer::write(uint8_t b) {
   e5f9e:	b507      	push	{r0, r1, r2, lr}
    return write(&b, 1);
   e5fa0:	6803      	ldr	r3, [r0, #0]
size_t TCPServer::write(uint8_t b) {
   e5fa2:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1);
   e5fa6:	68db      	ldr	r3, [r3, #12]
   e5fa8:	2201      	movs	r2, #1
   e5faa:	f10d 0107 	add.w	r1, sp, #7
   e5fae:	4798      	blx	r3
}
   e5fb0:	b003      	add	sp, #12
   e5fb2:	f85d fb04 	ldr.w	pc, [sp], #4

000e5fb6 <_ZN9TCPServer5writeEPKhj>:

size_t TCPServer::write(const uint8_t *buffer, size_t size) {
   e5fb6:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   e5fb8:	6803      	ldr	r3, [r0, #0]
   e5fba:	699c      	ldr	r4, [r3, #24]
   e5fbc:	f04f 33ff 	mov.w	r3, #4294967295
   e5fc0:	46a4      	mov	ip, r4
}
   e5fc2:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   e5fc6:	4760      	bx	ip

000e5fc8 <_ZN9TCPServer5writeEPKhjm>:
size_t TCPServer::write(const uint8_t *buf, size_t size, system_tick_t timeout) {
   e5fc8:	b510      	push	{r4, lr}
   e5fca:	4604      	mov	r4, r0
    void setWriteError(int err = 1) { write_error = err; }
   e5fcc:	2000      	movs	r0, #0
   e5fce:	61a0      	str	r0, [r4, #24]
    size_t ret = _client.write(buf, size, timeout);
   e5fd0:	f104 0014 	add.w	r0, r4, #20
   e5fd4:	f000 fc75 	bl	e68c2 <_ZN9TCPClient5writeEPKhjm>
   e5fd8:	69a3      	ldr	r3, [r4, #24]
   e5fda:	6063      	str	r3, [r4, #4]
}
   e5fdc:	bd10      	pop	{r4, pc}

000e5fde <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   e5fde:	b510      	push	{r4, lr}
          _M_dispose();
   e5fe0:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   e5fe2:	4604      	mov	r4, r0
          _M_dispose();
   e5fe4:	689b      	ldr	r3, [r3, #8]
   e5fe6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   e5fe8:	68a3      	ldr	r3, [r4, #8]
   e5fea:	3b01      	subs	r3, #1
   e5fec:	60a3      	str	r3, [r4, #8]
   e5fee:	b92b      	cbnz	r3, e5ffc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   e5ff0:	6823      	ldr	r3, [r4, #0]
   e5ff2:	4620      	mov	r0, r4
   e5ff4:	68db      	ldr	r3, [r3, #12]
    }
   e5ff6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   e5ffa:	4718      	bx	r3
    }
   e5ffc:	bd10      	pop	{r4, pc}

000e5ffe <_ZN15TCPServerClient8remoteIPEv>:
    virtual IPAddress remoteIP() override {
   e5ffe:	b570      	push	{r4, r5, r6, lr}
   e6000:	460c      	mov	r4, r1
   e6002:	b094      	sub	sp, #80	; 0x50
        struct sockaddr_storage saddr = {};
   e6004:	251c      	movs	r5, #28
    virtual IPAddress remoteIP() override {
   e6006:	4606      	mov	r6, r0
        IPAddress addr;
   e6008:	f000 fa74 	bl	e64f4 <_ZN9IPAddressC1Ev>
        struct sockaddr_storage saddr = {};
   e600c:	462a      	mov	r2, r5
   e600e:	2100      	movs	r1, #0
   e6010:	a80d      	add	r0, sp, #52	; 0x34
   e6012:	f002 fc83 	bl	e891c <memset>
    friend class TCPServer;

    using Print::write;

protected:
    inline sock_handle_t sock_handle() { return d_->sock; }
   e6016:	6963      	ldr	r3, [r4, #20]
        socklen_t len = sizeof(saddr);
   e6018:	9501      	str	r5, [sp, #4]
        if (!sock_getpeername(sock_handle(), (struct sockaddr*)&saddr, &len)) {
   e601a:	a90d      	add	r1, sp, #52	; 0x34
   e601c:	6818      	ldr	r0, [r3, #0]
   e601e:	aa01      	add	r2, sp, #4
   e6020:	f7ff fa70 	bl	e5504 <sock_getpeername>
   e6024:	4601      	mov	r1, r0
   e6026:	bb20      	cbnz	r0, e6072 <_ZN15TCPServerClient8remoteIPEv+0x74>
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   e6028:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
   e602c:	2b02      	cmp	r3, #2
   e602e:	d104      	bne.n	e603a <_ZN15TCPServerClient8remoteIPEv+0x3c>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   e6030:	a90e      	add	r1, sp, #56	; 0x38
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   e6032:	4630      	mov	r0, r6
   e6034:	f000 faa1 	bl	e657a <_ZN9IPAddressaSEPKh>
        return addr;
   e6038:	e01b      	b.n	e6072 <_ZN15TCPServerClient8remoteIPEv+0x74>
    else if (saddr->sa_family == AF_INET6) {
   e603a:	2b0a      	cmp	r3, #10
   e603c:	d119      	bne.n	e6072 <_ZN15TCPServerClient8remoteIPEv+0x74>
        HAL_IPAddress a = {};
   e603e:	ac02      	add	r4, sp, #8
   e6040:	2211      	movs	r2, #17
   e6042:	4620      	mov	r0, r4
   e6044:	f002 fc6a 	bl	e891c <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   e6048:	e9dd 230f 	ldrd	r2, r3, [sp, #60]	; 0x3c
   e604c:	4313      	orrs	r3, r2
   e604e:	d013      	beq.n	e6078 <_ZN15TCPServerClient8remoteIPEv+0x7a>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   e6050:	ab0f      	add	r3, sp, #60	; 0x3c
   e6052:	cb0f      	ldmia	r3, {r0, r1, r2, r3}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   e6054:	ad08      	add	r5, sp, #32
   e6056:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            a.v = 6;
   e605a:	2306      	movs	r3, #6
            addr = IPAddress(a);
   e605c:	4621      	mov	r1, r4
   e605e:	a807      	add	r0, sp, #28
            a.v = 6;
   e6060:	f88d 3018 	strb.w	r3, [sp, #24]
            addr = IPAddress(a);
   e6064:	f000 fa54 	bl	e6510 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   e6068:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   e606a:	1d34      	adds	r4, r6, #4
   e606c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   e606e:	682b      	ldr	r3, [r5, #0]
   e6070:	7023      	strb	r3, [r4, #0]
    }
   e6072:	4630      	mov	r0, r6
   e6074:	b014      	add	sp, #80	; 0x50
   e6076:	bd70      	pop	{r4, r5, r6, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   e6078:	f64f 70ff 	movw	r0, #65535	; 0xffff
   e607c:	9d11      	ldr	r5, [sp, #68]	; 0x44
   e607e:	f7ff f9a9 	bl	e53d4 <inet_htonl>
   e6082:	4285      	cmp	r5, r0
   e6084:	d1e4      	bne.n	e6050 <_ZN15TCPServerClient8remoteIPEv+0x52>
            addr = (const uint8_t*)(&ptr[3]);
   e6086:	a912      	add	r1, sp, #72	; 0x48
   e6088:	e7d3      	b.n	e6032 <_ZN15TCPServerClient8remoteIPEv+0x34>
	...

000e608c <_ZN9TCPServerC1Etm>:
TCPServer::TCPServer(uint16_t port, network_interface_t nif)
   e608c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    Print() : write_error(0) {}
   e608e:	2500      	movs	r5, #0
          _client(-1) {
   e6090:	4b11      	ldr	r3, [pc, #68]	; (e60d8 <_ZN9TCPServerC1Etm+0x4c>)
   e6092:	60c2      	str	r2, [r0, #12]
   e6094:	f04f 37ff 	mov.w	r7, #4294967295
   e6098:	6045      	str	r5, [r0, #4]
   e609a:	6003      	str	r3, [r0, #0]
   e609c:	8101      	strh	r1, [r0, #8]
   e609e:	6107      	str	r7, [r0, #16]
   e60a0:	4639      	mov	r1, r7
TCPServer::TCPServer(uint16_t port, network_interface_t nif)
   e60a2:	4604      	mov	r4, r0
          _client(-1) {
   e60a4:	3014      	adds	r0, #20
   e60a6:	f000 fe33 	bl	e6d10 <_ZN9TCPClientC1Ei>
        os_thread_scheduling(false, NULL);
   e60aa:	4629      	mov	r1, r5
   e60ac:	4628      	mov	r0, r5
        if (!s_invalid_client) {
   e60ae:	4d0b      	ldr	r5, [pc, #44]	; (e60dc <_ZN9TCPServerC1Etm+0x50>)
   e60b0:	f7ff f970 	bl	e5394 <os_thread_scheduling>
   e60b4:	682a      	ldr	r2, [r5, #0]
   e60b6:	b942      	cbnz	r2, e60ca <_ZN9TCPServerC1Etm+0x3e>
            s_invalid_client = new TCPClient(-1);
   e60b8:	201c      	movs	r0, #28
   e60ba:	f7ed ffec 	bl	d4096 <_Znwj>
   e60be:	4606      	mov	r6, r0
   e60c0:	b110      	cbz	r0, e60c8 <_ZN9TCPServerC1Etm+0x3c>
   e60c2:	4639      	mov	r1, r7
   e60c4:	f000 fe24 	bl	e6d10 <_ZN9TCPClientC1Ei>
   e60c8:	602e      	str	r6, [r5, #0]
        os_thread_scheduling(true, NULL);
   e60ca:	2100      	movs	r1, #0
   e60cc:	2001      	movs	r0, #1
   e60ce:	f7ff f961 	bl	e5394 <os_thread_scheduling>
}
   e60d2:	4620      	mov	r0, r4
   e60d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   e60d6:	bf00      	nop
   e60d8:	000ed420 	.word	0x000ed420
   e60dc:	2003e664 	.word	0x2003e664

000e60e0 <_ZN9TCPServer4stopEv>:
void TCPServer::stop() {
   e60e0:	b510      	push	{r4, lr}
   e60e2:	4604      	mov	r4, r0
    _client.stop();
   e60e4:	3014      	adds	r0, #20
   e60e6:	f000 fdf1 	bl	e6ccc <_ZN9TCPClient4stopEv>
    sock_close(_sock);
   e60ea:	6920      	ldr	r0, [r4, #16]
   e60ec:	f7ff fa1a 	bl	e5524 <sock_close>
    _sock = -1;
   e60f0:	f04f 33ff 	mov.w	r3, #4294967295
   e60f4:	6123      	str	r3, [r4, #16]
}
   e60f6:	bd10      	pop	{r4, pc}

000e60f8 <_ZN9TCPServer5beginEv>:
bool TCPServer::begin() {
   e60f8:	b570      	push	{r4, r5, r6, lr}
   e60fa:	4604      	mov	r4, r0
   e60fc:	b08c      	sub	sp, #48	; 0x30
    stop();
   e60fe:	f7ff ffef 	bl	e60e0 <_ZN9TCPServer4stopEv>
    if (socket_handle_valid(_sock)) {
   e6102:	6923      	ldr	r3, [r4, #16]
   e6104:	2b00      	cmp	r3, #0
   e6106:	da5c      	bge.n	e61c2 <_ZN9TCPServer5beginEv+0xca>
    struct sockaddr_in6 saddr = {};
   e6108:	221c      	movs	r2, #28
   e610a:	2100      	movs	r1, #0
   e610c:	a805      	add	r0, sp, #20
   e610e:	f002 fc05 	bl	e891c <memset>
    saddr.sin6_len = sizeof(saddr);
   e6112:	f640 231c 	movw	r3, #2588	; 0xa1c
    saddr.sin6_port = htons(_port);
   e6116:	8920      	ldrh	r0, [r4, #8]
    saddr.sin6_len = sizeof(saddr);
   e6118:	f8ad 3014 	strh.w	r3, [sp, #20]
    saddr.sin6_port = htons(_port);
   e611c:	f7ff f962 	bl	e53e4 <inet_htons>
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_STREAM, IPPROTO_TCP);
   e6120:	2206      	movs	r2, #6
    saddr.sin6_port = htons(_port);
   e6122:	f8ad 0016 	strh.w	r0, [sp, #22]
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_STREAM, IPPROTO_TCP);
   e6126:	2101      	movs	r1, #1
   e6128:	200a      	movs	r0, #10
   e612a:	f7ff fa23 	bl	e5574 <sock_socket>
    CHECK_TRUE(_sock >= 0, false);
   e612e:	2800      	cmp	r0, #0
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_STREAM, IPPROTO_TCP);
   e6130:	6120      	str	r0, [r4, #16]
    CHECK_TRUE(_sock >= 0, false);
   e6132:	da06      	bge.n	e6142 <_ZN9TCPServer5beginEv+0x4a>
    NAMED_SCOPE_GUARD(done, {
   e6134:	4620      	mov	r0, r4
            return false;
   e6136:	2500      	movs	r5, #0
    NAMED_SCOPE_GUARD(done, {
   e6138:	f7ff ffd2 	bl	e60e0 <_ZN9TCPServer4stopEv>
}
   e613c:	4628      	mov	r0, r5
   e613e:	b00c      	add	sp, #48	; 0x30
   e6140:	bd70      	pop	{r4, r5, r6, pc}
    const int one = 1;
   e6142:	2301      	movs	r3, #1
    CHECK_TRUE(sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one)) == 0, false);
   e6144:	2604      	movs	r6, #4
    const int one = 1;
   e6146:	9302      	str	r3, [sp, #8]
    CHECK_TRUE(sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one)) == 0, false);
   e6148:	9600      	str	r6, [sp, #0]
   e614a:	ab02      	add	r3, sp, #8
   e614c:	4632      	mov	r2, r6
   e614e:	f640 71ff 	movw	r1, #4095	; 0xfff
   e6152:	f7ff f9df 	bl	e5514 <sock_setsockopt>
   e6156:	4605      	mov	r5, r0
   e6158:	2800      	cmp	r0, #0
   e615a:	d1eb      	bne.n	e6134 <_ZN9TCPServer5beginEv+0x3c>
    int flags = sock_fcntl(_sock, F_GETFL, 0);
   e615c:	4602      	mov	r2, r0
   e615e:	2103      	movs	r1, #3
   e6160:	6920      	ldr	r0, [r4, #16]
   e6162:	f7ff fa0f 	bl	e5584 <sock_fcntl>
    CHECK_TRUE(flags >= 0, false);
   e6166:	1e02      	subs	r2, r0, #0
   e6168:	dbe4      	blt.n	e6134 <_ZN9TCPServer5beginEv+0x3c>
    CHECK_TRUE(sock_fcntl(_sock, F_SETFL, flags) >= 0, false);
   e616a:	6920      	ldr	r0, [r4, #16]
   e616c:	f042 0201 	orr.w	r2, r2, #1
   e6170:	4631      	mov	r1, r6
   e6172:	f7ff fa07 	bl	e5584 <sock_fcntl>
   e6176:	2800      	cmp	r0, #0
   e6178:	dbdc      	blt.n	e6134 <_ZN9TCPServer5beginEv+0x3c>
    if (_nif != 0) {
   e617a:	68e0      	ldr	r0, [r4, #12]
   e617c:	b1a0      	cbz	r0, e61a8 <_ZN9TCPServer5beginEv+0xb0>
        if (if_index_to_name(_nif, ifr.ifr_name)) {
   e617e:	a903      	add	r1, sp, #12
   e6180:	b2c0      	uxtb	r0, r0
        struct ifreq ifr = {};
   e6182:	9503      	str	r5, [sp, #12]
   e6184:	f8ad 5010 	strh.w	r5, [sp, #16]
        if (if_index_to_name(_nif, ifr.ifr_name)) {
   e6188:	f7ff f8dc 	bl	e5344 <if_index_to_name>
   e618c:	2800      	cmp	r0, #0
   e618e:	d1d1      	bne.n	e6134 <_ZN9TCPServer5beginEv+0x3c>
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   e6190:	2306      	movs	r3, #6
   e6192:	9300      	str	r3, [sp, #0]
   e6194:	6920      	ldr	r0, [r4, #16]
   e6196:	ab03      	add	r3, sp, #12
   e6198:	f241 020b 	movw	r2, #4107	; 0x100b
   e619c:	f640 71ff 	movw	r1, #4095	; 0xfff
   e61a0:	f7ff f9b8 	bl	e5514 <sock_setsockopt>
   e61a4:	2800      	cmp	r0, #0
   e61a6:	d1c5      	bne.n	e6134 <_ZN9TCPServer5beginEv+0x3c>
    int r = sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr));
   e61a8:	6920      	ldr	r0, [r4, #16]
   e61aa:	221c      	movs	r2, #28
   e61ac:	a905      	add	r1, sp, #20
   e61ae:	f7ff f9a1 	bl	e54f4 <sock_bind>
    CHECK_TRUE(!r, false);
   e61b2:	2800      	cmp	r0, #0
   e61b4:	d1be      	bne.n	e6134 <_ZN9TCPServer5beginEv+0x3c>
    r = sock_listen(_sock, 5);
   e61b6:	6920      	ldr	r0, [r4, #16]
   e61b8:	2105      	movs	r1, #5
   e61ba:	f7ff f9c3 	bl	e5544 <sock_listen>
    CHECK_TRUE(!r, false);
   e61be:	2800      	cmp	r0, #0
   e61c0:	d1b8      	bne.n	e6134 <_ZN9TCPServer5beginEv+0x3c>
        return true;
   e61c2:	2501      	movs	r5, #1
   e61c4:	e7ba      	b.n	e613c <_ZN9TCPServer5beginEv+0x44>

000e61c6 <_ZN9TCPClientaSERKS_>:
class TCPClient : public Client {
   e61c6:	b538      	push	{r3, r4, r5, lr}
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
   e61c8:	684b      	ldr	r3, [r1, #4]
class Print
   e61ca:	6043      	str	r3, [r0, #4]
   e61cc:	688b      	ldr	r3, [r1, #8]
   e61ce:	6083      	str	r3, [r0, #8]
   e61d0:	68cb      	ldr	r3, [r1, #12]
   e61d2:	60c3      	str	r3, [r0, #12]
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   e61d4:	690b      	ldr	r3, [r1, #16]
   e61d6:	6103      	str	r3, [r0, #16]
    class __shared_ptr
   e61d8:	694b      	ldr	r3, [r1, #20]
   e61da:	6143      	str	r3, [r0, #20]
   e61dc:	698d      	ldr	r5, [r1, #24]
	if (__tmp != _M_pi)
   e61de:	6983      	ldr	r3, [r0, #24]
   e61e0:	429d      	cmp	r5, r3
   e61e2:	4604      	mov	r4, r0
   e61e4:	d00c      	beq.n	e6200 <_ZN9TCPClientaSERKS_+0x3a>
	    if (__tmp != 0)
   e61e6:	b115      	cbz	r5, e61ee <_ZN9TCPClientaSERKS_+0x28>
    { ++_M_use_count; }
   e61e8:	686b      	ldr	r3, [r5, #4]
   e61ea:	3301      	adds	r3, #1
   e61ec:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   e61ee:	69a0      	ldr	r0, [r4, #24]
   e61f0:	b128      	cbz	r0, e61fe <_ZN9TCPClientaSERKS_+0x38>
      if (--_M_use_count == 0)
   e61f2:	6843      	ldr	r3, [r0, #4]
   e61f4:	3b01      	subs	r3, #1
   e61f6:	6043      	str	r3, [r0, #4]
   e61f8:	b90b      	cbnz	r3, e61fe <_ZN9TCPClientaSERKS_+0x38>
   e61fa:	f7ff fef0 	bl	e5fde <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   e61fe:	61a5      	str	r5, [r4, #24]
   e6200:	4620      	mov	r0, r4
   e6202:	bd38      	pop	{r3, r4, r5, pc}

000e6204 <_ZN9TCPClientC1ERKS_>:
   e6204:	684b      	ldr	r3, [r1, #4]
   e6206:	6043      	str	r3, [r0, #4]
   e6208:	4b09      	ldr	r3, [pc, #36]	; (e6230 <_ZN9TCPClientC1ERKS_+0x2c>)
   e620a:	6003      	str	r3, [r0, #0]
   e620c:	688b      	ldr	r3, [r1, #8]
   e620e:	6083      	str	r3, [r0, #8]
   e6210:	68cb      	ldr	r3, [r1, #12]
   e6212:	60c3      	str	r3, [r0, #12]
   e6214:	690b      	ldr	r3, [r1, #16]
   e6216:	6103      	str	r3, [r0, #16]
   e6218:	4b06      	ldr	r3, [pc, #24]	; (e6234 <_ZN9TCPClientC1ERKS_+0x30>)
   e621a:	6003      	str	r3, [r0, #0]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   e621c:	694b      	ldr	r3, [r1, #20]
   e621e:	6143      	str	r3, [r0, #20]
      : _M_pi(__r._M_pi)
   e6220:	698b      	ldr	r3, [r1, #24]
   e6222:	6183      	str	r3, [r0, #24]
	if (_M_pi != 0)
   e6224:	b113      	cbz	r3, e622c <_ZN9TCPClientC1ERKS_+0x28>
    { ++_M_use_count; }
   e6226:	685a      	ldr	r2, [r3, #4]
   e6228:	3201      	adds	r2, #1
   e622a:	605a      	str	r2, [r3, #4]
   e622c:	4770      	bx	lr
   e622e:	bf00      	nop
   e6230:	000ed3ac 	.word	0x000ed3ac
   e6234:	000ed50c 	.word	0x000ed50c

000e6238 <_ZN15TCPServerClientD1Ev>:
class TCPServerClient : public TCPClient {
   e6238:	b510      	push	{r4, lr}
    virtual ~TCPClient() {};
   e623a:	4b04      	ldr	r3, [pc, #16]	; (e624c <_ZN15TCPServerClientD1Ev+0x14>)
   e623c:	4604      	mov	r4, r0
   e623e:	f840 3b18 	str.w	r3, [r0], #24
      ~__shared_ptr() = default;
   e6242:	f7ee fef7 	bl	d5034 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   e6246:	4620      	mov	r0, r4
   e6248:	bd10      	pop	{r4, pc}
   e624a:	bf00      	nop
   e624c:	000ed50c 	.word	0x000ed50c

000e6250 <_ZN15TCPServerClientD0Ev>:
   e6250:	b510      	push	{r4, lr}
   e6252:	4604      	mov	r4, r0
   e6254:	f7ff fff0 	bl	e6238 <_ZN15TCPServerClientD1Ev>
   e6258:	4620      	mov	r0, r4
   e625a:	211c      	movs	r1, #28
   e625c:	f001 f9bf 	bl	e75de <_ZdlPvj>
   e6260:	4620      	mov	r0, r4
   e6262:	bd10      	pop	{r4, pc}

000e6264 <_ZN9TCPServer9availableEv>:
TCPClient TCPServer::available() {
   e6264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (_sock < 0) {
   e6268:	690b      	ldr	r3, [r1, #16]
   e626a:	2b00      	cmp	r3, #0
TCPClient TCPServer::available() {
   e626c:	b096      	sub	sp, #88	; 0x58
   e626e:	4606      	mov	r6, r0
   e6270:	460c      	mov	r4, r1
    if (_sock < 0) {
   e6272:	da03      	bge.n	e627c <_ZN9TCPServer9availableEv+0x18>
        begin();
   e6274:	680b      	ldr	r3, [r1, #0]
   e6276:	4608      	mov	r0, r1
   e6278:	691b      	ldr	r3, [r3, #16]
   e627a:	4798      	blx	r3
    if (_sock < 0) {
   e627c:	6925      	ldr	r5, [r4, #16]
   e627e:	2d00      	cmp	r5, #0
   e6280:	f104 0714 	add.w	r7, r4, #20
   e6284:	da0c      	bge.n	e62a0 <_ZN9TCPServer9availableEv+0x3c>
        _client = *s_invalid_client;
   e6286:	4b24      	ldr	r3, [pc, #144]	; (e6318 <_ZN9TCPServer9availableEv+0xb4>)
   e6288:	4638      	mov	r0, r7
   e628a:	6819      	ldr	r1, [r3, #0]
   e628c:	f7ff ff9b 	bl	e61c6 <_ZN9TCPClientaSERKS_>
    return _client;
   e6290:	4639      	mov	r1, r7
   e6292:	4630      	mov	r0, r6
   e6294:	f7ff ffb6 	bl	e6204 <_ZN9TCPClientC1ERKS_>
}
   e6298:	4630      	mov	r0, r6
   e629a:	b016      	add	sp, #88	; 0x58
   e629c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    struct sockaddr_storage saddr = {};
   e62a0:	f04f 081c 	mov.w	r8, #28
   e62a4:	4642      	mov	r2, r8
   e62a6:	2100      	movs	r1, #0
   e62a8:	a808      	add	r0, sp, #32
   e62aa:	f002 fb37 	bl	e891c <memset>
    int s = sock_accept(_sock, (struct sockaddr*)&saddr, &slen);
   e62ae:	a908      	add	r1, sp, #32
   e62b0:	aa01      	add	r2, sp, #4
   e62b2:	4628      	mov	r0, r5
    socklen_t slen = sizeof(saddr);
   e62b4:	f8cd 8004 	str.w	r8, [sp, #4]
    int s = sock_accept(_sock, (struct sockaddr*)&saddr, &slen);
   e62b8:	f7ff f914 	bl	e54e4 <sock_accept>
    if (s < 0) {
   e62bc:	1e01      	subs	r1, r0, #0
   e62be:	da12      	bge.n	e62e6 <_ZN9TCPServer9availableEv+0x82>
        _client = *s_invalid_client;
   e62c0:	4b15      	ldr	r3, [pc, #84]	; (e6318 <_ZN9TCPServer9availableEv+0xb4>)
   e62c2:	4638      	mov	r0, r7
   e62c4:	6819      	ldr	r1, [r3, #0]
   e62c6:	f7ff ff7e 	bl	e61c6 <_ZN9TCPClientaSERKS_>
        if (errno != EAGAIN && errno != EWOULDBLOCK) {
   e62ca:	f7ff faa9 	bl	e5820 <__errno>
   e62ce:	6803      	ldr	r3, [r0, #0]
   e62d0:	2b0b      	cmp	r3, #11
   e62d2:	d0dd      	beq.n	e6290 <_ZN9TCPServer9availableEv+0x2c>
   e62d4:	f7ff faa4 	bl	e5820 <__errno>
   e62d8:	6803      	ldr	r3, [r0, #0]
   e62da:	2b0b      	cmp	r3, #11
   e62dc:	d0d8      	beq.n	e6290 <_ZN9TCPServer9availableEv+0x2c>
            stop();
   e62de:	4620      	mov	r0, r4
   e62e0:	f7ff fefe 	bl	e60e0 <_ZN9TCPServer4stopEv>
   e62e4:	e7d4      	b.n	e6290 <_ZN9TCPServer9availableEv+0x2c>
    TCPServerClient(sock_handle_t sock) : TCPClient(sock) {
   e62e6:	a80f      	add	r0, sp, #60	; 0x3c
   e62e8:	f000 fd12 	bl	e6d10 <_ZN9TCPClientC1Ei>
   e62ec:	ad03      	add	r5, sp, #12
   e62ee:	4b0b      	ldr	r3, [pc, #44]	; (e631c <_ZN9TCPServer9availableEv+0xb8>)
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   e62f0:	9c14      	ldr	r4, [sp, #80]	; 0x50
   e62f2:	930f      	str	r3, [sp, #60]	; 0x3c
        client.d_->remoteIP = client.remoteIP(); // fetch the peer IP ready for the copy operator
   e62f4:	a90f      	add	r1, sp, #60	; 0x3c
   e62f6:	a802      	add	r0, sp, #8
   e62f8:	f7ff fe81 	bl	e5ffe <_ZN15TCPServerClient8remoteIPEv>
   e62fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   e62fe:	348c      	adds	r4, #140	; 0x8c
   e6300:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   e6302:	682b      	ldr	r3, [r5, #0]
   e6304:	7023      	strb	r3, [r4, #0]
        _client = client;
   e6306:	a90f      	add	r1, sp, #60	; 0x3c
   e6308:	4638      	mov	r0, r7
   e630a:	f7ff ff5c 	bl	e61c6 <_ZN9TCPClientaSERKS_>
        TCPServerClient client = TCPServerClient(s);
   e630e:	a80f      	add	r0, sp, #60	; 0x3c
   e6310:	f7ff ff92 	bl	e6238 <_ZN15TCPServerClientD1Ev>
   e6314:	e7bc      	b.n	e6290 <_ZN9TCPServer9availableEv+0x2c>
   e6316:	bf00      	nop
   e6318:	2003e664 	.word	0x2003e664
   e631c:	000ed3d4 	.word	0x000ed3d4

000e6320 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   e6320:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   e6322:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   e6324:	4604      	mov	r4, r0
      if (_M_manager)
   e6326:	b113      	cbz	r3, e632e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   e6328:	2203      	movs	r2, #3
   e632a:	4601      	mov	r1, r0
   e632c:	4798      	blx	r3
    }
   e632e:	4620      	mov	r0, r4
   e6330:	bd10      	pop	{r4, pc}

000e6332 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   e6332:	b510      	push	{r4, lr}
   e6334:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   e6336:	f7ff fff3 	bl	e6320 <_ZNSt14_Function_baseD1Ev>
   e633a:	4620      	mov	r0, r4
   e633c:	bd10      	pop	{r4, pc}
	...

000e6340 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   e6340:	4803      	ldr	r0, [pc, #12]	; (e6350 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   e6342:	4a04      	ldr	r2, [pc, #16]	; (e6354 <_GLOBAL__sub_I_RGB+0x14>)
   e6344:	4904      	ldr	r1, [pc, #16]	; (e6358 <_GLOBAL__sub_I_RGB+0x18>)
   e6346:	2300      	movs	r3, #0
   e6348:	6083      	str	r3, [r0, #8]
   e634a:	f001 b943 	b.w	e75d4 <__aeabi_atexit>
   e634e:	bf00      	nop
   e6350:	2003e668 	.word	0x2003e668
   e6354:	2003ae68 	.word	0x2003ae68
   e6358:	000e6333 	.word	0x000e6333

000e635c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   e635c:	4b01      	ldr	r3, [pc, #4]	; (e6364 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   e635e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   e6360:	4770      	bx	lr
   e6362:	bf00      	nop
   e6364:	2003ac90 	.word	0x2003ac90

000e6368 <serialEventRun>:
{
   e6368:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   e636a:	4b0b      	ldr	r3, [pc, #44]	; (e6398 <serialEventRun+0x30>)
   e636c:	b143      	cbz	r3, e6380 <serialEventRun+0x18>
   e636e:	f000 f967 	bl	e6640 <_Z16_fetch_usbserialv>
   e6372:	6803      	ldr	r3, [r0, #0]
   e6374:	691b      	ldr	r3, [r3, #16]
   e6376:	4798      	blx	r3
   e6378:	2800      	cmp	r0, #0
   e637a:	dd01      	ble.n	e6380 <serialEventRun+0x18>
        serialEvent();
   e637c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   e6380:	4b06      	ldr	r3, [pc, #24]	; (e639c <serialEventRun+0x34>)
   e6382:	b143      	cbz	r3, e6396 <serialEventRun+0x2e>
   e6384:	f000 f9da 	bl	e673c <_Z22__fetch_global_Serial1v>
   e6388:	6803      	ldr	r3, [r0, #0]
   e638a:	691b      	ldr	r3, [r3, #16]
   e638c:	4798      	blx	r3
   e638e:	2800      	cmp	r0, #0
   e6390:	dd01      	ble.n	e6396 <serialEventRun+0x2e>
        serialEvent1();
   e6392:	f3af 8000 	nop.w
}
   e6396:	bd08      	pop	{r3, pc}
	...

000e63a0 <_post_loop>:
{
   e63a0:	b508      	push	{r3, lr}
	serialEventRun();
   e63a2:	f7ff ffe1 	bl	e6368 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   e63a6:	f7fe ffe5 	bl	e5374 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   e63aa:	4b01      	ldr	r3, [pc, #4]	; (e63b0 <_post_loop+0x10>)
   e63ac:	6018      	str	r0, [r3, #0]
}
   e63ae:	bd08      	pop	{r3, pc}
   e63b0:	2003e7d4 	.word	0x2003e7d4

000e63b4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   e63b4:	4802      	ldr	r0, [pc, #8]	; (e63c0 <_Z33system_initialize_user_backup_ramv+0xc>)
   e63b6:	4a03      	ldr	r2, [pc, #12]	; (e63c4 <_Z33system_initialize_user_backup_ramv+0x10>)
   e63b8:	4903      	ldr	r1, [pc, #12]	; (e63c8 <_Z33system_initialize_user_backup_ramv+0x14>)
   e63ba:	1a12      	subs	r2, r2, r0
   e63bc:	f002 ba86 	b.w	e88cc <memcpy>
   e63c0:	2003f400 	.word	0x2003f400
   e63c4:	2003f404 	.word	0x2003f404
   e63c8:	000edac8 	.word	0x000edac8

000e63cc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   e63cc:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   e63ce:	2300      	movs	r3, #0
   e63d0:	9300      	str	r3, [sp, #0]
   e63d2:	461a      	mov	r2, r3
   e63d4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   e63d8:	f7ff f96e 	bl	e56b8 <system_ctrl_set_result>
}
   e63dc:	b003      	add	sp, #12
   e63de:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000e63e4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   e63e4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   e63e6:	8843      	ldrh	r3, [r0, #2]
   e63e8:	2b0a      	cmp	r3, #10
   e63ea:	d008      	beq.n	e63fe <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   e63ec:	2b50      	cmp	r3, #80	; 0x50
   e63ee:	d10b      	bne.n	e6408 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   e63f0:	4b09      	ldr	r3, [pc, #36]	; (e6418 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   e63f2:	681b      	ldr	r3, [r3, #0]
   e63f4:	b14b      	cbz	r3, e640a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   e63f6:	b003      	add	sp, #12
   e63f8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   e63fc:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   e63fe:	f7ff ffe5 	bl	e63cc <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   e6402:	b003      	add	sp, #12
   e6404:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   e6408:	2300      	movs	r3, #0
   e640a:	9300      	str	r3, [sp, #0]
   e640c:	461a      	mov	r2, r3
   e640e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   e6412:	f7ff f951 	bl	e56b8 <system_ctrl_set_result>
}
   e6416:	e7f4      	b.n	e6402 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   e6418:	2003e67c 	.word	0x2003e67c

000e641c <module_user_init_hook>:
{
   e641c:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   e641e:	4c12      	ldr	r4, [pc, #72]	; (e6468 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   e6420:	4812      	ldr	r0, [pc, #72]	; (e646c <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   e6422:	4d13      	ldr	r5, [pc, #76]	; (e6470 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   e6424:	2100      	movs	r1, #0
   e6426:	f7ff fa03 	bl	e5830 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   e642a:	6823      	ldr	r3, [r4, #0]
   e642c:	42ab      	cmp	r3, r5
   e642e:	4b11      	ldr	r3, [pc, #68]	; (e6474 <module_user_init_hook+0x58>)
   e6430:	bf0c      	ite	eq
   e6432:	2201      	moveq	r2, #1
   e6434:	2200      	movne	r2, #0
   e6436:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   e6438:	d002      	beq.n	e6440 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   e643a:	f7ff ffbb 	bl	e63b4 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   e643e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   e6440:	f7fe ff88 	bl	e5354 <HAL_RNG_GetRandomNumber>
   e6444:	4604      	mov	r4, r0
    srand(seed);
   e6446:	f002 fa81 	bl	e894c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   e644a:	4b0b      	ldr	r3, [pc, #44]	; (e6478 <module_user_init_hook+0x5c>)
   e644c:	b113      	cbz	r3, e6454 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   e644e:	4620      	mov	r0, r4
   e6450:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   e6454:	2100      	movs	r1, #0
   e6456:	4808      	ldr	r0, [pc, #32]	; (e6478 <module_user_init_hook+0x5c>)
   e6458:	f7ff f9a2 	bl	e57a0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   e645c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   e6460:	4806      	ldr	r0, [pc, #24]	; (e647c <module_user_init_hook+0x60>)
   e6462:	2100      	movs	r1, #0
   e6464:	f7ff b91e 	b.w	e56a4 <system_ctrl_set_app_request_handler>
   e6468:	2003f400 	.word	0x2003f400
   e646c:	000e635d 	.word	0x000e635d
   e6470:	9a271c1e 	.word	0x9a271c1e
   e6474:	2003e678 	.word	0x2003e678
   e6478:	00000000 	.word	0x00000000
   e647c:	000e63e5 	.word	0x000e63e5

000e6480 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   e6480:	4770      	bx	lr

000e6482 <_ZN9IPAddressD0Ev>:
   e6482:	b510      	push	{r4, lr}
   e6484:	2118      	movs	r1, #24
   e6486:	4604      	mov	r4, r0
   e6488:	f001 f8a9 	bl	e75de <_ZdlPvj>
   e648c:	4620      	mov	r0, r4
   e648e:	bd10      	pop	{r4, pc}

000e6490 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   e6490:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   e6492:	7d03      	ldrb	r3, [r0, #20]
   e6494:	2b06      	cmp	r3, #6
{
   e6496:	b08d      	sub	sp, #52	; 0x34
   e6498:	460e      	mov	r6, r1
   e649a:	f100 0704 	add.w	r7, r0, #4
   e649e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   e64a2:	d012      	beq.n	e64ca <_ZNK9IPAddress7printToER5Print+0x3a>
   e64a4:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   e64a8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   e64ac:	220a      	movs	r2, #10
   e64ae:	4630      	mov	r0, r6
   e64b0:	f7ff fd03 	bl	e5eba <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   e64b4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   e64b6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   e64b8:	d019      	beq.n	e64ee <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   e64ba:	2c00      	cmp	r4, #0
   e64bc:	d0f4      	beq.n	e64a8 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   e64be:	212e      	movs	r1, #46	; 0x2e
   e64c0:	4630      	mov	r0, r6
   e64c2:	f7ff fcf7 	bl	e5eb4 <_ZN5Print5printEc>
   e64c6:	4404      	add	r4, r0
   e64c8:	e7ee      	b.n	e64a8 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   e64ca:	232f      	movs	r3, #47	; 0x2f
   e64cc:	466a      	mov	r2, sp
   e64ce:	4639      	mov	r1, r7
   e64d0:	200a      	movs	r0, #10
		buf[0] = 0;
   e64d2:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   e64d6:	f7fe ff75 	bl	e53c4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   e64da:	4668      	mov	r0, sp
   e64dc:	f002 fa6c 	bl	e89b8 <strlen>
   e64e0:	6833      	ldr	r3, [r6, #0]
   e64e2:	4602      	mov	r2, r0
   e64e4:	68db      	ldr	r3, [r3, #12]
   e64e6:	4669      	mov	r1, sp
   e64e8:	4630      	mov	r0, r6
   e64ea:	4798      	blx	r3
   e64ec:	4604      	mov	r4, r0
    }
    return n;
}
   e64ee:	4620      	mov	r0, r4
   e64f0:	b00d      	add	sp, #52	; 0x34
   e64f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000e64f4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   e64f4:	b510      	push	{r4, lr}
   e64f6:	4b05      	ldr	r3, [pc, #20]	; (e650c <_ZN9IPAddressC1Ev+0x18>)
   e64f8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   e64fa:	2211      	movs	r2, #17
   e64fc:	f840 3b04 	str.w	r3, [r0], #4
   e6500:	2100      	movs	r1, #0
   e6502:	f002 fa0b 	bl	e891c <memset>
}
   e6506:	4620      	mov	r0, r4
   e6508:	bd10      	pop	{r4, pc}
   e650a:	bf00      	nop
   e650c:	000ed444 	.word	0x000ed444

000e6510 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   e6510:	4603      	mov	r3, r0
   e6512:	4a07      	ldr	r2, [pc, #28]	; (e6530 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   e6514:	b510      	push	{r4, lr}
   e6516:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   e651a:	f101 0210 	add.w	r2, r1, #16
   e651e:	f851 4b04 	ldr.w	r4, [r1], #4
   e6522:	f843 4b04 	str.w	r4, [r3], #4
   e6526:	4291      	cmp	r1, r2
   e6528:	d1f9      	bne.n	e651e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   e652a:	780a      	ldrb	r2, [r1, #0]
   e652c:	701a      	strb	r2, [r3, #0]
}
   e652e:	bd10      	pop	{r4, pc}
   e6530:	000ed444 	.word	0x000ed444

000e6534 <_ZNK9IPAddresscvbEv>:
    if (version() == 4) {
   e6534:	7d03      	ldrb	r3, [r0, #20]
   e6536:	2b04      	cmp	r3, #4
   e6538:	d104      	bne.n	e6544 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   e653a:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   e653c:	3800      	subs	r0, #0
   e653e:	bf18      	it	ne
   e6540:	2001      	movne	r0, #1
   e6542:	4770      	bx	lr
    } else if (version() == 6) {
   e6544:	2b06      	cmp	r3, #6
   e6546:	d107      	bne.n	e6558 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   e6548:	6843      	ldr	r3, [r0, #4]
   e654a:	b93b      	cbnz	r3, e655c <_ZNK9IPAddresscvbEv+0x28>
   e654c:	6883      	ldr	r3, [r0, #8]
   e654e:	b92b      	cbnz	r3, e655c <_ZNK9IPAddresscvbEv+0x28>
   e6550:	68c3      	ldr	r3, [r0, #12]
   e6552:	b91b      	cbnz	r3, e655c <_ZNK9IPAddresscvbEv+0x28>
   e6554:	6900      	ldr	r0, [r0, #16]
   e6556:	e7f1      	b.n	e653c <_ZNK9IPAddresscvbEv+0x8>
        return false;
   e6558:	2000      	movs	r0, #0
   e655a:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   e655c:	2001      	movs	r0, #1
}
   e655e:	4770      	bx	lr

000e6560 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   e6560:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   e6562:	f89d 4008 	ldrb.w	r4, [sp, #8]
   e6566:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   e656a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   e656e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   e6572:	2304      	movs	r3, #4
   e6574:	6041      	str	r1, [r0, #4]
   e6576:	7503      	strb	r3, [r0, #20]
}
   e6578:	bd10      	pop	{r4, pc}

000e657a <_ZN9IPAddressaSEPKh>:
{
   e657a:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   e657c:	78cb      	ldrb	r3, [r1, #3]
   e657e:	9300      	str	r3, [sp, #0]
   e6580:	788b      	ldrb	r3, [r1, #2]
   e6582:	784a      	ldrb	r2, [r1, #1]
   e6584:	7809      	ldrb	r1, [r1, #0]
   e6586:	f7ff ffeb 	bl	e6560 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   e658a:	b002      	add	sp, #8
   e658c:	bd10      	pop	{r4, pc}

000e658e <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   e658e:	7441      	strb	r1, [r0, #17]
}
   e6590:	4770      	bx	lr

000e6592 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   e6592:	4770      	bx	lr

000e6594 <_ZN9USBSerial4readEv>:
{
   e6594:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   e6596:	2100      	movs	r1, #0
   e6598:	7c00      	ldrb	r0, [r0, #16]
   e659a:	f7ff f83b 	bl	e5614 <HAL_USB_USART_Receive_Data>
}
   e659e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   e65a2:	bd08      	pop	{r3, pc}

000e65a4 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   e65a4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   e65a6:	2101      	movs	r1, #1
   e65a8:	7c00      	ldrb	r0, [r0, #16]
   e65aa:	f7ff f833 	bl	e5614 <HAL_USB_USART_Receive_Data>
}
   e65ae:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   e65b2:	bd08      	pop	{r3, pc}

000e65b4 <_ZN9USBSerial17availableForWriteEv>:
{
   e65b4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   e65b6:	7c00      	ldrb	r0, [r0, #16]
   e65b8:	f7ff f824 	bl	e5604 <HAL_USB_USART_Available_Data_For_Write>
}
   e65bc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   e65c0:	bd08      	pop	{r3, pc}

000e65c2 <_ZN9USBSerial9availableEv>:
{
   e65c2:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   e65c4:	7c00      	ldrb	r0, [r0, #16]
   e65c6:	f7ff f815 	bl	e55f4 <HAL_USB_USART_Available_Data>
}
   e65ca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   e65ce:	bd08      	pop	{r3, pc}

000e65d0 <_ZN9USBSerial5writeEh>:
{
   e65d0:	b513      	push	{r0, r1, r4, lr}
   e65d2:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   e65d4:	7c00      	ldrb	r0, [r0, #16]
{
   e65d6:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   e65d8:	f7ff f814 	bl	e5604 <HAL_USB_USART_Available_Data_For_Write>
   e65dc:	2800      	cmp	r0, #0
   e65de:	9901      	ldr	r1, [sp, #4]
   e65e0:	dc01      	bgt.n	e65e6 <_ZN9USBSerial5writeEh+0x16>
   e65e2:	7c60      	ldrb	r0, [r4, #17]
   e65e4:	b120      	cbz	r0, e65f0 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   e65e6:	7c20      	ldrb	r0, [r4, #16]
   e65e8:	f7ff f81c 	bl	e5624 <HAL_USB_USART_Send_Data>
   e65ec:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   e65f0:	b002      	add	sp, #8
   e65f2:	bd10      	pop	{r4, pc}

000e65f4 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   e65f4:	7c00      	ldrb	r0, [r0, #16]
   e65f6:	f7ff b81d 	b.w	e5634 <HAL_USB_USART_Flush_Data>

000e65fa <_ZN9USBSerialD0Ev>:
   e65fa:	b510      	push	{r4, lr}
   e65fc:	2114      	movs	r1, #20
   e65fe:	4604      	mov	r4, r0
   e6600:	f000 ffed 	bl	e75de <_ZdlPvj>
   e6604:	4620      	mov	r0, r4
   e6606:	bd10      	pop	{r4, pc}

000e6608 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   e6608:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   e660a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   e660e:	4604      	mov	r4, r0
   e6610:	4608      	mov	r0, r1
   e6612:	2100      	movs	r1, #0
   e6614:	e9c4 1301 	strd	r1, r3, [r4, #4]
   e6618:	4b04      	ldr	r3, [pc, #16]	; (e662c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   e661a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   e661c:	2301      	movs	r3, #1
  _serial = serial;
   e661e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   e6620:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   e6622:	4611      	mov	r1, r2
   e6624:	f7fe ffde 	bl	e55e4 <HAL_USB_USART_Init>
}
   e6628:	4620      	mov	r0, r4
   e662a:	bd10      	pop	{r4, pc}
   e662c:	000ed458 	.word	0x000ed458

000e6630 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   e6630:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   e6632:	2214      	movs	r2, #20
{
   e6634:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   e6636:	2100      	movs	r1, #0
   e6638:	f002 f970 	bl	e891c <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   e663c:	4620      	mov	r0, r4
   e663e:	bd10      	pop	{r4, pc}

000e6640 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   e6640:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   e6642:	4c10      	ldr	r4, [pc, #64]	; (e6684 <_Z16_fetch_usbserialv+0x44>)
{
   e6644:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   e6646:	a803      	add	r0, sp, #12
   e6648:	f7ff fff2 	bl	e6630 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   e664c:	7821      	ldrb	r1, [r4, #0]
   e664e:	f3bf 8f5b 	dmb	ish
   e6652:	f011 0101 	ands.w	r1, r1, #1
   e6656:	d111      	bne.n	e667c <_Z16_fetch_usbserialv+0x3c>
   e6658:	4620      	mov	r0, r4
   e665a:	9101      	str	r1, [sp, #4]
   e665c:	f7ed fd2e 	bl	d40bc <__cxa_guard_acquire>
   e6660:	9901      	ldr	r1, [sp, #4]
   e6662:	b158      	cbz	r0, e667c <_Z16_fetch_usbserialv+0x3c>
   e6664:	aa03      	add	r2, sp, #12
   e6666:	4808      	ldr	r0, [pc, #32]	; (e6688 <_Z16_fetch_usbserialv+0x48>)
   e6668:	f7ff ffce 	bl	e6608 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   e666c:	4620      	mov	r0, r4
   e666e:	f7ed fd2a 	bl	d40c6 <__cxa_guard_release>
   e6672:	4a06      	ldr	r2, [pc, #24]	; (e668c <_Z16_fetch_usbserialv+0x4c>)
   e6674:	4906      	ldr	r1, [pc, #24]	; (e6690 <_Z16_fetch_usbserialv+0x50>)
   e6676:	4804      	ldr	r0, [pc, #16]	; (e6688 <_Z16_fetch_usbserialv+0x48>)
   e6678:	f000 ffac 	bl	e75d4 <__aeabi_atexit>
	return _usbserial;
}
   e667c:	4802      	ldr	r0, [pc, #8]	; (e6688 <_Z16_fetch_usbserialv+0x48>)
   e667e:	b008      	add	sp, #32
   e6680:	bd10      	pop	{r4, pc}
   e6682:	bf00      	nop
   e6684:	2003e680 	.word	0x2003e680
   e6688:	2003e684 	.word	0x2003e684
   e668c:	2003ae68 	.word	0x2003ae68
   e6690:	000e6593 	.word	0x000e6593

000e6694 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   e6694:	4770      	bx	lr

000e6696 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   e6696:	7441      	strb	r1, [r0, #17]
}
   e6698:	4770      	bx	lr

000e669a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   e669a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   e669c:	7c00      	ldrb	r0, [r0, #16]
   e669e:	f7fe fee1 	bl	e5464 <hal_usart_available_data_for_write>
}
   e66a2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   e66a6:	bd08      	pop	{r3, pc}

000e66a8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   e66a8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   e66aa:	7c00      	ldrb	r0, [r0, #16]
   e66ac:	f7fe feb2 	bl	e5414 <hal_usart_available>
}
   e66b0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   e66b4:	bd08      	pop	{r3, pc}

000e66b6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   e66b6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   e66b8:	7c00      	ldrb	r0, [r0, #16]
   e66ba:	f7fe febb 	bl	e5434 <hal_usart_peek>
}
   e66be:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   e66c2:	bd08      	pop	{r3, pc}

000e66c4 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   e66c4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   e66c6:	7c00      	ldrb	r0, [r0, #16]
   e66c8:	f7fe feac 	bl	e5424 <hal_usart_read>
}
   e66cc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   e66d0:	bd08      	pop	{r3, pc}

000e66d2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   e66d2:	7c00      	ldrb	r0, [r0, #16]
   e66d4:	f7fe beb6 	b.w	e5444 <hal_usart_flush>

000e66d8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   e66d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   e66da:	7c45      	ldrb	r5, [r0, #17]
{
   e66dc:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   e66de:	b12d      	cbz	r5, e66ec <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   e66e0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   e66e2:	b003      	add	sp, #12
   e66e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   e66e8:	f7fe be8c 	b.w	e5404 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   e66ec:	7c00      	ldrb	r0, [r0, #16]
   e66ee:	9101      	str	r1, [sp, #4]
   e66f0:	f7fe feb8 	bl	e5464 <hal_usart_available_data_for_write>
   e66f4:	2800      	cmp	r0, #0
   e66f6:	9901      	ldr	r1, [sp, #4]
   e66f8:	dcf2      	bgt.n	e66e0 <_ZN11USARTSerial5writeEh+0x8>
}
   e66fa:	4628      	mov	r0, r5
   e66fc:	b003      	add	sp, #12
   e66fe:	bd30      	pop	{r4, r5, pc}

000e6700 <_ZN11USARTSerialD0Ev>:
   e6700:	b510      	push	{r4, lr}
   e6702:	2114      	movs	r1, #20
   e6704:	4604      	mov	r4, r0
   e6706:	f000 ff6a 	bl	e75de <_ZdlPvj>
   e670a:	4620      	mov	r0, r4
   e670c:	bd10      	pop	{r4, pc}
	...

000e6710 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   e6710:	b510      	push	{r4, lr}
   e6712:	f04f 0c00 	mov.w	ip, #0
   e6716:	4604      	mov	r4, r0
   e6718:	4608      	mov	r0, r1
   e671a:	4611      	mov	r1, r2
   e671c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   e6720:	e9c4 c201 	strd	ip, r2, [r4, #4]
   e6724:	4a04      	ldr	r2, [pc, #16]	; (e6738 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   e6726:	6022      	str	r2, [r4, #0]
  _blocking = true;
   e6728:	2201      	movs	r2, #1
  _serial = serial;
   e672a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   e672c:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   e672e:	461a      	mov	r2, r3
   e6730:	f7fe fe60 	bl	e53f4 <hal_usart_init>
}
   e6734:	4620      	mov	r0, r4
   e6736:	bd10      	pop	{r4, pc}
   e6738:	000ed488 	.word	0x000ed488

000e673c <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   e673c:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   e673e:	4c0e      	ldr	r4, [pc, #56]	; (e6778 <_Z22__fetch_global_Serial1v+0x3c>)
   e6740:	7821      	ldrb	r1, [r4, #0]
   e6742:	f3bf 8f5b 	dmb	ish
   e6746:	f011 0101 	ands.w	r1, r1, #1
   e674a:	d112      	bne.n	e6772 <_Z22__fetch_global_Serial1v+0x36>
   e674c:	4620      	mov	r0, r4
   e674e:	9101      	str	r1, [sp, #4]
   e6750:	f7ed fcb4 	bl	d40bc <__cxa_guard_acquire>
   e6754:	9901      	ldr	r1, [sp, #4]
   e6756:	b160      	cbz	r0, e6772 <_Z22__fetch_global_Serial1v+0x36>
   e6758:	4a08      	ldr	r2, [pc, #32]	; (e677c <_Z22__fetch_global_Serial1v+0x40>)
   e675a:	4b09      	ldr	r3, [pc, #36]	; (e6780 <_Z22__fetch_global_Serial1v+0x44>)
   e675c:	4809      	ldr	r0, [pc, #36]	; (e6784 <_Z22__fetch_global_Serial1v+0x48>)
   e675e:	f7ff ffd7 	bl	e6710 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   e6762:	4620      	mov	r0, r4
   e6764:	f7ed fcaf 	bl	d40c6 <__cxa_guard_release>
   e6768:	4a07      	ldr	r2, [pc, #28]	; (e6788 <_Z22__fetch_global_Serial1v+0x4c>)
   e676a:	4908      	ldr	r1, [pc, #32]	; (e678c <_Z22__fetch_global_Serial1v+0x50>)
   e676c:	4805      	ldr	r0, [pc, #20]	; (e6784 <_Z22__fetch_global_Serial1v+0x48>)
   e676e:	f000 ff31 	bl	e75d4 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   e6772:	4804      	ldr	r0, [pc, #16]	; (e6784 <_Z22__fetch_global_Serial1v+0x48>)
   e6774:	b002      	add	sp, #8
   e6776:	bd10      	pop	{r4, pc}
   e6778:	2003e698 	.word	0x2003e698
   e677c:	2003e69c 	.word	0x2003e69c
   e6780:	2003e720 	.word	0x2003e720
   e6784:	2003e7a4 	.word	0x2003e7a4
   e6788:	2003ae68 	.word	0x2003ae68
   e678c:	000e6695 	.word	0x000e6695

000e6790 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   e6790:	4770      	bx	lr

000e6792 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   e6792:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e6794:	4606      	mov	r6, r0
   e6796:	4615      	mov	r5, r2
   e6798:	460c      	mov	r4, r1
   e679a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   e679c:	42bc      	cmp	r4, r7
   e679e:	d006      	beq.n	e67ae <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   e67a0:	6833      	ldr	r3, [r6, #0]
   e67a2:	f814 1b01 	ldrb.w	r1, [r4], #1
   e67a6:	689b      	ldr	r3, [r3, #8]
   e67a8:	4630      	mov	r0, r6
   e67aa:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   e67ac:	e7f6      	b.n	e679c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   e67ae:	4628      	mov	r0, r5
   e67b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000e67b2 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   e67b2:	7c00      	ldrb	r0, [r0, #16]
   e67b4:	2200      	movs	r2, #0
   e67b6:	f7fe be5d 	b.w	e5474 <hal_i2c_write>

000e67ba <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   e67ba:	7c00      	ldrb	r0, [r0, #16]
   e67bc:	2100      	movs	r1, #0
   e67be:	f7fe be61 	b.w	e5484 <hal_i2c_available>

000e67c2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   e67c2:	7c00      	ldrb	r0, [r0, #16]
   e67c4:	2100      	movs	r1, #0
   e67c6:	f7fe be65 	b.w	e5494 <hal_i2c_read>

000e67ca <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   e67ca:	7c00      	ldrb	r0, [r0, #16]
   e67cc:	2100      	movs	r1, #0
   e67ce:	f7fe be69 	b.w	e54a4 <hal_i2c_peek>

000e67d2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   e67d2:	7c00      	ldrb	r0, [r0, #16]
   e67d4:	2100      	movs	r1, #0
   e67d6:	f7fe be6d 	b.w	e54b4 <hal_i2c_flush>

000e67da <_ZN7TwoWireD0Ev>:
   e67da:	b510      	push	{r4, lr}
   e67dc:	2114      	movs	r1, #20
   e67de:	4604      	mov	r4, r0
   e67e0:	f000 fefd 	bl	e75de <_ZdlPvj>
   e67e4:	4620      	mov	r0, r4
   e67e6:	bd10      	pop	{r4, pc}

000e67e8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   e67e8:	b510      	push	{r4, lr}
   e67ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   e67ee:	4604      	mov	r4, r0
   e67f0:	4608      	mov	r0, r1
   e67f2:	2100      	movs	r1, #0
   e67f4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   e67f8:	4b03      	ldr	r3, [pc, #12]	; (e6808 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   e67fa:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   e67fc:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   e67fe:	4611      	mov	r1, r2
   e6800:	f7fe fe68 	bl	e54d4 <hal_i2c_init>
}
   e6804:	4620      	mov	r0, r4
   e6806:	bd10      	pop	{r4, pc}
   e6808:	000ed4b8 	.word	0x000ed4b8

000e680c <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   e680c:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   e680e:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   e6810:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   e6814:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   e6816:	2201      	movs	r2, #1
   e6818:	f04f 33ff 	mov.w	r3, #4294967295
   e681c:	f10d 0107 	add.w	r1, sp, #7
   e6820:	47a0      	blx	r4
}
   e6822:	b002      	add	sp, #8
   e6824:	bd10      	pop	{r4, pc}

000e6826 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   e6826:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   e6828:	6803      	ldr	r3, [r0, #0]
   e682a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   e682c:	f04f 33ff 	mov.w	r3, #4294967295
   e6830:	46a4      	mov	ip, r4
}
   e6832:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   e6836:	4760      	bx	ip

000e6838 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   e6838:	b513      	push	{r0, r1, r4, lr}
   e683a:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   e683c:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   e683e:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   e6842:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   e6844:	f10d 0107 	add.w	r1, sp, #7
   e6848:	2201      	movs	r2, #1
   e684a:	47a0      	blx	r4
}
   e684c:	b002      	add	sp, #8
   e684e:	bd10      	pop	{r4, pc}

000e6850 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   e6850:	4770      	bx	lr

000e6852 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   e6852:	b538      	push	{r3, r4, r5, lr}
   e6854:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   e6856:	681a      	ldr	r2, [r3, #0]
   e6858:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   e685a:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   e685c:	da10      	bge.n	e6880 <_ZN9TCPClient9connectedEv+0x2e>
   e685e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   e6862:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   e6866:	429a      	cmp	r2, r3
   e6868:	d10a      	bne.n	e6880 <_ZN9TCPClient9connectedEv+0x2e>
    if (!rv) {
        rv = available();
   e686a:	6803      	ldr	r3, [r0, #0]
   e686c:	691b      	ldr	r3, [r3, #16]
   e686e:	4798      	blx	r3
        if (!rv) {
   e6870:	4604      	mov	r4, r0
   e6872:	b928      	cbnz	r0, e6880 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   e6874:	682b      	ldr	r3, [r5, #0]
   e6876:	4628      	mov	r0, r5
   e6878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   e687a:	4798      	blx	r3
        rv = available();
   e687c:	4620      	mov	r0, r4
        }
    }
    return rv;
}
   e687e:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   e6880:	2001      	movs	r0, #1
   e6882:	e7fc      	b.n	e687e <_ZN9TCPClient9connectedEv+0x2c>

000e6884 <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   e6884:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   e6886:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   e6888:	43c0      	mvns	r0, r0
   e688a:	0fc0      	lsrs	r0, r0, #31
   e688c:	4770      	bx	lr

000e688e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   e688e:	4770      	bx	lr

000e6890 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   e6890:	4b06      	ldr	r3, [pc, #24]	; (e68ac <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   e6892:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   e6894:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   e6896:	f100 040c 	add.w	r4, r0, #12
	    ||
   e689a:	d005      	beq.n	e68a8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   e689c:	4608      	mov	r0, r1
   e689e:	f000 fec9 	bl	e7634 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   e68a2:	2800      	cmp	r0, #0
	return nullptr;
   e68a4:	bf08      	it	eq
   e68a6:	2400      	moveq	r4, #0
      }
   e68a8:	4620      	mov	r0, r4
   e68aa:	bd10      	pop	{r4, pc}
   e68ac:	000ed37c 	.word	0x000ed37c

000e68b0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   e68b0:	b510      	push	{r4, lr}
   e68b2:	21ac      	movs	r1, #172	; 0xac
   e68b4:	4604      	mov	r4, r0
   e68b6:	f000 fe92 	bl	e75de <_ZdlPvj>
   e68ba:	4620      	mov	r0, r4
   e68bc:	bd10      	pop	{r4, pc}

000e68be <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   e68be:	f7ed bbee 	b.w	d409e <_ZdlPv>

000e68c2 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   e68c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   e68c6:	f04f 0800 	mov.w	r8, #0
   e68ca:	b086      	sub	sp, #24
   e68cc:	461d      	mov	r5, r3
   e68ce:	f8c0 8004 	str.w	r8, [r0, #4]
   e68d2:	4604      	mov	r4, r0
   e68d4:	460e      	mov	r6, r1
   e68d6:	4617      	mov	r7, r2
    struct timeval tv = {};
   e68d8:	4641      	mov	r1, r8
   e68da:	2210      	movs	r2, #16
   e68dc:	a802      	add	r0, sp, #8
   e68de:	f002 f81d 	bl	e891c <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   e68e2:	1c6b      	adds	r3, r5, #1
   e68e4:	d009      	beq.n	e68fa <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   e68e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   e68ea:	fbb5 f3f0 	udiv	r3, r5, r0
   e68ee:	e9cd 3802 	strd	r3, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   e68f2:	fb00 5313 	mls	r3, r0, r3, r5
   e68f6:	4358      	muls	r0, r3
   e68f8:	9004      	str	r0, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   e68fa:	6960      	ldr	r0, [r4, #20]
   e68fc:	2310      	movs	r3, #16
   e68fe:	9300      	str	r3, [sp, #0]
   e6900:	6800      	ldr	r0, [r0, #0]
   e6902:	ab02      	add	r3, sp, #8
   e6904:	f241 0205 	movw	r2, #4101	; 0x1005
   e6908:	f640 71ff 	movw	r1, #4095	; 0xfff
   e690c:	f7fe fe02 	bl	e5514 <sock_setsockopt>
    if (ret < 0) {
   e6910:	2800      	cmp	r0, #0
   e6912:	da07      	bge.n	e6924 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   e6914:	f7fe ff84 	bl	e5820 <__errno>
   e6918:	6803      	ldr	r3, [r0, #0]
   e691a:	6063      	str	r3, [r4, #4]
        return 0;
   e691c:	2000      	movs	r0, #0
}
   e691e:	b006      	add	sp, #24
   e6920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   e6924:	6960      	ldr	r0, [r4, #20]
   e6926:	2300      	movs	r3, #0
   e6928:	6800      	ldr	r0, [r0, #0]
   e692a:	463a      	mov	r2, r7
   e692c:	4631      	mov	r1, r6
   e692e:	f7fe fe19 	bl	e5564 <sock_send>
    if (ret < 0) {
   e6932:	1e03      	subs	r3, r0, #0
   e6934:	dbee      	blt.n	e6914 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   e6936:	4618      	mov	r0, r3
   e6938:	e7f1      	b.n	e691e <_ZN9TCPClient5writeEPKhjm+0x5c>
	...

000e693c <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   e693c:	b570      	push	{r4, r5, r6, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   e693e:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   e6940:	4b05      	ldr	r3, [pc, #20]	; (e6958 <_ZN9TCPClient8remoteIPEv+0x1c>)
   e6942:	4604      	mov	r4, r0
   e6944:	358c      	adds	r5, #140	; 0x8c
   e6946:	f844 3b04 	str.w	r3, [r4], #4
   e694a:	4606      	mov	r6, r0
   e694c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   e694e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   e6950:	682b      	ldr	r3, [r5, #0]
   e6952:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   e6954:	4630      	mov	r0, r6
   e6956:	bd70      	pop	{r4, r5, r6, pc}
   e6958:	000ed444 	.word	0x000ed444

000e695c <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   e695c:	b510      	push	{r4, lr}
   e695e:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   e6960:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   e6964:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   e6968:	429a      	cmp	r2, r3
int TCPClient::peek() {
   e696a:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   e696c:	d005      	beq.n	e697a <_ZN9TCPClient4peekEv+0x1e>
   e696e:	6963      	ldr	r3, [r4, #20]
   e6970:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   e6974:	4413      	add	r3, r2
   e6976:	7918      	ldrb	r0, [r3, #4]
}
   e6978:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   e697a:	6803      	ldr	r3, [r0, #0]
   e697c:	691b      	ldr	r3, [r3, #16]
   e697e:	4798      	blx	r3
   e6980:	2800      	cmp	r0, #0
   e6982:	d1f4      	bne.n	e696e <_ZN9TCPClient4peekEv+0x12>
   e6984:	f04f 30ff 	mov.w	r0, #4294967295
   e6988:	e7f6      	b.n	e6978 <_ZN9TCPClient4peekEv+0x1c>

000e698a <_ZN9TCPClient4readEv>:
int TCPClient::read() {
   e698a:	b510      	push	{r4, lr}
   e698c:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   e698e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   e6992:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   e6996:	429a      	cmp	r2, r3
int TCPClient::read() {
   e6998:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   e699a:	d008      	beq.n	e69ae <_ZN9TCPClient4readEv+0x24>
   e699c:	6963      	ldr	r3, [r4, #20]
   e699e:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   e69a2:	1c51      	adds	r1, r2, #1
   e69a4:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   e69a8:	4413      	add	r3, r2
   e69aa:	7918      	ldrb	r0, [r3, #4]
}
   e69ac:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   e69ae:	6803      	ldr	r3, [r0, #0]
   e69b0:	691b      	ldr	r3, [r3, #16]
   e69b2:	4798      	blx	r3
   e69b4:	2800      	cmp	r0, #0
   e69b6:	d1f1      	bne.n	e699c <_ZN9TCPClient4readEv+0x12>
   e69b8:	f04f 30ff 	mov.w	r0, #4294967295
   e69bc:	e7f6      	b.n	e69ac <_ZN9TCPClient4readEv+0x22>

000e69be <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   e69be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e69c0:	6943      	ldr	r3, [r0, #20]
   e69c2:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   e69c4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   e69c8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   e69cc:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   e69ce:	4605      	mov	r5, r0
   e69d0:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   e69d2:	d016      	beq.n	e6a02 <_ZN9TCPClient4readEPhj+0x44>
   e69d4:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   e69d6:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   e69da:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   e69de:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   e69e0:	42bc      	cmp	r4, r7
   e69e2:	bf28      	it	cs
   e69e4:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   e69e6:	3304      	adds	r3, #4
   e69e8:	4622      	mov	r2, r4
   e69ea:	4419      	add	r1, r3
   e69ec:	4630      	mov	r0, r6
   e69ee:	f001 ff6d 	bl	e88cc <memcpy>
   e69f2:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   e69f4:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   e69f8:	4423      	add	r3, r4
   e69fa:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   e69fe:	4620      	mov	r0, r4
   e6a00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   e6a02:	6803      	ldr	r3, [r0, #0]
   e6a04:	691b      	ldr	r3, [r3, #16]
   e6a06:	4798      	blx	r3
   e6a08:	2800      	cmp	r0, #0
   e6a0a:	d1e3      	bne.n	e69d4 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   e6a0c:	f04f 34ff 	mov.w	r4, #4294967295
   e6a10:	e7f5      	b.n	e69fe <_ZN9TCPClient4readEPhj+0x40>
	...

000e6a14 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   e6a14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   e6a18:	4698      	mov	r8, r3
    stop();
   e6a1a:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   e6a1c:	b093      	sub	sp, #76	; 0x4c
   e6a1e:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   e6a20:	2400      	movs	r4, #0
    stop();
   e6a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   e6a24:	4606      	mov	r6, r0
   e6a26:	4617      	mov	r7, r2
    stop();
   e6a28:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   e6a2a:	4628      	mov	r0, r5
   e6a2c:	466b      	mov	r3, sp
   e6a2e:	4622      	mov	r2, r4
   e6a30:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   e6a32:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   e6a34:	f7fe fc76 	bl	e5324 <netdb_getaddrinfo>
   e6a38:	4605      	mov	r5, r0
   e6a3a:	2800      	cmp	r0, #0
   e6a3c:	d163      	bne.n	e6b06 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   e6a3e:	9b00      	ldr	r3, [sp, #0]
   e6a40:	2b00      	cmp	r3, #0
   e6a42:	d04b      	beq.n	e6adc <_ZN9TCPClient7connectEPKctm+0xc8>
   e6a44:	695b      	ldr	r3, [r3, #20]
   e6a46:	2b00      	cmp	r3, #0
   e6a48:	d048      	beq.n	e6adc <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   e6a4a:	a806      	add	r0, sp, #24
   e6a4c:	f7ff fd52 	bl	e64f4 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   e6a50:	9b00      	ldr	r3, [sp, #0]
   e6a52:	695c      	ldr	r4, [r3, #20]
    if (saddr->sa_family == AF_INET) {
   e6a54:	7863      	ldrb	r3, [r4, #1]
   e6a56:	2b02      	cmp	r3, #2
   e6a58:	d104      	bne.n	e6a64 <_ZN9TCPClient7connectEPKctm+0x50>
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   e6a5a:	1d21      	adds	r1, r4, #4
            addr = (const uint8_t*)(&ptr[3]);
   e6a5c:	a806      	add	r0, sp, #24
   e6a5e:	f7ff fd8c 	bl	e657a <_ZN9IPAddressaSEPKh>
        }
        if (port) {
   e6a62:	e026      	b.n	e6ab2 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   e6a64:	2b0a      	cmp	r3, #10
   e6a66:	d124      	bne.n	e6ab2 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   e6a68:	2211      	movs	r2, #17
   e6a6a:	4629      	mov	r1, r5
   e6a6c:	a801      	add	r0, sp, #4
   e6a6e:	f001 ff55 	bl	e891c <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   e6a72:	68a3      	ldr	r3, [r4, #8]
   e6a74:	2b00      	cmp	r3, #0
   e6a76:	d038      	beq.n	e6aea <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   e6a78:	f104 0308 	add.w	r3, r4, #8
   e6a7c:	f10d 0c04 	add.w	ip, sp, #4
   e6a80:	3418      	adds	r4, #24
   e6a82:	6818      	ldr	r0, [r3, #0]
   e6a84:	6859      	ldr	r1, [r3, #4]
   e6a86:	4662      	mov	r2, ip
   e6a88:	c203      	stmia	r2!, {r0, r1}
   e6a8a:	3308      	adds	r3, #8
   e6a8c:	42a3      	cmp	r3, r4
   e6a8e:	4694      	mov	ip, r2
   e6a90:	d1f7      	bne.n	e6a82 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   e6a92:	2306      	movs	r3, #6
            addr = IPAddress(a);
   e6a94:	a901      	add	r1, sp, #4
   e6a96:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   e6a98:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   e6a9c:	f7ff fd38 	bl	e6510 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   e6aa0:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   e6aa4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   e6aa8:	ac07      	add	r4, sp, #28
   e6aaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   e6aac:	f8dc 3000 	ldr.w	r3, [ip]
   e6ab0:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   e6ab2:	a806      	add	r0, sp, #24
   e6ab4:	f7ff fd3e 	bl	e6534 <_ZNK9IPAddresscvbEv>
        if (addr) {
   e6ab8:	b180      	cbz	r0, e6adc <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   e6aba:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   e6abc:	ad07      	add	r5, sp, #28
   e6abe:	f8d3 9020 	ldr.w	r9, [r3, #32]
   e6ac2:	4b12      	ldr	r3, [pc, #72]	; (e6b0c <_ZN9TCPClient7connectEPKctm+0xf8>)
   e6ac4:	930c      	str	r3, [sp, #48]	; 0x30
   e6ac6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   e6ac8:	ac0d      	add	r4, sp, #52	; 0x34
   e6aca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   e6acc:	682b      	ldr	r3, [r5, #0]
   e6ace:	7023      	strb	r3, [r4, #0]
   e6ad0:	463a      	mov	r2, r7
   e6ad2:	4643      	mov	r3, r8
   e6ad4:	a90c      	add	r1, sp, #48	; 0x30
   e6ad6:	4630      	mov	r0, r6
   e6ad8:	47c8      	blx	r9
   e6ada:	4605      	mov	r5, r0
    SCOPE_GUARD({
   e6adc:	9800      	ldr	r0, [sp, #0]
   e6ade:	f7fe fc19 	bl	e5314 <netdb_freeaddrinfo>
}
   e6ae2:	4628      	mov	r0, r5
   e6ae4:	b013      	add	sp, #76	; 0x4c
   e6ae6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   e6aea:	68e3      	ldr	r3, [r4, #12]
   e6aec:	2b00      	cmp	r3, #0
   e6aee:	d1c3      	bne.n	e6a78 <_ZN9TCPClient7connectEPKctm+0x64>
   e6af0:	f64f 70ff 	movw	r0, #65535	; 0xffff
   e6af4:	f8d4 9010 	ldr.w	r9, [r4, #16]
   e6af8:	f7fe fc6c 	bl	e53d4 <inet_htonl>
   e6afc:	4581      	cmp	r9, r0
   e6afe:	d1bb      	bne.n	e6a78 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   e6b00:	f104 0114 	add.w	r1, r4, #20
   e6b04:	e7aa      	b.n	e6a5c <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   e6b06:	4625      	mov	r5, r4
   e6b08:	e7e8      	b.n	e6adc <_ZN9TCPClient7connectEPKctm+0xc8>
   e6b0a:	bf00      	nop
   e6b0c:	000ed444 	.word	0x000ed444

000e6b10 <_ZN9TCPClient12flush_bufferEv>:
   e6b10:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   e6b12:	2300      	movs	r3, #0
   e6b14:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   e6b18:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   e6b1a:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   e6b1e:	4770      	bx	lr

000e6b20 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   e6b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e6b24:	461f      	mov	r7, r3
    stop();
   e6b26:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   e6b28:	460c      	mov	r4, r1
    stop();
   e6b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   e6b2c:	b08a      	sub	sp, #40	; 0x28
   e6b2e:	4605      	mov	r5, r0
   e6b30:	4616      	mov	r6, r2
    stop();
   e6b32:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   e6b34:	7d23      	ldrb	r3, [r4, #20]
   e6b36:	f8d5 8014 	ldr.w	r8, [r5, #20]
   e6b3a:	2b04      	cmp	r3, #4
   e6b3c:	bf0c      	ite	eq
   e6b3e:	2002      	moveq	r0, #2
   e6b40:	200a      	movne	r0, #10
   e6b42:	2206      	movs	r2, #6
   e6b44:	2101      	movs	r1, #1
   e6b46:	f7fe fd15 	bl	e5574 <sock_socket>
   e6b4a:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   e6b4e:	696b      	ldr	r3, [r5, #20]
   e6b50:	681b      	ldr	r3, [r3, #0]
   e6b52:	2b00      	cmp	r3, #0
   e6b54:	da08      	bge.n	e6b68 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   e6b56:	682b      	ldr	r3, [r5, #0]
   e6b58:	4628      	mov	r0, r5
   e6b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   e6b5c:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   e6b5e:	4798      	blx	r3
}
   e6b60:	4620      	mov	r0, r4
   e6b62:	b00a      	add	sp, #40	; 0x28
   e6b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   e6b68:	4628      	mov	r0, r5
   e6b6a:	f7ff ffd1 	bl	e6b10 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   e6b6e:	b1b7      	cbz	r7, e6b9e <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   e6b70:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   e6b72:	a903      	add	r1, sp, #12
   e6b74:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   e6b76:	9303      	str	r3, [sp, #12]
   e6b78:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   e6b7c:	f7fe fbe2 	bl	e5344 <if_index_to_name>
   e6b80:	2800      	cmp	r0, #0
   e6b82:	d1e8      	bne.n	e6b56 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   e6b84:	6968      	ldr	r0, [r5, #20]
   e6b86:	2306      	movs	r3, #6
   e6b88:	9300      	str	r3, [sp, #0]
   e6b8a:	6800      	ldr	r0, [r0, #0]
   e6b8c:	ab03      	add	r3, sp, #12
   e6b8e:	f241 020b 	movw	r2, #4107	; 0x100b
   e6b92:	f640 71ff 	movw	r1, #4095	; 0xfff
   e6b96:	f7fe fcbd 	bl	e5514 <sock_setsockopt>
   e6b9a:	2800      	cmp	r0, #0
   e6b9c:	d1db      	bne.n	e6b56 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   e6b9e:	221c      	movs	r2, #28
   e6ba0:	2100      	movs	r1, #0
   e6ba2:	a803      	add	r0, sp, #12
   e6ba4:	f001 feba 	bl	e891c <memset>
    if (ip.version() == 4) {
   e6ba8:	7d23      	ldrb	r3, [r4, #20]
   e6baa:	2b04      	cmp	r3, #4
   e6bac:	d11d      	bne.n	e6bea <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   e6bae:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   e6bb2:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   e6bb4:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   e6bb8:	f7fe fc14 	bl	e53e4 <inet_htons>
   e6bbc:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   e6bc0:	6860      	ldr	r0, [r4, #4]
   e6bc2:	f7fe fc07 	bl	e53d4 <inet_htonl>
   e6bc6:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   e6bc8:	696b      	ldr	r3, [r5, #20]
   e6bca:	221c      	movs	r2, #28
   e6bcc:	6818      	ldr	r0, [r3, #0]
   e6bce:	a903      	add	r1, sp, #12
   e6bd0:	f7fe fcb0 	bl	e5534 <sock_connect>
   e6bd4:	2800      	cmp	r0, #0
   e6bd6:	d1be      	bne.n	e6b56 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   e6bd8:	3404      	adds	r4, #4
   e6bda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   e6bdc:	696d      	ldr	r5, [r5, #20]
   e6bde:	358c      	adds	r5, #140	; 0x8c
   e6be0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   e6be2:	6823      	ldr	r3, [r4, #0]
   e6be4:	702b      	strb	r3, [r5, #0]
    return 1; // success
   e6be6:	2401      	movs	r4, #1
   e6be8:	e7ba      	b.n	e6b60 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   e6bea:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   e6bee:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   e6bf0:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   e6bf4:	f7fe fbf6 	bl	e53e4 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   e6bf8:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   e6bfa:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   e6bfe:	1d23      	adds	r3, r4, #4
   e6c00:	f104 0714 	add.w	r7, r4, #20
   e6c04:	6818      	ldr	r0, [r3, #0]
   e6c06:	6859      	ldr	r1, [r3, #4]
   e6c08:	4632      	mov	r2, r6
   e6c0a:	c203      	stmia	r2!, {r0, r1}
   e6c0c:	3308      	adds	r3, #8
   e6c0e:	42bb      	cmp	r3, r7
   e6c10:	4616      	mov	r6, r2
   e6c12:	d1f7      	bne.n	e6c04 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   e6c14:	e7d8      	b.n	e6bc8 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000e6c18 <_ZN9TCPClient9availableEv>:
{
   e6c18:	b530      	push	{r4, r5, lr}
   e6c1a:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   e6c1c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   e6c20:	b08b      	sub	sp, #44	; 0x2c
   e6c22:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   e6c24:	b12b      	cbz	r3, e6c32 <_ZN9TCPClient9availableEv+0x1a>
   e6c26:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   e6c2a:	429a      	cmp	r2, r3
   e6c2c:	d101      	bne.n	e6c32 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   e6c2e:	f7ff ff6f 	bl	e6b10 <_ZN9TCPClient12flush_bufferEv>
   e6c32:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   e6c34:	6808      	ldr	r0, [r1, #0]
   e6c36:	2800      	cmp	r0, #0
   e6c38:	db18      	blt.n	e6c6c <_ZN9TCPClient9availableEv+0x54>
   e6c3a:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
        if (d_->total < arraySize(d_->buffer)) {
   e6c3e:	2d7f      	cmp	r5, #127	; 0x7f
   e6c40:	d814      	bhi.n	e6c6c <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   e6c42:	3104      	adds	r1, #4
   e6c44:	2308      	movs	r3, #8
   e6c46:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   e6c4a:	4429      	add	r1, r5
   e6c4c:	f7fe fc82 	bl	e5554 <sock_recv>
            if (ret > 0) {
   e6c50:	2800      	cmp	r0, #0
   e6c52:	dd13      	ble.n	e6c7c <_ZN9TCPClient9availableEv+0x64>
   e6c54:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   e6c56:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   e6c5a:	b90a      	cbnz	r2, e6c60 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   e6c5c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   e6c60:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   e6c62:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   e6c66:	4410      	add	r0, r2
   e6c68:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   e6c6c:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   e6c6e:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   e6c72:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   e6c76:	1ac0      	subs	r0, r0, r3
   e6c78:	b00b      	add	sp, #44	; 0x2c
   e6c7a:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   e6c7c:	f7fe fdd0 	bl	e5820 <__errno>
   e6c80:	6803      	ldr	r3, [r0, #0]
   e6c82:	2b0b      	cmp	r3, #11
   e6c84:	d0f2      	beq.n	e6c6c <_ZN9TCPClient9availableEv+0x54>
   e6c86:	f7fe fdcb 	bl	e5820 <__errno>
   e6c8a:	6803      	ldr	r3, [r0, #0]
   e6c8c:	2b0b      	cmp	r3, #11
   e6c8e:	d0ed      	beq.n	e6c6c <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   e6c90:	2320      	movs	r3, #32
   e6c92:	2500      	movs	r5, #0
   e6c94:	e9cd 3502 	strd	r3, r5, [sp, #8]
   e6c98:	f7fe fdc2 	bl	e5820 <__errno>
   e6c9c:	6803      	ldr	r3, [r0, #0]
   e6c9e:	9301      	str	r3, [sp, #4]
   e6ca0:	4b08      	ldr	r3, [pc, #32]	; (e6cc4 <_ZN9TCPClient9availableEv+0xac>)
   e6ca2:	4909      	ldr	r1, [pc, #36]	; (e6cc8 <_ZN9TCPClient9availableEv+0xb0>)
   e6ca4:	9300      	str	r3, [sp, #0]
   e6ca6:	aa02      	add	r2, sp, #8
   e6ca8:	462b      	mov	r3, r5
   e6caa:	2032      	movs	r0, #50	; 0x32
   e6cac:	f7fe fce2 	bl	e5674 <log_message>
                    sock_close(d_->sock);
   e6cb0:	6963      	ldr	r3, [r4, #20]
   e6cb2:	6818      	ldr	r0, [r3, #0]
   e6cb4:	f7fe fc36 	bl	e5524 <sock_close>
   e6cb8:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   e6cba:	f04f 32ff 	mov.w	r2, #4294967295
   e6cbe:	601a      	str	r2, [r3, #0]
   e6cc0:	e7d4      	b.n	e6c6c <_ZN9TCPClient9availableEv+0x54>
   e6cc2:	bf00      	nop
   e6cc4:	000ed4d8 	.word	0x000ed4d8
   e6cc8:	000ed34c 	.word	0x000ed34c

000e6ccc <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   e6ccc:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   e6cce:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   e6cd0:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   e6cd2:	6818      	ldr	r0, [r3, #0]
   e6cd4:	2800      	cmp	r0, #0
   e6cd6:	db01      	blt.n	e6cdc <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   e6cd8:	f7fe fc24 	bl	e5524 <sock_close>
   e6cdc:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   e6cde:	f04f 32ff 	mov.w	r2, #4294967295
   e6ce2:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   e6ce4:	6960      	ldr	r0, [r4, #20]
   e6ce6:	2211      	movs	r2, #17
   e6ce8:	2100      	movs	r1, #0
   e6cea:	308c      	adds	r0, #140	; 0x8c
   e6cec:	f001 fe16 	bl	e891c <memset>
    flush_buffer();
   e6cf0:	4620      	mov	r0, r4
}
   e6cf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   e6cf6:	f7ff bf0b 	b.w	e6b10 <_ZN9TCPClient12flush_bufferEv>

000e6cfa <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   e6cfa:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   e6cfc:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   e6cfe:	4604      	mov	r4, r0
          total(0) {
   e6d00:	6001      	str	r1, [r0, #0]
   e6d02:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   e6d06:	3088      	adds	r0, #136	; 0x88
   e6d08:	f7ff fbf4 	bl	e64f4 <_ZN9IPAddressC1Ev>
}
   e6d0c:	4620      	mov	r0, r4
   e6d0e:	bd10      	pop	{r4, pc}

000e6d10 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   e6d10:	b573      	push	{r0, r1, r4, r5, r6, lr}
   e6d12:	2300      	movs	r3, #0
   e6d14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   e6d18:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   e6d1c:	4a0e      	ldr	r2, [pc, #56]	; (e6d58 <_ZN9TCPClientC1Ei+0x48>)
   e6d1e:	6103      	str	r3, [r0, #16]
   e6d20:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   e6d22:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   e6d24:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   e6d26:	20ac      	movs	r0, #172	; 0xac
   e6d28:	9101      	str	r1, [sp, #4]
   e6d2a:	f7ed f9b4 	bl	d4096 <_Znwj>
	  auto __pi = ::new (__mem)
   e6d2e:	1e05      	subs	r5, r0, #0
   e6d30:	f105 060c 	add.w	r6, r5, #12
   e6d34:	d008      	beq.n	e6d48 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   e6d36:	2301      	movs	r3, #1
   e6d38:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   e6d3c:	4b07      	ldr	r3, [pc, #28]	; (e6d5c <_ZN9TCPClientC1Ei+0x4c>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   e6d3e:	9901      	ldr	r1, [sp, #4]
   e6d40:	602b      	str	r3, [r5, #0]
   e6d42:	4630      	mov	r0, r6
   e6d44:	f7ff ffd9 	bl	e6cfa <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   e6d48:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   e6d4a:	e9c4 6505 	strd	r6, r5, [r4, #20]
   e6d4e:	f7ff fedf 	bl	e6b10 <_ZN9TCPClient12flush_bufferEv>
}
   e6d52:	b002      	add	sp, #8
   e6d54:	bd70      	pop	{r4, r5, r6, pc}
   e6d56:	bf00      	nop
   e6d58:	000ed50c 	.word	0x000ed50c
   e6d5c:	000ed4f0 	.word	0x000ed4f0

000e6d60 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   e6d60:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   e6d62:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   e6d66:	4604      	mov	r4, r0
        : TCPClient(-1) {
   e6d68:	f7ff ffd2 	bl	e6d10 <_ZN9TCPClientC1Ei>
}
   e6d6c:	4620      	mov	r0, r4
   e6d6e:	bd10      	pop	{r4, pc}

000e6d70 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   e6d70:	b510      	push	{r4, lr}
   e6d72:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   e6d74:	6800      	ldr	r0, [r0, #0]
   e6d76:	2800      	cmp	r0, #0
   e6d78:	db01      	blt.n	e6d7e <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   e6d7a:	f7fe fbd3 	bl	e5524 <sock_close>
    }
}
   e6d7e:	4620      	mov	r0, r4
   e6d80:	bd10      	pop	{r4, pc}

000e6d82 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
   e6d82:	300c      	adds	r0, #12
   e6d84:	f7ff bff4 	b.w	e6d70 <_ZN9TCPClient4DataD1Ev>

000e6d88 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   e6d88:	2200      	movs	r2, #0
   e6d8a:	6840      	ldr	r0, [r0, #4]
   e6d8c:	4611      	mov	r1, r2
   e6d8e:	f7fe bcbf 	b.w	e5710 <network_ready>

000e6d92 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   e6d92:	2200      	movs	r2, #0
   e6d94:	6840      	ldr	r0, [r0, #4]
   e6d96:	4611      	mov	r1, r2
   e6d98:	f7fe bcda 	b.w	e5750 <network_listening>

000e6d9c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   e6d9c:	2200      	movs	r2, #0
   e6d9e:	6840      	ldr	r0, [r0, #4]
   e6da0:	4611      	mov	r1, r2
   e6da2:	f7fe bce5 	b.w	e5770 <network_get_listen_timeout>

000e6da6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   e6da6:	6840      	ldr	r0, [r0, #4]
   e6da8:	2200      	movs	r2, #0
   e6daa:	f7fe bcd9 	b.w	e5760 <network_set_listen_timeout>

000e6dae <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   e6dae:	6840      	ldr	r0, [r0, #4]
   e6db0:	2200      	movs	r2, #0
   e6db2:	f081 0101 	eor.w	r1, r1, #1
   e6db6:	f7fe bcc3 	b.w	e5740 <network_listen>

000e6dba <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   e6dba:	2300      	movs	r3, #0
   e6dbc:	6840      	ldr	r0, [r0, #4]
   e6dbe:	461a      	mov	r2, r3
   e6dc0:	4619      	mov	r1, r3
   e6dc2:	f7fe bcb5 	b.w	e5730 <network_off>

000e6dc6 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   e6dc6:	2300      	movs	r3, #0
   e6dc8:	6840      	ldr	r0, [r0, #4]
   e6dca:	461a      	mov	r2, r3
   e6dcc:	4619      	mov	r1, r3
   e6dce:	f7fe bca7 	b.w	e5720 <network_on>

000e6dd2 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   e6dd2:	2200      	movs	r2, #0
   e6dd4:	6840      	ldr	r0, [r0, #4]
   e6dd6:	4611      	mov	r1, r2
   e6dd8:	f7fe bc8a 	b.w	e56f0 <network_connecting>

000e6ddc <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   e6ddc:	6840      	ldr	r0, [r0, #4]
   e6dde:	2200      	movs	r2, #0
   e6de0:	2102      	movs	r1, #2
   e6de2:	f7fe bc8d 	b.w	e5700 <network_disconnect>

000e6de6 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   e6de6:	2300      	movs	r3, #0
   e6de8:	6840      	ldr	r0, [r0, #4]
   e6dea:	461a      	mov	r2, r3
   e6dec:	f7fe bc78 	b.w	e56e0 <network_connect>

000e6df0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   e6df0:	4b02      	ldr	r3, [pc, #8]	; (e6dfc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   e6df2:	2204      	movs	r2, #4
   e6df4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   e6df6:	4a02      	ldr	r2, [pc, #8]	; (e6e00 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   e6df8:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   e6dfa:	4770      	bx	lr
   e6dfc:	2003e7b8 	.word	0x2003e7b8
   e6e00:	000ed558 	.word	0x000ed558

000e6e04 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   e6e04:	2300      	movs	r3, #0
   e6e06:	6840      	ldr	r0, [r0, #4]
   e6e08:	461a      	mov	r2, r3
   e6e0a:	f7fe bc69 	b.w	e56e0 <network_connect>

000e6e0e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   e6e0e:	6840      	ldr	r0, [r0, #4]
   e6e10:	2200      	movs	r2, #0
   e6e12:	2102      	movs	r1, #2
   e6e14:	f7fe bc74 	b.w	e5700 <network_disconnect>

000e6e18 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   e6e18:	2200      	movs	r2, #0
   e6e1a:	6840      	ldr	r0, [r0, #4]
   e6e1c:	4611      	mov	r1, r2
   e6e1e:	f7fe bc67 	b.w	e56f0 <network_connecting>

000e6e22 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   e6e22:	2200      	movs	r2, #0
   e6e24:	6840      	ldr	r0, [r0, #4]
   e6e26:	4611      	mov	r1, r2
   e6e28:	f7fe bc72 	b.w	e5710 <network_ready>

000e6e2c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   e6e2c:	2300      	movs	r3, #0
   e6e2e:	6840      	ldr	r0, [r0, #4]
   e6e30:	461a      	mov	r2, r3
   e6e32:	4619      	mov	r1, r3
   e6e34:	f7fe bc74 	b.w	e5720 <network_on>

000e6e38 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   e6e38:	2300      	movs	r3, #0
   e6e3a:	6840      	ldr	r0, [r0, #4]
   e6e3c:	461a      	mov	r2, r3
   e6e3e:	4619      	mov	r1, r3
   e6e40:	f7fe bc76 	b.w	e5730 <network_off>

000e6e44 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   e6e44:	6840      	ldr	r0, [r0, #4]
   e6e46:	2200      	movs	r2, #0
   e6e48:	f081 0101 	eor.w	r1, r1, #1
   e6e4c:	f7fe bc78 	b.w	e5740 <network_listen>

000e6e50 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   e6e50:	6840      	ldr	r0, [r0, #4]
   e6e52:	2200      	movs	r2, #0
   e6e54:	f7fe bc84 	b.w	e5760 <network_set_listen_timeout>

000e6e58 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   e6e58:	2200      	movs	r2, #0
   e6e5a:	6840      	ldr	r0, [r0, #4]
   e6e5c:	4611      	mov	r1, r2
   e6e5e:	f7fe bc87 	b.w	e5770 <network_get_listen_timeout>

000e6e62 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   e6e62:	2200      	movs	r2, #0
   e6e64:	6840      	ldr	r0, [r0, #4]
   e6e66:	4611      	mov	r1, r2
   e6e68:	f7fe bc72 	b.w	e5750 <network_listening>

000e6e6c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   e6e6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   e6e70:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   e6e72:	b095      	sub	sp, #84	; 0x54
   e6e74:	4616      	mov	r6, r2
   e6e76:	460d      	mov	r5, r1
   e6e78:	4607      	mov	r7, r0
    IPAddress addr;
   e6e7a:	f7ff fb3b 	bl	e64f4 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   e6e7e:	4621      	mov	r1, r4
   e6e80:	2218      	movs	r2, #24
   e6e82:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   e6e84:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   e6e86:	f001 fd49 	bl	e891c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   e6e8a:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   e6e8c:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   e6e90:	4621      	mov	r1, r4
   e6e92:	466b      	mov	r3, sp
   e6e94:	aa0c      	add	r2, sp, #48	; 0x30
   e6e96:	4630      	mov	r0, r6
   e6e98:	f7fe fa44 	bl	e5324 <netdb_getaddrinfo>
    if (!r) {
   e6e9c:	4604      	mov	r4, r0
   e6e9e:	2800      	cmp	r0, #0
   e6ea0:	d146      	bne.n	e6f30 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   e6ea2:	4602      	mov	r2, r0
   e6ea4:	2101      	movs	r1, #1
   e6ea6:	6868      	ldr	r0, [r5, #4]
   e6ea8:	f7fe fc32 	bl	e5710 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   e6eac:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   e6eae:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   e6eb0:	4622      	mov	r2, r4
   e6eb2:	6868      	ldr	r0, [r5, #4]
   e6eb4:	f7fe fc2c 	bl	e5710 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   e6eb8:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   e6eba:	4681      	mov	r9, r0
        bool ok = false;
   e6ebc:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   e6ebe:	2e00      	cmp	r6, #0
   e6ec0:	d036      	beq.n	e6f30 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   e6ec2:	2900      	cmp	r1, #0
   e6ec4:	d134      	bne.n	e6f30 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   e6ec6:	6873      	ldr	r3, [r6, #4]
   e6ec8:	2b02      	cmp	r3, #2
   e6eca:	d003      	beq.n	e6ed4 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   e6ecc:	2b0a      	cmp	r3, #10
   e6ece:	d00b      	beq.n	e6ee8 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   e6ed0:	69f6      	ldr	r6, [r6, #28]
   e6ed2:	e7f4      	b.n	e6ebe <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   e6ed4:	f1b8 0f00 	cmp.w	r8, #0
   e6ed8:	d004      	beq.n	e6ee4 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   e6eda:	6971      	ldr	r1, [r6, #20]
   e6edc:	4638      	mov	r0, r7
   e6ede:	3104      	adds	r1, #4
   e6ee0:	f7ff fb4b 	bl	e657a <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   e6ee4:	4641      	mov	r1, r8
   e6ee6:	e7f3      	b.n	e6ed0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   e6ee8:	f1b9 0f00 	cmp.w	r9, #0
   e6eec:	d101      	bne.n	e6ef2 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   e6eee:	4649      	mov	r1, r9
   e6ef0:	e7ee      	b.n	e6ed0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   e6ef2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   e6ef4:	2210      	movs	r2, #16
   e6ef6:	a801      	add	r0, sp, #4
   e6ef8:	f001 fd10 	bl	e891c <memset>
                    a.v = 6;
   e6efc:	2306      	movs	r3, #6
   e6efe:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   e6f02:	ad01      	add	r5, sp, #4
   e6f04:	f104 0308 	add.w	r3, r4, #8
   e6f08:	3418      	adds	r4, #24
   e6f0a:	6818      	ldr	r0, [r3, #0]
   e6f0c:	6859      	ldr	r1, [r3, #4]
   e6f0e:	462a      	mov	r2, r5
   e6f10:	c203      	stmia	r2!, {r0, r1}
   e6f12:	3308      	adds	r3, #8
   e6f14:	42a3      	cmp	r3, r4
   e6f16:	4615      	mov	r5, r2
   e6f18:	d1f7      	bne.n	e6f0a <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   e6f1a:	a901      	add	r1, sp, #4
   e6f1c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   e6f1e:	ad07      	add	r5, sp, #28
   e6f20:	f7ff faf6 	bl	e6510 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   e6f24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   e6f26:	1d3c      	adds	r4, r7, #4
   e6f28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   e6f2a:	682b      	ldr	r3, [r5, #0]
   e6f2c:	7023      	strb	r3, [r4, #0]
   e6f2e:	e7de      	b.n	e6eee <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   e6f30:	9800      	ldr	r0, [sp, #0]
   e6f32:	f7fe f9ef 	bl	e5314 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   e6f36:	4638      	mov	r0, r7
   e6f38:	b015      	add	sp, #84	; 0x54
   e6f3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000e6f40 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   e6f40:	4b02      	ldr	r3, [pc, #8]	; (e6f4c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   e6f42:	4a03      	ldr	r2, [pc, #12]	; (e6f50 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   e6f44:	601a      	str	r2, [r3, #0]
   e6f46:	2200      	movs	r2, #0
   e6f48:	605a      	str	r2, [r3, #4]

} // spark
   e6f4a:	4770      	bx	lr
   e6f4c:	2003e7c0 	.word	0x2003e7c0
   e6f50:	000ed58c 	.word	0x000ed58c

000e6f54 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   e6f54:	f100 0310 	add.w	r3, r0, #16
   e6f58:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   e6f5a:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   e6f5e:	2901      	cmp	r1, #1
   e6f60:	4618      	mov	r0, r3
   e6f62:	d108      	bne.n	e6f76 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   e6f64:	f853 1c04 	ldr.w	r1, [r3, #-4]
   e6f68:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   e6f6c:	3a01      	subs	r2, #1
   e6f6e:	f103 0310 	add.w	r3, r3, #16
   e6f72:	d1f2      	bne.n	e6f5a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   e6f74:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   e6f76:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   e6f78:	bf04      	itt	eq
   e6f7a:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   e6f7e:	1852      	addeq	r2, r2, r1
   e6f80:	e7f4      	b.n	e6f6c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000e6f82 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   e6f82:	4770      	bx	lr

000e6f84 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   e6f84:	2000      	movs	r0, #0
   e6f86:	4770      	bx	lr

000e6f88 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   e6f88:	b510      	push	{r4, lr}
   e6f8a:	2110      	movs	r1, #16
   e6f8c:	4604      	mov	r4, r0
   e6f8e:	f000 fb26 	bl	e75de <_ZdlPvj>
   e6f92:	4620      	mov	r0, r4
   e6f94:	bd10      	pop	{r4, pc}

000e6f96 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   e6f96:	b508      	push	{r3, lr}
      { delete this; }
   e6f98:	f7ff fff6 	bl	e6f88 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   e6f9c:	bd08      	pop	{r3, pc}

000e6f9e <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   e6f9e:	b510      	push	{r4, lr}
      { delete _M_ptr; }
   e6fa0:	68c4      	ldr	r4, [r0, #12]
   e6fa2:	b17c      	cbz	r4, e6fc4 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
            json(nullptr),
            freeJson(false) {
    }

    ~JSONData() {
        delete[] tokens;
   e6fa4:	6820      	ldr	r0, [r4, #0]
   e6fa6:	b108      	cbz	r0, e6fac <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0xe>
   e6fa8:	f7ed f87b 	bl	d40a2 <_ZdaPv>
        if (freeJson) {
   e6fac:	7a23      	ldrb	r3, [r4, #8]
   e6fae:	b11b      	cbz	r3, e6fb8 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1a>
            delete[] json;
   e6fb0:	6860      	ldr	r0, [r4, #4]
   e6fb2:	b108      	cbz	r0, e6fb8 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1a>
   e6fb4:	f7ed f875 	bl	d40a2 <_ZdaPv>
   e6fb8:	4620      	mov	r0, r4
   e6fba:	210c      	movs	r1, #12
   e6fbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   e6fc0:	f000 bb0d 	b.w	e75de <_ZdlPvj>
   e6fc4:	bd10      	pop	{r4, pc}

000e6fc6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   e6fc6:	b510      	push	{r4, lr}
          _M_dispose();
   e6fc8:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   e6fca:	4604      	mov	r4, r0
          _M_dispose();
   e6fcc:	689b      	ldr	r3, [r3, #8]
   e6fce:	4798      	blx	r3
          if (--_M_weak_count == 0)
   e6fd0:	68a3      	ldr	r3, [r4, #8]
   e6fd2:	3b01      	subs	r3, #1
   e6fd4:	60a3      	str	r3, [r4, #8]
   e6fd6:	b92b      	cbnz	r3, e6fe4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   e6fd8:	6823      	ldr	r3, [r4, #0]
   e6fda:	4620      	mov	r0, r4
   e6fdc:	68db      	ldr	r3, [r3, #12]
    }
   e6fde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   e6fe2:	4718      	bx	r3
    }
   e6fe4:	bd10      	pop	{r4, pc}

000e6fe6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
   e6fe6:	b538      	push	{r3, r4, r5, lr}
   e6fe8:	680b      	ldr	r3, [r1, #0]
   e6fea:	6003      	str	r3, [r0, #0]
   e6fec:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   e6fee:	6843      	ldr	r3, [r0, #4]
   e6ff0:	429d      	cmp	r5, r3
    class __shared_ptr
   e6ff2:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   e6ff4:	d00c      	beq.n	e7010 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   e6ff6:	b115      	cbz	r5, e6ffe <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   e6ff8:	686b      	ldr	r3, [r5, #4]
   e6ffa:	3301      	adds	r3, #1
   e6ffc:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   e6ffe:	6860      	ldr	r0, [r4, #4]
   e7000:	b128      	cbz	r0, e700e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   e7002:	6843      	ldr	r3, [r0, #4]
   e7004:	3b01      	subs	r3, #1
   e7006:	6043      	str	r3, [r0, #4]
   e7008:	b90b      	cbnz	r3, e700e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   e700a:	f7ff ffdc 	bl	e6fc6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   e700e:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   e7010:	4620      	mov	r0, r4
   e7012:	bd38      	pop	{r3, r4, r5, pc}

000e7014 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
        }
    }
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   e7014:	460b      	mov	r3, r1
   e7016:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   e7018:	2200      	movs	r2, #0
   e701a:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   e701c:	e9c0 2200 	strd	r2, r2, [r0]
   e7020:	4604      	mov	r4, r0
        JSONValue() {
    if (t) {
        t_ = t;
   e7022:	6083      	str	r3, [r0, #8]
    if (t) {
   e7024:	b90b      	cbnz	r3, e702a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
        d_ = d;
    }
}
   e7026:	4620      	mov	r0, r4
   e7028:	bd10      	pop	{r4, pc}
    class shared_ptr : public __shared_ptr<_Tp>
   e702a:	f7ff ffdc 	bl	e6fe6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   e702e:	e7fa      	b.n	e7026 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000e7030 <_ZNK5spark9JSONValue4typeEv>:
        return 0.0;
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
   e7030:	6883      	ldr	r3, [r0, #8]
   e7032:	b1eb      	cbz	r3, e7070 <_ZNK5spark9JSONValue4typeEv+0x40>
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
   e7034:	781a      	ldrb	r2, [r3, #0]
   e7036:	2a03      	cmp	r2, #3
   e7038:	d81a      	bhi.n	e7070 <_ZNK5spark9JSONValue4typeEv+0x40>
   e703a:	e8df f002 	tbb	[pc, r2]
   e703e:	1704      	.short	0x1704
   e7040:	1b02      	.short	0x1b02
   e7042:	2005      	movs	r0, #5
   e7044:	4770      	bx	lr
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
   e7046:	6802      	ldr	r2, [r0, #0]
   e7048:	685b      	ldr	r3, [r3, #4]
   e704a:	6852      	ldr	r2, [r2, #4]
   e704c:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   e704e:	282d      	cmp	r0, #45	; 0x2d
   e7050:	d012      	beq.n	e7078 <_ZNK5spark9JSONValue4typeEv+0x48>
   e7052:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   e7056:	2b09      	cmp	r3, #9
   e7058:	d90e      	bls.n	e7078 <_ZNK5spark9JSONValue4typeEv+0x48>
            return JSON_TYPE_NUMBER;
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   e705a:	2874      	cmp	r0, #116	; 0x74
   e705c:	d00e      	beq.n	e707c <_ZNK5spark9JSONValue4typeEv+0x4c>
   e705e:	2866      	cmp	r0, #102	; 0x66
   e7060:	d00c      	beq.n	e707c <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   e7062:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   e7066:	4258      	negs	r0, r3
   e7068:	4158      	adcs	r0, r3
   e706a:	4770      	bx	lr
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
   e706c:	2006      	movs	r0, #6
   e706e:	4770      	bx	lr
    default:
        return JSON_TYPE_INVALID;
   e7070:	2000      	movs	r0, #0
   e7072:	4770      	bx	lr
        return JSON_TYPE_STRING;
   e7074:	2004      	movs	r0, #4
   e7076:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   e7078:	2003      	movs	r0, #3
   e707a:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   e707c:	2002      	movs	r0, #2
    }
}
   e707e:	4770      	bx	lr

000e7080 <_ZNK5spark9JSONValue6toBoolEv>:
bool spark::JSONValue::toBool() const {
   e7080:	b510      	push	{r4, lr}
   e7082:	4604      	mov	r4, r0
    switch (type()) {
   e7084:	f7ff ffd4 	bl	e7030 <_ZNK5spark9JSONValue4typeEv>
   e7088:	2803      	cmp	r0, #3
   e708a:	d00d      	beq.n	e70a8 <_ZNK5spark9JSONValue6toBoolEv+0x28>
   e708c:	2804      	cmp	r0, #4
   e708e:	d01e      	beq.n	e70ce <_ZNK5spark9JSONValue6toBoolEv+0x4e>
   e7090:	2802      	cmp	r0, #2
   e7092:	d12b      	bne.n	e70ec <_ZNK5spark9JSONValue6toBoolEv+0x6c>
        const char* const s = d_->json + t_->start;
   e7094:	6822      	ldr	r2, [r4, #0]
   e7096:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   e7098:	6852      	ldr	r2, [r2, #4]
   e709a:	685b      	ldr	r3, [r3, #4]
   e709c:	5cd0      	ldrb	r0, [r2, r3]
   e709e:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   e70a2:	4258      	negs	r0, r3
   e70a4:	4158      	adcs	r0, r3
}
   e70a6:	bd10      	pop	{r4, pc}
        const char* const s = d_->json + t_->start;
   e70a8:	68a3      	ldr	r3, [r4, #8]
   e70aa:	6822      	ldr	r2, [r4, #0]
   e70ac:	685b      	ldr	r3, [r3, #4]
   e70ae:	6854      	ldr	r4, [r2, #4]
   e70b0:	441c      	add	r4, r3
        if (*s == '\0' || strcmp(s, "false") == 0 || strcmp(s, "0") == 0 || strcmp(s, "0.0") == 0) {
   e70b2:	490f      	ldr	r1, [pc, #60]	; (e70f0 <_ZNK5spark9JSONValue6toBoolEv+0x70>)
   e70b4:	4620      	mov	r0, r4
   e70b6:	f001 fc6d 	bl	e8994 <strcmp>
   e70ba:	2800      	cmp	r0, #0
   e70bc:	d0f3      	beq.n	e70a6 <_ZNK5spark9JSONValue6toBoolEv+0x26>
   e70be:	490d      	ldr	r1, [pc, #52]	; (e70f4 <_ZNK5spark9JSONValue6toBoolEv+0x74>)
   e70c0:	4620      	mov	r0, r4
   e70c2:	f001 fc67 	bl	e8994 <strcmp>
   e70c6:	3800      	subs	r0, #0
   e70c8:	bf18      	it	ne
   e70ca:	2001      	movne	r0, #1
   e70cc:	e7eb      	b.n	e70a6 <_ZNK5spark9JSONValue6toBoolEv+0x26>
        const char* const s = d_->json + t_->start;
   e70ce:	6822      	ldr	r2, [r4, #0]
   e70d0:	68a3      	ldr	r3, [r4, #8]
   e70d2:	6852      	ldr	r2, [r2, #4]
   e70d4:	685b      	ldr	r3, [r3, #4]
        if (*s == '\0' || strcmp(s, "false") == 0 || strcmp(s, "0") == 0 || strcmp(s, "0.0") == 0) {
   e70d6:	5cd0      	ldrb	r0, [r2, r3]
        const char* const s = d_->json + t_->start;
   e70d8:	18d4      	adds	r4, r2, r3
        if (*s == '\0' || strcmp(s, "false") == 0 || strcmp(s, "0") == 0 || strcmp(s, "0.0") == 0) {
   e70da:	2800      	cmp	r0, #0
   e70dc:	d0e3      	beq.n	e70a6 <_ZNK5spark9JSONValue6toBoolEv+0x26>
   e70de:	4906      	ldr	r1, [pc, #24]	; (e70f8 <_ZNK5spark9JSONValue6toBoolEv+0x78>)
   e70e0:	4620      	mov	r0, r4
   e70e2:	f001 fc57 	bl	e8994 <strcmp>
   e70e6:	2800      	cmp	r0, #0
   e70e8:	d1e3      	bne.n	e70b2 <_ZNK5spark9JSONValue6toBoolEv+0x32>
   e70ea:	e7dc      	b.n	e70a6 <_ZNK5spark9JSONValue6toBoolEv+0x26>
    switch (type()) {
   e70ec:	2000      	movs	r0, #0
   e70ee:	e7da      	b.n	e70a6 <_ZNK5spark9JSONValue6toBoolEv+0x26>
   e70f0:	000ed5ba 	.word	0x000ed5ba
   e70f4:	000ed5b8 	.word	0x000ed5b8
   e70f8:	000ec769 	.word	0x000ec769
   e70fc:	00000000 	.word	0x00000000

000e7100 <_ZNK5spark9JSONValue8toDoubleEv>:
double spark::JSONValue::toDouble() const {
   e7100:	b510      	push	{r4, lr}
   e7102:	4604      	mov	r4, r0
    switch (type()) {
   e7104:	f7ff ff94 	bl	e7030 <_ZNK5spark9JSONValue4typeEv>
   e7108:	2802      	cmp	r0, #2
   e710a:	d00d      	beq.n	e7128 <_ZNK5spark9JSONValue8toDoubleEv+0x28>
   e710c:	1ec3      	subs	r3, r0, #3
   e710e:	b2db      	uxtb	r3, r3
   e7110:	2b01      	cmp	r3, #1
   e7112:	d810      	bhi.n	e7136 <_ZNK5spark9JSONValue8toDoubleEv+0x36>
        const char* const s = d_->json + t_->start;
   e7114:	6822      	ldr	r2, [r4, #0]
   e7116:	68a3      	ldr	r3, [r4, #8]
   e7118:	6850      	ldr	r0, [r2, #4]
   e711a:	685b      	ldr	r3, [r3, #4]
}
   e711c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtod(s, nullptr);
   e7120:	2100      	movs	r1, #0
   e7122:	4418      	add	r0, r3
   e7124:	f002 baa2 	b.w	e966c <strtod>
        const char* const s = d_->json + t_->start;
   e7128:	6822      	ldr	r2, [r4, #0]
   e712a:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   e712c:	6852      	ldr	r2, [r2, #4]
   e712e:	685b      	ldr	r3, [r3, #4]
   e7130:	5cd3      	ldrb	r3, [r2, r3]
   e7132:	2b74      	cmp	r3, #116	; 0x74
   e7134:	d002      	beq.n	e713c <_ZNK5spark9JSONValue8toDoubleEv+0x3c>
    switch (type()) {
   e7136:	ed9f 0b04 	vldr	d0, [pc, #16]	; e7148 <_ZNK5spark9JSONValue8toDoubleEv+0x48>
}
   e713a:	bd10      	pop	{r4, pc}
        return *s == 't';
   e713c:	ed9f 0b04 	vldr	d0, [pc, #16]	; e7150 <_ZNK5spark9JSONValue8toDoubleEv+0x50>
   e7140:	e7fb      	b.n	e713a <_ZNK5spark9JSONValue8toDoubleEv+0x3a>
   e7142:	bf00      	nop
   e7144:	f3af 8000 	nop.w
	...
   e7154:	3ff00000 	.word	0x3ff00000

000e7158 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj>:
        return JSONValue();
    }
    return JSONValue(d->tokens, d);
}

bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   e7158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e715c:	b086      	sub	sp, #24
   e715e:	4607      	mov	r7, r0
   e7160:	4688      	mov	r8, r1
    jsmn_parser parser;
    parser.size = sizeof(jsmn_parser);
    jsmn_init(&parser, nullptr);
   e7162:	a802      	add	r0, sp, #8
   e7164:	2100      	movs	r1, #0
    const int n = jsmn_parse(&parser, json, size, nullptr, 0, nullptr); // Get number of tokens
   e7166:	2400      	movs	r4, #0
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   e7168:	4699      	mov	r9, r3
    parser.size = sizeof(jsmn_parser);
   e716a:	2310      	movs	r3, #16
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   e716c:	4692      	mov	sl, r2
    parser.size = sizeof(jsmn_parser);
   e716e:	9302      	str	r3, [sp, #8]
    jsmn_init(&parser, nullptr);
   e7170:	f7fe fa70 	bl	e5654 <jsmn_init>
    const int n = jsmn_parse(&parser, json, size, nullptr, 0, nullptr); // Get number of tokens
   e7174:	e9cd 4400 	strd	r4, r4, [sp]
   e7178:	4623      	mov	r3, r4
   e717a:	4642      	mov	r2, r8
   e717c:	4639      	mov	r1, r7
   e717e:	a802      	add	r0, sp, #8
   e7180:	f7fe fa70 	bl	e5664 <jsmn_parse>
    if (n <= 0) {
   e7184:	1e06      	subs	r6, r0, #0
   e7186:	dd1e      	ble.n	e71c6 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x6e>
        return false; // Parsing error
    }
    std::unique_ptr<jsmntok_t[]> t(new(std::nothrow) jsmntok_t[n]);
   e7188:	4910      	ldr	r1, [pc, #64]	; (e71cc <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x74>)
   e718a:	0130      	lsls	r0, r6, #4
   e718c:	f000 fa2b 	bl	e75e6 <_ZnajRKSt9nothrow_t>
    if (!t) {
   e7190:	4605      	mov	r5, r0
   e7192:	b190      	cbz	r0, e71ba <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x62>
        return false;
    }
    jsmn_init(&parser, nullptr); // Reset parser
   e7194:	4621      	mov	r1, r4
   e7196:	a802      	add	r0, sp, #8
   e7198:	f7fe fa5c 	bl	e5654 <jsmn_init>
    if (jsmn_parse(&parser, json, size, t.get(), n, nullptr) <= 0) {
   e719c:	e9cd 6400 	strd	r6, r4, [sp]
   e71a0:	462b      	mov	r3, r5
   e71a2:	4642      	mov	r2, r8
   e71a4:	4639      	mov	r1, r7
   e71a6:	a802      	add	r0, sp, #8
   e71a8:	f7fe fa5c 	bl	e5664 <jsmn_parse>
   e71ac:	42a0      	cmp	r0, r4
   e71ae:	dd07      	ble.n	e71c0 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x68>
        return false;
    }
    *tokens = t.release();
   e71b0:	f8ca 5000 	str.w	r5, [sl]
    *count = n;
    return true;
   e71b4:	2001      	movs	r0, #1
    *count = n;
   e71b6:	f8c9 6000 	str.w	r6, [r9]
}
   e71ba:	b006      	add	sp, #24
   e71bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      typename enable_if<is_convertible<_Up(*)[], _Tp(*)[]>::value>::type
	operator()(_Up* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   e71c0:	4628      	mov	r0, r5
   e71c2:	f7ec ff6e 	bl	d40a2 <_ZdaPv>
      }
   e71c6:	4620      	mov	r0, r4
   e71c8:	e7f7      	b.n	e71ba <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x62>
   e71ca:	bf00      	nop
   e71cc:	000ed5d8 	.word	0x000ed5d8

000e71d0 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc>:
        ++t;
    }
    return true;
}

bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   e71d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    char *str = json + t->start; // Destination string
   e71d4:	6843      	ldr	r3, [r0, #4]
    const char* const end = json + t->end; // End of the source string
   e71d6:	6886      	ldr	r6, [r0, #8]
    char *str = json + t->start; // Destination string
   e71d8:	440b      	add	r3, r1
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   e71da:	4688      	mov	r8, r1
    const char* const end = json + t->end; // End of the source string
   e71dc:	440e      	add	r6, r1
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   e71de:	4607      	mov	r7, r0
    const char *s1 = str; // Beginning of an unescaped sequence
    const char *s = s1;
   e71e0:	461c      	mov	r4, r3
    const char *s1 = str; // Beginning of an unescaped sequence
   e71e2:	4619      	mov	r1, r3
                    break;
                case 'f': // Form feed
                    *str = 0x0c;
                    break;
                case 'r': // Carriage return
                    *str = 0x0d;
   e71e4:	f04f 090d 	mov.w	r9, #13
                    *str = 0x09;
   e71e8:	f04f 0a09 	mov.w	sl, #9
    while (s != end) {
   e71ec:	42b4      	cmp	r4, r6
   e71ee:	d063      	beq.n	e72b8 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xe8>
        if (*s == '\\') {
   e71f0:	4625      	mov	r5, r4
   e71f2:	f815 2b01 	ldrb.w	r2, [r5], #1
   e71f6:	2a5c      	cmp	r2, #92	; 0x5c
   e71f8:	d12b      	bne.n	e7252 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x82>
            if (s != s1) {
   e71fa:	42a1      	cmp	r1, r4
   e71fc:	d007      	beq.n	e720e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x3e>
                const size_t n = s - s1;
   e71fe:	eba4 0b01 	sub.w	fp, r4, r1
                memmove(str, s1, n); // Shift preceeding characters
   e7202:	4618      	mov	r0, r3
   e7204:	465a      	mov	r2, fp
   e7206:	f001 fb6f 	bl	e88e8 <memmove>
   e720a:	4603      	mov	r3, r0
                str += n;
   e720c:	445b      	add	r3, fp
            if (s == end) {
   e720e:	42b5      	cmp	r5, r6
   e7210:	d039      	beq.n	e7286 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
            if (*s == 'u') { // Arbitrary character, e.g. "\u001f"
   e7212:	7862      	ldrb	r2, [r4, #1]
   e7214:	2a75      	cmp	r2, #117	; 0x75
   e7216:	d12a      	bne.n	e726e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x9e>
                ++s;
   e7218:	1ca2      	adds	r2, r4, #2
                if (end - s < 4) {
   e721a:	1ab2      	subs	r2, r6, r2
   e721c:	2a03      	cmp	r2, #3
   e721e:	dd32      	ble.n	e7286 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
    const char* const end = s + size;
   e7220:	1da0      	adds	r0, r4, #6
   e7222:	f104 0e05 	add.w	lr, r4, #5
    uint32_t v = 0;
   e7226:	f04f 0c00 	mov.w	ip, #0
    while (s != end) {
   e722a:	45ae      	cmp	lr, r5
   e722c:	d053      	beq.n	e72d6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x106>
        const char c = *s;
   e722e:	f815 1f01 	ldrb.w	r1, [r5, #1]!
        if (c >= '0' && c <= '9') {
   e7232:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   e7236:	fa5f fb82 	uxtb.w	fp, r2
   e723a:	f1bb 0f09 	cmp.w	fp, #9
   e723e:	d905      	bls.n	e724c <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x7c>
        } else if (c >= 'a' && c <= 'f') {
   e7240:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
   e7244:	2a05      	cmp	r2, #5
   e7246:	d807      	bhi.n	e7258 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x88>
            n = c - 'a' + 10;
   e7248:	f1a1 0257 	sub.w	r2, r1, #87	; 0x57
        v = (v << 4) | n;
   e724c:	ea42 1c0c 	orr.w	ip, r2, ip, lsl #4
    while (s != end) {
   e7250:	e7eb      	b.n	e722a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x5a>
   e7252:	4628      	mov	r0, r5
   e7254:	4604      	mov	r4, r0
   e7256:	e7c9      	b.n	e71ec <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x1c>
        } else if (c >= 'A' && c <= 'F') {
   e7258:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
   e725c:	2a05      	cmp	r2, #5
   e725e:	d812      	bhi.n	e7286 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
            n = c - 'A' + 10;
   e7260:	f1a1 0237 	sub.w	r2, r1, #55	; 0x37
   e7264:	e7f2      	b.n	e724c <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x7c>
                    *str = u;
   e7266:	f803 cb01 	strb.w	ip, [r3], #1
                    s1 += 6; // Skip escaped sequence
   e726a:	4601      	mov	r1, r0
   e726c:	e7f2      	b.n	e7254 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>
                switch (*s) {
   e726e:	2a6e      	cmp	r2, #110	; 0x6e
   e7270:	d01c      	beq.n	e72ac <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xdc>
   e7272:	d80e      	bhi.n	e7292 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xc2>
   e7274:	2a62      	cmp	r2, #98	; 0x62
   e7276:	d013      	beq.n	e72a0 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd0>
   e7278:	d807      	bhi.n	e728a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xba>
   e727a:	2a2f      	cmp	r2, #47	; 0x2f
   e727c:	d011      	beq.n	e72a2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
   e727e:	2a5c      	cmp	r2, #92	; 0x5c
   e7280:	d00f      	beq.n	e72a2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
   e7282:	2a22      	cmp	r2, #34	; 0x22
   e7284:	d00d      	beq.n	e72a2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                return false; // Unexpected end of string
   e7286:	2000      	movs	r0, #0
   e7288:	e023      	b.n	e72d2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x102>
                switch (*s) {
   e728a:	2a66      	cmp	r2, #102	; 0x66
   e728c:	d1fb      	bne.n	e7286 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
                    *str = 0x0c;
   e728e:	220c      	movs	r2, #12
   e7290:	e007      	b.n	e72a2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                switch (*s) {
   e7292:	2a72      	cmp	r2, #114	; 0x72
   e7294:	d00d      	beq.n	e72b2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xe2>
   e7296:	2a74      	cmp	r2, #116	; 0x74
   e7298:	d1f5      	bne.n	e7286 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
                    *str = 0x09;
   e729a:	f883 a000 	strb.w	sl, [r3]
                    break;
   e729e:	e001      	b.n	e72a4 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd4>
                    *str = 0x08;
   e72a0:	2208      	movs	r2, #8
   e72a2:	701a      	strb	r2, [r3, #0]
                    break;
                default:
                    return false; // Invalid escaped sequence
                }
                ++str;
                ++s;
   e72a4:	1ca1      	adds	r1, r4, #2
                ++str;
   e72a6:	3301      	adds	r3, #1
                ++s;
   e72a8:	4608      	mov	r0, r1
   e72aa:	e7d3      	b.n	e7254 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>
                    *str = 0x0a;
   e72ac:	f04f 020a 	mov.w	r2, #10
   e72b0:	e7f7      	b.n	e72a2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                    *str = 0x0d;
   e72b2:	f883 9000 	strb.w	r9, [r3]
                    break;
   e72b6:	e7f5      	b.n	e72a4 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd4>
            }
        } else {
            ++s;
        }
    }
    if (s != s1) {
   e72b8:	42a1      	cmp	r1, r4
   e72ba:	d006      	beq.n	e72ca <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xfa>
        const size_t n = s - s1;
   e72bc:	1a64      	subs	r4, r4, r1
        memmove(str, s1, n); // Shift remaining characters
   e72be:	4618      	mov	r0, r3
   e72c0:	4622      	mov	r2, r4
   e72c2:	f001 fb11 	bl	e88e8 <memmove>
   e72c6:	4603      	mov	r3, r0
        str += n;
   e72c8:	4423      	add	r3, r4
    }
    t->end = str - json; // Update string length
   e72ca:	eba3 0308 	sub.w	r3, r3, r8
   e72ce:	60bb      	str	r3, [r7, #8]
    return true;
   e72d0:	2001      	movs	r0, #1
}
   e72d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if (u <= 0x7f) { // Processing only code points within the basic latin block
   e72d6:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
   e72da:	d9c4      	bls.n	e7266 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x96>
   e72dc:	4621      	mov	r1, r4
   e72de:	e7b9      	b.n	e7254 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>

000e72e0 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc>:
bool spark::JSONValue::stringize(jsmntok_t *t, size_t count, char *json) {
   e72e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e72e2:	4604      	mov	r4, r0
   e72e4:	4615      	mov	r5, r2
    const jsmntok_t* const end = t + count;
   e72e6:	eb00 1601 	add.w	r6, r0, r1, lsl #4
            json[t->end] = '\0';
   e72ea:	2700      	movs	r7, #0
    while (t != end) {
   e72ec:	42b4      	cmp	r4, r6
   e72ee:	d010      	beq.n	e7312 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x32>
        if (t->type == JSMN_STRING) {
   e72f0:	7823      	ldrb	r3, [r4, #0]
   e72f2:	2b03      	cmp	r3, #3
   e72f4:	d108      	bne.n	e7308 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x28>
            if (!unescape(t, json)) {
   e72f6:	4629      	mov	r1, r5
   e72f8:	4620      	mov	r0, r4
   e72fa:	f7ff ff69 	bl	e71d0 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc>
   e72fe:	b148      	cbz	r0, e7314 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x34>
            json[t->end] = '\0';
   e7300:	68a3      	ldr	r3, [r4, #8]
   e7302:	54ef      	strb	r7, [r5, r3]
        ++t;
   e7304:	3410      	adds	r4, #16
    while (t != end) {
   e7306:	e7f1      	b.n	e72ec <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0xc>
        } else if (t->type == JSMN_PRIMITIVE) {
   e7308:	2b00      	cmp	r3, #0
   e730a:	d1fb      	bne.n	e7304 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x24>
            json[t->end] = '\0';
   e730c:	68a2      	ldr	r2, [r4, #8]
   e730e:	54ab      	strb	r3, [r5, r2]
   e7310:	e7f8      	b.n	e7304 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x24>
    return true;
   e7312:	2001      	movs	r0, #1
}
   e7314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000e7318 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

// spark::JSONString
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   e7318:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   e731a:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   e731c:	e9c0 3300 	strd	r3, r3, [r0]
   e7320:	4604      	mov	r4, r0
}

// spark::JSONString
inline spark::JSONString::JSONString() :
        s_(""),
        n_(0) {
   e7322:	480e      	ldr	r0, [pc, #56]	; (e735c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   e7324:	e9c4 0302 	strd	r0, r3, [r4, #8]
        JSONString() {
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   e7328:	b1a9      	cbz	r1, e7356 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   e732a:	780b      	ldrb	r3, [r1, #0]
   e732c:	2b03      	cmp	r3, #3
   e732e:	d006      	beq.n	e733e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   e7330:	b98b      	cbnz	r3, e7356 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   e7332:	6813      	ldr	r3, [r2, #0]
   e7334:	6858      	ldr	r0, [r3, #4]
   e7336:	684b      	ldr	r3, [r1, #4]
   e7338:	5cc3      	ldrb	r3, [r0, r3]
   e733a:	2b6e      	cmp	r3, #110	; 0x6e
   e733c:	d007      	beq.n	e734e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   e733e:	6813      	ldr	r3, [r2, #0]
   e7340:	684d      	ldr	r5, [r1, #4]
   e7342:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   e7344:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   e7346:	4428      	add	r0, r5
            n_ = t->end - t->start;
   e7348:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   e734a:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   e734c:	60e3      	str	r3, [r4, #12]
   e734e:	4611      	mov	r1, r2
   e7350:	4620      	mov	r0, r4
   e7352:	f7ff fe48 	bl	e6fe6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
        }
        d_ = d;
    }
}
   e7356:	4620      	mov	r0, r4
   e7358:	bd38      	pop	{r3, r4, r5, pc}
   e735a:	bf00      	nop
   e735c:	000eb611 	.word	0x000eb611

000e7360 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
bool spark::JSONString::operator==(const JSONString &str) const {
    return n_ == str.n_ && strncmp(s_, str.s_, n_) == 0;
}

// spark::JSONObjectIterator
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   e7360:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   e7362:	2500      	movs	r5, #0
   e7364:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   e7366:	e9c0 5500 	strd	r5, r5, [r0]
// spark::JSONObjectIterator
inline spark::JSONObjectIterator::JSONObjectIterator() :
        t_(nullptr),
        k_(nullptr),
        v_(nullptr),
        n_(0) {
   e736a:	e9c0 5502 	strd	r5, r5, [r0, #8]
   e736e:	e9c0 5504 	strd	r5, r5, [r0, #16]
   e7372:	4604      	mov	r4, r0
   e7374:	4611      	mov	r1, r2
        JSONObjectIterator() {
    if (t && t->type == JSMN_OBJECT) {
   e7376:	b14b      	cbz	r3, e738c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   e7378:	781a      	ldrb	r2, [r3, #0]
   e737a:	2a01      	cmp	r2, #1
   e737c:	d106      	bne.n	e738c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   e737e:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   e7382:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   e7384:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   e7386:	6143      	str	r3, [r0, #20]
   e7388:	f7ff fe2d 	bl	e6fe6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
        d_ = d;
    }
}
   e738c:	4620      	mov	r0, r4
   e738e:	bd38      	pop	{r3, r4, r5, pc}

000e7390 <_ZN5spark18JSONObjectIterator4nextEv>:

bool spark::JSONObjectIterator::next() {
   e7390:	b510      	push	{r4, lr}
    if (!n_) {
   e7392:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   e7394:	4604      	mov	r4, r0
    if (!n_) {
   e7396:	b163      	cbz	r3, e73b2 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
        return false;
    }
    k_ = t_; // Name
   e7398:	6880      	ldr	r0, [r0, #8]
   e739a:	60e0      	str	r0, [r4, #12]
    ++t_;
    v_ = t_; // Value
    --n_;
   e739c:	3b01      	subs	r3, #1
    ++t_;
   e739e:	3010      	adds	r0, #16
   e73a0:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   e73a2:	6120      	str	r0, [r4, #16]
    --n_;
   e73a4:	6163      	str	r3, [r4, #20]
    if (n_) {
   e73a6:	b113      	cbz	r3, e73ae <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   e73a8:	f7ff fdd4 	bl	e6f54 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   e73ac:	60a0      	str	r0, [r4, #8]
    }
    return true;
   e73ae:	2001      	movs	r0, #1
   e73b0:	e000      	b.n	e73b4 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   e73b2:	4618      	mov	r0, r3
}
   e73b4:	bd10      	pop	{r4, pc}

000e73b6 <_ZN5spark17JSONArrayIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

// spark::JSONArrayIterator
spark::JSONArrayIterator::JSONArrayIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   e73b6:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   e73b8:	2500      	movs	r5, #0
   e73ba:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   e73bc:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   e73c0:	e9c0 5502 	strd	r5, r5, [r0, #8]
   e73c4:	4604      	mov	r4, r0
   e73c6:	4611      	mov	r1, r2
   e73c8:	6105      	str	r5, [r0, #16]
        JSONArrayIterator() {
    if (t && t->type == JSMN_ARRAY) {
   e73ca:	b14b      	cbz	r3, e73e0 <_ZN5spark17JSONArrayIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2a>
   e73cc:	781a      	ldrb	r2, [r3, #0]
   e73ce:	2a02      	cmp	r2, #2
   e73d0:	d106      	bne.n	e73e0 <_ZN5spark17JSONArrayIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2a>
        t_ = t + 1; // First element
   e73d2:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of elements
   e73d6:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First element
   e73d8:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of elements
   e73da:	6103      	str	r3, [r0, #16]
   e73dc:	f7ff fe03 	bl	e6fe6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
        d_ = d;
    }
}
   e73e0:	4620      	mov	r0, r4
   e73e2:	bd38      	pop	{r3, r4, r5, pc}

000e73e4 <_ZN5spark17JSONArrayIterator4nextEv>:

bool spark::JSONArrayIterator::next() {
   e73e4:	b510      	push	{r4, lr}
    if (!n_) {
   e73e6:	6903      	ldr	r3, [r0, #16]
bool spark::JSONArrayIterator::next() {
   e73e8:	4604      	mov	r4, r0
    if (!n_) {
   e73ea:	b14b      	cbz	r3, e7400 <_ZN5spark17JSONArrayIterator4nextEv+0x1c>
        return false;
    }
    v_ = t_;
   e73ec:	6880      	ldr	r0, [r0, #8]
   e73ee:	60e0      	str	r0, [r4, #12]
    --n_;
   e73f0:	3b01      	subs	r3, #1
   e73f2:	6123      	str	r3, [r4, #16]
    if (n_) {
   e73f4:	b113      	cbz	r3, e73fc <_ZN5spark17JSONArrayIterator4nextEv+0x18>
        t_ = skipToken(t_);
   e73f6:	f7ff fdad 	bl	e6f54 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   e73fa:	60a0      	str	r0, [r4, #8]
    }
    return true;
   e73fc:	2001      	movs	r0, #1
   e73fe:	e000      	b.n	e7402 <_ZN5spark17JSONArrayIterator4nextEv+0x1e>
        return false;
   e7400:	4618      	mov	r0, r3
}
   e7402:	bd10      	pop	{r4, pc}

000e7404 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   e7404:	b538      	push	{r3, r4, r5, lr}
   e7406:	2300      	movs	r3, #0
   e7408:	4604      	mov	r4, r0
   e740a:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   e740c:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   e740e:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   e7410:	f7ec fe41 	bl	d4096 <_Znwj>
   e7414:	b128      	cbz	r0, e7422 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   e7416:	2301      	movs	r3, #1
   e7418:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   e741c:	4b02      	ldr	r3, [pc, #8]	; (e7428 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_+0x24>)
   e741e:	6003      	str	r3, [r0, #0]
   e7420:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   e7422:	6020      	str	r0, [r4, #0]
	}
   e7424:	4620      	mov	r0, r4
   e7426:	bd38      	pop	{r3, r4, r5, pc}
   e7428:	000ed5c4 	.word	0x000ed5c4

000e742c <_ZN5spark9JSONValue9parseCopyEPKcj>:
spark::JSONValue spark::JSONValue::parseCopy(const char *json, size_t size) {
   e742c:	b5f0      	push	{r4, r5, r6, r7, lr}
   e742e:	4604      	mov	r4, r0
   e7430:	b087      	sub	sp, #28
   e7432:	460e      	mov	r6, r1
    detail::JSONDataPtr d(new(std::nothrow) detail::JSONData);
   e7434:	200c      	movs	r0, #12
   e7436:	4927      	ldr	r1, [pc, #156]	; (e74d4 <_ZN5spark9JSONValue9parseCopyEPKcj+0xa8>)
spark::JSONValue spark::JSONValue::parseCopy(const char *json, size_t size) {
   e7438:	4615      	mov	r5, r2
    detail::JSONDataPtr d(new(std::nothrow) detail::JSONData);
   e743a:	f000 f8d2 	bl	e75e2 <_ZnwjRKSt9nothrow_t>
   e743e:	4601      	mov	r1, r0
   e7440:	b118      	cbz	r0, e744a <_ZN5spark9JSONValue9parseCopyEPKcj+0x1e>
            freeJson(false) {
   e7442:	2300      	movs	r3, #0
   e7444:	e9c0 3300 	strd	r3, r3, [r0]
   e7448:	7203      	strb	r3, [r0, #8]
	: __shared_count(__p)
   e744a:	a803      	add	r0, sp, #12
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   e744c:	9102      	str	r1, [sp, #8]
	: __shared_count(__p)
   e744e:	f7ff ffd9 	bl	e7404 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_>
    if (!d) {
   e7452:	9a02      	ldr	r2, [sp, #8]
   e7454:	b942      	cbnz	r2, e7468 <_ZN5spark9JSONValue9parseCopyEPKcj+0x3c>
      constexpr __shared_count() noexcept : _M_pi(0)
   e7456:	e9c4 2200 	strd	r2, r2, [r4]
        t_(nullptr) {
   e745a:	60a2      	str	r2, [r4, #8]
      ~__shared_ptr() = default;
   e745c:	a803      	add	r0, sp, #12
   e745e:	f7ed fde9 	bl	d5034 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   e7462:	4620      	mov	r0, r4
   e7464:	b007      	add	sp, #28
   e7466:	bdf0      	pop	{r4, r5, r6, r7, pc}
    size_t tokenCount = 0;
   e7468:	2300      	movs	r3, #0
   e746a:	9301      	str	r3, [sp, #4]
    if (!tokenize(json, size, &d->tokens, &tokenCount)) {
   e746c:	4629      	mov	r1, r5
   e746e:	ab01      	add	r3, sp, #4
   e7470:	4630      	mov	r0, r6
   e7472:	f7ff fe71 	bl	e7158 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj>
   e7476:	b918      	cbnz	r0, e7480 <_ZN5spark9JSONValue9parseCopyEPKcj+0x54>
      constexpr __shared_count() noexcept : _M_pi(0)
   e7478:	e9c4 0000 	strd	r0, r0, [r4]
   e747c:	60a0      	str	r0, [r4, #8]
}
   e747e:	e7ed      	b.n	e745c <_ZN5spark9JSONValue9parseCopyEPKcj+0x30>
    d->json = new(std::nothrow) char[size + 1];
   e7480:	4914      	ldr	r1, [pc, #80]	; (e74d4 <_ZN5spark9JSONValue9parseCopyEPKcj+0xa8>)
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   e7482:	9f02      	ldr	r7, [sp, #8]
   e7484:	1c68      	adds	r0, r5, #1
   e7486:	f000 f8ae 	bl	e75e6 <_ZnajRKSt9nothrow_t>
    if (!d->json) {
   e748a:	9b02      	ldr	r3, [sp, #8]
    d->json = new(std::nothrow) char[size + 1];
   e748c:	6078      	str	r0, [r7, #4]
    if (!d->json) {
   e748e:	6858      	ldr	r0, [r3, #4]
   e7490:	2800      	cmp	r0, #0
   e7492:	d0f1      	beq.n	e7478 <_ZN5spark9JSONValue9parseCopyEPKcj+0x4c>
    memcpy(d->json, json, size); // TODO: Copy only token data
   e7494:	462a      	mov	r2, r5
   e7496:	4631      	mov	r1, r6
   e7498:	f001 fa18 	bl	e88cc <memcpy>
   e749c:	9b02      	ldr	r3, [sp, #8]
    if (!stringize(d->tokens, tokenCount, d->json)) {
   e749e:	9901      	ldr	r1, [sp, #4]
   e74a0:	6818      	ldr	r0, [r3, #0]
    d->freeJson = true;
   e74a2:	2201      	movs	r2, #1
   e74a4:	721a      	strb	r2, [r3, #8]
    if (!stringize(d->tokens, tokenCount, d->json)) {
   e74a6:	685a      	ldr	r2, [r3, #4]
   e74a8:	f7ff ff1a 	bl	e72e0 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc>
   e74ac:	2800      	cmp	r0, #0
   e74ae:	d0e3      	beq.n	e7478 <_ZN5spark9JSONValue9parseCopyEPKcj+0x4c>
   e74b0:	9b02      	ldr	r3, [sp, #8]
    return JSONValue(d->tokens, d);
   e74b2:	6819      	ldr	r1, [r3, #0]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   e74b4:	9304      	str	r3, [sp, #16]
      : _M_pi(__r._M_pi)
   e74b6:	9b03      	ldr	r3, [sp, #12]
   e74b8:	9305      	str	r3, [sp, #20]
	if (_M_pi != 0)
   e74ba:	b113      	cbz	r3, e74c2 <_ZN5spark9JSONValue9parseCopyEPKcj+0x96>
    { ++_M_use_count; }
   e74bc:	685a      	ldr	r2, [r3, #4]
   e74be:	3201      	adds	r2, #1
   e74c0:	605a      	str	r2, [r3, #4]
   e74c2:	aa04      	add	r2, sp, #16
   e74c4:	4620      	mov	r0, r4
   e74c6:	f7ff fda5 	bl	e7014 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   e74ca:	a805      	add	r0, sp, #20
   e74cc:	f7ed fdb2 	bl	d5034 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   e74d0:	e7c4      	b.n	e745c <_ZN5spark9JSONValue9parseCopyEPKcj+0x30>
   e74d2:	bf00      	nop
   e74d4:	000ed5d8 	.word	0x000ed5d8

000e74d8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   e74d8:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   e74da:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   e74dc:	d902      	bls.n	e74e4 <pinAvailable+0xc>
    return false;
   e74de:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   e74e0:	b002      	add	sp, #8
   e74e2:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   e74e4:	f1a0 030b 	sub.w	r3, r0, #11
   e74e8:	2b02      	cmp	r3, #2
   e74ea:	d81a      	bhi.n	e7522 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   e74ec:	4c17      	ldr	r4, [pc, #92]	; (e754c <pinAvailable+0x74>)
   e74ee:	7821      	ldrb	r1, [r4, #0]
   e74f0:	f3bf 8f5b 	dmb	ish
   e74f4:	f011 0101 	ands.w	r1, r1, #1
   e74f8:	d10b      	bne.n	e7512 <pinAvailable+0x3a>
   e74fa:	4620      	mov	r0, r4
   e74fc:	9101      	str	r1, [sp, #4]
   e74fe:	f7ec fddd 	bl	d40bc <__cxa_guard_acquire>
   e7502:	9901      	ldr	r1, [sp, #4]
   e7504:	b128      	cbz	r0, e7512 <pinAvailable+0x3a>
   e7506:	4812      	ldr	r0, [pc, #72]	; (e7550 <pinAvailable+0x78>)
   e7508:	f7fe f9d8 	bl	e58bc <_ZN8SPIClassC1E19hal_spi_interface_t>
   e750c:	4620      	mov	r0, r4
   e750e:	f7ec fdda 	bl	d40c6 <__cxa_guard_release>
   e7512:	4b0f      	ldr	r3, [pc, #60]	; (e7550 <pinAvailable+0x78>)
   e7514:	7818      	ldrb	r0, [r3, #0]
   e7516:	f7fe f845 	bl	e55a4 <hal_spi_is_enabled>
   e751a:	2800      	cmp	r0, #0
   e751c:	d1df      	bne.n	e74de <pinAvailable+0x6>
  return true; // 'pin' is available
   e751e:	2001      	movs	r0, #1
   e7520:	e7de      	b.n	e74e0 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   e7522:	2801      	cmp	r0, #1
   e7524:	d809      	bhi.n	e753a <pinAvailable+0x62>
   e7526:	f000 f82d 	bl	e7584 <_Z19__fetch_global_Wirev>
   e752a:	2100      	movs	r1, #0
   e752c:	7c00      	ldrb	r0, [r0, #16]
   e752e:	f7fd ffc9 	bl	e54c4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   e7532:	f080 0001 	eor.w	r0, r0, #1
   e7536:	b2c0      	uxtb	r0, r0
   e7538:	e7d2      	b.n	e74e0 <pinAvailable+0x8>
   e753a:	3809      	subs	r0, #9
   e753c:	2801      	cmp	r0, #1
   e753e:	d8ee      	bhi.n	e751e <pinAvailable+0x46>
   e7540:	f7ff f8fc 	bl	e673c <_Z22__fetch_global_Serial1v>
   e7544:	7c00      	ldrb	r0, [r0, #16]
   e7546:	f7fd ff85 	bl	e5454 <hal_usart_is_enabled>
   e754a:	e7f2      	b.n	e7532 <pinAvailable+0x5a>
   e754c:	2003e7c8 	.word	0x2003e7c8
   e7550:	2003e7cc 	.word	0x2003e7cc

000e7554 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   e7554:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   e7556:	2300      	movs	r3, #0
   e7558:	2520      	movs	r5, #32
   e755a:	8043      	strh	r3, [r0, #2]
   e755c:	2314      	movs	r3, #20
{
   e755e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   e7560:	8003      	strh	r3, [r0, #0]
   e7562:	6085      	str	r5, [r0, #8]
   e7564:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   e7566:	4906      	ldr	r1, [pc, #24]	; (e7580 <_Z17acquireWireBufferv+0x2c>)
   e7568:	4628      	mov	r0, r5
   e756a:	f000 f83c 	bl	e75e6 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   e756e:	4904      	ldr	r1, [pc, #16]	; (e7580 <_Z17acquireWireBufferv+0x2c>)
	};
   e7570:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   e7572:	4628      	mov	r0, r5
   e7574:	f000 f837 	bl	e75e6 <_ZnajRKSt9nothrow_t>
	};
   e7578:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   e757a:	4620      	mov	r0, r4
   e757c:	bd38      	pop	{r3, r4, r5, pc}
   e757e:	bf00      	nop
   e7580:	000ed5d8 	.word	0x000ed5d8

000e7584 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   e7584:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   e7586:	4d0f      	ldr	r5, [pc, #60]	; (e75c4 <_Z19__fetch_global_Wirev+0x40>)
   e7588:	7829      	ldrb	r1, [r5, #0]
   e758a:	f3bf 8f5b 	dmb	ish
   e758e:	f011 0401 	ands.w	r4, r1, #1
{
   e7592:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   e7594:	d113      	bne.n	e75be <_Z19__fetch_global_Wirev+0x3a>
   e7596:	4628      	mov	r0, r5
   e7598:	f7ec fd90 	bl	d40bc <__cxa_guard_acquire>
   e759c:	b178      	cbz	r0, e75be <_Z19__fetch_global_Wirev+0x3a>
   e759e:	a801      	add	r0, sp, #4
   e75a0:	f7ff ffd8 	bl	e7554 <_Z17acquireWireBufferv>
   e75a4:	aa01      	add	r2, sp, #4
   e75a6:	4621      	mov	r1, r4
   e75a8:	4807      	ldr	r0, [pc, #28]	; (e75c8 <_Z19__fetch_global_Wirev+0x44>)
   e75aa:	f7ff f91d 	bl	e67e8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   e75ae:	4628      	mov	r0, r5
   e75b0:	f7ec fd89 	bl	d40c6 <__cxa_guard_release>
   e75b4:	4a05      	ldr	r2, [pc, #20]	; (e75cc <_Z19__fetch_global_Wirev+0x48>)
   e75b6:	4906      	ldr	r1, [pc, #24]	; (e75d0 <_Z19__fetch_global_Wirev+0x4c>)
   e75b8:	4803      	ldr	r0, [pc, #12]	; (e75c8 <_Z19__fetch_global_Wirev+0x44>)
   e75ba:	f000 f80b 	bl	e75d4 <__aeabi_atexit>
	return wire;
}
   e75be:	4802      	ldr	r0, [pc, #8]	; (e75c8 <_Z19__fetch_global_Wirev+0x44>)
   e75c0:	b007      	add	sp, #28
   e75c2:	bd30      	pop	{r4, r5, pc}
   e75c4:	2003e7d8 	.word	0x2003e7d8
   e75c8:	2003e7dc 	.word	0x2003e7dc
   e75cc:	2003ae68 	.word	0x2003ae68
   e75d0:	000e6791 	.word	0x000e6791

000e75d4 <__aeabi_atexit>:
   e75d4:	460b      	mov	r3, r1
   e75d6:	4601      	mov	r1, r0
   e75d8:	4618      	mov	r0, r3
   e75da:	f001 b905 	b.w	e87e8 <__cxa_atexit>

000e75de <_ZdlPvj>:
   e75de:	f7ec bd5e 	b.w	d409e <_ZdlPv>

000e75e2 <_ZnwjRKSt9nothrow_t>:
   e75e2:	f7ec bd58 	b.w	d4096 <_Znwj>

000e75e6 <_ZnajRKSt9nothrow_t>:
   e75e6:	f7ec bd58 	b.w	d409a <_Znaj>

000e75ea <_ZSt17__throw_bad_allocv>:
   e75ea:	b508      	push	{r3, lr}
   e75ec:	f7fe f908 	bl	e5800 <abort>

000e75f0 <_ZSt19__throw_logic_errorPKc>:
   e75f0:	b508      	push	{r3, lr}
   e75f2:	f7fe f905 	bl	e5800 <abort>

000e75f6 <_ZSt20__throw_length_errorPKc>:
   e75f6:	b508      	push	{r3, lr}
   e75f8:	f7fe f902 	bl	e5800 <abort>

000e75fc <_ZSt24__throw_out_of_range_fmtPKcz>:
   e75fc:	b40f      	push	{r0, r1, r2, r3}
   e75fe:	b580      	push	{r7, lr}
   e7600:	b084      	sub	sp, #16
   e7602:	af00      	add	r7, sp, #0
   e7604:	f107 0418 	add.w	r4, r7, #24
   e7608:	f854 2b04 	ldr.w	r2, [r4], #4
   e760c:	607a      	str	r2, [r7, #4]
   e760e:	4610      	mov	r0, r2
   e7610:	f001 f9d2 	bl	e89b8 <strlen>
   e7614:	f200 2307 	addw	r3, r0, #519	; 0x207
   e7618:	f023 0307 	bic.w	r3, r3, #7
   e761c:	ebad 0d03 	sub.w	sp, sp, r3
   e7620:	f500 7100 	add.w	r1, r0, #512	; 0x200
   e7624:	687a      	ldr	r2, [r7, #4]
   e7626:	60fc      	str	r4, [r7, #12]
   e7628:	4623      	mov	r3, r4
   e762a:	4668      	mov	r0, sp
   e762c:	f000 f85a 	bl	e76e4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
   e7630:	f7fe f8e6 	bl	e5800 <abort>

000e7634 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   e7634:	4901      	ldr	r1, [pc, #4]	; (e763c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   e7636:	f000 baa5 	b.w	e7b84 <_ZNKSt9type_infoeqERKS_>
   e763a:	bf00      	nop
   e763c:	000ed5f4 	.word	0x000ed5f4

000e7640 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
   e7640:	b580      	push	{r7, lr}
   e7642:	b09c      	sub	sp, #112	; 0x70
   e7644:	4606      	mov	r6, r0
   e7646:	af00      	add	r7, sp, #0
   e7648:	460c      	mov	r4, r1
   e764a:	1ba4      	subs	r4, r4, r6
   e764c:	490e      	ldr	r1, [pc, #56]	; (e7688 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
   e764e:	2269      	movs	r2, #105	; 0x69
   e7650:	1d38      	adds	r0, r7, #4
   e7652:	f001 f93b 	bl	e88cc <memcpy>
   e7656:	f104 0370 	add.w	r3, r4, #112	; 0x70
   e765a:	f023 0307 	bic.w	r3, r3, #7
   e765e:	ebad 0d03 	sub.w	sp, sp, r3
   e7662:	466d      	mov	r5, sp
   e7664:	2268      	movs	r2, #104	; 0x68
   e7666:	1d39      	adds	r1, r7, #4
   e7668:	4628      	mov	r0, r5
   e766a:	f001 f92f 	bl	e88cc <memcpy>
   e766e:	4622      	mov	r2, r4
   e7670:	4631      	mov	r1, r6
   e7672:	f105 0068 	add.w	r0, r5, #104	; 0x68
   e7676:	442c      	add	r4, r5
   e7678:	f001 f928 	bl	e88cc <memcpy>
   e767c:	2300      	movs	r3, #0
   e767e:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
   e7682:	4628      	mov	r0, r5
   e7684:	f7ff ffb4 	bl	e75f0 <_ZSt19__throw_logic_errorPKc>
   e7688:	000ed5fc 	.word	0x000ed5fc

000e768c <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
   e768c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e7690:	af00      	add	r7, sp, #0
   e7692:	b084      	sub	sp, #16
   e7694:	466d      	mov	r5, sp
   e7696:	f105 040c 	add.w	r4, r5, #12
   e769a:	f8df 8044 	ldr.w	r8, [pc, #68]	; e76e0 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
   e769e:	4623      	mov	r3, r4
   e76a0:	f04f 0c0a 	mov.w	ip, #10
   e76a4:	fbb2 f6fc 	udiv	r6, r2, ip
   e76a8:	fb0c 2e16 	mls	lr, ip, r6, r2
   e76ac:	f818 e00e 	ldrb.w	lr, [r8, lr]
   e76b0:	f803 ed01 	strb.w	lr, [r3, #-1]!
   e76b4:	4696      	mov	lr, r2
   e76b6:	f1be 0f09 	cmp.w	lr, #9
   e76ba:	4632      	mov	r2, r6
   e76bc:	d8f2      	bhi.n	e76a4 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
   e76be:	1ae4      	subs	r4, r4, r3
   e76c0:	428c      	cmp	r4, r1
   e76c2:	d809      	bhi.n	e76d8 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
   e76c4:	f1c4 010c 	rsb	r1, r4, #12
   e76c8:	4622      	mov	r2, r4
   e76ca:	4429      	add	r1, r5
   e76cc:	f001 f8fe 	bl	e88cc <memcpy>
   e76d0:	4620      	mov	r0, r4
   e76d2:	46bd      	mov	sp, r7
   e76d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   e76d8:	f04f 34ff 	mov.w	r4, #4294967295
   e76dc:	e7f8      	b.n	e76d0 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
   e76de:	bf00      	nop
   e76e0:	000ed665 	.word	0x000ed665

000e76e4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
   e76e4:	3901      	subs	r1, #1
   e76e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e76ea:	4607      	mov	r7, r0
   e76ec:	4615      	mov	r5, r2
   e76ee:	eb00 0801 	add.w	r8, r0, r1
   e76f2:	4604      	mov	r4, r0
   e76f4:	782a      	ldrb	r2, [r5, #0]
   e76f6:	b362      	cbz	r2, e7752 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   e76f8:	4544      	cmp	r4, r8
   e76fa:	d22e      	bcs.n	e775a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
   e76fc:	2a25      	cmp	r2, #37	; 0x25
   e76fe:	d107      	bne.n	e7710 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   e7700:	786a      	ldrb	r2, [r5, #1]
   e7702:	2a73      	cmp	r2, #115	; 0x73
   e7704:	d009      	beq.n	e771a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
   e7706:	2a7a      	cmp	r2, #122	; 0x7a
   e7708:	d012      	beq.n	e7730 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
   e770a:	2a25      	cmp	r2, #37	; 0x25
   e770c:	d100      	bne.n	e7710 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   e770e:	3501      	adds	r5, #1
   e7710:	f815 2b01 	ldrb.w	r2, [r5], #1
   e7714:	f804 2b01 	strb.w	r2, [r4], #1
   e7718:	e7ec      	b.n	e76f4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   e771a:	f853 2b04 	ldr.w	r2, [r3], #4
   e771e:	3a01      	subs	r2, #1
   e7720:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   e7724:	b1e9      	cbz	r1, e7762 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7e>
   e7726:	4544      	cmp	r4, r8
   e7728:	d017      	beq.n	e775a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
   e772a:	f804 1b01 	strb.w	r1, [r4], #1
   e772e:	e7f7      	b.n	e7720 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
   e7730:	78aa      	ldrb	r2, [r5, #2]
   e7732:	2a75      	cmp	r2, #117	; 0x75
   e7734:	d1ec      	bne.n	e7710 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   e7736:	461e      	mov	r6, r3
   e7738:	eba8 0104 	sub.w	r1, r8, r4
   e773c:	f856 2b04 	ldr.w	r2, [r6], #4
   e7740:	4620      	mov	r0, r4
   e7742:	f7ff ffa3 	bl	e768c <_ZN9__gnu_cxx15__concat_size_tEPcjj>
   e7746:	2800      	cmp	r0, #0
   e7748:	dd07      	ble.n	e775a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
   e774a:	4404      	add	r4, r0
   e774c:	3503      	adds	r5, #3
   e774e:	4633      	mov	r3, r6
   e7750:	e7d0      	b.n	e76f4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   e7752:	7022      	strb	r2, [r4, #0]
   e7754:	1be0      	subs	r0, r4, r7
   e7756:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   e775a:	4621      	mov	r1, r4
   e775c:	4638      	mov	r0, r7
   e775e:	f7ff ff6f 	bl	e7640 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
   e7762:	3502      	adds	r5, #2
   e7764:	e7c6      	b.n	e76f4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>

000e7766 <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
   e7766:	b10a      	cbz	r2, e776c <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
   e7768:	f001 b8a2 	b.w	e88b0 <memcmp>
   e776c:	4610      	mov	r0, r2
   e776e:	4770      	bx	lr

000e7770 <_ZNSt11char_traitsIcE4findEPKcjRS1_>:
   e7770:	4613      	mov	r3, r2
   e7772:	460a      	mov	r2, r1
   e7774:	b111      	cbz	r1, e777c <_ZNSt11char_traitsIcE4findEPKcjRS1_+0xc>
   e7776:	7819      	ldrb	r1, [r3, #0]
   e7778:	f001 b84a 	b.w	e8810 <memchr>
   e777c:	4608      	mov	r0, r1
   e777e:	4770      	bx	lr

000e7780 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
   e7780:	b10a      	cbz	r2, e7786 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
   e7782:	f001 b8a3 	b.w	e88cc <memcpy>
   e7786:	4770      	bx	lr

000e7788 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
   e7788:	b508      	push	{r3, lr}
   e778a:	680b      	ldr	r3, [r1, #0]
   e778c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   e7790:	d302      	bcc.n	e7798 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
   e7792:	480d      	ldr	r0, [pc, #52]	; (e77c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
   e7794:	f7ff ff2f 	bl	e75f6 <_ZSt20__throw_length_errorPKc>
   e7798:	4293      	cmp	r3, r2
   e779a:	d90b      	bls.n	e77b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   e779c:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
   e77a0:	ea4f 0042 	mov.w	r0, r2, lsl #1
   e77a4:	d206      	bcs.n	e77b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   e77a6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
   e77aa:	bf2a      	itet	cs
   e77ac:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
   e77b0:	6008      	strcc	r0, [r1, #0]
   e77b2:	600b      	strcs	r3, [r1, #0]
   e77b4:	6808      	ldr	r0, [r1, #0]
   e77b6:	3001      	adds	r0, #1
   e77b8:	d501      	bpl.n	e77be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
   e77ba:	f7ff ff16 	bl	e75ea <_ZSt17__throw_bad_allocv>
   e77be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   e77c2:	f7ec bc68 	b.w	d4096 <_Znwj>
   e77c6:	bf00      	nop
   e77c8:	000ed670 	.word	0x000ed670

000e77cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
   e77cc:	f850 3b08 	ldr.w	r3, [r0], #8
   e77d0:	4283      	cmp	r3, r0
   e77d2:	d002      	beq.n	e77da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
   e77d4:	4618      	mov	r0, r3
   e77d6:	f7ec bc62 	b.w	d409e <_ZdlPv>
   e77da:	4770      	bx	lr

000e77dc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
   e77dc:	b508      	push	{r3, lr}
   e77de:	4603      	mov	r3, r0
   e77e0:	4608      	mov	r0, r1
   e77e2:	685b      	ldr	r3, [r3, #4]
   e77e4:	4298      	cmp	r0, r3
   e77e6:	4611      	mov	r1, r2
   e77e8:	d903      	bls.n	e77f2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x16>
   e77ea:	4602      	mov	r2, r0
   e77ec:	4801      	ldr	r0, [pc, #4]	; (e77f4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
   e77ee:	f7ff ff05 	bl	e75fc <_ZSt24__throw_out_of_range_fmtPKcz>
   e77f2:	bd08      	pop	{r3, pc}
   e77f4:	000ed688 	.word	0x000ed688

000e77f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
   e77f8:	2a01      	cmp	r2, #1
   e77fa:	b510      	push	{r4, lr}
   e77fc:	d102      	bne.n	e7804 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
   e77fe:	780a      	ldrb	r2, [r1, #0]
   e7800:	7002      	strb	r2, [r0, #0]
   e7802:	bd10      	pop	{r4, pc}
   e7804:	f7ff ffbc 	bl	e7780 <_ZNSt11char_traitsIcE4copyEPcPKcj>
   e7808:	e7fb      	b.n	e7802 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

000e780a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
   e780a:	b508      	push	{r3, lr}
   e780c:	1a52      	subs	r2, r2, r1
   e780e:	f7ff fff3 	bl	e77f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   e7812:	bd08      	pop	{r3, pc}

000e7814 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
   e7814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e7816:	460d      	mov	r5, r1
   e7818:	f851 3b08 	ldr.w	r3, [r1], #8
   e781c:	686a      	ldr	r2, [r5, #4]
   e781e:	4299      	cmp	r1, r3
   e7820:	4604      	mov	r4, r0
   e7822:	6800      	ldr	r0, [r0, #0]
   e7824:	d10d      	bne.n	e7842 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
   e7826:	b10a      	cbz	r2, e782c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x18>
   e7828:	f7ff ffe6 	bl	e77f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   e782c:	686b      	ldr	r3, [r5, #4]
   e782e:	6822      	ldr	r2, [r4, #0]
   e7830:	6063      	str	r3, [r4, #4]
   e7832:	2100      	movs	r1, #0
   e7834:	54d1      	strb	r1, [r2, r3]
   e7836:	682a      	ldr	r2, [r5, #0]
   e7838:	2300      	movs	r3, #0
   e783a:	606b      	str	r3, [r5, #4]
   e783c:	7013      	strb	r3, [r2, #0]
   e783e:	4620      	mov	r0, r4
   e7840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   e7842:	e9c4 3200 	strd	r3, r2, [r4]
   e7846:	f104 0708 	add.w	r7, r4, #8
   e784a:	42b8      	cmp	r0, r7
   e784c:	68ab      	ldr	r3, [r5, #8]
   e784e:	bf18      	it	ne
   e7850:	68a6      	ldrne	r6, [r4, #8]
   e7852:	60a3      	str	r3, [r4, #8]
   e7854:	bf08      	it	eq
   e7856:	2000      	moveq	r0, #0
   e7858:	b110      	cbz	r0, e7860 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x4c>
   e785a:	6028      	str	r0, [r5, #0]
   e785c:	60ae      	str	r6, [r5, #8]
   e785e:	e7ea      	b.n	e7836 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x22>
   e7860:	6029      	str	r1, [r5, #0]
   e7862:	e7e8      	b.n	e7836 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x22>

000e7864 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj>:
   e7864:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   e7868:	460e      	mov	r6, r1
   e786a:	461d      	mov	r5, r3
   e786c:	6841      	ldr	r1, [r0, #4]
   e786e:	b923      	cbnz	r3, e787a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x16>
   e7870:	4291      	cmp	r1, r2
   e7872:	d221      	bcs.n	e78b8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x54>
   e7874:	f04f 32ff 	mov.w	r2, #4294967295
   e7878:	e01e      	b.n	e78b8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x54>
   e787a:	4291      	cmp	r1, r2
   e787c:	d9fa      	bls.n	e7874 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x10>
   e787e:	f8d0 8000 	ldr.w	r8, [r0]
   e7882:	7833      	ldrb	r3, [r6, #0]
   e7884:	f88d 3007 	strb.w	r3, [sp, #7]
   e7888:	eb08 0701 	add.w	r7, r8, r1
   e788c:	eb08 0002 	add.w	r0, r8, r2
   e7890:	1a89      	subs	r1, r1, r2
   e7892:	f1c5 0901 	rsb	r9, r5, #1
   e7896:	42a9      	cmp	r1, r5
   e7898:	d3ec      	bcc.n	e7874 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x10>
   e789a:	f10d 0207 	add.w	r2, sp, #7
   e789e:	4449      	add	r1, r9
   e78a0:	f7ff ff66 	bl	e7770 <_ZNSt11char_traitsIcE4findEPKcjRS1_>
   e78a4:	4604      	mov	r4, r0
   e78a6:	2800      	cmp	r0, #0
   e78a8:	d0e4      	beq.n	e7874 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x10>
   e78aa:	462a      	mov	r2, r5
   e78ac:	4631      	mov	r1, r6
   e78ae:	f7ff ff5a 	bl	e7766 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
   e78b2:	b928      	cbnz	r0, e78c0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x5c>
   e78b4:	eba4 0208 	sub.w	r2, r4, r8
   e78b8:	4610      	mov	r0, r2
   e78ba:	b003      	add	sp, #12
   e78bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   e78c0:	1c60      	adds	r0, r4, #1
   e78c2:	1a39      	subs	r1, r7, r0
   e78c4:	e7e7      	b.n	e7896 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x32>

000e78c6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>:
   e78c6:	b513      	push	{r0, r1, r4, lr}
   e78c8:	4604      	mov	r4, r0
   e78ca:	4608      	mov	r0, r1
   e78cc:	9201      	str	r2, [sp, #4]
   e78ce:	9100      	str	r1, [sp, #0]
   e78d0:	f001 f872 	bl	e89b8 <strlen>
   e78d4:	e9dd 1200 	ldrd	r1, r2, [sp]
   e78d8:	4603      	mov	r3, r0
   e78da:	4620      	mov	r0, r4
   e78dc:	f7ff ffc2 	bl	e7864 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj>
   e78e0:	b002      	add	sp, #8
   e78e2:	bd10      	pop	{r4, pc}

000e78e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
   e78e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   e78e6:	4604      	mov	r4, r0
   e78e8:	4616      	mov	r6, r2
   e78ea:	460d      	mov	r5, r1
   e78ec:	b919      	cbnz	r1, e78f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
   e78ee:	b112      	cbz	r2, e78f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
   e78f0:	480d      	ldr	r0, [pc, #52]	; (e7928 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
   e78f2:	f7ff fe7d 	bl	e75f0 <_ZSt19__throw_logic_errorPKc>
   e78f6:	1b73      	subs	r3, r6, r5
   e78f8:	2b0f      	cmp	r3, #15
   e78fa:	9301      	str	r3, [sp, #4]
   e78fc:	d907      	bls.n	e790e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
   e78fe:	2200      	movs	r2, #0
   e7900:	a901      	add	r1, sp, #4
   e7902:	4620      	mov	r0, r4
   e7904:	f7ff ff40 	bl	e7788 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
   e7908:	9b01      	ldr	r3, [sp, #4]
   e790a:	6020      	str	r0, [r4, #0]
   e790c:	60a3      	str	r3, [r4, #8]
   e790e:	4632      	mov	r2, r6
   e7910:	4629      	mov	r1, r5
   e7912:	6820      	ldr	r0, [r4, #0]
   e7914:	f7ff ff79 	bl	e780a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
   e7918:	9b01      	ldr	r3, [sp, #4]
   e791a:	6822      	ldr	r2, [r4, #0]
   e791c:	6063      	str	r3, [r4, #4]
   e791e:	2100      	movs	r1, #0
   e7920:	54d1      	strb	r1, [r2, r3]
   e7922:	b002      	add	sp, #8
   e7924:	bd70      	pop	{r4, r5, r6, pc}
   e7926:	bf00      	nop
   e7928:	000eb1b3 	.word	0x000eb1b3

000e792c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>:
   e792c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e7930:	460d      	mov	r5, r1
   e7932:	4617      	mov	r7, r2
   e7934:	4698      	mov	r8, r3
   e7936:	f100 0308 	add.w	r3, r0, #8
   e793a:	4604      	mov	r4, r0
   e793c:	6003      	str	r3, [r0, #0]
   e793e:	4639      	mov	r1, r7
   e7940:	4a0a      	ldr	r2, [pc, #40]	; (e796c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj+0x40>)
   e7942:	4628      	mov	r0, r5
   e7944:	f7ff ff4a 	bl	e77dc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
   e7948:	682e      	ldr	r6, [r5, #0]
   e794a:	686a      	ldr	r2, [r5, #4]
   e794c:	1831      	adds	r1, r6, r0
   e794e:	1bd2      	subs	r2, r2, r7
   e7950:	4620      	mov	r0, r4
   e7952:	f04f 0300 	mov.w	r3, #0
   e7956:	4542      	cmp	r2, r8
   e7958:	bf94      	ite	ls
   e795a:	188a      	addls	r2, r1, r2
   e795c:	eb01 0208 	addhi.w	r2, r1, r8
   e7960:	f7ff ffc0 	bl	e78e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
   e7964:	4620      	mov	r0, r4
   e7966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   e796a:	bf00      	nop
   e796c:	000ed6bf 	.word	0x000ed6bf

000e7970 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>:
   e7970:	b537      	push	{r0, r1, r2, r4, r5, lr}
   e7972:	460d      	mov	r5, r1
   e7974:	4604      	mov	r4, r0
   e7976:	4611      	mov	r1, r2
   e7978:	4628      	mov	r0, r5
   e797a:	4a06      	ldr	r2, [pc, #24]	; (e7994 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj+0x24>)
   e797c:	9301      	str	r3, [sp, #4]
   e797e:	f7ff ff2d 	bl	e77dc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
   e7982:	9b01      	ldr	r3, [sp, #4]
   e7984:	4602      	mov	r2, r0
   e7986:	4629      	mov	r1, r5
   e7988:	4620      	mov	r0, r4
   e798a:	f7ff ffcf 	bl	e792c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>
   e798e:	4620      	mov	r0, r4
   e7990:	b003      	add	sp, #12
   e7992:	bd30      	pop	{r4, r5, pc}
   e7994:	000ed6da 	.word	0x000ed6da

000e7998 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   e7998:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   e799a:	2400      	movs	r4, #0
   e799c:	2310      	movs	r3, #16
   e799e:	e9cd 3402 	strd	r3, r4, [sp, #8]
   e79a2:	6803      	ldr	r3, [r0, #0]
   e79a4:	9400      	str	r4, [sp, #0]
   e79a6:	699e      	ldr	r6, [r3, #24]
   e79a8:	f88d 4004 	strb.w	r4, [sp, #4]
   e79ac:	4615      	mov	r5, r2
   e79ae:	466b      	mov	r3, sp
   e79b0:	6812      	ldr	r2, [r2, #0]
   e79b2:	47b0      	blx	r6
   e79b4:	f89d 3004 	ldrb.w	r3, [sp, #4]
   e79b8:	f003 0306 	and.w	r3, r3, #6
   e79bc:	2b06      	cmp	r3, #6
   e79be:	bf03      	ittte	eq
   e79c0:	9b00      	ldreq	r3, [sp, #0]
   e79c2:	602b      	streq	r3, [r5, #0]
   e79c4:	2001      	moveq	r0, #1
   e79c6:	4620      	movne	r0, r4
   e79c8:	b004      	add	sp, #16
   e79ca:	bd70      	pop	{r4, r5, r6, pc}

000e79cc <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   e79cc:	9800      	ldr	r0, [sp, #0]
   e79ce:	4290      	cmp	r0, r2
   e79d0:	bf14      	ite	ne
   e79d2:	2001      	movne	r0, #1
   e79d4:	2006      	moveq	r0, #6
   e79d6:	4770      	bx	lr

000e79d8 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   e79d8:	b510      	push	{r4, lr}
   e79da:	4b03      	ldr	r3, [pc, #12]	; (e79e8 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   e79dc:	6003      	str	r3, [r0, #0]
   e79de:	4604      	mov	r4, r0
   e79e0:	f000 f8cd 	bl	e7b7e <_ZNSt9type_infoD1Ev>
   e79e4:	4620      	mov	r0, r4
   e79e6:	bd10      	pop	{r4, pc}
   e79e8:	000ed728 	.word	0x000ed728

000e79ec <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   e79ec:	b510      	push	{r4, lr}
   e79ee:	4604      	mov	r4, r0
   e79f0:	f7ff fff2 	bl	e79d8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   e79f4:	4620      	mov	r0, r4
   e79f6:	2108      	movs	r1, #8
   e79f8:	f7ff fdf1 	bl	e75de <_ZdlPvj>
   e79fc:	4620      	mov	r0, r4
   e79fe:	bd10      	pop	{r4, pc}

000e7a00 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   e7a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e7a04:	461f      	mov	r7, r3
   e7a06:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   e7a0a:	f8dd 8018 	ldr.w	r8, [sp, #24]
   e7a0e:	4598      	cmp	r8, r3
   e7a10:	4606      	mov	r6, r0
   e7a12:	4615      	mov	r5, r2
   e7a14:	d107      	bne.n	e7a26 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   e7a16:	9907      	ldr	r1, [sp, #28]
   e7a18:	f000 f8b4 	bl	e7b84 <_ZNKSt9type_infoeqERKS_>
   e7a1c:	b118      	cbz	r0, e7a26 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   e7a1e:	7165      	strb	r5, [r4, #5]
   e7a20:	2000      	movs	r0, #0
   e7a22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   e7a26:	4639      	mov	r1, r7
   e7a28:	4630      	mov	r0, r6
   e7a2a:	f000 f8ab 	bl	e7b84 <_ZNKSt9type_infoeqERKS_>
   e7a2e:	2800      	cmp	r0, #0
   e7a30:	d0f6      	beq.n	e7a20 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   e7a32:	2301      	movs	r3, #1
   e7a34:	f8c4 8000 	str.w	r8, [r4]
   e7a38:	7125      	strb	r5, [r4, #4]
   e7a3a:	71a3      	strb	r3, [r4, #6]
   e7a3c:	e7f0      	b.n	e7a20 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000e7a3e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   e7a3e:	b538      	push	{r3, r4, r5, lr}
   e7a40:	4615      	mov	r5, r2
   e7a42:	461c      	mov	r4, r3
   e7a44:	f000 f89e 	bl	e7b84 <_ZNKSt9type_infoeqERKS_>
   e7a48:	b120      	cbz	r0, e7a54 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   e7a4a:	2308      	movs	r3, #8
   e7a4c:	60e3      	str	r3, [r4, #12]
   e7a4e:	2306      	movs	r3, #6
   e7a50:	6025      	str	r5, [r4, #0]
   e7a52:	7123      	strb	r3, [r4, #4]
   e7a54:	bd38      	pop	{r3, r4, r5, pc}

000e7a56 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   e7a56:	b573      	push	{r0, r1, r4, r5, r6, lr}
   e7a58:	4605      	mov	r5, r0
   e7a5a:	460c      	mov	r4, r1
   e7a5c:	9201      	str	r2, [sp, #4]
   e7a5e:	461e      	mov	r6, r3
   e7a60:	f000 f890 	bl	e7b84 <_ZNKSt9type_infoeqERKS_>
   e7a64:	b950      	cbnz	r0, e7a7c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   e7a66:	2e03      	cmp	r6, #3
   e7a68:	d808      	bhi.n	e7a7c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   e7a6a:	6823      	ldr	r3, [r4, #0]
   e7a6c:	9a01      	ldr	r2, [sp, #4]
   e7a6e:	695b      	ldr	r3, [r3, #20]
   e7a70:	4629      	mov	r1, r5
   e7a72:	4620      	mov	r0, r4
   e7a74:	b002      	add	sp, #8
   e7a76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   e7a7a:	4718      	bx	r3
   e7a7c:	b002      	add	sp, #8
   e7a7e:	bd70      	pop	{r4, r5, r6, pc}

000e7a80 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   e7a80:	b510      	push	{r4, lr}
   e7a82:	4b03      	ldr	r3, [pc, #12]	; (e7a90 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   e7a84:	6003      	str	r3, [r0, #0]
   e7a86:	4604      	mov	r4, r0
   e7a88:	f7ff ffa6 	bl	e79d8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   e7a8c:	4620      	mov	r0, r4
   e7a8e:	bd10      	pop	{r4, pc}
   e7a90:	000ed788 	.word	0x000ed788

000e7a94 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   e7a94:	b510      	push	{r4, lr}
   e7a96:	4604      	mov	r4, r0
   e7a98:	f7ff fff2 	bl	e7a80 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   e7a9c:	4620      	mov	r0, r4
   e7a9e:	210c      	movs	r1, #12
   e7aa0:	f7ff fd9d 	bl	e75de <_ZdlPvj>
   e7aa4:	4620      	mov	r0, r4
   e7aa6:	bd10      	pop	{r4, pc}

000e7aa8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   e7aa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   e7aaa:	9f08      	ldr	r7, [sp, #32]
   e7aac:	4297      	cmp	r7, r2
   e7aae:	4605      	mov	r5, r0
   e7ab0:	460e      	mov	r6, r1
   e7ab2:	4614      	mov	r4, r2
   e7ab4:	d00a      	beq.n	e7acc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   e7ab6:	68a8      	ldr	r0, [r5, #8]
   e7ab8:	6802      	ldr	r2, [r0, #0]
   e7aba:	9708      	str	r7, [sp, #32]
   e7abc:	6a15      	ldr	r5, [r2, #32]
   e7abe:	4631      	mov	r1, r6
   e7ac0:	4622      	mov	r2, r4
   e7ac2:	46ac      	mov	ip, r5
   e7ac4:	b003      	add	sp, #12
   e7ac6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   e7aca:	4760      	bx	ip
   e7acc:	4619      	mov	r1, r3
   e7ace:	9301      	str	r3, [sp, #4]
   e7ad0:	f000 f858 	bl	e7b84 <_ZNKSt9type_infoeqERKS_>
   e7ad4:	9b01      	ldr	r3, [sp, #4]
   e7ad6:	2800      	cmp	r0, #0
   e7ad8:	d0ed      	beq.n	e7ab6 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   e7ada:	2006      	movs	r0, #6
   e7adc:	b003      	add	sp, #12
   e7ade:	bdf0      	pop	{r4, r5, r6, r7, pc}

000e7ae0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   e7ae0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e7ae4:	460d      	mov	r5, r1
   e7ae6:	4619      	mov	r1, r3
   e7ae8:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   e7aec:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   e7af0:	4681      	mov	r9, r0
   e7af2:	4617      	mov	r7, r2
   e7af4:	4698      	mov	r8, r3
   e7af6:	f000 f845 	bl	e7b84 <_ZNKSt9type_infoeqERKS_>
   e7afa:	b190      	cbz	r0, e7b22 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   e7afc:	2d00      	cmp	r5, #0
   e7afe:	6034      	str	r4, [r6, #0]
   e7b00:	7137      	strb	r7, [r6, #4]
   e7b02:	db09      	blt.n	e7b18 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   e7b04:	1961      	adds	r1, r4, r5
   e7b06:	458a      	cmp	sl, r1
   e7b08:	bf0c      	ite	eq
   e7b0a:	2106      	moveq	r1, #6
   e7b0c:	2101      	movne	r1, #1
   e7b0e:	71b1      	strb	r1, [r6, #6]
   e7b10:	2000      	movs	r0, #0
   e7b12:	b001      	add	sp, #4
   e7b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e7b18:	3502      	adds	r5, #2
   e7b1a:	d1f9      	bne.n	e7b10 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   e7b1c:	2301      	movs	r3, #1
   e7b1e:	71b3      	strb	r3, [r6, #6]
   e7b20:	e7f6      	b.n	e7b10 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   e7b22:	4554      	cmp	r4, sl
   e7b24:	d106      	bne.n	e7b34 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   e7b26:	4659      	mov	r1, fp
   e7b28:	4648      	mov	r0, r9
   e7b2a:	f000 f82b 	bl	e7b84 <_ZNKSt9type_infoeqERKS_>
   e7b2e:	b108      	cbz	r0, e7b34 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   e7b30:	7177      	strb	r7, [r6, #5]
   e7b32:	e7ed      	b.n	e7b10 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   e7b34:	f8d9 0008 	ldr.w	r0, [r9, #8]
   e7b38:	6803      	ldr	r3, [r0, #0]
   e7b3a:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   e7b3e:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   e7b42:	69dc      	ldr	r4, [r3, #28]
   e7b44:	463a      	mov	r2, r7
   e7b46:	4643      	mov	r3, r8
   e7b48:	4629      	mov	r1, r5
   e7b4a:	46a4      	mov	ip, r4
   e7b4c:	b001      	add	sp, #4
   e7b4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e7b52:	4760      	bx	ip

000e7b54 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   e7b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e7b58:	4607      	mov	r7, r0
   e7b5a:	460c      	mov	r4, r1
   e7b5c:	4615      	mov	r5, r2
   e7b5e:	461e      	mov	r6, r3
   e7b60:	f7ff ff6d 	bl	e7a3e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   e7b64:	b948      	cbnz	r0, e7b7a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   e7b66:	68b8      	ldr	r0, [r7, #8]
   e7b68:	6803      	ldr	r3, [r0, #0]
   e7b6a:	699f      	ldr	r7, [r3, #24]
   e7b6c:	462a      	mov	r2, r5
   e7b6e:	4633      	mov	r3, r6
   e7b70:	4621      	mov	r1, r4
   e7b72:	46bc      	mov	ip, r7
   e7b74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   e7b78:	4760      	bx	ip
   e7b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000e7b7e <_ZNSt9type_infoD1Ev>:
   e7b7e:	4770      	bx	lr

000e7b80 <_ZNKSt9type_info14__is_pointer_pEv>:
   e7b80:	2000      	movs	r0, #0
   e7b82:	4770      	bx	lr

000e7b84 <_ZNKSt9type_infoeqERKS_>:
   e7b84:	4281      	cmp	r1, r0
   e7b86:	b508      	push	{r3, lr}
   e7b88:	d00e      	beq.n	e7ba8 <_ZNKSt9type_infoeqERKS_+0x24>
   e7b8a:	6840      	ldr	r0, [r0, #4]
   e7b8c:	7803      	ldrb	r3, [r0, #0]
   e7b8e:	2b2a      	cmp	r3, #42	; 0x2a
   e7b90:	d00c      	beq.n	e7bac <_ZNKSt9type_infoeqERKS_+0x28>
   e7b92:	6849      	ldr	r1, [r1, #4]
   e7b94:	780b      	ldrb	r3, [r1, #0]
   e7b96:	2b2a      	cmp	r3, #42	; 0x2a
   e7b98:	bf08      	it	eq
   e7b9a:	3101      	addeq	r1, #1
   e7b9c:	f000 fefa 	bl	e8994 <strcmp>
   e7ba0:	fab0 f080 	clz	r0, r0
   e7ba4:	0940      	lsrs	r0, r0, #5
   e7ba6:	bd08      	pop	{r3, pc}
   e7ba8:	2001      	movs	r0, #1
   e7baa:	e7fc      	b.n	e7ba6 <_ZNKSt9type_infoeqERKS_+0x22>
   e7bac:	2000      	movs	r0, #0
   e7bae:	e7fa      	b.n	e7ba6 <_ZNKSt9type_infoeqERKS_+0x22>

000e7bb0 <__aeabi_drsub>:
   e7bb0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   e7bb4:	e002      	b.n	e7bbc <__adddf3>
   e7bb6:	bf00      	nop

000e7bb8 <__aeabi_dsub>:
   e7bb8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000e7bbc <__adddf3>:
   e7bbc:	b530      	push	{r4, r5, lr}
   e7bbe:	ea4f 0441 	mov.w	r4, r1, lsl #1
   e7bc2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   e7bc6:	ea94 0f05 	teq	r4, r5
   e7bca:	bf08      	it	eq
   e7bcc:	ea90 0f02 	teqeq	r0, r2
   e7bd0:	bf1f      	itttt	ne
   e7bd2:	ea54 0c00 	orrsne.w	ip, r4, r0
   e7bd6:	ea55 0c02 	orrsne.w	ip, r5, r2
   e7bda:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   e7bde:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   e7be2:	f000 80e2 	beq.w	e7daa <__adddf3+0x1ee>
   e7be6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   e7bea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   e7bee:	bfb8      	it	lt
   e7bf0:	426d      	neglt	r5, r5
   e7bf2:	dd0c      	ble.n	e7c0e <__adddf3+0x52>
   e7bf4:	442c      	add	r4, r5
   e7bf6:	ea80 0202 	eor.w	r2, r0, r2
   e7bfa:	ea81 0303 	eor.w	r3, r1, r3
   e7bfe:	ea82 0000 	eor.w	r0, r2, r0
   e7c02:	ea83 0101 	eor.w	r1, r3, r1
   e7c06:	ea80 0202 	eor.w	r2, r0, r2
   e7c0a:	ea81 0303 	eor.w	r3, r1, r3
   e7c0e:	2d36      	cmp	r5, #54	; 0x36
   e7c10:	bf88      	it	hi
   e7c12:	bd30      	pophi	{r4, r5, pc}
   e7c14:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   e7c18:	ea4f 3101 	mov.w	r1, r1, lsl #12
   e7c1c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   e7c20:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   e7c24:	d002      	beq.n	e7c2c <__adddf3+0x70>
   e7c26:	4240      	negs	r0, r0
   e7c28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   e7c2c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   e7c30:	ea4f 3303 	mov.w	r3, r3, lsl #12
   e7c34:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   e7c38:	d002      	beq.n	e7c40 <__adddf3+0x84>
   e7c3a:	4252      	negs	r2, r2
   e7c3c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   e7c40:	ea94 0f05 	teq	r4, r5
   e7c44:	f000 80a7 	beq.w	e7d96 <__adddf3+0x1da>
   e7c48:	f1a4 0401 	sub.w	r4, r4, #1
   e7c4c:	f1d5 0e20 	rsbs	lr, r5, #32
   e7c50:	db0d      	blt.n	e7c6e <__adddf3+0xb2>
   e7c52:	fa02 fc0e 	lsl.w	ip, r2, lr
   e7c56:	fa22 f205 	lsr.w	r2, r2, r5
   e7c5a:	1880      	adds	r0, r0, r2
   e7c5c:	f141 0100 	adc.w	r1, r1, #0
   e7c60:	fa03 f20e 	lsl.w	r2, r3, lr
   e7c64:	1880      	adds	r0, r0, r2
   e7c66:	fa43 f305 	asr.w	r3, r3, r5
   e7c6a:	4159      	adcs	r1, r3
   e7c6c:	e00e      	b.n	e7c8c <__adddf3+0xd0>
   e7c6e:	f1a5 0520 	sub.w	r5, r5, #32
   e7c72:	f10e 0e20 	add.w	lr, lr, #32
   e7c76:	2a01      	cmp	r2, #1
   e7c78:	fa03 fc0e 	lsl.w	ip, r3, lr
   e7c7c:	bf28      	it	cs
   e7c7e:	f04c 0c02 	orrcs.w	ip, ip, #2
   e7c82:	fa43 f305 	asr.w	r3, r3, r5
   e7c86:	18c0      	adds	r0, r0, r3
   e7c88:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   e7c8c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   e7c90:	d507      	bpl.n	e7ca2 <__adddf3+0xe6>
   e7c92:	f04f 0e00 	mov.w	lr, #0
   e7c96:	f1dc 0c00 	rsbs	ip, ip, #0
   e7c9a:	eb7e 0000 	sbcs.w	r0, lr, r0
   e7c9e:	eb6e 0101 	sbc.w	r1, lr, r1
   e7ca2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   e7ca6:	d31b      	bcc.n	e7ce0 <__adddf3+0x124>
   e7ca8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   e7cac:	d30c      	bcc.n	e7cc8 <__adddf3+0x10c>
   e7cae:	0849      	lsrs	r1, r1, #1
   e7cb0:	ea5f 0030 	movs.w	r0, r0, rrx
   e7cb4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   e7cb8:	f104 0401 	add.w	r4, r4, #1
   e7cbc:	ea4f 5244 	mov.w	r2, r4, lsl #21
   e7cc0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   e7cc4:	f080 809a 	bcs.w	e7dfc <__adddf3+0x240>
   e7cc8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   e7ccc:	bf08      	it	eq
   e7cce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   e7cd2:	f150 0000 	adcs.w	r0, r0, #0
   e7cd6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   e7cda:	ea41 0105 	orr.w	r1, r1, r5
   e7cde:	bd30      	pop	{r4, r5, pc}
   e7ce0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   e7ce4:	4140      	adcs	r0, r0
   e7ce6:	eb41 0101 	adc.w	r1, r1, r1
   e7cea:	3c01      	subs	r4, #1
   e7cec:	bf28      	it	cs
   e7cee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   e7cf2:	d2e9      	bcs.n	e7cc8 <__adddf3+0x10c>
   e7cf4:	f091 0f00 	teq	r1, #0
   e7cf8:	bf04      	itt	eq
   e7cfa:	4601      	moveq	r1, r0
   e7cfc:	2000      	moveq	r0, #0
   e7cfe:	fab1 f381 	clz	r3, r1
   e7d02:	bf08      	it	eq
   e7d04:	3320      	addeq	r3, #32
   e7d06:	f1a3 030b 	sub.w	r3, r3, #11
   e7d0a:	f1b3 0220 	subs.w	r2, r3, #32
   e7d0e:	da0c      	bge.n	e7d2a <__adddf3+0x16e>
   e7d10:	320c      	adds	r2, #12
   e7d12:	dd08      	ble.n	e7d26 <__adddf3+0x16a>
   e7d14:	f102 0c14 	add.w	ip, r2, #20
   e7d18:	f1c2 020c 	rsb	r2, r2, #12
   e7d1c:	fa01 f00c 	lsl.w	r0, r1, ip
   e7d20:	fa21 f102 	lsr.w	r1, r1, r2
   e7d24:	e00c      	b.n	e7d40 <__adddf3+0x184>
   e7d26:	f102 0214 	add.w	r2, r2, #20
   e7d2a:	bfd8      	it	le
   e7d2c:	f1c2 0c20 	rsble	ip, r2, #32
   e7d30:	fa01 f102 	lsl.w	r1, r1, r2
   e7d34:	fa20 fc0c 	lsr.w	ip, r0, ip
   e7d38:	bfdc      	itt	le
   e7d3a:	ea41 010c 	orrle.w	r1, r1, ip
   e7d3e:	4090      	lslle	r0, r2
   e7d40:	1ae4      	subs	r4, r4, r3
   e7d42:	bfa2      	ittt	ge
   e7d44:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   e7d48:	4329      	orrge	r1, r5
   e7d4a:	bd30      	popge	{r4, r5, pc}
   e7d4c:	ea6f 0404 	mvn.w	r4, r4
   e7d50:	3c1f      	subs	r4, #31
   e7d52:	da1c      	bge.n	e7d8e <__adddf3+0x1d2>
   e7d54:	340c      	adds	r4, #12
   e7d56:	dc0e      	bgt.n	e7d76 <__adddf3+0x1ba>
   e7d58:	f104 0414 	add.w	r4, r4, #20
   e7d5c:	f1c4 0220 	rsb	r2, r4, #32
   e7d60:	fa20 f004 	lsr.w	r0, r0, r4
   e7d64:	fa01 f302 	lsl.w	r3, r1, r2
   e7d68:	ea40 0003 	orr.w	r0, r0, r3
   e7d6c:	fa21 f304 	lsr.w	r3, r1, r4
   e7d70:	ea45 0103 	orr.w	r1, r5, r3
   e7d74:	bd30      	pop	{r4, r5, pc}
   e7d76:	f1c4 040c 	rsb	r4, r4, #12
   e7d7a:	f1c4 0220 	rsb	r2, r4, #32
   e7d7e:	fa20 f002 	lsr.w	r0, r0, r2
   e7d82:	fa01 f304 	lsl.w	r3, r1, r4
   e7d86:	ea40 0003 	orr.w	r0, r0, r3
   e7d8a:	4629      	mov	r1, r5
   e7d8c:	bd30      	pop	{r4, r5, pc}
   e7d8e:	fa21 f004 	lsr.w	r0, r1, r4
   e7d92:	4629      	mov	r1, r5
   e7d94:	bd30      	pop	{r4, r5, pc}
   e7d96:	f094 0f00 	teq	r4, #0
   e7d9a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   e7d9e:	bf06      	itte	eq
   e7da0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   e7da4:	3401      	addeq	r4, #1
   e7da6:	3d01      	subne	r5, #1
   e7da8:	e74e      	b.n	e7c48 <__adddf3+0x8c>
   e7daa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   e7dae:	bf18      	it	ne
   e7db0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   e7db4:	d029      	beq.n	e7e0a <__adddf3+0x24e>
   e7db6:	ea94 0f05 	teq	r4, r5
   e7dba:	bf08      	it	eq
   e7dbc:	ea90 0f02 	teqeq	r0, r2
   e7dc0:	d005      	beq.n	e7dce <__adddf3+0x212>
   e7dc2:	ea54 0c00 	orrs.w	ip, r4, r0
   e7dc6:	bf04      	itt	eq
   e7dc8:	4619      	moveq	r1, r3
   e7dca:	4610      	moveq	r0, r2
   e7dcc:	bd30      	pop	{r4, r5, pc}
   e7dce:	ea91 0f03 	teq	r1, r3
   e7dd2:	bf1e      	ittt	ne
   e7dd4:	2100      	movne	r1, #0
   e7dd6:	2000      	movne	r0, #0
   e7dd8:	bd30      	popne	{r4, r5, pc}
   e7dda:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   e7dde:	d105      	bne.n	e7dec <__adddf3+0x230>
   e7de0:	0040      	lsls	r0, r0, #1
   e7de2:	4149      	adcs	r1, r1
   e7de4:	bf28      	it	cs
   e7de6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   e7dea:	bd30      	pop	{r4, r5, pc}
   e7dec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   e7df0:	bf3c      	itt	cc
   e7df2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   e7df6:	bd30      	popcc	{r4, r5, pc}
   e7df8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   e7dfc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   e7e00:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   e7e04:	f04f 0000 	mov.w	r0, #0
   e7e08:	bd30      	pop	{r4, r5, pc}
   e7e0a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   e7e0e:	bf1a      	itte	ne
   e7e10:	4619      	movne	r1, r3
   e7e12:	4610      	movne	r0, r2
   e7e14:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   e7e18:	bf1c      	itt	ne
   e7e1a:	460b      	movne	r3, r1
   e7e1c:	4602      	movne	r2, r0
   e7e1e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   e7e22:	bf06      	itte	eq
   e7e24:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   e7e28:	ea91 0f03 	teqeq	r1, r3
   e7e2c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   e7e30:	bd30      	pop	{r4, r5, pc}
   e7e32:	bf00      	nop

000e7e34 <__aeabi_ui2d>:
   e7e34:	f090 0f00 	teq	r0, #0
   e7e38:	bf04      	itt	eq
   e7e3a:	2100      	moveq	r1, #0
   e7e3c:	4770      	bxeq	lr
   e7e3e:	b530      	push	{r4, r5, lr}
   e7e40:	f44f 6480 	mov.w	r4, #1024	; 0x400
   e7e44:	f104 0432 	add.w	r4, r4, #50	; 0x32
   e7e48:	f04f 0500 	mov.w	r5, #0
   e7e4c:	f04f 0100 	mov.w	r1, #0
   e7e50:	e750      	b.n	e7cf4 <__adddf3+0x138>
   e7e52:	bf00      	nop

000e7e54 <__aeabi_i2d>:
   e7e54:	f090 0f00 	teq	r0, #0
   e7e58:	bf04      	itt	eq
   e7e5a:	2100      	moveq	r1, #0
   e7e5c:	4770      	bxeq	lr
   e7e5e:	b530      	push	{r4, r5, lr}
   e7e60:	f44f 6480 	mov.w	r4, #1024	; 0x400
   e7e64:	f104 0432 	add.w	r4, r4, #50	; 0x32
   e7e68:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   e7e6c:	bf48      	it	mi
   e7e6e:	4240      	negmi	r0, r0
   e7e70:	f04f 0100 	mov.w	r1, #0
   e7e74:	e73e      	b.n	e7cf4 <__adddf3+0x138>
   e7e76:	bf00      	nop

000e7e78 <__aeabi_f2d>:
   e7e78:	0042      	lsls	r2, r0, #1
   e7e7a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   e7e7e:	ea4f 0131 	mov.w	r1, r1, rrx
   e7e82:	ea4f 7002 	mov.w	r0, r2, lsl #28
   e7e86:	bf1f      	itttt	ne
   e7e88:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   e7e8c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   e7e90:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   e7e94:	4770      	bxne	lr
   e7e96:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   e7e9a:	bf08      	it	eq
   e7e9c:	4770      	bxeq	lr
   e7e9e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   e7ea2:	bf04      	itt	eq
   e7ea4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   e7ea8:	4770      	bxeq	lr
   e7eaa:	b530      	push	{r4, r5, lr}
   e7eac:	f44f 7460 	mov.w	r4, #896	; 0x380
   e7eb0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   e7eb4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   e7eb8:	e71c      	b.n	e7cf4 <__adddf3+0x138>
   e7eba:	bf00      	nop

000e7ebc <__aeabi_ul2d>:
   e7ebc:	ea50 0201 	orrs.w	r2, r0, r1
   e7ec0:	bf08      	it	eq
   e7ec2:	4770      	bxeq	lr
   e7ec4:	b530      	push	{r4, r5, lr}
   e7ec6:	f04f 0500 	mov.w	r5, #0
   e7eca:	e00a      	b.n	e7ee2 <__aeabi_l2d+0x16>

000e7ecc <__aeabi_l2d>:
   e7ecc:	ea50 0201 	orrs.w	r2, r0, r1
   e7ed0:	bf08      	it	eq
   e7ed2:	4770      	bxeq	lr
   e7ed4:	b530      	push	{r4, r5, lr}
   e7ed6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   e7eda:	d502      	bpl.n	e7ee2 <__aeabi_l2d+0x16>
   e7edc:	4240      	negs	r0, r0
   e7ede:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   e7ee2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   e7ee6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   e7eea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   e7eee:	f43f aed8 	beq.w	e7ca2 <__adddf3+0xe6>
   e7ef2:	f04f 0203 	mov.w	r2, #3
   e7ef6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   e7efa:	bf18      	it	ne
   e7efc:	3203      	addne	r2, #3
   e7efe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   e7f02:	bf18      	it	ne
   e7f04:	3203      	addne	r2, #3
   e7f06:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   e7f0a:	f1c2 0320 	rsb	r3, r2, #32
   e7f0e:	fa00 fc03 	lsl.w	ip, r0, r3
   e7f12:	fa20 f002 	lsr.w	r0, r0, r2
   e7f16:	fa01 fe03 	lsl.w	lr, r1, r3
   e7f1a:	ea40 000e 	orr.w	r0, r0, lr
   e7f1e:	fa21 f102 	lsr.w	r1, r1, r2
   e7f22:	4414      	add	r4, r2
   e7f24:	e6bd      	b.n	e7ca2 <__adddf3+0xe6>
   e7f26:	bf00      	nop

000e7f28 <__aeabi_dmul>:
   e7f28:	b570      	push	{r4, r5, r6, lr}
   e7f2a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   e7f2e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   e7f32:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   e7f36:	bf1d      	ittte	ne
   e7f38:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   e7f3c:	ea94 0f0c 	teqne	r4, ip
   e7f40:	ea95 0f0c 	teqne	r5, ip
   e7f44:	f000 f8de 	bleq	e8104 <__aeabi_dmul+0x1dc>
   e7f48:	442c      	add	r4, r5
   e7f4a:	ea81 0603 	eor.w	r6, r1, r3
   e7f4e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   e7f52:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   e7f56:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   e7f5a:	bf18      	it	ne
   e7f5c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   e7f60:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e7f64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   e7f68:	d038      	beq.n	e7fdc <__aeabi_dmul+0xb4>
   e7f6a:	fba0 ce02 	umull	ip, lr, r0, r2
   e7f6e:	f04f 0500 	mov.w	r5, #0
   e7f72:	fbe1 e502 	umlal	lr, r5, r1, r2
   e7f76:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   e7f7a:	fbe0 e503 	umlal	lr, r5, r0, r3
   e7f7e:	f04f 0600 	mov.w	r6, #0
   e7f82:	fbe1 5603 	umlal	r5, r6, r1, r3
   e7f86:	f09c 0f00 	teq	ip, #0
   e7f8a:	bf18      	it	ne
   e7f8c:	f04e 0e01 	orrne.w	lr, lr, #1
   e7f90:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   e7f94:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   e7f98:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   e7f9c:	d204      	bcs.n	e7fa8 <__aeabi_dmul+0x80>
   e7f9e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   e7fa2:	416d      	adcs	r5, r5
   e7fa4:	eb46 0606 	adc.w	r6, r6, r6
   e7fa8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   e7fac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   e7fb0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   e7fb4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   e7fb8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   e7fbc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   e7fc0:	bf88      	it	hi
   e7fc2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   e7fc6:	d81e      	bhi.n	e8006 <__aeabi_dmul+0xde>
   e7fc8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   e7fcc:	bf08      	it	eq
   e7fce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   e7fd2:	f150 0000 	adcs.w	r0, r0, #0
   e7fd6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   e7fda:	bd70      	pop	{r4, r5, r6, pc}
   e7fdc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   e7fe0:	ea46 0101 	orr.w	r1, r6, r1
   e7fe4:	ea40 0002 	orr.w	r0, r0, r2
   e7fe8:	ea81 0103 	eor.w	r1, r1, r3
   e7fec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   e7ff0:	bfc2      	ittt	gt
   e7ff2:	ebd4 050c 	rsbsgt	r5, r4, ip
   e7ff6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   e7ffa:	bd70      	popgt	{r4, r5, r6, pc}
   e7ffc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e8000:	f04f 0e00 	mov.w	lr, #0
   e8004:	3c01      	subs	r4, #1
   e8006:	f300 80ab 	bgt.w	e8160 <__aeabi_dmul+0x238>
   e800a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   e800e:	bfde      	ittt	le
   e8010:	2000      	movle	r0, #0
   e8012:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   e8016:	bd70      	pople	{r4, r5, r6, pc}
   e8018:	f1c4 0400 	rsb	r4, r4, #0
   e801c:	3c20      	subs	r4, #32
   e801e:	da35      	bge.n	e808c <__aeabi_dmul+0x164>
   e8020:	340c      	adds	r4, #12
   e8022:	dc1b      	bgt.n	e805c <__aeabi_dmul+0x134>
   e8024:	f104 0414 	add.w	r4, r4, #20
   e8028:	f1c4 0520 	rsb	r5, r4, #32
   e802c:	fa00 f305 	lsl.w	r3, r0, r5
   e8030:	fa20 f004 	lsr.w	r0, r0, r4
   e8034:	fa01 f205 	lsl.w	r2, r1, r5
   e8038:	ea40 0002 	orr.w	r0, r0, r2
   e803c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   e8040:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   e8044:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   e8048:	fa21 f604 	lsr.w	r6, r1, r4
   e804c:	eb42 0106 	adc.w	r1, r2, r6
   e8050:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   e8054:	bf08      	it	eq
   e8056:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   e805a:	bd70      	pop	{r4, r5, r6, pc}
   e805c:	f1c4 040c 	rsb	r4, r4, #12
   e8060:	f1c4 0520 	rsb	r5, r4, #32
   e8064:	fa00 f304 	lsl.w	r3, r0, r4
   e8068:	fa20 f005 	lsr.w	r0, r0, r5
   e806c:	fa01 f204 	lsl.w	r2, r1, r4
   e8070:	ea40 0002 	orr.w	r0, r0, r2
   e8074:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e8078:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   e807c:	f141 0100 	adc.w	r1, r1, #0
   e8080:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   e8084:	bf08      	it	eq
   e8086:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   e808a:	bd70      	pop	{r4, r5, r6, pc}
   e808c:	f1c4 0520 	rsb	r5, r4, #32
   e8090:	fa00 f205 	lsl.w	r2, r0, r5
   e8094:	ea4e 0e02 	orr.w	lr, lr, r2
   e8098:	fa20 f304 	lsr.w	r3, r0, r4
   e809c:	fa01 f205 	lsl.w	r2, r1, r5
   e80a0:	ea43 0302 	orr.w	r3, r3, r2
   e80a4:	fa21 f004 	lsr.w	r0, r1, r4
   e80a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e80ac:	fa21 f204 	lsr.w	r2, r1, r4
   e80b0:	ea20 0002 	bic.w	r0, r0, r2
   e80b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   e80b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   e80bc:	bf08      	it	eq
   e80be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   e80c2:	bd70      	pop	{r4, r5, r6, pc}
   e80c4:	f094 0f00 	teq	r4, #0
   e80c8:	d10f      	bne.n	e80ea <__aeabi_dmul+0x1c2>
   e80ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   e80ce:	0040      	lsls	r0, r0, #1
   e80d0:	eb41 0101 	adc.w	r1, r1, r1
   e80d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   e80d8:	bf08      	it	eq
   e80da:	3c01      	subeq	r4, #1
   e80dc:	d0f7      	beq.n	e80ce <__aeabi_dmul+0x1a6>
   e80de:	ea41 0106 	orr.w	r1, r1, r6
   e80e2:	f095 0f00 	teq	r5, #0
   e80e6:	bf18      	it	ne
   e80e8:	4770      	bxne	lr
   e80ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   e80ee:	0052      	lsls	r2, r2, #1
   e80f0:	eb43 0303 	adc.w	r3, r3, r3
   e80f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   e80f8:	bf08      	it	eq
   e80fa:	3d01      	subeq	r5, #1
   e80fc:	d0f7      	beq.n	e80ee <__aeabi_dmul+0x1c6>
   e80fe:	ea43 0306 	orr.w	r3, r3, r6
   e8102:	4770      	bx	lr
   e8104:	ea94 0f0c 	teq	r4, ip
   e8108:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   e810c:	bf18      	it	ne
   e810e:	ea95 0f0c 	teqne	r5, ip
   e8112:	d00c      	beq.n	e812e <__aeabi_dmul+0x206>
   e8114:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   e8118:	bf18      	it	ne
   e811a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   e811e:	d1d1      	bne.n	e80c4 <__aeabi_dmul+0x19c>
   e8120:	ea81 0103 	eor.w	r1, r1, r3
   e8124:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e8128:	f04f 0000 	mov.w	r0, #0
   e812c:	bd70      	pop	{r4, r5, r6, pc}
   e812e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   e8132:	bf06      	itte	eq
   e8134:	4610      	moveq	r0, r2
   e8136:	4619      	moveq	r1, r3
   e8138:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   e813c:	d019      	beq.n	e8172 <__aeabi_dmul+0x24a>
   e813e:	ea94 0f0c 	teq	r4, ip
   e8142:	d102      	bne.n	e814a <__aeabi_dmul+0x222>
   e8144:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   e8148:	d113      	bne.n	e8172 <__aeabi_dmul+0x24a>
   e814a:	ea95 0f0c 	teq	r5, ip
   e814e:	d105      	bne.n	e815c <__aeabi_dmul+0x234>
   e8150:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   e8154:	bf1c      	itt	ne
   e8156:	4610      	movne	r0, r2
   e8158:	4619      	movne	r1, r3
   e815a:	d10a      	bne.n	e8172 <__aeabi_dmul+0x24a>
   e815c:	ea81 0103 	eor.w	r1, r1, r3
   e8160:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e8164:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   e8168:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   e816c:	f04f 0000 	mov.w	r0, #0
   e8170:	bd70      	pop	{r4, r5, r6, pc}
   e8172:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   e8176:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   e817a:	bd70      	pop	{r4, r5, r6, pc}

000e817c <__aeabi_ddiv>:
   e817c:	b570      	push	{r4, r5, r6, lr}
   e817e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   e8182:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   e8186:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   e818a:	bf1d      	ittte	ne
   e818c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   e8190:	ea94 0f0c 	teqne	r4, ip
   e8194:	ea95 0f0c 	teqne	r5, ip
   e8198:	f000 f8a7 	bleq	e82ea <__aeabi_ddiv+0x16e>
   e819c:	eba4 0405 	sub.w	r4, r4, r5
   e81a0:	ea81 0e03 	eor.w	lr, r1, r3
   e81a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   e81a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   e81ac:	f000 8088 	beq.w	e82c0 <__aeabi_ddiv+0x144>
   e81b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   e81b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   e81b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   e81bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   e81c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   e81c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   e81c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   e81cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
   e81d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   e81d4:	429d      	cmp	r5, r3
   e81d6:	bf08      	it	eq
   e81d8:	4296      	cmpeq	r6, r2
   e81da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   e81de:	f504 7440 	add.w	r4, r4, #768	; 0x300
   e81e2:	d202      	bcs.n	e81ea <__aeabi_ddiv+0x6e>
   e81e4:	085b      	lsrs	r3, r3, #1
   e81e6:	ea4f 0232 	mov.w	r2, r2, rrx
   e81ea:	1ab6      	subs	r6, r6, r2
   e81ec:	eb65 0503 	sbc.w	r5, r5, r3
   e81f0:	085b      	lsrs	r3, r3, #1
   e81f2:	ea4f 0232 	mov.w	r2, r2, rrx
   e81f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   e81fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   e81fe:	ebb6 0e02 	subs.w	lr, r6, r2
   e8202:	eb75 0e03 	sbcs.w	lr, r5, r3
   e8206:	bf22      	ittt	cs
   e8208:	1ab6      	subcs	r6, r6, r2
   e820a:	4675      	movcs	r5, lr
   e820c:	ea40 000c 	orrcs.w	r0, r0, ip
   e8210:	085b      	lsrs	r3, r3, #1
   e8212:	ea4f 0232 	mov.w	r2, r2, rrx
   e8216:	ebb6 0e02 	subs.w	lr, r6, r2
   e821a:	eb75 0e03 	sbcs.w	lr, r5, r3
   e821e:	bf22      	ittt	cs
   e8220:	1ab6      	subcs	r6, r6, r2
   e8222:	4675      	movcs	r5, lr
   e8224:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   e8228:	085b      	lsrs	r3, r3, #1
   e822a:	ea4f 0232 	mov.w	r2, r2, rrx
   e822e:	ebb6 0e02 	subs.w	lr, r6, r2
   e8232:	eb75 0e03 	sbcs.w	lr, r5, r3
   e8236:	bf22      	ittt	cs
   e8238:	1ab6      	subcs	r6, r6, r2
   e823a:	4675      	movcs	r5, lr
   e823c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   e8240:	085b      	lsrs	r3, r3, #1
   e8242:	ea4f 0232 	mov.w	r2, r2, rrx
   e8246:	ebb6 0e02 	subs.w	lr, r6, r2
   e824a:	eb75 0e03 	sbcs.w	lr, r5, r3
   e824e:	bf22      	ittt	cs
   e8250:	1ab6      	subcs	r6, r6, r2
   e8252:	4675      	movcs	r5, lr
   e8254:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   e8258:	ea55 0e06 	orrs.w	lr, r5, r6
   e825c:	d018      	beq.n	e8290 <__aeabi_ddiv+0x114>
   e825e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   e8262:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   e8266:	ea4f 1606 	mov.w	r6, r6, lsl #4
   e826a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   e826e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   e8272:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   e8276:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   e827a:	d1c0      	bne.n	e81fe <__aeabi_ddiv+0x82>
   e827c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   e8280:	d10b      	bne.n	e829a <__aeabi_ddiv+0x11e>
   e8282:	ea41 0100 	orr.w	r1, r1, r0
   e8286:	f04f 0000 	mov.w	r0, #0
   e828a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   e828e:	e7b6      	b.n	e81fe <__aeabi_ddiv+0x82>
   e8290:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   e8294:	bf04      	itt	eq
   e8296:	4301      	orreq	r1, r0
   e8298:	2000      	moveq	r0, #0
   e829a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   e829e:	bf88      	it	hi
   e82a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   e82a4:	f63f aeaf 	bhi.w	e8006 <__aeabi_dmul+0xde>
   e82a8:	ebb5 0c03 	subs.w	ip, r5, r3
   e82ac:	bf04      	itt	eq
   e82ae:	ebb6 0c02 	subseq.w	ip, r6, r2
   e82b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   e82b6:	f150 0000 	adcs.w	r0, r0, #0
   e82ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   e82be:	bd70      	pop	{r4, r5, r6, pc}
   e82c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   e82c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   e82c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   e82cc:	bfc2      	ittt	gt
   e82ce:	ebd4 050c 	rsbsgt	r5, r4, ip
   e82d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   e82d6:	bd70      	popgt	{r4, r5, r6, pc}
   e82d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e82dc:	f04f 0e00 	mov.w	lr, #0
   e82e0:	3c01      	subs	r4, #1
   e82e2:	e690      	b.n	e8006 <__aeabi_dmul+0xde>
   e82e4:	ea45 0e06 	orr.w	lr, r5, r6
   e82e8:	e68d      	b.n	e8006 <__aeabi_dmul+0xde>
   e82ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   e82ee:	ea94 0f0c 	teq	r4, ip
   e82f2:	bf08      	it	eq
   e82f4:	ea95 0f0c 	teqeq	r5, ip
   e82f8:	f43f af3b 	beq.w	e8172 <__aeabi_dmul+0x24a>
   e82fc:	ea94 0f0c 	teq	r4, ip
   e8300:	d10a      	bne.n	e8318 <__aeabi_ddiv+0x19c>
   e8302:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   e8306:	f47f af34 	bne.w	e8172 <__aeabi_dmul+0x24a>
   e830a:	ea95 0f0c 	teq	r5, ip
   e830e:	f47f af25 	bne.w	e815c <__aeabi_dmul+0x234>
   e8312:	4610      	mov	r0, r2
   e8314:	4619      	mov	r1, r3
   e8316:	e72c      	b.n	e8172 <__aeabi_dmul+0x24a>
   e8318:	ea95 0f0c 	teq	r5, ip
   e831c:	d106      	bne.n	e832c <__aeabi_ddiv+0x1b0>
   e831e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   e8322:	f43f aefd 	beq.w	e8120 <__aeabi_dmul+0x1f8>
   e8326:	4610      	mov	r0, r2
   e8328:	4619      	mov	r1, r3
   e832a:	e722      	b.n	e8172 <__aeabi_dmul+0x24a>
   e832c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   e8330:	bf18      	it	ne
   e8332:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   e8336:	f47f aec5 	bne.w	e80c4 <__aeabi_dmul+0x19c>
   e833a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   e833e:	f47f af0d 	bne.w	e815c <__aeabi_dmul+0x234>
   e8342:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   e8346:	f47f aeeb 	bne.w	e8120 <__aeabi_dmul+0x1f8>
   e834a:	e712      	b.n	e8172 <__aeabi_dmul+0x24a>

000e834c <__gedf2>:
   e834c:	f04f 3cff 	mov.w	ip, #4294967295
   e8350:	e006      	b.n	e8360 <__cmpdf2+0x4>
   e8352:	bf00      	nop

000e8354 <__ledf2>:
   e8354:	f04f 0c01 	mov.w	ip, #1
   e8358:	e002      	b.n	e8360 <__cmpdf2+0x4>
   e835a:	bf00      	nop

000e835c <__cmpdf2>:
   e835c:	f04f 0c01 	mov.w	ip, #1
   e8360:	f84d cd04 	str.w	ip, [sp, #-4]!
   e8364:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   e8368:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e836c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   e8370:	bf18      	it	ne
   e8372:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   e8376:	d01b      	beq.n	e83b0 <__cmpdf2+0x54>
   e8378:	b001      	add	sp, #4
   e837a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   e837e:	bf0c      	ite	eq
   e8380:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   e8384:	ea91 0f03 	teqne	r1, r3
   e8388:	bf02      	ittt	eq
   e838a:	ea90 0f02 	teqeq	r0, r2
   e838e:	2000      	moveq	r0, #0
   e8390:	4770      	bxeq	lr
   e8392:	f110 0f00 	cmn.w	r0, #0
   e8396:	ea91 0f03 	teq	r1, r3
   e839a:	bf58      	it	pl
   e839c:	4299      	cmppl	r1, r3
   e839e:	bf08      	it	eq
   e83a0:	4290      	cmpeq	r0, r2
   e83a2:	bf2c      	ite	cs
   e83a4:	17d8      	asrcs	r0, r3, #31
   e83a6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   e83aa:	f040 0001 	orr.w	r0, r0, #1
   e83ae:	4770      	bx	lr
   e83b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   e83b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e83b8:	d102      	bne.n	e83c0 <__cmpdf2+0x64>
   e83ba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   e83be:	d107      	bne.n	e83d0 <__cmpdf2+0x74>
   e83c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   e83c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e83c8:	d1d6      	bne.n	e8378 <__cmpdf2+0x1c>
   e83ca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   e83ce:	d0d3      	beq.n	e8378 <__cmpdf2+0x1c>
   e83d0:	f85d 0b04 	ldr.w	r0, [sp], #4
   e83d4:	4770      	bx	lr
   e83d6:	bf00      	nop

000e83d8 <__aeabi_cdrcmple>:
   e83d8:	4684      	mov	ip, r0
   e83da:	4610      	mov	r0, r2
   e83dc:	4662      	mov	r2, ip
   e83de:	468c      	mov	ip, r1
   e83e0:	4619      	mov	r1, r3
   e83e2:	4663      	mov	r3, ip
   e83e4:	e000      	b.n	e83e8 <__aeabi_cdcmpeq>
   e83e6:	bf00      	nop

000e83e8 <__aeabi_cdcmpeq>:
   e83e8:	b501      	push	{r0, lr}
   e83ea:	f7ff ffb7 	bl	e835c <__cmpdf2>
   e83ee:	2800      	cmp	r0, #0
   e83f0:	bf48      	it	mi
   e83f2:	f110 0f00 	cmnmi.w	r0, #0
   e83f6:	bd01      	pop	{r0, pc}

000e83f8 <__aeabi_dcmpeq>:
   e83f8:	f84d ed08 	str.w	lr, [sp, #-8]!
   e83fc:	f7ff fff4 	bl	e83e8 <__aeabi_cdcmpeq>
   e8400:	bf0c      	ite	eq
   e8402:	2001      	moveq	r0, #1
   e8404:	2000      	movne	r0, #0
   e8406:	f85d fb08 	ldr.w	pc, [sp], #8
   e840a:	bf00      	nop

000e840c <__aeabi_dcmplt>:
   e840c:	f84d ed08 	str.w	lr, [sp, #-8]!
   e8410:	f7ff ffea 	bl	e83e8 <__aeabi_cdcmpeq>
   e8414:	bf34      	ite	cc
   e8416:	2001      	movcc	r0, #1
   e8418:	2000      	movcs	r0, #0
   e841a:	f85d fb08 	ldr.w	pc, [sp], #8
   e841e:	bf00      	nop

000e8420 <__aeabi_dcmple>:
   e8420:	f84d ed08 	str.w	lr, [sp, #-8]!
   e8424:	f7ff ffe0 	bl	e83e8 <__aeabi_cdcmpeq>
   e8428:	bf94      	ite	ls
   e842a:	2001      	movls	r0, #1
   e842c:	2000      	movhi	r0, #0
   e842e:	f85d fb08 	ldr.w	pc, [sp], #8
   e8432:	bf00      	nop

000e8434 <__aeabi_dcmpge>:
   e8434:	f84d ed08 	str.w	lr, [sp, #-8]!
   e8438:	f7ff ffce 	bl	e83d8 <__aeabi_cdrcmple>
   e843c:	bf94      	ite	ls
   e843e:	2001      	movls	r0, #1
   e8440:	2000      	movhi	r0, #0
   e8442:	f85d fb08 	ldr.w	pc, [sp], #8
   e8446:	bf00      	nop

000e8448 <__aeabi_dcmpgt>:
   e8448:	f84d ed08 	str.w	lr, [sp, #-8]!
   e844c:	f7ff ffc4 	bl	e83d8 <__aeabi_cdrcmple>
   e8450:	bf34      	ite	cc
   e8452:	2001      	movcc	r0, #1
   e8454:	2000      	movcs	r0, #0
   e8456:	f85d fb08 	ldr.w	pc, [sp], #8
   e845a:	bf00      	nop

000e845c <__aeabi_d2uiz>:
   e845c:	004a      	lsls	r2, r1, #1
   e845e:	d211      	bcs.n	e8484 <__aeabi_d2uiz+0x28>
   e8460:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   e8464:	d211      	bcs.n	e848a <__aeabi_d2uiz+0x2e>
   e8466:	d50d      	bpl.n	e8484 <__aeabi_d2uiz+0x28>
   e8468:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   e846c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   e8470:	d40e      	bmi.n	e8490 <__aeabi_d2uiz+0x34>
   e8472:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   e8476:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   e847a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   e847e:	fa23 f002 	lsr.w	r0, r3, r2
   e8482:	4770      	bx	lr
   e8484:	f04f 0000 	mov.w	r0, #0
   e8488:	4770      	bx	lr
   e848a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   e848e:	d102      	bne.n	e8496 <__aeabi_d2uiz+0x3a>
   e8490:	f04f 30ff 	mov.w	r0, #4294967295
   e8494:	4770      	bx	lr
   e8496:	f04f 0000 	mov.w	r0, #0
   e849a:	4770      	bx	lr

000e849c <__aeabi_uldivmod>:
   e849c:	b953      	cbnz	r3, e84b4 <__aeabi_uldivmod+0x18>
   e849e:	b94a      	cbnz	r2, e84b4 <__aeabi_uldivmod+0x18>
   e84a0:	2900      	cmp	r1, #0
   e84a2:	bf08      	it	eq
   e84a4:	2800      	cmpeq	r0, #0
   e84a6:	bf1c      	itt	ne
   e84a8:	f04f 31ff 	movne.w	r1, #4294967295
   e84ac:	f04f 30ff 	movne.w	r0, #4294967295
   e84b0:	f000 b98c 	b.w	e87cc <__aeabi_idiv0>
   e84b4:	f1ad 0c08 	sub.w	ip, sp, #8
   e84b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   e84bc:	f000 f824 	bl	e8508 <__udivmoddi4>
   e84c0:	f8dd e004 	ldr.w	lr, [sp, #4]
   e84c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   e84c8:	b004      	add	sp, #16
   e84ca:	4770      	bx	lr

000e84cc <__aeabi_d2ulz>:
   e84cc:	b5d0      	push	{r4, r6, r7, lr}
   e84ce:	4b0c      	ldr	r3, [pc, #48]	; (e8500 <__aeabi_d2ulz+0x34>)
   e84d0:	2200      	movs	r2, #0
   e84d2:	4606      	mov	r6, r0
   e84d4:	460f      	mov	r7, r1
   e84d6:	f7ff fd27 	bl	e7f28 <__aeabi_dmul>
   e84da:	f7ff ffbf 	bl	e845c <__aeabi_d2uiz>
   e84de:	4604      	mov	r4, r0
   e84e0:	f7ff fca8 	bl	e7e34 <__aeabi_ui2d>
   e84e4:	4b07      	ldr	r3, [pc, #28]	; (e8504 <__aeabi_d2ulz+0x38>)
   e84e6:	2200      	movs	r2, #0
   e84e8:	f7ff fd1e 	bl	e7f28 <__aeabi_dmul>
   e84ec:	4602      	mov	r2, r0
   e84ee:	460b      	mov	r3, r1
   e84f0:	4630      	mov	r0, r6
   e84f2:	4639      	mov	r1, r7
   e84f4:	f7ff fb60 	bl	e7bb8 <__aeabi_dsub>
   e84f8:	f7ff ffb0 	bl	e845c <__aeabi_d2uiz>
   e84fc:	4621      	mov	r1, r4
   e84fe:	bdd0      	pop	{r4, r6, r7, pc}
   e8500:	3df00000 	.word	0x3df00000
   e8504:	41f00000 	.word	0x41f00000

000e8508 <__udivmoddi4>:
   e8508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e850c:	9d08      	ldr	r5, [sp, #32]
   e850e:	4604      	mov	r4, r0
   e8510:	468c      	mov	ip, r1
   e8512:	2b00      	cmp	r3, #0
   e8514:	f040 8083 	bne.w	e861e <__udivmoddi4+0x116>
   e8518:	428a      	cmp	r2, r1
   e851a:	4617      	mov	r7, r2
   e851c:	d947      	bls.n	e85ae <__udivmoddi4+0xa6>
   e851e:	fab2 f282 	clz	r2, r2
   e8522:	b142      	cbz	r2, e8536 <__udivmoddi4+0x2e>
   e8524:	f1c2 0020 	rsb	r0, r2, #32
   e8528:	fa24 f000 	lsr.w	r0, r4, r0
   e852c:	4091      	lsls	r1, r2
   e852e:	4097      	lsls	r7, r2
   e8530:	ea40 0c01 	orr.w	ip, r0, r1
   e8534:	4094      	lsls	r4, r2
   e8536:	ea4f 4817 	mov.w	r8, r7, lsr #16
   e853a:	0c23      	lsrs	r3, r4, #16
   e853c:	fbbc f6f8 	udiv	r6, ip, r8
   e8540:	fa1f fe87 	uxth.w	lr, r7
   e8544:	fb08 c116 	mls	r1, r8, r6, ip
   e8548:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   e854c:	fb06 f10e 	mul.w	r1, r6, lr
   e8550:	4299      	cmp	r1, r3
   e8552:	d909      	bls.n	e8568 <__udivmoddi4+0x60>
   e8554:	18fb      	adds	r3, r7, r3
   e8556:	f106 30ff 	add.w	r0, r6, #4294967295
   e855a:	f080 8119 	bcs.w	e8790 <__udivmoddi4+0x288>
   e855e:	4299      	cmp	r1, r3
   e8560:	f240 8116 	bls.w	e8790 <__udivmoddi4+0x288>
   e8564:	3e02      	subs	r6, #2
   e8566:	443b      	add	r3, r7
   e8568:	1a5b      	subs	r3, r3, r1
   e856a:	b2a4      	uxth	r4, r4
   e856c:	fbb3 f0f8 	udiv	r0, r3, r8
   e8570:	fb08 3310 	mls	r3, r8, r0, r3
   e8574:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   e8578:	fb00 fe0e 	mul.w	lr, r0, lr
   e857c:	45a6      	cmp	lr, r4
   e857e:	d909      	bls.n	e8594 <__udivmoddi4+0x8c>
   e8580:	193c      	adds	r4, r7, r4
   e8582:	f100 33ff 	add.w	r3, r0, #4294967295
   e8586:	f080 8105 	bcs.w	e8794 <__udivmoddi4+0x28c>
   e858a:	45a6      	cmp	lr, r4
   e858c:	f240 8102 	bls.w	e8794 <__udivmoddi4+0x28c>
   e8590:	3802      	subs	r0, #2
   e8592:	443c      	add	r4, r7
   e8594:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   e8598:	eba4 040e 	sub.w	r4, r4, lr
   e859c:	2600      	movs	r6, #0
   e859e:	b11d      	cbz	r5, e85a8 <__udivmoddi4+0xa0>
   e85a0:	40d4      	lsrs	r4, r2
   e85a2:	2300      	movs	r3, #0
   e85a4:	e9c5 4300 	strd	r4, r3, [r5]
   e85a8:	4631      	mov	r1, r6
   e85aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e85ae:	b902      	cbnz	r2, e85b2 <__udivmoddi4+0xaa>
   e85b0:	deff      	udf	#255	; 0xff
   e85b2:	fab2 f282 	clz	r2, r2
   e85b6:	2a00      	cmp	r2, #0
   e85b8:	d150      	bne.n	e865c <__udivmoddi4+0x154>
   e85ba:	1bcb      	subs	r3, r1, r7
   e85bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   e85c0:	fa1f f887 	uxth.w	r8, r7
   e85c4:	2601      	movs	r6, #1
   e85c6:	fbb3 fcfe 	udiv	ip, r3, lr
   e85ca:	0c21      	lsrs	r1, r4, #16
   e85cc:	fb0e 331c 	mls	r3, lr, ip, r3
   e85d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   e85d4:	fb08 f30c 	mul.w	r3, r8, ip
   e85d8:	428b      	cmp	r3, r1
   e85da:	d907      	bls.n	e85ec <__udivmoddi4+0xe4>
   e85dc:	1879      	adds	r1, r7, r1
   e85de:	f10c 30ff 	add.w	r0, ip, #4294967295
   e85e2:	d202      	bcs.n	e85ea <__udivmoddi4+0xe2>
   e85e4:	428b      	cmp	r3, r1
   e85e6:	f200 80e9 	bhi.w	e87bc <__udivmoddi4+0x2b4>
   e85ea:	4684      	mov	ip, r0
   e85ec:	1ac9      	subs	r1, r1, r3
   e85ee:	b2a3      	uxth	r3, r4
   e85f0:	fbb1 f0fe 	udiv	r0, r1, lr
   e85f4:	fb0e 1110 	mls	r1, lr, r0, r1
   e85f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   e85fc:	fb08 f800 	mul.w	r8, r8, r0
   e8600:	45a0      	cmp	r8, r4
   e8602:	d907      	bls.n	e8614 <__udivmoddi4+0x10c>
   e8604:	193c      	adds	r4, r7, r4
   e8606:	f100 33ff 	add.w	r3, r0, #4294967295
   e860a:	d202      	bcs.n	e8612 <__udivmoddi4+0x10a>
   e860c:	45a0      	cmp	r8, r4
   e860e:	f200 80d9 	bhi.w	e87c4 <__udivmoddi4+0x2bc>
   e8612:	4618      	mov	r0, r3
   e8614:	eba4 0408 	sub.w	r4, r4, r8
   e8618:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   e861c:	e7bf      	b.n	e859e <__udivmoddi4+0x96>
   e861e:	428b      	cmp	r3, r1
   e8620:	d909      	bls.n	e8636 <__udivmoddi4+0x12e>
   e8622:	2d00      	cmp	r5, #0
   e8624:	f000 80b1 	beq.w	e878a <__udivmoddi4+0x282>
   e8628:	2600      	movs	r6, #0
   e862a:	e9c5 0100 	strd	r0, r1, [r5]
   e862e:	4630      	mov	r0, r6
   e8630:	4631      	mov	r1, r6
   e8632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e8636:	fab3 f683 	clz	r6, r3
   e863a:	2e00      	cmp	r6, #0
   e863c:	d14a      	bne.n	e86d4 <__udivmoddi4+0x1cc>
   e863e:	428b      	cmp	r3, r1
   e8640:	d302      	bcc.n	e8648 <__udivmoddi4+0x140>
   e8642:	4282      	cmp	r2, r0
   e8644:	f200 80b8 	bhi.w	e87b8 <__udivmoddi4+0x2b0>
   e8648:	1a84      	subs	r4, r0, r2
   e864a:	eb61 0103 	sbc.w	r1, r1, r3
   e864e:	2001      	movs	r0, #1
   e8650:	468c      	mov	ip, r1
   e8652:	2d00      	cmp	r5, #0
   e8654:	d0a8      	beq.n	e85a8 <__udivmoddi4+0xa0>
   e8656:	e9c5 4c00 	strd	r4, ip, [r5]
   e865a:	e7a5      	b.n	e85a8 <__udivmoddi4+0xa0>
   e865c:	f1c2 0320 	rsb	r3, r2, #32
   e8660:	fa20 f603 	lsr.w	r6, r0, r3
   e8664:	4097      	lsls	r7, r2
   e8666:	fa01 f002 	lsl.w	r0, r1, r2
   e866a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   e866e:	40d9      	lsrs	r1, r3
   e8670:	4330      	orrs	r0, r6
   e8672:	0c03      	lsrs	r3, r0, #16
   e8674:	fbb1 f6fe 	udiv	r6, r1, lr
   e8678:	fa1f f887 	uxth.w	r8, r7
   e867c:	fb0e 1116 	mls	r1, lr, r6, r1
   e8680:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   e8684:	fb06 f108 	mul.w	r1, r6, r8
   e8688:	4299      	cmp	r1, r3
   e868a:	fa04 f402 	lsl.w	r4, r4, r2
   e868e:	d909      	bls.n	e86a4 <__udivmoddi4+0x19c>
   e8690:	18fb      	adds	r3, r7, r3
   e8692:	f106 3cff 	add.w	ip, r6, #4294967295
   e8696:	f080 808d 	bcs.w	e87b4 <__udivmoddi4+0x2ac>
   e869a:	4299      	cmp	r1, r3
   e869c:	f240 808a 	bls.w	e87b4 <__udivmoddi4+0x2ac>
   e86a0:	3e02      	subs	r6, #2
   e86a2:	443b      	add	r3, r7
   e86a4:	1a5b      	subs	r3, r3, r1
   e86a6:	b281      	uxth	r1, r0
   e86a8:	fbb3 f0fe 	udiv	r0, r3, lr
   e86ac:	fb0e 3310 	mls	r3, lr, r0, r3
   e86b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   e86b4:	fb00 f308 	mul.w	r3, r0, r8
   e86b8:	428b      	cmp	r3, r1
   e86ba:	d907      	bls.n	e86cc <__udivmoddi4+0x1c4>
   e86bc:	1879      	adds	r1, r7, r1
   e86be:	f100 3cff 	add.w	ip, r0, #4294967295
   e86c2:	d273      	bcs.n	e87ac <__udivmoddi4+0x2a4>
   e86c4:	428b      	cmp	r3, r1
   e86c6:	d971      	bls.n	e87ac <__udivmoddi4+0x2a4>
   e86c8:	3802      	subs	r0, #2
   e86ca:	4439      	add	r1, r7
   e86cc:	1acb      	subs	r3, r1, r3
   e86ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   e86d2:	e778      	b.n	e85c6 <__udivmoddi4+0xbe>
   e86d4:	f1c6 0c20 	rsb	ip, r6, #32
   e86d8:	fa03 f406 	lsl.w	r4, r3, r6
   e86dc:	fa22 f30c 	lsr.w	r3, r2, ip
   e86e0:	431c      	orrs	r4, r3
   e86e2:	fa20 f70c 	lsr.w	r7, r0, ip
   e86e6:	fa01 f306 	lsl.w	r3, r1, r6
   e86ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   e86ee:	fa21 f10c 	lsr.w	r1, r1, ip
   e86f2:	431f      	orrs	r7, r3
   e86f4:	0c3b      	lsrs	r3, r7, #16
   e86f6:	fbb1 f9fe 	udiv	r9, r1, lr
   e86fa:	fa1f f884 	uxth.w	r8, r4
   e86fe:	fb0e 1119 	mls	r1, lr, r9, r1
   e8702:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   e8706:	fb09 fa08 	mul.w	sl, r9, r8
   e870a:	458a      	cmp	sl, r1
   e870c:	fa02 f206 	lsl.w	r2, r2, r6
   e8710:	fa00 f306 	lsl.w	r3, r0, r6
   e8714:	d908      	bls.n	e8728 <__udivmoddi4+0x220>
   e8716:	1861      	adds	r1, r4, r1
   e8718:	f109 30ff 	add.w	r0, r9, #4294967295
   e871c:	d248      	bcs.n	e87b0 <__udivmoddi4+0x2a8>
   e871e:	458a      	cmp	sl, r1
   e8720:	d946      	bls.n	e87b0 <__udivmoddi4+0x2a8>
   e8722:	f1a9 0902 	sub.w	r9, r9, #2
   e8726:	4421      	add	r1, r4
   e8728:	eba1 010a 	sub.w	r1, r1, sl
   e872c:	b2bf      	uxth	r7, r7
   e872e:	fbb1 f0fe 	udiv	r0, r1, lr
   e8732:	fb0e 1110 	mls	r1, lr, r0, r1
   e8736:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
   e873a:	fb00 f808 	mul.w	r8, r0, r8
   e873e:	45b8      	cmp	r8, r7
   e8740:	d907      	bls.n	e8752 <__udivmoddi4+0x24a>
   e8742:	19e7      	adds	r7, r4, r7
   e8744:	f100 31ff 	add.w	r1, r0, #4294967295
   e8748:	d22e      	bcs.n	e87a8 <__udivmoddi4+0x2a0>
   e874a:	45b8      	cmp	r8, r7
   e874c:	d92c      	bls.n	e87a8 <__udivmoddi4+0x2a0>
   e874e:	3802      	subs	r0, #2
   e8750:	4427      	add	r7, r4
   e8752:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   e8756:	eba7 0708 	sub.w	r7, r7, r8
   e875a:	fba0 8902 	umull	r8, r9, r0, r2
   e875e:	454f      	cmp	r7, r9
   e8760:	46c6      	mov	lr, r8
   e8762:	4649      	mov	r1, r9
   e8764:	d31a      	bcc.n	e879c <__udivmoddi4+0x294>
   e8766:	d017      	beq.n	e8798 <__udivmoddi4+0x290>
   e8768:	b15d      	cbz	r5, e8782 <__udivmoddi4+0x27a>
   e876a:	ebb3 020e 	subs.w	r2, r3, lr
   e876e:	eb67 0701 	sbc.w	r7, r7, r1
   e8772:	fa07 fc0c 	lsl.w	ip, r7, ip
   e8776:	40f2      	lsrs	r2, r6
   e8778:	ea4c 0202 	orr.w	r2, ip, r2
   e877c:	40f7      	lsrs	r7, r6
   e877e:	e9c5 2700 	strd	r2, r7, [r5]
   e8782:	2600      	movs	r6, #0
   e8784:	4631      	mov	r1, r6
   e8786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e878a:	462e      	mov	r6, r5
   e878c:	4628      	mov	r0, r5
   e878e:	e70b      	b.n	e85a8 <__udivmoddi4+0xa0>
   e8790:	4606      	mov	r6, r0
   e8792:	e6e9      	b.n	e8568 <__udivmoddi4+0x60>
   e8794:	4618      	mov	r0, r3
   e8796:	e6fd      	b.n	e8594 <__udivmoddi4+0x8c>
   e8798:	4543      	cmp	r3, r8
   e879a:	d2e5      	bcs.n	e8768 <__udivmoddi4+0x260>
   e879c:	ebb8 0e02 	subs.w	lr, r8, r2
   e87a0:	eb69 0104 	sbc.w	r1, r9, r4
   e87a4:	3801      	subs	r0, #1
   e87a6:	e7df      	b.n	e8768 <__udivmoddi4+0x260>
   e87a8:	4608      	mov	r0, r1
   e87aa:	e7d2      	b.n	e8752 <__udivmoddi4+0x24a>
   e87ac:	4660      	mov	r0, ip
   e87ae:	e78d      	b.n	e86cc <__udivmoddi4+0x1c4>
   e87b0:	4681      	mov	r9, r0
   e87b2:	e7b9      	b.n	e8728 <__udivmoddi4+0x220>
   e87b4:	4666      	mov	r6, ip
   e87b6:	e775      	b.n	e86a4 <__udivmoddi4+0x19c>
   e87b8:	4630      	mov	r0, r6
   e87ba:	e74a      	b.n	e8652 <__udivmoddi4+0x14a>
   e87bc:	f1ac 0c02 	sub.w	ip, ip, #2
   e87c0:	4439      	add	r1, r7
   e87c2:	e713      	b.n	e85ec <__udivmoddi4+0xe4>
   e87c4:	3802      	subs	r0, #2
   e87c6:	443c      	add	r4, r7
   e87c8:	e724      	b.n	e8614 <__udivmoddi4+0x10c>
   e87ca:	bf00      	nop

000e87cc <__aeabi_idiv0>:
   e87cc:	4770      	bx	lr
   e87ce:	bf00      	nop

000e87d0 <atoi>:
   e87d0:	220a      	movs	r2, #10
   e87d2:	2100      	movs	r1, #0
   e87d4:	f000 bfd0 	b.w	e9778 <strtol>

000e87d8 <calloc>:
   e87d8:	4b02      	ldr	r3, [pc, #8]	; (e87e4 <calloc+0xc>)
   e87da:	460a      	mov	r2, r1
   e87dc:	4601      	mov	r1, r0
   e87de:	6818      	ldr	r0, [r3, #0]
   e87e0:	f000 b8a4 	b.w	e892c <_calloc_r>
   e87e4:	2003ac90 	.word	0x2003ac90

000e87e8 <__cxa_atexit>:
   e87e8:	b510      	push	{r4, lr}
   e87ea:	4c05      	ldr	r4, [pc, #20]	; (e8800 <__cxa_atexit+0x18>)
   e87ec:	4613      	mov	r3, r2
   e87ee:	b12c      	cbz	r4, e87fc <__cxa_atexit+0x14>
   e87f0:	460a      	mov	r2, r1
   e87f2:	4601      	mov	r1, r0
   e87f4:	2002      	movs	r0, #2
   e87f6:	f3af 8000 	nop.w
   e87fa:	bd10      	pop	{r4, pc}
   e87fc:	4620      	mov	r0, r4
   e87fe:	e7fc      	b.n	e87fa <__cxa_atexit+0x12>
	...

000e8810 <memchr>:
   e8810:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   e8814:	2a10      	cmp	r2, #16
   e8816:	db2b      	blt.n	e8870 <memchr+0x60>
   e8818:	f010 0f07 	tst.w	r0, #7
   e881c:	d008      	beq.n	e8830 <memchr+0x20>
   e881e:	f810 3b01 	ldrb.w	r3, [r0], #1
   e8822:	3a01      	subs	r2, #1
   e8824:	428b      	cmp	r3, r1
   e8826:	d02d      	beq.n	e8884 <memchr+0x74>
   e8828:	f010 0f07 	tst.w	r0, #7
   e882c:	b342      	cbz	r2, e8880 <memchr+0x70>
   e882e:	d1f6      	bne.n	e881e <memchr+0xe>
   e8830:	b4f0      	push	{r4, r5, r6, r7}
   e8832:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   e8836:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   e883a:	f022 0407 	bic.w	r4, r2, #7
   e883e:	f07f 0700 	mvns.w	r7, #0
   e8842:	2300      	movs	r3, #0
   e8844:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   e8848:	3c08      	subs	r4, #8
   e884a:	ea85 0501 	eor.w	r5, r5, r1
   e884e:	ea86 0601 	eor.w	r6, r6, r1
   e8852:	fa85 f547 	uadd8	r5, r5, r7
   e8856:	faa3 f587 	sel	r5, r3, r7
   e885a:	fa86 f647 	uadd8	r6, r6, r7
   e885e:	faa5 f687 	sel	r6, r5, r7
   e8862:	b98e      	cbnz	r6, e8888 <memchr+0x78>
   e8864:	d1ee      	bne.n	e8844 <memchr+0x34>
   e8866:	bcf0      	pop	{r4, r5, r6, r7}
   e8868:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   e886c:	f002 0207 	and.w	r2, r2, #7
   e8870:	b132      	cbz	r2, e8880 <memchr+0x70>
   e8872:	f810 3b01 	ldrb.w	r3, [r0], #1
   e8876:	3a01      	subs	r2, #1
   e8878:	ea83 0301 	eor.w	r3, r3, r1
   e887c:	b113      	cbz	r3, e8884 <memchr+0x74>
   e887e:	d1f8      	bne.n	e8872 <memchr+0x62>
   e8880:	2000      	movs	r0, #0
   e8882:	4770      	bx	lr
   e8884:	3801      	subs	r0, #1
   e8886:	4770      	bx	lr
   e8888:	2d00      	cmp	r5, #0
   e888a:	bf06      	itte	eq
   e888c:	4635      	moveq	r5, r6
   e888e:	3803      	subeq	r0, #3
   e8890:	3807      	subne	r0, #7
   e8892:	f015 0f01 	tst.w	r5, #1
   e8896:	d107      	bne.n	e88a8 <memchr+0x98>
   e8898:	3001      	adds	r0, #1
   e889a:	f415 7f80 	tst.w	r5, #256	; 0x100
   e889e:	bf02      	ittt	eq
   e88a0:	3001      	addeq	r0, #1
   e88a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   e88a6:	3001      	addeq	r0, #1
   e88a8:	bcf0      	pop	{r4, r5, r6, r7}
   e88aa:	3801      	subs	r0, #1
   e88ac:	4770      	bx	lr
   e88ae:	bf00      	nop

000e88b0 <memcmp>:
   e88b0:	b530      	push	{r4, r5, lr}
   e88b2:	3901      	subs	r1, #1
   e88b4:	2400      	movs	r4, #0
   e88b6:	42a2      	cmp	r2, r4
   e88b8:	d101      	bne.n	e88be <memcmp+0xe>
   e88ba:	2000      	movs	r0, #0
   e88bc:	e005      	b.n	e88ca <memcmp+0x1a>
   e88be:	5d03      	ldrb	r3, [r0, r4]
   e88c0:	3401      	adds	r4, #1
   e88c2:	5d0d      	ldrb	r5, [r1, r4]
   e88c4:	42ab      	cmp	r3, r5
   e88c6:	d0f6      	beq.n	e88b6 <memcmp+0x6>
   e88c8:	1b58      	subs	r0, r3, r5
   e88ca:	bd30      	pop	{r4, r5, pc}

000e88cc <memcpy>:
   e88cc:	440a      	add	r2, r1
   e88ce:	4291      	cmp	r1, r2
   e88d0:	f100 33ff 	add.w	r3, r0, #4294967295
   e88d4:	d100      	bne.n	e88d8 <memcpy+0xc>
   e88d6:	4770      	bx	lr
   e88d8:	b510      	push	{r4, lr}
   e88da:	f811 4b01 	ldrb.w	r4, [r1], #1
   e88de:	f803 4f01 	strb.w	r4, [r3, #1]!
   e88e2:	4291      	cmp	r1, r2
   e88e4:	d1f9      	bne.n	e88da <memcpy+0xe>
   e88e6:	bd10      	pop	{r4, pc}

000e88e8 <memmove>:
   e88e8:	4288      	cmp	r0, r1
   e88ea:	b510      	push	{r4, lr}
   e88ec:	eb01 0402 	add.w	r4, r1, r2
   e88f0:	d902      	bls.n	e88f8 <memmove+0x10>
   e88f2:	4284      	cmp	r4, r0
   e88f4:	4623      	mov	r3, r4
   e88f6:	d807      	bhi.n	e8908 <memmove+0x20>
   e88f8:	1e43      	subs	r3, r0, #1
   e88fa:	42a1      	cmp	r1, r4
   e88fc:	d008      	beq.n	e8910 <memmove+0x28>
   e88fe:	f811 2b01 	ldrb.w	r2, [r1], #1
   e8902:	f803 2f01 	strb.w	r2, [r3, #1]!
   e8906:	e7f8      	b.n	e88fa <memmove+0x12>
   e8908:	4402      	add	r2, r0
   e890a:	4601      	mov	r1, r0
   e890c:	428a      	cmp	r2, r1
   e890e:	d100      	bne.n	e8912 <memmove+0x2a>
   e8910:	bd10      	pop	{r4, pc}
   e8912:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   e8916:	f802 4d01 	strb.w	r4, [r2, #-1]!
   e891a:	e7f7      	b.n	e890c <memmove+0x24>

000e891c <memset>:
   e891c:	4402      	add	r2, r0
   e891e:	4603      	mov	r3, r0
   e8920:	4293      	cmp	r3, r2
   e8922:	d100      	bne.n	e8926 <memset+0xa>
   e8924:	4770      	bx	lr
   e8926:	f803 1b01 	strb.w	r1, [r3], #1
   e892a:	e7f9      	b.n	e8920 <memset+0x4>

000e892c <_calloc_r>:
   e892c:	b513      	push	{r0, r1, r4, lr}
   e892e:	434a      	muls	r2, r1
   e8930:	4611      	mov	r1, r2
   e8932:	9201      	str	r2, [sp, #4]
   e8934:	f7fc ff6c 	bl	e5810 <_malloc_r>
   e8938:	4604      	mov	r4, r0
   e893a:	b118      	cbz	r0, e8944 <_calloc_r+0x18>
   e893c:	9a01      	ldr	r2, [sp, #4]
   e893e:	2100      	movs	r1, #0
   e8940:	f7ff ffec 	bl	e891c <memset>
   e8944:	4620      	mov	r0, r4
   e8946:	b002      	add	sp, #8
   e8948:	bd10      	pop	{r4, pc}
	...

000e894c <srand>:
   e894c:	b538      	push	{r3, r4, r5, lr}
   e894e:	4b0d      	ldr	r3, [pc, #52]	; (e8984 <srand+0x38>)
   e8950:	681d      	ldr	r5, [r3, #0]
   e8952:	6bab      	ldr	r3, [r5, #56]	; 0x38
   e8954:	4604      	mov	r4, r0
   e8956:	b97b      	cbnz	r3, e8978 <srand+0x2c>
   e8958:	2018      	movs	r0, #24
   e895a:	f7fc ff29 	bl	e57b0 <malloc>
   e895e:	4a0a      	ldr	r2, [pc, #40]	; (e8988 <srand+0x3c>)
   e8960:	4b0a      	ldr	r3, [pc, #40]	; (e898c <srand+0x40>)
   e8962:	63a8      	str	r0, [r5, #56]	; 0x38
   e8964:	e9c0 2300 	strd	r2, r3, [r0]
   e8968:	4b09      	ldr	r3, [pc, #36]	; (e8990 <srand+0x44>)
   e896a:	6083      	str	r3, [r0, #8]
   e896c:	230b      	movs	r3, #11
   e896e:	8183      	strh	r3, [r0, #12]
   e8970:	2201      	movs	r2, #1
   e8972:	2300      	movs	r3, #0
   e8974:	e9c0 2304 	strd	r2, r3, [r0, #16]
   e8978:	6bab      	ldr	r3, [r5, #56]	; 0x38
   e897a:	2200      	movs	r2, #0
   e897c:	611c      	str	r4, [r3, #16]
   e897e:	615a      	str	r2, [r3, #20]
   e8980:	bd38      	pop	{r3, r4, r5, pc}
   e8982:	bf00      	nop
   e8984:	2003ac90 	.word	0x2003ac90
   e8988:	abcd330e 	.word	0xabcd330e
   e898c:	e66d1234 	.word	0xe66d1234
   e8990:	0005deec 	.word	0x0005deec

000e8994 <strcmp>:
   e8994:	f810 2b01 	ldrb.w	r2, [r0], #1
   e8998:	f811 3b01 	ldrb.w	r3, [r1], #1
   e899c:	2a01      	cmp	r2, #1
   e899e:	bf28      	it	cs
   e89a0:	429a      	cmpcs	r2, r3
   e89a2:	d0f7      	beq.n	e8994 <strcmp>
   e89a4:	1ad0      	subs	r0, r2, r3
   e89a6:	4770      	bx	lr

000e89a8 <strcpy>:
   e89a8:	4603      	mov	r3, r0
   e89aa:	f811 2b01 	ldrb.w	r2, [r1], #1
   e89ae:	f803 2b01 	strb.w	r2, [r3], #1
   e89b2:	2a00      	cmp	r2, #0
   e89b4:	d1f9      	bne.n	e89aa <strcpy+0x2>
   e89b6:	4770      	bx	lr

000e89b8 <strlen>:
   e89b8:	4603      	mov	r3, r0
   e89ba:	f813 2b01 	ldrb.w	r2, [r3], #1
   e89be:	2a00      	cmp	r2, #0
   e89c0:	d1fb      	bne.n	e89ba <strlen+0x2>
   e89c2:	1a18      	subs	r0, r3, r0
   e89c4:	3801      	subs	r0, #1
   e89c6:	4770      	bx	lr

000e89c8 <strncmp>:
   e89c8:	b510      	push	{r4, lr}
   e89ca:	b16a      	cbz	r2, e89e8 <strncmp+0x20>
   e89cc:	3901      	subs	r1, #1
   e89ce:	1884      	adds	r4, r0, r2
   e89d0:	f810 3b01 	ldrb.w	r3, [r0], #1
   e89d4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   e89d8:	4293      	cmp	r3, r2
   e89da:	d103      	bne.n	e89e4 <strncmp+0x1c>
   e89dc:	42a0      	cmp	r0, r4
   e89de:	d001      	beq.n	e89e4 <strncmp+0x1c>
   e89e0:	2b00      	cmp	r3, #0
   e89e2:	d1f5      	bne.n	e89d0 <strncmp+0x8>
   e89e4:	1a98      	subs	r0, r3, r2
   e89e6:	bd10      	pop	{r4, pc}
   e89e8:	4610      	mov	r0, r2
   e89ea:	e7fc      	b.n	e89e6 <strncmp+0x1e>

000e89ec <strstr>:
   e89ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   e89ee:	780c      	ldrb	r4, [r1, #0]
   e89f0:	b164      	cbz	r4, e8a0c <strstr+0x20>
   e89f2:	4603      	mov	r3, r0
   e89f4:	781a      	ldrb	r2, [r3, #0]
   e89f6:	4618      	mov	r0, r3
   e89f8:	1c5e      	adds	r6, r3, #1
   e89fa:	b90a      	cbnz	r2, e8a00 <strstr+0x14>
   e89fc:	4610      	mov	r0, r2
   e89fe:	e005      	b.n	e8a0c <strstr+0x20>
   e8a00:	4294      	cmp	r4, r2
   e8a02:	d108      	bne.n	e8a16 <strstr+0x2a>
   e8a04:	460d      	mov	r5, r1
   e8a06:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   e8a0a:	b902      	cbnz	r2, e8a0e <strstr+0x22>
   e8a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e8a0e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
   e8a12:	4297      	cmp	r7, r2
   e8a14:	d0f7      	beq.n	e8a06 <strstr+0x1a>
   e8a16:	4633      	mov	r3, r6
   e8a18:	e7ec      	b.n	e89f4 <strstr+0x8>

000e8a1a <sulp>:
   e8a1a:	b570      	push	{r4, r5, r6, lr}
   e8a1c:	4604      	mov	r4, r0
   e8a1e:	460d      	mov	r5, r1
   e8a20:	ec45 4b10 	vmov	d0, r4, r5
   e8a24:	4616      	mov	r6, r2
   e8a26:	f001 fd37 	bl	ea498 <__ulp>
   e8a2a:	ec51 0b10 	vmov	r0, r1, d0
   e8a2e:	b17e      	cbz	r6, e8a50 <sulp+0x36>
   e8a30:	f3c5 530a 	ubfx	r3, r5, #20, #11
   e8a34:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   e8a38:	2b00      	cmp	r3, #0
   e8a3a:	dd09      	ble.n	e8a50 <sulp+0x36>
   e8a3c:	051b      	lsls	r3, r3, #20
   e8a3e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   e8a42:	2400      	movs	r4, #0
   e8a44:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   e8a48:	4622      	mov	r2, r4
   e8a4a:	462b      	mov	r3, r5
   e8a4c:	f7ff fa6c 	bl	e7f28 <__aeabi_dmul>
   e8a50:	bd70      	pop	{r4, r5, r6, pc}
   e8a52:	0000      	movs	r0, r0
   e8a54:	0000      	movs	r0, r0
	...

000e8a58 <_strtod_l>:
   e8a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e8a5c:	b0a3      	sub	sp, #140	; 0x8c
   e8a5e:	461f      	mov	r7, r3
   e8a60:	2300      	movs	r3, #0
   e8a62:	931e      	str	r3, [sp, #120]	; 0x78
   e8a64:	4ba4      	ldr	r3, [pc, #656]	; (e8cf8 <_strtod_l+0x2a0>)
   e8a66:	9219      	str	r2, [sp, #100]	; 0x64
   e8a68:	681b      	ldr	r3, [r3, #0]
   e8a6a:	9307      	str	r3, [sp, #28]
   e8a6c:	4604      	mov	r4, r0
   e8a6e:	4618      	mov	r0, r3
   e8a70:	4688      	mov	r8, r1
   e8a72:	f7ff ffa1 	bl	e89b8 <strlen>
   e8a76:	f04f 0a00 	mov.w	sl, #0
   e8a7a:	4605      	mov	r5, r0
   e8a7c:	f04f 0b00 	mov.w	fp, #0
   e8a80:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   e8a84:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e8a86:	781a      	ldrb	r2, [r3, #0]
   e8a88:	2a2b      	cmp	r2, #43	; 0x2b
   e8a8a:	d04c      	beq.n	e8b26 <_strtod_l+0xce>
   e8a8c:	d839      	bhi.n	e8b02 <_strtod_l+0xaa>
   e8a8e:	2a0d      	cmp	r2, #13
   e8a90:	d832      	bhi.n	e8af8 <_strtod_l+0xa0>
   e8a92:	2a08      	cmp	r2, #8
   e8a94:	d832      	bhi.n	e8afc <_strtod_l+0xa4>
   e8a96:	2a00      	cmp	r2, #0
   e8a98:	d03c      	beq.n	e8b14 <_strtod_l+0xbc>
   e8a9a:	2300      	movs	r3, #0
   e8a9c:	930e      	str	r3, [sp, #56]	; 0x38
   e8a9e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
   e8aa0:	7833      	ldrb	r3, [r6, #0]
   e8aa2:	2b30      	cmp	r3, #48	; 0x30
   e8aa4:	f040 80b4 	bne.w	e8c10 <_strtod_l+0x1b8>
   e8aa8:	7873      	ldrb	r3, [r6, #1]
   e8aaa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   e8aae:	2b58      	cmp	r3, #88	; 0x58
   e8ab0:	d16c      	bne.n	e8b8c <_strtod_l+0x134>
   e8ab2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   e8ab4:	9301      	str	r3, [sp, #4]
   e8ab6:	ab1e      	add	r3, sp, #120	; 0x78
   e8ab8:	9702      	str	r7, [sp, #8]
   e8aba:	9300      	str	r3, [sp, #0]
   e8abc:	4a8f      	ldr	r2, [pc, #572]	; (e8cfc <_strtod_l+0x2a4>)
   e8abe:	ab1f      	add	r3, sp, #124	; 0x7c
   e8ac0:	a91d      	add	r1, sp, #116	; 0x74
   e8ac2:	4620      	mov	r0, r4
   e8ac4:	f000 fed2 	bl	e986c <__gethex>
   e8ac8:	f010 0707 	ands.w	r7, r0, #7
   e8acc:	4605      	mov	r5, r0
   e8ace:	d005      	beq.n	e8adc <_strtod_l+0x84>
   e8ad0:	2f06      	cmp	r7, #6
   e8ad2:	d12a      	bne.n	e8b2a <_strtod_l+0xd2>
   e8ad4:	3601      	adds	r6, #1
   e8ad6:	2300      	movs	r3, #0
   e8ad8:	961d      	str	r6, [sp, #116]	; 0x74
   e8ada:	930e      	str	r3, [sp, #56]	; 0x38
   e8adc:	9b19      	ldr	r3, [sp, #100]	; 0x64
   e8ade:	2b00      	cmp	r3, #0
   e8ae0:	f040 8596 	bne.w	e9610 <_strtod_l+0xbb8>
   e8ae4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   e8ae6:	b1db      	cbz	r3, e8b20 <_strtod_l+0xc8>
   e8ae8:	4652      	mov	r2, sl
   e8aea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   e8aee:	ec43 2b10 	vmov	d0, r2, r3
   e8af2:	b023      	add	sp, #140	; 0x8c
   e8af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e8af8:	2a20      	cmp	r2, #32
   e8afa:	d1ce      	bne.n	e8a9a <_strtod_l+0x42>
   e8afc:	3301      	adds	r3, #1
   e8afe:	931d      	str	r3, [sp, #116]	; 0x74
   e8b00:	e7c0      	b.n	e8a84 <_strtod_l+0x2c>
   e8b02:	2a2d      	cmp	r2, #45	; 0x2d
   e8b04:	d1c9      	bne.n	e8a9a <_strtod_l+0x42>
   e8b06:	2201      	movs	r2, #1
   e8b08:	920e      	str	r2, [sp, #56]	; 0x38
   e8b0a:	1c5a      	adds	r2, r3, #1
   e8b0c:	921d      	str	r2, [sp, #116]	; 0x74
   e8b0e:	785b      	ldrb	r3, [r3, #1]
   e8b10:	2b00      	cmp	r3, #0
   e8b12:	d1c4      	bne.n	e8a9e <_strtod_l+0x46>
   e8b14:	9b19      	ldr	r3, [sp, #100]	; 0x64
   e8b16:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   e8b1a:	2b00      	cmp	r3, #0
   e8b1c:	f040 8576 	bne.w	e960c <_strtod_l+0xbb4>
   e8b20:	4652      	mov	r2, sl
   e8b22:	465b      	mov	r3, fp
   e8b24:	e7e3      	b.n	e8aee <_strtod_l+0x96>
   e8b26:	2200      	movs	r2, #0
   e8b28:	e7ee      	b.n	e8b08 <_strtod_l+0xb0>
   e8b2a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   e8b2c:	b13a      	cbz	r2, e8b3e <_strtod_l+0xe6>
   e8b2e:	2135      	movs	r1, #53	; 0x35
   e8b30:	a820      	add	r0, sp, #128	; 0x80
   e8b32:	f001 fdb0 	bl	ea696 <__copybits>
   e8b36:	991e      	ldr	r1, [sp, #120]	; 0x78
   e8b38:	4620      	mov	r0, r4
   e8b3a:	f001 f9e5 	bl	e9f08 <_Bfree>
   e8b3e:	3f01      	subs	r7, #1
   e8b40:	2f05      	cmp	r7, #5
   e8b42:	d807      	bhi.n	e8b54 <_strtod_l+0xfc>
   e8b44:	e8df f007 	tbb	[pc, r7]
   e8b48:	1d180b0e 	.word	0x1d180b0e
   e8b4c:	030e      	.short	0x030e
   e8b4e:	f04f 0b00 	mov.w	fp, #0
   e8b52:	46da      	mov	sl, fp
   e8b54:	0728      	lsls	r0, r5, #28
   e8b56:	d5c1      	bpl.n	e8adc <_strtod_l+0x84>
   e8b58:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   e8b5c:	e7be      	b.n	e8adc <_strtod_l+0x84>
   e8b5e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
   e8b62:	e7f7      	b.n	e8b54 <_strtod_l+0xfc>
   e8b64:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
   e8b68:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   e8b6a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   e8b6e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   e8b72:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   e8b76:	e7ed      	b.n	e8b54 <_strtod_l+0xfc>
   e8b78:	f8df b184 	ldr.w	fp, [pc, #388]	; e8d00 <_strtod_l+0x2a8>
   e8b7c:	f04f 0a00 	mov.w	sl, #0
   e8b80:	e7e8      	b.n	e8b54 <_strtod_l+0xfc>
   e8b82:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   e8b86:	f04f 3aff 	mov.w	sl, #4294967295
   e8b8a:	e7e3      	b.n	e8b54 <_strtod_l+0xfc>
   e8b8c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e8b8e:	1c5a      	adds	r2, r3, #1
   e8b90:	921d      	str	r2, [sp, #116]	; 0x74
   e8b92:	785b      	ldrb	r3, [r3, #1]
   e8b94:	2b30      	cmp	r3, #48	; 0x30
   e8b96:	d0f9      	beq.n	e8b8c <_strtod_l+0x134>
   e8b98:	2b00      	cmp	r3, #0
   e8b9a:	d09f      	beq.n	e8adc <_strtod_l+0x84>
   e8b9c:	2301      	movs	r3, #1
   e8b9e:	f04f 0900 	mov.w	r9, #0
   e8ba2:	9304      	str	r3, [sp, #16]
   e8ba4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e8ba6:	930a      	str	r3, [sp, #40]	; 0x28
   e8ba8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   e8bac:	464f      	mov	r7, r9
   e8bae:	220a      	movs	r2, #10
   e8bb0:	981d      	ldr	r0, [sp, #116]	; 0x74
   e8bb2:	7806      	ldrb	r6, [r0, #0]
   e8bb4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   e8bb8:	b2d9      	uxtb	r1, r3
   e8bba:	2909      	cmp	r1, #9
   e8bbc:	d92a      	bls.n	e8c14 <_strtod_l+0x1bc>
   e8bbe:	9907      	ldr	r1, [sp, #28]
   e8bc0:	462a      	mov	r2, r5
   e8bc2:	f7ff ff01 	bl	e89c8 <strncmp>
   e8bc6:	b398      	cbz	r0, e8c30 <_strtod_l+0x1d8>
   e8bc8:	2000      	movs	r0, #0
   e8bca:	4633      	mov	r3, r6
   e8bcc:	463d      	mov	r5, r7
   e8bce:	9007      	str	r0, [sp, #28]
   e8bd0:	4602      	mov	r2, r0
   e8bd2:	2b65      	cmp	r3, #101	; 0x65
   e8bd4:	d001      	beq.n	e8bda <_strtod_l+0x182>
   e8bd6:	2b45      	cmp	r3, #69	; 0x45
   e8bd8:	d118      	bne.n	e8c0c <_strtod_l+0x1b4>
   e8bda:	b91d      	cbnz	r5, e8be4 <_strtod_l+0x18c>
   e8bdc:	9b04      	ldr	r3, [sp, #16]
   e8bde:	4303      	orrs	r3, r0
   e8be0:	d098      	beq.n	e8b14 <_strtod_l+0xbc>
   e8be2:	2500      	movs	r5, #0
   e8be4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
   e8be8:	f108 0301 	add.w	r3, r8, #1
   e8bec:	931d      	str	r3, [sp, #116]	; 0x74
   e8bee:	f898 3001 	ldrb.w	r3, [r8, #1]
   e8bf2:	2b2b      	cmp	r3, #43	; 0x2b
   e8bf4:	d075      	beq.n	e8ce2 <_strtod_l+0x28a>
   e8bf6:	2b2d      	cmp	r3, #45	; 0x2d
   e8bf8:	d07b      	beq.n	e8cf2 <_strtod_l+0x29a>
   e8bfa:	f04f 0c00 	mov.w	ip, #0
   e8bfe:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   e8c02:	2909      	cmp	r1, #9
   e8c04:	f240 8082 	bls.w	e8d0c <_strtod_l+0x2b4>
   e8c08:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   e8c0c:	2600      	movs	r6, #0
   e8c0e:	e09d      	b.n	e8d4c <_strtod_l+0x2f4>
   e8c10:	2300      	movs	r3, #0
   e8c12:	e7c4      	b.n	e8b9e <_strtod_l+0x146>
   e8c14:	2f08      	cmp	r7, #8
   e8c16:	bfd8      	it	le
   e8c18:	9909      	ldrle	r1, [sp, #36]	; 0x24
   e8c1a:	f100 0001 	add.w	r0, r0, #1
   e8c1e:	bfda      	itte	le
   e8c20:	fb02 3301 	mlale	r3, r2, r1, r3
   e8c24:	9309      	strle	r3, [sp, #36]	; 0x24
   e8c26:	fb02 3909 	mlagt	r9, r2, r9, r3
   e8c2a:	3701      	adds	r7, #1
   e8c2c:	901d      	str	r0, [sp, #116]	; 0x74
   e8c2e:	e7bf      	b.n	e8bb0 <_strtod_l+0x158>
   e8c30:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e8c32:	195a      	adds	r2, r3, r5
   e8c34:	921d      	str	r2, [sp, #116]	; 0x74
   e8c36:	5d5b      	ldrb	r3, [r3, r5]
   e8c38:	2f00      	cmp	r7, #0
   e8c3a:	d037      	beq.n	e8cac <_strtod_l+0x254>
   e8c3c:	9007      	str	r0, [sp, #28]
   e8c3e:	463d      	mov	r5, r7
   e8c40:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   e8c44:	2a09      	cmp	r2, #9
   e8c46:	d912      	bls.n	e8c6e <_strtod_l+0x216>
   e8c48:	2201      	movs	r2, #1
   e8c4a:	e7c2      	b.n	e8bd2 <_strtod_l+0x17a>
   e8c4c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e8c4e:	1c5a      	adds	r2, r3, #1
   e8c50:	921d      	str	r2, [sp, #116]	; 0x74
   e8c52:	785b      	ldrb	r3, [r3, #1]
   e8c54:	3001      	adds	r0, #1
   e8c56:	2b30      	cmp	r3, #48	; 0x30
   e8c58:	d0f8      	beq.n	e8c4c <_strtod_l+0x1f4>
   e8c5a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   e8c5e:	2a08      	cmp	r2, #8
   e8c60:	f200 84db 	bhi.w	e961a <_strtod_l+0xbc2>
   e8c64:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   e8c66:	9007      	str	r0, [sp, #28]
   e8c68:	2000      	movs	r0, #0
   e8c6a:	920a      	str	r2, [sp, #40]	; 0x28
   e8c6c:	4605      	mov	r5, r0
   e8c6e:	3b30      	subs	r3, #48	; 0x30
   e8c70:	f100 0201 	add.w	r2, r0, #1
   e8c74:	d014      	beq.n	e8ca0 <_strtod_l+0x248>
   e8c76:	9907      	ldr	r1, [sp, #28]
   e8c78:	4411      	add	r1, r2
   e8c7a:	9107      	str	r1, [sp, #28]
   e8c7c:	462a      	mov	r2, r5
   e8c7e:	eb00 0e05 	add.w	lr, r0, r5
   e8c82:	210a      	movs	r1, #10
   e8c84:	4572      	cmp	r2, lr
   e8c86:	d113      	bne.n	e8cb0 <_strtod_l+0x258>
   e8c88:	182a      	adds	r2, r5, r0
   e8c8a:	2a08      	cmp	r2, #8
   e8c8c:	f105 0501 	add.w	r5, r5, #1
   e8c90:	4405      	add	r5, r0
   e8c92:	dc1c      	bgt.n	e8cce <_strtod_l+0x276>
   e8c94:	9909      	ldr	r1, [sp, #36]	; 0x24
   e8c96:	220a      	movs	r2, #10
   e8c98:	fb02 3301 	mla	r3, r2, r1, r3
   e8c9c:	9309      	str	r3, [sp, #36]	; 0x24
   e8c9e:	2200      	movs	r2, #0
   e8ca0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e8ca2:	1c59      	adds	r1, r3, #1
   e8ca4:	911d      	str	r1, [sp, #116]	; 0x74
   e8ca6:	785b      	ldrb	r3, [r3, #1]
   e8ca8:	4610      	mov	r0, r2
   e8caa:	e7c9      	b.n	e8c40 <_strtod_l+0x1e8>
   e8cac:	4638      	mov	r0, r7
   e8cae:	e7d2      	b.n	e8c56 <_strtod_l+0x1fe>
   e8cb0:	2a08      	cmp	r2, #8
   e8cb2:	dc04      	bgt.n	e8cbe <_strtod_l+0x266>
   e8cb4:	9e09      	ldr	r6, [sp, #36]	; 0x24
   e8cb6:	434e      	muls	r6, r1
   e8cb8:	9609      	str	r6, [sp, #36]	; 0x24
   e8cba:	3201      	adds	r2, #1
   e8cbc:	e7e2      	b.n	e8c84 <_strtod_l+0x22c>
   e8cbe:	f102 0c01 	add.w	ip, r2, #1
   e8cc2:	f1bc 0f10 	cmp.w	ip, #16
   e8cc6:	bfd8      	it	le
   e8cc8:	fb01 f909 	mulle.w	r9, r1, r9
   e8ccc:	e7f5      	b.n	e8cba <_strtod_l+0x262>
   e8cce:	2d10      	cmp	r5, #16
   e8cd0:	bfdc      	itt	le
   e8cd2:	220a      	movle	r2, #10
   e8cd4:	fb02 3909 	mlale	r9, r2, r9, r3
   e8cd8:	e7e1      	b.n	e8c9e <_strtod_l+0x246>
   e8cda:	2300      	movs	r3, #0
   e8cdc:	9307      	str	r3, [sp, #28]
   e8cde:	2201      	movs	r2, #1
   e8ce0:	e77c      	b.n	e8bdc <_strtod_l+0x184>
   e8ce2:	f04f 0c00 	mov.w	ip, #0
   e8ce6:	f108 0302 	add.w	r3, r8, #2
   e8cea:	931d      	str	r3, [sp, #116]	; 0x74
   e8cec:	f898 3002 	ldrb.w	r3, [r8, #2]
   e8cf0:	e785      	b.n	e8bfe <_strtod_l+0x1a6>
   e8cf2:	f04f 0c01 	mov.w	ip, #1
   e8cf6:	e7f6      	b.n	e8ce6 <_strtod_l+0x28e>
   e8cf8:	000ed984 	.word	0x000ed984
   e8cfc:	000ed830 	.word	0x000ed830
   e8d00:	7ff00000 	.word	0x7ff00000
   e8d04:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e8d06:	1c59      	adds	r1, r3, #1
   e8d08:	911d      	str	r1, [sp, #116]	; 0x74
   e8d0a:	785b      	ldrb	r3, [r3, #1]
   e8d0c:	2b30      	cmp	r3, #48	; 0x30
   e8d0e:	d0f9      	beq.n	e8d04 <_strtod_l+0x2ac>
   e8d10:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
   e8d14:	2908      	cmp	r1, #8
   e8d16:	f63f af79 	bhi.w	e8c0c <_strtod_l+0x1b4>
   e8d1a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   e8d1e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e8d20:	9308      	str	r3, [sp, #32]
   e8d22:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e8d24:	1c59      	adds	r1, r3, #1
   e8d26:	911d      	str	r1, [sp, #116]	; 0x74
   e8d28:	785b      	ldrb	r3, [r3, #1]
   e8d2a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   e8d2e:	2e09      	cmp	r6, #9
   e8d30:	d937      	bls.n	e8da2 <_strtod_l+0x34a>
   e8d32:	9e08      	ldr	r6, [sp, #32]
   e8d34:	1b89      	subs	r1, r1, r6
   e8d36:	2908      	cmp	r1, #8
   e8d38:	f644 661f 	movw	r6, #19999	; 0x4e1f
   e8d3c:	dc02      	bgt.n	e8d44 <_strtod_l+0x2ec>
   e8d3e:	4576      	cmp	r6, lr
   e8d40:	bfa8      	it	ge
   e8d42:	4676      	movge	r6, lr
   e8d44:	f1bc 0f00 	cmp.w	ip, #0
   e8d48:	d000      	beq.n	e8d4c <_strtod_l+0x2f4>
   e8d4a:	4276      	negs	r6, r6
   e8d4c:	2d00      	cmp	r5, #0
   e8d4e:	d14f      	bne.n	e8df0 <_strtod_l+0x398>
   e8d50:	9904      	ldr	r1, [sp, #16]
   e8d52:	4301      	orrs	r1, r0
   e8d54:	f47f aec2 	bne.w	e8adc <_strtod_l+0x84>
   e8d58:	2a00      	cmp	r2, #0
   e8d5a:	f47f aedb 	bne.w	e8b14 <_strtod_l+0xbc>
   e8d5e:	2b69      	cmp	r3, #105	; 0x69
   e8d60:	d027      	beq.n	e8db2 <_strtod_l+0x35a>
   e8d62:	dc24      	bgt.n	e8dae <_strtod_l+0x356>
   e8d64:	2b49      	cmp	r3, #73	; 0x49
   e8d66:	d024      	beq.n	e8db2 <_strtod_l+0x35a>
   e8d68:	2b4e      	cmp	r3, #78	; 0x4e
   e8d6a:	f47f aed3 	bne.w	e8b14 <_strtod_l+0xbc>
   e8d6e:	499e      	ldr	r1, [pc, #632]	; (e8fe8 <_strtod_l+0x590>)
   e8d70:	a81d      	add	r0, sp, #116	; 0x74
   e8d72:	f000 ffc1 	bl	e9cf8 <__match>
   e8d76:	2800      	cmp	r0, #0
   e8d78:	f43f aecc 	beq.w	e8b14 <_strtod_l+0xbc>
   e8d7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e8d7e:	781b      	ldrb	r3, [r3, #0]
   e8d80:	2b28      	cmp	r3, #40	; 0x28
   e8d82:	d12d      	bne.n	e8de0 <_strtod_l+0x388>
   e8d84:	4999      	ldr	r1, [pc, #612]	; (e8fec <_strtod_l+0x594>)
   e8d86:	aa20      	add	r2, sp, #128	; 0x80
   e8d88:	a81d      	add	r0, sp, #116	; 0x74
   e8d8a:	f000 ffc9 	bl	e9d20 <__hexnan>
   e8d8e:	2805      	cmp	r0, #5
   e8d90:	d126      	bne.n	e8de0 <_strtod_l+0x388>
   e8d92:	9b21      	ldr	r3, [sp, #132]	; 0x84
   e8d94:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
   e8d98:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   e8d9c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   e8da0:	e69c      	b.n	e8adc <_strtod_l+0x84>
   e8da2:	210a      	movs	r1, #10
   e8da4:	fb01 3e0e 	mla	lr, r1, lr, r3
   e8da8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   e8dac:	e7b9      	b.n	e8d22 <_strtod_l+0x2ca>
   e8dae:	2b6e      	cmp	r3, #110	; 0x6e
   e8db0:	e7db      	b.n	e8d6a <_strtod_l+0x312>
   e8db2:	498f      	ldr	r1, [pc, #572]	; (e8ff0 <_strtod_l+0x598>)
   e8db4:	a81d      	add	r0, sp, #116	; 0x74
   e8db6:	f000 ff9f 	bl	e9cf8 <__match>
   e8dba:	2800      	cmp	r0, #0
   e8dbc:	f43f aeaa 	beq.w	e8b14 <_strtod_l+0xbc>
   e8dc0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e8dc2:	498c      	ldr	r1, [pc, #560]	; (e8ff4 <_strtod_l+0x59c>)
   e8dc4:	3b01      	subs	r3, #1
   e8dc6:	a81d      	add	r0, sp, #116	; 0x74
   e8dc8:	931d      	str	r3, [sp, #116]	; 0x74
   e8dca:	f000 ff95 	bl	e9cf8 <__match>
   e8dce:	b910      	cbnz	r0, e8dd6 <_strtod_l+0x37e>
   e8dd0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e8dd2:	3301      	adds	r3, #1
   e8dd4:	931d      	str	r3, [sp, #116]	; 0x74
   e8dd6:	f8df b22c 	ldr.w	fp, [pc, #556]	; e9004 <_strtod_l+0x5ac>
   e8dda:	f04f 0a00 	mov.w	sl, #0
   e8dde:	e67d      	b.n	e8adc <_strtod_l+0x84>
   e8de0:	4885      	ldr	r0, [pc, #532]	; (e8ff8 <_strtod_l+0x5a0>)
   e8de2:	f001 fc9d 	bl	ea720 <nan>
   e8de6:	ed8d 0b04 	vstr	d0, [sp, #16]
   e8dea:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   e8dee:	e675      	b.n	e8adc <_strtod_l+0x84>
   e8df0:	9b07      	ldr	r3, [sp, #28]
   e8df2:	9809      	ldr	r0, [sp, #36]	; 0x24
   e8df4:	1af3      	subs	r3, r6, r3
   e8df6:	2f00      	cmp	r7, #0
   e8df8:	bf08      	it	eq
   e8dfa:	462f      	moveq	r7, r5
   e8dfc:	2d10      	cmp	r5, #16
   e8dfe:	9308      	str	r3, [sp, #32]
   e8e00:	46a8      	mov	r8, r5
   e8e02:	bfa8      	it	ge
   e8e04:	f04f 0810 	movge.w	r8, #16
   e8e08:	f7ff f814 	bl	e7e34 <__aeabi_ui2d>
   e8e0c:	2d09      	cmp	r5, #9
   e8e0e:	4682      	mov	sl, r0
   e8e10:	468b      	mov	fp, r1
   e8e12:	dd13      	ble.n	e8e3c <_strtod_l+0x3e4>
   e8e14:	4b79      	ldr	r3, [pc, #484]	; (e8ffc <_strtod_l+0x5a4>)
   e8e16:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   e8e1a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   e8e1e:	f7ff f883 	bl	e7f28 <__aeabi_dmul>
   e8e22:	4682      	mov	sl, r0
   e8e24:	4648      	mov	r0, r9
   e8e26:	468b      	mov	fp, r1
   e8e28:	f7ff f804 	bl	e7e34 <__aeabi_ui2d>
   e8e2c:	4602      	mov	r2, r0
   e8e2e:	460b      	mov	r3, r1
   e8e30:	4650      	mov	r0, sl
   e8e32:	4659      	mov	r1, fp
   e8e34:	f7fe fec2 	bl	e7bbc <__adddf3>
   e8e38:	4682      	mov	sl, r0
   e8e3a:	468b      	mov	fp, r1
   e8e3c:	2d0f      	cmp	r5, #15
   e8e3e:	dc38      	bgt.n	e8eb2 <_strtod_l+0x45a>
   e8e40:	9b08      	ldr	r3, [sp, #32]
   e8e42:	2b00      	cmp	r3, #0
   e8e44:	f43f ae4a 	beq.w	e8adc <_strtod_l+0x84>
   e8e48:	dd24      	ble.n	e8e94 <_strtod_l+0x43c>
   e8e4a:	2b16      	cmp	r3, #22
   e8e4c:	dc0b      	bgt.n	e8e66 <_strtod_l+0x40e>
   e8e4e:	4d6b      	ldr	r5, [pc, #428]	; (e8ffc <_strtod_l+0x5a4>)
   e8e50:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   e8e54:	e9d5 0100 	ldrd	r0, r1, [r5]
   e8e58:	4652      	mov	r2, sl
   e8e5a:	465b      	mov	r3, fp
   e8e5c:	f7ff f864 	bl	e7f28 <__aeabi_dmul>
   e8e60:	4682      	mov	sl, r0
   e8e62:	468b      	mov	fp, r1
   e8e64:	e63a      	b.n	e8adc <_strtod_l+0x84>
   e8e66:	9a08      	ldr	r2, [sp, #32]
   e8e68:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   e8e6c:	4293      	cmp	r3, r2
   e8e6e:	db20      	blt.n	e8eb2 <_strtod_l+0x45a>
   e8e70:	4c62      	ldr	r4, [pc, #392]	; (e8ffc <_strtod_l+0x5a4>)
   e8e72:	f1c5 050f 	rsb	r5, r5, #15
   e8e76:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   e8e7a:	4652      	mov	r2, sl
   e8e7c:	465b      	mov	r3, fp
   e8e7e:	e9d1 0100 	ldrd	r0, r1, [r1]
   e8e82:	f7ff f851 	bl	e7f28 <__aeabi_dmul>
   e8e86:	9b08      	ldr	r3, [sp, #32]
   e8e88:	1b5d      	subs	r5, r3, r5
   e8e8a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   e8e8e:	e9d4 2300 	ldrd	r2, r3, [r4]
   e8e92:	e7e3      	b.n	e8e5c <_strtod_l+0x404>
   e8e94:	9b08      	ldr	r3, [sp, #32]
   e8e96:	3316      	adds	r3, #22
   e8e98:	db0b      	blt.n	e8eb2 <_strtod_l+0x45a>
   e8e9a:	9b07      	ldr	r3, [sp, #28]
   e8e9c:	4a57      	ldr	r2, [pc, #348]	; (e8ffc <_strtod_l+0x5a4>)
   e8e9e:	1b9e      	subs	r6, r3, r6
   e8ea0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
   e8ea4:	e9d6 2300 	ldrd	r2, r3, [r6]
   e8ea8:	4650      	mov	r0, sl
   e8eaa:	4659      	mov	r1, fp
   e8eac:	f7ff f966 	bl	e817c <__aeabi_ddiv>
   e8eb0:	e7d6      	b.n	e8e60 <_strtod_l+0x408>
   e8eb2:	9b08      	ldr	r3, [sp, #32]
   e8eb4:	eba5 0808 	sub.w	r8, r5, r8
   e8eb8:	4498      	add	r8, r3
   e8eba:	f1b8 0f00 	cmp.w	r8, #0
   e8ebe:	dd71      	ble.n	e8fa4 <_strtod_l+0x54c>
   e8ec0:	f018 030f 	ands.w	r3, r8, #15
   e8ec4:	d00a      	beq.n	e8edc <_strtod_l+0x484>
   e8ec6:	494d      	ldr	r1, [pc, #308]	; (e8ffc <_strtod_l+0x5a4>)
   e8ec8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   e8ecc:	4652      	mov	r2, sl
   e8ece:	465b      	mov	r3, fp
   e8ed0:	e9d1 0100 	ldrd	r0, r1, [r1]
   e8ed4:	f7ff f828 	bl	e7f28 <__aeabi_dmul>
   e8ed8:	4682      	mov	sl, r0
   e8eda:	468b      	mov	fp, r1
   e8edc:	f038 080f 	bics.w	r8, r8, #15
   e8ee0:	d04d      	beq.n	e8f7e <_strtod_l+0x526>
   e8ee2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   e8ee6:	dd22      	ble.n	e8f2e <_strtod_l+0x4d6>
   e8ee8:	2500      	movs	r5, #0
   e8eea:	462e      	mov	r6, r5
   e8eec:	9509      	str	r5, [sp, #36]	; 0x24
   e8eee:	9507      	str	r5, [sp, #28]
   e8ef0:	2322      	movs	r3, #34	; 0x22
   e8ef2:	f8df b110 	ldr.w	fp, [pc, #272]	; e9004 <_strtod_l+0x5ac>
   e8ef6:	6023      	str	r3, [r4, #0]
   e8ef8:	f04f 0a00 	mov.w	sl, #0
   e8efc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e8efe:	2b00      	cmp	r3, #0
   e8f00:	f43f adec 	beq.w	e8adc <_strtod_l+0x84>
   e8f04:	991e      	ldr	r1, [sp, #120]	; 0x78
   e8f06:	4620      	mov	r0, r4
   e8f08:	f000 fffe 	bl	e9f08 <_Bfree>
   e8f0c:	9907      	ldr	r1, [sp, #28]
   e8f0e:	4620      	mov	r0, r4
   e8f10:	f000 fffa 	bl	e9f08 <_Bfree>
   e8f14:	4631      	mov	r1, r6
   e8f16:	4620      	mov	r0, r4
   e8f18:	f000 fff6 	bl	e9f08 <_Bfree>
   e8f1c:	9909      	ldr	r1, [sp, #36]	; 0x24
   e8f1e:	4620      	mov	r0, r4
   e8f20:	f000 fff2 	bl	e9f08 <_Bfree>
   e8f24:	4629      	mov	r1, r5
   e8f26:	4620      	mov	r0, r4
   e8f28:	f000 ffee 	bl	e9f08 <_Bfree>
   e8f2c:	e5d6      	b.n	e8adc <_strtod_l+0x84>
   e8f2e:	2300      	movs	r3, #0
   e8f30:	ea4f 1828 	mov.w	r8, r8, asr #4
   e8f34:	4650      	mov	r0, sl
   e8f36:	4659      	mov	r1, fp
   e8f38:	4699      	mov	r9, r3
   e8f3a:	f1b8 0f01 	cmp.w	r8, #1
   e8f3e:	dc21      	bgt.n	e8f84 <_strtod_l+0x52c>
   e8f40:	b10b      	cbz	r3, e8f46 <_strtod_l+0x4ee>
   e8f42:	4682      	mov	sl, r0
   e8f44:	468b      	mov	fp, r1
   e8f46:	4b2e      	ldr	r3, [pc, #184]	; (e9000 <_strtod_l+0x5a8>)
   e8f48:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   e8f4c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   e8f50:	4652      	mov	r2, sl
   e8f52:	465b      	mov	r3, fp
   e8f54:	e9d9 0100 	ldrd	r0, r1, [r9]
   e8f58:	f7fe ffe6 	bl	e7f28 <__aeabi_dmul>
   e8f5c:	4b29      	ldr	r3, [pc, #164]	; (e9004 <_strtod_l+0x5ac>)
   e8f5e:	460a      	mov	r2, r1
   e8f60:	400b      	ands	r3, r1
   e8f62:	4929      	ldr	r1, [pc, #164]	; (e9008 <_strtod_l+0x5b0>)
   e8f64:	428b      	cmp	r3, r1
   e8f66:	4682      	mov	sl, r0
   e8f68:	d8be      	bhi.n	e8ee8 <_strtod_l+0x490>
   e8f6a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   e8f6e:	428b      	cmp	r3, r1
   e8f70:	bf86      	itte	hi
   e8f72:	f8df b098 	ldrhi.w	fp, [pc, #152]	; e900c <_strtod_l+0x5b4>
   e8f76:	f04f 3aff 	movhi.w	sl, #4294967295
   e8f7a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   e8f7e:	2300      	movs	r3, #0
   e8f80:	9304      	str	r3, [sp, #16]
   e8f82:	e081      	b.n	e9088 <_strtod_l+0x630>
   e8f84:	f018 0f01 	tst.w	r8, #1
   e8f88:	d007      	beq.n	e8f9a <_strtod_l+0x542>
   e8f8a:	4b1d      	ldr	r3, [pc, #116]	; (e9000 <_strtod_l+0x5a8>)
   e8f8c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   e8f90:	e9d3 2300 	ldrd	r2, r3, [r3]
   e8f94:	f7fe ffc8 	bl	e7f28 <__aeabi_dmul>
   e8f98:	2301      	movs	r3, #1
   e8f9a:	f109 0901 	add.w	r9, r9, #1
   e8f9e:	ea4f 0868 	mov.w	r8, r8, asr #1
   e8fa2:	e7ca      	b.n	e8f3a <_strtod_l+0x4e2>
   e8fa4:	d0eb      	beq.n	e8f7e <_strtod_l+0x526>
   e8fa6:	f1c8 0800 	rsb	r8, r8, #0
   e8faa:	f018 020f 	ands.w	r2, r8, #15
   e8fae:	d00a      	beq.n	e8fc6 <_strtod_l+0x56e>
   e8fb0:	4b12      	ldr	r3, [pc, #72]	; (e8ffc <_strtod_l+0x5a4>)
   e8fb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   e8fb6:	4650      	mov	r0, sl
   e8fb8:	4659      	mov	r1, fp
   e8fba:	e9d3 2300 	ldrd	r2, r3, [r3]
   e8fbe:	f7ff f8dd 	bl	e817c <__aeabi_ddiv>
   e8fc2:	4682      	mov	sl, r0
   e8fc4:	468b      	mov	fp, r1
   e8fc6:	ea5f 1828 	movs.w	r8, r8, asr #4
   e8fca:	d0d8      	beq.n	e8f7e <_strtod_l+0x526>
   e8fcc:	f1b8 0f1f 	cmp.w	r8, #31
   e8fd0:	dd1e      	ble.n	e9010 <_strtod_l+0x5b8>
   e8fd2:	2500      	movs	r5, #0
   e8fd4:	462e      	mov	r6, r5
   e8fd6:	9509      	str	r5, [sp, #36]	; 0x24
   e8fd8:	9507      	str	r5, [sp, #28]
   e8fda:	2322      	movs	r3, #34	; 0x22
   e8fdc:	f04f 0a00 	mov.w	sl, #0
   e8fe0:	f04f 0b00 	mov.w	fp, #0
   e8fe4:	6023      	str	r3, [r4, #0]
   e8fe6:	e789      	b.n	e8efc <_strtod_l+0x4a4>
   e8fe8:	000ed82d 	.word	0x000ed82d
   e8fec:	000ed844 	.word	0x000ed844
   e8ff0:	000ed824 	.word	0x000ed824
   e8ff4:	000ed827 	.word	0x000ed827
   e8ff8:	000eb611 	.word	0x000eb611
   e8ffc:	000ed9c0 	.word	0x000ed9c0
   e9000:	000ed998 	.word	0x000ed998
   e9004:	7ff00000 	.word	0x7ff00000
   e9008:	7ca00000 	.word	0x7ca00000
   e900c:	7fefffff 	.word	0x7fefffff
   e9010:	f018 0310 	ands.w	r3, r8, #16
   e9014:	bf18      	it	ne
   e9016:	236a      	movne	r3, #106	; 0x6a
   e9018:	f8df 93b4 	ldr.w	r9, [pc, #948]	; e93d0 <_strtod_l+0x978>
   e901c:	9304      	str	r3, [sp, #16]
   e901e:	4650      	mov	r0, sl
   e9020:	4659      	mov	r1, fp
   e9022:	2300      	movs	r3, #0
   e9024:	f018 0f01 	tst.w	r8, #1
   e9028:	d004      	beq.n	e9034 <_strtod_l+0x5dc>
   e902a:	e9d9 2300 	ldrd	r2, r3, [r9]
   e902e:	f7fe ff7b 	bl	e7f28 <__aeabi_dmul>
   e9032:	2301      	movs	r3, #1
   e9034:	ea5f 0868 	movs.w	r8, r8, asr #1
   e9038:	f109 0908 	add.w	r9, r9, #8
   e903c:	d1f2      	bne.n	e9024 <_strtod_l+0x5cc>
   e903e:	b10b      	cbz	r3, e9044 <_strtod_l+0x5ec>
   e9040:	4682      	mov	sl, r0
   e9042:	468b      	mov	fp, r1
   e9044:	9b04      	ldr	r3, [sp, #16]
   e9046:	b1bb      	cbz	r3, e9078 <_strtod_l+0x620>
   e9048:	f3cb 530a 	ubfx	r3, fp, #20, #11
   e904c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   e9050:	2b00      	cmp	r3, #0
   e9052:	4659      	mov	r1, fp
   e9054:	dd10      	ble.n	e9078 <_strtod_l+0x620>
   e9056:	2b1f      	cmp	r3, #31
   e9058:	f340 8128 	ble.w	e92ac <_strtod_l+0x854>
   e905c:	2b34      	cmp	r3, #52	; 0x34
   e905e:	bfde      	ittt	le
   e9060:	3b20      	suble	r3, #32
   e9062:	f04f 32ff 	movle.w	r2, #4294967295
   e9066:	fa02 f303 	lslle.w	r3, r2, r3
   e906a:	f04f 0a00 	mov.w	sl, #0
   e906e:	bfcc      	ite	gt
   e9070:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   e9074:	ea03 0b01 	andle.w	fp, r3, r1
   e9078:	2200      	movs	r2, #0
   e907a:	2300      	movs	r3, #0
   e907c:	4650      	mov	r0, sl
   e907e:	4659      	mov	r1, fp
   e9080:	f7ff f9ba 	bl	e83f8 <__aeabi_dcmpeq>
   e9084:	2800      	cmp	r0, #0
   e9086:	d1a4      	bne.n	e8fd2 <_strtod_l+0x57a>
   e9088:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e908a:	9300      	str	r3, [sp, #0]
   e908c:	990a      	ldr	r1, [sp, #40]	; 0x28
   e908e:	462b      	mov	r3, r5
   e9090:	463a      	mov	r2, r7
   e9092:	4620      	mov	r0, r4
   e9094:	f000 ff8d 	bl	e9fb2 <__s2b>
   e9098:	9009      	str	r0, [sp, #36]	; 0x24
   e909a:	2800      	cmp	r0, #0
   e909c:	f43f af24 	beq.w	e8ee8 <_strtod_l+0x490>
   e90a0:	9b07      	ldr	r3, [sp, #28]
   e90a2:	1b9e      	subs	r6, r3, r6
   e90a4:	9b08      	ldr	r3, [sp, #32]
   e90a6:	2b00      	cmp	r3, #0
   e90a8:	bfb4      	ite	lt
   e90aa:	4633      	movlt	r3, r6
   e90ac:	2300      	movge	r3, #0
   e90ae:	9310      	str	r3, [sp, #64]	; 0x40
   e90b0:	9b08      	ldr	r3, [sp, #32]
   e90b2:	2500      	movs	r5, #0
   e90b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   e90b8:	9318      	str	r3, [sp, #96]	; 0x60
   e90ba:	462e      	mov	r6, r5
   e90bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e90be:	4620      	mov	r0, r4
   e90c0:	6859      	ldr	r1, [r3, #4]
   e90c2:	f000 feed 	bl	e9ea0 <_Balloc>
   e90c6:	9007      	str	r0, [sp, #28]
   e90c8:	2800      	cmp	r0, #0
   e90ca:	f43f af11 	beq.w	e8ef0 <_strtod_l+0x498>
   e90ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e90d0:	691a      	ldr	r2, [r3, #16]
   e90d2:	3202      	adds	r2, #2
   e90d4:	f103 010c 	add.w	r1, r3, #12
   e90d8:	0092      	lsls	r2, r2, #2
   e90da:	300c      	adds	r0, #12
   e90dc:	f7ff fbf6 	bl	e88cc <memcpy>
   e90e0:	ec4b ab10 	vmov	d0, sl, fp
   e90e4:	aa20      	add	r2, sp, #128	; 0x80
   e90e6:	a91f      	add	r1, sp, #124	; 0x7c
   e90e8:	4620      	mov	r0, r4
   e90ea:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
   e90ee:	f001 fa4f 	bl	ea590 <__d2b>
   e90f2:	901e      	str	r0, [sp, #120]	; 0x78
   e90f4:	2800      	cmp	r0, #0
   e90f6:	f43f aefb 	beq.w	e8ef0 <_strtod_l+0x498>
   e90fa:	2101      	movs	r1, #1
   e90fc:	4620      	mov	r0, r4
   e90fe:	f000 ffe6 	bl	ea0ce <__i2b>
   e9102:	4606      	mov	r6, r0
   e9104:	2800      	cmp	r0, #0
   e9106:	f43f aef3 	beq.w	e8ef0 <_strtod_l+0x498>
   e910a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   e910c:	9904      	ldr	r1, [sp, #16]
   e910e:	2b00      	cmp	r3, #0
   e9110:	bfab      	itete	ge
   e9112:	9a10      	ldrge	r2, [sp, #64]	; 0x40
   e9114:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
   e9116:	9f18      	ldrge	r7, [sp, #96]	; 0x60
   e9118:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
   e911c:	bfac      	ite	ge
   e911e:	eb03 0902 	addge.w	r9, r3, r2
   e9122:	1ad7      	sublt	r7, r2, r3
   e9124:	9a20      	ldr	r2, [sp, #128]	; 0x80
   e9126:	eba3 0801 	sub.w	r8, r3, r1
   e912a:	4490      	add	r8, r2
   e912c:	4ba3      	ldr	r3, [pc, #652]	; (e93bc <_strtod_l+0x964>)
   e912e:	f108 38ff 	add.w	r8, r8, #4294967295
   e9132:	4598      	cmp	r8, r3
   e9134:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   e9138:	f280 80cc 	bge.w	e92d4 <_strtod_l+0x87c>
   e913c:	eba3 0308 	sub.w	r3, r3, r8
   e9140:	2b1f      	cmp	r3, #31
   e9142:	eba2 0203 	sub.w	r2, r2, r3
   e9146:	f04f 0101 	mov.w	r1, #1
   e914a:	f300 80b6 	bgt.w	e92ba <_strtod_l+0x862>
   e914e:	fa01 f303 	lsl.w	r3, r1, r3
   e9152:	9311      	str	r3, [sp, #68]	; 0x44
   e9154:	2300      	movs	r3, #0
   e9156:	930c      	str	r3, [sp, #48]	; 0x30
   e9158:	eb09 0802 	add.w	r8, r9, r2
   e915c:	9b04      	ldr	r3, [sp, #16]
   e915e:	45c1      	cmp	r9, r8
   e9160:	4417      	add	r7, r2
   e9162:	441f      	add	r7, r3
   e9164:	464b      	mov	r3, r9
   e9166:	bfa8      	it	ge
   e9168:	4643      	movge	r3, r8
   e916a:	42bb      	cmp	r3, r7
   e916c:	bfa8      	it	ge
   e916e:	463b      	movge	r3, r7
   e9170:	2b00      	cmp	r3, #0
   e9172:	bfc2      	ittt	gt
   e9174:	eba8 0803 	subgt.w	r8, r8, r3
   e9178:	1aff      	subgt	r7, r7, r3
   e917a:	eba9 0903 	subgt.w	r9, r9, r3
   e917e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   e9180:	2b00      	cmp	r3, #0
   e9182:	dd17      	ble.n	e91b4 <_strtod_l+0x75c>
   e9184:	4631      	mov	r1, r6
   e9186:	461a      	mov	r2, r3
   e9188:	4620      	mov	r0, r4
   e918a:	f001 f845 	bl	ea218 <__pow5mult>
   e918e:	4606      	mov	r6, r0
   e9190:	2800      	cmp	r0, #0
   e9192:	f43f aead 	beq.w	e8ef0 <_strtod_l+0x498>
   e9196:	4601      	mov	r1, r0
   e9198:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   e919a:	4620      	mov	r0, r4
   e919c:	f000 ffa0 	bl	ea0e0 <__multiply>
   e91a0:	900f      	str	r0, [sp, #60]	; 0x3c
   e91a2:	2800      	cmp	r0, #0
   e91a4:	f43f aea4 	beq.w	e8ef0 <_strtod_l+0x498>
   e91a8:	991e      	ldr	r1, [sp, #120]	; 0x78
   e91aa:	4620      	mov	r0, r4
   e91ac:	f000 feac 	bl	e9f08 <_Bfree>
   e91b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   e91b2:	931e      	str	r3, [sp, #120]	; 0x78
   e91b4:	f1b8 0f00 	cmp.w	r8, #0
   e91b8:	f300 8091 	bgt.w	e92de <_strtod_l+0x886>
   e91bc:	9b08      	ldr	r3, [sp, #32]
   e91be:	2b00      	cmp	r3, #0
   e91c0:	dd08      	ble.n	e91d4 <_strtod_l+0x77c>
   e91c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
   e91c4:	9907      	ldr	r1, [sp, #28]
   e91c6:	4620      	mov	r0, r4
   e91c8:	f001 f826 	bl	ea218 <__pow5mult>
   e91cc:	9007      	str	r0, [sp, #28]
   e91ce:	2800      	cmp	r0, #0
   e91d0:	f43f ae8e 	beq.w	e8ef0 <_strtod_l+0x498>
   e91d4:	2f00      	cmp	r7, #0
   e91d6:	dd08      	ble.n	e91ea <_strtod_l+0x792>
   e91d8:	9907      	ldr	r1, [sp, #28]
   e91da:	463a      	mov	r2, r7
   e91dc:	4620      	mov	r0, r4
   e91de:	f001 f869 	bl	ea2b4 <__lshift>
   e91e2:	9007      	str	r0, [sp, #28]
   e91e4:	2800      	cmp	r0, #0
   e91e6:	f43f ae83 	beq.w	e8ef0 <_strtod_l+0x498>
   e91ea:	f1b9 0f00 	cmp.w	r9, #0
   e91ee:	dd08      	ble.n	e9202 <_strtod_l+0x7aa>
   e91f0:	4631      	mov	r1, r6
   e91f2:	464a      	mov	r2, r9
   e91f4:	4620      	mov	r0, r4
   e91f6:	f001 f85d 	bl	ea2b4 <__lshift>
   e91fa:	4606      	mov	r6, r0
   e91fc:	2800      	cmp	r0, #0
   e91fe:	f43f ae77 	beq.w	e8ef0 <_strtod_l+0x498>
   e9202:	9a07      	ldr	r2, [sp, #28]
   e9204:	991e      	ldr	r1, [sp, #120]	; 0x78
   e9206:	4620      	mov	r0, r4
   e9208:	f001 f8cf 	bl	ea3aa <__mdiff>
   e920c:	4605      	mov	r5, r0
   e920e:	2800      	cmp	r0, #0
   e9210:	f43f ae6e 	beq.w	e8ef0 <_strtod_l+0x498>
   e9214:	68c3      	ldr	r3, [r0, #12]
   e9216:	930f      	str	r3, [sp, #60]	; 0x3c
   e9218:	2300      	movs	r3, #0
   e921a:	60c3      	str	r3, [r0, #12]
   e921c:	4631      	mov	r1, r6
   e921e:	f001 f8a8 	bl	ea372 <__mcmp>
   e9222:	2800      	cmp	r0, #0
   e9224:	da65      	bge.n	e92f2 <_strtod_l+0x89a>
   e9226:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   e9228:	ea53 030a 	orrs.w	r3, r3, sl
   e922c:	f040 8087 	bne.w	e933e <_strtod_l+0x8e6>
   e9230:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e9234:	2b00      	cmp	r3, #0
   e9236:	f040 8082 	bne.w	e933e <_strtod_l+0x8e6>
   e923a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   e923e:	0d1b      	lsrs	r3, r3, #20
   e9240:	051b      	lsls	r3, r3, #20
   e9242:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   e9246:	d97a      	bls.n	e933e <_strtod_l+0x8e6>
   e9248:	696b      	ldr	r3, [r5, #20]
   e924a:	b913      	cbnz	r3, e9252 <_strtod_l+0x7fa>
   e924c:	692b      	ldr	r3, [r5, #16]
   e924e:	2b01      	cmp	r3, #1
   e9250:	dd75      	ble.n	e933e <_strtod_l+0x8e6>
   e9252:	4629      	mov	r1, r5
   e9254:	2201      	movs	r2, #1
   e9256:	4620      	mov	r0, r4
   e9258:	f001 f82c 	bl	ea2b4 <__lshift>
   e925c:	4631      	mov	r1, r6
   e925e:	4605      	mov	r5, r0
   e9260:	f001 f887 	bl	ea372 <__mcmp>
   e9264:	2800      	cmp	r0, #0
   e9266:	dd6a      	ble.n	e933e <_strtod_l+0x8e6>
   e9268:	9904      	ldr	r1, [sp, #16]
   e926a:	4a55      	ldr	r2, [pc, #340]	; (e93c0 <_strtod_l+0x968>)
   e926c:	465b      	mov	r3, fp
   e926e:	2900      	cmp	r1, #0
   e9270:	f000 8085 	beq.w	e937e <_strtod_l+0x926>
   e9274:	ea02 010b 	and.w	r1, r2, fp
   e9278:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   e927c:	dc7f      	bgt.n	e937e <_strtod_l+0x926>
   e927e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   e9282:	f77f aeaa 	ble.w	e8fda <_strtod_l+0x582>
   e9286:	4a4f      	ldr	r2, [pc, #316]	; (e93c4 <_strtod_l+0x96c>)
   e9288:	2300      	movs	r3, #0
   e928a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
   e928e:	4650      	mov	r0, sl
   e9290:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   e9294:	4659      	mov	r1, fp
   e9296:	f7fe fe47 	bl	e7f28 <__aeabi_dmul>
   e929a:	460b      	mov	r3, r1
   e929c:	4303      	orrs	r3, r0
   e929e:	bf08      	it	eq
   e92a0:	2322      	moveq	r3, #34	; 0x22
   e92a2:	4682      	mov	sl, r0
   e92a4:	468b      	mov	fp, r1
   e92a6:	bf08      	it	eq
   e92a8:	6023      	streq	r3, [r4, #0]
   e92aa:	e62b      	b.n	e8f04 <_strtod_l+0x4ac>
   e92ac:	f04f 32ff 	mov.w	r2, #4294967295
   e92b0:	fa02 f303 	lsl.w	r3, r2, r3
   e92b4:	ea03 0a0a 	and.w	sl, r3, sl
   e92b8:	e6de      	b.n	e9078 <_strtod_l+0x620>
   e92ba:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   e92be:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   e92c2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   e92c6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   e92ca:	fa01 f308 	lsl.w	r3, r1, r8
   e92ce:	930c      	str	r3, [sp, #48]	; 0x30
   e92d0:	9111      	str	r1, [sp, #68]	; 0x44
   e92d2:	e741      	b.n	e9158 <_strtod_l+0x700>
   e92d4:	2300      	movs	r3, #0
   e92d6:	930c      	str	r3, [sp, #48]	; 0x30
   e92d8:	2301      	movs	r3, #1
   e92da:	9311      	str	r3, [sp, #68]	; 0x44
   e92dc:	e73c      	b.n	e9158 <_strtod_l+0x700>
   e92de:	991e      	ldr	r1, [sp, #120]	; 0x78
   e92e0:	4642      	mov	r2, r8
   e92e2:	4620      	mov	r0, r4
   e92e4:	f000 ffe6 	bl	ea2b4 <__lshift>
   e92e8:	901e      	str	r0, [sp, #120]	; 0x78
   e92ea:	2800      	cmp	r0, #0
   e92ec:	f47f af66 	bne.w	e91bc <_strtod_l+0x764>
   e92f0:	e5fe      	b.n	e8ef0 <_strtod_l+0x498>
   e92f2:	465f      	mov	r7, fp
   e92f4:	d16e      	bne.n	e93d4 <_strtod_l+0x97c>
   e92f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   e92f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e92fc:	b342      	cbz	r2, e9350 <_strtod_l+0x8f8>
   e92fe:	4a32      	ldr	r2, [pc, #200]	; (e93c8 <_strtod_l+0x970>)
   e9300:	4293      	cmp	r3, r2
   e9302:	d128      	bne.n	e9356 <_strtod_l+0x8fe>
   e9304:	9b04      	ldr	r3, [sp, #16]
   e9306:	4650      	mov	r0, sl
   e9308:	b1eb      	cbz	r3, e9346 <_strtod_l+0x8ee>
   e930a:	4a2d      	ldr	r2, [pc, #180]	; (e93c0 <_strtod_l+0x968>)
   e930c:	403a      	ands	r2, r7
   e930e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
   e9312:	f04f 31ff 	mov.w	r1, #4294967295
   e9316:	d819      	bhi.n	e934c <_strtod_l+0x8f4>
   e9318:	0d12      	lsrs	r2, r2, #20
   e931a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   e931e:	fa01 f303 	lsl.w	r3, r1, r3
   e9322:	4298      	cmp	r0, r3
   e9324:	d117      	bne.n	e9356 <_strtod_l+0x8fe>
   e9326:	4b29      	ldr	r3, [pc, #164]	; (e93cc <_strtod_l+0x974>)
   e9328:	429f      	cmp	r7, r3
   e932a:	d102      	bne.n	e9332 <_strtod_l+0x8da>
   e932c:	3001      	adds	r0, #1
   e932e:	f43f addf 	beq.w	e8ef0 <_strtod_l+0x498>
   e9332:	4b23      	ldr	r3, [pc, #140]	; (e93c0 <_strtod_l+0x968>)
   e9334:	403b      	ands	r3, r7
   e9336:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   e933a:	f04f 0a00 	mov.w	sl, #0
   e933e:	9b04      	ldr	r3, [sp, #16]
   e9340:	2b00      	cmp	r3, #0
   e9342:	d1a0      	bne.n	e9286 <_strtod_l+0x82e>
   e9344:	e5de      	b.n	e8f04 <_strtod_l+0x4ac>
   e9346:	f04f 33ff 	mov.w	r3, #4294967295
   e934a:	e7ea      	b.n	e9322 <_strtod_l+0x8ca>
   e934c:	460b      	mov	r3, r1
   e934e:	e7e8      	b.n	e9322 <_strtod_l+0x8ca>
   e9350:	ea53 030a 	orrs.w	r3, r3, sl
   e9354:	d088      	beq.n	e9268 <_strtod_l+0x810>
   e9356:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   e9358:	b1db      	cbz	r3, e9392 <_strtod_l+0x93a>
   e935a:	423b      	tst	r3, r7
   e935c:	d0ef      	beq.n	e933e <_strtod_l+0x8e6>
   e935e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   e9360:	9a04      	ldr	r2, [sp, #16]
   e9362:	4650      	mov	r0, sl
   e9364:	4659      	mov	r1, fp
   e9366:	b1c3      	cbz	r3, e939a <_strtod_l+0x942>
   e9368:	f7ff fb57 	bl	e8a1a <sulp>
   e936c:	4602      	mov	r2, r0
   e936e:	460b      	mov	r3, r1
   e9370:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   e9374:	f7fe fc22 	bl	e7bbc <__adddf3>
   e9378:	4682      	mov	sl, r0
   e937a:	468b      	mov	fp, r1
   e937c:	e7df      	b.n	e933e <_strtod_l+0x8e6>
   e937e:	4013      	ands	r3, r2
   e9380:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   e9384:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   e9388:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   e938c:	f04f 3aff 	mov.w	sl, #4294967295
   e9390:	e7d5      	b.n	e933e <_strtod_l+0x8e6>
   e9392:	9b11      	ldr	r3, [sp, #68]	; 0x44
   e9394:	ea13 0f0a 	tst.w	r3, sl
   e9398:	e7e0      	b.n	e935c <_strtod_l+0x904>
   e939a:	f7ff fb3e 	bl	e8a1a <sulp>
   e939e:	4602      	mov	r2, r0
   e93a0:	460b      	mov	r3, r1
   e93a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   e93a6:	f7fe fc07 	bl	e7bb8 <__aeabi_dsub>
   e93aa:	2200      	movs	r2, #0
   e93ac:	2300      	movs	r3, #0
   e93ae:	4682      	mov	sl, r0
   e93b0:	468b      	mov	fp, r1
   e93b2:	f7ff f821 	bl	e83f8 <__aeabi_dcmpeq>
   e93b6:	2800      	cmp	r0, #0
   e93b8:	d0c1      	beq.n	e933e <_strtod_l+0x8e6>
   e93ba:	e60e      	b.n	e8fda <_strtod_l+0x582>
   e93bc:	fffffc02 	.word	0xfffffc02
   e93c0:	7ff00000 	.word	0x7ff00000
   e93c4:	39500000 	.word	0x39500000
   e93c8:	000fffff 	.word	0x000fffff
   e93cc:	7fefffff 	.word	0x7fefffff
   e93d0:	000ed858 	.word	0x000ed858
   e93d4:	4631      	mov	r1, r6
   e93d6:	4628      	mov	r0, r5
   e93d8:	f001 f92a 	bl	ea630 <__ratio>
   e93dc:	ec59 8b10 	vmov	r8, r9, d0
   e93e0:	ee10 0a10 	vmov	r0, s0
   e93e4:	2200      	movs	r2, #0
   e93e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   e93ea:	4649      	mov	r1, r9
   e93ec:	f7ff f818 	bl	e8420 <__aeabi_dcmple>
   e93f0:	2800      	cmp	r0, #0
   e93f2:	d07c      	beq.n	e94ee <_strtod_l+0xa96>
   e93f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   e93f6:	2b00      	cmp	r3, #0
   e93f8:	d04c      	beq.n	e9494 <_strtod_l+0xa3c>
   e93fa:	4b95      	ldr	r3, [pc, #596]	; (e9650 <_strtod_l+0xbf8>)
   e93fc:	2200      	movs	r2, #0
   e93fe:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   e9402:	f8df 924c 	ldr.w	r9, [pc, #588]	; e9650 <_strtod_l+0xbf8>
   e9406:	f04f 0800 	mov.w	r8, #0
   e940a:	4b92      	ldr	r3, [pc, #584]	; (e9654 <_strtod_l+0xbfc>)
   e940c:	403b      	ands	r3, r7
   e940e:	9311      	str	r3, [sp, #68]	; 0x44
   e9410:	9a11      	ldr	r2, [sp, #68]	; 0x44
   e9412:	4b91      	ldr	r3, [pc, #580]	; (e9658 <_strtod_l+0xc00>)
   e9414:	429a      	cmp	r2, r3
   e9416:	f040 80b2 	bne.w	e957e <_strtod_l+0xb26>
   e941a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   e941e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   e9422:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   e9426:	ec4b ab10 	vmov	d0, sl, fp
   e942a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   e942e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   e9432:	f001 f831 	bl	ea498 <__ulp>
   e9436:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   e943a:	ec53 2b10 	vmov	r2, r3, d0
   e943e:	f7fe fd73 	bl	e7f28 <__aeabi_dmul>
   e9442:	4652      	mov	r2, sl
   e9444:	465b      	mov	r3, fp
   e9446:	f7fe fbb9 	bl	e7bbc <__adddf3>
   e944a:	460b      	mov	r3, r1
   e944c:	4981      	ldr	r1, [pc, #516]	; (e9654 <_strtod_l+0xbfc>)
   e944e:	4a83      	ldr	r2, [pc, #524]	; (e965c <_strtod_l+0xc04>)
   e9450:	4019      	ands	r1, r3
   e9452:	4291      	cmp	r1, r2
   e9454:	4682      	mov	sl, r0
   e9456:	d95e      	bls.n	e9516 <_strtod_l+0xabe>
   e9458:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   e945a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   e945e:	4293      	cmp	r3, r2
   e9460:	d103      	bne.n	e946a <_strtod_l+0xa12>
   e9462:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e9464:	3301      	adds	r3, #1
   e9466:	f43f ad43 	beq.w	e8ef0 <_strtod_l+0x498>
   e946a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; e9668 <_strtod_l+0xc10>
   e946e:	f04f 3aff 	mov.w	sl, #4294967295
   e9472:	991e      	ldr	r1, [sp, #120]	; 0x78
   e9474:	4620      	mov	r0, r4
   e9476:	f000 fd47 	bl	e9f08 <_Bfree>
   e947a:	9907      	ldr	r1, [sp, #28]
   e947c:	4620      	mov	r0, r4
   e947e:	f000 fd43 	bl	e9f08 <_Bfree>
   e9482:	4631      	mov	r1, r6
   e9484:	4620      	mov	r0, r4
   e9486:	f000 fd3f 	bl	e9f08 <_Bfree>
   e948a:	4629      	mov	r1, r5
   e948c:	4620      	mov	r0, r4
   e948e:	f000 fd3b 	bl	e9f08 <_Bfree>
   e9492:	e613      	b.n	e90bc <_strtod_l+0x664>
   e9494:	f1ba 0f00 	cmp.w	sl, #0
   e9498:	d11b      	bne.n	e94d2 <_strtod_l+0xa7a>
   e949a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e949e:	b9f3      	cbnz	r3, e94de <_strtod_l+0xa86>
   e94a0:	4b6b      	ldr	r3, [pc, #428]	; (e9650 <_strtod_l+0xbf8>)
   e94a2:	2200      	movs	r2, #0
   e94a4:	4640      	mov	r0, r8
   e94a6:	4649      	mov	r1, r9
   e94a8:	f7fe ffb0 	bl	e840c <__aeabi_dcmplt>
   e94ac:	b9d0      	cbnz	r0, e94e4 <_strtod_l+0xa8c>
   e94ae:	4640      	mov	r0, r8
   e94b0:	4649      	mov	r1, r9
   e94b2:	4b6b      	ldr	r3, [pc, #428]	; (e9660 <_strtod_l+0xc08>)
   e94b4:	2200      	movs	r2, #0
   e94b6:	f7fe fd37 	bl	e7f28 <__aeabi_dmul>
   e94ba:	4680      	mov	r8, r0
   e94bc:	4689      	mov	r9, r1
   e94be:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   e94c2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   e94c6:	931b      	str	r3, [sp, #108]	; 0x6c
   e94c8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
   e94cc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   e94d0:	e79b      	b.n	e940a <_strtod_l+0x9b2>
   e94d2:	f1ba 0f01 	cmp.w	sl, #1
   e94d6:	d102      	bne.n	e94de <_strtod_l+0xa86>
   e94d8:	2f00      	cmp	r7, #0
   e94da:	f43f ad7e 	beq.w	e8fda <_strtod_l+0x582>
   e94de:	4b61      	ldr	r3, [pc, #388]	; (e9664 <_strtod_l+0xc0c>)
   e94e0:	2200      	movs	r2, #0
   e94e2:	e78c      	b.n	e93fe <_strtod_l+0x9a6>
   e94e4:	f8df 9178 	ldr.w	r9, [pc, #376]	; e9660 <_strtod_l+0xc08>
   e94e8:	f04f 0800 	mov.w	r8, #0
   e94ec:	e7e7      	b.n	e94be <_strtod_l+0xa66>
   e94ee:	4b5c      	ldr	r3, [pc, #368]	; (e9660 <_strtod_l+0xc08>)
   e94f0:	4640      	mov	r0, r8
   e94f2:	4649      	mov	r1, r9
   e94f4:	2200      	movs	r2, #0
   e94f6:	f7fe fd17 	bl	e7f28 <__aeabi_dmul>
   e94fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   e94fc:	4680      	mov	r8, r0
   e94fe:	4689      	mov	r9, r1
   e9500:	b933      	cbnz	r3, e9510 <_strtod_l+0xab8>
   e9502:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   e9506:	9012      	str	r0, [sp, #72]	; 0x48
   e9508:	9313      	str	r3, [sp, #76]	; 0x4c
   e950a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   e950e:	e7dd      	b.n	e94cc <_strtod_l+0xa74>
   e9510:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
   e9514:	e7f9      	b.n	e950a <_strtod_l+0xab2>
   e9516:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   e951a:	9b04      	ldr	r3, [sp, #16]
   e951c:	2b00      	cmp	r3, #0
   e951e:	d1a8      	bne.n	e9472 <_strtod_l+0xa1a>
   e9520:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   e9524:	9a11      	ldr	r2, [sp, #68]	; 0x44
   e9526:	0d1b      	lsrs	r3, r3, #20
   e9528:	051b      	lsls	r3, r3, #20
   e952a:	429a      	cmp	r2, r3
   e952c:	d1a1      	bne.n	e9472 <_strtod_l+0xa1a>
   e952e:	4640      	mov	r0, r8
   e9530:	4649      	mov	r1, r9
   e9532:	f001 f90b 	bl	ea74c <__aeabi_d2lz>
   e9536:	f7fe fcc9 	bl	e7ecc <__aeabi_l2d>
   e953a:	4602      	mov	r2, r0
   e953c:	460b      	mov	r3, r1
   e953e:	4640      	mov	r0, r8
   e9540:	4649      	mov	r1, r9
   e9542:	f7fe fb39 	bl	e7bb8 <__aeabi_dsub>
   e9546:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   e9548:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e954c:	ea43 030a 	orr.w	r3, r3, sl
   e9550:	4313      	orrs	r3, r2
   e9552:	4680      	mov	r8, r0
   e9554:	4689      	mov	r9, r1
   e9556:	d053      	beq.n	e9600 <_strtod_l+0xba8>
   e9558:	a335      	add	r3, pc, #212	; (adr r3, e9630 <_strtod_l+0xbd8>)
   e955a:	e9d3 2300 	ldrd	r2, r3, [r3]
   e955e:	f7fe ff55 	bl	e840c <__aeabi_dcmplt>
   e9562:	2800      	cmp	r0, #0
   e9564:	f47f acce 	bne.w	e8f04 <_strtod_l+0x4ac>
   e9568:	a333      	add	r3, pc, #204	; (adr r3, e9638 <_strtod_l+0xbe0>)
   e956a:	e9d3 2300 	ldrd	r2, r3, [r3]
   e956e:	4640      	mov	r0, r8
   e9570:	4649      	mov	r1, r9
   e9572:	f7fe ff69 	bl	e8448 <__aeabi_dcmpgt>
   e9576:	2800      	cmp	r0, #0
   e9578:	f43f af7b 	beq.w	e9472 <_strtod_l+0xa1a>
   e957c:	e4c2      	b.n	e8f04 <_strtod_l+0x4ac>
   e957e:	9b04      	ldr	r3, [sp, #16]
   e9580:	b333      	cbz	r3, e95d0 <_strtod_l+0xb78>
   e9582:	9b11      	ldr	r3, [sp, #68]	; 0x44
   e9584:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   e9588:	d822      	bhi.n	e95d0 <_strtod_l+0xb78>
   e958a:	a32d      	add	r3, pc, #180	; (adr r3, e9640 <_strtod_l+0xbe8>)
   e958c:	e9d3 2300 	ldrd	r2, r3, [r3]
   e9590:	4640      	mov	r0, r8
   e9592:	4649      	mov	r1, r9
   e9594:	f7fe ff44 	bl	e8420 <__aeabi_dcmple>
   e9598:	b1a0      	cbz	r0, e95c4 <_strtod_l+0xb6c>
   e959a:	4649      	mov	r1, r9
   e959c:	4640      	mov	r0, r8
   e959e:	f7fe ff5d 	bl	e845c <__aeabi_d2uiz>
   e95a2:	2801      	cmp	r0, #1
   e95a4:	bf38      	it	cc
   e95a6:	2001      	movcc	r0, #1
   e95a8:	f7fe fc44 	bl	e7e34 <__aeabi_ui2d>
   e95ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   e95ae:	4680      	mov	r8, r0
   e95b0:	4689      	mov	r9, r1
   e95b2:	bb13      	cbnz	r3, e95fa <_strtod_l+0xba2>
   e95b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   e95b8:	9014      	str	r0, [sp, #80]	; 0x50
   e95ba:	9315      	str	r3, [sp, #84]	; 0x54
   e95bc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   e95c0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   e95c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   e95c6:	9a11      	ldr	r2, [sp, #68]	; 0x44
   e95c8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   e95cc:	1a9b      	subs	r3, r3, r2
   e95ce:	930d      	str	r3, [sp, #52]	; 0x34
   e95d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   e95d4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   e95d8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   e95dc:	f000 ff5c 	bl	ea498 <__ulp>
   e95e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   e95e4:	ec53 2b10 	vmov	r2, r3, d0
   e95e8:	f7fe fc9e 	bl	e7f28 <__aeabi_dmul>
   e95ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   e95f0:	f7fe fae4 	bl	e7bbc <__adddf3>
   e95f4:	4682      	mov	sl, r0
   e95f6:	468b      	mov	fp, r1
   e95f8:	e78f      	b.n	e951a <_strtod_l+0xac2>
   e95fa:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
   e95fe:	e7dd      	b.n	e95bc <_strtod_l+0xb64>
   e9600:	a311      	add	r3, pc, #68	; (adr r3, e9648 <_strtod_l+0xbf0>)
   e9602:	e9d3 2300 	ldrd	r2, r3, [r3]
   e9606:	f7fe ff01 	bl	e840c <__aeabi_dcmplt>
   e960a:	e7b4      	b.n	e9576 <_strtod_l+0xb1e>
   e960c:	2300      	movs	r3, #0
   e960e:	930e      	str	r3, [sp, #56]	; 0x38
   e9610:	9a19      	ldr	r2, [sp, #100]	; 0x64
   e9612:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e9614:	6013      	str	r3, [r2, #0]
   e9616:	f7ff ba65 	b.w	e8ae4 <_strtod_l+0x8c>
   e961a:	2b65      	cmp	r3, #101	; 0x65
   e961c:	f43f ab5d 	beq.w	e8cda <_strtod_l+0x282>
   e9620:	2b45      	cmp	r3, #69	; 0x45
   e9622:	f43f ab5a 	beq.w	e8cda <_strtod_l+0x282>
   e9626:	2201      	movs	r2, #1
   e9628:	f7ff bb92 	b.w	e8d50 <_strtod_l+0x2f8>
   e962c:	f3af 8000 	nop.w
   e9630:	94a03595 	.word	0x94a03595
   e9634:	3fdfffff 	.word	0x3fdfffff
   e9638:	35afe535 	.word	0x35afe535
   e963c:	3fe00000 	.word	0x3fe00000
   e9640:	ffc00000 	.word	0xffc00000
   e9644:	41dfffff 	.word	0x41dfffff
   e9648:	94a03595 	.word	0x94a03595
   e964c:	3fcfffff 	.word	0x3fcfffff
   e9650:	3ff00000 	.word	0x3ff00000
   e9654:	7ff00000 	.word	0x7ff00000
   e9658:	7fe00000 	.word	0x7fe00000
   e965c:	7c9fffff 	.word	0x7c9fffff
   e9660:	3fe00000 	.word	0x3fe00000
   e9664:	bff00000 	.word	0xbff00000
   e9668:	7fefffff 	.word	0x7fefffff

000e966c <strtod>:
   e966c:	460a      	mov	r2, r1
   e966e:	4601      	mov	r1, r0
   e9670:	4802      	ldr	r0, [pc, #8]	; (e967c <strtod+0x10>)
   e9672:	4b03      	ldr	r3, [pc, #12]	; (e9680 <strtod+0x14>)
   e9674:	6800      	ldr	r0, [r0, #0]
   e9676:	f7ff b9ef 	b.w	e8a58 <_strtod_l>
   e967a:	bf00      	nop
   e967c:	2003ac90 	.word	0x2003ac90
   e9680:	2003acf8 	.word	0x2003acf8

000e9684 <_strtol_l.isra.0>:
   e9684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e9688:	4e3a      	ldr	r6, [pc, #232]	; (e9774 <_strtol_l.isra.0+0xf0>)
   e968a:	4686      	mov	lr, r0
   e968c:	468c      	mov	ip, r1
   e968e:	4660      	mov	r0, ip
   e9690:	f81c 4b01 	ldrb.w	r4, [ip], #1
   e9694:	5da5      	ldrb	r5, [r4, r6]
   e9696:	f015 0508 	ands.w	r5, r5, #8
   e969a:	d1f8      	bne.n	e968e <_strtol_l.isra.0+0xa>
   e969c:	2c2d      	cmp	r4, #45	; 0x2d
   e969e:	d133      	bne.n	e9708 <_strtol_l.isra.0+0x84>
   e96a0:	f89c 4000 	ldrb.w	r4, [ip]
   e96a4:	f04f 0801 	mov.w	r8, #1
   e96a8:	f100 0c02 	add.w	ip, r0, #2
   e96ac:	2b00      	cmp	r3, #0
   e96ae:	d05c      	beq.n	e976a <_strtol_l.isra.0+0xe6>
   e96b0:	2b10      	cmp	r3, #16
   e96b2:	d10c      	bne.n	e96ce <_strtol_l.isra.0+0x4a>
   e96b4:	2c30      	cmp	r4, #48	; 0x30
   e96b6:	d10a      	bne.n	e96ce <_strtol_l.isra.0+0x4a>
   e96b8:	f89c 0000 	ldrb.w	r0, [ip]
   e96bc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   e96c0:	2858      	cmp	r0, #88	; 0x58
   e96c2:	d14d      	bne.n	e9760 <_strtol_l.isra.0+0xdc>
   e96c4:	f89c 4001 	ldrb.w	r4, [ip, #1]
   e96c8:	2310      	movs	r3, #16
   e96ca:	f10c 0c02 	add.w	ip, ip, #2
   e96ce:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   e96d2:	3f01      	subs	r7, #1
   e96d4:	2600      	movs	r6, #0
   e96d6:	fbb7 f9f3 	udiv	r9, r7, r3
   e96da:	4630      	mov	r0, r6
   e96dc:	fb03 7a19 	mls	sl, r3, r9, r7
   e96e0:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   e96e4:	2d09      	cmp	r5, #9
   e96e6:	d818      	bhi.n	e971a <_strtol_l.isra.0+0x96>
   e96e8:	462c      	mov	r4, r5
   e96ea:	42a3      	cmp	r3, r4
   e96ec:	dd24      	ble.n	e9738 <_strtol_l.isra.0+0xb4>
   e96ee:	1c75      	adds	r5, r6, #1
   e96f0:	d007      	beq.n	e9702 <_strtol_l.isra.0+0x7e>
   e96f2:	4581      	cmp	r9, r0
   e96f4:	d31d      	bcc.n	e9732 <_strtol_l.isra.0+0xae>
   e96f6:	d101      	bne.n	e96fc <_strtol_l.isra.0+0x78>
   e96f8:	45a2      	cmp	sl, r4
   e96fa:	db1a      	blt.n	e9732 <_strtol_l.isra.0+0xae>
   e96fc:	fb00 4003 	mla	r0, r0, r3, r4
   e9700:	2601      	movs	r6, #1
   e9702:	f81c 4b01 	ldrb.w	r4, [ip], #1
   e9706:	e7eb      	b.n	e96e0 <_strtol_l.isra.0+0x5c>
   e9708:	2c2b      	cmp	r4, #43	; 0x2b
   e970a:	bf08      	it	eq
   e970c:	f89c 4000 	ldrbeq.w	r4, [ip]
   e9710:	46a8      	mov	r8, r5
   e9712:	bf08      	it	eq
   e9714:	f100 0c02 	addeq.w	ip, r0, #2
   e9718:	e7c8      	b.n	e96ac <_strtol_l.isra.0+0x28>
   e971a:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   e971e:	2d19      	cmp	r5, #25
   e9720:	d801      	bhi.n	e9726 <_strtol_l.isra.0+0xa2>
   e9722:	3c37      	subs	r4, #55	; 0x37
   e9724:	e7e1      	b.n	e96ea <_strtol_l.isra.0+0x66>
   e9726:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   e972a:	2d19      	cmp	r5, #25
   e972c:	d804      	bhi.n	e9738 <_strtol_l.isra.0+0xb4>
   e972e:	3c57      	subs	r4, #87	; 0x57
   e9730:	e7db      	b.n	e96ea <_strtol_l.isra.0+0x66>
   e9732:	f04f 36ff 	mov.w	r6, #4294967295
   e9736:	e7e4      	b.n	e9702 <_strtol_l.isra.0+0x7e>
   e9738:	1c73      	adds	r3, r6, #1
   e973a:	d106      	bne.n	e974a <_strtol_l.isra.0+0xc6>
   e973c:	2322      	movs	r3, #34	; 0x22
   e973e:	f8ce 3000 	str.w	r3, [lr]
   e9742:	4638      	mov	r0, r7
   e9744:	b942      	cbnz	r2, e9758 <_strtol_l.isra.0+0xd4>
   e9746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e974a:	f1b8 0f00 	cmp.w	r8, #0
   e974e:	d000      	beq.n	e9752 <_strtol_l.isra.0+0xce>
   e9750:	4240      	negs	r0, r0
   e9752:	2a00      	cmp	r2, #0
   e9754:	d0f7      	beq.n	e9746 <_strtol_l.isra.0+0xc2>
   e9756:	b10e      	cbz	r6, e975c <_strtol_l.isra.0+0xd8>
   e9758:	f10c 31ff 	add.w	r1, ip, #4294967295
   e975c:	6011      	str	r1, [r2, #0]
   e975e:	e7f2      	b.n	e9746 <_strtol_l.isra.0+0xc2>
   e9760:	2430      	movs	r4, #48	; 0x30
   e9762:	2b00      	cmp	r3, #0
   e9764:	d1b3      	bne.n	e96ce <_strtol_l.isra.0+0x4a>
   e9766:	2308      	movs	r3, #8
   e9768:	e7b1      	b.n	e96ce <_strtol_l.isra.0+0x4a>
   e976a:	2c30      	cmp	r4, #48	; 0x30
   e976c:	d0a4      	beq.n	e96b8 <_strtol_l.isra.0+0x34>
   e976e:	230a      	movs	r3, #10
   e9770:	e7ad      	b.n	e96ce <_strtol_l.isra.0+0x4a>
   e9772:	bf00      	nop
   e9774:	000ed881 	.word	0x000ed881

000e9778 <strtol>:
   e9778:	4613      	mov	r3, r2
   e977a:	460a      	mov	r2, r1
   e977c:	4601      	mov	r1, r0
   e977e:	4802      	ldr	r0, [pc, #8]	; (e9788 <strtol+0x10>)
   e9780:	6800      	ldr	r0, [r0, #0]
   e9782:	f7ff bf7f 	b.w	e9684 <_strtol_l.isra.0>
   e9786:	bf00      	nop
   e9788:	2003ac90 	.word	0x2003ac90

000e978c <gettimeofday>:
   e978c:	4b02      	ldr	r3, [pc, #8]	; (e9798 <gettimeofday+0xc>)
   e978e:	460a      	mov	r2, r1
   e9790:	4601      	mov	r1, r0
   e9792:	6818      	ldr	r0, [r3, #0]
   e9794:	f000 bb60 	b.w	e9e58 <_gettimeofday_r>
   e9798:	2003ac90 	.word	0x2003ac90

000e979c <rshift>:
   e979c:	6903      	ldr	r3, [r0, #16]
   e979e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   e97a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   e97a6:	ea4f 1261 	mov.w	r2, r1, asr #5
   e97aa:	f100 0414 	add.w	r4, r0, #20
   e97ae:	dd45      	ble.n	e983c <rshift+0xa0>
   e97b0:	f011 011f 	ands.w	r1, r1, #31
   e97b4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   e97b8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   e97bc:	d10c      	bne.n	e97d8 <rshift+0x3c>
   e97be:	f100 0710 	add.w	r7, r0, #16
   e97c2:	4629      	mov	r1, r5
   e97c4:	42b1      	cmp	r1, r6
   e97c6:	d334      	bcc.n	e9832 <rshift+0x96>
   e97c8:	1a9b      	subs	r3, r3, r2
   e97ca:	009b      	lsls	r3, r3, #2
   e97cc:	1eea      	subs	r2, r5, #3
   e97ce:	4296      	cmp	r6, r2
   e97d0:	bf38      	it	cc
   e97d2:	2300      	movcc	r3, #0
   e97d4:	4423      	add	r3, r4
   e97d6:	e015      	b.n	e9804 <rshift+0x68>
   e97d8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   e97dc:	f1c1 0820 	rsb	r8, r1, #32
   e97e0:	40cf      	lsrs	r7, r1
   e97e2:	f105 0e04 	add.w	lr, r5, #4
   e97e6:	46a1      	mov	r9, r4
   e97e8:	4576      	cmp	r6, lr
   e97ea:	46f4      	mov	ip, lr
   e97ec:	d815      	bhi.n	e981a <rshift+0x7e>
   e97ee:	1a9b      	subs	r3, r3, r2
   e97f0:	009a      	lsls	r2, r3, #2
   e97f2:	3a04      	subs	r2, #4
   e97f4:	3501      	adds	r5, #1
   e97f6:	42ae      	cmp	r6, r5
   e97f8:	bf38      	it	cc
   e97fa:	2200      	movcc	r2, #0
   e97fc:	18a3      	adds	r3, r4, r2
   e97fe:	50a7      	str	r7, [r4, r2]
   e9800:	b107      	cbz	r7, e9804 <rshift+0x68>
   e9802:	3304      	adds	r3, #4
   e9804:	1b1a      	subs	r2, r3, r4
   e9806:	42a3      	cmp	r3, r4
   e9808:	ea4f 02a2 	mov.w	r2, r2, asr #2
   e980c:	bf08      	it	eq
   e980e:	2300      	moveq	r3, #0
   e9810:	6102      	str	r2, [r0, #16]
   e9812:	bf08      	it	eq
   e9814:	6143      	streq	r3, [r0, #20]
   e9816:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   e981a:	f8dc c000 	ldr.w	ip, [ip]
   e981e:	fa0c fc08 	lsl.w	ip, ip, r8
   e9822:	ea4c 0707 	orr.w	r7, ip, r7
   e9826:	f849 7b04 	str.w	r7, [r9], #4
   e982a:	f85e 7b04 	ldr.w	r7, [lr], #4
   e982e:	40cf      	lsrs	r7, r1
   e9830:	e7da      	b.n	e97e8 <rshift+0x4c>
   e9832:	f851 cb04 	ldr.w	ip, [r1], #4
   e9836:	f847 cf04 	str.w	ip, [r7, #4]!
   e983a:	e7c3      	b.n	e97c4 <rshift+0x28>
   e983c:	4623      	mov	r3, r4
   e983e:	e7e1      	b.n	e9804 <rshift+0x68>

000e9840 <__hexdig_fun>:
   e9840:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   e9844:	2b09      	cmp	r3, #9
   e9846:	d802      	bhi.n	e984e <__hexdig_fun+0xe>
   e9848:	3820      	subs	r0, #32
   e984a:	b2c0      	uxtb	r0, r0
   e984c:	4770      	bx	lr
   e984e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   e9852:	2b05      	cmp	r3, #5
   e9854:	d801      	bhi.n	e985a <__hexdig_fun+0x1a>
   e9856:	3847      	subs	r0, #71	; 0x47
   e9858:	e7f7      	b.n	e984a <__hexdig_fun+0xa>
   e985a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   e985e:	2b05      	cmp	r3, #5
   e9860:	d801      	bhi.n	e9866 <__hexdig_fun+0x26>
   e9862:	3827      	subs	r0, #39	; 0x27
   e9864:	e7f1      	b.n	e984a <__hexdig_fun+0xa>
   e9866:	2000      	movs	r0, #0
   e9868:	4770      	bx	lr
	...

000e986c <__gethex>:
   e986c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e9870:	ed2d 8b02 	vpush	{d8}
   e9874:	b089      	sub	sp, #36	; 0x24
   e9876:	ee08 0a10 	vmov	s16, r0
   e987a:	9304      	str	r3, [sp, #16]
   e987c:	4bbc      	ldr	r3, [pc, #752]	; (e9b70 <__gethex+0x304>)
   e987e:	681b      	ldr	r3, [r3, #0]
   e9880:	9301      	str	r3, [sp, #4]
   e9882:	4618      	mov	r0, r3
   e9884:	468b      	mov	fp, r1
   e9886:	4690      	mov	r8, r2
   e9888:	f7ff f896 	bl	e89b8 <strlen>
   e988c:	9b01      	ldr	r3, [sp, #4]
   e988e:	f8db 2000 	ldr.w	r2, [fp]
   e9892:	4403      	add	r3, r0
   e9894:	4682      	mov	sl, r0
   e9896:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   e989a:	9305      	str	r3, [sp, #20]
   e989c:	1c93      	adds	r3, r2, #2
   e989e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   e98a2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   e98a6:	32fe      	adds	r2, #254	; 0xfe
   e98a8:	18d1      	adds	r1, r2, r3
   e98aa:	461f      	mov	r7, r3
   e98ac:	f813 0b01 	ldrb.w	r0, [r3], #1
   e98b0:	9100      	str	r1, [sp, #0]
   e98b2:	2830      	cmp	r0, #48	; 0x30
   e98b4:	d0f8      	beq.n	e98a8 <__gethex+0x3c>
   e98b6:	f7ff ffc3 	bl	e9840 <__hexdig_fun>
   e98ba:	4604      	mov	r4, r0
   e98bc:	2800      	cmp	r0, #0
   e98be:	d13a      	bne.n	e9936 <__gethex+0xca>
   e98c0:	9901      	ldr	r1, [sp, #4]
   e98c2:	4652      	mov	r2, sl
   e98c4:	4638      	mov	r0, r7
   e98c6:	f7ff f87f 	bl	e89c8 <strncmp>
   e98ca:	4605      	mov	r5, r0
   e98cc:	2800      	cmp	r0, #0
   e98ce:	d168      	bne.n	e99a2 <__gethex+0x136>
   e98d0:	f817 000a 	ldrb.w	r0, [r7, sl]
   e98d4:	eb07 060a 	add.w	r6, r7, sl
   e98d8:	f7ff ffb2 	bl	e9840 <__hexdig_fun>
   e98dc:	2800      	cmp	r0, #0
   e98de:	d062      	beq.n	e99a6 <__gethex+0x13a>
   e98e0:	4633      	mov	r3, r6
   e98e2:	7818      	ldrb	r0, [r3, #0]
   e98e4:	2830      	cmp	r0, #48	; 0x30
   e98e6:	461f      	mov	r7, r3
   e98e8:	f103 0301 	add.w	r3, r3, #1
   e98ec:	d0f9      	beq.n	e98e2 <__gethex+0x76>
   e98ee:	f7ff ffa7 	bl	e9840 <__hexdig_fun>
   e98f2:	2301      	movs	r3, #1
   e98f4:	fab0 f480 	clz	r4, r0
   e98f8:	0964      	lsrs	r4, r4, #5
   e98fa:	4635      	mov	r5, r6
   e98fc:	9300      	str	r3, [sp, #0]
   e98fe:	463a      	mov	r2, r7
   e9900:	4616      	mov	r6, r2
   e9902:	3201      	adds	r2, #1
   e9904:	7830      	ldrb	r0, [r6, #0]
   e9906:	f7ff ff9b 	bl	e9840 <__hexdig_fun>
   e990a:	2800      	cmp	r0, #0
   e990c:	d1f8      	bne.n	e9900 <__gethex+0x94>
   e990e:	9901      	ldr	r1, [sp, #4]
   e9910:	4652      	mov	r2, sl
   e9912:	4630      	mov	r0, r6
   e9914:	f7ff f858 	bl	e89c8 <strncmp>
   e9918:	b980      	cbnz	r0, e993c <__gethex+0xd0>
   e991a:	b94d      	cbnz	r5, e9930 <__gethex+0xc4>
   e991c:	eb06 050a 	add.w	r5, r6, sl
   e9920:	462a      	mov	r2, r5
   e9922:	4616      	mov	r6, r2
   e9924:	3201      	adds	r2, #1
   e9926:	7830      	ldrb	r0, [r6, #0]
   e9928:	f7ff ff8a 	bl	e9840 <__hexdig_fun>
   e992c:	2800      	cmp	r0, #0
   e992e:	d1f8      	bne.n	e9922 <__gethex+0xb6>
   e9930:	1bad      	subs	r5, r5, r6
   e9932:	00ad      	lsls	r5, r5, #2
   e9934:	e004      	b.n	e9940 <__gethex+0xd4>
   e9936:	2400      	movs	r4, #0
   e9938:	4625      	mov	r5, r4
   e993a:	e7e0      	b.n	e98fe <__gethex+0x92>
   e993c:	2d00      	cmp	r5, #0
   e993e:	d1f7      	bne.n	e9930 <__gethex+0xc4>
   e9940:	7833      	ldrb	r3, [r6, #0]
   e9942:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   e9946:	2b50      	cmp	r3, #80	; 0x50
   e9948:	d13b      	bne.n	e99c2 <__gethex+0x156>
   e994a:	7873      	ldrb	r3, [r6, #1]
   e994c:	2b2b      	cmp	r3, #43	; 0x2b
   e994e:	d02c      	beq.n	e99aa <__gethex+0x13e>
   e9950:	2b2d      	cmp	r3, #45	; 0x2d
   e9952:	d02e      	beq.n	e99b2 <__gethex+0x146>
   e9954:	1c71      	adds	r1, r6, #1
   e9956:	f04f 0900 	mov.w	r9, #0
   e995a:	7808      	ldrb	r0, [r1, #0]
   e995c:	f7ff ff70 	bl	e9840 <__hexdig_fun>
   e9960:	1e43      	subs	r3, r0, #1
   e9962:	b2db      	uxtb	r3, r3
   e9964:	2b18      	cmp	r3, #24
   e9966:	d82c      	bhi.n	e99c2 <__gethex+0x156>
   e9968:	f1a0 0210 	sub.w	r2, r0, #16
   e996c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   e9970:	f7ff ff66 	bl	e9840 <__hexdig_fun>
   e9974:	1e43      	subs	r3, r0, #1
   e9976:	b2db      	uxtb	r3, r3
   e9978:	2b18      	cmp	r3, #24
   e997a:	d91d      	bls.n	e99b8 <__gethex+0x14c>
   e997c:	f1b9 0f00 	cmp.w	r9, #0
   e9980:	d000      	beq.n	e9984 <__gethex+0x118>
   e9982:	4252      	negs	r2, r2
   e9984:	4415      	add	r5, r2
   e9986:	f8cb 1000 	str.w	r1, [fp]
   e998a:	b1e4      	cbz	r4, e99c6 <__gethex+0x15a>
   e998c:	9b00      	ldr	r3, [sp, #0]
   e998e:	2b00      	cmp	r3, #0
   e9990:	bf14      	ite	ne
   e9992:	2700      	movne	r7, #0
   e9994:	2706      	moveq	r7, #6
   e9996:	4638      	mov	r0, r7
   e9998:	b009      	add	sp, #36	; 0x24
   e999a:	ecbd 8b02 	vpop	{d8}
   e999e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e99a2:	463e      	mov	r6, r7
   e99a4:	4625      	mov	r5, r4
   e99a6:	2401      	movs	r4, #1
   e99a8:	e7ca      	b.n	e9940 <__gethex+0xd4>
   e99aa:	f04f 0900 	mov.w	r9, #0
   e99ae:	1cb1      	adds	r1, r6, #2
   e99b0:	e7d3      	b.n	e995a <__gethex+0xee>
   e99b2:	f04f 0901 	mov.w	r9, #1
   e99b6:	e7fa      	b.n	e99ae <__gethex+0x142>
   e99b8:	230a      	movs	r3, #10
   e99ba:	fb03 0202 	mla	r2, r3, r2, r0
   e99be:	3a10      	subs	r2, #16
   e99c0:	e7d4      	b.n	e996c <__gethex+0x100>
   e99c2:	4631      	mov	r1, r6
   e99c4:	e7df      	b.n	e9986 <__gethex+0x11a>
   e99c6:	1bf3      	subs	r3, r6, r7
   e99c8:	3b01      	subs	r3, #1
   e99ca:	4621      	mov	r1, r4
   e99cc:	2b07      	cmp	r3, #7
   e99ce:	dc52      	bgt.n	e9a76 <__gethex+0x20a>
   e99d0:	ee18 0a10 	vmov	r0, s16
   e99d4:	f000 fa64 	bl	e9ea0 <_Balloc>
   e99d8:	f04f 0b00 	mov.w	fp, #0
   e99dc:	f100 0914 	add.w	r9, r0, #20
   e99e0:	f1ca 0301 	rsb	r3, sl, #1
   e99e4:	4604      	mov	r4, r0
   e99e6:	f8cd 9008 	str.w	r9, [sp, #8]
   e99ea:	f8cd b000 	str.w	fp, [sp]
   e99ee:	9306      	str	r3, [sp, #24]
   e99f0:	42b7      	cmp	r7, r6
   e99f2:	d343      	bcc.n	e9a7c <__gethex+0x210>
   e99f4:	9802      	ldr	r0, [sp, #8]
   e99f6:	9b00      	ldr	r3, [sp, #0]
   e99f8:	f840 3b04 	str.w	r3, [r0], #4
   e99fc:	eba0 0009 	sub.w	r0, r0, r9
   e9a00:	1080      	asrs	r0, r0, #2
   e9a02:	0146      	lsls	r6, r0, #5
   e9a04:	6120      	str	r0, [r4, #16]
   e9a06:	4618      	mov	r0, r3
   e9a08:	f000 fb11 	bl	ea02e <__hi0bits>
   e9a0c:	1a30      	subs	r0, r6, r0
   e9a0e:	f8d8 6000 	ldr.w	r6, [r8]
   e9a12:	42b0      	cmp	r0, r6
   e9a14:	dd66      	ble.n	e9ae4 <__gethex+0x278>
   e9a16:	1b87      	subs	r7, r0, r6
   e9a18:	4639      	mov	r1, r7
   e9a1a:	4620      	mov	r0, r4
   e9a1c:	f000 fe5e 	bl	ea6dc <__any_on>
   e9a20:	4682      	mov	sl, r0
   e9a22:	b1a8      	cbz	r0, e9a50 <__gethex+0x1e4>
   e9a24:	1e7b      	subs	r3, r7, #1
   e9a26:	1159      	asrs	r1, r3, #5
   e9a28:	f003 021f 	and.w	r2, r3, #31
   e9a2c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   e9a30:	f04f 0a01 	mov.w	sl, #1
   e9a34:	fa0a f202 	lsl.w	r2, sl, r2
   e9a38:	420a      	tst	r2, r1
   e9a3a:	d009      	beq.n	e9a50 <__gethex+0x1e4>
   e9a3c:	4553      	cmp	r3, sl
   e9a3e:	dd05      	ble.n	e9a4c <__gethex+0x1e0>
   e9a40:	1eb9      	subs	r1, r7, #2
   e9a42:	4620      	mov	r0, r4
   e9a44:	f000 fe4a 	bl	ea6dc <__any_on>
   e9a48:	2800      	cmp	r0, #0
   e9a4a:	d148      	bne.n	e9ade <__gethex+0x272>
   e9a4c:	f04f 0a02 	mov.w	sl, #2
   e9a50:	4639      	mov	r1, r7
   e9a52:	4620      	mov	r0, r4
   e9a54:	f7ff fea2 	bl	e979c <rshift>
   e9a58:	443d      	add	r5, r7
   e9a5a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   e9a5e:	42ab      	cmp	r3, r5
   e9a60:	da4f      	bge.n	e9b02 <__gethex+0x296>
   e9a62:	ee18 0a10 	vmov	r0, s16
   e9a66:	4621      	mov	r1, r4
   e9a68:	f000 fa4e 	bl	e9f08 <_Bfree>
   e9a6c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   e9a6e:	2300      	movs	r3, #0
   e9a70:	6013      	str	r3, [r2, #0]
   e9a72:	27a3      	movs	r7, #163	; 0xa3
   e9a74:	e78f      	b.n	e9996 <__gethex+0x12a>
   e9a76:	3101      	adds	r1, #1
   e9a78:	105b      	asrs	r3, r3, #1
   e9a7a:	e7a7      	b.n	e99cc <__gethex+0x160>
   e9a7c:	1e73      	subs	r3, r6, #1
   e9a7e:	9a05      	ldr	r2, [sp, #20]
   e9a80:	9303      	str	r3, [sp, #12]
   e9a82:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   e9a86:	4293      	cmp	r3, r2
   e9a88:	d019      	beq.n	e9abe <__gethex+0x252>
   e9a8a:	f1bb 0f20 	cmp.w	fp, #32
   e9a8e:	d107      	bne.n	e9aa0 <__gethex+0x234>
   e9a90:	9b02      	ldr	r3, [sp, #8]
   e9a92:	9a00      	ldr	r2, [sp, #0]
   e9a94:	f843 2b04 	str.w	r2, [r3], #4
   e9a98:	9302      	str	r3, [sp, #8]
   e9a9a:	2300      	movs	r3, #0
   e9a9c:	9300      	str	r3, [sp, #0]
   e9a9e:	469b      	mov	fp, r3
   e9aa0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   e9aa4:	f7ff fecc 	bl	e9840 <__hexdig_fun>
   e9aa8:	9b00      	ldr	r3, [sp, #0]
   e9aaa:	f000 000f 	and.w	r0, r0, #15
   e9aae:	fa00 f00b 	lsl.w	r0, r0, fp
   e9ab2:	4303      	orrs	r3, r0
   e9ab4:	9300      	str	r3, [sp, #0]
   e9ab6:	f10b 0b04 	add.w	fp, fp, #4
   e9aba:	9b03      	ldr	r3, [sp, #12]
   e9abc:	e00d      	b.n	e9ada <__gethex+0x26e>
   e9abe:	9b03      	ldr	r3, [sp, #12]
   e9ac0:	9a06      	ldr	r2, [sp, #24]
   e9ac2:	4413      	add	r3, r2
   e9ac4:	42bb      	cmp	r3, r7
   e9ac6:	d3e0      	bcc.n	e9a8a <__gethex+0x21e>
   e9ac8:	4618      	mov	r0, r3
   e9aca:	9901      	ldr	r1, [sp, #4]
   e9acc:	9307      	str	r3, [sp, #28]
   e9ace:	4652      	mov	r2, sl
   e9ad0:	f7fe ff7a 	bl	e89c8 <strncmp>
   e9ad4:	9b07      	ldr	r3, [sp, #28]
   e9ad6:	2800      	cmp	r0, #0
   e9ad8:	d1d7      	bne.n	e9a8a <__gethex+0x21e>
   e9ada:	461e      	mov	r6, r3
   e9adc:	e788      	b.n	e99f0 <__gethex+0x184>
   e9ade:	f04f 0a03 	mov.w	sl, #3
   e9ae2:	e7b5      	b.n	e9a50 <__gethex+0x1e4>
   e9ae4:	da0a      	bge.n	e9afc <__gethex+0x290>
   e9ae6:	1a37      	subs	r7, r6, r0
   e9ae8:	4621      	mov	r1, r4
   e9aea:	ee18 0a10 	vmov	r0, s16
   e9aee:	463a      	mov	r2, r7
   e9af0:	f000 fbe0 	bl	ea2b4 <__lshift>
   e9af4:	1bed      	subs	r5, r5, r7
   e9af6:	4604      	mov	r4, r0
   e9af8:	f100 0914 	add.w	r9, r0, #20
   e9afc:	f04f 0a00 	mov.w	sl, #0
   e9b00:	e7ab      	b.n	e9a5a <__gethex+0x1ee>
   e9b02:	f8d8 0004 	ldr.w	r0, [r8, #4]
   e9b06:	42a8      	cmp	r0, r5
   e9b08:	dd6d      	ble.n	e9be6 <__gethex+0x37a>
   e9b0a:	1b45      	subs	r5, r0, r5
   e9b0c:	42ae      	cmp	r6, r5
   e9b0e:	dc31      	bgt.n	e9b74 <__gethex+0x308>
   e9b10:	f8d8 300c 	ldr.w	r3, [r8, #12]
   e9b14:	2b02      	cmp	r3, #2
   e9b16:	d023      	beq.n	e9b60 <__gethex+0x2f4>
   e9b18:	2b03      	cmp	r3, #3
   e9b1a:	d025      	beq.n	e9b68 <__gethex+0x2fc>
   e9b1c:	2b01      	cmp	r3, #1
   e9b1e:	d115      	bne.n	e9b4c <__gethex+0x2e0>
   e9b20:	42ae      	cmp	r6, r5
   e9b22:	d113      	bne.n	e9b4c <__gethex+0x2e0>
   e9b24:	2e01      	cmp	r6, #1
   e9b26:	d10b      	bne.n	e9b40 <__gethex+0x2d4>
   e9b28:	9a04      	ldr	r2, [sp, #16]
   e9b2a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   e9b2e:	6013      	str	r3, [r2, #0]
   e9b30:	2301      	movs	r3, #1
   e9b32:	6123      	str	r3, [r4, #16]
   e9b34:	f8c9 3000 	str.w	r3, [r9]
   e9b38:	9b14      	ldr	r3, [sp, #80]	; 0x50
   e9b3a:	2762      	movs	r7, #98	; 0x62
   e9b3c:	601c      	str	r4, [r3, #0]
   e9b3e:	e72a      	b.n	e9996 <__gethex+0x12a>
   e9b40:	1e71      	subs	r1, r6, #1
   e9b42:	4620      	mov	r0, r4
   e9b44:	f000 fdca 	bl	ea6dc <__any_on>
   e9b48:	2800      	cmp	r0, #0
   e9b4a:	d1ed      	bne.n	e9b28 <__gethex+0x2bc>
   e9b4c:	ee18 0a10 	vmov	r0, s16
   e9b50:	4621      	mov	r1, r4
   e9b52:	f000 f9d9 	bl	e9f08 <_Bfree>
   e9b56:	9a14      	ldr	r2, [sp, #80]	; 0x50
   e9b58:	2300      	movs	r3, #0
   e9b5a:	6013      	str	r3, [r2, #0]
   e9b5c:	2750      	movs	r7, #80	; 0x50
   e9b5e:	e71a      	b.n	e9996 <__gethex+0x12a>
   e9b60:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e9b62:	2b00      	cmp	r3, #0
   e9b64:	d1f2      	bne.n	e9b4c <__gethex+0x2e0>
   e9b66:	e7df      	b.n	e9b28 <__gethex+0x2bc>
   e9b68:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e9b6a:	2b00      	cmp	r3, #0
   e9b6c:	d1dc      	bne.n	e9b28 <__gethex+0x2bc>
   e9b6e:	e7ed      	b.n	e9b4c <__gethex+0x2e0>
   e9b70:	000ed984 	.word	0x000ed984
   e9b74:	1e6f      	subs	r7, r5, #1
   e9b76:	f1ba 0f00 	cmp.w	sl, #0
   e9b7a:	d131      	bne.n	e9be0 <__gethex+0x374>
   e9b7c:	b127      	cbz	r7, e9b88 <__gethex+0x31c>
   e9b7e:	4639      	mov	r1, r7
   e9b80:	4620      	mov	r0, r4
   e9b82:	f000 fdab 	bl	ea6dc <__any_on>
   e9b86:	4682      	mov	sl, r0
   e9b88:	117b      	asrs	r3, r7, #5
   e9b8a:	2101      	movs	r1, #1
   e9b8c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   e9b90:	f007 071f 	and.w	r7, r7, #31
   e9b94:	fa01 f707 	lsl.w	r7, r1, r7
   e9b98:	421f      	tst	r7, r3
   e9b9a:	4629      	mov	r1, r5
   e9b9c:	4620      	mov	r0, r4
   e9b9e:	bf18      	it	ne
   e9ba0:	f04a 0a02 	orrne.w	sl, sl, #2
   e9ba4:	1b76      	subs	r6, r6, r5
   e9ba6:	f7ff fdf9 	bl	e979c <rshift>
   e9baa:	f8d8 5004 	ldr.w	r5, [r8, #4]
   e9bae:	2702      	movs	r7, #2
   e9bb0:	f1ba 0f00 	cmp.w	sl, #0
   e9bb4:	d048      	beq.n	e9c48 <__gethex+0x3dc>
   e9bb6:	f8d8 300c 	ldr.w	r3, [r8, #12]
   e9bba:	2b02      	cmp	r3, #2
   e9bbc:	d015      	beq.n	e9bea <__gethex+0x37e>
   e9bbe:	2b03      	cmp	r3, #3
   e9bc0:	d017      	beq.n	e9bf2 <__gethex+0x386>
   e9bc2:	2b01      	cmp	r3, #1
   e9bc4:	d109      	bne.n	e9bda <__gethex+0x36e>
   e9bc6:	f01a 0f02 	tst.w	sl, #2
   e9bca:	d006      	beq.n	e9bda <__gethex+0x36e>
   e9bcc:	f8d9 0000 	ldr.w	r0, [r9]
   e9bd0:	ea4a 0a00 	orr.w	sl, sl, r0
   e9bd4:	f01a 0f01 	tst.w	sl, #1
   e9bd8:	d10e      	bne.n	e9bf8 <__gethex+0x38c>
   e9bda:	f047 0710 	orr.w	r7, r7, #16
   e9bde:	e033      	b.n	e9c48 <__gethex+0x3dc>
   e9be0:	f04f 0a01 	mov.w	sl, #1
   e9be4:	e7d0      	b.n	e9b88 <__gethex+0x31c>
   e9be6:	2701      	movs	r7, #1
   e9be8:	e7e2      	b.n	e9bb0 <__gethex+0x344>
   e9bea:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e9bec:	f1c3 0301 	rsb	r3, r3, #1
   e9bf0:	9315      	str	r3, [sp, #84]	; 0x54
   e9bf2:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e9bf4:	2b00      	cmp	r3, #0
   e9bf6:	d0f0      	beq.n	e9bda <__gethex+0x36e>
   e9bf8:	f8d4 9010 	ldr.w	r9, [r4, #16]
   e9bfc:	f104 0314 	add.w	r3, r4, #20
   e9c00:	ea4f 0b89 	mov.w	fp, r9, lsl #2
   e9c04:	eb03 0189 	add.w	r1, r3, r9, lsl #2
   e9c08:	f04f 0c00 	mov.w	ip, #0
   e9c0c:	4618      	mov	r0, r3
   e9c0e:	f853 2b04 	ldr.w	r2, [r3], #4
   e9c12:	f1b2 3fff 	cmp.w	r2, #4294967295
   e9c16:	d01c      	beq.n	e9c52 <__gethex+0x3e6>
   e9c18:	3201      	adds	r2, #1
   e9c1a:	6002      	str	r2, [r0, #0]
   e9c1c:	2f02      	cmp	r7, #2
   e9c1e:	f104 0314 	add.w	r3, r4, #20
   e9c22:	d13a      	bne.n	e9c9a <__gethex+0x42e>
   e9c24:	f8d8 2000 	ldr.w	r2, [r8]
   e9c28:	3a01      	subs	r2, #1
   e9c2a:	42b2      	cmp	r2, r6
   e9c2c:	d10a      	bne.n	e9c44 <__gethex+0x3d8>
   e9c2e:	1171      	asrs	r1, r6, #5
   e9c30:	2201      	movs	r2, #1
   e9c32:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   e9c36:	f006 061f 	and.w	r6, r6, #31
   e9c3a:	fa02 f606 	lsl.w	r6, r2, r6
   e9c3e:	421e      	tst	r6, r3
   e9c40:	bf18      	it	ne
   e9c42:	4617      	movne	r7, r2
   e9c44:	f047 0720 	orr.w	r7, r7, #32
   e9c48:	9b14      	ldr	r3, [sp, #80]	; 0x50
   e9c4a:	601c      	str	r4, [r3, #0]
   e9c4c:	9b04      	ldr	r3, [sp, #16]
   e9c4e:	601d      	str	r5, [r3, #0]
   e9c50:	e6a1      	b.n	e9996 <__gethex+0x12a>
   e9c52:	4299      	cmp	r1, r3
   e9c54:	f843 cc04 	str.w	ip, [r3, #-4]
   e9c58:	d8d8      	bhi.n	e9c0c <__gethex+0x3a0>
   e9c5a:	68a3      	ldr	r3, [r4, #8]
   e9c5c:	4599      	cmp	r9, r3
   e9c5e:	db14      	blt.n	e9c8a <__gethex+0x41e>
   e9c60:	6861      	ldr	r1, [r4, #4]
   e9c62:	ee18 0a10 	vmov	r0, s16
   e9c66:	3101      	adds	r1, #1
   e9c68:	f000 f91a 	bl	e9ea0 <_Balloc>
   e9c6c:	6922      	ldr	r2, [r4, #16]
   e9c6e:	3202      	adds	r2, #2
   e9c70:	f104 010c 	add.w	r1, r4, #12
   e9c74:	4682      	mov	sl, r0
   e9c76:	0092      	lsls	r2, r2, #2
   e9c78:	300c      	adds	r0, #12
   e9c7a:	f7fe fe27 	bl	e88cc <memcpy>
   e9c7e:	4621      	mov	r1, r4
   e9c80:	ee18 0a10 	vmov	r0, s16
   e9c84:	f000 f940 	bl	e9f08 <_Bfree>
   e9c88:	4654      	mov	r4, sl
   e9c8a:	6923      	ldr	r3, [r4, #16]
   e9c8c:	1c5a      	adds	r2, r3, #1
   e9c8e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   e9c92:	6122      	str	r2, [r4, #16]
   e9c94:	2201      	movs	r2, #1
   e9c96:	615a      	str	r2, [r3, #20]
   e9c98:	e7c0      	b.n	e9c1c <__gethex+0x3b0>
   e9c9a:	6922      	ldr	r2, [r4, #16]
   e9c9c:	454a      	cmp	r2, r9
   e9c9e:	dd0b      	ble.n	e9cb8 <__gethex+0x44c>
   e9ca0:	2101      	movs	r1, #1
   e9ca2:	4620      	mov	r0, r4
   e9ca4:	f7ff fd7a 	bl	e979c <rshift>
   e9ca8:	f8d8 3008 	ldr.w	r3, [r8, #8]
   e9cac:	3501      	adds	r5, #1
   e9cae:	42ab      	cmp	r3, r5
   e9cb0:	f6ff aed7 	blt.w	e9a62 <__gethex+0x1f6>
   e9cb4:	2701      	movs	r7, #1
   e9cb6:	e7c5      	b.n	e9c44 <__gethex+0x3d8>
   e9cb8:	f016 061f 	ands.w	r6, r6, #31
   e9cbc:	d0fa      	beq.n	e9cb4 <__gethex+0x448>
   e9cbe:	449b      	add	fp, r3
   e9cc0:	f1c6 0620 	rsb	r6, r6, #32
   e9cc4:	f85b 0c04 	ldr.w	r0, [fp, #-4]
   e9cc8:	f000 f9b1 	bl	ea02e <__hi0bits>
   e9ccc:	42b0      	cmp	r0, r6
   e9cce:	dbe7      	blt.n	e9ca0 <__gethex+0x434>
   e9cd0:	e7f0      	b.n	e9cb4 <__gethex+0x448>
   e9cd2:	bf00      	nop

000e9cd4 <L_shift>:
   e9cd4:	f1c2 0208 	rsb	r2, r2, #8
   e9cd8:	0092      	lsls	r2, r2, #2
   e9cda:	b570      	push	{r4, r5, r6, lr}
   e9cdc:	f1c2 0620 	rsb	r6, r2, #32
   e9ce0:	6843      	ldr	r3, [r0, #4]
   e9ce2:	6804      	ldr	r4, [r0, #0]
   e9ce4:	fa03 f506 	lsl.w	r5, r3, r6
   e9ce8:	432c      	orrs	r4, r5
   e9cea:	40d3      	lsrs	r3, r2
   e9cec:	6004      	str	r4, [r0, #0]
   e9cee:	f840 3f04 	str.w	r3, [r0, #4]!
   e9cf2:	4288      	cmp	r0, r1
   e9cf4:	d3f4      	bcc.n	e9ce0 <L_shift+0xc>
   e9cf6:	bd70      	pop	{r4, r5, r6, pc}

000e9cf8 <__match>:
   e9cf8:	b530      	push	{r4, r5, lr}
   e9cfa:	6803      	ldr	r3, [r0, #0]
   e9cfc:	3301      	adds	r3, #1
   e9cfe:	f811 4b01 	ldrb.w	r4, [r1], #1
   e9d02:	b914      	cbnz	r4, e9d0a <__match+0x12>
   e9d04:	6003      	str	r3, [r0, #0]
   e9d06:	2001      	movs	r0, #1
   e9d08:	bd30      	pop	{r4, r5, pc}
   e9d0a:	f813 2b01 	ldrb.w	r2, [r3], #1
   e9d0e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   e9d12:	2d19      	cmp	r5, #25
   e9d14:	bf98      	it	ls
   e9d16:	3220      	addls	r2, #32
   e9d18:	42a2      	cmp	r2, r4
   e9d1a:	d0f0      	beq.n	e9cfe <__match+0x6>
   e9d1c:	2000      	movs	r0, #0
   e9d1e:	e7f3      	b.n	e9d08 <__match+0x10>

000e9d20 <__hexnan>:
   e9d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e9d24:	680b      	ldr	r3, [r1, #0]
   e9d26:	6801      	ldr	r1, [r0, #0]
   e9d28:	115e      	asrs	r6, r3, #5
   e9d2a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   e9d2e:	f013 031f 	ands.w	r3, r3, #31
   e9d32:	b087      	sub	sp, #28
   e9d34:	bf18      	it	ne
   e9d36:	3604      	addne	r6, #4
   e9d38:	2500      	movs	r5, #0
   e9d3a:	1f37      	subs	r7, r6, #4
   e9d3c:	4682      	mov	sl, r0
   e9d3e:	4690      	mov	r8, r2
   e9d40:	9301      	str	r3, [sp, #4]
   e9d42:	f846 5c04 	str.w	r5, [r6, #-4]
   e9d46:	46b9      	mov	r9, r7
   e9d48:	463c      	mov	r4, r7
   e9d4a:	9502      	str	r5, [sp, #8]
   e9d4c:	46ab      	mov	fp, r5
   e9d4e:	784a      	ldrb	r2, [r1, #1]
   e9d50:	1c4b      	adds	r3, r1, #1
   e9d52:	9303      	str	r3, [sp, #12]
   e9d54:	b342      	cbz	r2, e9da8 <__hexnan+0x88>
   e9d56:	4610      	mov	r0, r2
   e9d58:	9105      	str	r1, [sp, #20]
   e9d5a:	9204      	str	r2, [sp, #16]
   e9d5c:	f7ff fd70 	bl	e9840 <__hexdig_fun>
   e9d60:	2800      	cmp	r0, #0
   e9d62:	d14f      	bne.n	e9e04 <__hexnan+0xe4>
   e9d64:	9a04      	ldr	r2, [sp, #16]
   e9d66:	9905      	ldr	r1, [sp, #20]
   e9d68:	2a20      	cmp	r2, #32
   e9d6a:	d818      	bhi.n	e9d9e <__hexnan+0x7e>
   e9d6c:	9b02      	ldr	r3, [sp, #8]
   e9d6e:	459b      	cmp	fp, r3
   e9d70:	dd13      	ble.n	e9d9a <__hexnan+0x7a>
   e9d72:	454c      	cmp	r4, r9
   e9d74:	d206      	bcs.n	e9d84 <__hexnan+0x64>
   e9d76:	2d07      	cmp	r5, #7
   e9d78:	dc04      	bgt.n	e9d84 <__hexnan+0x64>
   e9d7a:	462a      	mov	r2, r5
   e9d7c:	4649      	mov	r1, r9
   e9d7e:	4620      	mov	r0, r4
   e9d80:	f7ff ffa8 	bl	e9cd4 <L_shift>
   e9d84:	4544      	cmp	r4, r8
   e9d86:	d950      	bls.n	e9e2a <__hexnan+0x10a>
   e9d88:	2300      	movs	r3, #0
   e9d8a:	f1a4 0904 	sub.w	r9, r4, #4
   e9d8e:	f844 3c04 	str.w	r3, [r4, #-4]
   e9d92:	f8cd b008 	str.w	fp, [sp, #8]
   e9d96:	464c      	mov	r4, r9
   e9d98:	461d      	mov	r5, r3
   e9d9a:	9903      	ldr	r1, [sp, #12]
   e9d9c:	e7d7      	b.n	e9d4e <__hexnan+0x2e>
   e9d9e:	2a29      	cmp	r2, #41	; 0x29
   e9da0:	d156      	bne.n	e9e50 <__hexnan+0x130>
   e9da2:	3102      	adds	r1, #2
   e9da4:	f8ca 1000 	str.w	r1, [sl]
   e9da8:	f1bb 0f00 	cmp.w	fp, #0
   e9dac:	d050      	beq.n	e9e50 <__hexnan+0x130>
   e9dae:	454c      	cmp	r4, r9
   e9db0:	d206      	bcs.n	e9dc0 <__hexnan+0xa0>
   e9db2:	2d07      	cmp	r5, #7
   e9db4:	dc04      	bgt.n	e9dc0 <__hexnan+0xa0>
   e9db6:	462a      	mov	r2, r5
   e9db8:	4649      	mov	r1, r9
   e9dba:	4620      	mov	r0, r4
   e9dbc:	f7ff ff8a 	bl	e9cd4 <L_shift>
   e9dc0:	4544      	cmp	r4, r8
   e9dc2:	d934      	bls.n	e9e2e <__hexnan+0x10e>
   e9dc4:	f1a8 0204 	sub.w	r2, r8, #4
   e9dc8:	4623      	mov	r3, r4
   e9dca:	f853 1b04 	ldr.w	r1, [r3], #4
   e9dce:	f842 1f04 	str.w	r1, [r2, #4]!
   e9dd2:	429f      	cmp	r7, r3
   e9dd4:	d2f9      	bcs.n	e9dca <__hexnan+0xaa>
   e9dd6:	1b3b      	subs	r3, r7, r4
   e9dd8:	f023 0303 	bic.w	r3, r3, #3
   e9ddc:	3304      	adds	r3, #4
   e9dde:	3401      	adds	r4, #1
   e9de0:	3e03      	subs	r6, #3
   e9de2:	42b4      	cmp	r4, r6
   e9de4:	bf88      	it	hi
   e9de6:	2304      	movhi	r3, #4
   e9de8:	4443      	add	r3, r8
   e9dea:	2200      	movs	r2, #0
   e9dec:	f843 2b04 	str.w	r2, [r3], #4
   e9df0:	429f      	cmp	r7, r3
   e9df2:	d2fb      	bcs.n	e9dec <__hexnan+0xcc>
   e9df4:	683b      	ldr	r3, [r7, #0]
   e9df6:	b91b      	cbnz	r3, e9e00 <__hexnan+0xe0>
   e9df8:	4547      	cmp	r7, r8
   e9dfa:	d127      	bne.n	e9e4c <__hexnan+0x12c>
   e9dfc:	2301      	movs	r3, #1
   e9dfe:	603b      	str	r3, [r7, #0]
   e9e00:	2005      	movs	r0, #5
   e9e02:	e026      	b.n	e9e52 <__hexnan+0x132>
   e9e04:	3501      	adds	r5, #1
   e9e06:	2d08      	cmp	r5, #8
   e9e08:	f10b 0b01 	add.w	fp, fp, #1
   e9e0c:	dd06      	ble.n	e9e1c <__hexnan+0xfc>
   e9e0e:	4544      	cmp	r4, r8
   e9e10:	d9c3      	bls.n	e9d9a <__hexnan+0x7a>
   e9e12:	2300      	movs	r3, #0
   e9e14:	f844 3c04 	str.w	r3, [r4, #-4]
   e9e18:	2501      	movs	r5, #1
   e9e1a:	3c04      	subs	r4, #4
   e9e1c:	6822      	ldr	r2, [r4, #0]
   e9e1e:	f000 000f 	and.w	r0, r0, #15
   e9e22:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   e9e26:	6022      	str	r2, [r4, #0]
   e9e28:	e7b7      	b.n	e9d9a <__hexnan+0x7a>
   e9e2a:	2508      	movs	r5, #8
   e9e2c:	e7b5      	b.n	e9d9a <__hexnan+0x7a>
   e9e2e:	9b01      	ldr	r3, [sp, #4]
   e9e30:	2b00      	cmp	r3, #0
   e9e32:	d0df      	beq.n	e9df4 <__hexnan+0xd4>
   e9e34:	f04f 32ff 	mov.w	r2, #4294967295
   e9e38:	f1c3 0320 	rsb	r3, r3, #32
   e9e3c:	fa22 f303 	lsr.w	r3, r2, r3
   e9e40:	f856 2c04 	ldr.w	r2, [r6, #-4]
   e9e44:	401a      	ands	r2, r3
   e9e46:	f846 2c04 	str.w	r2, [r6, #-4]
   e9e4a:	e7d3      	b.n	e9df4 <__hexnan+0xd4>
   e9e4c:	3f04      	subs	r7, #4
   e9e4e:	e7d1      	b.n	e9df4 <__hexnan+0xd4>
   e9e50:	2004      	movs	r0, #4
   e9e52:	b007      	add	sp, #28
   e9e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000e9e58 <_gettimeofday_r>:
   e9e58:	b538      	push	{r3, r4, r5, lr}
   e9e5a:	4d07      	ldr	r5, [pc, #28]	; (e9e78 <_gettimeofday_r+0x20>)
   e9e5c:	2300      	movs	r3, #0
   e9e5e:	4604      	mov	r4, r0
   e9e60:	4608      	mov	r0, r1
   e9e62:	4611      	mov	r1, r2
   e9e64:	602b      	str	r3, [r5, #0]
   e9e66:	f7f1 f8d7 	bl	db018 <_gettimeofday>
   e9e6a:	1c43      	adds	r3, r0, #1
   e9e6c:	d102      	bne.n	e9e74 <_gettimeofday_r+0x1c>
   e9e6e:	682b      	ldr	r3, [r5, #0]
   e9e70:	b103      	cbz	r3, e9e74 <_gettimeofday_r+0x1c>
   e9e72:	6023      	str	r3, [r4, #0]
   e9e74:	bd38      	pop	{r3, r4, r5, pc}
   e9e76:	bf00      	nop
   e9e78:	2003e7f0 	.word	0x2003e7f0

000e9e7c <__ascii_mbtowc>:
   e9e7c:	b082      	sub	sp, #8
   e9e7e:	b901      	cbnz	r1, e9e82 <__ascii_mbtowc+0x6>
   e9e80:	a901      	add	r1, sp, #4
   e9e82:	b142      	cbz	r2, e9e96 <__ascii_mbtowc+0x1a>
   e9e84:	b14b      	cbz	r3, e9e9a <__ascii_mbtowc+0x1e>
   e9e86:	7813      	ldrb	r3, [r2, #0]
   e9e88:	600b      	str	r3, [r1, #0]
   e9e8a:	7812      	ldrb	r2, [r2, #0]
   e9e8c:	1e10      	subs	r0, r2, #0
   e9e8e:	bf18      	it	ne
   e9e90:	2001      	movne	r0, #1
   e9e92:	b002      	add	sp, #8
   e9e94:	4770      	bx	lr
   e9e96:	4610      	mov	r0, r2
   e9e98:	e7fb      	b.n	e9e92 <__ascii_mbtowc+0x16>
   e9e9a:	f06f 0001 	mvn.w	r0, #1
   e9e9e:	e7f8      	b.n	e9e92 <__ascii_mbtowc+0x16>

000e9ea0 <_Balloc>:
   e9ea0:	b570      	push	{r4, r5, r6, lr}
   e9ea2:	6a46      	ldr	r6, [r0, #36]	; 0x24
   e9ea4:	4604      	mov	r4, r0
   e9ea6:	460d      	mov	r5, r1
   e9ea8:	b93e      	cbnz	r6, e9eba <_Balloc+0x1a>
   e9eaa:	2010      	movs	r0, #16
   e9eac:	f7fb fc80 	bl	e57b0 <malloc>
   e9eb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
   e9eb4:	6260      	str	r0, [r4, #36]	; 0x24
   e9eb6:	6006      	str	r6, [r0, #0]
   e9eb8:	60c6      	str	r6, [r0, #12]
   e9eba:	6a66      	ldr	r6, [r4, #36]	; 0x24
   e9ebc:	68f3      	ldr	r3, [r6, #12]
   e9ebe:	b183      	cbz	r3, e9ee2 <_Balloc+0x42>
   e9ec0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   e9ec2:	68db      	ldr	r3, [r3, #12]
   e9ec4:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   e9ec8:	b9b8      	cbnz	r0, e9efa <_Balloc+0x5a>
   e9eca:	2101      	movs	r1, #1
   e9ecc:	fa01 f605 	lsl.w	r6, r1, r5
   e9ed0:	1d72      	adds	r2, r6, #5
   e9ed2:	0092      	lsls	r2, r2, #2
   e9ed4:	4620      	mov	r0, r4
   e9ed6:	f7fe fd29 	bl	e892c <_calloc_r>
   e9eda:	b160      	cbz	r0, e9ef6 <_Balloc+0x56>
   e9edc:	e9c0 5601 	strd	r5, r6, [r0, #4]
   e9ee0:	e00e      	b.n	e9f00 <_Balloc+0x60>
   e9ee2:	2221      	movs	r2, #33	; 0x21
   e9ee4:	2104      	movs	r1, #4
   e9ee6:	4620      	mov	r0, r4
   e9ee8:	f7fe fd20 	bl	e892c <_calloc_r>
   e9eec:	6a63      	ldr	r3, [r4, #36]	; 0x24
   e9eee:	60f0      	str	r0, [r6, #12]
   e9ef0:	68db      	ldr	r3, [r3, #12]
   e9ef2:	2b00      	cmp	r3, #0
   e9ef4:	d1e4      	bne.n	e9ec0 <_Balloc+0x20>
   e9ef6:	2000      	movs	r0, #0
   e9ef8:	bd70      	pop	{r4, r5, r6, pc}
   e9efa:	6802      	ldr	r2, [r0, #0]
   e9efc:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   e9f00:	2300      	movs	r3, #0
   e9f02:	e9c0 3303 	strd	r3, r3, [r0, #12]
   e9f06:	e7f7      	b.n	e9ef8 <_Balloc+0x58>

000e9f08 <_Bfree>:
   e9f08:	b570      	push	{r4, r5, r6, lr}
   e9f0a:	6a46      	ldr	r6, [r0, #36]	; 0x24
   e9f0c:	4605      	mov	r5, r0
   e9f0e:	460c      	mov	r4, r1
   e9f10:	b93e      	cbnz	r6, e9f22 <_Bfree+0x1a>
   e9f12:	2010      	movs	r0, #16
   e9f14:	f7fb fc4c 	bl	e57b0 <malloc>
   e9f18:	e9c0 6601 	strd	r6, r6, [r0, #4]
   e9f1c:	6268      	str	r0, [r5, #36]	; 0x24
   e9f1e:	6006      	str	r6, [r0, #0]
   e9f20:	60c6      	str	r6, [r0, #12]
   e9f22:	b13c      	cbz	r4, e9f34 <_Bfree+0x2c>
   e9f24:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   e9f26:	6862      	ldr	r2, [r4, #4]
   e9f28:	68db      	ldr	r3, [r3, #12]
   e9f2a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   e9f2e:	6021      	str	r1, [r4, #0]
   e9f30:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   e9f34:	bd70      	pop	{r4, r5, r6, pc}

000e9f36 <__multadd>:
   e9f36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e9f3a:	690e      	ldr	r6, [r1, #16]
   e9f3c:	4607      	mov	r7, r0
   e9f3e:	4698      	mov	r8, r3
   e9f40:	460c      	mov	r4, r1
   e9f42:	f101 0014 	add.w	r0, r1, #20
   e9f46:	2300      	movs	r3, #0
   e9f48:	6805      	ldr	r5, [r0, #0]
   e9f4a:	b2a9      	uxth	r1, r5
   e9f4c:	fb02 8101 	mla	r1, r2, r1, r8
   e9f50:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   e9f54:	0c2d      	lsrs	r5, r5, #16
   e9f56:	fb02 c505 	mla	r5, r2, r5, ip
   e9f5a:	b289      	uxth	r1, r1
   e9f5c:	3301      	adds	r3, #1
   e9f5e:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   e9f62:	429e      	cmp	r6, r3
   e9f64:	f840 1b04 	str.w	r1, [r0], #4
   e9f68:	ea4f 4815 	mov.w	r8, r5, lsr #16
   e9f6c:	dcec      	bgt.n	e9f48 <__multadd+0x12>
   e9f6e:	f1b8 0f00 	cmp.w	r8, #0
   e9f72:	d01b      	beq.n	e9fac <__multadd+0x76>
   e9f74:	68a3      	ldr	r3, [r4, #8]
   e9f76:	42b3      	cmp	r3, r6
   e9f78:	dc12      	bgt.n	e9fa0 <__multadd+0x6a>
   e9f7a:	6861      	ldr	r1, [r4, #4]
   e9f7c:	4638      	mov	r0, r7
   e9f7e:	3101      	adds	r1, #1
   e9f80:	f7ff ff8e 	bl	e9ea0 <_Balloc>
   e9f84:	6922      	ldr	r2, [r4, #16]
   e9f86:	3202      	adds	r2, #2
   e9f88:	f104 010c 	add.w	r1, r4, #12
   e9f8c:	4605      	mov	r5, r0
   e9f8e:	0092      	lsls	r2, r2, #2
   e9f90:	300c      	adds	r0, #12
   e9f92:	f7fe fc9b 	bl	e88cc <memcpy>
   e9f96:	4621      	mov	r1, r4
   e9f98:	4638      	mov	r0, r7
   e9f9a:	f7ff ffb5 	bl	e9f08 <_Bfree>
   e9f9e:	462c      	mov	r4, r5
   e9fa0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   e9fa4:	3601      	adds	r6, #1
   e9fa6:	f8c3 8014 	str.w	r8, [r3, #20]
   e9faa:	6126      	str	r6, [r4, #16]
   e9fac:	4620      	mov	r0, r4
   e9fae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000e9fb2 <__s2b>:
   e9fb2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   e9fb6:	460c      	mov	r4, r1
   e9fb8:	4615      	mov	r5, r2
   e9fba:	461f      	mov	r7, r3
   e9fbc:	2209      	movs	r2, #9
   e9fbe:	3308      	adds	r3, #8
   e9fc0:	4606      	mov	r6, r0
   e9fc2:	fb93 f3f2 	sdiv	r3, r3, r2
   e9fc6:	2100      	movs	r1, #0
   e9fc8:	2201      	movs	r2, #1
   e9fca:	429a      	cmp	r2, r3
   e9fcc:	db20      	blt.n	ea010 <__s2b+0x5e>
   e9fce:	4630      	mov	r0, r6
   e9fd0:	f7ff ff66 	bl	e9ea0 <_Balloc>
   e9fd4:	9b08      	ldr	r3, [sp, #32]
   e9fd6:	6143      	str	r3, [r0, #20]
   e9fd8:	2d09      	cmp	r5, #9
   e9fda:	f04f 0301 	mov.w	r3, #1
   e9fde:	6103      	str	r3, [r0, #16]
   e9fe0:	dd19      	ble.n	ea016 <__s2b+0x64>
   e9fe2:	f104 0909 	add.w	r9, r4, #9
   e9fe6:	46c8      	mov	r8, r9
   e9fe8:	442c      	add	r4, r5
   e9fea:	f818 3b01 	ldrb.w	r3, [r8], #1
   e9fee:	4601      	mov	r1, r0
   e9ff0:	3b30      	subs	r3, #48	; 0x30
   e9ff2:	220a      	movs	r2, #10
   e9ff4:	4630      	mov	r0, r6
   e9ff6:	f7ff ff9e 	bl	e9f36 <__multadd>
   e9ffa:	45a0      	cmp	r8, r4
   e9ffc:	d1f5      	bne.n	e9fea <__s2b+0x38>
   e9ffe:	f1a5 0408 	sub.w	r4, r5, #8
   ea002:	444c      	add	r4, r9
   ea004:	1b2d      	subs	r5, r5, r4
   ea006:	1963      	adds	r3, r4, r5
   ea008:	42bb      	cmp	r3, r7
   ea00a:	db07      	blt.n	ea01c <__s2b+0x6a>
   ea00c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   ea010:	0052      	lsls	r2, r2, #1
   ea012:	3101      	adds	r1, #1
   ea014:	e7d9      	b.n	e9fca <__s2b+0x18>
   ea016:	340a      	adds	r4, #10
   ea018:	2509      	movs	r5, #9
   ea01a:	e7f3      	b.n	ea004 <__s2b+0x52>
   ea01c:	f814 3b01 	ldrb.w	r3, [r4], #1
   ea020:	4601      	mov	r1, r0
   ea022:	3b30      	subs	r3, #48	; 0x30
   ea024:	220a      	movs	r2, #10
   ea026:	4630      	mov	r0, r6
   ea028:	f7ff ff85 	bl	e9f36 <__multadd>
   ea02c:	e7eb      	b.n	ea006 <__s2b+0x54>

000ea02e <__hi0bits>:
   ea02e:	0c03      	lsrs	r3, r0, #16
   ea030:	041b      	lsls	r3, r3, #16
   ea032:	b9d3      	cbnz	r3, ea06a <__hi0bits+0x3c>
   ea034:	0400      	lsls	r0, r0, #16
   ea036:	2310      	movs	r3, #16
   ea038:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   ea03c:	bf04      	itt	eq
   ea03e:	0200      	lsleq	r0, r0, #8
   ea040:	3308      	addeq	r3, #8
   ea042:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   ea046:	bf04      	itt	eq
   ea048:	0100      	lsleq	r0, r0, #4
   ea04a:	3304      	addeq	r3, #4
   ea04c:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   ea050:	bf04      	itt	eq
   ea052:	0080      	lsleq	r0, r0, #2
   ea054:	3302      	addeq	r3, #2
   ea056:	2800      	cmp	r0, #0
   ea058:	db05      	blt.n	ea066 <__hi0bits+0x38>
   ea05a:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   ea05e:	f103 0301 	add.w	r3, r3, #1
   ea062:	bf08      	it	eq
   ea064:	2320      	moveq	r3, #32
   ea066:	4618      	mov	r0, r3
   ea068:	4770      	bx	lr
   ea06a:	2300      	movs	r3, #0
   ea06c:	e7e4      	b.n	ea038 <__hi0bits+0xa>

000ea06e <__lo0bits>:
   ea06e:	6803      	ldr	r3, [r0, #0]
   ea070:	f013 0207 	ands.w	r2, r3, #7
   ea074:	4601      	mov	r1, r0
   ea076:	d00b      	beq.n	ea090 <__lo0bits+0x22>
   ea078:	07da      	lsls	r2, r3, #31
   ea07a:	d424      	bmi.n	ea0c6 <__lo0bits+0x58>
   ea07c:	0798      	lsls	r0, r3, #30
   ea07e:	bf49      	itett	mi
   ea080:	085b      	lsrmi	r3, r3, #1
   ea082:	089b      	lsrpl	r3, r3, #2
   ea084:	2001      	movmi	r0, #1
   ea086:	600b      	strmi	r3, [r1, #0]
   ea088:	bf5c      	itt	pl
   ea08a:	600b      	strpl	r3, [r1, #0]
   ea08c:	2002      	movpl	r0, #2
   ea08e:	4770      	bx	lr
   ea090:	b298      	uxth	r0, r3
   ea092:	b9b0      	cbnz	r0, ea0c2 <__lo0bits+0x54>
   ea094:	0c1b      	lsrs	r3, r3, #16
   ea096:	2010      	movs	r0, #16
   ea098:	f013 0fff 	tst.w	r3, #255	; 0xff
   ea09c:	bf04      	itt	eq
   ea09e:	0a1b      	lsreq	r3, r3, #8
   ea0a0:	3008      	addeq	r0, #8
   ea0a2:	071a      	lsls	r2, r3, #28
   ea0a4:	bf04      	itt	eq
   ea0a6:	091b      	lsreq	r3, r3, #4
   ea0a8:	3004      	addeq	r0, #4
   ea0aa:	079a      	lsls	r2, r3, #30
   ea0ac:	bf04      	itt	eq
   ea0ae:	089b      	lsreq	r3, r3, #2
   ea0b0:	3002      	addeq	r0, #2
   ea0b2:	07da      	lsls	r2, r3, #31
   ea0b4:	d403      	bmi.n	ea0be <__lo0bits+0x50>
   ea0b6:	085b      	lsrs	r3, r3, #1
   ea0b8:	f100 0001 	add.w	r0, r0, #1
   ea0bc:	d005      	beq.n	ea0ca <__lo0bits+0x5c>
   ea0be:	600b      	str	r3, [r1, #0]
   ea0c0:	4770      	bx	lr
   ea0c2:	4610      	mov	r0, r2
   ea0c4:	e7e8      	b.n	ea098 <__lo0bits+0x2a>
   ea0c6:	2000      	movs	r0, #0
   ea0c8:	4770      	bx	lr
   ea0ca:	2020      	movs	r0, #32
   ea0cc:	4770      	bx	lr

000ea0ce <__i2b>:
   ea0ce:	b510      	push	{r4, lr}
   ea0d0:	460c      	mov	r4, r1
   ea0d2:	2101      	movs	r1, #1
   ea0d4:	f7ff fee4 	bl	e9ea0 <_Balloc>
   ea0d8:	2201      	movs	r2, #1
   ea0da:	6144      	str	r4, [r0, #20]
   ea0dc:	6102      	str	r2, [r0, #16]
   ea0de:	bd10      	pop	{r4, pc}

000ea0e0 <__multiply>:
   ea0e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ea0e4:	4615      	mov	r5, r2
   ea0e6:	690a      	ldr	r2, [r1, #16]
   ea0e8:	692b      	ldr	r3, [r5, #16]
   ea0ea:	429a      	cmp	r2, r3
   ea0ec:	bfb8      	it	lt
   ea0ee:	460b      	movlt	r3, r1
   ea0f0:	460c      	mov	r4, r1
   ea0f2:	bfbc      	itt	lt
   ea0f4:	462c      	movlt	r4, r5
   ea0f6:	461d      	movlt	r5, r3
   ea0f8:	6927      	ldr	r7, [r4, #16]
   ea0fa:	f8d5 9010 	ldr.w	r9, [r5, #16]
   ea0fe:	68a3      	ldr	r3, [r4, #8]
   ea100:	6861      	ldr	r1, [r4, #4]
   ea102:	eb07 0609 	add.w	r6, r7, r9
   ea106:	42b3      	cmp	r3, r6
   ea108:	bfb8      	it	lt
   ea10a:	3101      	addlt	r1, #1
   ea10c:	b085      	sub	sp, #20
   ea10e:	f7ff fec7 	bl	e9ea0 <_Balloc>
   ea112:	f100 0114 	add.w	r1, r0, #20
   ea116:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   ea11a:	460b      	mov	r3, r1
   ea11c:	2200      	movs	r2, #0
   ea11e:	4543      	cmp	r3, r8
   ea120:	d31d      	bcc.n	ea15e <__multiply+0x7e>
   ea122:	f104 0314 	add.w	r3, r4, #20
   ea126:	f105 0214 	add.w	r2, r5, #20
   ea12a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   ea12e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   ea132:	9302      	str	r3, [sp, #8]
   ea134:	1b3b      	subs	r3, r7, r4
   ea136:	3b15      	subs	r3, #21
   ea138:	f023 0303 	bic.w	r3, r3, #3
   ea13c:	3304      	adds	r3, #4
   ea13e:	f104 0515 	add.w	r5, r4, #21
   ea142:	42af      	cmp	r7, r5
   ea144:	bf38      	it	cc
   ea146:	2304      	movcc	r3, #4
   ea148:	9301      	str	r3, [sp, #4]
   ea14a:	9b02      	ldr	r3, [sp, #8]
   ea14c:	9203      	str	r2, [sp, #12]
   ea14e:	4293      	cmp	r3, r2
   ea150:	d808      	bhi.n	ea164 <__multiply+0x84>
   ea152:	2e00      	cmp	r6, #0
   ea154:	dc5a      	bgt.n	ea20c <__multiply+0x12c>
   ea156:	6106      	str	r6, [r0, #16]
   ea158:	b005      	add	sp, #20
   ea15a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ea15e:	f843 2b04 	str.w	r2, [r3], #4
   ea162:	e7dc      	b.n	ea11e <__multiply+0x3e>
   ea164:	f8b2 a000 	ldrh.w	sl, [r2]
   ea168:	f1ba 0f00 	cmp.w	sl, #0
   ea16c:	d024      	beq.n	ea1b8 <__multiply+0xd8>
   ea16e:	f104 0e14 	add.w	lr, r4, #20
   ea172:	4689      	mov	r9, r1
   ea174:	f04f 0c00 	mov.w	ip, #0
   ea178:	f85e 5b04 	ldr.w	r5, [lr], #4
   ea17c:	f8d9 b000 	ldr.w	fp, [r9]
   ea180:	b2ab      	uxth	r3, r5
   ea182:	fa1f fb8b 	uxth.w	fp, fp
   ea186:	fb0a b303 	mla	r3, sl, r3, fp
   ea18a:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   ea18e:	f8d9 5000 	ldr.w	r5, [r9]
   ea192:	4463      	add	r3, ip
   ea194:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   ea198:	fb0a c50b 	mla	r5, sl, fp, ip
   ea19c:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   ea1a0:	b29b      	uxth	r3, r3
   ea1a2:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   ea1a6:	4577      	cmp	r7, lr
   ea1a8:	f849 3b04 	str.w	r3, [r9], #4
   ea1ac:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   ea1b0:	d8e2      	bhi.n	ea178 <__multiply+0x98>
   ea1b2:	9b01      	ldr	r3, [sp, #4]
   ea1b4:	f841 c003 	str.w	ip, [r1, r3]
   ea1b8:	9b03      	ldr	r3, [sp, #12]
   ea1ba:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   ea1be:	3204      	adds	r2, #4
   ea1c0:	f1b9 0f00 	cmp.w	r9, #0
   ea1c4:	d020      	beq.n	ea208 <__multiply+0x128>
   ea1c6:	680b      	ldr	r3, [r1, #0]
   ea1c8:	f104 0c14 	add.w	ip, r4, #20
   ea1cc:	468e      	mov	lr, r1
   ea1ce:	f04f 0a00 	mov.w	sl, #0
   ea1d2:	f8bc 5000 	ldrh.w	r5, [ip]
   ea1d6:	f8be b002 	ldrh.w	fp, [lr, #2]
   ea1da:	fb09 b505 	mla	r5, r9, r5, fp
   ea1de:	44aa      	add	sl, r5
   ea1e0:	b29b      	uxth	r3, r3
   ea1e2:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   ea1e6:	f84e 3b04 	str.w	r3, [lr], #4
   ea1ea:	f85c 3b04 	ldr.w	r3, [ip], #4
   ea1ee:	f8be 5000 	ldrh.w	r5, [lr]
   ea1f2:	0c1b      	lsrs	r3, r3, #16
   ea1f4:	fb09 5303 	mla	r3, r9, r3, r5
   ea1f8:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   ea1fc:	4567      	cmp	r7, ip
   ea1fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   ea202:	d8e6      	bhi.n	ea1d2 <__multiply+0xf2>
   ea204:	9d01      	ldr	r5, [sp, #4]
   ea206:	514b      	str	r3, [r1, r5]
   ea208:	3104      	adds	r1, #4
   ea20a:	e79e      	b.n	ea14a <__multiply+0x6a>
   ea20c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   ea210:	2b00      	cmp	r3, #0
   ea212:	d1a0      	bne.n	ea156 <__multiply+0x76>
   ea214:	3e01      	subs	r6, #1
   ea216:	e79c      	b.n	ea152 <__multiply+0x72>

000ea218 <__pow5mult>:
   ea218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   ea21c:	4615      	mov	r5, r2
   ea21e:	f012 0203 	ands.w	r2, r2, #3
   ea222:	4606      	mov	r6, r0
   ea224:	460f      	mov	r7, r1
   ea226:	d007      	beq.n	ea238 <__pow5mult+0x20>
   ea228:	4c21      	ldr	r4, [pc, #132]	; (ea2b0 <__pow5mult+0x98>)
   ea22a:	3a01      	subs	r2, #1
   ea22c:	2300      	movs	r3, #0
   ea22e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   ea232:	f7ff fe80 	bl	e9f36 <__multadd>
   ea236:	4607      	mov	r7, r0
   ea238:	10ad      	asrs	r5, r5, #2
   ea23a:	d035      	beq.n	ea2a8 <__pow5mult+0x90>
   ea23c:	6a74      	ldr	r4, [r6, #36]	; 0x24
   ea23e:	b93c      	cbnz	r4, ea250 <__pow5mult+0x38>
   ea240:	2010      	movs	r0, #16
   ea242:	f7fb fab5 	bl	e57b0 <malloc>
   ea246:	e9c0 4401 	strd	r4, r4, [r0, #4]
   ea24a:	6270      	str	r0, [r6, #36]	; 0x24
   ea24c:	6004      	str	r4, [r0, #0]
   ea24e:	60c4      	str	r4, [r0, #12]
   ea250:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   ea254:	f8d8 4008 	ldr.w	r4, [r8, #8]
   ea258:	b94c      	cbnz	r4, ea26e <__pow5mult+0x56>
   ea25a:	f240 2171 	movw	r1, #625	; 0x271
   ea25e:	4630      	mov	r0, r6
   ea260:	f7ff ff35 	bl	ea0ce <__i2b>
   ea264:	2300      	movs	r3, #0
   ea266:	f8c8 0008 	str.w	r0, [r8, #8]
   ea26a:	4604      	mov	r4, r0
   ea26c:	6003      	str	r3, [r0, #0]
   ea26e:	f04f 0900 	mov.w	r9, #0
   ea272:	07eb      	lsls	r3, r5, #31
   ea274:	d50a      	bpl.n	ea28c <__pow5mult+0x74>
   ea276:	4639      	mov	r1, r7
   ea278:	4622      	mov	r2, r4
   ea27a:	4630      	mov	r0, r6
   ea27c:	f7ff ff30 	bl	ea0e0 <__multiply>
   ea280:	4639      	mov	r1, r7
   ea282:	4680      	mov	r8, r0
   ea284:	4630      	mov	r0, r6
   ea286:	f7ff fe3f 	bl	e9f08 <_Bfree>
   ea28a:	4647      	mov	r7, r8
   ea28c:	106d      	asrs	r5, r5, #1
   ea28e:	d00b      	beq.n	ea2a8 <__pow5mult+0x90>
   ea290:	6820      	ldr	r0, [r4, #0]
   ea292:	b938      	cbnz	r0, ea2a4 <__pow5mult+0x8c>
   ea294:	4622      	mov	r2, r4
   ea296:	4621      	mov	r1, r4
   ea298:	4630      	mov	r0, r6
   ea29a:	f7ff ff21 	bl	ea0e0 <__multiply>
   ea29e:	6020      	str	r0, [r4, #0]
   ea2a0:	f8c0 9000 	str.w	r9, [r0]
   ea2a4:	4604      	mov	r4, r0
   ea2a6:	e7e4      	b.n	ea272 <__pow5mult+0x5a>
   ea2a8:	4638      	mov	r0, r7
   ea2aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   ea2ae:	bf00      	nop
   ea2b0:	000eda88 	.word	0x000eda88

000ea2b4 <__lshift>:
   ea2b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   ea2b8:	460c      	mov	r4, r1
   ea2ba:	6849      	ldr	r1, [r1, #4]
   ea2bc:	6923      	ldr	r3, [r4, #16]
   ea2be:	eb03 1862 	add.w	r8, r3, r2, asr #5
   ea2c2:	68a3      	ldr	r3, [r4, #8]
   ea2c4:	4607      	mov	r7, r0
   ea2c6:	4691      	mov	r9, r2
   ea2c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
   ea2cc:	f108 0601 	add.w	r6, r8, #1
   ea2d0:	42b3      	cmp	r3, r6
   ea2d2:	db3f      	blt.n	ea354 <__lshift+0xa0>
   ea2d4:	4638      	mov	r0, r7
   ea2d6:	f7ff fde3 	bl	e9ea0 <_Balloc>
   ea2da:	2300      	movs	r3, #0
   ea2dc:	4605      	mov	r5, r0
   ea2de:	f100 0114 	add.w	r1, r0, #20
   ea2e2:	f100 0210 	add.w	r2, r0, #16
   ea2e6:	4618      	mov	r0, r3
   ea2e8:	4553      	cmp	r3, sl
   ea2ea:	db36      	blt.n	ea35a <__lshift+0xa6>
   ea2ec:	6920      	ldr	r0, [r4, #16]
   ea2ee:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   ea2f2:	f104 0314 	add.w	r3, r4, #20
   ea2f6:	f019 091f 	ands.w	r9, r9, #31
   ea2fa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   ea2fe:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   ea302:	d02e      	beq.n	ea362 <__lshift+0xae>
   ea304:	f1c9 0e20 	rsb	lr, r9, #32
   ea308:	468a      	mov	sl, r1
   ea30a:	2200      	movs	r2, #0
   ea30c:	6818      	ldr	r0, [r3, #0]
   ea30e:	fa00 f009 	lsl.w	r0, r0, r9
   ea312:	4302      	orrs	r2, r0
   ea314:	f84a 2b04 	str.w	r2, [sl], #4
   ea318:	f853 2b04 	ldr.w	r2, [r3], #4
   ea31c:	459c      	cmp	ip, r3
   ea31e:	fa22 f20e 	lsr.w	r2, r2, lr
   ea322:	d8f3      	bhi.n	ea30c <__lshift+0x58>
   ea324:	ebac 0304 	sub.w	r3, ip, r4
   ea328:	3b15      	subs	r3, #21
   ea32a:	f023 0303 	bic.w	r3, r3, #3
   ea32e:	3304      	adds	r3, #4
   ea330:	f104 0015 	add.w	r0, r4, #21
   ea334:	4560      	cmp	r0, ip
   ea336:	bf88      	it	hi
   ea338:	2304      	movhi	r3, #4
   ea33a:	50ca      	str	r2, [r1, r3]
   ea33c:	b10a      	cbz	r2, ea342 <__lshift+0x8e>
   ea33e:	f108 0602 	add.w	r6, r8, #2
   ea342:	3e01      	subs	r6, #1
   ea344:	4638      	mov	r0, r7
   ea346:	612e      	str	r6, [r5, #16]
   ea348:	4621      	mov	r1, r4
   ea34a:	f7ff fddd 	bl	e9f08 <_Bfree>
   ea34e:	4628      	mov	r0, r5
   ea350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   ea354:	3101      	adds	r1, #1
   ea356:	005b      	lsls	r3, r3, #1
   ea358:	e7ba      	b.n	ea2d0 <__lshift+0x1c>
   ea35a:	f842 0f04 	str.w	r0, [r2, #4]!
   ea35e:	3301      	adds	r3, #1
   ea360:	e7c2      	b.n	ea2e8 <__lshift+0x34>
   ea362:	3904      	subs	r1, #4
   ea364:	f853 2b04 	ldr.w	r2, [r3], #4
   ea368:	f841 2f04 	str.w	r2, [r1, #4]!
   ea36c:	459c      	cmp	ip, r3
   ea36e:	d8f9      	bhi.n	ea364 <__lshift+0xb0>
   ea370:	e7e7      	b.n	ea342 <__lshift+0x8e>

000ea372 <__mcmp>:
   ea372:	b530      	push	{r4, r5, lr}
   ea374:	6902      	ldr	r2, [r0, #16]
   ea376:	690c      	ldr	r4, [r1, #16]
   ea378:	1b12      	subs	r2, r2, r4
   ea37a:	d10e      	bne.n	ea39a <__mcmp+0x28>
   ea37c:	f100 0314 	add.w	r3, r0, #20
   ea380:	3114      	adds	r1, #20
   ea382:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   ea386:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   ea38a:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   ea38e:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   ea392:	42a5      	cmp	r5, r4
   ea394:	d003      	beq.n	ea39e <__mcmp+0x2c>
   ea396:	d305      	bcc.n	ea3a4 <__mcmp+0x32>
   ea398:	2201      	movs	r2, #1
   ea39a:	4610      	mov	r0, r2
   ea39c:	bd30      	pop	{r4, r5, pc}
   ea39e:	4283      	cmp	r3, r0
   ea3a0:	d3f3      	bcc.n	ea38a <__mcmp+0x18>
   ea3a2:	e7fa      	b.n	ea39a <__mcmp+0x28>
   ea3a4:	f04f 32ff 	mov.w	r2, #4294967295
   ea3a8:	e7f7      	b.n	ea39a <__mcmp+0x28>

000ea3aa <__mdiff>:
   ea3aa:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ea3ae:	460c      	mov	r4, r1
   ea3b0:	4606      	mov	r6, r0
   ea3b2:	4611      	mov	r1, r2
   ea3b4:	4620      	mov	r0, r4
   ea3b6:	4617      	mov	r7, r2
   ea3b8:	f7ff ffdb 	bl	ea372 <__mcmp>
   ea3bc:	1e05      	subs	r5, r0, #0
   ea3be:	d108      	bne.n	ea3d2 <__mdiff+0x28>
   ea3c0:	4629      	mov	r1, r5
   ea3c2:	4630      	mov	r0, r6
   ea3c4:	f7ff fd6c 	bl	e9ea0 <_Balloc>
   ea3c8:	2301      	movs	r3, #1
   ea3ca:	e9c0 3504 	strd	r3, r5, [r0, #16]
   ea3ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ea3d2:	bfa4      	itt	ge
   ea3d4:	463b      	movge	r3, r7
   ea3d6:	4627      	movge	r7, r4
   ea3d8:	4630      	mov	r0, r6
   ea3da:	6879      	ldr	r1, [r7, #4]
   ea3dc:	bfa6      	itte	ge
   ea3de:	461c      	movge	r4, r3
   ea3e0:	2500      	movge	r5, #0
   ea3e2:	2501      	movlt	r5, #1
   ea3e4:	f7ff fd5c 	bl	e9ea0 <_Balloc>
   ea3e8:	693e      	ldr	r6, [r7, #16]
   ea3ea:	60c5      	str	r5, [r0, #12]
   ea3ec:	6925      	ldr	r5, [r4, #16]
   ea3ee:	f107 0114 	add.w	r1, r7, #20
   ea3f2:	f104 0914 	add.w	r9, r4, #20
   ea3f6:	f100 0e14 	add.w	lr, r0, #20
   ea3fa:	f107 0210 	add.w	r2, r7, #16
   ea3fe:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
   ea402:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   ea406:	46f2      	mov	sl, lr
   ea408:	2700      	movs	r7, #0
   ea40a:	f859 3b04 	ldr.w	r3, [r9], #4
   ea40e:	f852 bf04 	ldr.w	fp, [r2, #4]!
   ea412:	fa1f f883 	uxth.w	r8, r3
   ea416:	fa17 f78b 	uxtah	r7, r7, fp
   ea41a:	0c1b      	lsrs	r3, r3, #16
   ea41c:	eba7 0808 	sub.w	r8, r7, r8
   ea420:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   ea424:	eb03 4328 	add.w	r3, r3, r8, asr #16
   ea428:	fa1f f888 	uxth.w	r8, r8
   ea42c:	141f      	asrs	r7, r3, #16
   ea42e:	454d      	cmp	r5, r9
   ea430:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   ea434:	f84a 3b04 	str.w	r3, [sl], #4
   ea438:	d8e7      	bhi.n	ea40a <__mdiff+0x60>
   ea43a:	1b2b      	subs	r3, r5, r4
   ea43c:	3b15      	subs	r3, #21
   ea43e:	f023 0303 	bic.w	r3, r3, #3
   ea442:	3304      	adds	r3, #4
   ea444:	3415      	adds	r4, #21
   ea446:	42a5      	cmp	r5, r4
   ea448:	bf38      	it	cc
   ea44a:	2304      	movcc	r3, #4
   ea44c:	4419      	add	r1, r3
   ea44e:	4473      	add	r3, lr
   ea450:	469e      	mov	lr, r3
   ea452:	460d      	mov	r5, r1
   ea454:	4565      	cmp	r5, ip
   ea456:	d30e      	bcc.n	ea476 <__mdiff+0xcc>
   ea458:	f10c 0203 	add.w	r2, ip, #3
   ea45c:	1a52      	subs	r2, r2, r1
   ea45e:	f022 0203 	bic.w	r2, r2, #3
   ea462:	3903      	subs	r1, #3
   ea464:	458c      	cmp	ip, r1
   ea466:	bf38      	it	cc
   ea468:	2200      	movcc	r2, #0
   ea46a:	441a      	add	r2, r3
   ea46c:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   ea470:	b17b      	cbz	r3, ea492 <__mdiff+0xe8>
   ea472:	6106      	str	r6, [r0, #16]
   ea474:	e7ab      	b.n	ea3ce <__mdiff+0x24>
   ea476:	f855 8b04 	ldr.w	r8, [r5], #4
   ea47a:	fa17 f488 	uxtah	r4, r7, r8
   ea47e:	1422      	asrs	r2, r4, #16
   ea480:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   ea484:	b2a4      	uxth	r4, r4
   ea486:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   ea48a:	f84e 4b04 	str.w	r4, [lr], #4
   ea48e:	1417      	asrs	r7, r2, #16
   ea490:	e7e0      	b.n	ea454 <__mdiff+0xaa>
   ea492:	3e01      	subs	r6, #1
   ea494:	e7ea      	b.n	ea46c <__mdiff+0xc2>
	...

000ea498 <__ulp>:
   ea498:	b082      	sub	sp, #8
   ea49a:	ed8d 0b00 	vstr	d0, [sp]
   ea49e:	9b01      	ldr	r3, [sp, #4]
   ea4a0:	4912      	ldr	r1, [pc, #72]	; (ea4ec <__ulp+0x54>)
   ea4a2:	4019      	ands	r1, r3
   ea4a4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   ea4a8:	2900      	cmp	r1, #0
   ea4aa:	dd05      	ble.n	ea4b8 <__ulp+0x20>
   ea4ac:	2200      	movs	r2, #0
   ea4ae:	460b      	mov	r3, r1
   ea4b0:	ec43 2b10 	vmov	d0, r2, r3
   ea4b4:	b002      	add	sp, #8
   ea4b6:	4770      	bx	lr
   ea4b8:	4249      	negs	r1, r1
   ea4ba:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   ea4be:	ea4f 5021 	mov.w	r0, r1, asr #20
   ea4c2:	f04f 0200 	mov.w	r2, #0
   ea4c6:	f04f 0300 	mov.w	r3, #0
   ea4ca:	da04      	bge.n	ea4d6 <__ulp+0x3e>
   ea4cc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   ea4d0:	fa41 f300 	asr.w	r3, r1, r0
   ea4d4:	e7ec      	b.n	ea4b0 <__ulp+0x18>
   ea4d6:	f1a0 0114 	sub.w	r1, r0, #20
   ea4da:	291e      	cmp	r1, #30
   ea4dc:	bfda      	itte	le
   ea4de:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   ea4e2:	fa20 f101 	lsrle.w	r1, r0, r1
   ea4e6:	2101      	movgt	r1, #1
   ea4e8:	460a      	mov	r2, r1
   ea4ea:	e7e1      	b.n	ea4b0 <__ulp+0x18>
   ea4ec:	7ff00000 	.word	0x7ff00000

000ea4f0 <__b2d>:
   ea4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ea4f2:	6905      	ldr	r5, [r0, #16]
   ea4f4:	f100 0714 	add.w	r7, r0, #20
   ea4f8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   ea4fc:	1f2e      	subs	r6, r5, #4
   ea4fe:	f855 4c04 	ldr.w	r4, [r5, #-4]
   ea502:	4620      	mov	r0, r4
   ea504:	f7ff fd93 	bl	ea02e <__hi0bits>
   ea508:	f1c0 0320 	rsb	r3, r0, #32
   ea50c:	280a      	cmp	r0, #10
   ea50e:	f8df c07c 	ldr.w	ip, [pc, #124]	; ea58c <__b2d+0x9c>
   ea512:	600b      	str	r3, [r1, #0]
   ea514:	dc14      	bgt.n	ea540 <__b2d+0x50>
   ea516:	f1c0 0e0b 	rsb	lr, r0, #11
   ea51a:	fa24 f10e 	lsr.w	r1, r4, lr
   ea51e:	42b7      	cmp	r7, r6
   ea520:	ea41 030c 	orr.w	r3, r1, ip
   ea524:	bf34      	ite	cc
   ea526:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   ea52a:	2100      	movcs	r1, #0
   ea52c:	3015      	adds	r0, #21
   ea52e:	fa04 f000 	lsl.w	r0, r4, r0
   ea532:	fa21 f10e 	lsr.w	r1, r1, lr
   ea536:	ea40 0201 	orr.w	r2, r0, r1
   ea53a:	ec43 2b10 	vmov	d0, r2, r3
   ea53e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   ea540:	42b7      	cmp	r7, r6
   ea542:	bf3a      	itte	cc
   ea544:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   ea548:	f1a5 0608 	subcc.w	r6, r5, #8
   ea54c:	2100      	movcs	r1, #0
   ea54e:	380b      	subs	r0, #11
   ea550:	d017      	beq.n	ea582 <__b2d+0x92>
   ea552:	f1c0 0c20 	rsb	ip, r0, #32
   ea556:	fa04 f500 	lsl.w	r5, r4, r0
   ea55a:	42be      	cmp	r6, r7
   ea55c:	fa21 f40c 	lsr.w	r4, r1, ip
   ea560:	ea45 0504 	orr.w	r5, r5, r4
   ea564:	bf8c      	ite	hi
   ea566:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   ea56a:	2400      	movls	r4, #0
   ea56c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   ea570:	fa01 f000 	lsl.w	r0, r1, r0
   ea574:	fa24 f40c 	lsr.w	r4, r4, ip
   ea578:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   ea57c:	ea40 0204 	orr.w	r2, r0, r4
   ea580:	e7db      	b.n	ea53a <__b2d+0x4a>
   ea582:	ea44 030c 	orr.w	r3, r4, ip
   ea586:	460a      	mov	r2, r1
   ea588:	e7d7      	b.n	ea53a <__b2d+0x4a>
   ea58a:	bf00      	nop
   ea58c:	3ff00000 	.word	0x3ff00000

000ea590 <__d2b>:
   ea590:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   ea594:	4689      	mov	r9, r1
   ea596:	2101      	movs	r1, #1
   ea598:	ec57 6b10 	vmov	r6, r7, d0
   ea59c:	4690      	mov	r8, r2
   ea59e:	f7ff fc7f 	bl	e9ea0 <_Balloc>
   ea5a2:	f3c7 550a 	ubfx	r5, r7, #20, #11
   ea5a6:	4604      	mov	r4, r0
   ea5a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
   ea5ac:	bb35      	cbnz	r5, ea5fc <__d2b+0x6c>
   ea5ae:	2e00      	cmp	r6, #0
   ea5b0:	9301      	str	r3, [sp, #4]
   ea5b2:	d028      	beq.n	ea606 <__d2b+0x76>
   ea5b4:	4668      	mov	r0, sp
   ea5b6:	9600      	str	r6, [sp, #0]
   ea5b8:	f7ff fd59 	bl	ea06e <__lo0bits>
   ea5bc:	9900      	ldr	r1, [sp, #0]
   ea5be:	b300      	cbz	r0, ea602 <__d2b+0x72>
   ea5c0:	9a01      	ldr	r2, [sp, #4]
   ea5c2:	f1c0 0320 	rsb	r3, r0, #32
   ea5c6:	fa02 f303 	lsl.w	r3, r2, r3
   ea5ca:	430b      	orrs	r3, r1
   ea5cc:	40c2      	lsrs	r2, r0
   ea5ce:	6163      	str	r3, [r4, #20]
   ea5d0:	9201      	str	r2, [sp, #4]
   ea5d2:	9b01      	ldr	r3, [sp, #4]
   ea5d4:	61a3      	str	r3, [r4, #24]
   ea5d6:	2b00      	cmp	r3, #0
   ea5d8:	bf14      	ite	ne
   ea5da:	2202      	movne	r2, #2
   ea5dc:	2201      	moveq	r2, #1
   ea5de:	6122      	str	r2, [r4, #16]
   ea5e0:	b1d5      	cbz	r5, ea618 <__d2b+0x88>
   ea5e2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   ea5e6:	4405      	add	r5, r0
   ea5e8:	f8c9 5000 	str.w	r5, [r9]
   ea5ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   ea5f0:	f8c8 0000 	str.w	r0, [r8]
   ea5f4:	4620      	mov	r0, r4
   ea5f6:	b003      	add	sp, #12
   ea5f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   ea5fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   ea600:	e7d5      	b.n	ea5ae <__d2b+0x1e>
   ea602:	6161      	str	r1, [r4, #20]
   ea604:	e7e5      	b.n	ea5d2 <__d2b+0x42>
   ea606:	a801      	add	r0, sp, #4
   ea608:	f7ff fd31 	bl	ea06e <__lo0bits>
   ea60c:	9b01      	ldr	r3, [sp, #4]
   ea60e:	6163      	str	r3, [r4, #20]
   ea610:	2201      	movs	r2, #1
   ea612:	6122      	str	r2, [r4, #16]
   ea614:	3020      	adds	r0, #32
   ea616:	e7e3      	b.n	ea5e0 <__d2b+0x50>
   ea618:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   ea61c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   ea620:	f8c9 0000 	str.w	r0, [r9]
   ea624:	6918      	ldr	r0, [r3, #16]
   ea626:	f7ff fd02 	bl	ea02e <__hi0bits>
   ea62a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   ea62e:	e7df      	b.n	ea5f0 <__d2b+0x60>

000ea630 <__ratio>:
   ea630:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ea634:	4688      	mov	r8, r1
   ea636:	4669      	mov	r1, sp
   ea638:	4681      	mov	r9, r0
   ea63a:	f7ff ff59 	bl	ea4f0 <__b2d>
   ea63e:	a901      	add	r1, sp, #4
   ea640:	4640      	mov	r0, r8
   ea642:	ec55 4b10 	vmov	r4, r5, d0
   ea646:	f7ff ff53 	bl	ea4f0 <__b2d>
   ea64a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   ea64e:	f8d8 2010 	ldr.w	r2, [r8, #16]
   ea652:	eba3 0c02 	sub.w	ip, r3, r2
   ea656:	e9dd 3200 	ldrd	r3, r2, [sp]
   ea65a:	1a9b      	subs	r3, r3, r2
   ea65c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   ea660:	ec51 0b10 	vmov	r0, r1, d0
   ea664:	2b00      	cmp	r3, #0
   ea666:	bfd6      	itet	le
   ea668:	460a      	movle	r2, r1
   ea66a:	462a      	movgt	r2, r5
   ea66c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   ea670:	468b      	mov	fp, r1
   ea672:	462f      	mov	r7, r5
   ea674:	bfd4      	ite	le
   ea676:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   ea67a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   ea67e:	4620      	mov	r0, r4
   ea680:	ee10 2a10 	vmov	r2, s0
   ea684:	465b      	mov	r3, fp
   ea686:	4639      	mov	r1, r7
   ea688:	f7fd fd78 	bl	e817c <__aeabi_ddiv>
   ea68c:	ec41 0b10 	vmov	d0, r0, r1
   ea690:	b003      	add	sp, #12
   ea692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000ea696 <__copybits>:
   ea696:	3901      	subs	r1, #1
   ea698:	b570      	push	{r4, r5, r6, lr}
   ea69a:	1149      	asrs	r1, r1, #5
   ea69c:	6914      	ldr	r4, [r2, #16]
   ea69e:	3101      	adds	r1, #1
   ea6a0:	f102 0314 	add.w	r3, r2, #20
   ea6a4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   ea6a8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   ea6ac:	1f05      	subs	r5, r0, #4
   ea6ae:	42a3      	cmp	r3, r4
   ea6b0:	d30c      	bcc.n	ea6cc <__copybits+0x36>
   ea6b2:	1aa3      	subs	r3, r4, r2
   ea6b4:	3b11      	subs	r3, #17
   ea6b6:	f023 0303 	bic.w	r3, r3, #3
   ea6ba:	3211      	adds	r2, #17
   ea6bc:	42a2      	cmp	r2, r4
   ea6be:	bf88      	it	hi
   ea6c0:	2300      	movhi	r3, #0
   ea6c2:	4418      	add	r0, r3
   ea6c4:	2300      	movs	r3, #0
   ea6c6:	4288      	cmp	r0, r1
   ea6c8:	d305      	bcc.n	ea6d6 <__copybits+0x40>
   ea6ca:	bd70      	pop	{r4, r5, r6, pc}
   ea6cc:	f853 6b04 	ldr.w	r6, [r3], #4
   ea6d0:	f845 6f04 	str.w	r6, [r5, #4]!
   ea6d4:	e7eb      	b.n	ea6ae <__copybits+0x18>
   ea6d6:	f840 3b04 	str.w	r3, [r0], #4
   ea6da:	e7f4      	b.n	ea6c6 <__copybits+0x30>

000ea6dc <__any_on>:
   ea6dc:	f100 0214 	add.w	r2, r0, #20
   ea6e0:	6900      	ldr	r0, [r0, #16]
   ea6e2:	114b      	asrs	r3, r1, #5
   ea6e4:	4298      	cmp	r0, r3
   ea6e6:	b510      	push	{r4, lr}
   ea6e8:	db11      	blt.n	ea70e <__any_on+0x32>
   ea6ea:	dd0a      	ble.n	ea702 <__any_on+0x26>
   ea6ec:	f011 011f 	ands.w	r1, r1, #31
   ea6f0:	d007      	beq.n	ea702 <__any_on+0x26>
   ea6f2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   ea6f6:	fa24 f001 	lsr.w	r0, r4, r1
   ea6fa:	fa00 f101 	lsl.w	r1, r0, r1
   ea6fe:	428c      	cmp	r4, r1
   ea700:	d10b      	bne.n	ea71a <__any_on+0x3e>
   ea702:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   ea706:	4293      	cmp	r3, r2
   ea708:	d803      	bhi.n	ea712 <__any_on+0x36>
   ea70a:	2000      	movs	r0, #0
   ea70c:	bd10      	pop	{r4, pc}
   ea70e:	4603      	mov	r3, r0
   ea710:	e7f7      	b.n	ea702 <__any_on+0x26>
   ea712:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   ea716:	2900      	cmp	r1, #0
   ea718:	d0f5      	beq.n	ea706 <__any_on+0x2a>
   ea71a:	2001      	movs	r0, #1
   ea71c:	e7f6      	b.n	ea70c <__any_on+0x30>
	...

000ea720 <nan>:
   ea720:	ed9f 0b01 	vldr	d0, [pc, #4]	; ea728 <nan+0x8>
   ea724:	4770      	bx	lr
   ea726:	bf00      	nop
   ea728:	00000000 	.word	0x00000000
   ea72c:	7ff80000 	.word	0x7ff80000

000ea730 <__ascii_wctomb>:
   ea730:	b149      	cbz	r1, ea746 <__ascii_wctomb+0x16>
   ea732:	2aff      	cmp	r2, #255	; 0xff
   ea734:	bf85      	ittet	hi
   ea736:	238a      	movhi	r3, #138	; 0x8a
   ea738:	6003      	strhi	r3, [r0, #0]
   ea73a:	700a      	strbls	r2, [r1, #0]
   ea73c:	f04f 30ff 	movhi.w	r0, #4294967295
   ea740:	bf98      	it	ls
   ea742:	2001      	movls	r0, #1
   ea744:	4770      	bx	lr
   ea746:	4608      	mov	r0, r1
   ea748:	4770      	bx	lr
	...

000ea74c <__aeabi_d2lz>:
   ea74c:	b538      	push	{r3, r4, r5, lr}
   ea74e:	2200      	movs	r2, #0
   ea750:	2300      	movs	r3, #0
   ea752:	4604      	mov	r4, r0
   ea754:	460d      	mov	r5, r1
   ea756:	f7fd fe59 	bl	e840c <__aeabi_dcmplt>
   ea75a:	b928      	cbnz	r0, ea768 <__aeabi_d2lz+0x1c>
   ea75c:	4620      	mov	r0, r4
   ea75e:	4629      	mov	r1, r5
   ea760:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   ea764:	f7fd beb2 	b.w	e84cc <__aeabi_d2ulz>
   ea768:	4620      	mov	r0, r4
   ea76a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   ea76e:	f7fd fead 	bl	e84cc <__aeabi_d2ulz>
   ea772:	4240      	negs	r0, r0
   ea774:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   ea778:	bd38      	pop	{r3, r4, r5, pc}
   ea77a:	bf00      	nop

000ea77c <dynalib_user>:
   ea77c:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   ea78c:	0000 0000 6576 7463 726f 3a3a 4d5f 725f     ....vector::_M_r
   ea79c:	6e61 6567 695f 736e 7265 0074 3733 6236     ange_insert.376b
   ea7ac:	6362 6365 332d 3736 2d39 3034 6366 392d     bcec-3679-40fc-9
   ea7bc:	3264 2d35 3035 3237 3864 3265 3439 3333     d25-5072d8e29433
   ea7cc:	6200 3562 6435 3738 2d64 3839 3839 342d     .bb55d87d-9898-4
   ea7dc:	3833 2d66 3462 6262 322d 3532 6639 3363     38f-b4bb-2259fc3
   ea7ec:	6330 6236 0065 2d2d 2d2d 422d 4745 4e49     0c6be.-----BEGIN
   ea7fc:	4320 5245 4954 4946 4143 4554 2d2d 2d2d      CERTIFICATE----
   ea80c:	202d 0a0d 494d 4649 546a 4343 3341 6757     - ..MIIFjTCCA3Wg
   ea81c:	7741 4249 6741 5249 4e41 784f 6963 3059     AwIBAgIRANOxciY0
   ea82c:	7a49 634c 4139 6f55 5355 7372 476e 776f     IzLc9AUoUSrsnGow
   ea83c:	5144 4a59 6f4b 495a 7668 4e63 5141 4c45     DQYJKoZIhvcNAQEL
   ea84c:	5142 7741 0a0d 7a54 4c45 414d 476b 3141     BQAw..TzELMAkGA1
   ea85c:	4555 6842 434d 5656 784d 544b 6e41 6742     UEBhMCVVMxKTAnBg
   ea86c:	564e 4142 546f 4549 756c 4764 7956 6d62     NVBAoTIEludGVybm
   ea87c:	3056 4649 6c4e 3359 7956 5861 3552 4649     V0IFNlY3VyaXR5IF
   ea88c:	6c4a 3263 6856 0a0d 6d63 6f4e 4549 7964     Jlc2Vh..cmNoIEdy
   ea89c:	3362 7756 524d 7755 7745 4459 5156 4451     b3VwMRUwEwYDVQQD
   ea8ac:	7745 4a78 3155 484a 4649 764a 3362 6751     EwxJU1JHIFJvb3Qg
   ea8bc:	4457 7745 6848 4e63 544d 7859 444d 3241     WDEwHhcNMTYxMDA2
   ea8cc:	544d 3055 7a4d 3155 0a0d 6857 4e63 6a4d     MTU0MzU1..WhcNMj
   ea8dc:	7845 444d 3241 544d 3055 7a4d 3155 6a57     ExMDA2MTU0MzU1Wj
   ea8ec:	4b42 514d 7773 5143 4459 5156 4751 7745     BKMQswCQYDVQQGEw
   ea8fc:	564a 7a55 5745 424d 4751 3141 4555 6843     JVUzEWMBQGA1UECh
   ea90c:	4e4d 4754 3056 334a 674d 0a0d 5752 6a35     MNTGV0J3Mg..RW5j
   ea91c:	6e63 776c 4464 6a45 434d 4745 3141 4555     cnlwdDEjMCEGA1UE
   ea92c:	7841 614d 4754 3056 334a 674d 5752 6a35     AxMaTGV0J3MgRW5j
   ea93c:	6e63 776c 4364 4242 5864 6f52 3362 704a     cnlwdCBBdXRob3Jp
   ea94c:	4864 676b 4457 774d 6767 6945 0a0d 414d     dHkgWDMwggEi..MA
   ea95c:	4730 5343 4771 4953 3362 5144 4245 5141     0GCSqGSIb3DQEBAQ
   ea96c:	4155 3441 4249 7744 7741 6767 4b45 6f41     UAA4IBDwAwggEKAo
   ea97c:	4249 5141 6343 7730 777a 7557 7555 3752     IBAQCc0wzwWuUuR7
   ea98c:	7964 5458 4465 3273 6a68 4f4d 5872 0a0d     dyXTeDs2hjMOrX..
   ea99c:	534e 5a59 654a 3947 6a76 7858 4a63 7649     NSYZJeG9vjXxcJIv
   ea9ac:	3774 4c68 5151 7257 5a71 3134 4643 736a     t7hLQQWrqZ41CFjs
   ea9bc:	5373 4572 4961 4c63 2b6f 314e 4f35 7a62     sSrEaIcLo+N15Obz
   ea9cc:	3270 784a 6e75 426d 4259 582f 5a6b 6671     p2JxunmBYB/XkZqf
   ea9dc:	0a0d 3938 3442 335a 4948 5161 5636 636b     ..89B4Z3HIaQ6Vkc
   ea9ec:	2b2f 7035 706e 4459 4978 487a 4b37 5854     /+5pnpYDxIzH7KTX
   ea9fc:	5363 4a4a 4831 3147 7272 6575 6577 774e     cSJJ1HG1rrueweNw
   eaa0c:	6341 4b6e 3778 7770 7158 6b7a 7272 5576     AcnKx7pwXqzkrrvU
   eaa1c:	6c48 0a0d 704e 3569 2f79 7431 4a50 6f5a     Hl..Npi5y/1tPJZo
   eaa2c:	7933 714d 7051 4d41 6e68 6e52 4879 6c2b     3yMqQpAMhnRnyH+l
   eaa3c:	726d 5368 5259 5451 3250 7058 6f67 4c66     mrhSYRQTP2XpgofL
   eaa4c:	2f32 4f6f 7656 4761 6669 464f 3550 4765     2/oOVvaGifOFP5eG
   eaa5c:	3772 6344 0a0d 7547 7239 5a44 5755 6366     r7Dc..Gu9rDZUWfc
   eaa6c:	7251 476f 7957 516d 3251 5964 7242 4572     QroGWymQQ2dYBrrE
   eaa7c:	7a72 3547 4a42 4365 692b 6b6c 7138 4349     rzG5BJeC+ilk8qIC
   eaa8c:	7055 4d42 305a 4e77 7841 597a 7838 4a4f     UpBMZ0wNAxzY8xOJ
   eaa9c:	5755 7175 7a67 0a0d 4575 7850 5273 442f     UWuqgz..uEPxsR/D
   eaaac:	484d 692b 5465 5445 5350 3230 4f2b 3850     MH+ieTETPS02+OP8
   eaabc:	6a38 714e 5475 786b 6178 452f 516a 6430     8jNquTkxxa/EjQ0d
   eaacc:	425a 7a59 7671 4571 624b 5562 3843 5944     ZBYzqvqEKbbUC8DY
   eaadc:	6366 544f 6741 424d 0a0d 4141 6a47 6767     fcOTAgMB..AAGjgg
   eaaec:	6e46 494d 4249 7a59 4f41 6742 564e 5148     FnMIIBYzAOBgNVHQ
   eaafc:	4238 6641 4538 4142 434d 5941 7759 6745     8BAf8EBAMCAYYwEg
   eab0c:	4459 5256 5430 5141 2f48 4142 7767 6742     YDVR0TAQH/BAgwBg
   eab1c:	4245 772f 4249 4441 5542 0a0d 6742 564e     EB/wIBADBU..BgNV
   eab2c:	5348 4541 5454 4c42 414d 4767 6d42 4265     HSAETTBLMAgGBmeB
   eab3c:	4144 4345 5441 2f41 6742 7273 6742 4545     DAECATA/BgsrBgEE
   eab4c:	5941 664c 7745 4245 5441 7741 434d 4734     AYLfEwEBATAwMC4G
   eab5c:	4343 4773 5141 4655 7742 4249 0a0d 6946     CCsGAQUFBwIB..Fi
   eab6c:	6f4a 4864 7752 694f 7638 3359 7a42 6e4c     JodHRwOi8vY3BzLn
   eab7c:	764a 3362 7451 4465 7545 4762 3056 3263     Jvb3QteDEubGV0c2
   eab8c:	7556 3359 354a 4863 7551 3362 6e4a 424d     VuY3J5cHQub3JnMB
   eab9c:	4730 3141 6455 6744 5751 4242 6f53 0a0d     0GA1UdDgQWBBSo..
   eabac:	6d53 6a70 4842 6433 7575 5262 624f 6d65     SmpjBH3duubRObem
   eabbc:	5752 7658 3638 736a 546f 7a41 6742 564e     RWXv86jsoTAzBgNV
   eabcc:	5248 4538 444c 7141 434d 6769 714a 6b41     HR8ELDAqMCigJqAk
   eabdc:	6968 6f4a 4864 7752 694f 7638 3359 734a     hiJodHRwOi8vY3Js
   eabec:	0a0d 6e4c 764a 3362 7451 4465 7545 4762     ..LnJvb3QteDEubG
   eabfc:	3056 3263 7556 3359 354a 4863 7551 3362     V0c2VuY3J5cHQub3
   eac0c:	6e4a 484d 4749 4343 4773 5141 4655 7742     JnMHIGCCsGAQUFBw
   eac1c:	4245 4742 7759 445a 7741 6742 7267 6742     EBBGYwZDAwBggrBg
   eac2c:	4645 0a0d 5142 7763 5941 6b59 4861 3052     EF..BQcwAYYkaHR0
   eac3c:	4463 766f 324c 6a39 3363 7541 6d63 7639     cDovL29jc3Aucm9v
   eac4c:	4364 3431 534d 7335 585a 7a52 575a 6a35     dC14MS5sZXRzZW5j
   eac5c:	6e63 776c 4364 7635 6d63 7663 444d 4741     cnlwdC5vcmcvMDAG
   eac6c:	4343 4773 0a0d 5141 4655 7a42 4341 6968     CCsG..AQUFBzAChi
   eac7c:	6f52 4864 7752 694f 7638 3259 7956 4364     RodHRwOi8vY2VydC
   eac8c:	7935 3262 3039 584c 7867 6d4c 6c78 4864     5yb290LXgxLmxldH
   eac9c:	6c4e 6d62 794e 5865 3042 6d4c 7939 795a     NlbmNyeXB0Lm9yZy
   eacac:	7738 7748 4459 0a0d 5256 6a30 4242 7767     8wHwYD..VR0jBBgw
   eacbc:	6f46 5541 6265 5a52 6e35 3275 6535 4251     FoAUebRZ5nu25eQB
   eaccc:	3463 4941 4d69 6167 5057 7062 326d 7734     c4AIiMgaWPbpm24w
   eacdc:	5144 4a59 6f4b 495a 7668 4e63 5141 4c45     DQYJKoZIhvcNAQEL
   eacec:	5142 4441 6767 4249 0a0d 4241 506e 5364     BQADggIB..ABnPdS
   eacfc:	3041 544c 6d71 6652 512f 6531 4d61 6a32     A0LTqmRf/Q1eaM2j
   ead0c:	6f4c 476e 6234 6451 6e45 4f71 514a 6e38     LonG4bQdEnqOJQ8n
   ead1c:	7143 4f78 5465 7252 6f54 4b45 7774 2b54     CqxOeTRrToEKtwT+
   ead2c:	332b 6736 5354 426c 7847 0a0d 2f41 6435     +36gTSlBGx..A/5d
   ead3c:	7475 3238 4a6a 3251 786a 384e 4952 4c38     ut82jJQ2jxN8RI8L
   ead4c:	5139 5846 5772 3469 5878 416e 4532 4171     9QFXrWi4xXnA2EqA
   ead5c:	3031 6a79 6948 3652 3948 6a63 4d36 6946     10yjHiR6H9cj6MFi
   ead6c:	6e4f 3562 6e49 6531 7357 4d52 0a0d 4d55     Onb5In1eWsRM..UM
   ead7c:	7632 6533 7439 734e 4143 4267 6b75 4850     2v3e9tNsCAgBukPH
   ead8c:	6741 6c31 6851 3730 7672 4b46 2f6d 7a42     Ag1lQh07rvFKm/Bz
   ead9c:	4239 6a43 7861 726f 4c41 4e49 6655 395a     9BCjaxorALINUfZ9
   eadac:	4444 3436 326a 6769 494c 6c78 3265 0a0d     DD64j2igLIxle2..
   eadbc:	5044 5778 6438 2f49 3246 6f6c 4d48 586a     DPxW8dI/F2loHMjX
   eadcc:	6a5a 4771 5238 716b 555a 6f64 7478 4449     ZjqG8RkqZUdoxtID
   eaddc:	2b35 3039 6746 4773 6649 4d6b 7170 5267     5+90FgsGIfkMpqgR
   eadec:	3053 6635 7a34 6250 4543 7148 5843 316c     S05f4zPbCEHqCXl1
   eadfc:	0a0d 4f65 4835 4579 544c 6367 6c56 584c     ..eO5HyELTgcVlLX
   eae0c:	5158 6744 5741 526e 757a 3174 4668 654a     XQDgAWnRzut1hFJe
   eae1c:	7a63 3159 6a74 5151 6f6e 6636 7336 6e2b     czY1tjQQno6f6s+n
   eae2c:	794d 4c64 324e 5736 5575 7334 5533 7659     MydLN26WuU4s3UYv
   eae3c:	754f 0a0d 734f 7855 6c52 754a 5437 5253     Ou..OsUxRlJu7TSR
   eae4c:	7148 4344 6c33 4553 5835 6767 6b56 647a     HqDC3lSE5XggVkzd
   eae5c:	5061 756b 474b 6251 7047 796e 302b 2f31     aPkuKGQbGpny+01/
   eae6c:	3734 6668 5858 424e 4837 746e 4e57 365a     47hfXXNB7HntWNZ6
   eae7c:	324e 7756 0a0d 3770 3647 664f 2b59 5159     N2Vw..p7G6OfY+YQ
   eae8c:	5a72 4977 5161 686d 4972 4a71 755a 6769     rZwIaQmhrIqJZuig
   eae9c:	7273 6562 5733 672b 6e64 7935 456b 2b39     srbe3W+gdn5ykE9+
   eaeac:	794b 5630 5667 7355 7866 356f 6d32 4677     Ky0VgVUsfxo52mwF
   eaebc:	7359 4a31 594b 0a0d 5032 4447 5775 3878     Ys1JKY..2PGDuWx8
   eaecc:	364d 6c44 3653 5171 766b 6148 5552 306f     M6DlS6qQkvHaRUo0
   eaedc:	4d46 3864 7354 6c53 4662 2f30 3976 3536     FMd8TsSlbF0/v965
   eaeec:	4771 4b46 5368 6544 6f51 704d 6e59 6377     qGFKhSDeQoMpYnwc
   eaefc:	516d 6c69 6852 302f 0a0d 7961 544c 6c68     mQilRh/0..ayLThl
   eaf0c:	4c48 384e 6731 6b53 6a4a 7256 4950 5930     HLN81gSkJjVrPI0Y
   eaf1c:	7838 5643 4250 7434 6277 5031 5546 3264     8xCVPB4twb1PFUd2
   eaf2c:	5066 334d 4173 7431 384a 7333 355a 3876     fPM3sA1tJ83sZ5v8
   eaf3c:	6776 7646 7932 666f 524b 0a0d 4250 7430     vgFv2yofKR..PB0t
   eaf4c:	4a36 557a 3841 6d31 7153 334d 786b 356c     6JzUA81mSqM3kxl5
   eaf5c:	2b65 5a49 6877 4159 4f79 4f30 6754 2f33     e+IZwhYAyO0OTg3/
   eaf6c:	7366 4838 4771 4e54 644b 4239 6f71 7755     fs8HqGTNKd9BqoUw
   eaf7c:	5253 7a42 3070 4a36 674d 6235 0a0d 5572     SRBzp06JMg5b..rU
   eaf8c:	4743 6277 5543 4944 6d30 6178 4a64 4233     CGwbCUDI0mxadJ3B
   eaf9c:	347a 7857 3652 7966 704e 4b42 7932 6941     z4WxR6fyNpBK2yAi
   eafac:	576e 7345 6b69 7178 7445 0a0d 2d2d 2d2d     nWEsikxqEt..----
   eafbc:	452d 444e 4320 5245 4954 4946 4143 4554     -END CERTIFICATE
   eafcc:	2d2d 2d2d 202d 6900 746f 662d 6361 6169     ----- .iot-facia
   eafdc:	2d6c 6f63 706d 7261 2d65 6574 7473 632e     l-compare-test.c
   eafec:	676f 696e 6974 6576 6573 7672 6369 7365     ognitiveservices
   eaffc:	612e 757a 6572 632e 6d6f 2f00 6166 6563     .azure.com./face
   eb00c:	762f 2e31 2f30 6576 6972 7966 6200 3233     /v1.0/verify.b32
   eb01c:	3431 6134 6162 6666 3437 6330 6163 3130     144abaff740cca01
   eb02c:	6663 3032 3835 6534 3862 3030 0064 662f     cf20584eb800d./f
   eb03c:	6361 2f65 3176 302e 642f 7465 6365 3f74     ace/v1.0/detect?
   eb04c:	6572 7574 6e72 6146 6563 6449 743d 7572     returnFaceId=tru
   eb05c:	2665 6572 7574 6e72 6146 6563 614c 646e     e&returnFaceLand
   eb06c:	616d 6b72 3d73 6166 736c 2665 6572 6f63     marks=false&reco
   eb07c:	6e67 7469 6f69 4d6e 646f 6c65 723d 6365     gnitionModel=rec
   eb08c:	676f 696e 6974 6e6f 305f 2633 6572 7574     ognition_03&retu
   eb09c:	6e72 6552 6f63 6e67 7469 6f69 4d6e 646f     rnRecognitionMod
   eb0ac:	6c65 663d 6c61 6573 6426 7465 6365 6974     el=false&detecti
   eb0bc:	6e6f 6f4d 6564 3d6c 6564 6574 7463 6f69     onModel=detectio
   eb0cc:	5f6e 3230 4700 5445 5000 534f 0054 5550     n_02.GET.POST.PU
   eb0dc:	0054 4544 454c 4554 5000 5441 4843 6100     T.DELETE.PATCH.a
   eb0ec:	7070 696c 6163 6974 6e6f 6a2f 6f73 006e     pplication/json.
   eb0fc:	7061 6c70 6369 7461 6f69 2f6e 636f 6574     application/octe
   eb10c:	2d74 7473 6572 6d61 7b00 2200 6166 6563     t-stream.{."face
   eb11c:	6449 3a22 0022 2c22 7022 7265 6f73 496e     Id":".","personI
   eb12c:	2264 223a 2200 222c 6550 7372 6e6f 7247     d":".","PersonGr
   eb13c:	756f 4970 2264 223a 2200 0d7d 0d0a 000a     oupId":"."}.....
   eb14c:	4820 5454 2f50 2e31 0030 634f 2d70 7041      HTTP/1.0.Ocp-Ap
   eb15c:	6d69 532d 6275 6373 6972 7470 6f69 2d6e     im-Subscription-
   eb16c:	654b 3a79 4300 6e6f 6574 746e 542d 7079     Key:.Content-Typ
   eb17c:	3a65 4800 736f 3a74 4300 6e6f 6574 746e     e:.Host:.Content
   eb18c:	4c2d 6e65 7467 3a68 6600 6361 4965 0064     -Length:.faceId.
   eb19c:	7369 6449 6e65 6974 6163 006c 6f63 666e     isIdentical.conf
   eb1ac:	6469 6e65 6563 6200 7361 6369 735f 7274     idence.basic_str
   eb1bc:	6e69 3a67 5f3a 5f4d 6f63 736e 7274 6375     ing::_M_construc
   eb1cc:	2074 756e 6c6c 6e20 746f 7620 6c61 6469     t null not valid
   eb1dc:	0000 0000                                   ....

000eb1e0 <_ZL1K>:
   eb1e0:	2f98 428a 4491 7137 fbcf b5c0 dba5 e9b5     ./.B.D7q........
   eb1f0:	c25b 3956 11f1 59f1 82a4 923f 5ed5 ab1c     [.V9...Y..?..^..
   eb200:	aa98 d807 5b01 1283 85be 2431 7dc3 550c     .....[....1$.}.U
   eb210:	5d74 72be b1fe 80de 06a7 9bdc f174 c19b     t].r........t...
   eb220:	69c1 e49b 4786 efbe 9dc6 0fc1 a1cc 240c     .i...G.........$
   eb230:	2c6f 2de9 84aa 4a74 a9dc 5cb0 88da 76f9     o,.-..tJ...\...v
   eb240:	5152 983e c66d a831 27c8 b003 7fc7 bf59     RQ>.m.1..'....Y.
   eb250:	0bf3 c6e0 9147 d5a7 6351 06ca 2967 1429     ....G...Qc..g)).
   eb260:	0a85 27b7 2138 2e1b 6dfc 4d2c 0d13 5338     ...'8!...m,M..8S
   eb270:	7354 650a 0abb 766a c92e 81c2 2c85 9272     Ts.e..jv.....,r.
   eb280:	e8a1 a2bf 664b a81a 8b70 c24b 51a3 c76c     ....Kf..p.K..Ql.
   eb290:	e819 d192 0624 d699 3585 f40e a070 106a     ....$....5..p.j.
   eb2a0:	c116 19a4 6c08 1e37 774c 2748 bcb5 34b0     .....l7.LwH'...4
   eb2b0:	0cb3 391c aa4a 4ed8 ca4f 5b9c 6ff3 682e     ...9J..NO..[.o.h
   eb2c0:	82ee 748f 636f 78a5 7814 84c8 0208 8cc7     ...toc.x.x......
   eb2d0:	fffa 90be 6ceb a450 a3f7 bef9 78f2 c671     .....lP......xq.
   eb2e0:	862a 8648 0df7 0101 0008 2b20 0020 202c     *.H....... + ., 
   eb2f0:	2500 3d73 3f00 3d3f 2500 3230 2558 0073     .%s=.??=.%02X%s.
   eb300:	2e2e 2e2e 3f00 3f3f 2000 2528 2c73 4d20     .....???. (%s, M
   eb310:	4647 2d31 7325 202c 7830 3025 5832 0029     GF1-%s, 0x%02X).
   eb320:	7325 6b20 7965 7320 7a69 0065               %s key size.

000eb32c <mbedtls_sha1_info>:
   eb32c:	0004 0000 b78c 000e 0014 0000 0040 0000     ............@...
   eb33c:	6efd 000d 6ef9 000d 6ef5 000d af9f 000d     .n...n...n......
   eb34c:	6edf 000d 6ecd 000d 6ec9 000d 6ec5 000d     .n...n...n...n..

000eb35c <mbedtls_sha224_info>:
   eb35c:	0005 0000 b7b7 000e 001c 0000 0040 0000     ............@...
   eb36c:	6f45 000d 6f41 000d 6f3d 000d 6f31 000d     Eo..Ao..=o..1o..
   eb37c:	6f1b 000d 6f09 000d 6f05 000d 6f01 000d     .o...o...o...o..

000eb38c <mbedtls_sha256_info>:
   eb38c:	0006 0000 b7e4 000e 0020 0000 0040 0000     ........ ...@...
   eb39c:	6f4b 000d 6f41 000d 6f3d 000d 6f37 000d     Ko..Ao..=o..7o..
   eb3ac:	6f1b 000d 6f09 000d 6f05 000d 6f01 000d     .o...o...o...o..

000eb3bc <mbedtls_sha384_info>:
   eb3bc:	0007 0000 b811 000e 0030 0000 0080 0000     ........0.......
   eb3cc:	6f95 000d 6f91 000d 6f8d 000d 6f81 000d     .o...o...o...o..
   eb3dc:	6f6b 000d 6f59 000d 6f55 000d 6f51 000d     ko..Yo..Uo..Qo..

000eb3ec <mbedtls_sha512_info>:
   eb3ec:	0008 0000 b83e 000e 0040 0000 0080 0000     ....>...@.......
   eb3fc:	6f9b 000d 6f91 000d 6f8d 000d 6f87 000d     .o...o...o...o..
   eb40c:	6f6b 000d 6f59 000d 6f55 000d 6f51 000d     ko..Yo..Uo..Qo..
   eb41c:	6573 7063 3532 7236 0031 0000               secp256r1...

000eb428 <_ZL20ecp_supported_curves>:
   eb428:	0003 0017 0100 0000 b41c 000e 0000 0000     ................
	...
   eb440:	862a 8648 0df7 0c01 0301 7000 6562 6957     *.H........pbeWi
   eb450:	6874 4853 4141 646e 2d33 654b 5479 6972     thSHAAnd3-KeyTri
   eb460:	6c70 4465 5345 432d 4342 5000 4542 7720     pleDES-CBC.PBE w
   eb470:	7469 2068 4853 3141 6120 646e 3320 4b2d     ith SHA1 and 3-K
   eb480:	7965 3320 4544 0053 862a 8648 0df7 0c01     ey 3DES.*.H.....
   eb490:	0401 7000 6562 6957 6874 4853 4141 646e     ...pbeWithSHAAnd
   eb4a0:	2d32 654b 5479 6972 6c70 4465 5345 432d     2-KeyTripleDES-C
   eb4b0:	4342 5000 4542 7720 7469 2068 4853 3141     BC.PBE with SHA1
   eb4c0:	6120 646e 3220 4b2d 7965 3320 4544 0053      and 2-Key 3DES.
   eb4d0:	862a 8648 0df7 0702 6800 616d 5363 4148     *.H......hmacSHA
   eb4e0:	0031 4d48 4341 532d 4148 312d 2a00 4886     1.HMAC-SHA-1.*.H
   eb4f0:	f786 020d 0008 6d68 6361 4853 3241 3432     ......hmacSHA224
   eb500:	4800 414d 2d43 4853 2d41 3232 0034 862a     .HMAC-SHA-224.*.
   eb510:	8648 0df7 0902 6800 616d 5363 4148 3532     H......hmacSHA25
   eb520:	0036 4d48 4341 532d 4148 322d 3635 2a00     6.HMAC-SHA-256.*
   eb530:	4886 f786 020d 000a 6d68 6361 4853 3341     .H......hmacSHA3
   eb540:	3438 4800 414d 2d43 4853 2d41 3833 0034     84.HMAC-SHA-384.
   eb550:	862a 8648 0df7 0b02 6800 616d 5363 4148     *.H......hmacSHA
   eb560:	3135 0032 4d48 4341 532d 4148 352d 3231     512.HMAC-SHA-512
   eb570:	2b00 030e 1a02 6900 2d64 6873 3161 6000     .+.....id-sha1.`
   eb580:	4886 6501 0403 0402 6900 2d64 6873 3261     .H.e.....id-sha2
   eb590:	3432 6000 4886 6501 0403 0102 6900 2d64     24.`.H.e.....id-
   eb5a0:	6873 3261 3635 6000 4886 6501 0403 0202     sha256.`.H.e....
   eb5b0:	6900 2d64 6873 3361 3438 6000 4886 6501     .id-sha384.`.H.e
   eb5c0:	0403 0302 6900 2d64 6873 3561 3231 2b00     .....id-sha512.+
   eb5d0:	030e 0702 6400 7365 4243 0043 862a 8648     .....desCBC.*.H.
   eb5e0:	0df7 0703 6400 7365 652d 6564 2d33 6263     .....des-ede3-cb
   eb5f0:	0063 4544 2d53 4445 3345 432d 4342 2a00     c.DES-EDE3-CBC.*
   eb600:	4886 3dce 0103 0007 862a 8648 0df7 0101     .H.=....*.H.....
   eb610:	0001 7372 4561 636e 7972 7470 6f69 006e     ..rsaEncryption.
   eb620:	5352 0041 862a ce48 023d 0001 6469 652d     RSA.*.H.=...id-e
   eb630:	5063 6275 696c 4b63 7965 4700 6e65 7265     cPublicKey.Gener
   eb640:	6369 4520 2043 656b 0079 812b 0104 000c     ic EC key.+.....
   eb650:	6469 652d 4463 0048 4345 6b20 7965 6620     id-ecDH.EC key f
   eb660:	726f 4520 4443 0048 862a 8648 0df7 0101     or ECDH.*.H.....
   eb670:	0005 6873 2d61 5731 7469 5268 4153 6e45     ..sha-1WithRSAEn
   eb680:	7263 7079 6974 6e6f 5200 4153 7720 7469     cryption.RSA wit
   eb690:	2068 4853 3141 2a00 4886 f786 010d 0e01     h SHA1.*.H......
   eb6a0:	7300 6168 3232 5734 7469 5268 4153 6e45     .sha224WithRSAEn
   eb6b0:	7263 7079 6974 6e6f 5200 4153 7720 7469     cryption.RSA wit
   eb6c0:	2068 4853 2d41 3232 0034 862a 8648 0df7     h SHA-224.*.H...
   eb6d0:	0101 000b 6873 3261 3635 6957 6874 5352     ....sha256WithRS
   eb6e0:	4541 636e 7972 7470 6f69 006e 5352 2041     AEncryption.RSA 
   eb6f0:	6977 6874 5320 4148 322d 3635 2a00 4886     with SHA-256.*.H
   eb700:	f786 010d 0c01 7300 6168 3833 5734 7469     .......sha384Wit
   eb710:	5268 4153 6e45 7263 7079 6974 6e6f 5200     hRSAEncryption.R
   eb720:	4153 7720 7469 2068 4853 2d41 3833 0034     SA with SHA-384.
   eb730:	862a 8648 0df7 0101 000d 6873 3561 3231     *.H.......sha512
   eb740:	6957 6874 5352 4541 636e 7972 7470 6f69     WithRSAEncryptio
   eb750:	006e 5352 2041 6977 6874 5320 4148 352d     n.RSA with SHA-5
   eb760:	3231 2b00 030e 1d02 2a00 4886 3dce 0104     12.+.....*.H.=..
   eb770:	6500 6463 6173 772d 7469 2d68 4853 3141     .ecdsa-with-SHA1
   eb780:	4500 4443 4153 7720 7469 2068 4853 3141     .ECDSA with SHA1
   eb790:	2a00 4886 3dce 0304 0001 6365 7364 2d61     .*.H.=....ecdsa-
   eb7a0:	6977 6874 532d 4148 3232 0034 4345 5344     with-SHA224.ECDS
   eb7b0:	2041 6977 6874 5320 4148 3232 0034 862a     A with SHA224.*.
   eb7c0:	ce48 043d 0203 6500 6463 6173 772d 7469     H.=....ecdsa-wit
   eb7d0:	2d68 4853 3241 3635 4500 4443 4153 7720     h-SHA256.ECDSA w
   eb7e0:	7469 2068 4853 3241 3635 2a00 4886 3dce     ith SHA256.*.H.=
   eb7f0:	0304 0003 6365 7364 2d61 6977 6874 532d     ....ecdsa-with-S
   eb800:	4148 3833 0034 4345 5344 2041 6977 6874     HA384.ECDSA with
   eb810:	5320 4148 3833 0034 862a ce48 043d 0403      SHA384.*.H.=...
   eb820:	6500 6463 6173 772d 7469 2d68 4853 3541     .ecdsa-with-SHA5
   eb830:	3231 4500 4443 4153 7720 7469 2068 4853     12.ECDSA with SH
   eb840:	3541 3231 2a00 4886 f786 010d 0a01 5200     A512.*.H.......R
   eb850:	4153 5353 2d41 5350 0053 062b 0501 0705     SASSA-PSS.+.....
   eb860:	0103 6900 2d64 706b 732d 7265 6576 4172     ...id-kp-serverA
   eb870:	7475 0068 4c54 2053 6557 2062 6553 7672     uth.TLS Web Serv
   eb880:	7265 4120 7475 6568 746e 6369 7461 6f69     er Authenticatio
   eb890:	006e 062b 0501 0705 0203 6900 2d64 706b     n.+........id-kp
   eb8a0:	632d 696c 6e65 4174 7475 0068 4c54 2053     -clientAuth.TLS 
   eb8b0:	6557 2062 6c43 6569 746e 4120 7475 6568     Web Client Authe
   eb8c0:	746e 6369 7461 6f69 006e 062b 0501 0705     ntication.+.....
   eb8d0:	0303 6900 2d64 706b 632d 646f 5365 6769     ...id-kp-codeSig
   eb8e0:	696e 676e 4300 646f 2065 6953 6e67 6e69     ning.Code Signin
   eb8f0:	0067 062b 0501 0705 0403 6900 2d64 706b     g.+........id-kp
   eb900:	652d 616d 6c69 7250 746f 6365 6974 6e6f     -emailProtection
   eb910:	4500 6d2d 6961 206c 7250 746f 6365 6974     .E-mail Protecti
   eb920:	6e6f 2b00 0106 0505 0307 0008 6469 6b2d     on.+........id-k
   eb930:	2d70 6974 656d 7453 6d61 6970 676e 5400     p-timeStamping.T
   eb940:	6d69 2065 7453 6d61 6970 676e 2b00 0106     ime Stamping.+..
   eb950:	0505 0307 0009 6469 6b2d 2d70 434f 5053     ......id-kp-OCSP
   eb960:	6953 6e67 6e69 0067 434f 5053 5320 6769     Signing.OCSP Sig
   eb970:	696e 676e 5500 131d 6900 2d64 6563 622d     ning.U...id-ce-b
   eb980:	7361 6369 6f43 736e 7274 6961 746e 0073     asicConstraints.
   eb990:	6142 6973 2063 6f43 736e 7274 6961 746e     Basic Constraint
   eb9a0:	0073 1d55 000f 6469 632d 2d65 656b 5579     s.U...id-ce-keyU
   eb9b0:	6173 6567 5500 251d 6900 2d64 6563 652d     sage.U.%.id-ce-e
   eb9c0:	7478 654b 5579 6173 6567 4500 7478 6e65     xtKeyUsage.Exten
   eb9d0:	6564 2064 654b 2079 7355 6761 0065 1d55     ded Key Usage.U.
   eb9e0:	0011 6469 632d 2d65 7573 6a62 6365 4174     ..id-ce-subjectA
   eb9f0:	746c 614e 656d 5300 6275 656a 7463 4120     ltName.Subject A
   eba00:	746c 4e20 6d61 0065 8660 0148 f886 0142     lt Name.`.H...B.
   eba10:	0001 6469 6e2d 7465 6373 7061 2d65 6563     ..id-netscape-ce
   eba20:	7472 7974 6570 4e00 7465 6373 7061 2065     rttype.Netscape 
   eba30:	6543 7472 6669 6369 7461 2065 7954 6570     Certificate Type
   eba40:	5500 0304 6900 2d64 7461 632d 6d6f 6f6d     .U...id-at-commo
   eba50:	4e6e 6d61 0065 6f43 6d6d 6e6f 4e20 6d61     nName.Common Nam
   eba60:	0065 4e43 5500 0604 6900 2d64 7461 632d     e.CN.U...id-at-c
   eba70:	756f 746e 7972 614e 656d 4300 756f 746e     ountryName.Count
   eba80:	7972 5500 0704 6900 2d64 7461 6c2d 636f     ry.U...id-at-loc
   eba90:	6c61 7469 0079 6f4c 6163 696c 7974 4c00     ality.Locality.L
   ebaa0:	5500 0804 6900 2d64 7461 732d 6174 6574     .U...id-at-state
   ebab0:	5300 6174 6574 5500 0a04 6900 2d64 7461     .State.U...id-at
   ebac0:	6f2d 6772 6e61 7a69 7461 6f69 4e6e 6d61     -organizationNam
   ebad0:	0065 724f 6167 696e 617a 6974 6e6f 4f00     e.Organization.O
   ebae0:	5500 0b04 6900 2d64 7461 6f2d 6772 6e61     .U...id-at-organ
   ebaf0:	7a69 7461 6f69 616e 556c 696e 4e74 6d61     izationalUnitNam
   ebb00:	0065 724f 2067 6e55 7469 4f00 0055 862a     e.Org Unit.OU.*.
   ebb10:	8648 0df7 0901 0001 6d65 6961 416c 6464     H.......emailAdd
   ebb20:	6572 7373 4500 6d2d 6961 206c 6461 7264     ress.E-mail addr
   ebb30:	7365 0073 0455 0005 6469 612d 2d74 6573     ess.U...id-at-se
   ebb40:	6972 6c61 754e 626d 7265 5300 7265 6169     rialNumber.Seria
   ebb50:	206c 756e 626d 7265 5500 1004 6900 2d64     l number.U...id-
   ebb60:	7461 702d 736f 6174 416c 6464 6572 7373     at-postalAddress
   ebb70:	5000 736f 6174 206c 6461 7264 7365 0073     .Postal address.
   ebb80:	0455 0011 6469 612d 2d74 6f70 7473 6c61     U...id-at-postal
   ebb90:	6f43 6564 5000 736f 6174 206c 6f63 6564     Code.Postal code
   ebba0:	5500 0404 6900 2d64 7461 732d 7275 614e     .U...id-at-surNa
   ebbb0:	656d 5300 7275 616e 656d 5300 004e 0455     me.Surname.SN.U.
   ebbc0:	002a 6469 612d 2d74 6967 6576 4e6e 6d61     *.id-at-givenNam
   ebbd0:	0065 6947 6576 206e 616e 656d 4700 004e     e.Given name.GN.
   ebbe0:	0455 002b 6469 612d 2d74 6e69 7469 6169     U.+.id-at-initia
   ebbf0:	736c 4900 696e 6974 6c61 0073 0455 002c     ls.Initials.U.,.
   ebc00:	6469 612d 2d74 6567 656e 6172 6974 6e6f     id-at-generation
   ebc10:	7551 6c61 6669 6569 0072 6547 656e 6172     Qualifier.Genera
   ebc20:	6974 6e6f 7120 6175 696c 6966 7265 5500     tion qualifier.U
   ebc30:	0c04 6900 2d64 7461 742d 7469 656c 5400     ...id-at-title.T
   ebc40:	7469 656c 5500 2e04 6900 2d64 7461 642d     itle.U...id-at-d
   ebc50:	516e 6175 696c 6966 7265 4400 7369 6974     nQualifier.Disti
   ebc60:	676e 6975 6873 6465 4e20 6d61 2065 7571     nguished Name qu
   ebc70:	6c61 6669 6569 0072 0455 0041 6469 612d     alifier.U.A.id-a
   ebc80:	2d74 7370 7565 6f64 796e 006d 7350 7565     t-pseudonym.Pseu
   ebc90:	6f64 796e 006d 9209 8926 f293 642c 1901     donym...&...,d..
   ebca0:	6900 2d64 6f64 616d 6e69 6f43 706d 6e6f     .id-domainCompon
   ebcb0:	6e65 0074 6f44 616d 6e69 6320 6d6f 6f70     ent.Domain compo
   ebcc0:	656e 746e 4400 0043 0455 002d 6469 612d     nent.DC.U.-.id-a
   ebcd0:	2d74 6e75 7169 6575 6449 6e65 6974 6966     t-uniqueIdentifi
   ebce0:	7265 5500 696e 7571 2065 6449 6e65 6974     er.Unique Identi
   ebcf0:	6966 7265 0000 0000                         fier....

000ebcf8 <_ZL10oid_md_alg>:
   ebcf8:	b571 000e 0005 0000 b577 000e b4e7 000e     q.......w.......
   ebd08:	0004 0000 b57f 000e 0009 0000 b589 000e     ................
   ebd18:	b6c2 000e 0005 0000 b593 000e 0009 0000     ................
   ebd28:	b59d 000e b6f5 000e 0006 0000 b5a7 000e     ................
   ebd38:	0009 0000 b5b1 000e b728 000e 0007 0000     ........(.......
   ebd48:	b5bb 000e 0009 0000 b5c5 000e b75b 000e     ............[...
   ebd58:	0008 0000 0000 0000 0000 0000 0000 0000     ................
	...

000ebd70 <_ZL10oid_pk_alg>:
   ebd70:	b608 000e 0009 0000 b612 000e b620 000e     ............ ...
   ebd80:	0001 0000 b624 000e 0007 0000 b62c 000e     ....$.......,...
   ebd90:	b63b 000e 0002 0000 b64a 000e 0005 0000     ;.......J.......
   ebda0:	b650 000e b658 000e 0003 0000 0000 0000     P...X...........
	...

000ebdc0 <_ZL11oid_ecp_grp>:
   ebdc0:	b5ff 000e 0008 0000 b41c 000e b41c 000e     ................
   ebdd0:	0003 0000 0000 0000 0000 0000 0000 0000     ................
	...

000ebde8 <_ZL11oid_md_hmac>:
   ebde8:	b4d0 000e 0008 0000 b4d9 000e b4e2 000e     ................
   ebdf8:	0004 0000 b4ed 000e 0008 0000 b4f6 000e     ................
   ebe08:	b501 000e 0005 0000 b50e 000e 0008 0000     ................
   ebe18:	b517 000e b522 000e 0006 0000 b52f 000e     ...."......./...
   ebe28:	0008 0000 b538 000e b543 000e 0007 0000     ....8...C.......
   ebe38:	b550 000e 0008 0000 b559 000e b564 000e     P.......Y...d...
   ebe48:	0008 0000 0000 0000 0000 0000 0000 0000     ................
	...

000ebe60 <_ZL11oid_sig_alg>:
   ebe60:	b668 000e 0009 0000 b672 000e b689 000e     h.......r.......
   ebe70:	0104 0000 b697 000e 0009 0000 b6a1 000e     ................
   ebe80:	b6b9 000e 0105 0000 b6ca 000e 0009 0000     ................
   ebe90:	b6d4 000e b6ec 000e 0106 0000 b6fd 000e     ................
   ebea0:	0009 0000 b707 000e b71f 000e 0107 0000     ................
   ebeb0:	b730 000e 0009 0000 b73a 000e b752 000e     0.......:...R...
   ebec0:	0108 0000 b763 000e 0005 0000 b672 000e     ....c.......r...
   ebed0:	b689 000e 0104 0000 b769 000e 0007 0000     ........i.......
   ebee0:	b771 000e b781 000e 0404 0000 b791 000e     q...............
   ebef0:	0008 0000 b79a 000e b7ac 000e 0405 0000     ................
   ebf00:	b7be 000e 0008 0000 b7c7 000e b7d9 000e     ................
   ebf10:	0406 0000 b7eb 000e 0008 0000 b7f4 000e     ................
   ebf20:	b806 000e 0407 0000 b818 000e 0008 0000     ................
   ebf30:	b821 000e b833 000e 0408 0000 b845 000e     !...3.......E...
   ebf40:	0009 0000 b84f 000e b84f 000e 0600 0000     ....O...O.......
	...

000ebf64 <_ZL12oid_x509_ext>:
   ebf64:	b975 000e 0003 0000 b979 000e b990 000e     u.......y.......
   ebf74:	0100 0000 b9a2 000e 0003 0000 b9a6 000e     ................
   ebf84:	b9d4 000e 0004 0000 b9b5 000e 0003 0000     ................
   ebf94:	b9b9 000e b9cb 000e 0800 0000 b9de 000e     ................
   ebfa4:	0003 0000 b9e2 000e b9f7 000e 0020 0000     ............ ...
   ebfb4:	ba08 000e 0009 0000 ba12 000e ba27 000e     ............'...
   ebfc4:	0000 0001 0000 0000 0000 0000 0000 0000     ................
	...

000ebfdc <_ZL14oid_cipher_alg>:
   ebfdc:	b5cf 000e 0005 0000 b5d5 000e b4ab 000e     ................
   ebfec:	0021 0000 b5dc 000e 0008 0000 b5e5 000e     !...............
   ebffc:	b5f2 000e 0025 0000 0000 0000 0000 0000     ....%...........
	...

000ec018 <_ZL17oid_ext_key_usage>:
   ec018:	b85a 000e 0008 0000 b863 000e b874 000e     Z.......c...t...
   ec028:	b892 000e 0008 0000 b89b 000e b8ac 000e     ................
   ec038:	b8ca 000e 0008 0000 b8d3 000e b8e5 000e     ................
   ec048:	b8f2 000e 0008 0000 b8fb 000e b911 000e     ................
   ec058:	b923 000e 0008 0000 b92c 000e b93f 000e     #.......,...?...
   ec068:	b94d 000e 0008 0000 b956 000e b968 000e     M.......V...h...
	...

000ec088 <_ZL18oid_pkcs12_pbe_alg>:
   ec088:	b440 000e 000a 0000 b44b 000e b46b 000e     @.......K...k...
   ec098:	2504 0000 b488 000e 000a 0000 b493 000e     .%..............
   ec0a8:	b4b3 000e 2304 0000 0000 0000 0000 0000     .....#..........
	...

000ec0c4 <_ZL18oid_x520_attr_type>:
   ec0c4:	ba41 000e 0003 0000 ba45 000e ba56 000e     A.......E...V...
   ec0d4:	ba62 000e ba65 000e 0003 0000 ba69 000e     b...e.......i...
   ec0e4:	ba7b 000e b5fd 000e ba83 000e 0003 0000     {...............
   ec0f4:	ba87 000e ba96 000e ba9f 000e baa1 000e     ................
   ec104:	0003 0000 baa5 000e bab1 000e b0d7 000e     ................
   ec114:	bab7 000e 0003 0000 babb 000e bad2 000e     ................
   ec124:	badf 000e bae1 000e 0003 0000 bae5 000e     ................
   ec134:	bb02 000e bb0b 000e bb0e 000e 0009 0000     ................
   ec144:	bb18 000e bb25 000e bb18 000e bb34 000e     ....%.......4...
   ec154:	0003 0000 bb38 000e bb4b 000e bb3e 000e     ....8...K...>...
   ec164:	bb59 000e 0003 0000 bb5d 000e bb71 000e     Y.......]...q...
   ec174:	bb63 000e bb80 000e 0003 0000 bb84 000e     c...............
   ec184:	bb95 000e bb8a 000e bba1 000e 0003 0000     ................
   ec194:	bba5 000e bbb3 000e bbbb 000e bbbe 000e     ................
   ec1a4:	0003 0000 bbc2 000e bbd2 000e bbdd 000e     ................
   ec1b4:	bbe0 000e 0003 0000 bbe4 000e bbf3 000e     ................
   ec1c4:	bbea 000e bbfc 000e 0003 0000 bc00 000e     ................
   ec1d4:	bc1a 000e bc06 000e bc2f 000e 0003 0000     ......../.......
   ec1e4:	bc33 000e bc3f 000e bc39 000e bc45 000e     3...?...9...E...
   ec1f4:	0003 0000 bc49 000e bc5b 000e bc4f 000e     ....I...[...O...
   ec204:	bc78 000e 0003 0000 bc7c 000e bc8c 000e     x.......|.......
   ec214:	bc82 000e bc96 000e 000a 0000 bca1 000e     ................
   ec224:	bcb4 000e bcc5 000e bcc8 000e 0003 0000     ................
   ec234:	bccc 000e bce3 000e bcd2 000e 0000 0000     ................
	...
   ec254:	862a 8648 0df7 0501 000c 4541 2d53 3532     *.H.......AES-25
   ec264:	2d36 4347 004d 4541 2d53 3931 2d32 4347     6-GCM.AES-192-GC
   ec274:	004d 4541 2d53 3231 2d38 4347 004d 4541     M.AES-128-GCM.AE
   ec284:	2d53 3532 2d36 4345 0042 4541 2d53 3931     S-256-ECB.AES-19
   ec294:	2d32 4345 0042 4541 2d53 3231 2d38 4345     2-ECB.AES-128-EC
   ec2a4:	0042 0000                                   B...

000ec2a8 <_ZL12gcm_aes_info>:
   ec2a8:	0002 0000 0000 0000 b393 000d b393 000d     ................
   ec2b8:	b37b 000d b369 000d                         {...i...

000ec2c0 <_ZL16aes_128_ecb_info>:
   ec2c0:	0102 0000 0080 0000 c29a 000e 0000 0000     ................
   ec2d0:	0000 0000 0010 0000 c368 000e               ........h...

000ec2dc <_ZL16aes_128_gcm_info>:
   ec2dc:	060e 0000 0080 0000 c276 000e 000c 0000     ........v.......
   ec2ec:	0001 0000 0010 0000 c2a8 000e               ............

000ec2f8 <_ZL16aes_192_ecb_info>:
   ec2f8:	0103 0000 00c0 0000 c28e 000e 0000 0000     ................
   ec308:	0000 0000 0010 0000 c368 000e               ........h...

000ec314 <_ZL16aes_192_gcm_info>:
   ec314:	060f 0000 00c0 0000 c26a 000e 000c 0000     ........j.......
   ec324:	0001 0000 0010 0000 c2a8 000e               ............

000ec330 <_ZL16aes_256_ecb_info>:
   ec330:	0104 0000 0100 0000 c282 000e 0000 0000     ................
   ec340:	0000 0000 0010 0000 c368 000e               ........h...

000ec34c <_ZL16aes_256_gcm_info>:
   ec34c:	0610 0000 0100 0000 c25e 000e 000c 0000     ........^.......
   ec35c:	0001 0000 0010 0000 c2a8 000e               ............

000ec368 <_ZL8aes_info>:
   ec368:	0002 0000 b3cf 000d b3cb 000d b3c7 000d     ................
   ec378:	b3af 000d b39d 000d                         ........

000ec380 <mbedtls_cipher_definitions>:
   ec380:	0002 0000 c2c0 000e 0003 0000 c2f8 000e     ................
   ec390:	0004 0000 c330 000e 000e 0000 c2dc 000e     ....0...........
   ec3a0:	000f 0000 c314 000e 0010 0000 c34c 000e     ............L...
	...
   ec3b8:	7372 2e61 004e 7372 2e61 0045 6365 656b     rsa.N.rsa.E.ecke
   ec3c8:	2e79 0051 4345 5344 0041 4345 445f 0048     y.Q.ECDSA.EC_DH.
   ec3d8:	4345 0000                                   EC..

000ec3dc <mbedtls_ecdsa_info>:
   ec3dc:	0004 0000 c3cc 000e b411 000d b435 000d     ............5...
   ec3ec:	b635 000d b5e9 000d 0000 0000 0000 0000     5...............
   ec3fc:	b5bd 000d b5c1 000d b5d7 000d b415 000d     ................

000ec40c <mbedtls_eckey_info>:
   ec40c:	0002 0000 c3d8 000e b411 000d b405 000d     ................
   ec41c:	b655 000d b5ed 000d 0000 0000 0000 0000     U...............
   ec42c:	b5bd 000d b5a7 000d b595 000d b415 000d     ................

000ec43c <mbedtls_eckeydh_info>:
   ec43c:	0003 0000 c3d2 000e b411 000d b429 000d     ............)...
	...
   ec45c:	b5bd 000d b5a7 000d b595 000d b415 000d     ................

000ec46c <mbedtls_rsa_info>:
   ec46c:	0001 0000 b620 000e b46d 000d b3d3 000d     .... ...m.......
   ec47c:	b545 000d b509 000d b4c1 000d b479 000d     E...........y...
   ec48c:	b469 000d b44f 000d b43d 000d b3e1 000d     i...O...=.......
   ec49c:	862a 8648 0df7 0c01 0101 2a00 4886 f786     *.H........*.H..
   ec4ac:	010d 0d05 2d00 2d2d 2d2d 4e45 2044 5352     .....-----END RS
   ec4bc:	2041 5250 5649 5441 2045 454b 2d59 2d2d     A PRIVATE KEY---
   ec4cc:	2d2d 2d00 2d2d 2d2d 4542 4947 204e 5352     --.-----BEGIN RS
   ec4dc:	2041 5250 5649 5441 2045 454b 2d59 2d2d     A PRIVATE KEY---
   ec4ec:	2d2d 2d00 2d2d 2d2d 4e45 2044 4345 5020     --.-----END EC P
   ec4fc:	4952 4156 4554 4b20 5945 2d2d 2d2d 002d     RIVATE KEY-----.
   ec50c:	2d2d 2d2d 422d 4745 4e49 4520 2043 5250     -----BEGIN EC PR
   ec51c:	5649 5441 2045 454b 2d59 2d2d 2d2d 2d00     IVATE KEY-----.-
   ec52c:	2d2d 2d2d 4e45 2044 5250 5649 5441 2045     ----END PRIVATE 
   ec53c:	454b 2d59 2d2d 2d2d 2d00 2d2d 2d2d 4542     KEY-----.-----BE
   ec54c:	4947 204e 5250 5649 5441 2045 454b 2d59     GIN PRIVATE KEY-
   ec55c:	2d2d 2d2d 2d00 2d2d 2d2d 4e45 2044 4e45     ----.-----END EN
   ec56c:	5243 5059 4554 2044 5250 5649 5441 2045     CRYPTED PRIVATE 
   ec57c:	454b 2d59 2d2d 2d2d 2d00 2d2d 2d2d 4542     KEY-----.-----BE
   ec58c:	4947 204e 4e45 5243 5059 4554 2044 5250     GIN ENCRYPTED PR
   ec59c:	5649 5441 2045 454b 2d59 2d2d 2d2d 0000     IVATE KEY-----..
   ec5ac:	0000 0000                                   ....

000ec5b0 <_ZL5last4>:
	...
   ec5b8:	1c20 0000 0000 0000 3840 0000 0000 0000      .......@8......
   ec5c8:	2460 0000 0000 0000 7080 0000 0000 0000     `$.......p......
   ec5d8:	6ca0 0000 0000 0000 48c0 0000 0000 0000     .l.......H......
   ec5e8:	54e0 0000 0000 0000 e100 0000 0000 0000     .T..............
   ec5f8:	fd20 0000 0000 0000 d940 0000 0000 0000      .......@.......
   ec608:	c560 0000 0000 0000 9180 0000 0000 0000     `...............
   ec618:	8da0 0000 0000 0000 a9c0 0000 0000 0000     ................
   ec628:	b5e0 0000 0000 0000                         ........

000ec630 <_ZL14base64_dec_map>:
   ec630:	7f7f 7f7f 7f7f 7f7f 7f7f 7f7f 7f7f 7f7f     ................
   ec640:	7f7f 7f7f 7f7f 7f7f 7f7f 7f7f 7f7f 7f7f     ................
   ec650:	7f7f 7f7f 7f7f 7f7f 7f7f 3e7f 7f7f 3f7f     ...........>...?
   ec660:	3534 3736 3938 3b3a 3d3c 7f7f 407f 7f7f     456789:;<=...@..
   ec670:	007f 0201 0403 0605 0807 0a09 0c0b 0e0d     ................
   ec680:	100f 1211 1413 1615 1817 7f19 7f7f 7f7f     ................
   ec690:	1a7f 1c1b 1e1d 201f 2221 2423 2625 2827     ....... !"#$%&'(
   ec6a0:	2a29 2c2b 2e2d 302f 3231 7f33 7f7f 7f7f     )*+,-./0123.....

000ec6b0 <CSWTCH.17>:
   ec6b0:	b32c 000e b35c 000e b38c 000e b3bc 000e     ,...\...........
   ec6c0:	b3ec 000e                                   ....

000ec6c4 <_ZL11secp256r1_b>:
   ec6c4:	604b 27d2 3c3e 3bce b0f6 cc53 06b0 651d     K`.'><.;..S....e
   ec6d4:	86bc 7698 bd55 b3eb 93e7 aa3a 35d8 5ac6     ...vU.....:..5.Z

000ec6e4 <_ZL11secp256r1_n>:
   ec6e4:	2551 fc63 cac2 f3b9 9e84 a717 faad bce6     Q%c.............
   ec6f4:	ffff ffff ffff ffff 0000 0000 ffff ffff     ................

000ec704 <_ZL11secp256r1_p>:
   ec704:	ffff ffff ffff ffff ffff ffff 0000 0000     ................
	...
   ec71c:	0001 0000 ffff ffff                         ........

000ec724 <_ZL12secp256r1_gx>:
   ec724:	c296 d898 3945 f4a1 33a0 2deb 7d81 7703     ....E9...3.-.}.w
   ec734:	40f2 63a4 e6e5 f8bc 4247 e12c d1f2 6b17     .@.c....GB,....k

000ec744 <_ZL12secp256r1_gy>:
   ec744:	51f5 37bf 4068 cbb6 5ece 6b31 3357 2bce     .Q.7h@...^1kW3.+
   ec754:	9e16 7c0f eb4a 8ee7 7f9b fe1a 42e2 4fe3     ...|J........B.O
   ec764:	7274 6575 6600 6c61 6573 0a00 6543 7472     true.false..Cert
   ec774:	6669 6369 7461 2065 7369 7520 696e 696e     ificate is unini
   ec784:	6974 6c61 7369 6465 0a21 2500 6373 7265     tialised!..%scer
   ec794:	2e74 7620 7265 6973 6e6f 2020 2020 3a20     t. version     :
   ec7a4:	2520 0a64 2500 7373 7265 6169 206c 756e      %d..%sserial nu
   ec7b4:	626d 7265 2020 2020 3a20 0020 250a 6973     mber     : ..%si
   ec7c4:	7373 6575 2072 616e 656d 2020 2020 2020     ssuer name      
   ec7d4:	3a20 0020 250a 7373 6275 656a 7463 6e20      : ..%ssubject n
   ec7e4:	6d61 2065 2020 2020 3a20 0020 250a 6973     ame      : ..%si
   ec7f4:	7373 6575 2064 6f20 206e 2020 2020 2020     ssued  on       
   ec804:	3a20 2520 3430 2d64 3025 6432 252d 3230      : %04d-%02d-%02
   ec814:	2064 3025 6432 253a 3230 3a64 3025 6432     d %02d:%02d:%02d
   ec824:	0a00 7325 7865 6970 6572 2073 6e6f 2020     ..%sexpires on  
   ec834:	2020 2020 2020 203a 3025 6434 252d 3230           : %04d-%02
   ec844:	2d64 3025 6432 2520 3230 3a64 3025 6432     d-%02d %02d:%02d
   ec854:	253a 3230 0064 250a 7373 6769 656e 2064     :%02d..%ssigned 
   ec864:	7375 6e69 2067 2020 2020 3a20 0020 250a     using      : ..%
   ec874:	2573 312d 7338 203a 6425 6220 7469 0073     s%-18s: %d bits.
   ec884:	250a 6273 7361 6369 6320 6e6f 7473 6172     .%sbasic constra
   ec894:	6e69 7374 3a20 4320 3d41 7325 2c00 6d20     ints : CA=%s., m
   ec8a4:	7861 705f 7461 6c68 6e65 253d 0064 250a     ax_pathlen=%d..%
   ec8b4:	7373 6275 656a 7463 6120 746c 6e20 6d61     ssubject alt nam
   ec8c4:	2065 3a20 0020 250a 6373 7265 2e74 7420     e  : ..%scert. t
   ec8d4:	7079 2065 2020 2020 2020 3a20 0020 7325     ype        : .%s
   ec8e4:	5353 204c 6c43 6569 746e 2500 5373 4c53     SSL Client.%sSSL
   ec8f4:	5320 7265 6576 0072 7325 6d45 6961 006c      Server.%sEmail.
   ec904:	7325 624f 656a 7463 5320 6769 696e 676e     %sObject Signing
   ec914:	2500 5273 7365 7265 6576 0064 7325 5353     .%sReserved.%sSS
   ec924:	204c 4143 2500 4573 616d 6c69 4320 0041     L CA.%sEmail CA.
   ec934:	7325 624f 656a 7463 5320 6769 696e 676e     %sObject Signing
   ec944:	4320 0041 250a 6b73 7965 7520 6173 6567      CA..%skey usage
   ec954:	2020 2020 2020 2020 3a20 0020 7325 6944              : .%sDi
   ec964:	6967 6174 206c 6953 6e67 7461 7275 0065     gital Signature.
   ec974:	7325 6f4e 206e 6552 7570 6964 7461 6f69     %sNon Repudiatio
   ec984:	006e 7325 654b 2079 6e45 6963 6870 7265     n.%sKey Encipher
   ec994:	656d 746e 2500 4473 7461 2061 6e45 6963     ment.%sData Enci
   ec9a4:	6870 7265 656d 746e 2500 4b73 7965 4120     pherment.%sKey A
   ec9b4:	7267 6565 656d 746e 2500 4b73 7965 4320     greement.%sKey C
   ec9c4:	7265 2074 6953 6e67 2500 4373 4c52 5320     ert Sign.%sCRL S
   ec9d4:	6769 006e 7325 6e45 6963 6870 7265 4f20     ign.%sEncipher O
   ec9e4:	6c6e 0079 7325 6544 6963 6870 7265 4f20     nly.%sDecipher O
   ec9f4:	6c6e 0079 250a 6573 7478 6b20 7965 7520     nly..%sext key u
   eca04:	6173 6567 2020 2020 3a20 0020 7325 7325     sage     : .%s%s
   eca14:	2d00 2d2d 2d2d 4542 4947 204e 4543 5452     .-----BEGIN CERT
   eca24:	4649 4349 5441 2d45 2d2d 2d2d 2d00 2d2d     IFICATE-----.---
   eca34:	2d2d 4e45 2044 4543 5452 4649 4349 5441     --END CERTIFICAT
   eca44:	2d45 2d2d 2d2d 5500 251d 0000               E-----.U.%..

000eca50 <mbedtls_x509_crt_profile_default>:
   eca50:	00f0 0000 ffff 0fff ffff 0fff 0800 0000     ................

000eca60 <mbedtls_x509_crt_profile_suiteb>:
   eca60:	0060 0000 000a 0000 000c 0000 0000 0000     `...............
   eca70:	6e69 6176 696c 2064 4b50 0000               invalid PK..

000eca7c <CSWTCH.17>:
   eca7c:	c46c 000e c40c 000e c43c 000e c3dc 000e     l.......<.......
   eca8c:	6c63 6569 746e 6620 6e69 7369 6568 0064     client finished.
   eca9c:	6573 7672 7265 6620 6e69 7369 6568 0064     server finished.
   ecaac:	616d 7473 7265 7320 6365 6572 0074 656b     master secret.ke
   ecabc:	2079 7865 6170 736e 6f69 006e               y expansion.

000ecac8 <CSWTCH.133>:
   ecac8:	0200 0400 0800 1000                         ........

000ecad0 <_ZL1K>:
   ecad0:	ae22 d728 2f98 428a 65cd 23ef 4491 7137     ".(../.B.e.#.D7q
   ecae0:	3b2f ec4d fbcf b5c0 dbbc 8189 dba5 e9b5     /;M.............
   ecaf0:	b538 f348 c25b 3956 d019 b605 11f1 59f1     8.H.[.V9.......Y
   ecb00:	4f9b af19 82a4 923f 8118 da6d 5ed5 ab1c     .O....?...m..^..
   ecb10:	0242 a303 aa98 d807 6fbe 4570 5b01 1283     B........opE.[..
   ecb20:	b28c 4ee4 85be 2431 b4e2 d5ff 7dc3 550c     ...N..1$.....}.U
   ecb30:	896f f27b 5d74 72be 96b1 3b16 b1fe 80de     o.{.t].r...;....
   ecb40:	1235 25c7 06a7 9bdc 2694 cf69 f174 c19b     5..%.....&i.t...
   ecb50:	4ad2 9ef1 69c1 e49b 25e3 384f 4786 efbe     .J...i...%O8.G..
   ecb60:	d5b5 8b8c 9dc6 0fc1 9c65 77ac a1cc 240c     ........e..w...$
   ecb70:	0275 592b 2c6f 2de9 e483 6ea6 84aa 4a74     u.+Yo,.-...n..tJ
   ecb80:	fbd4 bd41 a9dc 5cb0 53b5 8311 88da 76f9     ..A....\.S.....v
   ecb90:	dfab ee66 5152 983e 3210 2db4 c66d a831     ..f.RQ>..2.-m.1.
   ecba0:	213f 98fb 27c8 b003 0ee4 beef 7fc7 bf59     ?!...'........Y.
   ecbb0:	8fc2 3da8 0bf3 c6e0 a725 930a 9147 d5a7     ...=....%...G...
   ecbc0:	826f e003 6351 06ca 6e70 0a0e 2967 1429     o...Qc..pn..g)).
   ecbd0:	2ffc 46d2 0a85 27b7 c926 5c26 2138 2e1b     ./.F...'&.&\8!..
   ecbe0:	2aed 5ac4 6dfc 4d2c b3df 9d95 0d13 5338     .*.Z.m,M......8S
   ecbf0:	63de 8baf 7354 650a b2a8 3c77 0abb 766a     .c..Ts.e..w<..jv
   ecc00:	aee6 47ed c92e 81c2 353b 1482 2c85 9272     ...G....;5...,r.
   ecc10:	0364 4cf1 e8a1 a2bf 3001 bc42 664b a81a     d..L.....0B.Kf..
   ecc20:	9791 d0f8 8b70 c24b be30 0654 51a3 c76c     ....p.K.0.T..Ql.
   ecc30:	5218 d6ef e819 d192 a910 5565 0624 d699     .R........eU$...
   ecc40:	202a 5771 3585 f40e d1b8 32bb a070 106a     * qW.5.....2p.j.
   ecc50:	d0c8 b8d2 c116 19a4 ab53 5141 6c08 1e37     ........S.AQ.l7.
   ecc60:	eb99 df8e 774c 2748 48a8 e19b bcb5 34b0     ....LwH'.H.....4
   ecc70:	5a63 c5c9 0cb3 391c 8acb e341 aa4a 4ed8     cZ.....9..A.J..N
   ecc80:	e373 7763 ca4f 5b9c b8a3 d6b2 6ff3 682e     s.cwO..[.....o.h
   ecc90:	b2fc 5def 82ee 748f 2f60 4317 636f 78a5     ...]...t`/.Coc.x
   ecca0:	ab72 a1f0 7814 84c8 39ec 1a64 0208 8cc7     r....x...9d.....
   eccb0:	1e28 2363 fffa 90be bde9 de82 6ceb a450     (.c#.........lP.
   eccc0:	7915 b2c6 a3f7 bef9 532b e372 78f2 c671     .y......+Sr..xq.
   eccd0:	619c ea26 3ece ca27 c207 21c0 b8c7 d186     .a&..>'....!....
   ecce0:	eb1e cde0 7dd6 eada d178 ee6e 4f7f f57d     .....}..x.n..O}.
   eccf0:	6fba 7217 67aa 06f0 98a6 a2c8 7dc5 0a63     .o.r.g.......}c.
   ecd00:	0dae bef9 9804 113f 471b 131c 0b35 1b71     ......?..G..5.q.
   ecd10:	7d84 2304 77f5 28db 2493 40c7 ab7b 32ca     .}.#.w.(.$.@{..2
   ecd20:	bebc 15c9 be0a 3c9e 0d4c 9c10 67c4 431d     .......<L....g.C
   ecd30:	42b6 cb3e d4be 4cc5 7e2a fc65 299c 597f     .B>....L*~e..).Y
   ecd40:	faec 3ad6 6fab 5fcb 5817 4a47 198c 6c44     ...:.o._.XGJ..Dl
   ecd50:	7250 636f 542d 7079 3a65 3420 452c 434e     Proc-Type: 4,ENC
   ecd60:	5952 5450 4445 5400 534c 452d 4443 4548     RYPTED.TLS-ECDHE
   ecd70:	452d 4443 4153 572d 5449 2d48 4541 2d53     -ECDSA-WITH-AES-
   ecd80:	3231 2d38 4347 2d4d 4853 3241 3635 5400     128-GCM-SHA256.T
   ecd90:	534c 452d 4443 4548 452d 4443 4153 572d     LS-ECDHE-ECDSA-W
   ecda0:	5449 2d48 4541 2d53 3532 2d36 4347 2d4d     ITH-AES-256-GCM-
   ecdb0:	4853 3341 3438 5400 534c 522d 4153 572d     SHA384.TLS-RSA-W
   ecdc0:	5449 2d48 4541 2d53 3532 2d36 4347 2d4d     ITH-AES-256-GCM-
   ecdd0:	4853 3341 3438 5400 534c 522d 4153 572d     SHA384.TLS-RSA-W
   ecde0:	5449 2d48 4541 2d53 3231 2d38 4347 2d4d     ITH-AES-128-GCM-
   ecdf0:	4853 3241 3635 5400 534c 502d 4b53 572d     SHA256.TLS-PSK-W
   ece00:	5449 2d48 4541 2d53 3231 2d38 4347 2d4d     ITH-AES-128-GCM-
   ece10:	4853 3241 3635 5400 534c 502d 4b53 572d     SHA256.TLS-PSK-W
   ece20:	5449 2d48 4541 2d53 3532 2d36 4347 2d4d     ITH-AES-256-GCM-
   ece30:	4853 3341 3438 5400 534c 522d 4153 502d     SHA384.TLS-RSA-P
   ece40:	4b53 572d 5449 2d48 4541 2d53 3231 2d38     SK-WITH-AES-128-
   ece50:	4347 2d4d 4853 3241 3635 5400 534c 522d     GCM-SHA256.TLS-R
   ece60:	4153 502d 4b53 572d 5449 2d48 4541 2d53     SA-PSK-WITH-AES-
   ece70:	3532 2d36 4347 2d4d 4853 3341 3438 0000     256-GCM-SHA384..

000ece80 <_ZL22ciphersuite_preference>:
   ece80:	cca8 0000 cca9 0000 ccaa 0000 c02c 0000     ............,...
   ece90:	c030 0000 009f 0000 c0ad 0000 c09f 0000     0...............
   ecea0:	c024 0000 c028 0000 006b 0000 c00a 0000     $...(...k.......
   eceb0:	c014 0000 0039 0000 c0af 0000 c0a3 0000     ....9...........
   ecec0:	c087 0000 c08b 0000 c07d 0000 c073 0000     ........}...s...
   eced0:	c077 0000 00c4 0000 0088 0000 c05d 0000     w...........]...
   ecee0:	c061 0000 c053 0000 c049 0000 c04d 0000     a...S...I...M...
   ecef0:	c045 0000 c02b 0000 c02f 0000 009e 0000     E...+.../.......
   ecf00:	c0ac 0000 c09e 0000 c023 0000 c027 0000     ........#...'...
   ecf10:	0067 0000 c009 0000 c013 0000 0033 0000     g...........3...
   ecf20:	c0ae 0000 c0a2 0000 c086 0000 c08a 0000     ................
   ecf30:	c07c 0000 c072 0000 c076 0000 00be 0000     |...r...v.......
   ecf40:	0045 0000 c05c 0000 c060 0000 c052 0000     E...\...`...R...
   ecf50:	c048 0000 c04c 0000 c044 0000 ccac 0000     H...L...D.......
   ecf60:	ccad 0000 00ab 0000 c0a7 0000 c038 0000     ............8...
   ecf70:	00b3 0000 c036 0000 0091 0000 c091 0000     ....6...........
   ecf80:	c09b 0000 c097 0000 c0ab 0000 c06d 0000     ............m...
   ecf90:	c071 0000 c067 0000 00aa 0000 c0a6 0000     q...g...........
   ecfa0:	c037 0000 00b2 0000 c035 0000 0090 0000     7.......5.......
   ecfb0:	c090 0000 c096 0000 c09a 0000 c0aa 0000     ................
   ecfc0:	c06c 0000 c070 0000 c066 0000 c0ff 0000     l...p...f.......
   ecfd0:	009d 0000 c09d 0000 003d 0000 0035 0000     ........=...5...
   ecfe0:	c032 0000 c02a 0000 c00f 0000 c02e 0000     2...*...........
   ecff0:	c026 0000 c005 0000 c0a1 0000 c07b 0000     &...........{...
   ed000:	00c0 0000 0084 0000 c08d 0000 c079 0000     ............y...
   ed010:	c089 0000 c075 0000 c05f 0000 c063 0000     ....u..._...c...
   ed020:	c051 0000 c04b 0000 c04f 0000 c03d 0000     Q...K...O...=...
   ed030:	009c 0000 c09c 0000 003c 0000 002f 0000     ........<.../...
   ed040:	c031 0000 c029 0000 c00e 0000 c02d 0000     1...).......-...
   ed050:	c025 0000 c004 0000 c0a0 0000 c07a 0000     %...........z...
   ed060:	00ba 0000 0041 0000 c08c 0000 c078 0000     ....A.......x...
   ed070:	c088 0000 c074 0000 c05e 0000 c062 0000     ....t...^...b...
   ed080:	c050 0000 c04a 0000 c04e 0000 c03c 0000     P...J...N...<...
   ed090:	ccae 0000 00ad 0000 00b7 0000 0095 0000     ................
   ed0a0:	c093 0000 c099 0000 c06f 0000 c069 0000     ........o...i...
   ed0b0:	00ac 0000 00b6 0000 0094 0000 c092 0000     ................
   ed0c0:	c098 0000 c06e 0000 c068 0000 ccab 0000     ....n...h.......
   ed0d0:	00a9 0000 c0a5 0000 00af 0000 008d 0000     ................
   ed0e0:	c08f 0000 c095 0000 c0a9 0000 c06b 0000     ............k...
   ed0f0:	c065 0000 00a8 0000 c0a4 0000 00ae 0000     e...............
   ed100:	008c 0000 c08e 0000 c094 0000 c0a8 0000     ................
   ed110:	c06a 0000 c064 0000 c008 0000 c012 0000     j...d...........
   ed120:	0016 0000 c034 0000 008f 0000 000a 0000     ....4...........
   ed130:	c00d 0000 c003 0000 0093 0000 008b 0000     ................
   ed140:	c007 0000 c011 0000 c033 0000 008e 0000     ........3.......
   ed150:	0005 0000 0004 0000 c00c 0000 c002 0000     ................
   ed160:	0092 0000 008a 0000 0015 0000 0009 0000     ................
   ed170:	c006 0000 c010 0000 c03b 0000 c03a 0000     ........;...:...
   ed180:	c039 0000 00b5 0000 00b4 0000 002d 0000     9...........-...
   ed190:	003b 0000 0002 0000 0001 0000 c00b 0000     ;...............
   ed1a0:	c001 0000 00b9 0000 00b8 0000 002e 0000     ................
   ed1b0:	00b1 0000 00b0 0000 002c 0000 0000 0000     ........,.......

000ed1c0 <_ZL23ciphersuite_definitions>:
   ed1c0:	c02b 0000 cd67 000e 060e 0004 0003 0000     +...g...........
   ed1d0:	0003 0000 0003 0000 0003 0000 0000 0000     ................
   ed1e0:	c02c 0000 cd8f 000e 0710 0004 0003 0000     ,...............
   ed1f0:	0003 0000 0003 0000 0003 0000 0000 0000     ................
   ed200:	009d 0000 cdb7 000e 0710 0001 0003 0000     ................
   ed210:	0003 0000 0003 0000 0003 0000 0000 0000     ................
   ed220:	009c 0000 cdd7 000e 060e 0001 0003 0000     ................
   ed230:	0003 0000 0003 0000 0003 0000 0000 0000     ................
   ed240:	00a8 0000 cdf7 000e 060e 0005 0003 0000     ................
   ed250:	0003 0000 0003 0000 0003 0000 0000 0000     ................
   ed260:	00a9 0000 ce17 000e 0710 0005 0003 0000     ................
   ed270:	0003 0000 0003 0000 0003 0000 0000 0000     ................
   ed280:	00ac 0000 ce37 000e 060e 0007 0003 0000     ....7...........
   ed290:	0003 0000 0003 0000 0003 0000 0000 0000     ................
   ed2a0:	00ad 0000 ce5b 000e 0710 0007 0003 0000     ....[...........
   ed2b0:	0003 0000 0003 0000 0003 0000 0000 0000     ................
   ed2c0:	0000 0000 b611 000e 0000 0000 0000 0000     ................
	...
   ed2e0:	0302 0705 0d0b 1311 1d17 251f 2b29 352f     ...........%)+/5
   ed2f0:	3d3b 4743 4f49 5953 6561 6b67 716d 837f     ;=CGIOSYaegkmq..
   ed300:	8b89 9795 a39d ada7 b5b3 c1bf c7c5 dfd3     ................
   ed310:	e5e3 efe9 fbf1 0000                         ........

000ed318 <_ZTVN5spark13EthernetClassE>:
	...
   ed320:	589f 000e 5895 000e 588b 000e 5881 000e     .X...X...X...X..
   ed330:	5875 000e 5869 000e 585d 000e 5855 000e     uX..iX..]X..UX..
   ed340:	584b 000e 5841 000e 6e6d 000e 6977 6972     KX..AX..mn..wiri
   ed350:	676e 5300 7379 6574 206d 6c73 6565 2070     ng.System sleep 
   ed360:	6f63 666e 6769 7275 7461 6f69 206e 7369     configuration is
   ed370:	6920 766e 6c61 6469 002e 0000                invalid....

000ed37c <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   ed384:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
   ed394:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000ed3a4 <_ZTV6Stream>:
	...
   ed3b4:	40a9 000d 5e65 000e 40a9 000d 40a9 000d     .@..e^...@...@..
   ed3c4:	40a9 000d 40a9 000d                         .@...@..

000ed3cc <_ZTV15TCPServerClient>:
	...
   ed3d4:	6239 000e 6251 000e 680d 000e 6827 000e     9b..Qb...h..'h..
   ed3e4:	6c19 000e 698b 000e 695d 000e 6851 000e     .l...i..]i..Qh..
   ed3f4:	6b21 000e 6a15 000e 69bf 000e 6ccd 000e     !k...j...i...l..
   ed404:	6853 000e 6885 000e 6839 000e 68c3 000e     Sh...h..9h...h..
   ed414:	5fff 000e                                   ._..

000ed418 <_ZTV9TCPServer>:
	...
   ed420:	415d 000d 4191 000d 5f9f 000e 5fb7 000e     ]A...A..._..._..
   ed430:	60f9 000e 5f87 000e 5fc9 000e               .`..._..._..

000ed43c <_ZTV9IPAddress>:
	...
   ed444:	6491 000e 6481 000e 6483 000e               .d...d...d..

000ed450 <_ZTV9USBSerial>:
	...
   ed458:	6593 000e 65fb 000e 65d1 000e 5e65 000e     .e...e...e..e^..
   ed468:	65c3 000e 6595 000e 65a5 000e 65f5 000e     .e...e...e...e..
   ed478:	65b5 000e 658f 000e                         .e...e..

000ed480 <_ZTV11USARTSerial>:
	...
   ed488:	6695 000e 6701 000e 66d9 000e 5e65 000e     .f...g...f..e^..
   ed498:	66a9 000e 66c5 000e 66b7 000e 66d3 000e     .f...f...f...f..
   ed4a8:	6697 000e 669b 000e                         .f...f..

000ed4b0 <_ZTV7TwoWire>:
	...
   ed4b8:	6791 000e 67db 000e 67b3 000e 6793 000e     .g...g...g...g..
   ed4c8:	67bb 000e 67c3 000e 67cb 000e 67d3 000e     .g...g...g...g..
   ed4d8:	6572 7663 6520 7272 726f 3d20 2520 0064     recv error = %d.

000ed4e8 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   ed4f0:	688f 000e 68b1 000e 6d83 000e 68bf 000e     .h...h...m...h..
   ed500:	6891 000e                                   .h..

000ed504 <_ZTV9TCPClient>:
	...
   ed50c:	413d 000d 417d 000d 680d 000e 6827 000e     =A..}A...h..'h..
   ed51c:	6c19 000e 698b 000e 695d 000e 6851 000e     .l...i..]i..Qh..
   ed52c:	6b21 000e 6a15 000e 69bf 000e 6ccd 000e     !k...j...i...l..
   ed53c:	6853 000e 6885 000e 6839 000e 68c3 000e     Sh...h..9h...h..
   ed54c:	693d 000e                                   =i..

000ed550 <_ZTVN5spark9WiFiClassE>:
	...
   ed558:	6de7 000e 6ddd 000e 6dd3 000e 6d89 000e     .m...m...m...m..
   ed568:	6dc7 000e 6dbb 000e 6daf 000e 6da7 000e     .m...m...m...m..
   ed578:	6d9d 000e 6d93 000e 6e6d 000e               .m...m..mn..

000ed584 <_ZTVN5spark12NetworkClassE>:
	...
   ed58c:	6e05 000e 6e0f 000e 6e19 000e 6e23 000e     .n...n...n..#n..
   ed59c:	6e2d 000e 6e39 000e 6e45 000e 6e51 000e     -n..9n..En..Qn..
   ed5ac:	6e59 000e 6e63 000e 6e6d 000e 2e30 0030     Yn..cn..mn..0.0.

000ed5bc <_ZTVSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   ed5c4:	6f83 000e 6f89 000e 6f9f 000e 6f97 000e     .o...o...o...o..
   ed5d4:	6f85 000e                                   .o..

000ed5d8 <_ZSt7nothrow>:
	...

000ed5d9 <_ZTSSt19_Sp_make_shared_tag>:
   ed5d9:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   ed5e9:	6572 5f64 6174 0067 0000                     red_tag....

000ed5f4 <_ZTISt19_Sp_make_shared_tag>:
   ed5f4:	d728 000e d5d9 000e 6f6e 2074 6e65 756f     (.......not enou
   ed604:	6867 7320 6170 6563 6620 726f 6620 726f     gh space for for
   ed614:	616d 2074 7865 6170 736e 6f69 206e 5028     mat expansion (P
   ed624:	656c 7361 2065 7573 6d62 7469 6620 6c75     lease submit ful
   ed634:	206c 7562 2067 6572 6f70 7472 6120 2074     l bug report at 
   ed644:	7468 7074 3a73 2f2f 6367 2e63 6e67 2e75     https://gcc.gnu.
   ed654:	726f 2f67 7562 7367 292f 0a3a 2020 2020     org/bugs/):.    
   ed664:	3000 3231 3433 3635 3837 0039 6162 6973     .0123456789.basi
   ed674:	5f63 7473 6972 676e 3a3a 4d5f 635f 6572     c_string::_M_cre
   ed684:	7461 0065 7325 203a 5f5f 6f70 2073 7728     ate.%s: __pos (w
   ed694:	6968 6863 6920 2073 7a25 2975 3e20 7420     hich is %zu) > t
   ed6a4:	6968 2d73 733e 7a69 2865 2029 7728 6968     his->size() (whi
   ed6b4:	6863 6920 2073 7a25 2975 6200 7361 6369     ch is %zu).basic
   ed6c4:	735f 7274 6e69 3a67 623a 7361 6369 735f     _string::basic_s
   ed6d4:	7274 6e69 0067 6162 6973 5f63 7473 6972     tring.basic_stri
   ed6e4:	676e 3a3a 7573 7362 7274 0000               ng::substr..

000ed6f0 <_ZTIN10__cxxabiv117__class_type_infoE>:
   ed6f0:	d788 000e d6fc 000e d7ac 000e               ............

000ed6fc <_ZTSN10__cxxabiv117__class_type_infoE>:
   ed6fc:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   ed70c:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   ed71c:	0045 0000                                   E...

000ed720 <_ZTVN10__cxxabiv117__class_type_infoE>:
   ed720:	0000 0000 d6f0 000e 79d9 000e 79ed 000e     .........y...y..
   ed730:	7b81 000e 7b81 000e 7a57 000e 7999 000e     .{...{..Wz...y..
   ed740:	7a3f 000e 7a01 000e 79cd 000e               ?z...z...y..

000ed74c <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   ed74c:	d788 000e d758 000e d6f0 000e               ....X.......

000ed758 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   ed758:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   ed768:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   ed778:	666e 456f 0000 0000                         nfoE....

000ed780 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   ed780:	0000 0000 d74c 000e 7a81 000e 7a95 000e     ....L....z...z..
   ed790:	7b81 000e 7b81 000e 7a57 000e 7999 000e     .{...{..Wz...y..
   ed7a0:	7b55 000e 7ae1 000e 7aa9 000e               U{...z...z..

000ed7ac <_ZTISt9type_info>:
   ed7ac:	d728 000e d7b4 000e                         (.......

000ed7b4 <_ZTSSt9type_info>:
   ed7b4:	7453 7439 7079 5f65 6e69 6f66 0000 0000     St9type_info....

000ed7c4 <__sf_fake_stderr>:
	...

000ed7e4 <__sf_fake_stdin>:
	...

000ed804 <__sf_fake_stdout>:
	...
   ed824:	666e 6900 696e 7974 6100 006e               nf.inity.an.

000ed830 <fpi.7566>:
   ed830:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   ed840:	0000 0000                                   ....

000ed844 <fpinan.7602>:
   ed844:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   ed854:	0000 0000                                   ....

000ed858 <tinytens>:
   ed858:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   ed868:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   ed878:	6f43 64ac 0628 1168                         Co.d(.h.

000ed880 <_ctype_>:
   ed880:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   ed890:	2020 2020 2020 2020 2020 2020 2020 2020                     
   ed8a0:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   ed8b0:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   ed8c0:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   ed8d0:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   ed8e0:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   ed8f0:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   ed900:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000ed984 <_C_numeric_locale>:
   ed984:	bc47 000e b611 000e acf4 2003 4f50 4953     G.......... POSI
   ed994:	0058 0000                                   X...

000ed998 <__mprec_bigtens>:
   ed998:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   ed9a8:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   ed9b8:	bf3c 7f73 4fdd 7515                         <.s..O.u

000ed9c0 <__mprec_tens>:
   ed9c0:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   ed9d0:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   ed9e0:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   ed9f0:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   eda00:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   eda10:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   eda20:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   eda30:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   eda40:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   eda50:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   eda60:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   eda70:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   eda80:	9db4 79d9 7843 44ea                         ...yCx.D

000eda88 <p05.7490>:
   eda88:	0005 0000 0019 0000 007d 0000               ........}...

000eda94 <link_const_variable_data_end>:
   eda94:	000d451d 	.word	0x000d451d
   eda98:	000e58a9 	.word	0x000e58a9
   eda9c:	000e5b01 	.word	0x000e5b01
   edaa0:	000e5e3d 	.word	0x000e5e3d
   edaa4:	000e5f45 	.word	0x000e5f45
   edaa8:	000e5f55 	.word	0x000e5f55
   edaac:	000e6341 	.word	0x000e6341
   edab0:	000e6df1 	.word	0x000e6df1
   edab4:	000e6f41 	.word	0x000e6f41

000edab8 <link_constructors_end>:
	...
